
LoRa_v0.6_Modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .text         00018fa8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00018fa8  00018fa8  00028fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000008c  20000000  00018fb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  0003008c  2**0
                  CONTENTS
  4 .bss          0000344c  20000090  00019040  0003008c  2**3
                  ALLOC
  5 .stack        00002004  200034dc  0001c48c  0003008c  2**0
=======
  0 .text         00018da8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00018da8  00018da8  00028da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000008c  20000000  00018db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  0003008c  2**0
                  CONTENTS
  4 .bss          0000344c  20000090  00018e40  0003008c  2**3
                  ALLOC
  5 .stack        00002004  200034dc  0001c28c  0003008c  2**0
>>>>>>> Stashed changes
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  8 .debug_info   00098588  00000000  00000000  00030140  2**0
=======
  8 .debug_info   00098475  00000000  00000000  00030140  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d938  00000000  00000000  000c85b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001df70  00000000  00000000  000d5eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001978  00000000  00000000  000f3e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002560  00000000  00000000  000f57d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001bfdc  00000000  00000000  000f7d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036046  00000000  00000000  00113d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5e36  00000000  00000000  00149d57  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< Updated upstream
 16 .debug_frame  00005230  00000000  00000000  001ffc68  2**2
=======
  8 .debug_info   000985a6  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d969  00000000  00000000  000c86e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001df21  00000000  00000000  000d604f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001978  00000000  00000000  000f3f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002560  00000000  00000000  000f58e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001bfe9  00000000  00000000  000f7e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003607a  00000000  00000000  00113e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5e85  00000000  00000000  00149eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005234  00000000  00000000  001ffd30  2**2
>>>>>>> Stashed changes
=======
 16 .debug_frame  00005224  00000000  00000000  001ffb90  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 54 00 20 89 70 00 00 85 70 00 00 85 70 00 00     .T. .p...p...p..
	...
      2c:	85 70 00 00 00 00 00 00 00 00 00 00 85 70 00 00     .p...........p..
      3c:	85 70 00 00 85 70 00 00 85 70 00 00 3d 4d 00 00     .p...p...p..=M..
      4c:	71 48 00 00 85 70 00 00 85 70 00 00 85 70 00 00     qH...p...p...p..
      5c:	85 70 00 00 15 58 00 00 25 58 00 00 35 58 00 00     .p...X..%X..5X..
      6c:	45 58 00 00 55 58 00 00 65 58 00 00 85 70 00 00     EX..UX..eX...p..
      7c:	85 70 00 00 85 70 00 00 59 6c 00 00 69 6c 00 00     .p...p..Yl..il..
      8c:	85 70 00 00 85 70 00 00 79 6c 00 00 85 70 00 00     .p...p..yl...p..
      9c:	85 70 00 00 85 70 00 00 85 70 00 00 e9 47 00 00     .p...p...p...G..
      ac:	85 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .p..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <pds_ff_PDS_FREEZER>:
    4400:	00010006 200002a4 00000000 00000000     ....... ........

00004410 <pds_ff_PDS_EDC_ID>:
    4410:	00010007 200026c5 00000000 00000000     .....&. ........

00004420 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    4420:	00320005 20002668 00000000 00000000     ..2.h&. ........

00004430 <pds_ff_PDS_CONNECTION_MODE_ID>:
    4430:	00010004 20000018 00000000 00000000     ....... ........

00004440 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    4440:	00010003 20000019 00000000 00000000     ....... ........

00004450 <pds_ff_PDS_PANID_ID>:
    4450:	00020002 200026bc 00000000 00000000     .....&. ........

00004460 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    4460:	00040001 20002128 00000000 00000000     ....(!. ........

00004470 <__do_global_dtors_aux>:
    4470:	b510      	push	{r4, lr}
    4472:	4c06      	ldr	r4, [pc, #24]	; (448c <__do_global_dtors_aux+0x1c>)
    4474:	7823      	ldrb	r3, [r4, #0]
    4476:	2b00      	cmp	r3, #0
    4478:	d107      	bne.n	448a <__do_global_dtors_aux+0x1a>
    447a:	4b05      	ldr	r3, [pc, #20]	; (4490 <__do_global_dtors_aux+0x20>)
    447c:	2b00      	cmp	r3, #0
    447e:	d002      	beq.n	4486 <__do_global_dtors_aux+0x16>
    4480:	4804      	ldr	r0, [pc, #16]	; (4494 <__do_global_dtors_aux+0x24>)
    4482:	e000      	b.n	4486 <__do_global_dtors_aux+0x16>
    4484:	bf00      	nop
    4486:	2301      	movs	r3, #1
    4488:	7023      	strb	r3, [r4, #0]
    448a:	bd10      	pop	{r4, pc}
    448c:	20000090 	.word	0x20000090
    4490:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
    4494:	00018fb0 	.word	0x00018fb0
=======
    4494:	00018db0 	.word	0x00018db0
>>>>>>> Stashed changes

00004498 <frame_dummy>:
    4498:	4b08      	ldr	r3, [pc, #32]	; (44bc <frame_dummy+0x24>)
    449a:	b510      	push	{r4, lr}
    449c:	2b00      	cmp	r3, #0
    449e:	d003      	beq.n	44a8 <frame_dummy+0x10>
    44a0:	4907      	ldr	r1, [pc, #28]	; (44c0 <frame_dummy+0x28>)
    44a2:	4808      	ldr	r0, [pc, #32]	; (44c4 <frame_dummy+0x2c>)
    44a4:	e000      	b.n	44a8 <frame_dummy+0x10>
    44a6:	bf00      	nop
    44a8:	4807      	ldr	r0, [pc, #28]	; (44c8 <frame_dummy+0x30>)
    44aa:	6803      	ldr	r3, [r0, #0]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d100      	bne.n	44b2 <frame_dummy+0x1a>
    44b0:	bd10      	pop	{r4, pc}
    44b2:	4b06      	ldr	r3, [pc, #24]	; (44cc <frame_dummy+0x34>)
    44b4:	2b00      	cmp	r3, #0
    44b6:	d0fb      	beq.n	44b0 <frame_dummy+0x18>
    44b8:	4798      	blx	r3
    44ba:	e7f9      	b.n	44b0 <frame_dummy+0x18>
    44bc:	00000000 	.word	0x00000000
    44c0:	20000094 	.word	0x20000094
<<<<<<< Updated upstream
    44c4:	00018fb0 	.word	0x00018fb0
    44c8:	00018fb0 	.word	0x00018fb0
=======
    44c4:	00018db0 	.word	0x00018db0
    44c8:	00018db0 	.word	0x00018db0
>>>>>>> Stashed changes
    44cc:	00000000 	.word	0x00000000

000044d0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    44d0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    44d2:	2000      	movs	r0, #0
    44d4:	4b08      	ldr	r3, [pc, #32]	; (44f8 <delay_init+0x28>)
    44d6:	4798      	blx	r3
    44d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    44da:	4c08      	ldr	r4, [pc, #32]	; (44fc <delay_init+0x2c>)
    44dc:	21fa      	movs	r1, #250	; 0xfa
    44de:	0089      	lsls	r1, r1, #2
    44e0:	47a0      	blx	r4
    44e2:	4b07      	ldr	r3, [pc, #28]	; (4500 <delay_init+0x30>)
    44e4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    44e6:	4907      	ldr	r1, [pc, #28]	; (4504 <delay_init+0x34>)
    44e8:	0028      	movs	r0, r5
    44ea:	47a0      	blx	r4
    44ec:	4b06      	ldr	r3, [pc, #24]	; (4508 <delay_init+0x38>)
    44ee:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    44f0:	2205      	movs	r2, #5
    44f2:	4b06      	ldr	r3, [pc, #24]	; (450c <delay_init+0x3c>)
    44f4:	601a      	str	r2, [r3, #0]
}
    44f6:	bd70      	pop	{r4, r5, r6, pc}
    44f8:	00006989 	.word	0x00006989
<<<<<<< Updated upstream
    44fc:	000135d5 	.word	0x000135d5
=======
    44fc:	00013529 	.word	0x00013529
>>>>>>> Stashed changes
    4500:	20000000 	.word	0x20000000
    4504:	000f4240 	.word	0x000f4240
    4508:	20000004 	.word	0x20000004
    450c:	e000e010 	.word	0xe000e010

00004510 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4510:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4512:	4b08      	ldr	r3, [pc, #32]	; (4534 <delay_cycles_us+0x24>)
    4514:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    4516:	4a08      	ldr	r2, [pc, #32]	; (4538 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4518:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    451a:	2180      	movs	r1, #128	; 0x80
    451c:	0249      	lsls	r1, r1, #9
	while (n--) {
    451e:	3801      	subs	r0, #1
    4520:	d307      	bcc.n	4532 <delay_cycles_us+0x22>
	if (n > 0) {
    4522:	2c00      	cmp	r4, #0
    4524:	d0fb      	beq.n	451e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4526:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4528:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    452a:	6813      	ldr	r3, [r2, #0]
    452c:	420b      	tst	r3, r1
    452e:	d0fc      	beq.n	452a <delay_cycles_us+0x1a>
    4530:	e7f5      	b.n	451e <delay_cycles_us+0xe>
	}
}
    4532:	bd30      	pop	{r4, r5, pc}
    4534:	20000004 	.word	0x20000004
    4538:	e000e010 	.word	0xe000e010

0000453c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    453c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    453e:	4b08      	ldr	r3, [pc, #32]	; (4560 <delay_cycles_ms+0x24>)
    4540:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4542:	4a08      	ldr	r2, [pc, #32]	; (4564 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4544:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4546:	2180      	movs	r1, #128	; 0x80
    4548:	0249      	lsls	r1, r1, #9
	while (n--) {
    454a:	3801      	subs	r0, #1
    454c:	d307      	bcc.n	455e <delay_cycles_ms+0x22>
	if (n > 0) {
    454e:	2c00      	cmp	r4, #0
    4550:	d0fb      	beq.n	454a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4552:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4554:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4556:	6813      	ldr	r3, [r2, #0]
    4558:	420b      	tst	r3, r1
    455a:	d0fc      	beq.n	4556 <delay_cycles_ms+0x1a>
    455c:	e7f5      	b.n	454a <delay_cycles_ms+0xe>
	}
}
    455e:	bd30      	pop	{r4, r5, pc}
    4560:	20000000 	.word	0x20000000
    4564:	e000e010 	.word	0xe000e010

00004568 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4568:	4b0c      	ldr	r3, [pc, #48]	; (459c <cpu_irq_enter_critical+0x34>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	2b00      	cmp	r3, #0
    456e:	d106      	bne.n	457e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4570:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4574:	2b00      	cmp	r3, #0
    4576:	d007      	beq.n	4588 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4578:	2200      	movs	r2, #0
    457a:	4b09      	ldr	r3, [pc, #36]	; (45a0 <cpu_irq_enter_critical+0x38>)
    457c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    457e:	4a07      	ldr	r2, [pc, #28]	; (459c <cpu_irq_enter_critical+0x34>)
    4580:	6813      	ldr	r3, [r2, #0]
    4582:	3301      	adds	r3, #1
    4584:	6013      	str	r3, [r2, #0]
}
    4586:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4588:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    458a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    458e:	2200      	movs	r2, #0
    4590:	4b04      	ldr	r3, [pc, #16]	; (45a4 <cpu_irq_enter_critical+0x3c>)
    4592:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4594:	3201      	adds	r2, #1
    4596:	4b02      	ldr	r3, [pc, #8]	; (45a0 <cpu_irq_enter_critical+0x38>)
    4598:	701a      	strb	r2, [r3, #0]
    459a:	e7f0      	b.n	457e <cpu_irq_enter_critical+0x16>
    459c:	200000ac 	.word	0x200000ac
    45a0:	200000b0 	.word	0x200000b0
    45a4:	20000008 	.word	0x20000008

000045a8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    45a8:	4b08      	ldr	r3, [pc, #32]	; (45cc <cpu_irq_leave_critical+0x24>)
    45aa:	681a      	ldr	r2, [r3, #0]
    45ac:	3a01      	subs	r2, #1
    45ae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d109      	bne.n	45ca <cpu_irq_leave_critical+0x22>
    45b6:	4b06      	ldr	r3, [pc, #24]	; (45d0 <cpu_irq_leave_critical+0x28>)
    45b8:	781b      	ldrb	r3, [r3, #0]
    45ba:	2b00      	cmp	r3, #0
    45bc:	d005      	beq.n	45ca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    45be:	2201      	movs	r2, #1
    45c0:	4b04      	ldr	r3, [pc, #16]	; (45d4 <cpu_irq_leave_critical+0x2c>)
    45c2:	701a      	strb	r2, [r3, #0]
    45c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45c8:	b662      	cpsie	i
	}
}
    45ca:	4770      	bx	lr
    45cc:	200000ac 	.word	0x200000ac
    45d0:	200000b0 	.word	0x200000b0
    45d4:	20000008 	.word	0x20000008

000045d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45da:	46c6      	mov	lr, r8
    45dc:	b500      	push	{lr}
    45de:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    45e0:	ac01      	add	r4, sp, #4
    45e2:	2501      	movs	r5, #1
    45e4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    45e6:	2300      	movs	r3, #0
    45e8:	4698      	mov	r8, r3
    45ea:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45ec:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    45ee:	0021      	movs	r1, r4
    45f0:	2013      	movs	r0, #19
    45f2:	4e12      	ldr	r6, [pc, #72]	; (463c <system_board_init+0x64>)
    45f4:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    45f6:	4f12      	ldr	r7, [pc, #72]	; (4640 <system_board_init+0x68>)
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	031b      	lsls	r3, r3, #12
    45fc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4600:	0021      	movs	r1, r4
    4602:	2012      	movs	r0, #18
    4604:	47b0      	blx	r6
    4606:	2380      	movs	r3, #128	; 0x80
    4608:	02db      	lsls	r3, r3, #11
    460a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    460c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    460e:	0021      	movs	r1, r4
    4610:	200d      	movs	r0, #13
    4612:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4614:	2380      	movs	r3, #128	; 0x80
    4616:	019b      	lsls	r3, r3, #6
    4618:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    461a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    461c:	0021      	movs	r1, r4
    461e:	2009      	movs	r0, #9
    4620:	47b0      	blx	r6
    4622:	2380      	movs	r3, #128	; 0x80
    4624:	009b      	lsls	r3, r3, #2
    4626:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4628:	4643      	mov	r3, r8
    462a:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    462c:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    462e:	0021      	movs	r1, r4
    4630:	201c      	movs	r0, #28
    4632:	47b0      	blx	r6
		
}
    4634:	b002      	add	sp, #8
    4636:	bc04      	pop	{r2}
    4638:	4690      	mov	r8, r2
    463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    463c:	00004ca1 	.word	0x00004ca1
    4640:	40002800 	.word	0x40002800

00004644 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4644:	2301      	movs	r3, #1
    4646:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4648:	2300      	movs	r3, #0
    464a:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    464c:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    464e:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4650:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4652:	220f      	movs	r2, #15
    4654:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4656:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4658:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    465a:	7203      	strb	r3, [r0, #8]
}
    465c:	4770      	bx	lr

0000465e <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    465e:	6802      	ldr	r2, [r0, #0]
    4660:	6813      	ldr	r3, [r2, #0]
    4662:	2102      	movs	r1, #2
    4664:	430b      	orrs	r3, r1
    4666:	6013      	str	r3, [r2, #0]

}
    4668:	4770      	bx	lr

0000466a <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    466a:	2303      	movs	r3, #3
    466c:	6802      	ldr	r2, [r0, #0]
    466e:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4670:	6802      	ldr	r2, [r0, #0]
    4672:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4674:	6802      	ldr	r2, [r0, #0]
    4676:	6813      	ldr	r3, [r2, #0]
    4678:	2102      	movs	r1, #2
    467a:	438b      	bics	r3, r1
    467c:	6013      	str	r3, [r2, #0]
}
    467e:	4770      	bx	lr

00004680 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4680:	b570      	push	{r4, r5, r6, lr}
    4682:	0004      	movs	r4, r0
    4684:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4686:	78d3      	ldrb	r3, [r2, #3]
    4688:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    468a:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    468c:	7853      	ldrb	r3, [r2, #1]
    468e:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4690:	7913      	ldrb	r3, [r2, #4]
    4692:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4694:	7813      	ldrb	r3, [r2, #0]
    4696:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4698:	7891      	ldrb	r1, [r2, #2]
    469a:	02c9      	lsls	r1, r1, #11
    469c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    469e:	7851      	ldrb	r1, [r2, #1]
    46a0:	0209      	lsls	r1, r1, #8
    46a2:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    46a4:	78d1      	ldrb	r1, [r2, #3]
    46a6:	0089      	lsls	r1, r1, #2
    46a8:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    46aa:	7911      	ldrb	r1, [r2, #4]
    46ac:	0149      	lsls	r1, r1, #5
    46ae:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    46b0:	7991      	ldrb	r1, [r2, #6]
    46b2:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    46b4:	79d0      	ldrb	r0, [r2, #7]
    46b6:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    46b8:	4301      	orrs	r1, r0
    46ba:	7a10      	ldrb	r0, [r2, #8]
    46bc:	0300      	lsls	r0, r0, #12
    46be:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    46c0:	7952      	ldrb	r2, [r2, #5]
    46c2:	0412      	lsls	r2, r2, #16
    46c4:	20f0      	movs	r0, #240	; 0xf0
    46c6:	0300      	lsls	r0, r0, #12
    46c8:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    46ca:	430a      	orrs	r2, r1
    46cc:	4313      	orrs	r3, r2
    46ce:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    46d0:	682b      	ldr	r3, [r5, #0]
    46d2:	079b      	lsls	r3, r3, #30
    46d4:	d401      	bmi.n	46da <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    46d6:	602e      	str	r6, [r5, #0]
	}
}
    46d8:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    46da:	0020      	movs	r0, r4
    46dc:	4b03      	ldr	r3, [pc, #12]	; (46ec <aes_set_config+0x6c>)
    46de:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    46e0:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    46e2:	0020      	movs	r0, r4
    46e4:	4b02      	ldr	r3, [pc, #8]	; (46f0 <aes_set_config+0x70>)
    46e6:	4798      	blx	r3
    46e8:	e7f6      	b.n	46d8 <aes_set_config+0x58>
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	0000466b 	.word	0x0000466b
    46f0:	0000465f 	.word	0x0000465f

000046f4 <aes_init>:
{
    46f4:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    46f6:	4c05      	ldr	r4, [pc, #20]	; (470c <aes_init+0x18>)
    46f8:	69e5      	ldr	r5, [r4, #28]
    46fa:	2380      	movs	r3, #128	; 0x80
    46fc:	019b      	lsls	r3, r3, #6
    46fe:	432b      	orrs	r3, r5
    4700:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4702:	2301      	movs	r3, #1
    4704:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4706:	4b02      	ldr	r3, [pc, #8]	; (4710 <aes_init+0x1c>)
    4708:	4798      	blx	r3
}
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	40000400 	.word	0x40000400
    4710:	00004681 	.word	0x00004681

00004714 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4714:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4716:	7943      	ldrb	r3, [r0, #5]
    4718:	2b01      	cmp	r3, #1
    471a:	d005      	beq.n	4728 <aes_write_key+0x14>
    471c:	2b00      	cmp	r3, #0
    471e:	d010      	beq.n	4742 <aes_write_key+0x2e>
    4720:	2b02      	cmp	r3, #2
    4722:	d10d      	bne.n	4740 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4724:	2508      	movs	r5, #8
    4726:	e000      	b.n	472a <aes_write_key+0x16>
		key_length = 6;
    4728:	2506      	movs	r5, #6
{
    472a:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    472c:	c910      	ldmia	r1!, {r4}
    472e:	1c9a      	adds	r2, r3, #2
    4730:	0092      	lsls	r2, r2, #2
    4732:	6806      	ldr	r6, [r0, #0]
    4734:	46b4      	mov	ip, r6
    4736:	4462      	add	r2, ip
    4738:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    473a:	3301      	adds	r3, #1
    473c:	42ab      	cmp	r3, r5
    473e:	d3f5      	bcc.n	472c <aes_write_key+0x18>
		key++;
	}
}
    4740:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4742:	2504      	movs	r5, #4
    4744:	e7f1      	b.n	472a <aes_write_key+0x16>
    4746:	Address 0x00004746 is out of bounds.


00004748 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4748:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    474a:	2300      	movs	r3, #0
    474c:	6802      	ldr	r2, [r0, #0]
    474e:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4750:	4b0f      	ldr	r3, [pc, #60]	; (4790 <aes_write_input_data+0x48>)
    4752:	6842      	ldr	r2, [r0, #4]
    4754:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4756:	4a0f      	ldr	r2, [pc, #60]	; (4794 <aes_write_input_data+0x4c>)
    4758:	4293      	cmp	r3, r2
    475a:	d00a      	beq.n	4772 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    475c:	7903      	ldrb	r3, [r0, #4]
    475e:	2b03      	cmp	r3, #3
    4760:	d00e      	beq.n	4780 <aes_write_input_data+0x38>
    4762:	000c      	movs	r4, r1
    4764:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4766:	6803      	ldr	r3, [r0, #0]
    4768:	c904      	ldmia	r1!, {r2}
    476a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    476c:	428c      	cmp	r4, r1
    476e:	d1fa      	bne.n	4766 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4770:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4772:	6803      	ldr	r3, [r0, #0]
    4774:	680a      	ldr	r2, [r1, #0]
    4776:	639a      	str	r2, [r3, #56]	; 0x38
    4778:	6803      	ldr	r3, [r0, #0]
    477a:	684a      	ldr	r2, [r1, #4]
    477c:	639a      	str	r2, [r3, #56]	; 0x38
    477e:	e7f7      	b.n	4770 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4780:	7983      	ldrb	r3, [r0, #6]
    4782:	3b02      	subs	r3, #2
    4784:	2b01      	cmp	r3, #1
    4786:	d8ec      	bhi.n	4762 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4788:	6803      	ldr	r3, [r0, #0]
    478a:	680a      	ldr	r2, [r1, #0]
    478c:	639a      	str	r2, [r3, #56]	; 0x38
    478e:	e7ef      	b.n	4770 <aes_write_input_data+0x28>
    4790:	00ff00ff 	.word	0x00ff00ff
    4794:	00010003 	.word	0x00010003

00004798 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4798:	2300      	movs	r3, #0
    479a:	6802      	ldr	r2, [r0, #0]
    479c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    479e:	4b10      	ldr	r3, [pc, #64]	; (47e0 <aes_read_output_data+0x48>)
    47a0:	6842      	ldr	r2, [r0, #4]
    47a2:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    47a4:	4a0f      	ldr	r2, [pc, #60]	; (47e4 <aes_read_output_data+0x4c>)
    47a6:	4293      	cmp	r3, r2
    47a8:	d00a      	beq.n	47c0 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    47aa:	7903      	ldrb	r3, [r0, #4]
    47ac:	2b03      	cmp	r3, #3
    47ae:	d00e      	beq.n	47ce <aes_read_output_data+0x36>
    47b0:	000a      	movs	r2, r1
    47b2:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    47b4:	6803      	ldr	r3, [r0, #0]
    47b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47b8:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    47ba:	428a      	cmp	r2, r1
    47bc:	d1fa      	bne.n	47b4 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    47be:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    47c0:	6803      	ldr	r3, [r0, #0]
    47c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47c4:	600b      	str	r3, [r1, #0]
    47c6:	6803      	ldr	r3, [r0, #0]
    47c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47ca:	604b      	str	r3, [r1, #4]
    47cc:	e7f7      	b.n	47be <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    47ce:	7983      	ldrb	r3, [r0, #6]
    47d0:	3b02      	subs	r3, #2
    47d2:	2b01      	cmp	r3, #1
    47d4:	d8ec      	bhi.n	47b0 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    47d6:	6803      	ldr	r3, [r0, #0]
    47d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47da:	600b      	str	r3, [r1, #0]
    47dc:	e7ef      	b.n	47be <aes_read_output_data+0x26>
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	00ff00ff 	.word	0x00ff00ff
    47e4:	00010003 	.word	0x00010003

000047e8 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    47e8:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    47ea:	4b0c      	ldr	r3, [pc, #48]	; (481c <AES_Handler+0x34>)
    47ec:	79dc      	ldrb	r4, [r3, #7]
    47ee:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    47f0:	07e3      	lsls	r3, r4, #31
    47f2:	d507      	bpl.n	4804 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    47f4:	4b0a      	ldr	r3, [pc, #40]	; (4820 <AES_Handler+0x38>)
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d00d      	beq.n	4818 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    47fc:	2101      	movs	r1, #1
    47fe:	4a07      	ldr	r2, [pc, #28]	; (481c <AES_Handler+0x34>)
    4800:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4802:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4804:	07a3      	lsls	r3, r4, #30
    4806:	d507      	bpl.n	4818 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4808:	4b05      	ldr	r3, [pc, #20]	; (4820 <AES_Handler+0x38>)
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	2b00      	cmp	r3, #0
    480e:	d003      	beq.n	4818 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4810:	2102      	movs	r1, #2
    4812:	4a02      	ldr	r2, [pc, #8]	; (481c <AES_Handler+0x34>)
    4814:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4816:	4798      	blx	r3
		}
	}
}
    4818:	bd10      	pop	{r4, pc}
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	42003400 	.word	0x42003400
    4820:	200000b4 	.word	0x200000b4

00004824 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4824:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4826:	2a00      	cmp	r2, #0
    4828:	d001      	beq.n	482e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    482a:	0018      	movs	r0, r3
    482c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    482e:	008b      	lsls	r3, r1, #2
    4830:	4a06      	ldr	r2, [pc, #24]	; (484c <extint_register_callback+0x28>)
    4832:	589b      	ldr	r3, [r3, r2]
    4834:	2b00      	cmp	r3, #0
    4836:	d003      	beq.n	4840 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4838:	4283      	cmp	r3, r0
    483a:	d005      	beq.n	4848 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    483c:	231d      	movs	r3, #29
    483e:	e7f4      	b.n	482a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4840:	0089      	lsls	r1, r1, #2
    4842:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4844:	2300      	movs	r3, #0
    4846:	e7f0      	b.n	482a <extint_register_callback+0x6>
		return STATUS_OK;
    4848:	2300      	movs	r3, #0
    484a:	e7ee      	b.n	482a <extint_register_callback+0x6>
    484c:	20001ee8 	.word	0x20001ee8

00004850 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4850:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4852:	2900      	cmp	r1, #0
    4854:	d001      	beq.n	485a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4856:	0018      	movs	r0, r3
    4858:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    485a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    485c:	281f      	cmp	r0, #31
    485e:	d800      	bhi.n	4862 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4860:	4a02      	ldr	r2, [pc, #8]	; (486c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4862:	2301      	movs	r3, #1
    4864:	4083      	lsls	r3, r0
    4866:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4868:	2300      	movs	r3, #0
    486a:	e7f4      	b.n	4856 <extint_chan_enable_callback+0x6>
    486c:	40002400 	.word	0x40002400

00004870 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4870:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4872:	2200      	movs	r2, #0
    4874:	4b10      	ldr	r3, [pc, #64]	; (48b8 <EIC_Handler+0x48>)
    4876:	701a      	strb	r2, [r3, #0]
    4878:	2300      	movs	r3, #0
    487a:	4910      	ldr	r1, [pc, #64]	; (48bc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    487c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    487e:	4e10      	ldr	r6, [pc, #64]	; (48c0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4880:	4c0d      	ldr	r4, [pc, #52]	; (48b8 <EIC_Handler+0x48>)
    4882:	e00a      	b.n	489a <EIC_Handler+0x2a>
		return eics[eic_index];
    4884:	490d      	ldr	r1, [pc, #52]	; (48bc <EIC_Handler+0x4c>)
    4886:	e008      	b.n	489a <EIC_Handler+0x2a>
    4888:	7823      	ldrb	r3, [r4, #0]
    488a:	3301      	adds	r3, #1
    488c:	b2db      	uxtb	r3, r3
    488e:	7023      	strb	r3, [r4, #0]
    4890:	2b0f      	cmp	r3, #15
    4892:	d810      	bhi.n	48b6 <EIC_Handler+0x46>
		return NULL;
    4894:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4896:	2b1f      	cmp	r3, #31
    4898:	d9f4      	bls.n	4884 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    489a:	0028      	movs	r0, r5
    489c:	4018      	ands	r0, r3
    489e:	2201      	movs	r2, #1
    48a0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    48a2:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    48a4:	4210      	tst	r0, r2
    48a6:	d0ef      	beq.n	4888 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    48a8:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48aa:	009b      	lsls	r3, r3, #2
    48ac:	599b      	ldr	r3, [r3, r6]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d0ea      	beq.n	4888 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    48b2:	4798      	blx	r3
    48b4:	e7e8      	b.n	4888 <EIC_Handler+0x18>
			}
		}
	}
}
    48b6:	bd70      	pop	{r4, r5, r6, pc}
    48b8:	20001ee4 	.word	0x20001ee4
    48bc:	40002400 	.word	0x40002400
    48c0:	20001ee8 	.word	0x20001ee8

000048c4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    48c4:	4a06      	ldr	r2, [pc, #24]	; (48e0 <_extint_enable+0x1c>)
    48c6:	7813      	ldrb	r3, [r2, #0]
    48c8:	2102      	movs	r1, #2
    48ca:	430b      	orrs	r3, r1
    48cc:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ce:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48d0:	6853      	ldr	r3, [r2, #4]
    48d2:	4219      	tst	r1, r3
    48d4:	d1fc      	bne.n	48d0 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48d6:	6853      	ldr	r3, [r2, #4]
    48d8:	4218      	tst	r0, r3
    48da:	d1f9      	bne.n	48d0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48dc:	4770      	bx	lr
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	40002400 	.word	0x40002400

000048e4 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    48e4:	4a06      	ldr	r2, [pc, #24]	; (4900 <_extint_disable+0x1c>)
    48e6:	7813      	ldrb	r3, [r2, #0]
    48e8:	2102      	movs	r1, #2
    48ea:	438b      	bics	r3, r1
    48ec:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ee:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48f0:	6853      	ldr	r3, [r2, #4]
    48f2:	4219      	tst	r1, r3
    48f4:	d1fc      	bne.n	48f0 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48f6:	6853      	ldr	r3, [r2, #4]
    48f8:	4218      	tst	r0, r3
    48fa:	d1f9      	bne.n	48f0 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48fc:	4770      	bx	lr
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	40002400 	.word	0x40002400

00004904 <_system_extint_init>:
{
    4904:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4906:	4a12      	ldr	r2, [pc, #72]	; (4950 <_system_extint_init+0x4c>)
    4908:	6951      	ldr	r1, [r2, #20]
    490a:	2380      	movs	r3, #128	; 0x80
    490c:	009b      	lsls	r3, r3, #2
    490e:	430b      	orrs	r3, r1
    4910:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4912:	4a10      	ldr	r2, [pc, #64]	; (4954 <_system_extint_init+0x50>)
    4914:	7813      	ldrb	r3, [r2, #0]
    4916:	2101      	movs	r1, #1
    4918:	430b      	orrs	r3, r1
    491a:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    491c:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    491e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4920:	6853      	ldr	r3, [r2, #4]
    4922:	4219      	tst	r1, r3
    4924:	d1fc      	bne.n	4920 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4926:	6853      	ldr	r3, [r2, #4]
    4928:	4218      	tst	r0, r3
    492a:	d1f9      	bne.n	4920 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    492c:	4a09      	ldr	r2, [pc, #36]	; (4954 <_system_extint_init+0x50>)
    492e:	7813      	ldrb	r3, [r2, #0]
    4930:	2110      	movs	r1, #16
    4932:	430b      	orrs	r3, r1
    4934:	7013      	strb	r3, [r2, #0]
    4936:	4b08      	ldr	r3, [pc, #32]	; (4958 <_system_extint_init+0x54>)
    4938:	0019      	movs	r1, r3
    493a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    493c:	2200      	movs	r2, #0
    493e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4940:	428b      	cmp	r3, r1
    4942:	d1fc      	bne.n	493e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4944:	2208      	movs	r2, #8
    4946:	4b05      	ldr	r3, [pc, #20]	; (495c <_system_extint_init+0x58>)
    4948:	601a      	str	r2, [r3, #0]
	_extint_enable();
    494a:	4b05      	ldr	r3, [pc, #20]	; (4960 <_system_extint_init+0x5c>)
    494c:	4798      	blx	r3
}
    494e:	bd10      	pop	{r4, pc}
    4950:	40000400 	.word	0x40000400
    4954:	40002400 	.word	0x40002400
    4958:	20001ee8 	.word	0x20001ee8
    495c:	e000e100 	.word	0xe000e100
    4960:	000048c5 	.word	0x000048c5

00004964 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4964:	2300      	movs	r3, #0
    4966:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4968:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    496a:	2201      	movs	r2, #1
    496c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    496e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4970:	3201      	adds	r2, #1
    4972:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4974:	7243      	strb	r3, [r0, #9]
}
    4976:	4770      	bx	lr

00004978 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4978:	b5f0      	push	{r4, r5, r6, r7, lr}
    497a:	b083      	sub	sp, #12
    497c:	0005      	movs	r5, r0
    497e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4980:	4b1c      	ldr	r3, [pc, #112]	; (49f4 <extint_chan_set_config+0x7c>)
    4982:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4984:	a901      	add	r1, sp, #4
    4986:	2300      	movs	r3, #0
    4988:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    498a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    498c:	7923      	ldrb	r3, [r4, #4]
    498e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4990:	7a23      	ldrb	r3, [r4, #8]
    4992:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4994:	7820      	ldrb	r0, [r4, #0]
    4996:	4b18      	ldr	r3, [pc, #96]	; (49f8 <extint_chan_set_config+0x80>)
    4998:	4798      	blx	r3
		return NULL;
    499a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    499c:	2d1f      	cmp	r5, #31
    499e:	d800      	bhi.n	49a2 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    49a0:	4916      	ldr	r1, [pc, #88]	; (49fc <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    49a2:	2207      	movs	r2, #7
    49a4:	402a      	ands	r2, r5
    49a6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    49a8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    49aa:	7aa3      	ldrb	r3, [r4, #10]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d001      	beq.n	49b4 <extint_chan_set_config+0x3c>
    49b0:	2308      	movs	r3, #8
    49b2:	431f      	orrs	r7, r3
    49b4:	08eb      	lsrs	r3, r5, #3
    49b6:	009b      	lsls	r3, r3, #2
    49b8:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    49ba:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49bc:	260f      	movs	r6, #15
    49be:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    49c0:	43b0      	bics	r0, r6
			(new_config << config_pos);
    49c2:	4097      	lsls	r7, r2
    49c4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49c6:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    49c8:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    49ca:	7a63      	ldrb	r3, [r4, #9]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d10b      	bne.n	49e8 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    49d0:	698a      	ldr	r2, [r1, #24]
    49d2:	2301      	movs	r3, #1
    49d4:	40ab      	lsls	r3, r5
    49d6:	43db      	mvns	r3, r3
    49d8:	041b      	lsls	r3, r3, #16
    49da:	0c1b      	lsrs	r3, r3, #16
    49dc:	4013      	ands	r3, r2
    49de:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    49e0:	4b07      	ldr	r3, [pc, #28]	; (4a00 <extint_chan_set_config+0x88>)
    49e2:	4798      	blx	r3
}
    49e4:	b003      	add	sp, #12
    49e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    49e8:	698a      	ldr	r2, [r1, #24]
    49ea:	2301      	movs	r3, #1
    49ec:	40ab      	lsls	r3, r5
    49ee:	4313      	orrs	r3, r2
    49f0:	618b      	str	r3, [r1, #24]
    49f2:	e7f5      	b.n	49e0 <extint_chan_set_config+0x68>
    49f4:	000048e5 	.word	0x000048e5
    49f8:	00006b61 	.word	0x00006b61
    49fc:	40002400 	.word	0x40002400
    4a00:	000048c5 	.word	0x000048c5

00004a04 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4a04:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4a06:	4a1e      	ldr	r2, [pc, #120]	; (4a80 <nvm_set_config+0x7c>)
    4a08:	6993      	ldr	r3, [r2, #24]
    4a0a:	2104      	movs	r1, #4
    4a0c:	430b      	orrs	r3, r1
    4a0e:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a10:	4b1c      	ldr	r3, [pc, #112]	; (4a84 <nvm_set_config+0x80>)
    4a12:	2220      	movs	r2, #32
    4a14:	32ff      	adds	r2, #255	; 0xff
    4a16:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4a18:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4a1a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4a1c:	07d2      	lsls	r2, r2, #31
    4a1e:	d401      	bmi.n	4a24 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4a20:	0018      	movs	r0, r3
    4a22:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a24:	7803      	ldrb	r3, [r0, #0]
    4a26:	021b      	lsls	r3, r3, #8
    4a28:	22c0      	movs	r2, #192	; 0xc0
    4a2a:	0092      	lsls	r2, r2, #2
    4a2c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a2e:	7841      	ldrb	r1, [r0, #1]
    4a30:	01c9      	lsls	r1, r1, #7
    4a32:	22ff      	movs	r2, #255	; 0xff
    4a34:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a36:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a38:	7881      	ldrb	r1, [r0, #2]
    4a3a:	0049      	lsls	r1, r1, #1
    4a3c:	221e      	movs	r2, #30
    4a3e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a40:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a42:	78c2      	ldrb	r2, [r0, #3]
    4a44:	0492      	lsls	r2, r2, #18
    4a46:	2180      	movs	r1, #128	; 0x80
    4a48:	02c9      	lsls	r1, r1, #11
    4a4a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a4c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4a4e:	7902      	ldrb	r2, [r0, #4]
    4a50:	0412      	lsls	r2, r2, #16
    4a52:	21c0      	movs	r1, #192	; 0xc0
    4a54:	0289      	lsls	r1, r1, #10
    4a56:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a58:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4a5a:	4a0a      	ldr	r2, [pc, #40]	; (4a84 <nvm_set_config+0x80>)
    4a5c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4a5e:	6893      	ldr	r3, [r2, #8]
    4a60:	035b      	lsls	r3, r3, #13
    4a62:	0f5b      	lsrs	r3, r3, #29
    4a64:	4908      	ldr	r1, [pc, #32]	; (4a88 <nvm_set_config+0x84>)
    4a66:	2408      	movs	r4, #8
    4a68:	409c      	lsls	r4, r3
    4a6a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4a6c:	6893      	ldr	r3, [r2, #8]
    4a6e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4a70:	7843      	ldrb	r3, [r0, #1]
    4a72:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4a74:	8b13      	ldrh	r3, [r2, #24]
    4a76:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4a78:	0fdb      	lsrs	r3, r3, #31
    4a7a:	011b      	lsls	r3, r3, #4
    4a7c:	e7d0      	b.n	4a20 <nvm_set_config+0x1c>
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	40000400 	.word	0x40000400
    4a84:	41004000 	.word	0x41004000
    4a88:	200000bc 	.word	0x200000bc

00004a8c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4a8c:	b530      	push	{r4, r5, lr}
    4a8e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4a90:	4a25      	ldr	r2, [pc, #148]	; (4b28 <nvm_execute_command+0x9c>)
    4a92:	8810      	ldrh	r0, [r2, #0]
    4a94:	8853      	ldrh	r3, [r2, #2]
    4a96:	4343      	muls	r3, r0
    4a98:	428b      	cmp	r3, r1
    4a9a:	d20b      	bcs.n	4ab4 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4a9c:	2280      	movs	r2, #128	; 0x80
    4a9e:	0192      	lsls	r2, r2, #6
    4aa0:	4b22      	ldr	r3, [pc, #136]	; (4b2c <nvm_execute_command+0xa0>)
    4aa2:	18cb      	adds	r3, r1, r3
    4aa4:	4293      	cmp	r3, r2
    4aa6:	d905      	bls.n	4ab4 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4aa8:	4a21      	ldr	r2, [pc, #132]	; (4b30 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4aaa:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4aac:	4b21      	ldr	r3, [pc, #132]	; (4b34 <nvm_execute_command+0xa8>)
    4aae:	18cb      	adds	r3, r1, r3
    4ab0:	4293      	cmp	r3, r2
    4ab2:	d80e      	bhi.n	4ad2 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4ab4:	4b20      	ldr	r3, [pc, #128]	; (4b38 <nvm_execute_command+0xac>)
    4ab6:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4ab8:	2280      	movs	r2, #128	; 0x80
    4aba:	02d2      	lsls	r2, r2, #11
    4abc:	432a      	orrs	r2, r5
    4abe:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4ac0:	2220      	movs	r2, #32
    4ac2:	32ff      	adds	r2, #255	; 0xff
    4ac4:	831a      	strh	r2, [r3, #24]
    4ac6:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4ac8:	07db      	lsls	r3, r3, #31
    4aca:	d403      	bmi.n	4ad4 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4acc:	4b1a      	ldr	r3, [pc, #104]	; (4b38 <nvm_execute_command+0xac>)
    4ace:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4ad0:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4ad2:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4ad4:	2c45      	cmp	r4, #69	; 0x45
    4ad6:	d822      	bhi.n	4b1e <nvm_execute_command+0x92>
    4ad8:	00a3      	lsls	r3, r4, #2
    4ada:	4a18      	ldr	r2, [pc, #96]	; (4b3c <nvm_execute_command+0xb0>)
    4adc:	58d3      	ldr	r3, [r2, r3]
    4ade:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4ae0:	4b15      	ldr	r3, [pc, #84]	; (4b38 <nvm_execute_command+0xac>)
    4ae2:	8b1b      	ldrh	r3, [r3, #24]
    4ae4:	05db      	lsls	r3, r3, #23
    4ae6:	d503      	bpl.n	4af0 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4ae8:	4b13      	ldr	r3, [pc, #76]	; (4b38 <nvm_execute_command+0xac>)
    4aea:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4aec:	2010      	movs	r0, #16
    4aee:	e7f0      	b.n	4ad2 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4af0:	0889      	lsrs	r1, r1, #2
    4af2:	0049      	lsls	r1, r1, #1
    4af4:	4b10      	ldr	r3, [pc, #64]	; (4b38 <nvm_execute_command+0xac>)
    4af6:	61d9      	str	r1, [r3, #28]
			break;
    4af8:	e003      	b.n	4b02 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4afa:	0889      	lsrs	r1, r1, #2
    4afc:	0049      	lsls	r1, r1, #1
    4afe:	4b0e      	ldr	r3, [pc, #56]	; (4b38 <nvm_execute_command+0xac>)
    4b00:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4b02:	20a5      	movs	r0, #165	; 0xa5
    4b04:	0200      	lsls	r0, r0, #8
    4b06:	4304      	orrs	r4, r0
    4b08:	4b0b      	ldr	r3, [pc, #44]	; (4b38 <nvm_execute_command+0xac>)
    4b0a:	801c      	strh	r4, [r3, #0]
    4b0c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4b0e:	2201      	movs	r2, #1
    4b10:	7d0b      	ldrb	r3, [r1, #20]
    4b12:	4213      	tst	r3, r2
    4b14:	d0fc      	beq.n	4b10 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4b16:	4b08      	ldr	r3, [pc, #32]	; (4b38 <nvm_execute_command+0xac>)
    4b18:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4b1a:	2000      	movs	r0, #0
    4b1c:	e7d9      	b.n	4ad2 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4b1e:	4b06      	ldr	r3, [pc, #24]	; (4b38 <nvm_execute_command+0xac>)
    4b20:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4b22:	2017      	movs	r0, #23
    4b24:	e7d5      	b.n	4ad2 <nvm_execute_command+0x46>
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	200000bc 	.word	0x200000bc
    4b2c:	ff7fc000 	.word	0xff7fc000
    4b30:	00001fff 	.word	0x00001fff
    4b34:	ffc00000 	.word	0xffc00000
    4b38:	41004000 	.word	0x41004000
<<<<<<< Updated upstream
    4b3c:	00017b1c 	.word	0x00017b1c
=======
    4b3c:	00017a70 	.word	0x00017a70
>>>>>>> Stashed changes

00004b40 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b42:	4b2f      	ldr	r3, [pc, #188]	; (4c00 <nvm_write_buffer+0xc0>)
    4b44:	881c      	ldrh	r4, [r3, #0]
    4b46:	885b      	ldrh	r3, [r3, #2]
    4b48:	4363      	muls	r3, r4
	if (destination_address >
    4b4a:	4283      	cmp	r3, r0
    4b4c:	d207      	bcs.n	4b5e <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b4e:	4e2d      	ldr	r6, [pc, #180]	; (4c04 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b50:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b52:	4b2d      	ldr	r3, [pc, #180]	; (4c08 <nvm_write_buffer+0xc8>)
    4b54:	18c3      	adds	r3, r0, r3
    4b56:	42b3      	cmp	r3, r6
    4b58:	d806      	bhi.n	4b68 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4b5a:	2601      	movs	r6, #1
    4b5c:	e000      	b.n	4b60 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4b5e:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4b60:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b62:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4b64:	4218      	tst	r0, r3
    4b66:	d001      	beq.n	4b6c <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4b68:	0028      	movs	r0, r5
    4b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4b6c:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4b6e:	4294      	cmp	r4, r2
    4b70:	d3fa      	bcc.n	4b68 <nvm_write_buffer+0x28>
    4b72:	4b26      	ldr	r3, [pc, #152]	; (4c0c <nvm_write_buffer+0xcc>)
    4b74:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b76:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4b78:	07db      	lsls	r3, r3, #31
    4b7a:	d5f5      	bpl.n	4b68 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4b7c:	4c24      	ldr	r4, [pc, #144]	; (4c10 <nvm_write_buffer+0xd0>)
    4b7e:	4b23      	ldr	r3, [pc, #140]	; (4c0c <nvm_write_buffer+0xcc>)
    4b80:	801c      	strh	r4, [r3, #0]
    4b82:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4b84:	2401      	movs	r4, #1
    4b86:	7d2b      	ldrb	r3, [r5, #20]
    4b88:	4223      	tst	r3, r4
    4b8a:	d0fc      	beq.n	4b86 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b8c:	2420      	movs	r4, #32
    4b8e:	34ff      	adds	r4, #255	; 0xff
    4b90:	4b1e      	ldr	r3, [pc, #120]	; (4c0c <nvm_write_buffer+0xcc>)
    4b92:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4b94:	2a00      	cmp	r2, #0
    4b96:	d02c      	beq.n	4bf2 <nvm_write_buffer+0xb2>
    4b98:	2301      	movs	r3, #1
    4b9a:	0005      	movs	r5, r0
    4b9c:	439d      	bics	r5, r3
    4b9e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4ba0:	1e54      	subs	r4, r2, #1
    4ba2:	46a4      	mov	ip, r4
    4ba4:	e009      	b.n	4bba <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4ba6:	18cf      	adds	r7, r1, r3
    4ba8:	787f      	ldrb	r7, [r7, #1]
    4baa:	023f      	lsls	r7, r7, #8
    4bac:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4bae:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4bb0:	3302      	adds	r3, #2
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	3502      	adds	r5, #2
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d904      	bls.n	4bc4 <nvm_write_buffer+0x84>
		data = buffer[i];
    4bba:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4bbc:	4563      	cmp	r3, ip
    4bbe:	dbf2      	blt.n	4ba6 <nvm_write_buffer+0x66>
		data = buffer[i];
    4bc0:	b2a4      	uxth	r4, r4
    4bc2:	e7f4      	b.n	4bae <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bc4:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <nvm_write_buffer+0xc0>)
    4bc6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4bc8:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d1cc      	bne.n	4b68 <nvm_write_buffer+0x28>
    4bce:	2a3f      	cmp	r2, #63	; 0x3f
    4bd0:	d8ca      	bhi.n	4b68 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4bd2:	2e00      	cmp	r6, #0
    4bd4:	d106      	bne.n	4be4 <nvm_write_buffer+0xa4>
    4bd6:	2200      	movs	r2, #0
    4bd8:	0001      	movs	r1, r0
    4bda:	2004      	movs	r0, #4
    4bdc:	4b0d      	ldr	r3, [pc, #52]	; (4c14 <nvm_write_buffer+0xd4>)
    4bde:	4798      	blx	r3
    4be0:	0005      	movs	r5, r0
    4be2:	e7c1      	b.n	4b68 <nvm_write_buffer+0x28>
    4be4:	2200      	movs	r2, #0
    4be6:	0001      	movs	r1, r0
    4be8:	201c      	movs	r0, #28
    4bea:	4b0a      	ldr	r3, [pc, #40]	; (4c14 <nvm_write_buffer+0xd4>)
    4bec:	4798      	blx	r3
    4bee:	0005      	movs	r5, r0
    4bf0:	e7ba      	b.n	4b68 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bf2:	4b03      	ldr	r3, [pc, #12]	; (4c00 <nvm_write_buffer+0xc0>)
    4bf4:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4bf6:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d0ea      	beq.n	4bd2 <nvm_write_buffer+0x92>
    4bfc:	e7b4      	b.n	4b68 <nvm_write_buffer+0x28>
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	200000bc 	.word	0x200000bc
    4c04:	00001fff 	.word	0x00001fff
    4c08:	ffc00000 	.word	0xffc00000
    4c0c:	41004000 	.word	0x41004000
    4c10:	ffffa544 	.word	0xffffa544
    4c14:	00004a8d 	.word	0x00004a8d

00004c18 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4c18:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4c1a:	4a1b      	ldr	r2, [pc, #108]	; (4c88 <nvm_erase_row+0x70>)
    4c1c:	8813      	ldrh	r3, [r2, #0]
    4c1e:	8852      	ldrh	r2, [r2, #2]
    4c20:	435a      	muls	r2, r3
	if (row_address >
    4c22:	4282      	cmp	r2, r0
    4c24:	d207      	bcs.n	4c36 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c26:	4c19      	ldr	r4, [pc, #100]	; (4c8c <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4c28:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c2a:	4919      	ldr	r1, [pc, #100]	; (4c90 <nvm_erase_row+0x78>)
    4c2c:	1841      	adds	r1, r0, r1
    4c2e:	42a1      	cmp	r1, r4
    4c30:	d807      	bhi.n	4c42 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4c32:	2101      	movs	r1, #1
    4c34:	e000      	b.n	4c38 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4c36:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4c38:	009b      	lsls	r3, r3, #2
    4c3a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4c3c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4c3e:	4218      	tst	r0, r3
    4c40:	d001      	beq.n	4c46 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4c42:	0010      	movs	r0, r2
    4c44:	bd10      	pop	{r4, pc}
    4c46:	4b13      	ldr	r3, [pc, #76]	; (4c94 <nvm_erase_row+0x7c>)
    4c48:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4c4a:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4c4c:	07db      	lsls	r3, r3, #31
    4c4e:	d5f8      	bpl.n	4c42 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c50:	4b10      	ldr	r3, [pc, #64]	; (4c94 <nvm_erase_row+0x7c>)
    4c52:	2220      	movs	r2, #32
    4c54:	32ff      	adds	r2, #255	; 0xff
    4c56:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4c58:	0880      	lsrs	r0, r0, #2
    4c5a:	0040      	lsls	r0, r0, #1
    4c5c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4c5e:	2900      	cmp	r1, #0
    4c60:	d10f      	bne.n	4c82 <nvm_erase_row+0x6a>
    4c62:	4a0d      	ldr	r2, [pc, #52]	; (4c98 <nvm_erase_row+0x80>)
    4c64:	4b0b      	ldr	r3, [pc, #44]	; (4c94 <nvm_erase_row+0x7c>)
    4c66:	801a      	strh	r2, [r3, #0]
    4c68:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4c6a:	2201      	movs	r2, #1
    4c6c:	7d0b      	ldrb	r3, [r1, #20]
    4c6e:	4213      	tst	r3, r2
    4c70:	d0fc      	beq.n	4c6c <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4c72:	4b08      	ldr	r3, [pc, #32]	; (4c94 <nvm_erase_row+0x7c>)
    4c74:	8b1a      	ldrh	r2, [r3, #24]
    4c76:	201c      	movs	r0, #28
    4c78:	4002      	ands	r2, r0
	return STATUS_OK;
    4c7a:	1e50      	subs	r0, r2, #1
    4c7c:	4182      	sbcs	r2, r0
    4c7e:	0092      	lsls	r2, r2, #2
    4c80:	e7df      	b.n	4c42 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4c82:	4a06      	ldr	r2, [pc, #24]	; (4c9c <nvm_erase_row+0x84>)
    4c84:	e7ee      	b.n	4c64 <nvm_erase_row+0x4c>
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	200000bc 	.word	0x200000bc
    4c8c:	00001fff 	.word	0x00001fff
    4c90:	ffc00000 	.word	0xffc00000
    4c94:	41004000 	.word	0x41004000
    4c98:	0000a502 	.word	0x0000a502
    4c9c:	0000a51a 	.word	0x0000a51a

00004ca0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4ca0:	b500      	push	{lr}
    4ca2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ca4:	ab01      	add	r3, sp, #4
    4ca6:	2280      	movs	r2, #128	; 0x80
    4ca8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4caa:	780a      	ldrb	r2, [r1, #0]
    4cac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4cae:	784a      	ldrb	r2, [r1, #1]
    4cb0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4cb2:	788a      	ldrb	r2, [r1, #2]
    4cb4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4cb6:	0019      	movs	r1, r3
    4cb8:	4b01      	ldr	r3, [pc, #4]	; (4cc0 <port_pin_set_config+0x20>)
    4cba:	4798      	blx	r3
}
    4cbc:	b003      	add	sp, #12
    4cbe:	bd00      	pop	{pc}
    4cc0:	00006b61 	.word	0x00006b61

00004cc4 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cc4:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4cc6:	6918      	ldr	r0, [r3, #16]
    4cc8:	1e43      	subs	r3, r0, #1
    4cca:	4198      	sbcs	r0, r3
    4ccc:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4cce:	4770      	bx	lr

00004cd0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4cd0:	b570      	push	{r4, r5, r6, lr}
    4cd2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cd4:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4cd6:	4d08      	ldr	r5, [pc, #32]	; (4cf8 <rtc_count_get_count+0x28>)
    4cd8:	0020      	movs	r0, r4
    4cda:	47a8      	blx	r5
    4cdc:	2800      	cmp	r0, #0
    4cde:	d1fb      	bne.n	4cd8 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4ce0:	7923      	ldrb	r3, [r4, #4]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d004      	beq.n	4cf0 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4ce6:	2000      	movs	r0, #0
	switch (module->mode) {
    4ce8:	2b01      	cmp	r3, #1
    4cea:	d100      	bne.n	4cee <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4cec:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4cee:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4cf0:	8b30      	ldrh	r0, [r6, #24]
    4cf2:	b280      	uxth	r0, r0
			break;
    4cf4:	e7fb      	b.n	4cee <rtc_count_get_count+0x1e>
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	00004cc5 	.word	0x00004cc5

00004cfc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    4cfc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cfe:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    4d00:	290a      	cmp	r1, #10
    4d02:	d010      	beq.n	4d26 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    4d04:	2907      	cmp	r1, #7
    4d06:	d911      	bls.n	4d2c <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    4d08:	2380      	movs	r3, #128	; 0x80
    4d0a:	005b      	lsls	r3, r3, #1
    4d0c:	000c      	movs	r4, r1
    4d0e:	3c08      	subs	r4, #8
    4d10:	40a3      	lsls	r3, r4
    4d12:	24c0      	movs	r4, #192	; 0xc0
    4d14:	00a4      	lsls	r4, r4, #2
    4d16:	4023      	ands	r3, r4
    4d18:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    4d1a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    4d1c:	2201      	movs	r2, #1
    4d1e:	408a      	lsls	r2, r1
    4d20:	4393      	bics	r3, r2
    4d22:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    4d24:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    4d26:	4b04      	ldr	r3, [pc, #16]	; (4d38 <rtc_count_disable_callback+0x3c>)
    4d28:	8113      	strh	r3, [r2, #8]
    4d2a:	e7f6      	b.n	4d1a <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    4d2c:	2401      	movs	r4, #1
    4d2e:	408c      	lsls	r4, r1
    4d30:	23ff      	movs	r3, #255	; 0xff
    4d32:	4023      	ands	r3, r4
    4d34:	8113      	strh	r3, [r2, #8]
    4d36:	e7f0      	b.n	4d1a <rtc_count_disable_callback+0x1e>
    4d38:	ffff8000 	.word	0xffff8000

00004d3c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d3e:	46de      	mov	lr, fp
    4d40:	4657      	mov	r7, sl
    4d42:	464e      	mov	r6, r9
    4d44:	4645      	mov	r5, r8
    4d46:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4d48:	4b2b      	ldr	r3, [pc, #172]	; (4df8 <RTC_Handler+0xbc>)
    4d4a:	681b      	ldr	r3, [r3, #0]
    4d4c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    4d4e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    4d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    4d52:	4652      	mov	r2, sl
    4d54:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    4d56:	401a      	ands	r2, r3
    4d58:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    4d5a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    4d5c:	8973      	ldrh	r3, [r6, #10]
    4d5e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    4d60:	b21a      	sxth	r2, r3
    4d62:	2a00      	cmp	r2, #0
    4d64:	db08      	blt.n	4d78 <RTC_Handler+0x3c>
    4d66:	27ff      	movs	r7, #255	; 0xff
    4d68:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    4d6a:	d02a      	beq.n	4dc2 <RTC_Handler+0x86>
    4d6c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4d6e:	2301      	movs	r3, #1
    4d70:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4d72:	33fe      	adds	r3, #254	; 0xfe
    4d74:	469b      	mov	fp, r3
    4d76:	e014      	b.n	4da2 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    4d78:	4643      	mov	r3, r8
    4d7a:	055b      	lsls	r3, r3, #21
    4d7c:	d407      	bmi.n	4d8e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    4d7e:	4b1f      	ldr	r3, [pc, #124]	; (4dfc <RTC_Handler+0xc0>)
    4d80:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    4d82:	bc3c      	pop	{r2, r3, r4, r5}
    4d84:	4690      	mov	r8, r2
    4d86:	4699      	mov	r9, r3
    4d88:	46a2      	mov	sl, r4
    4d8a:	46ab      	mov	fp, r5
    4d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    4d8e:	4653      	mov	r3, sl
    4d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d92:	4798      	blx	r3
    4d94:	e7f3      	b.n	4d7e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4d96:	465b      	mov	r3, fp
    4d98:	401d      	ands	r5, r3
    4d9a:	81b5      	strh	r5, [r6, #12]
    4d9c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    4d9e:	2c08      	cmp	r4, #8
    4da0:	d0ef      	beq.n	4d82 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4da2:	0023      	movs	r3, r4
    4da4:	464d      	mov	r5, r9
    4da6:	40a5      	lsls	r5, r4
    4da8:	422f      	tst	r7, r5
    4daa:	d0f4      	beq.n	4d96 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    4dac:	4642      	mov	r2, r8
    4dae:	4122      	asrs	r2, r4
    4db0:	4649      	mov	r1, r9
    4db2:	4211      	tst	r1, r2
    4db4:	d0ef      	beq.n	4d96 <RTC_Handler+0x5a>
				module->callbacks[i]();
    4db6:	3302      	adds	r3, #2
    4db8:	009b      	lsls	r3, r3, #2
    4dba:	4652      	mov	r2, sl
    4dbc:	589b      	ldr	r3, [r3, r2]
    4dbe:	4798      	blx	r3
    4dc0:	e7e9      	b.n	4d96 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    4dc2:	05da      	lsls	r2, r3, #23
    4dc4:	d50a      	bpl.n	4ddc <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    4dc6:	4643      	mov	r3, r8
    4dc8:	05db      	lsls	r3, r3, #23
    4dca:	d403      	bmi.n	4dd4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    4dcc:	2380      	movs	r3, #128	; 0x80
    4dce:	005b      	lsls	r3, r3, #1
    4dd0:	81b3      	strh	r3, [r6, #12]
    4dd2:	e7d6      	b.n	4d82 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    4dd4:	4653      	mov	r3, sl
    4dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dd8:	4798      	blx	r3
    4dda:	e7f7      	b.n	4dcc <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    4ddc:	059b      	lsls	r3, r3, #22
    4dde:	d5d0      	bpl.n	4d82 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    4de0:	4643      	mov	r3, r8
    4de2:	059b      	lsls	r3, r3, #22
    4de4:	d403      	bmi.n	4dee <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    4de6:	2380      	movs	r3, #128	; 0x80
    4de8:	009b      	lsls	r3, r3, #2
    4dea:	81b3      	strh	r3, [r6, #12]
}
    4dec:	e7c9      	b.n	4d82 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    4dee:	4653      	mov	r3, sl
    4df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4df2:	4798      	blx	r3
    4df4:	e7f7      	b.n	4de6 <RTC_Handler+0xaa>
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	20001f28 	.word	0x20001f28
    4dfc:	ffff8000 	.word	0xffff8000

00004e00 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4e00:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4e02:	2207      	movs	r2, #7
    4e04:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4e06:	421a      	tst	r2, r3
    4e08:	d1fc      	bne.n	4e04 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    4e0a:	4770      	bx	lr

00004e0c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e0e:	46d6      	mov	lr, sl
    4e10:	464f      	mov	r7, r9
    4e12:	4646      	mov	r6, r8
    4e14:	b5c0      	push	{r6, r7, lr}
    4e16:	b08a      	sub	sp, #40	; 0x28
    4e18:	0007      	movs	r7, r0
    4e1a:	000e      	movs	r6, r1
    4e1c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4e1e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e20:	0008      	movs	r0, r1
    4e22:	4b9c      	ldr	r3, [pc, #624]	; (5094 <i2c_master_init+0x288>)
    4e24:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    4e26:	2805      	cmp	r0, #5
    4e28:	d100      	bne.n	4e2c <i2c_master_init+0x20>
    4e2a:	e12b      	b.n	5084 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e2c:	0005      	movs	r5, r0
    4e2e:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    4e30:	4a99      	ldr	r2, [pc, #612]	; (5098 <i2c_master_init+0x28c>)
    4e32:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e34:	2301      	movs	r3, #1
    4e36:	4083      	lsls	r3, r0
    4e38:	430b      	orrs	r3, r1
    4e3a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4e3c:	a909      	add	r1, sp, #36	; 0x24
    4e3e:	7b23      	ldrb	r3, [r4, #12]
    4e40:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e42:	b2ed      	uxtb	r5, r5
    4e44:	0028      	movs	r0, r5
    4e46:	4b95      	ldr	r3, [pc, #596]	; (509c <i2c_master_init+0x290>)
    4e48:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e4a:	0028      	movs	r0, r5
    4e4c:	4b94      	ldr	r3, [pc, #592]	; (50a0 <i2c_master_init+0x294>)
    4e4e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e50:	7b20      	ldrb	r0, [r4, #12]
    4e52:	2100      	movs	r1, #0
    4e54:	4b93      	ldr	r3, [pc, #588]	; (50a4 <i2c_master_init+0x298>)
    4e56:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4e58:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    4e5a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4e5c:	079b      	lsls	r3, r3, #30
    4e5e:	d505      	bpl.n	4e6c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    4e60:	b00a      	add	sp, #40	; 0x28
    4e62:	bc1c      	pop	{r2, r3, r4}
    4e64:	4690      	mov	r8, r2
    4e66:	4699      	mov	r9, r3
    4e68:	46a2      	mov	sl, r4
    4e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4e6c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    4e6e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4e70:	07db      	lsls	r3, r3, #31
    4e72:	d4f5      	bmi.n	4e60 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4e74:	2314      	movs	r3, #20
    4e76:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4e78:	683b      	ldr	r3, [r7, #0]
    4e7a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4e7c:	0018      	movs	r0, r3
    4e7e:	4b85      	ldr	r3, [pc, #532]	; (5094 <i2c_master_init+0x288>)
    4e80:	4798      	blx	r3
    4e82:	0005      	movs	r5, r0
    4e84:	2380      	movs	r3, #128	; 0x80
    4e86:	aa08      	add	r2, sp, #32
    4e88:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e8a:	2300      	movs	r3, #0
    4e8c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e8e:	2201      	movs	r2, #1
    4e90:	a908      	add	r1, sp, #32
    4e92:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    4e94:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    4e96:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4e98:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    4e9a:	2800      	cmp	r0, #0
    4e9c:	d100      	bne.n	4ea0 <i2c_master_init+0x94>
    4e9e:	e0ae      	b.n	4ffe <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    4ea0:	ab08      	add	r3, sp, #32
    4ea2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ea4:	2302      	movs	r3, #2
    4ea6:	aa08      	add	r2, sp, #32
    4ea8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4eaa:	0c00      	lsrs	r0, r0, #16
    4eac:	b2c0      	uxtb	r0, r0
    4eae:	0011      	movs	r1, r2
    4eb0:	4b7d      	ldr	r3, [pc, #500]	; (50a8 <i2c_master_init+0x29c>)
    4eb2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    4eb4:	2e00      	cmp	r6, #0
    4eb6:	d100      	bne.n	4eba <i2c_master_init+0xae>
    4eb8:	e0a6      	b.n	5008 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    4eba:	ab08      	add	r3, sp, #32
    4ebc:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ebe:	2302      	movs	r3, #2
    4ec0:	aa08      	add	r2, sp, #32
    4ec2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4ec4:	0c36      	lsrs	r6, r6, #16
    4ec6:	b2f0      	uxtb	r0, r6
    4ec8:	0011      	movs	r1, r2
    4eca:	4b77      	ldr	r3, [pc, #476]	; (50a8 <i2c_master_init+0x29c>)
    4ecc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4ece:	8aa3      	ldrh	r3, [r4, #20]
    4ed0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    4ed2:	8ae3      	ldrh	r3, [r4, #22]
    4ed4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ed6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ed8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    4eda:	2b00      	cmp	r3, #0
    4edc:	d104      	bne.n	4ee8 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4ede:	4b73      	ldr	r3, [pc, #460]	; (50ac <i2c_master_init+0x2a0>)
    4ee0:	789b      	ldrb	r3, [r3, #2]
    4ee2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ee4:	0fdb      	lsrs	r3, r3, #31
    4ee6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    4ee8:	68a1      	ldr	r1, [r4, #8]
    4eea:	6923      	ldr	r3, [r4, #16]
    4eec:	430b      	orrs	r3, r1
    4eee:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    4ef0:	2224      	movs	r2, #36	; 0x24
    4ef2:	5ca2      	ldrb	r2, [r4, r2]
    4ef4:	2a00      	cmp	r2, #0
    4ef6:	d002      	beq.n	4efe <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4ef8:	2280      	movs	r2, #128	; 0x80
    4efa:	05d2      	lsls	r2, r2, #23
    4efc:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    4efe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f00:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4f02:	222c      	movs	r2, #44	; 0x2c
    4f04:	5ca2      	ldrb	r2, [r4, r2]
    4f06:	2a00      	cmp	r2, #0
    4f08:	d103      	bne.n	4f12 <i2c_master_init+0x106>
    4f0a:	2280      	movs	r2, #128	; 0x80
    4f0c:	0492      	lsls	r2, r2, #18
    4f0e:	4291      	cmp	r1, r2
    4f10:	d102      	bne.n	4f18 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4f12:	2280      	movs	r2, #128	; 0x80
    4f14:	0512      	lsls	r2, r2, #20
    4f16:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    4f18:	222d      	movs	r2, #45	; 0x2d
    4f1a:	5ca2      	ldrb	r2, [r4, r2]
    4f1c:	2a00      	cmp	r2, #0
    4f1e:	d002      	beq.n	4f26 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    4f20:	2280      	movs	r2, #128	; 0x80
    4f22:	0412      	lsls	r2, r2, #16
    4f24:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    4f26:	222e      	movs	r2, #46	; 0x2e
    4f28:	5ca2      	ldrb	r2, [r4, r2]
    4f2a:	2a00      	cmp	r2, #0
    4f2c:	d002      	beq.n	4f34 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    4f2e:	2280      	movs	r2, #128	; 0x80
    4f30:	03d2      	lsls	r2, r2, #15
    4f32:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4f34:	4642      	mov	r2, r8
    4f36:	6812      	ldr	r2, [r2, #0]
    4f38:	4313      	orrs	r3, r2
    4f3a:	4642      	mov	r2, r8
    4f3c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4f3e:	2380      	movs	r3, #128	; 0x80
    4f40:	005b      	lsls	r3, r3, #1
    4f42:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    4f44:	3512      	adds	r5, #18
    4f46:	b2e8      	uxtb	r0, r5
    4f48:	4b59      	ldr	r3, [pc, #356]	; (50b0 <i2c_master_init+0x2a4>)
    4f4a:	4798      	blx	r3
    4f4c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4f4e:	23fa      	movs	r3, #250	; 0xfa
    4f50:	009b      	lsls	r3, r3, #2
    4f52:	6822      	ldr	r2, [r4, #0]
    4f54:	435a      	muls	r2, r3
    4f56:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4f58:	6863      	ldr	r3, [r4, #4]
    4f5a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    4f5c:	4d55      	ldr	r5, [pc, #340]	; (50b4 <i2c_master_init+0x2a8>)
    4f5e:	47a8      	blx	r5
    4f60:	9000      	str	r0, [sp, #0]
    4f62:	9101      	str	r1, [sp, #4]
    4f64:	464b      	mov	r3, r9
    4f66:	0058      	lsls	r0, r3, #1
    4f68:	47a8      	blx	r5
    4f6a:	9002      	str	r0, [sp, #8]
    4f6c:	9103      	str	r1, [sp, #12]
    4f6e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4f70:	47a8      	blx	r5
    4f72:	9004      	str	r0, [sp, #16]
    4f74:	9105      	str	r1, [sp, #20]
    4f76:	4f50      	ldr	r7, [pc, #320]	; (50b8 <i2c_master_init+0x2ac>)
    4f78:	4a50      	ldr	r2, [pc, #320]	; (50bc <i2c_master_init+0x2b0>)
    4f7a:	4b51      	ldr	r3, [pc, #324]	; (50c0 <i2c_master_init+0x2b4>)
    4f7c:	9800      	ldr	r0, [sp, #0]
    4f7e:	9901      	ldr	r1, [sp, #4]
    4f80:	47b8      	blx	r7
    4f82:	0002      	movs	r2, r0
    4f84:	000b      	movs	r3, r1
    4f86:	9804      	ldr	r0, [sp, #16]
    4f88:	9905      	ldr	r1, [sp, #20]
    4f8a:	47b8      	blx	r7
    4f8c:	4e4d      	ldr	r6, [pc, #308]	; (50c4 <i2c_master_init+0x2b8>)
    4f8e:	2200      	movs	r2, #0
    4f90:	4b4d      	ldr	r3, [pc, #308]	; (50c8 <i2c_master_init+0x2bc>)
    4f92:	47b0      	blx	r6
    4f94:	9004      	str	r0, [sp, #16]
    4f96:	9105      	str	r1, [sp, #20]
    4f98:	4648      	mov	r0, r9
    4f9a:	47a8      	blx	r5
    4f9c:	0002      	movs	r2, r0
    4f9e:	000b      	movs	r3, r1
    4fa0:	9804      	ldr	r0, [sp, #16]
    4fa2:	9905      	ldr	r1, [sp, #20]
    4fa4:	47b8      	blx	r7
    4fa6:	0002      	movs	r2, r0
    4fa8:	000b      	movs	r3, r1
    4faa:	4d48      	ldr	r5, [pc, #288]	; (50cc <i2c_master_init+0x2c0>)
    4fac:	9800      	ldr	r0, [sp, #0]
    4fae:	9901      	ldr	r1, [sp, #4]
    4fb0:	47a8      	blx	r5
    4fb2:	9a02      	ldr	r2, [sp, #8]
    4fb4:	9b03      	ldr	r3, [sp, #12]
    4fb6:	47b0      	blx	r6
    4fb8:	2200      	movs	r2, #0
    4fba:	4b45      	ldr	r3, [pc, #276]	; (50d0 <i2c_master_init+0x2c4>)
    4fbc:	47a8      	blx	r5
    4fbe:	9a02      	ldr	r2, [sp, #8]
    4fc0:	9b03      	ldr	r3, [sp, #12]
    4fc2:	4d44      	ldr	r5, [pc, #272]	; (50d4 <i2c_master_init+0x2c8>)
    4fc4:	47a8      	blx	r5
    4fc6:	4b44      	ldr	r3, [pc, #272]	; (50d8 <i2c_master_init+0x2cc>)
    4fc8:	4798      	blx	r3
    4fca:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4fcc:	2380      	movs	r3, #128	; 0x80
    4fce:	049b      	lsls	r3, r3, #18
    4fd0:	68a2      	ldr	r2, [r4, #8]
    4fd2:	429a      	cmp	r2, r3
    4fd4:	d01e      	beq.n	5014 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4fd6:	0003      	movs	r3, r0
    4fd8:	2040      	movs	r0, #64	; 0x40
    4fda:	2dff      	cmp	r5, #255	; 0xff
    4fdc:	d900      	bls.n	4fe0 <i2c_master_init+0x1d4>
    4fde:	e73f      	b.n	4e60 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    4fe0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    4fe2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4fe4:	25ff      	movs	r5, #255	; 0xff
    4fe6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    4fe8:	0624      	lsls	r4, r4, #24
    4fea:	4325      	orrs	r5, r4
    4fec:	0400      	lsls	r0, r0, #16
    4fee:	23ff      	movs	r3, #255	; 0xff
    4ff0:	041b      	lsls	r3, r3, #16
    4ff2:	4018      	ands	r0, r3
    4ff4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4ff6:	4643      	mov	r3, r8
    4ff8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    4ffa:	2000      	movs	r0, #0
    4ffc:	e730      	b.n	4e60 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4ffe:	2100      	movs	r1, #0
    5000:	4640      	mov	r0, r8
    5002:	4b36      	ldr	r3, [pc, #216]	; (50dc <i2c_master_init+0x2d0>)
    5004:	4798      	blx	r3
    5006:	e74b      	b.n	4ea0 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5008:	2101      	movs	r1, #1
    500a:	4640      	mov	r0, r8
    500c:	4b33      	ldr	r3, [pc, #204]	; (50dc <i2c_master_init+0x2d0>)
    500e:	4798      	blx	r3
    5010:	0006      	movs	r6, r0
    5012:	e752      	b.n	4eba <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5014:	26fa      	movs	r6, #250	; 0xfa
    5016:	00b6      	lsls	r6, r6, #2
    5018:	4653      	mov	r3, sl
    501a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    501c:	9800      	ldr	r0, [sp, #0]
    501e:	9901      	ldr	r1, [sp, #4]
    5020:	0002      	movs	r2, r0
    5022:	000b      	movs	r3, r1
    5024:	4c27      	ldr	r4, [pc, #156]	; (50c4 <i2c_master_init+0x2b8>)
    5026:	47a0      	blx	r4
    5028:	9000      	str	r0, [sp, #0]
    502a:	9101      	str	r1, [sp, #4]
    502c:	0030      	movs	r0, r6
    502e:	4b21      	ldr	r3, [pc, #132]	; (50b4 <i2c_master_init+0x2a8>)
    5030:	4798      	blx	r3
    5032:	2200      	movs	r2, #0
    5034:	4b2a      	ldr	r3, [pc, #168]	; (50e0 <i2c_master_init+0x2d4>)
    5036:	47b8      	blx	r7
    5038:	0002      	movs	r2, r0
    503a:	000b      	movs	r3, r1
    503c:	9800      	ldr	r0, [sp, #0]
    503e:	9901      	ldr	r1, [sp, #4]
    5040:	4c24      	ldr	r4, [pc, #144]	; (50d4 <i2c_master_init+0x2c8>)
    5042:	47a0      	blx	r4
    5044:	2200      	movs	r2, #0
    5046:	4b22      	ldr	r3, [pc, #136]	; (50d0 <i2c_master_init+0x2c4>)
    5048:	4c20      	ldr	r4, [pc, #128]	; (50cc <i2c_master_init+0x2c0>)
    504a:	47a0      	blx	r4
    504c:	4b22      	ldr	r3, [pc, #136]	; (50d8 <i2c_master_init+0x2cc>)
    504e:	4798      	blx	r3
    5050:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5052:	d00c      	beq.n	506e <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5054:	0031      	movs	r1, r6
    5056:	9807      	ldr	r0, [sp, #28]
    5058:	4b22      	ldr	r3, [pc, #136]	; (50e4 <i2c_master_init+0x2d8>)
    505a:	4798      	blx	r3
    505c:	3802      	subs	r0, #2
    505e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5060:	002b      	movs	r3, r5
    5062:	2dff      	cmp	r5, #255	; 0xff
    5064:	d80c      	bhi.n	5080 <i2c_master_init+0x274>
    5066:	28ff      	cmp	r0, #255	; 0xff
    5068:	d9bc      	bls.n	4fe4 <i2c_master_init+0x1d8>
    506a:	2040      	movs	r0, #64	; 0x40
    506c:	e6f8      	b.n	4e60 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    506e:	0071      	lsls	r1, r6, #1
    5070:	1e48      	subs	r0, r1, #1
    5072:	9b07      	ldr	r3, [sp, #28]
    5074:	469c      	mov	ip, r3
    5076:	4460      	add	r0, ip
    5078:	4b1a      	ldr	r3, [pc, #104]	; (50e4 <i2c_master_init+0x2d8>)
    507a:	4798      	blx	r3
    507c:	3801      	subs	r0, #1
    507e:	e7ef      	b.n	5060 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5080:	2040      	movs	r0, #64	; 0x40
    5082:	e6ed      	b.n	4e60 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5084:	4a04      	ldr	r2, [pc, #16]	; (5098 <i2c_master_init+0x28c>)
    5086:	6a13      	ldr	r3, [r2, #32]
    5088:	2102      	movs	r1, #2
    508a:	430b      	orrs	r3, r1
    508c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    508e:	2518      	movs	r5, #24
    5090:	e6d4      	b.n	4e3c <i2c_master_init+0x30>
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0000576d 	.word	0x0000576d
    5098:	40000400 	.word	0x40000400
    509c:	00006a65 	.word	0x00006a65
    50a0:	000069f5 	.word	0x000069f5
    50a4:	000055c5 	.word	0x000055c5
    50a8:	00006b61 	.word	0x00006b61
    50ac:	41002000 	.word	0x41002000
    50b0:	00006a89 	.word	0x00006a89
<<<<<<< Updated upstream
    50b4:	000164f9 	.word	0x000164f9
    50b8:	000158e1 	.word	0x000158e1
    50bc:	e826d695 	.word	0xe826d695
    50c0:	3e112e0b 	.word	0x3e112e0b
    50c4:	00014a59 	.word	0x00014a59
    50c8:	40240000 	.word	0x40240000
    50cc:	00015de1 	.word	0x00015de1
    50d0:	3ff00000 	.word	0x3ff00000
    50d4:	00015079 	.word	0x00015079
    50d8:	0001640d 	.word	0x0001640d
    50dc:	00005611 	.word	0x00005611
    50e0:	40080000 	.word	0x40080000
    50e4:	000135d5 	.word	0x000135d5
=======
    50b4:	0001644d 	.word	0x0001644d
    50b8:	00015835 	.word	0x00015835
    50bc:	e826d695 	.word	0xe826d695
    50c0:	3e112e0b 	.word	0x3e112e0b
    50c4:	000149ad 	.word	0x000149ad
    50c8:	40240000 	.word	0x40240000
    50cc:	00015d35 	.word	0x00015d35
    50d0:	3ff00000 	.word	0x3ff00000
    50d4:	00014fcd 	.word	0x00014fcd
    50d8:	00016361 	.word	0x00016361
    50dc:	00005611 	.word	0x00005611
    50e0:	40080000 	.word	0x40080000
    50e4:	00013529 	.word	0x00013529
>>>>>>> Stashed changes

000050e8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    50e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ea:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50ec:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    50ee:	4e08      	ldr	r6, [pc, #32]	; (5110 <i2c_master_reset+0x28>)
    50f0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50f2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    50f4:	0020      	movs	r0, r4
    50f6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    50f8:	2383      	movs	r3, #131	; 0x83
    50fa:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    50fc:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    50fe:	682b      	ldr	r3, [r5, #0]
    5100:	2202      	movs	r2, #2
    5102:	4393      	bics	r3, r2
    5104:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5106:	0020      	movs	r0, r4
    5108:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    510a:	2301      	movs	r3, #1
    510c:	603b      	str	r3, [r7, #0]
}
    510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5110:	00004e01 	.word	0x00004e01

00005114 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5114:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5116:	7e1a      	ldrb	r2, [r3, #24]
    5118:	0792      	lsls	r2, r2, #30
    511a:	d507      	bpl.n	512c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    511c:	2202      	movs	r2, #2
    511e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5120:	8b5b      	ldrh	r3, [r3, #26]
    5122:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5124:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    5126:	17db      	asrs	r3, r3, #31
    5128:	4018      	ands	r0, r3
}
    512a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    512c:	8b5a      	ldrh	r2, [r3, #26]
    512e:	0752      	lsls	r2, r2, #29
    5130:	d506      	bpl.n	5140 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5132:	6859      	ldr	r1, [r3, #4]
    5134:	22c0      	movs	r2, #192	; 0xc0
    5136:	0292      	lsls	r2, r2, #10
    5138:	430a      	orrs	r2, r1
    513a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    513c:	2018      	movs	r0, #24
    513e:	e7f4      	b.n	512a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5140:	2000      	movs	r0, #0
    5142:	e7f2      	b.n	512a <_i2c_master_address_response+0x16>

00005144 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    5144:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5146:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5148:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    514a:	2401      	movs	r4, #1
    514c:	2502      	movs	r5, #2
    514e:	7e11      	ldrb	r1, [r2, #24]
    5150:	4221      	tst	r1, r4
    5152:	d10b      	bne.n	516c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5154:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5156:	4229      	tst	r1, r5
    5158:	d106      	bne.n	5168 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    515a:	3301      	adds	r3, #1
    515c:	b29b      	uxth	r3, r3
    515e:	8901      	ldrh	r1, [r0, #8]
    5160:	4299      	cmp	r1, r3
    5162:	d8f4      	bhi.n	514e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    5164:	2012      	movs	r0, #18
    5166:	e002      	b.n	516e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5168:	2000      	movs	r0, #0
    516a:	e000      	b.n	516e <_i2c_master_wait_for_bus+0x2a>
    516c:	2000      	movs	r0, #0
}
    516e:	bd30      	pop	{r4, r5, pc}

00005170 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5170:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5172:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5174:	6862      	ldr	r2, [r4, #4]
    5176:	2380      	movs	r3, #128	; 0x80
    5178:	02db      	lsls	r3, r3, #11
    517a:	4313      	orrs	r3, r2
    517c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    517e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5180:	4b02      	ldr	r3, [pc, #8]	; (518c <_i2c_master_send_hs_master_code+0x1c>)
    5182:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5184:	2301      	movs	r3, #1
    5186:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5188:	bd10      	pop	{r4, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	00005145 	.word	0x00005145

00005190 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5190:	b5f0      	push	{r4, r5, r6, r7, lr}
    5192:	46de      	mov	lr, fp
    5194:	4657      	mov	r7, sl
    5196:	464e      	mov	r6, r9
    5198:	4645      	mov	r5, r8
    519a:	b5e0      	push	{r5, r6, r7, lr}
    519c:	b083      	sub	sp, #12
    519e:	0006      	movs	r6, r0
    51a0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    51a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    51a4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    51a6:	682b      	ldr	r3, [r5, #0]
    51a8:	011b      	lsls	r3, r3, #4
    51aa:	0fdb      	lsrs	r3, r3, #31
    51ac:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    51ae:	7a4b      	ldrb	r3, [r1, #9]
    51b0:	2b00      	cmp	r3, #0
    51b2:	d12b      	bne.n	520c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    51b4:	686b      	ldr	r3, [r5, #4]
    51b6:	4a58      	ldr	r2, [pc, #352]	; (5318 <_i2c_master_read_packet+0x188>)
    51b8:	4013      	ands	r3, r2
    51ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    51bc:	464b      	mov	r3, r9
    51be:	7a1b      	ldrb	r3, [r3, #8]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d127      	bne.n	5214 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    51c4:	464b      	mov	r3, r9
    51c6:	881b      	ldrh	r3, [r3, #0]
    51c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    51ca:	464a      	mov	r2, r9
    51cc:	7a52      	ldrb	r2, [r2, #9]
    51ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    51d0:	4313      	orrs	r3, r2
    51d2:	2201      	movs	r2, #1
    51d4:	4313      	orrs	r3, r2
    51d6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    51d8:	0030      	movs	r0, r6
    51da:	4b50      	ldr	r3, [pc, #320]	; (531c <_i2c_master_read_packet+0x18c>)
    51dc:	4798      	blx	r3
    51de:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    51e0:	4653      	mov	r3, sl
    51e2:	2b00      	cmp	r3, #0
    51e4:	d003      	beq.n	51ee <_i2c_master_read_packet+0x5e>
    51e6:	464b      	mov	r3, r9
    51e8:	885b      	ldrh	r3, [r3, #2]
    51ea:	2b01      	cmp	r3, #1
    51ec:	d03b      	beq.n	5266 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    51ee:	686b      	ldr	r3, [r5, #4]
    51f0:	4a49      	ldr	r2, [pc, #292]	; (5318 <_i2c_master_read_packet+0x188>)
    51f2:	4013      	ands	r3, r2
    51f4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    51f6:	9b01      	ldr	r3, [sp, #4]
    51f8:	2b00      	cmp	r3, #0
    51fa:	d03a      	beq.n	5272 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    51fc:	9801      	ldr	r0, [sp, #4]
    51fe:	b003      	add	sp, #12
    5200:	bc3c      	pop	{r2, r3, r4, r5}
    5202:	4690      	mov	r8, r2
    5204:	4699      	mov	r9, r3
    5206:	46a2      	mov	sl, r4
    5208:	46ab      	mov	fp, r5
    520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    520c:	7a89      	ldrb	r1, [r1, #10]
    520e:	4b44      	ldr	r3, [pc, #272]	; (5320 <_i2c_master_read_packet+0x190>)
    5210:	4798      	blx	r3
    5212:	e7cf      	b.n	51b4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    5214:	464b      	mov	r3, r9
    5216:	881b      	ldrh	r3, [r3, #0]
    5218:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    521a:	464a      	mov	r2, r9
    521c:	7a52      	ldrb	r2, [r2, #9]
    521e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5220:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5222:	2280      	movs	r2, #128	; 0x80
    5224:	0212      	lsls	r2, r2, #8
    5226:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5228:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    522a:	0030      	movs	r0, r6
    522c:	4b3b      	ldr	r3, [pc, #236]	; (531c <_i2c_master_read_packet+0x18c>)
    522e:	4798      	blx	r3
    5230:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5232:	686b      	ldr	r3, [r5, #4]
    5234:	4a38      	ldr	r2, [pc, #224]	; (5318 <_i2c_master_read_packet+0x188>)
    5236:	4013      	ands	r3, r2
    5238:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    523a:	2800      	cmp	r0, #0
    523c:	d1de      	bne.n	51fc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    523e:	0030      	movs	r0, r6
    5240:	4b38      	ldr	r3, [pc, #224]	; (5324 <_i2c_master_read_packet+0x194>)
    5242:	4798      	blx	r3
    5244:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    5246:	2800      	cmp	r0, #0
    5248:	d1d8      	bne.n	51fc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    524a:	464b      	mov	r3, r9
    524c:	881b      	ldrh	r3, [r3, #0]
    524e:	0a1b      	lsrs	r3, r3, #8
    5250:	2278      	movs	r2, #120	; 0x78
    5252:	4313      	orrs	r3, r2
    5254:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5256:	464a      	mov	r2, r9
    5258:	7a52      	ldrb	r2, [r2, #9]
    525a:	0392      	lsls	r2, r2, #14
    525c:	2101      	movs	r1, #1
    525e:	430a      	orrs	r2, r1
    5260:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5262:	626b      	str	r3, [r5, #36]	; 0x24
    5264:	e7b8      	b.n	51d8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5266:	686a      	ldr	r2, [r5, #4]
    5268:	2380      	movs	r3, #128	; 0x80
    526a:	02db      	lsls	r3, r3, #11
    526c:	4313      	orrs	r3, r2
    526e:	606b      	str	r3, [r5, #4]
    5270:	e7c1      	b.n	51f6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    5272:	0030      	movs	r0, r6
    5274:	4b2b      	ldr	r3, [pc, #172]	; (5324 <_i2c_master_read_packet+0x194>)
    5276:	4798      	blx	r3
    5278:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    527a:	2800      	cmp	r0, #0
    527c:	d1be      	bne.n	51fc <_i2c_master_read_packet+0x6c>
    527e:	3c01      	subs	r4, #1
    5280:	b2a4      	uxth	r4, r4
    5282:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5284:	4b28      	ldr	r3, [pc, #160]	; (5328 <_i2c_master_read_packet+0x198>)
    5286:	469b      	mov	fp, r3
    5288:	e015      	b.n	52b6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    528a:	2c01      	cmp	r4, #1
    528c:	d020      	beq.n	52d0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    528e:	0030      	movs	r0, r6
    5290:	4b26      	ldr	r3, [pc, #152]	; (532c <_i2c_master_read_packet+0x19c>)
    5292:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5294:	4643      	mov	r3, r8
    5296:	1c5f      	adds	r7, r3, #1
    5298:	b2bf      	uxth	r7, r7
    529a:	2328      	movs	r3, #40	; 0x28
    529c:	5ceb      	ldrb	r3, [r5, r3]
    529e:	464a      	mov	r2, r9
    52a0:	6852      	ldr	r2, [r2, #4]
    52a2:	4641      	mov	r1, r8
    52a4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    52a6:	0030      	movs	r0, r6
    52a8:	4b1c      	ldr	r3, [pc, #112]	; (531c <_i2c_master_read_packet+0x18c>)
    52aa:	4798      	blx	r3
    52ac:	3c01      	subs	r4, #1
    52ae:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    52b0:	2800      	cmp	r0, #0
    52b2:	d115      	bne.n	52e0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    52b4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    52b6:	455c      	cmp	r4, fp
    52b8:	d014      	beq.n	52e4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52ba:	8b6b      	ldrh	r3, [r5, #26]
    52bc:	069b      	lsls	r3, r3, #26
    52be:	d527      	bpl.n	5310 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    52c0:	7af3      	ldrb	r3, [r6, #11]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d0e3      	beq.n	528e <_i2c_master_read_packet+0xfe>
    52c6:	4653      	mov	r3, sl
    52c8:	2b00      	cmp	r3, #0
    52ca:	d1de      	bne.n	528a <_i2c_master_read_packet+0xfa>
    52cc:	2c00      	cmp	r4, #0
    52ce:	d1de      	bne.n	528e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    52d0:	686a      	ldr	r2, [r5, #4]
    52d2:	2380      	movs	r3, #128	; 0x80
    52d4:	02db      	lsls	r3, r3, #11
    52d6:	4313      	orrs	r3, r2
    52d8:	606b      	str	r3, [r5, #4]
    52da:	3c01      	subs	r4, #1
    52dc:	b2a4      	uxth	r4, r4
    52de:	e7ea      	b.n	52b6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    52e0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    52e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    52e4:	7ab3      	ldrb	r3, [r6, #10]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d109      	bne.n	52fe <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    52ea:	0030      	movs	r0, r6
    52ec:	4b0f      	ldr	r3, [pc, #60]	; (532c <_i2c_master_read_packet+0x19c>)
    52ee:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    52f0:	2328      	movs	r3, #40	; 0x28
    52f2:	5cea      	ldrb	r2, [r5, r3]
    52f4:	464b      	mov	r3, r9
    52f6:	685b      	ldr	r3, [r3, #4]
    52f8:	4641      	mov	r1, r8
    52fa:	545a      	strb	r2, [r3, r1]
    52fc:	e77e      	b.n	51fc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    52fe:	0030      	movs	r0, r6
    5300:	4b0a      	ldr	r3, [pc, #40]	; (532c <_i2c_master_read_packet+0x19c>)
    5302:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5304:	686a      	ldr	r2, [r5, #4]
    5306:	23c0      	movs	r3, #192	; 0xc0
    5308:	029b      	lsls	r3, r3, #10
    530a:	4313      	orrs	r3, r2
    530c:	606b      	str	r3, [r5, #4]
    530e:	e7ec      	b.n	52ea <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5310:	2341      	movs	r3, #65	; 0x41
    5312:	9301      	str	r3, [sp, #4]
    5314:	e772      	b.n	51fc <_i2c_master_read_packet+0x6c>
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	fffbffff 	.word	0xfffbffff
    531c:	00005145 	.word	0x00005145
    5320:	00005171 	.word	0x00005171
    5324:	00005115 	.word	0x00005115
    5328:	0000ffff 	.word	0x0000ffff
    532c:	00004e01 	.word	0x00004e01

00005330 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
    5332:	46de      	mov	lr, fp
    5334:	4657      	mov	r7, sl
    5336:	464e      	mov	r6, r9
    5338:	4645      	mov	r5, r8
    533a:	b5e0      	push	{r5, r6, r7, lr}
    533c:	b083      	sub	sp, #12
    533e:	0006      	movs	r6, r0
    5340:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5342:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5344:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    5346:	4b32      	ldr	r3, [pc, #200]	; (5410 <_i2c_master_write_packet+0xe0>)
    5348:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    534a:	7a7b      	ldrb	r3, [r7, #9]
    534c:	2b00      	cmp	r3, #0
    534e:	d11d      	bne.n	538c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5350:	686b      	ldr	r3, [r5, #4]
    5352:	4a30      	ldr	r2, [pc, #192]	; (5414 <_i2c_master_write_packet+0xe4>)
    5354:	4013      	ands	r3, r2
    5356:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5358:	7a3b      	ldrb	r3, [r7, #8]
    535a:	2b00      	cmp	r3, #0
    535c:	d01b      	beq.n	5396 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    535e:	883b      	ldrh	r3, [r7, #0]
    5360:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5362:	7a7a      	ldrb	r2, [r7, #9]
    5364:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5366:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5368:	2280      	movs	r2, #128	; 0x80
    536a:	0212      	lsls	r2, r2, #8
    536c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    536e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5370:	0030      	movs	r0, r6
    5372:	4b29      	ldr	r3, [pc, #164]	; (5418 <_i2c_master_write_packet+0xe8>)
    5374:	4798      	blx	r3
    5376:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5378:	2800      	cmp	r0, #0
    537a:	d013      	beq.n	53a4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    537c:	9801      	ldr	r0, [sp, #4]
    537e:	b003      	add	sp, #12
    5380:	bc3c      	pop	{r2, r3, r4, r5}
    5382:	4690      	mov	r8, r2
    5384:	4699      	mov	r9, r3
    5386:	46a2      	mov	sl, r4
    5388:	46ab      	mov	fp, r5
    538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    538c:	7ab9      	ldrb	r1, [r7, #10]
    538e:	0030      	movs	r0, r6
    5390:	4b22      	ldr	r3, [pc, #136]	; (541c <_i2c_master_write_packet+0xec>)
    5392:	4798      	blx	r3
    5394:	e7dc      	b.n	5350 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5396:	883b      	ldrh	r3, [r7, #0]
    5398:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    539a:	7a7a      	ldrb	r2, [r7, #9]
    539c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    539e:	4313      	orrs	r3, r2
    53a0:	626b      	str	r3, [r5, #36]	; 0x24
    53a2:	e7e5      	b.n	5370 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    53a4:	0030      	movs	r0, r6
    53a6:	4b1e      	ldr	r3, [pc, #120]	; (5420 <_i2c_master_write_packet+0xf0>)
    53a8:	4798      	blx	r3
    53aa:	1e03      	subs	r3, r0, #0
    53ac:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    53ae:	d1e5      	bne.n	537c <_i2c_master_write_packet+0x4c>
    53b0:	46a0      	mov	r8, r4
    53b2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    53b4:	3320      	adds	r3, #32
    53b6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    53b8:	4b15      	ldr	r3, [pc, #84]	; (5410 <_i2c_master_write_packet+0xe0>)
    53ba:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    53bc:	4b16      	ldr	r3, [pc, #88]	; (5418 <_i2c_master_write_packet+0xe8>)
    53be:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    53c0:	4544      	cmp	r4, r8
    53c2:	d015      	beq.n	53f0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    53c4:	8b6b      	ldrh	r3, [r5, #26]
    53c6:	464a      	mov	r2, r9
    53c8:	4213      	tst	r3, r2
    53ca:	d01d      	beq.n	5408 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    53cc:	0030      	movs	r0, r6
    53ce:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	5d1a      	ldrb	r2, [r3, r4]
    53d4:	2328      	movs	r3, #40	; 0x28
    53d6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    53d8:	0030      	movs	r0, r6
    53da:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    53dc:	2800      	cmp	r0, #0
    53de:	d106      	bne.n	53ee <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    53e0:	8b6b      	ldrh	r3, [r5, #26]
    53e2:	3401      	adds	r4, #1
    53e4:	075b      	lsls	r3, r3, #29
    53e6:	d5eb      	bpl.n	53c0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    53e8:	231e      	movs	r3, #30
    53ea:	9301      	str	r3, [sp, #4]
    53ec:	e000      	b.n	53f0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    53ee:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    53f0:	7ab3      	ldrb	r3, [r6, #10]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d0c2      	beq.n	537c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    53f6:	0030      	movs	r0, r6
    53f8:	4b05      	ldr	r3, [pc, #20]	; (5410 <_i2c_master_write_packet+0xe0>)
    53fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    53fc:	686a      	ldr	r2, [r5, #4]
    53fe:	23c0      	movs	r3, #192	; 0xc0
    5400:	029b      	lsls	r3, r3, #10
    5402:	4313      	orrs	r3, r2
    5404:	606b      	str	r3, [r5, #4]
    5406:	e7b9      	b.n	537c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5408:	2341      	movs	r3, #65	; 0x41
    540a:	9301      	str	r3, [sp, #4]
    540c:	e7b6      	b.n	537c <_i2c_master_write_packet+0x4c>
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	00004e01 	.word	0x00004e01
    5414:	fffbffff 	.word	0xfffbffff
    5418:	00005145 	.word	0x00005145
    541c:	00005171 	.word	0x00005171
    5420:	00005115 	.word	0x00005115

00005424 <i2c_master_read_packet_wait>:
{
    5424:	b510      	push	{r4, lr}
	module->send_stop = true;
    5426:	2301      	movs	r3, #1
    5428:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    542a:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    542c:	4b01      	ldr	r3, [pc, #4]	; (5434 <i2c_master_read_packet_wait+0x10>)
    542e:	4798      	blx	r3
}
    5430:	bd10      	pop	{r4, pc}
    5432:	46c0      	nop			; (mov r8, r8)
    5434:	00005191 	.word	0x00005191

00005438 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5438:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    543a:	2300      	movs	r3, #0
    543c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    543e:	3301      	adds	r3, #1
    5440:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    5442:	4b01      	ldr	r3, [pc, #4]	; (5448 <i2c_master_write_packet_wait_no_stop+0x10>)
    5444:	4798      	blx	r3
}
    5446:	bd10      	pop	{r4, pc}
    5448:	00005331 	.word	0x00005331

0000544c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    544c:	b5f0      	push	{r4, r5, r6, r7, lr}
    544e:	46de      	mov	lr, fp
    5450:	4657      	mov	r7, sl
    5452:	464e      	mov	r6, r9
    5454:	4645      	mov	r5, r8
    5456:	b5e0      	push	{r5, r6, r7, lr}
    5458:	b087      	sub	sp, #28
    545a:	4680      	mov	r8, r0
    545c:	9104      	str	r1, [sp, #16]
    545e:	0016      	movs	r6, r2
    5460:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5462:	2200      	movs	r2, #0
    5464:	2300      	movs	r3, #0
    5466:	2100      	movs	r1, #0
    5468:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    546a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    546c:	2001      	movs	r0, #1
    546e:	0021      	movs	r1, r4
    5470:	9600      	str	r6, [sp, #0]
    5472:	9701      	str	r7, [sp, #4]
    5474:	465c      	mov	r4, fp
    5476:	9403      	str	r4, [sp, #12]
    5478:	4644      	mov	r4, r8
    547a:	9405      	str	r4, [sp, #20]
    547c:	e013      	b.n	54a6 <long_division+0x5a>
    547e:	2420      	movs	r4, #32
    5480:	1a64      	subs	r4, r4, r1
    5482:	0005      	movs	r5, r0
    5484:	40e5      	lsrs	r5, r4
    5486:	46a8      	mov	r8, r5
    5488:	e014      	b.n	54b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    548a:	9c00      	ldr	r4, [sp, #0]
    548c:	9d01      	ldr	r5, [sp, #4]
    548e:	1b12      	subs	r2, r2, r4
    5490:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5492:	465c      	mov	r4, fp
    5494:	464d      	mov	r5, r9
    5496:	432c      	orrs	r4, r5
    5498:	46a3      	mov	fp, r4
    549a:	9c03      	ldr	r4, [sp, #12]
    549c:	4645      	mov	r5, r8
    549e:	432c      	orrs	r4, r5
    54a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    54a2:	3901      	subs	r1, #1
    54a4:	d325      	bcc.n	54f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    54a6:	2420      	movs	r4, #32
    54a8:	4264      	negs	r4, r4
    54aa:	190c      	adds	r4, r1, r4
    54ac:	d4e7      	bmi.n	547e <long_division+0x32>
    54ae:	0005      	movs	r5, r0
    54b0:	40a5      	lsls	r5, r4
    54b2:	46a8      	mov	r8, r5
    54b4:	0004      	movs	r4, r0
    54b6:	408c      	lsls	r4, r1
    54b8:	46a1      	mov	r9, r4
		r = r << 1;
    54ba:	1892      	adds	r2, r2, r2
    54bc:	415b      	adcs	r3, r3
    54be:	0014      	movs	r4, r2
    54c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    54c2:	9e05      	ldr	r6, [sp, #20]
    54c4:	464f      	mov	r7, r9
    54c6:	403e      	ands	r6, r7
    54c8:	46b4      	mov	ip, r6
    54ca:	9e04      	ldr	r6, [sp, #16]
    54cc:	4647      	mov	r7, r8
    54ce:	403e      	ands	r6, r7
    54d0:	46b2      	mov	sl, r6
    54d2:	4666      	mov	r6, ip
    54d4:	4657      	mov	r7, sl
    54d6:	433e      	orrs	r6, r7
    54d8:	d003      	beq.n	54e2 <long_division+0x96>
			r |= 0x01;
    54da:	0006      	movs	r6, r0
    54dc:	4326      	orrs	r6, r4
    54de:	0032      	movs	r2, r6
    54e0:	002b      	movs	r3, r5
		if (r >= d) {
    54e2:	9c00      	ldr	r4, [sp, #0]
    54e4:	9d01      	ldr	r5, [sp, #4]
    54e6:	429d      	cmp	r5, r3
    54e8:	d8db      	bhi.n	54a2 <long_division+0x56>
    54ea:	d1ce      	bne.n	548a <long_division+0x3e>
    54ec:	4294      	cmp	r4, r2
    54ee:	d8d8      	bhi.n	54a2 <long_division+0x56>
    54f0:	e7cb      	b.n	548a <long_division+0x3e>
    54f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    54f4:	4658      	mov	r0, fp
    54f6:	0019      	movs	r1, r3
    54f8:	b007      	add	sp, #28
    54fa:	bc3c      	pop	{r2, r3, r4, r5}
    54fc:	4690      	mov	r8, r2
    54fe:	4699      	mov	r9, r3
    5500:	46a2      	mov	sl, r4
    5502:	46ab      	mov	fp, r5
    5504:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005506 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5506:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5508:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    550a:	2340      	movs	r3, #64	; 0x40
    550c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    550e:	4281      	cmp	r1, r0
    5510:	d202      	bcs.n	5518 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5512:	0018      	movs	r0, r3
    5514:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5516:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5518:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    551a:	1c63      	adds	r3, r4, #1
    551c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    551e:	4288      	cmp	r0, r1
    5520:	d9f9      	bls.n	5516 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5522:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5524:	2cff      	cmp	r4, #255	; 0xff
    5526:	d8f4      	bhi.n	5512 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5528:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    552a:	2300      	movs	r3, #0
    552c:	e7f1      	b.n	5512 <_sercom_get_sync_baud_val+0xc>
    552e:	Address 0x0000552e is out of bounds.


00005530 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5530:	b5f0      	push	{r4, r5, r6, r7, lr}
    5532:	b083      	sub	sp, #12
    5534:	000f      	movs	r7, r1
    5536:	0016      	movs	r6, r2
    5538:	aa08      	add	r2, sp, #32
    553a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    553c:	0004      	movs	r4, r0
    553e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5540:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5542:	42bc      	cmp	r4, r7
    5544:	d902      	bls.n	554c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5546:	0010      	movs	r0, r2
    5548:	b003      	add	sp, #12
    554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    554c:	2b00      	cmp	r3, #0
    554e:	d114      	bne.n	557a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5550:	0002      	movs	r2, r0
    5552:	0008      	movs	r0, r1
    5554:	2100      	movs	r1, #0
    5556:	4c19      	ldr	r4, [pc, #100]	; (55bc <_sercom_get_async_baud_val+0x8c>)
    5558:	47a0      	blx	r4
    555a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    555c:	003a      	movs	r2, r7
    555e:	2300      	movs	r3, #0
    5560:	2000      	movs	r0, #0
    5562:	4c17      	ldr	r4, [pc, #92]	; (55c0 <_sercom_get_async_baud_val+0x90>)
    5564:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5566:	2200      	movs	r2, #0
    5568:	2301      	movs	r3, #1
    556a:	1a12      	subs	r2, r2, r0
    556c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    556e:	0c12      	lsrs	r2, r2, #16
    5570:	041b      	lsls	r3, r3, #16
    5572:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5574:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5576:	2200      	movs	r2, #0
    5578:	e7e5      	b.n	5546 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    557a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    557c:	2b01      	cmp	r3, #1
    557e:	d1f9      	bne.n	5574 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5580:	000a      	movs	r2, r1
    5582:	2300      	movs	r3, #0
    5584:	2100      	movs	r1, #0
    5586:	4c0d      	ldr	r4, [pc, #52]	; (55bc <_sercom_get_async_baud_val+0x8c>)
    5588:	47a0      	blx	r4
    558a:	0002      	movs	r2, r0
    558c:	000b      	movs	r3, r1
    558e:	9200      	str	r2, [sp, #0]
    5590:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5592:	0038      	movs	r0, r7
    5594:	2100      	movs	r1, #0
    5596:	4c0a      	ldr	r4, [pc, #40]	; (55c0 <_sercom_get_async_baud_val+0x90>)
    5598:	47a0      	blx	r4
    559a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    559c:	2380      	movs	r3, #128	; 0x80
    559e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    55a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    55a2:	4298      	cmp	r0, r3
    55a4:	d8cf      	bhi.n	5546 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    55a6:	0f79      	lsrs	r1, r7, #29
    55a8:	00f8      	lsls	r0, r7, #3
    55aa:	9a00      	ldr	r2, [sp, #0]
    55ac:	9b01      	ldr	r3, [sp, #4]
    55ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    55b0:	00ea      	lsls	r2, r5, #3
    55b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    55b4:	b2d2      	uxtb	r2, r2
    55b6:	0352      	lsls	r2, r2, #13
    55b8:	432a      	orrs	r2, r5
    55ba:	e7db      	b.n	5574 <_sercom_get_async_baud_val+0x44>
<<<<<<< Updated upstream
    55bc:	000139f1 	.word	0x000139f1
=======
    55bc:	00013945 	.word	0x00013945
>>>>>>> Stashed changes
    55c0:	0000544d 	.word	0x0000544d

000055c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    55c4:	b510      	push	{r4, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    55ca:	4b0e      	ldr	r3, [pc, #56]	; (5604 <sercom_set_gclk_generator+0x40>)
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d007      	beq.n	55e2 <sercom_set_gclk_generator+0x1e>
    55d2:	2900      	cmp	r1, #0
    55d4:	d105      	bne.n	55e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    55d6:	4b0b      	ldr	r3, [pc, #44]	; (5604 <sercom_set_gclk_generator+0x40>)
    55d8:	785b      	ldrb	r3, [r3, #1]
    55da:	4283      	cmp	r3, r0
    55dc:	d010      	beq.n	5600 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    55de:	201d      	movs	r0, #29
    55e0:	e00c      	b.n	55fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    55e2:	a901      	add	r1, sp, #4
    55e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    55e6:	2011      	movs	r0, #17
    55e8:	4b07      	ldr	r3, [pc, #28]	; (5608 <sercom_set_gclk_generator+0x44>)
    55ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    55ec:	2011      	movs	r0, #17
    55ee:	4b07      	ldr	r3, [pc, #28]	; (560c <sercom_set_gclk_generator+0x48>)
    55f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    55f2:	4b04      	ldr	r3, [pc, #16]	; (5604 <sercom_set_gclk_generator+0x40>)
    55f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    55f6:	2201      	movs	r2, #1
    55f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    55fa:	2000      	movs	r0, #0
}
    55fc:	b002      	add	sp, #8
    55fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5600:	2000      	movs	r0, #0
    5602:	e7fb      	b.n	55fc <sercom_set_gclk_generator+0x38>
    5604:	200000c4 	.word	0x200000c4
    5608:	00006a65 	.word	0x00006a65
    560c:	000069f5 	.word	0x000069f5

00005610 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5610:	4b3c      	ldr	r3, [pc, #240]	; (5704 <_sercom_get_default_pad+0xf4>)
    5612:	4298      	cmp	r0, r3
    5614:	d032      	beq.n	567c <_sercom_get_default_pad+0x6c>
    5616:	d90a      	bls.n	562e <_sercom_get_default_pad+0x1e>
    5618:	4b3b      	ldr	r3, [pc, #236]	; (5708 <_sercom_get_default_pad+0xf8>)
    561a:	4298      	cmp	r0, r3
    561c:	d04e      	beq.n	56bc <_sercom_get_default_pad+0xac>
    561e:	4b3b      	ldr	r3, [pc, #236]	; (570c <_sercom_get_default_pad+0xfc>)
    5620:	4298      	cmp	r0, r3
    5622:	d055      	beq.n	56d0 <_sercom_get_default_pad+0xc0>
    5624:	4b3a      	ldr	r3, [pc, #232]	; (5710 <_sercom_get_default_pad+0x100>)
    5626:	4298      	cmp	r0, r3
    5628:	d038      	beq.n	569c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    562a:	2000      	movs	r0, #0
}
    562c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    562e:	2384      	movs	r3, #132	; 0x84
    5630:	05db      	lsls	r3, r3, #23
    5632:	4298      	cmp	r0, r3
    5634:	d00c      	beq.n	5650 <_sercom_get_default_pad+0x40>
    5636:	4b37      	ldr	r3, [pc, #220]	; (5714 <_sercom_get_default_pad+0x104>)
    5638:	4298      	cmp	r0, r3
    563a:	d1f6      	bne.n	562a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    563c:	2901      	cmp	r1, #1
    563e:	d017      	beq.n	5670 <_sercom_get_default_pad+0x60>
    5640:	2900      	cmp	r1, #0
    5642:	d057      	beq.n	56f4 <_sercom_get_default_pad+0xe4>
    5644:	2902      	cmp	r1, #2
    5646:	d015      	beq.n	5674 <_sercom_get_default_pad+0x64>
    5648:	2903      	cmp	r1, #3
    564a:	d015      	beq.n	5678 <_sercom_get_default_pad+0x68>
	return 0;
    564c:	2000      	movs	r0, #0
    564e:	e7ed      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5650:	2901      	cmp	r1, #1
    5652:	d007      	beq.n	5664 <_sercom_get_default_pad+0x54>
    5654:	2900      	cmp	r1, #0
    5656:	d04b      	beq.n	56f0 <_sercom_get_default_pad+0xe0>
    5658:	2902      	cmp	r1, #2
    565a:	d005      	beq.n	5668 <_sercom_get_default_pad+0x58>
    565c:	2903      	cmp	r1, #3
    565e:	d005      	beq.n	566c <_sercom_get_default_pad+0x5c>
	return 0;
    5660:	2000      	movs	r0, #0
    5662:	e7e3      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5664:	482c      	ldr	r0, [pc, #176]	; (5718 <_sercom_get_default_pad+0x108>)
    5666:	e7e1      	b.n	562c <_sercom_get_default_pad+0x1c>
    5668:	482c      	ldr	r0, [pc, #176]	; (571c <_sercom_get_default_pad+0x10c>)
    566a:	e7df      	b.n	562c <_sercom_get_default_pad+0x1c>
    566c:	482c      	ldr	r0, [pc, #176]	; (5720 <_sercom_get_default_pad+0x110>)
    566e:	e7dd      	b.n	562c <_sercom_get_default_pad+0x1c>
    5670:	482c      	ldr	r0, [pc, #176]	; (5724 <_sercom_get_default_pad+0x114>)
    5672:	e7db      	b.n	562c <_sercom_get_default_pad+0x1c>
    5674:	482c      	ldr	r0, [pc, #176]	; (5728 <_sercom_get_default_pad+0x118>)
    5676:	e7d9      	b.n	562c <_sercom_get_default_pad+0x1c>
    5678:	482c      	ldr	r0, [pc, #176]	; (572c <_sercom_get_default_pad+0x11c>)
    567a:	e7d7      	b.n	562c <_sercom_get_default_pad+0x1c>
    567c:	2901      	cmp	r1, #1
    567e:	d007      	beq.n	5690 <_sercom_get_default_pad+0x80>
    5680:	2900      	cmp	r1, #0
    5682:	d039      	beq.n	56f8 <_sercom_get_default_pad+0xe8>
    5684:	2902      	cmp	r1, #2
    5686:	d005      	beq.n	5694 <_sercom_get_default_pad+0x84>
    5688:	2903      	cmp	r1, #3
    568a:	d005      	beq.n	5698 <_sercom_get_default_pad+0x88>
	return 0;
    568c:	2000      	movs	r0, #0
    568e:	e7cd      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5690:	4827      	ldr	r0, [pc, #156]	; (5730 <_sercom_get_default_pad+0x120>)
    5692:	e7cb      	b.n	562c <_sercom_get_default_pad+0x1c>
    5694:	4827      	ldr	r0, [pc, #156]	; (5734 <_sercom_get_default_pad+0x124>)
    5696:	e7c9      	b.n	562c <_sercom_get_default_pad+0x1c>
    5698:	4827      	ldr	r0, [pc, #156]	; (5738 <_sercom_get_default_pad+0x128>)
    569a:	e7c7      	b.n	562c <_sercom_get_default_pad+0x1c>
    569c:	2901      	cmp	r1, #1
    569e:	d007      	beq.n	56b0 <_sercom_get_default_pad+0xa0>
    56a0:	2900      	cmp	r1, #0
    56a2:	d02b      	beq.n	56fc <_sercom_get_default_pad+0xec>
    56a4:	2902      	cmp	r1, #2
    56a6:	d005      	beq.n	56b4 <_sercom_get_default_pad+0xa4>
    56a8:	2903      	cmp	r1, #3
    56aa:	d005      	beq.n	56b8 <_sercom_get_default_pad+0xa8>
	return 0;
    56ac:	2000      	movs	r0, #0
    56ae:	e7bd      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    56b0:	4822      	ldr	r0, [pc, #136]	; (573c <_sercom_get_default_pad+0x12c>)
    56b2:	e7bb      	b.n	562c <_sercom_get_default_pad+0x1c>
    56b4:	4822      	ldr	r0, [pc, #136]	; (5740 <_sercom_get_default_pad+0x130>)
    56b6:	e7b9      	b.n	562c <_sercom_get_default_pad+0x1c>
    56b8:	4822      	ldr	r0, [pc, #136]	; (5744 <_sercom_get_default_pad+0x134>)
    56ba:	e7b7      	b.n	562c <_sercom_get_default_pad+0x1c>
    56bc:	2902      	cmp	r1, #2
    56be:	d003      	beq.n	56c8 <_sercom_get_default_pad+0xb8>
    56c0:	2903      	cmp	r1, #3
    56c2:	d003      	beq.n	56cc <_sercom_get_default_pad+0xbc>
    56c4:	2000      	movs	r0, #0
    56c6:	e7b1      	b.n	562c <_sercom_get_default_pad+0x1c>
    56c8:	481f      	ldr	r0, [pc, #124]	; (5748 <_sercom_get_default_pad+0x138>)
    56ca:	e7af      	b.n	562c <_sercom_get_default_pad+0x1c>
    56cc:	481f      	ldr	r0, [pc, #124]	; (574c <_sercom_get_default_pad+0x13c>)
    56ce:	e7ad      	b.n	562c <_sercom_get_default_pad+0x1c>
    56d0:	2901      	cmp	r1, #1
    56d2:	d007      	beq.n	56e4 <_sercom_get_default_pad+0xd4>
    56d4:	2900      	cmp	r1, #0
    56d6:	d013      	beq.n	5700 <_sercom_get_default_pad+0xf0>
    56d8:	2902      	cmp	r1, #2
    56da:	d005      	beq.n	56e8 <_sercom_get_default_pad+0xd8>
    56dc:	2903      	cmp	r1, #3
    56de:	d005      	beq.n	56ec <_sercom_get_default_pad+0xdc>
	return 0;
    56e0:	2000      	movs	r0, #0
    56e2:	e7a3      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    56e4:	481a      	ldr	r0, [pc, #104]	; (5750 <_sercom_get_default_pad+0x140>)
    56e6:	e7a1      	b.n	562c <_sercom_get_default_pad+0x1c>
    56e8:	481a      	ldr	r0, [pc, #104]	; (5754 <_sercom_get_default_pad+0x144>)
    56ea:	e79f      	b.n	562c <_sercom_get_default_pad+0x1c>
    56ec:	481a      	ldr	r0, [pc, #104]	; (5758 <_sercom_get_default_pad+0x148>)
    56ee:	e79d      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f0:	481a      	ldr	r0, [pc, #104]	; (575c <_sercom_get_default_pad+0x14c>)
    56f2:	e79b      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f4:	2003      	movs	r0, #3
    56f6:	e799      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f8:	4819      	ldr	r0, [pc, #100]	; (5760 <_sercom_get_default_pad+0x150>)
    56fa:	e797      	b.n	562c <_sercom_get_default_pad+0x1c>
    56fc:	4819      	ldr	r0, [pc, #100]	; (5764 <_sercom_get_default_pad+0x154>)
    56fe:	e795      	b.n	562c <_sercom_get_default_pad+0x1c>
    5700:	4819      	ldr	r0, [pc, #100]	; (5768 <_sercom_get_default_pad+0x158>)
    5702:	e793      	b.n	562c <_sercom_get_default_pad+0x1c>
    5704:	42000800 	.word	0x42000800
    5708:	42001000 	.word	0x42001000
    570c:	43000400 	.word	0x43000400
    5710:	42000c00 	.word	0x42000c00
    5714:	42000400 	.word	0x42000400
    5718:	00050003 	.word	0x00050003
    571c:	00060003 	.word	0x00060003
    5720:	00070003 	.word	0x00070003
    5724:	00010003 	.word	0x00010003
    5728:	001e0003 	.word	0x001e0003
    572c:	001f0003 	.word	0x001f0003
    5730:	00090003 	.word	0x00090003
    5734:	000a0003 	.word	0x000a0003
    5738:	000b0003 	.word	0x000b0003
    573c:	00110003 	.word	0x00110003
    5740:	00120003 	.word	0x00120003
    5744:	00130003 	.word	0x00130003
    5748:	000e0003 	.word	0x000e0003
    574c:	000f0003 	.word	0x000f0003
    5750:	00170003 	.word	0x00170003
    5754:	00180003 	.word	0x00180003
    5758:	00190003 	.word	0x00190003
    575c:	00040003 	.word	0x00040003
    5760:	00080003 	.word	0x00080003
    5764:	00100003 	.word	0x00100003
    5768:	00160003 	.word	0x00160003

0000576c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    576c:	b530      	push	{r4, r5, lr}
    576e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5770:	4b0b      	ldr	r3, [pc, #44]	; (57a0 <_sercom_get_sercom_inst_index+0x34>)
    5772:	466a      	mov	r2, sp
    5774:	cb32      	ldmia	r3!, {r1, r4, r5}
    5776:	c232      	stmia	r2!, {r1, r4, r5}
    5778:	cb32      	ldmia	r3!, {r1, r4, r5}
    577a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    577c:	9b00      	ldr	r3, [sp, #0]
    577e:	4283      	cmp	r3, r0
    5780:	d00b      	beq.n	579a <_sercom_get_sercom_inst_index+0x2e>
    5782:	2301      	movs	r3, #1
    5784:	009a      	lsls	r2, r3, #2
    5786:	4669      	mov	r1, sp
    5788:	5852      	ldr	r2, [r2, r1]
    578a:	4282      	cmp	r2, r0
    578c:	d006      	beq.n	579c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    578e:	3301      	adds	r3, #1
    5790:	2b06      	cmp	r3, #6
    5792:	d1f7      	bne.n	5784 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5794:	2000      	movs	r0, #0
}
    5796:	b007      	add	sp, #28
    5798:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    579a:	2300      	movs	r3, #0
			return i;
    579c:	b2d8      	uxtb	r0, r3
    579e:	e7fa      	b.n	5796 <_sercom_get_sercom_inst_index+0x2a>
<<<<<<< Updated upstream
    57a0:	00017c34 	.word	0x00017c34
=======
    57a0:	00017b88 	.word	0x00017b88
>>>>>>> Stashed changes

000057a4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    57a4:	4770      	bx	lr
    57a6:	Address 0x000057a6 is out of bounds.


000057a8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    57a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    57aa:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <_sercom_set_handler+0x2c>)
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	2b00      	cmp	r3, #0
    57b0:	d10c      	bne.n	57cc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57b2:	4f09      	ldr	r7, [pc, #36]	; (57d8 <_sercom_set_handler+0x30>)
    57b4:	4e09      	ldr	r6, [pc, #36]	; (57dc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    57b6:	4d0a      	ldr	r5, [pc, #40]	; (57e0 <_sercom_set_handler+0x38>)
    57b8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57ba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    57bc:	195a      	adds	r2, r3, r5
    57be:	6014      	str	r4, [r2, #0]
    57c0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57c2:	2b18      	cmp	r3, #24
    57c4:	d1f9      	bne.n	57ba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    57c6:	2201      	movs	r2, #1
    57c8:	4b02      	ldr	r3, [pc, #8]	; (57d4 <_sercom_set_handler+0x2c>)
    57ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    57cc:	0080      	lsls	r0, r0, #2
    57ce:	4b02      	ldr	r3, [pc, #8]	; (57d8 <_sercom_set_handler+0x30>)
    57d0:	50c1      	str	r1, [r0, r3]
}
    57d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57d4:	200000c6 	.word	0x200000c6
    57d8:	200000c8 	.word	0x200000c8
    57dc:	000057a5 	.word	0x000057a5
    57e0:	20001f2c 	.word	0x20001f2c

000057e4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    57e4:	b500      	push	{lr}
    57e6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    57e8:	2308      	movs	r3, #8
    57ea:	466a      	mov	r2, sp
    57ec:	7013      	strb	r3, [r2, #0]
    57ee:	3301      	adds	r3, #1
    57f0:	7053      	strb	r3, [r2, #1]
    57f2:	3301      	adds	r3, #1
    57f4:	7093      	strb	r3, [r2, #2]
    57f6:	3301      	adds	r3, #1
    57f8:	70d3      	strb	r3, [r2, #3]
    57fa:	3301      	adds	r3, #1
    57fc:	7113      	strb	r3, [r2, #4]
    57fe:	3301      	adds	r3, #1
    5800:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5802:	4b03      	ldr	r3, [pc, #12]	; (5810 <_sercom_get_interrupt_vector+0x2c>)
    5804:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5806:	466b      	mov	r3, sp
    5808:	5618      	ldrsb	r0, [r3, r0]
}
    580a:	b003      	add	sp, #12
    580c:	bd00      	pop	{pc}
    580e:	46c0      	nop			; (mov r8, r8)
    5810:	0000576d 	.word	0x0000576d

00005814 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5814:	b510      	push	{r4, lr}
    5816:	4b02      	ldr	r3, [pc, #8]	; (5820 <SERCOM0_Handler+0xc>)
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	2000      	movs	r0, #0
    581c:	4798      	blx	r3
    581e:	bd10      	pop	{r4, pc}
    5820:	200000c8 	.word	0x200000c8

00005824 <SERCOM1_Handler>:
    5824:	b510      	push	{r4, lr}
    5826:	4b02      	ldr	r3, [pc, #8]	; (5830 <SERCOM1_Handler+0xc>)
    5828:	685b      	ldr	r3, [r3, #4]
    582a:	2001      	movs	r0, #1
    582c:	4798      	blx	r3
    582e:	bd10      	pop	{r4, pc}
    5830:	200000c8 	.word	0x200000c8

00005834 <SERCOM2_Handler>:
    5834:	b510      	push	{r4, lr}
    5836:	4b02      	ldr	r3, [pc, #8]	; (5840 <SERCOM2_Handler+0xc>)
    5838:	689b      	ldr	r3, [r3, #8]
    583a:	2002      	movs	r0, #2
    583c:	4798      	blx	r3
    583e:	bd10      	pop	{r4, pc}
    5840:	200000c8 	.word	0x200000c8

00005844 <SERCOM3_Handler>:
    5844:	b510      	push	{r4, lr}
    5846:	4b02      	ldr	r3, [pc, #8]	; (5850 <SERCOM3_Handler+0xc>)
    5848:	68db      	ldr	r3, [r3, #12]
    584a:	2003      	movs	r0, #3
    584c:	4798      	blx	r3
    584e:	bd10      	pop	{r4, pc}
    5850:	200000c8 	.word	0x200000c8

00005854 <SERCOM4_Handler>:
    5854:	b510      	push	{r4, lr}
    5856:	4b02      	ldr	r3, [pc, #8]	; (5860 <SERCOM4_Handler+0xc>)
    5858:	691b      	ldr	r3, [r3, #16]
    585a:	2004      	movs	r0, #4
    585c:	4798      	blx	r3
    585e:	bd10      	pop	{r4, pc}
    5860:	200000c8 	.word	0x200000c8

00005864 <SERCOM5_Handler>:
    5864:	b510      	push	{r4, lr}
    5866:	4b02      	ldr	r3, [pc, #8]	; (5870 <SERCOM5_Handler+0xc>)
    5868:	695b      	ldr	r3, [r3, #20]
    586a:	2005      	movs	r0, #5
    586c:	4798      	blx	r3
    586e:	bd10      	pop	{r4, pc}
    5870:	200000c8 	.word	0x200000c8

00005874 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    5876:	46d6      	mov	lr, sl
    5878:	464f      	mov	r7, r9
    587a:	4646      	mov	r6, r8
    587c:	b5c0      	push	{r6, r7, lr}
    587e:	b08a      	sub	sp, #40	; 0x28
    5880:	0006      	movs	r6, r0
    5882:	000f      	movs	r7, r1
    5884:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5886:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5888:	680b      	ldr	r3, [r1, #0]
    588a:	079b      	lsls	r3, r3, #30
    588c:	d40a      	bmi.n	58a4 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    588e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5890:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5892:	07db      	lsls	r3, r3, #31
    5894:	d400      	bmi.n	5898 <spi_init+0x24>
    5896:	e0af      	b.n	59f8 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5898:	b00a      	add	sp, #40	; 0x28
    589a:	bc1c      	pop	{r2, r3, r4}
    589c:	4690      	mov	r8, r2
    589e:	4699      	mov	r9, r3
    58a0:	46a2      	mov	sl, r4
    58a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    58a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    58a6:	9305      	str	r3, [sp, #20]
    58a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    58aa:	9306      	str	r3, [sp, #24]
    58ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
    58ae:	9307      	str	r3, [sp, #28]
    58b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    58b2:	9308      	str	r3, [sp, #32]
    58b4:	2500      	movs	r5, #0
    58b6:	e00a      	b.n	58ce <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    58b8:	0038      	movs	r0, r7
    58ba:	4bb6      	ldr	r3, [pc, #728]	; (5b94 <spi_init+0x320>)
    58bc:	4798      	blx	r3
    58be:	e00e      	b.n	58de <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    58c0:	230f      	movs	r3, #15
    58c2:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    58c4:	4581      	cmp	r9, r0
    58c6:	d130      	bne.n	592a <spi_init+0xb6>
    58c8:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    58ca:	2d04      	cmp	r5, #4
    58cc:	d031      	beq.n	5932 <spi_init+0xbe>
    58ce:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    58d0:	00ab      	lsls	r3, r5, #2
    58d2:	aa02      	add	r2, sp, #8
    58d4:	200c      	movs	r0, #12
    58d6:	1812      	adds	r2, r2, r0
    58d8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    58da:	2800      	cmp	r0, #0
    58dc:	d0ec      	beq.n	58b8 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    58de:	1c43      	adds	r3, r0, #1
    58e0:	d0f2      	beq.n	58c8 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    58e2:	0401      	lsls	r1, r0, #16
    58e4:	0c0b      	lsrs	r3, r1, #16
    58e6:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    58e8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    58ea:	b2c3      	uxtb	r3, r0
    58ec:	469c      	mov	ip, r3
		return NULL;
    58ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    58f0:	0602      	lsls	r2, r0, #24
    58f2:	d405      	bmi.n	5900 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    58f4:	4663      	mov	r3, ip
    58f6:	095b      	lsrs	r3, r3, #5
    58f8:	01db      	lsls	r3, r3, #7
    58fa:	4aa7      	ldr	r2, [pc, #668]	; (5b98 <spi_init+0x324>)
    58fc:	4690      	mov	r8, r2
    58fe:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5900:	221f      	movs	r2, #31
    5902:	4660      	mov	r0, ip
    5904:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5906:	1898      	adds	r0, r3, r2
    5908:	3040      	adds	r0, #64	; 0x40
    590a:	7800      	ldrb	r0, [r0, #0]
    590c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    590e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5910:	4651      	mov	r1, sl
    5912:	07c9      	lsls	r1, r1, #31
    5914:	d5d6      	bpl.n	58c4 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5916:	0852      	lsrs	r2, r2, #1
    5918:	189b      	adds	r3, r3, r2
    591a:	3330      	adds	r3, #48	; 0x30
    591c:	7818      	ldrb	r0, [r3, #0]
    591e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5920:	4663      	mov	r3, ip
    5922:	07db      	lsls	r3, r3, #31
    5924:	d5cc      	bpl.n	58c0 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5926:	0900      	lsrs	r0, r0, #4
    5928:	e7cc      	b.n	58c4 <spi_init+0x50>
			module->hw = NULL;
    592a:	2300      	movs	r3, #0
    592c:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    592e:	201c      	movs	r0, #28
    5930:	e7b2      	b.n	5898 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5932:	2011      	movs	r0, #17
    5934:	4b99      	ldr	r3, [pc, #612]	; (5b9c <spi_init+0x328>)
    5936:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5938:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    593a:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    593c:	2a01      	cmp	r2, #1
    593e:	d016      	beq.n	596e <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5940:	7821      	ldrb	r1, [r4, #0]
    5942:	2900      	cmp	r1, #0
    5944:	d127      	bne.n	5996 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    5946:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5948:	7fe2      	ldrb	r2, [r4, #31]
    594a:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    594c:	7fa0      	ldrb	r0, [r4, #30]
    594e:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5950:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5952:	429a      	cmp	r2, r3
    5954:	d1a0      	bne.n	5898 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5956:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5958:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    595a:	3004      	adds	r0, #4
    595c:	5c20      	ldrb	r0, [r4, r0]
    595e:	2800      	cmp	r0, #0
    5960:	d001      	beq.n	5966 <spi_init+0xf2>
    5962:	2040      	movs	r0, #64	; 0x40
    5964:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5966:	2008      	movs	r0, #8
    5968:	4303      	orrs	r3, r0
    596a:	431d      	orrs	r5, r3
    596c:	e014      	b.n	5998 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    596e:	aa04      	add	r2, sp, #16
    5970:	0001      	movs	r1, r0
    5972:	69a0      	ldr	r0, [r4, #24]
    5974:	4b8a      	ldr	r3, [pc, #552]	; (5ba0 <spi_init+0x32c>)
    5976:	4798      	blx	r3
    5978:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    597a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    597c:	2b00      	cmp	r3, #0
    597e:	d000      	beq.n	5982 <spi_init+0x10e>
    5980:	e78a      	b.n	5898 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5982:	7b3b      	ldrb	r3, [r7, #12]
    5984:	b2db      	uxtb	r3, r3
    5986:	aa04      	add	r2, sp, #16
    5988:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    598a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    598c:	429a      	cmp	r2, r3
    598e:	d000      	beq.n	5992 <spi_init+0x11e>
    5990:	e782      	b.n	5898 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5992:	350c      	adds	r5, #12
    5994:	e7d4      	b.n	5940 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5996:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5998:	6863      	ldr	r3, [r4, #4]
    599a:	68a0      	ldr	r0, [r4, #8]
    599c:	4303      	orrs	r3, r0
    599e:	68e0      	ldr	r0, [r4, #12]
    59a0:	4303      	orrs	r3, r0
    59a2:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    59a4:	7c20      	ldrb	r0, [r4, #16]
    59a6:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    59a8:	7c60      	ldrb	r0, [r4, #17]
    59aa:	2800      	cmp	r0, #0
    59ac:	d001      	beq.n	59b2 <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    59ae:	2080      	movs	r0, #128	; 0x80
    59b0:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    59b2:	7ca0      	ldrb	r0, [r4, #18]
    59b4:	2800      	cmp	r0, #0
    59b6:	d002      	beq.n	59be <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    59b8:	2080      	movs	r0, #128	; 0x80
    59ba:	0280      	lsls	r0, r0, #10
    59bc:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    59be:	7ce0      	ldrb	r0, [r4, #19]
    59c0:	2800      	cmp	r0, #0
    59c2:	d002      	beq.n	59ca <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    59c4:	2080      	movs	r0, #128	; 0x80
    59c6:	0080      	lsls	r0, r0, #2
    59c8:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    59ca:	7d20      	ldrb	r0, [r4, #20]
    59cc:	2800      	cmp	r0, #0
    59ce:	d002      	beq.n	59d6 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    59d0:	2080      	movs	r0, #128	; 0x80
    59d2:	0180      	lsls	r0, r0, #6
    59d4:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    59d6:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    59d8:	2502      	movs	r5, #2
    59da:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    59dc:	4283      	cmp	r3, r0
    59de:	d003      	beq.n	59e8 <spi_init+0x174>
	module->hw = NULL;
    59e0:	2300      	movs	r3, #0
    59e2:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    59e4:	201c      	movs	r0, #28
    59e6:	e757      	b.n	5898 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    59e8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    59ea:	4293      	cmp	r3, r2
    59ec:	d1f8      	bne.n	59e0 <spi_init+0x16c>
		module->mode           = config->mode;
    59ee:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    59f0:	7c23      	ldrb	r3, [r4, #16]
    59f2:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    59f4:	2000      	movs	r0, #0
    59f6:	e74f      	b.n	5898 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    59f8:	0008      	movs	r0, r1
    59fa:	4b6a      	ldr	r3, [pc, #424]	; (5ba4 <spi_init+0x330>)
    59fc:	4798      	blx	r3
	if (sercom_index == 5) {
    59fe:	2805      	cmp	r0, #5
    5a00:	d100      	bne.n	5a04 <spi_init+0x190>
    5a02:	e0bf      	b.n	5b84 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a04:	0003      	movs	r3, r0
    5a06:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5a08:	4967      	ldr	r1, [pc, #412]	; (5ba8 <spi_init+0x334>)
    5a0a:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5a0c:	2201      	movs	r2, #1
    5a0e:	4082      	lsls	r2, r0
    5a10:	432a      	orrs	r2, r5
    5a12:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5a14:	a909      	add	r1, sp, #36	; 0x24
    5a16:	2524      	movs	r5, #36	; 0x24
    5a18:	5d62      	ldrb	r2, [r4, r5]
    5a1a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	9301      	str	r3, [sp, #4]
    5a20:	0018      	movs	r0, r3
    5a22:	4b62      	ldr	r3, [pc, #392]	; (5bac <spi_init+0x338>)
    5a24:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5a26:	9801      	ldr	r0, [sp, #4]
    5a28:	4b61      	ldr	r3, [pc, #388]	; (5bb0 <spi_init+0x33c>)
    5a2a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5a2c:	5d60      	ldrb	r0, [r4, r5]
    5a2e:	2100      	movs	r1, #0
    5a30:	4b60      	ldr	r3, [pc, #384]	; (5bb4 <spi_init+0x340>)
    5a32:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5a34:	7823      	ldrb	r3, [r4, #0]
    5a36:	2b01      	cmp	r3, #1
    5a38:	d020      	beq.n	5a7c <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5a3a:	7823      	ldrb	r3, [r4, #0]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d103      	bne.n	5a48 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5a40:	683b      	ldr	r3, [r7, #0]
    5a42:	2208      	movs	r2, #8
    5a44:	4313      	orrs	r3, r2
    5a46:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a48:	6833      	ldr	r3, [r6, #0]
    5a4a:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5a4c:	ab04      	add	r3, sp, #16
    5a4e:	2280      	movs	r2, #128	; 0x80
    5a50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5a52:	2200      	movs	r2, #0
    5a54:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5a56:	2101      	movs	r1, #1
    5a58:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5a5a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5a5c:	7823      	ldrb	r3, [r4, #0]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d101      	bne.n	5a66 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5a62:	ab04      	add	r3, sp, #16
    5a64:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5a68:	9305      	str	r3, [sp, #20]
    5a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5a6c:	9306      	str	r3, [sp, #24]
    5a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a70:	9307      	str	r3, [sp, #28]
    5a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a74:	9308      	str	r3, [sp, #32]
    5a76:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5a78:	ad05      	add	r5, sp, #20
    5a7a:	e011      	b.n	5aa0 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5a7c:	683b      	ldr	r3, [r7, #0]
    5a7e:	220c      	movs	r2, #12
    5a80:	4313      	orrs	r3, r2
    5a82:	603b      	str	r3, [r7, #0]
    5a84:	e7d9      	b.n	5a3a <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5a86:	4640      	mov	r0, r8
    5a88:	4b42      	ldr	r3, [pc, #264]	; (5b94 <spi_init+0x320>)
    5a8a:	4798      	blx	r3
    5a8c:	e00d      	b.n	5aaa <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5a8e:	a904      	add	r1, sp, #16
    5a90:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5a92:	0c00      	lsrs	r0, r0, #16
    5a94:	b2c0      	uxtb	r0, r0
    5a96:	4b48      	ldr	r3, [pc, #288]	; (5bb8 <spi_init+0x344>)
    5a98:	4798      	blx	r3
    5a9a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5a9c:	2f04      	cmp	r7, #4
    5a9e:	d007      	beq.n	5ab0 <spi_init+0x23c>
    5aa0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5aa2:	00bb      	lsls	r3, r7, #2
    5aa4:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5aa6:	2800      	cmp	r0, #0
    5aa8:	d0ed      	beq.n	5a86 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5aaa:	1c43      	adds	r3, r0, #1
    5aac:	d1ef      	bne.n	5a8e <spi_init+0x21a>
    5aae:	e7f4      	b.n	5a9a <spi_init+0x226>
	module->mode             = config->mode;
    5ab0:	7823      	ldrb	r3, [r4, #0]
    5ab2:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5ab4:	7c23      	ldrb	r3, [r4, #16]
    5ab6:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5ab8:	7ca3      	ldrb	r3, [r4, #18]
    5aba:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5abc:	7d23      	ldrb	r3, [r4, #20]
    5abe:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5ac0:	2200      	movs	r2, #0
    5ac2:	ab02      	add	r3, sp, #8
    5ac4:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5ac6:	7823      	ldrb	r3, [r4, #0]
    5ac8:	2b01      	cmp	r3, #1
    5aca:	d014      	beq.n	5af6 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5acc:	7823      	ldrb	r3, [r4, #0]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d129      	bne.n	5b26 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5ad2:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5ad4:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5ad6:	4643      	mov	r3, r8
    5ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5ada:	7fe1      	ldrb	r1, [r4, #31]
    5adc:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5ade:	7fa5      	ldrb	r5, [r4, #30]
    5ae0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5ae2:	4319      	orrs	r1, r3
    5ae4:	4643      	mov	r3, r8
    5ae6:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5ae8:	2320      	movs	r3, #32
    5aea:	5ce3      	ldrb	r3, [r4, r3]
    5aec:	2b00      	cmp	r3, #0
    5aee:	d01c      	beq.n	5b2a <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5af0:	2340      	movs	r3, #64	; 0x40
    5af2:	431a      	orrs	r2, r3
    5af4:	e019      	b.n	5b2a <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5af6:	6830      	ldr	r0, [r6, #0]
    5af8:	4b2a      	ldr	r3, [pc, #168]	; (5ba4 <spi_init+0x330>)
    5afa:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5afc:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5afe:	b2c0      	uxtb	r0, r0
    5b00:	4b26      	ldr	r3, [pc, #152]	; (5b9c <spi_init+0x328>)
    5b02:	4798      	blx	r3
    5b04:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5b06:	ab02      	add	r3, sp, #8
    5b08:	1d9a      	adds	r2, r3, #6
    5b0a:	69a0      	ldr	r0, [r4, #24]
    5b0c:	4b24      	ldr	r3, [pc, #144]	; (5ba0 <spi_init+0x32c>)
    5b0e:	4798      	blx	r3
    5b10:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5b12:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5b14:	2b00      	cmp	r3, #0
    5b16:	d000      	beq.n	5b1a <spi_init+0x2a6>
    5b18:	e6be      	b.n	5898 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5b1a:	ab02      	add	r3, sp, #8
    5b1c:	3306      	adds	r3, #6
    5b1e:	781b      	ldrb	r3, [r3, #0]
    5b20:	4642      	mov	r2, r8
    5b22:	7313      	strb	r3, [r2, #12]
    5b24:	e7d2      	b.n	5acc <spi_init+0x258>
	uint32_t ctrlb = 0;
    5b26:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5b28:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5b2a:	6863      	ldr	r3, [r4, #4]
    5b2c:	68a1      	ldr	r1, [r4, #8]
    5b2e:	430b      	orrs	r3, r1
    5b30:	68e1      	ldr	r1, [r4, #12]
    5b32:	430b      	orrs	r3, r1
    5b34:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5b36:	7c21      	ldrb	r1, [r4, #16]
    5b38:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5b3a:	7c61      	ldrb	r1, [r4, #17]
    5b3c:	2900      	cmp	r1, #0
    5b3e:	d103      	bne.n	5b48 <spi_init+0x2d4>
    5b40:	491e      	ldr	r1, [pc, #120]	; (5bbc <spi_init+0x348>)
    5b42:	7889      	ldrb	r1, [r1, #2]
    5b44:	0789      	lsls	r1, r1, #30
    5b46:	d501      	bpl.n	5b4c <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5b48:	2180      	movs	r1, #128	; 0x80
    5b4a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5b4c:	7ca1      	ldrb	r1, [r4, #18]
    5b4e:	2900      	cmp	r1, #0
    5b50:	d002      	beq.n	5b58 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5b52:	2180      	movs	r1, #128	; 0x80
    5b54:	0289      	lsls	r1, r1, #10
    5b56:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5b58:	7ce1      	ldrb	r1, [r4, #19]
    5b5a:	2900      	cmp	r1, #0
    5b5c:	d002      	beq.n	5b64 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5b5e:	2180      	movs	r1, #128	; 0x80
    5b60:	0089      	lsls	r1, r1, #2
    5b62:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5b64:	7d21      	ldrb	r1, [r4, #20]
    5b66:	2900      	cmp	r1, #0
    5b68:	d002      	beq.n	5b70 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5b6a:	2180      	movs	r1, #128	; 0x80
    5b6c:	0189      	lsls	r1, r1, #6
    5b6e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5b70:	4641      	mov	r1, r8
    5b72:	6809      	ldr	r1, [r1, #0]
    5b74:	430b      	orrs	r3, r1
    5b76:	4641      	mov	r1, r8
    5b78:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5b7a:	684b      	ldr	r3, [r1, #4]
    5b7c:	431a      	orrs	r2, r3
    5b7e:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5b80:	2000      	movs	r0, #0
    5b82:	e689      	b.n	5898 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    5b84:	4a08      	ldr	r2, [pc, #32]	; (5ba8 <spi_init+0x334>)
    5b86:	6a13      	ldr	r3, [r2, #32]
    5b88:	2102      	movs	r1, #2
    5b8a:	430b      	orrs	r3, r1
    5b8c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5b8e:	2318      	movs	r3, #24
    5b90:	e740      	b.n	5a14 <spi_init+0x1a0>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005611 	.word	0x00005611
    5b98:	40002800 	.word	0x40002800
    5b9c:	00006a89 	.word	0x00006a89
    5ba0:	00005507 	.word	0x00005507
    5ba4:	0000576d 	.word	0x0000576d
    5ba8:	40000400 	.word	0x40000400
    5bac:	00006a65 	.word	0x00006a65
    5bb0:	000069f5 	.word	0x000069f5
    5bb4:	000055c5 	.word	0x000055c5
    5bb8:	00006b61 	.word	0x00006b61
    5bbc:	41002000 	.word	0x41002000

00005bc0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5bc0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5bc2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5bc4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5bc6:	2c01      	cmp	r4, #1
    5bc8:	d001      	beq.n	5bce <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5bca:	0018      	movs	r0, r3
    5bcc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5bce:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5bd0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5bd2:	2c00      	cmp	r4, #0
    5bd4:	d1f9      	bne.n	5bca <spi_select_slave+0xa>
		if (select) {
    5bd6:	2a00      	cmp	r2, #0
    5bd8:	d058      	beq.n	5c8c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5bda:	784b      	ldrb	r3, [r1, #1]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d044      	beq.n	5c6a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5be0:	6803      	ldr	r3, [r0, #0]
    5be2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5be4:	07db      	lsls	r3, r3, #31
    5be6:	d410      	bmi.n	5c0a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5be8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5bea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bee:	2900      	cmp	r1, #0
    5bf0:	d104      	bne.n	5bfc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5bf2:	0953      	lsrs	r3, r2, #5
    5bf4:	01db      	lsls	r3, r3, #7
    5bf6:	492e      	ldr	r1, [pc, #184]	; (5cb0 <spi_select_slave+0xf0>)
    5bf8:	468c      	mov	ip, r1
    5bfa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5bfc:	211f      	movs	r1, #31
    5bfe:	4011      	ands	r1, r2
    5c00:	2201      	movs	r2, #1
    5c02:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5c04:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5c06:	2305      	movs	r3, #5
    5c08:	e7df      	b.n	5bca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5c0a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c0c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5c0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c10:	2c00      	cmp	r4, #0
    5c12:	d104      	bne.n	5c1e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5c14:	0953      	lsrs	r3, r2, #5
    5c16:	01db      	lsls	r3, r3, #7
    5c18:	4c25      	ldr	r4, [pc, #148]	; (5cb0 <spi_select_slave+0xf0>)
    5c1a:	46a4      	mov	ip, r4
    5c1c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c1e:	241f      	movs	r4, #31
    5c20:	4014      	ands	r4, r2
    5c22:	2201      	movs	r2, #1
    5c24:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5c26:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5c28:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c2a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5c2c:	07d2      	lsls	r2, r2, #31
    5c2e:	d501      	bpl.n	5c34 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c30:	788a      	ldrb	r2, [r1, #2]
    5c32:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5c34:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5c36:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5c38:	2a00      	cmp	r2, #0
    5c3a:	d1c6      	bne.n	5bca <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c3c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5c3e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c40:	7e13      	ldrb	r3, [r2, #24]
    5c42:	420b      	tst	r3, r1
    5c44:	d0fc      	beq.n	5c40 <spi_select_slave+0x80>
    5c46:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5c48:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5c4a:	0749      	lsls	r1, r1, #29
    5c4c:	d5bd      	bpl.n	5bca <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c4e:	8b53      	ldrh	r3, [r2, #26]
    5c50:	075b      	lsls	r3, r3, #29
    5c52:	d501      	bpl.n	5c58 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c54:	2304      	movs	r3, #4
    5c56:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c58:	7983      	ldrb	r3, [r0, #6]
    5c5a:	2b01      	cmp	r3, #1
    5c5c:	d002      	beq.n	5c64 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c60:	2300      	movs	r3, #0
    5c62:	e7b2      	b.n	5bca <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5c64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c66:	2300      	movs	r3, #0
    5c68:	e7af      	b.n	5bca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5c6a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c6c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c70:	2900      	cmp	r1, #0
    5c72:	d104      	bne.n	5c7e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5c74:	0953      	lsrs	r3, r2, #5
    5c76:	01db      	lsls	r3, r3, #7
    5c78:	490d      	ldr	r1, [pc, #52]	; (5cb0 <spi_select_slave+0xf0>)
    5c7a:	468c      	mov	ip, r1
    5c7c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c7e:	211f      	movs	r1, #31
    5c80:	4011      	ands	r1, r2
    5c82:	2201      	movs	r2, #1
    5c84:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5c86:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5c88:	2300      	movs	r3, #0
    5c8a:	e79e      	b.n	5bca <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5c8c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c8e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c90:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c92:	2900      	cmp	r1, #0
    5c94:	d104      	bne.n	5ca0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5c96:	0953      	lsrs	r3, r2, #5
    5c98:	01db      	lsls	r3, r3, #7
    5c9a:	4905      	ldr	r1, [pc, #20]	; (5cb0 <spi_select_slave+0xf0>)
    5c9c:	468c      	mov	ip, r1
    5c9e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ca0:	211f      	movs	r1, #31
    5ca2:	4011      	ands	r1, r2
    5ca4:	2201      	movs	r2, #1
    5ca6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ca8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5caa:	2300      	movs	r3, #0
    5cac:	e78d      	b.n	5bca <spi_select_slave+0xa>
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	40002800 	.word	0x40002800

00005cb4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cb6:	46de      	mov	lr, fp
    5cb8:	4657      	mov	r7, sl
    5cba:	464e      	mov	r6, r9
    5cbc:	4645      	mov	r5, r8
    5cbe:	b5e0      	push	{r5, r6, r7, lr}
    5cc0:	b091      	sub	sp, #68	; 0x44
    5cc2:	0005      	movs	r5, r0
    5cc4:	000c      	movs	r4, r1
    5cc6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5cc8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5cca:	0008      	movs	r0, r1
    5ccc:	4bc6      	ldr	r3, [pc, #792]	; (5fe8 <usart_init+0x334>)
    5cce:	4798      	blx	r3
    5cd0:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5cd2:	2805      	cmp	r0, #5
    5cd4:	d00d      	beq.n	5cf2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5cd6:	0007      	movs	r7, r0
    5cd8:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5cda:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5cdc:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5cde:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5ce0:	07c9      	lsls	r1, r1, #31
    5ce2:	d509      	bpl.n	5cf8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5ce4:	b011      	add	sp, #68	; 0x44
    5ce6:	bc3c      	pop	{r2, r3, r4, r5}
    5ce8:	4690      	mov	r8, r2
    5cea:	4699      	mov	r9, r3
    5cec:	46a2      	mov	sl, r4
    5cee:	46ab      	mov	fp, r5
    5cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5cf2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5cf4:	2301      	movs	r3, #1
    5cf6:	e7f1      	b.n	5cdc <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5cf8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5cfa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5cfc:	0789      	lsls	r1, r1, #30
    5cfe:	d4f1      	bmi.n	5ce4 <usart_init+0x30>
	if (sercom_index == 5) {
    5d00:	2a05      	cmp	r2, #5
    5d02:	d049      	beq.n	5d98 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5d04:	49b9      	ldr	r1, [pc, #740]	; (5fec <usart_init+0x338>)
    5d06:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5d08:	2201      	movs	r2, #1
    5d0a:	409a      	lsls	r2, r3
    5d0c:	0013      	movs	r3, r2
    5d0e:	4303      	orrs	r3, r0
    5d10:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5d12:	a90f      	add	r1, sp, #60	; 0x3c
    5d14:	232d      	movs	r3, #45	; 0x2d
    5d16:	4698      	mov	r8, r3
    5d18:	5cf3      	ldrb	r3, [r6, r3]
    5d1a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5d1c:	b2ff      	uxtb	r7, r7
    5d1e:	0038      	movs	r0, r7
    5d20:	4bb3      	ldr	r3, [pc, #716]	; (5ff0 <usart_init+0x33c>)
    5d22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5d24:	0038      	movs	r0, r7
    5d26:	4bb3      	ldr	r3, [pc, #716]	; (5ff4 <usart_init+0x340>)
    5d28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5d2a:	4643      	mov	r3, r8
    5d2c:	5cf0      	ldrb	r0, [r6, r3]
    5d2e:	2100      	movs	r1, #0
    5d30:	4bb1      	ldr	r3, [pc, #708]	; (5ff8 <usart_init+0x344>)
    5d32:	4798      	blx	r3
	module->character_size = config->character_size;
    5d34:	7af3      	ldrb	r3, [r6, #11]
    5d36:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5d38:	2324      	movs	r3, #36	; 0x24
    5d3a:	5cf3      	ldrb	r3, [r6, r3]
    5d3c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5d3e:	2325      	movs	r3, #37	; 0x25
    5d40:	5cf3      	ldrb	r3, [r6, r3]
    5d42:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5d44:	7ef3      	ldrb	r3, [r6, #27]
    5d46:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5d48:	7f33      	ldrb	r3, [r6, #28]
    5d4a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d4c:	682b      	ldr	r3, [r5, #0]
    5d4e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5d50:	0018      	movs	r0, r3
    5d52:	4ba5      	ldr	r3, [pc, #660]	; (5fe8 <usart_init+0x334>)
    5d54:	4798      	blx	r3
	if (sercom_index == 5) {
    5d56:	2805      	cmp	r0, #5
    5d58:	d026      	beq.n	5da8 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5d5a:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5d5c:	2200      	movs	r2, #0
    5d5e:	230e      	movs	r3, #14
    5d60:	a906      	add	r1, sp, #24
    5d62:	468c      	mov	ip, r1
    5d64:	4463      	add	r3, ip
    5d66:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5d68:	8a32      	ldrh	r2, [r6, #16]
    5d6a:	9202      	str	r2, [sp, #8]
    5d6c:	2380      	movs	r3, #128	; 0x80
    5d6e:	01db      	lsls	r3, r3, #7
    5d70:	429a      	cmp	r2, r3
    5d72:	d100      	bne.n	5d76 <usart_init+0xc2>
    5d74:	e0ab      	b.n	5ece <usart_init+0x21a>
    5d76:	d919      	bls.n	5dac <usart_init+0xf8>
    5d78:	23c0      	movs	r3, #192	; 0xc0
    5d7a:	01db      	lsls	r3, r3, #7
    5d7c:	9a02      	ldr	r2, [sp, #8]
    5d7e:	429a      	cmp	r2, r3
    5d80:	d100      	bne.n	5d84 <usart_init+0xd0>
    5d82:	e09f      	b.n	5ec4 <usart_init+0x210>
    5d84:	2380      	movs	r3, #128	; 0x80
    5d86:	021b      	lsls	r3, r3, #8
    5d88:	429a      	cmp	r2, r3
    5d8a:	d000      	beq.n	5d8e <usart_init+0xda>
    5d8c:	e127      	b.n	5fde <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5d8e:	2303      	movs	r3, #3
    5d90:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5d92:	2300      	movs	r3, #0
    5d94:	9307      	str	r3, [sp, #28]
    5d96:	e012      	b.n	5dbe <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5d98:	4994      	ldr	r1, [pc, #592]	; (5fec <usart_init+0x338>)
    5d9a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5d9c:	3a04      	subs	r2, #4
    5d9e:	409a      	lsls	r2, r3
    5da0:	0013      	movs	r3, r2
    5da2:	4303      	orrs	r3, r0
    5da4:	620b      	str	r3, [r1, #32]
    5da6:	e7b4      	b.n	5d12 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5da8:	2018      	movs	r0, #24
    5daa:	e7d7      	b.n	5d5c <usart_init+0xa8>
	switch (config->sample_rate) {
    5dac:	2380      	movs	r3, #128	; 0x80
    5dae:	019b      	lsls	r3, r3, #6
    5db0:	429a      	cmp	r2, r3
    5db2:	d000      	beq.n	5db6 <usart_init+0x102>
    5db4:	e113      	b.n	5fde <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5db6:	2310      	movs	r3, #16
    5db8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5dba:	3b0f      	subs	r3, #15
    5dbc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5dbe:	6833      	ldr	r3, [r6, #0]
    5dc0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5dc2:	68f3      	ldr	r3, [r6, #12]
    5dc4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5dc6:	6973      	ldr	r3, [r6, #20]
    5dc8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5dca:	7e33      	ldrb	r3, [r6, #24]
    5dcc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5dce:	2326      	movs	r3, #38	; 0x26
    5dd0:	5cf3      	ldrb	r3, [r6, r3]
    5dd2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5dd4:	6873      	ldr	r3, [r6, #4]
    5dd6:	4699      	mov	r9, r3
	switch (transfer_mode)
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d100      	bne.n	5dde <usart_init+0x12a>
    5ddc:	e09f      	b.n	5f1e <usart_init+0x26a>
    5dde:	2380      	movs	r3, #128	; 0x80
    5de0:	055b      	lsls	r3, r3, #21
    5de2:	4599      	cmp	r9, r3
    5de4:	d104      	bne.n	5df0 <usart_init+0x13c>
			if (!config->use_external_clock) {
    5de6:	2327      	movs	r3, #39	; 0x27
    5de8:	5cf3      	ldrb	r3, [r6, r3]
    5dea:	2b00      	cmp	r3, #0
    5dec:	d100      	bne.n	5df0 <usart_init+0x13c>
    5dee:	e084      	b.n	5efa <usart_init+0x246>
	if(config->encoding_format_enable) {
    5df0:	7e73      	ldrb	r3, [r6, #25]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d002      	beq.n	5dfc <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5df6:	7eb3      	ldrb	r3, [r6, #26]
    5df8:	4642      	mov	r2, r8
    5dfa:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dfc:	682a      	ldr	r2, [r5, #0]
    5dfe:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5e00:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5e02:	2b00      	cmp	r3, #0
    5e04:	d1fc      	bne.n	5e00 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5e06:	330e      	adds	r3, #14
    5e08:	aa06      	add	r2, sp, #24
    5e0a:	4694      	mov	ip, r2
    5e0c:	4463      	add	r3, ip
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	4642      	mov	r2, r8
    5e12:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5e14:	9b05      	ldr	r3, [sp, #20]
    5e16:	9a03      	ldr	r2, [sp, #12]
    5e18:	4313      	orrs	r3, r2
    5e1a:	9a04      	ldr	r2, [sp, #16]
    5e1c:	4313      	orrs	r3, r2
    5e1e:	464a      	mov	r2, r9
    5e20:	4313      	orrs	r3, r2
    5e22:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5e24:	465b      	mov	r3, fp
    5e26:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5e28:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5e2a:	4653      	mov	r3, sl
    5e2c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5e2e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5e30:	2327      	movs	r3, #39	; 0x27
    5e32:	5cf3      	ldrb	r3, [r6, r3]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d101      	bne.n	5e3c <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5e38:	3304      	adds	r3, #4
    5e3a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e3c:	7e73      	ldrb	r3, [r6, #25]
    5e3e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e40:	7f32      	ldrb	r2, [r6, #28]
    5e42:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e44:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e46:	7f72      	ldrb	r2, [r6, #29]
    5e48:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e4a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e4c:	2224      	movs	r2, #36	; 0x24
    5e4e:	5cb2      	ldrb	r2, [r6, r2]
    5e50:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e52:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5e54:	2225      	movs	r2, #37	; 0x25
    5e56:	5cb2      	ldrb	r2, [r6, r2]
    5e58:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e5a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5e5c:	7ab1      	ldrb	r1, [r6, #10]
    5e5e:	7af2      	ldrb	r2, [r6, #11]
    5e60:	4311      	orrs	r1, r2
    5e62:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5e64:	8933      	ldrh	r3, [r6, #8]
    5e66:	2bff      	cmp	r3, #255	; 0xff
    5e68:	d07d      	beq.n	5f66 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5e6a:	2280      	movs	r2, #128	; 0x80
    5e6c:	0452      	lsls	r2, r2, #17
    5e6e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5e70:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5e72:	232c      	movs	r3, #44	; 0x2c
    5e74:	5cf3      	ldrb	r3, [r6, r3]
    5e76:	2b00      	cmp	r3, #0
    5e78:	d103      	bne.n	5e82 <usart_init+0x1ce>
    5e7a:	4b60      	ldr	r3, [pc, #384]	; (5ffc <usart_init+0x348>)
    5e7c:	789b      	ldrb	r3, [r3, #2]
    5e7e:	079b      	lsls	r3, r3, #30
    5e80:	d501      	bpl.n	5e86 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5e82:	2380      	movs	r3, #128	; 0x80
    5e84:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e86:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5e88:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d1fc      	bne.n	5e88 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5e8e:	4643      	mov	r3, r8
    5e90:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e92:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5e94:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5e96:	2b00      	cmp	r3, #0
    5e98:	d1fc      	bne.n	5e94 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    5e9a:	4643      	mov	r3, r8
    5e9c:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5e9e:	ab0e      	add	r3, sp, #56	; 0x38
    5ea0:	2280      	movs	r2, #128	; 0x80
    5ea2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5ea4:	2200      	movs	r2, #0
    5ea6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5ea8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5eaa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5eac:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5eae:	930a      	str	r3, [sp, #40]	; 0x28
    5eb0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5eb2:	930b      	str	r3, [sp, #44]	; 0x2c
    5eb4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5eb6:	930c      	str	r3, [sp, #48]	; 0x30
    5eb8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5eba:	9302      	str	r3, [sp, #8]
    5ebc:	930d      	str	r3, [sp, #52]	; 0x34
    5ebe:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5ec0:	ae0a      	add	r6, sp, #40	; 0x28
    5ec2:	e05e      	b.n	5f82 <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ec4:	2308      	movs	r3, #8
    5ec6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec8:	3b07      	subs	r3, #7
    5eca:	9307      	str	r3, [sp, #28]
    5ecc:	e777      	b.n	5dbe <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    5ece:	6833      	ldr	r3, [r6, #0]
    5ed0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5ed2:	68f3      	ldr	r3, [r6, #12]
    5ed4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5ed6:	6973      	ldr	r3, [r6, #20]
    5ed8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5eda:	7e33      	ldrb	r3, [r6, #24]
    5edc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5ede:	2326      	movs	r3, #38	; 0x26
    5ee0:	5cf3      	ldrb	r3, [r6, r3]
    5ee2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5ee4:	6873      	ldr	r3, [r6, #4]
    5ee6:	4699      	mov	r9, r3
	switch (transfer_mode)
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d014      	beq.n	5f16 <usart_init+0x262>
    5eec:	2380      	movs	r3, #128	; 0x80
    5eee:	055b      	lsls	r3, r3, #21
    5ef0:	4599      	cmp	r9, r3
    5ef2:	d100      	bne.n	5ef6 <usart_init+0x242>
    5ef4:	e777      	b.n	5de6 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    5ef6:	2000      	movs	r0, #0
    5ef8:	e020      	b.n	5f3c <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5efa:	6a33      	ldr	r3, [r6, #32]
    5efc:	001f      	movs	r7, r3
    5efe:	b2c0      	uxtb	r0, r0
    5f00:	4b3f      	ldr	r3, [pc, #252]	; (6000 <usart_init+0x34c>)
    5f02:	4798      	blx	r3
    5f04:	0001      	movs	r1, r0
    5f06:	220e      	movs	r2, #14
    5f08:	ab06      	add	r3, sp, #24
    5f0a:	469c      	mov	ip, r3
    5f0c:	4462      	add	r2, ip
    5f0e:	0038      	movs	r0, r7
    5f10:	4b3c      	ldr	r3, [pc, #240]	; (6004 <usart_init+0x350>)
    5f12:	4798      	blx	r3
    5f14:	e012      	b.n	5f3c <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5f16:	2308      	movs	r3, #8
    5f18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f1a:	2300      	movs	r3, #0
    5f1c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5f1e:	2327      	movs	r3, #39	; 0x27
    5f20:	5cf3      	ldrb	r3, [r6, r3]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d00e      	beq.n	5f44 <usart_init+0x290>
				status_code =
    5f26:	9b06      	ldr	r3, [sp, #24]
    5f28:	9300      	str	r3, [sp, #0]
    5f2a:	9b07      	ldr	r3, [sp, #28]
    5f2c:	220e      	movs	r2, #14
    5f2e:	a906      	add	r1, sp, #24
    5f30:	468c      	mov	ip, r1
    5f32:	4462      	add	r2, ip
    5f34:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5f36:	6a30      	ldr	r0, [r6, #32]
    5f38:	4f33      	ldr	r7, [pc, #204]	; (6008 <usart_init+0x354>)
    5f3a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5f3c:	2800      	cmp	r0, #0
    5f3e:	d000      	beq.n	5f42 <usart_init+0x28e>
    5f40:	e6d0      	b.n	5ce4 <usart_init+0x30>
    5f42:	e755      	b.n	5df0 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    5f44:	6a33      	ldr	r3, [r6, #32]
    5f46:	001f      	movs	r7, r3
    5f48:	b2c0      	uxtb	r0, r0
    5f4a:	4b2d      	ldr	r3, [pc, #180]	; (6000 <usart_init+0x34c>)
    5f4c:	4798      	blx	r3
    5f4e:	0001      	movs	r1, r0
				status_code =
    5f50:	9b06      	ldr	r3, [sp, #24]
    5f52:	9300      	str	r3, [sp, #0]
    5f54:	9b07      	ldr	r3, [sp, #28]
    5f56:	220e      	movs	r2, #14
    5f58:	a806      	add	r0, sp, #24
    5f5a:	4684      	mov	ip, r0
    5f5c:	4462      	add	r2, ip
    5f5e:	0038      	movs	r0, r7
    5f60:	4f29      	ldr	r7, [pc, #164]	; (6008 <usart_init+0x354>)
    5f62:	47b8      	blx	r7
    5f64:	e7ea      	b.n	5f3c <usart_init+0x288>
		if(config->lin_slave_enable) {
    5f66:	7ef3      	ldrb	r3, [r6, #27]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d082      	beq.n	5e72 <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5f6c:	2380      	movs	r3, #128	; 0x80
    5f6e:	04db      	lsls	r3, r3, #19
    5f70:	431f      	orrs	r7, r3
    5f72:	e77e      	b.n	5e72 <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5f74:	0020      	movs	r0, r4
    5f76:	4b25      	ldr	r3, [pc, #148]	; (600c <usart_init+0x358>)
    5f78:	4798      	blx	r3
    5f7a:	e007      	b.n	5f8c <usart_init+0x2d8>
    5f7c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5f7e:	2f04      	cmp	r7, #4
    5f80:	d00d      	beq.n	5f9e <usart_init+0x2ea>
    5f82:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f84:	00bb      	lsls	r3, r7, #2
    5f86:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5f88:	2800      	cmp	r0, #0
    5f8a:	d0f3      	beq.n	5f74 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    5f8c:	1c43      	adds	r3, r0, #1
    5f8e:	d0f5      	beq.n	5f7c <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5f90:	a90e      	add	r1, sp, #56	; 0x38
    5f92:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5f94:	0c00      	lsrs	r0, r0, #16
    5f96:	b2c0      	uxtb	r0, r0
    5f98:	4b1d      	ldr	r3, [pc, #116]	; (6010 <usart_init+0x35c>)
    5f9a:	4798      	blx	r3
    5f9c:	e7ee      	b.n	5f7c <usart_init+0x2c8>
		module->callback[i]            = NULL;
    5f9e:	2300      	movs	r3, #0
    5fa0:	60eb      	str	r3, [r5, #12]
    5fa2:	612b      	str	r3, [r5, #16]
    5fa4:	616b      	str	r3, [r5, #20]
    5fa6:	61ab      	str	r3, [r5, #24]
    5fa8:	61eb      	str	r3, [r5, #28]
    5faa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5fac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5fae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5fb0:	2200      	movs	r2, #0
    5fb2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5fb4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5fb6:	3330      	adds	r3, #48	; 0x30
    5fb8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5fba:	3301      	adds	r3, #1
    5fbc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5fbe:	3301      	adds	r3, #1
    5fc0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5fc2:	3301      	adds	r3, #1
    5fc4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5fc6:	6828      	ldr	r0, [r5, #0]
    5fc8:	4b07      	ldr	r3, [pc, #28]	; (5fe8 <usart_init+0x334>)
    5fca:	4798      	blx	r3
    5fcc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5fce:	4911      	ldr	r1, [pc, #68]	; (6014 <usart_init+0x360>)
    5fd0:	4b11      	ldr	r3, [pc, #68]	; (6018 <usart_init+0x364>)
    5fd2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5fd4:	00a4      	lsls	r4, r4, #2
    5fd6:	4b11      	ldr	r3, [pc, #68]	; (601c <usart_init+0x368>)
    5fd8:	50e5      	str	r5, [r4, r3]
	return status_code;
    5fda:	2000      	movs	r0, #0
    5fdc:	e682      	b.n	5ce4 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5fde:	2310      	movs	r3, #16
    5fe0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5fe2:	2300      	movs	r3, #0
    5fe4:	9307      	str	r3, [sp, #28]
    5fe6:	e6ea      	b.n	5dbe <usart_init+0x10a>
    5fe8:	0000576d 	.word	0x0000576d
    5fec:	40000400 	.word	0x40000400
    5ff0:	00006a65 	.word	0x00006a65
    5ff4:	000069f5 	.word	0x000069f5
    5ff8:	000055c5 	.word	0x000055c5
    5ffc:	41002000 	.word	0x41002000
    6000:	00006a89 	.word	0x00006a89
    6004:	00005507 	.word	0x00005507
    6008:	00005531 	.word	0x00005531
    600c:	00005611 	.word	0x00005611
    6010:	00006b61 	.word	0x00006b61
    6014:	0000629d 	.word	0x0000629d
    6018:	000057a9 	.word	0x000057a9
    601c:	20001f2c 	.word	0x20001f2c

00006020 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6020:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    6022:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6024:	2a00      	cmp	r2, #0
    6026:	d101      	bne.n	602c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6028:	0018      	movs	r0, r3
    602a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    602c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    602e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6030:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    6032:	2a00      	cmp	r2, #0
    6034:	d1f8      	bne.n	6028 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6036:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    6038:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    603a:	2a00      	cmp	r2, #0
    603c:	d1fc      	bne.n	6038 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    603e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6040:	2102      	movs	r1, #2
    6042:	7e1a      	ldrb	r2, [r3, #24]
    6044:	420a      	tst	r2, r1
    6046:	d0fc      	beq.n	6042 <usart_write_wait+0x22>
	return STATUS_OK;
    6048:	2300      	movs	r3, #0
    604a:	e7ed      	b.n	6028 <usart_write_wait+0x8>

0000604c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    604c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    604e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6050:	2a00      	cmp	r2, #0
    6052:	d101      	bne.n	6058 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6054:	0018      	movs	r0, r3
    6056:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    6058:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    605a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    605c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    605e:	2a00      	cmp	r2, #0
    6060:	d1f8      	bne.n	6054 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6062:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6064:	7e10      	ldrb	r0, [r2, #24]
    6066:	0740      	lsls	r0, r0, #29
    6068:	d5f4      	bpl.n	6054 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    606a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    606c:	2b00      	cmp	r3, #0
    606e:	d1fc      	bne.n	606a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6070:	8b53      	ldrh	r3, [r2, #26]
    6072:	b2db      	uxtb	r3, r3
	if (error_code) {
    6074:	0698      	lsls	r0, r3, #26
    6076:	d01d      	beq.n	60b4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6078:	0798      	lsls	r0, r3, #30
    607a:	d503      	bpl.n	6084 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    607c:	2302      	movs	r3, #2
    607e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6080:	3318      	adds	r3, #24
    6082:	e7e7      	b.n	6054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6084:	0758      	lsls	r0, r3, #29
    6086:	d503      	bpl.n	6090 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6088:	2304      	movs	r3, #4
    608a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    608c:	331a      	adds	r3, #26
    608e:	e7e1      	b.n	6054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6090:	07d8      	lsls	r0, r3, #31
    6092:	d503      	bpl.n	609c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6094:	2301      	movs	r3, #1
    6096:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6098:	3312      	adds	r3, #18
    609a:	e7db      	b.n	6054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    609c:	06d8      	lsls	r0, r3, #27
    609e:	d503      	bpl.n	60a8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    60a0:	2310      	movs	r3, #16
    60a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    60a4:	3332      	adds	r3, #50	; 0x32
    60a6:	e7d5      	b.n	6054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    60a8:	069b      	lsls	r3, r3, #26
    60aa:	d503      	bpl.n	60b4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    60ac:	2320      	movs	r3, #32
    60ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    60b0:	3321      	adds	r3, #33	; 0x21
    60b2:	e7cf      	b.n	6054 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    60b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    60b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    60b8:	2300      	movs	r3, #0
    60ba:	e7cb      	b.n	6054 <usart_read_wait+0x8>

000060bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    60bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60be:	46ce      	mov	lr, r9
    60c0:	4647      	mov	r7, r8
    60c2:	b580      	push	{r7, lr}
    60c4:	b083      	sub	sp, #12
    60c6:	0005      	movs	r5, r0
    60c8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    60ca:	2017      	movs	r0, #23
	if (length == 0) {
    60cc:	2a00      	cmp	r2, #0
    60ce:	d104      	bne.n	60da <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    60d0:	b003      	add	sp, #12
    60d2:	bc0c      	pop	{r2, r3}
    60d4:	4690      	mov	r8, r2
    60d6:	4699      	mov	r9, r3
    60d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    60da:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    60dc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    60de:	2b00      	cmp	r3, #0
    60e0:	d0f6      	beq.n	60d0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60e2:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    60e4:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    60e6:	2b00      	cmp	r3, #0
    60e8:	d1fc      	bne.n	60e4 <usart_write_buffer_wait+0x28>
	while (length--) {
    60ea:	3a01      	subs	r2, #1
    60ec:	b293      	uxth	r3, r2
    60ee:	4699      	mov	r9, r3
    60f0:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    60f2:	2701      	movs	r7, #1
	while (length--) {
    60f4:	4b1f      	ldr	r3, [pc, #124]	; (6174 <usart_write_buffer_wait+0xb8>)
    60f6:	4698      	mov	r8, r3
    60f8:	e011      	b.n	611e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    60fa:	1c73      	adds	r3, r6, #1
    60fc:	b29b      	uxth	r3, r3
    60fe:	9a01      	ldr	r2, [sp, #4]
    6100:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6102:	796a      	ldrb	r2, [r5, #5]
    6104:	2a01      	cmp	r2, #1
    6106:	d017      	beq.n	6138 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6108:	b289      	uxth	r1, r1
    610a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    610c:	0028      	movs	r0, r5
    610e:	4b1a      	ldr	r3, [pc, #104]	; (6178 <usart_write_buffer_wait+0xbc>)
    6110:	4798      	blx	r3
	while (length--) {
    6112:	464b      	mov	r3, r9
    6114:	3b01      	subs	r3, #1
    6116:	b29b      	uxth	r3, r3
    6118:	4699      	mov	r9, r3
    611a:	4543      	cmp	r3, r8
    611c:	d013      	beq.n	6146 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    611e:	7e23      	ldrb	r3, [r4, #24]
    6120:	423b      	tst	r3, r7
    6122:	d1ea      	bne.n	60fa <usart_write_buffer_wait+0x3e>
    6124:	4b13      	ldr	r3, [pc, #76]	; (6174 <usart_write_buffer_wait+0xb8>)
    6126:	7e22      	ldrb	r2, [r4, #24]
    6128:	423a      	tst	r2, r7
    612a:	d1e6      	bne.n	60fa <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    612c:	2b01      	cmp	r3, #1
    612e:	d019      	beq.n	6164 <usart_write_buffer_wait+0xa8>
    6130:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6132:	2b00      	cmp	r3, #0
    6134:	d1f7      	bne.n	6126 <usart_write_buffer_wait+0x6a>
    6136:	e7e0      	b.n	60fa <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6138:	3602      	adds	r6, #2
    613a:	b2b6      	uxth	r6, r6
    613c:	9a01      	ldr	r2, [sp, #4]
    613e:	5cd3      	ldrb	r3, [r2, r3]
    6140:	021b      	lsls	r3, r3, #8
    6142:	4319      	orrs	r1, r3
    6144:	e7e2      	b.n	610c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6146:	7e23      	ldrb	r3, [r4, #24]
    6148:	079b      	lsls	r3, r3, #30
    614a:	d40d      	bmi.n	6168 <usart_write_buffer_wait+0xac>
    614c:	4b09      	ldr	r3, [pc, #36]	; (6174 <usart_write_buffer_wait+0xb8>)
    614e:	2102      	movs	r1, #2
    6150:	7e22      	ldrb	r2, [r4, #24]
    6152:	420a      	tst	r2, r1
    6154:	d10a      	bne.n	616c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    6156:	2b01      	cmp	r3, #1
    6158:	d00a      	beq.n	6170 <usart_write_buffer_wait+0xb4>
    615a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    615c:	2b00      	cmp	r3, #0
    615e:	d1f7      	bne.n	6150 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6160:	2000      	movs	r0, #0
    6162:	e7b5      	b.n	60d0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    6164:	2012      	movs	r0, #18
    6166:	e7b3      	b.n	60d0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6168:	2000      	movs	r0, #0
    616a:	e7b1      	b.n	60d0 <usart_write_buffer_wait+0x14>
    616c:	2000      	movs	r0, #0
    616e:	e7af      	b.n	60d0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6170:	2012      	movs	r0, #18
    6172:	e7ad      	b.n	60d0 <usart_write_buffer_wait+0x14>
    6174:	0000ffff 	.word	0x0000ffff
    6178:	00006021 	.word	0x00006021

0000617c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    617c:	b5f0      	push	{r4, r5, r6, r7, lr}
    617e:	46d6      	mov	lr, sl
    6180:	b500      	push	{lr}
    6182:	b084      	sub	sp, #16
    6184:	0004      	movs	r4, r0
    6186:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6188:	2017      	movs	r0, #23
	if (length == 0) {
    618a:	2a00      	cmp	r2, #0
    618c:	d103      	bne.n	6196 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    618e:	b004      	add	sp, #16
    6190:	bc04      	pop	{r2}
    6192:	4692      	mov	sl, r2
    6194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    6196:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6198:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    619a:	2b00      	cmp	r3, #0
    619c:	d0f7      	beq.n	618e <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    619e:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    61a0:	3a01      	subs	r2, #1
    61a2:	b293      	uxth	r3, r2
    61a4:	469a      	mov	sl, r3
    61a6:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    61a8:	2704      	movs	r7, #4
    61aa:	e019      	b.n	61e0 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    61ac:	2300      	movs	r3, #0
    61ae:	aa02      	add	r2, sp, #8
    61b0:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    61b2:	1d91      	adds	r1, r2, #6
    61b4:	0020      	movs	r0, r4
    61b6:	4b15      	ldr	r3, [pc, #84]	; (620c <usart_read_buffer_wait+0x90>)
    61b8:	4798      	blx	r3
		if (retval != STATUS_OK) {
    61ba:	2800      	cmp	r0, #0
    61bc:	d1e7      	bne.n	618e <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    61be:	1c69      	adds	r1, r5, #1
    61c0:	b289      	uxth	r1, r1
    61c2:	ab02      	add	r3, sp, #8
    61c4:	88db      	ldrh	r3, [r3, #6]
    61c6:	9a01      	ldr	r2, [sp, #4]
    61c8:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    61ca:	7962      	ldrb	r2, [r4, #5]
    61cc:	2a01      	cmp	r2, #1
    61ce:	d014      	beq.n	61fa <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    61d0:	000d      	movs	r5, r1
	while (length--) {
    61d2:	4653      	mov	r3, sl
    61d4:	3b01      	subs	r3, #1
    61d6:	b29b      	uxth	r3, r3
    61d8:	469a      	mov	sl, r3
    61da:	4b0d      	ldr	r3, [pc, #52]	; (6210 <usart_read_buffer_wait+0x94>)
    61dc:	459a      	cmp	sl, r3
    61de:	d0d6      	beq.n	618e <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    61e0:	7e33      	ldrb	r3, [r6, #24]
    61e2:	423b      	tst	r3, r7
    61e4:	d1e2      	bne.n	61ac <usart_read_buffer_wait+0x30>
    61e6:	4b0a      	ldr	r3, [pc, #40]	; (6210 <usart_read_buffer_wait+0x94>)
    61e8:	7e32      	ldrb	r2, [r6, #24]
    61ea:	423a      	tst	r2, r7
    61ec:	d1de      	bne.n	61ac <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    61ee:	2b01      	cmp	r3, #1
    61f0:	d009      	beq.n	6206 <usart_read_buffer_wait+0x8a>
    61f2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    61f4:	2b00      	cmp	r3, #0
    61f6:	d1f7      	bne.n	61e8 <usart_read_buffer_wait+0x6c>
    61f8:	e7d8      	b.n	61ac <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    61fa:	3502      	adds	r5, #2
    61fc:	b2ad      	uxth	r5, r5
    61fe:	0a1b      	lsrs	r3, r3, #8
    6200:	9a01      	ldr	r2, [sp, #4]
    6202:	5453      	strb	r3, [r2, r1]
    6204:	e7e5      	b.n	61d2 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    6206:	2012      	movs	r0, #18
    6208:	e7c1      	b.n	618e <usart_read_buffer_wait+0x12>
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	0000604d 	.word	0x0000604d
    6210:	0000ffff 	.word	0x0000ffff

00006214 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6216:	0004      	movs	r4, r0
    6218:	000d      	movs	r5, r1
    621a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    621c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    621e:	4b0f      	ldr	r3, [pc, #60]	; (625c <_usart_read_buffer+0x48>)
    6220:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    6222:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6224:	b29b      	uxth	r3, r3
    6226:	2b00      	cmp	r3, #0
    6228:	d003      	beq.n	6232 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    622a:	4b0d      	ldr	r3, [pc, #52]	; (6260 <_usart_read_buffer+0x4c>)
    622c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    622e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    6232:	85a6      	strh	r6, [r4, #44]	; 0x2c
    6234:	4b0a      	ldr	r3, [pc, #40]	; (6260 <_usart_read_buffer+0x4c>)
    6236:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    6238:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    623a:	2205      	movs	r2, #5
    623c:	2332      	movs	r3, #50	; 0x32
    623e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6240:	3b2e      	subs	r3, #46	; 0x2e
    6242:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    6244:	7a23      	ldrb	r3, [r4, #8]
    6246:	2b00      	cmp	r3, #0
    6248:	d001      	beq.n	624e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    624a:	2320      	movs	r3, #32
    624c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    624e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    6250:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    6252:	2b00      	cmp	r3, #0
    6254:	d0ec      	beq.n	6230 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6256:	2308      	movs	r3, #8
    6258:	75bb      	strb	r3, [r7, #22]
    625a:	e7e9      	b.n	6230 <_usart_read_buffer+0x1c>
    625c:	00004569 	.word	0x00004569
    6260:	000045a9 	.word	0x000045a9

00006264 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6264:	1c93      	adds	r3, r2, #2
    6266:	009b      	lsls	r3, r3, #2
    6268:	18c3      	adds	r3, r0, r3
    626a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    626c:	2130      	movs	r1, #48	; 0x30
    626e:	2301      	movs	r3, #1
    6270:	4093      	lsls	r3, r2
    6272:	001a      	movs	r2, r3
    6274:	5c43      	ldrb	r3, [r0, r1]
    6276:	4313      	orrs	r3, r2
    6278:	5443      	strb	r3, [r0, r1]
}
    627a:	4770      	bx	lr

0000627c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    627c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    627e:	2317      	movs	r3, #23
	if (length == 0) {
    6280:	2a00      	cmp	r2, #0
    6282:	d101      	bne.n	6288 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    6284:	0018      	movs	r0, r3
    6286:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6288:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    628a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    628c:	2c00      	cmp	r4, #0
    628e:	d0f9      	beq.n	6284 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6290:	4b01      	ldr	r3, [pc, #4]	; (6298 <usart_read_buffer_job+0x1c>)
    6292:	4798      	blx	r3
    6294:	0003      	movs	r3, r0
    6296:	e7f5      	b.n	6284 <usart_read_buffer_job+0x8>
    6298:	00006215 	.word	0x00006215

0000629c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    629e:	0080      	lsls	r0, r0, #2
    62a0:	4b62      	ldr	r3, [pc, #392]	; (642c <_usart_interrupt_handler+0x190>)
    62a2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    62a4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    62a6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    62a8:	2b00      	cmp	r3, #0
    62aa:	d1fc      	bne.n	62a6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    62ac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    62ae:	7da6      	ldrb	r6, [r4, #22]
    62b0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    62b2:	2330      	movs	r3, #48	; 0x30
    62b4:	5ceb      	ldrb	r3, [r5, r3]
    62b6:	2231      	movs	r2, #49	; 0x31
    62b8:	5caf      	ldrb	r7, [r5, r2]
    62ba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    62bc:	07f3      	lsls	r3, r6, #31
    62be:	d522      	bpl.n	6306 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    62c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62c2:	b29b      	uxth	r3, r3
    62c4:	2b00      	cmp	r3, #0
    62c6:	d01c      	beq.n	6302 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    62ca:	7813      	ldrb	r3, [r2, #0]
    62cc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    62ce:	1c51      	adds	r1, r2, #1
    62d0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62d2:	7969      	ldrb	r1, [r5, #5]
    62d4:	2901      	cmp	r1, #1
    62d6:	d00e      	beq.n	62f6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62d8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    62da:	05db      	lsls	r3, r3, #23
    62dc:	0ddb      	lsrs	r3, r3, #23
    62de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    62e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62e2:	3b01      	subs	r3, #1
    62e4:	b29b      	uxth	r3, r3
    62e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    62e8:	2b00      	cmp	r3, #0
    62ea:	d10c      	bne.n	6306 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    62ec:	3301      	adds	r3, #1
    62ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    62f0:	3301      	adds	r3, #1
    62f2:	75a3      	strb	r3, [r4, #22]
    62f4:	e007      	b.n	6306 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    62f6:	7851      	ldrb	r1, [r2, #1]
    62f8:	0209      	lsls	r1, r1, #8
    62fa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    62fc:	3202      	adds	r2, #2
    62fe:	62aa      	str	r2, [r5, #40]	; 0x28
    6300:	e7eb      	b.n	62da <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6302:	2301      	movs	r3, #1
    6304:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6306:	07b3      	lsls	r3, r6, #30
    6308:	d506      	bpl.n	6318 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    630a:	2302      	movs	r3, #2
    630c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    630e:	2200      	movs	r2, #0
    6310:	3331      	adds	r3, #49	; 0x31
    6312:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6314:	07fb      	lsls	r3, r7, #31
    6316:	d41a      	bmi.n	634e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6318:	0773      	lsls	r3, r6, #29
    631a:	d565      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    631c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    631e:	b29b      	uxth	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d05f      	beq.n	63e4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6324:	8b63      	ldrh	r3, [r4, #26]
    6326:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6328:	071a      	lsls	r2, r3, #28
    632a:	d414      	bmi.n	6356 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    632c:	223f      	movs	r2, #63	; 0x3f
    632e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6330:	2b00      	cmp	r3, #0
    6332:	d034      	beq.n	639e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6334:	079a      	lsls	r2, r3, #30
    6336:	d511      	bpl.n	635c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6338:	221a      	movs	r2, #26
    633a:	2332      	movs	r3, #50	; 0x32
    633c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    633e:	3b30      	subs	r3, #48	; 0x30
    6340:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6342:	077b      	lsls	r3, r7, #29
    6344:	d550      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6346:	0028      	movs	r0, r5
    6348:	696b      	ldr	r3, [r5, #20]
    634a:	4798      	blx	r3
    634c:	e04c      	b.n	63e8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    634e:	0028      	movs	r0, r5
    6350:	68eb      	ldr	r3, [r5, #12]
    6352:	4798      	blx	r3
    6354:	e7e0      	b.n	6318 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6356:	2237      	movs	r2, #55	; 0x37
    6358:	4013      	ands	r3, r2
    635a:	e7e9      	b.n	6330 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    635c:	075a      	lsls	r2, r3, #29
    635e:	d505      	bpl.n	636c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6360:	221e      	movs	r2, #30
    6362:	2332      	movs	r3, #50	; 0x32
    6364:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6366:	3b2e      	subs	r3, #46	; 0x2e
    6368:	8363      	strh	r3, [r4, #26]
    636a:	e7ea      	b.n	6342 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    636c:	07da      	lsls	r2, r3, #31
    636e:	d505      	bpl.n	637c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6370:	2213      	movs	r2, #19
    6372:	2332      	movs	r3, #50	; 0x32
    6374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6376:	3b31      	subs	r3, #49	; 0x31
    6378:	8363      	strh	r3, [r4, #26]
    637a:	e7e2      	b.n	6342 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    637c:	06da      	lsls	r2, r3, #27
    637e:	d505      	bpl.n	638c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6380:	2242      	movs	r2, #66	; 0x42
    6382:	2332      	movs	r3, #50	; 0x32
    6384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6386:	3b22      	subs	r3, #34	; 0x22
    6388:	8363      	strh	r3, [r4, #26]
    638a:	e7da      	b.n	6342 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    638c:	2220      	movs	r2, #32
    638e:	421a      	tst	r2, r3
    6390:	d0d7      	beq.n	6342 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6392:	3221      	adds	r2, #33	; 0x21
    6394:	2332      	movs	r3, #50	; 0x32
    6396:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6398:	3b12      	subs	r3, #18
    639a:	8363      	strh	r3, [r4, #26]
    639c:	e7d1      	b.n	6342 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    639e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    63a0:	05db      	lsls	r3, r3, #23
    63a2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    63a4:	b2da      	uxtb	r2, r3
    63a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    63a8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    63aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    63ac:	1c51      	adds	r1, r2, #1
    63ae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    63b0:	7969      	ldrb	r1, [r5, #5]
    63b2:	2901      	cmp	r1, #1
    63b4:	d010      	beq.n	63d8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    63b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    63b8:	3b01      	subs	r3, #1
    63ba:	b29b      	uxth	r3, r3
    63bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    63be:	2b00      	cmp	r3, #0
    63c0:	d112      	bne.n	63e8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63c2:	3304      	adds	r3, #4
    63c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    63c6:	2200      	movs	r2, #0
    63c8:	332e      	adds	r3, #46	; 0x2e
    63ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    63cc:	07bb      	lsls	r3, r7, #30
    63ce:	d50b      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    63d0:	0028      	movs	r0, r5
    63d2:	692b      	ldr	r3, [r5, #16]
    63d4:	4798      	blx	r3
    63d6:	e007      	b.n	63e8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    63d8:	0a1b      	lsrs	r3, r3, #8
    63da:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    63dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    63de:	3301      	adds	r3, #1
    63e0:	626b      	str	r3, [r5, #36]	; 0x24
    63e2:	e7e8      	b.n	63b6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63e4:	2304      	movs	r3, #4
    63e6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    63e8:	06f3      	lsls	r3, r6, #27
    63ea:	d504      	bpl.n	63f6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    63ec:	2310      	movs	r3, #16
    63ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    63f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    63f2:	06fb      	lsls	r3, r7, #27
    63f4:	d40e      	bmi.n	6414 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    63f6:	06b3      	lsls	r3, r6, #26
    63f8:	d504      	bpl.n	6404 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    63fa:	2320      	movs	r3, #32
    63fc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    63fe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6400:	073b      	lsls	r3, r7, #28
    6402:	d40b      	bmi.n	641c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6404:	0733      	lsls	r3, r6, #28
    6406:	d504      	bpl.n	6412 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6408:	2308      	movs	r3, #8
    640a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    640c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    640e:	06bb      	lsls	r3, r7, #26
    6410:	d408      	bmi.n	6424 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6414:	0028      	movs	r0, r5
    6416:	69eb      	ldr	r3, [r5, #28]
    6418:	4798      	blx	r3
    641a:	e7ec      	b.n	63f6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    641c:	0028      	movs	r0, r5
    641e:	69ab      	ldr	r3, [r5, #24]
    6420:	4798      	blx	r3
    6422:	e7ef      	b.n	6404 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6424:	6a2b      	ldr	r3, [r5, #32]
    6426:	0028      	movs	r0, r5
    6428:	4798      	blx	r3
}
    642a:	e7f2      	b.n	6412 <_usart_interrupt_handler+0x176>
    642c:	20001f2c 	.word	0x20001f2c

00006430 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6430:	b510      	push	{r4, lr}
	switch (clock_source) {
    6432:	2808      	cmp	r0, #8
    6434:	d803      	bhi.n	643e <system_clock_source_get_hz+0xe>
    6436:	0080      	lsls	r0, r0, #2
    6438:	4b1c      	ldr	r3, [pc, #112]	; (64ac <system_clock_source_get_hz+0x7c>)
    643a:	581b      	ldr	r3, [r3, r0]
    643c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    643e:	2000      	movs	r0, #0
    6440:	e032      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6442:	4b1b      	ldr	r3, [pc, #108]	; (64b0 <system_clock_source_get_hz+0x80>)
    6444:	6918      	ldr	r0, [r3, #16]
    6446:	e02f      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6448:	4b1a      	ldr	r3, [pc, #104]	; (64b4 <system_clock_source_get_hz+0x84>)
    644a:	7d18      	ldrb	r0, [r3, #20]
    644c:	0700      	lsls	r0, r0, #28
    644e:	0f80      	lsrs	r0, r0, #30
    6450:	1c43      	adds	r3, r0, #1
    6452:	4819      	ldr	r0, [pc, #100]	; (64b8 <system_clock_source_get_hz+0x88>)
    6454:	4358      	muls	r0, r3
    6456:	e027      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6458:	4b15      	ldr	r3, [pc, #84]	; (64b0 <system_clock_source_get_hz+0x80>)
    645a:	6958      	ldr	r0, [r3, #20]
    645c:	e024      	b.n	64a8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    645e:	4b14      	ldr	r3, [pc, #80]	; (64b0 <system_clock_source_get_hz+0x80>)
    6460:	681b      	ldr	r3, [r3, #0]
			return 0;
    6462:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6464:	079b      	lsls	r3, r3, #30
    6466:	d51f      	bpl.n	64a8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6468:	4912      	ldr	r1, [pc, #72]	; (64b4 <system_clock_source_get_hz+0x84>)
    646a:	2280      	movs	r2, #128	; 0x80
    646c:	0052      	lsls	r2, r2, #1
    646e:	68cb      	ldr	r3, [r1, #12]
    6470:	4213      	tst	r3, r2
    6472:	d0fc      	beq.n	646e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6474:	4b0e      	ldr	r3, [pc, #56]	; (64b0 <system_clock_source_get_hz+0x80>)
    6476:	681b      	ldr	r3, [r3, #0]
    6478:	075b      	lsls	r3, r3, #29
    647a:	d401      	bmi.n	6480 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    647c:	480f      	ldr	r0, [pc, #60]	; (64bc <system_clock_source_get_hz+0x8c>)
    647e:	e013      	b.n	64a8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6480:	2000      	movs	r0, #0
    6482:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <system_clock_source_get_hz+0x90>)
    6484:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6486:	4b0a      	ldr	r3, [pc, #40]	; (64b0 <system_clock_source_get_hz+0x80>)
    6488:	689b      	ldr	r3, [r3, #8]
    648a:	041b      	lsls	r3, r3, #16
    648c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    648e:	4358      	muls	r0, r3
    6490:	e00a      	b.n	64a8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6492:	2328      	movs	r3, #40	; 0x28
    6494:	4a07      	ldr	r2, [pc, #28]	; (64b4 <system_clock_source_get_hz+0x84>)
    6496:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6498:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    649a:	079b      	lsls	r3, r3, #30
    649c:	d504      	bpl.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    649e:	4b04      	ldr	r3, [pc, #16]	; (64b0 <system_clock_source_get_hz+0x80>)
    64a0:	68d8      	ldr	r0, [r3, #12]
    64a2:	e001      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    64a4:	2080      	movs	r0, #128	; 0x80
    64a6:	0200      	lsls	r0, r0, #8
	}
}
    64a8:	bd10      	pop	{r4, pc}
    64aa:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    64ac:	00017c4c 	.word	0x00017c4c
=======
    64ac:	00017ba0 	.word	0x00017ba0
>>>>>>> Stashed changes
    64b0:	200000e0 	.word	0x200000e0
    64b4:	40000c00 	.word	0x40000c00
    64b8:	003d0900 	.word	0x003d0900
    64bc:	02dc6c00 	.word	0x02dc6c00
    64c0:	00006a89 	.word	0x00006a89

000064c4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    64c4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    64c6:	4c0b      	ldr	r4, [pc, #44]	; (64f4 <system_clock_source_osc16m_set_config+0x30>)
    64c8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    64ca:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    64cc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    64ce:	7802      	ldrb	r2, [r0, #0]
    64d0:	2103      	movs	r1, #3
    64d2:	4011      	ands	r1, r2
    64d4:	0089      	lsls	r1, r1, #2
    64d6:	220c      	movs	r2, #12
    64d8:	4393      	bics	r3, r2
    64da:	430b      	orrs	r3, r1
    64dc:	3a0b      	subs	r2, #11
    64de:	4032      	ands	r2, r6
    64e0:	0192      	lsls	r2, r2, #6
    64e2:	2140      	movs	r1, #64	; 0x40
    64e4:	438b      	bics	r3, r1
    64e6:	4313      	orrs	r3, r2
    64e8:	01ed      	lsls	r5, r5, #7
    64ea:	227f      	movs	r2, #127	; 0x7f
    64ec:	4013      	ands	r3, r2
    64ee:	432b      	orrs	r3, r5
    64f0:	7523      	strb	r3, [r4, #20]
}
    64f2:	bd70      	pop	{r4, r5, r6, pc}
    64f4:	40000c00 	.word	0x40000c00

000064f8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fa:	46d6      	mov	lr, sl
    64fc:	464f      	mov	r7, r9
    64fe:	4646      	mov	r6, r8
    6500:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6502:	4b20      	ldr	r3, [pc, #128]	; (6584 <system_clock_source_xosc32k_set_config+0x8c>)
    6504:	469a      	mov	sl, r3
    6506:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6508:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    650a:	7801      	ldrb	r1, [r0, #0]
    650c:	424c      	negs	r4, r1
    650e:	414c      	adcs	r4, r1
    6510:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6512:	7881      	ldrb	r1, [r0, #2]
    6514:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6516:	78c1      	ldrb	r1, [r0, #3]
    6518:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    651a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    651c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    651e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6520:	6840      	ldr	r0, [r0, #4]
    6522:	4919      	ldr	r1, [pc, #100]	; (6588 <system_clock_source_xosc32k_set_config+0x90>)
    6524:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6526:	2101      	movs	r1, #1
    6528:	4648      	mov	r0, r9
    652a:	0080      	lsls	r0, r0, #2
    652c:	2204      	movs	r2, #4
    652e:	4393      	bics	r3, r2
    6530:	4303      	orrs	r3, r0
    6532:	4640      	mov	r0, r8
    6534:	4008      	ands	r0, r1
    6536:	00c0      	lsls	r0, r0, #3
    6538:	3204      	adds	r2, #4
    653a:	4393      	bics	r3, r2
    653c:	4303      	orrs	r3, r0
    653e:	4660      	mov	r0, ip
    6540:	4008      	ands	r0, r1
    6542:	0100      	lsls	r0, r0, #4
    6544:	3208      	adds	r2, #8
    6546:	4393      	bics	r3, r2
    6548:	4303      	orrs	r3, r0
    654a:	400f      	ands	r7, r1
    654c:	01bf      	lsls	r7, r7, #6
    654e:	2040      	movs	r0, #64	; 0x40
    6550:	4383      	bics	r3, r0
    6552:	433b      	orrs	r3, r7
    6554:	400e      	ands	r6, r1
    6556:	01f6      	lsls	r6, r6, #7
    6558:	3040      	adds	r0, #64	; 0x40
    655a:	4383      	bics	r3, r0
    655c:	4333      	orrs	r3, r6
    655e:	3879      	subs	r0, #121	; 0x79
    6560:	4005      	ands	r5, r0
    6562:	022d      	lsls	r5, r5, #8
    6564:	4809      	ldr	r0, [pc, #36]	; (658c <system_clock_source_xosc32k_set_config+0x94>)
    6566:	4003      	ands	r3, r0
    6568:	432b      	orrs	r3, r5
    656a:	4021      	ands	r1, r4
    656c:	0309      	lsls	r1, r1, #12
    656e:	4808      	ldr	r0, [pc, #32]	; (6590 <system_clock_source_xosc32k_set_config+0x98>)
    6570:	4003      	ands	r3, r0
    6572:	430b      	orrs	r3, r1
    6574:	4652      	mov	r2, sl
    6576:	6153      	str	r3, [r2, #20]
}
    6578:	bc1c      	pop	{r2, r3, r4}
    657a:	4690      	mov	r8, r2
    657c:	4699      	mov	r9, r3
    657e:	46a2      	mov	sl, r4
    6580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	40001000 	.word	0x40001000
    6588:	200000e0 	.word	0x200000e0
    658c:	fffff8ff 	.word	0xfffff8ff
    6590:	ffffefff 	.word	0xffffefff

00006594 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6594:	2808      	cmp	r0, #8
    6596:	d803      	bhi.n	65a0 <system_clock_source_enable+0xc>
    6598:	0080      	lsls	r0, r0, #2
    659a:	4b29      	ldr	r3, [pc, #164]	; (6640 <system_clock_source_enable+0xac>)
    659c:	581b      	ldr	r3, [r3, r0]
    659e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    65a0:	2017      	movs	r0, #23
    65a2:	e04b      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    65a4:	4a27      	ldr	r2, [pc, #156]	; (6644 <system_clock_source_enable+0xb0>)
    65a6:	7d13      	ldrb	r3, [r2, #20]
    65a8:	2102      	movs	r1, #2
    65aa:	430b      	orrs	r3, r1
    65ac:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    65ae:	2000      	movs	r0, #0
    65b0:	e044      	b.n	663c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    65b2:	4a25      	ldr	r2, [pc, #148]	; (6648 <system_clock_source_enable+0xb4>)
    65b4:	6993      	ldr	r3, [r2, #24]
    65b6:	2102      	movs	r1, #2
    65b8:	430b      	orrs	r3, r1
    65ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    65bc:	2000      	movs	r0, #0
		break;
    65be:	e03d      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    65c0:	4a20      	ldr	r2, [pc, #128]	; (6644 <system_clock_source_enable+0xb0>)
    65c2:	8a13      	ldrh	r3, [r2, #16]
    65c4:	2102      	movs	r1, #2
    65c6:	430b      	orrs	r3, r1
    65c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    65ca:	2000      	movs	r0, #0
		break;
    65cc:	e036      	b.n	663c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    65ce:	4a1e      	ldr	r2, [pc, #120]	; (6648 <system_clock_source_enable+0xb4>)
    65d0:	6953      	ldr	r3, [r2, #20]
    65d2:	2102      	movs	r1, #2
    65d4:	430b      	orrs	r3, r1
    65d6:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    65d8:	2000      	movs	r0, #0
		break;
    65da:	e02f      	b.n	663c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    65dc:	491b      	ldr	r1, [pc, #108]	; (664c <system_clock_source_enable+0xb8>)
    65de:	680b      	ldr	r3, [r1, #0]
    65e0:	2202      	movs	r2, #2
    65e2:	4313      	orrs	r3, r2
    65e4:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    65e6:	4b17      	ldr	r3, [pc, #92]	; (6644 <system_clock_source_enable+0xb0>)
    65e8:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    65ea:	0019      	movs	r1, r3
    65ec:	32fe      	adds	r2, #254	; 0xfe
    65ee:	68cb      	ldr	r3, [r1, #12]
    65f0:	4213      	tst	r3, r2
    65f2:	d0fc      	beq.n	65ee <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    65f4:	4a15      	ldr	r2, [pc, #84]	; (664c <system_clock_source_enable+0xb8>)
    65f6:	6891      	ldr	r1, [r2, #8]
    65f8:	4b12      	ldr	r3, [pc, #72]	; (6644 <system_clock_source_enable+0xb0>)
    65fa:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    65fc:	6852      	ldr	r2, [r2, #4]
    65fe:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6600:	2200      	movs	r2, #0
    6602:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6604:	0019      	movs	r1, r3
    6606:	3201      	adds	r2, #1
    6608:	32ff      	adds	r2, #255	; 0xff
    660a:	68cb      	ldr	r3, [r1, #12]
    660c:	4213      	tst	r3, r2
    660e:	d0fc      	beq.n	660a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6610:	4b0e      	ldr	r3, [pc, #56]	; (664c <system_clock_source_enable+0xb8>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	b29b      	uxth	r3, r3
    6616:	4a0b      	ldr	r2, [pc, #44]	; (6644 <system_clock_source_enable+0xb0>)
    6618:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    661a:	2000      	movs	r0, #0
    661c:	e00e      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    661e:	4909      	ldr	r1, [pc, #36]	; (6644 <system_clock_source_enable+0xb0>)
    6620:	2228      	movs	r2, #40	; 0x28
    6622:	5c8b      	ldrb	r3, [r1, r2]
    6624:	2002      	movs	r0, #2
    6626:	4303      	orrs	r3, r0
    6628:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    662a:	0008      	movs	r0, r1
    662c:	2138      	movs	r1, #56	; 0x38
    662e:	3a26      	subs	r2, #38	; 0x26
    6630:	5c43      	ldrb	r3, [r0, r1]
    6632:	4213      	tst	r3, r2
    6634:	d1fc      	bne.n	6630 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6636:	2000      	movs	r0, #0
    6638:	e000      	b.n	663c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    663a:	2000      	movs	r0, #0
}
    663c:	4770      	bx	lr
    663e:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    6640:	00017c70 	.word	0x00017c70
=======
    6640:	00017bc4 	.word	0x00017bc4
>>>>>>> Stashed changes
    6644:	40000c00 	.word	0x40000c00
    6648:	40001000 	.word	0x40001000
    664c:	200000e0 	.word	0x200000e0

00006650 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6650:	2808      	cmp	r0, #8
    6652:	d832      	bhi.n	66ba <system_clock_source_disable+0x6a>
    6654:	0080      	lsls	r0, r0, #2
    6656:	4b1a      	ldr	r3, [pc, #104]	; (66c0 <system_clock_source_disable+0x70>)
    6658:	581b      	ldr	r3, [r3, r0]
    665a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    665c:	4a19      	ldr	r2, [pc, #100]	; (66c4 <system_clock_source_disable+0x74>)
    665e:	7d13      	ldrb	r3, [r2, #20]
    6660:	2102      	movs	r1, #2
    6662:	438b      	bics	r3, r1
    6664:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6666:	2000      	movs	r0, #0
}
    6668:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    666a:	4a17      	ldr	r2, [pc, #92]	; (66c8 <system_clock_source_disable+0x78>)
    666c:	6993      	ldr	r3, [r2, #24]
    666e:	2102      	movs	r1, #2
    6670:	438b      	bics	r3, r1
    6672:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6674:	2000      	movs	r0, #0
		break;
    6676:	e7f7      	b.n	6668 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6678:	4a12      	ldr	r2, [pc, #72]	; (66c4 <system_clock_source_disable+0x74>)
    667a:	8a13      	ldrh	r3, [r2, #16]
    667c:	2102      	movs	r1, #2
    667e:	438b      	bics	r3, r1
    6680:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6682:	2000      	movs	r0, #0
		break;
    6684:	e7f0      	b.n	6668 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6686:	4a10      	ldr	r2, [pc, #64]	; (66c8 <system_clock_source_disable+0x78>)
    6688:	6953      	ldr	r3, [r2, #20]
    668a:	2102      	movs	r1, #2
    668c:	438b      	bics	r3, r1
    668e:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6690:	2000      	movs	r0, #0
		break;
    6692:	e7e9      	b.n	6668 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6694:	4b0d      	ldr	r3, [pc, #52]	; (66cc <system_clock_source_disable+0x7c>)
    6696:	681a      	ldr	r2, [r3, #0]
    6698:	2102      	movs	r1, #2
    669a:	438a      	bics	r2, r1
    669c:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	b29b      	uxth	r3, r3
    66a2:	4a08      	ldr	r2, [pc, #32]	; (66c4 <system_clock_source_disable+0x74>)
    66a4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    66a6:	2000      	movs	r0, #0
		break;
    66a8:	e7de      	b.n	6668 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    66aa:	4906      	ldr	r1, [pc, #24]	; (66c4 <system_clock_source_disable+0x74>)
    66ac:	2228      	movs	r2, #40	; 0x28
    66ae:	5c8b      	ldrb	r3, [r1, r2]
    66b0:	2002      	movs	r0, #2
    66b2:	4383      	bics	r3, r0
    66b4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    66b6:	2000      	movs	r0, #0
		break;
    66b8:	e7d6      	b.n	6668 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    66ba:	2017      	movs	r0, #23
    66bc:	e7d4      	b.n	6668 <system_clock_source_disable+0x18>
    66be:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    66c0:	00017c94 	.word	0x00017c94
=======
    66c0:	00017be8 	.word	0x00017be8
>>>>>>> Stashed changes
    66c4:	40000c00 	.word	0x40000c00
    66c8:	40001000 	.word	0x40001000
    66cc:	200000e0 	.word	0x200000e0

000066d0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    66d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66d2:	46d6      	mov	lr, sl
    66d4:	464f      	mov	r7, r9
    66d6:	4646      	mov	r6, r8
    66d8:	b5c0      	push	{r6, r7, lr}
    66da:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    66dc:	2280      	movs	r2, #128	; 0x80
    66de:	0052      	lsls	r2, r2, #1
    66e0:	4b56      	ldr	r3, [pc, #344]	; (683c <system_clock_init+0x16c>)
    66e2:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    66e4:	3afd      	subs	r2, #253	; 0xfd
    66e6:	4b56      	ldr	r3, [pc, #344]	; (6840 <system_clock_init+0x170>)
    66e8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    66ea:	4a56      	ldr	r2, [pc, #344]	; (6844 <system_clock_init+0x174>)
    66ec:	6853      	ldr	r3, [r2, #4]
    66ee:	211e      	movs	r1, #30
    66f0:	438b      	bics	r3, r1
    66f2:	391a      	subs	r1, #26
    66f4:	430b      	orrs	r3, r1
    66f6:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    66f8:	2380      	movs	r3, #128	; 0x80
    66fa:	05db      	lsls	r3, r3, #23
    66fc:	789b      	ldrb	r3, [r3, #2]
    66fe:	2b02      	cmp	r3, #2
    6700:	d00f      	beq.n	6722 <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6702:	2380      	movs	r3, #128	; 0x80
    6704:	05db      	lsls	r3, r3, #23
    6706:	789b      	ldrb	r3, [r3, #2]
    6708:	b25b      	sxtb	r3, r3
    670a:	2b00      	cmp	r3, #0
    670c:	db09      	blt.n	6722 <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    670e:	2380      	movs	r3, #128	; 0x80
    6710:	05db      	lsls	r3, r3, #23
    6712:	2201      	movs	r2, #1
    6714:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6716:	3201      	adds	r2, #1
    6718:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    671a:	001a      	movs	r2, r3
    671c:	7993      	ldrb	r3, [r2, #6]
    671e:	2b00      	cmp	r3, #0
    6720:	d0fc      	beq.n	671c <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6722:	a805      	add	r0, sp, #20
    6724:	2300      	movs	r3, #0
    6726:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6728:	2280      	movs	r2, #128	; 0x80
    672a:	0212      	lsls	r2, r2, #8
    672c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    672e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6730:	2201      	movs	r2, #1
    6732:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6734:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6736:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6738:	3203      	adds	r2, #3
    673a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    673c:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    673e:	4b42      	ldr	r3, [pc, #264]	; (6848 <system_clock_init+0x178>)
    6740:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6742:	2005      	movs	r0, #5
    6744:	4b41      	ldr	r3, [pc, #260]	; (684c <system_clock_init+0x17c>)
    6746:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6748:	4941      	ldr	r1, [pc, #260]	; (6850 <system_clock_init+0x180>)
    674a:	2201      	movs	r2, #1
    674c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    674e:	421a      	tst	r2, r3
    6750:	d0fc      	beq.n	674c <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6752:	4a3f      	ldr	r2, [pc, #252]	; (6850 <system_clock_init+0x180>)
    6754:	6953      	ldr	r3, [r2, #20]
    6756:	2180      	movs	r1, #128	; 0x80
    6758:	430b      	orrs	r3, r1
    675a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    675c:	a902      	add	r1, sp, #8
    675e:	2501      	movs	r5, #1
    6760:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6762:	2400      	movs	r4, #0
    6764:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6766:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6768:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    676a:	2303      	movs	r3, #3
    676c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    676e:	2000      	movs	r0, #0
    6770:	4b38      	ldr	r3, [pc, #224]	; (6854 <system_clock_init+0x184>)
    6772:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6774:	2006      	movs	r0, #6
    6776:	4b38      	ldr	r3, [pc, #224]	; (6858 <system_clock_init+0x188>)
    6778:	4798      	blx	r3
	config->run_in_standby  = false;
    677a:	a801      	add	r0, sp, #4
    677c:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    677e:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6780:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6782:	4b36      	ldr	r3, [pc, #216]	; (685c <system_clock_init+0x18c>)
    6784:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6786:	2006      	movs	r0, #6
    6788:	4b30      	ldr	r3, [pc, #192]	; (684c <system_clock_init+0x17c>)
    678a:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    678c:	492b      	ldr	r1, [pc, #172]	; (683c <system_clock_init+0x16c>)
    678e:	2210      	movs	r2, #16
    6790:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6792:	421a      	tst	r2, r3
    6794:	d0fc      	beq.n	6790 <system_clock_init+0xc0>
	config->division_factor    = 1;
    6796:	ac02      	add	r4, sp, #8
    6798:	2601      	movs	r6, #1
    679a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    679c:	2500      	movs	r5, #0
    679e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67a0:	2306      	movs	r3, #6
    67a2:	469a      	mov	sl, r3
    67a4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67a6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67a8:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    67aa:	0021      	movs	r1, r4
    67ac:	2000      	movs	r0, #0
    67ae:	4b29      	ldr	r3, [pc, #164]	; (6854 <system_clock_init+0x184>)
    67b0:	4698      	mov	r8, r3
    67b2:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    67b4:	4b2a      	ldr	r3, [pc, #168]	; (6860 <system_clock_init+0x190>)
    67b6:	4798      	blx	r3
	config->division_factor    = 1;
    67b8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67ba:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    67bc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    67be:	2305      	movs	r3, #5
    67c0:	7023      	strb	r3, [r4, #0]
    67c2:	7226      	strb	r6, [r4, #8]
    67c4:	0021      	movs	r1, r4
    67c6:	2001      	movs	r0, #1
    67c8:	47c0      	blx	r8
    67ca:	2001      	movs	r0, #1
    67cc:	4b25      	ldr	r3, [pc, #148]	; (6864 <system_clock_init+0x194>)
    67ce:	4699      	mov	r9, r3
    67d0:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    67d2:	4f25      	ldr	r7, [pc, #148]	; (6868 <system_clock_init+0x198>)
    67d4:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    67d6:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    67d8:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    67da:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67dc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67de:	4653      	mov	r3, sl
    67e0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67e2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67e4:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    67e6:	0021      	movs	r1, r4
    67e8:	2000      	movs	r0, #0
    67ea:	47c0      	blx	r8
    67ec:	2000      	movs	r0, #0
    67ee:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    67f0:	2000      	movs	r0, #0
    67f2:	4b1e      	ldr	r3, [pc, #120]	; (686c <system_clock_init+0x19c>)
    67f4:	4798      	blx	r3
    67f6:	7939      	ldrb	r1, [r7, #4]
    67f8:	b2c9      	uxtb	r1, r1
    67fa:	4b1d      	ldr	r3, [pc, #116]	; (6870 <system_clock_init+0x1a0>)
    67fc:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    67fe:	4b1d      	ldr	r3, [pc, #116]	; (6874 <system_clock_init+0x1a4>)
    6800:	4298      	cmp	r0, r3
    6802:	d814      	bhi.n	682e <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6804:	2380      	movs	r3, #128	; 0x80
    6806:	05db      	lsls	r3, r3, #23
    6808:	789b      	ldrb	r3, [r3, #2]
    680a:	2b00      	cmp	r3, #0
    680c:	d00f      	beq.n	682e <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    680e:	2380      	movs	r3, #128	; 0x80
    6810:	05db      	lsls	r3, r3, #23
    6812:	789b      	ldrb	r3, [r3, #2]
    6814:	b25b      	sxtb	r3, r3
    6816:	2b00      	cmp	r3, #0
    6818:	db09      	blt.n	682e <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    681a:	2380      	movs	r3, #128	; 0x80
    681c:	05db      	lsls	r3, r3, #23
    681e:	2201      	movs	r2, #1
    6820:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6822:	2200      	movs	r2, #0
    6824:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6826:	001a      	movs	r2, r3
    6828:	7993      	ldrb	r3, [r2, #6]
    682a:	2b00      	cmp	r3, #0
    682c:	d0fc      	beq.n	6828 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    682e:	b008      	add	sp, #32
    6830:	bc1c      	pop	{r2, r3, r4}
    6832:	4690      	mov	r8, r2
    6834:	4699      	mov	r9, r3
    6836:	46a2      	mov	sl, r4
    6838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	40000c00 	.word	0x40000c00
    6840:	40001400 	.word	0x40001400
    6844:	41004000 	.word	0x41004000
    6848:	000064f9 	.word	0x000064f9
    684c:	00006595 	.word	0x00006595
    6850:	40001000 	.word	0x40001000
    6854:	0000689d 	.word	0x0000689d
    6858:	00006651 	.word	0x00006651
    685c:	000064c5 	.word	0x000064c5
    6860:	00006879 	.word	0x00006879
    6864:	00006949 	.word	0x00006949
    6868:	40000400 	.word	0x40000400
    686c:	00006989 	.word	0x00006989
<<<<<<< Updated upstream
    6870:	000135d5 	.word	0x000135d5
=======
    6870:	00013529 	.word	0x00013529
>>>>>>> Stashed changes
    6874:	00b71b00 	.word	0x00b71b00

00006878 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6878:	4a06      	ldr	r2, [pc, #24]	; (6894 <system_gclk_init+0x1c>)
    687a:	6953      	ldr	r3, [r2, #20]
    687c:	2140      	movs	r1, #64	; 0x40
    687e:	430b      	orrs	r3, r1
    6880:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6882:	2201      	movs	r2, #1
    6884:	4b04      	ldr	r3, [pc, #16]	; (6898 <system_gclk_init+0x20>)
    6886:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6888:	0019      	movs	r1, r3
    688a:	780b      	ldrb	r3, [r1, #0]
    688c:	4213      	tst	r3, r2
    688e:	d1fc      	bne.n	688a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6890:	4770      	bx	lr
    6892:	46c0      	nop			; (mov r8, r8)
    6894:	40000400 	.word	0x40000400
    6898:	40001800 	.word	0x40001800

0000689c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    689c:	b570      	push	{r4, r5, r6, lr}
    689e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    68a0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    68a2:	784b      	ldrb	r3, [r1, #1]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d002      	beq.n	68ae <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    68a8:	2380      	movs	r3, #128	; 0x80
    68aa:	00db      	lsls	r3, r3, #3
    68ac:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    68ae:	7a4b      	ldrb	r3, [r1, #9]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d002      	beq.n	68ba <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    68b4:	2380      	movs	r3, #128	; 0x80
    68b6:	011b      	lsls	r3, r3, #4
    68b8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    68ba:	6848      	ldr	r0, [r1, #4]
    68bc:	2801      	cmp	r0, #1
    68be:	d90f      	bls.n	68e0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    68c0:	1e43      	subs	r3, r0, #1
    68c2:	4218      	tst	r0, r3
    68c4:	d131      	bne.n	692a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    68c6:	2802      	cmp	r0, #2
    68c8:	d92d      	bls.n	6926 <system_gclk_gen_set_config+0x8a>
    68ca:	2302      	movs	r3, #2
    68cc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    68ce:	3201      	adds	r2, #1
						mask <<= 1) {
    68d0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    68d2:	4298      	cmp	r0, r3
    68d4:	d8fb      	bhi.n	68ce <system_gclk_gen_set_config+0x32>
    68d6:	2380      	movs	r3, #128	; 0x80
    68d8:	015b      	lsls	r3, r3, #5
    68da:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    68dc:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    68de:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    68e0:	7a0b      	ldrb	r3, [r1, #8]
    68e2:	2b00      	cmp	r3, #0
    68e4:	d002      	beq.n	68ec <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    68e6:	2380      	movs	r3, #128	; 0x80
    68e8:	019b      	lsls	r3, r3, #6
    68ea:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    68ec:	2604      	movs	r6, #4
    68ee:	40a6      	lsls	r6, r4
    68f0:	4911      	ldr	r1, [pc, #68]	; (6938 <system_gclk_gen_set_config+0x9c>)
    68f2:	4a12      	ldr	r2, [pc, #72]	; (693c <system_gclk_gen_set_config+0xa0>)
    68f4:	684b      	ldr	r3, [r1, #4]
    68f6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    68f8:	421e      	tst	r6, r3
    68fa:	d1fb      	bne.n	68f4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    68fc:	4b10      	ldr	r3, [pc, #64]	; (6940 <system_gclk_gen_set_config+0xa4>)
    68fe:	4798      	blx	r3
    6900:	00a4      	lsls	r4, r4, #2
    6902:	4b0d      	ldr	r3, [pc, #52]	; (6938 <system_gclk_gen_set_config+0x9c>)
    6904:	469c      	mov	ip, r3
    6906:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6908:	6a22      	ldr	r2, [r4, #32]
    690a:	2380      	movs	r3, #128	; 0x80
    690c:	005b      	lsls	r3, r3, #1
    690e:	401a      	ands	r2, r3
    6910:	432a      	orrs	r2, r5
    6912:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6914:	4661      	mov	r1, ip
    6916:	4a09      	ldr	r2, [pc, #36]	; (693c <system_gclk_gen_set_config+0xa0>)
    6918:	684b      	ldr	r3, [r1, #4]
    691a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    691c:	421e      	tst	r6, r3
    691e:	d1fb      	bne.n	6918 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6920:	4b08      	ldr	r3, [pc, #32]	; (6944 <system_gclk_gen_set_config+0xa8>)
    6922:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6924:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6926:	2200      	movs	r2, #0
    6928:	e7d5      	b.n	68d6 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    692a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    692c:	2380      	movs	r3, #128	; 0x80
    692e:	009b      	lsls	r3, r3, #2
    6930:	4318      	orrs	r0, r3
    6932:	4305      	orrs	r5, r0
    6934:	e7d4      	b.n	68e0 <system_gclk_gen_set_config+0x44>
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	40001800 	.word	0x40001800
    693c:	000007fc 	.word	0x000007fc
    6940:	00004569 	.word	0x00004569
    6944:	000045a9 	.word	0x000045a9

00006948 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6948:	b510      	push	{r4, lr}
    694a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    694c:	2204      	movs	r2, #4
    694e:	4082      	lsls	r2, r0
    6950:	4809      	ldr	r0, [pc, #36]	; (6978 <system_gclk_gen_enable+0x30>)
    6952:	490a      	ldr	r1, [pc, #40]	; (697c <system_gclk_gen_enable+0x34>)
    6954:	6843      	ldr	r3, [r0, #4]
    6956:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6958:	421a      	tst	r2, r3
    695a:	d1fb      	bne.n	6954 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    695c:	4b08      	ldr	r3, [pc, #32]	; (6980 <system_gclk_gen_enable+0x38>)
    695e:	4798      	blx	r3
    6960:	00a4      	lsls	r4, r4, #2
    6962:	4b05      	ldr	r3, [pc, #20]	; (6978 <system_gclk_gen_enable+0x30>)
    6964:	469c      	mov	ip, r3
    6966:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6968:	6a22      	ldr	r2, [r4, #32]
    696a:	2380      	movs	r3, #128	; 0x80
    696c:	005b      	lsls	r3, r3, #1
    696e:	4313      	orrs	r3, r2
    6970:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6972:	4b04      	ldr	r3, [pc, #16]	; (6984 <system_gclk_gen_enable+0x3c>)
    6974:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6976:	bd10      	pop	{r4, pc}
    6978:	40001800 	.word	0x40001800
    697c:	000007fc 	.word	0x000007fc
    6980:	00004569 	.word	0x00004569
    6984:	000045a9 	.word	0x000045a9

00006988 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    698a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    698c:	2204      	movs	r2, #4
    698e:	4082      	lsls	r2, r0
    6990:	4812      	ldr	r0, [pc, #72]	; (69dc <system_gclk_gen_get_hz+0x54>)
    6992:	4913      	ldr	r1, [pc, #76]	; (69e0 <system_gclk_gen_get_hz+0x58>)
    6994:	6843      	ldr	r3, [r0, #4]
    6996:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6998:	421a      	tst	r2, r3
    699a:	d1fb      	bne.n	6994 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    699c:	4b11      	ldr	r3, [pc, #68]	; (69e4 <system_gclk_gen_get_hz+0x5c>)
    699e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    69a0:	4f0e      	ldr	r7, [pc, #56]	; (69dc <system_gclk_gen_get_hz+0x54>)
    69a2:	3408      	adds	r4, #8
    69a4:	00a4      	lsls	r4, r4, #2
    69a6:	59e0      	ldr	r0, [r4, r7]
    69a8:	0700      	lsls	r0, r0, #28
    69aa:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    69ac:	4b0e      	ldr	r3, [pc, #56]	; (69e8 <system_gclk_gen_get_hz+0x60>)
    69ae:	4798      	blx	r3
    69b0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    69b2:	59e5      	ldr	r5, [r4, r7]
    69b4:	04ed      	lsls	r5, r5, #19
    69b6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    69b8:	59e4      	ldr	r4, [r4, r7]
    69ba:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    69bc:	4b0b      	ldr	r3, [pc, #44]	; (69ec <system_gclk_gen_get_hz+0x64>)
    69be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    69c0:	2d00      	cmp	r5, #0
    69c2:	d107      	bne.n	69d4 <system_gclk_gen_get_hz+0x4c>
    69c4:	2c01      	cmp	r4, #1
    69c6:	d907      	bls.n	69d8 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    69c8:	0021      	movs	r1, r4
    69ca:	0030      	movs	r0, r6
    69cc:	4b08      	ldr	r3, [pc, #32]	; (69f0 <system_gclk_gen_get_hz+0x68>)
    69ce:	4798      	blx	r3
    69d0:	0006      	movs	r6, r0
    69d2:	e001      	b.n	69d8 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    69d4:	3401      	adds	r4, #1
    69d6:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    69d8:	0030      	movs	r0, r6
    69da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69dc:	40001800 	.word	0x40001800
    69e0:	000007fc 	.word	0x000007fc
    69e4:	00004569 	.word	0x00004569
    69e8:	00006431 	.word	0x00006431
    69ec:	000045a9 	.word	0x000045a9
<<<<<<< Updated upstream
    69f0:	000135d5 	.word	0x000135d5
=======
    69f0:	00013529 	.word	0x00013529
>>>>>>> Stashed changes

000069f4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    69f4:	b510      	push	{r4, lr}
    69f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    69f8:	4b09      	ldr	r3, [pc, #36]	; (6a20 <system_gclk_chan_enable+0x2c>)
    69fa:	4798      	blx	r3
    69fc:	00a0      	lsls	r0, r4, #2
    69fe:	4b09      	ldr	r3, [pc, #36]	; (6a24 <system_gclk_chan_enable+0x30>)
    6a00:	469c      	mov	ip, r3
    6a02:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    6a04:	2280      	movs	r2, #128	; 0x80
    6a06:	5883      	ldr	r3, [r0, r2]
    6a08:	2140      	movs	r1, #64	; 0x40
    6a0a:	430b      	orrs	r3, r1
    6a0c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    6a0e:	3140      	adds	r1, #64	; 0x40
    6a10:	3a40      	subs	r2, #64	; 0x40
    6a12:	5843      	ldr	r3, [r0, r1]
    6a14:	421a      	tst	r2, r3
    6a16:	d0fc      	beq.n	6a12 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <system_gclk_chan_enable+0x34>)
    6a1a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a1c:	bd10      	pop	{r4, pc}
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	00004569 	.word	0x00004569
    6a24:	40001800 	.word	0x40001800
    6a28:	000045a9 	.word	0x000045a9

00006a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6a2c:	b510      	push	{r4, lr}
    6a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a30:	4b09      	ldr	r3, [pc, #36]	; (6a58 <system_gclk_chan_disable+0x2c>)
    6a32:	4798      	blx	r3
    6a34:	00a0      	lsls	r0, r4, #2
    6a36:	4b09      	ldr	r3, [pc, #36]	; (6a5c <system_gclk_chan_disable+0x30>)
    6a38:	469c      	mov	ip, r3
    6a3a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6a3c:	2280      	movs	r2, #128	; 0x80
    6a3e:	5883      	ldr	r3, [r0, r2]
    6a40:	2140      	movs	r1, #64	; 0x40
    6a42:	438b      	bics	r3, r1
    6a44:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    6a46:	3140      	adds	r1, #64	; 0x40
    6a48:	3a40      	subs	r2, #64	; 0x40
    6a4a:	5843      	ldr	r3, [r0, r1]
    6a4c:	421a      	tst	r2, r3
    6a4e:	d1fc      	bne.n	6a4a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <system_gclk_chan_disable+0x34>)
    6a52:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a54:	bd10      	pop	{r4, pc}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	00004569 	.word	0x00004569
    6a5c:	40001800 	.word	0x40001800
    6a60:	000045a9 	.word	0x000045a9

00006a64 <system_gclk_chan_set_config>:
{
    6a64:	b570      	push	{r4, r5, r6, lr}
    6a66:	0004      	movs	r4, r0
    6a68:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6a6a:	4b05      	ldr	r3, [pc, #20]	; (6a80 <system_gclk_chan_set_config+0x1c>)
    6a6c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6a6e:	782a      	ldrb	r2, [r5, #0]
    6a70:	230f      	movs	r3, #15
    6a72:	4013      	ands	r3, r2
    6a74:	3420      	adds	r4, #32
    6a76:	00a4      	lsls	r4, r4, #2
    6a78:	4a02      	ldr	r2, [pc, #8]	; (6a84 <system_gclk_chan_set_config+0x20>)
    6a7a:	50a3      	str	r3, [r4, r2]
}
    6a7c:	bd70      	pop	{r4, r5, r6, pc}
    6a7e:	46c0      	nop			; (mov r8, r8)
    6a80:	00006a2d 	.word	0x00006a2d
    6a84:	40001800 	.word	0x40001800

00006a88 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a88:	b510      	push	{r4, lr}
    6a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a8c:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <system_gclk_chan_get_hz+0x20>)
    6a8e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6a90:	3420      	adds	r4, #32
    6a92:	00a4      	lsls	r4, r4, #2
    6a94:	4b05      	ldr	r3, [pc, #20]	; (6aac <system_gclk_chan_get_hz+0x24>)
    6a96:	58e4      	ldr	r4, [r4, r3]
    6a98:	0724      	lsls	r4, r4, #28
    6a9a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6a9c:	4b04      	ldr	r3, [pc, #16]	; (6ab0 <system_gclk_chan_get_hz+0x28>)
    6a9e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6aa0:	0020      	movs	r0, r4
    6aa2:	4b04      	ldr	r3, [pc, #16]	; (6ab4 <system_gclk_chan_get_hz+0x2c>)
    6aa4:	4798      	blx	r3
}
    6aa6:	bd10      	pop	{r4, pc}
    6aa8:	00004569 	.word	0x00004569
    6aac:	40001800 	.word	0x40001800
    6ab0:	000045a9 	.word	0x000045a9
    6ab4:	00006989 	.word	0x00006989

00006ab8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6ab8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6aba:	78d3      	ldrb	r3, [r2, #3]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d135      	bne.n	6b2c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6ac0:	7813      	ldrb	r3, [r2, #0]
    6ac2:	2b80      	cmp	r3, #128	; 0x80
    6ac4:	d029      	beq.n	6b1a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6ac6:	061b      	lsls	r3, r3, #24
    6ac8:	2480      	movs	r4, #128	; 0x80
    6aca:	0264      	lsls	r4, r4, #9
    6acc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6ace:	7854      	ldrb	r4, [r2, #1]
    6ad0:	2502      	movs	r5, #2
    6ad2:	43ac      	bics	r4, r5
    6ad4:	d106      	bne.n	6ae4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6ad6:	7894      	ldrb	r4, [r2, #2]
    6ad8:	2c00      	cmp	r4, #0
    6ada:	d120      	bne.n	6b1e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6adc:	2480      	movs	r4, #128	; 0x80
    6ade:	02a4      	lsls	r4, r4, #10
    6ae0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6ae2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ae4:	7854      	ldrb	r4, [r2, #1]
    6ae6:	3c01      	subs	r4, #1
    6ae8:	2c01      	cmp	r4, #1
    6aea:	d91c      	bls.n	6b26 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6aec:	040d      	lsls	r5, r1, #16
    6aee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6af0:	24a0      	movs	r4, #160	; 0xa0
    6af2:	05e4      	lsls	r4, r4, #23
    6af4:	432c      	orrs	r4, r5
    6af6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6af8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6afa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6afc:	24d0      	movs	r4, #208	; 0xd0
    6afe:	0624      	lsls	r4, r4, #24
    6b00:	432c      	orrs	r4, r5
    6b02:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b04:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6b06:	78d4      	ldrb	r4, [r2, #3]
    6b08:	2c00      	cmp	r4, #0
    6b0a:	d122      	bne.n	6b52 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6b0c:	035b      	lsls	r3, r3, #13
    6b0e:	d51c      	bpl.n	6b4a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6b10:	7893      	ldrb	r3, [r2, #2]
    6b12:	2b01      	cmp	r3, #1
    6b14:	d01e      	beq.n	6b54 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6b16:	6141      	str	r1, [r0, #20]
    6b18:	e017      	b.n	6b4a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6b1a:	2300      	movs	r3, #0
    6b1c:	e7d7      	b.n	6ace <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b1e:	24c0      	movs	r4, #192	; 0xc0
    6b20:	02e4      	lsls	r4, r4, #11
    6b22:	4323      	orrs	r3, r4
    6b24:	e7dd      	b.n	6ae2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6b26:	4c0d      	ldr	r4, [pc, #52]	; (6b5c <_system_pinmux_config+0xa4>)
    6b28:	4023      	ands	r3, r4
    6b2a:	e7df      	b.n	6aec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6b2c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6b2e:	040c      	lsls	r4, r1, #16
    6b30:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6b32:	23a0      	movs	r3, #160	; 0xa0
    6b34:	05db      	lsls	r3, r3, #23
    6b36:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b38:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6b3a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6b3c:	23d0      	movs	r3, #208	; 0xd0
    6b3e:	061b      	lsls	r3, r3, #24
    6b40:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b42:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6b44:	78d3      	ldrb	r3, [r2, #3]
    6b46:	2b00      	cmp	r3, #0
    6b48:	d103      	bne.n	6b52 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b4a:	7853      	ldrb	r3, [r2, #1]
    6b4c:	3b01      	subs	r3, #1
    6b4e:	2b01      	cmp	r3, #1
    6b50:	d902      	bls.n	6b58 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6b52:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6b54:	6181      	str	r1, [r0, #24]
    6b56:	e7f8      	b.n	6b4a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6b58:	6081      	str	r1, [r0, #8]
}
    6b5a:	e7fa      	b.n	6b52 <_system_pinmux_config+0x9a>
    6b5c:	fffbffff 	.word	0xfffbffff

00006b60 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6b60:	b510      	push	{r4, lr}
    6b62:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6b64:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6b66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6b68:	2900      	cmp	r1, #0
    6b6a:	d104      	bne.n	6b76 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6b6c:	0943      	lsrs	r3, r0, #5
    6b6e:	01db      	lsls	r3, r3, #7
    6b70:	4905      	ldr	r1, [pc, #20]	; (6b88 <system_pinmux_pin_set_config+0x28>)
    6b72:	468c      	mov	ip, r1
    6b74:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b76:	241f      	movs	r4, #31
    6b78:	4020      	ands	r0, r4
    6b7a:	2101      	movs	r1, #1
    6b7c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6b7e:	0018      	movs	r0, r3
    6b80:	4b02      	ldr	r3, [pc, #8]	; (6b8c <system_pinmux_pin_set_config+0x2c>)
    6b82:	4798      	blx	r3
}
    6b84:	bd10      	pop	{r4, pc}
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	40002800 	.word	0x40002800
    6b8c:	00006ab9 	.word	0x00006ab9

00006b90 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6b90:	4770      	bx	lr
    6b92:	Address 0x00006b92 is out of bounds.


00006b94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b94:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b96:	4b05      	ldr	r3, [pc, #20]	; (6bac <system_init+0x18>)
    6b98:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b9a:	4b05      	ldr	r3, [pc, #20]	; (6bb0 <system_init+0x1c>)
    6b9c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b9e:	4b05      	ldr	r3, [pc, #20]	; (6bb4 <system_init+0x20>)
    6ba0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6ba2:	4b05      	ldr	r3, [pc, #20]	; (6bb8 <system_init+0x24>)
    6ba4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <system_init+0x28>)
    6ba8:	4798      	blx	r3
}
    6baa:	bd10      	pop	{r4, pc}
    6bac:	000066d1 	.word	0x000066d1
    6bb0:	000045d9 	.word	0x000045d9
    6bb4:	00006b91 	.word	0x00006b91
    6bb8:	00004905 	.word	0x00004905
    6bbc:	00006b91 	.word	0x00006b91

00006bc0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6bc0:	1c93      	adds	r3, r2, #2
    6bc2:	009b      	lsls	r3, r3, #2
    6bc4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6bc6:	2a02      	cmp	r2, #2
    6bc8:	d009      	beq.n	6bde <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6bca:	2a03      	cmp	r2, #3
    6bcc:	d00c      	beq.n	6be8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6bce:	2301      	movs	r3, #1
    6bd0:	4093      	lsls	r3, r2
    6bd2:	001a      	movs	r2, r3
    6bd4:	7e03      	ldrb	r3, [r0, #24]
    6bd6:	4313      	orrs	r3, r2
    6bd8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6bda:	2000      	movs	r0, #0
    6bdc:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6bde:	7e03      	ldrb	r3, [r0, #24]
    6be0:	2210      	movs	r2, #16
    6be2:	4313      	orrs	r3, r2
    6be4:	7603      	strb	r3, [r0, #24]
    6be6:	e7f8      	b.n	6bda <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6be8:	7e03      	ldrb	r3, [r0, #24]
    6bea:	2220      	movs	r2, #32
    6bec:	4313      	orrs	r3, r2
    6bee:	7603      	strb	r3, [r0, #24]
    6bf0:	e7f3      	b.n	6bda <tc_register_callback+0x1a>
    6bf2:	Address 0x00006bf2 is out of bounds.


00006bf4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6bf4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6bf6:	0080      	lsls	r0, r0, #2
    6bf8:	4b16      	ldr	r3, [pc, #88]	; (6c54 <_tc_interrupt_handler+0x60>)
    6bfa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6bfc:	6823      	ldr	r3, [r4, #0]
    6bfe:	7a9d      	ldrb	r5, [r3, #10]
    6c00:	7e22      	ldrb	r2, [r4, #24]
    6c02:	7e63      	ldrb	r3, [r4, #25]
    6c04:	4013      	ands	r3, r2
    6c06:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6c08:	07eb      	lsls	r3, r5, #31
    6c0a:	d406      	bmi.n	6c1a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6c0c:	07ab      	lsls	r3, r5, #30
    6c0e:	d40b      	bmi.n	6c28 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6c10:	06eb      	lsls	r3, r5, #27
    6c12:	d410      	bmi.n	6c36 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6c14:	06ab      	lsls	r3, r5, #26
    6c16:	d415      	bmi.n	6c44 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6c18:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6c1a:	0020      	movs	r0, r4
    6c1c:	68a3      	ldr	r3, [r4, #8]
    6c1e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6c20:	2301      	movs	r3, #1
    6c22:	6822      	ldr	r2, [r4, #0]
    6c24:	7293      	strb	r3, [r2, #10]
    6c26:	e7f1      	b.n	6c0c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6c28:	0020      	movs	r0, r4
    6c2a:	68e3      	ldr	r3, [r4, #12]
    6c2c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6c2e:	2302      	movs	r3, #2
    6c30:	6822      	ldr	r2, [r4, #0]
    6c32:	7293      	strb	r3, [r2, #10]
    6c34:	e7ec      	b.n	6c10 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6c36:	0020      	movs	r0, r4
    6c38:	6923      	ldr	r3, [r4, #16]
    6c3a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6c3c:	2310      	movs	r3, #16
    6c3e:	6822      	ldr	r2, [r4, #0]
    6c40:	7293      	strb	r3, [r2, #10]
    6c42:	e7e7      	b.n	6c14 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6c44:	0020      	movs	r0, r4
    6c46:	6963      	ldr	r3, [r4, #20]
    6c48:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6c4a:	6823      	ldr	r3, [r4, #0]
    6c4c:	2220      	movs	r2, #32
    6c4e:	729a      	strb	r2, [r3, #10]
}
    6c50:	e7e2      	b.n	6c18 <_tc_interrupt_handler+0x24>
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	20001f44 	.word	0x20001f44

00006c58 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6c58:	b510      	push	{r4, lr}
    6c5a:	2000      	movs	r0, #0
    6c5c:	4b01      	ldr	r3, [pc, #4]	; (6c64 <TC0_Handler+0xc>)
    6c5e:	4798      	blx	r3
    6c60:	bd10      	pop	{r4, pc}
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	00006bf5 	.word	0x00006bf5

00006c68 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6c68:	b510      	push	{r4, lr}
    6c6a:	2001      	movs	r0, #1
    6c6c:	4b01      	ldr	r3, [pc, #4]	; (6c74 <TC1_Handler+0xc>)
    6c6e:	4798      	blx	r3
    6c70:	bd10      	pop	{r4, pc}
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	00006bf5 	.word	0x00006bf5

00006c78 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6c78:	b510      	push	{r4, lr}
    6c7a:	2002      	movs	r0, #2
    6c7c:	4b01      	ldr	r3, [pc, #4]	; (6c84 <TC4_Handler+0xc>)
    6c7e:	4798      	blx	r3
    6c80:	bd10      	pop	{r4, pc}
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	00006bf5 	.word	0x00006bf5

00006c88 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6c88:	b530      	push	{r4, r5, lr}
    6c8a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6c8c:	a901      	add	r1, sp, #4
    6c8e:	4b0c      	ldr	r3, [pc, #48]	; (6cc0 <_tc_get_inst_index+0x38>)
    6c90:	000a      	movs	r2, r1
    6c92:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c94:	c232      	stmia	r2!, {r1, r4, r5}
    6c96:	cb12      	ldmia	r3!, {r1, r4}
    6c98:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6c9a:	9b01      	ldr	r3, [sp, #4]
    6c9c:	4298      	cmp	r0, r3
    6c9e:	d00b      	beq.n	6cb8 <_tc_get_inst_index+0x30>
    6ca0:	2301      	movs	r3, #1
    6ca2:	a901      	add	r1, sp, #4
    6ca4:	009a      	lsls	r2, r3, #2
    6ca6:	5852      	ldr	r2, [r2, r1]
    6ca8:	4282      	cmp	r2, r0
    6caa:	d006      	beq.n	6cba <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6cac:	3301      	adds	r3, #1
    6cae:	2b05      	cmp	r3, #5
    6cb0:	d1f8      	bne.n	6ca4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6cb2:	2000      	movs	r0, #0
}
    6cb4:	b007      	add	sp, #28
    6cb6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6cb8:	2300      	movs	r3, #0
			return i;
    6cba:	b2d8      	uxtb	r0, r3
    6cbc:	e7fa      	b.n	6cb4 <_tc_get_inst_index+0x2c>
    6cbe:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    6cc0:	00017ce0 	.word	0x00017ce0
=======
    6cc0:	00017c34 	.word	0x00017c34
>>>>>>> Stashed changes

00006cc4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cc6:	46c6      	mov	lr, r8
    6cc8:	b500      	push	{lr}
    6cca:	b08e      	sub	sp, #56	; 0x38
    6ccc:	0004      	movs	r4, r0
    6cce:	000d      	movs	r5, r1
    6cd0:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6cd2:	0008      	movs	r0, r1
    6cd4:	4bae      	ldr	r3, [pc, #696]	; (6f90 <tc_init+0x2cc>)
    6cd6:	4798      	blx	r3
    6cd8:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6cda:	ab0c      	add	r3, sp, #48	; 0x30
    6cdc:	221b      	movs	r2, #27
    6cde:	701a      	strb	r2, [r3, #0]
    6ce0:	705a      	strb	r2, [r3, #1]
    6ce2:	3201      	adds	r2, #1
    6ce4:	709a      	strb	r2, [r3, #2]
    6ce6:	70da      	strb	r2, [r3, #3]
    6ce8:	3201      	adds	r2, #1
    6cea:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6cec:	a902      	add	r1, sp, #8
    6cee:	4ba9      	ldr	r3, [pc, #676]	; (6f94 <tc_init+0x2d0>)
    6cf0:	3314      	adds	r3, #20
    6cf2:	000a      	movs	r2, r1
    6cf4:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cf6:	c283      	stmia	r2!, {r0, r1, r7}
    6cf8:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cfa:	c283      	stmia	r2!, {r0, r1, r7}
    6cfc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cfe:	c283      	stmia	r2!, {r0, r1, r7}
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6d04:	2300      	movs	r3, #0
    6d06:	60a3      	str	r3, [r4, #8]
    6d08:	60e3      	str	r3, [r4, #12]
    6d0a:	6123      	str	r3, [r4, #16]
    6d0c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6d0e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6d10:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6d12:	4643      	mov	r3, r8
    6d14:	009a      	lsls	r2, r3, #2
    6d16:	4ba0      	ldr	r3, [pc, #640]	; (6f98 <tc_init+0x2d4>)
    6d18:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6d1a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6d1c:	2334      	movs	r3, #52	; 0x34
    6d1e:	5cf3      	ldrb	r3, [r6, r3]
    6d20:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d22:	78f3      	ldrb	r3, [r6, #3]
    6d24:	2b08      	cmp	r3, #8
    6d26:	d008      	beq.n	6d3a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6d28:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d2a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6d2c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d2e:	07db      	lsls	r3, r3, #31
    6d30:	d508      	bpl.n	6d44 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6d32:	b00e      	add	sp, #56	; 0x38
    6d34:	bc04      	pop	{r2}
    6d36:	4690      	mov	r8, r2
    6d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6d3a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d3c:	4642      	mov	r2, r8
    6d3e:	07d2      	lsls	r2, r2, #31
    6d40:	d4f7      	bmi.n	6d32 <tc_init+0x6e>
    6d42:	e7f1      	b.n	6d28 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d44:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6d46:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d48:	079b      	lsls	r3, r3, #30
    6d4a:	d4f2      	bmi.n	6d32 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6d4c:	682b      	ldr	r3, [r5, #0]
    6d4e:	079b      	lsls	r3, r3, #30
    6d50:	d4ef      	bmi.n	6d32 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6d52:	7c33      	ldrb	r3, [r6, #16]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d112      	bne.n	6d7e <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6d58:	7f33      	ldrb	r3, [r6, #28]
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d11b      	bne.n	6d96 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6d5e:	4643      	mov	r3, r8
    6d60:	005a      	lsls	r2, r3, #1
    6d62:	a902      	add	r1, sp, #8
    6d64:	1c53      	adds	r3, r2, #1
    6d66:	009b      	lsls	r3, r3, #2
    6d68:	5858      	ldr	r0, [r3, r1]
    6d6a:	4643      	mov	r3, r8
    6d6c:	00db      	lsls	r3, r3, #3
    6d6e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6d70:	b2d9      	uxtb	r1, r3
    6d72:	2904      	cmp	r1, #4
    6d74:	d823      	bhi.n	6dbe <tc_init+0xfa>
    6d76:	008b      	lsls	r3, r1, #2
    6d78:	4988      	ldr	r1, [pc, #544]	; (6f9c <tc_init+0x2d8>)
    6d7a:	58cb      	ldr	r3, [r1, r3]
    6d7c:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d7e:	a901      	add	r1, sp, #4
    6d80:	2301      	movs	r3, #1
    6d82:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d84:	2200      	movs	r2, #0
    6d86:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6d88:	7e32      	ldrb	r2, [r6, #24]
    6d8a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d8c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6d8e:	7d30      	ldrb	r0, [r6, #20]
    6d90:	4b83      	ldr	r3, [pc, #524]	; (6fa0 <tc_init+0x2dc>)
    6d92:	4798      	blx	r3
    6d94:	e7e0      	b.n	6d58 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d96:	a901      	add	r1, sp, #4
    6d98:	2301      	movs	r3, #1
    6d9a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d9c:	2200      	movs	r2, #0
    6d9e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6da0:	3224      	adds	r2, #36	; 0x24
    6da2:	18b2      	adds	r2, r6, r2
    6da4:	7812      	ldrb	r2, [r2, #0]
    6da6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6da8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6daa:	331f      	adds	r3, #31
    6dac:	18f3      	adds	r3, r6, r3
    6dae:	7818      	ldrb	r0, [r3, #0]
    6db0:	4b7b      	ldr	r3, [pc, #492]	; (6fa0 <tc_init+0x2dc>)
    6db2:	4798      	blx	r3
    6db4:	e7d3      	b.n	6d5e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6db6:	497b      	ldr	r1, [pc, #492]	; (6fa4 <tc_init+0x2e0>)
    6db8:	694b      	ldr	r3, [r1, #20]
    6dba:	4318      	orrs	r0, r3
    6dbc:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6dbe:	78f3      	ldrb	r3, [r6, #3]
    6dc0:	2b08      	cmp	r3, #8
    6dc2:	d100      	bne.n	6dc6 <tc_init+0x102>
    6dc4:	e086      	b.n	6ed4 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6dc6:	7833      	ldrb	r3, [r6, #0]
    6dc8:	466a      	mov	r2, sp
    6dca:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6dcc:	ab0c      	add	r3, sp, #48	; 0x30
    6dce:	4642      	mov	r2, r8
    6dd0:	5c9f      	ldrb	r7, [r3, r2]
    6dd2:	4669      	mov	r1, sp
    6dd4:	0038      	movs	r0, r7
    6dd6:	4b74      	ldr	r3, [pc, #464]	; (6fa8 <tc_init+0x2e4>)
    6dd8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6dda:	0038      	movs	r0, r7
    6ddc:	4b73      	ldr	r3, [pc, #460]	; (6fac <tc_init+0x2e8>)
    6dde:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6de0:	78f3      	ldrb	r3, [r6, #3]
    6de2:	79f2      	ldrb	r2, [r6, #7]
    6de4:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6de6:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6de8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6dea:	7a72      	ldrb	r2, [r6, #9]
    6dec:	2a00      	cmp	r2, #0
    6dee:	d002      	beq.n	6df6 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6df0:	2280      	movs	r2, #128	; 0x80
    6df2:	0252      	lsls	r2, r2, #9
    6df4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6df6:	7ab2      	ldrb	r2, [r6, #10]
    6df8:	2a00      	cmp	r2, #0
    6dfa:	d002      	beq.n	6e02 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6dfc:	2280      	movs	r2, #128	; 0x80
    6dfe:	0292      	lsls	r2, r2, #10
    6e00:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6e02:	7af2      	ldrb	r2, [r6, #11]
    6e04:	2a00      	cmp	r2, #0
    6e06:	d002      	beq.n	6e0e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e08:	2280      	movs	r2, #128	; 0x80
    6e0a:	0352      	lsls	r2, r2, #13
    6e0c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6e0e:	7b32      	ldrb	r2, [r6, #12]
    6e10:	2a00      	cmp	r2, #0
    6e12:	d002      	beq.n	6e1a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e14:	2280      	movs	r2, #128	; 0x80
    6e16:	0392      	lsls	r2, r2, #14
    6e18:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e1a:	7871      	ldrb	r1, [r6, #1]
    6e1c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6e1e:	78b2      	ldrb	r2, [r6, #2]
    6e20:	01d2      	lsls	r2, r2, #7
    6e22:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e24:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e26:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6e28:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d1fc      	bne.n	6e28 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6e2e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e30:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e32:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e34:	2b00      	cmp	r3, #0
    6e36:	d1fc      	bne.n	6e32 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6e38:	79b3      	ldrb	r3, [r6, #6]
    6e3a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6e3c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6e3e:	1e4b      	subs	r3, r1, #1
    6e40:	4199      	sbcs	r1, r3
    6e42:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6e44:	7bb3      	ldrb	r3, [r6, #14]
    6e46:	2b00      	cmp	r3, #0
    6e48:	d001      	beq.n	6e4e <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6e4a:	2301      	movs	r3, #1
    6e4c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e4e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e50:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e52:	2b00      	cmp	r3, #0
    6e54:	d1fc      	bne.n	6e50 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6e56:	33ff      	adds	r3, #255	; 0xff
    6e58:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6e5a:	2900      	cmp	r1, #0
    6e5c:	d004      	beq.n	6e68 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e60:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6e62:	2b00      	cmp	r3, #0
    6e64:	d1fc      	bne.n	6e60 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6e66:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6e68:	7a33      	ldrb	r3, [r6, #8]
    6e6a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e6c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e6e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e70:	2b00      	cmp	r3, #0
    6e72:	d1fc      	bne.n	6e6e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6e74:	7923      	ldrb	r3, [r4, #4]
    6e76:	2b04      	cmp	r3, #4
    6e78:	d059      	beq.n	6f2e <tc_init+0x26a>
    6e7a:	2b08      	cmp	r3, #8
    6e7c:	d074      	beq.n	6f68 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6e7e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6e80:	2b00      	cmp	r3, #0
    6e82:	d000      	beq.n	6e86 <tc_init+0x1c2>
    6e84:	e755      	b.n	6d32 <tc_init+0x6e>
    6e86:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d1fc      	bne.n	6e86 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6e8c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6e8e:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e90:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e92:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e94:	2b00      	cmp	r3, #0
    6e96:	d1fc      	bne.n	6e92 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6e98:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6e9a:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e9e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d1fc      	bne.n	6e9e <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6ea4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6ea6:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6ea8:	2000      	movs	r0, #0
    6eaa:	e742      	b.n	6d32 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6eac:	493d      	ldr	r1, [pc, #244]	; (6fa4 <tc_init+0x2e0>)
    6eae:	698b      	ldr	r3, [r1, #24]
    6eb0:	4318      	orrs	r0, r3
    6eb2:	6188      	str	r0, [r1, #24]
    6eb4:	e783      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6eb6:	493b      	ldr	r1, [pc, #236]	; (6fa4 <tc_init+0x2e0>)
    6eb8:	69cb      	ldr	r3, [r1, #28]
    6eba:	4318      	orrs	r0, r3
    6ebc:	61c8      	str	r0, [r1, #28]
    6ebe:	e77e      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6ec0:	4938      	ldr	r1, [pc, #224]	; (6fa4 <tc_init+0x2e0>)
    6ec2:	6a0b      	ldr	r3, [r1, #32]
    6ec4:	4318      	orrs	r0, r3
    6ec6:	6208      	str	r0, [r1, #32]
    6ec8:	e779      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6eca:	4b36      	ldr	r3, [pc, #216]	; (6fa4 <tc_init+0x2e0>)
    6ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6ece:	4308      	orrs	r0, r1
    6ed0:	6258      	str	r0, [r3, #36]	; 0x24
    6ed2:	e774      	b.n	6dbe <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6ed4:	4643      	mov	r3, r8
    6ed6:	3301      	adds	r3, #1
    6ed8:	2b04      	cmp	r3, #4
    6eda:	dd00      	ble.n	6ede <tc_init+0x21a>
    6edc:	e773      	b.n	6dc6 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6ede:	ab02      	add	r3, sp, #8
    6ee0:	1cd1      	adds	r1, r2, #3
    6ee2:	0089      	lsls	r1, r1, #2
    6ee4:	58c9      	ldr	r1, [r1, r3]
    6ee6:	3202      	adds	r2, #2
    6ee8:	0092      	lsls	r2, r2, #2
    6eea:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6eec:	b2da      	uxtb	r2, r3
    6eee:	2a04      	cmp	r2, #4
    6ef0:	d900      	bls.n	6ef4 <tc_init+0x230>
    6ef2:	e768      	b.n	6dc6 <tc_init+0x102>
    6ef4:	0093      	lsls	r3, r2, #2
    6ef6:	4a2e      	ldr	r2, [pc, #184]	; (6fb0 <tc_init+0x2ec>)
    6ef8:	58d3      	ldr	r3, [r2, r3]
    6efa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6efc:	4a29      	ldr	r2, [pc, #164]	; (6fa4 <tc_init+0x2e0>)
    6efe:	6953      	ldr	r3, [r2, #20]
    6f00:	4319      	orrs	r1, r3
    6f02:	6151      	str	r1, [r2, #20]
    6f04:	e75f      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6f06:	4a27      	ldr	r2, [pc, #156]	; (6fa4 <tc_init+0x2e0>)
    6f08:	6993      	ldr	r3, [r2, #24]
    6f0a:	4319      	orrs	r1, r3
    6f0c:	6191      	str	r1, [r2, #24]
    6f0e:	e75a      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6f10:	4a24      	ldr	r2, [pc, #144]	; (6fa4 <tc_init+0x2e0>)
    6f12:	69d3      	ldr	r3, [r2, #28]
    6f14:	4319      	orrs	r1, r3
    6f16:	61d1      	str	r1, [r2, #28]
    6f18:	e755      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    6f1a:	4a22      	ldr	r2, [pc, #136]	; (6fa4 <tc_init+0x2e0>)
    6f1c:	6a13      	ldr	r3, [r2, #32]
    6f1e:	4319      	orrs	r1, r3
    6f20:	6211      	str	r1, [r2, #32]
    6f22:	e750      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6f24:	4b1f      	ldr	r3, [pc, #124]	; (6fa4 <tc_init+0x2e0>)
    6f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6f28:	4311      	orrs	r1, r2
    6f2a:	6259      	str	r1, [r3, #36]	; 0x24
    6f2c:	e74b      	b.n	6dc6 <tc_init+0x102>
    6f2e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f30:	2b00      	cmp	r3, #0
    6f32:	d1fc      	bne.n	6f2e <tc_init+0x26a>
					config->counter_8_bit.value;
    6f34:	3328      	adds	r3, #40	; 0x28
    6f36:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6f38:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f3a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f3c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d1fc      	bne.n	6f3c <tc_init+0x278>
					config->counter_8_bit.period;
    6f42:	3329      	adds	r3, #41	; 0x29
    6f44:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6f46:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f48:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f4a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d1fc      	bne.n	6f4a <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6f50:	332a      	adds	r3, #42	; 0x2a
    6f52:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6f54:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f58:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d1fc      	bne.n	6f58 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    6f5e:	332b      	adds	r3, #43	; 0x2b
    6f60:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6f62:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6f64:	2000      	movs	r0, #0
    6f66:	e6e4      	b.n	6d32 <tc_init+0x6e>
    6f68:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d1fc      	bne.n	6f68 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    6f6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6f70:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f72:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f74:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f76:	2b00      	cmp	r3, #0
    6f78:	d1fc      	bne.n	6f74 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    6f7a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6f7c:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f80:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f82:	2b00      	cmp	r3, #0
    6f84:	d1fc      	bne.n	6f80 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    6f86:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6f88:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    6f8a:	2000      	movs	r0, #0
    6f8c:	e6d1      	b.n	6d32 <tc_init+0x6e>
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	00006c89 	.word	0x00006c89
<<<<<<< Updated upstream
    6f94:	00017ce0 	.word	0x00017ce0
    6f98:	20001f44 	.word	0x20001f44
    6f9c:	00017cb8 	.word	0x00017cb8
=======
    6f94:	00017c34 	.word	0x00017c34
    6f98:	20001f44 	.word	0x20001f44
    6f9c:	00017c0c 	.word	0x00017c0c
>>>>>>> Stashed changes
    6fa0:	00006b61 	.word	0x00006b61
    6fa4:	40000400 	.word	0x40000400
    6fa8:	00006a65 	.word	0x00006a65
    6fac:	000069f5 	.word	0x000069f5
<<<<<<< Updated upstream
    6fb0:	00017ccc 	.word	0x00017ccc
=======
    6fb0:	00017c20 	.word	0x00017c20
>>>>>>> Stashed changes

00006fb4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fb4:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fb6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d1fc      	bne.n	6fb6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    6fbc:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fbe:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fc0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d1fc      	bne.n	6fc0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6fc6:	3380      	adds	r3, #128	; 0x80
    6fc8:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    6fca:	7953      	ldrb	r3, [r2, #5]
    6fcc:	b25b      	sxtb	r3, r3
    6fce:	2b00      	cmp	r3, #0
    6fd0:	dbfb      	blt.n	6fca <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6fd2:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fd4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d1fc      	bne.n	6fd4 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    6fda:	7903      	ldrb	r3, [r0, #4]
    6fdc:	2b04      	cmp	r3, #4
    6fde:	d005      	beq.n	6fec <tc_get_count_value+0x38>
    6fe0:	2b08      	cmp	r3, #8
    6fe2:	d009      	beq.n	6ff8 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6fe4:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d003      	beq.n	6ff2 <tc_get_count_value+0x3e>
}
    6fea:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    6fec:	7d10      	ldrb	r0, [r2, #20]
    6fee:	b2c0      	uxtb	r0, r0
    6ff0:	e7fb      	b.n	6fea <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6ff2:	8a90      	ldrh	r0, [r2, #20]
    6ff4:	b280      	uxth	r0, r0
    6ff6:	e7f8      	b.n	6fea <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6ff8:	6950      	ldr	r0, [r2, #20]
    6ffa:	e7f6      	b.n	6fea <tc_get_count_value+0x36>

00006ffc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    6ffc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6ffe:	6804      	ldr	r4, [r0, #0]
    7000:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    7002:	2b00      	cmp	r3, #0
    7004:	d1fc      	bne.n	7000 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7006:	7903      	ldrb	r3, [r0, #4]
    7008:	2b04      	cmp	r3, #4
    700a:	d006      	beq.n	701a <tc_set_compare_value+0x1e>
    700c:	2b08      	cmp	r3, #8
    700e:	d028      	beq.n	7062 <tc_set_compare_value+0x66>
    7010:	2b00      	cmp	r3, #0
    7012:	d013      	beq.n	703c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7014:	2317      	movs	r3, #23
}
    7016:	0018      	movs	r0, r3
    7018:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    701a:	2317      	movs	r3, #23
			if (channel_index <
    701c:	2901      	cmp	r1, #1
    701e:	d8fa      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7020:	7e83      	ldrb	r3, [r0, #26]
    7022:	2b00      	cmp	r3, #0
    7024:	d005      	beq.n	7032 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7026:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7028:	1861      	adds	r1, r4, r1
    702a:	3130      	adds	r1, #48	; 0x30
    702c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    702e:	2300      	movs	r3, #0
    7030:	e7f1      	b.n	7016 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    7032:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7034:	1864      	adds	r4, r4, r1
    7036:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7038:	2300      	movs	r3, #0
    703a:	e7ec      	b.n	7016 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    703c:	2317      	movs	r3, #23
			if (channel_index <
    703e:	2901      	cmp	r1, #1
    7040:	d8e9      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7042:	7e83      	ldrb	r3, [r0, #26]
    7044:	2b00      	cmp	r3, #0
    7046:	d005      	beq.n	7054 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7048:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    704a:	3118      	adds	r1, #24
    704c:	0049      	lsls	r1, r1, #1
    704e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7050:	2300      	movs	r3, #0
    7052:	e7e0      	b.n	7016 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7054:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    7056:	310c      	adds	r1, #12
    7058:	0049      	lsls	r1, r1, #1
    705a:	1864      	adds	r4, r4, r1
    705c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    705e:	2300      	movs	r3, #0
    7060:	e7d9      	b.n	7016 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7062:	2317      	movs	r3, #23
			if (channel_index <
    7064:	2901      	cmp	r1, #1
    7066:	d8d6      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7068:	7e83      	ldrb	r3, [r0, #26]
    706a:	2b00      	cmp	r3, #0
    706c:	d105      	bne.n	707a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    706e:	3106      	adds	r1, #6
    7070:	0089      	lsls	r1, r1, #2
    7072:	1864      	adds	r4, r4, r1
    7074:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    7076:	2300      	movs	r3, #0
    7078:	e7cd      	b.n	7016 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    707a:	310c      	adds	r1, #12
    707c:	0089      	lsls	r1, r1, #2
    707e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7080:	2300      	movs	r3, #0
    7082:	e7c8      	b.n	7016 <tc_set_compare_value+0x1a>

00007084 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7084:	e7fe      	b.n	7084 <Dummy_Handler>
    7086:	Address 0x00007086 is out of bounds.


00007088 <Reset_Handler>:
{
    7088:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    708a:	4a1a      	ldr	r2, [pc, #104]	; (70f4 <Reset_Handler+0x6c>)
    708c:	4b1a      	ldr	r3, [pc, #104]	; (70f8 <Reset_Handler+0x70>)
    708e:	429a      	cmp	r2, r3
    7090:	d011      	beq.n	70b6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    7092:	001a      	movs	r2, r3
    7094:	4b19      	ldr	r3, [pc, #100]	; (70fc <Reset_Handler+0x74>)
    7096:	429a      	cmp	r2, r3
    7098:	d20d      	bcs.n	70b6 <Reset_Handler+0x2e>
    709a:	4a19      	ldr	r2, [pc, #100]	; (7100 <Reset_Handler+0x78>)
    709c:	3303      	adds	r3, #3
    709e:	1a9b      	subs	r3, r3, r2
    70a0:	089b      	lsrs	r3, r3, #2
    70a2:	3301      	adds	r3, #1
    70a4:	009b      	lsls	r3, r3, #2
    70a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    70a8:	4813      	ldr	r0, [pc, #76]	; (70f8 <Reset_Handler+0x70>)
    70aa:	4912      	ldr	r1, [pc, #72]	; (70f4 <Reset_Handler+0x6c>)
    70ac:	588c      	ldr	r4, [r1, r2]
    70ae:	5084      	str	r4, [r0, r2]
    70b0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    70b2:	429a      	cmp	r2, r3
    70b4:	d1fa      	bne.n	70ac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    70b6:	4a13      	ldr	r2, [pc, #76]	; (7104 <Reset_Handler+0x7c>)
    70b8:	4b13      	ldr	r3, [pc, #76]	; (7108 <Reset_Handler+0x80>)
    70ba:	429a      	cmp	r2, r3
    70bc:	d20a      	bcs.n	70d4 <Reset_Handler+0x4c>
    70be:	43d3      	mvns	r3, r2
    70c0:	4911      	ldr	r1, [pc, #68]	; (7108 <Reset_Handler+0x80>)
    70c2:	185b      	adds	r3, r3, r1
    70c4:	2103      	movs	r1, #3
    70c6:	438b      	bics	r3, r1
    70c8:	3304      	adds	r3, #4
    70ca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    70cc:	2100      	movs	r1, #0
    70ce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    70d0:	4293      	cmp	r3, r2
    70d2:	d1fc      	bne.n	70ce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    70d4:	4a0d      	ldr	r2, [pc, #52]	; (710c <Reset_Handler+0x84>)
    70d6:	21ff      	movs	r1, #255	; 0xff
    70d8:	4b0d      	ldr	r3, [pc, #52]	; (7110 <Reset_Handler+0x88>)
    70da:	438b      	bics	r3, r1
    70dc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    70de:	4a0d      	ldr	r2, [pc, #52]	; (7114 <Reset_Handler+0x8c>)
    70e0:	6853      	ldr	r3, [r2, #4]
    70e2:	397f      	subs	r1, #127	; 0x7f
    70e4:	430b      	orrs	r3, r1
    70e6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    70e8:	4b0b      	ldr	r3, [pc, #44]	; (7118 <Reset_Handler+0x90>)
    70ea:	4798      	blx	r3
        main();
    70ec:	4b0b      	ldr	r3, [pc, #44]	; (711c <Reset_Handler+0x94>)
    70ee:	4798      	blx	r3
    70f0:	e7fe      	b.n	70f0 <Reset_Handler+0x68>
    70f2:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    70f4:	00018fb0 	.word	0x00018fb0
=======
    70f4:	00018db0 	.word	0x00018db0
>>>>>>> Stashed changes
    70f8:	20000000 	.word	0x20000000
    70fc:	2000008c 	.word	0x2000008c
    7100:	20000004 	.word	0x20000004
    7104:	20000090 	.word	0x20000090
    7108:	200034dc 	.word	0x200034dc
    710c:	e000ed00 	.word	0xe000ed00
    7110:	00000000 	.word	0x00000000
    7114:	41004000 	.word	0x41004000
<<<<<<< Updated upstream
    7118:	000167d1 	.word	0x000167d1
    711c:	00007995 	.word	0x00007995
=======
    7118:	00016725 	.word	0x00016725
    711c:	000078f9 	.word	0x000078f9
>>>>>>> Stashed changes

00007120 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7120:	b5f0      	push	{r4, r5, r6, r7, lr}
    7122:	46c6      	mov	lr, r8
    7124:	b500      	push	{lr}
    7126:	000c      	movs	r4, r1
    7128:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    712a:	2800      	cmp	r0, #0
    712c:	d10f      	bne.n	714e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    712e:	2a00      	cmp	r2, #0
    7130:	dd11      	ble.n	7156 <_read+0x36>
    7132:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7134:	4e09      	ldr	r6, [pc, #36]	; (715c <_read+0x3c>)
    7136:	4d0a      	ldr	r5, [pc, #40]	; (7160 <_read+0x40>)
    7138:	6830      	ldr	r0, [r6, #0]
    713a:	0021      	movs	r1, r4
    713c:	682b      	ldr	r3, [r5, #0]
    713e:	4798      	blx	r3
		ptr++;
    7140:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    7142:	42bc      	cmp	r4, r7
    7144:	d1f8      	bne.n	7138 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7146:	4640      	mov	r0, r8
    7148:	bc04      	pop	{r2}
    714a:	4690      	mov	r8, r2
    714c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    714e:	2301      	movs	r3, #1
    7150:	425b      	negs	r3, r3
    7152:	4698      	mov	r8, r3
    7154:	e7f7      	b.n	7146 <_read+0x26>
	for (; len > 0; --len) {
    7156:	4680      	mov	r8, r0
    7158:	e7f5      	b.n	7146 <_read+0x26>
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	20001f60 	.word	0x20001f60
    7160:	20001f58 	.word	0x20001f58

00007164 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7164:	b5f0      	push	{r4, r5, r6, r7, lr}
    7166:	46c6      	mov	lr, r8
    7168:	b500      	push	{lr}
    716a:	000e      	movs	r6, r1
    716c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    716e:	3801      	subs	r0, #1
    7170:	2802      	cmp	r0, #2
    7172:	d810      	bhi.n	7196 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7174:	2a00      	cmp	r2, #0
    7176:	d011      	beq.n	719c <_write+0x38>
    7178:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    717a:	4b0c      	ldr	r3, [pc, #48]	; (71ac <_write+0x48>)
    717c:	4698      	mov	r8, r3
    717e:	4f0c      	ldr	r7, [pc, #48]	; (71b0 <_write+0x4c>)
    7180:	4643      	mov	r3, r8
    7182:	6818      	ldr	r0, [r3, #0]
    7184:	5d31      	ldrb	r1, [r6, r4]
    7186:	683b      	ldr	r3, [r7, #0]
    7188:	4798      	blx	r3
    718a:	2800      	cmp	r0, #0
    718c:	db08      	blt.n	71a0 <_write+0x3c>
			return -1;
		}
		++nChars;
    718e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7190:	42a5      	cmp	r5, r4
    7192:	d1f5      	bne.n	7180 <_write+0x1c>
    7194:	e006      	b.n	71a4 <_write+0x40>
		return -1;
    7196:	2401      	movs	r4, #1
    7198:	4264      	negs	r4, r4
    719a:	e003      	b.n	71a4 <_write+0x40>
	for (; len != 0; --len) {
    719c:	0014      	movs	r4, r2
    719e:	e001      	b.n	71a4 <_write+0x40>
			return -1;
    71a0:	2401      	movs	r4, #1
    71a2:	4264      	negs	r4, r4
	}
	return nChars;
}
    71a4:	0020      	movs	r0, r4
    71a6:	bc04      	pop	{r2}
    71a8:	4690      	mov	r8, r2
    71aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71ac:	20001f60 	.word	0x20001f60
    71b0:	20001f5c 	.word	0x20001f5c

000071b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    71b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    71b6:	4a06      	ldr	r2, [pc, #24]	; (71d0 <_sbrk+0x1c>)
    71b8:	6812      	ldr	r2, [r2, #0]
    71ba:	2a00      	cmp	r2, #0
    71bc:	d004      	beq.n	71c8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    71be:	4a04      	ldr	r2, [pc, #16]	; (71d0 <_sbrk+0x1c>)
    71c0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    71c2:	18c3      	adds	r3, r0, r3
    71c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    71c6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    71c8:	4902      	ldr	r1, [pc, #8]	; (71d4 <_sbrk+0x20>)
    71ca:	4a01      	ldr	r2, [pc, #4]	; (71d0 <_sbrk+0x1c>)
    71cc:	6011      	str	r1, [r2, #0]
    71ce:	e7f6      	b.n	71be <_sbrk+0xa>
    71d0:	200000f8 	.word	0x200000f8
    71d4:	200054e0 	.word	0x200054e0

000071d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    71d8:	2001      	movs	r0, #1
    71da:	4240      	negs	r0, r0
    71dc:	4770      	bx	lr

000071de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    71de:	2380      	movs	r3, #128	; 0x80
    71e0:	019b      	lsls	r3, r3, #6
    71e2:	604b      	str	r3, [r1, #4]

	return 0;
}
    71e4:	2000      	movs	r0, #0
    71e6:	4770      	bx	lr

000071e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    71e8:	2001      	movs	r0, #1
    71ea:	4770      	bx	lr

000071ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    71ec:	2000      	movs	r0, #0
    71ee:	4770      	bx	lr

000071f0 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    71f0:	be00      	bkpt	0x0000
    71f2:	e7fe      	b.n	71f2 <_exit+0x2>

000071f4 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    71f4:	4770      	bx	lr

000071f6 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    71f6:	2001      	movs	r0, #1
    71f8:	4240      	negs	r0, r0
    71fa:	4770      	bx	lr

000071fc <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    71fc:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    71fe:	1e53      	subs	r3, r2, #1
    7200:	b2db      	uxtb	r3, r3
    7202:	2a00      	cmp	r2, #0
    7204:	d00b      	beq.n	721e <sal_FillSubKey+0x22>
    7206:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7208:	18c5      	adds	r5, r0, r3
    720a:	782a      	ldrb	r2, [r5, #0]
    720c:	0052      	lsls	r2, r2, #1
    720e:	4322      	orrs	r2, r4
    7210:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    7212:	782c      	ldrb	r4, [r5, #0]
    7214:	09e4      	lsrs	r4, r4, #7
	while(i--)
    7216:	3b01      	subs	r3, #1
    7218:	b2db      	uxtb	r3, r3
    721a:	2bff      	cmp	r3, #255	; 0xff
    721c:	d1f4      	bne.n	7208 <sal_FillSubKey+0xc>
	}
}
    721e:	bd30      	pop	{r4, r5, pc}

00007220 <SAL_AESEncode>:
{
    7220:	b510      	push	{r4, lr}
    7222:	b084      	sub	sp, #16
    7224:	0004      	movs	r4, r0
    7226:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7228:	2210      	movs	r2, #16
    722a:	4668      	mov	r0, sp
    722c:	4b04      	ldr	r3, [pc, #16]	; (7240 <SAL_AESEncode+0x20>)
    722e:	4798      	blx	r3
	AESEncode(buffer, useKey);
    7230:	4669      	mov	r1, sp
    7232:	0020      	movs	r0, r4
    7234:	4b03      	ldr	r3, [pc, #12]	; (7244 <SAL_AESEncode+0x24>)
    7236:	4798      	blx	r3
}
    7238:	2000      	movs	r0, #0
    723a:	b004      	add	sp, #16
    723c:	bd10      	pop	{r4, pc}
    723e:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    7240:	00016837 	.word	0x00016837
    7244:	0000cced 	.word	0x0000cced
=======
    7240:	0001678b 	.word	0x0001678b
    7244:	0000cc51 	.word	0x0000cc51
>>>>>>> Stashed changes

00007248 <SAL_DeriveSessionKey>:
{
    7248:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    724a:	4b01      	ldr	r3, [pc, #4]	; (7250 <SAL_DeriveSessionKey+0x8>)
    724c:	4798      	blx	r3
}
    724e:	bd10      	pop	{r4, pc}
    7250:	00007221 	.word	0x00007221

00007254 <SAL_Read>:
}
    7254:	2000      	movs	r0, #0
    7256:	4770      	bx	lr

00007258 <SAL_AESCmac>:
{
    7258:	b5f0      	push	{r4, r5, r6, r7, lr}
    725a:	46d6      	mov	lr, sl
    725c:	464f      	mov	r7, r9
    725e:	4646      	mov	r6, r8
    7260:	b5c0      	push	{r6, r7, lr}
    7262:	b0a4      	sub	sp, #144	; 0x90
    7264:	9001      	str	r0, [sp, #4]
    7266:	000f      	movs	r7, r1
    7268:	9102      	str	r1, [sp, #8]
    726a:	9203      	str	r2, [sp, #12]
    726c:	469a      	mov	sl, r3
    726e:	ab2c      	add	r3, sp, #176	; 0xb0
    7270:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    7272:	ae08      	add	r6, sp, #32
    7274:	2210      	movs	r2, #16
    7276:	2100      	movs	r1, #0
    7278:	0030      	movs	r0, r6
    727a:	4d64      	ldr	r5, [pc, #400]	; (740c <SAL_AESCmac+0x1b4>)
    727c:	47a8      	blx	r5
    727e:	2387      	movs	r3, #135	; 0x87
    7280:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    7282:	2210      	movs	r2, #16
    7284:	2100      	movs	r1, #0
    7286:	a804      	add	r0, sp, #16
    7288:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    728a:	9a01      	ldr	r2, [sp, #4]
    728c:	0039      	movs	r1, r7
    728e:	a804      	add	r0, sp, #16
    7290:	4b5f      	ldr	r3, [pc, #380]	; (7410 <SAL_AESCmac+0x1b8>)
    7292:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    7294:	ab04      	add	r3, sp, #16
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	2b7f      	cmp	r3, #127	; 0x7f
    729a:	d82d      	bhi.n	72f8 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    729c:	2210      	movs	r2, #16
    729e:	a920      	add	r1, sp, #128	; 0x80
    72a0:	a804      	add	r0, sp, #16
    72a2:	4b5c      	ldr	r3, [pc, #368]	; (7414 <SAL_AESCmac+0x1bc>)
    72a4:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    72a6:	ab20      	add	r3, sp, #128	; 0x80
    72a8:	781b      	ldrb	r3, [r3, #0]
    72aa:	2b7f      	cmp	r3, #127	; 0x7f
    72ac:	d834      	bhi.n	7318 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    72ae:	2210      	movs	r2, #16
    72b0:	a91c      	add	r1, sp, #112	; 0x70
    72b2:	a820      	add	r0, sp, #128	; 0x80
    72b4:	4b57      	ldr	r3, [pc, #348]	; (7414 <SAL_AESCmac+0x1bc>)
    72b6:	4798      	blx	r3
	n = (size + 15) >> 4;
    72b8:	0023      	movs	r3, r4
    72ba:	330f      	adds	r3, #15
    72bc:	111d      	asrs	r5, r3, #4
    72be:	b2aa      	uxth	r2, r5
    72c0:	4690      	mov	r8, r2
	if (n == 0)
    72c2:	2a00      	cmp	r2, #0
    72c4:	d038      	beq.n	7338 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    72c6:	0722      	lsls	r2, r4, #28
    72c8:	d138      	bne.n	733c <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    72ca:	4642      	mov	r2, r8
    72cc:	3a01      	subs	r2, #1
    72ce:	0112      	lsls	r2, r2, #4
    72d0:	b296      	uxth	r6, r2
    72d2:	4f51      	ldr	r7, [pc, #324]	; (7418 <SAL_AESCmac+0x1c0>)
    72d4:	401f      	ands	r7, r3
    72d6:	42be      	cmp	r6, r7
    72d8:	da54      	bge.n	7384 <SAL_AESCmac+0x12c>
    72da:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    72dc:	a910      	add	r1, sp, #64	; 0x40
    72de:	aa20      	add	r2, sp, #128	; 0x80
    72e0:	1b98      	subs	r0, r3, r6
    72e2:	b280      	uxth	r0, r0
    72e4:	4654      	mov	r4, sl
    72e6:	5ce4      	ldrb	r4, [r4, r3]
    72e8:	5c15      	ldrb	r5, [r2, r0]
    72ea:	406c      	eors	r4, r5
    72ec:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    72ee:	3301      	adds	r3, #1
    72f0:	b29b      	uxth	r3, r3
    72f2:	42bb      	cmp	r3, r7
    72f4:	dbf4      	blt.n	72e0 <SAL_AESCmac+0x88>
    72f6:	e045      	b.n	7384 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    72f8:	2210      	movs	r2, #16
    72fa:	a920      	add	r1, sp, #128	; 0x80
    72fc:	a804      	add	r0, sp, #16
    72fe:	4b45      	ldr	r3, [pc, #276]	; (7414 <SAL_AESCmac+0x1bc>)
    7300:	4798      	blx	r3
    7302:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    7304:	aa20      	add	r2, sp, #128	; 0x80
    7306:	a908      	add	r1, sp, #32
    7308:	5c98      	ldrb	r0, [r3, r2]
    730a:	5c5d      	ldrb	r5, [r3, r1]
    730c:	4068      	eors	r0, r5
    730e:	5498      	strb	r0, [r3, r2]
    7310:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    7312:	2b10      	cmp	r3, #16
    7314:	d1f8      	bne.n	7308 <SAL_AESCmac+0xb0>
    7316:	e7c6      	b.n	72a6 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7318:	2210      	movs	r2, #16
    731a:	a91c      	add	r1, sp, #112	; 0x70
    731c:	a820      	add	r0, sp, #128	; 0x80
    731e:	4b3d      	ldr	r3, [pc, #244]	; (7414 <SAL_AESCmac+0x1bc>)
    7320:	4798      	blx	r3
    7322:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    7324:	aa1c      	add	r2, sp, #112	; 0x70
    7326:	a908      	add	r1, sp, #32
    7328:	5c98      	ldrb	r0, [r3, r2]
    732a:	5c5d      	ldrb	r5, [r3, r1]
    732c:	4068      	eors	r0, r5
    732e:	5498      	strb	r0, [r3, r2]
    7330:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    7332:	2b10      	cmp	r3, #16
    7334:	d1f8      	bne.n	7328 <SAL_AESCmac+0xd0>
    7336:	e7bf      	b.n	72b8 <SAL_AESCmac+0x60>
		n = 1;
    7338:	2301      	movs	r3, #1
    733a:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    733c:	230f      	movs	r3, #15
    733e:	0020      	movs	r0, r4
    7340:	4398      	bics	r0, r3
    7342:	2300      	movs	r3, #0
			if ( i < (size%16) )
    7344:	220f      	movs	r2, #15
    7346:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7348:	a90c      	add	r1, sp, #48	; 0x30
    734a:	2700      	movs	r7, #0
					padded[i] = 0x80;
    734c:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    734e:	4450      	add	r0, sl
    7350:	e005      	b.n	735e <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    7352:	4294      	cmp	r4, r2
    7354:	d009      	beq.n	736a <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    7356:	545f      	strb	r7, [r3, r1]
    7358:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    735a:	2b10      	cmp	r3, #16
    735c:	d007      	beq.n	736e <SAL_AESCmac+0x116>
    735e:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    7360:	4294      	cmp	r4, r2
    7362:	d9f6      	bls.n	7352 <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    7364:	5cc2      	ldrb	r2, [r0, r3]
    7366:	545a      	strb	r2, [r3, r1]
    7368:	e7f6      	b.n	7358 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    736a:	545e      	strb	r6, [r3, r1]
    736c:	e7f4      	b.n	7358 <SAL_AESCmac+0x100>
    736e:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    7370:	a810      	add	r0, sp, #64	; 0x40
    7372:	a90c      	add	r1, sp, #48	; 0x30
    7374:	aa1c      	add	r2, sp, #112	; 0x70
    7376:	5c5c      	ldrb	r4, [r3, r1]
    7378:	5c9d      	ldrb	r5, [r3, r2]
    737a:	406c      	eors	r4, r5
    737c:	541c      	strb	r4, [r3, r0]
    737e:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    7380:	2b10      	cmp	r3, #16
    7382:	d1f8      	bne.n	7376 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    7384:	2210      	movs	r2, #16
    7386:	2100      	movs	r1, #0
    7388:	a818      	add	r0, sp, #96	; 0x60
    738a:	4b20      	ldr	r3, [pc, #128]	; (740c <SAL_AESCmac+0x1b4>)
    738c:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    738e:	2301      	movs	r3, #1
    7390:	425b      	negs	r3, r3
    7392:	4443      	add	r3, r8
    7394:	4699      	mov	r9, r3
    7396:	2000      	movs	r0, #0
    7398:	2700      	movs	r7, #0
    739a:	2b00      	cmp	r3, #0
    739c:	dd1a      	ble.n	73d4 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    739e:	ad14      	add	r5, sp, #80	; 0x50
    73a0:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    73a2:	4e1e      	ldr	r6, [pc, #120]	; (741c <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    73a4:	0100      	lsls	r0, r0, #4
    73a6:	2300      	movs	r3, #0
    73a8:	4450      	add	r0, sl
    73aa:	5cc2      	ldrb	r2, [r0, r3]
    73ac:	5d19      	ldrb	r1, [r3, r4]
    73ae:	404a      	eors	r2, r1
    73b0:	555a      	strb	r2, [r3, r5]
    73b2:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    73b4:	2b10      	cmp	r3, #16
    73b6:	d1f8      	bne.n	73aa <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    73b8:	2210      	movs	r2, #16
    73ba:	0029      	movs	r1, r5
    73bc:	0020      	movs	r0, r4
    73be:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    73c0:	9a01      	ldr	r2, [sp, #4]
    73c2:	9902      	ldr	r1, [sp, #8]
    73c4:	0020      	movs	r0, r4
    73c6:	4b12      	ldr	r3, [pc, #72]	; (7410 <SAL_AESCmac+0x1b8>)
    73c8:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    73ca:	3701      	adds	r7, #1
    73cc:	b2bf      	uxth	r7, r7
    73ce:	0038      	movs	r0, r7
    73d0:	454f      	cmp	r7, r9
    73d2:	dbe7      	blt.n	73a4 <SAL_AESCmac+0x14c>
    73d4:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    73d6:	ac14      	add	r4, sp, #80	; 0x50
    73d8:	a818      	add	r0, sp, #96	; 0x60
    73da:	a910      	add	r1, sp, #64	; 0x40
    73dc:	5c1a      	ldrb	r2, [r3, r0]
    73de:	5c5d      	ldrb	r5, [r3, r1]
    73e0:	406a      	eors	r2, r5
    73e2:	551a      	strb	r2, [r3, r4]
    73e4:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    73e6:	2b10      	cmp	r3, #16
    73e8:	d1f8      	bne.n	73dc <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    73ea:	9a01      	ldr	r2, [sp, #4]
    73ec:	9902      	ldr	r1, [sp, #8]
    73ee:	a814      	add	r0, sp, #80	; 0x50
    73f0:	4b07      	ldr	r3, [pc, #28]	; (7410 <SAL_AESCmac+0x1b8>)
    73f2:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    73f4:	2210      	movs	r2, #16
    73f6:	a914      	add	r1, sp, #80	; 0x50
    73f8:	9803      	ldr	r0, [sp, #12]
    73fa:	4b08      	ldr	r3, [pc, #32]	; (741c <SAL_AESCmac+0x1c4>)
    73fc:	4798      	blx	r3
}
    73fe:	2000      	movs	r0, #0
    7400:	b024      	add	sp, #144	; 0x90
    7402:	bc1c      	pop	{r2, r3, r4}
    7404:	4690      	mov	r8, r2
    7406:	4699      	mov	r9, r3
    7408:	46a2      	mov	sl, r4
    740a:	bdf0      	pop	{r4, r5, r6, r7, pc}
<<<<<<< Updated upstream
    740c:	00016849 	.word	0x00016849
    7410:	00007221 	.word	0x00007221
    7414:	000071fd 	.word	0x000071fd
    7418:	000ffff0 	.word	0x000ffff0
    741c:	00016837 	.word	0x00016837
=======
    740c:	0001679d 	.word	0x0001679d
    7410:	00007221 	.word	0x00007221
    7414:	000071fd 	.word	0x000071fd
    7418:	000ffff0 	.word	0x000ffff0
    741c:	0001678b 	.word	0x0001678b
>>>>>>> Stashed changes

00007420 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    7420:	b510      	push	{r4, lr}
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    7422:	480e      	ldr	r0, [pc, #56]	; (745c <DemoOutput_Greeting+0x3c>)
    7424:	4c0e      	ldr	r4, [pc, #56]	; (7460 <DemoOutput_Greeting+0x40>)
    7426:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7428:	480e      	ldr	r0, [pc, #56]	; (7464 <DemoOutput_Greeting+0x44>)
    742a:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    742c:	480e      	ldr	r0, [pc, #56]	; (7468 <DemoOutput_Greeting+0x48>)
    742e:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7430:	480e      	ldr	r0, [pc, #56]	; (746c <DemoOutput_Greeting+0x4c>)
    7432:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    7434:	480e      	ldr	r0, [pc, #56]	; (7470 <DemoOutput_Greeting+0x50>)
    7436:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    7438:	480e      	ldr	r0, [pc, #56]	; (7474 <DemoOutput_Greeting+0x54>)
    743a:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    743c:	480e      	ldr	r0, [pc, #56]	; (7478 <DemoOutput_Greeting+0x58>)
    743e:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7440:	480e      	ldr	r0, [pc, #56]	; (747c <DemoOutput_Greeting+0x5c>)
    7442:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    7444:	480e      	ldr	r0, [pc, #56]	; (7480 <DemoOutput_Greeting+0x60>)
    7446:	47a0      	blx	r4
        printf("\r\n\r\n");		
    7448:	480e      	ldr	r0, [pc, #56]	; (7484 <DemoOutput_Greeting+0x64>)
    744a:	4c0f      	ldr	r4, [pc, #60]	; (7488 <DemoOutput_Greeting+0x68>)
    744c:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    744e:	480f      	ldr	r0, [pc, #60]	; (748c <DemoOutput_Greeting+0x6c>)
    7450:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    7452:	480f      	ldr	r0, [pc, #60]	; (7490 <DemoOutput_Greeting+0x70>)
    7454:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    7456:	480f      	ldr	r0, [pc, #60]	; (7494 <DemoOutput_Greeting+0x74>)
    7458:	47a0      	blx	r4
		#endif
    #endif 
}        
    745a:	bd10      	pop	{r4, pc}
<<<<<<< Updated upstream
    745c:	00017dbc 	.word	0x00017dbc
    7460:	00016df1 	.word	0x00016df1
    7464:	00017e2c 	.word	0x00017e2c
    7468:	00017e64 	.word	0x00017e64
    746c:	00017e8c 	.word	0x00017e8c
    7470:	00017eac 	.word	0x00017eac
    7474:	00017ec8 	.word	0x00017ec8
    7478:	00017f08 	.word	0x00017f08
    747c:	00017f44 	.word	0x00017f44
    7480:	00017f80 	.word	0x00017f80
    7484:	00017fc8 	.word	0x00017fc8
    7488:	00016f0d 	.word	0x00016f0d
    748c:	00017fcc 	.word	0x00017fcc
    7490:	00017ff0 	.word	0x00017ff0
    7494:	00018010 	.word	0x00018010
=======
    745c:	00017d10 	.word	0x00017d10
    7460:	00016d45 	.word	0x00016d45
    7464:	00017d80 	.word	0x00017d80
    7468:	00017db8 	.word	0x00017db8
    746c:	00017de0 	.word	0x00017de0
    7470:	00017e00 	.word	0x00017e00
    7474:	00017e1c 	.word	0x00017e1c
    7478:	00017e5c 	.word	0x00017e5c
    747c:	00017e98 	.word	0x00017e98
    7480:	00017ed4 	.word	0x00017ed4
    7484:	00017f1c 	.word	0x00017f1c
    7488:	00016e61 	.word	0x00016e61
    748c:	00017f20 	.word	0x00017f20
    7490:	00017f44 	.word	0x00017f44
    7494:	00017f64 	.word	0x00017f64
>>>>>>> Stashed changes

00007498 <DemoOutput_Instruction>:
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    7498:	4770      	bx	lr
    749a:	Address 0x0000749a is out of bounds.


0000749c <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    749e:	4b2a      	ldr	r3, [pc, #168]	; (7548 <DemoOutput_HandleMessage+0xac>)
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	071b      	lsls	r3, r3, #28
    74a4:	d426      	bmi.n	74f4 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    74a6:	4b28      	ldr	r3, [pc, #160]	; (7548 <DemoOutput_HandleMessage+0xac>)
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	079b      	lsls	r3, r3, #30
    74ac:	d027      	beq.n	74fe <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    74ae:	211c      	movs	r1, #28
    74b0:	4826      	ldr	r0, [pc, #152]	; (754c <DemoOutput_HandleMessage+0xb0>)
    74b2:	4b27      	ldr	r3, [pc, #156]	; (7550 <DemoOutput_HandleMessage+0xb4>)
    74b4:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    74b6:	4c24      	ldr	r4, [pc, #144]	; (7548 <DemoOutput_HandleMessage+0xac>)
    74b8:	7b61      	ldrb	r1, [r4, #13]
    74ba:	4826      	ldr	r0, [pc, #152]	; (7554 <DemoOutput_HandleMessage+0xb8>)
    74bc:	4b26      	ldr	r3, [pc, #152]	; (7558 <DemoOutput_HandleMessage+0xbc>)
    74be:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    74c0:	7823      	ldrb	r3, [r4, #0]
    74c2:	065b      	lsls	r3, r3, #25
    74c4:	d420      	bmi.n	7508 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    74c6:	2103      	movs	r1, #3
    74c8:	4824      	ldr	r0, [pc, #144]	; (755c <DemoOutput_HandleMessage+0xc0>)
    74ca:	4b21      	ldr	r3, [pc, #132]	; (7550 <DemoOutput_HandleMessage+0xb4>)
    74cc:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    74ce:	4b1e      	ldr	r3, [pc, #120]	; (7548 <DemoOutput_HandleMessage+0xac>)
    74d0:	7b1b      	ldrb	r3, [r3, #12]
    74d2:	2b00      	cmp	r3, #0
    74d4:	d00a      	beq.n	74ec <DemoOutput_HandleMessage+0x50>
    74d6:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    74d8:	4d1b      	ldr	r5, [pc, #108]	; (7548 <DemoOutput_HandleMessage+0xac>)
    74da:	4e21      	ldr	r6, [pc, #132]	; (7560 <DemoOutput_HandleMessage+0xc4>)
    74dc:	68ab      	ldr	r3, [r5, #8]
    74de:	5d18      	ldrb	r0, [r3, r4]
    74e0:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    74e2:	3401      	adds	r4, #1
    74e4:	b2e4      	uxtb	r4, r4
    74e6:	7b2b      	ldrb	r3, [r5, #12]
    74e8:	42a3      	cmp	r3, r4
    74ea:	d8f7      	bhi.n	74dc <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    74ec:	481d      	ldr	r0, [pc, #116]	; (7564 <DemoOutput_HandleMessage+0xc8>)
    74ee:	4b1e      	ldr	r3, [pc, #120]	; (7568 <DemoOutput_HandleMessage+0xcc>)
    74f0:	4798      	blx	r3
} 
    74f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    74f4:	2109      	movs	r1, #9
    74f6:	481d      	ldr	r0, [pc, #116]	; (756c <DemoOutput_HandleMessage+0xd0>)
    74f8:	4b15      	ldr	r3, [pc, #84]	; (7550 <DemoOutput_HandleMessage+0xb4>)
    74fa:	4798      	blx	r3
    74fc:	e7d3      	b.n	74a6 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    74fe:	211a      	movs	r1, #26
    7500:	481b      	ldr	r0, [pc, #108]	; (7570 <DemoOutput_HandleMessage+0xd4>)
    7502:	4b13      	ldr	r3, [pc, #76]	; (7550 <DemoOutput_HandleMessage+0xb4>)
    7504:	4798      	blx	r3
    7506:	e7d6      	b.n	74b6 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7508:	2107      	movs	r1, #7
    750a:	481a      	ldr	r0, [pc, #104]	; (7574 <DemoOutput_HandleMessage+0xd8>)
    750c:	4b10      	ldr	r3, [pc, #64]	; (7550 <DemoOutput_HandleMessage+0xb4>)
    750e:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7510:	4b0d      	ldr	r3, [pc, #52]	; (7548 <DemoOutput_HandleMessage+0xac>)
    7512:	781b      	ldrb	r3, [r3, #0]
    7514:	2407      	movs	r4, #7
    7516:	2b7f      	cmp	r3, #127	; 0x7f
    7518:	d809      	bhi.n	752e <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    751a:	4f0b      	ldr	r7, [pc, #44]	; (7548 <DemoOutput_HandleMessage+0xac>)
    751c:	4e16      	ldr	r6, [pc, #88]	; (7578 <DemoOutput_HandleMessage+0xdc>)
    751e:	4d0e      	ldr	r5, [pc, #56]	; (7558 <DemoOutput_HandleMessage+0xbc>)
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	5d19      	ldrb	r1, [r3, r4]
    7524:	0030      	movs	r0, r6
    7526:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    7528:	3c01      	subs	r4, #1
    752a:	d2f9      	bcs.n	7520 <DemoOutput_HandleMessage+0x84>
    752c:	e7cb      	b.n	74c6 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    752e:	4e06      	ldr	r6, [pc, #24]	; (7548 <DemoOutput_HandleMessage+0xac>)
    7530:	6873      	ldr	r3, [r6, #4]
    7532:	7859      	ldrb	r1, [r3, #1]
    7534:	4d10      	ldr	r5, [pc, #64]	; (7578 <DemoOutput_HandleMessage+0xdc>)
    7536:	0028      	movs	r0, r5
    7538:	4c07      	ldr	r4, [pc, #28]	; (7558 <DemoOutput_HandleMessage+0xbc>)
    753a:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    753c:	6873      	ldr	r3, [r6, #4]
    753e:	7819      	ldrb	r1, [r3, #0]
    7540:	0028      	movs	r0, r5
    7542:	47a0      	blx	r4
    7544:	e7bf      	b.n	74c6 <DemoOutput_HandleMessage+0x2a>
    7546:	46c0      	nop			; (mov r8, r8)
    7548:	20002950 	.word	0x20002950
<<<<<<< Updated upstream
    754c:	00018034 	.word	0x00018034
    7550:	0000c1cd 	.word	0x0000c1cd
    7554:	0001806c 	.word	0x0001806c
    7558:	00016df1 	.word	0x00016df1
    755c:	00018080 	.word	0x00018080
    7560:	0000c1f9 	.word	0x0000c1f9
    7564:	000182a8 	.word	0x000182a8
    7568:	00016f0d 	.word	0x00016f0d
    756c:	00018028 	.word	0x00018028
    7570:	00018050 	.word	0x00018050
    7574:	00018074 	.word	0x00018074
    7578:	0001807c 	.word	0x0001807c
=======
    754c:	00017f88 	.word	0x00017f88
    7550:	0000c131 	.word	0x0000c131
    7554:	00017fc0 	.word	0x00017fc0
    7558:	00016d45 	.word	0x00016d45
    755c:	00017fd4 	.word	0x00017fd4
    7560:	0000c15d 	.word	0x0000c15d
    7564:	00018258 	.word	0x00018258
    7568:	00016e61 	.word	0x00016e61
    756c:	00017f7c 	.word	0x00017f7c
    7570:	00017fa4 	.word	0x00017fa4
    7574:	00017fc8 	.word	0x00017fc8
    7578:	00017fd0 	.word	0x00017fd0
>>>>>>> Stashed changes

0000757c <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    757c:	4770      	bx	lr
    757e:	Address 0x0000757e is out of bounds.


00007580 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    7580:	b570      	push	{r4, r5, r6, lr}
    7582:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    7584:	4804      	ldr	r0, [pc, #16]	; (7598 <DemoOutput_ChannelError+0x18>)
    7586:	4c05      	ldr	r4, [pc, #20]	; (759c <DemoOutput_ChannelError+0x1c>)
    7588:	47a0      	blx	r4
        printf("%d", channel);
    758a:	0029      	movs	r1, r5
    758c:	4804      	ldr	r0, [pc, #16]	; (75a0 <DemoOutput_ChannelError+0x20>)
    758e:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    7590:	4804      	ldr	r0, [pc, #16]	; (75a4 <DemoOutput_ChannelError+0x24>)
    7592:	4b05      	ldr	r3, [pc, #20]	; (75a8 <DemoOutput_ChannelError+0x28>)
    7594:	4798      	blx	r3
    #endif
}
    7596:	bd70      	pop	{r4, r5, r6, pc}
<<<<<<< Updated upstream
    7598:	00017d74 	.word	0x00017d74
    759c:	00016df1 	.word	0x00016df1
    75a0:	00017d50 	.word	0x00017d50
    75a4:	00017d8c 	.word	0x00017d8c
    75a8:	00016f0d 	.word	0x00016f0d
=======
    7598:	00017cc8 	.word	0x00017cc8
    759c:	00016d45 	.word	0x00016d45
    75a0:	00017ca4 	.word	0x00017ca4
    75a4:	00017ce0 	.word	0x00017ce0
    75a8:	00016e61 	.word	0x00016e61
>>>>>>> Stashed changes

000075ac <DemoOutput_BroadcastFail>:
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    

void DemoOutput_BroadcastFail(void)
{
    75ac:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    75ae:	4802      	ldr	r0, [pc, #8]	; (75b8 <DemoOutput_BroadcastFail+0xc>)
    75b0:	4b02      	ldr	r3, [pc, #8]	; (75bc <DemoOutput_BroadcastFail+0x10>)
    75b2:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
	#endif
}    
    75b4:	bd10      	pop	{r4, pc}
    75b6:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    75b8:	00017d1c 	.word	0x00017d1c
    75bc:	00016f0d 	.word	0x00016f0d
=======
    75b8:	00017c70 	.word	0x00017c70
    75bc:	00016e61 	.word	0x00016e61
>>>>>>> Stashed changes

000075c0 <TxToutCallback>:
uint8_t ferryState = 0;

#define PAYLOAD_TERMINAL 1

void TxToutCallback(void)
{
    75c0:	b510      	push	{r4, lr}
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    75c2:	2005      	movs	r0, #5
    75c4:	4b03      	ldr	r3, [pc, #12]	; (75d4 <TxToutCallback+0x14>)
    75c6:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    75c8:	4b03      	ldr	r3, [pc, #12]	; (75d8 <TxToutCallback+0x18>)
    75ca:	7818      	ldrb	r0, [r3, #0]
    75cc:	4b03      	ldr	r3, [pc, #12]	; (75dc <TxToutCallback+0x1c>)
    75ce:	4798      	blx	r3
}
    75d0:	bd10      	pop	{r4, pc}
    75d2:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    75d4:	00009eb5 	.word	0x00009eb5
    75d8:	20000104 	.word	0x20000104
    75dc:	0000d41d 	.word	0x0000d41d
=======
    75d4:	00009e19 	.word	0x00009e19
    75d8:	20000104 	.word	0x20000104
    75dc:	0000d381 	.word	0x0000d381
>>>>>>> Stashed changes

000075e0 <dataConfcb>:


// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    75e0:	b510      	push	{r4, lr}
    75e2:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    75e4:	000a      	movs	r2, r1
    75e6:	0001      	movs	r1, r0
    75e8:	4805      	ldr	r0, [pc, #20]	; (7600 <dataConfcb+0x20>)
    75ea:	4b06      	ldr	r3, [pc, #24]	; (7604 <dataConfcb+0x24>)
    75ec:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    75ee:	4b06      	ldr	r3, [pc, #24]	; (7608 <dataConfcb+0x28>)
    75f0:	7818      	ldrb	r0, [r3, #0]
    75f2:	4b06      	ldr	r3, [pc, #24]	; (760c <dataConfcb+0x2c>)
    75f4:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    75f6:	0020      	movs	r0, r4
    75f8:	4b05      	ldr	r3, [pc, #20]	; (7610 <dataConfcb+0x30>)
    75fa:	4798      	blx	r3
	
}
    75fc:	bd10      	pop	{r4, pc}
    75fe:	46c0      	nop			; (mov r8, r8)
<<<<<<< Updated upstream
    7600:	00018330 	.word	0x00018330
    7604:	00016df1 	.word	0x00016df1
    7608:	20000104 	.word	0x20000104
    760c:	0000d41d 	.word	0x0000d41d
    7610:	0000bde9 	.word	0x0000bde9
=======
    7600:	0001814c 	.word	0x0001814c
    7604:	00016d45 	.word	0x00016d45
    7608:	20000104 	.word	0x20000104
    760c:	0000d381 	.word	0x0000d381
    7610:	0000bd4d 	.word	0x0000bd4d
>>>>>>> Stashed changes

00007614 <M_BroadcastMessageToTerminal>:
	.rear = -1
};


void M_BroadcastMessageToTerminal(uint8_t signal)
{
    7614:	b570      	push	{r4, r5, r6, lr}
    7616:	b086      	sub	sp, #24
    7618:	0006      	movs	r6, r0
	uint8_t* dataPtr = NULL;
	uint8_t dataLen = 0;
	uint16_t broadcastAddress = 0xFFFF;
    761a:	2201      	movs	r2, #1
    761c:	4252      	negs	r2, r2
    761e:	2316      	movs	r3, #22
    7620:	446b      	add	r3, sp
    7622:	801a      	strh	r2, [r3, #0]
	
	MiMem_Free(previousMessage);
    7624:	4d1e      	ldr	r5, [pc, #120]	; (76a0 <M_BroadcastMessageToTerminal+0x8c>)
    7626:	6828      	ldr	r0, [r5, #0]
    7628:	4b1e      	ldr	r3, [pc, #120]	; (76a4 <M_BroadcastMessageToTerminal+0x90>)
    762a:	4798      	blx	r3
	previousMessage = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    762c:	2010      	movs	r0, #16
    762e:	4c1e      	ldr	r4, [pc, #120]	; (76a8 <M_BroadcastMessageToTerminal+0x94>)
    7630:	47a0      	blx	r4
    7632:	6028      	str	r0, [r5, #0]
	
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    7634:	2010      	movs	r0, #16
    7636:	47a0      	blx	r4
	
	if (NULL == dataPtr) return;
    7638:	2800      	cmp	r0, #0
    763a:	d024      	beq.n	7686 <M_BroadcastMessageToTerminal+0x72>
	
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    763c:	2200      	movs	r2, #0
    763e:	4b1b      	ldr	r3, [pc, #108]	; (76ac <M_BroadcastMessageToTerminal+0x98>)
    7640:	701a      	strb	r2, [r3, #0]
    7642:	2400      	movs	r4, #0
	{
		previousMessage[i] = signal;
    7644:	4b16      	ldr	r3, [pc, #88]	; (76a0 <M_BroadcastMessageToTerminal+0x8c>)
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7646:	4d19      	ldr	r5, [pc, #100]	; (76ac <M_BroadcastMessageToTerminal+0x98>)
		previousMessage[i] = signal;
    7648:	681a      	ldr	r2, [r3, #0]
    764a:	7016      	strb	r6, [r2, #0]
		dataPtr[dataLen++] = signal;
    764c:	1c62      	adds	r2, r4, #1
    764e:	b2d2      	uxtb	r2, r2
    7650:	5506      	strb	r6, [r0, r4]
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7652:	7829      	ldrb	r1, [r5, #0]
    7654:	3101      	adds	r1, #1
    7656:	b2c9      	uxtb	r1, r1
    7658:	7029      	strb	r1, [r5, #0]
		dataPtr[dataLen++] = signal;
    765a:	0014      	movs	r4, r2
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    765c:	2900      	cmp	r1, #0
    765e:	d0f3      	beq.n	7648 <M_BroadcastMessageToTerminal+0x34>
		sio2host_putchar(dataPtr[i]);
		#endif
	}
			
	// Broadcast the message
	if (MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb) == false)
    7660:	4913      	ldr	r1, [pc, #76]	; (76b0 <M_BroadcastMessageToTerminal+0x9c>)
    7662:	780b      	ldrb	r3, [r1, #0]
    7664:	1c5c      	adds	r4, r3, #1
    7666:	700c      	strb	r4, [r1, #0]
    7668:	4912      	ldr	r1, [pc, #72]	; (76b4 <M_BroadcastMessageToTerminal+0xa0>)
    766a:	9102      	str	r1, [sp, #8]
    766c:	2101      	movs	r1, #1
    766e:	9101      	str	r1, [sp, #4]
    7670:	9300      	str	r3, [sp, #0]
    7672:	0003      	movs	r3, r0
    7674:	3115      	adds	r1, #21
    7676:	4469      	add	r1, sp
    7678:	2002      	movs	r0, #2
    767a:	4c0f      	ldr	r4, [pc, #60]	; (76b8 <M_BroadcastMessageToTerminal+0xa4>)
    767c:	47a0      	blx	r4
    767e:	2800      	cmp	r0, #0
    7680:	d103      	bne.n	768a <M_BroadcastMessageToTerminal+0x76>
	{
		DemoOutput_BroadcastFail();
    7682:	4b0e      	ldr	r3, [pc, #56]	; (76bc <M_BroadcastMessageToTerminal+0xa8>)
    7684:	4798      	blx	r3
	else
	{
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
	}
	
}
    7686:	b006      	add	sp, #24
    7688:	bd70      	pop	{r4, r5, r6, pc}
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
<<<<<<< Updated upstream
    76a4:	4b0d      	ldr	r3, [pc, #52]	; (76dc <M_BroadcastMessageToTerminal+0xc8>)
    76a6:	7818      	ldrb	r0, [r3, #0]
    76a8:	2300      	movs	r3, #0
    76aa:	9300      	str	r3, [sp, #0]
    76ac:	4b0c      	ldr	r3, [pc, #48]	; (76e0 <M_BroadcastMessageToTerminal+0xcc>)
    76ae:	2200      	movs	r2, #0
    76b0:	490c      	ldr	r1, [pc, #48]	; (76e4 <M_BroadcastMessageToTerminal+0xd0>)
    76b2:	4c0d      	ldr	r4, [pc, #52]	; (76e8 <M_BroadcastMessageToTerminal+0xd4>)
    76b4:	47a0      	blx	r4
    76b6:	e7f0      	b.n	769a <M_BroadcastMessageToTerminal+0x86>
    76b8:	20000100 	.word	0x20000100
    76bc:	0000bde9 	.word	0x0000bde9
    76c0:	0000bd2d 	.word	0x0000bd2d
    76c4:	20001f65 	.word	0x20001f65
    76c8:	0000c1f9 	.word	0x0000c1f9
    76cc:	200000ff 	.word	0x200000ff
    76d0:	000075e1 	.word	0x000075e1
    76d4:	0000ad35 	.word	0x0000ad35
    76d8:	000075ad 	.word	0x000075ad
    76dc:	20000104 	.word	0x20000104
    76e0:	000075c1 	.word	0x000075c1
    76e4:	004c4b40 	.word	0x004c4b40
    76e8:	0000d105 	.word	0x0000d105
=======
    768a:	4b0d      	ldr	r3, [pc, #52]	; (76c0 <M_BroadcastMessageToTerminal+0xac>)
    768c:	7818      	ldrb	r0, [r3, #0]
    768e:	2300      	movs	r3, #0
    7690:	9300      	str	r3, [sp, #0]
    7692:	4b0c      	ldr	r3, [pc, #48]	; (76c4 <M_BroadcastMessageToTerminal+0xb0>)
    7694:	2200      	movs	r2, #0
    7696:	490c      	ldr	r1, [pc, #48]	; (76c8 <M_BroadcastMessageToTerminal+0xb4>)
    7698:	4c0c      	ldr	r4, [pc, #48]	; (76cc <M_BroadcastMessageToTerminal+0xb8>)
    769a:	47a0      	blx	r4
    769c:	e7f3      	b.n	7686 <M_BroadcastMessageToTerminal+0x72>
    769e:	46c0      	nop			; (mov r8, r8)
    76a0:	20000100 	.word	0x20000100
    76a4:	0000bd4d 	.word	0x0000bd4d
    76a8:	0000bc91 	.word	0x0000bc91
    76ac:	20001f65 	.word	0x20001f65
    76b0:	200000ff 	.word	0x200000ff
    76b4:	000075e1 	.word	0x000075e1
    76b8:	0000ac99 	.word	0x0000ac99
    76bc:	000075ad 	.word	0x000075ad
    76c0:	20000104 	.word	0x20000104
    76c4:	000075c1 	.word	0x000075c1
    76c8:	004c4b40 	.word	0x004c4b40
    76cc:	0000d069 	.word	0x0000d069
>>>>>>> Stashed changes

000076d0 <M_SendReceivedUARTMessage>:


// Send received UART message with LoRa
void M_SendReceivedUARTMessage(uint8_t message)
{
    76d0:	b510      	push	{r4, lr}
    76d2:	b082      	sub	sp, #8
    76d4:	0004      	movs	r4, r0
	#ifdef DEBUG
		printf("\n\r Send UART message %x \n", message);
	#endif
	
	switch(message)
    76d6:	0003      	movs	r3, r0
    76d8:	3b70      	subs	r3, #112	; 0x70
    76da:	b2da      	uxtb	r2, r3
    76dc:	2a4f      	cmp	r2, #79	; 0x4f
    76de:	d827      	bhi.n	7730 <M_SendReceivedUARTMessage+0x60>
    76e0:	0093      	lsls	r3, r2, #2
    76e2:	4a17      	ldr	r2, [pc, #92]	; (7740 <M_SendReceivedUARTMessage+0x70>)
    76e4:	58d3      	ldr	r3, [r2, r3]
    76e6:	469f      	mov	pc, r3
	{
		case TEAID_GCMD_RESET:
			break;
			
		case TEAID_GCMD_OPEN:
			ferryState = TEAID; 
    76e8:	2240      	movs	r2, #64	; 0x40
    76ea:	4b16      	ldr	r3, [pc, #88]	; (7744 <M_SendReceivedUARTMessage+0x74>)
    76ec:	701a      	strb	r2, [r3, #0]
		default: ;
			uint8_t send_message_again = SEND_MESSAGE_AGAIN;
			UART_SAM_To_IO(&send_message_again);
			return;
	}
	M_BroadcastMessageToTerminal(message);
    76ee:	0020      	movs	r0, r4
    76f0:	4b15      	ldr	r3, [pc, #84]	; (7748 <M_SendReceivedUARTMessage+0x78>)
    76f2:	4798      	blx	r3
}
    76f4:	b002      	add	sp, #8
    76f6:	bd10      	pop	{r4, pc}
			ferryState = TEBID;
    76f8:	2280      	movs	r2, #128	; 0x80
    76fa:	4b12      	ldr	r3, [pc, #72]	; (7744 <M_SendReceivedUARTMessage+0x74>)
    76fc:	701a      	strb	r2, [r3, #0]
			break;
    76fe:	e7f6      	b.n	76ee <M_SendReceivedUARTMessage+0x1e>
			if (s.front == TEAID_REQF_REQUEST)
    7700:	4b12      	ldr	r3, [pc, #72]	; (774c <M_SendReceivedUARTMessage+0x7c>)
    7702:	78db      	ldrb	r3, [r3, #3]
    7704:	2bde      	cmp	r3, #222	; 0xde
    7706:	d1f2      	bne.n	76ee <M_SendReceivedUARTMessage+0x1e>
				pop_front(&s);
    7708:	4810      	ldr	r0, [pc, #64]	; (774c <M_SendReceivedUARTMessage+0x7c>)
    770a:	4b11      	ldr	r3, [pc, #68]	; (7750 <M_SendReceivedUARTMessage+0x80>)
    770c:	4798      	blx	r3
    770e:	e7ee      	b.n	76ee <M_SendReceivedUARTMessage+0x1e>
			ferryState = IN_TRANSIT;
    7710:	22a0      	movs	r2, #160	; 0xa0
    7712:	4b0c      	ldr	r3, [pc, #48]	; (7744 <M_SendReceivedUARTMessage+0x74>)
    7714:	701a      	strb	r2, [r3, #0]
			break;
    7716:	e7ea      	b.n	76ee <M_SendReceivedUARTMessage+0x1e>
			if (s.front == TEBID_REQF_REQUEST)
    7718:	4b0c      	ldr	r3, [pc, #48]	; (774c <M_SendReceivedUARTMessage+0x7c>)
    771a:	78db      	ldrb	r3, [r3, #3]
    771c:	2bee      	cmp	r3, #238	; 0xee
    771e:	d1e6      	bne.n	76ee <M_SendReceivedUARTMessage+0x1e>
				pop_front(&s);
    7720:	480a      	ldr	r0, [pc, #40]	; (774c <M_SendReceivedUARTMessage+0x7c>)
    7722:	4b0b      	ldr	r3, [pc, #44]	; (7750 <M_SendReceivedUARTMessage+0x80>)
    7724:	4798      	blx	r3
    7726:	e7e2      	b.n	76ee <M_SendReceivedUARTMessage+0x1e>
			ferryState = IN_TRANSIT;
    7728:	22a0      	movs	r2, #160	; 0xa0
    772a:	4b06      	ldr	r3, [pc, #24]	; (7744 <M_SendReceivedUARTMessage+0x74>)
    772c:	701a      	strb	r2, [r3, #0]
			break;
    772e:	e7de      	b.n	76ee <M_SendReceivedUARTMessage+0x1e>
			uint8_t send_message_again = SEND_MESSAGE_AGAIN;
    7730:	466b      	mov	r3, sp
    7732:	1dd8      	adds	r0, r3, #7
    7734:	23aa      	movs	r3, #170	; 0xaa
    7736:	7003      	strb	r3, [r0, #0]
			UART_SAM_To_IO(&send_message_again);
<<<<<<< Updated upstream
    7778:	4b0c      	ldr	r3, [pc, #48]	; (77ac <M_SendReceivedUARTMessage+0xc0>)
    777a:	4798      	blx	r3
    777c:	e7cf      	b.n	771e <M_SendReceivedUARTMessage+0x32>
    777e:	46c0      	nop			; (mov r8, r8)
    7780:	00018240 	.word	0x00018240
    7784:	00016df1 	.word	0x00016df1
    7788:	00018084 	.word	0x00018084
    778c:	200000fe 	.word	0x200000fe
    7790:	0001825c 	.word	0x0001825c
    7794:	00007615 	.word	0x00007615
    7798:	00018284 	.word	0x00018284
    779c:	000182ac 	.word	0x000182ac
    77a0:	000182d4 	.word	0x000182d4
    77a4:	2000000c 	.word	0x2000000c
    77a8:	0000e011 	.word	0x0000e011
    77ac:	0000dfb9 	.word	0x0000dfb9
=======
    7738:	4b06      	ldr	r3, [pc, #24]	; (7754 <M_SendReceivedUARTMessage+0x84>)
    773a:	4798      	blx	r3
    773c:	e7da      	b.n	76f4 <M_SendReceivedUARTMessage+0x24>
    773e:	46c0      	nop			; (mov r8, r8)
    7740:	00017fd8 	.word	0x00017fd8
    7744:	200000fe 	.word	0x200000fe
    7748:	00007615 	.word	0x00007615
    774c:	2000000c 	.word	0x2000000c
    7750:	0000df65 	.word	0x0000df65
    7754:	0000df0d 	.word	0x0000df0d
>>>>>>> Stashed changes

00007758 <processOrder>:
}



void processOrder(uint8_t receivedOrder, uint8_t terminalIdentifier)
{
    7758:	b510      	push	{r4, lr}
    775a:	b082      	sub	sp, #8
	
	switch (terminalIdentifier)
    775c:	2940      	cmp	r1, #64	; 0x40
    775e:	d003      	beq.n	7768 <processOrder+0x10>
    7760:	2980      	cmp	r1, #128	; 0x80
    7762:	d018      	beq.n	7796 <processOrder+0x3e>
			break;
		
		default:
			break;
	}
}
    7764:	b002      	add	sp, #8
    7766:	bd10      	pop	{r4, pc}
			if (ferryState == TEAID)
    7768:	4b16      	ldr	r3, [pc, #88]	; (77c4 <processOrder+0x6c>)
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	2b40      	cmp	r3, #64	; 0x40
    776e:	d00e      	beq.n	778e <processOrder+0x36>
				push_back(&s, receivedOrder);
    7770:	0001      	movs	r1, r0
    7772:	4815      	ldr	r0, [pc, #84]	; (77c8 <processOrder+0x70>)
    7774:	4b15      	ldr	r3, [pc, #84]	; (77cc <processOrder+0x74>)
    7776:	4798      	blx	r3
				uint8_t terminal_A_conf = TEAID_CQUD_QCONF;
    7778:	466b      	mov	r3, sp
    777a:	1ddc      	adds	r4, r3, #7
    777c:	2375      	movs	r3, #117	; 0x75
    777e:	7023      	strb	r3, [r4, #0]
				M_BroadcastMessageToTerminal(terminal_A_conf);
    7780:	2075      	movs	r0, #117	; 0x75
    7782:	4b13      	ldr	r3, [pc, #76]	; (77d0 <processOrder+0x78>)
    7784:	4798      	blx	r3
				UART_SAM_To_IO(&terminal_A_conf);
    7786:	0020      	movs	r0, r4
    7788:	4b12      	ldr	r3, [pc, #72]	; (77d4 <processOrder+0x7c>)
    778a:	4798      	blx	r3
    778c:	e7ea      	b.n	7764 <processOrder+0xc>
				M_BroadcastMessageToTerminal(teaid_gcmd_open);
    778e:	2072      	movs	r0, #114	; 0x72
    7790:	4b0f      	ldr	r3, [pc, #60]	; (77d0 <processOrder+0x78>)
    7792:	4798      	blx	r3
    7794:	e7e6      	b.n	7764 <processOrder+0xc>
			if (ferryState == TEBID)
    7796:	4b0b      	ldr	r3, [pc, #44]	; (77c4 <processOrder+0x6c>)
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	2b80      	cmp	r3, #128	; 0x80
    779c:	d00e      	beq.n	77bc <processOrder+0x64>
				push_back(&s, receivedOrder);
    779e:	0001      	movs	r1, r0
    77a0:	4809      	ldr	r0, [pc, #36]	; (77c8 <processOrder+0x70>)
    77a2:	4b0a      	ldr	r3, [pc, #40]	; (77cc <processOrder+0x74>)
    77a4:	4798      	blx	r3
				uint8_t terminal_B_conf = TEBID_CQUD_QCONF; 
    77a6:	466b      	mov	r3, sp
    77a8:	1ddc      	adds	r4, r3, #7
    77aa:	23b5      	movs	r3, #181	; 0xb5
    77ac:	7023      	strb	r3, [r4, #0]
				M_BroadcastMessageToTerminal(terminal_B_conf);
    77ae:	20b5      	movs	r0, #181	; 0xb5
    77b0:	4b07      	ldr	r3, [pc, #28]	; (77d0 <processOrder+0x78>)
    77b2:	4798      	blx	r3
				UART_SAM_To_IO(&terminal_B_conf);
    77b4:	0020      	movs	r0, r4
    77b6:	4b07      	ldr	r3, [pc, #28]	; (77d4 <processOrder+0x7c>)
    77b8:	4798      	blx	r3
}
    77ba:	e7d3      	b.n	7764 <processOrder+0xc>
				M_BroadcastMessageToTerminal(tebid_gcmd_open);
<<<<<<< Updated upstream
    7814:	20b2      	movs	r0, #178	; 0xb2
    7816:	4b04      	ldr	r3, [pc, #16]	; (7828 <processOrder+0x78>)
    7818:	4798      	blx	r3
    781a:	e7cf      	b.n	77bc <processOrder+0xc>
    781c:	200000fe 	.word	0x200000fe
    7820:	2000000c 	.word	0x2000000c
    7824:	0000dfd1 	.word	0x0000dfd1
    7828:	00007615 	.word	0x00007615
    782c:	0000dfb9 	.word	0x0000dfb9
=======
    77bc:	20b2      	movs	r0, #178	; 0xb2
    77be:	4b04      	ldr	r3, [pc, #16]	; (77d0 <processOrder+0x78>)
    77c0:	4798      	blx	r3
    77c2:	e7cf      	b.n	7764 <processOrder+0xc>
    77c4:	200000fe 	.word	0x200000fe
    77c8:	2000000c 	.word	0x2000000c
    77cc:	0000df25 	.word	0x0000df25
    77d0:	00007615 	.word	0x00007615
    77d4:	0000df0d 	.word	0x0000df0d
>>>>>>> Stashed changes

000077d8 <M_SendReceivedLoRaMessage>:
{
    77d8:	b500      	push	{lr}
    77da:	b083      	sub	sp, #12
    77dc:	466b      	mov	r3, sp
    77de:	71d8      	strb	r0, [r3, #7]
	if (M_CheckIdentifier(message))
    77e0:	233f      	movs	r3, #63	; 0x3f
    77e2:	0002      	movs	r2, r0
    77e4:	439a      	bics	r2, r3
    77e6:	2ac0      	cmp	r2, #192	; 0xc0
    77e8:	d120      	bne.n	782c <M_SendReceivedLoRaMessage+0x54>
		switch(message)
    77ea:	28dd      	cmp	r0, #221	; 0xdd
    77ec:	d90f      	bls.n	780e <M_SendReceivedLoRaMessage+0x36>
    77ee:	28ed      	cmp	r0, #237	; 0xed
    77f0:	d815      	bhi.n	781e <M_SendReceivedLoRaMessage+0x46>
    77f2:	28e1      	cmp	r0, #225	; 0xe1
    77f4:	d205      	bcs.n	7802 <M_SendReceivedLoRaMessage+0x2a>
    77f6:	28de      	cmp	r0, #222	; 0xde
    77f8:	d10d      	bne.n	7816 <M_SendReceivedLoRaMessage+0x3e>
				processOrder(message, TEAID);
    77fa:	2140      	movs	r1, #64	; 0x40
    77fc:	20de      	movs	r0, #222	; 0xde
    77fe:	4b10      	ldr	r3, [pc, #64]	; (7840 <M_SendReceivedLoRaMessage+0x68>)
    7800:	4798      	blx	r3
		UART_SAM_To_IO(&message);
    7802:	466b      	mov	r3, sp
    7804:	1dd8      	adds	r0, r3, #7
    7806:	4b0f      	ldr	r3, [pc, #60]	; (7844 <M_SendReceivedLoRaMessage+0x6c>)
    7808:	4798      	blx	r3
}
    780a:	b003      	add	sp, #12
    780c:	bd00      	pop	{pc}
		switch(message)
    780e:	28d1      	cmp	r0, #209	; 0xd1
    7810:	d2f7      	bcs.n	7802 <M_SendReceivedLoRaMessage+0x2a>
    7812:	280f      	cmp	r0, #15
    7814:	d9f5      	bls.n	7802 <M_SendReceivedLoRaMessage+0x2a>
				M_BroadcastMessageToTerminal(SEND_MESSAGE_AGAIN);
    7816:	20aa      	movs	r0, #170	; 0xaa
    7818:	4b0b      	ldr	r3, [pc, #44]	; (7848 <M_SendReceivedLoRaMessage+0x70>)
    781a:	4798      	blx	r3
				return;
    781c:	e7f5      	b.n	780a <M_SendReceivedLoRaMessage+0x32>
		switch(message)
    781e:	28ee      	cmp	r0, #238	; 0xee
    7820:	d1f9      	bne.n	7816 <M_SendReceivedLoRaMessage+0x3e>
				processOrder(message, TEBID);
    7822:	2180      	movs	r1, #128	; 0x80
    7824:	20ee      	movs	r0, #238	; 0xee
    7826:	4b06      	ldr	r3, [pc, #24]	; (7840 <M_SendReceivedLoRaMessage+0x68>)
    7828:	4798      	blx	r3
				break;
    782a:	e7ea      	b.n	7802 <M_SendReceivedLoRaMessage+0x2a>
	else if (message == SEND_MESSAGE_AGAIN)
    782c:	28aa      	cmp	r0, #170	; 0xaa
    782e:	d1ec      	bne.n	780a <M_SendReceivedLoRaMessage+0x32>
		if (previousMessage)	// Send previous message if its not NULL
    7830:	4b06      	ldr	r3, [pc, #24]	; (784c <M_SendReceivedLoRaMessage+0x74>)
    7832:	681b      	ldr	r3, [r3, #0]
    7834:	2b00      	cmp	r3, #0
    7836:	d0e8      	beq.n	780a <M_SendReceivedLoRaMessage+0x32>
			M_BroadcastMessageToTerminal(previousMessage[0]);
<<<<<<< Updated upstream
    78a8:	7818      	ldrb	r0, [r3, #0]
    78aa:	4b08      	ldr	r3, [pc, #32]	; (78cc <M_SendReceivedLoRaMessage+0x9c>)
    78ac:	4798      	blx	r3
			printf("\n Send message again \n\r");
    78ae:	480a      	ldr	r0, [pc, #40]	; (78d8 <M_SendReceivedLoRaMessage+0xa8>)
    78b0:	4b02      	ldr	r3, [pc, #8]	; (78bc <M_SendReceivedLoRaMessage+0x8c>)
    78b2:	4798      	blx	r3
    78b4:	e7de      	b.n	7874 <M_SendReceivedLoRaMessage+0x44>
    78b6:	46c0      	nop			; (mov r8, r8)
    78b8:	000181c4 	.word	0x000181c4
    78bc:	00016df1 	.word	0x00016df1
    78c0:	000077b1 	.word	0x000077b1
    78c4:	000181e0 	.word	0x000181e0
    78c8:	0000dfb9 	.word	0x0000dfb9
    78cc:	00007615 	.word	0x00007615
    78d0:	00018204 	.word	0x00018204
    78d4:	20000100 	.word	0x20000100
    78d8:	00018228 	.word	0x00018228
=======
    7838:	7818      	ldrb	r0, [r3, #0]
    783a:	4b03      	ldr	r3, [pc, #12]	; (7848 <M_SendReceivedLoRaMessage+0x70>)
    783c:	4798      	blx	r3
    783e:	e7e4      	b.n	780a <M_SendReceivedLoRaMessage+0x32>
    7840:	00007759 	.word	0x00007759
    7844:	0000df0d 	.word	0x0000df0d
    7848:	00007615 	.word	0x00007615
    784c:	20000100 	.word	0x20000100
>>>>>>> Stashed changes

00007850 <ReceivedDataIndication>:
{
<<<<<<< Updated upstream
    78dc:	b570      	push	{r4, r5, r6, lr}
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    78de:	4b15      	ldr	r3, [pc, #84]	; (7934 <ReceivedDataIndication+0x58>)
    78e0:	881a      	ldrh	r2, [r3, #0]
    78e2:	8843      	ldrh	r3, [r0, #2]
    78e4:	429a      	cmp	r2, r3
    78e6:	d005      	beq.n	78f4 <ReceivedDataIndication+0x18>
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    78e8:	7882      	ldrb	r2, [r0, #2]
    78ea:	78c1      	ldrb	r1, [r0, #3]
    78ec:	4812      	ldr	r0, [pc, #72]	; (7938 <ReceivedDataIndication+0x5c>)
    78ee:	4b13      	ldr	r3, [pc, #76]	; (793c <ReceivedDataIndication+0x60>)
    78f0:	4798      	blx	r3
}
    78f2:	bd70      	pop	{r4, r5, r6, pc}
		for (int j = 0; j < rxMessage.PayloadSize; j++)
    78f4:	4b12      	ldr	r3, [pc, #72]	; (7940 <ReceivedDataIndication+0x64>)
    78f6:	7b1b      	ldrb	r3, [r3, #12]
    78f8:	2b00      	cmp	r3, #0
    78fa:	dd09      	ble.n	7910 <ReceivedDataIndication+0x34>
    78fc:	2400      	movs	r4, #0
			M_SendReceivedLoRaMessage(rxMessage.Payload[j]);
    78fe:	4d10      	ldr	r5, [pc, #64]	; (7940 <ReceivedDataIndication+0x64>)
    7900:	4e10      	ldr	r6, [pc, #64]	; (7944 <ReceivedDataIndication+0x68>)
    7902:	68ab      	ldr	r3, [r5, #8]
    7904:	5d18      	ldrb	r0, [r3, r4]
    7906:	47b0      	blx	r6
		for (int j = 0; j < rxMessage.PayloadSize; j++)
    7908:	3401      	adds	r4, #1
    790a:	7b2b      	ldrb	r3, [r5, #12]
    790c:	42a3      	cmp	r3, r4
    790e:	dcf8      	bgt.n	7902 <ReceivedDataIndication+0x26>
		DemoOutput_HandleMessage();
    7910:	4b0d      	ldr	r3, [pc, #52]	; (7948 <ReceivedDataIndication+0x6c>)
    7912:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    7914:	4b0d      	ldr	r3, [pc, #52]	; (794c <ReceivedDataIndication+0x70>)
    7916:	7818      	ldrb	r0, [r3, #0]
    7918:	4b0d      	ldr	r3, [pc, #52]	; (7950 <ReceivedDataIndication+0x74>)
    791a:	7819      	ldrb	r1, [r3, #0]
    791c:	3101      	adds	r1, #1
    791e:	b2c9      	uxtb	r1, r1
    7920:	7019      	strb	r1, [r3, #0]
    7922:	4b0c      	ldr	r3, [pc, #48]	; (7954 <ReceivedDataIndication+0x78>)
    7924:	4798      	blx	r3
=======
    7850:	b510      	push	{r4, lr}
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    7852:	4b11      	ldr	r3, [pc, #68]	; (7898 <ReceivedDataIndication+0x48>)
    7854:	881a      	ldrh	r2, [r3, #0]
    7856:	8843      	ldrh	r3, [r0, #2]
    7858:	429a      	cmp	r2, r3
    785a:	d005      	beq.n	7868 <ReceivedDataIndication+0x18>
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    785c:	7882      	ldrb	r2, [r0, #2]
    785e:	78c1      	ldrb	r1, [r0, #3]
    7860:	480e      	ldr	r0, [pc, #56]	; (789c <ReceivedDataIndication+0x4c>)
    7862:	4b0f      	ldr	r3, [pc, #60]	; (78a0 <ReceivedDataIndication+0x50>)
    7864:	4798      	blx	r3
}
    7866:	bd10      	pop	{r4, pc}
		M_SendReceivedLoRaMessage(rxMessage.Payload[0]);
    7868:	4b0e      	ldr	r3, [pc, #56]	; (78a4 <ReceivedDataIndication+0x54>)
    786a:	689b      	ldr	r3, [r3, #8]
    786c:	7818      	ldrb	r0, [r3, #0]
    786e:	4b0e      	ldr	r3, [pc, #56]	; (78a8 <ReceivedDataIndication+0x58>)
    7870:	4798      	blx	r3
		DemoOutput_HandleMessage();
    7872:	4b0e      	ldr	r3, [pc, #56]	; (78ac <ReceivedDataIndication+0x5c>)
    7874:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    7876:	4b0e      	ldr	r3, [pc, #56]	; (78b0 <ReceivedDataIndication+0x60>)
    7878:	7818      	ldrb	r0, [r3, #0]
    787a:	4b0e      	ldr	r3, [pc, #56]	; (78b4 <ReceivedDataIndication+0x64>)
    787c:	7819      	ldrb	r1, [r3, #0]
    787e:	3101      	adds	r1, #1
    7880:	b2c9      	uxtb	r1, r1
    7882:	7019      	strb	r1, [r3, #0]
    7884:	4b0c      	ldr	r3, [pc, #48]	; (78b8 <ReceivedDataIndication+0x68>)
    7886:	4798      	blx	r3
>>>>>>> Stashed changes
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
<<<<<<< Updated upstream
    7926:	2280      	movs	r2, #128	; 0x80
    7928:	0312      	lsls	r2, r2, #12
    792a:	4b0b      	ldr	r3, [pc, #44]	; (7958 <ReceivedDataIndication+0x7c>)
    792c:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    792e:	4b0b      	ldr	r3, [pc, #44]	; (795c <ReceivedDataIndication+0x80>)
    7930:	4798      	blx	r3
    7932:	e7de      	b.n	78f2 <ReceivedDataIndication+0x16>
    7934:	200026bc 	.word	0x200026bc
    7938:	000182fc 	.word	0x000182fc
    793c:	00016df1 	.word	0x00016df1
    7940:	20002950 	.word	0x20002950
    7944:	00007831 	.word	0x00007831
    7948:	0000749d 	.word	0x0000749d
    794c:	200000fd 	.word	0x200000fd
    7950:	200000fc 	.word	0x200000fc
    7954:	0000757d 	.word	0x0000757d
    7958:	40002800 	.word	0x40002800
    795c:	00007499 	.word	0x00007499

00007960 <APP_TaskHandler>:
=======
    7888:	2280      	movs	r2, #128	; 0x80
    788a:	0312      	lsls	r2, r2, #12
    788c:	4b0b      	ldr	r3, [pc, #44]	; (78bc <ReceivedDataIndication+0x6c>)
    788e:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    7890:	4b0b      	ldr	r3, [pc, #44]	; (78c0 <ReceivedDataIndication+0x70>)
    7892:	4798      	blx	r3
    7894:	e7e7      	b.n	7866 <ReceivedDataIndication+0x16>
    7896:	46c0      	nop			; (mov r8, r8)
    7898:	200026bc 	.word	0x200026bc
    789c:	00018118 	.word	0x00018118
    78a0:	00016d45 	.word	0x00016d45
    78a4:	20002950 	.word	0x20002950
    78a8:	000077d9 	.word	0x000077d9
    78ac:	0000749d 	.word	0x0000749d
    78b0:	200000fd 	.word	0x200000fd
    78b4:	200000fc 	.word	0x200000fc
    78b8:	0000757d 	.word	0x0000757d
    78bc:	40002800 	.word	0x40002800
    78c0:	00007499 	.word	0x00007499

000078c4 <APP_TaskHandler>:
>>>>>>> Stashed changes

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
<<<<<<< Updated upstream
    7960:	b510      	push	{r4, lr}
    Run_Communication();
    7962:	4b02      	ldr	r3, [pc, #8]	; (796c <APP_TaskHandler+0xc>)
    7964:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    7966:	2000      	movs	r0, #0
    7968:	bd10      	pop	{r4, pc}
    796a:	46c0      	nop			; (mov r8, r8)
    796c:	00007c61 	.word	0x00007c61

00007970 <ReadMacAddress>:
=======
    78c4:	b510      	push	{r4, lr}
    Run_Communication();
    78c6:	4b02      	ldr	r3, [pc, #8]	; (78d0 <APP_TaskHandler+0xc>)
    78c8:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    78ca:	2000      	movs	r0, #0
    78cc:	bd10      	pop	{r4, pc}
    78ce:	46c0      	nop			; (mov r8, r8)
    78d0:	00007bc5 	.word	0x00007bc5

000078d4 <ReadMacAddress>:
>>>>>>> Stashed changes
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
<<<<<<< Updated upstream
    7970:	b510      	push	{r4, lr}
	#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    7972:	4b06      	ldr	r3, [pc, #24]	; (798c <ReadMacAddress+0x1c>)
    7974:	4798      	blx	r3
    7976:	1dc3      	adds	r3, r0, #7
    7978:	4a05      	ldr	r2, [pc, #20]	; (7990 <ReadMacAddress+0x20>)
    797a:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    797c:	7819      	ldrb	r1, [r3, #0]
    797e:	7011      	strb	r1, [r2, #0]
    7980:	3b01      	subs	r3, #1
    7982:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    7984:	4283      	cmp	r3, r0
    7986:	d1f9      	bne.n	797c <ReadMacAddress+0xc>
=======
    78d4:	b510      	push	{r4, lr}
	#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    78d6:	4b06      	ldr	r3, [pc, #24]	; (78f0 <ReadMacAddress+0x1c>)
    78d8:	4798      	blx	r3
    78da:	1dc3      	adds	r3, r0, #7
    78dc:	4a05      	ldr	r2, [pc, #20]	; (78f4 <ReadMacAddress+0x20>)
    78de:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    78e0:	7819      	ldrb	r1, [r3, #0]
    78e2:	7011      	strb	r1, [r2, #0]
    78e4:	3b01      	subs	r3, #1
    78e6:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    78e8:	4283      	cmp	r3, r0
    78ea:	d1f9      	bne.n	78e0 <ReadMacAddress+0xc>
>>>>>>> Stashed changes
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
	#endif
}
<<<<<<< Updated upstream
    7988:	bd10      	pop	{r4, pc}
    798a:	46c0      	nop			; (mov r8, r8)
    798c:	0000dbb1 	.word	0x0000dbb1
    7990:	2000001c 	.word	0x2000001c

00007994 <main>:
{   
    7994:	b570      	push	{r4, r5, r6, lr}
	system_init();
    7996:	4b16      	ldr	r3, [pc, #88]	; (79f0 <main+0x5c>)
    7998:	4798      	blx	r3
	delay_init();
    799a:	4b16      	ldr	r3, [pc, #88]	; (79f4 <main+0x60>)
    799c:	4798      	blx	r3
	UART_init();
    799e:	4b16      	ldr	r3, [pc, #88]	; (79f8 <main+0x64>)
    79a0:	4798      	blx	r3
	UART_cb_init();
    79a2:	4b16      	ldr	r3, [pc, #88]	; (79fc <main+0x68>)
    79a4:	4798      	blx	r3
	cpu_irq_enable();
<<<<<<< Updated upstream
    7996:	2201      	movs	r2, #1
    7998:	4b15      	ldr	r3, [pc, #84]	; (79f0 <main+0x6c>)
    799a:	701a      	strb	r2, [r3, #0]
    799c:	f3bf 8f5f 	dmb	sy
    79a0:	b662      	cpsie	i
=======
    79a6:	2201      	movs	r2, #1
    79a8:	4b15      	ldr	r3, [pc, #84]	; (7a00 <main+0x6c>)
    79aa:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    79ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    79b0:	b662      	cpsie	i
>>>>>>> Stashed changes
	sio2host_init();
    79b2:	4b14      	ldr	r3, [pc, #80]	; (7a04 <main+0x70>)
    79b4:	4798      	blx	r3
	ReadMacAddress(); 
    79b6:	4b14      	ldr	r3, [pc, #80]	; (7a08 <main+0x74>)
    79b8:	4798      	blx	r3
	SystemTimerInit();
    79ba:	4b14      	ldr	r3, [pc, #80]	; (7a0c <main+0x78>)
    79bc:	4798      	blx	r3
    DemoOutput_Greeting();
    79be:	4b14      	ldr	r3, [pc, #80]	; (7a10 <main+0x7c>)
    79c0:	4798      	blx	r3
	nvm_init(INT_FLASH);
    79c2:	2000      	movs	r0, #0
    79c4:	4b13      	ldr	r3, [pc, #76]	; (7a14 <main+0x80>)
    79c6:	4798      	blx	r3
	PDS_Init();
    79c8:	4b13      	ldr	r3, [pc, #76]	; (7a18 <main+0x84>)
    79ca:	4798      	blx	r3
	freezer_enable_state = PDS_Restore(PDS_FREEZER);
    79cc:	2006      	movs	r0, #6
    79ce:	4b13      	ldr	r3, [pc, #76]	; (7a1c <main+0x88>)
    79d0:	4798      	blx	r3
    79d2:	4b13      	ldr	r3, [pc, #76]	; (7a20 <main+0x8c>)
    79d4:	7018      	strb	r0, [r3, #0]
	Initialize_LoRa(freezer_enable_state);
    79d6:	4b13      	ldr	r3, [pc, #76]	; (7a24 <main+0x90>)
    79d8:	4798      	blx	r3
	Stack_Init();
    79da:	4b13      	ldr	r3, [pc, #76]	; (7a28 <main+0x94>)
    79dc:	4798      	blx	r3
	PDS_Store(PDS_FREEZER);
    79de:	2006      	movs	r0, #6
    79e0:	4b12      	ldr	r3, [pc, #72]	; (7a2c <main+0x98>)
    79e2:	4798      	blx	r3
		SYSTEM_RunTasks();
    79e4:	4d12      	ldr	r5, [pc, #72]	; (7a30 <main+0x9c>)
		Run_Communication();
    79e6:	4c13      	ldr	r4, [pc, #76]	; (7a34 <main+0xa0>)
		SYSTEM_RunTasks();
    79e8:	47a8      	blx	r5
		Run_Communication();
    79ea:	47a0      	blx	r4
    79ec:	e7fc      	b.n	79e8 <main+0x54>
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	00006b95 	.word	0x00006b95
    79f4:	000044d1 	.word	0x000044d1
    79f8:	0000df41 	.word	0x0000df41
    79fc:	0000dfa5 	.word	0x0000dfa5
    7a00:	20000008 	.word	0x20000008
    7a04:	0000c081 	.word	0x0000c081
    7a08:	00007971 	.word	0x00007971
    7a0c:	0000d069 	.word	0x0000d069
    7a10:	00007421 	.word	0x00007421
    7a14:	0000dd65 	.word	0x0000dd65
    7a18:	000094e5 	.word	0x000094e5
    7a1c:	000092ad 	.word	0x000092ad
    7a20:	200002a4 	.word	0x200002a4
    7a24:	00007a69 	.word	0x00007a69
    7a28:	0000d6a1 	.word	0x0000d6a1
    7a2c:	00009385 	.word	0x00009385
    7a30:	0000d6b1 	.word	0x0000d6b1
    7a34:	00007c61 	.word	0x00007c61

00007a38 <Connection_Confirm>:
=======
    78ec:	bd10      	pop	{r4, pc}
    78ee:	46c0      	nop			; (mov r8, r8)
    78f0:	0000db15 	.word	0x0000db15
    78f4:	2000001c 	.word	0x2000001c

000078f8 <main>:
{   
    78f8:	b570      	push	{r4, r5, r6, lr}
	system_init();
    78fa:	4b16      	ldr	r3, [pc, #88]	; (7954 <main+0x5c>)
    78fc:	4798      	blx	r3
	delay_init();
    78fe:	4b16      	ldr	r3, [pc, #88]	; (7958 <main+0x60>)
    7900:	4798      	blx	r3
	UART_init();
    7902:	4b16      	ldr	r3, [pc, #88]	; (795c <main+0x64>)
    7904:	4798      	blx	r3
	UART_cb_init();
    7906:	4b16      	ldr	r3, [pc, #88]	; (7960 <main+0x68>)
    7908:	4798      	blx	r3
	cpu_irq_enable();
    790a:	2201      	movs	r2, #1
    790c:	4b15      	ldr	r3, [pc, #84]	; (7964 <main+0x6c>)
    790e:	701a      	strb	r2, [r3, #0]
    7910:	f3bf 8f5f 	dmb	sy
    7914:	b662      	cpsie	i
	sio2host_init();
    7916:	4b14      	ldr	r3, [pc, #80]	; (7968 <main+0x70>)
    7918:	4798      	blx	r3
	ReadMacAddress(); 
    791a:	4b14      	ldr	r3, [pc, #80]	; (796c <main+0x74>)
    791c:	4798      	blx	r3
	SystemTimerInit();
    791e:	4b14      	ldr	r3, [pc, #80]	; (7970 <main+0x78>)
    7920:	4798      	blx	r3
    DemoOutput_Greeting();
    7922:	4b14      	ldr	r3, [pc, #80]	; (7974 <main+0x7c>)
    7924:	4798      	blx	r3
	nvm_init(INT_FLASH);
    7926:	2000      	movs	r0, #0
    7928:	4b13      	ldr	r3, [pc, #76]	; (7978 <main+0x80>)
    792a:	4798      	blx	r3
	PDS_Init();
    792c:	4b13      	ldr	r3, [pc, #76]	; (797c <main+0x84>)
    792e:	4798      	blx	r3
	freezer_enable_state = PDS_Restore(PDS_FREEZER);
    7930:	2006      	movs	r0, #6
    7932:	4b13      	ldr	r3, [pc, #76]	; (7980 <main+0x88>)
    7934:	4798      	blx	r3
    7936:	4b13      	ldr	r3, [pc, #76]	; (7984 <main+0x8c>)
    7938:	7018      	strb	r0, [r3, #0]
	Initialize_LoRa(freezer_enable_state);
    793a:	4b13      	ldr	r3, [pc, #76]	; (7988 <main+0x90>)
    793c:	4798      	blx	r3
	Stack_Init();
    793e:	4b13      	ldr	r3, [pc, #76]	; (798c <main+0x94>)
    7940:	4798      	blx	r3
	PDS_Store(PDS_FREEZER);
    7942:	2006      	movs	r0, #6
    7944:	4b12      	ldr	r3, [pc, #72]	; (7990 <main+0x98>)
    7946:	4798      	blx	r3
		SYSTEM_RunTasks();
    7948:	4d12      	ldr	r5, [pc, #72]	; (7994 <main+0x9c>)
		Run_Communication();
    794a:	4c13      	ldr	r4, [pc, #76]	; (7998 <main+0xa0>)
		SYSTEM_RunTasks();
    794c:	47a8      	blx	r5
		Run_Communication();
    794e:	47a0      	blx	r4
    7950:	e7fc      	b.n	794c <main+0x54>
    7952:	46c0      	nop			; (mov r8, r8)
    7954:	00006b95 	.word	0x00006b95
    7958:	000044d1 	.word	0x000044d1
    795c:	0000de95 	.word	0x0000de95
    7960:	0000def9 	.word	0x0000def9
    7964:	20000008 	.word	0x20000008
    7968:	0000bfe5 	.word	0x0000bfe5
    796c:	000078d5 	.word	0x000078d5
    7970:	0000cfcd 	.word	0x0000cfcd
    7974:	00007421 	.word	0x00007421
    7978:	0000dcc9 	.word	0x0000dcc9
    797c:	00009449 	.word	0x00009449
    7980:	00009211 	.word	0x00009211
    7984:	200002a4 	.word	0x200002a4
    7988:	000079cd 	.word	0x000079cd
    798c:	0000d605 	.word	0x0000d605
    7990:	000092e9 	.word	0x000092e9
    7994:	0000d615 	.word	0x0000d615
    7998:	00007bc5 	.word	0x00007bc5

0000799c <Connection_Confirm>:
>>>>>>> Stashed changes
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
<<<<<<< Updated upstream
    7a38:	b510      	push	{r4, lr}
    7a3a:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    7a3c:	0001      	movs	r1, r0
    7a3e:	4806      	ldr	r0, [pc, #24]	; (7a58 <Connection_Confirm+0x20>)
    7a40:	4b06      	ldr	r3, [pc, #24]	; (7a5c <Connection_Confirm+0x24>)
    7a42:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    7a44:	2c00      	cmp	r4, #0
    7a46:	d001      	beq.n	7a4c <Connection_Confirm+0x14>
    7a48:	2c06      	cmp	r4, #6
    7a4a:	d104      	bne.n	7a56 <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    7a4c:	4b04      	ldr	r3, [pc, #16]	; (7a60 <Connection_Confirm+0x28>)
    7a4e:	7819      	ldrb	r1, [r3, #0]
    7a50:	4804      	ldr	r0, [pc, #16]	; (7a64 <Connection_Confirm+0x2c>)
    7a52:	4b02      	ldr	r3, [pc, #8]	; (7a5c <Connection_Confirm+0x24>)
    7a54:	4798      	blx	r3
=======
    799c:	b510      	push	{r4, lr}
    799e:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    79a0:	0001      	movs	r1, r0
    79a2:	4806      	ldr	r0, [pc, #24]	; (79bc <Connection_Confirm+0x20>)
    79a4:	4b06      	ldr	r3, [pc, #24]	; (79c0 <Connection_Confirm+0x24>)
    79a6:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    79a8:	2c00      	cmp	r4, #0
    79aa:	d001      	beq.n	79b0 <Connection_Confirm+0x14>
    79ac:	2c06      	cmp	r4, #6
    79ae:	d104      	bne.n	79ba <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    79b0:	4b04      	ldr	r3, [pc, #16]	; (79c4 <Connection_Confirm+0x28>)
    79b2:	7819      	ldrb	r1, [r3, #0]
    79b4:	4804      	ldr	r0, [pc, #16]	; (79c8 <Connection_Confirm+0x2c>)
    79b6:	4b02      	ldr	r3, [pc, #8]	; (79c0 <Connection_Confirm+0x24>)
    79b8:	4798      	blx	r3
>>>>>>> Stashed changes
		//DumpConnection(0xFF) ;
#endif // #if defined (ENABLE_CONSOLE)

	}
}
<<<<<<< Updated upstream
    7a56:	bd10      	pop	{r4, pc}
    7a58:	00018358 	.word	0x00018358
    7a5c:	00016df1 	.word	0x00016df1
    7a60:	20000019 	.word	0x20000019
    7a64:	00018378 	.word	0x00018378

00007a68 <Initialize_LoRa>:

bool Initialize_LoRa(bool freezer_enable)
{
    7a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a6a:	b085      	sub	sp, #20
    7a6c:	0004      	movs	r4, r0
=======
    79ba:	bd10      	pop	{r4, pc}
    79bc:	00018174 	.word	0x00018174
    79c0:	00016d45 	.word	0x00016d45
    79c4:	20000019 	.word	0x20000019
    79c8:	00018194 	.word	0x00018194

000079cc <Initialize_LoRa>:

bool Initialize_LoRa(bool freezer_enable)
{
    79cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ce:	b085      	sub	sp, #20
    79d0:	0004      	movs	r4, r0
>>>>>>> Stashed changes
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
<<<<<<< Updated upstream
    7a6e:	485d      	ldr	r0, [pc, #372]	; (7be4 <Initialize_LoRa+0x17c>)
    7a70:	4b5d      	ldr	r3, [pc, #372]	; (7be8 <Initialize_LoRa+0x180>)
    7a72:	4798      	blx	r3
	
	if (freezer_enable)
    7a74:	2c00      	cmp	r4, #0
    7a76:	d034      	beq.n	7ae2 <Initialize_LoRa+0x7a>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7a78:	2100      	movs	r1, #0
    7a7a:	2000      	movs	r0, #0
    7a7c:	4b5b      	ldr	r3, [pc, #364]	; (7bec <Initialize_LoRa+0x184>)
    7a7e:	4798      	blx	r3
		srand(PHY_RandomReq());
    7a80:	4b5b      	ldr	r3, [pc, #364]	; (7bf0 <Initialize_LoRa+0x188>)
    7a82:	4798      	blx	r3
    7a84:	4b5b      	ldr	r3, [pc, #364]	; (7bf4 <Initialize_LoRa+0x18c>)
    7a86:	4798      	blx	r3
=======
    79d2:	485d      	ldr	r0, [pc, #372]	; (7b48 <Initialize_LoRa+0x17c>)
    79d4:	4b5d      	ldr	r3, [pc, #372]	; (7b4c <Initialize_LoRa+0x180>)
    79d6:	4798      	blx	r3
	
	if (freezer_enable)
    79d8:	2c00      	cmp	r4, #0
    79da:	d034      	beq.n	7a46 <Initialize_LoRa+0x7a>
    {
        MiApp_ProtocolInit(NULL, NULL);
    79dc:	2100      	movs	r1, #0
    79de:	2000      	movs	r0, #0
    79e0:	4b5b      	ldr	r3, [pc, #364]	; (7b50 <Initialize_LoRa+0x184>)
    79e2:	4798      	blx	r3
		srand(PHY_RandomReq());
    79e4:	4b5b      	ldr	r3, [pc, #364]	; (7b54 <Initialize_LoRa+0x188>)
    79e6:	4798      	blx	r3
    79e8:	4b5b      	ldr	r3, [pc, #364]	; (7b58 <Initialize_LoRa+0x18c>)
    79ea:	4798      	blx	r3
>>>>>>> Stashed changes
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
<<<<<<< Updated upstream
    7a88:	2200      	movs	r2, #0
    7a8a:	2300      	movs	r3, #0
    7a8c:	9202      	str	r2, [sp, #8]
    7a8e:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a90:	4e59      	ldr	r6, [pc, #356]	; (7bf8 <Initialize_LoRa+0x190>)
    7a92:	3208      	adds	r2, #8
    7a94:	0031      	movs	r1, r6
    7a96:	a802      	add	r0, sp, #8
    7a98:	4d58      	ldr	r5, [pc, #352]	; (7bfc <Initialize_LoRa+0x194>)
    7a9a:	47a8      	blx	r5
    7a9c:	0004      	movs	r4, r0
=======
    79ec:	2200      	movs	r2, #0
    79ee:	2300      	movs	r3, #0
    79f0:	9202      	str	r2, [sp, #8]
    79f2:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    79f4:	4e59      	ldr	r6, [pc, #356]	; (7b5c <Initialize_LoRa+0x190>)
    79f6:	3208      	adds	r2, #8
    79f8:	0031      	movs	r1, r6
    79fa:	a802      	add	r0, sp, #8
    79fc:	4d58      	ldr	r5, [pc, #352]	; (7b60 <Initialize_LoRa+0x194>)
    79fe:	47a8      	blx	r5
    7a00:	0004      	movs	r4, r0
>>>>>>> Stashed changes
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
<<<<<<< Updated upstream
    7a9e:	2201      	movs	r2, #1
    7aa0:	4252      	negs	r2, r2
    7aa2:	17d3      	asrs	r3, r2, #31
    7aa4:	9202      	str	r2, [sp, #8]
    7aa6:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7aa8:	3209      	adds	r2, #9
    7aaa:	0031      	movs	r1, r6
    7aac:	a802      	add	r0, sp, #8
    7aae:	47a8      	blx	r5
    7ab0:	2800      	cmp	r0, #0
    7ab2:	d001      	beq.n	7ab8 <Initialize_LoRa+0x50>
=======
    7a02:	2201      	movs	r2, #1
    7a04:	4252      	negs	r2, r2
    7a06:	17d3      	asrs	r3, r2, #31
    7a08:	9202      	str	r2, [sp, #8]
    7a0a:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a0c:	3209      	adds	r2, #9
    7a0e:	0031      	movs	r1, r6
    7a10:	a802      	add	r0, sp, #8
    7a12:	47a8      	blx	r5
    7a14:	2800      	cmp	r0, #0
    7a16:	d001      	beq.n	7a1c <Initialize_LoRa+0x50>
>>>>>>> Stashed changes
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
<<<<<<< Updated upstream
    7ab4:	2c00      	cmp	r4, #0
    7ab6:	d108      	bne.n	7aca <Initialize_LoRa+0x62>
    7ab8:	4c4f      	ldr	r4, [pc, #316]	; (7bf8 <Initialize_LoRa+0x190>)
    7aba:	0026      	movs	r6, r4
    7abc:	3608      	adds	r6, #8
=======
    7a18:	2c00      	cmp	r4, #0
    7a1a:	d108      	bne.n	7a2e <Initialize_LoRa+0x62>
    7a1c:	4c4f      	ldr	r4, [pc, #316]	; (7b5c <Initialize_LoRa+0x190>)
    7a1e:	0026      	movs	r6, r4
    7a20:	3608      	adds	r6, #8
>>>>>>> Stashed changes
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
<<<<<<< Updated upstream
    7abe:	4d50      	ldr	r5, [pc, #320]	; (7c00 <Initialize_LoRa+0x198>)
    7ac0:	47a8      	blx	r5
    7ac2:	7020      	strb	r0, [r4, #0]
    7ac4:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7ac6:	42b4      	cmp	r4, r6
    7ac8:	d1fa      	bne.n	7ac0 <Initialize_LoRa+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7aca:	484b      	ldr	r0, [pc, #300]	; (7bf8 <Initialize_LoRa+0x190>)
    7acc:	4b4d      	ldr	r3, [pc, #308]	; (7c04 <Initialize_LoRa+0x19c>)
    7ace:	4798      	blx	r3
=======
    7a22:	4d50      	ldr	r5, [pc, #320]	; (7b64 <Initialize_LoRa+0x198>)
    7a24:	47a8      	blx	r5
    7a26:	7020      	strb	r0, [r4, #0]
    7a28:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7a2a:	42b4      	cmp	r4, r6
    7a2c:	d1fa      	bne.n	7a24 <Initialize_LoRa+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7a2e:	484b      	ldr	r0, [pc, #300]	; (7b5c <Initialize_LoRa+0x190>)
    7a30:	4b4d      	ldr	r3, [pc, #308]	; (7b68 <Initialize_LoRa+0x19c>)
    7a32:	4798      	blx	r3
>>>>>>> Stashed changes
        DemoOutput_Instruction();
#endif    
    printf("\n Satt opp nettverk \r\n");
	}
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId);
<<<<<<< Updated upstream
    7ad0:	484d      	ldr	r0, [pc, #308]	; (7c08 <Initialize_LoRa+0x1a0>)
    7ad2:	4b4e      	ldr	r3, [pc, #312]	; (7c0c <Initialize_LoRa+0x1a4>)
    7ad4:	4798      	blx	r3
	printf("\n Kjort freezer \r\n");
    7ad6:	484e      	ldr	r0, [pc, #312]	; (7c10 <Initialize_LoRa+0x1a8>)
    7ad8:	4b4e      	ldr	r3, [pc, #312]	; (7c14 <Initialize_LoRa+0x1ac>)
    7ada:	4798      	blx	r3
	
	return true;
}
    7adc:	2001      	movs	r0, #1
    7ade:	b005      	add	sp, #20
    7ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    7ae2:	2280      	movs	r2, #128	; 0x80
    7ae4:	0312      	lsls	r2, r2, #12
    7ae6:	4b4c      	ldr	r3, [pc, #304]	; (7c18 <Initialize_LoRa+0x1b0>)
    7ae8:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    7aea:	2100      	movs	r1, #0
    7aec:	2000      	movs	r0, #0
    7aee:	4b3f      	ldr	r3, [pc, #252]	; (7bec <Initialize_LoRa+0x184>)
    7af0:	4798      	blx	r3
		uint8_t txPower = 0x01 ; // 1 dBm
    7af2:	ac01      	add	r4, sp, #4
    7af4:	2301      	movs	r3, #1
    7af6:	7023      	strb	r3, [r4, #0]
		PHY_SetTxPower(txPower) ;
    7af8:	2001      	movs	r0, #1
    7afa:	4b48      	ldr	r3, [pc, #288]	; (7c1c <Initialize_LoRa+0x1b4>)
    7afc:	4798      	blx	r3
		txPower = 255 ;
    7afe:	27ff      	movs	r7, #255	; 0xff
    7b00:	7027      	strb	r7, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    7b02:	0021      	movs	r1, r4
    7b04:	2004      	movs	r0, #4
    7b06:	4e46      	ldr	r6, [pc, #280]	; (7c20 <Initialize_LoRa+0x1b8>)
    7b08:	47b0      	blx	r6
		printf("\nCurrent Tx output power: %d\r\n", txPower) ;
    7b0a:	7821      	ldrb	r1, [r4, #0]
    7b0c:	4845      	ldr	r0, [pc, #276]	; (7c24 <Initialize_LoRa+0x1bc>)
    7b0e:	4c46      	ldr	r4, [pc, #280]	; (7c28 <Initialize_LoRa+0x1c0>)
    7b10:	47a0      	blx	r4
		uint8_t paBoost = 255 ;
    7b12:	466b      	mov	r3, sp
    7b14:	1d5d      	adds	r5, r3, #5
    7b16:	715f      	strb	r7, [r3, #5]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    7b18:	0029      	movs	r1, r5
    7b1a:	2008      	movs	r0, #8
    7b1c:	47b0      	blx	r6
		printf("PA BOOST status: %d\r\n", paBoost) ;
    7b1e:	7829      	ldrb	r1, [r5, #0]
    7b20:	4842      	ldr	r0, [pc, #264]	; (7c2c <Initialize_LoRa+0x1c4>)
    7b22:	47a0      	blx	r4
		RadioDataRate_t sf = SF_7 ;
    7b24:	466b      	mov	r3, sp
    7b26:	1d9d      	adds	r5, r3, #6
    7b28:	2307      	movs	r3, #7
    7b2a:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    7b2c:	0029      	movs	r1, r5
    7b2e:	2016      	movs	r0, #22
    7b30:	4e3f      	ldr	r6, [pc, #252]	; (7c30 <Initialize_LoRa+0x1c8>)
    7b32:	47b0      	blx	r6
		printf("Current SF: SF%d\r\n", sf) ;
    7b34:	7829      	ldrb	r1, [r5, #0]
    7b36:	483f      	ldr	r0, [pc, #252]	; (7c34 <Initialize_LoRa+0x1cc>)
    7b38:	47a0      	blx	r4
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7b3a:	466b      	mov	r3, sp
    7b3c:	1ddd      	adds	r5, r3, #7
    7b3e:	0029      	movs	r1, r5
    7b40:	2007      	movs	r0, #7
    7b42:	47b0      	blx	r6
		printf("Current BW (125kHz=7, 250kHz=8, 500kHz=9): %d\r\n", bw) ;
    7b44:	7829      	ldrb	r1, [r5, #0]
    7b46:	483c      	ldr	r0, [pc, #240]	; (7c38 <Initialize_LoRa+0x1d0>)
    7b48:	47a0      	blx	r4
		srand(PHY_RandomReq());
    7b4a:	4b29      	ldr	r3, [pc, #164]	; (7bf0 <Initialize_LoRa+0x188>)
    7b4c:	4798      	blx	r3
    7b4e:	4b29      	ldr	r3, [pc, #164]	; (7bf4 <Initialize_LoRa+0x18c>)
    7b50:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7b52:	2200      	movs	r2, #0
    7b54:	2300      	movs	r3, #0
    7b56:	9202      	str	r2, [sp, #8]
    7b58:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7b5a:	4e27      	ldr	r6, [pc, #156]	; (7bf8 <Initialize_LoRa+0x190>)
    7b5c:	3208      	adds	r2, #8
    7b5e:	0031      	movs	r1, r6
    7b60:	a802      	add	r0, sp, #8
    7b62:	4d26      	ldr	r5, [pc, #152]	; (7bfc <Initialize_LoRa+0x194>)
    7b64:	47a8      	blx	r5
    7b66:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7b68:	2201      	movs	r2, #1
    7b6a:	4252      	negs	r2, r2
    7b6c:	17d3      	asrs	r3, r2, #31
    7b6e:	9202      	str	r2, [sp, #8]
    7b70:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7b72:	3209      	adds	r2, #9
    7b74:	0031      	movs	r1, r6
    7b76:	a802      	add	r0, sp, #8
    7b78:	47a8      	blx	r5
    7b7a:	2800      	cmp	r0, #0
    7b7c:	d023      	beq.n	7bc6 <Initialize_LoRa+0x15e>
		if (invalidIEEEAddrFlag)
    7b7e:	2c00      	cmp	r4, #0
    7b80:	d021      	beq.n	7bc6 <Initialize_LoRa+0x15e>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7b82:	481d      	ldr	r0, [pc, #116]	; (7bf8 <Initialize_LoRa+0x190>)
    7b84:	4b1f      	ldr	r3, [pc, #124]	; (7c04 <Initialize_LoRa+0x19c>)
    7b86:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7b88:	2000      	movs	r0, #0
    7b8a:	4b2c      	ldr	r3, [pc, #176]	; (7c3c <Initialize_LoRa+0x1d4>)
    7b8c:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7b8e:	492c      	ldr	r1, [pc, #176]	; (7c40 <Initialize_LoRa+0x1d8>)
    7b90:	2000      	movs	r0, #0
    7b92:	4b2c      	ldr	r3, [pc, #176]	; (7c44 <Initialize_LoRa+0x1dc>)
    7b94:	4798      	blx	r3
    7b96:	2800      	cmp	r0, #0
    7b98:	d01f      	beq.n	7bda <Initialize_LoRa+0x172>
		MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7b9a:	4b29      	ldr	r3, [pc, #164]	; (7c40 <Initialize_LoRa+0x1d8>)
    7b9c:	781b      	ldrb	r3, [r3, #0]
    7b9e:	2201      	movs	r2, #1
    7ba0:	409a      	lsls	r2, r3
    7ba2:	4b29      	ldr	r3, [pc, #164]	; (7c48 <Initialize_LoRa+0x1e0>)
    7ba4:	210a      	movs	r1, #10
    7ba6:	2000      	movs	r0, #0
    7ba8:	4c28      	ldr	r4, [pc, #160]	; (7c4c <Initialize_LoRa+0x1e4>)
    7baa:	47a0      	blx	r4
		DumpConnection(0xFF);
    7bac:	20ff      	movs	r0, #255	; 0xff
    7bae:	4b28      	ldr	r3, [pc, #160]	; (7c50 <Initialize_LoRa+0x1e8>)
    7bb0:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7bb2:	2280      	movs	r2, #128	; 0x80
    7bb4:	0312      	lsls	r2, r2, #12
    7bb6:	4b18      	ldr	r3, [pc, #96]	; (7c18 <Initialize_LoRa+0x1b0>)
    7bb8:	615a      	str	r2, [r3, #20]
        DemoOutput_Instruction();
    7bba:	4b26      	ldr	r3, [pc, #152]	; (7c54 <Initialize_LoRa+0x1ec>)
    7bbc:	4798      	blx	r3
    printf("\n Satt opp nettverk \r\n");
    7bbe:	4826      	ldr	r0, [pc, #152]	; (7c58 <Initialize_LoRa+0x1f0>)
    7bc0:	4b14      	ldr	r3, [pc, #80]	; (7c14 <Initialize_LoRa+0x1ac>)
    7bc2:	4798      	blx	r3
    7bc4:	e784      	b.n	7ad0 <Initialize_LoRa+0x68>
    7bc6:	4c0c      	ldr	r4, [pc, #48]	; (7bf8 <Initialize_LoRa+0x190>)
    7bc8:	0026      	movs	r6, r4
    7bca:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7bcc:	4d0c      	ldr	r5, [pc, #48]	; (7c00 <Initialize_LoRa+0x198>)
    7bce:	47a8      	blx	r5
    7bd0:	7020      	strb	r0, [r4, #0]
    7bd2:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7bd4:	42b4      	cmp	r4, r6
    7bd6:	d1fa      	bne.n	7bce <Initialize_LoRa+0x166>
    7bd8:	e7d3      	b.n	7b82 <Initialize_LoRa+0x11a>
            DemoOutput_ChannelError(myChannel);
    7bda:	4b19      	ldr	r3, [pc, #100]	; (7c40 <Initialize_LoRa+0x1d8>)
    7bdc:	7818      	ldrb	r0, [r3, #0]
    7bde:	4b1f      	ldr	r3, [pc, #124]	; (7c5c <Initialize_LoRa+0x1f4>)
    7be0:	4798      	blx	r3
    7be2:	e7da      	b.n	7b9a <Initialize_LoRa+0x132>
    7be4:	000078dd 	.word	0x000078dd
    7be8:	0000b385 	.word	0x0000b385
    7bec:	0000ae99 	.word	0x0000ae99
    7bf0:	0000aa91 	.word	0x0000aa91
    7bf4:	00016f21 	.word	0x00016f21
    7bf8:	2000001c 	.word	0x2000001c
    7bfc:	00016819 	.word	0x00016819
    7c00:	00016f7d 	.word	0x00016f7d
    7c04:	0000aab5 	.word	0x0000aab5
    7c08:	20000104 	.word	0x20000104
    7c0c:	0000d0d1 	.word	0x0000d0d1
    7c10:	00018440 	.word	0x00018440
    7c14:	00016f0d 	.word	0x00016f0d
    7c18:	40002800 	.word	0x40002800
    7c1c:	0000a945 	.word	0x0000a945
    7c20:	0000e2b5 	.word	0x0000e2b5
    7c24:	000183ac 	.word	0x000183ac
    7c28:	00016df1 	.word	0x00016df1
    7c2c:	000183cc 	.word	0x000183cc
    7c30:	0000a98d 	.word	0x0000a98d
    7c34:	000183e4 	.word	0x000183e4
    7c38:	000183f8 	.word	0x000183f8
    7c3c:	0000b355 	.word	0x0000b355
    7c40:	20000015 	.word	0x20000015
    7c44:	0000ae69 	.word	0x0000ae69
    7c48:	00007a39 	.word	0x00007a39
    7c4c:	0000afe1 	.word	0x0000afe1
    7c50:	0000b081 	.word	0x0000b081
    7c54:	00007499 	.word	0x00007499
    7c58:	00018428 	.word	0x00018428
    7c5c:	00007581 	.word	0x00007581

00007c60 <Run_Communication>:

void Run_Communication(void)
{
    7c60:	b510      	push	{r4, lr}
    P2PTasks();
    7c62:	4b04      	ldr	r3, [pc, #16]	; (7c74 <Run_Communication+0x14>)
    7c64:	4798      	blx	r3
	
	// Read buffer for received UART message
	usart_read_buffer_job(&UART_IO, (uint8_t*)rx_buffer_IO, AUTOPAX_UART_RX_BUFFER_LENGTH);
    7c66:	2201      	movs	r2, #1
    7c68:	4903      	ldr	r1, [pc, #12]	; (7c78 <Run_Communication+0x18>)
    7c6a:	4804      	ldr	r0, [pc, #16]	; (7c7c <Run_Communication+0x1c>)
    7c6c:	4b04      	ldr	r3, [pc, #16]	; (7c80 <Run_Communication+0x20>)
    7c6e:	4798      	blx	r3
    7c70:	bd10      	pop	{r4, pc}
    7c72:	46c0      	nop			; (mov r8, r8)
    7c74:	0000b4f9 	.word	0x0000b4f9
    7c78:	20001f9c 	.word	0x20001f9c
    7c7c:	20001f68 	.word	0x20001f68
    7c80:	0000627d 	.word	0x0000627d

<<<<<<< Updated upstream
00007c74 <CompareData>:
=======
    7a34:	484d      	ldr	r0, [pc, #308]	; (7b6c <Initialize_LoRa+0x1a0>)
    7a36:	4b4e      	ldr	r3, [pc, #312]	; (7b70 <Initialize_LoRa+0x1a4>)
    7a38:	4798      	blx	r3
	printf("\n Kjort freezer \r\n");
    7a3a:	484e      	ldr	r0, [pc, #312]	; (7b74 <Initialize_LoRa+0x1a8>)
    7a3c:	4b4e      	ldr	r3, [pc, #312]	; (7b78 <Initialize_LoRa+0x1ac>)
    7a3e:	4798      	blx	r3
	
	return true;
}
    7a40:	2001      	movs	r0, #1
    7a42:	b005      	add	sp, #20
    7a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    7a46:	2280      	movs	r2, #128	; 0x80
    7a48:	0312      	lsls	r2, r2, #12
    7a4a:	4b4c      	ldr	r3, [pc, #304]	; (7b7c <Initialize_LoRa+0x1b0>)
    7a4c:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    7a4e:	2100      	movs	r1, #0
    7a50:	2000      	movs	r0, #0
    7a52:	4b3f      	ldr	r3, [pc, #252]	; (7b50 <Initialize_LoRa+0x184>)
    7a54:	4798      	blx	r3
		uint8_t txPower = 0x01 ; // 1 dBm
    7a56:	ac01      	add	r4, sp, #4
    7a58:	2301      	movs	r3, #1
    7a5a:	7023      	strb	r3, [r4, #0]
		PHY_SetTxPower(txPower) ;
    7a5c:	2001      	movs	r0, #1
    7a5e:	4b48      	ldr	r3, [pc, #288]	; (7b80 <Initialize_LoRa+0x1b4>)
    7a60:	4798      	blx	r3
		txPower = 255 ;
    7a62:	27ff      	movs	r7, #255	; 0xff
    7a64:	7027      	strb	r7, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    7a66:	0021      	movs	r1, r4
    7a68:	2004      	movs	r0, #4
    7a6a:	4e46      	ldr	r6, [pc, #280]	; (7b84 <Initialize_LoRa+0x1b8>)
    7a6c:	47b0      	blx	r6
		printf("\nCurrent Tx output power: %d\r\n", txPower) ;
    7a6e:	7821      	ldrb	r1, [r4, #0]
    7a70:	4845      	ldr	r0, [pc, #276]	; (7b88 <Initialize_LoRa+0x1bc>)
    7a72:	4c46      	ldr	r4, [pc, #280]	; (7b8c <Initialize_LoRa+0x1c0>)
    7a74:	47a0      	blx	r4
		uint8_t paBoost = 255 ;
    7a76:	466b      	mov	r3, sp
    7a78:	1d5d      	adds	r5, r3, #5
    7a7a:	715f      	strb	r7, [r3, #5]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    7a7c:	0029      	movs	r1, r5
    7a7e:	2008      	movs	r0, #8
    7a80:	47b0      	blx	r6
		printf("PA BOOST status: %d\r\n", paBoost) ;
    7a82:	7829      	ldrb	r1, [r5, #0]
    7a84:	4842      	ldr	r0, [pc, #264]	; (7b90 <Initialize_LoRa+0x1c4>)
    7a86:	47a0      	blx	r4
		RadioDataRate_t sf = SF_7 ;
    7a88:	466b      	mov	r3, sp
    7a8a:	1d9d      	adds	r5, r3, #6
    7a8c:	2307      	movs	r3, #7
    7a8e:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    7a90:	0029      	movs	r1, r5
    7a92:	2016      	movs	r0, #22
    7a94:	4e3f      	ldr	r6, [pc, #252]	; (7b94 <Initialize_LoRa+0x1c8>)
    7a96:	47b0      	blx	r6
		printf("Current SF: SF%d\r\n", sf) ;
    7a98:	7829      	ldrb	r1, [r5, #0]
    7a9a:	483f      	ldr	r0, [pc, #252]	; (7b98 <Initialize_LoRa+0x1cc>)
    7a9c:	47a0      	blx	r4
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7a9e:	466b      	mov	r3, sp
    7aa0:	1ddd      	adds	r5, r3, #7
    7aa2:	0029      	movs	r1, r5
    7aa4:	2007      	movs	r0, #7
    7aa6:	47b0      	blx	r6
		printf("Current BW (125kHz=7, 250kHz=8, 500kHz=9): %d\r\n", bw) ;
    7aa8:	7829      	ldrb	r1, [r5, #0]
    7aaa:	483c      	ldr	r0, [pc, #240]	; (7b9c <Initialize_LoRa+0x1d0>)
    7aac:	47a0      	blx	r4
		srand(PHY_RandomReq());
    7aae:	4b29      	ldr	r3, [pc, #164]	; (7b54 <Initialize_LoRa+0x188>)
    7ab0:	4798      	blx	r3
    7ab2:	4b29      	ldr	r3, [pc, #164]	; (7b58 <Initialize_LoRa+0x18c>)
    7ab4:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7ab6:	2200      	movs	r2, #0
    7ab8:	2300      	movs	r3, #0
    7aba:	9202      	str	r2, [sp, #8]
    7abc:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7abe:	4e27      	ldr	r6, [pc, #156]	; (7b5c <Initialize_LoRa+0x190>)
    7ac0:	3208      	adds	r2, #8
    7ac2:	0031      	movs	r1, r6
    7ac4:	a802      	add	r0, sp, #8
    7ac6:	4d26      	ldr	r5, [pc, #152]	; (7b60 <Initialize_LoRa+0x194>)
    7ac8:	47a8      	blx	r5
    7aca:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7acc:	2201      	movs	r2, #1
    7ace:	4252      	negs	r2, r2
    7ad0:	17d3      	asrs	r3, r2, #31
    7ad2:	9202      	str	r2, [sp, #8]
    7ad4:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7ad6:	3209      	adds	r2, #9
    7ad8:	0031      	movs	r1, r6
    7ada:	a802      	add	r0, sp, #8
    7adc:	47a8      	blx	r5
    7ade:	2800      	cmp	r0, #0
    7ae0:	d023      	beq.n	7b2a <Initialize_LoRa+0x15e>
		if (invalidIEEEAddrFlag)
    7ae2:	2c00      	cmp	r4, #0
    7ae4:	d021      	beq.n	7b2a <Initialize_LoRa+0x15e>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7ae6:	481d      	ldr	r0, [pc, #116]	; (7b5c <Initialize_LoRa+0x190>)
    7ae8:	4b1f      	ldr	r3, [pc, #124]	; (7b68 <Initialize_LoRa+0x19c>)
    7aea:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7aec:	2000      	movs	r0, #0
    7aee:	4b2c      	ldr	r3, [pc, #176]	; (7ba0 <Initialize_LoRa+0x1d4>)
    7af0:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7af2:	492c      	ldr	r1, [pc, #176]	; (7ba4 <Initialize_LoRa+0x1d8>)
    7af4:	2000      	movs	r0, #0
    7af6:	4b2c      	ldr	r3, [pc, #176]	; (7ba8 <Initialize_LoRa+0x1dc>)
    7af8:	4798      	blx	r3
    7afa:	2800      	cmp	r0, #0
    7afc:	d01f      	beq.n	7b3e <Initialize_LoRa+0x172>
		MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7afe:	4b29      	ldr	r3, [pc, #164]	; (7ba4 <Initialize_LoRa+0x1d8>)
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	2201      	movs	r2, #1
    7b04:	409a      	lsls	r2, r3
    7b06:	4b29      	ldr	r3, [pc, #164]	; (7bac <Initialize_LoRa+0x1e0>)
    7b08:	210a      	movs	r1, #10
    7b0a:	2000      	movs	r0, #0
    7b0c:	4c28      	ldr	r4, [pc, #160]	; (7bb0 <Initialize_LoRa+0x1e4>)
    7b0e:	47a0      	blx	r4
		DumpConnection(0xFF);
    7b10:	20ff      	movs	r0, #255	; 0xff
    7b12:	4b28      	ldr	r3, [pc, #160]	; (7bb4 <Initialize_LoRa+0x1e8>)
    7b14:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7b16:	2280      	movs	r2, #128	; 0x80
    7b18:	0312      	lsls	r2, r2, #12
    7b1a:	4b18      	ldr	r3, [pc, #96]	; (7b7c <Initialize_LoRa+0x1b0>)
    7b1c:	615a      	str	r2, [r3, #20]
        DemoOutput_Instruction();
    7b1e:	4b26      	ldr	r3, [pc, #152]	; (7bb8 <Initialize_LoRa+0x1ec>)
    7b20:	4798      	blx	r3
    printf("\n Satt opp nettverk \r\n");
    7b22:	4826      	ldr	r0, [pc, #152]	; (7bbc <Initialize_LoRa+0x1f0>)
    7b24:	4b14      	ldr	r3, [pc, #80]	; (7b78 <Initialize_LoRa+0x1ac>)
    7b26:	4798      	blx	r3
    7b28:	e784      	b.n	7a34 <Initialize_LoRa+0x68>
    7b2a:	4c0c      	ldr	r4, [pc, #48]	; (7b5c <Initialize_LoRa+0x190>)
    7b2c:	0026      	movs	r6, r4
    7b2e:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7b30:	4d0c      	ldr	r5, [pc, #48]	; (7b64 <Initialize_LoRa+0x198>)
    7b32:	47a8      	blx	r5
    7b34:	7020      	strb	r0, [r4, #0]
    7b36:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7b38:	42b4      	cmp	r4, r6
    7b3a:	d1fa      	bne.n	7b32 <Initialize_LoRa+0x166>
    7b3c:	e7d3      	b.n	7ae6 <Initialize_LoRa+0x11a>
            DemoOutput_ChannelError(myChannel);
    7b3e:	4b19      	ldr	r3, [pc, #100]	; (7ba4 <Initialize_LoRa+0x1d8>)
    7b40:	7818      	ldrb	r0, [r3, #0]
    7b42:	4b1f      	ldr	r3, [pc, #124]	; (7bc0 <Initialize_LoRa+0x1f4>)
    7b44:	4798      	blx	r3
    7b46:	e7da      	b.n	7afe <Initialize_LoRa+0x132>
    7b48:	00007851 	.word	0x00007851
    7b4c:	0000b2e9 	.word	0x0000b2e9
    7b50:	0000adfd 	.word	0x0000adfd
    7b54:	0000a9f5 	.word	0x0000a9f5
    7b58:	00016e75 	.word	0x00016e75
    7b5c:	2000001c 	.word	0x2000001c
    7b60:	0001676d 	.word	0x0001676d
    7b64:	00016ed1 	.word	0x00016ed1
    7b68:	0000aa19 	.word	0x0000aa19
    7b6c:	20000104 	.word	0x20000104
    7b70:	0000d035 	.word	0x0000d035
    7b74:	0001825c 	.word	0x0001825c
    7b78:	00016e61 	.word	0x00016e61
    7b7c:	40002800 	.word	0x40002800
    7b80:	0000a8a9 	.word	0x0000a8a9
    7b84:	0000e209 	.word	0x0000e209
    7b88:	000181c8 	.word	0x000181c8
    7b8c:	00016d45 	.word	0x00016d45
    7b90:	000181e8 	.word	0x000181e8
    7b94:	0000a8f1 	.word	0x0000a8f1
    7b98:	00018200 	.word	0x00018200
    7b9c:	00018214 	.word	0x00018214
    7ba0:	0000b2b9 	.word	0x0000b2b9
    7ba4:	20000015 	.word	0x20000015
    7ba8:	0000adcd 	.word	0x0000adcd
    7bac:	0000799d 	.word	0x0000799d
    7bb0:	0000af45 	.word	0x0000af45
    7bb4:	0000afe5 	.word	0x0000afe5
    7bb8:	00007499 	.word	0x00007499
    7bbc:	00018244 	.word	0x00018244
    7bc0:	00007581 	.word	0x00007581

00007bc4 <Run_Communication>:

void Run_Communication(void)
{
    7bc4:	b510      	push	{r4, lr}
    P2PTasks();
    7bc6:	4b04      	ldr	r3, [pc, #16]	; (7bd8 <Run_Communication+0x14>)
    7bc8:	4798      	blx	r3
	
	// Read buffer for received UART message
	usart_read_buffer_job(&UART_IO, (uint8_t*)rx_buffer_IO, AUTOPAX_UART_RX_BUFFER_LENGTH);
    7bca:	2201      	movs	r2, #1
    7bcc:	4903      	ldr	r1, [pc, #12]	; (7bdc <Run_Communication+0x18>)
    7bce:	4804      	ldr	r0, [pc, #16]	; (7be0 <Run_Communication+0x1c>)
    7bd0:	4b04      	ldr	r3, [pc, #16]	; (7be4 <Run_Communication+0x20>)
    7bd2:	4798      	blx	r3
    7bd4:	bd10      	pop	{r4, pc}
    7bd6:	46c0      	nop			; (mov r8, r8)
    7bd8:	0000b45d 	.word	0x0000b45d
    7bdc:	20001f9c 	.word	0x20001f9c
    7be0:	20001f68 	.word	0x20001f68
    7be4:	0000627d 	.word	0x0000627d

00007be8 <CompareData>:
>>>>>>> Stashed changes
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bea:	46c6      	mov	lr, r8
    7bec:	b500      	push	{lr}
    7bee:	b084      	sub	sp, #16
    7bf0:	0014      	movs	r4, r2
    7bf2:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7bf4:	4b29      	ldr	r3, [pc, #164]	; (7c9c <CompareData+0xb4>)
    7bf6:	18cb      	adds	r3, r1, r3
    7bf8:	0340      	lsls	r0, r0, #13
    7bfa:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7bfc:	2f00      	cmp	r7, #0
    7bfe:	d01a      	beq.n	7c36 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    7c00:	4b27      	ldr	r3, [pc, #156]	; (7ca0 <CompareData+0xb8>)
    7c02:	1e5a      	subs	r2, r3, #1
    7c04:	4295      	cmp	r5, r2
    7c06:	d81c      	bhi.n	7c42 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c08:	197a      	adds	r2, r7, r5
    7c0a:	4293      	cmp	r3, r2
    7c0c:	d31f      	bcc.n	7c4e <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c0e:	19c9      	adds	r1, r1, r7
    7c10:	2380      	movs	r3, #128	; 0x80
    7c12:	019b      	lsls	r3, r3, #6
    7c14:	4299      	cmp	r1, r3
    7c16:	d820      	bhi.n	7c5a <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7c18:	4b22      	ldr	r3, [pc, #136]	; (7ca4 <CompareData+0xbc>)
    7c1a:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7c1c:	1c3e      	adds	r6, r7, #0
    7c1e:	2f10      	cmp	r7, #16
    7c20:	d900      	bls.n	7c24 <CompareData+0x3c>
    7c22:	2610      	movs	r6, #16
    7c24:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7c26:	0032      	movs	r2, r6
    7c28:	0029      	movs	r1, r5
    7c2a:	4668      	mov	r0, sp
    7c2c:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7c2e:	2e00      	cmp	r6, #0
    7c30:	d028      	beq.n	7c84 <CompareData+0x9c>
    7c32:	2300      	movs	r3, #0
    7c34:	e01f      	b.n	7c76 <CompareData+0x8e>
  assert(numberOfBytes);
    7c36:	4b1c      	ldr	r3, [pc, #112]	; (7ca8 <CompareData+0xc0>)
    7c38:	4a1c      	ldr	r2, [pc, #112]	; (7cac <CompareData+0xc4>)
    7c3a:	21d9      	movs	r1, #217	; 0xd9
    7c3c:	481c      	ldr	r0, [pc, #112]	; (7cb0 <CompareData+0xc8>)
    7c3e:	4c1d      	ldr	r4, [pc, #116]	; (7cb4 <CompareData+0xcc>)
    7c40:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7c42:	4b1d      	ldr	r3, [pc, #116]	; (7cb8 <CompareData+0xd0>)
    7c44:	4a19      	ldr	r2, [pc, #100]	; (7cac <CompareData+0xc4>)
    7c46:	21da      	movs	r1, #218	; 0xda
    7c48:	4819      	ldr	r0, [pc, #100]	; (7cb0 <CompareData+0xc8>)
    7c4a:	4c1a      	ldr	r4, [pc, #104]	; (7cb4 <CompareData+0xcc>)
    7c4c:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c4e:	4b1b      	ldr	r3, [pc, #108]	; (7cbc <CompareData+0xd4>)
    7c50:	4a16      	ldr	r2, [pc, #88]	; (7cac <CompareData+0xc4>)
    7c52:	21db      	movs	r1, #219	; 0xdb
    7c54:	4816      	ldr	r0, [pc, #88]	; (7cb0 <CompareData+0xc8>)
    7c56:	4c17      	ldr	r4, [pc, #92]	; (7cb4 <CompareData+0xcc>)
    7c58:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c5a:	4b19      	ldr	r3, [pc, #100]	; (7cc0 <CompareData+0xd8>)
    7c5c:	4a13      	ldr	r2, [pc, #76]	; (7cac <CompareData+0xc4>)
    7c5e:	21dc      	movs	r1, #220	; 0xdc
    7c60:	4813      	ldr	r0, [pc, #76]	; (7cb0 <CompareData+0xc8>)
    7c62:	4c14      	ldr	r4, [pc, #80]	; (7cb4 <CompareData+0xcc>)
    7c64:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7c66:	21ff      	movs	r1, #255	; 0xff
    7c68:	4291      	cmp	r1, r2
    7c6a:	d112      	bne.n	7c92 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7c6c:	3301      	adds	r3, #1
    7c6e:	b2db      	uxtb	r3, r3
    7c70:	b29a      	uxth	r2, r3
    7c72:	4296      	cmp	r6, r2
    7c74:	d906      	bls.n	7c84 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7c76:	466a      	mov	r2, sp
    7c78:	5cd2      	ldrb	r2, [r2, r3]
    7c7a:	2c00      	cmp	r4, #0
    7c7c:	d0f3      	beq.n	7c66 <CompareData+0x7e>
    7c7e:	7821      	ldrb	r1, [r4, #0]
    7c80:	3401      	adds	r4, #1
    7c82:	e7f1      	b.n	7c68 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7c84:	1bbf      	subs	r7, r7, r6
    7c86:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7c88:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7c8a:	2f00      	cmp	r7, #0
    7c8c:	d1c6      	bne.n	7c1c <CompareData+0x34>
  }

  return true;
    7c8e:	2001      	movs	r0, #1
    7c90:	e000      	b.n	7c94 <CompareData+0xac>
        return false;
    7c92:	2000      	movs	r0, #0
}
    7c94:	b004      	add	sp, #16
    7c96:	bc04      	pop	{r2}
    7c98:	4690      	mov	r8, r2
    7c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c9c:	00000400 	.word	0x00000400
    7ca0:	00004400 	.word	0x00004400
    7ca4:	0001678b 	.word	0x0001678b
    7ca8:	00018270 	.word	0x00018270
    7cac:	000183f8 	.word	0x000183f8
    7cb0:	00018280 	.word	0x00018280
    7cb4:	000166c9 	.word	0x000166c9
    7cb8:	000182c4 	.word	0x000182c4
    7cbc:	000182e0 	.word	0x000182e0
    7cc0:	00018314 	.word	0x00018314

00007cc4 <D_Nv_Init>:
{
    7cc4:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    7cc6:	4a0b      	ldr	r2, [pc, #44]	; (7cf4 <D_Nv_Init+0x30>)
    7cc8:	23ff      	movs	r3, #255	; 0xff
    7cca:	421a      	tst	r2, r3
    7ccc:	d106      	bne.n	7cdc <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    7cce:	4b0a      	ldr	r3, [pc, #40]	; (7cf8 <D_Nv_Init+0x34>)
    7cd0:	490a      	ldr	r1, [pc, #40]	; (7cfc <D_Nv_Init+0x38>)
    7cd2:	468c      	mov	ip, r1
    7cd4:	4463      	add	r3, ip
    7cd6:	4293      	cmp	r3, r2
    7cd8:	d106      	bne.n	7ce8 <D_Nv_Init+0x24>
}
    7cda:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    7cdc:	4b08      	ldr	r3, [pc, #32]	; (7d00 <D_Nv_Init+0x3c>)
    7cde:	4a09      	ldr	r2, [pc, #36]	; (7d04 <D_Nv_Init+0x40>)
    7ce0:	2159      	movs	r1, #89	; 0x59
    7ce2:	4809      	ldr	r0, [pc, #36]	; (7d08 <D_Nv_Init+0x44>)
    7ce4:	4c09      	ldr	r4, [pc, #36]	; (7d0c <D_Nv_Init+0x48>)
    7ce6:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    7ce8:	4b09      	ldr	r3, [pc, #36]	; (7d10 <D_Nv_Init+0x4c>)
    7cea:	4a06      	ldr	r2, [pc, #24]	; (7d04 <D_Nv_Init+0x40>)
    7cec:	215d      	movs	r1, #93	; 0x5d
    7cee:	4806      	ldr	r0, [pc, #24]	; (7d08 <D_Nv_Init+0x44>)
    7cf0:	4c06      	ldr	r4, [pc, #24]	; (7d0c <D_Nv_Init+0x48>)
    7cf2:	47a0      	blx	r4
    7cf4:	00000400 	.word	0x00000400
    7cf8:	00004400 	.word	0x00004400
    7cfc:	ffffc000 	.word	0xffffc000
    7d00:	00018344 	.word	0x00018344
    7d04:	000183b4 	.word	0x000183b4
    7d08:	00018280 	.word	0x00018280
    7d0c:	000166c9 	.word	0x000166c9
    7d10:	00018374 	.word	0x00018374

00007d14 <D_Nv_Read_Impl>:
{
    7d14:	b570      	push	{r4, r5, r6, lr}
    7d16:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7d18:	0344      	lsls	r4, r0, #13
    7d1a:	4813      	ldr	r0, [pc, #76]	; (7d68 <D_Nv_Read_Impl+0x54>)
    7d1c:	1808      	adds	r0, r1, r0
    7d1e:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    7d20:	4a12      	ldr	r2, [pc, #72]	; (7d6c <D_Nv_Read_Impl+0x58>)
    7d22:	1e50      	subs	r0, r2, #1
    7d24:	4284      	cmp	r4, r0
    7d26:	d80d      	bhi.n	7d44 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d28:	18e0      	adds	r0, r4, r3
    7d2a:	4282      	cmp	r2, r0
    7d2c:	d310      	bcc.n	7d50 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d2e:	18c9      	adds	r1, r1, r3
    7d30:	2280      	movs	r2, #128	; 0x80
    7d32:	0192      	lsls	r2, r2, #6
    7d34:	4291      	cmp	r1, r2
    7d36:	d811      	bhi.n	7d5c <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7d38:	001a      	movs	r2, r3
    7d3a:	0021      	movs	r1, r4
    7d3c:	0028      	movs	r0, r5
    7d3e:	4b0c      	ldr	r3, [pc, #48]	; (7d70 <D_Nv_Read_Impl+0x5c>)
    7d40:	4798      	blx	r3
}
    7d42:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7d44:	4b0b      	ldr	r3, [pc, #44]	; (7d74 <D_Nv_Read_Impl+0x60>)
    7d46:	4a0c      	ldr	r2, [pc, #48]	; (7d78 <D_Nv_Read_Impl+0x64>)
    7d48:	2172      	movs	r1, #114	; 0x72
    7d4a:	480c      	ldr	r0, [pc, #48]	; (7d7c <D_Nv_Read_Impl+0x68>)
    7d4c:	4c0c      	ldr	r4, [pc, #48]	; (7d80 <D_Nv_Read_Impl+0x6c>)
    7d4e:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d50:	4b0c      	ldr	r3, [pc, #48]	; (7d84 <D_Nv_Read_Impl+0x70>)
    7d52:	4a09      	ldr	r2, [pc, #36]	; (7d78 <D_Nv_Read_Impl+0x64>)
    7d54:	2173      	movs	r1, #115	; 0x73
    7d56:	4809      	ldr	r0, [pc, #36]	; (7d7c <D_Nv_Read_Impl+0x68>)
    7d58:	4c09      	ldr	r4, [pc, #36]	; (7d80 <D_Nv_Read_Impl+0x6c>)
    7d5a:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d5c:	4b0a      	ldr	r3, [pc, #40]	; (7d88 <D_Nv_Read_Impl+0x74>)
    7d5e:	4a06      	ldr	r2, [pc, #24]	; (7d78 <D_Nv_Read_Impl+0x64>)
    7d60:	2174      	movs	r1, #116	; 0x74
    7d62:	4806      	ldr	r0, [pc, #24]	; (7d7c <D_Nv_Read_Impl+0x68>)
    7d64:	4c06      	ldr	r4, [pc, #24]	; (7d80 <D_Nv_Read_Impl+0x6c>)
    7d66:	47a0      	blx	r4
    7d68:	00000400 	.word	0x00000400
    7d6c:	00004400 	.word	0x00004400
    7d70:	0001678b 	.word	0x0001678b
    7d74:	000182c4 	.word	0x000182c4
    7d78:	000183c0 	.word	0x000183c0
    7d7c:	00018280 	.word	0x00018280
    7d80:	000166c9 	.word	0x000166c9
    7d84:	000182e0 	.word	0x000182e0
    7d88:	00018314 	.word	0x00018314

00007d8c <D_Nv_Write_Impl>:
{
    7d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d8e:	46de      	mov	lr, fp
    7d90:	4657      	mov	r7, sl
    7d92:	464e      	mov	r6, r9
    7d94:	4645      	mov	r5, r8
    7d96:	b5e0      	push	{r5, r6, r7, lr}
    7d98:	b093      	sub	sp, #76	; 0x4c
    7d9a:	9201      	str	r2, [sp, #4]
    7d9c:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7d9e:	4c46      	ldr	r4, [pc, #280]	; (7eb8 <D_Nv_Write_Impl+0x12c>)
    7da0:	190c      	adds	r4, r1, r4
    7da2:	0340      	lsls	r0, r0, #13
    7da4:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    7da6:	2b00      	cmp	r3, #0
    7da8:	d047      	beq.n	7e3a <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    7daa:	4b44      	ldr	r3, [pc, #272]	; (7ebc <D_Nv_Write_Impl+0x130>)
    7dac:	1e5a      	subs	r2, r3, #1
    7dae:	4295      	cmp	r5, r2
    7db0:	d849      	bhi.n	7e46 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7db2:	4652      	mov	r2, sl
    7db4:	1952      	adds	r2, r2, r5
    7db6:	4293      	cmp	r3, r2
    7db8:	d34b      	bcc.n	7e52 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7dba:	46d3      	mov	fp, sl
    7dbc:	4451      	add	r1, sl
    7dbe:	2380      	movs	r3, #128	; 0x80
    7dc0:	019b      	lsls	r3, r3, #6
    7dc2:	4299      	cmp	r1, r3
    7dc4:	d84b      	bhi.n	7e5e <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    7dc6:	4b3e      	ldr	r3, [pc, #248]	; (7ec0 <D_Nv_Write_Impl+0x134>)
    7dc8:	681b      	ldr	r3, [r3, #0]
    7dca:	2b00      	cmp	r3, #0
    7dcc:	d000      	beq.n	7dd0 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    7dce:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    7dd0:	273f      	movs	r7, #63	; 0x3f
    7dd2:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    7dd4:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    7dd6:	2640      	movs	r6, #64	; 0x40
    7dd8:	1bf6      	subs	r6, r6, r7
    7dda:	455e      	cmp	r6, fp
    7ddc:	dd00      	ble.n	7de0 <D_Nv_Write_Impl+0x54>
    7dde:	4656      	mov	r6, sl
    7de0:	b2b3      	uxth	r3, r6
    7de2:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7de4:	2240      	movs	r2, #64	; 0x40
    7de6:	21ff      	movs	r1, #255	; 0xff
    7de8:	a802      	add	r0, sp, #8
    7dea:	4b36      	ldr	r3, [pc, #216]	; (7ec4 <D_Nv_Write_Impl+0x138>)
    7dec:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7dee:	003b      	movs	r3, r7
    7df0:	aa02      	add	r2, sp, #8
    7df2:	4694      	mov	ip, r2
    7df4:	4463      	add	r3, ip
    7df6:	9300      	str	r3, [sp, #0]
    7df8:	0436      	lsls	r6, r6, #16
    7dfa:	0c37      	lsrs	r7, r6, #16
    7dfc:	003a      	movs	r2, r7
    7dfe:	9901      	ldr	r1, [sp, #4]
    7e00:	0018      	movs	r0, r3
    7e02:	4b31      	ldr	r3, [pc, #196]	; (7ec8 <D_Nv_Write_Impl+0x13c>)
    7e04:	4798      	blx	r3
	cpu_irq_enter_critical();
    7e06:	4b31      	ldr	r3, [pc, #196]	; (7ecc <D_Nv_Write_Impl+0x140>)
    7e08:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    7e0a:	4e31      	ldr	r6, [pc, #196]	; (7ed0 <D_Nv_Write_Impl+0x144>)
    7e0c:	2240      	movs	r2, #64	; 0x40
    7e0e:	a902      	add	r1, sp, #8
    7e10:	0020      	movs	r0, r4
    7e12:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    7e14:	2805      	cmp	r0, #5
    7e16:	d0f9      	beq.n	7e0c <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    7e18:	4b2e      	ldr	r3, [pc, #184]	; (7ed4 <D_Nv_Write_Impl+0x148>)
    7e1a:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    7e1c:	4653      	mov	r3, sl
    7e1e:	465a      	mov	r2, fp
    7e20:	1a9e      	subs	r6, r3, r2
    7e22:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    7e24:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    7e26:	9b01      	ldr	r3, [sp, #4]
    7e28:	4699      	mov	r9, r3
    7e2a:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7e2c:	2e00      	cmp	r6, #0
    7e2e:	d03b      	beq.n	7ea8 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7e30:	4b24      	ldr	r3, [pc, #144]	; (7ec4 <D_Nv_Write_Impl+0x138>)
    7e32:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7e34:	4b24      	ldr	r3, [pc, #144]	; (7ec8 <D_Nv_Write_Impl+0x13c>)
    7e36:	4698      	mov	r8, r3
    7e38:	e031      	b.n	7e9e <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    7e3a:	4b27      	ldr	r3, [pc, #156]	; (7ed8 <D_Nv_Write_Impl+0x14c>)
    7e3c:	4a27      	ldr	r2, [pc, #156]	; (7edc <D_Nv_Write_Impl+0x150>)
    7e3e:	218a      	movs	r1, #138	; 0x8a
    7e40:	4827      	ldr	r0, [pc, #156]	; (7ee0 <D_Nv_Write_Impl+0x154>)
    7e42:	4c28      	ldr	r4, [pc, #160]	; (7ee4 <D_Nv_Write_Impl+0x158>)
    7e44:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7e46:	4b28      	ldr	r3, [pc, #160]	; (7ee8 <D_Nv_Write_Impl+0x15c>)
    7e48:	4a24      	ldr	r2, [pc, #144]	; (7edc <D_Nv_Write_Impl+0x150>)
    7e4a:	218b      	movs	r1, #139	; 0x8b
    7e4c:	4824      	ldr	r0, [pc, #144]	; (7ee0 <D_Nv_Write_Impl+0x154>)
    7e4e:	4c25      	ldr	r4, [pc, #148]	; (7ee4 <D_Nv_Write_Impl+0x158>)
    7e50:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7e52:	4b26      	ldr	r3, [pc, #152]	; (7eec <D_Nv_Write_Impl+0x160>)
    7e54:	4a21      	ldr	r2, [pc, #132]	; (7edc <D_Nv_Write_Impl+0x150>)
    7e56:	218c      	movs	r1, #140	; 0x8c
    7e58:	4821      	ldr	r0, [pc, #132]	; (7ee0 <D_Nv_Write_Impl+0x154>)
    7e5a:	4c22      	ldr	r4, [pc, #136]	; (7ee4 <D_Nv_Write_Impl+0x158>)
    7e5c:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7e5e:	4b24      	ldr	r3, [pc, #144]	; (7ef0 <D_Nv_Write_Impl+0x164>)
    7e60:	4a1e      	ldr	r2, [pc, #120]	; (7edc <D_Nv_Write_Impl+0x150>)
    7e62:	218d      	movs	r1, #141	; 0x8d
    7e64:	481e      	ldr	r0, [pc, #120]	; (7ee0 <D_Nv_Write_Impl+0x154>)
    7e66:	4c1f      	ldr	r4, [pc, #124]	; (7ee4 <D_Nv_Write_Impl+0x158>)
    7e68:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7e6a:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7e6c:	2240      	movs	r2, #64	; 0x40
    7e6e:	21ff      	movs	r1, #255	; 0xff
    7e70:	a802      	add	r0, sp, #8
    7e72:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7e74:	003a      	movs	r2, r7
    7e76:	4649      	mov	r1, r9
    7e78:	9800      	ldr	r0, [sp, #0]
    7e7a:	47c0      	blx	r8
	cpu_irq_enter_critical();
    7e7c:	4b13      	ldr	r3, [pc, #76]	; (7ecc <D_Nv_Write_Impl+0x140>)
    7e7e:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    7e80:	4d13      	ldr	r5, [pc, #76]	; (7ed0 <D_Nv_Write_Impl+0x144>)
    7e82:	2240      	movs	r2, #64	; 0x40
    7e84:	a902      	add	r1, sp, #8
    7e86:	0020      	movs	r0, r4
    7e88:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    7e8a:	2805      	cmp	r0, #5
    7e8c:	d0f9      	beq.n	7e82 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    7e8e:	4b11      	ldr	r3, [pc, #68]	; (7ed4 <D_Nv_Write_Impl+0x148>)
    7e90:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    7e92:	1bf6      	subs	r6, r6, r7
    7e94:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    7e96:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    7e98:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7e9a:	2e00      	cmp	r6, #0
    7e9c:	d004      	beq.n	7ea8 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7e9e:	1c33      	adds	r3, r6, #0
    7ea0:	2e40      	cmp	r6, #64	; 0x40
    7ea2:	d9e2      	bls.n	7e6a <D_Nv_Write_Impl+0xde>
    7ea4:	2340      	movs	r3, #64	; 0x40
    7ea6:	e7e0      	b.n	7e6a <D_Nv_Write_Impl+0xde>
}
    7ea8:	b013      	add	sp, #76	; 0x4c
    7eaa:	bc3c      	pop	{r2, r3, r4, r5}
    7eac:	4690      	mov	r8, r2
    7eae:	4699      	mov	r9, r3
    7eb0:	46a2      	mov	sl, r4
    7eb2:	46ab      	mov	fp, r5
    7eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7eb6:	46c0      	nop			; (mov r8, r8)
    7eb8:	00000400 	.word	0x00000400
    7ebc:	00004400 	.word	0x00004400
    7ec0:	20000108 	.word	0x20000108
    7ec4:	0001679d 	.word	0x0001679d
    7ec8:	0001678b 	.word	0x0001678b
    7ecc:	00004569 	.word	0x00004569
    7ed0:	00004b41 	.word	0x00004b41
    7ed4:	000045a9 	.word	0x000045a9
    7ed8:	00018270 	.word	0x00018270
    7edc:	000183d0 	.word	0x000183d0
    7ee0:	00018280 	.word	0x00018280
    7ee4:	000166c9 	.word	0x000166c9
    7ee8:	000182c4 	.word	0x000182c4
    7eec:	000182e0 	.word	0x000182e0
    7ef0:	00018314 	.word	0x00018314

00007ef4 <D_Nv_EraseSector_Impl>:
{
    7ef4:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    7ef6:	0344      	lsls	r4, r0, #13
    7ef8:	480c      	ldr	r0, [pc, #48]	; (7f2c <D_Nv_EraseSector_Impl+0x38>)
    7efa:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    7efc:	23ff      	movs	r3, #255	; 0xff
    7efe:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    7f00:	4b0b      	ldr	r3, [pc, #44]	; (7f30 <D_Nv_EraseSector_Impl+0x3c>)
    7f02:	3b01      	subs	r3, #1
    7f04:	2280      	movs	r2, #128	; 0x80
    7f06:	0192      	lsls	r2, r2, #6
    7f08:	18a6      	adds	r6, r4, r2
    7f0a:	429c      	cmp	r4, r3
    7f0c:	d807      	bhi.n	7f1e <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    7f0e:	4d09      	ldr	r5, [pc, #36]	; (7f34 <D_Nv_EraseSector_Impl+0x40>)
    7f10:	0020      	movs	r0, r4
    7f12:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    7f14:	3401      	adds	r4, #1
    7f16:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    7f18:	42b4      	cmp	r4, r6
    7f1a:	d1f9      	bne.n	7f10 <D_Nv_EraseSector_Impl+0x1c>
}
    7f1c:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7f1e:	4b06      	ldr	r3, [pc, #24]	; (7f38 <D_Nv_EraseSector_Impl+0x44>)
    7f20:	4a06      	ldr	r2, [pc, #24]	; (7f3c <D_Nv_EraseSector_Impl+0x48>)
    7f22:	21c2      	movs	r1, #194	; 0xc2
    7f24:	4806      	ldr	r0, [pc, #24]	; (7f40 <D_Nv_EraseSector_Impl+0x4c>)
    7f26:	4c07      	ldr	r4, [pc, #28]	; (7f44 <D_Nv_EraseSector_Impl+0x50>)
    7f28:	47a0      	blx	r4
    7f2a:	46c0      	nop			; (mov r8, r8)
    7f2c:	00000400 	.word	0x00000400
    7f30:	00004400 	.word	0x00004400
    7f34:	00004c19 	.word	0x00004c19
    7f38:	000182c4 	.word	0x000182c4
    7f3c:	000183e0 	.word	0x000183e0
    7f40:	00018280 	.word	0x00018280
    7f44:	000166c9 	.word	0x000166c9

00007f48 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    7f48:	b510      	push	{r4, lr}
    7f4a:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    7f4c:	2200      	movs	r2, #0
    7f4e:	4c01      	ldr	r4, [pc, #4]	; (7f54 <D_Nv_IsEmpty_Impl+0xc>)
    7f50:	47a0      	blx	r4
}
    7f52:	bd10      	pop	{r4, pc}
    7f54:	00007be9 	.word	0x00007be9

00007f58 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7f58:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    7f5a:	4c01      	ldr	r4, [pc, #4]	; (7f60 <D_Nv_IsEqual_Impl+0x8>)
    7f5c:	47a0      	blx	r4
}
    7f5e:	bd10      	pop	{r4, pc}
    7f60:	00007be9 	.word	0x00007be9

00007f64 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    7f64:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    7f66:	4b05      	ldr	r3, [pc, #20]	; (7f7c <PowerSupplyTooLow+0x18>)
    7f68:	681b      	ldr	r3, [r3, #0]
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	d004      	beq.n	7f78 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    7f6e:	4798      	blx	r3
    7f70:	2301      	movs	r3, #1
    7f72:	4058      	eors	r0, r3
    7f74:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    7f76:	bd10      	pop	{r4, pc}
    bool result = false;
    7f78:	2000      	movs	r0, #0
    7f7a:	e7fc      	b.n	7f76 <PowerSupplyTooLow+0x12>
    7f7c:	2000027c 	.word	0x2000027c

00007f80 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    7f80:	2901      	cmp	r1, #1
    7f82:	d009      	beq.n	7f98 <UpdateSectorHead+0x18>
    7f84:	2900      	cmp	r1, #0
    7f86:	d002      	beq.n	7f8e <UpdateSectorHead+0xe>
    7f88:	2902      	cmp	r1, #2
    7f8a:	d00d      	beq.n	7fa8 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    7f8c:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    7f8e:	4b0a      	ldr	r3, [pc, #40]	; (7fb8 <UpdateSectorHead+0x38>)
    7f90:	881a      	ldrh	r2, [r3, #0]
    7f92:	1880      	adds	r0, r0, r2
    7f94:	8018      	strh	r0, [r3, #0]
           break;
    7f96:	e7f9      	b.n	7f8c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    7f98:	4a07      	ldr	r2, [pc, #28]	; (7fb8 <UpdateSectorHead+0x38>)
    7f9a:	8813      	ldrh	r3, [r2, #0]
    7f9c:	330f      	adds	r3, #15
    7f9e:	18c0      	adds	r0, r0, r3
    7fa0:	230f      	movs	r3, #15
    7fa2:	4398      	bics	r0, r3
    7fa4:	8010      	strh	r0, [r2, #0]
           break;
    7fa6:	e7f1      	b.n	7f8c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
<<<<<<< Updated upstream
    8034:	4a03      	ldr	r2, [pc, #12]	; (8044 <UpdateSectorHead+0x38>)
=======
00007c84 <CompareData>:
    7c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c86:	46c6      	mov	lr, r8
    7c88:	b500      	push	{lr}
    7c8a:	b084      	sub	sp, #16
    7c8c:	0014      	movs	r4, r2
    7c8e:	001f      	movs	r7, r3
    7c90:	4b29      	ldr	r3, [pc, #164]	; (7d38 <CompareData+0xb4>)
    7c92:	18cb      	adds	r3, r1, r3
    7c94:	0340      	lsls	r0, r0, #13
    7c96:	181d      	adds	r5, r3, r0
    7c98:	2f00      	cmp	r7, #0
    7c9a:	d01a      	beq.n	7cd2 <CompareData+0x4e>
    7c9c:	4b27      	ldr	r3, [pc, #156]	; (7d3c <CompareData+0xb8>)
    7c9e:	1e5a      	subs	r2, r3, #1
    7ca0:	4295      	cmp	r5, r2
    7ca2:	d81c      	bhi.n	7cde <CompareData+0x5a>
    7ca4:	197a      	adds	r2, r7, r5
    7ca6:	4293      	cmp	r3, r2
    7ca8:	d31f      	bcc.n	7cea <CompareData+0x66>
    7caa:	19c9      	adds	r1, r1, r7
    7cac:	2380      	movs	r3, #128	; 0x80
    7cae:	019b      	lsls	r3, r3, #6
    7cb0:	4299      	cmp	r1, r3
    7cb2:	d820      	bhi.n	7cf6 <CompareData+0x72>
    7cb4:	4b22      	ldr	r3, [pc, #136]	; (7d40 <CompareData+0xbc>)
    7cb6:	4698      	mov	r8, r3
    7cb8:	1c3e      	adds	r6, r7, #0
    7cba:	2f10      	cmp	r7, #16
    7cbc:	d900      	bls.n	7cc0 <CompareData+0x3c>
    7cbe:	2610      	movs	r6, #16
    7cc0:	b2b6      	uxth	r6, r6
    7cc2:	0032      	movs	r2, r6
    7cc4:	0029      	movs	r1, r5
    7cc6:	4668      	mov	r0, sp
    7cc8:	47c0      	blx	r8
    7cca:	2e00      	cmp	r6, #0
    7ccc:	d028      	beq.n	7d20 <CompareData+0x9c>
    7cce:	2300      	movs	r3, #0
    7cd0:	e01f      	b.n	7d12 <CompareData+0x8e>
    7cd2:	4b1c      	ldr	r3, [pc, #112]	; (7d44 <CompareData+0xc0>)
    7cd4:	4a1c      	ldr	r2, [pc, #112]	; (7d48 <CompareData+0xc4>)
    7cd6:	21d9      	movs	r1, #217	; 0xd9
    7cd8:	481c      	ldr	r0, [pc, #112]	; (7d4c <CompareData+0xc8>)
    7cda:	4c1d      	ldr	r4, [pc, #116]	; (7d50 <CompareData+0xcc>)
    7cdc:	47a0      	blx	r4
    7cde:	4b1d      	ldr	r3, [pc, #116]	; (7d54 <CompareData+0xd0>)
    7ce0:	4a19      	ldr	r2, [pc, #100]	; (7d48 <CompareData+0xc4>)
    7ce2:	21da      	movs	r1, #218	; 0xda
    7ce4:	4819      	ldr	r0, [pc, #100]	; (7d4c <CompareData+0xc8>)
    7ce6:	4c1a      	ldr	r4, [pc, #104]	; (7d50 <CompareData+0xcc>)
    7ce8:	47a0      	blx	r4
    7cea:	4b1b      	ldr	r3, [pc, #108]	; (7d58 <CompareData+0xd4>)
    7cec:	4a16      	ldr	r2, [pc, #88]	; (7d48 <CompareData+0xc4>)
    7cee:	21db      	movs	r1, #219	; 0xdb
    7cf0:	4816      	ldr	r0, [pc, #88]	; (7d4c <CompareData+0xc8>)
    7cf2:	4c17      	ldr	r4, [pc, #92]	; (7d50 <CompareData+0xcc>)
    7cf4:	47a0      	blx	r4
    7cf6:	4b19      	ldr	r3, [pc, #100]	; (7d5c <CompareData+0xd8>)
    7cf8:	4a13      	ldr	r2, [pc, #76]	; (7d48 <CompareData+0xc4>)
    7cfa:	21dc      	movs	r1, #220	; 0xdc
    7cfc:	4813      	ldr	r0, [pc, #76]	; (7d4c <CompareData+0xc8>)
    7cfe:	4c14      	ldr	r4, [pc, #80]	; (7d50 <CompareData+0xcc>)
    7d00:	47a0      	blx	r4
    7d02:	21ff      	movs	r1, #255	; 0xff
    7d04:	4291      	cmp	r1, r2
    7d06:	d112      	bne.n	7d2e <CompareData+0xaa>
    7d08:	3301      	adds	r3, #1
    7d0a:	b2db      	uxtb	r3, r3
    7d0c:	b29a      	uxth	r2, r3
    7d0e:	4296      	cmp	r6, r2
    7d10:	d906      	bls.n	7d20 <CompareData+0x9c>
    7d12:	466a      	mov	r2, sp
    7d14:	5cd2      	ldrb	r2, [r2, r3]
    7d16:	2c00      	cmp	r4, #0
    7d18:	d0f3      	beq.n	7d02 <CompareData+0x7e>
    7d1a:	7821      	ldrb	r1, [r4, #0]
    7d1c:	3401      	adds	r4, #1
    7d1e:	e7f1      	b.n	7d04 <CompareData+0x80>
    7d20:	1bbf      	subs	r7, r7, r6
    7d22:	b2bf      	uxth	r7, r7
    7d24:	19ad      	adds	r5, r5, r6
    7d26:	2f00      	cmp	r7, #0
    7d28:	d1c6      	bne.n	7cb8 <CompareData+0x34>
    7d2a:	2001      	movs	r0, #1
    7d2c:	e000      	b.n	7d30 <CompareData+0xac>
    7d2e:	2000      	movs	r0, #0
    7d30:	b004      	add	sp, #16
    7d32:	bc04      	pop	{r2}
    7d34:	4690      	mov	r8, r2
    7d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d38:	00000400 	.word	0x00000400
    7d3c:	00004400 	.word	0x00004400
    7d40:	00016837 	.word	0x00016837
    7d44:	00018454 	.word	0x00018454
    7d48:	000185dc 	.word	0x000185dc
    7d4c:	00018464 	.word	0x00018464
    7d50:	00016775 	.word	0x00016775
    7d54:	000184a8 	.word	0x000184a8
    7d58:	000184c4 	.word	0x000184c4
    7d5c:	000184f8 	.word	0x000184f8

00007d60 <D_Nv_Init>:
    7d60:	b510      	push	{r4, lr}
    7d62:	4a0b      	ldr	r2, [pc, #44]	; (7d90 <D_Nv_Init+0x30>)
    7d64:	23ff      	movs	r3, #255	; 0xff
    7d66:	421a      	tst	r2, r3
    7d68:	d106      	bne.n	7d78 <D_Nv_Init+0x18>
    7d6a:	4b0a      	ldr	r3, [pc, #40]	; (7d94 <D_Nv_Init+0x34>)
    7d6c:	490a      	ldr	r1, [pc, #40]	; (7d98 <D_Nv_Init+0x38>)
    7d6e:	468c      	mov	ip, r1
    7d70:	4463      	add	r3, ip
    7d72:	4293      	cmp	r3, r2
    7d74:	d106      	bne.n	7d84 <D_Nv_Init+0x24>
    7d76:	bd10      	pop	{r4, pc}
    7d78:	4b08      	ldr	r3, [pc, #32]	; (7d9c <D_Nv_Init+0x3c>)
    7d7a:	4a09      	ldr	r2, [pc, #36]	; (7da0 <D_Nv_Init+0x40>)
    7d7c:	2159      	movs	r1, #89	; 0x59
    7d7e:	4809      	ldr	r0, [pc, #36]	; (7da4 <D_Nv_Init+0x44>)
    7d80:	4c09      	ldr	r4, [pc, #36]	; (7da8 <D_Nv_Init+0x48>)
    7d82:	47a0      	blx	r4
    7d84:	4b09      	ldr	r3, [pc, #36]	; (7dac <D_Nv_Init+0x4c>)
    7d86:	4a06      	ldr	r2, [pc, #24]	; (7da0 <D_Nv_Init+0x40>)
    7d88:	215d      	movs	r1, #93	; 0x5d
    7d8a:	4806      	ldr	r0, [pc, #24]	; (7da4 <D_Nv_Init+0x44>)
    7d8c:	4c06      	ldr	r4, [pc, #24]	; (7da8 <D_Nv_Init+0x48>)
    7d8e:	47a0      	blx	r4
    7d90:	00000400 	.word	0x00000400
    7d94:	00004400 	.word	0x00004400
    7d98:	ffffc000 	.word	0xffffc000
    7d9c:	00018528 	.word	0x00018528
    7da0:	00018598 	.word	0x00018598
    7da4:	00018464 	.word	0x00018464
    7da8:	00016775 	.word	0x00016775
    7dac:	00018558 	.word	0x00018558

00007db0 <D_Nv_Read_Impl>:
    7db0:	b570      	push	{r4, r5, r6, lr}
    7db2:	0015      	movs	r5, r2
    7db4:	0344      	lsls	r4, r0, #13
    7db6:	4813      	ldr	r0, [pc, #76]	; (7e04 <D_Nv_Read_Impl+0x54>)
    7db8:	1808      	adds	r0, r1, r0
    7dba:	1824      	adds	r4, r4, r0
    7dbc:	4a12      	ldr	r2, [pc, #72]	; (7e08 <D_Nv_Read_Impl+0x58>)
    7dbe:	1e50      	subs	r0, r2, #1
    7dc0:	4284      	cmp	r4, r0
    7dc2:	d80d      	bhi.n	7de0 <D_Nv_Read_Impl+0x30>
    7dc4:	18e0      	adds	r0, r4, r3
    7dc6:	4282      	cmp	r2, r0
    7dc8:	d310      	bcc.n	7dec <D_Nv_Read_Impl+0x3c>
    7dca:	18c9      	adds	r1, r1, r3
    7dcc:	2280      	movs	r2, #128	; 0x80
    7dce:	0192      	lsls	r2, r2, #6
    7dd0:	4291      	cmp	r1, r2
    7dd2:	d811      	bhi.n	7df8 <D_Nv_Read_Impl+0x48>
    7dd4:	001a      	movs	r2, r3
    7dd6:	0021      	movs	r1, r4
    7dd8:	0028      	movs	r0, r5
    7dda:	4b0c      	ldr	r3, [pc, #48]	; (7e0c <D_Nv_Read_Impl+0x5c>)
    7ddc:	4798      	blx	r3
    7dde:	bd70      	pop	{r4, r5, r6, pc}
    7de0:	4b0b      	ldr	r3, [pc, #44]	; (7e10 <D_Nv_Read_Impl+0x60>)
    7de2:	4a0c      	ldr	r2, [pc, #48]	; (7e14 <D_Nv_Read_Impl+0x64>)
    7de4:	2172      	movs	r1, #114	; 0x72
    7de6:	480c      	ldr	r0, [pc, #48]	; (7e18 <D_Nv_Read_Impl+0x68>)
    7de8:	4c0c      	ldr	r4, [pc, #48]	; (7e1c <D_Nv_Read_Impl+0x6c>)
    7dea:	47a0      	blx	r4
    7dec:	4b0c      	ldr	r3, [pc, #48]	; (7e20 <D_Nv_Read_Impl+0x70>)
    7dee:	4a09      	ldr	r2, [pc, #36]	; (7e14 <D_Nv_Read_Impl+0x64>)
    7df0:	2173      	movs	r1, #115	; 0x73
    7df2:	4809      	ldr	r0, [pc, #36]	; (7e18 <D_Nv_Read_Impl+0x68>)
    7df4:	4c09      	ldr	r4, [pc, #36]	; (7e1c <D_Nv_Read_Impl+0x6c>)
    7df6:	47a0      	blx	r4
    7df8:	4b0a      	ldr	r3, [pc, #40]	; (7e24 <D_Nv_Read_Impl+0x74>)
    7dfa:	4a06      	ldr	r2, [pc, #24]	; (7e14 <D_Nv_Read_Impl+0x64>)
    7dfc:	2174      	movs	r1, #116	; 0x74
    7dfe:	4806      	ldr	r0, [pc, #24]	; (7e18 <D_Nv_Read_Impl+0x68>)
    7e00:	4c06      	ldr	r4, [pc, #24]	; (7e1c <D_Nv_Read_Impl+0x6c>)
    7e02:	47a0      	blx	r4
    7e04:	00000400 	.word	0x00000400
    7e08:	00004400 	.word	0x00004400
    7e0c:	00016837 	.word	0x00016837
    7e10:	000184a8 	.word	0x000184a8
    7e14:	000185a4 	.word	0x000185a4
    7e18:	00018464 	.word	0x00018464
    7e1c:	00016775 	.word	0x00016775
    7e20:	000184c4 	.word	0x000184c4
    7e24:	000184f8 	.word	0x000184f8

00007e28 <D_Nv_Write_Impl>:
    7e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e2a:	46de      	mov	lr, fp
    7e2c:	4657      	mov	r7, sl
    7e2e:	464e      	mov	r6, r9
    7e30:	4645      	mov	r5, r8
    7e32:	b5e0      	push	{r5, r6, r7, lr}
    7e34:	b093      	sub	sp, #76	; 0x4c
    7e36:	9201      	str	r2, [sp, #4]
    7e38:	469a      	mov	sl, r3
    7e3a:	4c46      	ldr	r4, [pc, #280]	; (7f54 <D_Nv_Write_Impl+0x12c>)
    7e3c:	190c      	adds	r4, r1, r4
    7e3e:	0340      	lsls	r0, r0, #13
    7e40:	1825      	adds	r5, r4, r0
    7e42:	2b00      	cmp	r3, #0
    7e44:	d047      	beq.n	7ed6 <D_Nv_Write_Impl+0xae>
    7e46:	4b44      	ldr	r3, [pc, #272]	; (7f58 <D_Nv_Write_Impl+0x130>)
    7e48:	1e5a      	subs	r2, r3, #1
    7e4a:	4295      	cmp	r5, r2
    7e4c:	d849      	bhi.n	7ee2 <D_Nv_Write_Impl+0xba>
    7e4e:	4652      	mov	r2, sl
    7e50:	1952      	adds	r2, r2, r5
    7e52:	4293      	cmp	r3, r2
    7e54:	d34b      	bcc.n	7eee <D_Nv_Write_Impl+0xc6>
    7e56:	46d3      	mov	fp, sl
    7e58:	4451      	add	r1, sl
    7e5a:	2380      	movs	r3, #128	; 0x80
    7e5c:	019b      	lsls	r3, r3, #6
    7e5e:	4299      	cmp	r1, r3
    7e60:	d84b      	bhi.n	7efa <D_Nv_Write_Impl+0xd2>
    7e62:	4b3e      	ldr	r3, [pc, #248]	; (7f5c <D_Nv_Write_Impl+0x134>)
    7e64:	681b      	ldr	r3, [r3, #0]
    7e66:	2b00      	cmp	r3, #0
    7e68:	d000      	beq.n	7e6c <D_Nv_Write_Impl+0x44>
    7e6a:	4798      	blx	r3
    7e6c:	273f      	movs	r7, #63	; 0x3f
    7e6e:	402f      	ands	r7, r5
    7e70:	1bec      	subs	r4, r5, r7
    7e72:	2640      	movs	r6, #64	; 0x40
    7e74:	1bf6      	subs	r6, r6, r7
    7e76:	455e      	cmp	r6, fp
    7e78:	dd00      	ble.n	7e7c <D_Nv_Write_Impl+0x54>
    7e7a:	4656      	mov	r6, sl
    7e7c:	b2b3      	uxth	r3, r6
    7e7e:	469b      	mov	fp, r3
    7e80:	2240      	movs	r2, #64	; 0x40
    7e82:	21ff      	movs	r1, #255	; 0xff
    7e84:	a802      	add	r0, sp, #8
    7e86:	4b36      	ldr	r3, [pc, #216]	; (7f60 <D_Nv_Write_Impl+0x138>)
    7e88:	4798      	blx	r3
    7e8a:	003b      	movs	r3, r7
    7e8c:	aa02      	add	r2, sp, #8
    7e8e:	4694      	mov	ip, r2
    7e90:	4463      	add	r3, ip
    7e92:	9300      	str	r3, [sp, #0]
    7e94:	0436      	lsls	r6, r6, #16
    7e96:	0c37      	lsrs	r7, r6, #16
    7e98:	003a      	movs	r2, r7
    7e9a:	9901      	ldr	r1, [sp, #4]
    7e9c:	0018      	movs	r0, r3
    7e9e:	4b31      	ldr	r3, [pc, #196]	; (7f64 <D_Nv_Write_Impl+0x13c>)
    7ea0:	4798      	blx	r3
    7ea2:	4b31      	ldr	r3, [pc, #196]	; (7f68 <D_Nv_Write_Impl+0x140>)
    7ea4:	4798      	blx	r3
    7ea6:	4e31      	ldr	r6, [pc, #196]	; (7f6c <D_Nv_Write_Impl+0x144>)
    7ea8:	2240      	movs	r2, #64	; 0x40
    7eaa:	a902      	add	r1, sp, #8
    7eac:	0020      	movs	r0, r4
    7eae:	47b0      	blx	r6
    7eb0:	2805      	cmp	r0, #5
    7eb2:	d0f9      	beq.n	7ea8 <D_Nv_Write_Impl+0x80>
    7eb4:	4b2e      	ldr	r3, [pc, #184]	; (7f70 <D_Nv_Write_Impl+0x148>)
    7eb6:	4798      	blx	r3
    7eb8:	4653      	mov	r3, sl
    7eba:	465a      	mov	r2, fp
    7ebc:	1a9e      	subs	r6, r3, r2
    7ebe:	b2b6      	uxth	r6, r6
    7ec0:	19ec      	adds	r4, r5, r7
    7ec2:	9b01      	ldr	r3, [sp, #4]
    7ec4:	4699      	mov	r9, r3
    7ec6:	44b9      	add	r9, r7
    7ec8:	2e00      	cmp	r6, #0
    7eca:	d03b      	beq.n	7f44 <D_Nv_Write_Impl+0x11c>
    7ecc:	4b24      	ldr	r3, [pc, #144]	; (7f60 <D_Nv_Write_Impl+0x138>)
    7ece:	469b      	mov	fp, r3
    7ed0:	4b24      	ldr	r3, [pc, #144]	; (7f64 <D_Nv_Write_Impl+0x13c>)
    7ed2:	4698      	mov	r8, r3
    7ed4:	e031      	b.n	7f3a <D_Nv_Write_Impl+0x112>
    7ed6:	4b27      	ldr	r3, [pc, #156]	; (7f74 <D_Nv_Write_Impl+0x14c>)
    7ed8:	4a27      	ldr	r2, [pc, #156]	; (7f78 <D_Nv_Write_Impl+0x150>)
    7eda:	218a      	movs	r1, #138	; 0x8a
    7edc:	4827      	ldr	r0, [pc, #156]	; (7f7c <D_Nv_Write_Impl+0x154>)
    7ede:	4c28      	ldr	r4, [pc, #160]	; (7f80 <D_Nv_Write_Impl+0x158>)
    7ee0:	47a0      	blx	r4
    7ee2:	4b28      	ldr	r3, [pc, #160]	; (7f84 <D_Nv_Write_Impl+0x15c>)
    7ee4:	4a24      	ldr	r2, [pc, #144]	; (7f78 <D_Nv_Write_Impl+0x150>)
    7ee6:	218b      	movs	r1, #139	; 0x8b
    7ee8:	4824      	ldr	r0, [pc, #144]	; (7f7c <D_Nv_Write_Impl+0x154>)
    7eea:	4c25      	ldr	r4, [pc, #148]	; (7f80 <D_Nv_Write_Impl+0x158>)
    7eec:	47a0      	blx	r4
    7eee:	4b26      	ldr	r3, [pc, #152]	; (7f88 <D_Nv_Write_Impl+0x160>)
    7ef0:	4a21      	ldr	r2, [pc, #132]	; (7f78 <D_Nv_Write_Impl+0x150>)
    7ef2:	218c      	movs	r1, #140	; 0x8c
    7ef4:	4821      	ldr	r0, [pc, #132]	; (7f7c <D_Nv_Write_Impl+0x154>)
    7ef6:	4c22      	ldr	r4, [pc, #136]	; (7f80 <D_Nv_Write_Impl+0x158>)
    7ef8:	47a0      	blx	r4
    7efa:	4b24      	ldr	r3, [pc, #144]	; (7f8c <D_Nv_Write_Impl+0x164>)
    7efc:	4a1e      	ldr	r2, [pc, #120]	; (7f78 <D_Nv_Write_Impl+0x150>)
    7efe:	218d      	movs	r1, #141	; 0x8d
    7f00:	481e      	ldr	r0, [pc, #120]	; (7f7c <D_Nv_Write_Impl+0x154>)
    7f02:	4c1f      	ldr	r4, [pc, #124]	; (7f80 <D_Nv_Write_Impl+0x158>)
    7f04:	47a0      	blx	r4
    7f06:	b29f      	uxth	r7, r3
    7f08:	2240      	movs	r2, #64	; 0x40
    7f0a:	21ff      	movs	r1, #255	; 0xff
    7f0c:	a802      	add	r0, sp, #8
    7f0e:	47d8      	blx	fp
    7f10:	003a      	movs	r2, r7
    7f12:	4649      	mov	r1, r9
    7f14:	9800      	ldr	r0, [sp, #0]
    7f16:	47c0      	blx	r8
    7f18:	4b13      	ldr	r3, [pc, #76]	; (7f68 <D_Nv_Write_Impl+0x140>)
    7f1a:	4798      	blx	r3
    7f1c:	4d13      	ldr	r5, [pc, #76]	; (7f6c <D_Nv_Write_Impl+0x144>)
    7f1e:	2240      	movs	r2, #64	; 0x40
    7f20:	a902      	add	r1, sp, #8
    7f22:	0020      	movs	r0, r4
    7f24:	47a8      	blx	r5
    7f26:	2805      	cmp	r0, #5
    7f28:	d0f9      	beq.n	7f1e <D_Nv_Write_Impl+0xf6>
    7f2a:	4b11      	ldr	r3, [pc, #68]	; (7f70 <D_Nv_Write_Impl+0x148>)
    7f2c:	4798      	blx	r3
    7f2e:	1bf6      	subs	r6, r6, r7
    7f30:	b2b6      	uxth	r6, r6
    7f32:	19e4      	adds	r4, r4, r7
    7f34:	44b9      	add	r9, r7
    7f36:	2e00      	cmp	r6, #0
    7f38:	d004      	beq.n	7f44 <D_Nv_Write_Impl+0x11c>
    7f3a:	1c33      	adds	r3, r6, #0
    7f3c:	2e40      	cmp	r6, #64	; 0x40
    7f3e:	d9e2      	bls.n	7f06 <D_Nv_Write_Impl+0xde>
    7f40:	2340      	movs	r3, #64	; 0x40
    7f42:	e7e0      	b.n	7f06 <D_Nv_Write_Impl+0xde>
    7f44:	b013      	add	sp, #76	; 0x4c
    7f46:	bc3c      	pop	{r2, r3, r4, r5}
    7f48:	4690      	mov	r8, r2
    7f4a:	4699      	mov	r9, r3
    7f4c:	46a2      	mov	sl, r4
    7f4e:	46ab      	mov	fp, r5
    7f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	00000400 	.word	0x00000400
    7f58:	00004400 	.word	0x00004400
    7f5c:	20000108 	.word	0x20000108
    7f60:	00016849 	.word	0x00016849
    7f64:	00016837 	.word	0x00016837
    7f68:	00004569 	.word	0x00004569
    7f6c:	00004b41 	.word	0x00004b41
    7f70:	000045a9 	.word	0x000045a9
    7f74:	00018454 	.word	0x00018454
    7f78:	000185b4 	.word	0x000185b4
    7f7c:	00018464 	.word	0x00018464
    7f80:	00016775 	.word	0x00016775
    7f84:	000184a8 	.word	0x000184a8
    7f88:	000184c4 	.word	0x000184c4
    7f8c:	000184f8 	.word	0x000184f8

00007f90 <D_Nv_EraseSector_Impl>:
    7f90:	b570      	push	{r4, r5, r6, lr}
    7f92:	0344      	lsls	r4, r0, #13
    7f94:	480c      	ldr	r0, [pc, #48]	; (7fc8 <D_Nv_EraseSector_Impl+0x38>)
    7f96:	1824      	adds	r4, r4, r0
    7f98:	23ff      	movs	r3, #255	; 0xff
    7f9a:	439c      	bics	r4, r3
    7f9c:	4b0b      	ldr	r3, [pc, #44]	; (7fcc <D_Nv_EraseSector_Impl+0x3c>)
    7f9e:	3b01      	subs	r3, #1
    7fa0:	2280      	movs	r2, #128	; 0x80
    7fa2:	0192      	lsls	r2, r2, #6
    7fa4:	18a6      	adds	r6, r4, r2
    7fa6:	429c      	cmp	r4, r3
    7fa8:	d807      	bhi.n	7fba <D_Nv_EraseSector_Impl+0x2a>
    7faa:	4d09      	ldr	r5, [pc, #36]	; (7fd0 <D_Nv_EraseSector_Impl+0x40>)
    7fac:	0020      	movs	r0, r4
    7fae:	47a8      	blx	r5
    7fb0:	3401      	adds	r4, #1
    7fb2:	34ff      	adds	r4, #255	; 0xff
    7fb4:	42b4      	cmp	r4, r6
    7fb6:	d1f9      	bne.n	7fac <D_Nv_EraseSector_Impl+0x1c>
    7fb8:	bd70      	pop	{r4, r5, r6, pc}
    7fba:	4b06      	ldr	r3, [pc, #24]	; (7fd4 <D_Nv_EraseSector_Impl+0x44>)
    7fbc:	4a06      	ldr	r2, [pc, #24]	; (7fd8 <D_Nv_EraseSector_Impl+0x48>)
    7fbe:	21c2      	movs	r1, #194	; 0xc2
    7fc0:	4806      	ldr	r0, [pc, #24]	; (7fdc <D_Nv_EraseSector_Impl+0x4c>)
    7fc2:	4c07      	ldr	r4, [pc, #28]	; (7fe0 <D_Nv_EraseSector_Impl+0x50>)
    7fc4:	47a0      	blx	r4
    7fc6:	46c0      	nop			; (mov r8, r8)
    7fc8:	00000400 	.word	0x00000400
    7fcc:	00004400 	.word	0x00004400
    7fd0:	00004c19 	.word	0x00004c19
    7fd4:	000184a8 	.word	0x000184a8
    7fd8:	000185c4 	.word	0x000185c4
    7fdc:	00018464 	.word	0x00018464
    7fe0:	00016775 	.word	0x00016775

00007fe4 <D_Nv_IsEmpty_Impl>:
    7fe4:	b510      	push	{r4, lr}
    7fe6:	0013      	movs	r3, r2
    7fe8:	2200      	movs	r2, #0
    7fea:	4c01      	ldr	r4, [pc, #4]	; (7ff0 <D_Nv_IsEmpty_Impl+0xc>)
    7fec:	47a0      	blx	r4
    7fee:	bd10      	pop	{r4, pc}
    7ff0:	00007c85 	.word	0x00007c85

00007ff4 <D_Nv_IsEqual_Impl>:
    7ff4:	b510      	push	{r4, lr}
    7ff6:	4c01      	ldr	r4, [pc, #4]	; (7ffc <D_Nv_IsEqual_Impl+0x8>)
    7ff8:	47a0      	blx	r4
    7ffa:	bd10      	pop	{r4, pc}
    7ffc:	00007c85 	.word	0x00007c85

00008000 <PowerSupplyTooLow>:
    8000:	b510      	push	{r4, lr}
    8002:	4b05      	ldr	r3, [pc, #20]	; (8018 <PowerSupplyTooLow+0x18>)
    8004:	681b      	ldr	r3, [r3, #0]
    8006:	2b00      	cmp	r3, #0
    8008:	d004      	beq.n	8014 <PowerSupplyTooLow+0x14>
    800a:	4798      	blx	r3
    800c:	2301      	movs	r3, #1
    800e:	4058      	eors	r0, r3
    8010:	b2c0      	uxtb	r0, r0
    8012:	bd10      	pop	{r4, pc}
    8014:	2000      	movs	r0, #0
    8016:	e7fc      	b.n	8012 <PowerSupplyTooLow+0x12>
    8018:	2000027c 	.word	0x2000027c

0000801c <UpdateSectorHead>:
    801c:	2901      	cmp	r1, #1
    801e:	d009      	beq.n	8034 <UpdateSectorHead+0x18>
    8020:	2900      	cmp	r1, #0
    8022:	d002      	beq.n	802a <UpdateSectorHead+0xe>
    8024:	2902      	cmp	r1, #2
    8026:	d00d      	beq.n	8044 <UpdateSectorHead+0x28>
    8028:	4770      	bx	lr
    802a:	4b0a      	ldr	r3, [pc, #40]	; (8054 <UpdateSectorHead+0x38>)
    802c:	881a      	ldrh	r2, [r3, #0]
    802e:	1880      	adds	r0, r0, r2
    8030:	8018      	strh	r0, [r3, #0]
    8032:	e7f9      	b.n	8028 <UpdateSectorHead+0xc>
    8034:	4a07      	ldr	r2, [pc, #28]	; (8054 <UpdateSectorHead+0x38>)
>>>>>>> Stashed changes
    8036:	8813      	ldrh	r3, [r2, #0]
    8038:	330f      	adds	r3, #15
    803a:	18c0      	adds	r0, r0, r3
    803c:	230f      	movs	r3, #15
    803e:	4398      	bics	r0, r3
    8040:	8010      	strh	r0, [r2, #0]
<<<<<<< Updated upstream
=======
    7fa8:	4a03      	ldr	r2, [pc, #12]	; (7fb8 <UpdateSectorHead+0x38>)
    7faa:	8813      	ldrh	r3, [r2, #0]
    7fac:	333f      	adds	r3, #63	; 0x3f
    7fae:	18c0      	adds	r0, r0, r3
    7fb0:	233f      	movs	r3, #63	; 0x3f
    7fb2:	4398      	bics	r0, r3
    7fb4:	8010      	strh	r0, [r2, #0]
>>>>>>> Stashed changes
}
    7fb6:	e7e9      	b.n	7f8c <UpdateSectorHead+0xc>
    7fb8:	20000282 	.word	0x20000282

00007fbc <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    7fbc:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    7fbe:	2900      	cmp	r1, #0
    7fc0:	d019      	beq.n	7ff6 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    7fc2:	24ff      	movs	r4, #255	; 0xff
    7fc4:	e013      	b.n	7fee <ComputeCrc+0x32>
    7fc6:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    7fc8:	0a15      	lsrs	r5, r2, #8
    7fca:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    7fcc:	091d      	lsrs	r5, r3, #4
    7fce:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    7fd0:	0212      	lsls	r2, r2, #8
    7fd2:	405a      	eors	r2, r3
    7fd4:	031d      	lsls	r5, r3, #12
    7fd6:	406a      	eors	r2, r5
    7fd8:	015b      	lsls	r3, r3, #5
    7fda:	405a      	eors	r2, r3
    7fdc:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    7fde:	0003      	movs	r3, r0
    7fe0:	1e5d      	subs	r5, r3, #1
    7fe2:	41ab      	sbcs	r3, r5
    7fe4:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    7fe6:	3901      	subs	r1, #1
    7fe8:	b289      	uxth	r1, r1
    7fea:	2900      	cmp	r1, #0
    7fec:	d003      	beq.n	7ff6 <ComputeCrc+0x3a>
        if (pData == NULL)
    7fee:	2800      	cmp	r0, #0
    7ff0:	d0e9      	beq.n	7fc6 <ComputeCrc+0xa>
            data = *pData;
    7ff2:	7803      	ldrb	r3, [r0, #0]
    7ff4:	e7e8      	b.n	7fc8 <ComputeCrc+0xc>
    }

    return crc;
}
    7ff6:	0010      	movs	r0, r2
    7ff8:	bd30      	pop	{r4, r5, pc}
    7ffa:	Address 0x00007ffa is out of bounds.


00007ffc <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    7ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ffe:	46de      	mov	lr, fp
    8000:	4657      	mov	r7, sl
    8002:	b580      	push	{r7, lr}
    8004:	b089      	sub	sp, #36	; 0x24
    8006:	9001      	str	r0, [sp, #4]
    8008:	9102      	str	r1, [sp, #8]
    800a:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    800c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    800e:	2a00      	cmp	r2, #0
    8010:	d00d      	beq.n	802e <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8012:	4692      	mov	sl, r2
    8014:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    8016:	445b      	add	r3, fp
    8018:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    801a:	465e      	mov	r6, fp
    801c:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    801e:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8020:	45ab      	cmp	fp, r5
    8022:	d03e      	beq.n	80a2 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8024:	4f22      	ldr	r7, [pc, #136]	; (80b0 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    8026:	2c00      	cmp	r4, #0
    8028:	d108      	bne.n	803c <GatherData+0x40>
                return false;
    802a:	2000      	movs	r0, #0
    802c:	e039      	b.n	80a2 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    802e:	2200      	movs	r2, #0
    8030:	4692      	mov	sl, r2
    8032:	e7f0      	b.n	8016 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    8034:	ab04      	add	r3, sp, #16
    8036:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    8038:	2c00      	cmp	r4, #0
    803a:	d031      	beq.n	80a0 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    803c:	2310      	movs	r3, #16
    803e:	aa04      	add	r2, sp, #16
    8040:	0021      	movs	r1, r4
    8042:	9801      	ldr	r0, [sp, #4]
    8044:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    8046:	ab04      	add	r3, sp, #16
    8048:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    804a:	42aa      	cmp	r2, r5
    804c:	d2f2      	bcs.n	8034 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    804e:	88db      	ldrh	r3, [r3, #6]
    8050:	18d3      	adds	r3, r2, r3
    8052:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8054:	42b3      	cmp	r3, r6
    8056:	d9ed      	bls.n	8034 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    8058:	42ab      	cmp	r3, r5
    805a:	d201      	bcs.n	8060 <GatherData+0x64>
                readStart = blockEnd;
    805c:	001e      	movs	r6, r3
    805e:	e7e9      	b.n	8034 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8060:	1aa9      	subs	r1, r5, r2
    8062:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    8064:	42b2      	cmp	r2, r6
    8066:	d915      	bls.n	8094 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    8068:	ab04      	add	r3, sp, #16
    806a:	895b      	ldrh	r3, [r3, #10]
    806c:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    806e:	000b      	movs	r3, r1
        readEnd -= count;
    8070:	1aed      	subs	r5, r5, r3
    8072:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    8074:	4652      	mov	r2, sl
    8076:	2a00      	cmp	r2, #0
    8078:	d008      	beq.n	808c <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    807a:	3410      	adds	r4, #16
    807c:	1909      	adds	r1, r1, r4
            pDestination -= count;
    807e:	1ad2      	subs	r2, r2, r3
    8080:	4692      	mov	sl, r2
            sourcePointer -= count;
    8082:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    8084:	b289      	uxth	r1, r1
    8086:	9801      	ldr	r0, [sp, #4]
    8088:	4c09      	ldr	r4, [pc, #36]	; (80b0 <GatherData+0xb4>)
    808a:	47a0      	blx	r4
    while ( readStart != readEnd )
    808c:	42ae      	cmp	r6, r5
    808e:	d00d      	beq.n	80ac <GatherData+0xb0>
    8090:	9c03      	ldr	r4, [sp, #12]
    8092:	e7c8      	b.n	8026 <GatherData+0x2a>
            count = readEnd - readStart;
    8094:	1bab      	subs	r3, r5, r6
    8096:	b29b      	uxth	r3, r3
            readStart = offset;
    8098:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    809a:	9a02      	ldr	r2, [sp, #8]
    809c:	9203      	str	r2, [sp, #12]
    809e:	e7e7      	b.n	8070 <GatherData+0x74>
                return false;
    80a0:	2000      	movs	r0, #0
}
    80a2:	b009      	add	sp, #36	; 0x24
    80a4:	bc0c      	pop	{r2, r3}
    80a6:	4692      	mov	sl, r2
    80a8:	469b      	mov	fp, r3
    80aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    80ac:	2001      	movs	r0, #1
    80ae:	e7f8      	b.n	80a2 <GatherData+0xa6>
    80b0:	00007d15 	.word	0x00007d15

000080b4 <ComputeDataCrc>:
{
    80b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80b6:	46de      	mov	lr, fp
    80b8:	4647      	mov	r7, r8
    80ba:	b580      	push	{r7, lr}
    80bc:	b087      	sub	sp, #28
    80be:	9004      	str	r0, [sp, #16]
    80c0:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    80c2:	7995      	ldrb	r5, [r2, #6]
    80c4:	79d3      	ldrb	r3, [r2, #7]
    80c6:	021b      	lsls	r3, r3, #8
    80c8:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    80ca:	7917      	ldrb	r7, [r2, #4]
    80cc:	7953      	ldrb	r3, [r2, #5]
    80ce:	021b      	lsls	r3, r3, #8
    80d0:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    80d2:	0a2c      	lsrs	r4, r5, #8
    80d4:	b264      	sxtb	r4, r4
    80d6:	2c00      	cmp	r4, #0
    80d8:	db2f      	blt.n	813a <ComputeDataCrc+0x86>
    80da:	4b1c      	ldr	r3, [pc, #112]	; (814c <ComputeDataCrc+0x98>)
    80dc:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    80de:	4b1c      	ldr	r3, [pc, #112]	; (8150 <ComputeDataCrc+0x9c>)
    80e0:	4698      	mov	r8, r3
    80e2:	e011      	b.n	8108 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    80e4:	2d00      	cmp	r5, #0
    80e6:	d02a      	beq.n	813e <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    80e8:	4b1a      	ldr	r3, [pc, #104]	; (8154 <ComputeDataCrc+0xa0>)
    80ea:	9300      	str	r3, [sp, #0]
    80ec:	002b      	movs	r3, r5
    80ee:	003a      	movs	r2, r7
    80f0:	9905      	ldr	r1, [sp, #20]
    80f2:	9804      	ldr	r0, [sp, #16]
    80f4:	4e18      	ldr	r6, [pc, #96]	; (8158 <ComputeDataCrc+0xa4>)
    80f6:	47b0      	blx	r6
    80f8:	2800      	cmp	r0, #0
    80fa:	d020      	beq.n	813e <ComputeDataCrc+0x8a>
    80fc:	0029      	movs	r1, r5
    80fe:	e015      	b.n	812c <ComputeDataCrc+0x78>
    8100:	3c01      	subs	r4, #1
    8102:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8104:	1c63      	adds	r3, r4, #1
    8106:	d01a      	beq.n	813e <ComputeDataCrc+0x8a>
        if (i)
    8108:	2c00      	cmp	r4, #0
    810a:	d0eb      	beq.n	80e4 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    810c:	3d01      	subs	r5, #1
    810e:	3dff      	subs	r5, #255	; 0xff
    8110:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8112:	4b10      	ldr	r3, [pc, #64]	; (8154 <ComputeDataCrc+0xa0>)
    8114:	9300      	str	r3, [sp, #0]
    8116:	2380      	movs	r3, #128	; 0x80
    8118:	005b      	lsls	r3, r3, #1
    811a:	003a      	movs	r2, r7
    811c:	9905      	ldr	r1, [sp, #20]
    811e:	9804      	ldr	r0, [sp, #16]
    8120:	4e0d      	ldr	r6, [pc, #52]	; (8158 <ComputeDataCrc+0xa4>)
    8122:	47b0      	blx	r6
    8124:	2800      	cmp	r0, #0
    8126:	d0eb      	beq.n	8100 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8128:	2180      	movs	r1, #128	; 0x80
    812a:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    812c:	187f      	adds	r7, r7, r1
    812e:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8130:	9a03      	ldr	r2, [sp, #12]
    8132:	4808      	ldr	r0, [pc, #32]	; (8154 <ComputeDataCrc+0xa0>)
    8134:	47c0      	blx	r8
    8136:	9003      	str	r0, [sp, #12]
    8138:	e7e2      	b.n	8100 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    813a:	4b04      	ldr	r3, [pc, #16]	; (814c <ComputeDataCrc+0x98>)
    813c:	9303      	str	r3, [sp, #12]
}
    813e:	9803      	ldr	r0, [sp, #12]
    8140:	b007      	add	sp, #28
    8142:	bc0c      	pop	{r2, r3}
    8144:	4690      	mov	r8, r2
    8146:	469b      	mov	fp, r3
    8148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    814a:	46c0      	nop			; (mov r8, r8)
    814c:	0000ffff 	.word	0x0000ffff
    8150:	00007fbd 	.word	0x00007fbd
    8154:	2000013c 	.word	0x2000013c
    8158:	00007ffd 	.word	0x00007ffd

0000815c <FindItemCache>:
{
    815c:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    815e:	4b16      	ldr	r3, [pc, #88]	; (81b8 <FindItemCache+0x5c>)
    8160:	781c      	ldrb	r4, [r3, #0]
    8162:	2c00      	cmp	r4, #0
    8164:	d026      	beq.n	81b4 <FindItemCache+0x58>
        if ( cache->id == id )
    8166:	4b15      	ldr	r3, [pc, #84]	; (81bc <FindItemCache+0x60>)
    8168:	881b      	ldrh	r3, [r3, #0]
    816a:	4283      	cmp	r3, r0
    816c:	d016      	beq.n	819c <FindItemCache+0x40>
    816e:	2301      	movs	r3, #1
    8170:	4e12      	ldr	r6, [pc, #72]	; (81bc <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8172:	b2da      	uxtb	r2, r3
    8174:	4294      	cmp	r4, r2
    8176:	d91b      	bls.n	81b0 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    8178:	001d      	movs	r5, r3
        if ( cache->id == id )
    817a:	1c59      	adds	r1, r3, #1
    817c:	009a      	lsls	r2, r3, #2
    817e:	5ab2      	ldrh	r2, [r6, r2]
    8180:	4282      	cmp	r2, r0
    8182:	d001      	beq.n	8188 <FindItemCache+0x2c>
    8184:	000b      	movs	r3, r1
    8186:	e7f4      	b.n	8172 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8188:	009b      	lsls	r3, r3, #2
    818a:	480c      	ldr	r0, [pc, #48]	; (81bc <FindItemCache+0x60>)
    818c:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    818e:	00ad      	lsls	r5, r5, #2
    8190:	4b0a      	ldr	r3, [pc, #40]	; (81bc <FindItemCache+0x60>)
    8192:	195d      	adds	r5, r3, r5
    8194:	886b      	ldrh	r3, [r5, #2]
    8196:	2b00      	cmp	r3, #0
    8198:	d003      	beq.n	81a2 <FindItemCache+0x46>
}
    819a:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    819c:	4807      	ldr	r0, [pc, #28]	; (81bc <FindItemCache+0x60>)
    819e:	2500      	movs	r5, #0
    81a0:	e7f5      	b.n	818e <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    81a2:	4b07      	ldr	r3, [pc, #28]	; (81c0 <FindItemCache+0x64>)
    81a4:	4a07      	ldr	r2, [pc, #28]	; (81c4 <FindItemCache+0x68>)
    81a6:	218c      	movs	r1, #140	; 0x8c
    81a8:	31ff      	adds	r1, #255	; 0xff
    81aa:	4807      	ldr	r0, [pc, #28]	; (81c8 <FindItemCache+0x6c>)
    81ac:	4c07      	ldr	r4, [pc, #28]	; (81cc <FindItemCache+0x70>)
    81ae:	47a0      	blx	r4
    return NULL;
    81b0:	2000      	movs	r0, #0
    81b2:	e7f2      	b.n	819a <FindItemCache+0x3e>
    81b4:	2000      	movs	r0, #0
    81b6:	e7f0      	b.n	819a <FindItemCache+0x3e>
    81b8:	20000278 	.word	0x20000278
    81bc:	20000258 	.word	0x20000258
    81c0:	00018474 	.word	0x00018474
    81c4:	00018560 	.word	0x00018560
    81c8:	00018490 	.word	0x00018490
    81cc:	000166c9 	.word	0x000166c9

000081d0 <FindItem>:
{
    81d0:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    81d2:	4b05      	ldr	r3, [pc, #20]	; (81e8 <FindItem+0x18>)
    81d4:	4798      	blx	r3
    if (cache)
    81d6:	2800      	cmp	r0, #0
    81d8:	d004      	beq.n	81e4 <FindItem+0x14>
        return cache->lastBlock;
    81da:	7883      	ldrb	r3, [r0, #2]
    81dc:	78c0      	ldrb	r0, [r0, #3]
    81de:	0200      	lsls	r0, r0, #8
    81e0:	4318      	orrs	r0, r3
}
    81e2:	bd10      	pop	{r4, pc}
    return 0x0000u;
    81e4:	2000      	movs	r0, #0
    81e6:	e7fc      	b.n	81e2 <FindItem+0x12>
    81e8:	0000815d 	.word	0x0000815d

000081ec <CreateItemCache>:
{
    81ec:	b510      	push	{r4, lr}
    81ee:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    81f0:	4b0e      	ldr	r3, [pc, #56]	; (822c <CreateItemCache+0x40>)
    81f2:	4798      	blx	r3
    81f4:	2800      	cmp	r0, #0
    81f6:	d10b      	bne.n	8210 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    81f8:	4b0d      	ldr	r3, [pc, #52]	; (8230 <CreateItemCache+0x44>)
    81fa:	781b      	ldrb	r3, [r3, #0]
    81fc:	2b07      	cmp	r3, #7
    81fe:	d80e      	bhi.n	821e <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8200:	1c59      	adds	r1, r3, #1
    8202:	4a0b      	ldr	r2, [pc, #44]	; (8230 <CreateItemCache+0x44>)
    8204:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    8206:	480b      	ldr	r0, [pc, #44]	; (8234 <CreateItemCache+0x48>)
    8208:	009b      	lsls	r3, r3, #2
    820a:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    820c:	18c0      	adds	r0, r0, r3
}
    820e:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8210:	4b09      	ldr	r3, [pc, #36]	; (8238 <CreateItemCache+0x4c>)
    8212:	4a0a      	ldr	r2, [pc, #40]	; (823c <CreateItemCache+0x50>)
    8214:	21cc      	movs	r1, #204	; 0xcc
    8216:	0049      	lsls	r1, r1, #1
    8218:	4809      	ldr	r0, [pc, #36]	; (8240 <CreateItemCache+0x54>)
    821a:	4c0a      	ldr	r4, [pc, #40]	; (8244 <CreateItemCache+0x58>)
    821c:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    821e:	4b0a      	ldr	r3, [pc, #40]	; (8248 <CreateItemCache+0x5c>)
    8220:	4a06      	ldr	r2, [pc, #24]	; (823c <CreateItemCache+0x50>)
    8222:	219a      	movs	r1, #154	; 0x9a
    8224:	31ff      	adds	r1, #255	; 0xff
    8226:	4806      	ldr	r0, [pc, #24]	; (8240 <CreateItemCache+0x54>)
    8228:	4c06      	ldr	r4, [pc, #24]	; (8244 <CreateItemCache+0x58>)
    822a:	47a0      	blx	r4
    822c:	0000815d 	.word	0x0000815d
    8230:	20000278 	.word	0x20000278
    8234:	20000258 	.word	0x20000258
    8238:	0001841c 	.word	0x0001841c
    823c:	00018570 	.word	0x00018570
    8240:	00018490 	.word	0x00018490
    8244:	000166c9 	.word	0x000166c9
    8248:	00018438 	.word	0x00018438

0000824c <DeleteItemCache>:
{
    824c:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    824e:	4b0b      	ldr	r3, [pc, #44]	; (827c <DeleteItemCache+0x30>)
    8250:	4798      	blx	r3
    8252:	2800      	cmp	r0, #0
    8254:	d00b      	beq.n	826e <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    8256:	4b0a      	ldr	r3, [pc, #40]	; (8280 <DeleteItemCache+0x34>)
    8258:	7819      	ldrb	r1, [r3, #0]
    825a:	3901      	subs	r1, #1
    825c:	b2c9      	uxtb	r1, r1
    825e:	7019      	strb	r1, [r3, #0]
    8260:	0089      	lsls	r1, r1, #2
    8262:	4b08      	ldr	r3, [pc, #32]	; (8284 <DeleteItemCache+0x38>)
    8264:	1859      	adds	r1, r3, r1
    8266:	2204      	movs	r2, #4
    8268:	4b07      	ldr	r3, [pc, #28]	; (8288 <DeleteItemCache+0x3c>)
    826a:	4798      	blx	r3
}
    826c:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    826e:	4b07      	ldr	r3, [pc, #28]	; (828c <DeleteItemCache+0x40>)
    8270:	4a07      	ldr	r2, [pc, #28]	; (8290 <DeleteItemCache+0x44>)
    8272:	21d3      	movs	r1, #211	; 0xd3
    8274:	0049      	lsls	r1, r1, #1
    8276:	4807      	ldr	r0, [pc, #28]	; (8294 <DeleteItemCache+0x48>)
    8278:	4c07      	ldr	r4, [pc, #28]	; (8298 <DeleteItemCache+0x4c>)
    827a:	47a0      	blx	r4
    827c:	0000815d 	.word	0x0000815d
    8280:	20000278 	.word	0x20000278
    8284:	20000258 	.word	0x20000258
    8288:	0001678b 	.word	0x0001678b
    828c:	00018458 	.word	0x00018458
    8290:	00018580 	.word	0x00018580
    8294:	00018490 	.word	0x00018490
    8298:	000166c9 	.word	0x000166c9

0000829c <eraseSectorTimerFired>:
{
    829c:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    829e:	4b05      	ldr	r3, [pc, #20]	; (82b4 <eraseSectorTimerFired+0x18>)
    82a0:	4798      	blx	r3
    82a2:	2800      	cmp	r0, #0
    82a4:	d000      	beq.n	82a8 <eraseSectorTimerFired+0xc>
}
    82a6:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    82a8:	4b03      	ldr	r3, [pc, #12]	; (82b8 <eraseSectorTimerFired+0x1c>)
    82aa:	7818      	ldrb	r0, [r3, #0]
    82ac:	4b03      	ldr	r3, [pc, #12]	; (82bc <eraseSectorTimerFired+0x20>)
    82ae:	4798      	blx	r3
}
    82b0:	e7f9      	b.n	82a6 <eraseSectorTimerFired+0xa>
    82b2:	46c0      	nop			; (mov r8, r8)
    82b4:	00007f65 	.word	0x00007f65
    82b8:	20000016 	.word	0x20000016
    82bc:	00007ef5 	.word	0x00007ef5

000082c0 <EraseSector>:

static bool EraseSector(void)
{
    82c0:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    82c2:	4c08      	ldr	r4, [pc, #32]	; (82e4 <EraseSector+0x24>)
    82c4:	7820      	ldrb	r0, [r4, #0]
    82c6:	4b08      	ldr	r3, [pc, #32]	; (82e8 <EraseSector+0x28>)
    82c8:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    82ca:	7820      	ldrb	r0, [r4, #0]
    82cc:	2280      	movs	r2, #128	; 0x80
    82ce:	0192      	lsls	r2, r2, #6
    82d0:	2100      	movs	r1, #0
    82d2:	4b06      	ldr	r3, [pc, #24]	; (82ec <EraseSector+0x2c>)
    82d4:	4798      	blx	r3
    82d6:	2800      	cmp	r0, #0
    82d8:	d003      	beq.n	82e2 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    82da:	2280      	movs	r2, #128	; 0x80
    82dc:	0052      	lsls	r2, r2, #1
    82de:	4b04      	ldr	r3, [pc, #16]	; (82f0 <EraseSector+0x30>)
    82e0:	801a      	strh	r2, [r3, #0]

    return true;
}
    82e2:	bd10      	pop	{r4, pc}
    82e4:	20000280 	.word	0x20000280
    82e8:	00007ef5 	.word	0x00007ef5
    82ec:	00007f49 	.word	0x00007f49
    82f0:	20000282 	.word	0x20000282

000082f4 <WriteAndCheck>:
{
    82f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82f6:	b083      	sub	sp, #12
    82f8:	9001      	str	r0, [sp, #4]
    82fa:	000d      	movs	r5, r1
    82fc:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    82fe:	4f07      	ldr	r7, [pc, #28]	; (831c <WriteAndCheck+0x28>)
    8300:	7838      	ldrb	r0, [r7, #0]
    8302:	0013      	movs	r3, r2
    8304:	000a      	movs	r2, r1
    8306:	9901      	ldr	r1, [sp, #4]
    8308:	4c05      	ldr	r4, [pc, #20]	; (8320 <WriteAndCheck+0x2c>)
    830a:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    830c:	7838      	ldrb	r0, [r7, #0]
    830e:	0033      	movs	r3, r6
    8310:	002a      	movs	r2, r5
    8312:	9901      	ldr	r1, [sp, #4]
    8314:	4c03      	ldr	r4, [pc, #12]	; (8324 <WriteAndCheck+0x30>)
    8316:	47a0      	blx	r4
}
    8318:	b003      	add	sp, #12
    831a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    831c:	20000280 	.word	0x20000280
    8320:	00007d8d 	.word	0x00007d8d
    8324:	00007f59 	.word	0x00007f59

00008328 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    8328:	b510      	push	{r4, lr}
    832a:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    832c:	ac01      	add	r4, sp, #4
    832e:	2341      	movs	r3, #65	; 0x41
    8330:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8332:	3313      	adds	r3, #19
    8334:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    8336:	3b01      	subs	r3, #1
    8338:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    833a:	3b05      	subs	r3, #5
    833c:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    833e:	3328      	adds	r3, #40	; 0x28
    8340:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8342:	3b44      	subs	r3, #68	; 0x44
    8344:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    8346:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    8348:	43c0      	mvns	r0, r0
    834a:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    834c:	4b08      	ldr	r3, [pc, #32]	; (8370 <WriteSectorHeader+0x48>)
    834e:	881b      	ldrh	r3, [r3, #0]
    8350:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8352:	4a08      	ldr	r2, [pc, #32]	; (8374 <WriteSectorHeader+0x4c>)
    8354:	2110      	movs	r1, #16
    8356:	466b      	mov	r3, sp
    8358:	1d98      	adds	r0, r3, #6
    835a:	4b07      	ldr	r3, [pc, #28]	; (8378 <WriteSectorHeader+0x50>)
    835c:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    835e:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8360:	2212      	movs	r2, #18
    8362:	0021      	movs	r1, r4
    8364:	2000      	movs	r0, #0
    8366:	4b05      	ldr	r3, [pc, #20]	; (837c <WriteSectorHeader+0x54>)
    8368:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    836a:	b006      	add	sp, #24
    836c:	bd10      	pop	{r4, pc}
    836e:	46c0      	nop			; (mov r8, r8)
    8370:	2000027a 	.word	0x2000027a
    8374:	0000ffff 	.word	0x0000ffff
    8378:	00007fbd 	.word	0x00007fbd
    837c:	000082f5 	.word	0x000082f5

00008380 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8382:	0004      	movs	r4, r0
    8384:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8386:	4a21      	ldr	r2, [pc, #132]	; (840c <SmartCompacting+0x8c>)
    8388:	8813      	ldrh	r3, [r2, #0]
    838a:	18cb      	adds	r3, r1, r3
    838c:	b29b      	uxth	r3, r3
    838e:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8390:	2bff      	cmp	r3, #255	; 0xff
    8392:	d92e      	bls.n	83f2 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8394:	4b1e      	ldr	r3, [pc, #120]	; (8410 <SmartCompacting+0x90>)
    8396:	881a      	ldrh	r2, [r3, #0]
    8398:	1880      	adds	r0, r0, r2
    839a:	2580      	movs	r5, #128	; 0x80
    839c:	006d      	lsls	r5, r5, #1
    839e:	1aaa      	subs	r2, r5, r2
    83a0:	491c      	ldr	r1, [pc, #112]	; (8414 <SmartCompacting+0x94>)
    83a2:	4b1d      	ldr	r3, [pc, #116]	; (8418 <SmartCompacting+0x98>)
    83a4:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    83a6:	4b1d      	ldr	r3, [pc, #116]	; (841c <SmartCompacting+0x9c>)
    83a8:	8818      	ldrh	r0, [r3, #0]
    83aa:	002a      	movs	r2, r5
    83ac:	0021      	movs	r1, r4
    83ae:	4b1c      	ldr	r3, [pc, #112]	; (8420 <SmartCompacting+0xa0>)
    83b0:	4798      	blx	r3
    83b2:	1e05      	subs	r5, r0, #0
    83b4:	d027      	beq.n	8406 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    83b6:	2100      	movs	r1, #0
    83b8:	2080      	movs	r0, #128	; 0x80
    83ba:	0040      	lsls	r0, r0, #1
    83bc:	4b19      	ldr	r3, [pc, #100]	; (8424 <SmartCompacting+0xa4>)
    83be:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    83c0:	4b13      	ldr	r3, [pc, #76]	; (8410 <SmartCompacting+0x90>)
    83c2:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    83c4:	2200      	movs	r2, #0
    83c6:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    83c8:	4b10      	ldr	r3, [pc, #64]	; (840c <SmartCompacting+0x8c>)
    83ca:	881e      	ldrh	r6, [r3, #0]
    83cc:	3e01      	subs	r6, #1
    83ce:	3eff      	subs	r6, #255	; 0xff
    83d0:	b2b6      	uxth	r6, r6
    83d2:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    83d4:	2e00      	cmp	r6, #0
    83d6:	d016      	beq.n	8406 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    83d8:	2180      	movs	r1, #128	; 0x80
    83da:	0049      	lsls	r1, r1, #1
    83dc:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    83de:	b289      	uxth	r1, r1
    83e0:	4b0c      	ldr	r3, [pc, #48]	; (8414 <SmartCompacting+0x94>)
    83e2:	1859      	adds	r1, r3, r1
    83e4:	0032      	movs	r2, r6
    83e6:	0020      	movs	r0, r4
    83e8:	4b0b      	ldr	r3, [pc, #44]	; (8418 <SmartCompacting+0x98>)
    83ea:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    83ec:	4b08      	ldr	r3, [pc, #32]	; (8410 <SmartCompacting+0x90>)
    83ee:	801e      	strh	r6, [r3, #0]
    83f0:	e009      	b.n	8406 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    83f2:	4e07      	ldr	r6, [pc, #28]	; (8410 <SmartCompacting+0x90>)
    83f4:	8837      	ldrh	r7, [r6, #0]
    83f6:	19c0      	adds	r0, r0, r7
    83f8:	000a      	movs	r2, r1
    83fa:	4906      	ldr	r1, [pc, #24]	; (8414 <SmartCompacting+0x94>)
    83fc:	4b06      	ldr	r3, [pc, #24]	; (8418 <SmartCompacting+0x98>)
    83fe:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    8400:	19ed      	adds	r5, r5, r7
    8402:	8035      	strh	r5, [r6, #0]
        return true;
    8404:	2501      	movs	r5, #1
        }
    }

    return true;

}
    8406:	0028      	movs	r0, r5
    8408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	20000138 	.word	0x20000138
    8410:	2000010c 	.word	0x2000010c
    8414:	2000013c 	.word	0x2000013c
    8418:	0001678b 	.word	0x0001678b
    841c:	20000282 	.word	0x20000282
    8420:	000082f5 	.word	0x000082f5
    8424:	00007f81 	.word	0x00007f81

00008428 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    8428:	b5f0      	push	{r4, r5, r6, r7, lr}
    842a:	46de      	mov	lr, fp
    842c:	4657      	mov	r7, sl
    842e:	464e      	mov	r6, r9
    8430:	4645      	mov	r5, r8
    8432:	b5e0      	push	{r5, r6, r7, lr}
    8434:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    8436:	487b      	ldr	r0, [pc, #492]	; (8624 <CompactSector+0x1fc>)
    8438:	4b7b      	ldr	r3, [pc, #492]	; (8628 <CompactSector+0x200>)
    843a:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    843c:	2300      	movs	r3, #0
    843e:	4a7b      	ldr	r2, [pc, #492]	; (862c <CompactSector+0x204>)
    8440:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8442:	4a7b      	ldr	r2, [pc, #492]	; (8630 <CompactSector+0x208>)
    8444:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    8446:	4a7b      	ldr	r2, [pc, #492]	; (8634 <CompactSector+0x20c>)
    8448:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    844a:	4a7b      	ldr	r2, [pc, #492]	; (8638 <CompactSector+0x210>)
    844c:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    844e:	4b7b      	ldr	r3, [pc, #492]	; (863c <CompactSector+0x214>)
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	001f      	movs	r7, r3
    8454:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8456:	2312      	movs	r3, #18
    8458:	aa0f      	add	r2, sp, #60	; 0x3c
    845a:	2100      	movs	r1, #0
    845c:	0038      	movs	r0, r7
    845e:	4c78      	ldr	r4, [pc, #480]	; (8640 <CompactSector+0x218>)
    8460:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8462:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8464:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    8466:	4c75      	ldr	r4, [pc, #468]	; (863c <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    8468:	0025      	movs	r5, r4
        s_sector++;
    846a:	0026      	movs	r6, r4
    846c:	e008      	b.n	8480 <CompactSector+0x58>
    846e:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8470:	4b72      	ldr	r3, [pc, #456]	; (863c <CompactSector+0x214>)
    8472:	781b      	ldrb	r3, [r3, #0]
    8474:	42bb      	cmp	r3, r7
    8476:	d00b      	beq.n	8490 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    8478:	4b72      	ldr	r3, [pc, #456]	; (8644 <CompactSector+0x21c>)
    847a:	4798      	blx	r3
    847c:	2800      	cmp	r0, #0
    847e:	d10d      	bne.n	849c <CompactSector+0x74>
        s_sector++;
    8480:	7823      	ldrb	r3, [r4, #0]
    8482:	3301      	adds	r3, #1
    8484:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8486:	2b01      	cmp	r3, #1
    8488:	d9f1      	bls.n	846e <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    848a:	2300      	movs	r3, #0
    848c:	702b      	strb	r3, [r5, #0]
    848e:	e7ef      	b.n	8470 <CompactSector+0x48>
            assert(false);
    8490:	4b6d      	ldr	r3, [pc, #436]	; (8648 <CompactSector+0x220>)
    8492:	4a6e      	ldr	r2, [pc, #440]	; (864c <CompactSector+0x224>)
    8494:	496e      	ldr	r1, [pc, #440]	; (8650 <CompactSector+0x228>)
    8496:	486f      	ldr	r0, [pc, #444]	; (8654 <CompactSector+0x22c>)
    8498:	4c6f      	ldr	r4, [pc, #444]	; (8658 <CompactSector+0x230>)
    849a:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    849c:	4b6f      	ldr	r3, [pc, #444]	; (865c <CompactSector+0x234>)
    849e:	781b      	ldrb	r3, [r3, #0]
    84a0:	2b00      	cmp	r3, #0
    84a2:	d06a      	beq.n	857a <CompactSector+0x152>
    84a4:	2300      	movs	r3, #0
    84a6:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    84a8:	3301      	adds	r3, #1
    84aa:	33ff      	adds	r3, #255	; 0xff
    84ac:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    84ae:	466a      	mov	r2, sp
    84b0:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    84b2:	4b6b      	ldr	r3, [pc, #428]	; (8660 <CompactSector+0x238>)
    84b4:	3310      	adds	r3, #16
    84b6:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    84b8:	9b06      	ldr	r3, [sp, #24]
    84ba:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    84bc:	009f      	lsls	r7, r3, #2
    84be:	4b69      	ldr	r3, [pc, #420]	; (8664 <CompactSector+0x23c>)
    84c0:	469c      	mov	ip, r3
    84c2:	4467      	add	r7, ip
    84c4:	887b      	ldrh	r3, [r7, #2]
    84c6:	001d      	movs	r5, r3
    84c8:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    84ca:	2310      	movs	r3, #16
    84cc:	aa0b      	add	r2, sp, #44	; 0x2c
    84ce:	0029      	movs	r1, r5
    84d0:	9803      	ldr	r0, [sp, #12]
    84d2:	4680      	mov	r8, r0
    84d4:	4c5a      	ldr	r4, [pc, #360]	; (8640 <CompactSector+0x218>)
    84d6:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    84d8:	ae0b      	add	r6, sp, #44	; 0x2c
    84da:	2300      	movs	r3, #0
    84dc:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    84de:	8934      	ldrh	r4, [r6, #8]
    84e0:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    84e2:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    84e4:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    84e6:	3410      	adds	r4, #16
    84e8:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    84ea:	0032      	movs	r2, r6
    84ec:	0029      	movs	r1, r5
    84ee:	4640      	mov	r0, r8
    84f0:	4b5d      	ldr	r3, [pc, #372]	; (8668 <CompactSector+0x240>)
    84f2:	4798      	blx	r3
    84f4:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    84f6:	4a5d      	ldr	r2, [pc, #372]	; (866c <CompactSector+0x244>)
    84f8:	210e      	movs	r1, #14
    84fa:	a80b      	add	r0, sp, #44	; 0x2c
    84fc:	4b5c      	ldr	r3, [pc, #368]	; (8670 <CompactSector+0x248>)
    84fe:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    8500:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8502:	4d57      	ldr	r5, [pc, #348]	; (8660 <CompactSector+0x238>)
    8504:	464a      	mov	r2, r9
    8506:	21ff      	movs	r1, #255	; 0xff
    8508:	0028      	movs	r0, r5
    850a:	4b5a      	ldr	r3, [pc, #360]	; (8674 <CompactSector+0x24c>)
    850c:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    850e:	002b      	movs	r3, r5
    8510:	ce07      	ldmia	r6!, {r0, r1, r2}
    8512:	c307      	stmia	r3!, {r0, r1, r2}
    8514:	6832      	ldr	r2, [r6, #0]
    8516:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8518:	4b57      	ldr	r3, [pc, #348]	; (8678 <CompactSector+0x250>)
    851a:	881b      	ldrh	r3, [r3, #0]
    851c:	4a45      	ldr	r2, [pc, #276]	; (8634 <CompactSector+0x20c>)
    851e:	8812      	ldrh	r2, [r2, #0]
    8520:	189b      	adds	r3, r3, r2
    8522:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8524:	454c      	cmp	r4, r9
    8526:	d904      	bls.n	8532 <CompactSector+0x10a>
    8528:	2600      	movs	r6, #0
    852a:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    852c:	4a4c      	ldr	r2, [pc, #304]	; (8660 <CompactSector+0x238>)
    852e:	4690      	mov	r8, r2
    8530:	e068      	b.n	8604 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8532:	ab0b      	add	r3, sp, #44	; 0x2c
    8534:	891b      	ldrh	r3, [r3, #8]
    8536:	9a08      	ldr	r2, [sp, #32]
    8538:	9200      	str	r2, [sp, #0]
    853a:	2200      	movs	r2, #0
    853c:	9904      	ldr	r1, [sp, #16]
    853e:	9803      	ldr	r0, [sp, #12]
    8540:	4e4e      	ldr	r6, [pc, #312]	; (867c <CompactSector+0x254>)
    8542:	47b0      	blx	r6
    8544:	2800      	cmp	r0, #0
    8546:	d063      	beq.n	8610 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8548:	9b07      	ldr	r3, [sp, #28]
    854a:	009d      	lsls	r5, r3, #2
    854c:	4b45      	ldr	r3, [pc, #276]	; (8664 <CompactSector+0x23c>)
    854e:	195d      	adds	r5, r3, r5
    8550:	4b49      	ldr	r3, [pc, #292]	; (8678 <CompactSector+0x250>)
    8552:	881b      	ldrh	r3, [r3, #0]
    8554:	4a37      	ldr	r2, [pc, #220]	; (8634 <CompactSector+0x20c>)
    8556:	8812      	ldrh	r2, [r2, #0]
    8558:	189b      	adds	r3, r3, r2
    855a:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    855c:	0021      	movs	r1, r4
    855e:	a814      	add	r0, sp, #80	; 0x50
    8560:	4b47      	ldr	r3, [pc, #284]	; (8680 <CompactSector+0x258>)
    8562:	4798      	blx	r3
    8564:	2800      	cmp	r0, #0
    8566:	d053      	beq.n	8610 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8568:	9b06      	ldr	r3, [sp, #24]
    856a:	3301      	adds	r3, #1
    856c:	b2db      	uxtb	r3, r3
    856e:	001a      	movs	r2, r3
    8570:	9306      	str	r3, [sp, #24]
    8572:	4b3a      	ldr	r3, [pc, #232]	; (865c <CompactSector+0x234>)
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	4293      	cmp	r3, r2
    8578:	d89e      	bhi.n	84b8 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    857a:	4b2f      	ldr	r3, [pc, #188]	; (8638 <CompactSector+0x210>)
    857c:	881a      	ldrh	r2, [r3, #0]
    857e:	2a00      	cmp	r2, #0
    8580:	d006      	beq.n	8590 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8582:	4b3d      	ldr	r3, [pc, #244]	; (8678 <CompactSector+0x250>)
    8584:	8818      	ldrh	r0, [r3, #0]
    8586:	a914      	add	r1, sp, #80	; 0x50
    8588:	4b3e      	ldr	r3, [pc, #248]	; (8684 <CompactSector+0x25c>)
    858a:	4798      	blx	r3
    858c:	1e04      	subs	r4, r0, #0
    858e:	d040      	beq.n	8612 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8590:	4b29      	ldr	r3, [pc, #164]	; (8638 <CompactSector+0x210>)
    8592:	8818      	ldrh	r0, [r3, #0]
    8594:	2100      	movs	r1, #0
    8596:	4b3c      	ldr	r3, [pc, #240]	; (8688 <CompactSector+0x260>)
    8598:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    859a:	4b37      	ldr	r3, [pc, #220]	; (8678 <CompactSector+0x250>)
    859c:	881a      	ldrh	r2, [r3, #0]
    859e:	4b3b      	ldr	r3, [pc, #236]	; (868c <CompactSector+0x264>)
    85a0:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    85a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    85a4:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    85a6:	4b3a      	ldr	r3, [pc, #232]	; (8690 <CompactSector+0x268>)
    85a8:	4798      	blx	r3
    85aa:	1e04      	subs	r4, r0, #0
    85ac:	d031      	beq.n	8612 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    85ae:	2102      	movs	r1, #2
    85b0:	2000      	movs	r0, #0
    85b2:	4b35      	ldr	r3, [pc, #212]	; (8688 <CompactSector+0x260>)
    85b4:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    85b6:	4b37      	ldr	r3, [pc, #220]	; (8694 <CompactSector+0x26c>)
    85b8:	466a      	mov	r2, sp
    85ba:	7b12      	ldrb	r2, [r2, #12]
    85bc:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    85be:	4d36      	ldr	r5, [pc, #216]	; (8698 <CompactSector+0x270>)
    85c0:	0028      	movs	r0, r5
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <CompactSector+0x200>)
    85c4:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    85c6:	0028      	movs	r0, r5
    85c8:	4b34      	ldr	r3, [pc, #208]	; (869c <CompactSector+0x274>)
    85ca:	4798      	blx	r3

    return true;
    85cc:	e021      	b.n	8612 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    85ce:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    85d0:	1aef      	subs	r7, r5, r3
    85d2:	b2ba      	uxth	r2, r7
    85d4:	4693      	mov	fp, r2
    85d6:	4443      	add	r3, r8
    85d8:	9300      	str	r3, [sp, #0]
    85da:	0013      	movs	r3, r2
    85dc:	0032      	movs	r2, r6
    85de:	9904      	ldr	r1, [sp, #16]
    85e0:	9803      	ldr	r0, [sp, #12]
    85e2:	4f26      	ldr	r7, [pc, #152]	; (867c <CompactSector+0x254>)
    85e4:	47b8      	blx	r7
    85e6:	2800      	cmp	r0, #0
    85e8:	d012      	beq.n	8610 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    85ea:	0029      	movs	r1, r5
    85ec:	a814      	add	r0, sp, #80	; 0x50
    85ee:	4b24      	ldr	r3, [pc, #144]	; (8680 <CompactSector+0x258>)
    85f0:	4798      	blx	r3
    85f2:	2800      	cmp	r0, #0
    85f4:	d00c      	beq.n	8610 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    85f6:	1b64      	subs	r4, r4, r5
    85f8:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    85fa:	445e      	add	r6, fp
    85fc:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    85fe:	2300      	movs	r3, #0
            } while(currLength > 0);
    8600:	2c00      	cmp	r4, #0
    8602:	d0b1      	beq.n	8568 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8604:	1c25      	adds	r5, r4, #0
    8606:	454c      	cmp	r4, r9
    8608:	d9e1      	bls.n	85ce <CompactSector+0x1a6>
    860a:	466a      	mov	r2, sp
    860c:	8ad5      	ldrh	r5, [r2, #22]
    860e:	e7de      	b.n	85ce <CompactSector+0x1a6>
                return false;
    8610:	2400      	movs	r4, #0
}
    8612:	0020      	movs	r0, r4
    8614:	b055      	add	sp, #340	; 0x154
    8616:	bc3c      	pop	{r2, r3, r4, r5}
    8618:	4690      	mov	r8, r2
    861a:	4699      	mov	r9, r3
    861c:	46a2      	mov	sl, r4
    861e:	46ab      	mov	fp, r5
    8620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	20000124 	.word	0x20000124
    8628:	0000be45 	.word	0x0000be45
    862c:	20000250 	.word	0x20000250
    8630:	20000252 	.word	0x20000252
    8634:	2000010c 	.word	0x2000010c
    8638:	20000138 	.word	0x20000138
    863c:	20000280 	.word	0x20000280
    8640:	00007d15 	.word	0x00007d15
    8644:	000082c1 	.word	0x000082c1
    8648:	00018414 	.word	0x00018414
    864c:	0001859c 	.word	0x0001859c
    8650:	000003d5 	.word	0x000003d5
    8654:	00018490 	.word	0x00018490
    8658:	000166c9 	.word	0x000166c9
    865c:	20000278 	.word	0x20000278
    8660:	2000013c 	.word	0x2000013c
    8664:	20000258 	.word	0x20000258
    8668:	000080b5 	.word	0x000080b5
    866c:	0000ffff 	.word	0x0000ffff
    8670:	00007fbd 	.word	0x00007fbd
    8674:	0001679d 	.word	0x0001679d
    8678:	20000282 	.word	0x20000282
    867c:	00007ffd 	.word	0x00007ffd
    8680:	00008381 	.word	0x00008381
    8684:	000082f5 	.word	0x000082f5
    8688:	00007f81 	.word	0x00007f81
    868c:	2000027a 	.word	0x2000027a
    8690:	00008329 	.word	0x00008329
    8694:	20000016 	.word	0x20000016
    8698:	2000023c 	.word	0x2000023c
    869c:	0000beb1 	.word	0x0000beb1

000086a0 <compactSectorTimerFired>:
{
    86a0:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    86a2:	4b07      	ldr	r3, [pc, #28]	; (86c0 <compactSectorTimerFired+0x20>)
    86a4:	4798      	blx	r3
    86a6:	2800      	cmp	r0, #0
    86a8:	d000      	beq.n	86ac <compactSectorTimerFired+0xc>
}
    86aa:	bd10      	pop	{r4, pc}
      status = CompactSector();
    86ac:	4b05      	ldr	r3, [pc, #20]	; (86c4 <compactSectorTimerFired+0x24>)
    86ae:	4798      	blx	r3
      assert(false);
    86b0:	4b05      	ldr	r3, [pc, #20]	; (86c8 <compactSectorTimerFired+0x28>)
    86b2:	4a06      	ldr	r2, [pc, #24]	; (86cc <compactSectorTimerFired+0x2c>)
    86b4:	212c      	movs	r1, #44	; 0x2c
    86b6:	31ff      	adds	r1, #255	; 0xff
    86b8:	4805      	ldr	r0, [pc, #20]	; (86d0 <compactSectorTimerFired+0x30>)
    86ba:	4c06      	ldr	r4, [pc, #24]	; (86d4 <compactSectorTimerFired+0x34>)
    86bc:	47a0      	blx	r4
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	00007f65 	.word	0x00007f65
    86c4:	00008429 	.word	0x00008429
    86c8:	00018414 	.word	0x00018414
    86cc:	00018548 	.word	0x00018548
    86d0:	00018490 	.word	0x00018490
    86d4:	000166c9 	.word	0x000166c9

000086d8 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    86d8:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    86da:	4b12      	ldr	r3, [pc, #72]	; (8724 <CompactSectorIfNeeded+0x4c>)
    86dc:	881a      	ldrh	r2, [r3, #0]
    86de:	2380      	movs	r3, #128	; 0x80
    86e0:	019b      	lsls	r3, r3, #6
    86e2:	1a9b      	subs	r3, r3, r2
    86e4:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    86e6:	4283      	cmp	r3, r0
    86e8:	d303      	bcc.n	86f2 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    86ea:	4a0f      	ldr	r2, [pc, #60]	; (8728 <CompactSectorIfNeeded+0x50>)
    86ec:	4293      	cmp	r3, r2
    86ee:	d90a      	bls.n	8706 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    86f0:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    86f2:	4b0e      	ldr	r3, [pc, #56]	; (872c <CompactSectorIfNeeded+0x54>)
    86f4:	4798      	blx	r3
    86f6:	2800      	cmp	r0, #0
    86f8:	d1fa      	bne.n	86f0 <CompactSectorIfNeeded+0x18>
            assert(false);
    86fa:	4b0d      	ldr	r3, [pc, #52]	; (8730 <CompactSectorIfNeeded+0x58>)
    86fc:	4a0d      	ldr	r2, [pc, #52]	; (8734 <CompactSectorIfNeeded+0x5c>)
    86fe:	490e      	ldr	r1, [pc, #56]	; (8738 <CompactSectorIfNeeded+0x60>)
    8700:	480e      	ldr	r0, [pc, #56]	; (873c <CompactSectorIfNeeded+0x64>)
    8702:	4c0f      	ldr	r4, [pc, #60]	; (8740 <CompactSectorIfNeeded+0x68>)
    8704:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    8706:	480f      	ldr	r0, [pc, #60]	; (8744 <CompactSectorIfNeeded+0x6c>)
    8708:	4b0f      	ldr	r3, [pc, #60]	; (8748 <CompactSectorIfNeeded+0x70>)
    870a:	4798      	blx	r3
    870c:	2800      	cmp	r0, #0
    870e:	d1ef      	bne.n	86f0 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    8710:	4b0c      	ldr	r3, [pc, #48]	; (8744 <CompactSectorIfNeeded+0x6c>)
    8712:	4a0e      	ldr	r2, [pc, #56]	; (874c <CompactSectorIfNeeded+0x74>)
    8714:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    8716:	4a0e      	ldr	r2, [pc, #56]	; (8750 <CompactSectorIfNeeded+0x78>)
    8718:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    871a:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    871c:	2200      	movs	r2, #0
    871e:	731a      	strb	r2, [r3, #12]
    8720:	e7e6      	b.n	86f0 <CompactSectorIfNeeded+0x18>
    8722:	46c0      	nop			; (mov r8, r8)
    8724:	20000282 	.word	0x20000282
    8728:	0000080f 	.word	0x0000080f
    872c:	00008429 	.word	0x00008429
    8730:	00018414 	.word	0x00018414
    8734:	000185ac 	.word	0x000185ac
    8738:	0000044e 	.word	0x0000044e
    873c:	00018490 	.word	0x00018490
    8740:	000166c9 	.word	0x000166c9
    8744:	20000124 	.word	0x20000124
    8748:	0000be85 	.word	0x0000be85
    874c:	000086a1 	.word	0x000086a1
    8750:	00002710 	.word	0x00002710

00008754 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    8754:	b5f0      	push	{r4, r5, r6, r7, lr}
    8756:	46de      	mov	lr, fp
    8758:	4657      	mov	r7, sl
    875a:	464e      	mov	r6, r9
    875c:	4645      	mov	r5, r8
    875e:	b5e0      	push	{r5, r6, r7, lr}
    8760:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    8762:	4b77      	ldr	r3, [pc, #476]	; (8940 <CompactItem+0x1ec>)
    8764:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8766:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8768:	2800      	cmp	r0, #0
    876a:	d007      	beq.n	877c <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    876c:	0018      	movs	r0, r3
    876e:	b00b      	add	sp, #44	; 0x2c
    8770:	bc3c      	pop	{r2, r3, r4, r5}
    8772:	4690      	mov	r8, r2
    8774:	4699      	mov	r9, r3
    8776:	46a2      	mov	sl, r4
    8778:	46ab      	mov	fp, r5
    877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    877c:	4b71      	ldr	r3, [pc, #452]	; (8944 <CompactItem+0x1f0>)
    877e:	8818      	ldrh	r0, [r3, #0]
    8780:	2800      	cmp	r0, #0
    8782:	d146      	bne.n	8812 <CompactItem+0xbe>
    8784:	4b70      	ldr	r3, [pc, #448]	; (8948 <CompactItem+0x1f4>)
    8786:	881b      	ldrh	r3, [r3, #0]
    8788:	2b00      	cmp	r3, #0
    878a:	d100      	bne.n	878e <CompactItem+0x3a>
    878c:	e0d0      	b.n	8930 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    878e:	4b6e      	ldr	r3, [pc, #440]	; (8948 <CompactItem+0x1f4>)
    8790:	8818      	ldrh	r0, [r3, #0]
    8792:	4b6e      	ldr	r3, [pc, #440]	; (894c <CompactItem+0x1f8>)
    8794:	4798      	blx	r3
    8796:	4683      	mov	fp, r0
    if ( cache == NULL )
    8798:	2800      	cmp	r0, #0
    879a:	d100      	bne.n	879e <CompactItem+0x4a>
    879c:	e0ca      	b.n	8934 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    879e:	7882      	ldrb	r2, [r0, #2]
    87a0:	78c3      	ldrb	r3, [r0, #3]
    87a2:	021b      	lsls	r3, r3, #8
    87a4:	4313      	orrs	r3, r2
    87a6:	0019      	movs	r1, r3
    87a8:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    87aa:	4b69      	ldr	r3, [pc, #420]	; (8950 <CompactItem+0x1fc>)
    87ac:	7818      	ldrb	r0, [r3, #0]
    87ae:	2310      	movs	r3, #16
    87b0:	aa06      	add	r2, sp, #24
    87b2:	4c68      	ldr	r4, [pc, #416]	; (8954 <CompactItem+0x200>)
    87b4:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    87b6:	4b63      	ldr	r3, [pc, #396]	; (8944 <CompactItem+0x1f0>)
    87b8:	881a      	ldrh	r2, [r3, #0]
    87ba:	2a00      	cmp	r2, #0
    87bc:	d02e      	beq.n	881c <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    87be:	4b66      	ldr	r3, [pc, #408]	; (8958 <CompactItem+0x204>)
    87c0:	881b      	ldrh	r3, [r3, #0]
    87c2:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    87c4:	ab06      	add	r3, sp, #24
    87c6:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    87c8:	a906      	add	r1, sp, #24
    87ca:	810a      	strh	r2, [r1, #8]
    87cc:	1c19      	adds	r1, r3, #0
    87ce:	4293      	cmp	r3, r2
    87d0:	d900      	bls.n	87d4 <CompactItem+0x80>
    87d2:	1c11      	adds	r1, r2, #0
    87d4:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    87d6:	aa06      	add	r2, sp, #24
    87d8:	2100      	movs	r1, #0
    87da:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    87dc:	8910      	ldrh	r0, [r2, #8]
    87de:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    87e0:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    87e2:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    87e4:	001c      	movs	r4, r3
    87e6:	3410      	adds	r4, #16
    87e8:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    87ea:	495c      	ldr	r1, [pc, #368]	; (895c <CompactItem+0x208>)
    87ec:	ca61      	ldmia	r2!, {r0, r5, r6}
    87ee:	c161      	stmia	r1!, {r0, r5, r6}
    87f0:	6812      	ldr	r2, [r2, #0]
    87f2:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    87f4:	2280      	movs	r2, #128	; 0x80
    87f6:	0052      	lsls	r2, r2, #1
    87f8:	4294      	cmp	r4, r2
    87fa:	d939      	bls.n	8870 <CompactItem+0x11c>
    87fc:	2600      	movs	r6, #0
    87fe:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8800:	2280      	movs	r2, #128	; 0x80
    8802:	0052      	lsls	r2, r2, #1
    8804:	4691      	mov	r9, r2
    8806:	4669      	mov	r1, sp
    8808:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    880a:	4a51      	ldr	r2, [pc, #324]	; (8950 <CompactItem+0x1fc>)
    880c:	4692      	mov	sl, r2
    880e:	001a      	movs	r2, r3
    8810:	e088      	b.n	8924 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    8812:	3010      	adds	r0, #16
    8814:	b280      	uxth	r0, r0
    8816:	4b52      	ldr	r3, [pc, #328]	; (8960 <CompactItem+0x20c>)
    8818:	4798      	blx	r3
    881a:	e7b8      	b.n	878e <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    881c:	ab06      	add	r3, sp, #24
    881e:	8918      	ldrh	r0, [r3, #8]
    8820:	3010      	adds	r0, #16
    8822:	b280      	uxth	r0, r0
    8824:	4b4e      	ldr	r3, [pc, #312]	; (8960 <CompactItem+0x20c>)
    8826:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    8828:	4b47      	ldr	r3, [pc, #284]	; (8948 <CompactItem+0x1f4>)
    882a:	8818      	ldrh	r0, [r3, #0]
    882c:	4b47      	ldr	r3, [pc, #284]	; (894c <CompactItem+0x1f8>)
    882e:	4798      	blx	r3
    8830:	4683      	mov	fp, r0
        assert(cache != NULL);
    8832:	2800      	cmp	r0, #0
    8834:	d015      	beq.n	8862 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    8836:	7882      	ldrb	r2, [r0, #2]
    8838:	78c3      	ldrb	r3, [r0, #3]
    883a:	021b      	lsls	r3, r3, #8
    883c:	4313      	orrs	r3, r2
    883e:	0019      	movs	r1, r3
    8840:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8842:	ac06      	add	r4, sp, #24
    8844:	4b42      	ldr	r3, [pc, #264]	; (8950 <CompactItem+0x1fc>)
    8846:	7818      	ldrb	r0, [r3, #0]
    8848:	2310      	movs	r3, #16
    884a:	0022      	movs	r2, r4
    884c:	4d41      	ldr	r5, [pc, #260]	; (8954 <CompactItem+0x200>)
    884e:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8850:	4b41      	ldr	r3, [pc, #260]	; (8958 <CompactItem+0x204>)
    8852:	881b      	ldrh	r3, [r3, #0]
    8854:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8856:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    8858:	4a3a      	ldr	r2, [pc, #232]	; (8944 <CompactItem+0x1f0>)
    885a:	8812      	ldrh	r2, [r2, #0]
    885c:	2a00      	cmp	r2, #0
    885e:	d0ba      	beq.n	87d6 <CompactItem+0x82>
    8860:	e7b2      	b.n	87c8 <CompactItem+0x74>
        assert(cache != NULL);
    8862:	4b40      	ldr	r3, [pc, #256]	; (8964 <CompactItem+0x210>)
    8864:	4a40      	ldr	r2, [pc, #256]	; (8968 <CompactItem+0x214>)
    8866:	2191      	movs	r1, #145	; 0x91
    8868:	00c9      	lsls	r1, r1, #3
    886a:	4840      	ldr	r0, [pc, #256]	; (896c <CompactItem+0x218>)
    886c:	4c40      	ldr	r4, [pc, #256]	; (8970 <CompactItem+0x21c>)
    886e:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8870:	4a37      	ldr	r2, [pc, #220]	; (8950 <CompactItem+0x1fc>)
    8872:	7810      	ldrb	r0, [r2, #0]
    8874:	4a39      	ldr	r2, [pc, #228]	; (895c <CompactItem+0x208>)
    8876:	3210      	adds	r2, #16
    8878:	9200      	str	r2, [sp, #0]
    887a:	2200      	movs	r2, #0
    887c:	9903      	ldr	r1, [sp, #12]
    887e:	4c3d      	ldr	r4, [pc, #244]	; (8974 <CompactItem+0x220>)
    8880:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    8882:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8884:	2800      	cmp	r0, #0
    8886:	d100      	bne.n	888a <CompactItem+0x136>
    8888:	e770      	b.n	876c <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    888a:	4934      	ldr	r1, [pc, #208]	; (895c <CompactItem+0x208>)
    888c:	ab06      	add	r3, sp, #24
    888e:	000a      	movs	r2, r1
    8890:	0018      	movs	r0, r3
    8892:	c870      	ldmia	r0!, {r4, r5, r6}
    8894:	c270      	stmia	r2!, {r4, r5, r6}
    8896:	6800      	ldr	r0, [r0, #0]
    8898:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    889a:	88da      	ldrh	r2, [r3, #6]
    889c:	3210      	adds	r2, #16
    889e:	b292      	uxth	r2, r2
    88a0:	4b2d      	ldr	r3, [pc, #180]	; (8958 <CompactItem+0x204>)
    88a2:	8818      	ldrh	r0, [r3, #0]
    88a4:	4b34      	ldr	r3, [pc, #208]	; (8978 <CompactItem+0x224>)
    88a6:	4798      	blx	r3
            return false;
    88a8:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    88aa:	2800      	cmp	r0, #0
    88ac:	d100      	bne.n	88b0 <CompactItem+0x15c>
    88ae:	e75d      	b.n	876c <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    88b0:	ab06      	add	r3, sp, #24
    88b2:	88d8      	ldrh	r0, [r3, #6]
    88b4:	3010      	adds	r0, #16
    88b6:	b280      	uxth	r0, r0
    88b8:	2102      	movs	r1, #2
    88ba:	4b30      	ldr	r3, [pc, #192]	; (897c <CompactItem+0x228>)
    88bc:	4798      	blx	r3
    s_compactItemId = 0u;
    88be:	2300      	movs	r3, #0
    88c0:	4a21      	ldr	r2, [pc, #132]	; (8948 <CompactItem+0x1f4>)
    88c2:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    88c4:	4a1f      	ldr	r2, [pc, #124]	; (8944 <CompactItem+0x1f0>)
    88c6:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    88c8:	465b      	mov	r3, fp
    88ca:	9905      	ldr	r1, [sp, #20]
    88cc:	7099      	strb	r1, [r3, #2]
    88ce:	0a0b      	lsrs	r3, r1, #8
    88d0:	465a      	mov	r2, fp
    88d2:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    88d4:	2300      	movs	r3, #0
    88d6:	e749      	b.n	876c <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    88d8:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    88da:	1aaf      	subs	r7, r5, r2
    88dc:	b2bb      	uxth	r3, r7
    88de:	0019      	movs	r1, r3
    88e0:	4653      	mov	r3, sl
    88e2:	7818      	ldrb	r0, [r3, #0]
    88e4:	4b1d      	ldr	r3, [pc, #116]	; (895c <CompactItem+0x208>)
    88e6:	189b      	adds	r3, r3, r2
    88e8:	9300      	str	r3, [sp, #0]
    88ea:	9102      	str	r1, [sp, #8]
    88ec:	000b      	movs	r3, r1
    88ee:	0032      	movs	r2, r6
    88f0:	9903      	ldr	r1, [sp, #12]
    88f2:	4f20      	ldr	r7, [pc, #128]	; (8974 <CompactItem+0x220>)
    88f4:	47b8      	blx	r7
    88f6:	2800      	cmp	r0, #0
    88f8:	d01e      	beq.n	8938 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    88fa:	4b17      	ldr	r3, [pc, #92]	; (8958 <CompactItem+0x204>)
    88fc:	8818      	ldrh	r0, [r3, #0]
    88fe:	002a      	movs	r2, r5
    8900:	4916      	ldr	r1, [pc, #88]	; (895c <CompactItem+0x208>)
    8902:	4b1d      	ldr	r3, [pc, #116]	; (8978 <CompactItem+0x224>)
    8904:	4798      	blx	r3
    8906:	2800      	cmp	r0, #0
    8908:	d018      	beq.n	893c <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    890a:	2102      	movs	r1, #2
    890c:	0028      	movs	r0, r5
    890e:	4b1b      	ldr	r3, [pc, #108]	; (897c <CompactItem+0x228>)
    8910:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    8912:	1b64      	subs	r4, r4, r5
    8914:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    8916:	9902      	ldr	r1, [sp, #8]
    8918:	468c      	mov	ip, r1
    891a:	4466      	add	r6, ip
    891c:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    891e:	2200      	movs	r2, #0
        } while(currLength > 0);
    8920:	2c00      	cmp	r4, #0
    8922:	d0cc      	beq.n	88be <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8924:	1c25      	adds	r5, r4, #0
    8926:	454c      	cmp	r4, r9
    8928:	d9d6      	bls.n	88d8 <CompactItem+0x184>
    892a:	466b      	mov	r3, sp
    892c:	8a5d      	ldrh	r5, [r3, #18]
    892e:	e7d3      	b.n	88d8 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    8930:	2300      	movs	r3, #0
    8932:	e71b      	b.n	876c <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    8934:	2300      	movs	r3, #0
    8936:	e719      	b.n	876c <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    8938:	2301      	movs	r3, #1
    893a:	e717      	b.n	876c <CompactItem+0x18>
                return false;
    893c:	2300      	movs	r3, #0
    893e:	e715      	b.n	876c <CompactItem+0x18>
    8940:	00007f65 	.word	0x00007f65
    8944:	20000252 	.word	0x20000252
    8948:	20000250 	.word	0x20000250
    894c:	0000815d 	.word	0x0000815d
    8950:	20000280 	.word	0x20000280
    8954:	00007d15 	.word	0x00007d15
    8958:	20000282 	.word	0x20000282
    895c:	2000013c 	.word	0x2000013c
    8960:	000086d9 	.word	0x000086d9
    8964:	00018404 	.word	0x00018404
    8968:	000185c4 	.word	0x000185c4
    896c:	00018490 	.word	0x00018490
    8970:	000166c9 	.word	0x000166c9
    8974:	00007ffd 	.word	0x00007ffd
    8978:	000082f5 	.word	0x000082f5
    897c:	00007f81 	.word	0x00007f81

00008980 <compactItemTimerFired>:
{
    8980:	b510      	push	{r4, lr}
    (void)CompactItem();
    8982:	4b01      	ldr	r3, [pc, #4]	; (8988 <compactItemTimerFired+0x8>)
    8984:	4798      	blx	r3
}
    8986:	bd10      	pop	{r4, pc}
    8988:	00008755 	.word	0x00008755

0000898c <WriteDataBlockAndHeader>:
{
    898c:	b5f0      	push	{r4, r5, r6, r7, lr}
    898e:	46de      	mov	lr, fp
    8990:	4657      	mov	r7, sl
    8992:	464e      	mov	r6, r9
    8994:	4645      	mov	r5, r8
    8996:	b5e0      	push	{r5, r6, r7, lr}
    8998:	b083      	sub	sp, #12
    899a:	0004      	movs	r4, r0
    899c:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    899e:	4d46      	ldr	r5, [pc, #280]	; (8ab8 <WriteDataBlockAndHeader+0x12c>)
    89a0:	2280      	movs	r2, #128	; 0x80
    89a2:	0052      	lsls	r2, r2, #1
    89a4:	21ff      	movs	r1, #255	; 0xff
    89a6:	0028      	movs	r0, r5
    89a8:	4b44      	ldr	r3, [pc, #272]	; (8abc <WriteDataBlockAndHeader+0x130>)
    89aa:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    89ac:	4e44      	ldr	r6, [pc, #272]	; (8ac0 <WriteDataBlockAndHeader+0x134>)
    89ae:	79a3      	ldrb	r3, [r4, #6]
    89b0:	79e1      	ldrb	r1, [r4, #7]
    89b2:	0209      	lsls	r1, r1, #8
    89b4:	4319      	orrs	r1, r3
    89b6:	0032      	movs	r2, r6
    89b8:	4650      	mov	r0, sl
    89ba:	4f42      	ldr	r7, [pc, #264]	; (8ac4 <WriteDataBlockAndHeader+0x138>)
    89bc:	47b8      	blx	r7
    89be:	7020      	strb	r0, [r4, #0]
    89c0:	0a00      	lsrs	r0, r0, #8
    89c2:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    89c4:	0032      	movs	r2, r6
    89c6:	210e      	movs	r1, #14
    89c8:	0020      	movs	r0, r4
    89ca:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    89cc:	73a0      	strb	r0, [r4, #14]
    89ce:	0a00      	lsrs	r0, r0, #8
    89d0:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    89d2:	2210      	movs	r2, #16
    89d4:	0021      	movs	r1, r4
    89d6:	0028      	movs	r0, r5
    89d8:	4b3b      	ldr	r3, [pc, #236]	; (8ac8 <WriteDataBlockAndHeader+0x13c>)
    89da:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    89dc:	79a3      	ldrb	r3, [r4, #6]
    89de:	79e2      	ldrb	r2, [r4, #7]
    89e0:	0212      	lsls	r2, r2, #8
    89e2:	431a      	orrs	r2, r3
    89e4:	0015      	movs	r5, r2
    89e6:	3510      	adds	r5, #16
    89e8:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    89ea:	4653      	mov	r3, sl
    89ec:	2b00      	cmp	r3, #0
    89ee:	d012      	beq.n	8a16 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    89f0:	2380      	movs	r3, #128	; 0x80
    89f2:	005b      	lsls	r3, r3, #1
    89f4:	429d      	cmp	r5, r3
    89f6:	d909      	bls.n	8a0c <WriteDataBlockAndHeader+0x80>
    89f8:	2600      	movs	r6, #0
    89fa:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    89fc:	2380      	movs	r3, #128	; 0x80
    89fe:	005b      	lsls	r3, r3, #1
    8a00:	469b      	mov	fp, r3
    8a02:	466a      	mov	r2, sp
    8a04:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8a06:	4b2c      	ldr	r3, [pc, #176]	; (8ab8 <WriteDataBlockAndHeader+0x12c>)
    8a08:	4699      	mov	r9, r3
    8a0a:	e045      	b.n	8a98 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    8a0c:	4651      	mov	r1, sl
    8a0e:	482a      	ldr	r0, [pc, #168]	; (8ab8 <WriteDataBlockAndHeader+0x12c>)
    8a10:	3010      	adds	r0, #16
    8a12:	4b2d      	ldr	r3, [pc, #180]	; (8ac8 <WriteDataBlockAndHeader+0x13c>)
    8a14:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    8a16:	79a3      	ldrb	r3, [r4, #6]
    8a18:	79e2      	ldrb	r2, [r4, #7]
    8a1a:	0212      	lsls	r2, r2, #8
    8a1c:	431a      	orrs	r2, r3
    8a1e:	3210      	adds	r2, #16
    8a20:	2380      	movs	r3, #128	; 0x80
    8a22:	005b      	lsls	r3, r3, #1
    8a24:	429a      	cmp	r2, r3
    8a26:	dd00      	ble.n	8a2a <WriteDataBlockAndHeader+0x9e>
    8a28:	001a      	movs	r2, r3
    8a2a:	b292      	uxth	r2, r2
    8a2c:	4b27      	ldr	r3, [pc, #156]	; (8acc <WriteDataBlockAndHeader+0x140>)
    8a2e:	8818      	ldrh	r0, [r3, #0]
    8a30:	4921      	ldr	r1, [pc, #132]	; (8ab8 <WriteDataBlockAndHeader+0x12c>)
    8a32:	4b27      	ldr	r3, [pc, #156]	; (8ad0 <WriteDataBlockAndHeader+0x144>)
    8a34:	4798      	blx	r3
    8a36:	4680      	mov	r8, r0
    8a38:	2800      	cmp	r0, #0
    8a3a:	d033      	beq.n	8aa4 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    8a3c:	79a3      	ldrb	r3, [r4, #6]
    8a3e:	79e0      	ldrb	r0, [r4, #7]
    8a40:	0200      	lsls	r0, r0, #8
    8a42:	4318      	orrs	r0, r3
    8a44:	3010      	adds	r0, #16
    8a46:	b280      	uxth	r0, r0
    8a48:	2102      	movs	r1, #2
    8a4a:	4b22      	ldr	r3, [pc, #136]	; (8ad4 <WriteDataBlockAndHeader+0x148>)
    8a4c:	4798      	blx	r3
}
    8a4e:	4640      	mov	r0, r8
    8a50:	b003      	add	sp, #12
    8a52:	bc3c      	pop	{r2, r3, r4, r5}
    8a54:	4690      	mov	r8, r2
    8a56:	4699      	mov	r9, r3
    8a58:	46a2      	mov	sl, r4
    8a5a:	46ab      	mov	fp, r5
    8a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8a5e:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8a60:	464b      	mov	r3, r9
    8a62:	19d8      	adds	r0, r3, r7
    8a64:	1be2      	subs	r2, r4, r7
    8a66:	4653      	mov	r3, sl
    8a68:	1999      	adds	r1, r3, r6
    8a6a:	4b17      	ldr	r3, [pc, #92]	; (8ac8 <WriteDataBlockAndHeader+0x13c>)
    8a6c:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    8a6e:	4b17      	ldr	r3, [pc, #92]	; (8acc <WriteDataBlockAndHeader+0x140>)
    8a70:	8818      	ldrh	r0, [r3, #0]
    8a72:	0022      	movs	r2, r4
    8a74:	4649      	mov	r1, r9
    8a76:	4b16      	ldr	r3, [pc, #88]	; (8ad0 <WriteDataBlockAndHeader+0x144>)
    8a78:	4798      	blx	r3
    8a7a:	4680      	mov	r8, r0
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d0e6      	beq.n	8a4e <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    8a80:	2102      	movs	r1, #2
    8a82:	0020      	movs	r0, r4
    8a84:	4b13      	ldr	r3, [pc, #76]	; (8ad4 <WriteDataBlockAndHeader+0x148>)
    8a86:	4798      	blx	r3
                currentLength -= bytesToCommit;
    8a88:	1b2d      	subs	r5, r5, r4
    8a8a:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    8a8c:	1be4      	subs	r4, r4, r7
    8a8e:	1936      	adds	r6, r6, r4
    8a90:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    8a92:	2700      	movs	r7, #0
            } while(currentLength > 0);
    8a94:	2d00      	cmp	r5, #0
    8a96:	d0da      	beq.n	8a4e <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8a98:	1c2c      	adds	r4, r5, #0
    8a9a:	455d      	cmp	r5, fp
    8a9c:	d9df      	bls.n	8a5e <WriteDataBlockAndHeader+0xd2>
    8a9e:	466b      	mov	r3, sp
    8aa0:	88dc      	ldrh	r4, [r3, #6]
    8aa2:	e7dc      	b.n	8a5e <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    8aa4:	79a3      	ldrb	r3, [r4, #6]
    8aa6:	79e0      	ldrb	r0, [r4, #7]
    8aa8:	0200      	lsls	r0, r0, #8
    8aaa:	4318      	orrs	r0, r3
    8aac:	3010      	adds	r0, #16
    8aae:	b280      	uxth	r0, r0
    8ab0:	2102      	movs	r1, #2
    8ab2:	4b08      	ldr	r3, [pc, #32]	; (8ad4 <WriteDataBlockAndHeader+0x148>)
    8ab4:	4798      	blx	r3
        return false;
    8ab6:	e7ca      	b.n	8a4e <WriteDataBlockAndHeader+0xc2>
    8ab8:	2000013c 	.word	0x2000013c
    8abc:	0001679d 	.word	0x0001679d
    8ac0:	0000ffff 	.word	0x0000ffff
    8ac4:	00007fbd 	.word	0x00007fbd
    8ac8:	0001678b 	.word	0x0001678b
    8acc:	20000282 	.word	0x20000282
    8ad0:	000082f5 	.word	0x000082f5
    8ad4:	00007f81 	.word	0x00007f81

00008ad8 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    8ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ada:	46ce      	mov	lr, r9
    8adc:	4647      	mov	r7, r8
    8ade:	b580      	push	{r7, lr}
    8ae0:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    8ae2:	2200      	movs	r2, #0
    8ae4:	4bb3      	ldr	r3, [pc, #716]	; (8db4 <S_Nv_EarlyInit+0x2dc>)
    8ae6:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    8ae8:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    8aea:	2301      	movs	r3, #1
    8aec:	425b      	negs	r3, r3
    8aee:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    8af0:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8af2:	4eb1      	ldr	r6, [pc, #708]	; (8db8 <S_Nv_EarlyInit+0x2e0>)
    8af4:	2312      	movs	r3, #18
    8af6:	aa0b      	add	r2, sp, #44	; 0x2c
    8af8:	2100      	movs	r1, #0
    8afa:	0020      	movs	r0, r4
    8afc:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    8afe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b02:	9301      	str	r3, [sp, #4]
    8b04:	406b      	eors	r3, r5
    8b06:	3301      	adds	r3, #1
    8b08:	d01d      	beq.n	8b46 <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    8b0a:	3401      	adds	r4, #1
    8b0c:	b2e4      	uxtb	r4, r4
    8b0e:	2c02      	cmp	r4, #2
    8b10:	d1f0      	bne.n	8af4 <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    8b12:	2fff      	cmp	r7, #255	; 0xff
    8b14:	d057      	beq.n	8bc6 <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    8b16:	4ba9      	ldr	r3, [pc, #676]	; (8dbc <S_Nv_EarlyInit+0x2e4>)
    8b18:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    8b1a:	4643      	mov	r3, r8
    8b1c:	2b01      	cmp	r3, #1
    8b1e:	d100      	bne.n	8b22 <S_Nv_EarlyInit+0x4a>
    8b20:	e07b      	b.n	8c1a <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    8b22:	4643      	mov	r3, r8
    8b24:	2b02      	cmp	r3, #2
    8b26:	d16a      	bne.n	8bfe <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    8b28:	2280      	movs	r2, #128	; 0x80
    8b2a:	0052      	lsls	r2, r2, #1
    8b2c:	4ba4      	ldr	r3, [pc, #656]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
    8b2e:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    8b30:	2312      	movs	r3, #18
    8b32:	aa06      	add	r2, sp, #24
    8b34:	2100      	movs	r1, #0
    8b36:	0038      	movs	r0, r7
    8b38:	4c9f      	ldr	r4, [pc, #636]	; (8db8 <S_Nv_EarlyInit+0x2e0>)
    8b3a:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    8b3c:	4da0      	ldr	r5, [pc, #640]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    8b3e:	4ba1      	ldr	r3, [pc, #644]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8b40:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b42:	002e      	movs	r6, r5
    8b44:	e10f      	b.n	8d66 <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    8b46:	ab02      	add	r3, sp, #8
    8b48:	2226      	movs	r2, #38	; 0x26
    8b4a:	189b      	adds	r3, r3, r2
    8b4c:	781b      	ldrb	r3, [r3, #0]
    8b4e:	2b41      	cmp	r3, #65	; 0x41
    8b50:	d1db      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    8b52:	ab02      	add	r3, sp, #8
    8b54:	3201      	adds	r2, #1
    8b56:	189b      	adds	r3, r3, r2
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	2b54      	cmp	r3, #84	; 0x54
    8b5c:	d1d5      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    8b5e:	ab02      	add	r3, sp, #8
    8b60:	3201      	adds	r2, #1
    8b62:	189b      	adds	r3, r3, r2
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	2b53      	cmp	r3, #83	; 0x53
    8b68:	d1cf      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    8b6a:	ab02      	add	r3, sp, #8
    8b6c:	3201      	adds	r2, #1
    8b6e:	189b      	adds	r3, r3, r2
    8b70:	781b      	ldrb	r3, [r3, #0]
    8b72:	2b4e      	cmp	r3, #78	; 0x4e
    8b74:	d1c9      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    8b76:	ab02      	add	r3, sp, #8
    8b78:	3201      	adds	r2, #1
    8b7a:	189b      	adds	r3, r3, r2
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	2b76      	cmp	r3, #118	; 0x76
    8b80:	d1c3      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    8b82:	ab02      	add	r3, sp, #8
    8b84:	3201      	adds	r2, #1
    8b86:	189b      	adds	r3, r3, r2
    8b88:	781b      	ldrb	r3, [r3, #0]
    8b8a:	2b31      	cmp	r3, #49	; 0x31
    8b8c:	d106      	bne.n	8b9c <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    8b8e:	ab02      	add	r3, sp, #8
    8b90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8b92:	2b00      	cmp	r3, #0
    8b94:	d1b9      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    8b96:	2301      	movs	r3, #1
    8b98:	4698      	mov	r8, r3
    8b9a:	e00f      	b.n	8bbc <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    8b9c:	2b32      	cmp	r3, #50	; 0x32
    8b9e:	d1b4      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8ba0:	4a89      	ldr	r2, [pc, #548]	; (8dc8 <S_Nv_EarlyInit+0x2f0>)
    8ba2:	2110      	movs	r1, #16
    8ba4:	2026      	movs	r0, #38	; 0x26
    8ba6:	ab02      	add	r3, sp, #8
    8ba8:	469c      	mov	ip, r3
    8baa:	4460      	add	r0, ip
    8bac:	4b87      	ldr	r3, [pc, #540]	; (8dcc <S_Nv_EarlyInit+0x2f4>)
    8bae:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    8bb0:	ab02      	add	r3, sp, #8
    8bb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8bb4:	4283      	cmp	r3, r0
    8bb6:	d1a8      	bne.n	8b0a <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    8bb8:	2302      	movs	r3, #2
    8bba:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    8bbc:	454d      	cmp	r5, r9
    8bbe:	d2a4      	bcs.n	8b0a <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    8bc0:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    8bc2:	0027      	movs	r7, r4
    8bc4:	e7a1      	b.n	8b0a <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    8bc6:	2200      	movs	r2, #0
    8bc8:	4b7c      	ldr	r3, [pc, #496]	; (8dbc <S_Nv_EarlyInit+0x2e4>)
    8bca:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    8bcc:	4c80      	ldr	r4, [pc, #512]	; (8dd0 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    8bce:	4e81      	ldr	r6, [pc, #516]	; (8dd4 <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    8bd0:	4d81      	ldr	r5, [pc, #516]	; (8dd8 <S_Nv_EarlyInit+0x300>)
    8bd2:	e006      	b.n	8be2 <S_Nv_EarlyInit+0x10a>
            s_sector++;
    8bd4:	4a79      	ldr	r2, [pc, #484]	; (8dbc <S_Nv_EarlyInit+0x2e4>)
    8bd6:	7813      	ldrb	r3, [r2, #0]
    8bd8:	3301      	adds	r3, #1
    8bda:	b2db      	uxtb	r3, r3
    8bdc:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8bde:	2b01      	cmp	r3, #1
    8be0:	d815      	bhi.n	8c0e <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    8be2:	47a0      	blx	r4
    8be4:	2800      	cmp	r0, #0
    8be6:	d0f5      	beq.n	8bd4 <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    8be8:	2301      	movs	r3, #1
    8bea:	425b      	negs	r3, r3
    8bec:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    8bee:	2002      	movs	r0, #2
    8bf0:	4240      	negs	r0, r0
    8bf2:	47a8      	blx	r5
    8bf4:	2800      	cmp	r0, #0
    8bf6:	d0ed      	beq.n	8bd4 <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    8bf8:	2200      	movs	r2, #0
    8bfa:	4b6e      	ldr	r3, [pc, #440]	; (8db4 <S_Nv_EarlyInit+0x2dc>)
    8bfc:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    8bfe:	2201      	movs	r2, #1
    8c00:	4b76      	ldr	r3, [pc, #472]	; (8ddc <S_Nv_EarlyInit+0x304>)
    8c02:	701a      	strb	r2, [r3, #0]
}
    8c04:	b011      	add	sp, #68	; 0x44
    8c06:	bc0c      	pop	{r2, r3}
    8c08:	4690      	mov	r8, r2
    8c0a:	4699      	mov	r9, r3
    8c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    8c0e:	4b74      	ldr	r3, [pc, #464]	; (8de0 <S_Nv_EarlyInit+0x308>)
    8c10:	4a74      	ldr	r2, [pc, #464]	; (8de4 <S_Nv_EarlyInit+0x30c>)
    8c12:	4975      	ldr	r1, [pc, #468]	; (8de8 <S_Nv_EarlyInit+0x310>)
    8c14:	4875      	ldr	r0, [pc, #468]	; (8dec <S_Nv_EarlyInit+0x314>)
    8c16:	4c76      	ldr	r4, [pc, #472]	; (8df0 <S_Nv_EarlyInit+0x318>)
    8c18:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    8c1a:	2210      	movs	r2, #16
    8c1c:	4b68      	ldr	r3, [pc, #416]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
    8c1e:	801a      	strh	r2, [r3, #0]
    8c20:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8c22:	4e66      	ldr	r6, [pc, #408]	; (8dbc <S_Nv_EarlyInit+0x2e4>)
    8c24:	4d64      	ldr	r5, [pc, #400]	; (8db8 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    8c26:	4f69      	ldr	r7, [pc, #420]	; (8dcc <S_Nv_EarlyInit+0x2f4>)
    8c28:	e072      	b.n	8d10 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    8c2a:	ab06      	add	r3, sp, #24
    8c2c:	881b      	ldrh	r3, [r3, #0]
    8c2e:	2b00      	cmp	r3, #0
    8c30:	d007      	beq.n	8c42 <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    8c32:	ab06      	add	r3, sp, #24
    8c34:	88d8      	ldrh	r0, [r3, #6]
    8c36:	3010      	adds	r0, #16
    8c38:	b280      	uxth	r0, r0
    8c3a:	2101      	movs	r1, #1
    8c3c:	4b61      	ldr	r3, [pc, #388]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8c3e:	4798      	blx	r3
    8c40:	e061      	b.n	8d06 <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    8c42:	ab06      	add	r3, sp, #24
    8c44:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    8c46:	0020      	movs	r0, r4
    8c48:	4b6a      	ldr	r3, [pc, #424]	; (8df4 <S_Nv_EarlyInit+0x31c>)
    8c4a:	4798      	blx	r3
                if (cache == NULL)
    8c4c:	2800      	cmp	r0, #0
    8c4e:	d010      	beq.n	8c72 <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    8c50:	4b5b      	ldr	r3, [pc, #364]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
    8c52:	781a      	ldrb	r2, [r3, #0]
    8c54:	7082      	strb	r2, [r0, #2]
    8c56:	785b      	ldrb	r3, [r3, #1]
    8c58:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    8c5a:	ab06      	add	r3, sp, #24
    8c5c:	891b      	ldrh	r3, [r3, #8]
    8c5e:	2b00      	cmp	r3, #0
    8c60:	d00b      	beq.n	8c7a <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    8c62:	ab06      	add	r3, sp, #24
    8c64:	88d8      	ldrh	r0, [r3, #6]
    8c66:	3010      	adds	r0, #16
    8c68:	b280      	uxth	r0, r0
    8c6a:	2101      	movs	r1, #1
    8c6c:	4b55      	ldr	r3, [pc, #340]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8c6e:	4798      	blx	r3
    8c70:	e049      	b.n	8d06 <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    8c72:	0020      	movs	r0, r4
    8c74:	4b60      	ldr	r3, [pc, #384]	; (8df8 <S_Nv_EarlyInit+0x320>)
    8c76:	4798      	blx	r3
    8c78:	e7ea      	b.n	8c50 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    8c7a:	0020      	movs	r0, r4
    8c7c:	4b5f      	ldr	r3, [pc, #380]	; (8dfc <S_Nv_EarlyInit+0x324>)
    8c7e:	4798      	blx	r3
    8c80:	e7ef      	b.n	8c62 <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    8c82:	4b4f      	ldr	r3, [pc, #316]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
    8c84:	8819      	ldrh	r1, [r3, #0]
    8c86:	4b4d      	ldr	r3, [pc, #308]	; (8dbc <S_Nv_EarlyInit+0x2e4>)
    8c88:	7818      	ldrb	r0, [r3, #0]
    8c8a:	aa02      	add	r2, sp, #8
    8c8c:	4b5c      	ldr	r3, [pc, #368]	; (8e00 <S_Nv_EarlyInit+0x328>)
    8c8e:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    8c90:	ab02      	add	r3, sp, #8
    8c92:	881b      	ldrh	r3, [r3, #0]
    8c94:	4283      	cmp	r3, r0
    8c96:	d007      	beq.n	8ca8 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    8c98:	ab02      	add	r3, sp, #8
    8c9a:	88d8      	ldrh	r0, [r3, #6]
    8c9c:	3010      	adds	r0, #16
    8c9e:	b280      	uxth	r0, r0
    8ca0:	0021      	movs	r1, r4
    8ca2:	4b48      	ldr	r3, [pc, #288]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8ca4:	4798      	blx	r3
    8ca6:	e05e      	b.n	8d66 <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    8ca8:	ab02      	add	r3, sp, #8
    8caa:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    8cac:	0038      	movs	r0, r7
    8cae:	4b51      	ldr	r3, [pc, #324]	; (8df4 <S_Nv_EarlyInit+0x31c>)
    8cb0:	4798      	blx	r3
                    if (cache == NULL)
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d010      	beq.n	8cd8 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    8cb6:	4b42      	ldr	r3, [pc, #264]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
    8cb8:	781a      	ldrb	r2, [r3, #0]
    8cba:	7082      	strb	r2, [r0, #2]
    8cbc:	785b      	ldrb	r3, [r3, #1]
    8cbe:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    8cc0:	ab02      	add	r3, sp, #8
    8cc2:	891b      	ldrh	r3, [r3, #8]
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d00b      	beq.n	8ce0 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    8cc8:	ab02      	add	r3, sp, #8
    8cca:	88d8      	ldrh	r0, [r3, #6]
    8ccc:	3010      	adds	r0, #16
    8cce:	b280      	uxth	r0, r0
    8cd0:	0021      	movs	r1, r4
    8cd2:	4b3c      	ldr	r3, [pc, #240]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8cd4:	4798      	blx	r3
    8cd6:	e046      	b.n	8d66 <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    8cd8:	0038      	movs	r0, r7
    8cda:	4b47      	ldr	r3, [pc, #284]	; (8df8 <S_Nv_EarlyInit+0x320>)
    8cdc:	4798      	blx	r3
    8cde:	e7ea      	b.n	8cb6 <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    8ce0:	0038      	movs	r0, r7
    8ce2:	4b46      	ldr	r3, [pc, #280]	; (8dfc <S_Nv_EarlyInit+0x324>)
    8ce4:	4798      	blx	r3
    8ce6:	e7ef      	b.n	8cc8 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    8ce8:	ab06      	add	r3, sp, #24
    8cea:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    8cec:	4a36      	ldr	r2, [pc, #216]	; (8dc8 <S_Nv_EarlyInit+0x2f0>)
    8cee:	210c      	movs	r1, #12
    8cf0:	2012      	movs	r0, #18
    8cf2:	ab02      	add	r3, sp, #8
    8cf4:	469c      	mov	ip, r3
    8cf6:	4460      	add	r0, ip
    8cf8:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    8cfa:	4284      	cmp	r4, r0
    8cfc:	d095      	beq.n	8c2a <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    8cfe:	2101      	movs	r1, #1
    8d00:	2010      	movs	r0, #16
    8d02:	4b30      	ldr	r3, [pc, #192]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8d04:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    8d06:	4b2e      	ldr	r3, [pc, #184]	; (8dc0 <S_Nv_EarlyInit+0x2e8>)
    8d08:	8819      	ldrh	r1, [r3, #0]
    8d0a:	4b3e      	ldr	r3, [pc, #248]	; (8e04 <S_Nv_EarlyInit+0x32c>)
    8d0c:	4299      	cmp	r1, r3
    8d0e:	d812      	bhi.n	8d36 <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8d10:	ac06      	add	r4, sp, #24
    8d12:	7830      	ldrb	r0, [r6, #0]
    8d14:	2310      	movs	r3, #16
    8d16:	0022      	movs	r2, r4
    8d18:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    8d1a:	7823      	ldrb	r3, [r4, #0]
    8d1c:	2bff      	cmp	r3, #255	; 0xff
    8d1e:	d1e3      	bne.n	8ce8 <S_Nv_EarlyInit+0x210>
    8d20:	ab06      	add	r3, sp, #24
    8d22:	211f      	movs	r1, #31
    8d24:	aa02      	add	r2, sp, #8
    8d26:	4694      	mov	ip, r2
    8d28:	4461      	add	r1, ip
    8d2a:	785a      	ldrb	r2, [r3, #1]
    8d2c:	2aff      	cmp	r2, #255	; 0xff
    8d2e:	d1db      	bne.n	8ce8 <S_Nv_EarlyInit+0x210>
    8d30:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    8d32:	428b      	cmp	r3, r1
    8d34:	d1f9      	bne.n	8d2a <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    8d36:	4b34      	ldr	r3, [pc, #208]	; (8e08 <S_Nv_EarlyInit+0x330>)
    8d38:	4798      	blx	r3
    8d3a:	2800      	cmp	r0, #0
    8d3c:	d000      	beq.n	8d40 <S_Nv_EarlyInit+0x268>
    8d3e:	e75e      	b.n	8bfe <S_Nv_EarlyInit+0x126>
            assert(false);
    8d40:	4b27      	ldr	r3, [pc, #156]	; (8de0 <S_Nv_EarlyInit+0x308>)
    8d42:	4a32      	ldr	r2, [pc, #200]	; (8e0c <S_Nv_EarlyInit+0x334>)
    8d44:	4932      	ldr	r1, [pc, #200]	; (8e10 <S_Nv_EarlyInit+0x338>)
    8d46:	4829      	ldr	r0, [pc, #164]	; (8dec <S_Nv_EarlyInit+0x314>)
    8d48:	4c29      	ldr	r4, [pc, #164]	; (8df0 <S_Nv_EarlyInit+0x318>)
    8d4a:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    8d4c:	ab02      	add	r3, sp, #8
    8d4e:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8d50:	4a1d      	ldr	r2, [pc, #116]	; (8dc8 <S_Nv_EarlyInit+0x2f0>)
    8d52:	210e      	movs	r1, #14
    8d54:	0018      	movs	r0, r3
    8d56:	4b1d      	ldr	r3, [pc, #116]	; (8dcc <S_Nv_EarlyInit+0x2f4>)
    8d58:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    8d5a:	4287      	cmp	r7, r0
    8d5c:	d091      	beq.n	8c82 <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    8d5e:	0021      	movs	r1, r4
    8d60:	2010      	movs	r0, #16
    8d62:	4b18      	ldr	r3, [pc, #96]	; (8dc4 <S_Nv_EarlyInit+0x2ec>)
    8d64:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    8d66:	882b      	ldrh	r3, [r5, #0]
    8d68:	4a26      	ldr	r2, [pc, #152]	; (8e04 <S_Nv_EarlyInit+0x32c>)
    8d6a:	4293      	cmp	r3, r2
    8d6c:	d900      	bls.n	8d70 <S_Nv_EarlyInit+0x298>
    8d6e:	e746      	b.n	8bfe <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    8d70:	aa06      	add	r2, sp, #24
    8d72:	8a12      	ldrh	r2, [r2, #16]
    8d74:	4914      	ldr	r1, [pc, #80]	; (8dc8 <S_Nv_EarlyInit+0x2f0>)
    8d76:	428a      	cmp	r2, r1
    8d78:	d002      	beq.n	8d80 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    8d7a:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    8d7c:	429a      	cmp	r2, r3
    8d7e:	d803      	bhi.n	8d88 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    8d80:	2102      	movs	r1, #2
    8d82:	2000      	movs	r0, #0
    8d84:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    8d86:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8d88:	8831      	ldrh	r1, [r6, #0]
    8d8a:	4b0c      	ldr	r3, [pc, #48]	; (8dbc <S_Nv_EarlyInit+0x2e4>)
    8d8c:	7818      	ldrb	r0, [r3, #0]
    8d8e:	2310      	movs	r3, #16
    8d90:	aa02      	add	r2, sp, #8
    8d92:	4f09      	ldr	r7, [pc, #36]	; (8db8 <S_Nv_EarlyInit+0x2e0>)
    8d94:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    8d96:	ab02      	add	r3, sp, #8
    8d98:	781b      	ldrb	r3, [r3, #0]
    8d9a:	2bff      	cmp	r3, #255	; 0xff
    8d9c:	d1d6      	bne.n	8d4c <S_Nv_EarlyInit+0x274>
    8d9e:	ab02      	add	r3, sp, #8
    8da0:	210f      	movs	r1, #15
    8da2:	469c      	mov	ip, r3
    8da4:	4461      	add	r1, ip
    8da6:	785a      	ldrb	r2, [r3, #1]
    8da8:	2aff      	cmp	r2, #255	; 0xff
    8daa:	d1cf      	bne.n	8d4c <S_Nv_EarlyInit+0x274>
    8dac:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    8dae:	428b      	cmp	r3, r1
    8db0:	d1f9      	bne.n	8da6 <S_Nv_EarlyInit+0x2ce>
    8db2:	e724      	b.n	8bfe <S_Nv_EarlyInit+0x126>
    8db4:	20000278 	.word	0x20000278
    8db8:	00007d15 	.word	0x00007d15
    8dbc:	20000280 	.word	0x20000280
    8dc0:	20000282 	.word	0x20000282
    8dc4:	00007f81 	.word	0x00007f81
    8dc8:	0000ffff 	.word	0x0000ffff
    8dcc:	00007fbd 	.word	0x00007fbd
    8dd0:	000082c1 	.word	0x000082c1
    8dd4:	2000027a 	.word	0x2000027a
    8dd8:	00008329 	.word	0x00008329
    8ddc:	20000254 	.word	0x20000254
    8de0:	00018414 	.word	0x00018414
    8de4:	000185d0 	.word	0x000185d0
    8de8:	0000052b 	.word	0x0000052b
    8dec:	00018490 	.word	0x00018490
    8df0:	000166c9 	.word	0x000166c9
    8df4:	0000815d 	.word	0x0000815d
    8df8:	000081ed 	.word	0x000081ed
    8dfc:	0000824d 	.word	0x0000824d
    8e00:	000080b5 	.word	0x000080b5
    8e04:	00001fff 	.word	0x00001fff
    8e08:	00008429 	.word	0x00008429
    8e0c:	00018590 	.word	0x00018590
    8e10:	00000336 	.word	0x00000336

00008e14 <S_Nv_Init>:


void S_Nv_Init(void)
{
    8e14:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    8e16:	4b08      	ldr	r3, [pc, #32]	; (8e38 <S_Nv_Init+0x24>)
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d008      	beq.n	8e30 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    8e1e:	4b07      	ldr	r3, [pc, #28]	; (8e3c <S_Nv_Init+0x28>)
    8e20:	4a07      	ldr	r2, [pc, #28]	; (8e40 <S_Nv_Init+0x2c>)
    8e22:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    8e24:	4a07      	ldr	r2, [pc, #28]	; (8e44 <S_Nv_Init+0x30>)
    8e26:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    8e28:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8e2a:	2200      	movs	r2, #0
    8e2c:	731a      	strb	r2, [r3, #12]
}
    8e2e:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    8e30:	4b05      	ldr	r3, [pc, #20]	; (8e48 <S_Nv_Init+0x34>)
    8e32:	4798      	blx	r3
    8e34:	e7f3      	b.n	8e1e <S_Nv_Init+0xa>
    8e36:	46c0      	nop			; (mov r8, r8)
    8e38:	20000254 	.word	0x20000254
    8e3c:	2000023c 	.word	0x2000023c
    8e40:	0000829d 	.word	0x0000829d
    8e44:	00001b58 	.word	0x00001b58
    8e48:	00008ad9 	.word	0x00008ad9

00008e4c <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e4e:	46ce      	mov	lr, r9
    8e50:	4647      	mov	r7, r8
    8e52:	b580      	push	{r7, lr}
    8e54:	b087      	sub	sp, #28
    8e56:	0004      	movs	r4, r0
    8e58:	9101      	str	r1, [sp, #4]
    8e5a:	0015      	movs	r5, r2
    8e5c:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    8e5e:	2800      	cmp	r0, #0
    8e60:	d00c      	beq.n	8e7c <S_Nv_Write_Impl+0x30>
    8e62:	2b00      	cmp	r3, #0
    8e64:	d00a      	beq.n	8e7c <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    8e66:	4b35      	ldr	r3, [pc, #212]	; (8f3c <S_Nv_Write_Impl+0xf0>)
    8e68:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8e6a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8e6c:	2800      	cmp	r0, #0
    8e6e:	d00b      	beq.n	8e88 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    8e70:	0018      	movs	r0, r3
    8e72:	b007      	add	sp, #28
    8e74:	bc0c      	pop	{r2, r3}
    8e76:	4690      	mov	r8, r2
    8e78:	4699      	mov	r9, r3
    8e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8e7c:	4b30      	ldr	r3, [pc, #192]	; (8f40 <S_Nv_Write_Impl+0xf4>)
    8e7e:	4a31      	ldr	r2, [pc, #196]	; (8f44 <S_Nv_Write_Impl+0xf8>)
    8e80:	4931      	ldr	r1, [pc, #196]	; (8f48 <S_Nv_Write_Impl+0xfc>)
    8e82:	4832      	ldr	r0, [pc, #200]	; (8f4c <S_Nv_Write_Impl+0x100>)
    8e84:	4c32      	ldr	r4, [pc, #200]	; (8f50 <S_Nv_Write_Impl+0x104>)
    8e86:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    8e88:	0028      	movs	r0, r5
    8e8a:	3010      	adds	r0, #16
    8e8c:	b280      	uxth	r0, r0
    8e8e:	4b31      	ldr	r3, [pc, #196]	; (8f54 <S_Nv_Write_Impl+0x108>)
    8e90:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    8e92:	0020      	movs	r0, r4
    8e94:	4b30      	ldr	r3, [pc, #192]	; (8f58 <S_Nv_Write_Impl+0x10c>)
    8e96:	4798      	blx	r3
    8e98:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    8e9a:	2303      	movs	r3, #3
    if ( cache == NULL )
    8e9c:	2800      	cmp	r0, #0
    8e9e:	d0e7      	beq.n	8e70 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    8ea0:	7883      	ldrb	r3, [r0, #2]
    8ea2:	78c4      	ldrb	r4, [r0, #3]
    8ea4:	0224      	lsls	r4, r4, #8
    8ea6:	431c      	orrs	r4, r3
    8ea8:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8eaa:	4b2c      	ldr	r3, [pc, #176]	; (8f5c <S_Nv_Write_Impl+0x110>)
    8eac:	7818      	ldrb	r0, [r3, #0]
    8eae:	2310      	movs	r3, #16
    8eb0:	aa02      	add	r2, sp, #8
    8eb2:	0021      	movs	r1, r4
    8eb4:	4c2a      	ldr	r4, [pc, #168]	; (8f60 <S_Nv_Write_Impl+0x114>)
    8eb6:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8eb8:	ab02      	add	r3, sp, #8
    8eba:	8919      	ldrh	r1, [r3, #8]
    8ebc:	9b01      	ldr	r3, [sp, #4]
    8ebe:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    8ec0:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8ec2:	428a      	cmp	r2, r1
    8ec4:	d8d4      	bhi.n	8e70 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    8ec6:	ab02      	add	r3, sp, #8
    8ec8:	466a      	mov	r2, sp
    8eca:	8892      	ldrh	r2, [r2, #4]
    8ecc:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    8ece:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    8ed0:	4642      	mov	r2, r8
    8ed2:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    8ed4:	428d      	cmp	r5, r1
    8ed6:	d02c      	beq.n	8f32 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    8ed8:	ab02      	add	r3, sp, #8
    8eda:	899b      	ldrh	r3, [r3, #12]
    8edc:	3301      	adds	r3, #1
    8ede:	aa02      	add	r2, sp, #8
    8ee0:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    8ee2:	4b20      	ldr	r3, [pc, #128]	; (8f64 <S_Nv_Write_Impl+0x118>)
    8ee4:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8ee6:	0039      	movs	r1, r7
    8ee8:	a802      	add	r0, sp, #8
    8eea:	4b1f      	ldr	r3, [pc, #124]	; (8f68 <S_Nv_Write_Impl+0x11c>)
    8eec:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8eee:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d0bd      	beq.n	8e70 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    8ef4:	70b4      	strb	r4, [r6, #2]
    8ef6:	0a24      	lsrs	r4, r4, #8
    8ef8:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8efa:	ab02      	add	r3, sp, #8
    8efc:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8efe:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8f00:	2a64      	cmp	r2, #100	; 0x64
    8f02:	d9b5      	bls.n	8e70 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    8f04:	ab02      	add	r3, sp, #8
    8f06:	885a      	ldrh	r2, [r3, #2]
    8f08:	4b18      	ldr	r3, [pc, #96]	; (8f6c <S_Nv_Write_Impl+0x120>)
    8f0a:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    8f0c:	2200      	movs	r2, #0
    8f0e:	4b18      	ldr	r3, [pc, #96]	; (8f70 <S_Nv_Write_Impl+0x124>)
    8f10:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    8f12:	4818      	ldr	r0, [pc, #96]	; (8f74 <S_Nv_Write_Impl+0x128>)
    8f14:	4b18      	ldr	r3, [pc, #96]	; (8f78 <S_Nv_Write_Impl+0x12c>)
    8f16:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    8f18:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    8f1a:	2800      	cmp	r0, #0
    8f1c:	d1a8      	bne.n	8e70 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    8f1e:	4b15      	ldr	r3, [pc, #84]	; (8f74 <S_Nv_Write_Impl+0x128>)
    8f20:	4a16      	ldr	r2, [pc, #88]	; (8f7c <S_Nv_Write_Impl+0x130>)
    8f22:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    8f24:	4a16      	ldr	r2, [pc, #88]	; (8f80 <S_Nv_Write_Impl+0x134>)
    8f26:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    8f28:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8f2a:	2200      	movs	r2, #0
    8f2c:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8f2e:	2300      	movs	r3, #0
    8f30:	e79e      	b.n	8e70 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    8f32:	2300      	movs	r3, #0
    8f34:	aa02      	add	r2, sp, #8
    8f36:	8193      	strh	r3, [r2, #12]
    8f38:	e7d3      	b.n	8ee2 <S_Nv_Write_Impl+0x96>
    8f3a:	46c0      	nop			; (mov r8, r8)
    8f3c:	00007f65 	.word	0x00007f65
    8f40:	00018528 	.word	0x00018528
    8f44:	000185f4 	.word	0x000185f4
    8f48:	00000596 	.word	0x00000596
    8f4c:	00018490 	.word	0x00018490
    8f50:	000166c9 	.word	0x000166c9
    8f54:	000086d9 	.word	0x000086d9
    8f58:	0000815d 	.word	0x0000815d
    8f5c:	20000280 	.word	0x20000280
    8f60:	00007d15 	.word	0x00007d15
    8f64:	20000282 	.word	0x20000282
    8f68:	0000898d 	.word	0x0000898d
    8f6c:	20000250 	.word	0x20000250
    8f70:	20000252 	.word	0x20000252
    8f74:	20000110 	.word	0x20000110
    8f78:	0000be85 	.word	0x0000be85
    8f7c:	00008981 	.word	0x00008981
    8f80:	00000bb8 	.word	0x00000bb8

00008f84 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f86:	b083      	sub	sp, #12
    8f88:	000c      	movs	r4, r1
    8f8a:	0015      	movs	r5, r2
    8f8c:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    8f8e:	2800      	cmp	r0, #0
    8f90:	d009      	beq.n	8fa6 <S_Nv_Read_Impl+0x22>
    8f92:	2b00      	cmp	r3, #0
    8f94:	d007      	beq.n	8fa6 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    8f96:	4b10      	ldr	r3, [pc, #64]	; (8fd8 <S_Nv_Read_Impl+0x54>)
    8f98:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    8f9a:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d108      	bne.n	8fb2 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    8fa0:	0018      	movs	r0, r3
    8fa2:	b003      	add	sp, #12
    8fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8fa6:	4b0d      	ldr	r3, [pc, #52]	; (8fdc <S_Nv_Read_Impl+0x58>)
    8fa8:	4a0d      	ldr	r2, [pc, #52]	; (8fe0 <S_Nv_Read_Impl+0x5c>)
    8faa:	490e      	ldr	r1, [pc, #56]	; (8fe4 <S_Nv_Read_Impl+0x60>)
    8fac:	480e      	ldr	r0, [pc, #56]	; (8fe8 <S_Nv_Read_Impl+0x64>)
    8fae:	4c0f      	ldr	r4, [pc, #60]	; (8fec <S_Nv_Read_Impl+0x68>)
    8fb0:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8fb2:	1962      	adds	r2, r4, r5
    8fb4:	490e      	ldr	r1, [pc, #56]	; (8ff0 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    8fb6:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8fb8:	428a      	cmp	r2, r1
    8fba:	d8f1      	bhi.n	8fa0 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    8fbc:	4b0d      	ldr	r3, [pc, #52]	; (8ff4 <S_Nv_Read_Impl+0x70>)
    8fbe:	781f      	ldrb	r7, [r3, #0]
    8fc0:	9600      	str	r6, [sp, #0]
    8fc2:	002b      	movs	r3, r5
    8fc4:	0022      	movs	r2, r4
    8fc6:	0001      	movs	r1, r0
    8fc8:	0038      	movs	r0, r7
    8fca:	4c0b      	ldr	r4, [pc, #44]	; (8ff8 <S_Nv_Read_Impl+0x74>)
    8fcc:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    8fce:	4243      	negs	r3, r0
    8fd0:	4143      	adcs	r3, r0
    8fd2:	009b      	lsls	r3, r3, #2
    8fd4:	e7e4      	b.n	8fa0 <S_Nv_Read_Impl+0x1c>
    8fd6:	46c0      	nop			; (mov r8, r8)
    8fd8:	000081d1 	.word	0x000081d1
    8fdc:	00018528 	.word	0x00018528
    8fe0:	00018604 	.word	0x00018604
    8fe4:	000005ee 	.word	0x000005ee
    8fe8:	00018490 	.word	0x00018490
    8fec:	000166c9 	.word	0x000166c9
    8ff0:	0000ffff 	.word	0x0000ffff
    8ff4:	20000280 	.word	0x20000280
    8ff8:	00007ffd 	.word	0x00007ffd

00008ffc <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    8ffc:	b510      	push	{r4, lr}
    8ffe:	b084      	sub	sp, #16
    assert(id != 0u);
    9000:	2800      	cmp	r0, #0
    9002:	d005      	beq.n	9010 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    9004:	4b0a      	ldr	r3, [pc, #40]	; (9030 <S_Nv_ItemLength_Impl+0x34>)
    9006:	4798      	blx	r3
    9008:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    900a:	d107      	bne.n	901c <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    900c:	b004      	add	sp, #16
    900e:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    9010:	4b08      	ldr	r3, [pc, #32]	; (9034 <S_Nv_ItemLength_Impl+0x38>)
    9012:	4a09      	ldr	r2, [pc, #36]	; (9038 <S_Nv_ItemLength_Impl+0x3c>)
    9014:	4909      	ldr	r1, [pc, #36]	; (903c <S_Nv_ItemLength_Impl+0x40>)
    9016:	480a      	ldr	r0, [pc, #40]	; (9040 <S_Nv_ItemLength_Impl+0x44>)
    9018:	4c0a      	ldr	r4, [pc, #40]	; (9044 <S_Nv_ItemLength_Impl+0x48>)
    901a:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    901c:	4b0a      	ldr	r3, [pc, #40]	; (9048 <S_Nv_ItemLength_Impl+0x4c>)
    901e:	7818      	ldrb	r0, [r3, #0]
    9020:	2310      	movs	r3, #16
    9022:	466a      	mov	r2, sp
    9024:	4c09      	ldr	r4, [pc, #36]	; (904c <S_Nv_ItemLength_Impl+0x50>)
    9026:	47a0      	blx	r4
    return blockHeader.itemLength;
    9028:	466b      	mov	r3, sp
    902a:	8918      	ldrh	r0, [r3, #8]
    902c:	e7ee      	b.n	900c <S_Nv_ItemLength_Impl+0x10>
    902e:	46c0      	nop			; (mov r8, r8)
    9030:	000081d1 	.word	0x000081d1
    9034:	0001851c 	.word	0x0001851c
    9038:	00018614 	.word	0x00018614
    903c:	0000060b 	.word	0x0000060b
    9040:	00018490 	.word	0x00018490
    9044:	000166c9 	.word	0x000166c9
    9048:	20000280 	.word	0x20000280
    904c:	00007d15 	.word	0x00007d15

00009050 <S_Nv_ItemInit_Impl>:
{
    9050:	b5f0      	push	{r4, r5, r6, r7, lr}
    9052:	b085      	sub	sp, #20
    9054:	0004      	movs	r4, r0
    9056:	000e      	movs	r6, r1
    9058:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    905a:	1e43      	subs	r3, r0, #1
    905c:	b29b      	uxth	r3, r3
    905e:	4a2e      	ldr	r2, [pc, #184]	; (9118 <S_Nv_ItemInit_Impl+0xc8>)
    9060:	4293      	cmp	r3, r2
    9062:	d81e      	bhi.n	90a2 <S_Nv_ItemInit_Impl+0x52>
    9064:	2380      	movs	r3, #128	; 0x80
    9066:	011b      	lsls	r3, r3, #4
    9068:	4299      	cmp	r1, r3
    906a:	d81a      	bhi.n	90a2 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    906c:	4b2b      	ldr	r3, [pc, #172]	; (911c <S_Nv_ItemInit_Impl+0xcc>)
    906e:	4798      	blx	r3
    9070:	2800      	cmp	r0, #0
    9072:	d01d      	beq.n	90b0 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    9074:	0020      	movs	r0, r4
    9076:	4b2a      	ldr	r3, [pc, #168]	; (9120 <S_Nv_ItemInit_Impl+0xd0>)
    9078:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    907a:	4286      	cmp	r6, r0
    907c:	d007      	beq.n	908e <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    907e:	4b29      	ldr	r3, [pc, #164]	; (9124 <S_Nv_ItemInit_Impl+0xd4>)
    9080:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    9082:	4b29      	ldr	r3, [pc, #164]	; (9128 <S_Nv_ItemInit_Impl+0xd8>)
    9084:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    9086:	4b29      	ldr	r3, [pc, #164]	; (912c <S_Nv_ItemInit_Impl+0xdc>)
    9088:	4798      	blx	r3
    908a:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    908c:	d115      	bne.n	90ba <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    908e:	2d00      	cmp	r5, #0
    9090:	d040      	beq.n	9114 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    9092:	002b      	movs	r3, r5
    9094:	0032      	movs	r2, r6
    9096:	2100      	movs	r1, #0
    9098:	0020      	movs	r0, r4
    909a:	4c25      	ldr	r4, [pc, #148]	; (9130 <S_Nv_ItemInit_Impl+0xe0>)
    909c:	47a0      	blx	r4
    909e:	0003      	movs	r3, r0
    90a0:	e00b      	b.n	90ba <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    90a2:	4b24      	ldr	r3, [pc, #144]	; (9134 <S_Nv_ItemInit_Impl+0xe4>)
    90a4:	4a24      	ldr	r2, [pc, #144]	; (9138 <S_Nv_ItemInit_Impl+0xe8>)
    90a6:	21aa      	movs	r1, #170	; 0xaa
    90a8:	00c9      	lsls	r1, r1, #3
    90aa:	4824      	ldr	r0, [pc, #144]	; (913c <S_Nv_ItemInit_Impl+0xec>)
    90ac:	4c24      	ldr	r4, [pc, #144]	; (9140 <S_Nv_ItemInit_Impl+0xf0>)
    90ae:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    90b0:	4b24      	ldr	r3, [pc, #144]	; (9144 <S_Nv_ItemInit_Impl+0xf4>)
    90b2:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    90b4:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    90b6:	2800      	cmp	r0, #0
    90b8:	d002      	beq.n	90c0 <S_Nv_ItemInit_Impl+0x70>
}
    90ba:	0018      	movs	r0, r3
    90bc:	b005      	add	sp, #20
    90be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    90c0:	0030      	movs	r0, r6
    90c2:	3010      	adds	r0, #16
    90c4:	b280      	uxth	r0, r0
    90c6:	4b20      	ldr	r3, [pc, #128]	; (9148 <S_Nv_ItemInit_Impl+0xf8>)
    90c8:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    90ca:	4b20      	ldr	r3, [pc, #128]	; (914c <S_Nv_ItemInit_Impl+0xfc>)
    90cc:	781b      	ldrb	r3, [r3, #0]
    90ce:	2b07      	cmp	r3, #7
    90d0:	d819      	bhi.n	9106 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    90d2:	4b1f      	ldr	r3, [pc, #124]	; (9150 <S_Nv_ItemInit_Impl+0x100>)
    90d4:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    90d6:	466b      	mov	r3, sp
    90d8:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    90da:	2300      	movs	r3, #0
    90dc:	466a      	mov	r2, sp
    90de:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    90e0:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    90e2:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    90e4:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    90e6:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    90e8:	0029      	movs	r1, r5
    90ea:	4668      	mov	r0, sp
    90ec:	4b19      	ldr	r3, [pc, #100]	; (9154 <S_Nv_ItemInit_Impl+0x104>)
    90ee:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    90f0:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    90f2:	2800      	cmp	r0, #0
    90f4:	d0e1      	beq.n	90ba <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    90f6:	0020      	movs	r0, r4
    90f8:	4b17      	ldr	r3, [pc, #92]	; (9158 <S_Nv_ItemInit_Impl+0x108>)
    90fa:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    90fc:	7087      	strb	r7, [r0, #2]
    90fe:	0a3f      	lsrs	r7, r7, #8
    9100:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    9102:	2302      	movs	r3, #2
    9104:	e7d9      	b.n	90ba <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9106:	4b15      	ldr	r3, [pc, #84]	; (915c <S_Nv_ItemInit_Impl+0x10c>)
    9108:	4a0b      	ldr	r2, [pc, #44]	; (9138 <S_Nv_ItemInit_Impl+0xe8>)
    910a:	21af      	movs	r1, #175	; 0xaf
    910c:	00c9      	lsls	r1, r1, #3
    910e:	480b      	ldr	r0, [pc, #44]	; (913c <S_Nv_ItemInit_Impl+0xec>)
    9110:	4c0b      	ldr	r4, [pc, #44]	; (9140 <S_Nv_ItemInit_Impl+0xf0>)
    9112:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    9114:	2300      	movs	r3, #0
    9116:	e7d0      	b.n	90ba <S_Nv_ItemInit_Impl+0x6a>
    9118:	0000effe 	.word	0x0000effe
    911c:	000081d1 	.word	0x000081d1
    9120:	00008ffd 	.word	0x00008ffd
    9124:	20000250 	.word	0x20000250
    9128:	20000252 	.word	0x20000252
    912c:	00008755 	.word	0x00008755
    9130:	00008f85 	.word	0x00008f85
    9134:	000184dc 	.word	0x000184dc
    9138:	000185e0 	.word	0x000185e0
    913c:	00018490 	.word	0x00018490
    9140:	000166c9 	.word	0x000166c9
    9144:	00007f65 	.word	0x00007f65
    9148:	000086d9 	.word	0x000086d9
    914c:	20000278 	.word	0x20000278
    9150:	20000282 	.word	0x20000282
    9154:	0000898d 	.word	0x0000898d
    9158:	000081ed 	.word	0x000081ed
    915c:	00018438 	.word	0x00018438

00009160 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    9160:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    9162:	4b03      	ldr	r3, [pc, #12]	; (9170 <S_Nv_IsItemAvailable_Impl+0x10>)
    9164:	4798      	blx	r3
    9166:	1e43      	subs	r3, r0, #1
    9168:	4198      	sbcs	r0, r3
    916a:	b2c0      	uxtb	r0, r0
}
    916c:	bd10      	pop	{r4, pc}
    916e:	46c0      	nop			; (mov r8, r8)
    9170:	000081d1 	.word	0x000081d1

00009174 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    9174:	b5f0      	push	{r4, r5, r6, r7, lr}
    9176:	46d6      	mov	lr, sl
    9178:	4647      	mov	r7, r8
    917a:	b580      	push	{r7, lr}
    917c:	b087      	sub	sp, #28
    917e:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    9180:	4b20      	ldr	r3, [pc, #128]	; (9204 <pdsInitItemMask+0x90>)
    9182:	4298      	cmp	r0, r3
    9184:	d012      	beq.n	91ac <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    9186:	0443      	lsls	r3, r0, #17
    9188:	d415      	bmi.n	91b6 <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    918a:	08c3      	lsrs	r3, r0, #3
    918c:	18cf      	adds	r7, r1, r3
    918e:	2307      	movs	r3, #7
    9190:	4018      	ands	r0, r3
    9192:	3b06      	subs	r3, #6
    9194:	4083      	lsls	r3, r0
    9196:	783a      	ldrb	r2, [r7, #0]
    9198:	4313      	orrs	r3, r2
    919a:	703b      	strb	r3, [r7, #0]
  }

  return true;
    919c:	2301      	movs	r3, #1
    919e:	9301      	str	r3, [sp, #4]
}
    91a0:	9801      	ldr	r0, [sp, #4]
    91a2:	b007      	add	sp, #28
    91a4:	bc0c      	pop	{r2, r3}
    91a6:	4690      	mov	r8, r2
    91a8:	469a      	mov	sl, r3
    91aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    91ac:	23fe      	movs	r3, #254	; 0xfe
    91ae:	700b      	strb	r3, [r1, #0]
  return true;
    91b0:	3bfd      	subs	r3, #253	; 0xfd
    91b2:	9301      	str	r3, [sp, #4]
    91b4:	e7f4      	b.n	91a0 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    91b6:	a904      	add	r1, sp, #16
    91b8:	4b13      	ldr	r3, [pc, #76]	; (9208 <pdsInitItemMask+0x94>)
    91ba:	4798      	blx	r3
    91bc:	9001      	str	r0, [sp, #4]
    91be:	2800      	cmp	r0, #0
    91c0:	d0ee      	beq.n	91a0 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    91c2:	ab04      	add	r3, sp, #16
    91c4:	889b      	ldrh	r3, [r3, #4]
    91c6:	4698      	mov	r8, r3
    91c8:	2b00      	cmp	r3, #0
    91ca:	d0e9      	beq.n	91a0 <pdsInitItemMask+0x2c>
    91cc:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    91ce:	ab02      	add	r3, sp, #8
    91d0:	1d9d      	adds	r5, r3, #6
    91d2:	4b0e      	ldr	r3, [pc, #56]	; (920c <pdsInitItemMask+0x98>)
    91d4:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    91d6:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    91d8:	0061      	lsls	r1, r4, #1
    91da:	9b04      	ldr	r3, [sp, #16]
    91dc:	469c      	mov	ip, r3
    91de:	4461      	add	r1, ip
    91e0:	2202      	movs	r2, #2
    91e2:	0028      	movs	r0, r5
    91e4:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    91e6:	8829      	ldrh	r1, [r5, #0]
    91e8:	08ca      	lsrs	r2, r1, #3
    91ea:	18ba      	adds	r2, r7, r2
    91ec:	4031      	ands	r1, r6
    91ee:	2301      	movs	r3, #1
    91f0:	408b      	lsls	r3, r1
    91f2:	7811      	ldrb	r1, [r2, #0]
    91f4:	430b      	orrs	r3, r1
    91f6:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    91f8:	3401      	adds	r4, #1
    91fa:	b2e4      	uxtb	r4, r4
    91fc:	b2a3      	uxth	r3, r4
    91fe:	4543      	cmp	r3, r8
    9200:	d3ea      	bcc.n	91d8 <pdsInitItemMask+0x64>
    9202:	e7cd      	b.n	91a0 <pdsInitItemMask+0x2c>
    9204:	00004002 	.word	0x00004002
    9208:	0000954d 	.word	0x0000954d
    920c:	0001678b 	.word	0x0001678b

00009210 <PDS_Restore>:
{
    9210:	b5f0      	push	{r4, r5, r6, r7, lr}
    9212:	46d6      	mov	lr, sl
    9214:	4647      	mov	r7, r8
    9216:	b580      	push	{r7, lr}
    9218:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    921a:	a907      	add	r1, sp, #28
    921c:	2300      	movs	r3, #0
    921e:	700b      	strb	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    9220:	4b27      	ldr	r3, [pc, #156]	; (92c0 <PDS_Restore+0xb0>)
    9222:	4798      	blx	r3
    9224:	1e06      	subs	r6, r0, #0
    9226:	d043      	beq.n	92b0 <PDS_Restore+0xa0>
    9228:	2400      	movs	r4, #0
  if (pdsGetItemDescr(id, &itemDescr))
    922a:	4f26      	ldr	r7, [pc, #152]	; (92c4 <PDS_Restore+0xb4>)
      oldSize = S_Nv_ItemLength(id);
    922c:	4b26      	ldr	r3, [pc, #152]	; (92c8 <PDS_Restore+0xb8>)
    922e:	469a      	mov	sl, r3
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    9230:	4b26      	ldr	r3, [pc, #152]	; (92cc <PDS_Restore+0xbc>)
    9232:	4698      	mov	r8, r3
    9234:	e010      	b.n	9258 <PDS_Restore+0x48>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9236:	4b26      	ldr	r3, [pc, #152]	; (92d0 <PDS_Restore+0xc0>)
    9238:	4a26      	ldr	r2, [pc, #152]	; (92d4 <PDS_Restore+0xc4>)
    923a:	2156      	movs	r1, #86	; 0x56
    923c:	31ff      	adds	r1, #255	; 0xff
    923e:	4826      	ldr	r0, [pc, #152]	; (92d8 <PDS_Restore+0xc8>)
    9240:	4c26      	ldr	r4, [pc, #152]	; (92dc <PDS_Restore+0xcc>)
    9242:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9244:	4b26      	ldr	r3, [pc, #152]	; (92e0 <PDS_Restore+0xd0>)
    9246:	4a23      	ldr	r2, [pc, #140]	; (92d4 <PDS_Restore+0xc4>)
    9248:	21b3      	movs	r1, #179	; 0xb3
    924a:	0049      	lsls	r1, r1, #1
    924c:	4822      	ldr	r0, [pc, #136]	; (92d8 <PDS_Restore+0xc8>)
    924e:	4c23      	ldr	r4, [pc, #140]	; (92dc <PDS_Restore+0xcc>)
    9250:	47a0      	blx	r4
    9252:	3401      	adds	r4, #1
    for (j = 0U; j < 8U; j++)
    9254:	2c08      	cmp	r4, #8
    9256:	d02b      	beq.n	92b0 <PDS_Restore+0xa0>
      if (itemsToRestore[i] & (1U << j))
    9258:	ab07      	add	r3, sp, #28
    925a:	781b      	ldrb	r3, [r3, #0]
    925c:	40e3      	lsrs	r3, r4
    925e:	07db      	lsls	r3, r3, #31
    9260:	d5f7      	bpl.n	9252 <PDS_Restore+0x42>
        if (!pdsRestoreItem(((S_Nv_ItemId_t)i << 3U) + j))
    9262:	b2a5      	uxth	r5, r4
  if (pdsGetItemDescr(id, &itemDescr))
    9264:	a903      	add	r1, sp, #12
    9266:	0028      	movs	r0, r5
    9268:	47b8      	blx	r7
    926a:	2800      	cmp	r0, #0
    926c:	d01f      	beq.n	92ae <PDS_Restore+0x9e>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    926e:	ab03      	add	r3, sp, #12
    9270:	885b      	ldrh	r3, [r3, #2]
    9272:	2b00      	cmp	r3, #0
    9274:	d0df      	beq.n	9236 <PDS_Restore+0x26>
    9276:	9b04      	ldr	r3, [sp, #16]
    9278:	2b00      	cmp	r3, #0
    927a:	d0dc      	beq.n	9236 <PDS_Restore+0x26>
    if (itemDescr.filler)
    927c:	9b05      	ldr	r3, [sp, #20]
    927e:	2b00      	cmp	r3, #0
    9280:	d000      	beq.n	9284 <PDS_Restore+0x74>
      itemDescr.filler();
    9282:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    9284:	0028      	movs	r0, r5
    9286:	47d0      	blx	sl
    9288:	9001      	str	r0, [sp, #4]
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    928a:	ab03      	add	r3, sp, #12
    928c:	9a04      	ldr	r2, [sp, #16]
    928e:	8859      	ldrh	r1, [r3, #2]
    9290:	0028      	movs	r0, r5
    9292:	47c0      	blx	r8
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9294:	2802      	cmp	r0, #2
    9296:	d011      	beq.n	92bc <PDS_Restore+0xac>
    9298:	2800      	cmp	r0, #0
    929a:	d1d3      	bne.n	9244 <PDS_Restore+0x34>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    929c:	ab03      	add	r3, sp, #12
    929e:	885a      	ldrh	r2, [r3, #2]
    92a0:	9904      	ldr	r1, [sp, #16]
    92a2:	9b01      	ldr	r3, [sp, #4]
    92a4:	0028      	movs	r0, r5
    92a6:	4d0f      	ldr	r5, [pc, #60]	; (92e4 <PDS_Restore+0xd4>)
    92a8:	47a8      	blx	r5
    92aa:	2800      	cmp	r0, #0
    92ac:	d1d1      	bne.n	9252 <PDS_Restore+0x42>
          return false;
    92ae:	2600      	movs	r6, #0
}
    92b0:	0030      	movs	r0, r6
    92b2:	b009      	add	sp, #36	; 0x24
    92b4:	bc0c      	pop	{r2, r3}
    92b6:	4690      	mov	r8, r2
    92b8:	469a      	mov	sl, r3
    92ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return false;
    92bc:	2600      	movs	r6, #0
    92be:	e7f7      	b.n	92b0 <PDS_Restore+0xa0>
    92c0:	00009175 	.word	0x00009175
    92c4:	000094b1 	.word	0x000094b1
    92c8:	00008ffd 	.word	0x00008ffd
    92cc:	00009051 	.word	0x00009051
    92d0:	0001862c 	.word	0x0001862c
    92d4:	00018728 	.word	0x00018728
    92d8:	00018668 	.word	0x00018668
    92dc:	000166c9 	.word	0x000166c9
    92e0:	000186b8 	.word	0x000186b8
    92e4:	0000950d 	.word	0x0000950d

000092e8 <PDS_Store>:
{
    92e8:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    92ea:	4905      	ldr	r1, [pc, #20]	; (9300 <PDS_Store+0x18>)
    92ec:	4b05      	ldr	r3, [pc, #20]	; (9304 <PDS_Store+0x1c>)
    92ee:	4798      	blx	r3
    92f0:	1e04      	subs	r4, r0, #0
    92f2:	d101      	bne.n	92f8 <PDS_Store+0x10>
}
    92f4:	0020      	movs	r0, r4
    92f6:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    92f8:	2000      	movs	r0, #0
    92fa:	4b03      	ldr	r3, [pc, #12]	; (9308 <PDS_Store+0x20>)
    92fc:	4798      	blx	r3
  return true;
    92fe:	e7f9      	b.n	92f4 <PDS_Store+0xc>
    9300:	20000288 	.word	0x20000288
    9304:	00009175 	.word	0x00009175
    9308:	0000945d 	.word	0x0000945d

0000930c <pdsStoreItemTaskHandler>:
{
    930c:	b5f0      	push	{r4, r5, r6, r7, lr}
    930e:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9310:	4b3e      	ldr	r3, [pc, #248]	; (940c <pdsStoreItemTaskHandler+0x100>)
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	3301      	adds	r3, #1
      bit_index %= 8;
    9316:	2207      	movs	r2, #7
    9318:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    931a:	4a3d      	ldr	r2, [pc, #244]	; (9410 <pdsStoreItemTaskHandler+0x104>)
    931c:	7817      	ldrb	r7, [r2, #0]
    931e:	0038      	movs	r0, r7
    9320:	001e      	movs	r6, r3
    9322:	003a      	movs	r2, r7
    9324:	40da      	lsrs	r2, r3
    9326:	07d2      	lsls	r2, r2, #31
    9328:	d431      	bmi.n	938e <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    932a:	3301      	adds	r3, #1
    932c:	b2db      	uxtb	r3, r3
    932e:	2207      	movs	r2, #7
      bit_index %= 8;
    9330:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    9332:	2401      	movs	r4, #1
      bit_index %= 8;
    9334:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    9336:	001e      	movs	r6, r3
    9338:	0001      	movs	r1, r0
    933a:	40d9      	lsrs	r1, r3
    933c:	420c      	tst	r4, r1
    933e:	d126      	bne.n	938e <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9340:	3301      	adds	r3, #1
    9342:	b2db      	uxtb	r3, r3
    9344:	3a01      	subs	r2, #1
    9346:	b2d2      	uxtb	r2, r2
    9348:	2a00      	cmp	r2, #0
    934a:	d1f3      	bne.n	9334 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    934c:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    934e:	00e4      	lsls	r4, r4, #3
    9350:	18e4      	adds	r4, r4, r3
    9352:	0020      	movs	r0, r4
    9354:	4b2f      	ldr	r3, [pc, #188]	; (9414 <pdsStoreItemTaskHandler+0x108>)
    9356:	4798      	blx	r3
    9358:	2800      	cmp	r0, #0
    935a:	d124      	bne.n	93a6 <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    935c:	4669      	mov	r1, sp
    935e:	0020      	movs	r0, r4
    9360:	4b2d      	ldr	r3, [pc, #180]	; (9418 <pdsStoreItemTaskHandler+0x10c>)
    9362:	4798      	blx	r3
    9364:	2800      	cmp	r0, #0
    9366:	d038      	beq.n	93da <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    9368:	9b02      	ldr	r3, [sp, #8]
    936a:	2b00      	cmp	r3, #0
    936c:	d000      	beq.n	9370 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    936e:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    9370:	9a01      	ldr	r2, [sp, #4]
    9372:	466b      	mov	r3, sp
    9374:	8859      	ldrh	r1, [r3, #2]
    9376:	0020      	movs	r0, r4
    9378:	4b28      	ldr	r3, [pc, #160]	; (941c <pdsStoreItemTaskHandler+0x110>)
    937a:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    937c:	23fd      	movs	r3, #253	; 0xfd
    937e:	4218      	tst	r0, r3
    9380:	d02b      	beq.n	93da <pdsStoreItemTaskHandler+0xce>
    9382:	4b27      	ldr	r3, [pc, #156]	; (9420 <pdsStoreItemTaskHandler+0x114>)
    9384:	4a27      	ldr	r2, [pc, #156]	; (9424 <pdsStoreItemTaskHandler+0x118>)
    9386:	21ea      	movs	r1, #234	; 0xea
    9388:	4827      	ldr	r0, [pc, #156]	; (9428 <pdsStoreItemTaskHandler+0x11c>)
    938a:	4c28      	ldr	r4, [pc, #160]	; (942c <pdsStoreItemTaskHandler+0x120>)
    938c:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    938e:	2201      	movs	r2, #1
    9390:	40b2      	lsls	r2, r6
    9392:	4397      	bics	r7, r2
    9394:	4a1e      	ldr	r2, [pc, #120]	; (9410 <pdsStoreItemTaskHandler+0x104>)
    9396:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    9398:	2100      	movs	r1, #0
    939a:	4a25      	ldr	r2, [pc, #148]	; (9430 <pdsStoreItemTaskHandler+0x124>)
    939c:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    939e:	4a1b      	ldr	r2, [pc, #108]	; (940c <pdsStoreItemTaskHandler+0x100>)
    93a0:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    93a2:	2400      	movs	r4, #0
    93a4:	e7d3      	b.n	934e <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    93a6:	4669      	mov	r1, sp
    93a8:	0020      	movs	r0, r4
    93aa:	4b1b      	ldr	r3, [pc, #108]	; (9418 <pdsStoreItemTaskHandler+0x10c>)
    93ac:	4798      	blx	r3
    93ae:	2800      	cmp	r0, #0
    93b0:	d013      	beq.n	93da <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    93b2:	466b      	mov	r3, sp
    93b4:	885b      	ldrh	r3, [r3, #2]
    93b6:	2b00      	cmp	r3, #0
    93b8:	d015      	beq.n	93e6 <pdsStoreItemTaskHandler+0xda>
    93ba:	9b01      	ldr	r3, [sp, #4]
    93bc:	2b00      	cmp	r3, #0
    93be:	d012      	beq.n	93e6 <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    93c0:	9b02      	ldr	r3, [sp, #8]
    93c2:	2b00      	cmp	r3, #0
    93c4:	d000      	beq.n	93c8 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    93c6:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    93c8:	9b01      	ldr	r3, [sp, #4]
    93ca:	466a      	mov	r2, sp
    93cc:	8852      	ldrh	r2, [r2, #2]
    93ce:	2100      	movs	r1, #0
    93d0:	0020      	movs	r0, r4
    93d2:	4c18      	ldr	r4, [pc, #96]	; (9434 <pdsStoreItemTaskHandler+0x128>)
    93d4:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    93d6:	2800      	cmp	r0, #0
    93d8:	d10c      	bne.n	93f4 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    93da:	4b0d      	ldr	r3, [pc, #52]	; (9410 <pdsStoreItemTaskHandler+0x104>)
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	2b00      	cmp	r3, #0
    93e0:	d10f      	bne.n	9402 <pdsStoreItemTaskHandler+0xf6>
}
    93e2:	b005      	add	sp, #20
    93e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    93e6:	4b14      	ldr	r3, [pc, #80]	; (9438 <pdsStoreItemTaskHandler+0x12c>)
    93e8:	4a14      	ldr	r2, [pc, #80]	; (943c <pdsStoreItemTaskHandler+0x130>)
    93ea:	2134      	movs	r1, #52	; 0x34
    93ec:	31ff      	adds	r1, #255	; 0xff
    93ee:	480e      	ldr	r0, [pc, #56]	; (9428 <pdsStoreItemTaskHandler+0x11c>)
    93f0:	4c0e      	ldr	r4, [pc, #56]	; (942c <pdsStoreItemTaskHandler+0x120>)
    93f2:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    93f4:	4b12      	ldr	r3, [pc, #72]	; (9440 <pdsStoreItemTaskHandler+0x134>)
    93f6:	4a11      	ldr	r2, [pc, #68]	; (943c <pdsStoreItemTaskHandler+0x130>)
    93f8:	2142      	movs	r1, #66	; 0x42
    93fa:	31ff      	adds	r1, #255	; 0xff
    93fc:	480a      	ldr	r0, [pc, #40]	; (9428 <pdsStoreItemTaskHandler+0x11c>)
    93fe:	4c0b      	ldr	r4, [pc, #44]	; (942c <pdsStoreItemTaskHandler+0x120>)
    9400:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9402:	2000      	movs	r0, #0
    9404:	4b0f      	ldr	r3, [pc, #60]	; (9444 <pdsStoreItemTaskHandler+0x138>)
    9406:	4798      	blx	r3
}
    9408:	e7eb      	b.n	93e2 <pdsStoreItemTaskHandler+0xd6>
    940a:	46c0      	nop			; (mov r8, r8)
    940c:	20000289 	.word	0x20000289
    9410:	20000288 	.word	0x20000288
    9414:	00009161 	.word	0x00009161
    9418:	000094b1 	.word	0x000094b1
    941c:	00009051 	.word	0x00009051
    9420:	000186b8 	.word	0x000186b8
    9424:	00018700 	.word	0x00018700
    9428:	00018668 	.word	0x00018668
    942c:	000166c9 	.word	0x000166c9
    9430:	20000284 	.word	0x20000284
    9434:	00008e4d 	.word	0x00008e4d
    9438:	0001862c 	.word	0x0001862c
    943c:	00018718 	.word	0x00018718
    9440:	00018738 	.word	0x00018738
    9444:	0000945d 	.word	0x0000945d

00009448 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    9448:	b510      	push	{r4, lr}
  D_Nv_Init();
    944a:	4b02      	ldr	r3, [pc, #8]	; (9454 <PDS_Init+0xc>)
    944c:	4798      	blx	r3
  S_Nv_Init();
    944e:	4b02      	ldr	r3, [pc, #8]	; (9458 <PDS_Init+0x10>)
    9450:	4798      	blx	r3
}
    9452:	bd10      	pop	{r4, pc}
    9454:	00007cc5 	.word	0x00007cc5
    9458:	00008e15 	.word	0x00008e15

0000945c <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    945c:	4a03      	ldr	r2, [pc, #12]	; (946c <pdsPostTask+0x10>)
    945e:	2301      	movs	r3, #1
    9460:	4083      	lsls	r3, r0
    9462:	7811      	ldrb	r1, [r2, #0]
    9464:	430b      	orrs	r3, r1
    9466:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    9468:	4770      	bx	lr
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	2000028a 	.word	0x2000028a

00009470 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    9470:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    9472:	4b0d      	ldr	r3, [pc, #52]	; (94a8 <PDS_TaskHandler+0x38>)
    9474:	781d      	ldrb	r5, [r3, #0]
    9476:	2d00      	cmp	r5, #0
    9478:	d012      	beq.n	94a0 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    947a:	0028      	movs	r0, r5
    947c:	07eb      	lsls	r3, r5, #31
    947e:	d410      	bmi.n	94a2 <PDS_TaskHandler+0x32>
    9480:	2300      	movs	r3, #0
    9482:	2401      	movs	r4, #1
      taskId++;
    9484:	3301      	adds	r3, #1
    9486:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    9488:	0019      	movs	r1, r3
    948a:	0002      	movs	r2, r0
    948c:	40da      	lsrs	r2, r3
    948e:	4214      	tst	r4, r2
    9490:	d0f8      	beq.n	9484 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    9492:	2301      	movs	r3, #1
    9494:	408b      	lsls	r3, r1
    9496:	405d      	eors	r5, r3
    9498:	4b03      	ldr	r3, [pc, #12]	; (94a8 <PDS_TaskHandler+0x38>)
    949a:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    949c:	4b03      	ldr	r3, [pc, #12]	; (94ac <PDS_TaskHandler+0x3c>)
    949e:	4798      	blx	r3
   
  }
}
    94a0:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    94a2:	2100      	movs	r1, #0
    94a4:	e7f5      	b.n	9492 <PDS_TaskHandler+0x22>
    94a6:	46c0      	nop			; (mov r8, r8)
    94a8:	2000028a 	.word	0x2000028a
    94ac:	0000930d 	.word	0x0000930d

000094b0 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    94b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    94b2:	b087      	sub	sp, #28
    94b4:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    94b6:	aa02      	add	r2, sp, #8
    94b8:	4b10      	ldr	r3, [pc, #64]	; (94fc <pdsGetItemDescr+0x4c>)
    94ba:	0011      	movs	r1, r2
    94bc:	cb70      	ldmia	r3!, {r4, r5, r6}
    94be:	c170      	stmia	r1!, {r4, r5, r6}
    94c0:	681b      	ldr	r3, [r3, #0]
    94c2:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    94c4:	8813      	ldrh	r3, [r2, #0]
    94c6:	4283      	cmp	r3, r0
    94c8:	d011      	beq.n	94ee <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    94ca:	4b0d      	ldr	r3, [pc, #52]	; (9500 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    94cc:	aa02      	add	r2, sp, #8
    94ce:	0011      	movs	r1, r2
    94d0:	001c      	movs	r4, r3
    94d2:	cce0      	ldmia	r4!, {r5, r6, r7}
    94d4:	c1e0      	stmia	r1!, {r5, r6, r7}
    94d6:	6824      	ldr	r4, [r4, #0]
    94d8:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    94da:	8811      	ldrh	r1, [r2, #0]
    94dc:	4281      	cmp	r1, r0
    94de:	d006      	beq.n	94ee <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    94e0:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    94e2:	4908      	ldr	r1, [pc, #32]	; (9504 <pdsGetItemDescr+0x54>)
    94e4:	428b      	cmp	r3, r1
    94e6:	d1f2      	bne.n	94ce <pdsGetItemDescr+0x1e>

  }
  return false;
    94e8:	2000      	movs	r0, #0
}
    94ea:	b007      	add	sp, #28
    94ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    94ee:	2210      	movs	r2, #16
    94f0:	a902      	add	r1, sp, #8
    94f2:	9801      	ldr	r0, [sp, #4]
    94f4:	4b04      	ldr	r3, [pc, #16]	; (9508 <pdsGetItemDescr+0x58>)
    94f6:	4798      	blx	r3
      return true;
    94f8:	2001      	movs	r0, #1
    94fa:	e7f6      	b.n	94ea <pdsGetItemDescr+0x3a>
    94fc:	00004400 	.word	0x00004400
    9500:	00004410 	.word	0x00004410
    9504:	00004480 	.word	0x00004480
    9508:	0001678b 	.word	0x0001678b

0000950c <pdsUpdateMemory>:
{
    950c:	b510      	push	{r4, lr}
    950e:	b084      	sub	sp, #16
  if (size == oldSize)
    9510:	429a      	cmp	r2, r3
    9512:	d008      	beq.n	9526 <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    9514:	4669      	mov	r1, sp
    9516:	4b08      	ldr	r3, [pc, #32]	; (9538 <pdsUpdateMemory+0x2c>)
    9518:	4798      	blx	r3
    951a:	2800      	cmp	r0, #0
    951c:	d003      	beq.n	9526 <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    951e:	466b      	mov	r3, sp
    9520:	7b1b      	ldrb	r3, [r3, #12]
    9522:	07db      	lsls	r3, r3, #31
    9524:	d502      	bpl.n	952c <pdsUpdateMemory+0x20>
}
    9526:	2001      	movs	r0, #1
    9528:	b004      	add	sp, #16
    952a:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    952c:	4b03      	ldr	r3, [pc, #12]	; (953c <pdsUpdateMemory+0x30>)
    952e:	4a04      	ldr	r2, [pc, #16]	; (9540 <pdsUpdateMemory+0x34>)
    9530:	2177      	movs	r1, #119	; 0x77
    9532:	4804      	ldr	r0, [pc, #16]	; (9544 <pdsUpdateMemory+0x38>)
    9534:	4c04      	ldr	r4, [pc, #16]	; (9548 <pdsUpdateMemory+0x3c>)
    9536:	47a0      	blx	r4
    9538:	000094b1 	.word	0x000094b1
    953c:	00018764 	.word	0x00018764
    9540:	00018754 	.word	0x00018754
    9544:	00018790 	.word	0x00018790
    9548:	000166c9 	.word	0x000166c9

0000954c <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    954c:	b570      	push	{r4, r5, r6, lr}
    954e:	b082      	sub	sp, #8
    9550:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    9552:	466b      	mov	r3, sp
    9554:	4a08      	ldr	r2, [pc, #32]	; (9578 <pdsGetDirDescr+0x2c>)
    9556:	4669      	mov	r1, sp
    9558:	ca60      	ldmia	r2!, {r5, r6}
    955a:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    955c:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    955e:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    9560:	4282      	cmp	r2, r0
    9562:	d002      	beq.n	956a <pdsGetDirDescr+0x1e>
}
    9564:	0018      	movs	r0, r3
    9566:	b002      	add	sp, #8
    9568:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    956a:	2208      	movs	r2, #8
    956c:	4669      	mov	r1, sp
    956e:	0020      	movs	r0, r4
    9570:	4b02      	ldr	r3, [pc, #8]	; (957c <pdsGetDirDescr+0x30>)
    9572:	4798      	blx	r3
      return true;
    9574:	2301      	movs	r3, #1
    9576:	e7f5      	b.n	9564 <pdsGetDirDescr+0x18>
    9578:	00004470 	.word	0x00004470
    957c:	0001678b 	.word	0x0001678b

00009580 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    9580:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    9582:	7802      	ldrb	r2, [r0, #0]
    9584:	4b08      	ldr	r3, [pc, #32]	; (95a8 <MiMAC_SetAltAddress+0x28>)
    9586:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    9588:	7842      	ldrb	r2, [r0, #1]
    958a:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    958c:	780a      	ldrb	r2, [r1, #0]
    958e:	4c07      	ldr	r4, [pc, #28]	; (95ac <MiMAC_SetAltAddress+0x2c>)
    9590:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    9592:	784a      	ldrb	r2, [r1, #1]
    9594:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    9596:	8818      	ldrh	r0, [r3, #0]
    9598:	4b05      	ldr	r3, [pc, #20]	; (95b0 <MiMAC_SetAltAddress+0x30>)
    959a:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    959c:	8820      	ldrh	r0, [r4, #0]
    959e:	4b05      	ldr	r3, [pc, #20]	; (95b4 <MiMAC_SetAltAddress+0x34>)
    95a0:	4798      	blx	r3
	return true;
}
    95a2:	2001      	movs	r0, #1
    95a4:	bd10      	pop	{r4, pc}
    95a6:	46c0      	nop			; (mov r8, r8)
    95a8:	200020d8 	.word	0x200020d8
    95ac:	2000214c 	.word	0x2000214c
    95b0:	0000a895 	.word	0x0000a895
    95b4:	0000a881 	.word	0x0000a881

000095b8 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    95b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    95ba:	46c6      	mov	lr, r8
    95bc:	b500      	push	{lr}
    95be:	b0c6      	sub	sp, #280	; 0x118
    95c0:	0006      	movs	r6, r0
    95c2:	000c      	movs	r4, r1
    95c4:	469c      	mov	ip, r3
    95c6:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    95c8:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    95ca:	0723      	lsls	r3, r4, #28
    95cc:	d000      	beq.n	95d0 <mic_generator+0x18>
    95ce:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    95d0:	2049      	movs	r0, #73	; 0x49
    95d2:	4b40      	ldr	r3, [pc, #256]	; (96d4 <mic_generator+0x11c>)
    95d4:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    95d6:	2300      	movs	r3, #0
    95d8:	a802      	add	r0, sp, #8
    95da:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    95dc:	330d      	adds	r3, #13
    95de:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    95e0:	7082      	strb	r2, [r0, #2]
    95e2:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    95e4:	4b3b      	ldr	r3, [pc, #236]	; (96d4 <mic_generator+0x11c>)
    95e6:	5c8f      	ldrb	r7, [r1, r2]
    95e8:	18d0      	adds	r0, r2, r3
    95ea:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    95ec:	0010      	movs	r0, r2
    95ee:	af02      	add	r7, sp, #8
    95f0:	46b8      	mov	r8, r7
    95f2:	4440      	add	r0, r8
    95f4:	5c8f      	ldrb	r7, [r1, r2]
    95f6:	71c7      	strb	r7, [r0, #7]
    95f8:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    95fa:	2a08      	cmp	r2, #8
    95fc:	d1f3      	bne.n	95e6 <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    95fe:	4663      	mov	r3, ip
    9600:	466a      	mov	r2, sp
    9602:	71d3      	strb	r3, [r2, #7]
    9604:	79d3      	ldrb	r3, [r2, #7]
    9606:	4833      	ldr	r0, [pc, #204]	; (96d4 <mic_generator+0x11c>)
    9608:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    960a:	4642      	mov	r2, r8
    960c:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    960e:	4663      	mov	r3, ip
    9610:	041b      	lsls	r3, r3, #16
    9612:	0e1b      	lsrs	r3, r3, #24
    9614:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9616:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    9618:	4663      	mov	r3, ip
    961a:	021b      	lsls	r3, r3, #8
    961c:	0e1b      	lsrs	r3, r3, #24
    961e:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9620:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9622:	4663      	mov	r3, ip
    9624:	0e1b      	lsrs	r3, r3, #24
    9626:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9628:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    962a:	2300      	movs	r3, #0
    962c:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    962e:	2204      	movs	r2, #4
    9630:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9632:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9634:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9636:	4928      	ldr	r1, [pc, #160]	; (96d8 <mic_generator+0x120>)
    9638:	4b28      	ldr	r3, [pc, #160]	; (96dc <mic_generator+0x124>)
    963a:	4798      	blx	r3
    963c:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    963e:	a906      	add	r1, sp, #24
    9640:	aa02      	add	r2, sp, #8
    9642:	5c9a      	ldrb	r2, [r3, r2]
    9644:	545a      	strb	r2, [r3, r1]
    9646:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9648:	2b10      	cmp	r3, #16
    964a:	d1f9      	bne.n	9640 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    964c:	0027      	movs	r7, r4
    964e:	3710      	adds	r7, #16
    9650:	2f10      	cmp	r7, #16
    9652:	dd0a      	ble.n	966a <mic_generator+0xb2>
    9654:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    9656:	a906      	add	r1, sp, #24
    9658:	18f2      	adds	r2, r6, r3
    965a:	3a10      	subs	r2, #16
    965c:	7812      	ldrb	r2, [r2, #0]
    965e:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    9660:	3301      	adds	r3, #1
    9662:	b29b      	uxth	r3, r3
    9664:	0018      	movs	r0, r3
    9666:	42bb      	cmp	r3, r7
    9668:	dbf6      	blt.n	9658 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    966a:	0023      	movs	r3, r4
    966c:	3310      	adds	r3, #16
    966e:	001a      	movs	r2, r3
    9670:	3501      	adds	r5, #1
    9672:	0129      	lsls	r1, r5, #4
    9674:	428b      	cmp	r3, r1
    9676:	da07      	bge.n	9688 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    9678:	ac06      	add	r4, sp, #24
    967a:	2000      	movs	r0, #0
    967c:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    967e:	3301      	adds	r3, #1
    9680:	b29b      	uxth	r3, r3
    9682:	001a      	movs	r2, r3
    9684:	428b      	cmp	r3, r1
    9686:	dbf9      	blt.n	967c <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    9688:	2200      	movs	r2, #0
    968a:	2700      	movs	r7, #0
    968c:	2d00      	cmp	r5, #0
    968e:	dd15      	ble.n	96bc <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    9690:	4e10      	ldr	r6, [pc, #64]	; (96d4 <mic_generator+0x11c>)
    9692:	0112      	lsls	r2, r2, #4
    9694:	2300      	movs	r3, #0
    9696:	a906      	add	r1, sp, #24
    9698:	188c      	adds	r4, r1, r2
    969a:	1999      	adds	r1, r3, r6
    969c:	5ce2      	ldrb	r2, [r4, r3]
    969e:	7808      	ldrb	r0, [r1, #0]
    96a0:	4042      	eors	r2, r0
    96a2:	700a      	strb	r2, [r1, #0]
    96a4:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    96a6:	2b10      	cmp	r3, #16
    96a8:	d1f7      	bne.n	969a <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    96aa:	490b      	ldr	r1, [pc, #44]	; (96d8 <mic_generator+0x120>)
    96ac:	4809      	ldr	r0, [pc, #36]	; (96d4 <mic_generator+0x11c>)
    96ae:	4b0b      	ldr	r3, [pc, #44]	; (96dc <mic_generator+0x124>)
    96b0:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    96b2:	3701      	adds	r7, #1
    96b4:	b2bf      	uxth	r7, r7
    96b6:	003a      	movs	r2, r7
    96b8:	42af      	cmp	r7, r5
    96ba:	dbea      	blt.n	9692 <mic_generator+0xda>
    96bc:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    96be:	4808      	ldr	r0, [pc, #32]	; (96e0 <mic_generator+0x128>)
    96c0:	4904      	ldr	r1, [pc, #16]	; (96d4 <mic_generator+0x11c>)
    96c2:	5cca      	ldrb	r2, [r1, r3]
    96c4:	54c2      	strb	r2, [r0, r3]
    96c6:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    96c8:	2b10      	cmp	r3, #16
    96ca:	d1fa      	bne.n	96c2 <mic_generator+0x10a>
	}

}
    96cc:	b046      	add	sp, #280	; 0x118
    96ce:	bc04      	pop	{r2}
    96d0:	4690      	mov	r8, r2
    96d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96d4:	200020e8 	.word	0x200020e8
    96d8:	000187e4 	.word	0x000187e4
    96dc:	0000aa0d 	.word	0x0000aa0d
    96e0:	2000212c 	.word	0x2000212c

000096e4 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    96e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    96e6:	46de      	mov	lr, fp
    96e8:	4657      	mov	r7, sl
    96ea:	464e      	mov	r6, r9
    96ec:	4645      	mov	r5, r8
    96ee:	b5e0      	push	{r5, r6, r7, lr}
    96f0:	b08d      	sub	sp, #52	; 0x34
    96f2:	4680      	mov	r8, r0
    96f4:	000e      	movs	r6, r1
    96f6:	0014      	movs	r4, r2
    96f8:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    96fa:	7809      	ldrb	r1, [r1, #0]
    96fc:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    96fe:	070b      	lsls	r3, r1, #28
    9700:	d000      	beq.n	9704 <DataEncrypt+0x20>
    9702:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9704:	4b37      	ldr	r3, [pc, #220]	; (97e4 <DataEncrypt+0x100>)
    9706:	685b      	ldr	r3, [r3, #4]
    9708:	9300      	str	r3, [sp, #0]
    970a:	0023      	movs	r3, r4
    970c:	4640      	mov	r0, r8
    970e:	4f36      	ldr	r7, [pc, #216]	; (97e8 <DataEncrypt+0x104>)
    9710:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9712:	7831      	ldrb	r1, [r6, #0]
    9714:	b28b      	uxth	r3, r1
    9716:	002e      	movs	r6, r5
    9718:	012d      	lsls	r5, r5, #4
    971a:	42a9      	cmp	r1, r5
    971c:	da07      	bge.n	972e <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    971e:	2100      	movs	r1, #0
    9720:	4642      	mov	r2, r8
    9722:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9724:	3301      	adds	r3, #1
    9726:	b29b      	uxth	r3, r3
    9728:	42ab      	cmp	r3, r5
    972a:	dbfa      	blt.n	9722 <DataEncrypt+0x3e>
    972c:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    972e:	2201      	movs	r2, #1
    9730:	ab04      	add	r3, sp, #16
    9732:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9734:	4b2b      	ldr	r3, [pc, #172]	; (97e4 <DataEncrypt+0x100>)
    9736:	6858      	ldr	r0, [r3, #4]
    9738:	2300      	movs	r3, #0
    973a:	aa04      	add	r2, sp, #16
    973c:	18d2      	adds	r2, r2, r3
    973e:	5cc1      	ldrb	r1, [r0, r3]
    9740:	7051      	strb	r1, [r2, #1]
    9742:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9744:	2b08      	cmp	r3, #8
    9746:	d1f8      	bne.n	973a <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9748:	ab04      	add	r3, sp, #16
    974a:	725c      	strb	r4, [r3, #9]
    974c:	0a22      	lsrs	r2, r4, #8
    974e:	729a      	strb	r2, [r3, #10]
    9750:	0c22      	lsrs	r2, r4, #16
    9752:	72da      	strb	r2, [r3, #11]
    9754:	0e24      	lsrs	r4, r4, #24
    9756:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9758:	2204      	movs	r2, #4
    975a:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    975c:	2200      	movs	r2, #0
    975e:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9760:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    9762:	1c73      	adds	r3, r6, #1
    9764:	4699      	mov	r9, r3
    9766:	2300      	movs	r3, #0
    9768:	469b      	mov	fp, r3
    976a:	9303      	str	r3, [sp, #12]
    976c:	464b      	mov	r3, r9
    976e:	2b00      	cmp	r3, #0
    9770:	dd2f      	ble.n	97d2 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9772:	ac08      	add	r4, sp, #32
    9774:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9776:	4b1d      	ldr	r3, [pc, #116]	; (97ec <DataEncrypt+0x108>)
    9778:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    977a:	4e1d      	ldr	r6, [pc, #116]	; (97f0 <DataEncrypt+0x10c>)
    977c:	e017      	b.n	97ae <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    977e:	5d1a      	ldrb	r2, [r3, r4]
    9780:	5ccf      	ldrb	r7, [r1, r3]
    9782:	407a      	eors	r2, r7
    9784:	54ca      	strb	r2, [r1, r3]
    9786:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9788:	2b10      	cmp	r3, #16
    978a:	d007      	beq.n	979c <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    978c:	2800      	cmp	r0, #0
    978e:	d1f6      	bne.n	977e <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9790:	5d1a      	ldrb	r2, [r3, r4]
    9792:	4667      	mov	r7, ip
    9794:	5cff      	ldrb	r7, [r7, r3]
    9796:	407a      	eors	r2, r7
    9798:	54f2      	strb	r2, [r6, r3]
    979a:	e7f4      	b.n	9786 <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    979c:	3001      	adds	r0, #1
    979e:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    97a0:	9f03      	ldr	r7, [sp, #12]
    97a2:	3701      	adds	r7, #1
    97a4:	b2bb      	uxth	r3, r7
    97a6:	9303      	str	r3, [sp, #12]
    97a8:	469b      	mov	fp, r3
    97aa:	454b      	cmp	r3, r9
    97ac:	da11      	bge.n	97d2 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    97ae:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    97b0:	5d5a      	ldrb	r2, [r3, r5]
    97b2:	551a      	strb	r2, [r3, r4]
    97b4:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    97b6:	2b10      	cmp	r3, #16
    97b8:	d1fa      	bne.n	97b0 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    97ba:	490e      	ldr	r1, [pc, #56]	; (97f4 <DataEncrypt+0x110>)
    97bc:	0020      	movs	r0, r4
    97be:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    97c0:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    97c2:	4659      	mov	r1, fp
    97c4:	3901      	subs	r1, #1
    97c6:	0109      	lsls	r1, r1, #4
    97c8:	2300      	movs	r3, #0
    97ca:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    97cc:	4a0a      	ldr	r2, [pc, #40]	; (97f8 <DataEncrypt+0x114>)
    97ce:	4694      	mov	ip, r2
    97d0:	e7dc      	b.n	978c <DataEncrypt+0xa8>
	}
	return true;

}
    97d2:	2001      	movs	r0, #1
    97d4:	b00d      	add	sp, #52	; 0x34
    97d6:	bc3c      	pop	{r2, r3, r4, r5}
    97d8:	4690      	mov	r8, r2
    97da:	4699      	mov	r9, r3
    97dc:	46a2      	mov	sl, r4
    97de:	46ab      	mov	fp, r5
    97e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	200020e0 	.word	0x200020e0
    97e8:	000095b9 	.word	0x000095b9
    97ec:	0000aa0d 	.word	0x0000aa0d
    97f0:	20002114 	.word	0x20002114
    97f4:	000187e4 	.word	0x000187e4
    97f8:	2000212c 	.word	0x2000212c

000097fc <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    97fc:	4b0e      	ldr	r3, [pc, #56]	; (9838 <validate_mic+0x3c>)
    97fe:	781a      	ldrb	r2, [r3, #0]
    9800:	4b0e      	ldr	r3, [pc, #56]	; (983c <validate_mic+0x40>)
    9802:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    9804:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9806:	429a      	cmp	r2, r3
    9808:	d000      	beq.n	980c <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    980a:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    980c:	4b0a      	ldr	r3, [pc, #40]	; (9838 <validate_mic+0x3c>)
    980e:	785a      	ldrb	r2, [r3, #1]
    9810:	4b0a      	ldr	r3, [pc, #40]	; (983c <validate_mic+0x40>)
    9812:	785b      	ldrb	r3, [r3, #1]
    9814:	429a      	cmp	r2, r3
    9816:	d1f8      	bne.n	980a <validate_mic+0xe>
    9818:	4b07      	ldr	r3, [pc, #28]	; (9838 <validate_mic+0x3c>)
    981a:	789a      	ldrb	r2, [r3, #2]
    981c:	4b07      	ldr	r3, [pc, #28]	; (983c <validate_mic+0x40>)
    981e:	789b      	ldrb	r3, [r3, #2]
    9820:	429a      	cmp	r2, r3
    9822:	d1f2      	bne.n	980a <validate_mic+0xe>
    9824:	4b04      	ldr	r3, [pc, #16]	; (9838 <validate_mic+0x3c>)
    9826:	78d8      	ldrb	r0, [r3, #3]
    9828:	4b04      	ldr	r3, [pc, #16]	; (983c <validate_mic+0x40>)
    982a:	78db      	ldrb	r3, [r3, #3]
    982c:	1ac0      	subs	r0, r0, r3
    982e:	4243      	negs	r3, r0
    9830:	4158      	adcs	r0, r3
    9832:	b2c0      	uxtb	r0, r0
    9834:	e7e9      	b.n	980a <validate_mic+0xe>
    9836:	46c0      	nop			; (mov r8, r8)
    9838:	20002114 	.word	0x20002114
    983c:	2000213c 	.word	0x2000213c

00009840 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9840:	b5f0      	push	{r4, r5, r6, r7, lr}
    9842:	46de      	mov	lr, fp
    9844:	4657      	mov	r7, sl
    9846:	464e      	mov	r6, r9
    9848:	4645      	mov	r5, r8
    984a:	b5e0      	push	{r5, r6, r7, lr}
    984c:	b091      	sub	sp, #68	; 0x44
    984e:	4681      	mov	r9, r0
    9850:	9106      	str	r1, [sp, #24]
    9852:	9204      	str	r2, [sp, #16]
    9854:	9305      	str	r3, [sp, #20]
    9856:	ab1a      	add	r3, sp, #104	; 0x68
    9858:	781b      	ldrb	r3, [r3, #0]
    985a:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    985c:	7809      	ldrb	r1, [r1, #0]
    985e:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    9860:	070b      	lsls	r3, r1, #28
    9862:	d000      	beq.n	9866 <DataDecrypt+0x26>
    9864:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9866:	b28b      	uxth	r3, r1
    9868:	0010      	movs	r0, r2
    986a:	0112      	lsls	r2, r2, #4
    986c:	4291      	cmp	r1, r2
    986e:	da07      	bge.n	9880 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    9870:	2100      	movs	r1, #0
    9872:	464c      	mov	r4, r9
    9874:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9876:	3301      	adds	r3, #1
    9878:	b29b      	uxth	r3, r3
    987a:	4293      	cmp	r3, r2
    987c:	dbfa      	blt.n	9874 <DataDecrypt+0x34>
    987e:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9880:	2201      	movs	r2, #1
    9882:	ab08      	add	r3, sp, #32
    9884:	701a      	strb	r2, [r3, #0]
    9886:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    9888:	9c04      	ldr	r4, [sp, #16]
    988a:	aa08      	add	r2, sp, #32
    988c:	18d2      	adds	r2, r2, r3
    988e:	5ce1      	ldrb	r1, [r4, r3]
    9890:	7051      	strb	r1, [r2, #1]
    9892:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9894:	2b08      	cmp	r3, #8
    9896:	d1f8      	bne.n	988a <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9898:	ab08      	add	r3, sp, #32
    989a:	9905      	ldr	r1, [sp, #20]
    989c:	7259      	strb	r1, [r3, #9]
    989e:	0a0a      	lsrs	r2, r1, #8
    98a0:	729a      	strb	r2, [r3, #10]
    98a2:	0c0a      	lsrs	r2, r1, #16
    98a4:	72da      	strb	r2, [r3, #11]
    98a6:	0e0a      	lsrs	r2, r1, #24
    98a8:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    98aa:	2204      	movs	r2, #4
    98ac:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    98ae:	2200      	movs	r2, #0
    98b0:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    98b2:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    98b4:	1c43      	adds	r3, r0, #1
    98b6:	469a      	mov	sl, r3
    98b8:	2500      	movs	r5, #0
    98ba:	2300      	movs	r3, #0
    98bc:	4698      	mov	r8, r3
    98be:	4653      	mov	r3, sl
    98c0:	2b00      	cmp	r3, #0
    98c2:	dd2e      	ble.n	9922 <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    98c4:	ac0c      	add	r4, sp, #48	; 0x30
    98c6:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    98c8:	4b26      	ldr	r3, [pc, #152]	; (9964 <DataDecrypt+0x124>)
    98ca:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    98cc:	4f26      	ldr	r7, [pc, #152]	; (9968 <DataDecrypt+0x128>)
    98ce:	4643      	mov	r3, r8
    98d0:	9303      	str	r3, [sp, #12]
    98d2:	46a8      	mov	r8, r5
    98d4:	e014      	b.n	9900 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    98d6:	5d1a      	ldrb	r2, [r3, r4]
    98d8:	5ce9      	ldrb	r1, [r5, r3]
    98da:	404a      	eors	r2, r1
    98dc:	54ea      	strb	r2, [r5, r3]
    98de:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    98e0:	2b10      	cmp	r3, #16
    98e2:	d004      	beq.n	98ee <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    98e4:	2800      	cmp	r0, #0
    98e6:	d1f6      	bne.n	98d6 <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    98e8:	5d1a      	ldrb	r2, [r3, r4]
    98ea:	54fa      	strb	r2, [r7, r3]
    98ec:	e7f7      	b.n	98de <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    98ee:	3001      	adds	r0, #1
    98f0:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    98f2:	9d03      	ldr	r5, [sp, #12]
    98f4:	3501      	adds	r5, #1
    98f6:	b2ab      	uxth	r3, r5
    98f8:	9303      	str	r3, [sp, #12]
    98fa:	4698      	mov	r8, r3
    98fc:	4553      	cmp	r3, sl
    98fe:	da10      	bge.n	9922 <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9900:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9902:	5d9a      	ldrb	r2, [r3, r6]
    9904:	551a      	strb	r2, [r3, r4]
    9906:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9908:	2b10      	cmp	r3, #16
    990a:	d1fa      	bne.n	9902 <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    990c:	4917      	ldr	r1, [pc, #92]	; (996c <DataDecrypt+0x12c>)
    990e:	0020      	movs	r0, r4
    9910:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9912:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9914:	4642      	mov	r2, r8
    9916:	3a01      	subs	r2, #1
    9918:	0112      	lsls	r2, r2, #4
    991a:	2300      	movs	r3, #0
    991c:	444a      	add	r2, r9
    991e:	0015      	movs	r5, r2
    9920:	e7e0      	b.n	98e4 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9922:	9b06      	ldr	r3, [sp, #24]
    9924:	7819      	ldrb	r1, [r3, #0]
    9926:	3904      	subs	r1, #4
    9928:	b2c9      	uxtb	r1, r1
    992a:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    992c:	9b04      	ldr	r3, [sp, #16]
    992e:	9300      	str	r3, [sp, #0]
    9930:	9b05      	ldr	r3, [sp, #20]
    9932:	9a07      	ldr	r2, [sp, #28]
    9934:	4648      	mov	r0, r9
    9936:	4c0e      	ldr	r4, [pc, #56]	; (9970 <DataDecrypt+0x130>)
    9938:	47a0      	blx	r4
    993a:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    993c:	4d0d      	ldr	r5, [pc, #52]	; (9974 <DataDecrypt+0x134>)
    993e:	4c0a      	ldr	r4, [pc, #40]	; (9968 <DataDecrypt+0x128>)
    9940:	480d      	ldr	r0, [pc, #52]	; (9978 <DataDecrypt+0x138>)
    9942:	5ce2      	ldrb	r2, [r4, r3]
    9944:	5cc1      	ldrb	r1, [r0, r3]
    9946:	404a      	eors	r2, r1
    9948:	54ea      	strb	r2, [r5, r3]
    994a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    994c:	2b10      	cmp	r3, #16
    994e:	d1f8      	bne.n	9942 <DataDecrypt+0x102>
	}
	return validate_mic();
    9950:	4b0a      	ldr	r3, [pc, #40]	; (997c <DataDecrypt+0x13c>)
    9952:	4798      	blx	r3

}
    9954:	b011      	add	sp, #68	; 0x44
    9956:	bc3c      	pop	{r2, r3, r4, r5}
    9958:	4690      	mov	r8, r2
    995a:	4699      	mov	r9, r3
    995c:	46a2      	mov	sl, r4
    995e:	46ab      	mov	fp, r5
    9960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9962:	46c0      	nop			; (mov r8, r8)
    9964:	0000aa0d 	.word	0x0000aa0d
    9968:	20002104 	.word	0x20002104
    996c:	000187e4 	.word	0x000187e4
    9970:	000095b9 	.word	0x000095b9
    9974:	20002114 	.word	0x20002114
    9978:	2000212c 	.word	0x2000212c
    997c:	000097fd 	.word	0x000097fd

00009980 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    9980:	b510      	push	{r4, lr}
    switch(id)
    9982:	2800      	cmp	r0, #0
    9984:	d109      	bne.n	999a <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9986:	780b      	ldrb	r3, [r1, #0]
    9988:	2b19      	cmp	r3, #25
    998a:	d807      	bhi.n	999c <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    998c:	4a04      	ldr	r2, [pc, #16]	; (99a0 <MiMAC_Set+0x20>)
    998e:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    9990:	0018      	movs	r0, r3
    9992:	4b04      	ldr	r3, [pc, #16]	; (99a4 <MiMAC_Set+0x24>)
    9994:	4798      	blx	r3
          return true;
    9996:	2001      	movs	r0, #1
    9998:	e000      	b.n	999c <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    999a:	2000      	movs	r0, #0
}
    999c:	bd10      	pop	{r4, pc}
    999e:	46c0      	nop			; (mov r8, r8)
    99a0:	2000214e 	.word	0x2000214e
    99a4:	0000a959 	.word	0x0000a959

000099a8 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    99a8:	b570      	push	{r4, r5, r6, lr}
    99aa:	b082      	sub	sp, #8
    99ac:	466c      	mov	r4, sp
    99ae:	9000      	str	r0, [sp, #0]
    99b0:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    99b2:	4b1c      	ldr	r3, [pc, #112]	; (9a24 <MiMAC_Init+0x7c>)
    99b4:	4798      	blx	r3
	MACInitParams = initValue;
    99b6:	4d1c      	ldr	r5, [pc, #112]	; (9a28 <MiMAC_Init+0x80>)
    99b8:	002b      	movs	r3, r5
    99ba:	466a      	mov	r2, sp
    99bc:	ca03      	ldmia	r2!, {r0, r1}
    99be:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    99c0:	4b1a      	ldr	r3, [pc, #104]	; (9a2c <MiMAC_Init+0x84>)
    99c2:	4798      	blx	r3
    99c4:	0006      	movs	r6, r0
	// Set RF mode
	PHY_SetRxState(true);
    99c6:	2001      	movs	r0, #1
    99c8:	4b19      	ldr	r3, [pc, #100]	; (9a30 <MiMAC_Init+0x88>)
    99ca:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    99cc:	4b19      	ldr	r3, [pc, #100]	; (9a34 <MiMAC_Init+0x8c>)
    99ce:	701e      	strb	r6, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    99d0:	6868      	ldr	r0, [r5, #4]
    99d2:	4b19      	ldr	r3, [pc, #100]	; (9a38 <MiMAC_Init+0x90>)
    99d4:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    99d6:	4b19      	ldr	r3, [pc, #100]	; (9a3c <MiMAC_Init+0x94>)
    99d8:	2200      	movs	r2, #0
    99da:	701a      	strb	r2, [r3, #0]
    99dc:	2102      	movs	r1, #2
    99de:	31ff      	adds	r1, #255	; 0xff
    99e0:	545a      	strb	r2, [r3, r1]
    99e2:	4917      	ldr	r1, [pc, #92]	; (9a40 <MiMAC_Init+0x98>)
    99e4:	545a      	strb	r2, [r3, r1]
    99e6:	4917      	ldr	r1, [pc, #92]	; (9a44 <MiMAC_Init+0x9c>)
    99e8:	545a      	strb	r2, [r3, r1]
	}
	#ifdef ENABLE_SECURITY
		#if defined(ENABLE_NETWORK_FREEZER)
			if (initValue.actionFlags.bits.NetworkFreezer)
    99ea:	7823      	ldrb	r3, [r4, #0]
    99ec:	075b      	lsls	r3, r3, #29
    99ee:	d40a      	bmi.n	9a06 <MiMAC_Init+0x5e>
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
			} else
			{
				OutgoingFrameCounter.Val = 0;
    99f0:	4c15      	ldr	r4, [pc, #84]	; (9a48 <MiMAC_Init+0xa0>)
    99f2:	2300      	movs	r3, #0
    99f4:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    99f6:	2001      	movs	r0, #1
    99f8:	4b14      	ldr	r3, [pc, #80]	; (9a4c <MiMAC_Init+0xa4>)
    99fa:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    99fc:	2301      	movs	r3, #1
    99fe:	6023      	str	r3, [r4, #0]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    9a00:	2001      	movs	r0, #1
    9a02:	b002      	add	sp, #8
    9a04:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
<<<<<<< Updated upstream
=======
    8042:	e7f1      	b.n	8028 <UpdateSectorHead+0xc>
    8044:	4a03      	ldr	r2, [pc, #12]	; (8054 <UpdateSectorHead+0x38>)
    8046:	8813      	ldrh	r3, [r2, #0]
    8048:	333f      	adds	r3, #63	; 0x3f
    804a:	18c0      	adds	r0, r0, r3
    804c:	233f      	movs	r3, #63	; 0x3f
    804e:	4398      	bics	r0, r3
    8050:	8010      	strh	r0, [r2, #0]
    8052:	e7e9      	b.n	8028 <UpdateSectorHead+0xc>
    8054:	20000282 	.word	0x20000282

00008058 <ComputeCrc>:
    8058:	b530      	push	{r4, r5, lr}
    805a:	2900      	cmp	r1, #0
    805c:	d019      	beq.n	8092 <ComputeCrc+0x3a>
    805e:	24ff      	movs	r4, #255	; 0xff
    8060:	e013      	b.n	808a <ComputeCrc+0x32>
    8062:	0023      	movs	r3, r4
    8064:	0a15      	lsrs	r5, r2, #8
    8066:	406b      	eors	r3, r5
    8068:	091d      	lsrs	r5, r3, #4
    806a:	406b      	eors	r3, r5
    806c:	0212      	lsls	r2, r2, #8
    806e:	405a      	eors	r2, r3
    8070:	031d      	lsls	r5, r3, #12
    8072:	406a      	eors	r2, r5
    8074:	015b      	lsls	r3, r3, #5
    8076:	405a      	eors	r2, r3
    8078:	b292      	uxth	r2, r2
    807a:	0003      	movs	r3, r0
    807c:	1e5d      	subs	r5, r3, #1
    807e:	41ab      	sbcs	r3, r5
    8080:	18c0      	adds	r0, r0, r3
    8082:	3901      	subs	r1, #1
    8084:	b289      	uxth	r1, r1
    8086:	2900      	cmp	r1, #0
    8088:	d003      	beq.n	8092 <ComputeCrc+0x3a>
    808a:	2800      	cmp	r0, #0
    808c:	d0e9      	beq.n	8062 <ComputeCrc+0xa>
    808e:	7803      	ldrb	r3, [r0, #0]
    8090:	e7e8      	b.n	8064 <ComputeCrc+0xc>
    8092:	0010      	movs	r0, r2
    8094:	bd30      	pop	{r4, r5, pc}
    8096:	Address 0x00008096 is out of bounds.


00008098 <GatherData>:
    8098:	b5f0      	push	{r4, r5, r6, r7, lr}
    809a:	46de      	mov	lr, fp
    809c:	4657      	mov	r7, sl
    809e:	b580      	push	{r7, lr}
    80a0:	b089      	sub	sp, #36	; 0x24
    80a2:	9001      	str	r0, [sp, #4]
    80a4:	9102      	str	r1, [sp, #8]
    80a6:	4693      	mov	fp, r2
    80a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    80aa:	2a00      	cmp	r2, #0
    80ac:	d00d      	beq.n	80ca <GatherData+0x32>
    80ae:	4692      	mov	sl, r2
    80b0:	449a      	add	sl, r3
    80b2:	445b      	add	r3, fp
    80b4:	b29d      	uxth	r5, r3
    80b6:	465e      	mov	r6, fp
    80b8:	9c02      	ldr	r4, [sp, #8]
    80ba:	2001      	movs	r0, #1
    80bc:	45ab      	cmp	fp, r5
    80be:	d03e      	beq.n	813e <GatherData+0xa6>
    80c0:	4f22      	ldr	r7, [pc, #136]	; (814c <GatherData+0xb4>)
    80c2:	2c00      	cmp	r4, #0
    80c4:	d108      	bne.n	80d8 <GatherData+0x40>
    80c6:	2000      	movs	r0, #0
    80c8:	e039      	b.n	813e <GatherData+0xa6>
    80ca:	2200      	movs	r2, #0
    80cc:	4692      	mov	sl, r2
    80ce:	e7f0      	b.n	80b2 <GatherData+0x1a>
    80d0:	ab04      	add	r3, sp, #16
    80d2:	895c      	ldrh	r4, [r3, #10]
    80d4:	2c00      	cmp	r4, #0
    80d6:	d031      	beq.n	813c <GatherData+0xa4>
    80d8:	2310      	movs	r3, #16
    80da:	aa04      	add	r2, sp, #16
    80dc:	0021      	movs	r1, r4
    80de:	9801      	ldr	r0, [sp, #4]
    80e0:	47b8      	blx	r7
    80e2:	ab04      	add	r3, sp, #16
    80e4:	889a      	ldrh	r2, [r3, #4]
    80e6:	42aa      	cmp	r2, r5
    80e8:	d2f2      	bcs.n	80d0 <GatherData+0x38>
    80ea:	88db      	ldrh	r3, [r3, #6]
    80ec:	18d3      	adds	r3, r2, r3
    80ee:	b29b      	uxth	r3, r3
    80f0:	42b3      	cmp	r3, r6
    80f2:	d9ed      	bls.n	80d0 <GatherData+0x38>
    80f4:	42ab      	cmp	r3, r5
    80f6:	d201      	bcs.n	80fc <GatherData+0x64>
    80f8:	001e      	movs	r6, r3
    80fa:	e7e9      	b.n	80d0 <GatherData+0x38>
    80fc:	1aa9      	subs	r1, r5, r2
    80fe:	b289      	uxth	r1, r1
    8100:	42b2      	cmp	r2, r6
    8102:	d915      	bls.n	8130 <GatherData+0x98>
    8104:	ab04      	add	r3, sp, #16
    8106:	895b      	ldrh	r3, [r3, #10]
    8108:	9303      	str	r3, [sp, #12]
    810a:	000b      	movs	r3, r1
    810c:	1aed      	subs	r5, r5, r3
    810e:	b2ad      	uxth	r5, r5
    8110:	4652      	mov	r2, sl
    8112:	2a00      	cmp	r2, #0
    8114:	d008      	beq.n	8128 <GatherData+0x90>
    8116:	3410      	adds	r4, #16
    8118:	1909      	adds	r1, r1, r4
    811a:	1ad2      	subs	r2, r2, r3
    811c:	4692      	mov	sl, r2
    811e:	1ac9      	subs	r1, r1, r3
    8120:	b289      	uxth	r1, r1
    8122:	9801      	ldr	r0, [sp, #4]
    8124:	4c09      	ldr	r4, [pc, #36]	; (814c <GatherData+0xb4>)
    8126:	47a0      	blx	r4
    8128:	42ae      	cmp	r6, r5
    812a:	d00d      	beq.n	8148 <GatherData+0xb0>
    812c:	9c03      	ldr	r4, [sp, #12]
    812e:	e7c8      	b.n	80c2 <GatherData+0x2a>
    8130:	1bab      	subs	r3, r5, r6
    8132:	b29b      	uxth	r3, r3
    8134:	465e      	mov	r6, fp
    8136:	9a02      	ldr	r2, [sp, #8]
    8138:	9203      	str	r2, [sp, #12]
    813a:	e7e7      	b.n	810c <GatherData+0x74>
    813c:	2000      	movs	r0, #0
    813e:	b009      	add	sp, #36	; 0x24
    8140:	bc0c      	pop	{r2, r3}
    8142:	4692      	mov	sl, r2
    8144:	469b      	mov	fp, r3
    8146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8148:	2001      	movs	r0, #1
    814a:	e7f8      	b.n	813e <GatherData+0xa6>
    814c:	00007db1 	.word	0x00007db1

00008150 <ComputeDataCrc>:
    8150:	b5f0      	push	{r4, r5, r6, r7, lr}
    8152:	46de      	mov	lr, fp
    8154:	4647      	mov	r7, r8
    8156:	b580      	push	{r7, lr}
    8158:	b087      	sub	sp, #28
    815a:	9004      	str	r0, [sp, #16]
    815c:	9105      	str	r1, [sp, #20]
    815e:	7995      	ldrb	r5, [r2, #6]
    8160:	79d3      	ldrb	r3, [r2, #7]
    8162:	021b      	lsls	r3, r3, #8
    8164:	431d      	orrs	r5, r3
    8166:	7917      	ldrb	r7, [r2, #4]
    8168:	7953      	ldrb	r3, [r2, #5]
    816a:	021b      	lsls	r3, r3, #8
    816c:	431f      	orrs	r7, r3
    816e:	0a2c      	lsrs	r4, r5, #8
    8170:	b264      	sxtb	r4, r4
    8172:	2c00      	cmp	r4, #0
    8174:	db2f      	blt.n	81d6 <ComputeDataCrc+0x86>
    8176:	4b1c      	ldr	r3, [pc, #112]	; (81e8 <ComputeDataCrc+0x98>)
    8178:	9303      	str	r3, [sp, #12]
    817a:	4b1c      	ldr	r3, [pc, #112]	; (81ec <ComputeDataCrc+0x9c>)
    817c:	4698      	mov	r8, r3
    817e:	e011      	b.n	81a4 <ComputeDataCrc+0x54>
    8180:	2d00      	cmp	r5, #0
    8182:	d02a      	beq.n	81da <ComputeDataCrc+0x8a>
    8184:	4b1a      	ldr	r3, [pc, #104]	; (81f0 <ComputeDataCrc+0xa0>)
    8186:	9300      	str	r3, [sp, #0]
    8188:	002b      	movs	r3, r5
    818a:	003a      	movs	r2, r7
    818c:	9905      	ldr	r1, [sp, #20]
    818e:	9804      	ldr	r0, [sp, #16]
    8190:	4e18      	ldr	r6, [pc, #96]	; (81f4 <ComputeDataCrc+0xa4>)
    8192:	47b0      	blx	r6
    8194:	2800      	cmp	r0, #0
    8196:	d020      	beq.n	81da <ComputeDataCrc+0x8a>
    8198:	0029      	movs	r1, r5
    819a:	e015      	b.n	81c8 <ComputeDataCrc+0x78>
    819c:	3c01      	subs	r4, #1
    819e:	b264      	sxtb	r4, r4
    81a0:	1c63      	adds	r3, r4, #1
    81a2:	d01a      	beq.n	81da <ComputeDataCrc+0x8a>
    81a4:	2c00      	cmp	r4, #0
    81a6:	d0eb      	beq.n	8180 <ComputeDataCrc+0x30>
    81a8:	3d01      	subs	r5, #1
    81aa:	3dff      	subs	r5, #255	; 0xff
    81ac:	b2ad      	uxth	r5, r5
    81ae:	4b10      	ldr	r3, [pc, #64]	; (81f0 <ComputeDataCrc+0xa0>)
    81b0:	9300      	str	r3, [sp, #0]
    81b2:	2380      	movs	r3, #128	; 0x80
    81b4:	005b      	lsls	r3, r3, #1
    81b6:	003a      	movs	r2, r7
    81b8:	9905      	ldr	r1, [sp, #20]
    81ba:	9804      	ldr	r0, [sp, #16]
    81bc:	4e0d      	ldr	r6, [pc, #52]	; (81f4 <ComputeDataCrc+0xa4>)
    81be:	47b0      	blx	r6
    81c0:	2800      	cmp	r0, #0
    81c2:	d0eb      	beq.n	819c <ComputeDataCrc+0x4c>
    81c4:	2180      	movs	r1, #128	; 0x80
    81c6:	0049      	lsls	r1, r1, #1
    81c8:	187f      	adds	r7, r7, r1
    81ca:	b2bf      	uxth	r7, r7
    81cc:	9a03      	ldr	r2, [sp, #12]
    81ce:	4808      	ldr	r0, [pc, #32]	; (81f0 <ComputeDataCrc+0xa0>)
    81d0:	47c0      	blx	r8
    81d2:	9003      	str	r0, [sp, #12]
    81d4:	e7e2      	b.n	819c <ComputeDataCrc+0x4c>
    81d6:	4b04      	ldr	r3, [pc, #16]	; (81e8 <ComputeDataCrc+0x98>)
    81d8:	9303      	str	r3, [sp, #12]
    81da:	9803      	ldr	r0, [sp, #12]
    81dc:	b007      	add	sp, #28
    81de:	bc0c      	pop	{r2, r3}
    81e0:	4690      	mov	r8, r2
    81e2:	469b      	mov	fp, r3
    81e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81e6:	46c0      	nop			; (mov r8, r8)
    81e8:	0000ffff 	.word	0x0000ffff
    81ec:	00008059 	.word	0x00008059
    81f0:	2000013c 	.word	0x2000013c
    81f4:	00008099 	.word	0x00008099

000081f8 <FindItemCache>:
    81f8:	b570      	push	{r4, r5, r6, lr}
    81fa:	4b16      	ldr	r3, [pc, #88]	; (8254 <FindItemCache+0x5c>)
    81fc:	781c      	ldrb	r4, [r3, #0]
    81fe:	2c00      	cmp	r4, #0
    8200:	d026      	beq.n	8250 <FindItemCache+0x58>
    8202:	4b15      	ldr	r3, [pc, #84]	; (8258 <FindItemCache+0x60>)
    8204:	881b      	ldrh	r3, [r3, #0]
    8206:	4283      	cmp	r3, r0
    8208:	d016      	beq.n	8238 <FindItemCache+0x40>
    820a:	2301      	movs	r3, #1
    820c:	4e12      	ldr	r6, [pc, #72]	; (8258 <FindItemCache+0x60>)
    820e:	b2da      	uxtb	r2, r3
    8210:	4294      	cmp	r4, r2
    8212:	d91b      	bls.n	824c <FindItemCache+0x54>
    8214:	001d      	movs	r5, r3
    8216:	1c59      	adds	r1, r3, #1
    8218:	009a      	lsls	r2, r3, #2
    821a:	5ab2      	ldrh	r2, [r6, r2]
    821c:	4282      	cmp	r2, r0
    821e:	d001      	beq.n	8224 <FindItemCache+0x2c>
    8220:	000b      	movs	r3, r1
    8222:	e7f4      	b.n	820e <FindItemCache+0x16>
    8224:	009b      	lsls	r3, r3, #2
    8226:	480c      	ldr	r0, [pc, #48]	; (8258 <FindItemCache+0x60>)
    8228:	18c0      	adds	r0, r0, r3
    822a:	00ad      	lsls	r5, r5, #2
    822c:	4b0a      	ldr	r3, [pc, #40]	; (8258 <FindItemCache+0x60>)
    822e:	195d      	adds	r5, r3, r5
    8230:	886b      	ldrh	r3, [r5, #2]
    8232:	2b00      	cmp	r3, #0
    8234:	d003      	beq.n	823e <FindItemCache+0x46>
    8236:	bd70      	pop	{r4, r5, r6, pc}
    8238:	4807      	ldr	r0, [pc, #28]	; (8258 <FindItemCache+0x60>)
    823a:	2500      	movs	r5, #0
    823c:	e7f5      	b.n	822a <FindItemCache+0x32>
    823e:	4b07      	ldr	r3, [pc, #28]	; (825c <FindItemCache+0x64>)
    8240:	4a07      	ldr	r2, [pc, #28]	; (8260 <FindItemCache+0x68>)
    8242:	218c      	movs	r1, #140	; 0x8c
    8244:	31ff      	adds	r1, #255	; 0xff
    8246:	4807      	ldr	r0, [pc, #28]	; (8264 <FindItemCache+0x6c>)
    8248:	4c07      	ldr	r4, [pc, #28]	; (8268 <FindItemCache+0x70>)
    824a:	47a0      	blx	r4
    824c:	2000      	movs	r0, #0
    824e:	e7f2      	b.n	8236 <FindItemCache+0x3e>
    8250:	2000      	movs	r0, #0
    8252:	e7f0      	b.n	8236 <FindItemCache+0x3e>
    8254:	20000278 	.word	0x20000278
    8258:	20000258 	.word	0x20000258
    825c:	00018658 	.word	0x00018658
    8260:	00018744 	.word	0x00018744
    8264:	00018674 	.word	0x00018674
    8268:	00016775 	.word	0x00016775

0000826c <FindItem>:
    826c:	b510      	push	{r4, lr}
    826e:	4b05      	ldr	r3, [pc, #20]	; (8284 <FindItem+0x18>)
    8270:	4798      	blx	r3
    8272:	2800      	cmp	r0, #0
    8274:	d004      	beq.n	8280 <FindItem+0x14>
    8276:	7883      	ldrb	r3, [r0, #2]
    8278:	78c0      	ldrb	r0, [r0, #3]
    827a:	0200      	lsls	r0, r0, #8
    827c:	4318      	orrs	r0, r3
    827e:	bd10      	pop	{r4, pc}
    8280:	2000      	movs	r0, #0
    8282:	e7fc      	b.n	827e <FindItem+0x12>
    8284:	000081f9 	.word	0x000081f9

00008288 <CreateItemCache>:
    8288:	b510      	push	{r4, lr}
    828a:	0004      	movs	r4, r0
    828c:	4b0e      	ldr	r3, [pc, #56]	; (82c8 <CreateItemCache+0x40>)
    828e:	4798      	blx	r3
    8290:	2800      	cmp	r0, #0
    8292:	d10b      	bne.n	82ac <CreateItemCache+0x24>
    8294:	4b0d      	ldr	r3, [pc, #52]	; (82cc <CreateItemCache+0x44>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b07      	cmp	r3, #7
    829a:	d80e      	bhi.n	82ba <CreateItemCache+0x32>
    829c:	1c59      	adds	r1, r3, #1
    829e:	4a0b      	ldr	r2, [pc, #44]	; (82cc <CreateItemCache+0x44>)
    82a0:	7011      	strb	r1, [r2, #0]
    82a2:	480b      	ldr	r0, [pc, #44]	; (82d0 <CreateItemCache+0x48>)
    82a4:	009b      	lsls	r3, r3, #2
    82a6:	521c      	strh	r4, [r3, r0]
    82a8:	18c0      	adds	r0, r0, r3
    82aa:	bd10      	pop	{r4, pc}
    82ac:	4b09      	ldr	r3, [pc, #36]	; (82d4 <CreateItemCache+0x4c>)
    82ae:	4a0a      	ldr	r2, [pc, #40]	; (82d8 <CreateItemCache+0x50>)
    82b0:	21cc      	movs	r1, #204	; 0xcc
    82b2:	0049      	lsls	r1, r1, #1
    82b4:	4809      	ldr	r0, [pc, #36]	; (82dc <CreateItemCache+0x54>)
    82b6:	4c0a      	ldr	r4, [pc, #40]	; (82e0 <CreateItemCache+0x58>)
    82b8:	47a0      	blx	r4
    82ba:	4b0a      	ldr	r3, [pc, #40]	; (82e4 <CreateItemCache+0x5c>)
    82bc:	4a06      	ldr	r2, [pc, #24]	; (82d8 <CreateItemCache+0x50>)
    82be:	219a      	movs	r1, #154	; 0x9a
    82c0:	31ff      	adds	r1, #255	; 0xff
    82c2:	4806      	ldr	r0, [pc, #24]	; (82dc <CreateItemCache+0x54>)
    82c4:	4c06      	ldr	r4, [pc, #24]	; (82e0 <CreateItemCache+0x58>)
    82c6:	47a0      	blx	r4
    82c8:	000081f9 	.word	0x000081f9
    82cc:	20000278 	.word	0x20000278
    82d0:	20000258 	.word	0x20000258
    82d4:	00018600 	.word	0x00018600
    82d8:	00018754 	.word	0x00018754
    82dc:	00018674 	.word	0x00018674
    82e0:	00016775 	.word	0x00016775
    82e4:	0001861c 	.word	0x0001861c

000082e8 <DeleteItemCache>:
    82e8:	b510      	push	{r4, lr}
    82ea:	4b0b      	ldr	r3, [pc, #44]	; (8318 <DeleteItemCache+0x30>)
    82ec:	4798      	blx	r3
    82ee:	2800      	cmp	r0, #0
    82f0:	d00b      	beq.n	830a <DeleteItemCache+0x22>
    82f2:	4b0a      	ldr	r3, [pc, #40]	; (831c <DeleteItemCache+0x34>)
    82f4:	7819      	ldrb	r1, [r3, #0]
    82f6:	3901      	subs	r1, #1
    82f8:	b2c9      	uxtb	r1, r1
    82fa:	7019      	strb	r1, [r3, #0]
    82fc:	0089      	lsls	r1, r1, #2
    82fe:	4b08      	ldr	r3, [pc, #32]	; (8320 <DeleteItemCache+0x38>)
    8300:	1859      	adds	r1, r3, r1
    8302:	2204      	movs	r2, #4
    8304:	4b07      	ldr	r3, [pc, #28]	; (8324 <DeleteItemCache+0x3c>)
    8306:	4798      	blx	r3
    8308:	bd10      	pop	{r4, pc}
    830a:	4b07      	ldr	r3, [pc, #28]	; (8328 <DeleteItemCache+0x40>)
    830c:	4a07      	ldr	r2, [pc, #28]	; (832c <DeleteItemCache+0x44>)
    830e:	21d3      	movs	r1, #211	; 0xd3
    8310:	0049      	lsls	r1, r1, #1
    8312:	4807      	ldr	r0, [pc, #28]	; (8330 <DeleteItemCache+0x48>)
    8314:	4c07      	ldr	r4, [pc, #28]	; (8334 <DeleteItemCache+0x4c>)
    8316:	47a0      	blx	r4
    8318:	000081f9 	.word	0x000081f9
    831c:	20000278 	.word	0x20000278
    8320:	20000258 	.word	0x20000258
    8324:	00016837 	.word	0x00016837
    8328:	0001863c 	.word	0x0001863c
    832c:	00018764 	.word	0x00018764
    8330:	00018674 	.word	0x00018674
    8334:	00016775 	.word	0x00016775

00008338 <eraseSectorTimerFired>:
    8338:	b510      	push	{r4, lr}
    833a:	4b05      	ldr	r3, [pc, #20]	; (8350 <eraseSectorTimerFired+0x18>)
    833c:	4798      	blx	r3
    833e:	2800      	cmp	r0, #0
    8340:	d000      	beq.n	8344 <eraseSectorTimerFired+0xc>
    8342:	bd10      	pop	{r4, pc}
    8344:	4b03      	ldr	r3, [pc, #12]	; (8354 <eraseSectorTimerFired+0x1c>)
    8346:	7818      	ldrb	r0, [r3, #0]
    8348:	4b03      	ldr	r3, [pc, #12]	; (8358 <eraseSectorTimerFired+0x20>)
    834a:	4798      	blx	r3
    834c:	e7f9      	b.n	8342 <eraseSectorTimerFired+0xa>
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	00008001 	.word	0x00008001
    8354:	20000016 	.word	0x20000016
    8358:	00007f91 	.word	0x00007f91

0000835c <EraseSector>:
    835c:	b510      	push	{r4, lr}
    835e:	4c08      	ldr	r4, [pc, #32]	; (8380 <EraseSector+0x24>)
    8360:	7820      	ldrb	r0, [r4, #0]
    8362:	4b08      	ldr	r3, [pc, #32]	; (8384 <EraseSector+0x28>)
    8364:	4798      	blx	r3
    8366:	7820      	ldrb	r0, [r4, #0]
    8368:	2280      	movs	r2, #128	; 0x80
    836a:	0192      	lsls	r2, r2, #6
    836c:	2100      	movs	r1, #0
    836e:	4b06      	ldr	r3, [pc, #24]	; (8388 <EraseSector+0x2c>)
    8370:	4798      	blx	r3
    8372:	2800      	cmp	r0, #0
    8374:	d003      	beq.n	837e <EraseSector+0x22>
    8376:	2280      	movs	r2, #128	; 0x80
    8378:	0052      	lsls	r2, r2, #1
    837a:	4b04      	ldr	r3, [pc, #16]	; (838c <EraseSector+0x30>)
    837c:	801a      	strh	r2, [r3, #0]
    837e:	bd10      	pop	{r4, pc}
    8380:	20000280 	.word	0x20000280
    8384:	00007f91 	.word	0x00007f91
    8388:	00007fe5 	.word	0x00007fe5
    838c:	20000282 	.word	0x20000282

00008390 <WriteAndCheck>:
    8390:	b5f0      	push	{r4, r5, r6, r7, lr}
    8392:	b083      	sub	sp, #12
    8394:	9001      	str	r0, [sp, #4]
    8396:	000d      	movs	r5, r1
    8398:	0016      	movs	r6, r2
    839a:	4f07      	ldr	r7, [pc, #28]	; (83b8 <WriteAndCheck+0x28>)
    839c:	7838      	ldrb	r0, [r7, #0]
    839e:	0013      	movs	r3, r2
    83a0:	000a      	movs	r2, r1
    83a2:	9901      	ldr	r1, [sp, #4]
    83a4:	4c05      	ldr	r4, [pc, #20]	; (83bc <WriteAndCheck+0x2c>)
    83a6:	47a0      	blx	r4
    83a8:	7838      	ldrb	r0, [r7, #0]
    83aa:	0033      	movs	r3, r6
    83ac:	002a      	movs	r2, r5
    83ae:	9901      	ldr	r1, [sp, #4]
    83b0:	4c03      	ldr	r4, [pc, #12]	; (83c0 <WriteAndCheck+0x30>)
    83b2:	47a0      	blx	r4
    83b4:	b003      	add	sp, #12
    83b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83b8:	20000280 	.word	0x20000280
    83bc:	00007e29 	.word	0x00007e29
    83c0:	00007ff5 	.word	0x00007ff5

000083c4 <WriteSectorHeader>:
    83c4:	b510      	push	{r4, lr}
    83c6:	b086      	sub	sp, #24
    83c8:	ac01      	add	r4, sp, #4
    83ca:	2341      	movs	r3, #65	; 0x41
    83cc:	70a3      	strb	r3, [r4, #2]
    83ce:	3313      	adds	r3, #19
    83d0:	70e3      	strb	r3, [r4, #3]
    83d2:	3b01      	subs	r3, #1
    83d4:	7123      	strb	r3, [r4, #4]
    83d6:	3b05      	subs	r3, #5
    83d8:	7163      	strb	r3, [r4, #5]
    83da:	3328      	adds	r3, #40	; 0x28
    83dc:	71a3      	strb	r3, [r4, #6]
    83de:	3b44      	subs	r3, #68	; 0x44
    83e0:	71e3      	strb	r3, [r4, #7]
    83e2:	9003      	str	r0, [sp, #12]
    83e4:	43c0      	mvns	r0, r0
    83e6:	9004      	str	r0, [sp, #16]
    83e8:	4b08      	ldr	r3, [pc, #32]	; (840c <WriteSectorHeader+0x48>)
    83ea:	881b      	ldrh	r3, [r3, #0]
    83ec:	8223      	strh	r3, [r4, #16]
    83ee:	4a08      	ldr	r2, [pc, #32]	; (8410 <WriteSectorHeader+0x4c>)
    83f0:	2110      	movs	r1, #16
    83f2:	466b      	mov	r3, sp
    83f4:	1d98      	adds	r0, r3, #6
    83f6:	4b07      	ldr	r3, [pc, #28]	; (8414 <WriteSectorHeader+0x50>)
    83f8:	4798      	blx	r3
    83fa:	8020      	strh	r0, [r4, #0]
    83fc:	2212      	movs	r2, #18
    83fe:	0021      	movs	r1, r4
    8400:	2000      	movs	r0, #0
    8402:	4b05      	ldr	r3, [pc, #20]	; (8418 <WriteSectorHeader+0x54>)
    8404:	4798      	blx	r3
    8406:	b006      	add	sp, #24
    8408:	bd10      	pop	{r4, pc}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	2000027a 	.word	0x2000027a
    8410:	0000ffff 	.word	0x0000ffff
    8414:	00008059 	.word	0x00008059
    8418:	00008391 	.word	0x00008391

0000841c <SmartCompacting>:
    841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    841e:	0004      	movs	r4, r0
    8420:	000d      	movs	r5, r1
    8422:	4a21      	ldr	r2, [pc, #132]	; (84a8 <SmartCompacting+0x8c>)
    8424:	8813      	ldrh	r3, [r2, #0]
    8426:	18cb      	adds	r3, r1, r3
    8428:	b29b      	uxth	r3, r3
    842a:	8013      	strh	r3, [r2, #0]
    842c:	2bff      	cmp	r3, #255	; 0xff
    842e:	d92e      	bls.n	848e <SmartCompacting+0x72>
    8430:	4b1e      	ldr	r3, [pc, #120]	; (84ac <SmartCompacting+0x90>)
    8432:	881a      	ldrh	r2, [r3, #0]
    8434:	1880      	adds	r0, r0, r2
    8436:	2580      	movs	r5, #128	; 0x80
    8438:	006d      	lsls	r5, r5, #1
    843a:	1aaa      	subs	r2, r5, r2
    843c:	491c      	ldr	r1, [pc, #112]	; (84b0 <SmartCompacting+0x94>)
    843e:	4b1d      	ldr	r3, [pc, #116]	; (84b4 <SmartCompacting+0x98>)
    8440:	4798      	blx	r3
    8442:	4b1d      	ldr	r3, [pc, #116]	; (84b8 <SmartCompacting+0x9c>)
    8444:	8818      	ldrh	r0, [r3, #0]
    8446:	002a      	movs	r2, r5
    8448:	0021      	movs	r1, r4
    844a:	4b1c      	ldr	r3, [pc, #112]	; (84bc <SmartCompacting+0xa0>)
    844c:	4798      	blx	r3
    844e:	1e05      	subs	r5, r0, #0
    8450:	d027      	beq.n	84a2 <SmartCompacting+0x86>
    8452:	2100      	movs	r1, #0
    8454:	2080      	movs	r0, #128	; 0x80
    8456:	0040      	lsls	r0, r0, #1
    8458:	4b19      	ldr	r3, [pc, #100]	; (84c0 <SmartCompacting+0xa4>)
    845a:	4798      	blx	r3
    845c:	4b13      	ldr	r3, [pc, #76]	; (84ac <SmartCompacting+0x90>)
    845e:	8818      	ldrh	r0, [r3, #0]
    8460:	2200      	movs	r2, #0
    8462:	801a      	strh	r2, [r3, #0]
    8464:	4b10      	ldr	r3, [pc, #64]	; (84a8 <SmartCompacting+0x8c>)
    8466:	881e      	ldrh	r6, [r3, #0]
    8468:	3e01      	subs	r6, #1
    846a:	3eff      	subs	r6, #255	; 0xff
    846c:	b2b6      	uxth	r6, r6
    846e:	801e      	strh	r6, [r3, #0]
    8470:	2e00      	cmp	r6, #0
    8472:	d016      	beq.n	84a2 <SmartCompacting+0x86>
    8474:	2180      	movs	r1, #128	; 0x80
    8476:	0049      	lsls	r1, r1, #1
    8478:	1a09      	subs	r1, r1, r0
    847a:	b289      	uxth	r1, r1
    847c:	4b0c      	ldr	r3, [pc, #48]	; (84b0 <SmartCompacting+0x94>)
    847e:	1859      	adds	r1, r3, r1
    8480:	0032      	movs	r2, r6
    8482:	0020      	movs	r0, r4
    8484:	4b0b      	ldr	r3, [pc, #44]	; (84b4 <SmartCompacting+0x98>)
    8486:	4798      	blx	r3
    8488:	4b08      	ldr	r3, [pc, #32]	; (84ac <SmartCompacting+0x90>)
    848a:	801e      	strh	r6, [r3, #0]
    848c:	e009      	b.n	84a2 <SmartCompacting+0x86>
    848e:	4e07      	ldr	r6, [pc, #28]	; (84ac <SmartCompacting+0x90>)
    8490:	8837      	ldrh	r7, [r6, #0]
    8492:	19c0      	adds	r0, r0, r7
    8494:	000a      	movs	r2, r1
    8496:	4906      	ldr	r1, [pc, #24]	; (84b0 <SmartCompacting+0x94>)
    8498:	4b06      	ldr	r3, [pc, #24]	; (84b4 <SmartCompacting+0x98>)
    849a:	4798      	blx	r3
    849c:	19ed      	adds	r5, r5, r7
    849e:	8035      	strh	r5, [r6, #0]
    84a0:	2501      	movs	r5, #1
    84a2:	0028      	movs	r0, r5
    84a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84a6:	46c0      	nop			; (mov r8, r8)
    84a8:	20000138 	.word	0x20000138
    84ac:	2000010c 	.word	0x2000010c
    84b0:	2000013c 	.word	0x2000013c
    84b4:	00016837 	.word	0x00016837
    84b8:	20000282 	.word	0x20000282
    84bc:	00008391 	.word	0x00008391
    84c0:	0000801d 	.word	0x0000801d

000084c4 <CompactSector>:
    84c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    84c6:	46de      	mov	lr, fp
    84c8:	4657      	mov	r7, sl
    84ca:	464e      	mov	r6, r9
    84cc:	4645      	mov	r5, r8
    84ce:	b5e0      	push	{r5, r6, r7, lr}
    84d0:	b0d5      	sub	sp, #340	; 0x154
    84d2:	487b      	ldr	r0, [pc, #492]	; (86c0 <CompactSector+0x1fc>)
    84d4:	4b7b      	ldr	r3, [pc, #492]	; (86c4 <CompactSector+0x200>)
    84d6:	4798      	blx	r3
    84d8:	2300      	movs	r3, #0
    84da:	4a7b      	ldr	r2, [pc, #492]	; (86c8 <CompactSector+0x204>)
    84dc:	8013      	strh	r3, [r2, #0]
    84de:	4a7b      	ldr	r2, [pc, #492]	; (86cc <CompactSector+0x208>)
    84e0:	8013      	strh	r3, [r2, #0]
    84e2:	4a7b      	ldr	r2, [pc, #492]	; (86d0 <CompactSector+0x20c>)
    84e4:	8013      	strh	r3, [r2, #0]
    84e6:	4a7b      	ldr	r2, [pc, #492]	; (86d4 <CompactSector+0x210>)
    84e8:	8013      	strh	r3, [r2, #0]
    84ea:	4b7b      	ldr	r3, [pc, #492]	; (86d8 <CompactSector+0x214>)
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	001f      	movs	r7, r3
    84f0:	9303      	str	r3, [sp, #12]
    84f2:	2312      	movs	r3, #18
    84f4:	aa0f      	add	r2, sp, #60	; 0x3c
    84f6:	2100      	movs	r1, #0
    84f8:	0038      	movs	r0, r7
    84fa:	4c78      	ldr	r4, [pc, #480]	; (86dc <CompactSector+0x218>)
    84fc:	47a0      	blx	r4
    84fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8500:	9309      	str	r3, [sp, #36]	; 0x24
    8502:	4c75      	ldr	r4, [pc, #468]	; (86d8 <CompactSector+0x214>)
    8504:	0025      	movs	r5, r4
    8506:	0026      	movs	r6, r4
    8508:	e008      	b.n	851c <CompactSector+0x58>
    850a:	7033      	strb	r3, [r6, #0]
    850c:	4b72      	ldr	r3, [pc, #456]	; (86d8 <CompactSector+0x214>)
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	42bb      	cmp	r3, r7
    8512:	d00b      	beq.n	852c <CompactSector+0x68>
    8514:	4b72      	ldr	r3, [pc, #456]	; (86e0 <CompactSector+0x21c>)
    8516:	4798      	blx	r3
    8518:	2800      	cmp	r0, #0
    851a:	d10d      	bne.n	8538 <CompactSector+0x74>
    851c:	7823      	ldrb	r3, [r4, #0]
    851e:	3301      	adds	r3, #1
    8520:	b2db      	uxtb	r3, r3
    8522:	2b01      	cmp	r3, #1
    8524:	d9f1      	bls.n	850a <CompactSector+0x46>
    8526:	2300      	movs	r3, #0
    8528:	702b      	strb	r3, [r5, #0]
    852a:	e7ef      	b.n	850c <CompactSector+0x48>
    852c:	4b6d      	ldr	r3, [pc, #436]	; (86e4 <CompactSector+0x220>)
    852e:	4a6e      	ldr	r2, [pc, #440]	; (86e8 <CompactSector+0x224>)
    8530:	496e      	ldr	r1, [pc, #440]	; (86ec <CompactSector+0x228>)
    8532:	486f      	ldr	r0, [pc, #444]	; (86f0 <CompactSector+0x22c>)
    8534:	4c6f      	ldr	r4, [pc, #444]	; (86f4 <CompactSector+0x230>)
    8536:	47a0      	blx	r4
    8538:	4b6f      	ldr	r3, [pc, #444]	; (86f8 <CompactSector+0x234>)
    853a:	781b      	ldrb	r3, [r3, #0]
    853c:	2b00      	cmp	r3, #0
    853e:	d06a      	beq.n	8616 <CompactSector+0x152>
    8540:	2300      	movs	r3, #0
    8542:	9306      	str	r3, [sp, #24]
    8544:	3301      	adds	r3, #1
    8546:	33ff      	adds	r3, #255	; 0xff
    8548:	4699      	mov	r9, r3
    854a:	466a      	mov	r2, sp
    854c:	82d3      	strh	r3, [r2, #22]
    854e:	4b6b      	ldr	r3, [pc, #428]	; (86fc <CompactSector+0x238>)
    8550:	3310      	adds	r3, #16
    8552:	9308      	str	r3, [sp, #32]
    8554:	9b06      	ldr	r3, [sp, #24]
    8556:	9307      	str	r3, [sp, #28]
    8558:	009f      	lsls	r7, r3, #2
    855a:	4b69      	ldr	r3, [pc, #420]	; (8700 <CompactSector+0x23c>)
    855c:	469c      	mov	ip, r3
    855e:	4467      	add	r7, ip
    8560:	887b      	ldrh	r3, [r7, #2]
    8562:	001d      	movs	r5, r3
    8564:	9304      	str	r3, [sp, #16]
    8566:	2310      	movs	r3, #16
    8568:	aa0b      	add	r2, sp, #44	; 0x2c
    856a:	0029      	movs	r1, r5
    856c:	9803      	ldr	r0, [sp, #12]
    856e:	4680      	mov	r8, r0
    8570:	4c5a      	ldr	r4, [pc, #360]	; (86dc <CompactSector+0x218>)
    8572:	47a0      	blx	r4
    8574:	ae0b      	add	r6, sp, #44	; 0x2c
    8576:	2300      	movs	r3, #0
    8578:	80b3      	strh	r3, [r6, #4]
    857a:	8934      	ldrh	r4, [r6, #8]
    857c:	80f4      	strh	r4, [r6, #6]
    857e:	8173      	strh	r3, [r6, #10]
    8580:	81b3      	strh	r3, [r6, #12]
    8582:	3410      	adds	r4, #16
    8584:	b2a4      	uxth	r4, r4
    8586:	0032      	movs	r2, r6
    8588:	0029      	movs	r1, r5
    858a:	4640      	mov	r0, r8
    858c:	4b5d      	ldr	r3, [pc, #372]	; (8704 <CompactSector+0x240>)
    858e:	4798      	blx	r3
    8590:	8030      	strh	r0, [r6, #0]
    8592:	4a5d      	ldr	r2, [pc, #372]	; (8708 <CompactSector+0x244>)
    8594:	210e      	movs	r1, #14
    8596:	a80b      	add	r0, sp, #44	; 0x2c
    8598:	4b5c      	ldr	r3, [pc, #368]	; (870c <CompactSector+0x248>)
    859a:	4798      	blx	r3
    859c:	81f0      	strh	r0, [r6, #14]
    859e:	4d57      	ldr	r5, [pc, #348]	; (86fc <CompactSector+0x238>)
    85a0:	464a      	mov	r2, r9
    85a2:	21ff      	movs	r1, #255	; 0xff
    85a4:	0028      	movs	r0, r5
    85a6:	4b5a      	ldr	r3, [pc, #360]	; (8710 <CompactSector+0x24c>)
    85a8:	4798      	blx	r3
    85aa:	002b      	movs	r3, r5
    85ac:	ce07      	ldmia	r6!, {r0, r1, r2}
    85ae:	c307      	stmia	r3!, {r0, r1, r2}
    85b0:	6832      	ldr	r2, [r6, #0]
    85b2:	601a      	str	r2, [r3, #0]
    85b4:	4b57      	ldr	r3, [pc, #348]	; (8714 <CompactSector+0x250>)
    85b6:	881b      	ldrh	r3, [r3, #0]
    85b8:	4a45      	ldr	r2, [pc, #276]	; (86d0 <CompactSector+0x20c>)
    85ba:	8812      	ldrh	r2, [r2, #0]
    85bc:	189b      	adds	r3, r3, r2
    85be:	807b      	strh	r3, [r7, #2]
    85c0:	454c      	cmp	r4, r9
    85c2:	d904      	bls.n	85ce <CompactSector+0x10a>
    85c4:	2600      	movs	r6, #0
    85c6:	2310      	movs	r3, #16
    85c8:	4a4c      	ldr	r2, [pc, #304]	; (86fc <CompactSector+0x238>)
    85ca:	4690      	mov	r8, r2
    85cc:	e068      	b.n	86a0 <CompactSector+0x1dc>
    85ce:	ab0b      	add	r3, sp, #44	; 0x2c
    85d0:	891b      	ldrh	r3, [r3, #8]
    85d2:	9a08      	ldr	r2, [sp, #32]
    85d4:	9200      	str	r2, [sp, #0]
    85d6:	2200      	movs	r2, #0
    85d8:	9904      	ldr	r1, [sp, #16]
    85da:	9803      	ldr	r0, [sp, #12]
    85dc:	4e4e      	ldr	r6, [pc, #312]	; (8718 <CompactSector+0x254>)
    85de:	47b0      	blx	r6
    85e0:	2800      	cmp	r0, #0
    85e2:	d063      	beq.n	86ac <CompactSector+0x1e8>
    85e4:	9b07      	ldr	r3, [sp, #28]
    85e6:	009d      	lsls	r5, r3, #2
    85e8:	4b45      	ldr	r3, [pc, #276]	; (8700 <CompactSector+0x23c>)
    85ea:	195d      	adds	r5, r3, r5
    85ec:	4b49      	ldr	r3, [pc, #292]	; (8714 <CompactSector+0x250>)
    85ee:	881b      	ldrh	r3, [r3, #0]
    85f0:	4a37      	ldr	r2, [pc, #220]	; (86d0 <CompactSector+0x20c>)
    85f2:	8812      	ldrh	r2, [r2, #0]
    85f4:	189b      	adds	r3, r3, r2
    85f6:	806b      	strh	r3, [r5, #2]
    85f8:	0021      	movs	r1, r4
    85fa:	a814      	add	r0, sp, #80	; 0x50
    85fc:	4b47      	ldr	r3, [pc, #284]	; (871c <CompactSector+0x258>)
    85fe:	4798      	blx	r3
    8600:	2800      	cmp	r0, #0
    8602:	d053      	beq.n	86ac <CompactSector+0x1e8>
    8604:	9b06      	ldr	r3, [sp, #24]
    8606:	3301      	adds	r3, #1
    8608:	b2db      	uxtb	r3, r3
    860a:	001a      	movs	r2, r3
    860c:	9306      	str	r3, [sp, #24]
    860e:	4b3a      	ldr	r3, [pc, #232]	; (86f8 <CompactSector+0x234>)
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	4293      	cmp	r3, r2
    8614:	d89e      	bhi.n	8554 <CompactSector+0x90>
    8616:	4b2f      	ldr	r3, [pc, #188]	; (86d4 <CompactSector+0x210>)
    8618:	881a      	ldrh	r2, [r3, #0]
    861a:	2a00      	cmp	r2, #0
    861c:	d006      	beq.n	862c <CompactSector+0x168>
    861e:	4b3d      	ldr	r3, [pc, #244]	; (8714 <CompactSector+0x250>)
    8620:	8818      	ldrh	r0, [r3, #0]
    8622:	a914      	add	r1, sp, #80	; 0x50
    8624:	4b3e      	ldr	r3, [pc, #248]	; (8720 <CompactSector+0x25c>)
    8626:	4798      	blx	r3
    8628:	1e04      	subs	r4, r0, #0
    862a:	d040      	beq.n	86ae <CompactSector+0x1ea>
    862c:	4b29      	ldr	r3, [pc, #164]	; (86d4 <CompactSector+0x210>)
    862e:	8818      	ldrh	r0, [r3, #0]
    8630:	2100      	movs	r1, #0
    8632:	4b3c      	ldr	r3, [pc, #240]	; (8724 <CompactSector+0x260>)
    8634:	4798      	blx	r3
    8636:	4b37      	ldr	r3, [pc, #220]	; (8714 <CompactSector+0x250>)
    8638:	881a      	ldrh	r2, [r3, #0]
    863a:	4b3b      	ldr	r3, [pc, #236]	; (8728 <CompactSector+0x264>)
    863c:	801a      	strh	r2, [r3, #0]
    863e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8640:	3801      	subs	r0, #1
    8642:	4b3a      	ldr	r3, [pc, #232]	; (872c <CompactSector+0x268>)
    8644:	4798      	blx	r3
    8646:	1e04      	subs	r4, r0, #0
    8648:	d031      	beq.n	86ae <CompactSector+0x1ea>
    864a:	2102      	movs	r1, #2
    864c:	2000      	movs	r0, #0
    864e:	4b35      	ldr	r3, [pc, #212]	; (8724 <CompactSector+0x260>)
    8650:	4798      	blx	r3
    8652:	4b37      	ldr	r3, [pc, #220]	; (8730 <CompactSector+0x26c>)
    8654:	466a      	mov	r2, sp
    8656:	7b12      	ldrb	r2, [r2, #12]
    8658:	701a      	strb	r2, [r3, #0]
    865a:	4d36      	ldr	r5, [pc, #216]	; (8734 <CompactSector+0x270>)
    865c:	0028      	movs	r0, r5
    865e:	4b19      	ldr	r3, [pc, #100]	; (86c4 <CompactSector+0x200>)
    8660:	4798      	blx	r3
    8662:	0028      	movs	r0, r5
    8664:	4b34      	ldr	r3, [pc, #208]	; (8738 <CompactSector+0x274>)
    8666:	4798      	blx	r3
    8668:	e021      	b.n	86ae <CompactSector+0x1ea>
    866a:	b2ad      	uxth	r5, r5
    866c:	1aef      	subs	r7, r5, r3
    866e:	b2ba      	uxth	r2, r7
    8670:	4693      	mov	fp, r2
    8672:	4443      	add	r3, r8
    8674:	9300      	str	r3, [sp, #0]
    8676:	0013      	movs	r3, r2
    8678:	0032      	movs	r2, r6
    867a:	9904      	ldr	r1, [sp, #16]
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	4f26      	ldr	r7, [pc, #152]	; (8718 <CompactSector+0x254>)
    8680:	47b8      	blx	r7
    8682:	2800      	cmp	r0, #0
    8684:	d012      	beq.n	86ac <CompactSector+0x1e8>
    8686:	0029      	movs	r1, r5
    8688:	a814      	add	r0, sp, #80	; 0x50
    868a:	4b24      	ldr	r3, [pc, #144]	; (871c <CompactSector+0x258>)
    868c:	4798      	blx	r3
    868e:	2800      	cmp	r0, #0
    8690:	d00c      	beq.n	86ac <CompactSector+0x1e8>
    8692:	1b64      	subs	r4, r4, r5
    8694:	b2a4      	uxth	r4, r4
    8696:	445e      	add	r6, fp
    8698:	b2b6      	uxth	r6, r6
    869a:	2300      	movs	r3, #0
    869c:	2c00      	cmp	r4, #0
    869e:	d0b1      	beq.n	8604 <CompactSector+0x140>
    86a0:	1c25      	adds	r5, r4, #0
    86a2:	454c      	cmp	r4, r9
    86a4:	d9e1      	bls.n	866a <CompactSector+0x1a6>
    86a6:	466a      	mov	r2, sp
    86a8:	8ad5      	ldrh	r5, [r2, #22]
    86aa:	e7de      	b.n	866a <CompactSector+0x1a6>
    86ac:	2400      	movs	r4, #0
    86ae:	0020      	movs	r0, r4
    86b0:	b055      	add	sp, #340	; 0x154
    86b2:	bc3c      	pop	{r2, r3, r4, r5}
    86b4:	4690      	mov	r8, r2
    86b6:	4699      	mov	r9, r3
    86b8:	46a2      	mov	sl, r4
    86ba:	46ab      	mov	fp, r5
    86bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	20000124 	.word	0x20000124
    86c4:	0000bee1 	.word	0x0000bee1
    86c8:	20000250 	.word	0x20000250
    86cc:	20000252 	.word	0x20000252
    86d0:	2000010c 	.word	0x2000010c
    86d4:	20000138 	.word	0x20000138
    86d8:	20000280 	.word	0x20000280
    86dc:	00007db1 	.word	0x00007db1
    86e0:	0000835d 	.word	0x0000835d
    86e4:	000185f8 	.word	0x000185f8
    86e8:	00018780 	.word	0x00018780
    86ec:	000003d5 	.word	0x000003d5
    86f0:	00018674 	.word	0x00018674
    86f4:	00016775 	.word	0x00016775
    86f8:	20000278 	.word	0x20000278
    86fc:	2000013c 	.word	0x2000013c
    8700:	20000258 	.word	0x20000258
    8704:	00008151 	.word	0x00008151
    8708:	0000ffff 	.word	0x0000ffff
    870c:	00008059 	.word	0x00008059
    8710:	00016849 	.word	0x00016849
    8714:	20000282 	.word	0x20000282
    8718:	00008099 	.word	0x00008099
    871c:	0000841d 	.word	0x0000841d
    8720:	00008391 	.word	0x00008391
    8724:	0000801d 	.word	0x0000801d
    8728:	2000027a 	.word	0x2000027a
    872c:	000083c5 	.word	0x000083c5
    8730:	20000016 	.word	0x20000016
    8734:	2000023c 	.word	0x2000023c
    8738:	0000bf4d 	.word	0x0000bf4d

0000873c <compactSectorTimerFired>:
    873c:	b510      	push	{r4, lr}
    873e:	4b07      	ldr	r3, [pc, #28]	; (875c <compactSectorTimerFired+0x20>)
    8740:	4798      	blx	r3
    8742:	2800      	cmp	r0, #0
    8744:	d000      	beq.n	8748 <compactSectorTimerFired+0xc>
    8746:	bd10      	pop	{r4, pc}
    8748:	4b05      	ldr	r3, [pc, #20]	; (8760 <compactSectorTimerFired+0x24>)
    874a:	4798      	blx	r3
    874c:	4b05      	ldr	r3, [pc, #20]	; (8764 <compactSectorTimerFired+0x28>)
    874e:	4a06      	ldr	r2, [pc, #24]	; (8768 <compactSectorTimerFired+0x2c>)
    8750:	212c      	movs	r1, #44	; 0x2c
    8752:	31ff      	adds	r1, #255	; 0xff
    8754:	4805      	ldr	r0, [pc, #20]	; (876c <compactSectorTimerFired+0x30>)
    8756:	4c06      	ldr	r4, [pc, #24]	; (8770 <compactSectorTimerFired+0x34>)
    8758:	47a0      	blx	r4
    875a:	46c0      	nop			; (mov r8, r8)
    875c:	00008001 	.word	0x00008001
    8760:	000084c5 	.word	0x000084c5
    8764:	000185f8 	.word	0x000185f8
    8768:	0001872c 	.word	0x0001872c
    876c:	00018674 	.word	0x00018674
    8770:	00016775 	.word	0x00016775

00008774 <CompactSectorIfNeeded>:
    8774:	b510      	push	{r4, lr}
    8776:	4b12      	ldr	r3, [pc, #72]	; (87c0 <CompactSectorIfNeeded+0x4c>)
    8778:	881a      	ldrh	r2, [r3, #0]
    877a:	2380      	movs	r3, #128	; 0x80
    877c:	019b      	lsls	r3, r3, #6
    877e:	1a9b      	subs	r3, r3, r2
    8780:	b29b      	uxth	r3, r3
    8782:	4283      	cmp	r3, r0
    8784:	d303      	bcc.n	878e <CompactSectorIfNeeded+0x1a>
    8786:	4a0f      	ldr	r2, [pc, #60]	; (87c4 <CompactSectorIfNeeded+0x50>)
    8788:	4293      	cmp	r3, r2
    878a:	d90a      	bls.n	87a2 <CompactSectorIfNeeded+0x2e>
    878c:	bd10      	pop	{r4, pc}
    878e:	4b0e      	ldr	r3, [pc, #56]	; (87c8 <CompactSectorIfNeeded+0x54>)
    8790:	4798      	blx	r3
    8792:	2800      	cmp	r0, #0
    8794:	d1fa      	bne.n	878c <CompactSectorIfNeeded+0x18>
    8796:	4b0d      	ldr	r3, [pc, #52]	; (87cc <CompactSectorIfNeeded+0x58>)
    8798:	4a0d      	ldr	r2, [pc, #52]	; (87d0 <CompactSectorIfNeeded+0x5c>)
    879a:	490e      	ldr	r1, [pc, #56]	; (87d4 <CompactSectorIfNeeded+0x60>)
    879c:	480e      	ldr	r0, [pc, #56]	; (87d8 <CompactSectorIfNeeded+0x64>)
    879e:	4c0f      	ldr	r4, [pc, #60]	; (87dc <CompactSectorIfNeeded+0x68>)
    87a0:	47a0      	blx	r4
    87a2:	480f      	ldr	r0, [pc, #60]	; (87e0 <CompactSectorIfNeeded+0x6c>)
    87a4:	4b0f      	ldr	r3, [pc, #60]	; (87e4 <CompactSectorIfNeeded+0x70>)
    87a6:	4798      	blx	r3
    87a8:	2800      	cmp	r0, #0
    87aa:	d1ef      	bne.n	878c <CompactSectorIfNeeded+0x18>
    87ac:	4b0c      	ldr	r3, [pc, #48]	; (87e0 <CompactSectorIfNeeded+0x6c>)
    87ae:	4a0e      	ldr	r2, [pc, #56]	; (87e8 <CompactSectorIfNeeded+0x74>)
    87b0:	611a      	str	r2, [r3, #16]
    87b2:	4a0e      	ldr	r2, [pc, #56]	; (87ec <CompactSectorIfNeeded+0x78>)
    87b4:	605a      	str	r2, [r3, #4]
    87b6:	609a      	str	r2, [r3, #8]
    87b8:	2200      	movs	r2, #0
    87ba:	731a      	strb	r2, [r3, #12]
    87bc:	e7e6      	b.n	878c <CompactSectorIfNeeded+0x18>
    87be:	46c0      	nop			; (mov r8, r8)
    87c0:	20000282 	.word	0x20000282
    87c4:	0000080f 	.word	0x0000080f
    87c8:	000084c5 	.word	0x000084c5
    87cc:	000185f8 	.word	0x000185f8
    87d0:	00018790 	.word	0x00018790
    87d4:	0000044e 	.word	0x0000044e
    87d8:	00018674 	.word	0x00018674
    87dc:	00016775 	.word	0x00016775
    87e0:	20000124 	.word	0x20000124
    87e4:	0000bf21 	.word	0x0000bf21
    87e8:	0000873d 	.word	0x0000873d
    87ec:	00002710 	.word	0x00002710

000087f0 <CompactItem>:
    87f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    87f2:	46de      	mov	lr, fp
    87f4:	4657      	mov	r7, sl
    87f6:	464e      	mov	r6, r9
    87f8:	4645      	mov	r5, r8
    87fa:	b5e0      	push	{r5, r6, r7, lr}
    87fc:	b08b      	sub	sp, #44	; 0x2c
    87fe:	4b77      	ldr	r3, [pc, #476]	; (89dc <CompactItem+0x1ec>)
    8800:	4798      	blx	r3
    8802:	2305      	movs	r3, #5
    8804:	2800      	cmp	r0, #0
    8806:	d007      	beq.n	8818 <CompactItem+0x28>
    8808:	0018      	movs	r0, r3
    880a:	b00b      	add	sp, #44	; 0x2c
    880c:	bc3c      	pop	{r2, r3, r4, r5}
    880e:	4690      	mov	r8, r2
    8810:	4699      	mov	r9, r3
    8812:	46a2      	mov	sl, r4
    8814:	46ab      	mov	fp, r5
    8816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8818:	4b71      	ldr	r3, [pc, #452]	; (89e0 <CompactItem+0x1f0>)
    881a:	8818      	ldrh	r0, [r3, #0]
    881c:	2800      	cmp	r0, #0
    881e:	d146      	bne.n	88ae <CompactItem+0xbe>
    8820:	4b70      	ldr	r3, [pc, #448]	; (89e4 <CompactItem+0x1f4>)
    8822:	881b      	ldrh	r3, [r3, #0]
    8824:	2b00      	cmp	r3, #0
    8826:	d100      	bne.n	882a <CompactItem+0x3a>
    8828:	e0d0      	b.n	89cc <CompactItem+0x1dc>
    882a:	4b6e      	ldr	r3, [pc, #440]	; (89e4 <CompactItem+0x1f4>)
    882c:	8818      	ldrh	r0, [r3, #0]
    882e:	4b6e      	ldr	r3, [pc, #440]	; (89e8 <CompactItem+0x1f8>)
    8830:	4798      	blx	r3
    8832:	4683      	mov	fp, r0
    8834:	2800      	cmp	r0, #0
    8836:	d100      	bne.n	883a <CompactItem+0x4a>
    8838:	e0ca      	b.n	89d0 <CompactItem+0x1e0>
    883a:	7882      	ldrb	r2, [r0, #2]
    883c:	78c3      	ldrb	r3, [r0, #3]
    883e:	021b      	lsls	r3, r3, #8
    8840:	4313      	orrs	r3, r2
    8842:	0019      	movs	r1, r3
    8844:	9303      	str	r3, [sp, #12]
    8846:	4b69      	ldr	r3, [pc, #420]	; (89ec <CompactItem+0x1fc>)
    8848:	7818      	ldrb	r0, [r3, #0]
    884a:	2310      	movs	r3, #16
    884c:	aa06      	add	r2, sp, #24
    884e:	4c68      	ldr	r4, [pc, #416]	; (89f0 <CompactItem+0x200>)
    8850:	47a0      	blx	r4
    8852:	4b63      	ldr	r3, [pc, #396]	; (89e0 <CompactItem+0x1f0>)
    8854:	881a      	ldrh	r2, [r3, #0]
    8856:	2a00      	cmp	r2, #0
    8858:	d02e      	beq.n	88b8 <CompactItem+0xc8>
    885a:	4b66      	ldr	r3, [pc, #408]	; (89f4 <CompactItem+0x204>)
    885c:	881b      	ldrh	r3, [r3, #0]
    885e:	9305      	str	r3, [sp, #20]
    8860:	ab06      	add	r3, sp, #24
    8862:	891b      	ldrh	r3, [r3, #8]
    8864:	a906      	add	r1, sp, #24
    8866:	810a      	strh	r2, [r1, #8]
    8868:	1c19      	adds	r1, r3, #0
    886a:	4293      	cmp	r3, r2
    886c:	d900      	bls.n	8870 <CompactItem+0x80>
    886e:	1c11      	adds	r1, r2, #0
    8870:	b28b      	uxth	r3, r1
    8872:	aa06      	add	r2, sp, #24
    8874:	2100      	movs	r1, #0
    8876:	8091      	strh	r1, [r2, #4]
    8878:	8910      	ldrh	r0, [r2, #8]
    887a:	80d0      	strh	r0, [r2, #6]
    887c:	8151      	strh	r1, [r2, #10]
    887e:	8191      	strh	r1, [r2, #12]
    8880:	001c      	movs	r4, r3
    8882:	3410      	adds	r4, #16
    8884:	b2a4      	uxth	r4, r4
    8886:	495c      	ldr	r1, [pc, #368]	; (89f8 <CompactItem+0x208>)
    8888:	ca61      	ldmia	r2!, {r0, r5, r6}
    888a:	c161      	stmia	r1!, {r0, r5, r6}
    888c:	6812      	ldr	r2, [r2, #0]
    888e:	600a      	str	r2, [r1, #0]
    8890:	2280      	movs	r2, #128	; 0x80
    8892:	0052      	lsls	r2, r2, #1
    8894:	4294      	cmp	r4, r2
    8896:	d939      	bls.n	890c <CompactItem+0x11c>
    8898:	2600      	movs	r6, #0
    889a:	2310      	movs	r3, #16
    889c:	2280      	movs	r2, #128	; 0x80
    889e:	0052      	lsls	r2, r2, #1
    88a0:	4691      	mov	r9, r2
    88a2:	4669      	mov	r1, sp
    88a4:	824a      	strh	r2, [r1, #18]
    88a6:	4a51      	ldr	r2, [pc, #324]	; (89ec <CompactItem+0x1fc>)
    88a8:	4692      	mov	sl, r2
    88aa:	001a      	movs	r2, r3
    88ac:	e088      	b.n	89c0 <CompactItem+0x1d0>
    88ae:	3010      	adds	r0, #16
    88b0:	b280      	uxth	r0, r0
    88b2:	4b52      	ldr	r3, [pc, #328]	; (89fc <CompactItem+0x20c>)
    88b4:	4798      	blx	r3
    88b6:	e7b8      	b.n	882a <CompactItem+0x3a>
    88b8:	ab06      	add	r3, sp, #24
    88ba:	8918      	ldrh	r0, [r3, #8]
    88bc:	3010      	adds	r0, #16
    88be:	b280      	uxth	r0, r0
    88c0:	4b4e      	ldr	r3, [pc, #312]	; (89fc <CompactItem+0x20c>)
    88c2:	4798      	blx	r3
    88c4:	4b47      	ldr	r3, [pc, #284]	; (89e4 <CompactItem+0x1f4>)
    88c6:	8818      	ldrh	r0, [r3, #0]
    88c8:	4b47      	ldr	r3, [pc, #284]	; (89e8 <CompactItem+0x1f8>)
    88ca:	4798      	blx	r3
    88cc:	4683      	mov	fp, r0
    88ce:	2800      	cmp	r0, #0
    88d0:	d015      	beq.n	88fe <CompactItem+0x10e>
    88d2:	7882      	ldrb	r2, [r0, #2]
    88d4:	78c3      	ldrb	r3, [r0, #3]
    88d6:	021b      	lsls	r3, r3, #8
    88d8:	4313      	orrs	r3, r2
    88da:	0019      	movs	r1, r3
    88dc:	9303      	str	r3, [sp, #12]
    88de:	ac06      	add	r4, sp, #24
    88e0:	4b42      	ldr	r3, [pc, #264]	; (89ec <CompactItem+0x1fc>)
    88e2:	7818      	ldrb	r0, [r3, #0]
    88e4:	2310      	movs	r3, #16
    88e6:	0022      	movs	r2, r4
    88e8:	4d41      	ldr	r5, [pc, #260]	; (89f0 <CompactItem+0x200>)
    88ea:	47a8      	blx	r5
    88ec:	4b41      	ldr	r3, [pc, #260]	; (89f4 <CompactItem+0x204>)
    88ee:	881b      	ldrh	r3, [r3, #0]
    88f0:	9305      	str	r3, [sp, #20]
    88f2:	8923      	ldrh	r3, [r4, #8]
    88f4:	4a3a      	ldr	r2, [pc, #232]	; (89e0 <CompactItem+0x1f0>)
    88f6:	8812      	ldrh	r2, [r2, #0]
    88f8:	2a00      	cmp	r2, #0
    88fa:	d0ba      	beq.n	8872 <CompactItem+0x82>
    88fc:	e7b2      	b.n	8864 <CompactItem+0x74>
    88fe:	4b40      	ldr	r3, [pc, #256]	; (8a00 <CompactItem+0x210>)
    8900:	4a40      	ldr	r2, [pc, #256]	; (8a04 <CompactItem+0x214>)
    8902:	2191      	movs	r1, #145	; 0x91
    8904:	00c9      	lsls	r1, r1, #3
    8906:	4840      	ldr	r0, [pc, #256]	; (8a08 <CompactItem+0x218>)
    8908:	4c40      	ldr	r4, [pc, #256]	; (8a0c <CompactItem+0x21c>)
    890a:	47a0      	blx	r4
    890c:	4a37      	ldr	r2, [pc, #220]	; (89ec <CompactItem+0x1fc>)
    890e:	7810      	ldrb	r0, [r2, #0]
    8910:	4a39      	ldr	r2, [pc, #228]	; (89f8 <CompactItem+0x208>)
    8912:	3210      	adds	r2, #16
    8914:	9200      	str	r2, [sp, #0]
    8916:	2200      	movs	r2, #0
    8918:	9903      	ldr	r1, [sp, #12]
    891a:	4c3d      	ldr	r4, [pc, #244]	; (8a10 <CompactItem+0x220>)
    891c:	47a0      	blx	r4
    891e:	2301      	movs	r3, #1
    8920:	2800      	cmp	r0, #0
    8922:	d100      	bne.n	8926 <CompactItem+0x136>
    8924:	e770      	b.n	8808 <CompactItem+0x18>
    8926:	4934      	ldr	r1, [pc, #208]	; (89f8 <CompactItem+0x208>)
    8928:	ab06      	add	r3, sp, #24
    892a:	000a      	movs	r2, r1
    892c:	0018      	movs	r0, r3
    892e:	c870      	ldmia	r0!, {r4, r5, r6}
    8930:	c270      	stmia	r2!, {r4, r5, r6}
    8932:	6800      	ldr	r0, [r0, #0]
    8934:	6010      	str	r0, [r2, #0]
    8936:	88da      	ldrh	r2, [r3, #6]
    8938:	3210      	adds	r2, #16
    893a:	b292      	uxth	r2, r2
    893c:	4b2d      	ldr	r3, [pc, #180]	; (89f4 <CompactItem+0x204>)
    893e:	8818      	ldrh	r0, [r3, #0]
    8940:	4b34      	ldr	r3, [pc, #208]	; (8a14 <CompactItem+0x224>)
    8942:	4798      	blx	r3
    8944:	2300      	movs	r3, #0
    8946:	2800      	cmp	r0, #0
    8948:	d100      	bne.n	894c <CompactItem+0x15c>
    894a:	e75d      	b.n	8808 <CompactItem+0x18>
    894c:	ab06      	add	r3, sp, #24
    894e:	88d8      	ldrh	r0, [r3, #6]
    8950:	3010      	adds	r0, #16
    8952:	b280      	uxth	r0, r0
    8954:	2102      	movs	r1, #2
    8956:	4b30      	ldr	r3, [pc, #192]	; (8a18 <CompactItem+0x228>)
    8958:	4798      	blx	r3
    895a:	2300      	movs	r3, #0
    895c:	4a21      	ldr	r2, [pc, #132]	; (89e4 <CompactItem+0x1f4>)
    895e:	8013      	strh	r3, [r2, #0]
    8960:	4a1f      	ldr	r2, [pc, #124]	; (89e0 <CompactItem+0x1f0>)
    8962:	8013      	strh	r3, [r2, #0]
    8964:	465b      	mov	r3, fp
    8966:	9905      	ldr	r1, [sp, #20]
    8968:	7099      	strb	r1, [r3, #2]
    896a:	0a0b      	lsrs	r3, r1, #8
    896c:	465a      	mov	r2, fp
    896e:	70d3      	strb	r3, [r2, #3]
    8970:	2300      	movs	r3, #0
    8972:	e749      	b.n	8808 <CompactItem+0x18>
    8974:	b2ad      	uxth	r5, r5
    8976:	1aaf      	subs	r7, r5, r2
    8978:	b2bb      	uxth	r3, r7
    897a:	0019      	movs	r1, r3
    897c:	4653      	mov	r3, sl
    897e:	7818      	ldrb	r0, [r3, #0]
    8980:	4b1d      	ldr	r3, [pc, #116]	; (89f8 <CompactItem+0x208>)
    8982:	189b      	adds	r3, r3, r2
    8984:	9300      	str	r3, [sp, #0]
    8986:	9102      	str	r1, [sp, #8]
    8988:	000b      	movs	r3, r1
    898a:	0032      	movs	r2, r6
    898c:	9903      	ldr	r1, [sp, #12]
    898e:	4f20      	ldr	r7, [pc, #128]	; (8a10 <CompactItem+0x220>)
    8990:	47b8      	blx	r7
    8992:	2800      	cmp	r0, #0
    8994:	d01e      	beq.n	89d4 <CompactItem+0x1e4>
    8996:	4b17      	ldr	r3, [pc, #92]	; (89f4 <CompactItem+0x204>)
    8998:	8818      	ldrh	r0, [r3, #0]
    899a:	002a      	movs	r2, r5
    899c:	4916      	ldr	r1, [pc, #88]	; (89f8 <CompactItem+0x208>)
    899e:	4b1d      	ldr	r3, [pc, #116]	; (8a14 <CompactItem+0x224>)
    89a0:	4798      	blx	r3
    89a2:	2800      	cmp	r0, #0
    89a4:	d018      	beq.n	89d8 <CompactItem+0x1e8>
    89a6:	2102      	movs	r1, #2
    89a8:	0028      	movs	r0, r5
    89aa:	4b1b      	ldr	r3, [pc, #108]	; (8a18 <CompactItem+0x228>)
    89ac:	4798      	blx	r3
    89ae:	1b64      	subs	r4, r4, r5
    89b0:	b2a4      	uxth	r4, r4
    89b2:	9902      	ldr	r1, [sp, #8]
    89b4:	468c      	mov	ip, r1
    89b6:	4466      	add	r6, ip
    89b8:	b2b6      	uxth	r6, r6
    89ba:	2200      	movs	r2, #0
    89bc:	2c00      	cmp	r4, #0
    89be:	d0cc      	beq.n	895a <CompactItem+0x16a>
    89c0:	1c25      	adds	r5, r4, #0
    89c2:	454c      	cmp	r4, r9
    89c4:	d9d6      	bls.n	8974 <CompactItem+0x184>
    89c6:	466b      	mov	r3, sp
    89c8:	8a5d      	ldrh	r5, [r3, #18]
    89ca:	e7d3      	b.n	8974 <CompactItem+0x184>
    89cc:	2300      	movs	r3, #0
    89ce:	e71b      	b.n	8808 <CompactItem+0x18>
    89d0:	2300      	movs	r3, #0
    89d2:	e719      	b.n	8808 <CompactItem+0x18>
    89d4:	2301      	movs	r3, #1
    89d6:	e717      	b.n	8808 <CompactItem+0x18>
    89d8:	2300      	movs	r3, #0
    89da:	e715      	b.n	8808 <CompactItem+0x18>
    89dc:	00008001 	.word	0x00008001
    89e0:	20000252 	.word	0x20000252
    89e4:	20000250 	.word	0x20000250
    89e8:	000081f9 	.word	0x000081f9
    89ec:	20000280 	.word	0x20000280
    89f0:	00007db1 	.word	0x00007db1
    89f4:	20000282 	.word	0x20000282
    89f8:	2000013c 	.word	0x2000013c
    89fc:	00008775 	.word	0x00008775
    8a00:	000185e8 	.word	0x000185e8
    8a04:	000187a8 	.word	0x000187a8
    8a08:	00018674 	.word	0x00018674
    8a0c:	00016775 	.word	0x00016775
    8a10:	00008099 	.word	0x00008099
    8a14:	00008391 	.word	0x00008391
    8a18:	0000801d 	.word	0x0000801d

00008a1c <compactItemTimerFired>:
    8a1c:	b510      	push	{r4, lr}
    8a1e:	4b01      	ldr	r3, [pc, #4]	; (8a24 <compactItemTimerFired+0x8>)
    8a20:	4798      	blx	r3
    8a22:	bd10      	pop	{r4, pc}
    8a24:	000087f1 	.word	0x000087f1

00008a28 <WriteDataBlockAndHeader>:
    8a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a2a:	46de      	mov	lr, fp
    8a2c:	4657      	mov	r7, sl
    8a2e:	464e      	mov	r6, r9
    8a30:	4645      	mov	r5, r8
    8a32:	b5e0      	push	{r5, r6, r7, lr}
    8a34:	b083      	sub	sp, #12
    8a36:	0004      	movs	r4, r0
    8a38:	468a      	mov	sl, r1
    8a3a:	4d46      	ldr	r5, [pc, #280]	; (8b54 <WriteDataBlockAndHeader+0x12c>)
    8a3c:	2280      	movs	r2, #128	; 0x80
    8a3e:	0052      	lsls	r2, r2, #1
    8a40:	21ff      	movs	r1, #255	; 0xff
    8a42:	0028      	movs	r0, r5
    8a44:	4b44      	ldr	r3, [pc, #272]	; (8b58 <WriteDataBlockAndHeader+0x130>)
    8a46:	4798      	blx	r3
    8a48:	4e44      	ldr	r6, [pc, #272]	; (8b5c <WriteDataBlockAndHeader+0x134>)
    8a4a:	79a3      	ldrb	r3, [r4, #6]
    8a4c:	79e1      	ldrb	r1, [r4, #7]
    8a4e:	0209      	lsls	r1, r1, #8
    8a50:	4319      	orrs	r1, r3
    8a52:	0032      	movs	r2, r6
    8a54:	4650      	mov	r0, sl
    8a56:	4f42      	ldr	r7, [pc, #264]	; (8b60 <WriteDataBlockAndHeader+0x138>)
    8a58:	47b8      	blx	r7
    8a5a:	7020      	strb	r0, [r4, #0]
    8a5c:	0a00      	lsrs	r0, r0, #8
    8a5e:	7060      	strb	r0, [r4, #1]
    8a60:	0032      	movs	r2, r6
    8a62:	210e      	movs	r1, #14
    8a64:	0020      	movs	r0, r4
    8a66:	47b8      	blx	r7
    8a68:	73a0      	strb	r0, [r4, #14]
    8a6a:	0a00      	lsrs	r0, r0, #8
    8a6c:	73e0      	strb	r0, [r4, #15]
    8a6e:	2210      	movs	r2, #16
    8a70:	0021      	movs	r1, r4
    8a72:	0028      	movs	r0, r5
    8a74:	4b3b      	ldr	r3, [pc, #236]	; (8b64 <WriteDataBlockAndHeader+0x13c>)
    8a76:	4798      	blx	r3
    8a78:	79a3      	ldrb	r3, [r4, #6]
    8a7a:	79e2      	ldrb	r2, [r4, #7]
    8a7c:	0212      	lsls	r2, r2, #8
    8a7e:	431a      	orrs	r2, r3
    8a80:	0015      	movs	r5, r2
    8a82:	3510      	adds	r5, #16
    8a84:	b2ad      	uxth	r5, r5
    8a86:	4653      	mov	r3, sl
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d012      	beq.n	8ab2 <WriteDataBlockAndHeader+0x8a>
    8a8c:	2380      	movs	r3, #128	; 0x80
    8a8e:	005b      	lsls	r3, r3, #1
    8a90:	429d      	cmp	r5, r3
    8a92:	d909      	bls.n	8aa8 <WriteDataBlockAndHeader+0x80>
    8a94:	2600      	movs	r6, #0
    8a96:	2710      	movs	r7, #16
    8a98:	2380      	movs	r3, #128	; 0x80
    8a9a:	005b      	lsls	r3, r3, #1
    8a9c:	469b      	mov	fp, r3
    8a9e:	466a      	mov	r2, sp
    8aa0:	80d3      	strh	r3, [r2, #6]
    8aa2:	4b2c      	ldr	r3, [pc, #176]	; (8b54 <WriteDataBlockAndHeader+0x12c>)
    8aa4:	4699      	mov	r9, r3
    8aa6:	e045      	b.n	8b34 <WriteDataBlockAndHeader+0x10c>
    8aa8:	4651      	mov	r1, sl
    8aaa:	482a      	ldr	r0, [pc, #168]	; (8b54 <WriteDataBlockAndHeader+0x12c>)
    8aac:	3010      	adds	r0, #16
    8aae:	4b2d      	ldr	r3, [pc, #180]	; (8b64 <WriteDataBlockAndHeader+0x13c>)
    8ab0:	4798      	blx	r3
    8ab2:	79a3      	ldrb	r3, [r4, #6]
    8ab4:	79e2      	ldrb	r2, [r4, #7]
    8ab6:	0212      	lsls	r2, r2, #8
    8ab8:	431a      	orrs	r2, r3
    8aba:	3210      	adds	r2, #16
    8abc:	2380      	movs	r3, #128	; 0x80
    8abe:	005b      	lsls	r3, r3, #1
    8ac0:	429a      	cmp	r2, r3
    8ac2:	dd00      	ble.n	8ac6 <WriteDataBlockAndHeader+0x9e>
    8ac4:	001a      	movs	r2, r3
    8ac6:	b292      	uxth	r2, r2
    8ac8:	4b27      	ldr	r3, [pc, #156]	; (8b68 <WriteDataBlockAndHeader+0x140>)
    8aca:	8818      	ldrh	r0, [r3, #0]
    8acc:	4921      	ldr	r1, [pc, #132]	; (8b54 <WriteDataBlockAndHeader+0x12c>)
    8ace:	4b27      	ldr	r3, [pc, #156]	; (8b6c <WriteDataBlockAndHeader+0x144>)
    8ad0:	4798      	blx	r3
    8ad2:	4680      	mov	r8, r0
    8ad4:	2800      	cmp	r0, #0
    8ad6:	d033      	beq.n	8b40 <WriteDataBlockAndHeader+0x118>
    8ad8:	79a3      	ldrb	r3, [r4, #6]
    8ada:	79e0      	ldrb	r0, [r4, #7]
    8adc:	0200      	lsls	r0, r0, #8
    8ade:	4318      	orrs	r0, r3
    8ae0:	3010      	adds	r0, #16
    8ae2:	b280      	uxth	r0, r0
    8ae4:	2102      	movs	r1, #2
    8ae6:	4b22      	ldr	r3, [pc, #136]	; (8b70 <WriteDataBlockAndHeader+0x148>)
    8ae8:	4798      	blx	r3
    8aea:	4640      	mov	r0, r8
    8aec:	b003      	add	sp, #12
    8aee:	bc3c      	pop	{r2, r3, r4, r5}
    8af0:	4690      	mov	r8, r2
    8af2:	4699      	mov	r9, r3
    8af4:	46a2      	mov	sl, r4
    8af6:	46ab      	mov	fp, r5
    8af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8afa:	b2a4      	uxth	r4, r4
    8afc:	464b      	mov	r3, r9
    8afe:	19d8      	adds	r0, r3, r7
    8b00:	1be2      	subs	r2, r4, r7
    8b02:	4653      	mov	r3, sl
    8b04:	1999      	adds	r1, r3, r6
    8b06:	4b17      	ldr	r3, [pc, #92]	; (8b64 <WriteDataBlockAndHeader+0x13c>)
    8b08:	4798      	blx	r3
    8b0a:	4b17      	ldr	r3, [pc, #92]	; (8b68 <WriteDataBlockAndHeader+0x140>)
    8b0c:	8818      	ldrh	r0, [r3, #0]
    8b0e:	0022      	movs	r2, r4
    8b10:	4649      	mov	r1, r9
    8b12:	4b16      	ldr	r3, [pc, #88]	; (8b6c <WriteDataBlockAndHeader+0x144>)
    8b14:	4798      	blx	r3
    8b16:	4680      	mov	r8, r0
    8b18:	2800      	cmp	r0, #0
    8b1a:	d0e6      	beq.n	8aea <WriteDataBlockAndHeader+0xc2>
    8b1c:	2102      	movs	r1, #2
    8b1e:	0020      	movs	r0, r4
    8b20:	4b13      	ldr	r3, [pc, #76]	; (8b70 <WriteDataBlockAndHeader+0x148>)
    8b22:	4798      	blx	r3
    8b24:	1b2d      	subs	r5, r5, r4
    8b26:	b2ad      	uxth	r5, r5
    8b28:	1be4      	subs	r4, r4, r7
    8b2a:	1936      	adds	r6, r6, r4
    8b2c:	b2b6      	uxth	r6, r6
    8b2e:	2700      	movs	r7, #0
    8b30:	2d00      	cmp	r5, #0
    8b32:	d0da      	beq.n	8aea <WriteDataBlockAndHeader+0xc2>
    8b34:	1c2c      	adds	r4, r5, #0
    8b36:	455d      	cmp	r5, fp
    8b38:	d9df      	bls.n	8afa <WriteDataBlockAndHeader+0xd2>
    8b3a:	466b      	mov	r3, sp
    8b3c:	88dc      	ldrh	r4, [r3, #6]
    8b3e:	e7dc      	b.n	8afa <WriteDataBlockAndHeader+0xd2>
    8b40:	79a3      	ldrb	r3, [r4, #6]
    8b42:	79e0      	ldrb	r0, [r4, #7]
    8b44:	0200      	lsls	r0, r0, #8
    8b46:	4318      	orrs	r0, r3
    8b48:	3010      	adds	r0, #16
    8b4a:	b280      	uxth	r0, r0
    8b4c:	2102      	movs	r1, #2
    8b4e:	4b08      	ldr	r3, [pc, #32]	; (8b70 <WriteDataBlockAndHeader+0x148>)
    8b50:	4798      	blx	r3
    8b52:	e7ca      	b.n	8aea <WriteDataBlockAndHeader+0xc2>
    8b54:	2000013c 	.word	0x2000013c
    8b58:	00016849 	.word	0x00016849
    8b5c:	0000ffff 	.word	0x0000ffff
    8b60:	00008059 	.word	0x00008059
    8b64:	00016837 	.word	0x00016837
    8b68:	20000282 	.word	0x20000282
    8b6c:	00008391 	.word	0x00008391
    8b70:	0000801d 	.word	0x0000801d

00008b74 <S_Nv_EarlyInit>:
    8b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b76:	46ce      	mov	lr, r9
    8b78:	4647      	mov	r7, r8
    8b7a:	b580      	push	{r7, lr}
    8b7c:	b091      	sub	sp, #68	; 0x44
    8b7e:	2200      	movs	r2, #0
    8b80:	4bb3      	ldr	r3, [pc, #716]	; (8e50 <S_Nv_EarlyInit+0x2dc>)
    8b82:	701a      	strb	r2, [r3, #0]
    8b84:	2400      	movs	r4, #0
    8b86:	2301      	movs	r3, #1
    8b88:	425b      	negs	r3, r3
    8b8a:	4699      	mov	r9, r3
    8b8c:	27ff      	movs	r7, #255	; 0xff
    8b8e:	4eb1      	ldr	r6, [pc, #708]	; (8e54 <S_Nv_EarlyInit+0x2e0>)
    8b90:	2312      	movs	r3, #18
    8b92:	aa0b      	add	r2, sp, #44	; 0x2c
    8b94:	2100      	movs	r1, #0
    8b96:	0020      	movs	r0, r4
    8b98:	47b0      	blx	r6
    8b9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b9e:	9301      	str	r3, [sp, #4]
    8ba0:	406b      	eors	r3, r5
    8ba2:	3301      	adds	r3, #1
    8ba4:	d01d      	beq.n	8be2 <S_Nv_EarlyInit+0x6e>
    8ba6:	3401      	adds	r4, #1
    8ba8:	b2e4      	uxtb	r4, r4
    8baa:	2c02      	cmp	r4, #2
    8bac:	d1f0      	bne.n	8b90 <S_Nv_EarlyInit+0x1c>
    8bae:	2fff      	cmp	r7, #255	; 0xff
    8bb0:	d057      	beq.n	8c62 <S_Nv_EarlyInit+0xee>
    8bb2:	4ba9      	ldr	r3, [pc, #676]	; (8e58 <S_Nv_EarlyInit+0x2e4>)
    8bb4:	701f      	strb	r7, [r3, #0]
    8bb6:	4643      	mov	r3, r8
    8bb8:	2b01      	cmp	r3, #1
    8bba:	d100      	bne.n	8bbe <S_Nv_EarlyInit+0x4a>
    8bbc:	e07b      	b.n	8cb6 <S_Nv_EarlyInit+0x142>
    8bbe:	4643      	mov	r3, r8
    8bc0:	2b02      	cmp	r3, #2
    8bc2:	d16a      	bne.n	8c9a <S_Nv_EarlyInit+0x126>
    8bc4:	2280      	movs	r2, #128	; 0x80
    8bc6:	0052      	lsls	r2, r2, #1
    8bc8:	4ba4      	ldr	r3, [pc, #656]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8bca:	801a      	strh	r2, [r3, #0]
    8bcc:	2312      	movs	r3, #18
    8bce:	aa06      	add	r2, sp, #24
    8bd0:	2100      	movs	r1, #0
    8bd2:	0038      	movs	r0, r7
    8bd4:	4c9f      	ldr	r4, [pc, #636]	; (8e54 <S_Nv_EarlyInit+0x2e0>)
    8bd6:	47a0      	blx	r4
    8bd8:	4da0      	ldr	r5, [pc, #640]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8bda:	4ba1      	ldr	r3, [pc, #644]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8bdc:	4698      	mov	r8, r3
    8bde:	002e      	movs	r6, r5
    8be0:	e10f      	b.n	8e02 <S_Nv_EarlyInit+0x28e>
    8be2:	ab02      	add	r3, sp, #8
    8be4:	2226      	movs	r2, #38	; 0x26
    8be6:	189b      	adds	r3, r3, r2
    8be8:	781b      	ldrb	r3, [r3, #0]
    8bea:	2b41      	cmp	r3, #65	; 0x41
    8bec:	d1db      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8bee:	ab02      	add	r3, sp, #8
    8bf0:	3201      	adds	r2, #1
    8bf2:	189b      	adds	r3, r3, r2
    8bf4:	781b      	ldrb	r3, [r3, #0]
    8bf6:	2b54      	cmp	r3, #84	; 0x54
    8bf8:	d1d5      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8bfa:	ab02      	add	r3, sp, #8
    8bfc:	3201      	adds	r2, #1
    8bfe:	189b      	adds	r3, r3, r2
    8c00:	781b      	ldrb	r3, [r3, #0]
    8c02:	2b53      	cmp	r3, #83	; 0x53
    8c04:	d1cf      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c06:	ab02      	add	r3, sp, #8
    8c08:	3201      	adds	r2, #1
    8c0a:	189b      	adds	r3, r3, r2
    8c0c:	781b      	ldrb	r3, [r3, #0]
    8c0e:	2b4e      	cmp	r3, #78	; 0x4e
    8c10:	d1c9      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c12:	ab02      	add	r3, sp, #8
    8c14:	3201      	adds	r2, #1
    8c16:	189b      	adds	r3, r3, r2
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	2b76      	cmp	r3, #118	; 0x76
    8c1c:	d1c3      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c1e:	ab02      	add	r3, sp, #8
    8c20:	3201      	adds	r2, #1
    8c22:	189b      	adds	r3, r3, r2
    8c24:	781b      	ldrb	r3, [r3, #0]
    8c26:	2b31      	cmp	r3, #49	; 0x31
    8c28:	d106      	bne.n	8c38 <S_Nv_EarlyInit+0xc4>
    8c2a:	ab02      	add	r3, sp, #8
    8c2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8c2e:	2b00      	cmp	r3, #0
    8c30:	d1b9      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c32:	2301      	movs	r3, #1
    8c34:	4698      	mov	r8, r3
    8c36:	e00f      	b.n	8c58 <S_Nv_EarlyInit+0xe4>
    8c38:	2b32      	cmp	r3, #50	; 0x32
    8c3a:	d1b4      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c3c:	4a89      	ldr	r2, [pc, #548]	; (8e64 <S_Nv_EarlyInit+0x2f0>)
    8c3e:	2110      	movs	r1, #16
    8c40:	2026      	movs	r0, #38	; 0x26
    8c42:	ab02      	add	r3, sp, #8
    8c44:	469c      	mov	ip, r3
    8c46:	4460      	add	r0, ip
    8c48:	4b87      	ldr	r3, [pc, #540]	; (8e68 <S_Nv_EarlyInit+0x2f4>)
    8c4a:	4798      	blx	r3
    8c4c:	ab02      	add	r3, sp, #8
    8c4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8c50:	4283      	cmp	r3, r0
    8c52:	d1a8      	bne.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c54:	2302      	movs	r3, #2
    8c56:	4698      	mov	r8, r3
    8c58:	454d      	cmp	r5, r9
    8c5a:	d2a4      	bcs.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c5c:	46a9      	mov	r9, r5
    8c5e:	0027      	movs	r7, r4
    8c60:	e7a1      	b.n	8ba6 <S_Nv_EarlyInit+0x32>
    8c62:	2200      	movs	r2, #0
    8c64:	4b7c      	ldr	r3, [pc, #496]	; (8e58 <S_Nv_EarlyInit+0x2e4>)
    8c66:	701a      	strb	r2, [r3, #0]
    8c68:	4c80      	ldr	r4, [pc, #512]	; (8e6c <S_Nv_EarlyInit+0x2f8>)
    8c6a:	4e81      	ldr	r6, [pc, #516]	; (8e70 <S_Nv_EarlyInit+0x2fc>)
    8c6c:	4d81      	ldr	r5, [pc, #516]	; (8e74 <S_Nv_EarlyInit+0x300>)
    8c6e:	e006      	b.n	8c7e <S_Nv_EarlyInit+0x10a>
    8c70:	4a79      	ldr	r2, [pc, #484]	; (8e58 <S_Nv_EarlyInit+0x2e4>)
    8c72:	7813      	ldrb	r3, [r2, #0]
    8c74:	3301      	adds	r3, #1
    8c76:	b2db      	uxtb	r3, r3
    8c78:	7013      	strb	r3, [r2, #0]
    8c7a:	2b01      	cmp	r3, #1
    8c7c:	d815      	bhi.n	8caa <S_Nv_EarlyInit+0x136>
    8c7e:	47a0      	blx	r4
    8c80:	2800      	cmp	r0, #0
    8c82:	d0f5      	beq.n	8c70 <S_Nv_EarlyInit+0xfc>
    8c84:	2301      	movs	r3, #1
    8c86:	425b      	negs	r3, r3
    8c88:	8033      	strh	r3, [r6, #0]
    8c8a:	2002      	movs	r0, #2
    8c8c:	4240      	negs	r0, r0
    8c8e:	47a8      	blx	r5
    8c90:	2800      	cmp	r0, #0
    8c92:	d0ed      	beq.n	8c70 <S_Nv_EarlyInit+0xfc>
    8c94:	2200      	movs	r2, #0
    8c96:	4b6e      	ldr	r3, [pc, #440]	; (8e50 <S_Nv_EarlyInit+0x2dc>)
    8c98:	701a      	strb	r2, [r3, #0]
    8c9a:	2201      	movs	r2, #1
    8c9c:	4b76      	ldr	r3, [pc, #472]	; (8e78 <S_Nv_EarlyInit+0x304>)
    8c9e:	701a      	strb	r2, [r3, #0]
    8ca0:	b011      	add	sp, #68	; 0x44
    8ca2:	bc0c      	pop	{r2, r3}
    8ca4:	4690      	mov	r8, r2
    8ca6:	4699      	mov	r9, r3
    8ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8caa:	4b74      	ldr	r3, [pc, #464]	; (8e7c <S_Nv_EarlyInit+0x308>)
    8cac:	4a74      	ldr	r2, [pc, #464]	; (8e80 <S_Nv_EarlyInit+0x30c>)
    8cae:	4975      	ldr	r1, [pc, #468]	; (8e84 <S_Nv_EarlyInit+0x310>)
    8cb0:	4875      	ldr	r0, [pc, #468]	; (8e88 <S_Nv_EarlyInit+0x314>)
    8cb2:	4c76      	ldr	r4, [pc, #472]	; (8e8c <S_Nv_EarlyInit+0x318>)
    8cb4:	47a0      	blx	r4
    8cb6:	2210      	movs	r2, #16
    8cb8:	4b68      	ldr	r3, [pc, #416]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8cba:	801a      	strh	r2, [r3, #0]
    8cbc:	2110      	movs	r1, #16
    8cbe:	4e66      	ldr	r6, [pc, #408]	; (8e58 <S_Nv_EarlyInit+0x2e4>)
    8cc0:	4d64      	ldr	r5, [pc, #400]	; (8e54 <S_Nv_EarlyInit+0x2e0>)
    8cc2:	4f69      	ldr	r7, [pc, #420]	; (8e68 <S_Nv_EarlyInit+0x2f4>)
    8cc4:	e072      	b.n	8dac <S_Nv_EarlyInit+0x238>
    8cc6:	ab06      	add	r3, sp, #24
    8cc8:	881b      	ldrh	r3, [r3, #0]
    8cca:	2b00      	cmp	r3, #0
    8ccc:	d007      	beq.n	8cde <S_Nv_EarlyInit+0x16a>
    8cce:	ab06      	add	r3, sp, #24
    8cd0:	88d8      	ldrh	r0, [r3, #6]
    8cd2:	3010      	adds	r0, #16
    8cd4:	b280      	uxth	r0, r0
    8cd6:	2101      	movs	r1, #1
    8cd8:	4b61      	ldr	r3, [pc, #388]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8cda:	4798      	blx	r3
    8cdc:	e061      	b.n	8da2 <S_Nv_EarlyInit+0x22e>
    8cde:	ab06      	add	r3, sp, #24
    8ce0:	885c      	ldrh	r4, [r3, #2]
    8ce2:	0020      	movs	r0, r4
    8ce4:	4b6a      	ldr	r3, [pc, #424]	; (8e90 <S_Nv_EarlyInit+0x31c>)
    8ce6:	4798      	blx	r3
    8ce8:	2800      	cmp	r0, #0
    8cea:	d010      	beq.n	8d0e <S_Nv_EarlyInit+0x19a>
    8cec:	4b5b      	ldr	r3, [pc, #364]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8cee:	781a      	ldrb	r2, [r3, #0]
    8cf0:	7082      	strb	r2, [r0, #2]
    8cf2:	785b      	ldrb	r3, [r3, #1]
    8cf4:	70c3      	strb	r3, [r0, #3]
    8cf6:	ab06      	add	r3, sp, #24
    8cf8:	891b      	ldrh	r3, [r3, #8]
    8cfa:	2b00      	cmp	r3, #0
    8cfc:	d00b      	beq.n	8d16 <S_Nv_EarlyInit+0x1a2>
    8cfe:	ab06      	add	r3, sp, #24
    8d00:	88d8      	ldrh	r0, [r3, #6]
    8d02:	3010      	adds	r0, #16
    8d04:	b280      	uxth	r0, r0
    8d06:	2101      	movs	r1, #1
    8d08:	4b55      	ldr	r3, [pc, #340]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8d0a:	4798      	blx	r3
    8d0c:	e049      	b.n	8da2 <S_Nv_EarlyInit+0x22e>
    8d0e:	0020      	movs	r0, r4
    8d10:	4b60      	ldr	r3, [pc, #384]	; (8e94 <S_Nv_EarlyInit+0x320>)
    8d12:	4798      	blx	r3
    8d14:	e7ea      	b.n	8cec <S_Nv_EarlyInit+0x178>
    8d16:	0020      	movs	r0, r4
    8d18:	4b5f      	ldr	r3, [pc, #380]	; (8e98 <S_Nv_EarlyInit+0x324>)
    8d1a:	4798      	blx	r3
    8d1c:	e7ef      	b.n	8cfe <S_Nv_EarlyInit+0x18a>
    8d1e:	4b4f      	ldr	r3, [pc, #316]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8d20:	8819      	ldrh	r1, [r3, #0]
    8d22:	4b4d      	ldr	r3, [pc, #308]	; (8e58 <S_Nv_EarlyInit+0x2e4>)
    8d24:	7818      	ldrb	r0, [r3, #0]
    8d26:	aa02      	add	r2, sp, #8
    8d28:	4b5c      	ldr	r3, [pc, #368]	; (8e9c <S_Nv_EarlyInit+0x328>)
    8d2a:	4798      	blx	r3
    8d2c:	ab02      	add	r3, sp, #8
    8d2e:	881b      	ldrh	r3, [r3, #0]
    8d30:	4283      	cmp	r3, r0
    8d32:	d007      	beq.n	8d44 <S_Nv_EarlyInit+0x1d0>
    8d34:	ab02      	add	r3, sp, #8
    8d36:	88d8      	ldrh	r0, [r3, #6]
    8d38:	3010      	adds	r0, #16
    8d3a:	b280      	uxth	r0, r0
    8d3c:	0021      	movs	r1, r4
    8d3e:	4b48      	ldr	r3, [pc, #288]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8d40:	4798      	blx	r3
    8d42:	e05e      	b.n	8e02 <S_Nv_EarlyInit+0x28e>
    8d44:	ab02      	add	r3, sp, #8
    8d46:	885f      	ldrh	r7, [r3, #2]
    8d48:	0038      	movs	r0, r7
    8d4a:	4b51      	ldr	r3, [pc, #324]	; (8e90 <S_Nv_EarlyInit+0x31c>)
    8d4c:	4798      	blx	r3
    8d4e:	2800      	cmp	r0, #0
    8d50:	d010      	beq.n	8d74 <S_Nv_EarlyInit+0x200>
    8d52:	4b42      	ldr	r3, [pc, #264]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8d54:	781a      	ldrb	r2, [r3, #0]
    8d56:	7082      	strb	r2, [r0, #2]
    8d58:	785b      	ldrb	r3, [r3, #1]
    8d5a:	70c3      	strb	r3, [r0, #3]
    8d5c:	ab02      	add	r3, sp, #8
    8d5e:	891b      	ldrh	r3, [r3, #8]
    8d60:	2b00      	cmp	r3, #0
    8d62:	d00b      	beq.n	8d7c <S_Nv_EarlyInit+0x208>
    8d64:	ab02      	add	r3, sp, #8
    8d66:	88d8      	ldrh	r0, [r3, #6]
    8d68:	3010      	adds	r0, #16
    8d6a:	b280      	uxth	r0, r0
    8d6c:	0021      	movs	r1, r4
    8d6e:	4b3c      	ldr	r3, [pc, #240]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8d70:	4798      	blx	r3
    8d72:	e046      	b.n	8e02 <S_Nv_EarlyInit+0x28e>
    8d74:	0038      	movs	r0, r7
    8d76:	4b47      	ldr	r3, [pc, #284]	; (8e94 <S_Nv_EarlyInit+0x320>)
    8d78:	4798      	blx	r3
    8d7a:	e7ea      	b.n	8d52 <S_Nv_EarlyInit+0x1de>
    8d7c:	0038      	movs	r0, r7
    8d7e:	4b46      	ldr	r3, [pc, #280]	; (8e98 <S_Nv_EarlyInit+0x324>)
    8d80:	4798      	blx	r3
    8d82:	e7ef      	b.n	8d64 <S_Nv_EarlyInit+0x1f0>
    8d84:	ab06      	add	r3, sp, #24
    8d86:	89dc      	ldrh	r4, [r3, #14]
    8d88:	4a36      	ldr	r2, [pc, #216]	; (8e64 <S_Nv_EarlyInit+0x2f0>)
    8d8a:	210c      	movs	r1, #12
    8d8c:	2012      	movs	r0, #18
    8d8e:	ab02      	add	r3, sp, #8
    8d90:	469c      	mov	ip, r3
    8d92:	4460      	add	r0, ip
    8d94:	47b8      	blx	r7
    8d96:	4284      	cmp	r4, r0
    8d98:	d095      	beq.n	8cc6 <S_Nv_EarlyInit+0x152>
    8d9a:	2101      	movs	r1, #1
    8d9c:	2010      	movs	r0, #16
    8d9e:	4b30      	ldr	r3, [pc, #192]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8da0:	4798      	blx	r3
    8da2:	4b2e      	ldr	r3, [pc, #184]	; (8e5c <S_Nv_EarlyInit+0x2e8>)
    8da4:	8819      	ldrh	r1, [r3, #0]
    8da6:	4b3e      	ldr	r3, [pc, #248]	; (8ea0 <S_Nv_EarlyInit+0x32c>)
    8da8:	4299      	cmp	r1, r3
    8daa:	d812      	bhi.n	8dd2 <S_Nv_EarlyInit+0x25e>
    8dac:	ac06      	add	r4, sp, #24
    8dae:	7830      	ldrb	r0, [r6, #0]
    8db0:	2310      	movs	r3, #16
    8db2:	0022      	movs	r2, r4
    8db4:	47a8      	blx	r5
    8db6:	7823      	ldrb	r3, [r4, #0]
    8db8:	2bff      	cmp	r3, #255	; 0xff
    8dba:	d1e3      	bne.n	8d84 <S_Nv_EarlyInit+0x210>
    8dbc:	ab06      	add	r3, sp, #24
    8dbe:	211f      	movs	r1, #31
    8dc0:	aa02      	add	r2, sp, #8
    8dc2:	4694      	mov	ip, r2
    8dc4:	4461      	add	r1, ip
    8dc6:	785a      	ldrb	r2, [r3, #1]
    8dc8:	2aff      	cmp	r2, #255	; 0xff
    8dca:	d1db      	bne.n	8d84 <S_Nv_EarlyInit+0x210>
    8dcc:	3301      	adds	r3, #1
    8dce:	428b      	cmp	r3, r1
    8dd0:	d1f9      	bne.n	8dc6 <S_Nv_EarlyInit+0x252>
    8dd2:	4b34      	ldr	r3, [pc, #208]	; (8ea4 <S_Nv_EarlyInit+0x330>)
    8dd4:	4798      	blx	r3
    8dd6:	2800      	cmp	r0, #0
    8dd8:	d000      	beq.n	8ddc <S_Nv_EarlyInit+0x268>
    8dda:	e75e      	b.n	8c9a <S_Nv_EarlyInit+0x126>
    8ddc:	4b27      	ldr	r3, [pc, #156]	; (8e7c <S_Nv_EarlyInit+0x308>)
    8dde:	4a32      	ldr	r2, [pc, #200]	; (8ea8 <S_Nv_EarlyInit+0x334>)
    8de0:	4932      	ldr	r1, [pc, #200]	; (8eac <S_Nv_EarlyInit+0x338>)
    8de2:	4829      	ldr	r0, [pc, #164]	; (8e88 <S_Nv_EarlyInit+0x314>)
    8de4:	4c29      	ldr	r4, [pc, #164]	; (8e8c <S_Nv_EarlyInit+0x318>)
    8de6:	47a0      	blx	r4
    8de8:	ab02      	add	r3, sp, #8
    8dea:	89df      	ldrh	r7, [r3, #14]
    8dec:	4a1d      	ldr	r2, [pc, #116]	; (8e64 <S_Nv_EarlyInit+0x2f0>)
    8dee:	210e      	movs	r1, #14
    8df0:	0018      	movs	r0, r3
    8df2:	4b1d      	ldr	r3, [pc, #116]	; (8e68 <S_Nv_EarlyInit+0x2f4>)
    8df4:	4798      	blx	r3
    8df6:	4287      	cmp	r7, r0
    8df8:	d091      	beq.n	8d1e <S_Nv_EarlyInit+0x1aa>
    8dfa:	0021      	movs	r1, r4
    8dfc:	2010      	movs	r0, #16
    8dfe:	4b18      	ldr	r3, [pc, #96]	; (8e60 <S_Nv_EarlyInit+0x2ec>)
    8e00:	4798      	blx	r3
    8e02:	882b      	ldrh	r3, [r5, #0]
    8e04:	4a26      	ldr	r2, [pc, #152]	; (8ea0 <S_Nv_EarlyInit+0x32c>)
    8e06:	4293      	cmp	r3, r2
    8e08:	d900      	bls.n	8e0c <S_Nv_EarlyInit+0x298>
    8e0a:	e746      	b.n	8c9a <S_Nv_EarlyInit+0x126>
    8e0c:	aa06      	add	r2, sp, #24
    8e0e:	8a12      	ldrh	r2, [r2, #16]
    8e10:	4914      	ldr	r1, [pc, #80]	; (8e64 <S_Nv_EarlyInit+0x2f0>)
    8e12:	428a      	cmp	r2, r1
    8e14:	d002      	beq.n	8e1c <S_Nv_EarlyInit+0x2a8>
    8e16:	2400      	movs	r4, #0
    8e18:	429a      	cmp	r2, r3
    8e1a:	d803      	bhi.n	8e24 <S_Nv_EarlyInit+0x2b0>
    8e1c:	2102      	movs	r1, #2
    8e1e:	2000      	movs	r0, #0
    8e20:	47c0      	blx	r8
    8e22:	2402      	movs	r4, #2
    8e24:	8831      	ldrh	r1, [r6, #0]
    8e26:	4b0c      	ldr	r3, [pc, #48]	; (8e58 <S_Nv_EarlyInit+0x2e4>)
    8e28:	7818      	ldrb	r0, [r3, #0]
    8e2a:	2310      	movs	r3, #16
    8e2c:	aa02      	add	r2, sp, #8
    8e2e:	4f09      	ldr	r7, [pc, #36]	; (8e54 <S_Nv_EarlyInit+0x2e0>)
    8e30:	47b8      	blx	r7
    8e32:	ab02      	add	r3, sp, #8
    8e34:	781b      	ldrb	r3, [r3, #0]
    8e36:	2bff      	cmp	r3, #255	; 0xff
    8e38:	d1d6      	bne.n	8de8 <S_Nv_EarlyInit+0x274>
    8e3a:	ab02      	add	r3, sp, #8
    8e3c:	210f      	movs	r1, #15
    8e3e:	469c      	mov	ip, r3
    8e40:	4461      	add	r1, ip
    8e42:	785a      	ldrb	r2, [r3, #1]
    8e44:	2aff      	cmp	r2, #255	; 0xff
    8e46:	d1cf      	bne.n	8de8 <S_Nv_EarlyInit+0x274>
    8e48:	3301      	adds	r3, #1
    8e4a:	428b      	cmp	r3, r1
    8e4c:	d1f9      	bne.n	8e42 <S_Nv_EarlyInit+0x2ce>
    8e4e:	e724      	b.n	8c9a <S_Nv_EarlyInit+0x126>
    8e50:	20000278 	.word	0x20000278
    8e54:	00007db1 	.word	0x00007db1
    8e58:	20000280 	.word	0x20000280
    8e5c:	20000282 	.word	0x20000282
    8e60:	0000801d 	.word	0x0000801d
    8e64:	0000ffff 	.word	0x0000ffff
    8e68:	00008059 	.word	0x00008059
    8e6c:	0000835d 	.word	0x0000835d
    8e70:	2000027a 	.word	0x2000027a
    8e74:	000083c5 	.word	0x000083c5
    8e78:	20000254 	.word	0x20000254
    8e7c:	000185f8 	.word	0x000185f8
    8e80:	000187b4 	.word	0x000187b4
    8e84:	0000052b 	.word	0x0000052b
    8e88:	00018674 	.word	0x00018674
    8e8c:	00016775 	.word	0x00016775
    8e90:	000081f9 	.word	0x000081f9
    8e94:	00008289 	.word	0x00008289
    8e98:	000082e9 	.word	0x000082e9
    8e9c:	00008151 	.word	0x00008151
    8ea0:	00001fff 	.word	0x00001fff
    8ea4:	000084c5 	.word	0x000084c5
    8ea8:	00018774 	.word	0x00018774
    8eac:	00000336 	.word	0x00000336

00008eb0 <S_Nv_Init>:
    8eb0:	b510      	push	{r4, lr}
    8eb2:	4b08      	ldr	r3, [pc, #32]	; (8ed4 <S_Nv_Init+0x24>)
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d008      	beq.n	8ecc <S_Nv_Init+0x1c>
    8eba:	4b07      	ldr	r3, [pc, #28]	; (8ed8 <S_Nv_Init+0x28>)
    8ebc:	4a07      	ldr	r2, [pc, #28]	; (8edc <S_Nv_Init+0x2c>)
    8ebe:	611a      	str	r2, [r3, #16]
    8ec0:	4a07      	ldr	r2, [pc, #28]	; (8ee0 <S_Nv_Init+0x30>)
    8ec2:	605a      	str	r2, [r3, #4]
    8ec4:	609a      	str	r2, [r3, #8]
    8ec6:	2200      	movs	r2, #0
    8ec8:	731a      	strb	r2, [r3, #12]
    8eca:	bd10      	pop	{r4, pc}
    8ecc:	4b05      	ldr	r3, [pc, #20]	; (8ee4 <S_Nv_Init+0x34>)
    8ece:	4798      	blx	r3
    8ed0:	e7f3      	b.n	8eba <S_Nv_Init+0xa>
    8ed2:	46c0      	nop			; (mov r8, r8)
    8ed4:	20000254 	.word	0x20000254
    8ed8:	2000023c 	.word	0x2000023c
    8edc:	00008339 	.word	0x00008339
    8ee0:	00001b58 	.word	0x00001b58
    8ee4:	00008b75 	.word	0x00008b75

00008ee8 <S_Nv_Write_Impl>:
    8ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eea:	46ce      	mov	lr, r9
    8eec:	4647      	mov	r7, r8
    8eee:	b580      	push	{r7, lr}
    8ef0:	b087      	sub	sp, #28
    8ef2:	0004      	movs	r4, r0
    8ef4:	9101      	str	r1, [sp, #4]
    8ef6:	0015      	movs	r5, r2
    8ef8:	001f      	movs	r7, r3
    8efa:	2800      	cmp	r0, #0
    8efc:	d00c      	beq.n	8f18 <S_Nv_Write_Impl+0x30>
    8efe:	2b00      	cmp	r3, #0
    8f00:	d00a      	beq.n	8f18 <S_Nv_Write_Impl+0x30>
    8f02:	4b35      	ldr	r3, [pc, #212]	; (8fd8 <S_Nv_Write_Impl+0xf0>)
    8f04:	4798      	blx	r3
    8f06:	2305      	movs	r3, #5
    8f08:	2800      	cmp	r0, #0
    8f0a:	d00b      	beq.n	8f24 <S_Nv_Write_Impl+0x3c>
    8f0c:	0018      	movs	r0, r3
    8f0e:	b007      	add	sp, #28
    8f10:	bc0c      	pop	{r2, r3}
    8f12:	4690      	mov	r8, r2
    8f14:	4699      	mov	r9, r3
    8f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f18:	4b30      	ldr	r3, [pc, #192]	; (8fdc <S_Nv_Write_Impl+0xf4>)
    8f1a:	4a31      	ldr	r2, [pc, #196]	; (8fe0 <S_Nv_Write_Impl+0xf8>)
    8f1c:	4931      	ldr	r1, [pc, #196]	; (8fe4 <S_Nv_Write_Impl+0xfc>)
    8f1e:	4832      	ldr	r0, [pc, #200]	; (8fe8 <S_Nv_Write_Impl+0x100>)
    8f20:	4c32      	ldr	r4, [pc, #200]	; (8fec <S_Nv_Write_Impl+0x104>)
    8f22:	47a0      	blx	r4
    8f24:	0028      	movs	r0, r5
    8f26:	3010      	adds	r0, #16
    8f28:	b280      	uxth	r0, r0
    8f2a:	4b31      	ldr	r3, [pc, #196]	; (8ff0 <S_Nv_Write_Impl+0x108>)
    8f2c:	4798      	blx	r3
    8f2e:	0020      	movs	r0, r4
    8f30:	4b30      	ldr	r3, [pc, #192]	; (8ff4 <S_Nv_Write_Impl+0x10c>)
    8f32:	4798      	blx	r3
    8f34:	0006      	movs	r6, r0
    8f36:	2303      	movs	r3, #3
    8f38:	2800      	cmp	r0, #0
    8f3a:	d0e7      	beq.n	8f0c <S_Nv_Write_Impl+0x24>
    8f3c:	7883      	ldrb	r3, [r0, #2]
    8f3e:	78c4      	ldrb	r4, [r0, #3]
    8f40:	0224      	lsls	r4, r4, #8
    8f42:	431c      	orrs	r4, r3
    8f44:	46a0      	mov	r8, r4
    8f46:	4b2c      	ldr	r3, [pc, #176]	; (8ff8 <S_Nv_Write_Impl+0x110>)
    8f48:	7818      	ldrb	r0, [r3, #0]
    8f4a:	2310      	movs	r3, #16
    8f4c:	aa02      	add	r2, sp, #8
    8f4e:	0021      	movs	r1, r4
    8f50:	4c2a      	ldr	r4, [pc, #168]	; (8ffc <S_Nv_Write_Impl+0x114>)
    8f52:	47a0      	blx	r4
    8f54:	ab02      	add	r3, sp, #8
    8f56:	8919      	ldrh	r1, [r3, #8]
    8f58:	9b01      	ldr	r3, [sp, #4]
    8f5a:	195a      	adds	r2, r3, r5
    8f5c:	2304      	movs	r3, #4
    8f5e:	428a      	cmp	r2, r1
    8f60:	d8d4      	bhi.n	8f0c <S_Nv_Write_Impl+0x24>
    8f62:	ab02      	add	r3, sp, #8
    8f64:	466a      	mov	r2, sp
    8f66:	8892      	ldrh	r2, [r2, #4]
    8f68:	809a      	strh	r2, [r3, #4]
    8f6a:	80dd      	strh	r5, [r3, #6]
    8f6c:	4642      	mov	r2, r8
    8f6e:	815a      	strh	r2, [r3, #10]
    8f70:	428d      	cmp	r5, r1
    8f72:	d02c      	beq.n	8fce <S_Nv_Write_Impl+0xe6>
    8f74:	ab02      	add	r3, sp, #8
    8f76:	899b      	ldrh	r3, [r3, #12]
    8f78:	3301      	adds	r3, #1
    8f7a:	aa02      	add	r2, sp, #8
    8f7c:	8193      	strh	r3, [r2, #12]
    8f7e:	4b20      	ldr	r3, [pc, #128]	; (9000 <S_Nv_Write_Impl+0x118>)
    8f80:	881c      	ldrh	r4, [r3, #0]
    8f82:	0039      	movs	r1, r7
    8f84:	a802      	add	r0, sp, #8
    8f86:	4b1f      	ldr	r3, [pc, #124]	; (9004 <S_Nv_Write_Impl+0x11c>)
    8f88:	4798      	blx	r3
    8f8a:	2301      	movs	r3, #1
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d0bd      	beq.n	8f0c <S_Nv_Write_Impl+0x24>
    8f90:	70b4      	strb	r4, [r6, #2]
    8f92:	0a24      	lsrs	r4, r4, #8
    8f94:	70f4      	strb	r4, [r6, #3]
    8f96:	ab02      	add	r3, sp, #8
    8f98:	899a      	ldrh	r2, [r3, #12]
    8f9a:	2300      	movs	r3, #0
    8f9c:	2a64      	cmp	r2, #100	; 0x64
    8f9e:	d9b5      	bls.n	8f0c <S_Nv_Write_Impl+0x24>
    8fa0:	ab02      	add	r3, sp, #8
    8fa2:	885a      	ldrh	r2, [r3, #2]
    8fa4:	4b18      	ldr	r3, [pc, #96]	; (9008 <S_Nv_Write_Impl+0x120>)
    8fa6:	801a      	strh	r2, [r3, #0]
    8fa8:	2200      	movs	r2, #0
    8faa:	4b18      	ldr	r3, [pc, #96]	; (900c <S_Nv_Write_Impl+0x124>)
    8fac:	801a      	strh	r2, [r3, #0]
    8fae:	4818      	ldr	r0, [pc, #96]	; (9010 <S_Nv_Write_Impl+0x128>)
    8fb0:	4b18      	ldr	r3, [pc, #96]	; (9014 <S_Nv_Write_Impl+0x12c>)
    8fb2:	4798      	blx	r3
    8fb4:	2300      	movs	r3, #0
    8fb6:	2800      	cmp	r0, #0
    8fb8:	d1a8      	bne.n	8f0c <S_Nv_Write_Impl+0x24>
    8fba:	4b15      	ldr	r3, [pc, #84]	; (9010 <S_Nv_Write_Impl+0x128>)
    8fbc:	4a16      	ldr	r2, [pc, #88]	; (9018 <S_Nv_Write_Impl+0x130>)
    8fbe:	611a      	str	r2, [r3, #16]
    8fc0:	4a16      	ldr	r2, [pc, #88]	; (901c <S_Nv_Write_Impl+0x134>)
    8fc2:	605a      	str	r2, [r3, #4]
    8fc4:	609a      	str	r2, [r3, #8]
    8fc6:	2200      	movs	r2, #0
    8fc8:	731a      	strb	r2, [r3, #12]
    8fca:	2300      	movs	r3, #0
    8fcc:	e79e      	b.n	8f0c <S_Nv_Write_Impl+0x24>
    8fce:	2300      	movs	r3, #0
    8fd0:	aa02      	add	r2, sp, #8
    8fd2:	8193      	strh	r3, [r2, #12]
    8fd4:	e7d3      	b.n	8f7e <S_Nv_Write_Impl+0x96>
    8fd6:	46c0      	nop			; (mov r8, r8)
    8fd8:	00008001 	.word	0x00008001
    8fdc:	0001870c 	.word	0x0001870c
    8fe0:	000187d8 	.word	0x000187d8
    8fe4:	00000596 	.word	0x00000596
    8fe8:	00018674 	.word	0x00018674
    8fec:	00016775 	.word	0x00016775
    8ff0:	00008775 	.word	0x00008775
    8ff4:	000081f9 	.word	0x000081f9
    8ff8:	20000280 	.word	0x20000280
    8ffc:	00007db1 	.word	0x00007db1
    9000:	20000282 	.word	0x20000282
    9004:	00008a29 	.word	0x00008a29
    9008:	20000250 	.word	0x20000250
    900c:	20000252 	.word	0x20000252
    9010:	20000110 	.word	0x20000110
    9014:	0000bf21 	.word	0x0000bf21
    9018:	00008a1d 	.word	0x00008a1d
    901c:	00000bb8 	.word	0x00000bb8

00009020 <S_Nv_Read_Impl>:
    9020:	b5f0      	push	{r4, r5, r6, r7, lr}
    9022:	b083      	sub	sp, #12
    9024:	000c      	movs	r4, r1
    9026:	0015      	movs	r5, r2
    9028:	001e      	movs	r6, r3
    902a:	2800      	cmp	r0, #0
    902c:	d009      	beq.n	9042 <S_Nv_Read_Impl+0x22>
    902e:	2b00      	cmp	r3, #0
    9030:	d007      	beq.n	9042 <S_Nv_Read_Impl+0x22>
    9032:	4b10      	ldr	r3, [pc, #64]	; (9074 <S_Nv_Read_Impl+0x54>)
    9034:	4798      	blx	r3
    9036:	2303      	movs	r3, #3
    9038:	2800      	cmp	r0, #0
    903a:	d108      	bne.n	904e <S_Nv_Read_Impl+0x2e>
    903c:	0018      	movs	r0, r3
    903e:	b003      	add	sp, #12
    9040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9042:	4b0d      	ldr	r3, [pc, #52]	; (9078 <S_Nv_Read_Impl+0x58>)
    9044:	4a0d      	ldr	r2, [pc, #52]	; (907c <S_Nv_Read_Impl+0x5c>)
    9046:	490e      	ldr	r1, [pc, #56]	; (9080 <S_Nv_Read_Impl+0x60>)
    9048:	480e      	ldr	r0, [pc, #56]	; (9084 <S_Nv_Read_Impl+0x64>)
    904a:	4c0f      	ldr	r4, [pc, #60]	; (9088 <S_Nv_Read_Impl+0x68>)
    904c:	47a0      	blx	r4
    904e:	1962      	adds	r2, r4, r5
    9050:	490e      	ldr	r1, [pc, #56]	; (908c <S_Nv_Read_Impl+0x6c>)
    9052:	3301      	adds	r3, #1
    9054:	428a      	cmp	r2, r1
    9056:	d8f1      	bhi.n	903c <S_Nv_Read_Impl+0x1c>
    9058:	4b0d      	ldr	r3, [pc, #52]	; (9090 <S_Nv_Read_Impl+0x70>)
    905a:	781f      	ldrb	r7, [r3, #0]
    905c:	9600      	str	r6, [sp, #0]
    905e:	002b      	movs	r3, r5
    9060:	0022      	movs	r2, r4
    9062:	0001      	movs	r1, r0
    9064:	0038      	movs	r0, r7
    9066:	4c0b      	ldr	r4, [pc, #44]	; (9094 <S_Nv_Read_Impl+0x74>)
    9068:	47a0      	blx	r4
    906a:	4243      	negs	r3, r0
    906c:	4143      	adcs	r3, r0
    906e:	009b      	lsls	r3, r3, #2
    9070:	e7e4      	b.n	903c <S_Nv_Read_Impl+0x1c>
    9072:	46c0      	nop			; (mov r8, r8)
    9074:	0000826d 	.word	0x0000826d
    9078:	0001870c 	.word	0x0001870c
    907c:	000187e8 	.word	0x000187e8
    9080:	000005ee 	.word	0x000005ee
    9084:	00018674 	.word	0x00018674
    9088:	00016775 	.word	0x00016775
    908c:	0000ffff 	.word	0x0000ffff
    9090:	20000280 	.word	0x20000280
    9094:	00008099 	.word	0x00008099

00009098 <S_Nv_ItemLength_Impl>:
    9098:	b510      	push	{r4, lr}
    909a:	b084      	sub	sp, #16
    909c:	2800      	cmp	r0, #0
    909e:	d005      	beq.n	90ac <S_Nv_ItemLength_Impl+0x14>
    90a0:	4b0a      	ldr	r3, [pc, #40]	; (90cc <S_Nv_ItemLength_Impl+0x34>)
    90a2:	4798      	blx	r3
    90a4:	1e01      	subs	r1, r0, #0
    90a6:	d107      	bne.n	90b8 <S_Nv_ItemLength_Impl+0x20>
    90a8:	b004      	add	sp, #16
    90aa:	bd10      	pop	{r4, pc}
    90ac:	4b08      	ldr	r3, [pc, #32]	; (90d0 <S_Nv_ItemLength_Impl+0x38>)
    90ae:	4a09      	ldr	r2, [pc, #36]	; (90d4 <S_Nv_ItemLength_Impl+0x3c>)
    90b0:	4909      	ldr	r1, [pc, #36]	; (90d8 <S_Nv_ItemLength_Impl+0x40>)
    90b2:	480a      	ldr	r0, [pc, #40]	; (90dc <S_Nv_ItemLength_Impl+0x44>)
    90b4:	4c0a      	ldr	r4, [pc, #40]	; (90e0 <S_Nv_ItemLength_Impl+0x48>)
    90b6:	47a0      	blx	r4
    90b8:	4b0a      	ldr	r3, [pc, #40]	; (90e4 <S_Nv_ItemLength_Impl+0x4c>)
    90ba:	7818      	ldrb	r0, [r3, #0]
    90bc:	2310      	movs	r3, #16
    90be:	466a      	mov	r2, sp
    90c0:	4c09      	ldr	r4, [pc, #36]	; (90e8 <S_Nv_ItemLength_Impl+0x50>)
    90c2:	47a0      	blx	r4
    90c4:	466b      	mov	r3, sp
    90c6:	8918      	ldrh	r0, [r3, #8]
    90c8:	e7ee      	b.n	90a8 <S_Nv_ItemLength_Impl+0x10>
    90ca:	46c0      	nop			; (mov r8, r8)
    90cc:	0000826d 	.word	0x0000826d
    90d0:	00018700 	.word	0x00018700
    90d4:	000187f8 	.word	0x000187f8
    90d8:	0000060b 	.word	0x0000060b
    90dc:	00018674 	.word	0x00018674
    90e0:	00016775 	.word	0x00016775
    90e4:	20000280 	.word	0x20000280
    90e8:	00007db1 	.word	0x00007db1

000090ec <S_Nv_ItemInit_Impl>:
    90ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ee:	b085      	sub	sp, #20
    90f0:	0004      	movs	r4, r0
    90f2:	000e      	movs	r6, r1
    90f4:	0015      	movs	r5, r2
    90f6:	1e43      	subs	r3, r0, #1
    90f8:	b29b      	uxth	r3, r3
    90fa:	4a2e      	ldr	r2, [pc, #184]	; (91b4 <S_Nv_ItemInit_Impl+0xc8>)
    90fc:	4293      	cmp	r3, r2
    90fe:	d81e      	bhi.n	913e <S_Nv_ItemInit_Impl+0x52>
    9100:	2380      	movs	r3, #128	; 0x80
    9102:	011b      	lsls	r3, r3, #4
    9104:	4299      	cmp	r1, r3
    9106:	d81a      	bhi.n	913e <S_Nv_ItemInit_Impl+0x52>
    9108:	4b2b      	ldr	r3, [pc, #172]	; (91b8 <S_Nv_ItemInit_Impl+0xcc>)
    910a:	4798      	blx	r3
    910c:	2800      	cmp	r0, #0
    910e:	d01d      	beq.n	914c <S_Nv_ItemInit_Impl+0x60>
    9110:	0020      	movs	r0, r4
    9112:	4b2a      	ldr	r3, [pc, #168]	; (91bc <S_Nv_ItemInit_Impl+0xd0>)
    9114:	4798      	blx	r3
    9116:	4286      	cmp	r6, r0
    9118:	d007      	beq.n	912a <S_Nv_ItemInit_Impl+0x3e>
    911a:	4b29      	ldr	r3, [pc, #164]	; (91c0 <S_Nv_ItemInit_Impl+0xd4>)
    911c:	801c      	strh	r4, [r3, #0]
    911e:	4b29      	ldr	r3, [pc, #164]	; (91c4 <S_Nv_ItemInit_Impl+0xd8>)
    9120:	801e      	strh	r6, [r3, #0]
    9122:	4b29      	ldr	r3, [pc, #164]	; (91c8 <S_Nv_ItemInit_Impl+0xdc>)
    9124:	4798      	blx	r3
    9126:	1e03      	subs	r3, r0, #0
    9128:	d115      	bne.n	9156 <S_Nv_ItemInit_Impl+0x6a>
    912a:	2d00      	cmp	r5, #0
    912c:	d040      	beq.n	91b0 <S_Nv_ItemInit_Impl+0xc4>
    912e:	002b      	movs	r3, r5
    9130:	0032      	movs	r2, r6
    9132:	2100      	movs	r1, #0
    9134:	0020      	movs	r0, r4
    9136:	4c25      	ldr	r4, [pc, #148]	; (91cc <S_Nv_ItemInit_Impl+0xe0>)
    9138:	47a0      	blx	r4
    913a:	0003      	movs	r3, r0
    913c:	e00b      	b.n	9156 <S_Nv_ItemInit_Impl+0x6a>
    913e:	4b24      	ldr	r3, [pc, #144]	; (91d0 <S_Nv_ItemInit_Impl+0xe4>)
    9140:	4a24      	ldr	r2, [pc, #144]	; (91d4 <S_Nv_ItemInit_Impl+0xe8>)
    9142:	21aa      	movs	r1, #170	; 0xaa
    9144:	00c9      	lsls	r1, r1, #3
    9146:	4824      	ldr	r0, [pc, #144]	; (91d8 <S_Nv_ItemInit_Impl+0xec>)
    9148:	4c24      	ldr	r4, [pc, #144]	; (91dc <S_Nv_ItemInit_Impl+0xf0>)
    914a:	47a0      	blx	r4
    914c:	4b24      	ldr	r3, [pc, #144]	; (91e0 <S_Nv_ItemInit_Impl+0xf4>)
    914e:	4798      	blx	r3
    9150:	2305      	movs	r3, #5
    9152:	2800      	cmp	r0, #0
    9154:	d002      	beq.n	915c <S_Nv_ItemInit_Impl+0x70>
    9156:	0018      	movs	r0, r3
    9158:	b005      	add	sp, #20
    915a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    915c:	0030      	movs	r0, r6
    915e:	3010      	adds	r0, #16
    9160:	b280      	uxth	r0, r0
    9162:	4b20      	ldr	r3, [pc, #128]	; (91e4 <S_Nv_ItemInit_Impl+0xf8>)
    9164:	4798      	blx	r3
    9166:	4b20      	ldr	r3, [pc, #128]	; (91e8 <S_Nv_ItemInit_Impl+0xfc>)
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	2b07      	cmp	r3, #7
    916c:	d819      	bhi.n	91a2 <S_Nv_ItemInit_Impl+0xb6>
    916e:	4b1f      	ldr	r3, [pc, #124]	; (91ec <S_Nv_ItemInit_Impl+0x100>)
    9170:	881f      	ldrh	r7, [r3, #0]
    9172:	466b      	mov	r3, sp
    9174:	805c      	strh	r4, [r3, #2]
    9176:	2300      	movs	r3, #0
    9178:	466a      	mov	r2, sp
    917a:	8093      	strh	r3, [r2, #4]
    917c:	80d6      	strh	r6, [r2, #6]
    917e:	8116      	strh	r6, [r2, #8]
    9180:	8153      	strh	r3, [r2, #10]
    9182:	8193      	strh	r3, [r2, #12]
    9184:	0029      	movs	r1, r5
    9186:	4668      	mov	r0, sp
    9188:	4b19      	ldr	r3, [pc, #100]	; (91f0 <S_Nv_ItemInit_Impl+0x104>)
    918a:	4798      	blx	r3
    918c:	2301      	movs	r3, #1
    918e:	2800      	cmp	r0, #0
    9190:	d0e1      	beq.n	9156 <S_Nv_ItemInit_Impl+0x6a>
    9192:	0020      	movs	r0, r4
    9194:	4b17      	ldr	r3, [pc, #92]	; (91f4 <S_Nv_ItemInit_Impl+0x108>)
    9196:	4798      	blx	r3
    9198:	7087      	strb	r7, [r0, #2]
    919a:	0a3f      	lsrs	r7, r7, #8
    919c:	70c7      	strb	r7, [r0, #3]
    919e:	2302      	movs	r3, #2
    91a0:	e7d9      	b.n	9156 <S_Nv_ItemInit_Impl+0x6a>
    91a2:	4b15      	ldr	r3, [pc, #84]	; (91f8 <S_Nv_ItemInit_Impl+0x10c>)
    91a4:	4a0b      	ldr	r2, [pc, #44]	; (91d4 <S_Nv_ItemInit_Impl+0xe8>)
    91a6:	21af      	movs	r1, #175	; 0xaf
    91a8:	00c9      	lsls	r1, r1, #3
    91aa:	480b      	ldr	r0, [pc, #44]	; (91d8 <S_Nv_ItemInit_Impl+0xec>)
    91ac:	4c0b      	ldr	r4, [pc, #44]	; (91dc <S_Nv_ItemInit_Impl+0xf0>)
    91ae:	47a0      	blx	r4
    91b0:	2300      	movs	r3, #0
    91b2:	e7d0      	b.n	9156 <S_Nv_ItemInit_Impl+0x6a>
    91b4:	0000effe 	.word	0x0000effe
    91b8:	0000826d 	.word	0x0000826d
    91bc:	00009099 	.word	0x00009099
    91c0:	20000250 	.word	0x20000250
    91c4:	20000252 	.word	0x20000252
    91c8:	000087f1 	.word	0x000087f1
    91cc:	00009021 	.word	0x00009021
    91d0:	000186c0 	.word	0x000186c0
    91d4:	000187c4 	.word	0x000187c4
    91d8:	00018674 	.word	0x00018674
    91dc:	00016775 	.word	0x00016775
    91e0:	00008001 	.word	0x00008001
    91e4:	00008775 	.word	0x00008775
    91e8:	20000278 	.word	0x20000278
    91ec:	20000282 	.word	0x20000282
    91f0:	00008a29 	.word	0x00008a29
    91f4:	00008289 	.word	0x00008289
    91f8:	0001861c 	.word	0x0001861c

000091fc <S_Nv_IsItemAvailable_Impl>:
    91fc:	b510      	push	{r4, lr}
    91fe:	4b03      	ldr	r3, [pc, #12]	; (920c <S_Nv_IsItemAvailable_Impl+0x10>)
    9200:	4798      	blx	r3
    9202:	1e43      	subs	r3, r0, #1
    9204:	4198      	sbcs	r0, r3
    9206:	b2c0      	uxtb	r0, r0
    9208:	bd10      	pop	{r4, pc}
    920a:	46c0      	nop			; (mov r8, r8)
    920c:	0000826d 	.word	0x0000826d

00009210 <pdsInitItemMask>:
    9210:	b5f0      	push	{r4, r5, r6, r7, lr}
    9212:	46d6      	mov	lr, sl
    9214:	4647      	mov	r7, r8
    9216:	b580      	push	{r7, lr}
    9218:	b087      	sub	sp, #28
    921a:	000f      	movs	r7, r1
    921c:	4b20      	ldr	r3, [pc, #128]	; (92a0 <pdsInitItemMask+0x90>)
    921e:	4298      	cmp	r0, r3
    9220:	d012      	beq.n	9248 <pdsInitItemMask+0x38>
    9222:	0443      	lsls	r3, r0, #17
    9224:	d415      	bmi.n	9252 <pdsInitItemMask+0x42>
    9226:	08c3      	lsrs	r3, r0, #3
    9228:	18cf      	adds	r7, r1, r3
    922a:	2307      	movs	r3, #7
    922c:	4018      	ands	r0, r3
    922e:	3b06      	subs	r3, #6
    9230:	4083      	lsls	r3, r0
    9232:	783a      	ldrb	r2, [r7, #0]
    9234:	4313      	orrs	r3, r2
    9236:	703b      	strb	r3, [r7, #0]
    9238:	2301      	movs	r3, #1
    923a:	9301      	str	r3, [sp, #4]
    923c:	9801      	ldr	r0, [sp, #4]
    923e:	b007      	add	sp, #28
    9240:	bc0c      	pop	{r2, r3}
    9242:	4690      	mov	r8, r2
    9244:	469a      	mov	sl, r3
    9246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9248:	23fe      	movs	r3, #254	; 0xfe
    924a:	700b      	strb	r3, [r1, #0]
    924c:	3bfd      	subs	r3, #253	; 0xfd
    924e:	9301      	str	r3, [sp, #4]
    9250:	e7f4      	b.n	923c <pdsInitItemMask+0x2c>
    9252:	a904      	add	r1, sp, #16
    9254:	4b13      	ldr	r3, [pc, #76]	; (92a4 <pdsInitItemMask+0x94>)
    9256:	4798      	blx	r3
    9258:	9001      	str	r0, [sp, #4]
    925a:	2800      	cmp	r0, #0
    925c:	d0ee      	beq.n	923c <pdsInitItemMask+0x2c>
    925e:	ab04      	add	r3, sp, #16
    9260:	889b      	ldrh	r3, [r3, #4]
    9262:	4698      	mov	r8, r3
    9264:	2b00      	cmp	r3, #0
    9266:	d0e9      	beq.n	923c <pdsInitItemMask+0x2c>
    9268:	2400      	movs	r4, #0
    926a:	ab02      	add	r3, sp, #8
    926c:	1d9d      	adds	r5, r3, #6
    926e:	4b0e      	ldr	r3, [pc, #56]	; (92a8 <pdsInitItemMask+0x98>)
    9270:	469a      	mov	sl, r3
    9272:	2607      	movs	r6, #7
    9274:	0061      	lsls	r1, r4, #1
    9276:	9b04      	ldr	r3, [sp, #16]
    9278:	469c      	mov	ip, r3
    927a:	4461      	add	r1, ip
    927c:	2202      	movs	r2, #2
    927e:	0028      	movs	r0, r5
    9280:	47d0      	blx	sl
    9282:	8829      	ldrh	r1, [r5, #0]
    9284:	08ca      	lsrs	r2, r1, #3
    9286:	18ba      	adds	r2, r7, r2
    9288:	4031      	ands	r1, r6
    928a:	2301      	movs	r3, #1
    928c:	408b      	lsls	r3, r1
    928e:	7811      	ldrb	r1, [r2, #0]
    9290:	430b      	orrs	r3, r1
    9292:	7013      	strb	r3, [r2, #0]
    9294:	3401      	adds	r4, #1
    9296:	b2e4      	uxtb	r4, r4
    9298:	b2a3      	uxth	r3, r4
    929a:	4543      	cmp	r3, r8
    929c:	d3ea      	bcc.n	9274 <pdsInitItemMask+0x64>
    929e:	e7cd      	b.n	923c <pdsInitItemMask+0x2c>
    92a0:	00004002 	.word	0x00004002
    92a4:	000095e9 	.word	0x000095e9
    92a8:	00016837 	.word	0x00016837

000092ac <PDS_Restore>:
    92ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    92ae:	46d6      	mov	lr, sl
    92b0:	4647      	mov	r7, r8
    92b2:	b580      	push	{r7, lr}
    92b4:	b089      	sub	sp, #36	; 0x24
    92b6:	a907      	add	r1, sp, #28
    92b8:	2300      	movs	r3, #0
    92ba:	700b      	strb	r3, [r1, #0]
    92bc:	4b27      	ldr	r3, [pc, #156]	; (935c <PDS_Restore+0xb0>)
    92be:	4798      	blx	r3
    92c0:	1e06      	subs	r6, r0, #0
    92c2:	d043      	beq.n	934c <PDS_Restore+0xa0>
    92c4:	2400      	movs	r4, #0
    92c6:	4f26      	ldr	r7, [pc, #152]	; (9360 <PDS_Restore+0xb4>)
    92c8:	4b26      	ldr	r3, [pc, #152]	; (9364 <PDS_Restore+0xb8>)
    92ca:	469a      	mov	sl, r3
    92cc:	4b26      	ldr	r3, [pc, #152]	; (9368 <PDS_Restore+0xbc>)
    92ce:	4698      	mov	r8, r3
    92d0:	e010      	b.n	92f4 <PDS_Restore+0x48>
    92d2:	4b26      	ldr	r3, [pc, #152]	; (936c <PDS_Restore+0xc0>)
    92d4:	4a26      	ldr	r2, [pc, #152]	; (9370 <PDS_Restore+0xc4>)
    92d6:	2156      	movs	r1, #86	; 0x56
    92d8:	31ff      	adds	r1, #255	; 0xff
    92da:	4826      	ldr	r0, [pc, #152]	; (9374 <PDS_Restore+0xc8>)
    92dc:	4c26      	ldr	r4, [pc, #152]	; (9378 <PDS_Restore+0xcc>)
    92de:	47a0      	blx	r4
    92e0:	4b26      	ldr	r3, [pc, #152]	; (937c <PDS_Restore+0xd0>)
    92e2:	4a23      	ldr	r2, [pc, #140]	; (9370 <PDS_Restore+0xc4>)
    92e4:	21b3      	movs	r1, #179	; 0xb3
    92e6:	0049      	lsls	r1, r1, #1
    92e8:	4822      	ldr	r0, [pc, #136]	; (9374 <PDS_Restore+0xc8>)
    92ea:	4c23      	ldr	r4, [pc, #140]	; (9378 <PDS_Restore+0xcc>)
    92ec:	47a0      	blx	r4
    92ee:	3401      	adds	r4, #1
    92f0:	2c08      	cmp	r4, #8
    92f2:	d02b      	beq.n	934c <PDS_Restore+0xa0>
    92f4:	ab07      	add	r3, sp, #28
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	40e3      	lsrs	r3, r4
    92fa:	07db      	lsls	r3, r3, #31
    92fc:	d5f7      	bpl.n	92ee <PDS_Restore+0x42>
    92fe:	b2a5      	uxth	r5, r4
    9300:	a903      	add	r1, sp, #12
    9302:	0028      	movs	r0, r5
    9304:	47b8      	blx	r7
    9306:	2800      	cmp	r0, #0
    9308:	d01f      	beq.n	934a <PDS_Restore+0x9e>
    930a:	ab03      	add	r3, sp, #12
    930c:	885b      	ldrh	r3, [r3, #2]
    930e:	2b00      	cmp	r3, #0
    9310:	d0df      	beq.n	92d2 <PDS_Restore+0x26>
    9312:	9b04      	ldr	r3, [sp, #16]
    9314:	2b00      	cmp	r3, #0
    9316:	d0dc      	beq.n	92d2 <PDS_Restore+0x26>
    9318:	9b05      	ldr	r3, [sp, #20]
    931a:	2b00      	cmp	r3, #0
    931c:	d000      	beq.n	9320 <PDS_Restore+0x74>
    931e:	4798      	blx	r3
    9320:	0028      	movs	r0, r5
    9322:	47d0      	blx	sl
    9324:	9001      	str	r0, [sp, #4]
    9326:	ab03      	add	r3, sp, #12
    9328:	9a04      	ldr	r2, [sp, #16]
    932a:	8859      	ldrh	r1, [r3, #2]
    932c:	0028      	movs	r0, r5
    932e:	47c0      	blx	r8
    9330:	2802      	cmp	r0, #2
    9332:	d011      	beq.n	9358 <PDS_Restore+0xac>
    9334:	2800      	cmp	r0, #0
    9336:	d1d3      	bne.n	92e0 <PDS_Restore+0x34>
    9338:	ab03      	add	r3, sp, #12
    933a:	885a      	ldrh	r2, [r3, #2]
    933c:	9904      	ldr	r1, [sp, #16]
    933e:	9b01      	ldr	r3, [sp, #4]
    9340:	0028      	movs	r0, r5
    9342:	4d0f      	ldr	r5, [pc, #60]	; (9380 <PDS_Restore+0xd4>)
    9344:	47a8      	blx	r5
    9346:	2800      	cmp	r0, #0
    9348:	d1d1      	bne.n	92ee <PDS_Restore+0x42>
    934a:	2600      	movs	r6, #0
    934c:	0030      	movs	r0, r6
    934e:	b009      	add	sp, #36	; 0x24
    9350:	bc0c      	pop	{r2, r3}
    9352:	4690      	mov	r8, r2
    9354:	469a      	mov	sl, r3
    9356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9358:	2600      	movs	r6, #0
    935a:	e7f7      	b.n	934c <PDS_Restore+0xa0>
    935c:	00009211 	.word	0x00009211
    9360:	0000954d 	.word	0x0000954d
    9364:	00009099 	.word	0x00009099
    9368:	000090ed 	.word	0x000090ed
    936c:	00018810 	.word	0x00018810
    9370:	0001890c 	.word	0x0001890c
    9374:	0001884c 	.word	0x0001884c
    9378:	00016775 	.word	0x00016775
    937c:	0001889c 	.word	0x0001889c
    9380:	000095a9 	.word	0x000095a9

00009384 <PDS_Store>:
    9384:	b510      	push	{r4, lr}
    9386:	4905      	ldr	r1, [pc, #20]	; (939c <PDS_Store+0x18>)
    9388:	4b05      	ldr	r3, [pc, #20]	; (93a0 <PDS_Store+0x1c>)
    938a:	4798      	blx	r3
    938c:	1e04      	subs	r4, r0, #0
    938e:	d101      	bne.n	9394 <PDS_Store+0x10>
    9390:	0020      	movs	r0, r4
    9392:	bd10      	pop	{r4, pc}
    9394:	2000      	movs	r0, #0
    9396:	4b03      	ldr	r3, [pc, #12]	; (93a4 <PDS_Store+0x20>)
    9398:	4798      	blx	r3
    939a:	e7f9      	b.n	9390 <PDS_Store+0xc>
    939c:	20000288 	.word	0x20000288
    93a0:	00009211 	.word	0x00009211
    93a4:	000094f9 	.word	0x000094f9

000093a8 <pdsStoreItemTaskHandler>:
    93a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93aa:	b085      	sub	sp, #20
    93ac:	4b3e      	ldr	r3, [pc, #248]	; (94a8 <pdsStoreItemTaskHandler+0x100>)
    93ae:	781b      	ldrb	r3, [r3, #0]
    93b0:	3301      	adds	r3, #1
    93b2:	2207      	movs	r2, #7
    93b4:	4013      	ands	r3, r2
    93b6:	4a3d      	ldr	r2, [pc, #244]	; (94ac <pdsStoreItemTaskHandler+0x104>)
    93b8:	7817      	ldrb	r7, [r2, #0]
    93ba:	0038      	movs	r0, r7
    93bc:	001e      	movs	r6, r3
    93be:	003a      	movs	r2, r7
    93c0:	40da      	lsrs	r2, r3
    93c2:	07d2      	lsls	r2, r2, #31
    93c4:	d431      	bmi.n	942a <pdsStoreItemTaskHandler+0x82>
    93c6:	3301      	adds	r3, #1
    93c8:	b2db      	uxtb	r3, r3
    93ca:	2207      	movs	r2, #7
    93cc:	2507      	movs	r5, #7
    93ce:	2401      	movs	r4, #1
    93d0:	402b      	ands	r3, r5
    93d2:	001e      	movs	r6, r3
    93d4:	0001      	movs	r1, r0
    93d6:	40d9      	lsrs	r1, r3
    93d8:	420c      	tst	r4, r1
    93da:	d126      	bne.n	942a <pdsStoreItemTaskHandler+0x82>
    93dc:	3301      	adds	r3, #1
    93de:	b2db      	uxtb	r3, r3
    93e0:	3a01      	subs	r2, #1
    93e2:	b2d2      	uxtb	r2, r2
    93e4:	2a00      	cmp	r2, #0
    93e6:	d1f3      	bne.n	93d0 <pdsStoreItemTaskHandler+0x28>
    93e8:	2401      	movs	r4, #1
    93ea:	00e4      	lsls	r4, r4, #3
    93ec:	18e4      	adds	r4, r4, r3
    93ee:	0020      	movs	r0, r4
    93f0:	4b2f      	ldr	r3, [pc, #188]	; (94b0 <pdsStoreItemTaskHandler+0x108>)
    93f2:	4798      	blx	r3
    93f4:	2800      	cmp	r0, #0
    93f6:	d124      	bne.n	9442 <pdsStoreItemTaskHandler+0x9a>
    93f8:	4669      	mov	r1, sp
    93fa:	0020      	movs	r0, r4
    93fc:	4b2d      	ldr	r3, [pc, #180]	; (94b4 <pdsStoreItemTaskHandler+0x10c>)
    93fe:	4798      	blx	r3
    9400:	2800      	cmp	r0, #0
    9402:	d038      	beq.n	9476 <pdsStoreItemTaskHandler+0xce>
    9404:	9b02      	ldr	r3, [sp, #8]
    9406:	2b00      	cmp	r3, #0
    9408:	d000      	beq.n	940c <pdsStoreItemTaskHandler+0x64>
    940a:	4798      	blx	r3
    940c:	9a01      	ldr	r2, [sp, #4]
    940e:	466b      	mov	r3, sp
    9410:	8859      	ldrh	r1, [r3, #2]
    9412:	0020      	movs	r0, r4
    9414:	4b28      	ldr	r3, [pc, #160]	; (94b8 <pdsStoreItemTaskHandler+0x110>)
    9416:	4798      	blx	r3
    9418:	23fd      	movs	r3, #253	; 0xfd
    941a:	4218      	tst	r0, r3
    941c:	d02b      	beq.n	9476 <pdsStoreItemTaskHandler+0xce>
    941e:	4b27      	ldr	r3, [pc, #156]	; (94bc <pdsStoreItemTaskHandler+0x114>)
    9420:	4a27      	ldr	r2, [pc, #156]	; (94c0 <pdsStoreItemTaskHandler+0x118>)
    9422:	21ea      	movs	r1, #234	; 0xea
    9424:	4827      	ldr	r0, [pc, #156]	; (94c4 <pdsStoreItemTaskHandler+0x11c>)
    9426:	4c28      	ldr	r4, [pc, #160]	; (94c8 <pdsStoreItemTaskHandler+0x120>)
    9428:	47a0      	blx	r4
    942a:	2201      	movs	r2, #1
    942c:	40b2      	lsls	r2, r6
    942e:	4397      	bics	r7, r2
    9430:	4a1e      	ldr	r2, [pc, #120]	; (94ac <pdsStoreItemTaskHandler+0x104>)
    9432:	7017      	strb	r7, [r2, #0]
    9434:	2100      	movs	r1, #0
    9436:	4a25      	ldr	r2, [pc, #148]	; (94cc <pdsStoreItemTaskHandler+0x124>)
    9438:	7011      	strb	r1, [r2, #0]
    943a:	4a1b      	ldr	r2, [pc, #108]	; (94a8 <pdsStoreItemTaskHandler+0x100>)
    943c:	7013      	strb	r3, [r2, #0]
    943e:	2400      	movs	r4, #0
    9440:	e7d3      	b.n	93ea <pdsStoreItemTaskHandler+0x42>
    9442:	4669      	mov	r1, sp
    9444:	0020      	movs	r0, r4
    9446:	4b1b      	ldr	r3, [pc, #108]	; (94b4 <pdsStoreItemTaskHandler+0x10c>)
    9448:	4798      	blx	r3
    944a:	2800      	cmp	r0, #0
    944c:	d013      	beq.n	9476 <pdsStoreItemTaskHandler+0xce>
    944e:	466b      	mov	r3, sp
    9450:	885b      	ldrh	r3, [r3, #2]
    9452:	2b00      	cmp	r3, #0
    9454:	d015      	beq.n	9482 <pdsStoreItemTaskHandler+0xda>
    9456:	9b01      	ldr	r3, [sp, #4]
    9458:	2b00      	cmp	r3, #0
    945a:	d012      	beq.n	9482 <pdsStoreItemTaskHandler+0xda>
    945c:	9b02      	ldr	r3, [sp, #8]
    945e:	2b00      	cmp	r3, #0
    9460:	d000      	beq.n	9464 <pdsStoreItemTaskHandler+0xbc>
    9462:	4798      	blx	r3
    9464:	9b01      	ldr	r3, [sp, #4]
    9466:	466a      	mov	r2, sp
    9468:	8852      	ldrh	r2, [r2, #2]
    946a:	2100      	movs	r1, #0
    946c:	0020      	movs	r0, r4
    946e:	4c18      	ldr	r4, [pc, #96]	; (94d0 <pdsStoreItemTaskHandler+0x128>)
    9470:	47a0      	blx	r4
    9472:	2800      	cmp	r0, #0
    9474:	d10c      	bne.n	9490 <pdsStoreItemTaskHandler+0xe8>
    9476:	4b0d      	ldr	r3, [pc, #52]	; (94ac <pdsStoreItemTaskHandler+0x104>)
    9478:	781b      	ldrb	r3, [r3, #0]
    947a:	2b00      	cmp	r3, #0
    947c:	d10f      	bne.n	949e <pdsStoreItemTaskHandler+0xf6>
    947e:	b005      	add	sp, #20
    9480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9482:	4b14      	ldr	r3, [pc, #80]	; (94d4 <pdsStoreItemTaskHandler+0x12c>)
    9484:	4a14      	ldr	r2, [pc, #80]	; (94d8 <pdsStoreItemTaskHandler+0x130>)
    9486:	2134      	movs	r1, #52	; 0x34
    9488:	31ff      	adds	r1, #255	; 0xff
    948a:	480e      	ldr	r0, [pc, #56]	; (94c4 <pdsStoreItemTaskHandler+0x11c>)
    948c:	4c0e      	ldr	r4, [pc, #56]	; (94c8 <pdsStoreItemTaskHandler+0x120>)
    948e:	47a0      	blx	r4
    9490:	4b12      	ldr	r3, [pc, #72]	; (94dc <pdsStoreItemTaskHandler+0x134>)
    9492:	4a11      	ldr	r2, [pc, #68]	; (94d8 <pdsStoreItemTaskHandler+0x130>)
    9494:	2142      	movs	r1, #66	; 0x42
    9496:	31ff      	adds	r1, #255	; 0xff
    9498:	480a      	ldr	r0, [pc, #40]	; (94c4 <pdsStoreItemTaskHandler+0x11c>)
    949a:	4c0b      	ldr	r4, [pc, #44]	; (94c8 <pdsStoreItemTaskHandler+0x120>)
    949c:	47a0      	blx	r4
    949e:	2000      	movs	r0, #0
    94a0:	4b0f      	ldr	r3, [pc, #60]	; (94e0 <pdsStoreItemTaskHandler+0x138>)
    94a2:	4798      	blx	r3
    94a4:	e7eb      	b.n	947e <pdsStoreItemTaskHandler+0xd6>
    94a6:	46c0      	nop			; (mov r8, r8)
    94a8:	20000289 	.word	0x20000289
    94ac:	20000288 	.word	0x20000288
    94b0:	000091fd 	.word	0x000091fd
    94b4:	0000954d 	.word	0x0000954d
    94b8:	000090ed 	.word	0x000090ed
    94bc:	0001889c 	.word	0x0001889c
    94c0:	000188e4 	.word	0x000188e4
    94c4:	0001884c 	.word	0x0001884c
    94c8:	00016775 	.word	0x00016775
    94cc:	20000284 	.word	0x20000284
    94d0:	00008ee9 	.word	0x00008ee9
    94d4:	00018810 	.word	0x00018810
    94d8:	000188fc 	.word	0x000188fc
    94dc:	0001891c 	.word	0x0001891c
    94e0:	000094f9 	.word	0x000094f9

000094e4 <PDS_Init>:
    94e4:	b510      	push	{r4, lr}
    94e6:	4b02      	ldr	r3, [pc, #8]	; (94f0 <PDS_Init+0xc>)
    94e8:	4798      	blx	r3
    94ea:	4b02      	ldr	r3, [pc, #8]	; (94f4 <PDS_Init+0x10>)
    94ec:	4798      	blx	r3
    94ee:	bd10      	pop	{r4, pc}
    94f0:	00007d61 	.word	0x00007d61
    94f4:	00008eb1 	.word	0x00008eb1

000094f8 <pdsPostTask>:
    94f8:	4a03      	ldr	r2, [pc, #12]	; (9508 <pdsPostTask+0x10>)
    94fa:	2301      	movs	r3, #1
    94fc:	4083      	lsls	r3, r0
    94fe:	7811      	ldrb	r1, [r2, #0]
    9500:	430b      	orrs	r3, r1
    9502:	7013      	strb	r3, [r2, #0]
    9504:	4770      	bx	lr
    9506:	46c0      	nop			; (mov r8, r8)
    9508:	2000028a 	.word	0x2000028a

0000950c <PDS_TaskHandler>:
    950c:	b570      	push	{r4, r5, r6, lr}
    950e:	4b0d      	ldr	r3, [pc, #52]	; (9544 <PDS_TaskHandler+0x38>)
    9510:	781d      	ldrb	r5, [r3, #0]
    9512:	2d00      	cmp	r5, #0
    9514:	d012      	beq.n	953c <PDS_TaskHandler+0x30>
    9516:	0028      	movs	r0, r5
    9518:	07eb      	lsls	r3, r5, #31
    951a:	d410      	bmi.n	953e <PDS_TaskHandler+0x32>
    951c:	2300      	movs	r3, #0
    951e:	2401      	movs	r4, #1
    9520:	3301      	adds	r3, #1
    9522:	b2db      	uxtb	r3, r3
    9524:	0019      	movs	r1, r3
    9526:	0002      	movs	r2, r0
    9528:	40da      	lsrs	r2, r3
    952a:	4214      	tst	r4, r2
    952c:	d0f8      	beq.n	9520 <PDS_TaskHandler+0x14>
    952e:	2301      	movs	r3, #1
    9530:	408b      	lsls	r3, r1
    9532:	405d      	eors	r5, r3
    9534:	4b03      	ldr	r3, [pc, #12]	; (9544 <PDS_TaskHandler+0x38>)
    9536:	701d      	strb	r5, [r3, #0]
    9538:	4b03      	ldr	r3, [pc, #12]	; (9548 <PDS_TaskHandler+0x3c>)
    953a:	4798      	blx	r3
    953c:	bd70      	pop	{r4, r5, r6, pc}
    953e:	2100      	movs	r1, #0
    9540:	e7f5      	b.n	952e <PDS_TaskHandler+0x22>
    9542:	46c0      	nop			; (mov r8, r8)
    9544:	2000028a 	.word	0x2000028a
    9548:	000093a9 	.word	0x000093a9

0000954c <pdsGetItemDescr>:
    954c:	b5f0      	push	{r4, r5, r6, r7, lr}
    954e:	b087      	sub	sp, #28
    9550:	9101      	str	r1, [sp, #4]
    9552:	aa02      	add	r2, sp, #8
    9554:	4b10      	ldr	r3, [pc, #64]	; (9598 <pdsGetItemDescr+0x4c>)
    9556:	0011      	movs	r1, r2
    9558:	cb70      	ldmia	r3!, {r4, r5, r6}
    955a:	c170      	stmia	r1!, {r4, r5, r6}
    955c:	681b      	ldr	r3, [r3, #0]
    955e:	600b      	str	r3, [r1, #0]
    9560:	8813      	ldrh	r3, [r2, #0]
    9562:	4283      	cmp	r3, r0
    9564:	d011      	beq.n	958a <pdsGetItemDescr+0x3e>
    9566:	4b0d      	ldr	r3, [pc, #52]	; (959c <pdsGetItemDescr+0x50>)
    9568:	aa02      	add	r2, sp, #8
    956a:	0011      	movs	r1, r2
    956c:	001c      	movs	r4, r3
    956e:	cce0      	ldmia	r4!, {r5, r6, r7}
    9570:	c1e0      	stmia	r1!, {r5, r6, r7}
    9572:	6824      	ldr	r4, [r4, #0]
    9574:	600c      	str	r4, [r1, #0]
    9576:	8811      	ldrh	r1, [r2, #0]
    9578:	4281      	cmp	r1, r0
    957a:	d006      	beq.n	958a <pdsGetItemDescr+0x3e>
    957c:	3310      	adds	r3, #16
    957e:	4908      	ldr	r1, [pc, #32]	; (95a0 <pdsGetItemDescr+0x54>)
    9580:	428b      	cmp	r3, r1
    9582:	d1f2      	bne.n	956a <pdsGetItemDescr+0x1e>
    9584:	2000      	movs	r0, #0
    9586:	b007      	add	sp, #28
    9588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    958a:	2210      	movs	r2, #16
    958c:	a902      	add	r1, sp, #8
    958e:	9801      	ldr	r0, [sp, #4]
    9590:	4b04      	ldr	r3, [pc, #16]	; (95a4 <pdsGetItemDescr+0x58>)
    9592:	4798      	blx	r3
    9594:	2001      	movs	r0, #1
    9596:	e7f6      	b.n	9586 <pdsGetItemDescr+0x3a>
    9598:	00004400 	.word	0x00004400
    959c:	00004410 	.word	0x00004410
    95a0:	00004480 	.word	0x00004480
    95a4:	00016837 	.word	0x00016837

000095a8 <pdsUpdateMemory>:
    95a8:	b510      	push	{r4, lr}
    95aa:	b084      	sub	sp, #16
    95ac:	429a      	cmp	r2, r3
    95ae:	d008      	beq.n	95c2 <pdsUpdateMemory+0x1a>
    95b0:	4669      	mov	r1, sp
    95b2:	4b08      	ldr	r3, [pc, #32]	; (95d4 <pdsUpdateMemory+0x2c>)
    95b4:	4798      	blx	r3
    95b6:	2800      	cmp	r0, #0
    95b8:	d003      	beq.n	95c2 <pdsUpdateMemory+0x1a>
    95ba:	466b      	mov	r3, sp
    95bc:	7b1b      	ldrb	r3, [r3, #12]
    95be:	07db      	lsls	r3, r3, #31
    95c0:	d502      	bpl.n	95c8 <pdsUpdateMemory+0x20>
    95c2:	2001      	movs	r0, #1
    95c4:	b004      	add	sp, #16
    95c6:	bd10      	pop	{r4, pc}
    95c8:	4b03      	ldr	r3, [pc, #12]	; (95d8 <pdsUpdateMemory+0x30>)
    95ca:	4a04      	ldr	r2, [pc, #16]	; (95dc <pdsUpdateMemory+0x34>)
    95cc:	2177      	movs	r1, #119	; 0x77
    95ce:	4804      	ldr	r0, [pc, #16]	; (95e0 <pdsUpdateMemory+0x38>)
    95d0:	4c04      	ldr	r4, [pc, #16]	; (95e4 <pdsUpdateMemory+0x3c>)
    95d2:	47a0      	blx	r4
    95d4:	0000954d 	.word	0x0000954d
    95d8:	00018948 	.word	0x00018948
    95dc:	00018938 	.word	0x00018938
    95e0:	00018974 	.word	0x00018974
    95e4:	00016775 	.word	0x00016775

000095e8 <pdsGetDirDescr>:
    95e8:	b570      	push	{r4, r5, r6, lr}
    95ea:	b082      	sub	sp, #8
    95ec:	000c      	movs	r4, r1
    95ee:	466b      	mov	r3, sp
    95f0:	4a08      	ldr	r2, [pc, #32]	; (9614 <pdsGetDirDescr+0x2c>)
    95f2:	4669      	mov	r1, sp
    95f4:	ca60      	ldmia	r2!, {r5, r6}
    95f6:	c160      	stmia	r1!, {r5, r6}
    95f8:	88da      	ldrh	r2, [r3, #6]
    95fa:	2300      	movs	r3, #0
    95fc:	4282      	cmp	r2, r0
    95fe:	d002      	beq.n	9606 <pdsGetDirDescr+0x1e>
    9600:	0018      	movs	r0, r3
    9602:	b002      	add	sp, #8
    9604:	bd70      	pop	{r4, r5, r6, pc}
    9606:	2208      	movs	r2, #8
    9608:	4669      	mov	r1, sp
    960a:	0020      	movs	r0, r4
    960c:	4b02      	ldr	r3, [pc, #8]	; (9618 <pdsGetDirDescr+0x30>)
    960e:	4798      	blx	r3
    9610:	2301      	movs	r3, #1
    9612:	e7f5      	b.n	9600 <pdsGetDirDescr+0x18>
    9614:	00004470 	.word	0x00004470
    9618:	00016837 	.word	0x00016837

0000961c <MiMAC_SetAltAddress>:
    961c:	b510      	push	{r4, lr}
    961e:	7802      	ldrb	r2, [r0, #0]
    9620:	4b08      	ldr	r3, [pc, #32]	; (9644 <MiMAC_SetAltAddress+0x28>)
    9622:	701a      	strb	r2, [r3, #0]
    9624:	7842      	ldrb	r2, [r0, #1]
    9626:	705a      	strb	r2, [r3, #1]
    9628:	780a      	ldrb	r2, [r1, #0]
    962a:	4c07      	ldr	r4, [pc, #28]	; (9648 <MiMAC_SetAltAddress+0x2c>)
    962c:	7022      	strb	r2, [r4, #0]
    962e:	784a      	ldrb	r2, [r1, #1]
    9630:	7062      	strb	r2, [r4, #1]
    9632:	8818      	ldrh	r0, [r3, #0]
    9634:	4b05      	ldr	r3, [pc, #20]	; (964c <MiMAC_SetAltAddress+0x30>)
    9636:	4798      	blx	r3
    9638:	8820      	ldrh	r0, [r4, #0]
    963a:	4b05      	ldr	r3, [pc, #20]	; (9650 <MiMAC_SetAltAddress+0x34>)
    963c:	4798      	blx	r3
    963e:	2001      	movs	r0, #1
    9640:	bd10      	pop	{r4, pc}
    9642:	46c0      	nop			; (mov r8, r8)
    9644:	200020d8 	.word	0x200020d8
    9648:	2000214c 	.word	0x2000214c
    964c:	0000a931 	.word	0x0000a931
    9650:	0000a91d 	.word	0x0000a91d

00009654 <mic_generator>:
    9654:	b5f0      	push	{r4, r5, r6, r7, lr}
    9656:	46c6      	mov	lr, r8
    9658:	b500      	push	{lr}
    965a:	b0c6      	sub	sp, #280	; 0x118
    965c:	0006      	movs	r6, r0
    965e:	000c      	movs	r4, r1
    9660:	469c      	mov	ip, r3
    9662:	994c      	ldr	r1, [sp, #304]	; 0x130
    9664:	0925      	lsrs	r5, r4, #4
    9666:	0723      	lsls	r3, r4, #28
    9668:	d000      	beq.n	966c <mic_generator+0x18>
    966a:	3501      	adds	r5, #1
    966c:	2049      	movs	r0, #73	; 0x49
    966e:	4b40      	ldr	r3, [pc, #256]	; (9770 <mic_generator+0x11c>)
    9670:	7018      	strb	r0, [r3, #0]
    9672:	2300      	movs	r3, #0
    9674:	a802      	add	r0, sp, #8
    9676:	7003      	strb	r3, [r0, #0]
    9678:	330d      	adds	r3, #13
    967a:	7043      	strb	r3, [r0, #1]
    967c:	7082      	strb	r2, [r0, #2]
    967e:	2200      	movs	r2, #0
    9680:	4b3b      	ldr	r3, [pc, #236]	; (9770 <mic_generator+0x11c>)
    9682:	5c8f      	ldrb	r7, [r1, r2]
    9684:	18d0      	adds	r0, r2, r3
    9686:	7047      	strb	r7, [r0, #1]
    9688:	0010      	movs	r0, r2
    968a:	af02      	add	r7, sp, #8
    968c:	46b8      	mov	r8, r7
    968e:	4440      	add	r0, r8
    9690:	5c8f      	ldrb	r7, [r1, r2]
    9692:	71c7      	strb	r7, [r0, #7]
    9694:	3201      	adds	r2, #1
    9696:	2a08      	cmp	r2, #8
    9698:	d1f3      	bne.n	9682 <mic_generator+0x2e>
    969a:	4663      	mov	r3, ip
    969c:	466a      	mov	r2, sp
    969e:	71d3      	strb	r3, [r2, #7]
    96a0:	79d3      	ldrb	r3, [r2, #7]
    96a2:	4833      	ldr	r0, [pc, #204]	; (9770 <mic_generator+0x11c>)
    96a4:	7243      	strb	r3, [r0, #9]
    96a6:	4642      	mov	r2, r8
    96a8:	70d3      	strb	r3, [r2, #3]
    96aa:	4663      	mov	r3, ip
    96ac:	041b      	lsls	r3, r3, #16
    96ae:	0e1b      	lsrs	r3, r3, #24
    96b0:	7283      	strb	r3, [r0, #10]
    96b2:	7113      	strb	r3, [r2, #4]
    96b4:	4663      	mov	r3, ip
    96b6:	021b      	lsls	r3, r3, #8
    96b8:	0e1b      	lsrs	r3, r3, #24
    96ba:	72c3      	strb	r3, [r0, #11]
    96bc:	7153      	strb	r3, [r2, #5]
    96be:	4663      	mov	r3, ip
    96c0:	0e1b      	lsrs	r3, r3, #24
    96c2:	7303      	strb	r3, [r0, #12]
    96c4:	7193      	strb	r3, [r2, #6]
    96c6:	2300      	movs	r3, #0
    96c8:	73d3      	strb	r3, [r2, #15]
    96ca:	2204      	movs	r2, #4
    96cc:	7342      	strb	r2, [r0, #13]
    96ce:	7383      	strb	r3, [r0, #14]
    96d0:	73c4      	strb	r4, [r0, #15]
    96d2:	4928      	ldr	r1, [pc, #160]	; (9774 <mic_generator+0x120>)
    96d4:	4b28      	ldr	r3, [pc, #160]	; (9778 <mic_generator+0x124>)
    96d6:	4798      	blx	r3
    96d8:	2300      	movs	r3, #0
    96da:	a906      	add	r1, sp, #24
    96dc:	aa02      	add	r2, sp, #8
    96de:	5c9a      	ldrb	r2, [r3, r2]
    96e0:	545a      	strb	r2, [r3, r1]
    96e2:	3301      	adds	r3, #1
    96e4:	2b10      	cmp	r3, #16
    96e6:	d1f9      	bne.n	96dc <mic_generator+0x88>
    96e8:	0027      	movs	r7, r4
    96ea:	3710      	adds	r7, #16
    96ec:	2f10      	cmp	r7, #16
    96ee:	dd0a      	ble.n	9706 <mic_generator+0xb2>
    96f0:	2010      	movs	r0, #16
    96f2:	a906      	add	r1, sp, #24
    96f4:	18f2      	adds	r2, r6, r3
    96f6:	3a10      	subs	r2, #16
    96f8:	7812      	ldrb	r2, [r2, #0]
    96fa:	540a      	strb	r2, [r1, r0]
    96fc:	3301      	adds	r3, #1
    96fe:	b29b      	uxth	r3, r3
    9700:	0018      	movs	r0, r3
    9702:	42bb      	cmp	r3, r7
    9704:	dbf6      	blt.n	96f4 <mic_generator+0xa0>
    9706:	0023      	movs	r3, r4
    9708:	3310      	adds	r3, #16
    970a:	001a      	movs	r2, r3
    970c:	3501      	adds	r5, #1
    970e:	0129      	lsls	r1, r5, #4
    9710:	428b      	cmp	r3, r1
    9712:	da07      	bge.n	9724 <mic_generator+0xd0>
    9714:	ac06      	add	r4, sp, #24
    9716:	2000      	movs	r0, #0
    9718:	54a0      	strb	r0, [r4, r2]
    971a:	3301      	adds	r3, #1
    971c:	b29b      	uxth	r3, r3
    971e:	001a      	movs	r2, r3
    9720:	428b      	cmp	r3, r1
    9722:	dbf9      	blt.n	9718 <mic_generator+0xc4>
    9724:	2200      	movs	r2, #0
    9726:	2700      	movs	r7, #0
    9728:	2d00      	cmp	r5, #0
    972a:	dd15      	ble.n	9758 <mic_generator+0x104>
    972c:	4e10      	ldr	r6, [pc, #64]	; (9770 <mic_generator+0x11c>)
    972e:	0112      	lsls	r2, r2, #4
    9730:	2300      	movs	r3, #0
    9732:	a906      	add	r1, sp, #24
    9734:	188c      	adds	r4, r1, r2
    9736:	1999      	adds	r1, r3, r6
    9738:	5ce2      	ldrb	r2, [r4, r3]
    973a:	7808      	ldrb	r0, [r1, #0]
    973c:	4042      	eors	r2, r0
    973e:	700a      	strb	r2, [r1, #0]
    9740:	3301      	adds	r3, #1
    9742:	2b10      	cmp	r3, #16
    9744:	d1f7      	bne.n	9736 <mic_generator+0xe2>
    9746:	490b      	ldr	r1, [pc, #44]	; (9774 <mic_generator+0x120>)
    9748:	4809      	ldr	r0, [pc, #36]	; (9770 <mic_generator+0x11c>)
    974a:	4b0b      	ldr	r3, [pc, #44]	; (9778 <mic_generator+0x124>)
    974c:	4798      	blx	r3
    974e:	3701      	adds	r7, #1
    9750:	b2bf      	uxth	r7, r7
    9752:	003a      	movs	r2, r7
    9754:	42af      	cmp	r7, r5
    9756:	dbea      	blt.n	972e <mic_generator+0xda>
    9758:	2300      	movs	r3, #0
    975a:	4808      	ldr	r0, [pc, #32]	; (977c <mic_generator+0x128>)
    975c:	4904      	ldr	r1, [pc, #16]	; (9770 <mic_generator+0x11c>)
    975e:	5cca      	ldrb	r2, [r1, r3]
    9760:	54c2      	strb	r2, [r0, r3]
    9762:	3301      	adds	r3, #1
    9764:	2b10      	cmp	r3, #16
    9766:	d1fa      	bne.n	975e <mic_generator+0x10a>
    9768:	b046      	add	sp, #280	; 0x118
    976a:	bc04      	pop	{r2}
    976c:	4690      	mov	r8, r2
    976e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9770:	200020e8 	.word	0x200020e8
    9774:	000189c8 	.word	0x000189c8
    9778:	0000aaa9 	.word	0x0000aaa9
    977c:	2000212c 	.word	0x2000212c

00009780 <DataEncrypt>:
    9780:	b5f0      	push	{r4, r5, r6, r7, lr}
    9782:	46de      	mov	lr, fp
    9784:	4657      	mov	r7, sl
    9786:	464e      	mov	r6, r9
    9788:	4645      	mov	r5, r8
    978a:	b5e0      	push	{r5, r6, r7, lr}
    978c:	b08d      	sub	sp, #52	; 0x34
    978e:	4680      	mov	r8, r0
    9790:	000e      	movs	r6, r1
    9792:	0014      	movs	r4, r2
    9794:	001a      	movs	r2, r3
    9796:	7809      	ldrb	r1, [r1, #0]
    9798:	090d      	lsrs	r5, r1, #4
    979a:	070b      	lsls	r3, r1, #28
    979c:	d000      	beq.n	97a0 <DataEncrypt+0x20>
    979e:	3501      	adds	r5, #1
    97a0:	4b37      	ldr	r3, [pc, #220]	; (9880 <DataEncrypt+0x100>)
    97a2:	685b      	ldr	r3, [r3, #4]
    97a4:	9300      	str	r3, [sp, #0]
    97a6:	0023      	movs	r3, r4
    97a8:	4640      	mov	r0, r8
    97aa:	4f36      	ldr	r7, [pc, #216]	; (9884 <DataEncrypt+0x104>)
    97ac:	47b8      	blx	r7
    97ae:	7831      	ldrb	r1, [r6, #0]
    97b0:	b28b      	uxth	r3, r1
    97b2:	002e      	movs	r6, r5
    97b4:	012d      	lsls	r5, r5, #4
    97b6:	42a9      	cmp	r1, r5
    97b8:	da07      	bge.n	97ca <DataEncrypt+0x4a>
    97ba:	2100      	movs	r1, #0
    97bc:	4642      	mov	r2, r8
    97be:	54d1      	strb	r1, [r2, r3]
    97c0:	3301      	adds	r3, #1
    97c2:	b29b      	uxth	r3, r3
    97c4:	42ab      	cmp	r3, r5
    97c6:	dbfa      	blt.n	97be <DataEncrypt+0x3e>
    97c8:	4690      	mov	r8, r2
    97ca:	2201      	movs	r2, #1
    97cc:	ab04      	add	r3, sp, #16
    97ce:	701a      	strb	r2, [r3, #0]
    97d0:	4b2b      	ldr	r3, [pc, #172]	; (9880 <DataEncrypt+0x100>)
    97d2:	6858      	ldr	r0, [r3, #4]
    97d4:	2300      	movs	r3, #0
    97d6:	aa04      	add	r2, sp, #16
    97d8:	18d2      	adds	r2, r2, r3
    97da:	5cc1      	ldrb	r1, [r0, r3]
    97dc:	7051      	strb	r1, [r2, #1]
    97de:	3301      	adds	r3, #1
    97e0:	2b08      	cmp	r3, #8
    97e2:	d1f8      	bne.n	97d6 <DataEncrypt+0x56>
    97e4:	ab04      	add	r3, sp, #16
    97e6:	725c      	strb	r4, [r3, #9]
    97e8:	0a22      	lsrs	r2, r4, #8
    97ea:	729a      	strb	r2, [r3, #10]
    97ec:	0c22      	lsrs	r2, r4, #16
    97ee:	72da      	strb	r2, [r3, #11]
    97f0:	0e24      	lsrs	r4, r4, #24
    97f2:	731c      	strb	r4, [r3, #12]
    97f4:	2204      	movs	r2, #4
    97f6:	735a      	strb	r2, [r3, #13]
    97f8:	2200      	movs	r2, #0
    97fa:	739a      	strb	r2, [r3, #14]
    97fc:	73da      	strb	r2, [r3, #15]
    97fe:	1c73      	adds	r3, r6, #1
    9800:	4699      	mov	r9, r3
    9802:	2300      	movs	r3, #0
    9804:	469b      	mov	fp, r3
    9806:	9303      	str	r3, [sp, #12]
    9808:	464b      	mov	r3, r9
    980a:	2b00      	cmp	r3, #0
    980c:	dd2f      	ble.n	986e <DataEncrypt+0xee>
    980e:	ac08      	add	r4, sp, #32
    9810:	ad04      	add	r5, sp, #16
    9812:	4b1d      	ldr	r3, [pc, #116]	; (9888 <DataEncrypt+0x108>)
    9814:	469a      	mov	sl, r3
    9816:	4e1d      	ldr	r6, [pc, #116]	; (988c <DataEncrypt+0x10c>)
    9818:	e017      	b.n	984a <DataEncrypt+0xca>
    981a:	5d1a      	ldrb	r2, [r3, r4]
    981c:	5ccf      	ldrb	r7, [r1, r3]
    981e:	407a      	eors	r2, r7
    9820:	54ca      	strb	r2, [r1, r3]
    9822:	3301      	adds	r3, #1
    9824:	2b10      	cmp	r3, #16
    9826:	d007      	beq.n	9838 <DataEncrypt+0xb8>
    9828:	2800      	cmp	r0, #0
    982a:	d1f6      	bne.n	981a <DataEncrypt+0x9a>
    982c:	5d1a      	ldrb	r2, [r3, r4]
    982e:	4667      	mov	r7, ip
    9830:	5cff      	ldrb	r7, [r7, r3]
    9832:	407a      	eors	r2, r7
    9834:	54f2      	strb	r2, [r6, r3]
    9836:	e7f4      	b.n	9822 <DataEncrypt+0xa2>
    9838:	3001      	adds	r0, #1
    983a:	73e8      	strb	r0, [r5, #15]
    983c:	9f03      	ldr	r7, [sp, #12]
    983e:	3701      	adds	r7, #1
    9840:	b2bb      	uxth	r3, r7
    9842:	9303      	str	r3, [sp, #12]
    9844:	469b      	mov	fp, r3
    9846:	454b      	cmp	r3, r9
    9848:	da11      	bge.n	986e <DataEncrypt+0xee>
    984a:	2300      	movs	r3, #0
    984c:	5d5a      	ldrb	r2, [r3, r5]
    984e:	551a      	strb	r2, [r3, r4]
    9850:	3301      	adds	r3, #1
    9852:	2b10      	cmp	r3, #16
    9854:	d1fa      	bne.n	984c <DataEncrypt+0xcc>
    9856:	490e      	ldr	r1, [pc, #56]	; (9890 <DataEncrypt+0x110>)
    9858:	0020      	movs	r0, r4
    985a:	47d0      	blx	sl
    985c:	7be8      	ldrb	r0, [r5, #15]
    985e:	4659      	mov	r1, fp
    9860:	3901      	subs	r1, #1
    9862:	0109      	lsls	r1, r1, #4
    9864:	2300      	movs	r3, #0
    9866:	4441      	add	r1, r8
    9868:	4a0a      	ldr	r2, [pc, #40]	; (9894 <DataEncrypt+0x114>)
    986a:	4694      	mov	ip, r2
    986c:	e7dc      	b.n	9828 <DataEncrypt+0xa8>
    986e:	2001      	movs	r0, #1
    9870:	b00d      	add	sp, #52	; 0x34
    9872:	bc3c      	pop	{r2, r3, r4, r5}
    9874:	4690      	mov	r8, r2
    9876:	4699      	mov	r9, r3
    9878:	46a2      	mov	sl, r4
    987a:	46ab      	mov	fp, r5
    987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    987e:	46c0      	nop			; (mov r8, r8)
    9880:	200020e0 	.word	0x200020e0
    9884:	00009655 	.word	0x00009655
    9888:	0000aaa9 	.word	0x0000aaa9
    988c:	20002114 	.word	0x20002114
    9890:	000189c8 	.word	0x000189c8
    9894:	2000212c 	.word	0x2000212c

00009898 <validate_mic>:
    9898:	4b0e      	ldr	r3, [pc, #56]	; (98d4 <validate_mic+0x3c>)
    989a:	781a      	ldrb	r2, [r3, #0]
    989c:	4b0e      	ldr	r3, [pc, #56]	; (98d8 <validate_mic+0x40>)
    989e:	781b      	ldrb	r3, [r3, #0]
    98a0:	2000      	movs	r0, #0
    98a2:	429a      	cmp	r2, r3
    98a4:	d000      	beq.n	98a8 <validate_mic+0x10>
    98a6:	4770      	bx	lr
    98a8:	4b0a      	ldr	r3, [pc, #40]	; (98d4 <validate_mic+0x3c>)
    98aa:	785a      	ldrb	r2, [r3, #1]
    98ac:	4b0a      	ldr	r3, [pc, #40]	; (98d8 <validate_mic+0x40>)
    98ae:	785b      	ldrb	r3, [r3, #1]
    98b0:	429a      	cmp	r2, r3
    98b2:	d1f8      	bne.n	98a6 <validate_mic+0xe>
    98b4:	4b07      	ldr	r3, [pc, #28]	; (98d4 <validate_mic+0x3c>)
    98b6:	789a      	ldrb	r2, [r3, #2]
    98b8:	4b07      	ldr	r3, [pc, #28]	; (98d8 <validate_mic+0x40>)
    98ba:	789b      	ldrb	r3, [r3, #2]
    98bc:	429a      	cmp	r2, r3
    98be:	d1f2      	bne.n	98a6 <validate_mic+0xe>
    98c0:	4b04      	ldr	r3, [pc, #16]	; (98d4 <validate_mic+0x3c>)
    98c2:	78d8      	ldrb	r0, [r3, #3]
    98c4:	4b04      	ldr	r3, [pc, #16]	; (98d8 <validate_mic+0x40>)
    98c6:	78db      	ldrb	r3, [r3, #3]
    98c8:	1ac0      	subs	r0, r0, r3
    98ca:	4243      	negs	r3, r0
    98cc:	4158      	adcs	r0, r3
    98ce:	b2c0      	uxtb	r0, r0
    98d0:	e7e9      	b.n	98a6 <validate_mic+0xe>
    98d2:	46c0      	nop			; (mov r8, r8)
    98d4:	20002114 	.word	0x20002114
    98d8:	2000213c 	.word	0x2000213c

000098dc <DataDecrypt>:
    98dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    98de:	46de      	mov	lr, fp
    98e0:	4657      	mov	r7, sl
    98e2:	464e      	mov	r6, r9
    98e4:	4645      	mov	r5, r8
    98e6:	b5e0      	push	{r5, r6, r7, lr}
    98e8:	b091      	sub	sp, #68	; 0x44
    98ea:	4681      	mov	r9, r0
    98ec:	9106      	str	r1, [sp, #24]
    98ee:	9204      	str	r2, [sp, #16]
    98f0:	9305      	str	r3, [sp, #20]
    98f2:	ab1a      	add	r3, sp, #104	; 0x68
    98f4:	781b      	ldrb	r3, [r3, #0]
    98f6:	9307      	str	r3, [sp, #28]
    98f8:	7809      	ldrb	r1, [r1, #0]
    98fa:	090a      	lsrs	r2, r1, #4
    98fc:	070b      	lsls	r3, r1, #28
    98fe:	d000      	beq.n	9902 <DataDecrypt+0x26>
    9900:	3201      	adds	r2, #1
    9902:	b28b      	uxth	r3, r1
    9904:	0010      	movs	r0, r2
    9906:	0112      	lsls	r2, r2, #4
    9908:	4291      	cmp	r1, r2
    990a:	da07      	bge.n	991c <DataDecrypt+0x40>
    990c:	2100      	movs	r1, #0
    990e:	464c      	mov	r4, r9
    9910:	54e1      	strb	r1, [r4, r3]
    9912:	3301      	adds	r3, #1
    9914:	b29b      	uxth	r3, r3
    9916:	4293      	cmp	r3, r2
    9918:	dbfa      	blt.n	9910 <DataDecrypt+0x34>
    991a:	46a1      	mov	r9, r4
    991c:	2201      	movs	r2, #1
    991e:	ab08      	add	r3, sp, #32
    9920:	701a      	strb	r2, [r3, #0]
    9922:	2300      	movs	r3, #0
    9924:	9c04      	ldr	r4, [sp, #16]
    9926:	aa08      	add	r2, sp, #32
    9928:	18d2      	adds	r2, r2, r3
    992a:	5ce1      	ldrb	r1, [r4, r3]
    992c:	7051      	strb	r1, [r2, #1]
    992e:	3301      	adds	r3, #1
    9930:	2b08      	cmp	r3, #8
    9932:	d1f8      	bne.n	9926 <DataDecrypt+0x4a>
    9934:	ab08      	add	r3, sp, #32
    9936:	9905      	ldr	r1, [sp, #20]
    9938:	7259      	strb	r1, [r3, #9]
    993a:	0a0a      	lsrs	r2, r1, #8
    993c:	729a      	strb	r2, [r3, #10]
    993e:	0c0a      	lsrs	r2, r1, #16
    9940:	72da      	strb	r2, [r3, #11]
    9942:	0e0a      	lsrs	r2, r1, #24
    9944:	731a      	strb	r2, [r3, #12]
    9946:	2204      	movs	r2, #4
    9948:	735a      	strb	r2, [r3, #13]
    994a:	2200      	movs	r2, #0
    994c:	739a      	strb	r2, [r3, #14]
    994e:	73da      	strb	r2, [r3, #15]
    9950:	1c43      	adds	r3, r0, #1
    9952:	469a      	mov	sl, r3
    9954:	2500      	movs	r5, #0
    9956:	2300      	movs	r3, #0
    9958:	4698      	mov	r8, r3
    995a:	4653      	mov	r3, sl
    995c:	2b00      	cmp	r3, #0
    995e:	dd2e      	ble.n	99be <DataDecrypt+0xe2>
    9960:	ac0c      	add	r4, sp, #48	; 0x30
    9962:	ae08      	add	r6, sp, #32
    9964:	4b26      	ldr	r3, [pc, #152]	; (9a00 <DataDecrypt+0x124>)
    9966:	469b      	mov	fp, r3
    9968:	4f26      	ldr	r7, [pc, #152]	; (9a04 <DataDecrypt+0x128>)
    996a:	4643      	mov	r3, r8
    996c:	9303      	str	r3, [sp, #12]
    996e:	46a8      	mov	r8, r5
    9970:	e014      	b.n	999c <DataDecrypt+0xc0>
    9972:	5d1a      	ldrb	r2, [r3, r4]
    9974:	5ce9      	ldrb	r1, [r5, r3]
    9976:	404a      	eors	r2, r1
    9978:	54ea      	strb	r2, [r5, r3]
    997a:	3301      	adds	r3, #1
    997c:	2b10      	cmp	r3, #16
    997e:	d004      	beq.n	998a <DataDecrypt+0xae>
    9980:	2800      	cmp	r0, #0
    9982:	d1f6      	bne.n	9972 <DataDecrypt+0x96>
    9984:	5d1a      	ldrb	r2, [r3, r4]
    9986:	54fa      	strb	r2, [r7, r3]
    9988:	e7f7      	b.n	997a <DataDecrypt+0x9e>
    998a:	3001      	adds	r0, #1
    998c:	73f0      	strb	r0, [r6, #15]
    998e:	9d03      	ldr	r5, [sp, #12]
    9990:	3501      	adds	r5, #1
    9992:	b2ab      	uxth	r3, r5
    9994:	9303      	str	r3, [sp, #12]
    9996:	4698      	mov	r8, r3
    9998:	4553      	cmp	r3, sl
    999a:	da10      	bge.n	99be <DataDecrypt+0xe2>
    999c:	2300      	movs	r3, #0
    999e:	5d9a      	ldrb	r2, [r3, r6]
    99a0:	551a      	strb	r2, [r3, r4]
    99a2:	3301      	adds	r3, #1
    99a4:	2b10      	cmp	r3, #16
    99a6:	d1fa      	bne.n	999e <DataDecrypt+0xc2>
    99a8:	4917      	ldr	r1, [pc, #92]	; (9a08 <DataDecrypt+0x12c>)
    99aa:	0020      	movs	r0, r4
    99ac:	47d8      	blx	fp
    99ae:	7bf0      	ldrb	r0, [r6, #15]
    99b0:	4642      	mov	r2, r8
    99b2:	3a01      	subs	r2, #1
    99b4:	0112      	lsls	r2, r2, #4
    99b6:	2300      	movs	r3, #0
    99b8:	444a      	add	r2, r9
    99ba:	0015      	movs	r5, r2
    99bc:	e7e0      	b.n	9980 <DataDecrypt+0xa4>
    99be:	9b06      	ldr	r3, [sp, #24]
    99c0:	7819      	ldrb	r1, [r3, #0]
    99c2:	3904      	subs	r1, #4
    99c4:	b2c9      	uxtb	r1, r1
    99c6:	7019      	strb	r1, [r3, #0]
    99c8:	9b04      	ldr	r3, [sp, #16]
    99ca:	9300      	str	r3, [sp, #0]
    99cc:	9b05      	ldr	r3, [sp, #20]
    99ce:	9a07      	ldr	r2, [sp, #28]
    99d0:	4648      	mov	r0, r9
    99d2:	4c0e      	ldr	r4, [pc, #56]	; (9a0c <DataDecrypt+0x130>)
    99d4:	47a0      	blx	r4
    99d6:	2300      	movs	r3, #0
    99d8:	4d0d      	ldr	r5, [pc, #52]	; (9a10 <DataDecrypt+0x134>)
    99da:	4c0a      	ldr	r4, [pc, #40]	; (9a04 <DataDecrypt+0x128>)
    99dc:	480d      	ldr	r0, [pc, #52]	; (9a14 <DataDecrypt+0x138>)
    99de:	5ce2      	ldrb	r2, [r4, r3]
    99e0:	5cc1      	ldrb	r1, [r0, r3]
    99e2:	404a      	eors	r2, r1
    99e4:	54ea      	strb	r2, [r5, r3]
    99e6:	3301      	adds	r3, #1
    99e8:	2b10      	cmp	r3, #16
    99ea:	d1f8      	bne.n	99de <DataDecrypt+0x102>
    99ec:	4b0a      	ldr	r3, [pc, #40]	; (9a18 <DataDecrypt+0x13c>)
    99ee:	4798      	blx	r3
    99f0:	b011      	add	sp, #68	; 0x44
    99f2:	bc3c      	pop	{r2, r3, r4, r5}
    99f4:	4690      	mov	r8, r2
    99f6:	4699      	mov	r9, r3
    99f8:	46a2      	mov	sl, r4
    99fa:	46ab      	mov	fp, r5
    99fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99fe:	46c0      	nop			; (mov r8, r8)
    9a00:	0000aaa9 	.word	0x0000aaa9
    9a04:	20002104 	.word	0x20002104
    9a08:	000189c8 	.word	0x000189c8
    9a0c:	00009655 	.word	0x00009655
    9a10:	20002114 	.word	0x20002114
    9a14:	2000212c 	.word	0x2000212c
    9a18:	00009899 	.word	0x00009899

00009a1c <MiMAC_Set>:
    9a1c:	b510      	push	{r4, lr}
    9a1e:	2800      	cmp	r0, #0
    9a20:	d109      	bne.n	9a36 <MiMAC_Set+0x1a>
    9a22:	780b      	ldrb	r3, [r1, #0]
    9a24:	2b19      	cmp	r3, #25
    9a26:	d807      	bhi.n	9a38 <MiMAC_Set+0x1c>
    9a28:	4a04      	ldr	r2, [pc, #16]	; (9a3c <MiMAC_Set+0x20>)
    9a2a:	7013      	strb	r3, [r2, #0]
    9a2c:	0018      	movs	r0, r3
    9a2e:	4b04      	ldr	r3, [pc, #16]	; (9a40 <MiMAC_Set+0x24>)
    9a30:	4798      	blx	r3
    9a32:	2001      	movs	r0, #1
    9a34:	e000      	b.n	9a38 <MiMAC_Set+0x1c>
    9a36:	2000      	movs	r0, #0
    9a38:	bd10      	pop	{r4, pc}
    9a3a:	46c0      	nop			; (mov r8, r8)
    9a3c:	2000214e 	.word	0x2000214e
    9a40:	0000a9f5 	.word	0x0000a9f5

00009a44 <MiMAC_Init>:
    9a44:	b570      	push	{r4, r5, r6, lr}
    9a46:	b082      	sub	sp, #8
    9a48:	466c      	mov	r4, sp
    9a4a:	9000      	str	r0, [sp, #0]
    9a4c:	9101      	str	r1, [sp, #4]
    9a4e:	4b1c      	ldr	r3, [pc, #112]	; (9ac0 <MiMAC_Init+0x7c>)
    9a50:	4798      	blx	r3
    9a52:	4d1c      	ldr	r5, [pc, #112]	; (9ac4 <MiMAC_Init+0x80>)
    9a54:	002b      	movs	r3, r5
    9a56:	466a      	mov	r2, sp
    9a58:	ca03      	ldmia	r2!, {r0, r1}
    9a5a:	c303      	stmia	r3!, {r0, r1}
    9a5c:	4b1a      	ldr	r3, [pc, #104]	; (9ac8 <MiMAC_Init+0x84>)
    9a5e:	4798      	blx	r3
    9a60:	0006      	movs	r6, r0
    9a62:	2001      	movs	r0, #1
    9a64:	4b19      	ldr	r3, [pc, #100]	; (9acc <MiMAC_Init+0x88>)
    9a66:	4798      	blx	r3
    9a68:	4b19      	ldr	r3, [pc, #100]	; (9ad0 <MiMAC_Init+0x8c>)
    9a6a:	701e      	strb	r6, [r3, #0]
    9a6c:	6868      	ldr	r0, [r5, #4]
    9a6e:	4b19      	ldr	r3, [pc, #100]	; (9ad4 <MiMAC_Init+0x90>)
    9a70:	4798      	blx	r3
    9a72:	4b19      	ldr	r3, [pc, #100]	; (9ad8 <MiMAC_Init+0x94>)
    9a74:	2200      	movs	r2, #0
    9a76:	701a      	strb	r2, [r3, #0]
    9a78:	2102      	movs	r1, #2
    9a7a:	31ff      	adds	r1, #255	; 0xff
    9a7c:	545a      	strb	r2, [r3, r1]
    9a7e:	4917      	ldr	r1, [pc, #92]	; (9adc <MiMAC_Init+0x98>)
    9a80:	545a      	strb	r2, [r3, r1]
    9a82:	4917      	ldr	r1, [pc, #92]	; (9ae0 <MiMAC_Init+0x9c>)
    9a84:	545a      	strb	r2, [r3, r1]
    9a86:	7823      	ldrb	r3, [r4, #0]
    9a88:	075b      	lsls	r3, r3, #29
    9a8a:	d40a      	bmi.n	9aa2 <MiMAC_Init+0x5e>
    9a8c:	4c15      	ldr	r4, [pc, #84]	; (9ae4 <MiMAC_Init+0xa0>)
    9a8e:	2300      	movs	r3, #0
    9a90:	6023      	str	r3, [r4, #0]
>>>>>>> Stashed changes
    9a92:	2001      	movs	r0, #1
    9a94:	4b14      	ldr	r3, [pc, #80]	; (9ae8 <MiMAC_Init+0xa4>)
    9a96:	4798      	blx	r3
<<<<<<< Updated upstream
=======
    9a06:	2001      	movs	r0, #1
    9a08:	4b11      	ldr	r3, [pc, #68]	; (9a50 <MiMAC_Init+0xa8>)
    9a0a:	4798      	blx	r3
>>>>>>> Stashed changes
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    9a0c:	4a0e      	ldr	r2, [pc, #56]	; (9a48 <MiMAC_Init+0xa0>)
    9a0e:	6813      	ldr	r3, [r2, #0]
    9a10:	2180      	movs	r1, #128	; 0x80
    9a12:	00c9      	lsls	r1, r1, #3
    9a14:	468c      	mov	ip, r1
    9a16:	4463      	add	r3, ip
    9a18:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9a1a:	2001      	movs	r0, #1
    9a1c:	4b0b      	ldr	r3, [pc, #44]	; (9a4c <MiMAC_Init+0xa4>)
    9a1e:	4798      	blx	r3
    9a20:	e7ee      	b.n	9a00 <MiMAC_Init+0x58>
    9a22:	46c0      	nop			; (mov r8, r8)
    9a24:	0000a841 	.word	0x0000a841
    9a28:	200020e0 	.word	0x200020e0
    9a2c:	0000a9f5 	.word	0x0000a9f5
    9a30:	0000a875 	.word	0x0000a875
    9a34:	20001fd5 	.word	0x20001fd5
    9a38:	0000aa19 	.word	0x0000aa19
    9a3c:	20002258 	.word	0x20002258
    9a40:	00000202 	.word	0x00000202
    9a44:	00000303 	.word	0x00000303
    9a48:	20002128 	.word	0x20002128
    9a4c:	000092e9 	.word	0x000092e9
    9a50:	00009211 	.word	0x00009211

00009a54 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a56:	46de      	mov	lr, fp
    9a58:	4657      	mov	r7, sl
    9a5a:	464e      	mov	r6, r9
    9a5c:	4645      	mov	r5, r8
    9a5e:	b5e0      	push	{r5, r6, r7, lr}
    9a60:	b087      	sub	sp, #28
    9a62:	af03      	add	r7, sp, #12
    9a64:	1c04      	adds	r4, r0, #0
    9a66:	9003      	str	r0, [sp, #12]
    9a68:	0008      	movs	r0, r1
    9a6a:	9104      	str	r1, [sp, #16]
    9a6c:	0015      	movs	r5, r2
    9a6e:	0a2d      	lsrs	r5, r5, #8
    9a70:	9205      	str	r2, [sp, #20]
    9a72:	9300      	str	r3, [sp, #0]
    9a74:	ab11      	add	r3, sp, #68	; 0x44
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	469a      	mov	sl, r3
    9a7a:	b2e4      	uxtb	r4, r4
    9a7c:	06a6      	lsls	r6, r4, #26
    9a7e:	0ff6      	lsrs	r6, r6, #31
    9a80:	9002      	str	r0, [sp, #8]
    9a82:	b2d3      	uxtb	r3, r2
    9a84:	469c      	mov	ip, r3
    9a86:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    9a88:	2200      	movs	r2, #0
    9a8a:	4bc9      	ldr	r3, [pc, #804]	; (9db0 <MiMAC_SendPacket+0x35c>)
    9a8c:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9a8e:	4bc9      	ldr	r3, [pc, #804]	; (9db4 <MiMAC_SendPacket+0x360>)
    9a90:	cf07      	ldmia	r7!, {r0, r1, r2}
    9a92:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9a94:	0763      	lsls	r3, r4, #29
    9a96:	d501      	bpl.n	9a9c <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    9a98:	2301      	movs	r3, #1
    9a9a:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9a9c:	2308      	movs	r3, #8
    9a9e:	4023      	ands	r3, r4
    9aa0:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9aa2:	4253      	negs	r3, r2
    9aa4:	4153      	adcs	r3, r2
    9aa6:	425b      	negs	r3, r3
    9aa8:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    9aaa:	2303      	movs	r3, #3
    9aac:	4023      	ands	r3, r4
    9aae:	2b01      	cmp	r3, #1
    9ab0:	d04d      	beq.n	9b4e <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9ab2:	2201      	movs	r2, #1
    9ab4:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d004      	beq.n	9ac4 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    9aba:	1e9a      	subs	r2, r3, #2
    9abc:	4251      	negs	r1, r2
    9abe:	4151      	adcs	r1, r2
    9ac0:	004a      	lsls	r2, r1, #1
    9ac2:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9ac4:	aa03      	add	r2, sp, #12
    9ac6:	8952      	ldrh	r2, [r2, #10]
    9ac8:	48bb      	ldr	r0, [pc, #748]	; (9db8 <MiMAC_SendPacket+0x364>)
    9aca:	8800      	ldrh	r0, [r0, #0]
    9acc:	4290      	cmp	r0, r2
    9ace:	d041      	beq.n	9b54 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    9ad0:	2200      	movs	r2, #0
    9ad2:	4693      	mov	fp, r2
        headerLength = 7;
    9ad4:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    9ad6:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    9ad8:	0017      	movs	r7, r2
    9ada:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    9adc:	4661      	mov	r1, ip
    9ade:	2900      	cmp	r1, #0
    9ae0:	d000      	beq.n	9ae4 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    9ae2:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    9ae4:	2d00      	cmp	r5, #0
    9ae6:	d044      	beq.n	9b72 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    9ae8:	3702      	adds	r7, #2
    9aea:	b2fa      	uxtb	r2, r7
    9aec:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    9aee:	2224      	movs	r2, #36	; 0x24
    9af0:	4014      	ands	r4, r2
    9af2:	2c20      	cmp	r4, #32
    9af4:	d041      	beq.n	9b7a <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9af6:	2b03      	cmp	r3, #3
    9af8:	d044      	beq.n	9b84 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    9afa:	aa03      	add	r2, sp, #12
    9afc:	0171      	lsls	r1, r6, #5
    9afe:	7813      	ldrb	r3, [r2, #0]
    9b00:	2020      	movs	r0, #32
    9b02:	4383      	bics	r3, r0
    9b04:	430b      	orrs	r3, r1
    9b06:	7013      	strb	r3, [r2, #0]
    9b08:	2203      	movs	r2, #3
    9b0a:	4013      	ands	r3, r2
    9b0c:	2b01      	cmp	r3, #1
    9b0e:	d041      	beq.n	9b94 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    9b10:	ab03      	add	r3, sp, #12
    9b12:	0172      	lsls	r2, r6, #5
    9b14:	781c      	ldrb	r4, [r3, #0]
    9b16:	2120      	movs	r1, #32
    9b18:	438c      	bics	r4, r1
    9b1a:	4314      	orrs	r4, r2
    9b1c:	701c      	strb	r4, [r3, #0]
    9b1e:	b2e4      	uxtb	r4, r4
    9b20:	0723      	lsls	r3, r4, #28
    9b22:	d439      	bmi.n	9b98 <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    9b24:	ab10      	add	r3, sp, #64	; 0x40
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	9a01      	ldr	r2, [sp, #4]
    9b2a:	18d7      	adds	r7, r2, r3
    9b2c:	4ba3      	ldr	r3, [pc, #652]	; (9dbc <MiMAC_SendPacket+0x368>)
    9b2e:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    9b30:	4ba2      	ldr	r3, [pc, #648]	; (9dbc <MiMAC_SendPacket+0x368>)
    9b32:	464a      	mov	r2, r9
    9b34:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9b36:	43e3      	mvns	r3, r4
    9b38:	079b      	lsls	r3, r3, #30
    9b3a:	d040      	beq.n	9bbe <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9b3c:	4643      	mov	r3, r8
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d05f      	beq.n	9c02 <MiMAC_SendPacket+0x1ae>
    9b42:	2d00      	cmp	r5, #0
    9b44:	d045      	beq.n	9bd2 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    9b46:	2288      	movs	r2, #136	; 0x88
    9b48:	4b9c      	ldr	r3, [pc, #624]	; (9dbc <MiMAC_SendPacket+0x368>)
    9b4a:	709a      	strb	r2, [r3, #2]
    9b4c:	e044      	b.n	9bd8 <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    9b4e:	2203      	movs	r2, #3
    9b50:	4691      	mov	r9, r2
    9b52:	e7b7      	b.n	9ac4 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9b54:	489a      	ldr	r0, [pc, #616]	; (9dc0 <MiMAC_SendPacket+0x36c>)
    9b56:	4282      	cmp	r2, r0
    9b58:	d007      	beq.n	9b6a <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    9b5a:	2240      	movs	r2, #64	; 0x40
    9b5c:	4649      	mov	r1, r9
    9b5e:	4311      	orrs	r1, r2
    9b60:	4689      	mov	r9, r1
        IntraPAN = true;
    9b62:	3a3f      	subs	r2, #63	; 0x3f
    9b64:	4693      	mov	fp, r2
        headerLength = 5;
    9b66:	3204      	adds	r2, #4
        IntraPAN = true;
    9b68:	e7b5      	b.n	9ad6 <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    9b6a:	2200      	movs	r2, #0
    9b6c:	4693      	mov	fp, r2
        headerLength = 7;
    9b6e:	3207      	adds	r2, #7
    9b70:	e7b1      	b.n	9ad6 <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9b72:	3708      	adds	r7, #8
    9b74:	b2fa      	uxtb	r2, r7
    9b76:	9201      	str	r2, [sp, #4]
    9b78:	e7b9      	b.n	9aee <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    9b7a:	3a04      	subs	r2, #4
    9b7c:	4649      	mov	r1, r9
    9b7e:	4311      	orrs	r1, r2
    9b80:	4689      	mov	r9, r1
    9b82:	e7b8      	b.n	9af6 <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9b84:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    9b86:	2600      	movs	r6, #0
        IntraPAN = false;
    9b88:	2300      	movs	r3, #0
    9b8a:	469b      	mov	fp, r3
        frameControl = 0x00;
    9b8c:	4699      	mov	r9, r3
        headerLength = 7;
    9b8e:	3307      	adds	r3, #7
    9b90:	9301      	str	r3, [sp, #4]
    9b92:	e7b2      	b.n	9afa <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9b94:	2600      	movs	r6, #0
    9b96:	e7bb      	b.n	9b10 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    9b98:	2308      	movs	r3, #8
    9b9a:	464a      	mov	r2, r9
    9b9c:	431a      	orrs	r2, r3
    9b9e:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9ba0:	4b88      	ldr	r3, [pc, #544]	; (9dc4 <MiMAC_SendPacket+0x370>)
    9ba2:	681a      	ldr	r2, [r3, #0]
    9ba4:	464b      	mov	r3, r9
    9ba6:	a910      	add	r1, sp, #64	; 0x40
    9ba8:	9800      	ldr	r0, [sp, #0]
    9baa:	4f87      	ldr	r7, [pc, #540]	; (9dc8 <MiMAC_SendPacket+0x374>)
    9bac:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9bae:	ab10      	add	r3, sp, #64	; 0x40
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	3309      	adds	r3, #9
    9bb4:	9a01      	ldr	r2, [sp, #4]
    9bb6:	18d7      	adds	r7, r2, r3
    9bb8:	4b80      	ldr	r3, [pc, #512]	; (9dbc <MiMAC_SendPacket+0x368>)
    9bba:	701f      	strb	r7, [r3, #0]
    9bbc:	e7b8      	b.n	9b30 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9bbe:	4b7f      	ldr	r3, [pc, #508]	; (9dbc <MiMAC_SendPacket+0x368>)
    9bc0:	2280      	movs	r2, #128	; 0x80
    9bc2:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9bc4:	4981      	ldr	r1, [pc, #516]	; (9dcc <MiMAC_SendPacket+0x378>)
    9bc6:	780a      	ldrb	r2, [r1, #0]
    9bc8:	1c50      	adds	r0, r2, #1
    9bca:	7008      	strb	r0, [r1, #0]
    9bcc:	70da      	strb	r2, [r3, #3]
    9bce:	2304      	movs	r3, #4
    9bd0:	e03e      	b.n	9c50 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    9bd2:	22c8      	movs	r2, #200	; 0xc8
    9bd4:	4b79      	ldr	r3, [pc, #484]	; (9dbc <MiMAC_SendPacket+0x368>)
    9bd6:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    9bd8:	4b7c      	ldr	r3, [pc, #496]	; (9dcc <MiMAC_SendPacket+0x378>)
    9bda:	781a      	ldrb	r2, [r3, #0]
    9bdc:	1c51      	adds	r1, r2, #1
    9bde:	7019      	strb	r1, [r3, #0]
    9be0:	4b76      	ldr	r3, [pc, #472]	; (9dbc <MiMAC_SendPacket+0x368>)
    9be2:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    9be4:	aa03      	add	r2, sp, #12
    9be6:	7a91      	ldrb	r1, [r2, #10]
    9be8:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9bea:	7ad2      	ldrb	r2, [r2, #11]
    9bec:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    9bee:	0763      	lsls	r3, r4, #29
    9bf0:	d429      	bmi.n	9c46 <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    9bf2:	9902      	ldr	r1, [sp, #8]
    9bf4:	780a      	ldrb	r2, [r1, #0]
    9bf6:	4b71      	ldr	r3, [pc, #452]	; (9dbc <MiMAC_SendPacket+0x368>)
    9bf8:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9bfa:	784a      	ldrb	r2, [r1, #1]
    9bfc:	71da      	strb	r2, [r3, #7]
    9bfe:	2308      	movs	r3, #8
    9c00:	e026      	b.n	9c50 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    9c02:	2d00      	cmp	r5, #0
    9c04:	d00f      	beq.n	9c26 <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    9c06:	4b6d      	ldr	r3, [pc, #436]	; (9dbc <MiMAC_SendPacket+0x368>)
    9c08:	228c      	movs	r2, #140	; 0x8c
    9c0a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9c0c:	496f      	ldr	r1, [pc, #444]	; (9dcc <MiMAC_SendPacket+0x378>)
    9c0e:	780a      	ldrb	r2, [r1, #0]
    9c10:	1c50      	adds	r0, r2, #1
    9c12:	7008      	strb	r0, [r1, #0]
    9c14:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9c16:	aa03      	add	r2, sp, #12
    9c18:	7a91      	ldrb	r1, [r2, #10]
    9c1a:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9c1c:	7ad2      	ldrb	r2, [r2, #11]
    9c1e:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9c20:	0763      	lsls	r3, r4, #29
    9c22:	d410      	bmi.n	9c46 <MiMAC_SendPacket+0x1f2>
    9c24:	e09f      	b.n	9d66 <MiMAC_SendPacket+0x312>
			packet[loc++] = 0xCC;
    9c26:	4b65      	ldr	r3, [pc, #404]	; (9dbc <MiMAC_SendPacket+0x368>)
    9c28:	22cc      	movs	r2, #204	; 0xcc
    9c2a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9c2c:	4967      	ldr	r1, [pc, #412]	; (9dcc <MiMAC_SendPacket+0x378>)
    9c2e:	780a      	ldrb	r2, [r1, #0]
    9c30:	1c50      	adds	r0, r2, #1
    9c32:	7008      	strb	r0, [r1, #0]
    9c34:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9c36:	aa03      	add	r2, sp, #12
    9c38:	7a91      	ldrb	r1, [r2, #10]
    9c3a:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9c3c:	7ad2      	ldrb	r2, [r2, #11]
    9c3e:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9c40:	0763      	lsls	r3, r4, #29
    9c42:	d400      	bmi.n	9c46 <MiMAC_SendPacket+0x1f2>
    9c44:	e08b      	b.n	9d5e <MiMAC_SendPacket+0x30a>
			packet[loc++] = 0xFF;
    9c46:	4b5d      	ldr	r3, [pc, #372]	; (9dbc <MiMAC_SendPacket+0x368>)
    9c48:	22ff      	movs	r2, #255	; 0xff
    9c4a:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9c4c:	71da      	strb	r2, [r3, #7]
    9c4e:	2308      	movs	r3, #8
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    9c50:	a903      	add	r1, sp, #12
    9c52:	0170      	lsls	r0, r6, #5
    9c54:	780a      	ldrb	r2, [r1, #0]
    9c56:	2420      	movs	r4, #32
    9c58:	43a2      	bics	r2, r4
    9c5a:	4302      	orrs	r2, r0
    9c5c:	700a      	strb	r2, [r1, #0]
    9c5e:	0692      	lsls	r2, r2, #26
    9c60:	d400      	bmi.n	9c64 <MiMAC_SendPacket+0x210>
    9c62:	e08b      	b.n	9d7c <MiMAC_SendPacket+0x328>
	{
	 	AckSeqNum = IEEESeqNum-1;
    9c64:	4a59      	ldr	r2, [pc, #356]	; (9dcc <MiMAC_SendPacket+0x378>)
    9c66:	7812      	ldrb	r2, [r2, #0]
    9c68:	3a01      	subs	r2, #1
    9c6a:	4959      	ldr	r1, [pc, #356]	; (9dd0 <MiMAC_SendPacket+0x37c>)
    9c6c:	700a      	strb	r2, [r1, #0]
		 AckReqData = 1;
    9c6e:	2101      	movs	r1, #1
    9c70:	4a58      	ldr	r2, [pc, #352]	; (9dd4 <MiMAC_SendPacket+0x380>)
    9c72:	7011      	strb	r1, [r2, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9c74:	465a      	mov	r2, fp
    9c76:	2a00      	cmp	r2, #0
    9c78:	d109      	bne.n	9c8e <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    9c7a:	1c5a      	adds	r2, r3, #1
    9c7c:	b2d2      	uxtb	r2, r2
    9c7e:	494f      	ldr	r1, [pc, #316]	; (9dbc <MiMAC_SendPacket+0x368>)
    9c80:	484d      	ldr	r0, [pc, #308]	; (9db8 <MiMAC_SendPacket+0x364>)
    9c82:	7804      	ldrb	r4, [r0, #0]
    9c84:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    9c86:	3302      	adds	r3, #2
    9c88:	b2db      	uxtb	r3, r3
    9c8a:	7840      	ldrb	r0, [r0, #1]
    9c8c:	5488      	strb	r0, [r1, r2]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9c8e:	2d00      	cmp	r5, #0
    9c90:	d100      	bne.n	9c94 <MiMAC_SendPacket+0x240>
    9c92:	e077      	b.n	9d84 <MiMAC_SendPacket+0x330>
    {
		packet[loc++] = myNetworkAddress.v[0];
    9c94:	4a49      	ldr	r2, [pc, #292]	; (9dbc <MiMAC_SendPacket+0x368>)
    9c96:	4950      	ldr	r1, [pc, #320]	; (9dd8 <MiMAC_SendPacket+0x384>)
    9c98:	7808      	ldrb	r0, [r1, #0]
    9c9a:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    9c9c:	1c9c      	adds	r4, r3, #2
    9c9e:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    9ca0:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    9ca2:	b2db      	uxtb	r3, r3
    9ca4:	7849      	ldrb	r1, [r1, #1]
    9ca6:	54d1      	strb	r1, [r2, r3]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    9ca8:	ab03      	add	r3, sp, #12
    9caa:	0172      	lsls	r2, r6, #5
    9cac:	781e      	ldrb	r6, [r3, #0]
    9cae:	2120      	movs	r1, #32
    9cb0:	438e      	bics	r6, r1
    9cb2:	4316      	orrs	r6, r2
    9cb4:	701e      	strb	r6, [r3, #0]
    9cb6:	0733      	lsls	r3, r6, #28
    9cb8:	d51b      	bpl.n	9cf2 <MiMAC_SendPacket+0x29e>
    9cba:	0022      	movs	r2, r4
    9cbc:	2300      	movs	r3, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    9cbe:	4e3f      	ldr	r6, [pc, #252]	; (9dbc <MiMAC_SendPacket+0x368>)
    9cc0:	4d40      	ldr	r5, [pc, #256]	; (9dc4 <MiMAC_SendPacket+0x370>)
    9cc2:	1c51      	adds	r1, r2, #1
    9cc4:	5ce8      	ldrb	r0, [r5, r3]
    9cc6:	54b0      	strb	r0, [r6, r2]
    9cc8:	3301      	adds	r3, #1
    9cca:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    9ccc:	2b04      	cmp	r3, #4
    9cce:	d1f8      	bne.n	9cc2 <MiMAC_SendPacket+0x26e>
    9cd0:	1d25      	adds	r5, r4, #4
    9cd2:	b2ed      	uxtb	r5, r5
	}
	OutgoingFrameCounter.Val++;
    9cd4:	4a3b      	ldr	r2, [pc, #236]	; (9dc4 <MiMAC_SendPacket+0x370>)
    9cd6:	6813      	ldr	r3, [r2, #0]
    9cd8:	3301      	adds	r3, #1
    9cda:	6013      	str	r3, [r2, #0]

	#if defined(ENABLE_NETWORK_FREEZER)
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    9cdc:	b2db      	uxtb	r3, r3
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d102      	bne.n	9ce8 <MiMAC_SendPacket+0x294>
    9ce2:	7853      	ldrb	r3, [r2, #1]
    9ce4:	079b      	lsls	r3, r3, #30
    9ce6:	d05c      	beq.n	9da2 <MiMAC_SendPacket+0x34e>
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    9ce8:	3405      	adds	r4, #5
    9cea:	b2e4      	uxtb	r4, r4
    9cec:	2200      	movs	r2, #0
    9cee:	4b33      	ldr	r3, [pc, #204]	; (9dbc <MiMAC_SendPacket+0x368>)
    9cf0:	555a      	strb	r2, [r3, r5]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9cf2:	ab10      	add	r3, sp, #64	; 0x40
    9cf4:	781e      	ldrb	r6, [r3, #0]
    9cf6:	2e00      	cmp	r6, #0
    9cf8:	d057      	beq.n	9daa <MiMAC_SendPacket+0x356>
    9cfa:	9b00      	ldr	r3, [sp, #0]
    9cfc:	1932      	adds	r2, r6, r4
    9cfe:	b2d2      	uxtb	r2, r2
    {
	    packet[loc++] = MACPayload[i];
    9d00:	4d2e      	ldr	r5, [pc, #184]	; (9dbc <MiMAC_SendPacket+0x368>)
    9d02:	1c61      	adds	r1, r4, #1
    9d04:	7818      	ldrb	r0, [r3, #0]
    9d06:	5528      	strb	r0, [r5, r4]
    9d08:	3301      	adds	r3, #1
    9d0a:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9d0c:	4294      	cmp	r4, r2
    9d0e:	d1f8      	bne.n	9d02 <MiMAC_SendPacket+0x2ae>
    }
	packet[loc++] = final_mic_value[0];
    9d10:	482a      	ldr	r0, [pc, #168]	; (9dbc <MiMAC_SendPacket+0x368>)
    9d12:	4b32      	ldr	r3, [pc, #200]	; (9ddc <MiMAC_SendPacket+0x388>)
    9d14:	7819      	ldrb	r1, [r3, #0]
    9d16:	5481      	strb	r1, [r0, r2]
    9d18:	1c51      	adds	r1, r2, #1
	packet[loc++] = final_mic_value[1];
    9d1a:	b2c9      	uxtb	r1, r1
    9d1c:	785c      	ldrb	r4, [r3, #1]
    9d1e:	5444      	strb	r4, [r0, r1]
    9d20:	1c91      	adds	r1, r2, #2
	packet[loc++] = final_mic_value[2];
    9d22:	b2c9      	uxtb	r1, r1
    9d24:	789c      	ldrb	r4, [r3, #2]
    9d26:	5444      	strb	r4, [r0, r1]
    9d28:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    9d2a:	b2d2      	uxtb	r2, r2
    9d2c:	78db      	ldrb	r3, [r3, #3]
    9d2e:	5483      	strb	r3, [r0, r2]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    9d30:	4b2b      	ldr	r3, [pc, #172]	; (9de0 <MiMAC_SendPacket+0x38c>)
    9d32:	9a00      	ldr	r2, [sp, #0]
    9d34:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    9d36:	4b2b      	ldr	r3, [pc, #172]	; (9de4 <MiMAC_SendPacket+0x390>)
    9d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d3a:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    9d3c:	4b2a      	ldr	r3, [pc, #168]	; (9de8 <MiMAC_SendPacket+0x394>)
    9d3e:	4652      	mov	r2, sl
    9d40:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    9d42:	4b2a      	ldr	r3, [pc, #168]	; (9dec <MiMAC_SendPacket+0x398>)
    9d44:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    9d46:	4b2a      	ldr	r3, [pc, #168]	; (9df0 <MiMAC_SendPacket+0x39c>)
    9d48:	4798      	blx	r3
    9d4a:	1e43      	subs	r3, r0, #1
    9d4c:	4198      	sbcs	r0, r3
    9d4e:	b2c0      	uxtb	r0, r0
}
    9d50:	b007      	add	sp, #28
    9d52:	bc3c      	pop	{r2, r3, r4, r5}
    9d54:	4690      	mov	r8, r2
    9d56:	4699      	mov	r9, r3
    9d58:	46a2      	mov	sl, r4
    9d5a:	46ab      	mov	fp, r5
    9d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    9d5e:	4643      	mov	r3, r8
    9d60:	2b00      	cmp	r3, #0
    9d62:	d000      	beq.n	9d66 <MiMAC_SendPacket+0x312>
    9d64:	e745      	b.n	9bf2 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    9d66:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9d68:	4814      	ldr	r0, [pc, #80]	; (9dbc <MiMAC_SendPacket+0x368>)
    9d6a:	9c02      	ldr	r4, [sp, #8]
    9d6c:	5ce1      	ldrb	r1, [r4, r3]
    9d6e:	181a      	adds	r2, r3, r0
    9d70:	7191      	strb	r1, [r2, #6]
    9d72:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    9d74:	2b08      	cmp	r3, #8
    9d76:	d1f9      	bne.n	9d6c <MiMAC_SendPacket+0x318>
					packet[loc++] = transParam.DestAddress[i];
    9d78:	3306      	adds	r3, #6
    9d7a:	e769      	b.n	9c50 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9d7c:	2100      	movs	r1, #0
    9d7e:	4a15      	ldr	r2, [pc, #84]	; (9dd4 <MiMAC_SendPacket+0x380>)
    9d80:	7011      	strb	r1, [r2, #0]
    9d82:	e777      	b.n	9c74 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    9d84:	4a1b      	ldr	r2, [pc, #108]	; (9df4 <MiMAC_SendPacket+0x3a0>)
    9d86:	6852      	ldr	r2, [r2, #4]
    9d88:	0018      	movs	r0, r3
    9d8a:	3008      	adds	r0, #8
    9d8c:	b2c0      	uxtb	r0, r0
    9d8e:	4d0b      	ldr	r5, [pc, #44]	; (9dbc <MiMAC_SendPacket+0x368>)
    9d90:	1c5c      	adds	r4, r3, #1
    9d92:	b2e4      	uxtb	r4, r4
    9d94:	7811      	ldrb	r1, [r2, #0]
    9d96:	54e9      	strb	r1, [r5, r3]
    9d98:	3201      	adds	r2, #1
    9d9a:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    9d9c:	42a0      	cmp	r0, r4
    9d9e:	d1f7      	bne.n	9d90 <MiMAC_SendPacket+0x33c>
    9da0:	e782      	b.n	9ca8 <MiMAC_SendPacket+0x254>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9da2:	2001      	movs	r0, #1
    9da4:	4b14      	ldr	r3, [pc, #80]	; (9df8 <MiMAC_SendPacket+0x3a4>)
    9da6:	4798      	blx	r3
    9da8:	e79e      	b.n	9ce8 <MiMAC_SendPacket+0x294>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9daa:	0022      	movs	r2, r4
    9dac:	e7b0      	b.n	9d10 <MiMAC_SendPacket+0x2bc>
    9dae:	46c0      	nop			; (mov r8, r8)
    9db0:	2000028e 	.word	0x2000028e
    9db4:	200020f8 	.word	0x200020f8
    9db8:	2000214c 	.word	0x2000214c
    9dbc:	20001fd8 	.word	0x20001fd8
    9dc0:	0000ffff 	.word	0x0000ffff
    9dc4:	20002128 	.word	0x20002128
    9dc8:	000096e5 	.word	0x000096e5
    9dcc:	20001fd5 	.word	0x20001fd5
    9dd0:	20001fd4 	.word	0x20001fd4
    9dd4:	2000028b 	.word	0x2000028b
    9dd8:	200020d8 	.word	0x200020d8
    9ddc:	20002114 	.word	0x20002114
    9de0:	20000298 	.word	0x20000298
    9de4:	20000290 	.word	0x20000290
    9de8:	20000294 	.word	0x20000294
    9dec:	2000028d 	.word	0x2000028d
    9df0:	0000a985 	.word	0x0000a985
    9df4:	200020e0 	.word	0x200020e0
    9df8:	000092e9 	.word	0x000092e9

00009dfc <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    9dfc:	4b04      	ldr	r3, [pc, #16]	; (9e10 <MiMAC_DiscardPacket+0x14>)
    9dfe:	781b      	ldrb	r3, [r3, #0]
    9e00:	2b03      	cmp	r3, #3
    9e02:	d804      	bhi.n	9e0e <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    9e04:	021a      	lsls	r2, r3, #8
    9e06:	18d3      	adds	r3, r2, r3
    9e08:	2100      	movs	r1, #0
    9e0a:	4a02      	ldr	r2, [pc, #8]	; (9e14 <MiMAC_DiscardPacket+0x18>)
    9e0c:	5499      	strb	r1, [r3, r2]
	}
}
    9e0e:	4770      	bx	lr
    9e10:	20000017 	.word	0x20000017
    9e14:	20002258 	.word	0x20002258

00009e18 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    9e18:	2200      	movs	r2, #0
    9e1a:	4b04      	ldr	r3, [pc, #16]	; (9e2c <PHY_DataConf+0x14>)
    9e1c:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    9e1e:	4b04      	ldr	r3, [pc, #16]	; (9e30 <PHY_DataConf+0x18>)
    9e20:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    9e22:	3201      	adds	r2, #1
    9e24:	4b03      	ldr	r3, [pc, #12]	; (9e34 <PHY_DataConf+0x1c>)
    9e26:	701a      	strb	r2, [r3, #0]
}
    9e28:	4770      	bx	lr
    9e2a:	46c0      	nop			; (mov r8, r8)
    9e2c:	2000028c 	.word	0x2000028c
    9e30:	20002124 	.word	0x20002124
    9e34:	2000028e 	.word	0x2000028e

00009e38 <MiMAC_RetryPacket>:
{
    9e38:	b510      	push	{r4, lr}
	DataRetryCount++;
    9e3a:	4a0b      	ldr	r2, [pc, #44]	; (9e68 <MiMAC_RetryPacket+0x30>)
    9e3c:	7813      	ldrb	r3, [r2, #0]
    9e3e:	3301      	adds	r3, #1
    9e40:	b2db      	uxtb	r3, r3
    9e42:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    9e44:	2b02      	cmp	r3, #2
    9e46:	d904      	bls.n	9e52 <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    9e48:	2003      	movs	r0, #3
    9e4a:	4b08      	ldr	r3, [pc, #32]	; (9e6c <MiMAC_RetryPacket+0x34>)
    9e4c:	4798      	blx	r3
	bool status = false;
    9e4e:	2000      	movs	r0, #0
}
    9e50:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    9e52:	2201      	movs	r2, #1
    9e54:	4b06      	ldr	r3, [pc, #24]	; (9e70 <MiMAC_RetryPacket+0x38>)
    9e56:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
<<<<<<< Updated upstream
    9ee4:	4806      	ldr	r0, [pc, #24]	; (9f00 <MiMAC_RetryPacket+0x3c>)
    9ee6:	4b07      	ldr	r3, [pc, #28]	; (9f04 <MiMAC_RetryPacket+0x40>)
=======
    9a98:	2301      	movs	r3, #1
    9a9a:	6023      	str	r3, [r4, #0]
    9a9c:	2001      	movs	r0, #1
    9a9e:	b002      	add	sp, #8
    9aa0:	bd70      	pop	{r4, r5, r6, pc}
    9aa2:	2001      	movs	r0, #1
    9aa4:	4b11      	ldr	r3, [pc, #68]	; (9aec <MiMAC_Init+0xa8>)
    9aa6:	4798      	blx	r3
    9aa8:	4a0e      	ldr	r2, [pc, #56]	; (9ae4 <MiMAC_Init+0xa0>)
    9aaa:	6813      	ldr	r3, [r2, #0]
    9aac:	2180      	movs	r1, #128	; 0x80
    9aae:	00c9      	lsls	r1, r1, #3
    9ab0:	468c      	mov	ip, r1
    9ab2:	4463      	add	r3, ip
    9ab4:	6013      	str	r3, [r2, #0]
    9ab6:	2001      	movs	r0, #1
    9ab8:	4b0b      	ldr	r3, [pc, #44]	; (9ae8 <MiMAC_Init+0xa4>)
    9aba:	4798      	blx	r3
    9abc:	e7ee      	b.n	9a9c <MiMAC_Init+0x58>
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	0000a8dd 	.word	0x0000a8dd
    9ac4:	200020e0 	.word	0x200020e0
    9ac8:	0000aa91 	.word	0x0000aa91
    9acc:	0000a911 	.word	0x0000a911
    9ad0:	20001fd5 	.word	0x20001fd5
    9ad4:	0000aab5 	.word	0x0000aab5
    9ad8:	20002258 	.word	0x20002258
    9adc:	00000202 	.word	0x00000202
    9ae0:	00000303 	.word	0x00000303
    9ae4:	20002128 	.word	0x20002128
    9ae8:	00009385 	.word	0x00009385
    9aec:	000092ad 	.word	0x000092ad

00009af0 <MiMAC_SendPacket>:
    9af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9af2:	46de      	mov	lr, fp
    9af4:	4657      	mov	r7, sl
    9af6:	464e      	mov	r6, r9
    9af8:	4645      	mov	r5, r8
    9afa:	b5e0      	push	{r5, r6, r7, lr}
    9afc:	b087      	sub	sp, #28
    9afe:	af03      	add	r7, sp, #12
    9b00:	1c04      	adds	r4, r0, #0
    9b02:	9003      	str	r0, [sp, #12]
    9b04:	0008      	movs	r0, r1
    9b06:	9104      	str	r1, [sp, #16]
    9b08:	0015      	movs	r5, r2
    9b0a:	0a2d      	lsrs	r5, r5, #8
    9b0c:	9205      	str	r2, [sp, #20]
    9b0e:	9300      	str	r3, [sp, #0]
    9b10:	ab11      	add	r3, sp, #68	; 0x44
    9b12:	781b      	ldrb	r3, [r3, #0]
    9b14:	469a      	mov	sl, r3
    9b16:	b2e4      	uxtb	r4, r4
    9b18:	06a6      	lsls	r6, r4, #26
    9b1a:	0ff6      	lsrs	r6, r6, #31
    9b1c:	9002      	str	r0, [sp, #8]
    9b1e:	b2d3      	uxtb	r3, r2
    9b20:	469c      	mov	ip, r3
    9b22:	b2ed      	uxtb	r5, r5
    9b24:	2200      	movs	r2, #0
    9b26:	4bc9      	ldr	r3, [pc, #804]	; (9e4c <MiMAC_SendPacket+0x35c>)
    9b28:	701a      	strb	r2, [r3, #0]
    9b2a:	4bc9      	ldr	r3, [pc, #804]	; (9e50 <MiMAC_SendPacket+0x360>)
    9b2c:	cf07      	ldmia	r7!, {r0, r1, r2}
    9b2e:	c307      	stmia	r3!, {r0, r1, r2}
    9b30:	0763      	lsls	r3, r4, #29
    9b32:	d501      	bpl.n	9b38 <MiMAC_SendPacket+0x48>
    9b34:	2301      	movs	r3, #1
    9b36:	469c      	mov	ip, r3
    9b38:	2308      	movs	r3, #8
    9b3a:	4023      	ands	r3, r4
    9b3c:	001a      	movs	r2, r3
    9b3e:	4253      	negs	r3, r2
    9b40:	4153      	adcs	r3, r2
    9b42:	425b      	negs	r3, r3
    9b44:	401d      	ands	r5, r3
    9b46:	2303      	movs	r3, #3
    9b48:	4023      	ands	r3, r4
    9b4a:	2b01      	cmp	r3, #1
    9b4c:	d04d      	beq.n	9bea <MiMAC_SendPacket+0xfa>
    9b4e:	2201      	movs	r2, #1
    9b50:	4691      	mov	r9, r2
    9b52:	2b00      	cmp	r3, #0
    9b54:	d004      	beq.n	9b60 <MiMAC_SendPacket+0x70>
    9b56:	1e9a      	subs	r2, r3, #2
    9b58:	4251      	negs	r1, r2
    9b5a:	4151      	adcs	r1, r2
    9b5c:	004a      	lsls	r2, r1, #1
    9b5e:	4691      	mov	r9, r2
    9b60:	aa03      	add	r2, sp, #12
    9b62:	8952      	ldrh	r2, [r2, #10]
    9b64:	48bb      	ldr	r0, [pc, #748]	; (9e54 <MiMAC_SendPacket+0x364>)
    9b66:	8800      	ldrh	r0, [r0, #0]
    9b68:	4290      	cmp	r0, r2
    9b6a:	d041      	beq.n	9bf0 <MiMAC_SendPacket+0x100>
    9b6c:	2200      	movs	r2, #0
    9b6e:	4693      	mov	fp, r2
    9b70:	3207      	adds	r2, #7
    9b72:	46e0      	mov	r8, ip
    9b74:	0017      	movs	r7, r2
    9b76:	3708      	adds	r7, #8
    9b78:	4661      	mov	r1, ip
    9b7a:	2900      	cmp	r1, #0
    9b7c:	d000      	beq.n	9b80 <MiMAC_SendPacket+0x90>
    9b7e:	1c97      	adds	r7, r2, #2
    9b80:	2d00      	cmp	r5, #0
    9b82:	d044      	beq.n	9c0e <MiMAC_SendPacket+0x11e>
    9b84:	3702      	adds	r7, #2
    9b86:	b2fa      	uxtb	r2, r7
    9b88:	9201      	str	r2, [sp, #4]
    9b8a:	2224      	movs	r2, #36	; 0x24
    9b8c:	4014      	ands	r4, r2
    9b8e:	2c20      	cmp	r4, #32
    9b90:	d041      	beq.n	9c16 <MiMAC_SendPacket+0x126>
    9b92:	2b03      	cmp	r3, #3
    9b94:	d044      	beq.n	9c20 <MiMAC_SendPacket+0x130>
    9b96:	aa03      	add	r2, sp, #12
    9b98:	0171      	lsls	r1, r6, #5
    9b9a:	7813      	ldrb	r3, [r2, #0]
    9b9c:	2020      	movs	r0, #32
    9b9e:	4383      	bics	r3, r0
    9ba0:	430b      	orrs	r3, r1
    9ba2:	7013      	strb	r3, [r2, #0]
    9ba4:	2203      	movs	r2, #3
    9ba6:	4013      	ands	r3, r2
    9ba8:	2b01      	cmp	r3, #1
    9baa:	d041      	beq.n	9c30 <MiMAC_SendPacket+0x140>
    9bac:	ab03      	add	r3, sp, #12
    9bae:	0172      	lsls	r2, r6, #5
    9bb0:	781c      	ldrb	r4, [r3, #0]
    9bb2:	2120      	movs	r1, #32
    9bb4:	438c      	bics	r4, r1
    9bb6:	4314      	orrs	r4, r2
    9bb8:	701c      	strb	r4, [r3, #0]
    9bba:	b2e4      	uxtb	r4, r4
    9bbc:	0723      	lsls	r3, r4, #28
    9bbe:	d439      	bmi.n	9c34 <MiMAC_SendPacket+0x144>
    9bc0:	ab10      	add	r3, sp, #64	; 0x40
    9bc2:	781b      	ldrb	r3, [r3, #0]
    9bc4:	9a01      	ldr	r2, [sp, #4]
    9bc6:	18d7      	adds	r7, r2, r3
    9bc8:	4ba3      	ldr	r3, [pc, #652]	; (9e58 <MiMAC_SendPacket+0x368>)
    9bca:	701f      	strb	r7, [r3, #0]
    9bcc:	4ba2      	ldr	r3, [pc, #648]	; (9e58 <MiMAC_SendPacket+0x368>)
    9bce:	464a      	mov	r2, r9
    9bd0:	705a      	strb	r2, [r3, #1]
    9bd2:	43e3      	mvns	r3, r4
    9bd4:	079b      	lsls	r3, r3, #30
    9bd6:	d040      	beq.n	9c5a <MiMAC_SendPacket+0x16a>
    9bd8:	4643      	mov	r3, r8
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d05f      	beq.n	9c9e <MiMAC_SendPacket+0x1ae>
    9bde:	2d00      	cmp	r5, #0
    9be0:	d045      	beq.n	9c6e <MiMAC_SendPacket+0x17e>
    9be2:	2288      	movs	r2, #136	; 0x88
    9be4:	4b9c      	ldr	r3, [pc, #624]	; (9e58 <MiMAC_SendPacket+0x368>)
    9be6:	709a      	strb	r2, [r3, #2]
    9be8:	e044      	b.n	9c74 <MiMAC_SendPacket+0x184>
    9bea:	2203      	movs	r2, #3
    9bec:	4691      	mov	r9, r2
    9bee:	e7b7      	b.n	9b60 <MiMAC_SendPacket+0x70>
    9bf0:	489a      	ldr	r0, [pc, #616]	; (9e5c <MiMAC_SendPacket+0x36c>)
    9bf2:	4282      	cmp	r2, r0
    9bf4:	d007      	beq.n	9c06 <MiMAC_SendPacket+0x116>
    9bf6:	2240      	movs	r2, #64	; 0x40
    9bf8:	4649      	mov	r1, r9
    9bfa:	4311      	orrs	r1, r2
    9bfc:	4689      	mov	r9, r1
    9bfe:	3a3f      	subs	r2, #63	; 0x3f
    9c00:	4693      	mov	fp, r2
    9c02:	3204      	adds	r2, #4
    9c04:	e7b5      	b.n	9b72 <MiMAC_SendPacket+0x82>
    9c06:	2200      	movs	r2, #0
    9c08:	4693      	mov	fp, r2
    9c0a:	3207      	adds	r2, #7
    9c0c:	e7b1      	b.n	9b72 <MiMAC_SendPacket+0x82>
    9c0e:	3708      	adds	r7, #8
    9c10:	b2fa      	uxtb	r2, r7
    9c12:	9201      	str	r2, [sp, #4]
    9c14:	e7b9      	b.n	9b8a <MiMAC_SendPacket+0x9a>
    9c16:	3a04      	subs	r2, #4
    9c18:	4649      	mov	r1, r9
    9c1a:	4311      	orrs	r1, r2
    9c1c:	4689      	mov	r9, r1
    9c1e:	e7b8      	b.n	9b92 <MiMAC_SendPacket+0xa2>
    9c20:	2501      	movs	r5, #1
    9c22:	2600      	movs	r6, #0
    9c24:	2300      	movs	r3, #0
    9c26:	469b      	mov	fp, r3
    9c28:	4699      	mov	r9, r3
    9c2a:	3307      	adds	r3, #7
    9c2c:	9301      	str	r3, [sp, #4]
    9c2e:	e7b2      	b.n	9b96 <MiMAC_SendPacket+0xa6>
    9c30:	2600      	movs	r6, #0
    9c32:	e7bb      	b.n	9bac <MiMAC_SendPacket+0xbc>
    9c34:	2308      	movs	r3, #8
    9c36:	464a      	mov	r2, r9
    9c38:	431a      	orrs	r2, r3
    9c3a:	4691      	mov	r9, r2
    9c3c:	4b88      	ldr	r3, [pc, #544]	; (9e60 <MiMAC_SendPacket+0x370>)
    9c3e:	681a      	ldr	r2, [r3, #0]
    9c40:	464b      	mov	r3, r9
    9c42:	a910      	add	r1, sp, #64	; 0x40
    9c44:	9800      	ldr	r0, [sp, #0]
    9c46:	4f87      	ldr	r7, [pc, #540]	; (9e64 <MiMAC_SendPacket+0x374>)
    9c48:	47b8      	blx	r7
    9c4a:	ab10      	add	r3, sp, #64	; 0x40
    9c4c:	781b      	ldrb	r3, [r3, #0]
    9c4e:	3309      	adds	r3, #9
    9c50:	9a01      	ldr	r2, [sp, #4]
    9c52:	18d7      	adds	r7, r2, r3
    9c54:	4b80      	ldr	r3, [pc, #512]	; (9e58 <MiMAC_SendPacket+0x368>)
    9c56:	701f      	strb	r7, [r3, #0]
    9c58:	e7b8      	b.n	9bcc <MiMAC_SendPacket+0xdc>
    9c5a:	4b7f      	ldr	r3, [pc, #508]	; (9e58 <MiMAC_SendPacket+0x368>)
    9c5c:	2280      	movs	r2, #128	; 0x80
    9c5e:	709a      	strb	r2, [r3, #2]
    9c60:	4981      	ldr	r1, [pc, #516]	; (9e68 <MiMAC_SendPacket+0x378>)
    9c62:	780a      	ldrb	r2, [r1, #0]
    9c64:	1c50      	adds	r0, r2, #1
    9c66:	7008      	strb	r0, [r1, #0]
    9c68:	70da      	strb	r2, [r3, #3]
    9c6a:	2304      	movs	r3, #4
    9c6c:	e03e      	b.n	9cec <MiMAC_SendPacket+0x1fc>
    9c6e:	22c8      	movs	r2, #200	; 0xc8
    9c70:	4b79      	ldr	r3, [pc, #484]	; (9e58 <MiMAC_SendPacket+0x368>)
    9c72:	709a      	strb	r2, [r3, #2]
    9c74:	4b7c      	ldr	r3, [pc, #496]	; (9e68 <MiMAC_SendPacket+0x378>)
    9c76:	781a      	ldrb	r2, [r3, #0]
    9c78:	1c51      	adds	r1, r2, #1
    9c7a:	7019      	strb	r1, [r3, #0]
    9c7c:	4b76      	ldr	r3, [pc, #472]	; (9e58 <MiMAC_SendPacket+0x368>)
    9c7e:	70da      	strb	r2, [r3, #3]
    9c80:	aa03      	add	r2, sp, #12
    9c82:	7a91      	ldrb	r1, [r2, #10]
    9c84:	7119      	strb	r1, [r3, #4]
    9c86:	7ad2      	ldrb	r2, [r2, #11]
    9c88:	715a      	strb	r2, [r3, #5]
    9c8a:	0763      	lsls	r3, r4, #29
    9c8c:	d429      	bmi.n	9ce2 <MiMAC_SendPacket+0x1f2>
    9c8e:	9902      	ldr	r1, [sp, #8]
    9c90:	780a      	ldrb	r2, [r1, #0]
    9c92:	4b71      	ldr	r3, [pc, #452]	; (9e58 <MiMAC_SendPacket+0x368>)
    9c94:	719a      	strb	r2, [r3, #6]
    9c96:	784a      	ldrb	r2, [r1, #1]
    9c98:	71da      	strb	r2, [r3, #7]
    9c9a:	2308      	movs	r3, #8
    9c9c:	e026      	b.n	9cec <MiMAC_SendPacket+0x1fc>
    9c9e:	2d00      	cmp	r5, #0
    9ca0:	d00f      	beq.n	9cc2 <MiMAC_SendPacket+0x1d2>
    9ca2:	4b6d      	ldr	r3, [pc, #436]	; (9e58 <MiMAC_SendPacket+0x368>)
    9ca4:	228c      	movs	r2, #140	; 0x8c
    9ca6:	709a      	strb	r2, [r3, #2]
    9ca8:	496f      	ldr	r1, [pc, #444]	; (9e68 <MiMAC_SendPacket+0x378>)
    9caa:	780a      	ldrb	r2, [r1, #0]
    9cac:	1c50      	adds	r0, r2, #1
    9cae:	7008      	strb	r0, [r1, #0]
    9cb0:	70da      	strb	r2, [r3, #3]
    9cb2:	aa03      	add	r2, sp, #12
    9cb4:	7a91      	ldrb	r1, [r2, #10]
    9cb6:	7119      	strb	r1, [r3, #4]
    9cb8:	7ad2      	ldrb	r2, [r2, #11]
    9cba:	715a      	strb	r2, [r3, #5]
    9cbc:	0763      	lsls	r3, r4, #29
    9cbe:	d410      	bmi.n	9ce2 <MiMAC_SendPacket+0x1f2>
    9cc0:	e09f      	b.n	9e02 <MiMAC_SendPacket+0x312>
    9cc2:	4b65      	ldr	r3, [pc, #404]	; (9e58 <MiMAC_SendPacket+0x368>)
    9cc4:	22cc      	movs	r2, #204	; 0xcc
    9cc6:	709a      	strb	r2, [r3, #2]
    9cc8:	4967      	ldr	r1, [pc, #412]	; (9e68 <MiMAC_SendPacket+0x378>)
    9cca:	780a      	ldrb	r2, [r1, #0]
    9ccc:	1c50      	adds	r0, r2, #1
    9cce:	7008      	strb	r0, [r1, #0]
    9cd0:	70da      	strb	r2, [r3, #3]
    9cd2:	aa03      	add	r2, sp, #12
    9cd4:	7a91      	ldrb	r1, [r2, #10]
    9cd6:	7119      	strb	r1, [r3, #4]
    9cd8:	7ad2      	ldrb	r2, [r2, #11]
    9cda:	715a      	strb	r2, [r3, #5]
    9cdc:	0763      	lsls	r3, r4, #29
    9cde:	d400      	bmi.n	9ce2 <MiMAC_SendPacket+0x1f2>
    9ce0:	e08b      	b.n	9dfa <MiMAC_SendPacket+0x30a>
    9ce2:	4b5d      	ldr	r3, [pc, #372]	; (9e58 <MiMAC_SendPacket+0x368>)
    9ce4:	22ff      	movs	r2, #255	; 0xff
    9ce6:	719a      	strb	r2, [r3, #6]
    9ce8:	71da      	strb	r2, [r3, #7]
    9cea:	2308      	movs	r3, #8
    9cec:	a903      	add	r1, sp, #12
    9cee:	0170      	lsls	r0, r6, #5
    9cf0:	780a      	ldrb	r2, [r1, #0]
    9cf2:	2420      	movs	r4, #32
    9cf4:	43a2      	bics	r2, r4
    9cf6:	4302      	orrs	r2, r0
    9cf8:	700a      	strb	r2, [r1, #0]
    9cfa:	0692      	lsls	r2, r2, #26
    9cfc:	d400      	bmi.n	9d00 <MiMAC_SendPacket+0x210>
    9cfe:	e08b      	b.n	9e18 <MiMAC_SendPacket+0x328>
    9d00:	4a59      	ldr	r2, [pc, #356]	; (9e68 <MiMAC_SendPacket+0x378>)
    9d02:	7812      	ldrb	r2, [r2, #0]
    9d04:	3a01      	subs	r2, #1
    9d06:	4959      	ldr	r1, [pc, #356]	; (9e6c <MiMAC_SendPacket+0x37c>)
    9d08:	700a      	strb	r2, [r1, #0]
    9d0a:	2101      	movs	r1, #1
    9d0c:	4a58      	ldr	r2, [pc, #352]	; (9e70 <MiMAC_SendPacket+0x380>)
    9d0e:	7011      	strb	r1, [r2, #0]
    9d10:	465a      	mov	r2, fp
    9d12:	2a00      	cmp	r2, #0
    9d14:	d109      	bne.n	9d2a <MiMAC_SendPacket+0x23a>
    9d16:	1c5a      	adds	r2, r3, #1
    9d18:	b2d2      	uxtb	r2, r2
    9d1a:	494f      	ldr	r1, [pc, #316]	; (9e58 <MiMAC_SendPacket+0x368>)
    9d1c:	484d      	ldr	r0, [pc, #308]	; (9e54 <MiMAC_SendPacket+0x364>)
    9d1e:	7804      	ldrb	r4, [r0, #0]
    9d20:	54cc      	strb	r4, [r1, r3]
    9d22:	3302      	adds	r3, #2
    9d24:	b2db      	uxtb	r3, r3
    9d26:	7840      	ldrb	r0, [r0, #1]
    9d28:	5488      	strb	r0, [r1, r2]
    9d2a:	2d00      	cmp	r5, #0
    9d2c:	d100      	bne.n	9d30 <MiMAC_SendPacket+0x240>
    9d2e:	e077      	b.n	9e20 <MiMAC_SendPacket+0x330>
    9d30:	4a49      	ldr	r2, [pc, #292]	; (9e58 <MiMAC_SendPacket+0x368>)
    9d32:	4950      	ldr	r1, [pc, #320]	; (9e74 <MiMAC_SendPacket+0x384>)
    9d34:	7808      	ldrb	r0, [r1, #0]
    9d36:	54d0      	strb	r0, [r2, r3]
    9d38:	1c9c      	adds	r4, r3, #2
    9d3a:	b2e4      	uxtb	r4, r4
    9d3c:	3301      	adds	r3, #1
    9d3e:	b2db      	uxtb	r3, r3
    9d40:	7849      	ldrb	r1, [r1, #1]
    9d42:	54d1      	strb	r1, [r2, r3]
    9d44:	ab03      	add	r3, sp, #12
    9d46:	0172      	lsls	r2, r6, #5
    9d48:	781e      	ldrb	r6, [r3, #0]
    9d4a:	2120      	movs	r1, #32
    9d4c:	438e      	bics	r6, r1
    9d4e:	4316      	orrs	r6, r2
    9d50:	701e      	strb	r6, [r3, #0]
    9d52:	0733      	lsls	r3, r6, #28
    9d54:	d51b      	bpl.n	9d8e <MiMAC_SendPacket+0x29e>
    9d56:	0022      	movs	r2, r4
    9d58:	2300      	movs	r3, #0
    9d5a:	4e3f      	ldr	r6, [pc, #252]	; (9e58 <MiMAC_SendPacket+0x368>)
    9d5c:	4d40      	ldr	r5, [pc, #256]	; (9e60 <MiMAC_SendPacket+0x370>)
    9d5e:	1c51      	adds	r1, r2, #1
    9d60:	5ce8      	ldrb	r0, [r5, r3]
    9d62:	54b0      	strb	r0, [r6, r2]
    9d64:	3301      	adds	r3, #1
    9d66:	b2ca      	uxtb	r2, r1
    9d68:	2b04      	cmp	r3, #4
    9d6a:	d1f8      	bne.n	9d5e <MiMAC_SendPacket+0x26e>
    9d6c:	1d25      	adds	r5, r4, #4
    9d6e:	b2ed      	uxtb	r5, r5
    9d70:	4a3b      	ldr	r2, [pc, #236]	; (9e60 <MiMAC_SendPacket+0x370>)
    9d72:	6813      	ldr	r3, [r2, #0]
    9d74:	3301      	adds	r3, #1
    9d76:	6013      	str	r3, [r2, #0]
    9d78:	b2db      	uxtb	r3, r3
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d102      	bne.n	9d84 <MiMAC_SendPacket+0x294>
    9d7e:	7853      	ldrb	r3, [r2, #1]
    9d80:	079b      	lsls	r3, r3, #30
    9d82:	d05c      	beq.n	9e3e <MiMAC_SendPacket+0x34e>
    9d84:	3405      	adds	r4, #5
    9d86:	b2e4      	uxtb	r4, r4
    9d88:	2200      	movs	r2, #0
    9d8a:	4b33      	ldr	r3, [pc, #204]	; (9e58 <MiMAC_SendPacket+0x368>)
    9d8c:	555a      	strb	r2, [r3, r5]
    9d8e:	ab10      	add	r3, sp, #64	; 0x40
    9d90:	781e      	ldrb	r6, [r3, #0]
    9d92:	2e00      	cmp	r6, #0
    9d94:	d057      	beq.n	9e46 <MiMAC_SendPacket+0x356>
    9d96:	9b00      	ldr	r3, [sp, #0]
    9d98:	1932      	adds	r2, r6, r4
    9d9a:	b2d2      	uxtb	r2, r2
    9d9c:	4d2e      	ldr	r5, [pc, #184]	; (9e58 <MiMAC_SendPacket+0x368>)
    9d9e:	1c61      	adds	r1, r4, #1
    9da0:	7818      	ldrb	r0, [r3, #0]
    9da2:	5528      	strb	r0, [r5, r4]
    9da4:	3301      	adds	r3, #1
    9da6:	b2cc      	uxtb	r4, r1
    9da8:	4294      	cmp	r4, r2
    9daa:	d1f8      	bne.n	9d9e <MiMAC_SendPacket+0x2ae>
    9dac:	482a      	ldr	r0, [pc, #168]	; (9e58 <MiMAC_SendPacket+0x368>)
    9dae:	4b32      	ldr	r3, [pc, #200]	; (9e78 <MiMAC_SendPacket+0x388>)
    9db0:	7819      	ldrb	r1, [r3, #0]
    9db2:	5481      	strb	r1, [r0, r2]
    9db4:	1c51      	adds	r1, r2, #1
    9db6:	b2c9      	uxtb	r1, r1
    9db8:	785c      	ldrb	r4, [r3, #1]
    9dba:	5444      	strb	r4, [r0, r1]
    9dbc:	1c91      	adds	r1, r2, #2
    9dbe:	b2c9      	uxtb	r1, r1
    9dc0:	789c      	ldrb	r4, [r3, #2]
    9dc2:	5444      	strb	r4, [r0, r1]
    9dc4:	3203      	adds	r2, #3
    9dc6:	b2d2      	uxtb	r2, r2
    9dc8:	78db      	ldrb	r3, [r3, #3]
    9dca:	5483      	strb	r3, [r0, r2]
    9dcc:	4b2b      	ldr	r3, [pc, #172]	; (9e7c <MiMAC_SendPacket+0x38c>)
    9dce:	9a00      	ldr	r2, [sp, #0]
    9dd0:	601a      	str	r2, [r3, #0]
    9dd2:	4b2b      	ldr	r3, [pc, #172]	; (9e80 <MiMAC_SendPacket+0x390>)
    9dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9dd6:	601a      	str	r2, [r3, #0]
    9dd8:	4b2a      	ldr	r3, [pc, #168]	; (9e84 <MiMAC_SendPacket+0x394>)
    9dda:	4652      	mov	r2, sl
    9ddc:	701a      	strb	r2, [r3, #0]
    9dde:	4b2a      	ldr	r3, [pc, #168]	; (9e88 <MiMAC_SendPacket+0x398>)
    9de0:	701e      	strb	r6, [r3, #0]
    9de2:	4b2a      	ldr	r3, [pc, #168]	; (9e8c <MiMAC_SendPacket+0x39c>)
    9de4:	4798      	blx	r3
    9de6:	1e43      	subs	r3, r0, #1
    9de8:	4198      	sbcs	r0, r3
    9dea:	b2c0      	uxtb	r0, r0
    9dec:	b007      	add	sp, #28
    9dee:	bc3c      	pop	{r2, r3, r4, r5}
    9df0:	4690      	mov	r8, r2
    9df2:	4699      	mov	r9, r3
    9df4:	46a2      	mov	sl, r4
    9df6:	46ab      	mov	fp, r5
    9df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dfa:	4643      	mov	r3, r8
    9dfc:	2b00      	cmp	r3, #0
    9dfe:	d000      	beq.n	9e02 <MiMAC_SendPacket+0x312>
    9e00:	e745      	b.n	9c8e <MiMAC_SendPacket+0x19e>
    9e02:	2300      	movs	r3, #0
    9e04:	4814      	ldr	r0, [pc, #80]	; (9e58 <MiMAC_SendPacket+0x368>)
    9e06:	9c02      	ldr	r4, [sp, #8]
    9e08:	5ce1      	ldrb	r1, [r4, r3]
    9e0a:	181a      	adds	r2, r3, r0
    9e0c:	7191      	strb	r1, [r2, #6]
    9e0e:	3301      	adds	r3, #1
    9e10:	2b08      	cmp	r3, #8
    9e12:	d1f9      	bne.n	9e08 <MiMAC_SendPacket+0x318>
    9e14:	3306      	adds	r3, #6
    9e16:	e769      	b.n	9cec <MiMAC_SendPacket+0x1fc>
    9e18:	2100      	movs	r1, #0
    9e1a:	4a15      	ldr	r2, [pc, #84]	; (9e70 <MiMAC_SendPacket+0x380>)
    9e1c:	7011      	strb	r1, [r2, #0]
    9e1e:	e777      	b.n	9d10 <MiMAC_SendPacket+0x220>
    9e20:	4a1b      	ldr	r2, [pc, #108]	; (9e90 <MiMAC_SendPacket+0x3a0>)
    9e22:	6852      	ldr	r2, [r2, #4]
    9e24:	0018      	movs	r0, r3
    9e26:	3008      	adds	r0, #8
    9e28:	b2c0      	uxtb	r0, r0
    9e2a:	4d0b      	ldr	r5, [pc, #44]	; (9e58 <MiMAC_SendPacket+0x368>)
    9e2c:	1c5c      	adds	r4, r3, #1
    9e2e:	b2e4      	uxtb	r4, r4
    9e30:	7811      	ldrb	r1, [r2, #0]
    9e32:	54e9      	strb	r1, [r5, r3]
    9e34:	3201      	adds	r2, #1
    9e36:	0023      	movs	r3, r4
    9e38:	42a0      	cmp	r0, r4
    9e3a:	d1f7      	bne.n	9e2c <MiMAC_SendPacket+0x33c>
    9e3c:	e782      	b.n	9d44 <MiMAC_SendPacket+0x254>
    9e3e:	2001      	movs	r0, #1
    9e40:	4b14      	ldr	r3, [pc, #80]	; (9e94 <MiMAC_SendPacket+0x3a4>)
    9e42:	4798      	blx	r3
    9e44:	e79e      	b.n	9d84 <MiMAC_SendPacket+0x294>
    9e46:	0022      	movs	r2, r4
    9e48:	e7b0      	b.n	9dac <MiMAC_SendPacket+0x2bc>
    9e4a:	46c0      	nop			; (mov r8, r8)
    9e4c:	2000028e 	.word	0x2000028e
    9e50:	200020f8 	.word	0x200020f8
    9e54:	2000214c 	.word	0x2000214c
    9e58:	20001fd8 	.word	0x20001fd8
    9e5c:	0000ffff 	.word	0x0000ffff
    9e60:	20002128 	.word	0x20002128
    9e64:	00009781 	.word	0x00009781
    9e68:	20001fd5 	.word	0x20001fd5
    9e6c:	20001fd4 	.word	0x20001fd4
    9e70:	2000028b 	.word	0x2000028b
    9e74:	200020d8 	.word	0x200020d8
    9e78:	20002114 	.word	0x20002114
    9e7c:	20000298 	.word	0x20000298
    9e80:	20000290 	.word	0x20000290
    9e84:	20000294 	.word	0x20000294
    9e88:	2000028d 	.word	0x2000028d
    9e8c:	0000aa21 	.word	0x0000aa21
    9e90:	200020e0 	.word	0x200020e0
    9e94:	00009385 	.word	0x00009385

00009e98 <MiMAC_DiscardPacket>:
    9e98:	4b04      	ldr	r3, [pc, #16]	; (9eac <MiMAC_DiscardPacket+0x14>)
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	2b03      	cmp	r3, #3
    9e9e:	d804      	bhi.n	9eaa <MiMAC_DiscardPacket+0x12>
    9ea0:	021a      	lsls	r2, r3, #8
    9ea2:	18d3      	adds	r3, r2, r3
    9ea4:	2100      	movs	r1, #0
    9ea6:	4a02      	ldr	r2, [pc, #8]	; (9eb0 <MiMAC_DiscardPacket+0x18>)
    9ea8:	5499      	strb	r1, [r3, r2]
    9eaa:	4770      	bx	lr
    9eac:	20000017 	.word	0x20000017
    9eb0:	20002258 	.word	0x20002258

00009eb4 <PHY_DataConf>:
    9eb4:	2200      	movs	r2, #0
    9eb6:	4b04      	ldr	r3, [pc, #16]	; (9ec8 <PHY_DataConf+0x14>)
    9eb8:	701a      	strb	r2, [r3, #0]
    9eba:	4b04      	ldr	r3, [pc, #16]	; (9ecc <PHY_DataConf+0x18>)
    9ebc:	7018      	strb	r0, [r3, #0]
    9ebe:	3201      	adds	r2, #1
    9ec0:	4b03      	ldr	r3, [pc, #12]	; (9ed0 <PHY_DataConf+0x1c>)
    9ec2:	701a      	strb	r2, [r3, #0]
    9ec4:	4770      	bx	lr
    9ec6:	46c0      	nop			; (mov r8, r8)
    9ec8:	2000028c 	.word	0x2000028c
    9ecc:	20002124 	.word	0x20002124
    9ed0:	2000028e 	.word	0x2000028e

00009ed4 <MiMAC_RetryPacket>:
    9ed4:	b510      	push	{r4, lr}
    9ed6:	4a0b      	ldr	r2, [pc, #44]	; (9f04 <MiMAC_RetryPacket+0x30>)
    9ed8:	7813      	ldrb	r3, [r2, #0]
    9eda:	3301      	adds	r3, #1
    9edc:	b2db      	uxtb	r3, r3
    9ede:	7013      	strb	r3, [r2, #0]
    9ee0:	2b02      	cmp	r3, #2
    9ee2:	d904      	bls.n	9eee <MiMAC_RetryPacket+0x1a>
    9ee4:	2003      	movs	r0, #3
    9ee6:	4b08      	ldr	r3, [pc, #32]	; (9f08 <MiMAC_RetryPacket+0x34>)
>>>>>>> Stashed changes
    9ee8:	4798      	blx	r3
    9eea:	2000      	movs	r0, #0
    9eec:	bd10      	pop	{r4, pc}
    9eee:	2201      	movs	r2, #1
    9ef0:	4b06      	ldr	r3, [pc, #24]	; (9f0c <MiMAC_RetryPacket+0x38>)
    9ef2:	701a      	strb	r2, [r3, #0]
    9ef4:	4806      	ldr	r0, [pc, #24]	; (9f10 <MiMAC_RetryPacket+0x3c>)
    9ef6:	4b07      	ldr	r3, [pc, #28]	; (9f14 <MiMAC_RetryPacket+0x40>)
    9ef8:	4798      	blx	r3
    9efa:	1e43      	subs	r3, r0, #1
    9efc:	4198      	sbcs	r0, r3
    9efe:	b2c0      	uxtb	r0, r0
    9f00:	e7f4      	b.n	9eec <MiMAC_RetryPacket+0x18>
    9f02:	46c0      	nop			; (mov r8, r8)
    9f04:	2000028c 	.word	0x2000028c
    9f08:	00009eb5 	.word	0x00009eb5
    9f0c:	2000028b 	.word	0x2000028b
    9f10:	20001fd8 	.word	0x20001fd8
    9f14:	0000aa21 	.word	0x0000aa21

<<<<<<< Updated upstream
00009f08 <MiMAC_ReceivedPacket>:
=======
    9e58:	4806      	ldr	r0, [pc, #24]	; (9e74 <MiMAC_RetryPacket+0x3c>)
    9e5a:	4b07      	ldr	r3, [pc, #28]	; (9e78 <MiMAC_RetryPacket+0x40>)
    9e5c:	4798      	blx	r3
    9e5e:	1e43      	subs	r3, r0, #1
    9e60:	4198      	sbcs	r0, r3
    9e62:	b2c0      	uxtb	r0, r0
    9e64:	e7f4      	b.n	9e50 <MiMAC_RetryPacket+0x18>
    9e66:	46c0      	nop			; (mov r8, r8)
    9e68:	2000028c 	.word	0x2000028c
    9e6c:	00009e19 	.word	0x00009e19
    9e70:	2000028b 	.word	0x2000028b
    9e74:	20001fd8 	.word	0x20001fd8
    9e78:	0000a985 	.word	0x0000a985

00009e7c <MiMAC_ReceivedPacket>:
>>>>>>> Stashed changes
{
    9e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e7e:	46c6      	mov	lr, r8
    9e80:	b500      	push	{lr}
    9e82:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9e84:	22ff      	movs	r2, #255	; 0xff
    9e86:	4bcc      	ldr	r3, [pc, #816]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    9e88:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    9e8a:	4bcc      	ldr	r3, [pc, #816]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d000      	beq.n	9e94 <MiMAC_ReceivedPacket+0x18>
    9e92:	e354      	b.n	a53e <MiMAC_ReceivedPacket+0x6c2>
    9e94:	2302      	movs	r3, #2
    9e96:	33ff      	adds	r3, #255	; 0xff
    9e98:	4ac8      	ldr	r2, [pc, #800]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9e9a:	5cd3      	ldrb	r3, [r2, r3]
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	d10e      	bne.n	9ebe <MiMAC_ReceivedPacket+0x42>
    9ea0:	4bc7      	ldr	r3, [pc, #796]	; (a1c0 <MiMAC_ReceivedPacket+0x344>)
    9ea2:	5cd3      	ldrb	r3, [r2, r3]
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d140      	bne.n	9f2a <MiMAC_ReceivedPacket+0xae>
    9ea8:	4bc6      	ldr	r3, [pc, #792]	; (a1c4 <MiMAC_ReceivedPacket+0x348>)
    9eaa:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    9eac:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    9eae:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d105      	bne.n	9ec0 <MiMAC_ReceivedPacket+0x44>
}
    9eb4:	0020      	movs	r0, r4
    9eb6:	b008      	add	sp, #32
    9eb8:	bc04      	pop	{r2}
    9eba:	4690      	mov	r8, r2
    9ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    9ebe:	2201      	movs	r2, #1
			BankIndex = i;
    9ec0:	4bbd      	ldr	r3, [pc, #756]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    9ec2:	701a      	strb	r2, [r3, #0]
	return false;
    9ec4:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    9ec6:	2a03      	cmp	r2, #3
    9ec8:	d8f4      	bhi.n	9eb4 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    9eca:	0010      	movs	r0, r2
    9ecc:	0211      	lsls	r1, r2, #8
    9ece:	1889      	adds	r1, r1, r2
    9ed0:	4bba      	ldr	r3, [pc, #744]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9ed2:	185b      	adds	r3, r3, r1
    9ed4:	789d      	ldrb	r5, [r3, #2]
    9ed6:	2440      	movs	r4, #64	; 0x40
    9ed8:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    9eda:	49bb      	ldr	r1, [pc, #748]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    9edc:	2400      	movs	r4, #0
    9ede:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    9ee0:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    9ee2:	78db      	ldrb	r3, [r3, #3]
    9ee4:	2133      	movs	r1, #51	; 0x33
    9ee6:	438b      	bics	r3, r1
		switch (addrMode)
    9ee8:	b2d9      	uxtb	r1, r3
    9eea:	2988      	cmp	r1, #136	; 0x88
    9eec:	d100      	bne.n	9ef0 <MiMAC_ReceivedPacket+0x74>
    9eee:	e12f      	b.n	a150 <MiMAC_ReceivedPacket+0x2d4>
    9ef0:	d91d      	bls.n	9f2e <MiMAC_ReceivedPacket+0xb2>
    9ef2:	b2d9      	uxtb	r1, r3
    9ef4:	29c8      	cmp	r1, #200	; 0xc8
    9ef6:	d06f      	beq.n	9fd8 <MiMAC_ReceivedPacket+0x15c>
    9ef8:	29cc      	cmp	r1, #204	; 0xcc
    9efa:	d100      	bne.n	9efe <MiMAC_ReceivedPacket+0x82>
    9efc:	e0b9      	b.n	a072 <MiMAC_ReceivedPacket+0x1f6>
    9efe:	298c      	cmp	r1, #140	; 0x8c
    9f00:	d100      	bne.n	9f04 <MiMAC_ReceivedPacket+0x88>
    9f02:	e1aa      	b.n	a25a <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    9f04:	4bb1      	ldr	r3, [pc, #708]	; (a1cc <MiMAC_ReceivedPacket+0x350>)
    9f06:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9f08:	4bab      	ldr	r3, [pc, #684]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    9f0a:	781a      	ldrb	r2, [r3, #0]
    9f0c:	0213      	lsls	r3, r2, #8
    9f0e:	189a      	adds	r2, r3, r2
    9f10:	4baa      	ldr	r3, [pc, #680]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9f12:	189b      	adds	r3, r3, r2
    9f14:	789b      	ldrb	r3, [r3, #2]
			return false;
    9f16:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9f18:	069b      	lsls	r3, r3, #26
    9f1a:	d5cb      	bpl.n	9eb4 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    9f1c:	a807      	add	r0, sp, #28
    9f1e:	2300      	movs	r3, #0
    9f20:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    9f22:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    9f24:	4baa      	ldr	r3, [pc, #680]	; (a1d0 <MiMAC_ReceivedPacket+0x354>)
    9f26:	4798      	blx	r3
    9f28:	e7c4      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    9f2a:	2202      	movs	r2, #2
    9f2c:	e7c8      	b.n	9ec0 <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    9f2e:	2b08      	cmp	r3, #8
    9f30:	d100      	bne.n	9f34 <MiMAC_ReceivedPacket+0xb8>
    9f32:	e1e1      	b.n	a2f8 <MiMAC_ReceivedPacket+0x47c>
    9f34:	2980      	cmp	r1, #128	; 0x80
    9f36:	d1e5      	bne.n	9f04 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    9f38:	4ba3      	ldr	r3, [pc, #652]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    9f3a:	7819      	ldrb	r1, [r3, #0]
    9f3c:	2404      	movs	r4, #4
    9f3e:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9f40:	2480      	movs	r4, #128	; 0x80
    9f42:	4264      	negs	r4, r4
    9f44:	4321      	orrs	r1, r4
    9f46:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9f48:	2101      	movs	r1, #1
    9f4a:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9f4c:	4c9b      	ldr	r4, [pc, #620]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9f4e:	0211      	lsls	r1, r2, #8
    9f50:	1888      	adds	r0, r1, r2
    9f52:	1821      	adds	r1, r4, r0
    9f54:	794d      	ldrb	r5, [r1, #5]
    9f56:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9f58:	7989      	ldrb	r1, [r1, #6]
    9f5a:	7459      	strb	r1, [r3, #17]
    9f5c:	0211      	lsls	r1, r2, #8
    9f5e:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    9f60:	1dd1      	adds	r1, r2, #7
    9f62:	1909      	adds	r1, r1, r4
    9f64:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    9f66:	5d01      	ldrb	r1, [r0, r4]
    9f68:	390b      	subs	r1, #11
    9f6a:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9f6c:	3209      	adds	r2, #9
    9f6e:	1912      	adds	r2, r2, r4
    9f70:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9f72:	4b91      	ldr	r3, [pc, #580]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    9f74:	781a      	ldrb	r2, [r3, #0]
    9f76:	0213      	lsls	r3, r2, #8
    9f78:	189a      	adds	r2, r3, r2
    9f7a:	4b90      	ldr	r3, [pc, #576]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9f7c:	189b      	adds	r3, r3, r2
    9f7e:	789b      	ldrb	r3, [r3, #2]
    9f80:	071b      	lsls	r3, r3, #28
    9f82:	d500      	bpl.n	9f86 <MiMAC_ReceivedPacket+0x10a>
    9f84:	e1d9      	b.n	a33a <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    9f86:	4b8c      	ldr	r3, [pc, #560]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    9f88:	7818      	ldrb	r0, [r3, #0]
    9f8a:	0202      	lsls	r2, r0, #8
    9f8c:	1812      	adds	r2, r2, r0
    9f8e:	4b8b      	ldr	r3, [pc, #556]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9f90:	189b      	adds	r3, r3, r2
    9f92:	7899      	ldrb	r1, [r3, #2]
    9f94:	2307      	movs	r3, #7
    9f96:	400b      	ands	r3, r1
    9f98:	2b01      	cmp	r3, #1
    9f9a:	d100      	bne.n	9f9e <MiMAC_ReceivedPacket+0x122>
    9f9c:	e24e      	b.n	a43c <MiMAC_ReceivedPacket+0x5c0>
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	d100      	bne.n	9fa4 <MiMAC_ReceivedPacket+0x128>
    9fa2:	e283      	b.n	a4ac <MiMAC_ReceivedPacket+0x630>
    9fa4:	2b02      	cmp	r3, #2
    9fa6:	d100      	bne.n	9faa <MiMAC_ReceivedPacket+0x12e>
    9fa8:	e286      	b.n	a4b8 <MiMAC_ReceivedPacket+0x63c>
    9faa:	2b03      	cmp	r3, #3
    9fac:	d100      	bne.n	9fb0 <MiMAC_ReceivedPacket+0x134>
    9fae:	e275      	b.n	a49c <MiMAC_ReceivedPacket+0x620>
			MiMAC_DiscardPacket();
    9fb0:	4b86      	ldr	r3, [pc, #536]	; (a1cc <MiMAC_ReceivedPacket+0x350>)
    9fb2:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9fb4:	4b80      	ldr	r3, [pc, #512]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    9fb6:	781a      	ldrb	r2, [r3, #0]
    9fb8:	0213      	lsls	r3, r2, #8
    9fba:	189a      	adds	r2, r3, r2
    9fbc:	4b7f      	ldr	r3, [pc, #508]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9fbe:	189b      	adds	r3, r3, r2
    9fc0:	789b      	ldrb	r3, [r3, #2]
			return false;
    9fc2:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9fc4:	069b      	lsls	r3, r3, #26
    9fc6:	d400      	bmi.n	9fca <MiMAC_ReceivedPacket+0x14e>
    9fc8:	e774      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    9fca:	a807      	add	r0, sp, #28
    9fcc:	2300      	movs	r3, #0
    9fce:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    9fd0:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    9fd2:	4b7f      	ldr	r3, [pc, #508]	; (a1d0 <MiMAC_ReceivedPacket+0x354>)
    9fd4:	4798      	blx	r3
    9fd6:	e76d      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9fd8:	0211      	lsls	r1, r2, #8
    9fda:	1889      	adds	r1, r1, r2
    9fdc:	4b77      	ldr	r3, [pc, #476]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9fde:	185b      	adds	r3, r3, r1
    9fe0:	79dc      	ldrb	r4, [r3, #7]
    9fe2:	2cff      	cmp	r4, #255	; 0xff
    9fe4:	d01e      	beq.n	a024 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9fe6:	4978      	ldr	r1, [pc, #480]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    9fe8:	780e      	ldrb	r6, [r1, #0]
    9fea:	2380      	movs	r3, #128	; 0x80
    9fec:	425b      	negs	r3, r3
    9fee:	4333      	orrs	r3, r6
    9ff0:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9ff2:	2d00      	cmp	r5, #0
    9ff4:	d000      	beq.n	9ff8 <MiMAC_ReceivedPacket+0x17c>
    9ff6:	e27d      	b.n	a4f4 <MiMAC_ReceivedPacket+0x678>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9ff8:	4973      	ldr	r1, [pc, #460]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    9ffa:	4c70      	ldr	r4, [pc, #448]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    9ffc:	0203      	lsls	r3, r0, #8
    9ffe:	1818      	adds	r0, r3, r0
    a000:	1823      	adds	r3, r4, r0
    a002:	7a5d      	ldrb	r5, [r3, #9]
    a004:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a006:	7a9b      	ldrb	r3, [r3, #10]
    a008:	744b      	strb	r3, [r1, #17]
    a00a:	0213      	lsls	r3, r2, #8
    a00c:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a00e:	0013      	movs	r3, r2
    a010:	330b      	adds	r3, #11
    a012:	191b      	adds	r3, r3, r4
    a014:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a016:	5d03      	ldrb	r3, [r0, r4]
    a018:	3b15      	subs	r3, #21
    a01a:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a01c:	3213      	adds	r2, #19
    a01e:	1912      	adds	r2, r2, r4
    a020:	608a      	str	r2, [r1, #8]
    a022:	e043      	b.n	a0ac <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a024:	0211      	lsls	r1, r2, #8
    a026:	1889      	adds	r1, r1, r2
    a028:	4b64      	ldr	r3, [pc, #400]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a02a:	185b      	adds	r3, r3, r1
    a02c:	7a1b      	ldrb	r3, [r3, #8]
    a02e:	2bff      	cmp	r3, #255	; 0xff
    a030:	d1d9      	bne.n	9fe6 <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    a032:	4965      	ldr	r1, [pc, #404]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a034:	780b      	ldrb	r3, [r1, #0]
    a036:	2404      	movs	r4, #4
    a038:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a03a:	2480      	movs	r4, #128	; 0x80
    a03c:	4264      	negs	r4, r4
    a03e:	4323      	orrs	r3, r4
    a040:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a042:	2d00      	cmp	r5, #0
    a044:	d000      	beq.n	a048 <MiMAC_ReceivedPacket+0x1cc>
    a046:	e264      	b.n	a512 <MiMAC_ReceivedPacket+0x696>
    a048:	e7d6      	b.n	9ff8 <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    a04a:	4b60      	ldr	r3, [pc, #384]	; (a1cc <MiMAC_ReceivedPacket+0x350>)
    a04c:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a04e:	4b5a      	ldr	r3, [pc, #360]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    a050:	781a      	ldrb	r2, [r3, #0]
    a052:	0213      	lsls	r3, r2, #8
    a054:	189a      	adds	r2, r3, r2
    a056:	4b59      	ldr	r3, [pc, #356]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a058:	189b      	adds	r3, r3, r2
    a05a:	789b      	ldrb	r3, [r3, #2]
					return false;
    a05c:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a05e:	069b      	lsls	r3, r3, #26
    a060:	d400      	bmi.n	a064 <MiMAC_ReceivedPacket+0x1e8>
    a062:	e727      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a064:	a807      	add	r0, sp, #28
    a066:	2300      	movs	r3, #0
    a068:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a06a:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a06c:	4b58      	ldr	r3, [pc, #352]	; (a1d0 <MiMAC_ReceivedPacket+0x354>)
    a06e:	4798      	blx	r3
    a070:	e720      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a072:	4955      	ldr	r1, [pc, #340]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a074:	780c      	ldrb	r4, [r1, #0]
    a076:	2380      	movs	r3, #128	; 0x80
    a078:	425b      	negs	r3, r3
    a07a:	4323      	orrs	r3, r4
    a07c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a07e:	2d00      	cmp	r5, #0
    a080:	d133      	bne.n	a0ea <MiMAC_ReceivedPacket+0x26e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    a082:	4951      	ldr	r1, [pc, #324]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a084:	4c4d      	ldr	r4, [pc, #308]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a086:	0213      	lsls	r3, r2, #8
    a088:	1898      	adds	r0, r3, r2
    a08a:	1823      	adds	r3, r4, r0
    a08c:	7bdd      	ldrb	r5, [r3, #15]
    a08e:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    a090:	7c1b      	ldrb	r3, [r3, #16]
    a092:	744b      	strb	r3, [r1, #17]
    a094:	0213      	lsls	r3, r2, #8
    a096:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    a098:	0013      	movs	r3, r2
    a09a:	3311      	adds	r3, #17
    a09c:	191b      	adds	r3, r3, r4
    a09e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    a0a0:	5d03      	ldrb	r3, [r0, r4]
    a0a2:	3b1b      	subs	r3, #27
    a0a4:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    a0a6:	3219      	adds	r2, #25
    a0a8:	1912      	adds	r2, r2, r4
    a0aa:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a0ac:	4b42      	ldr	r3, [pc, #264]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    a0ae:	781a      	ldrb	r2, [r3, #0]
    a0b0:	0213      	lsls	r3, r2, #8
    a0b2:	189a      	adds	r2, r3, r2
    a0b4:	4b41      	ldr	r3, [pc, #260]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a0b6:	189b      	adds	r3, r3, r2
    a0b8:	789b      	ldrb	r3, [r3, #2]
    a0ba:	071b      	lsls	r3, r3, #28
    a0bc:	d400      	bmi.n	a0c0 <MiMAC_ReceivedPacket+0x244>
    a0be:	e762      	b.n	9f86 <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    a0c0:	4b41      	ldr	r3, [pc, #260]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a0c2:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    a0c4:	785f      	ldrb	r7, [r3, #1]
    a0c6:	023f      	lsls	r7, r7, #8
    a0c8:	781a      	ldrb	r2, [r3, #0]
    a0ca:	4317      	orrs	r7, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    a0cc:	789a      	ldrb	r2, [r3, #2]
    a0ce:	0412      	lsls	r2, r2, #16
    a0d0:	4940      	ldr	r1, [pc, #256]	; (a1d4 <MiMAC_ReceivedPacket+0x358>)
    a0d2:	400f      	ands	r7, r1
    a0d4:	4317      	orrs	r7, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    a0d6:	78db      	ldrb	r3, [r3, #3]
    a0d8:	061b      	lsls	r3, r3, #24
    a0da:	023f      	lsls	r7, r7, #8
    a0dc:	0a3f      	lsrs	r7, r7, #8
    a0de:	431f      	orrs	r7, r3
    a0e0:	4d3d      	ldr	r5, [pc, #244]	; (a1d8 <MiMAC_ReceivedPacket+0x35c>)
    a0e2:	2600      	movs	r6, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    a0e4:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    a0e6:	46a8      	mov	r8, r5
    a0e8:	e141      	b.n	a36e <MiMAC_ReceivedPacket+0x4f2>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a0ea:	0211      	lsls	r1, r2, #8
    a0ec:	1889      	adds	r1, r1, r2
    a0ee:	3107      	adds	r1, #7
    a0f0:	4a32      	ldr	r2, [pc, #200]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a0f2:	1889      	adds	r1, r1, r2
    a0f4:	4839      	ldr	r0, [pc, #228]	; (a1dc <MiMAC_ReceivedPacket+0x360>)
    a0f6:	4b3a      	ldr	r3, [pc, #232]	; (a1e0 <MiMAC_ReceivedPacket+0x364>)
    a0f8:	4798      	blx	r3
    a0fa:	1e04      	subs	r4, r0, #0
    a0fc:	d015      	beq.n	a12a <MiMAC_ReceivedPacket+0x2ae>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a0fe:	4b2e      	ldr	r3, [pc, #184]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    a100:	7818      	ldrb	r0, [r3, #0]
    a102:	4a31      	ldr	r2, [pc, #196]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a104:	492d      	ldr	r1, [pc, #180]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a106:	0203      	lsls	r3, r0, #8
    a108:	181b      	adds	r3, r3, r0
    a10a:	18c8      	adds	r0, r1, r3
    a10c:	7944      	ldrb	r4, [r0, #5]
    a10e:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a110:	7980      	ldrb	r0, [r0, #6]
    a112:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    a114:	0018      	movs	r0, r3
    a116:	300f      	adds	r0, #15
    a118:	1840      	adds	r0, r0, r1
    a11a:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    a11c:	5c58      	ldrb	r0, [r3, r1]
    a11e:	3819      	subs	r0, #25
    a120:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    a122:	3317      	adds	r3, #23
    a124:	185b      	adds	r3, r3, r1
    a126:	6093      	str	r3, [r2, #8]
    a128:	e7c0      	b.n	a0ac <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    a12a:	4b28      	ldr	r3, [pc, #160]	; (a1cc <MiMAC_ReceivedPacket+0x350>)
    a12c:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a12e:	4b22      	ldr	r3, [pc, #136]	; (a1b8 <MiMAC_ReceivedPacket+0x33c>)
    a130:	781a      	ldrb	r2, [r3, #0]
    a132:	0213      	lsls	r3, r2, #8
    a134:	189a      	adds	r2, r3, r2
    a136:	4b21      	ldr	r3, [pc, #132]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a138:	189b      	adds	r3, r3, r2
    a13a:	789b      	ldrb	r3, [r3, #2]
    a13c:	069b      	lsls	r3, r3, #26
    a13e:	d400      	bmi.n	a142 <MiMAC_ReceivedPacket+0x2c6>
    a140:	e6b8      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a142:	a807      	add	r0, sp, #28
    a144:	2300      	movs	r3, #0
    a146:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a148:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a14a:	4b21      	ldr	r3, [pc, #132]	; (a1d0 <MiMAC_ReceivedPacket+0x354>)
    a14c:	4798      	blx	r3
    a14e:	e6b1      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a150:	0211      	lsls	r1, r2, #8
    a152:	1889      	adds	r1, r1, r2
    a154:	4b19      	ldr	r3, [pc, #100]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a156:	185b      	adds	r3, r3, r1
    a158:	79dc      	ldrb	r4, [r3, #7]
    a15a:	2cff      	cmp	r4, #255	; 0xff
    a15c:	d01f      	beq.n	a19e <MiMAC_ReceivedPacket+0x322>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a15e:	4b1a      	ldr	r3, [pc, #104]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a160:	781e      	ldrb	r6, [r3, #0]
    a162:	2180      	movs	r1, #128	; 0x80
    a164:	4249      	negs	r1, r1
    a166:	4331      	orrs	r1, r6
    a168:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a16a:	2101      	movs	r1, #1
    a16c:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    a16e:	2d00      	cmp	r5, #0
    a170:	d138      	bne.n	a1e4 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a172:	0019      	movs	r1, r3
    a174:	4c11      	ldr	r4, [pc, #68]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a176:	0203      	lsls	r3, r0, #8
    a178:	1818      	adds	r0, r3, r0
    a17a:	1823      	adds	r3, r4, r0
    a17c:	7a5d      	ldrb	r5, [r3, #9]
    a17e:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a180:	7a9b      	ldrb	r3, [r3, #10]
    a182:	744b      	strb	r3, [r1, #17]
    a184:	0213      	lsls	r3, r2, #8
    a186:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a188:	0013      	movs	r3, r2
    a18a:	330b      	adds	r3, #11
    a18c:	191b      	adds	r3, r3, r4
    a18e:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    a190:	5d03      	ldrb	r3, [r0, r4]
    a192:	3b0f      	subs	r3, #15
    a194:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    a196:	320d      	adds	r2, #13
    a198:	1912      	adds	r2, r2, r4
    a19a:	608a      	str	r2, [r1, #8]
    a19c:	e6e9      	b.n	9f72 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a19e:	0211      	lsls	r1, r2, #8
    a1a0:	1889      	adds	r1, r1, r2
    a1a2:	4b06      	ldr	r3, [pc, #24]	; (a1bc <MiMAC_ReceivedPacket+0x340>)
    a1a4:	185b      	adds	r3, r3, r1
    a1a6:	7a1b      	ldrb	r3, [r3, #8]
    a1a8:	2bff      	cmp	r3, #255	; 0xff
    a1aa:	d1d8      	bne.n	a15e <MiMAC_ReceivedPacket+0x2e2>
					MACRxPacket.flags.bits.broadcast = 1;
    a1ac:	4906      	ldr	r1, [pc, #24]	; (a1c8 <MiMAC_ReceivedPacket+0x34c>)
    a1ae:	780b      	ldrb	r3, [r1, #0]
    a1b0:	2604      	movs	r6, #4
    a1b2:	4333      	orrs	r3, r6
    a1b4:	700b      	strb	r3, [r1, #0]
    a1b6:	e7d2      	b.n	a15e <MiMAC_ReceivedPacket+0x2e2>
    a1b8:	20000017 	.word	0x20000017
    a1bc:	20002258 	.word	0x20002258
    a1c0:	00000202 	.word	0x00000202
    a1c4:	00000303 	.word	0x00000303
    a1c8:	200026a0 	.word	0x200026a0
    a1cc:	00009dfd 	.word	0x00009dfd
    a1d0:	0000f505 	.word	0x0000f505
    a1d4:	ff00ffff 	.word	0xff00ffff
    a1d8:	20002668 	.word	0x20002668
    a1dc:	20002250 	.word	0x20002250
    a1e0:	0000ac71 	.word	0x0000ac71
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a1e4:	0201      	lsls	r1, r0, #8
    a1e6:	1809      	adds	r1, r1, r0
    a1e8:	4bd7      	ldr	r3, [pc, #860]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a1ea:	185b      	adds	r3, r3, r1
    a1ec:	7a1b      	ldrb	r3, [r3, #8]
    a1ee:	2cff      	cmp	r4, #255	; 0xff
    a1f0:	d117      	bne.n	a222 <MiMAC_ReceivedPacket+0x3a6>
    a1f2:	2bff      	cmp	r3, #255	; 0xff
    a1f4:	d115      	bne.n	a222 <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a1f6:	49d5      	ldr	r1, [pc, #852]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a1f8:	4cd3      	ldr	r4, [pc, #844]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a1fa:	0203      	lsls	r3, r0, #8
    a1fc:	1818      	adds	r0, r3, r0
    a1fe:	1823      	adds	r3, r4, r0
    a200:	795d      	ldrb	r5, [r3, #5]
    a202:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a204:	799b      	ldrb	r3, [r3, #6]
    a206:	744b      	strb	r3, [r1, #17]
    a208:	0213      	lsls	r3, r2, #8
    a20a:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a20c:	0013      	movs	r3, r2
    a20e:	3309      	adds	r3, #9
    a210:	191b      	adds	r3, r3, r4
    a212:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    a214:	5d03      	ldrb	r3, [r0, r4]
    a216:	3b0d      	subs	r3, #13
    a218:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    a21a:	320b      	adds	r2, #11
    a21c:	1912      	adds	r2, r2, r4
    a21e:	608a      	str	r2, [r1, #8]
    a220:	e6a7      	b.n	9f72 <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a222:	49cb      	ldr	r1, [pc, #812]	; (a550 <MiMAC_ReceivedPacket+0x6d4>)
    a224:	7809      	ldrb	r1, [r1, #0]
    a226:	42a1      	cmp	r1, r4
    a228:	d103      	bne.n	a232 <MiMAC_ReceivedPacket+0x3b6>
    a22a:	49c9      	ldr	r1, [pc, #804]	; (a550 <MiMAC_ReceivedPacket+0x6d4>)
    a22c:	7849      	ldrb	r1, [r1, #1]
    a22e:	4299      	cmp	r1, r3
    a230:	d0e1      	beq.n	a1f6 <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    a232:	4bc8      	ldr	r3, [pc, #800]	; (a554 <MiMAC_ReceivedPacket+0x6d8>)
    a234:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a236:	4bc8      	ldr	r3, [pc, #800]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a238:	781a      	ldrb	r2, [r3, #0]
    a23a:	0213      	lsls	r3, r2, #8
    a23c:	189a      	adds	r2, r3, r2
    a23e:	4bc2      	ldr	r3, [pc, #776]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a240:	189b      	adds	r3, r3, r2
    a242:	789b      	ldrb	r3, [r3, #2]
						return false;
    a244:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a246:	069b      	lsls	r3, r3, #26
    a248:	d400      	bmi.n	a24c <MiMAC_ReceivedPacket+0x3d0>
    a24a:	e633      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a24c:	a807      	add	r0, sp, #28
    a24e:	2300      	movs	r3, #0
    a250:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a252:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a254:	4bc1      	ldr	r3, [pc, #772]	; (a55c <MiMAC_ReceivedPacket+0x6e0>)
    a256:	4798      	blx	r3
    a258:	e62c      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a25a:	4bbc      	ldr	r3, [pc, #752]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a25c:	781c      	ldrb	r4, [r3, #0]
    a25e:	2180      	movs	r1, #128	; 0x80
    a260:	4249      	negs	r1, r1
    a262:	4321      	orrs	r1, r4
    a264:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a266:	2101      	movs	r1, #1
    a268:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    a26a:	2d00      	cmp	r5, #0
    a26c:	d115      	bne.n	a29a <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    a26e:	49b7      	ldr	r1, [pc, #732]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a270:	4cb5      	ldr	r4, [pc, #724]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a272:	0213      	lsls	r3, r2, #8
    a274:	1898      	adds	r0, r3, r2
    a276:	1823      	adds	r3, r4, r0
    a278:	7b9d      	ldrb	r5, [r3, #14]
    a27a:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    a27c:	7bdb      	ldrb	r3, [r3, #15]
    a27e:	744b      	strb	r3, [r1, #17]
    a280:	0213      	lsls	r3, r2, #8
    a282:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    a284:	0013      	movs	r3, r2
    a286:	3310      	adds	r3, #16
    a288:	191b      	adds	r3, r3, r4
    a28a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a28c:	5d03      	ldrb	r3, [r0, r4]
    a28e:	3b15      	subs	r3, #21
    a290:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a292:	3213      	adds	r2, #19
    a294:	1912      	adds	r2, r2, r4
    a296:	608a      	str	r2, [r1, #8]
    a298:	e66b      	b.n	9f72 <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a29a:	0211      	lsls	r1, r2, #8
    a29c:	1889      	adds	r1, r1, r2
    a29e:	3107      	adds	r1, #7
    a2a0:	4aa9      	ldr	r2, [pc, #676]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a2a2:	1889      	adds	r1, r1, r2
    a2a4:	48ae      	ldr	r0, [pc, #696]	; (a560 <MiMAC_ReceivedPacket+0x6e4>)
    a2a6:	4baf      	ldr	r3, [pc, #700]	; (a564 <MiMAC_ReceivedPacket+0x6e8>)
    a2a8:	4798      	blx	r3
    a2aa:	1e04      	subs	r4, r0, #0
    a2ac:	d011      	beq.n	a2d2 <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a2ae:	4baa      	ldr	r3, [pc, #680]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a2b0:	7818      	ldrb	r0, [r3, #0]
    a2b2:	4aa6      	ldr	r2, [pc, #664]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a2b4:	49a4      	ldr	r1, [pc, #656]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a2b6:	0203      	lsls	r3, r0, #8
    a2b8:	181b      	adds	r3, r3, r0
    a2ba:	18c8      	adds	r0, r1, r3
    a2bc:	7944      	ldrb	r4, [r0, #5]
    a2be:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a2c0:	7980      	ldrb	r0, [r0, #6]
    a2c2:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a2c4:	5c58      	ldrb	r0, [r3, r1]
    a2c6:	3813      	subs	r0, #19
    a2c8:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a2ca:	3311      	adds	r3, #17
    a2cc:	185b      	adds	r3, r3, r1
    a2ce:	6093      	str	r3, [r2, #8]
    a2d0:	e64f      	b.n	9f72 <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    a2d2:	4ba0      	ldr	r3, [pc, #640]	; (a554 <MiMAC_ReceivedPacket+0x6d8>)
    a2d4:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a2d6:	4ba0      	ldr	r3, [pc, #640]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a2d8:	781a      	ldrb	r2, [r3, #0]
    a2da:	0213      	lsls	r3, r2, #8
    a2dc:	189a      	adds	r2, r3, r2
    a2de:	4b9a      	ldr	r3, [pc, #616]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a2e0:	189b      	adds	r3, r3, r2
    a2e2:	789b      	ldrb	r3, [r3, #2]
    a2e4:	069b      	lsls	r3, r3, #26
    a2e6:	d400      	bmi.n	a2ea <MiMAC_ReceivedPacket+0x46e>
    a2e8:	e5e4      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a2ea:	a807      	add	r0, sp, #28
    a2ec:	2300      	movs	r3, #0
    a2ee:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a2f0:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a2f2:	4b9a      	ldr	r3, [pc, #616]	; (a55c <MiMAC_ReceivedPacket+0x6e0>)
    a2f4:	4798      	blx	r3
    a2f6:	e5dd      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a2f8:	0211      	lsls	r1, r2, #8
    a2fa:	1889      	adds	r1, r1, r2
    a2fc:	4b92      	ldr	r3, [pc, #584]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a2fe:	185b      	adds	r3, r3, r1
    a300:	79db      	ldrb	r3, [r3, #7]
    a302:	2bff      	cmp	r3, #255	; 0xff
    a304:	d00c      	beq.n	a320 <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    a306:	4991      	ldr	r1, [pc, #580]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a308:	4c8f      	ldr	r4, [pc, #572]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a30a:	0203      	lsls	r3, r0, #8
    a30c:	1818      	adds	r0, r3, r0
    a30e:	5d03      	ldrb	r3, [r0, r4]
    a310:	3b0a      	subs	r3, #10
    a312:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a314:	0213      	lsls	r3, r2, #8
    a316:	189a      	adds	r2, r3, r2
    a318:	3209      	adds	r2, #9
    a31a:	1912      	adds	r2, r2, r4
    a31c:	608a      	str	r2, [r1, #8]
			break;
    a31e:	e628      	b.n	9f72 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a320:	0211      	lsls	r1, r2, #8
    a322:	1889      	adds	r1, r1, r2
    a324:	4b88      	ldr	r3, [pc, #544]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a326:	185b      	adds	r3, r3, r1
    a328:	7a1b      	ldrb	r3, [r3, #8]
    a32a:	2bff      	cmp	r3, #255	; 0xff
    a32c:	d1eb      	bne.n	a306 <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    a32e:	4987      	ldr	r1, [pc, #540]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a330:	780b      	ldrb	r3, [r1, #0]
    a332:	2404      	movs	r4, #4
    a334:	4323      	orrs	r3, r4
    a336:	700b      	strb	r3, [r1, #0]
    a338:	e7e5      	b.n	a306 <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    a33a:	4b86      	ldr	r3, [pc, #536]	; (a554 <MiMAC_ReceivedPacket+0x6d8>)
    a33c:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a33e:	4b86      	ldr	r3, [pc, #536]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a340:	781a      	ldrb	r2, [r3, #0]
    a342:	0213      	lsls	r3, r2, #8
    a344:	189a      	adds	r2, r3, r2
    a346:	4b80      	ldr	r3, [pc, #512]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a348:	189b      	adds	r3, r3, r2
    a34a:	789b      	ldrb	r3, [r3, #2]
    a34c:	069b      	lsls	r3, r3, #26
    a34e:	d401      	bmi.n	a354 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    a350:	2400      	movs	r4, #0
    a352:	e5af      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a354:	a807      	add	r0, sp, #28
    a356:	2300      	movs	r3, #0
    a358:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a35a:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a35c:	4b7f      	ldr	r3, [pc, #508]	; (a55c <MiMAC_ReceivedPacket+0x6e0>)
    a35e:	4798      	blx	r3
    a360:	e7f6      	b.n	a350 <MiMAC_ReceivedPacket+0x4d4>
			for (i = 0; i < CONNECTION_SIZE; i++)
    a362:	3401      	adds	r4, #1
    a364:	b2e4      	uxtb	r4, r4
    a366:	3601      	adds	r6, #1
    a368:	350a      	adds	r5, #10
    a36a:	2c05      	cmp	r4, #5
    a36c:	d014      	beq.n	a398 <MiMAC_ReceivedPacket+0x51c>
				if ((ConnectionTable[i].status.bits.isValid) &&
    a36e:	00b3      	lsls	r3, r6, #2
    a370:	199b      	adds	r3, r3, r6
    a372:	005b      	lsls	r3, r3, #1
    a374:	4443      	add	r3, r8
    a376:	7a1b      	ldrb	r3, [r3, #8]
    a378:	09db      	lsrs	r3, r3, #7
    a37a:	d0f2      	beq.n	a362 <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    a37c:	4b73      	ldr	r3, [pc, #460]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a37e:	6859      	ldr	r1, [r3, #4]
    a380:	0028      	movs	r0, r5
    a382:	4b78      	ldr	r3, [pc, #480]	; (a564 <MiMAC_ReceivedPacket+0x6e8>)
    a384:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    a386:	2800      	cmp	r0, #0
    a388:	d0eb      	beq.n	a362 <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    a38a:	2c04      	cmp	r4, #4
    a38c:	d804      	bhi.n	a398 <MiMAC_ReceivedPacket+0x51c>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    a38e:	00a3      	lsls	r3, r4, #2
    a390:	4a75      	ldr	r2, [pc, #468]	; (a568 <MiMAC_ReceivedPacket+0x6ec>)
    a392:	589b      	ldr	r3, [r3, r2]
    a394:	42bb      	cmp	r3, r7
    a396:	d22d      	bcs.n	a3f4 <MiMAC_ReceivedPacket+0x578>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    a398:	496c      	ldr	r1, [pc, #432]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a39a:	7b0b      	ldrb	r3, [r1, #12]
    a39c:	3b05      	subs	r3, #5
    a39e:	b2db      	uxtb	r3, r3
    a3a0:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    a3a2:	6888      	ldr	r0, [r1, #8]
    a3a4:	18c3      	adds	r3, r0, r3
    a3a6:	785d      	ldrb	r5, [r3, #1]
    a3a8:	4a70      	ldr	r2, [pc, #448]	; (a56c <MiMAC_ReceivedPacket+0x6f0>)
    a3aa:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    a3ac:	789d      	ldrb	r5, [r3, #2]
    a3ae:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    a3b0:	78dd      	ldrb	r5, [r3, #3]
    a3b2:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    a3b4:	791b      	ldrb	r3, [r3, #4]
    a3b6:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    a3b8:	684a      	ldr	r2, [r1, #4]
    a3ba:	310c      	adds	r1, #12
    a3bc:	3005      	adds	r0, #5
    a3be:	4b66      	ldr	r3, [pc, #408]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a3c0:	781d      	ldrb	r5, [r3, #0]
    a3c2:	022b      	lsls	r3, r5, #8
    a3c4:	195d      	adds	r5, r3, r5
    a3c6:	4b60      	ldr	r3, [pc, #384]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a3c8:	195b      	adds	r3, r3, r5
    a3ca:	789b      	ldrb	r3, [r3, #2]
    a3cc:	9300      	str	r3, [sp, #0]
    a3ce:	003b      	movs	r3, r7
    a3d0:	4d67      	ldr	r5, [pc, #412]	; (a570 <MiMAC_ReceivedPacket+0x6f4>)
    a3d2:	47a8      	blx	r5
    a3d4:	2800      	cmp	r0, #0
    a3d6:	d01f      	beq.n	a418 <MiMAC_ReceivedPacket+0x59c>
			if (i < CONNECTION_SIZE)
    a3d8:	2c04      	cmp	r4, #4
    a3da:	d802      	bhi.n	a3e2 <MiMAC_ReceivedPacket+0x566>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    a3dc:	00a4      	lsls	r4, r4, #2
    a3de:	4b62      	ldr	r3, [pc, #392]	; (a568 <MiMAC_ReceivedPacket+0x6ec>)
    a3e0:	50e7      	str	r7, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    a3e2:	4b5a      	ldr	r3, [pc, #360]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a3e4:	689a      	ldr	r2, [r3, #8]
    a3e6:	3205      	adds	r2, #5
    a3e8:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    a3ea:	781a      	ldrb	r2, [r3, #0]
    a3ec:	2108      	movs	r1, #8
    a3ee:	430a      	orrs	r2, r1
    a3f0:	701a      	strb	r2, [r3, #0]
    a3f2:	e5c8      	b.n	9f86 <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    a3f4:	4b57      	ldr	r3, [pc, #348]	; (a554 <MiMAC_ReceivedPacket+0x6d8>)
    a3f6:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a3f8:	4b57      	ldr	r3, [pc, #348]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a3fa:	781a      	ldrb	r2, [r3, #0]
    a3fc:	0213      	lsls	r3, r2, #8
    a3fe:	189a      	adds	r2, r3, r2
    a400:	4b51      	ldr	r3, [pc, #324]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a402:	189b      	adds	r3, r3, r2
    a404:	789b      	ldrb	r3, [r3, #2]
    a406:	069b      	lsls	r3, r3, #26
    a408:	d5a2      	bpl.n	a350 <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a40a:	a807      	add	r0, sp, #28
    a40c:	2300      	movs	r3, #0
    a40e:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a410:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a412:	4b52      	ldr	r3, [pc, #328]	; (a55c <MiMAC_ReceivedPacket+0x6e0>)
    a414:	4798      	blx	r3
    a416:	e79b      	b.n	a350 <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    a418:	4b4e      	ldr	r3, [pc, #312]	; (a554 <MiMAC_ReceivedPacket+0x6d8>)
    a41a:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a41c:	4b4e      	ldr	r3, [pc, #312]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a41e:	781a      	ldrb	r2, [r3, #0]
    a420:	0213      	lsls	r3, r2, #8
    a422:	189a      	adds	r2, r3, r2
    a424:	4b48      	ldr	r3, [pc, #288]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a426:	189b      	adds	r3, r3, r2
    a428:	789b      	ldrb	r3, [r3, #2]
    a42a:	069b      	lsls	r3, r3, #26
    a42c:	d590      	bpl.n	a350 <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a42e:	a807      	add	r0, sp, #28
    a430:	2300      	movs	r3, #0
    a432:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a434:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a436:	4b49      	ldr	r3, [pc, #292]	; (a55c <MiMAC_ReceivedPacket+0x6e0>)
    a438:	4798      	blx	r3
    a43a:	e789      	b.n	a350 <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    a43c:	4a43      	ldr	r2, [pc, #268]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a43e:	7813      	ldrb	r3, [r2, #0]
    a440:	2403      	movs	r4, #3
    a442:	43a3      	bics	r3, r4
    a444:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    a446:	4c41      	ldr	r4, [pc, #260]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a448:	4b3f      	ldr	r3, [pc, #252]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a44a:	0202      	lsls	r2, r0, #8
    a44c:	1812      	adds	r2, r2, r0
    a44e:	5cd5      	ldrb	r5, [r2, r3]
    a450:	189b      	adds	r3, r3, r2
    a452:	5d5a      	ldrb	r2, [r3, r5]
    a454:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    a456:	785b      	ldrb	r3, [r3, #1]
    a458:	7363      	strb	r3, [r4, #13]
		return true;
    a45a:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a45c:	068b      	lsls	r3, r1, #26
    a45e:	d400      	bmi.n	a462 <MiMAC_ReceivedPacket+0x5e6>
    a460:	e528      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    a462:	aa04      	add	r2, sp, #16
    a464:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    a466:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    a468:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    a46a:	233e      	movs	r3, #62	; 0x3e
    a46c:	425b      	negs	r3, r3
    a46e:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    a470:	4b36      	ldr	r3, [pc, #216]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a472:	6859      	ldr	r1, [r3, #4]
    a474:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    a476:	8a1b      	ldrh	r3, [r3, #16]
    a478:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    a47a:	4b3e      	ldr	r3, [pc, #248]	; (a574 <MiMAC_ReceivedPacket+0x6f8>)
    a47c:	0205      	lsls	r5, r0, #8
    a47e:	182d      	adds	r5, r5, r0
    a480:	4831      	ldr	r0, [pc, #196]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a482:	1940      	adds	r0, r0, r5
    a484:	7900      	ldrb	r0, [r0, #4]
    a486:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    a488:	9402      	str	r4, [sp, #8]
    a48a:	9401      	str	r4, [sp, #4]
    a48c:	2001      	movs	r0, #1
    a48e:	9000      	str	r0, [sp, #0]
    a490:	9804      	ldr	r0, [sp, #16]
    a492:	9a06      	ldr	r2, [sp, #24]
    a494:	4c38      	ldr	r4, [pc, #224]	; (a578 <MiMAC_ReceivedPacket+0x6fc>)
    a496:	47a0      	blx	r4
		return true;
    a498:	2401      	movs	r4, #1
    a49a:	e50b      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a49c:	4a2b      	ldr	r2, [pc, #172]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a49e:	7813      	ldrb	r3, [r2, #0]
    a4a0:	2403      	movs	r4, #3
    a4a2:	43a3      	bics	r3, r4
    a4a4:	2401      	movs	r4, #1
    a4a6:	4323      	orrs	r3, r4
    a4a8:	7013      	strb	r3, [r2, #0]
			break;
    a4aa:	e7cc      	b.n	a446 <MiMAC_ReceivedPacket+0x5ca>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    a4ac:	4a27      	ldr	r2, [pc, #156]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a4ae:	7813      	ldrb	r3, [r2, #0]
    a4b0:	2403      	movs	r4, #3
    a4b2:	4323      	orrs	r3, r4
    a4b4:	7013      	strb	r3, [r2, #0]
			break;
    a4b6:	e7c6      	b.n	a446 <MiMAC_ReceivedPacket+0x5ca>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    a4b8:	4a24      	ldr	r2, [pc, #144]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a4ba:	7813      	ldrb	r3, [r2, #0]
    a4bc:	2103      	movs	r1, #3
    a4be:	438b      	bics	r3, r1
    a4c0:	2102      	movs	r1, #2
    a4c2:	430b      	orrs	r3, r1
    a4c4:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a4c6:	6893      	ldr	r3, [r2, #8]
    a4c8:	781a      	ldrb	r2, [r3, #0]
    a4ca:	4b2c      	ldr	r3, [pc, #176]	; (a57c <MiMAC_ReceivedPacket+0x700>)
    a4cc:	781b      	ldrb	r3, [r3, #0]
    a4ce:	429a      	cmp	r2, r3
    a4d0:	d003      	beq.n	a4da <MiMAC_ReceivedPacket+0x65e>
				MiMAC_DiscardPacket();
    a4d2:	4b20      	ldr	r3, [pc, #128]	; (a554 <MiMAC_ReceivedPacket+0x6d8>)
    a4d4:	4798      	blx	r3
				return false;
    a4d6:	2400      	movs	r4, #0
    a4d8:	e4ec      	b.n	9eb4 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a4da:	4b29      	ldr	r3, [pc, #164]	; (a580 <MiMAC_ReceivedPacket+0x704>)
    a4dc:	781b      	ldrb	r3, [r3, #0]
    a4de:	2b00      	cmp	r3, #0
    a4e0:	d0f7      	beq.n	a4d2 <MiMAC_ReceivedPacket+0x656>
					DataTxAckTimer.Val = 0;
    a4e2:	2400      	movs	r4, #0
    a4e4:	4b27      	ldr	r3, [pc, #156]	; (a584 <MiMAC_ReceivedPacket+0x708>)
    a4e6:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    a4e8:	2000      	movs	r0, #0
    a4ea:	4b27      	ldr	r3, [pc, #156]	; (a588 <MiMAC_ReceivedPacket+0x70c>)
    a4ec:	4798      	blx	r3
					AckReqData = 0;
    a4ee:	4b24      	ldr	r3, [pc, #144]	; (a580 <MiMAC_ReceivedPacket+0x704>)
    a4f0:	701c      	strb	r4, [r3, #0]
    a4f2:	e7ee      	b.n	a4d2 <MiMAC_ReceivedPacket+0x656>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a4f4:	0201      	lsls	r1, r0, #8
    a4f6:	1809      	adds	r1, r1, r0
    a4f8:	4b13      	ldr	r3, [pc, #76]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a4fa:	185b      	adds	r3, r3, r1
    a4fc:	4914      	ldr	r1, [pc, #80]	; (a550 <MiMAC_ReceivedPacket+0x6d4>)
    a4fe:	7849      	ldrb	r1, [r1, #1]
    a500:	7a1b      	ldrb	r3, [r3, #8]
    a502:	4299      	cmp	r1, r3
    a504:	d000      	beq.n	a508 <MiMAC_ReceivedPacket+0x68c>
    a506:	e5a0      	b.n	a04a <MiMAC_ReceivedPacket+0x1ce>
    a508:	4b11      	ldr	r3, [pc, #68]	; (a550 <MiMAC_ReceivedPacket+0x6d4>)
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	42a3      	cmp	r3, r4
    a50e:	d000      	beq.n	a512 <MiMAC_ReceivedPacket+0x696>
    a510:	e59b      	b.n	a04a <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a512:	490e      	ldr	r1, [pc, #56]	; (a54c <MiMAC_ReceivedPacket+0x6d0>)
    a514:	4c0c      	ldr	r4, [pc, #48]	; (a548 <MiMAC_ReceivedPacket+0x6cc>)
    a516:	0203      	lsls	r3, r0, #8
    a518:	1818      	adds	r0, r3, r0
    a51a:	1823      	adds	r3, r4, r0
    a51c:	795d      	ldrb	r5, [r3, #5]
    a51e:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a520:	799b      	ldrb	r3, [r3, #6]
    a522:	744b      	strb	r3, [r1, #17]
    a524:	0213      	lsls	r3, r2, #8
    a526:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a528:	0013      	movs	r3, r2
    a52a:	3309      	adds	r3, #9
    a52c:	191b      	adds	r3, r3, r4
    a52e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a530:	5d03      	ldrb	r3, [r0, r4]
    a532:	3b13      	subs	r3, #19
    a534:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a536:	3211      	adds	r2, #17
    a538:	1912      	adds	r2, r2, r4
    a53a:	608a      	str	r2, [r1, #8]
    a53c:	e5b6      	b.n	a0ac <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    a53e:	2200      	movs	r2, #0
    a540:	4b05      	ldr	r3, [pc, #20]	; (a558 <MiMAC_ReceivedPacket+0x6dc>)
    a542:	701a      	strb	r2, [r3, #0]
    a544:	e4c1      	b.n	9eca <MiMAC_ReceivedPacket+0x4e>
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	20002258 	.word	0x20002258
    a54c:	200026a0 	.word	0x200026a0
    a550:	20002660 	.word	0x20002660
    a554:	00009dfd 	.word	0x00009dfd
    a558:	20000017 	.word	0x20000017
    a55c:	0000f505 	.word	0x0000f505
    a560:	20002250 	.word	0x20002250
    a564:	0000ac71 	.word	0x0000ac71
    a568:	200026c8 	.word	0x200026c8
    a56c:	2000213c 	.word	0x2000213c
    a570:	00009841 	.word	0x00009841
    a574:	20002140 	.word	0x20002140
    a578:	00009a55 	.word	0x00009a55
    a57c:	20001fd4 	.word	0x20001fd4
    a580:	2000028b 	.word	0x2000028b
    a584:	20002964 	.word	0x20002964
    a588:	00009e19 	.word	0x00009e19

0000a58c <MiMAC_Task>:

void MiMAC_Task(void)
{
    a58c:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a58e:	4b0b      	ldr	r3, [pc, #44]	; (a5bc <MiMAC_Task+0x30>)
    a590:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a592:	4b0b      	ldr	r3, [pc, #44]	; (a5c0 <MiMAC_Task+0x34>)
    a594:	681b      	ldr	r3, [r3, #0]
    a596:	2b00      	cmp	r3, #0
    a598:	d003      	beq.n	a5a2 <MiMAC_Task+0x16>
    a59a:	4a0a      	ldr	r2, [pc, #40]	; (a5c4 <MiMAC_Task+0x38>)
    a59c:	7812      	ldrb	r2, [r2, #0]
    a59e:	2a00      	cmp	r2, #0
    a5a0:	d100      	bne.n	a5a4 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a5a2:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a5a4:	2100      	movs	r1, #0
    a5a6:	4a07      	ldr	r2, [pc, #28]	; (a5c4 <MiMAC_Task+0x38>)
    a5a8:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a5aa:	4a07      	ldr	r2, [pc, #28]	; (a5c8 <MiMAC_Task+0x3c>)
    a5ac:	6812      	ldr	r2, [r2, #0]
    a5ae:	4907      	ldr	r1, [pc, #28]	; (a5cc <MiMAC_Task+0x40>)
    a5b0:	7809      	ldrb	r1, [r1, #0]
    a5b2:	4807      	ldr	r0, [pc, #28]	; (a5d0 <MiMAC_Task+0x44>)
    a5b4:	7800      	ldrb	r0, [r0, #0]
    a5b6:	4798      	blx	r3
}
    a5b8:	e7f3      	b.n	a5a2 <MiMAC_Task+0x16>
    a5ba:	46c0      	nop			; (mov r8, r8)
    a5bc:	0000aa2d 	.word	0x0000aa2d
    a5c0:	20000290 	.word	0x20000290
    a5c4:	2000028e 	.word	0x2000028e
    a5c8:	20000298 	.word	0x20000298
    a5cc:	20002124 	.word	0x20002124
    a5d0:	20000294 	.word	0x20000294

0000a5d4 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    a5d4:	b500      	push	{lr}
    a5d6:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    a5d8:	4b2f      	ldr	r3, [pc, #188]	; (a698 <phySetChannel+0xc4>)
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d007      	beq.n	a5f0 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    a5e0:	2b19      	cmp	r3, #25
    a5e2:	d856      	bhi.n	a692 <phySetChannel+0xbe>
    a5e4:	009b      	lsls	r3, r3, #2
    a5e6:	4a2d      	ldr	r2, [pc, #180]	; (a69c <phySetChannel+0xc8>)
    a5e8:	58d3      	ldr	r3, [r2, r3]
    a5ea:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    a5ec:	4b2c      	ldr	r3, [pc, #176]	; (a6a0 <phySetChannel+0xcc>)
    a5ee:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    a5f0:	a901      	add	r1, sp, #4
    a5f2:	2001      	movs	r0, #1
    a5f4:	4b2b      	ldr	r3, [pc, #172]	; (a6a4 <phySetChannel+0xd0>)
    a5f6:	4798      	blx	r3
	{
	}
}
    a5f8:	b003      	add	sp, #12
    a5fa:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    a5fc:	4b2a      	ldr	r3, [pc, #168]	; (a6a8 <phySetChannel+0xd4>)
    a5fe:	9301      	str	r3, [sp, #4]
				break;
    a600:	e7f6      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    a602:	4b2a      	ldr	r3, [pc, #168]	; (a6ac <phySetChannel+0xd8>)
    a604:	9301      	str	r3, [sp, #4]
				break;
    a606:	e7f3      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    a608:	4b29      	ldr	r3, [pc, #164]	; (a6b0 <phySetChannel+0xdc>)
    a60a:	9301      	str	r3, [sp, #4]
				break;
    a60c:	e7f0      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a60e:	4b29      	ldr	r3, [pc, #164]	; (a6b4 <phySetChannel+0xe0>)
    a610:	9301      	str	r3, [sp, #4]
				break;			
    a612:	e7ed      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a614:	4b28      	ldr	r3, [pc, #160]	; (a6b8 <phySetChannel+0xe4>)
    a616:	9301      	str	r3, [sp, #4]
				break;
    a618:	e7ea      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a61a:	4b28      	ldr	r3, [pc, #160]	; (a6bc <phySetChannel+0xe8>)
    a61c:	9301      	str	r3, [sp, #4]
				break;			
    a61e:	e7e7      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a620:	4b27      	ldr	r3, [pc, #156]	; (a6c0 <phySetChannel+0xec>)
    a622:	9301      	str	r3, [sp, #4]
				break;
    a624:	e7e4      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a626:	4b27      	ldr	r3, [pc, #156]	; (a6c4 <phySetChannel+0xf0>)
    a628:	9301      	str	r3, [sp, #4]
				break;
    a62a:	e7e1      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a62c:	4b26      	ldr	r3, [pc, #152]	; (a6c8 <phySetChannel+0xf4>)
    a62e:	9301      	str	r3, [sp, #4]
				break;
    a630:	e7de      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a632:	4b26      	ldr	r3, [pc, #152]	; (a6cc <phySetChannel+0xf8>)
    a634:	9301      	str	r3, [sp, #4]
				break;
    a636:	e7db      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    a638:	4b25      	ldr	r3, [pc, #148]	; (a6d0 <phySetChannel+0xfc>)
    a63a:	9301      	str	r3, [sp, #4]
				break;
    a63c:	e7d8      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    a63e:	4b25      	ldr	r3, [pc, #148]	; (a6d4 <phySetChannel+0x100>)
    a640:	9301      	str	r3, [sp, #4]
				break;
    a642:	e7d5      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    a644:	4b24      	ldr	r3, [pc, #144]	; (a6d8 <phySetChannel+0x104>)
    a646:	9301      	str	r3, [sp, #4]
				break;
    a648:	e7d2      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    a64a:	4b24      	ldr	r3, [pc, #144]	; (a6dc <phySetChannel+0x108>)
    a64c:	9301      	str	r3, [sp, #4]
				break;
    a64e:	e7cf      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    a650:	4b23      	ldr	r3, [pc, #140]	; (a6e0 <phySetChannel+0x10c>)
    a652:	9301      	str	r3, [sp, #4]
				break;
    a654:	e7cc      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    a656:	4b23      	ldr	r3, [pc, #140]	; (a6e4 <phySetChannel+0x110>)
    a658:	9301      	str	r3, [sp, #4]
				break;
    a65a:	e7c9      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    a65c:	4b22      	ldr	r3, [pc, #136]	; (a6e8 <phySetChannel+0x114>)
    a65e:	9301      	str	r3, [sp, #4]
				break;
    a660:	e7c6      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    a662:	4b22      	ldr	r3, [pc, #136]	; (a6ec <phySetChannel+0x118>)
    a664:	9301      	str	r3, [sp, #4]
				break;
    a666:	e7c3      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    a668:	4b21      	ldr	r3, [pc, #132]	; (a6f0 <phySetChannel+0x11c>)
    a66a:	9301      	str	r3, [sp, #4]
				break;
    a66c:	e7c0      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    a66e:	4b21      	ldr	r3, [pc, #132]	; (a6f4 <phySetChannel+0x120>)
    a670:	9301      	str	r3, [sp, #4]
				break;
    a672:	e7bd      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    a674:	4b20      	ldr	r3, [pc, #128]	; (a6f8 <phySetChannel+0x124>)
    a676:	9301      	str	r3, [sp, #4]
				break;		
    a678:	e7ba      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    a67a:	4b20      	ldr	r3, [pc, #128]	; (a6fc <phySetChannel+0x128>)
    a67c:	9301      	str	r3, [sp, #4]
				break;
    a67e:	e7b7      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    a680:	4b1f      	ldr	r3, [pc, #124]	; (a700 <phySetChannel+0x12c>)
    a682:	9301      	str	r3, [sp, #4]
				break;
    a684:	e7b4      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a686:	4b1f      	ldr	r3, [pc, #124]	; (a704 <phySetChannel+0x130>)
    a688:	9301      	str	r3, [sp, #4]
				break;
    a68a:	e7b1      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a68c:	4b1e      	ldr	r3, [pc, #120]	; (a708 <phySetChannel+0x134>)
    a68e:	9301      	str	r3, [sp, #4]
				break;
    a690:	e7ae      	b.n	a5f0 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a692:	4b09      	ldr	r3, [pc, #36]	; (a6b8 <phySetChannel+0xe4>)
    a694:	9301      	str	r3, [sp, #4]
				break;				
    a696:	e7ab      	b.n	a5f0 <phySetChannel+0x1c>
    a698:	2000029c 	.word	0x2000029c
    a69c:	000187f4 	.word	0x000187f4
    a6a0:	33611380 	.word	0x33611380
    a6a4:	0000e2f9 	.word	0x0000e2f9
    a6a8:	337055c0 	.word	0x337055c0
    a6ac:	338eda40 	.word	0x338eda40
    a6b0:	33a680f0 	.word	0x33a680f0
    a6b4:	33ad5ec0 	.word	0x33ad5ec0
    a6b8:	33be27a0 	.word	0x33be27a0
    a6bc:	33d3e608 	.word	0x33d3e608
    a6c0:	33db2580 	.word	0x33db2580
    a6c4:	35c80160 	.word	0x35c80160
    a6c8:	35d2afc0 	.word	0x35d2afc0
    a6cc:	3689cac0 	.word	0x3689cac0
    a6d0:	368cd800 	.word	0x368cd800
    a6d4:	36978660 	.word	0x36978660
    a6d8:	36d61600 	.word	0x36d61600
    a6dc:	36e3d1a0 	.word	0x36e3d1a0
    a6e0:	36f313e0 	.word	0x36f313e0
    a6e4:	36f49a80 	.word	0x36f49a80
    a6e8:	36f62120 	.word	0x36f62120
    a6ec:	3703dcc0 	.word	0x3703dcc0
    a6f0:	3706ea00 	.word	0x3706ea00
    a6f4:	370870a0 	.word	0x370870a0
    a6f8:	37226140 	.word	0x37226140
    a6fc:	374886e0 	.word	0x374886e0
    a700:	37502800 	.word	0x37502800
    a704:	3757c920 	.word	0x3757c920
    a708:	3ccbf700 	.word	0x3ccbf700

0000a70c <radioCallback>:
{
    a70c:	b570      	push	{r4, r5, r6, lr}
    a70e:	b082      	sub	sp, #8
    a710:	0004      	movs	r4, r0
    a712:	000d      	movs	r5, r1
	callbackBackup = callback;
    a714:	4b3e      	ldr	r3, [pc, #248]	; (a810 <radioCallback+0x104>)
    a716:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a718:	466b      	mov	r3, sp
    a71a:	1c98      	adds	r0, r3, #2
    a71c:	2300      	movs	r3, #0
    a71e:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a720:	4b3c      	ldr	r3, [pc, #240]	; (a814 <radioCallback+0x108>)
    a722:	4798      	blx	r3
	switch (callback)
    a724:	2c10      	cmp	r4, #16
    a726:	d853      	bhi.n	a7d0 <radioCallback+0xc4>
    a728:	00a4      	lsls	r4, r4, #2
    a72a:	4b3b      	ldr	r3, [pc, #236]	; (a818 <radioCallback+0x10c>)
    a72c:	591b      	ldr	r3, [r3, r4]
    a72e:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a730:	4b3a      	ldr	r3, [pc, #232]	; (a81c <radioCallback+0x110>)
    a732:	781a      	ldrb	r2, [r3, #0]
    a734:	2a00      	cmp	r2, #0
    a736:	d00e      	beq.n	a756 <radioCallback+0x4a>
    a738:	2302      	movs	r3, #2
    a73a:	33ff      	adds	r3, #255	; 0xff
    a73c:	4a37      	ldr	r2, [pc, #220]	; (a81c <radioCallback+0x110>)
    a73e:	5cd3      	ldrb	r3, [r2, r3]
    a740:	2b00      	cmp	r3, #0
    a742:	d04e      	beq.n	a7e2 <radioCallback+0xd6>
    a744:	4b36      	ldr	r3, [pc, #216]	; (a820 <radioCallback+0x114>)
    a746:	5cd3      	ldrb	r3, [r2, r3]
    a748:	2b00      	cmp	r3, #0
    a74a:	d04c      	beq.n	a7e6 <radioCallback+0xda>
    a74c:	4b35      	ldr	r3, [pc, #212]	; (a824 <radioCallback+0x118>)
    a74e:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a750:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a752:	2b00      	cmp	r3, #0
    a754:	d043      	beq.n	a7de <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a756:	0016      	movs	r6, r2
    a758:	7a2c      	ldrb	r4, [r5, #8]
    a75a:	0213      	lsls	r3, r2, #8
    a75c:	189a      	adds	r2, r3, r2
    a75e:	4b2f      	ldr	r3, [pc, #188]	; (a81c <radioCallback+0x110>)
    a760:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a762:	2cfa      	cmp	r4, #250	; 0xfa
    a764:	d80d      	bhi.n	a782 <radioCallback+0x76>
    a766:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a768:	0232      	lsls	r2, r6, #8
    a76a:	1992      	adds	r2, r2, r6
    a76c:	482b      	ldr	r0, [pc, #172]	; (a81c <radioCallback+0x110>)
    a76e:	1880      	adds	r0, r0, r2
    a770:	686a      	ldr	r2, [r5, #4]
    a772:	5cd1      	ldrb	r1, [r2, r3]
    a774:	18c2      	adds	r2, r0, r3
    a776:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a778:	3301      	adds	r3, #1
    a77a:	b2db      	uxtb	r3, r3
    a77c:	7a2a      	ldrb	r2, [r5, #8]
    a77e:	429a      	cmp	r2, r3
    a780:	d2f6      	bcs.n	a770 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    a782:	4b26      	ldr	r3, [pc, #152]	; (a81c <radioCallback+0x110>)
    a784:	0232      	lsls	r2, r6, #8
    a786:	1992      	adds	r2, r2, r6
    a788:	3404      	adds	r4, #4
    a78a:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    a78c:	2156      	movs	r1, #86	; 0x56
    a78e:	4826      	ldr	r0, [pc, #152]	; (a828 <radioCallback+0x11c>)
    a790:	5e41      	ldrsh	r1, [r0, r1]
    a792:	4668      	mov	r0, sp
    a794:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    a796:	189b      	adds	r3, r3, r2
    a798:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    a79a:	789b      	ldrb	r3, [r3, #2]
    a79c:	069b      	lsls	r3, r3, #26
    a79e:	d524      	bpl.n	a7ea <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    a7a0:	a801      	add	r0, sp, #4
    a7a2:	2301      	movs	r3, #1
    a7a4:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a7a6:	2300      	movs	r3, #0
    a7a8:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    a7aa:	4b20      	ldr	r3, [pc, #128]	; (a82c <radioCallback+0x120>)
    a7ac:	4798      	blx	r3
    a7ae:	e00f      	b.n	a7d0 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    a7b0:	4b1f      	ldr	r3, [pc, #124]	; (a830 <radioCallback+0x124>)
    a7b2:	781b      	ldrb	r3, [r3, #0]
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d002      	beq.n	a7be <radioCallback+0xb2>
    a7b8:	782b      	ldrb	r3, [r5, #0]
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d00a      	beq.n	a7d4 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    a7be:	7828      	ldrb	r0, [r5, #0]
    a7c0:	4b1c      	ldr	r3, [pc, #112]	; (a834 <radioCallback+0x128>)
    a7c2:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    a7c4:	a801      	add	r0, sp, #4
    a7c6:	2300      	movs	r3, #0
    a7c8:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    a7ca:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    a7cc:	4b17      	ldr	r3, [pc, #92]	; (a82c <radioCallback+0x120>)
    a7ce:	4798      	blx	r3
}
    a7d0:	b002      	add	sp, #8
    a7d2:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    a7d4:	4b18      	ldr	r3, [pc, #96]	; (a838 <radioCallback+0x12c>)
    a7d6:	4798      	blx	r3
    a7d8:	4b18      	ldr	r3, [pc, #96]	; (a83c <radioCallback+0x130>)
    a7da:	6018      	str	r0, [r3, #0]
    a7dc:	e7f2      	b.n	a7c4 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    a7de:	3afc      	subs	r2, #252	; 0xfc
    a7e0:	e7b9      	b.n	a756 <radioCallback+0x4a>
    a7e2:	2201      	movs	r2, #1
    a7e4:	e7b7      	b.n	a756 <radioCallback+0x4a>
    a7e6:	2202      	movs	r2, #2
    a7e8:	e7b5      	b.n	a756 <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    a7ea:	a801      	add	r0, sp, #4
    a7ec:	2300      	movs	r3, #0
    a7ee:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a7f0:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    a7f2:	4b0e      	ldr	r3, [pc, #56]	; (a82c <radioCallback+0x120>)
    a7f4:	4798      	blx	r3
    a7f6:	e7eb      	b.n	a7d0 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    a7f8:	ac01      	add	r4, sp, #4
    a7fa:	2300      	movs	r3, #0
    a7fc:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    a7fe:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    a800:	2001      	movs	r0, #1
    a802:	4b0c      	ldr	r3, [pc, #48]	; (a834 <radioCallback+0x128>)
    a804:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    a806:	0020      	movs	r0, r4
    a808:	4b08      	ldr	r3, [pc, #32]	; (a82c <radioCallback+0x120>)
    a80a:	4798      	blx	r3
}
    a80c:	e7e0      	b.n	a7d0 <radioCallback+0xc4>
    a80e:	46c0      	nop			; (mov r8, r8)
    a810:	2000224f 	.word	0x2000224f
    a814:	0000d869 	.word	0x0000d869
    a818:	0001885c 	.word	0x0001885c
    a81c:	20002258 	.word	0x20002258
    a820:	00000202 	.word	0x00000202
    a824:	00000303 	.word	0x00000303
    a828:	20002d78 	.word	0x20002d78
    a82c:	0000f505 	.word	0x0000f505
    a830:	2000028b 	.word	0x2000028b
    a834:	00009e19 	.word	0x00009e19
    a838:	0000bed1 	.word	0x0000bed1
    a83c:	20002964 	.word	0x20002964

0000a840 <PHY_Init>:
{
    a840:	b510      	push	{r4, lr}
    HAL_RadioInit();
    a842:	4b06      	ldr	r3, [pc, #24]	; (a85c <PHY_Init+0x1c>)
    a844:	4798      	blx	r3
    AESInit();	
    a846:	4b06      	ldr	r3, [pc, #24]	; (a860 <PHY_Init+0x20>)
    a848:	4798      	blx	r3
	RADIO_Init();
    a84a:	4b06      	ldr	r3, [pc, #24]	; (a864 <PHY_Init+0x24>)
    a84c:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    a84e:	4906      	ldr	r1, [pc, #24]	; (a868 <PHY_Init+0x28>)
    a850:	201a      	movs	r0, #26
    a852:	4b06      	ldr	r3, [pc, #24]	; (a86c <PHY_Init+0x2c>)
    a854:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    a856:	4b06      	ldr	r3, [pc, #24]	; (a870 <PHY_Init+0x30>)
    a858:	4798      	blx	r3
}
    a85a:	bd10      	pop	{r4, pc}
    a85c:	0000c285 	.word	0x0000c285
    a860:	0000cd2d 	.word	0x0000cd2d
    a864:	0000e4f5 	.word	0x0000e4f5
    a868:	0000a70d 	.word	0x0000a70d
    a86c:	0000e2f9 	.word	0x0000e2f9
    a870:	0000f311 	.word	0x0000f311

0000a874 <PHY_SetRxState>:
{
    a874:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    a876:	4b01      	ldr	r3, [pc, #4]	; (a87c <PHY_SetRxState+0x8>)
    a878:	4798      	blx	r3
}
    a87a:	bd10      	pop	{r4, pc}
    a87c:	0000f1f9 	.word	0x0000f1f9

0000a880 <PHY_SetPanId>:
{
    a880:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    a882:	b2c2      	uxtb	r2, r0
    a884:	4b02      	ldr	r3, [pc, #8]	; (a890 <PHY_SetPanId+0x10>)
    a886:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    a888:	0a00      	lsrs	r0, r0, #8
    a88a:	7058      	strb	r0, [r3, #1]
}
    a88c:	b002      	add	sp, #8
    a88e:	4770      	bx	lr
    a890:	2000265c 	.word	0x2000265c

0000a894 <PHY_SetShortAddr>:
{
    a894:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    a896:	b2c2      	uxtb	r2, r0
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <PHY_SetShortAddr+0x10>)
    a89a:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    a89c:	0a00      	lsrs	r0, r0, #8
    a89e:	7058      	strb	r0, [r3, #1]
}
    a8a0:	b002      	add	sp, #8
    a8a2:	4770      	bx	lr
    a8a4:	20002660 	.word	0x20002660

0000a8a8 <PHY_SetTxPower>:
{
    a8a8:	b500      	push	{lr}
    a8aa:	b083      	sub	sp, #12
	reg = txPower;
    a8ac:	466b      	mov	r3, sp
    a8ae:	71d8      	strb	r0, [r3, #7]
	if(reg > 15)
    a8b0:	280f      	cmp	r0, #15
    a8b2:	d813      	bhi.n	a8dc <PHY_SetTxPower+0x34>
		PaBoost = DISABLED;
    a8b4:	466b      	mov	r3, sp
    a8b6:	1d99      	adds	r1, r3, #6
    a8b8:	2300      	movs	r3, #0
    a8ba:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a8bc:	2008      	movs	r0, #8
    a8be:	4b0b      	ldr	r3, [pc, #44]	; (a8ec <PHY_SetTxPower+0x44>)
    a8c0:	4798      	blx	r3
		reg &= 0x0F ;
    a8c2:	466b      	mov	r3, sp
    a8c4:	1dda      	adds	r2, r3, #7
    a8c6:	79d9      	ldrb	r1, [r3, #7]
    a8c8:	230f      	movs	r3, #15
    a8ca:	400b      	ands	r3, r1
    a8cc:	7013      	strb	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER, &reg);
    a8ce:	466b      	mov	r3, sp
    a8d0:	1dd9      	adds	r1, r3, #7
    a8d2:	2004      	movs	r0, #4
    a8d4:	4b05      	ldr	r3, [pc, #20]	; (a8ec <PHY_SetTxPower+0x44>)
    a8d6:	4798      	blx	r3
}
    a8d8:	b003      	add	sp, #12
    a8da:	bd00      	pop	{pc}
		PaBoost = ENABLED;
    a8dc:	466b      	mov	r3, sp
    a8de:	1d99      	adds	r1, r3, #6
    a8e0:	2301      	movs	r3, #1
    a8e2:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a8e4:	2008      	movs	r0, #8
    a8e6:	4b01      	ldr	r3, [pc, #4]	; (a8ec <PHY_SetTxPower+0x44>)
    a8e8:	4798      	blx	r3
    a8ea:	e7f0      	b.n	a8ce <PHY_SetTxPower+0x26>
    a8ec:	0000e2f9 	.word	0x0000e2f9

0000a8f0 <PHY_GetAttribute>:
{
    a8f0:	b510      	push	{r4, lr}
	switch(RadioAttr)
    a8f2:	2807      	cmp	r0, #7
    a8f4:	d003      	beq.n	a8fe <PHY_GetAttribute+0xe>
    a8f6:	2816      	cmp	r0, #22
    a8f8:	d001      	beq.n	a8fe <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    a8fa:	2003      	movs	r0, #3
}
    a8fc:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    a8fe:	4b01      	ldr	r3, [pc, #4]	; (a904 <PHY_GetAttribute+0x14>)
    a900:	4798      	blx	r3
			break;
    a902:	e7fb      	b.n	a8fc <PHY_GetAttribute+0xc>
    a904:	0000e209 	.word	0x0000e209

0000a908 <PHY_Wakeup>:
{
    a908:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    a90a:	4b0c      	ldr	r3, [pc, #48]	; (a93c <PHY_Wakeup+0x34>)
    a90c:	781b      	ldrb	r3, [r3, #0]
    a90e:	2b02      	cmp	r3, #2
    a910:	d000      	beq.n	a914 <PHY_Wakeup+0xc>
}
    a912:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    a914:	4b0a      	ldr	r3, [pc, #40]	; (a940 <PHY_Wakeup+0x38>)
    a916:	4798      	blx	r3
		HAL_RadioInit();
    a918:	4b0a      	ldr	r3, [pc, #40]	; (a944 <PHY_Wakeup+0x3c>)
    a91a:	4798      	blx	r3
		RADIO_Reset();
    a91c:	4b0a      	ldr	r3, [pc, #40]	; (a948 <PHY_Wakeup+0x40>)
    a91e:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    a920:	2334      	movs	r3, #52	; 0x34
    a922:	4a0a      	ldr	r2, [pc, #40]	; (a94c <PHY_Wakeup+0x44>)
    a924:	5cd1      	ldrb	r1, [r2, r3]
    a926:	2200      	movs	r2, #0
    a928:	2001      	movs	r0, #1
    a92a:	4b09      	ldr	r3, [pc, #36]	; (a950 <PHY_Wakeup+0x48>)
    a92c:	4798      	blx	r3
	RADIO_RxHandler();
    a92e:	4b09      	ldr	r3, [pc, #36]	; (a954 <PHY_Wakeup+0x4c>)
    a930:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    a932:	2201      	movs	r2, #1
    a934:	4b01      	ldr	r3, [pc, #4]	; (a93c <PHY_Wakeup+0x34>)
    a936:	701a      	strb	r2, [r3, #0]
}
    a938:	e7eb      	b.n	a912 <PHY_Wakeup+0xa>
    a93a:	46c0      	nop			; (mov r8, r8)
    a93c:	2000029d 	.word	0x2000029d
    a940:	0000c5c5 	.word	0x0000c5c5
    a944:	0000c285 	.word	0x0000c285
    a948:	0000c43d 	.word	0x0000c43d
    a94c:	20002d78 	.word	0x20002d78
    a950:	0000d6a5 	.word	0x0000d6a5
    a954:	0000f1f9 	.word	0x0000f1f9

0000a958 <PHY_SetChannel>:
{
    a958:	b510      	push	{r4, lr}
	phyChannel = channel;
    a95a:	4b06      	ldr	r3, [pc, #24]	; (a974 <PHY_SetChannel+0x1c>)
    a95c:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    a95e:	4b06      	ldr	r3, [pc, #24]	; (a978 <PHY_SetChannel+0x20>)
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	2b02      	cmp	r3, #2
    a964:	d002      	beq.n	a96c <PHY_SetChannel+0x14>
	phySetChannel();
    a966:	4b05      	ldr	r3, [pc, #20]	; (a97c <PHY_SetChannel+0x24>)
    a968:	4798      	blx	r3
}
    a96a:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    a96c:	4b04      	ldr	r3, [pc, #16]	; (a980 <PHY_SetChannel+0x28>)
    a96e:	4798      	blx	r3
    a970:	e7f9      	b.n	a966 <PHY_SetChannel+0xe>
    a972:	46c0      	nop			; (mov r8, r8)
    a974:	2000029c 	.word	0x2000029c
    a978:	2000029d 	.word	0x2000029d
    a97c:	0000a5d5 	.word	0x0000a5d5
    a980:	0000a909 	.word	0x0000a909

0000a984 <PHY_DataReq>:
{
    a984:	b500      	push	{lr}
    a986:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    a988:	7803      	ldrb	r3, [r0, #0]
    a98a:	aa02      	add	r2, sp, #8
    a98c:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    a98e:	2b00      	cmp	r3, #0
    a990:	d009      	beq.n	a9a6 <PHY_DataReq+0x22>
    a992:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    a994:	4912      	ldr	r1, [pc, #72]	; (a9e0 <PHY_DataReq+0x5c>)
    a996:	18c2      	adds	r2, r0, r3
    a998:	7852      	ldrb	r2, [r2, #1]
    a99a:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    a99c:	3301      	adds	r3, #1
    a99e:	b2db      	uxtb	r3, r3
    a9a0:	7802      	ldrb	r2, [r0, #0]
    a9a2:	429a      	cmp	r2, r3
    a9a4:	d8f7      	bhi.n	a996 <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    a9a6:	4b0e      	ldr	r3, [pc, #56]	; (a9e0 <PHY_DataReq+0x5c>)
    a9a8:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    a9aa:	2001      	movs	r0, #1
    a9ac:	4b0d      	ldr	r3, [pc, #52]	; (a9e4 <PHY_DataReq+0x60>)
    a9ae:	4798      	blx	r3
		phySetChannel();
    a9b0:	4b0d      	ldr	r3, [pc, #52]	; (a9e8 <PHY_DataReq+0x64>)
    a9b2:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    a9b4:	2305      	movs	r3, #5
    a9b6:	466a      	mov	r2, sp
    a9b8:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    a9ba:	3b5f      	subs	r3, #95	; 0x5f
    a9bc:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    a9be:	2305      	movs	r3, #5
    a9c0:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    a9c2:	2300      	movs	r3, #0
    a9c4:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    a9c6:	4669      	mov	r1, sp
    a9c8:	201d      	movs	r0, #29
    a9ca:	4b08      	ldr	r3, [pc, #32]	; (a9ec <PHY_DataReq+0x68>)
    a9cc:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    a9ce:	a802      	add	r0, sp, #8
    a9d0:	4b07      	ldr	r3, [pc, #28]	; (a9f0 <PHY_DataReq+0x6c>)
    a9d2:	4798      	blx	r3
		return (!status);							
    a9d4:	4243      	negs	r3, r0
    a9d6:	4158      	adcs	r0, r3
    a9d8:	b2c0      	uxtb	r0, r0
}
    a9da:	b005      	add	sp, #20
    a9dc:	bd00      	pop	{pc}
    a9de:	46c0      	nop			; (mov r8, r8)
    a9e0:	20002150 	.word	0x20002150
    a9e4:	0000ec01 	.word	0x0000ec01
    a9e8:	0000a5d5 	.word	0x0000a5d5
    a9ec:	0000e2f9 	.word	0x0000e2f9
    a9f0:	0000ec29 	.word	0x0000ec29

0000a9f4 <PHY_RandomReq>:
{
    a9f4:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    a9f6:	4b03      	ldr	r3, [pc, #12]	; (aa04 <PHY_RandomReq+0x10>)
    a9f8:	4798      	blx	r3
    a9fa:	0004      	movs	r4, r0
	RADIO_RxHandler();
    a9fc:	4b02      	ldr	r3, [pc, #8]	; (aa08 <PHY_RandomReq+0x14>)
    a9fe:	4798      	blx	r3
}
    aa00:	0020      	movs	r0, r4
    aa02:	bd10      	pop	{r4, pc}
    aa04:	0000d7d9 	.word	0x0000d7d9
    aa08:	0000f1f9 	.word	0x0000f1f9

0000aa0c <PHY_EncryptReq>:
{	
    aa0c:	b510      	push	{r4, lr}
	AESEncode(text,key);
    aa0e:	4b01      	ldr	r3, [pc, #4]	; (aa14 <PHY_EncryptReq+0x8>)
    aa10:	4798      	blx	r3
}
<<<<<<< Updated upstream
=======
00009f18 <MiMAC_ReceivedPacket>:
    9f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f1a:	46c6      	mov	lr, r8
    9f1c:	b500      	push	{lr}
    9f1e:	b088      	sub	sp, #32
    9f20:	22ff      	movs	r2, #255	; 0xff
    9f22:	4bcc      	ldr	r3, [pc, #816]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    9f24:	701a      	strb	r2, [r3, #0]
    9f26:	4bcc      	ldr	r3, [pc, #816]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	d000      	beq.n	9f30 <MiMAC_ReceivedPacket+0x18>
    9f2e:	e354      	b.n	a5da <MiMAC_ReceivedPacket+0x6c2>
    9f30:	2302      	movs	r3, #2
    9f32:	33ff      	adds	r3, #255	; 0xff
    9f34:	4ac8      	ldr	r2, [pc, #800]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    9f36:	5cd3      	ldrb	r3, [r2, r3]
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d10e      	bne.n	9f5a <MiMAC_ReceivedPacket+0x42>
    9f3c:	4bc7      	ldr	r3, [pc, #796]	; (a25c <MiMAC_ReceivedPacket+0x344>)
    9f3e:	5cd3      	ldrb	r3, [r2, r3]
    9f40:	2b00      	cmp	r3, #0
    9f42:	d140      	bne.n	9fc6 <MiMAC_ReceivedPacket+0xae>
    9f44:	4bc6      	ldr	r3, [pc, #792]	; (a260 <MiMAC_ReceivedPacket+0x348>)
    9f46:	5cd3      	ldrb	r3, [r2, r3]
    9f48:	2400      	movs	r4, #0
    9f4a:	2203      	movs	r2, #3
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d105      	bne.n	9f5c <MiMAC_ReceivedPacket+0x44>
    9f50:	0020      	movs	r0, r4
    9f52:	b008      	add	sp, #32
    9f54:	bc04      	pop	{r2}
    9f56:	4690      	mov	r8, r2
    9f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f5a:	2201      	movs	r2, #1
    9f5c:	4bbd      	ldr	r3, [pc, #756]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    9f5e:	701a      	strb	r2, [r3, #0]
    9f60:	2400      	movs	r4, #0
    9f62:	2a03      	cmp	r2, #3
    9f64:	d8f4      	bhi.n	9f50 <MiMAC_ReceivedPacket+0x38>
    9f66:	0010      	movs	r0, r2
    9f68:	0211      	lsls	r1, r2, #8
    9f6a:	1889      	adds	r1, r1, r2
    9f6c:	4bba      	ldr	r3, [pc, #744]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    9f6e:	185b      	adds	r3, r3, r1
    9f70:	789d      	ldrb	r5, [r3, #2]
    9f72:	2440      	movs	r4, #64	; 0x40
    9f74:	4025      	ands	r5, r4
    9f76:	49bb      	ldr	r1, [pc, #748]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    9f78:	2400      	movs	r4, #0
    9f7a:	700c      	strb	r4, [r1, #0]
    9f7c:	73cc      	strb	r4, [r1, #15]
    9f7e:	78db      	ldrb	r3, [r3, #3]
    9f80:	2133      	movs	r1, #51	; 0x33
    9f82:	438b      	bics	r3, r1
    9f84:	b2d9      	uxtb	r1, r3
    9f86:	2988      	cmp	r1, #136	; 0x88
    9f88:	d100      	bne.n	9f8c <MiMAC_ReceivedPacket+0x74>
    9f8a:	e12f      	b.n	a1ec <MiMAC_ReceivedPacket+0x2d4>
    9f8c:	d91d      	bls.n	9fca <MiMAC_ReceivedPacket+0xb2>
    9f8e:	b2d9      	uxtb	r1, r3
    9f90:	29c8      	cmp	r1, #200	; 0xc8
    9f92:	d06f      	beq.n	a074 <MiMAC_ReceivedPacket+0x15c>
    9f94:	29cc      	cmp	r1, #204	; 0xcc
    9f96:	d100      	bne.n	9f9a <MiMAC_ReceivedPacket+0x82>
    9f98:	e0b9      	b.n	a10e <MiMAC_ReceivedPacket+0x1f6>
    9f9a:	298c      	cmp	r1, #140	; 0x8c
    9f9c:	d100      	bne.n	9fa0 <MiMAC_ReceivedPacket+0x88>
    9f9e:	e1aa      	b.n	a2f6 <MiMAC_ReceivedPacket+0x3de>
    9fa0:	4bb1      	ldr	r3, [pc, #708]	; (a268 <MiMAC_ReceivedPacket+0x350>)
    9fa2:	4798      	blx	r3
    9fa4:	4bab      	ldr	r3, [pc, #684]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    9fa6:	781a      	ldrb	r2, [r3, #0]
    9fa8:	0213      	lsls	r3, r2, #8
    9faa:	189a      	adds	r2, r3, r2
    9fac:	4baa      	ldr	r3, [pc, #680]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    9fae:	189b      	adds	r3, r3, r2
    9fb0:	789b      	ldrb	r3, [r3, #2]
    9fb2:	2400      	movs	r4, #0
    9fb4:	069b      	lsls	r3, r3, #26
    9fb6:	d5cb      	bpl.n	9f50 <MiMAC_ReceivedPacket+0x38>
    9fb8:	a807      	add	r0, sp, #28
    9fba:	2300      	movs	r3, #0
    9fbc:	7003      	strb	r3, [r0, #0]
    9fbe:	8043      	strh	r3, [r0, #2]
    9fc0:	4baa      	ldr	r3, [pc, #680]	; (a26c <MiMAC_ReceivedPacket+0x354>)
    9fc2:	4798      	blx	r3
    9fc4:	e7c4      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    9fc6:	2202      	movs	r2, #2
    9fc8:	e7c8      	b.n	9f5c <MiMAC_ReceivedPacket+0x44>
    9fca:	2b08      	cmp	r3, #8
    9fcc:	d100      	bne.n	9fd0 <MiMAC_ReceivedPacket+0xb8>
    9fce:	e1e1      	b.n	a394 <MiMAC_ReceivedPacket+0x47c>
    9fd0:	2980      	cmp	r1, #128	; 0x80
    9fd2:	d1e5      	bne.n	9fa0 <MiMAC_ReceivedPacket+0x88>
    9fd4:	4ba3      	ldr	r3, [pc, #652]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    9fd6:	7819      	ldrb	r1, [r3, #0]
    9fd8:	2404      	movs	r4, #4
    9fda:	4321      	orrs	r1, r4
    9fdc:	2480      	movs	r4, #128	; 0x80
    9fde:	4264      	negs	r4, r4
    9fe0:	4321      	orrs	r1, r4
    9fe2:	7019      	strb	r1, [r3, #0]
    9fe4:	2101      	movs	r1, #1
    9fe6:	73d9      	strb	r1, [r3, #15]
    9fe8:	4c9b      	ldr	r4, [pc, #620]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    9fea:	0211      	lsls	r1, r2, #8
    9fec:	1888      	adds	r0, r1, r2
    9fee:	1821      	adds	r1, r4, r0
    9ff0:	794d      	ldrb	r5, [r1, #5]
    9ff2:	741d      	strb	r5, [r3, #16]
    9ff4:	7989      	ldrb	r1, [r1, #6]
    9ff6:	7459      	strb	r1, [r3, #17]
    9ff8:	0211      	lsls	r1, r2, #8
    9ffa:	188a      	adds	r2, r1, r2
    9ffc:	1dd1      	adds	r1, r2, #7
    9ffe:	1909      	adds	r1, r1, r4
    a000:	6059      	str	r1, [r3, #4]
    a002:	5d01      	ldrb	r1, [r0, r4]
    a004:	390b      	subs	r1, #11
    a006:	7319      	strb	r1, [r3, #12]
    a008:	3209      	adds	r2, #9
    a00a:	1912      	adds	r2, r2, r4
    a00c:	609a      	str	r2, [r3, #8]
    a00e:	4b91      	ldr	r3, [pc, #580]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a010:	781a      	ldrb	r2, [r3, #0]
    a012:	0213      	lsls	r3, r2, #8
    a014:	189a      	adds	r2, r3, r2
    a016:	4b90      	ldr	r3, [pc, #576]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a018:	189b      	adds	r3, r3, r2
    a01a:	789b      	ldrb	r3, [r3, #2]
    a01c:	071b      	lsls	r3, r3, #28
    a01e:	d500      	bpl.n	a022 <MiMAC_ReceivedPacket+0x10a>
    a020:	e1d9      	b.n	a3d6 <MiMAC_ReceivedPacket+0x4be>
    a022:	4b8c      	ldr	r3, [pc, #560]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a024:	7818      	ldrb	r0, [r3, #0]
    a026:	0202      	lsls	r2, r0, #8
    a028:	1812      	adds	r2, r2, r0
    a02a:	4b8b      	ldr	r3, [pc, #556]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a02c:	189b      	adds	r3, r3, r2
    a02e:	7899      	ldrb	r1, [r3, #2]
    a030:	2307      	movs	r3, #7
    a032:	400b      	ands	r3, r1
    a034:	2b01      	cmp	r3, #1
    a036:	d100      	bne.n	a03a <MiMAC_ReceivedPacket+0x122>
    a038:	e24e      	b.n	a4d8 <MiMAC_ReceivedPacket+0x5c0>
    a03a:	2b00      	cmp	r3, #0
    a03c:	d100      	bne.n	a040 <MiMAC_ReceivedPacket+0x128>
    a03e:	e283      	b.n	a548 <MiMAC_ReceivedPacket+0x630>
    a040:	2b02      	cmp	r3, #2
    a042:	d100      	bne.n	a046 <MiMAC_ReceivedPacket+0x12e>
    a044:	e286      	b.n	a554 <MiMAC_ReceivedPacket+0x63c>
    a046:	2b03      	cmp	r3, #3
    a048:	d100      	bne.n	a04c <MiMAC_ReceivedPacket+0x134>
    a04a:	e275      	b.n	a538 <MiMAC_ReceivedPacket+0x620>
    a04c:	4b86      	ldr	r3, [pc, #536]	; (a268 <MiMAC_ReceivedPacket+0x350>)
    a04e:	4798      	blx	r3
    a050:	4b80      	ldr	r3, [pc, #512]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a052:	781a      	ldrb	r2, [r3, #0]
    a054:	0213      	lsls	r3, r2, #8
    a056:	189a      	adds	r2, r3, r2
    a058:	4b7f      	ldr	r3, [pc, #508]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a05a:	189b      	adds	r3, r3, r2
    a05c:	789b      	ldrb	r3, [r3, #2]
    a05e:	2400      	movs	r4, #0
    a060:	069b      	lsls	r3, r3, #26
    a062:	d400      	bmi.n	a066 <MiMAC_ReceivedPacket+0x14e>
    a064:	e774      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a066:	a807      	add	r0, sp, #28
    a068:	2300      	movs	r3, #0
    a06a:	7003      	strb	r3, [r0, #0]
    a06c:	8043      	strh	r3, [r0, #2]
    a06e:	4b7f      	ldr	r3, [pc, #508]	; (a26c <MiMAC_ReceivedPacket+0x354>)
    a070:	4798      	blx	r3
    a072:	e76d      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a074:	0211      	lsls	r1, r2, #8
    a076:	1889      	adds	r1, r1, r2
    a078:	4b77      	ldr	r3, [pc, #476]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a07a:	185b      	adds	r3, r3, r1
    a07c:	79dc      	ldrb	r4, [r3, #7]
    a07e:	2cff      	cmp	r4, #255	; 0xff
    a080:	d01e      	beq.n	a0c0 <MiMAC_ReceivedPacket+0x1a8>
    a082:	4978      	ldr	r1, [pc, #480]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a084:	780e      	ldrb	r6, [r1, #0]
    a086:	2380      	movs	r3, #128	; 0x80
    a088:	425b      	negs	r3, r3
    a08a:	4333      	orrs	r3, r6
    a08c:	700b      	strb	r3, [r1, #0]
    a08e:	2d00      	cmp	r5, #0
    a090:	d000      	beq.n	a094 <MiMAC_ReceivedPacket+0x17c>
    a092:	e27d      	b.n	a590 <MiMAC_ReceivedPacket+0x678>
    a094:	4973      	ldr	r1, [pc, #460]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a096:	4c70      	ldr	r4, [pc, #448]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a098:	0203      	lsls	r3, r0, #8
    a09a:	1818      	adds	r0, r3, r0
    a09c:	1823      	adds	r3, r4, r0
    a09e:	7a5d      	ldrb	r5, [r3, #9]
    a0a0:	740d      	strb	r5, [r1, #16]
    a0a2:	7a9b      	ldrb	r3, [r3, #10]
    a0a4:	744b      	strb	r3, [r1, #17]
    a0a6:	0213      	lsls	r3, r2, #8
    a0a8:	189a      	adds	r2, r3, r2
    a0aa:	0013      	movs	r3, r2
    a0ac:	330b      	adds	r3, #11
    a0ae:	191b      	adds	r3, r3, r4
    a0b0:	604b      	str	r3, [r1, #4]
    a0b2:	5d03      	ldrb	r3, [r0, r4]
    a0b4:	3b15      	subs	r3, #21
    a0b6:	730b      	strb	r3, [r1, #12]
    a0b8:	3213      	adds	r2, #19
    a0ba:	1912      	adds	r2, r2, r4
    a0bc:	608a      	str	r2, [r1, #8]
    a0be:	e043      	b.n	a148 <MiMAC_ReceivedPacket+0x230>
    a0c0:	0211      	lsls	r1, r2, #8
    a0c2:	1889      	adds	r1, r1, r2
    a0c4:	4b64      	ldr	r3, [pc, #400]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a0c6:	185b      	adds	r3, r3, r1
    a0c8:	7a1b      	ldrb	r3, [r3, #8]
    a0ca:	2bff      	cmp	r3, #255	; 0xff
    a0cc:	d1d9      	bne.n	a082 <MiMAC_ReceivedPacket+0x16a>
    a0ce:	4965      	ldr	r1, [pc, #404]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a0d0:	780b      	ldrb	r3, [r1, #0]
    a0d2:	2404      	movs	r4, #4
    a0d4:	4323      	orrs	r3, r4
    a0d6:	2480      	movs	r4, #128	; 0x80
    a0d8:	4264      	negs	r4, r4
    a0da:	4323      	orrs	r3, r4
    a0dc:	700b      	strb	r3, [r1, #0]
    a0de:	2d00      	cmp	r5, #0
    a0e0:	d000      	beq.n	a0e4 <MiMAC_ReceivedPacket+0x1cc>
    a0e2:	e264      	b.n	a5ae <MiMAC_ReceivedPacket+0x696>
    a0e4:	e7d6      	b.n	a094 <MiMAC_ReceivedPacket+0x17c>
    a0e6:	4b60      	ldr	r3, [pc, #384]	; (a268 <MiMAC_ReceivedPacket+0x350>)
    a0e8:	4798      	blx	r3
    a0ea:	4b5a      	ldr	r3, [pc, #360]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a0ec:	781a      	ldrb	r2, [r3, #0]
    a0ee:	0213      	lsls	r3, r2, #8
    a0f0:	189a      	adds	r2, r3, r2
    a0f2:	4b59      	ldr	r3, [pc, #356]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a0f4:	189b      	adds	r3, r3, r2
    a0f6:	789b      	ldrb	r3, [r3, #2]
    a0f8:	2400      	movs	r4, #0
    a0fa:	069b      	lsls	r3, r3, #26
    a0fc:	d400      	bmi.n	a100 <MiMAC_ReceivedPacket+0x1e8>
    a0fe:	e727      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a100:	a807      	add	r0, sp, #28
    a102:	2300      	movs	r3, #0
    a104:	7003      	strb	r3, [r0, #0]
    a106:	8043      	strh	r3, [r0, #2]
    a108:	4b58      	ldr	r3, [pc, #352]	; (a26c <MiMAC_ReceivedPacket+0x354>)
    a10a:	4798      	blx	r3
    a10c:	e720      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a10e:	4955      	ldr	r1, [pc, #340]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a110:	780c      	ldrb	r4, [r1, #0]
    a112:	2380      	movs	r3, #128	; 0x80
    a114:	425b      	negs	r3, r3
    a116:	4323      	orrs	r3, r4
    a118:	700b      	strb	r3, [r1, #0]
    a11a:	2d00      	cmp	r5, #0
    a11c:	d133      	bne.n	a186 <MiMAC_ReceivedPacket+0x26e>
    a11e:	4951      	ldr	r1, [pc, #324]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a120:	4c4d      	ldr	r4, [pc, #308]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a122:	0213      	lsls	r3, r2, #8
    a124:	1898      	adds	r0, r3, r2
    a126:	1823      	adds	r3, r4, r0
    a128:	7bdd      	ldrb	r5, [r3, #15]
    a12a:	740d      	strb	r5, [r1, #16]
    a12c:	7c1b      	ldrb	r3, [r3, #16]
    a12e:	744b      	strb	r3, [r1, #17]
    a130:	0213      	lsls	r3, r2, #8
    a132:	189a      	adds	r2, r3, r2
    a134:	0013      	movs	r3, r2
    a136:	3311      	adds	r3, #17
    a138:	191b      	adds	r3, r3, r4
    a13a:	604b      	str	r3, [r1, #4]
    a13c:	5d03      	ldrb	r3, [r0, r4]
    a13e:	3b1b      	subs	r3, #27
    a140:	730b      	strb	r3, [r1, #12]
    a142:	3219      	adds	r2, #25
    a144:	1912      	adds	r2, r2, r4
    a146:	608a      	str	r2, [r1, #8]
    a148:	4b42      	ldr	r3, [pc, #264]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a14a:	781a      	ldrb	r2, [r3, #0]
    a14c:	0213      	lsls	r3, r2, #8
    a14e:	189a      	adds	r2, r3, r2
    a150:	4b41      	ldr	r3, [pc, #260]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a152:	189b      	adds	r3, r3, r2
    a154:	789b      	ldrb	r3, [r3, #2]
    a156:	071b      	lsls	r3, r3, #28
    a158:	d400      	bmi.n	a15c <MiMAC_ReceivedPacket+0x244>
    a15a:	e762      	b.n	a022 <MiMAC_ReceivedPacket+0x10a>
    a15c:	4b41      	ldr	r3, [pc, #260]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a15e:	689b      	ldr	r3, [r3, #8]
    a160:	785f      	ldrb	r7, [r3, #1]
    a162:	023f      	lsls	r7, r7, #8
    a164:	781a      	ldrb	r2, [r3, #0]
    a166:	4317      	orrs	r7, r2
    a168:	789a      	ldrb	r2, [r3, #2]
    a16a:	0412      	lsls	r2, r2, #16
    a16c:	4940      	ldr	r1, [pc, #256]	; (a270 <MiMAC_ReceivedPacket+0x358>)
    a16e:	400f      	ands	r7, r1
    a170:	4317      	orrs	r7, r2
    a172:	78db      	ldrb	r3, [r3, #3]
    a174:	061b      	lsls	r3, r3, #24
    a176:	023f      	lsls	r7, r7, #8
    a178:	0a3f      	lsrs	r7, r7, #8
    a17a:	431f      	orrs	r7, r3
    a17c:	4d3d      	ldr	r5, [pc, #244]	; (a274 <MiMAC_ReceivedPacket+0x35c>)
    a17e:	2600      	movs	r6, #0
    a180:	2400      	movs	r4, #0
    a182:	46a8      	mov	r8, r5
    a184:	e141      	b.n	a40a <MiMAC_ReceivedPacket+0x4f2>
    a186:	0211      	lsls	r1, r2, #8
    a188:	1889      	adds	r1, r1, r2
    a18a:	3107      	adds	r1, #7
    a18c:	4a32      	ldr	r2, [pc, #200]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a18e:	1889      	adds	r1, r1, r2
    a190:	4839      	ldr	r0, [pc, #228]	; (a278 <MiMAC_ReceivedPacket+0x360>)
    a192:	4b3a      	ldr	r3, [pc, #232]	; (a27c <MiMAC_ReceivedPacket+0x364>)
    a194:	4798      	blx	r3
    a196:	1e04      	subs	r4, r0, #0
    a198:	d015      	beq.n	a1c6 <MiMAC_ReceivedPacket+0x2ae>
    a19a:	4b2e      	ldr	r3, [pc, #184]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a19c:	7818      	ldrb	r0, [r3, #0]
    a19e:	4a31      	ldr	r2, [pc, #196]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a1a0:	492d      	ldr	r1, [pc, #180]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a1a2:	0203      	lsls	r3, r0, #8
    a1a4:	181b      	adds	r3, r3, r0
    a1a6:	18c8      	adds	r0, r1, r3
    a1a8:	7944      	ldrb	r4, [r0, #5]
    a1aa:	7414      	strb	r4, [r2, #16]
    a1ac:	7980      	ldrb	r0, [r0, #6]
    a1ae:	7450      	strb	r0, [r2, #17]
    a1b0:	0018      	movs	r0, r3
    a1b2:	300f      	adds	r0, #15
    a1b4:	1840      	adds	r0, r0, r1
    a1b6:	6050      	str	r0, [r2, #4]
    a1b8:	5c58      	ldrb	r0, [r3, r1]
    a1ba:	3819      	subs	r0, #25
    a1bc:	7310      	strb	r0, [r2, #12]
    a1be:	3317      	adds	r3, #23
    a1c0:	185b      	adds	r3, r3, r1
    a1c2:	6093      	str	r3, [r2, #8]
    a1c4:	e7c0      	b.n	a148 <MiMAC_ReceivedPacket+0x230>
    a1c6:	4b28      	ldr	r3, [pc, #160]	; (a268 <MiMAC_ReceivedPacket+0x350>)
    a1c8:	4798      	blx	r3
    a1ca:	4b22      	ldr	r3, [pc, #136]	; (a254 <MiMAC_ReceivedPacket+0x33c>)
    a1cc:	781a      	ldrb	r2, [r3, #0]
    a1ce:	0213      	lsls	r3, r2, #8
    a1d0:	189a      	adds	r2, r3, r2
    a1d2:	4b21      	ldr	r3, [pc, #132]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a1d4:	189b      	adds	r3, r3, r2
    a1d6:	789b      	ldrb	r3, [r3, #2]
    a1d8:	069b      	lsls	r3, r3, #26
    a1da:	d400      	bmi.n	a1de <MiMAC_ReceivedPacket+0x2c6>
    a1dc:	e6b8      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a1de:	a807      	add	r0, sp, #28
    a1e0:	2300      	movs	r3, #0
    a1e2:	7003      	strb	r3, [r0, #0]
    a1e4:	8043      	strh	r3, [r0, #2]
    a1e6:	4b21      	ldr	r3, [pc, #132]	; (a26c <MiMAC_ReceivedPacket+0x354>)
    a1e8:	4798      	blx	r3
    a1ea:	e6b1      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a1ec:	0211      	lsls	r1, r2, #8
    a1ee:	1889      	adds	r1, r1, r2
    a1f0:	4b19      	ldr	r3, [pc, #100]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a1f2:	185b      	adds	r3, r3, r1
    a1f4:	79dc      	ldrb	r4, [r3, #7]
    a1f6:	2cff      	cmp	r4, #255	; 0xff
    a1f8:	d01f      	beq.n	a23a <MiMAC_ReceivedPacket+0x322>
    a1fa:	4b1a      	ldr	r3, [pc, #104]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a1fc:	781e      	ldrb	r6, [r3, #0]
    a1fe:	2180      	movs	r1, #128	; 0x80
    a200:	4249      	negs	r1, r1
    a202:	4331      	orrs	r1, r6
    a204:	7019      	strb	r1, [r3, #0]
    a206:	2101      	movs	r1, #1
    a208:	73d9      	strb	r1, [r3, #15]
    a20a:	2d00      	cmp	r5, #0
    a20c:	d138      	bne.n	a280 <MiMAC_ReceivedPacket+0x368>
    a20e:	0019      	movs	r1, r3
    a210:	4c11      	ldr	r4, [pc, #68]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a212:	0203      	lsls	r3, r0, #8
    a214:	1818      	adds	r0, r3, r0
    a216:	1823      	adds	r3, r4, r0
    a218:	7a5d      	ldrb	r5, [r3, #9]
    a21a:	740d      	strb	r5, [r1, #16]
    a21c:	7a9b      	ldrb	r3, [r3, #10]
    a21e:	744b      	strb	r3, [r1, #17]
    a220:	0213      	lsls	r3, r2, #8
    a222:	189a      	adds	r2, r3, r2
    a224:	0013      	movs	r3, r2
    a226:	330b      	adds	r3, #11
    a228:	191b      	adds	r3, r3, r4
    a22a:	604b      	str	r3, [r1, #4]
    a22c:	5d03      	ldrb	r3, [r0, r4]
    a22e:	3b0f      	subs	r3, #15
    a230:	730b      	strb	r3, [r1, #12]
    a232:	320d      	adds	r2, #13
    a234:	1912      	adds	r2, r2, r4
    a236:	608a      	str	r2, [r1, #8]
    a238:	e6e9      	b.n	a00e <MiMAC_ReceivedPacket+0xf6>
    a23a:	0211      	lsls	r1, r2, #8
    a23c:	1889      	adds	r1, r1, r2
    a23e:	4b06      	ldr	r3, [pc, #24]	; (a258 <MiMAC_ReceivedPacket+0x340>)
    a240:	185b      	adds	r3, r3, r1
    a242:	7a1b      	ldrb	r3, [r3, #8]
    a244:	2bff      	cmp	r3, #255	; 0xff
    a246:	d1d8      	bne.n	a1fa <MiMAC_ReceivedPacket+0x2e2>
    a248:	4906      	ldr	r1, [pc, #24]	; (a264 <MiMAC_ReceivedPacket+0x34c>)
    a24a:	780b      	ldrb	r3, [r1, #0]
    a24c:	2604      	movs	r6, #4
    a24e:	4333      	orrs	r3, r6
    a250:	700b      	strb	r3, [r1, #0]
    a252:	e7d2      	b.n	a1fa <MiMAC_ReceivedPacket+0x2e2>
    a254:	20000017 	.word	0x20000017
    a258:	20002258 	.word	0x20002258
    a25c:	00000202 	.word	0x00000202
    a260:	00000303 	.word	0x00000303
    a264:	200026a0 	.word	0x200026a0
    a268:	00009e99 	.word	0x00009e99
    a26c:	0000f5b1 	.word	0x0000f5b1
    a270:	ff00ffff 	.word	0xff00ffff
    a274:	20002668 	.word	0x20002668
    a278:	20002250 	.word	0x20002250
    a27c:	0000ad0d 	.word	0x0000ad0d
    a280:	0201      	lsls	r1, r0, #8
    a282:	1809      	adds	r1, r1, r0
    a284:	4bd7      	ldr	r3, [pc, #860]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a286:	185b      	adds	r3, r3, r1
    a288:	7a1b      	ldrb	r3, [r3, #8]
    a28a:	2cff      	cmp	r4, #255	; 0xff
    a28c:	d117      	bne.n	a2be <MiMAC_ReceivedPacket+0x3a6>
    a28e:	2bff      	cmp	r3, #255	; 0xff
    a290:	d115      	bne.n	a2be <MiMAC_ReceivedPacket+0x3a6>
    a292:	49d5      	ldr	r1, [pc, #852]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a294:	4cd3      	ldr	r4, [pc, #844]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a296:	0203      	lsls	r3, r0, #8
    a298:	1818      	adds	r0, r3, r0
    a29a:	1823      	adds	r3, r4, r0
    a29c:	795d      	ldrb	r5, [r3, #5]
    a29e:	740d      	strb	r5, [r1, #16]
    a2a0:	799b      	ldrb	r3, [r3, #6]
    a2a2:	744b      	strb	r3, [r1, #17]
    a2a4:	0213      	lsls	r3, r2, #8
    a2a6:	189a      	adds	r2, r3, r2
    a2a8:	0013      	movs	r3, r2
    a2aa:	3309      	adds	r3, #9
    a2ac:	191b      	adds	r3, r3, r4
    a2ae:	604b      	str	r3, [r1, #4]
    a2b0:	5d03      	ldrb	r3, [r0, r4]
    a2b2:	3b0d      	subs	r3, #13
    a2b4:	730b      	strb	r3, [r1, #12]
    a2b6:	320b      	adds	r2, #11
    a2b8:	1912      	adds	r2, r2, r4
    a2ba:	608a      	str	r2, [r1, #8]
    a2bc:	e6a7      	b.n	a00e <MiMAC_ReceivedPacket+0xf6>
    a2be:	49cb      	ldr	r1, [pc, #812]	; (a5ec <MiMAC_ReceivedPacket+0x6d4>)
    a2c0:	7809      	ldrb	r1, [r1, #0]
    a2c2:	42a1      	cmp	r1, r4
    a2c4:	d103      	bne.n	a2ce <MiMAC_ReceivedPacket+0x3b6>
    a2c6:	49c9      	ldr	r1, [pc, #804]	; (a5ec <MiMAC_ReceivedPacket+0x6d4>)
    a2c8:	7849      	ldrb	r1, [r1, #1]
    a2ca:	4299      	cmp	r1, r3
    a2cc:	d0e1      	beq.n	a292 <MiMAC_ReceivedPacket+0x37a>
    a2ce:	4bc8      	ldr	r3, [pc, #800]	; (a5f0 <MiMAC_ReceivedPacket+0x6d8>)
    a2d0:	4798      	blx	r3
    a2d2:	4bc8      	ldr	r3, [pc, #800]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a2d4:	781a      	ldrb	r2, [r3, #0]
    a2d6:	0213      	lsls	r3, r2, #8
    a2d8:	189a      	adds	r2, r3, r2
    a2da:	4bc2      	ldr	r3, [pc, #776]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a2dc:	189b      	adds	r3, r3, r2
    a2de:	789b      	ldrb	r3, [r3, #2]
    a2e0:	2400      	movs	r4, #0
    a2e2:	069b      	lsls	r3, r3, #26
    a2e4:	d400      	bmi.n	a2e8 <MiMAC_ReceivedPacket+0x3d0>
    a2e6:	e633      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a2e8:	a807      	add	r0, sp, #28
    a2ea:	2300      	movs	r3, #0
    a2ec:	7003      	strb	r3, [r0, #0]
    a2ee:	8043      	strh	r3, [r0, #2]
    a2f0:	4bc1      	ldr	r3, [pc, #772]	; (a5f8 <MiMAC_ReceivedPacket+0x6e0>)
    a2f2:	4798      	blx	r3
    a2f4:	e62c      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a2f6:	4bbc      	ldr	r3, [pc, #752]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a2f8:	781c      	ldrb	r4, [r3, #0]
    a2fa:	2180      	movs	r1, #128	; 0x80
    a2fc:	4249      	negs	r1, r1
    a2fe:	4321      	orrs	r1, r4
    a300:	7019      	strb	r1, [r3, #0]
    a302:	2101      	movs	r1, #1
    a304:	73d9      	strb	r1, [r3, #15]
    a306:	2d00      	cmp	r5, #0
    a308:	d115      	bne.n	a336 <MiMAC_ReceivedPacket+0x41e>
    a30a:	49b7      	ldr	r1, [pc, #732]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a30c:	4cb5      	ldr	r4, [pc, #724]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a30e:	0213      	lsls	r3, r2, #8
    a310:	1898      	adds	r0, r3, r2
    a312:	1823      	adds	r3, r4, r0
    a314:	7b9d      	ldrb	r5, [r3, #14]
    a316:	740d      	strb	r5, [r1, #16]
    a318:	7bdb      	ldrb	r3, [r3, #15]
    a31a:	744b      	strb	r3, [r1, #17]
    a31c:	0213      	lsls	r3, r2, #8
    a31e:	189a      	adds	r2, r3, r2
    a320:	0013      	movs	r3, r2
    a322:	3310      	adds	r3, #16
    a324:	191b      	adds	r3, r3, r4
    a326:	604b      	str	r3, [r1, #4]
    a328:	5d03      	ldrb	r3, [r0, r4]
    a32a:	3b15      	subs	r3, #21
    a32c:	730b      	strb	r3, [r1, #12]
    a32e:	3213      	adds	r2, #19
    a330:	1912      	adds	r2, r2, r4
    a332:	608a      	str	r2, [r1, #8]
    a334:	e66b      	b.n	a00e <MiMAC_ReceivedPacket+0xf6>
    a336:	0211      	lsls	r1, r2, #8
    a338:	1889      	adds	r1, r1, r2
    a33a:	3107      	adds	r1, #7
    a33c:	4aa9      	ldr	r2, [pc, #676]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a33e:	1889      	adds	r1, r1, r2
    a340:	48ae      	ldr	r0, [pc, #696]	; (a5fc <MiMAC_ReceivedPacket+0x6e4>)
    a342:	4baf      	ldr	r3, [pc, #700]	; (a600 <MiMAC_ReceivedPacket+0x6e8>)
    a344:	4798      	blx	r3
    a346:	1e04      	subs	r4, r0, #0
    a348:	d011      	beq.n	a36e <MiMAC_ReceivedPacket+0x456>
    a34a:	4baa      	ldr	r3, [pc, #680]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a34c:	7818      	ldrb	r0, [r3, #0]
    a34e:	4aa6      	ldr	r2, [pc, #664]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a350:	49a4      	ldr	r1, [pc, #656]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a352:	0203      	lsls	r3, r0, #8
    a354:	181b      	adds	r3, r3, r0
    a356:	18c8      	adds	r0, r1, r3
    a358:	7944      	ldrb	r4, [r0, #5]
    a35a:	7414      	strb	r4, [r2, #16]
    a35c:	7980      	ldrb	r0, [r0, #6]
    a35e:	7450      	strb	r0, [r2, #17]
    a360:	5c58      	ldrb	r0, [r3, r1]
    a362:	3813      	subs	r0, #19
    a364:	7310      	strb	r0, [r2, #12]
    a366:	3311      	adds	r3, #17
    a368:	185b      	adds	r3, r3, r1
    a36a:	6093      	str	r3, [r2, #8]
    a36c:	e64f      	b.n	a00e <MiMAC_ReceivedPacket+0xf6>
    a36e:	4ba0      	ldr	r3, [pc, #640]	; (a5f0 <MiMAC_ReceivedPacket+0x6d8>)
    a370:	4798      	blx	r3
    a372:	4ba0      	ldr	r3, [pc, #640]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a374:	781a      	ldrb	r2, [r3, #0]
    a376:	0213      	lsls	r3, r2, #8
    a378:	189a      	adds	r2, r3, r2
    a37a:	4b9a      	ldr	r3, [pc, #616]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a37c:	189b      	adds	r3, r3, r2
    a37e:	789b      	ldrb	r3, [r3, #2]
    a380:	069b      	lsls	r3, r3, #26
    a382:	d400      	bmi.n	a386 <MiMAC_ReceivedPacket+0x46e>
    a384:	e5e4      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a386:	a807      	add	r0, sp, #28
    a388:	2300      	movs	r3, #0
    a38a:	7003      	strb	r3, [r0, #0]
    a38c:	8043      	strh	r3, [r0, #2]
    a38e:	4b9a      	ldr	r3, [pc, #616]	; (a5f8 <MiMAC_ReceivedPacket+0x6e0>)
    a390:	4798      	blx	r3
    a392:	e5dd      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a394:	0211      	lsls	r1, r2, #8
    a396:	1889      	adds	r1, r1, r2
    a398:	4b92      	ldr	r3, [pc, #584]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a39a:	185b      	adds	r3, r3, r1
    a39c:	79db      	ldrb	r3, [r3, #7]
    a39e:	2bff      	cmp	r3, #255	; 0xff
    a3a0:	d00c      	beq.n	a3bc <MiMAC_ReceivedPacket+0x4a4>
    a3a2:	4991      	ldr	r1, [pc, #580]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a3a4:	4c8f      	ldr	r4, [pc, #572]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a3a6:	0203      	lsls	r3, r0, #8
    a3a8:	1818      	adds	r0, r3, r0
    a3aa:	5d03      	ldrb	r3, [r0, r4]
    a3ac:	3b0a      	subs	r3, #10
    a3ae:	730b      	strb	r3, [r1, #12]
    a3b0:	0213      	lsls	r3, r2, #8
    a3b2:	189a      	adds	r2, r3, r2
    a3b4:	3209      	adds	r2, #9
    a3b6:	1912      	adds	r2, r2, r4
    a3b8:	608a      	str	r2, [r1, #8]
    a3ba:	e628      	b.n	a00e <MiMAC_ReceivedPacket+0xf6>
    a3bc:	0211      	lsls	r1, r2, #8
    a3be:	1889      	adds	r1, r1, r2
    a3c0:	4b88      	ldr	r3, [pc, #544]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a3c2:	185b      	adds	r3, r3, r1
    a3c4:	7a1b      	ldrb	r3, [r3, #8]
    a3c6:	2bff      	cmp	r3, #255	; 0xff
    a3c8:	d1eb      	bne.n	a3a2 <MiMAC_ReceivedPacket+0x48a>
    a3ca:	4987      	ldr	r1, [pc, #540]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a3cc:	780b      	ldrb	r3, [r1, #0]
    a3ce:	2404      	movs	r4, #4
    a3d0:	4323      	orrs	r3, r4
    a3d2:	700b      	strb	r3, [r1, #0]
    a3d4:	e7e5      	b.n	a3a2 <MiMAC_ReceivedPacket+0x48a>
    a3d6:	4b86      	ldr	r3, [pc, #536]	; (a5f0 <MiMAC_ReceivedPacket+0x6d8>)
    a3d8:	4798      	blx	r3
    a3da:	4b86      	ldr	r3, [pc, #536]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a3dc:	781a      	ldrb	r2, [r3, #0]
    a3de:	0213      	lsls	r3, r2, #8
    a3e0:	189a      	adds	r2, r3, r2
    a3e2:	4b80      	ldr	r3, [pc, #512]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a3e4:	189b      	adds	r3, r3, r2
    a3e6:	789b      	ldrb	r3, [r3, #2]
    a3e8:	069b      	lsls	r3, r3, #26
    a3ea:	d401      	bmi.n	a3f0 <MiMAC_ReceivedPacket+0x4d8>
    a3ec:	2400      	movs	r4, #0
    a3ee:	e5af      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a3f0:	a807      	add	r0, sp, #28
    a3f2:	2300      	movs	r3, #0
    a3f4:	7003      	strb	r3, [r0, #0]
    a3f6:	8043      	strh	r3, [r0, #2]
    a3f8:	4b7f      	ldr	r3, [pc, #508]	; (a5f8 <MiMAC_ReceivedPacket+0x6e0>)
    a3fa:	4798      	blx	r3
    a3fc:	e7f6      	b.n	a3ec <MiMAC_ReceivedPacket+0x4d4>
    a3fe:	3401      	adds	r4, #1
    a400:	b2e4      	uxtb	r4, r4
    a402:	3601      	adds	r6, #1
    a404:	350a      	adds	r5, #10
    a406:	2c05      	cmp	r4, #5
    a408:	d014      	beq.n	a434 <MiMAC_ReceivedPacket+0x51c>
    a40a:	00b3      	lsls	r3, r6, #2
    a40c:	199b      	adds	r3, r3, r6
    a40e:	005b      	lsls	r3, r3, #1
    a410:	4443      	add	r3, r8
    a412:	7a1b      	ldrb	r3, [r3, #8]
    a414:	09db      	lsrs	r3, r3, #7
    a416:	d0f2      	beq.n	a3fe <MiMAC_ReceivedPacket+0x4e6>
    a418:	4b73      	ldr	r3, [pc, #460]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a41a:	6859      	ldr	r1, [r3, #4]
    a41c:	0028      	movs	r0, r5
    a41e:	4b78      	ldr	r3, [pc, #480]	; (a600 <MiMAC_ReceivedPacket+0x6e8>)
    a420:	4798      	blx	r3
    a422:	2800      	cmp	r0, #0
    a424:	d0eb      	beq.n	a3fe <MiMAC_ReceivedPacket+0x4e6>
    a426:	2c04      	cmp	r4, #4
    a428:	d804      	bhi.n	a434 <MiMAC_ReceivedPacket+0x51c>
    a42a:	00a3      	lsls	r3, r4, #2
    a42c:	4a75      	ldr	r2, [pc, #468]	; (a604 <MiMAC_ReceivedPacket+0x6ec>)
    a42e:	589b      	ldr	r3, [r3, r2]
    a430:	42bb      	cmp	r3, r7
    a432:	d22d      	bcs.n	a490 <MiMAC_ReceivedPacket+0x578>
    a434:	496c      	ldr	r1, [pc, #432]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a436:	7b0b      	ldrb	r3, [r1, #12]
    a438:	3b05      	subs	r3, #5
    a43a:	b2db      	uxtb	r3, r3
    a43c:	730b      	strb	r3, [r1, #12]
    a43e:	6888      	ldr	r0, [r1, #8]
    a440:	18c3      	adds	r3, r0, r3
    a442:	785d      	ldrb	r5, [r3, #1]
    a444:	4a70      	ldr	r2, [pc, #448]	; (a608 <MiMAC_ReceivedPacket+0x6f0>)
    a446:	7015      	strb	r5, [r2, #0]
    a448:	789d      	ldrb	r5, [r3, #2]
    a44a:	7055      	strb	r5, [r2, #1]
    a44c:	78dd      	ldrb	r5, [r3, #3]
    a44e:	7095      	strb	r5, [r2, #2]
    a450:	791b      	ldrb	r3, [r3, #4]
    a452:	70d3      	strb	r3, [r2, #3]
    a454:	684a      	ldr	r2, [r1, #4]
    a456:	310c      	adds	r1, #12
    a458:	3005      	adds	r0, #5
    a45a:	4b66      	ldr	r3, [pc, #408]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a45c:	781d      	ldrb	r5, [r3, #0]
    a45e:	022b      	lsls	r3, r5, #8
    a460:	195d      	adds	r5, r3, r5
    a462:	4b60      	ldr	r3, [pc, #384]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a464:	195b      	adds	r3, r3, r5
    a466:	789b      	ldrb	r3, [r3, #2]
    a468:	9300      	str	r3, [sp, #0]
    a46a:	003b      	movs	r3, r7
    a46c:	4d67      	ldr	r5, [pc, #412]	; (a60c <MiMAC_ReceivedPacket+0x6f4>)
    a46e:	47a8      	blx	r5
    a470:	2800      	cmp	r0, #0
    a472:	d01f      	beq.n	a4b4 <MiMAC_ReceivedPacket+0x59c>
    a474:	2c04      	cmp	r4, #4
    a476:	d802      	bhi.n	a47e <MiMAC_ReceivedPacket+0x566>
    a478:	00a4      	lsls	r4, r4, #2
    a47a:	4b62      	ldr	r3, [pc, #392]	; (a604 <MiMAC_ReceivedPacket+0x6ec>)
    a47c:	50e7      	str	r7, [r4, r3]
    a47e:	4b5a      	ldr	r3, [pc, #360]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a480:	689a      	ldr	r2, [r3, #8]
    a482:	3205      	adds	r2, #5
    a484:	609a      	str	r2, [r3, #8]
    a486:	781a      	ldrb	r2, [r3, #0]
    a488:	2108      	movs	r1, #8
    a48a:	430a      	orrs	r2, r1
    a48c:	701a      	strb	r2, [r3, #0]
    a48e:	e5c8      	b.n	a022 <MiMAC_ReceivedPacket+0x10a>
    a490:	4b57      	ldr	r3, [pc, #348]	; (a5f0 <MiMAC_ReceivedPacket+0x6d8>)
    a492:	4798      	blx	r3
    a494:	4b57      	ldr	r3, [pc, #348]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a496:	781a      	ldrb	r2, [r3, #0]
    a498:	0213      	lsls	r3, r2, #8
    a49a:	189a      	adds	r2, r3, r2
    a49c:	4b51      	ldr	r3, [pc, #324]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a49e:	189b      	adds	r3, r3, r2
    a4a0:	789b      	ldrb	r3, [r3, #2]
    a4a2:	069b      	lsls	r3, r3, #26
    a4a4:	d5a2      	bpl.n	a3ec <MiMAC_ReceivedPacket+0x4d4>
    a4a6:	a807      	add	r0, sp, #28
    a4a8:	2300      	movs	r3, #0
    a4aa:	7003      	strb	r3, [r0, #0]
    a4ac:	8043      	strh	r3, [r0, #2]
    a4ae:	4b52      	ldr	r3, [pc, #328]	; (a5f8 <MiMAC_ReceivedPacket+0x6e0>)
    a4b0:	4798      	blx	r3
    a4b2:	e79b      	b.n	a3ec <MiMAC_ReceivedPacket+0x4d4>
    a4b4:	4b4e      	ldr	r3, [pc, #312]	; (a5f0 <MiMAC_ReceivedPacket+0x6d8>)
    a4b6:	4798      	blx	r3
    a4b8:	4b4e      	ldr	r3, [pc, #312]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a4ba:	781a      	ldrb	r2, [r3, #0]
    a4bc:	0213      	lsls	r3, r2, #8
    a4be:	189a      	adds	r2, r3, r2
    a4c0:	4b48      	ldr	r3, [pc, #288]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a4c2:	189b      	adds	r3, r3, r2
    a4c4:	789b      	ldrb	r3, [r3, #2]
    a4c6:	069b      	lsls	r3, r3, #26
    a4c8:	d590      	bpl.n	a3ec <MiMAC_ReceivedPacket+0x4d4>
    a4ca:	a807      	add	r0, sp, #28
    a4cc:	2300      	movs	r3, #0
    a4ce:	7003      	strb	r3, [r0, #0]
    a4d0:	8043      	strh	r3, [r0, #2]
    a4d2:	4b49      	ldr	r3, [pc, #292]	; (a5f8 <MiMAC_ReceivedPacket+0x6e0>)
    a4d4:	4798      	blx	r3
    a4d6:	e789      	b.n	a3ec <MiMAC_ReceivedPacket+0x4d4>
    a4d8:	4a43      	ldr	r2, [pc, #268]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a4da:	7813      	ldrb	r3, [r2, #0]
    a4dc:	2403      	movs	r4, #3
    a4de:	43a3      	bics	r3, r4
    a4e0:	7013      	strb	r3, [r2, #0]
    a4e2:	4c41      	ldr	r4, [pc, #260]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a4e4:	4b3f      	ldr	r3, [pc, #252]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a4e6:	0202      	lsls	r2, r0, #8
    a4e8:	1812      	adds	r2, r2, r0
    a4ea:	5cd5      	ldrb	r5, [r2, r3]
    a4ec:	189b      	adds	r3, r3, r2
    a4ee:	5d5a      	ldrb	r2, [r3, r5]
    a4f0:	73a2      	strb	r2, [r4, #14]
    a4f2:	785b      	ldrb	r3, [r3, #1]
    a4f4:	7363      	strb	r3, [r4, #13]
    a4f6:	2401      	movs	r4, #1
    a4f8:	068b      	lsls	r3, r1, #26
    a4fa:	d400      	bmi.n	a4fe <MiMAC_ReceivedPacket+0x5e6>
    a4fc:	e528      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a4fe:	aa04      	add	r2, sp, #16
    a500:	2400      	movs	r4, #0
    a502:	7254      	strb	r4, [r2, #9]
    a504:	7214      	strb	r4, [r2, #8]
    a506:	233e      	movs	r3, #62	; 0x3e
    a508:	425b      	negs	r3, r3
    a50a:	7013      	strb	r3, [r2, #0]
    a50c:	4b36      	ldr	r3, [pc, #216]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a50e:	6859      	ldr	r1, [r3, #4]
    a510:	9105      	str	r1, [sp, #20]
    a512:	8a1b      	ldrh	r3, [r3, #16]
    a514:	8153      	strh	r3, [r2, #10]
    a516:	4b3e      	ldr	r3, [pc, #248]	; (a610 <MiMAC_ReceivedPacket+0x6f8>)
    a518:	0205      	lsls	r5, r0, #8
    a51a:	182d      	adds	r5, r5, r0
    a51c:	4831      	ldr	r0, [pc, #196]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a51e:	1940      	adds	r0, r0, r5
    a520:	7900      	ldrb	r0, [r0, #4]
    a522:	7018      	strb	r0, [r3, #0]
    a524:	9402      	str	r4, [sp, #8]
    a526:	9401      	str	r4, [sp, #4]
    a528:	2001      	movs	r0, #1
    a52a:	9000      	str	r0, [sp, #0]
    a52c:	9804      	ldr	r0, [sp, #16]
    a52e:	9a06      	ldr	r2, [sp, #24]
    a530:	4c38      	ldr	r4, [pc, #224]	; (a614 <MiMAC_ReceivedPacket+0x6fc>)
    a532:	47a0      	blx	r4
    a534:	2401      	movs	r4, #1
    a536:	e50b      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a538:	4a2b      	ldr	r2, [pc, #172]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a53a:	7813      	ldrb	r3, [r2, #0]
    a53c:	2403      	movs	r4, #3
    a53e:	43a3      	bics	r3, r4
    a540:	2401      	movs	r4, #1
    a542:	4323      	orrs	r3, r4
    a544:	7013      	strb	r3, [r2, #0]
    a546:	e7cc      	b.n	a4e2 <MiMAC_ReceivedPacket+0x5ca>
    a548:	4a27      	ldr	r2, [pc, #156]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a54a:	7813      	ldrb	r3, [r2, #0]
    a54c:	2403      	movs	r4, #3
    a54e:	4323      	orrs	r3, r4
    a550:	7013      	strb	r3, [r2, #0]
    a552:	e7c6      	b.n	a4e2 <MiMAC_ReceivedPacket+0x5ca>
    a554:	4a24      	ldr	r2, [pc, #144]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a556:	7813      	ldrb	r3, [r2, #0]
    a558:	2103      	movs	r1, #3
    a55a:	438b      	bics	r3, r1
    a55c:	2102      	movs	r1, #2
    a55e:	430b      	orrs	r3, r1
    a560:	7013      	strb	r3, [r2, #0]
    a562:	6893      	ldr	r3, [r2, #8]
    a564:	781a      	ldrb	r2, [r3, #0]
    a566:	4b2c      	ldr	r3, [pc, #176]	; (a618 <MiMAC_ReceivedPacket+0x700>)
    a568:	781b      	ldrb	r3, [r3, #0]
    a56a:	429a      	cmp	r2, r3
    a56c:	d003      	beq.n	a576 <MiMAC_ReceivedPacket+0x65e>
    a56e:	4b20      	ldr	r3, [pc, #128]	; (a5f0 <MiMAC_ReceivedPacket+0x6d8>)
    a570:	4798      	blx	r3
    a572:	2400      	movs	r4, #0
    a574:	e4ec      	b.n	9f50 <MiMAC_ReceivedPacket+0x38>
    a576:	4b29      	ldr	r3, [pc, #164]	; (a61c <MiMAC_ReceivedPacket+0x704>)
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	2b00      	cmp	r3, #0
    a57c:	d0f7      	beq.n	a56e <MiMAC_ReceivedPacket+0x656>
    a57e:	2400      	movs	r4, #0
    a580:	4b27      	ldr	r3, [pc, #156]	; (a620 <MiMAC_ReceivedPacket+0x708>)
    a582:	601c      	str	r4, [r3, #0]
    a584:	2000      	movs	r0, #0
    a586:	4b27      	ldr	r3, [pc, #156]	; (a624 <MiMAC_ReceivedPacket+0x70c>)
    a588:	4798      	blx	r3
    a58a:	4b24      	ldr	r3, [pc, #144]	; (a61c <MiMAC_ReceivedPacket+0x704>)
    a58c:	701c      	strb	r4, [r3, #0]
    a58e:	e7ee      	b.n	a56e <MiMAC_ReceivedPacket+0x656>
    a590:	0201      	lsls	r1, r0, #8
    a592:	1809      	adds	r1, r1, r0
    a594:	4b13      	ldr	r3, [pc, #76]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a596:	185b      	adds	r3, r3, r1
    a598:	4914      	ldr	r1, [pc, #80]	; (a5ec <MiMAC_ReceivedPacket+0x6d4>)
    a59a:	7849      	ldrb	r1, [r1, #1]
    a59c:	7a1b      	ldrb	r3, [r3, #8]
    a59e:	4299      	cmp	r1, r3
    a5a0:	d000      	beq.n	a5a4 <MiMAC_ReceivedPacket+0x68c>
    a5a2:	e5a0      	b.n	a0e6 <MiMAC_ReceivedPacket+0x1ce>
    a5a4:	4b11      	ldr	r3, [pc, #68]	; (a5ec <MiMAC_ReceivedPacket+0x6d4>)
    a5a6:	781b      	ldrb	r3, [r3, #0]
    a5a8:	42a3      	cmp	r3, r4
    a5aa:	d000      	beq.n	a5ae <MiMAC_ReceivedPacket+0x696>
    a5ac:	e59b      	b.n	a0e6 <MiMAC_ReceivedPacket+0x1ce>
    a5ae:	490e      	ldr	r1, [pc, #56]	; (a5e8 <MiMAC_ReceivedPacket+0x6d0>)
    a5b0:	4c0c      	ldr	r4, [pc, #48]	; (a5e4 <MiMAC_ReceivedPacket+0x6cc>)
    a5b2:	0203      	lsls	r3, r0, #8
    a5b4:	1818      	adds	r0, r3, r0
    a5b6:	1823      	adds	r3, r4, r0
    a5b8:	795d      	ldrb	r5, [r3, #5]
    a5ba:	740d      	strb	r5, [r1, #16]
    a5bc:	799b      	ldrb	r3, [r3, #6]
    a5be:	744b      	strb	r3, [r1, #17]
    a5c0:	0213      	lsls	r3, r2, #8
    a5c2:	189a      	adds	r2, r3, r2
    a5c4:	0013      	movs	r3, r2
    a5c6:	3309      	adds	r3, #9
    a5c8:	191b      	adds	r3, r3, r4
    a5ca:	604b      	str	r3, [r1, #4]
    a5cc:	5d03      	ldrb	r3, [r0, r4]
    a5ce:	3b13      	subs	r3, #19
    a5d0:	730b      	strb	r3, [r1, #12]
    a5d2:	3211      	adds	r2, #17
    a5d4:	1912      	adds	r2, r2, r4
    a5d6:	608a      	str	r2, [r1, #8]
    a5d8:	e5b6      	b.n	a148 <MiMAC_ReceivedPacket+0x230>
    a5da:	2200      	movs	r2, #0
    a5dc:	4b05      	ldr	r3, [pc, #20]	; (a5f4 <MiMAC_ReceivedPacket+0x6dc>)
    a5de:	701a      	strb	r2, [r3, #0]
    a5e0:	e4c1      	b.n	9f66 <MiMAC_ReceivedPacket+0x4e>
    a5e2:	46c0      	nop			; (mov r8, r8)
    a5e4:	20002258 	.word	0x20002258
    a5e8:	200026a0 	.word	0x200026a0
    a5ec:	20002660 	.word	0x20002660
    a5f0:	00009e99 	.word	0x00009e99
    a5f4:	20000017 	.word	0x20000017
    a5f8:	0000f5b1 	.word	0x0000f5b1
    a5fc:	20002250 	.word	0x20002250
    a600:	0000ad0d 	.word	0x0000ad0d
    a604:	200026c8 	.word	0x200026c8
    a608:	2000213c 	.word	0x2000213c
    a60c:	000098dd 	.word	0x000098dd
    a610:	20002140 	.word	0x20002140
    a614:	00009af1 	.word	0x00009af1
    a618:	20001fd4 	.word	0x20001fd4
    a61c:	2000028b 	.word	0x2000028b
    a620:	20002964 	.word	0x20002964
    a624:	00009eb5 	.word	0x00009eb5

0000a628 <MiMAC_Task>:
    a628:	b510      	push	{r4, lr}
    a62a:	4b0b      	ldr	r3, [pc, #44]	; (a658 <MiMAC_Task+0x30>)
    a62c:	4798      	blx	r3
    a62e:	4b0b      	ldr	r3, [pc, #44]	; (a65c <MiMAC_Task+0x34>)
    a630:	681b      	ldr	r3, [r3, #0]
    a632:	2b00      	cmp	r3, #0
    a634:	d003      	beq.n	a63e <MiMAC_Task+0x16>
    a636:	4a0a      	ldr	r2, [pc, #40]	; (a660 <MiMAC_Task+0x38>)
    a638:	7812      	ldrb	r2, [r2, #0]
    a63a:	2a00      	cmp	r2, #0
    a63c:	d100      	bne.n	a640 <MiMAC_Task+0x18>
    a63e:	bd10      	pop	{r4, pc}
    a640:	2100      	movs	r1, #0
    a642:	4a07      	ldr	r2, [pc, #28]	; (a660 <MiMAC_Task+0x38>)
    a644:	7011      	strb	r1, [r2, #0]
    a646:	4a07      	ldr	r2, [pc, #28]	; (a664 <MiMAC_Task+0x3c>)
    a648:	6812      	ldr	r2, [r2, #0]
    a64a:	4907      	ldr	r1, [pc, #28]	; (a668 <MiMAC_Task+0x40>)
    a64c:	7809      	ldrb	r1, [r1, #0]
    a64e:	4807      	ldr	r0, [pc, #28]	; (a66c <MiMAC_Task+0x44>)
    a650:	7800      	ldrb	r0, [r0, #0]
    a652:	4798      	blx	r3
    a654:	e7f3      	b.n	a63e <MiMAC_Task+0x16>
    a656:	46c0      	nop			; (mov r8, r8)
    a658:	0000aac9 	.word	0x0000aac9
    a65c:	20000290 	.word	0x20000290
    a660:	2000028e 	.word	0x2000028e
    a664:	20000298 	.word	0x20000298
    a668:	20002124 	.word	0x20002124
    a66c:	20000294 	.word	0x20000294

0000a670 <phySetChannel>:
    a670:	b500      	push	{lr}
    a672:	b083      	sub	sp, #12
    a674:	4b2f      	ldr	r3, [pc, #188]	; (a734 <phySetChannel+0xc4>)
    a676:	781b      	ldrb	r3, [r3, #0]
    a678:	2b00      	cmp	r3, #0
    a67a:	d007      	beq.n	a68c <phySetChannel+0x1c>
    a67c:	2b19      	cmp	r3, #25
    a67e:	d856      	bhi.n	a72e <phySetChannel+0xbe>
    a680:	009b      	lsls	r3, r3, #2
    a682:	4a2d      	ldr	r2, [pc, #180]	; (a738 <phySetChannel+0xc8>)
    a684:	58d3      	ldr	r3, [r2, r3]
    a686:	469f      	mov	pc, r3
    a688:	4b2c      	ldr	r3, [pc, #176]	; (a73c <phySetChannel+0xcc>)
    a68a:	9301      	str	r3, [sp, #4]
    a68c:	a901      	add	r1, sp, #4
    a68e:	2001      	movs	r0, #1
    a690:	4b2b      	ldr	r3, [pc, #172]	; (a740 <phySetChannel+0xd0>)
    a692:	4798      	blx	r3
    a694:	b003      	add	sp, #12
    a696:	bd00      	pop	{pc}
    a698:	4b2a      	ldr	r3, [pc, #168]	; (a744 <phySetChannel+0xd4>)
    a69a:	9301      	str	r3, [sp, #4]
    a69c:	e7f6      	b.n	a68c <phySetChannel+0x1c>
    a69e:	4b2a      	ldr	r3, [pc, #168]	; (a748 <phySetChannel+0xd8>)
    a6a0:	9301      	str	r3, [sp, #4]
    a6a2:	e7f3      	b.n	a68c <phySetChannel+0x1c>
    a6a4:	4b29      	ldr	r3, [pc, #164]	; (a74c <phySetChannel+0xdc>)
    a6a6:	9301      	str	r3, [sp, #4]
    a6a8:	e7f0      	b.n	a68c <phySetChannel+0x1c>
    a6aa:	4b29      	ldr	r3, [pc, #164]	; (a750 <phySetChannel+0xe0>)
    a6ac:	9301      	str	r3, [sp, #4]
    a6ae:	e7ed      	b.n	a68c <phySetChannel+0x1c>
    a6b0:	4b28      	ldr	r3, [pc, #160]	; (a754 <phySetChannel+0xe4>)
    a6b2:	9301      	str	r3, [sp, #4]
    a6b4:	e7ea      	b.n	a68c <phySetChannel+0x1c>
    a6b6:	4b28      	ldr	r3, [pc, #160]	; (a758 <phySetChannel+0xe8>)
    a6b8:	9301      	str	r3, [sp, #4]
    a6ba:	e7e7      	b.n	a68c <phySetChannel+0x1c>
    a6bc:	4b27      	ldr	r3, [pc, #156]	; (a75c <phySetChannel+0xec>)
    a6be:	9301      	str	r3, [sp, #4]
    a6c0:	e7e4      	b.n	a68c <phySetChannel+0x1c>
    a6c2:	4b27      	ldr	r3, [pc, #156]	; (a760 <phySetChannel+0xf0>)
    a6c4:	9301      	str	r3, [sp, #4]
    a6c6:	e7e1      	b.n	a68c <phySetChannel+0x1c>
    a6c8:	4b26      	ldr	r3, [pc, #152]	; (a764 <phySetChannel+0xf4>)
    a6ca:	9301      	str	r3, [sp, #4]
    a6cc:	e7de      	b.n	a68c <phySetChannel+0x1c>
    a6ce:	4b26      	ldr	r3, [pc, #152]	; (a768 <phySetChannel+0xf8>)
    a6d0:	9301      	str	r3, [sp, #4]
    a6d2:	e7db      	b.n	a68c <phySetChannel+0x1c>
    a6d4:	4b25      	ldr	r3, [pc, #148]	; (a76c <phySetChannel+0xfc>)
    a6d6:	9301      	str	r3, [sp, #4]
    a6d8:	e7d8      	b.n	a68c <phySetChannel+0x1c>
    a6da:	4b25      	ldr	r3, [pc, #148]	; (a770 <phySetChannel+0x100>)
    a6dc:	9301      	str	r3, [sp, #4]
    a6de:	e7d5      	b.n	a68c <phySetChannel+0x1c>
    a6e0:	4b24      	ldr	r3, [pc, #144]	; (a774 <phySetChannel+0x104>)
    a6e2:	9301      	str	r3, [sp, #4]
    a6e4:	e7d2      	b.n	a68c <phySetChannel+0x1c>
    a6e6:	4b24      	ldr	r3, [pc, #144]	; (a778 <phySetChannel+0x108>)
    a6e8:	9301      	str	r3, [sp, #4]
    a6ea:	e7cf      	b.n	a68c <phySetChannel+0x1c>
    a6ec:	4b23      	ldr	r3, [pc, #140]	; (a77c <phySetChannel+0x10c>)
    a6ee:	9301      	str	r3, [sp, #4]
    a6f0:	e7cc      	b.n	a68c <phySetChannel+0x1c>
    a6f2:	4b23      	ldr	r3, [pc, #140]	; (a780 <phySetChannel+0x110>)
    a6f4:	9301      	str	r3, [sp, #4]
    a6f6:	e7c9      	b.n	a68c <phySetChannel+0x1c>
    a6f8:	4b22      	ldr	r3, [pc, #136]	; (a784 <phySetChannel+0x114>)
    a6fa:	9301      	str	r3, [sp, #4]
    a6fc:	e7c6      	b.n	a68c <phySetChannel+0x1c>
    a6fe:	4b22      	ldr	r3, [pc, #136]	; (a788 <phySetChannel+0x118>)
    a700:	9301      	str	r3, [sp, #4]
    a702:	e7c3      	b.n	a68c <phySetChannel+0x1c>
    a704:	4b21      	ldr	r3, [pc, #132]	; (a78c <phySetChannel+0x11c>)
    a706:	9301      	str	r3, [sp, #4]
    a708:	e7c0      	b.n	a68c <phySetChannel+0x1c>
    a70a:	4b21      	ldr	r3, [pc, #132]	; (a790 <phySetChannel+0x120>)
    a70c:	9301      	str	r3, [sp, #4]
    a70e:	e7bd      	b.n	a68c <phySetChannel+0x1c>
    a710:	4b20      	ldr	r3, [pc, #128]	; (a794 <phySetChannel+0x124>)
    a712:	9301      	str	r3, [sp, #4]
    a714:	e7ba      	b.n	a68c <phySetChannel+0x1c>
    a716:	4b20      	ldr	r3, [pc, #128]	; (a798 <phySetChannel+0x128>)
    a718:	9301      	str	r3, [sp, #4]
    a71a:	e7b7      	b.n	a68c <phySetChannel+0x1c>
    a71c:	4b1f      	ldr	r3, [pc, #124]	; (a79c <phySetChannel+0x12c>)
    a71e:	9301      	str	r3, [sp, #4]
    a720:	e7b4      	b.n	a68c <phySetChannel+0x1c>
    a722:	4b1f      	ldr	r3, [pc, #124]	; (a7a0 <phySetChannel+0x130>)
    a724:	9301      	str	r3, [sp, #4]
    a726:	e7b1      	b.n	a68c <phySetChannel+0x1c>
    a728:	4b1e      	ldr	r3, [pc, #120]	; (a7a4 <phySetChannel+0x134>)
    a72a:	9301      	str	r3, [sp, #4]
    a72c:	e7ae      	b.n	a68c <phySetChannel+0x1c>
    a72e:	4b09      	ldr	r3, [pc, #36]	; (a754 <phySetChannel+0xe4>)
    a730:	9301      	str	r3, [sp, #4]
    a732:	e7ab      	b.n	a68c <phySetChannel+0x1c>
    a734:	2000029c 	.word	0x2000029c
    a738:	000189d8 	.word	0x000189d8
    a73c:	33611380 	.word	0x33611380
    a740:	0000e3a5 	.word	0x0000e3a5
    a744:	337055c0 	.word	0x337055c0
    a748:	338eda40 	.word	0x338eda40
    a74c:	33a680f0 	.word	0x33a680f0
    a750:	33ad5ec0 	.word	0x33ad5ec0
    a754:	33be27a0 	.word	0x33be27a0
    a758:	33d3e608 	.word	0x33d3e608
    a75c:	33db2580 	.word	0x33db2580
    a760:	35c80160 	.word	0x35c80160
    a764:	35d2afc0 	.word	0x35d2afc0
    a768:	3689cac0 	.word	0x3689cac0
    a76c:	368cd800 	.word	0x368cd800
    a770:	36978660 	.word	0x36978660
    a774:	36d61600 	.word	0x36d61600
    a778:	36e3d1a0 	.word	0x36e3d1a0
    a77c:	36f313e0 	.word	0x36f313e0
    a780:	36f49a80 	.word	0x36f49a80
    a784:	36f62120 	.word	0x36f62120
    a788:	3703dcc0 	.word	0x3703dcc0
    a78c:	3706ea00 	.word	0x3706ea00
    a790:	370870a0 	.word	0x370870a0
    a794:	37226140 	.word	0x37226140
    a798:	374886e0 	.word	0x374886e0
    a79c:	37502800 	.word	0x37502800
    a7a0:	3757c920 	.word	0x3757c920
    a7a4:	3ccbf700 	.word	0x3ccbf700

0000a7a8 <radioCallback>:
    a7a8:	b570      	push	{r4, r5, r6, lr}
    a7aa:	b082      	sub	sp, #8
    a7ac:	0004      	movs	r4, r0
    a7ae:	000d      	movs	r5, r1
    a7b0:	4b3e      	ldr	r3, [pc, #248]	; (a8ac <radioCallback+0x104>)
    a7b2:	7018      	strb	r0, [r3, #0]
    a7b4:	466b      	mov	r3, sp
    a7b6:	1c98      	adds	r0, r3, #2
    a7b8:	2300      	movs	r3, #0
    a7ba:	8003      	strh	r3, [r0, #0]
    a7bc:	4b3c      	ldr	r3, [pc, #240]	; (a8b0 <radioCallback+0x108>)
    a7be:	4798      	blx	r3
    a7c0:	2c10      	cmp	r4, #16
    a7c2:	d853      	bhi.n	a86c <radioCallback+0xc4>
    a7c4:	00a4      	lsls	r4, r4, #2
    a7c6:	4b3b      	ldr	r3, [pc, #236]	; (a8b4 <radioCallback+0x10c>)
    a7c8:	591b      	ldr	r3, [r3, r4]
    a7ca:	469f      	mov	pc, r3
    a7cc:	4b3a      	ldr	r3, [pc, #232]	; (a8b8 <radioCallback+0x110>)
    a7ce:	781a      	ldrb	r2, [r3, #0]
    a7d0:	2a00      	cmp	r2, #0
    a7d2:	d00e      	beq.n	a7f2 <radioCallback+0x4a>
    a7d4:	2302      	movs	r3, #2
    a7d6:	33ff      	adds	r3, #255	; 0xff
    a7d8:	4a37      	ldr	r2, [pc, #220]	; (a8b8 <radioCallback+0x110>)
    a7da:	5cd3      	ldrb	r3, [r2, r3]
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d04e      	beq.n	a87e <radioCallback+0xd6>
    a7e0:	4b36      	ldr	r3, [pc, #216]	; (a8bc <radioCallback+0x114>)
    a7e2:	5cd3      	ldrb	r3, [r2, r3]
    a7e4:	2b00      	cmp	r3, #0
    a7e6:	d04c      	beq.n	a882 <radioCallback+0xda>
    a7e8:	4b35      	ldr	r3, [pc, #212]	; (a8c0 <radioCallback+0x118>)
    a7ea:	5cd3      	ldrb	r3, [r2, r3]
    a7ec:	22ff      	movs	r2, #255	; 0xff
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d043      	beq.n	a87a <radioCallback+0xd2>
    a7f2:	0016      	movs	r6, r2
    a7f4:	7a2c      	ldrb	r4, [r5, #8]
    a7f6:	0213      	lsls	r3, r2, #8
    a7f8:	189a      	adds	r2, r3, r2
    a7fa:	4b2f      	ldr	r3, [pc, #188]	; (a8b8 <radioCallback+0x110>)
    a7fc:	54d4      	strb	r4, [r2, r3]
    a7fe:	2cfa      	cmp	r4, #250	; 0xfa
    a800:	d80d      	bhi.n	a81e <radioCallback+0x76>
    a802:	2300      	movs	r3, #0
    a804:	0232      	lsls	r2, r6, #8
    a806:	1992      	adds	r2, r2, r6
    a808:	482b      	ldr	r0, [pc, #172]	; (a8b8 <radioCallback+0x110>)
    a80a:	1880      	adds	r0, r0, r2
    a80c:	686a      	ldr	r2, [r5, #4]
    a80e:	5cd1      	ldrb	r1, [r2, r3]
    a810:	18c2      	adds	r2, r0, r3
    a812:	7091      	strb	r1, [r2, #2]
    a814:	3301      	adds	r3, #1
    a816:	b2db      	uxtb	r3, r3
    a818:	7a2a      	ldrb	r2, [r5, #8]
    a81a:	429a      	cmp	r2, r3
    a81c:	d2f6      	bcs.n	a80c <radioCallback+0x64>
    a81e:	4b26      	ldr	r3, [pc, #152]	; (a8b8 <radioCallback+0x110>)
    a820:	0232      	lsls	r2, r6, #8
    a822:	1992      	adds	r2, r2, r6
    a824:	3404      	adds	r4, #4
    a826:	54d4      	strb	r4, [r2, r3]
    a828:	2156      	movs	r1, #86	; 0x56
    a82a:	4826      	ldr	r0, [pc, #152]	; (a8c4 <radioCallback+0x11c>)
    a82c:	5e41      	ldrsh	r1, [r0, r1]
    a82e:	4668      	mov	r0, sp
    a830:	8041      	strh	r1, [r0, #2]
    a832:	189b      	adds	r3, r3, r2
    a834:	7059      	strb	r1, [r3, #1]
    a836:	789b      	ldrb	r3, [r3, #2]
    a838:	069b      	lsls	r3, r3, #26
    a83a:	d524      	bpl.n	a886 <radioCallback+0xde>
    a83c:	a801      	add	r0, sp, #4
    a83e:	2301      	movs	r3, #1
    a840:	7003      	strb	r3, [r0, #0]
    a842:	2300      	movs	r3, #0
    a844:	8043      	strh	r3, [r0, #2]
    a846:	4b20      	ldr	r3, [pc, #128]	; (a8c8 <radioCallback+0x120>)
    a848:	4798      	blx	r3
    a84a:	e00f      	b.n	a86c <radioCallback+0xc4>
    a84c:	4b1f      	ldr	r3, [pc, #124]	; (a8cc <radioCallback+0x124>)
    a84e:	781b      	ldrb	r3, [r3, #0]
    a850:	2b00      	cmp	r3, #0
    a852:	d002      	beq.n	a85a <radioCallback+0xb2>
    a854:	782b      	ldrb	r3, [r5, #0]
    a856:	2b00      	cmp	r3, #0
    a858:	d00a      	beq.n	a870 <radioCallback+0xc8>
    a85a:	7828      	ldrb	r0, [r5, #0]
    a85c:	4b1c      	ldr	r3, [pc, #112]	; (a8d0 <radioCallback+0x128>)
    a85e:	4798      	blx	r3
    a860:	a801      	add	r0, sp, #4
    a862:	2300      	movs	r3, #0
    a864:	7003      	strb	r3, [r0, #0]
    a866:	8043      	strh	r3, [r0, #2]
    a868:	4b17      	ldr	r3, [pc, #92]	; (a8c8 <radioCallback+0x120>)
    a86a:	4798      	blx	r3
    a86c:	b002      	add	sp, #8
    a86e:	bd70      	pop	{r4, r5, r6, pc}
    a870:	4b18      	ldr	r3, [pc, #96]	; (a8d4 <radioCallback+0x12c>)
    a872:	4798      	blx	r3
    a874:	4b18      	ldr	r3, [pc, #96]	; (a8d8 <radioCallback+0x130>)
    a876:	6018      	str	r0, [r3, #0]
    a878:	e7f2      	b.n	a860 <radioCallback+0xb8>
    a87a:	3afc      	subs	r2, #252	; 0xfc
    a87c:	e7b9      	b.n	a7f2 <radioCallback+0x4a>
    a87e:	2201      	movs	r2, #1
    a880:	e7b7      	b.n	a7f2 <radioCallback+0x4a>
    a882:	2202      	movs	r2, #2
    a884:	e7b5      	b.n	a7f2 <radioCallback+0x4a>
    a886:	a801      	add	r0, sp, #4
    a888:	2300      	movs	r3, #0
    a88a:	7003      	strb	r3, [r0, #0]
    a88c:	8043      	strh	r3, [r0, #2]
    a88e:	4b0e      	ldr	r3, [pc, #56]	; (a8c8 <radioCallback+0x120>)
    a890:	4798      	blx	r3
    a892:	e7eb      	b.n	a86c <radioCallback+0xc4>
    a894:	ac01      	add	r4, sp, #4
    a896:	2300      	movs	r3, #0
    a898:	7023      	strb	r3, [r4, #0]
    a89a:	8063      	strh	r3, [r4, #2]
    a89c:	2001      	movs	r0, #1
    a89e:	4b0c      	ldr	r3, [pc, #48]	; (a8d0 <radioCallback+0x128>)
    a8a0:	4798      	blx	r3
    a8a2:	0020      	movs	r0, r4
    a8a4:	4b08      	ldr	r3, [pc, #32]	; (a8c8 <radioCallback+0x120>)
    a8a6:	4798      	blx	r3
    a8a8:	e7e0      	b.n	a86c <radioCallback+0xc4>
    a8aa:	46c0      	nop			; (mov r8, r8)
    a8ac:	2000224f 	.word	0x2000224f
    a8b0:	0000d905 	.word	0x0000d905
    a8b4:	00018a40 	.word	0x00018a40
    a8b8:	20002258 	.word	0x20002258
    a8bc:	00000202 	.word	0x00000202
    a8c0:	00000303 	.word	0x00000303
    a8c4:	20002d78 	.word	0x20002d78
    a8c8:	0000f5b1 	.word	0x0000f5b1
    a8cc:	2000028b 	.word	0x2000028b
    a8d0:	00009eb5 	.word	0x00009eb5
    a8d4:	0000bf6d 	.word	0x0000bf6d
    a8d8:	20002964 	.word	0x20002964

0000a8dc <PHY_Init>:
    a8dc:	b510      	push	{r4, lr}
    a8de:	4b06      	ldr	r3, [pc, #24]	; (a8f8 <PHY_Init+0x1c>)
    a8e0:	4798      	blx	r3
    a8e2:	4b06      	ldr	r3, [pc, #24]	; (a8fc <PHY_Init+0x20>)
    a8e4:	4798      	blx	r3
    a8e6:	4b06      	ldr	r3, [pc, #24]	; (a900 <PHY_Init+0x24>)
    a8e8:	4798      	blx	r3
    a8ea:	4906      	ldr	r1, [pc, #24]	; (a904 <PHY_Init+0x28>)
    a8ec:	201a      	movs	r0, #26
    a8ee:	4b06      	ldr	r3, [pc, #24]	; (a908 <PHY_Init+0x2c>)
    a8f0:	4798      	blx	r3
    a8f2:	4b06      	ldr	r3, [pc, #24]	; (a90c <PHY_Init+0x30>)
    a8f4:	4798      	blx	r3
    a8f6:	bd10      	pop	{r4, pc}
    a8f8:	0000c321 	.word	0x0000c321
    a8fc:	0000cdc9 	.word	0x0000cdc9
    a900:	0000e5a1 	.word	0x0000e5a1
    a904:	0000a7a9 	.word	0x0000a7a9
    a908:	0000e3a5 	.word	0x0000e3a5
    a90c:	0000f3bd 	.word	0x0000f3bd

0000a910 <PHY_SetRxState>:
    a910:	b510      	push	{r4, lr}
    a912:	4b01      	ldr	r3, [pc, #4]	; (a918 <PHY_SetRxState+0x8>)
    a914:	4798      	blx	r3
    a916:	bd10      	pop	{r4, pc}
    a918:	0000f2a5 	.word	0x0000f2a5

0000a91c <PHY_SetPanId>:
    a91c:	b082      	sub	sp, #8
    a91e:	b2c2      	uxtb	r2, r0
    a920:	4b02      	ldr	r3, [pc, #8]	; (a92c <PHY_SetPanId+0x10>)
    a922:	701a      	strb	r2, [r3, #0]
    a924:	0a00      	lsrs	r0, r0, #8
    a926:	7058      	strb	r0, [r3, #1]
    a928:	b002      	add	sp, #8
    a92a:	4770      	bx	lr
    a92c:	2000265c 	.word	0x2000265c

0000a930 <PHY_SetShortAddr>:
    a930:	b082      	sub	sp, #8
    a932:	b2c2      	uxtb	r2, r0
    a934:	4b02      	ldr	r3, [pc, #8]	; (a940 <PHY_SetShortAddr+0x10>)
    a936:	701a      	strb	r2, [r3, #0]
    a938:	0a00      	lsrs	r0, r0, #8
    a93a:	7058      	strb	r0, [r3, #1]
    a93c:	b002      	add	sp, #8
    a93e:	4770      	bx	lr
    a940:	20002660 	.word	0x20002660

0000a944 <PHY_SetTxPower>:
    a944:	b500      	push	{lr}
    a946:	b083      	sub	sp, #12
    a948:	466b      	mov	r3, sp
    a94a:	71d8      	strb	r0, [r3, #7]
    a94c:	280f      	cmp	r0, #15
    a94e:	d813      	bhi.n	a978 <PHY_SetTxPower+0x34>
    a950:	466b      	mov	r3, sp
    a952:	1d99      	adds	r1, r3, #6
    a954:	2300      	movs	r3, #0
    a956:	700b      	strb	r3, [r1, #0]
    a958:	2008      	movs	r0, #8
    a95a:	4b0b      	ldr	r3, [pc, #44]	; (a988 <PHY_SetTxPower+0x44>)
    a95c:	4798      	blx	r3
    a95e:	466b      	mov	r3, sp
    a960:	1dda      	adds	r2, r3, #7
    a962:	79d9      	ldrb	r1, [r3, #7]
    a964:	230f      	movs	r3, #15
    a966:	400b      	ands	r3, r1
    a968:	7013      	strb	r3, [r2, #0]
    a96a:	466b      	mov	r3, sp
    a96c:	1dd9      	adds	r1, r3, #7
    a96e:	2004      	movs	r0, #4
    a970:	4b05      	ldr	r3, [pc, #20]	; (a988 <PHY_SetTxPower+0x44>)
    a972:	4798      	blx	r3
    a974:	b003      	add	sp, #12
    a976:	bd00      	pop	{pc}
    a978:	466b      	mov	r3, sp
    a97a:	1d99      	adds	r1, r3, #6
    a97c:	2301      	movs	r3, #1
    a97e:	700b      	strb	r3, [r1, #0]
    a980:	2008      	movs	r0, #8
    a982:	4b01      	ldr	r3, [pc, #4]	; (a988 <PHY_SetTxPower+0x44>)
    a984:	4798      	blx	r3
    a986:	e7f0      	b.n	a96a <PHY_SetTxPower+0x26>
    a988:	0000e3a5 	.word	0x0000e3a5

0000a98c <PHY_GetAttribute>:
    a98c:	b510      	push	{r4, lr}
    a98e:	2807      	cmp	r0, #7
    a990:	d003      	beq.n	a99a <PHY_GetAttribute+0xe>
    a992:	2816      	cmp	r0, #22
    a994:	d001      	beq.n	a99a <PHY_GetAttribute+0xe>
    a996:	2003      	movs	r0, #3
    a998:	bd10      	pop	{r4, pc}
    a99a:	4b01      	ldr	r3, [pc, #4]	; (a9a0 <PHY_GetAttribute+0x14>)
    a99c:	4798      	blx	r3
    a99e:	e7fb      	b.n	a998 <PHY_GetAttribute+0xc>
    a9a0:	0000e2b5 	.word	0x0000e2b5

0000a9a4 <PHY_Wakeup>:
    a9a4:	b510      	push	{r4, lr}
    a9a6:	4b0c      	ldr	r3, [pc, #48]	; (a9d8 <PHY_Wakeup+0x34>)
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	2b02      	cmp	r3, #2
    a9ac:	d000      	beq.n	a9b0 <PHY_Wakeup+0xc>
    a9ae:	bd10      	pop	{r4, pc}
    a9b0:	4b0a      	ldr	r3, [pc, #40]	; (a9dc <PHY_Wakeup+0x38>)
    a9b2:	4798      	blx	r3
    a9b4:	4b0a      	ldr	r3, [pc, #40]	; (a9e0 <PHY_Wakeup+0x3c>)
    a9b6:	4798      	blx	r3
    a9b8:	4b0a      	ldr	r3, [pc, #40]	; (a9e4 <PHY_Wakeup+0x40>)
    a9ba:	4798      	blx	r3
    a9bc:	2334      	movs	r3, #52	; 0x34
    a9be:	4a0a      	ldr	r2, [pc, #40]	; (a9e8 <PHY_Wakeup+0x44>)
    a9c0:	5cd1      	ldrb	r1, [r2, r3]
    a9c2:	2200      	movs	r2, #0
    a9c4:	2001      	movs	r0, #1
    a9c6:	4b09      	ldr	r3, [pc, #36]	; (a9ec <PHY_Wakeup+0x48>)
    a9c8:	4798      	blx	r3
    a9ca:	4b09      	ldr	r3, [pc, #36]	; (a9f0 <PHY_Wakeup+0x4c>)
    a9cc:	4798      	blx	r3
    a9ce:	2201      	movs	r2, #1
    a9d0:	4b01      	ldr	r3, [pc, #4]	; (a9d8 <PHY_Wakeup+0x34>)
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	e7eb      	b.n	a9ae <PHY_Wakeup+0xa>
    a9d6:	46c0      	nop			; (mov r8, r8)
    a9d8:	2000029d 	.word	0x2000029d
    a9dc:	0000c661 	.word	0x0000c661
    a9e0:	0000c321 	.word	0x0000c321
    a9e4:	0000c4d9 	.word	0x0000c4d9
    a9e8:	20002d78 	.word	0x20002d78
    a9ec:	0000d741 	.word	0x0000d741
    a9f0:	0000f2a5 	.word	0x0000f2a5

0000a9f4 <PHY_SetChannel>:
    a9f4:	b510      	push	{r4, lr}
    a9f6:	4b06      	ldr	r3, [pc, #24]	; (aa10 <PHY_SetChannel+0x1c>)
    a9f8:	7018      	strb	r0, [r3, #0]
    a9fa:	4b06      	ldr	r3, [pc, #24]	; (aa14 <PHY_SetChannel+0x20>)
    a9fc:	781b      	ldrb	r3, [r3, #0]
    a9fe:	2b02      	cmp	r3, #2
    aa00:	d002      	beq.n	aa08 <PHY_SetChannel+0x14>
    aa02:	4b05      	ldr	r3, [pc, #20]	; (aa18 <PHY_SetChannel+0x24>)
    aa04:	4798      	blx	r3
    aa06:	bd10      	pop	{r4, pc}
    aa08:	4b04      	ldr	r3, [pc, #16]	; (aa1c <PHY_SetChannel+0x28>)
    aa0a:	4798      	blx	r3
    aa0c:	e7f9      	b.n	aa02 <PHY_SetChannel+0xe>
    aa0e:	46c0      	nop			; (mov r8, r8)
    aa10:	2000029c 	.word	0x2000029c
    aa14:	2000029d 	.word	0x2000029d
    aa18:	0000a671 	.word	0x0000a671
    aa1c:	0000a9a5 	.word	0x0000a9a5

0000aa20 <PHY_DataReq>:
    aa20:	b500      	push	{lr}
    aa22:	b085      	sub	sp, #20
    aa24:	7803      	ldrb	r3, [r0, #0]
    aa26:	aa02      	add	r2, sp, #8
    aa28:	7013      	strb	r3, [r2, #0]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d009      	beq.n	aa42 <PHY_DataReq+0x22>
    aa2e:	2300      	movs	r3, #0
    aa30:	4912      	ldr	r1, [pc, #72]	; (aa7c <PHY_DataReq+0x5c>)
    aa32:	18c2      	adds	r2, r0, r3
    aa34:	7852      	ldrb	r2, [r2, #1]
    aa36:	54ca      	strb	r2, [r1, r3]
    aa38:	3301      	adds	r3, #1
    aa3a:	b2db      	uxtb	r3, r3
    aa3c:	7802      	ldrb	r2, [r0, #0]
    aa3e:	429a      	cmp	r2, r3
    aa40:	d8f7      	bhi.n	aa32 <PHY_DataReq+0x12>
    aa42:	4b0e      	ldr	r3, [pc, #56]	; (aa7c <PHY_DataReq+0x5c>)
    aa44:	9303      	str	r3, [sp, #12]
    aa46:	2001      	movs	r0, #1
    aa48:	4b0d      	ldr	r3, [pc, #52]	; (aa80 <PHY_DataReq+0x60>)
    aa4a:	4798      	blx	r3
    aa4c:	4b0d      	ldr	r3, [pc, #52]	; (aa84 <PHY_DataReq+0x64>)
    aa4e:	4798      	blx	r3
    aa50:	2305      	movs	r3, #5
    aa52:	466a      	mov	r2, sp
    aa54:	8013      	strh	r3, [r2, #0]
    aa56:	3b5f      	subs	r3, #95	; 0x5f
    aa58:	8053      	strh	r3, [r2, #2]
    aa5a:	2305      	movs	r3, #5
    aa5c:	7113      	strb	r3, [r2, #4]
    aa5e:	2300      	movs	r3, #0
    aa60:	7153      	strb	r3, [r2, #5]
    aa62:	4669      	mov	r1, sp
    aa64:	201d      	movs	r0, #29
    aa66:	4b08      	ldr	r3, [pc, #32]	; (aa88 <PHY_DataReq+0x68>)
    aa68:	4798      	blx	r3
    aa6a:	a802      	add	r0, sp, #8
    aa6c:	4b07      	ldr	r3, [pc, #28]	; (aa8c <PHY_DataReq+0x6c>)
    aa6e:	4798      	blx	r3
    aa70:	4243      	negs	r3, r0
    aa72:	4158      	adcs	r0, r3
    aa74:	b2c0      	uxtb	r0, r0
    aa76:	b005      	add	sp, #20
    aa78:	bd00      	pop	{pc}
    aa7a:	46c0      	nop			; (mov r8, r8)
    aa7c:	20002150 	.word	0x20002150
    aa80:	0000ecad 	.word	0x0000ecad
    aa84:	0000a671 	.word	0x0000a671
    aa88:	0000e3a5 	.word	0x0000e3a5
    aa8c:	0000ecd5 	.word	0x0000ecd5

0000aa90 <PHY_RandomReq>:
    aa90:	b510      	push	{r4, lr}
    aa92:	4b03      	ldr	r3, [pc, #12]	; (aaa0 <PHY_RandomReq+0x10>)
    aa94:	4798      	blx	r3
    aa96:	0004      	movs	r4, r0
    aa98:	4b02      	ldr	r3, [pc, #8]	; (aaa4 <PHY_RandomReq+0x14>)
    aa9a:	4798      	blx	r3
    aa9c:	0020      	movs	r0, r4
>>>>>>> Stashed changes
    aa9e:	bd10      	pop	{r4, pc}
    aaa0:	0000d875 	.word	0x0000d875
    aaa4:	0000f2a5 	.word	0x0000f2a5

<<<<<<< Updated upstream
0000aaa4 <PHY_SetIEEEAddr>:
=======
    aa12:	bd10      	pop	{r4, pc}
    aa14:	0000cc51 	.word	0x0000cc51

0000aa18 <PHY_SetIEEEAddr>:
>>>>>>> Stashed changes
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    aa18:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    aa1a:	4903      	ldr	r1, [pc, #12]	; (aa28 <PHY_SetIEEEAddr+0x10>)
    aa1c:	5cc2      	ldrb	r2, [r0, r3]
    aa1e:	54ca      	strb	r2, [r1, r3]
    aa20:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    aa22:	2b08      	cmp	r3, #8
    aa24:	d1fa      	bne.n	aa1c <PHY_SetIEEEAddr+0x4>
	}
}
    aa26:	4770      	bx	lr
    aa28:	20002250 	.word	0x20002250

0000aa2c <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    aa2c:	4770      	bx	lr
    aa2e:	Address 0x0000aa2e is out of bounds.


0000aa30 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    aa30:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    aa32:	0010      	movs	r0, r2
    aa34:	4b01      	ldr	r3, [pc, #4]	; (aa3c <CommandConfCallback+0xc>)
    aa36:	4798      	blx	r3
}
    aa38:	bd10      	pop	{r4, pc}
    aa3a:	46c0      	nop			; (mov r8, r8)
    aa3c:	0000bd4d 	.word	0x0000bd4d

0000aa40 <Total_Connections>:
{
    aa40:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    aa42:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    aa44:	4907      	ldr	r1, [pc, #28]	; (aa64 <Total_Connections+0x24>)
    aa46:	e002      	b.n	aa4e <Total_Connections+0xe>
    aa48:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    aa4a:	2a05      	cmp	r2, #5
    aa4c:	d009      	beq.n	aa62 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    aa4e:	0093      	lsls	r3, r2, #2
    aa50:	189b      	adds	r3, r3, r2
    aa52:	005b      	lsls	r3, r3, #1
    aa54:	18cb      	adds	r3, r1, r3
    aa56:	7a1b      	ldrb	r3, [r3, #8]
    aa58:	09db      	lsrs	r3, r3, #7
    aa5a:	d0f5      	beq.n	aa48 <Total_Connections+0x8>
            count++;
    aa5c:	3001      	adds	r0, #1
    aa5e:	b2c0      	uxtb	r0, r0
    aa60:	e7f2      	b.n	aa48 <Total_Connections+0x8>
}
    aa62:	4770      	bx	lr
    aa64:	20002668 	.word	0x20002668

0000aa68 <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa6a:	46de      	mov	lr, fp
    aa6c:	4657      	mov	r7, sl
    aa6e:	464e      	mov	r6, r9
    aa70:	4645      	mov	r5, r8
    aa72:	b5e0      	push	{r5, r6, r7, lr}
    aa74:	b083      	sub	sp, #12
    aa76:	466c      	mov	r4, sp
    aa78:	8061      	strh	r1, [r4, #2]
    aa7a:	ac0c      	add	r4, sp, #48	; 0x30
    aa7c:	7827      	ldrb	r7, [r4, #0]
    aa7e:	ac0d      	add	r4, sp, #52	; 0x34
    aa80:	7826      	ldrb	r6, [r4, #0]
    aa82:	ac0f      	add	r4, sp, #60	; 0x3c
    aa84:	7825      	ldrb	r5, [r4, #0]
    aa86:	ac10      	add	r4, sp, #64	; 0x40
    aa88:	7821      	ldrb	r1, [r4, #0]
    aa8a:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    aa8c:	2800      	cmp	r0, #0
    aa8e:	d000      	beq.n	aa92 <IndirectPacket+0x2a>
    aa90:	e07e      	b.n	ab90 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    aa92:	4c40      	ldr	r4, [pc, #256]	; (ab94 <IndirectPacket+0x12c>)
    aa94:	7ba4      	ldrb	r4, [r4, #14]
    aa96:	07e1      	lsls	r1, r4, #31
    aa98:	d400      	bmi.n	aa9c <IndirectPacket+0x34>
    aa9a:	e077      	b.n	ab8c <IndirectPacket+0x124>
    aa9c:	2491      	movs	r4, #145	; 0x91
    aa9e:	0064      	lsls	r4, r4, #1
    aaa0:	493c      	ldr	r1, [pc, #240]	; (ab94 <IndirectPacket+0x12c>)
    aaa2:	5d0c      	ldrb	r4, [r1, r4]
    aaa4:	07e1      	lsls	r1, r4, #31
    aaa6:	d506      	bpl.n	aab6 <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    aaa8:	b003      	add	sp, #12
    aaaa:	bc3c      	pop	{r2, r3, r4, r5}
    aaac:	4690      	mov	r8, r2
    aaae:	4699      	mov	r9, r3
    aab0:	46a2      	mov	sl, r4
    aab2:	46ab      	mov	fp, r5
    aab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    aab6:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    aab8:	208a      	movs	r0, #138	; 0x8a
    aaba:	0040      	lsls	r0, r0, #1
    aabc:	4360      	muls	r0, r4
    aabe:	4935      	ldr	r1, [pc, #212]	; (ab94 <IndirectPacket+0x12c>)
    aac0:	468c      	mov	ip, r1
    aac2:	4484      	add	ip, r0
    aac4:	2108      	movs	r1, #8
    aac6:	4461      	add	r1, ip
    aac8:	4689      	mov	r9, r1
    aaca:	7989      	ldrb	r1, [r1, #6]
    aacc:	2001      	movs	r0, #1
    aace:	4301      	orrs	r1, r0
    aad0:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    aad2:	2001      	movs	r0, #1
    aad4:	4003      	ands	r3, r0
    aad6:	0099      	lsls	r1, r3, #2
    aad8:	9101      	str	r1, [sp, #4]
    aada:	21fd      	movs	r1, #253	; 0xfd
    aadc:	468b      	mov	fp, r1
    aade:	4651      	mov	r1, sl
    aae0:	465b      	mov	r3, fp
    aae2:	4019      	ands	r1, r3
    aae4:	3bf9      	subs	r3, #249	; 0xf9
    aae6:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    aae8:	4007      	ands	r7, r0
    aaea:	00ff      	lsls	r7, r7, #3
    aaec:	000b      	movs	r3, r1
    aaee:	9901      	ldr	r1, [sp, #4]
    aaf0:	4319      	orrs	r1, r3
    aaf2:	000b      	movs	r3, r1
    aaf4:	2108      	movs	r1, #8
    aaf6:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    aaf8:	4641      	mov	r1, r8
    aafa:	4008      	ands	r0, r1
    aafc:	0101      	lsls	r1, r0, #4
    aafe:	433b      	orrs	r3, r7
    ab00:	0018      	movs	r0, r3
    ab02:	2310      	movs	r3, #16
    ab04:	4398      	bics	r0, r3
    ab06:	4308      	orrs	r0, r1
    ab08:	464b      	mov	r3, r9
    ab0a:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    ab0c:	4663      	mov	r3, ip
    ab0e:	4669      	mov	r1, sp
    ab10:	8849      	ldrh	r1, [r1, #2]
    ab12:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    ab14:	2a00      	cmp	r2, #0
    ab16:	d00d      	beq.n	ab34 <IndirectPacket+0xcc>
    ab18:	0013      	movs	r3, r2
    ab1a:	218a      	movs	r1, #138	; 0x8a
    ab1c:	0049      	lsls	r1, r1, #1
    ab1e:	4361      	muls	r1, r4
    ab20:	3106      	adds	r1, #6
    ab22:	481c      	ldr	r0, [pc, #112]	; (ab94 <IndirectPacket+0x12c>)
    ab24:	1809      	adds	r1, r1, r0
    ab26:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    ab28:	7818      	ldrb	r0, [r3, #0]
    ab2a:	7008      	strb	r0, [r1, #0]
    ab2c:	3301      	adds	r3, #1
    ab2e:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    ab30:	4293      	cmp	r3, r2
    ab32:	d1f9      	bne.n	ab28 <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    ab34:	228a      	movs	r2, #138	; 0x8a
    ab36:	0052      	lsls	r2, r2, #1
    ab38:	4362      	muls	r2, r4
    ab3a:	4b16      	ldr	r3, [pc, #88]	; (ab94 <IndirectPacket+0x12c>)
    ab3c:	189b      	adds	r3, r3, r2
    ab3e:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    ab40:	2e00      	cmp	r6, #0
    ab42:	d011      	beq.n	ab68 <IndirectPacket+0x100>
    ab44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab46:	228a      	movs	r2, #138	; 0x8a
    ab48:	0052      	lsls	r2, r2, #1
    ab4a:	4362      	muls	r2, r4
    ab4c:	3210      	adds	r2, #16
    ab4e:	4911      	ldr	r1, [pc, #68]	; (ab94 <IndirectPacket+0x12c>)
    ab50:	1852      	adds	r2, r2, r1
    ab52:	3e01      	subs	r6, #1
    ab54:	b2f0      	uxtb	r0, r6
    ab56:	3001      	adds	r0, #1
    ab58:	469c      	mov	ip, r3
    ab5a:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    ab5c:	7819      	ldrb	r1, [r3, #0]
    ab5e:	7011      	strb	r1, [r2, #0]
    ab60:	3301      	adds	r3, #1
    ab62:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    ab64:	4283      	cmp	r3, r0
    ab66:	d1f9      	bne.n	ab5c <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    ab68:	4e0a      	ldr	r6, [pc, #40]	; (ab94 <IndirectPacket+0x12c>)
    ab6a:	238a      	movs	r3, #138	; 0x8a
    ab6c:	005b      	lsls	r3, r3, #1
    ab6e:	435c      	muls	r4, r3
    ab70:	1933      	adds	r3, r6, r4
    ab72:	001a      	movs	r2, r3
    ab74:	3210      	adds	r2, #16
    ab76:	32ff      	adds	r2, #255	; 0xff
    ab78:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    ab7a:	3311      	adds	r3, #17
    ab7c:	33ff      	adds	r3, #255	; 0xff
    ab7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ab80:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    ab82:	4b05      	ldr	r3, [pc, #20]	; (ab98 <IndirectPacket+0x130>)
    ab84:	4798      	blx	r3
    ab86:	51a0      	str	r0, [r4, r6]
                return true;
    ab88:	2001      	movs	r0, #1
    ab8a:	e78d      	b.n	aaa8 <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ab8c:	2400      	movs	r4, #0
    ab8e:	e793      	b.n	aab8 <IndirectPacket+0x50>
                return false;
    ab90:	2000      	movs	r0, #0
    ab92:	e789      	b.n	aaa8 <IndirectPacket+0x40>
    ab94:	200026e4 	.word	0x200026e4
    ab98:	0000bed1 	.word	0x0000bed1

0000ab9c <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    ab9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab9e:	46ce      	mov	lr, r9
    aba0:	4647      	mov	r7, r8
    aba2:	b580      	push	{r7, lr}
    aba4:	b08b      	sub	sp, #44	; 0x2c
    aba6:	0005      	movs	r5, r0
    aba8:	468c      	mov	ip, r1
    abaa:	9205      	str	r2, [sp, #20]
    abac:	a812      	add	r0, sp, #72	; 0x48
    abae:	7800      	ldrb	r0, [r0, #0]
    abb0:	ac13      	add	r4, sp, #76	; 0x4c
    abb2:	7826      	ldrb	r6, [r4, #0]
    abb4:	ac15      	add	r4, sp, #84	; 0x54
    abb6:	7827      	ldrb	r7, [r4, #0]
    abb8:	ac16      	add	r4, sp, #88	; 0x58
    abba:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    abbc:	2400      	movs	r4, #0
    abbe:	46a0      	mov	r8, r4
    abc0:	ac07      	add	r4, sp, #28
    abc2:	4641      	mov	r1, r8
    abc4:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    abc6:	2b00      	cmp	r3, #0
    abc8:	d043      	beq.n	ac52 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    abca:	0023      	movs	r3, r4
    abcc:	b2cc      	uxtb	r4, r1
    abce:	2103      	movs	r1, #3
    abd0:	438c      	bics	r4, r1
    abd2:	2101      	movs	r1, #1
    abd4:	4688      	mov	r8, r1
    abd6:	4641      	mov	r1, r8
    abd8:	430c      	orrs	r4, r1
    abda:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    abdc:	2d00      	cmp	r5, #0
    abde:	d13e      	bne.n	ac5e <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    abe0:	ac07      	add	r4, sp, #28
    abe2:	2301      	movs	r3, #1
    abe4:	4013      	ands	r3, r2
    abe6:	015a      	lsls	r2, r3, #5
    abe8:	7823      	ldrb	r3, [r4, #0]
    abea:	2120      	movs	r1, #32
    abec:	438b      	bics	r3, r1
    abee:	4313      	orrs	r3, r2
    abf0:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    abf2:	ac07      	add	r4, sp, #28
    abf4:	2201      	movs	r2, #1
    abf6:	0013      	movs	r3, r2
    abf8:	402b      	ands	r3, r5
    abfa:	009b      	lsls	r3, r3, #2
    abfc:	4698      	mov	r8, r3
    abfe:	7823      	ldrb	r3, [r4, #0]
    ac00:	2104      	movs	r1, #4
    ac02:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    ac04:	4010      	ands	r0, r2
    ac06:	00c0      	lsls	r0, r0, #3
    ac08:	4641      	mov	r1, r8
    ac0a:	430b      	orrs	r3, r1
    ac0c:	2108      	movs	r1, #8
    ac0e:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    ac10:	2100      	movs	r1, #0
    ac12:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    ac14:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    ac16:	2101      	movs	r1, #1
    ac18:	4688      	mov	r8, r1
    ac1a:	4641      	mov	r1, r8
    ac1c:	404d      	eors	r5, r1
    ac1e:	4015      	ands	r5, r2
    ac20:	01ad      	lsls	r5, r5, #6
    ac22:	4318      	orrs	r0, r3
    ac24:	2340      	movs	r3, #64	; 0x40
    ac26:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    ac28:	4328      	orrs	r0, r5
    ac2a:	3bc0      	subs	r3, #192	; 0xc0
    ac2c:	4318      	orrs	r0, r3
    ac2e:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    ac30:	4663      	mov	r3, ip
    ac32:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    ac34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ac36:	9302      	str	r3, [sp, #8]
    ac38:	9701      	str	r7, [sp, #4]
    ac3a:	9600      	str	r6, [sp, #0]
    ac3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac3e:	9807      	ldr	r0, [sp, #28]
    ac40:	9905      	ldr	r1, [sp, #20]
    ac42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ac44:	4c09      	ldr	r4, [pc, #36]	; (ac6c <SendPacket+0xd0>)
    ac46:	47a0      	blx	r4
    
    return status;
}
    ac48:	b00b      	add	sp, #44	; 0x2c
    ac4a:	bc0c      	pop	{r2, r3}
    ac4c:	4690      	mov	r8, r2
    ac4e:	4699      	mov	r9, r3
    ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    ac52:	ab07      	add	r3, sp, #28
    ac54:	781c      	ldrb	r4, [r3, #0]
    ac56:	2103      	movs	r1, #3
    ac58:	438c      	bics	r4, r1
    ac5a:	701c      	strb	r4, [r3, #0]
    ac5c:	e7be      	b.n	abdc <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    ac5e:	ac07      	add	r4, sp, #28
    ac60:	7823      	ldrb	r3, [r4, #0]
    ac62:	2220      	movs	r2, #32
    ac64:	4393      	bics	r3, r2
    ac66:	7023      	strb	r3, [r4, #0]
    ac68:	e7c3      	b.n	abf2 <SendPacket+0x56>
    ac6a:	46c0      	nop			; (mov r8, r8)
    ac6c:	00009a55 	.word	0x00009a55

0000ac70 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    ac70:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    ac72:	7802      	ldrb	r2, [r0, #0]
    ac74:	780b      	ldrb	r3, [r1, #0]
    ac76:	429a      	cmp	r2, r3
    ac78:	d109      	bne.n	ac8e <isSameAddress+0x1e>
    ac7a:	2301      	movs	r3, #1
    ac7c:	5cc4      	ldrb	r4, [r0, r3]
    ac7e:	5cca      	ldrb	r2, [r1, r3]
    ac80:	4294      	cmp	r4, r2
    ac82:	d106      	bne.n	ac92 <isSameAddress+0x22>
    ac84:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    ac86:	2b08      	cmp	r3, #8
    ac88:	d1f8      	bne.n	ac7c <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    ac8a:	2001      	movs	r0, #1
}
    ac8c:	bd10      	pop	{r4, pc}
            return false;
    ac8e:	2000      	movs	r0, #0
    ac90:	e7fc      	b.n	ac8c <isSameAddress+0x1c>
    ac92:	2000      	movs	r0, #0
    ac94:	e7fa      	b.n	ac8c <isSameAddress+0x1c>
    ac96:	Address 0x0000ac96 is out of bounds.


0000ac98 <MiApp_SendData>:
   {
    ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac9a:	46de      	mov	lr, fp
    ac9c:	4657      	mov	r7, sl
    ac9e:	464e      	mov	r6, r9
    aca0:	b5c0      	push	{r6, r7, lr}
    aca2:	b088      	sub	sp, #32
    aca4:	9107      	str	r1, [sp, #28]
    aca6:	0017      	movs	r7, r2
    aca8:	4699      	mov	r9, r3
    acaa:	ab10      	add	r3, sp, #64	; 0x40
    acac:	781b      	ldrb	r3, [r3, #0]
    acae:	469a      	mov	sl, r3
    acb0:	ab11      	add	r3, sp, #68	; 0x44
    acb2:	781b      	ldrb	r3, [r3, #0]
    acb4:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    acb6:	2802      	cmp	r0, #2
    acb8:	d003      	beq.n	acc2 <MiApp_SendData+0x2a>
    acba:	4d3e      	ldr	r5, [pc, #248]	; (adb4 <MiApp_SendData+0x11c>)
    acbc:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    acbe:	002e      	movs	r6, r5
    acc0:	e036      	b.n	ad30 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    acc2:	784a      	ldrb	r2, [r1, #1]
    acc4:	0212      	lsls	r2, r2, #8
    acc6:	780b      	ldrb	r3, [r1, #0]
    acc8:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    acca:	b29b      	uxth	r3, r3
    accc:	4a3a      	ldr	r2, [pc, #232]	; (adb8 <MiApp_SendData+0x120>)
    acce:	4293      	cmp	r3, r2
    acd0:	d1f3      	bne.n	acba <MiApp_SendData+0x22>
    acd2:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    acd4:	4837      	ldr	r0, [pc, #220]	; (adb4 <MiApp_SendData+0x11c>)
    acd6:	0002      	movs	r2, r0
    acd8:	e002      	b.n	ace0 <MiApp_SendData+0x48>
    acda:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    acdc:	2905      	cmp	r1, #5
    acde:	d021      	beq.n	ad24 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    ace0:	008b      	lsls	r3, r1, #2
    ace2:	185b      	adds	r3, r3, r1
    ace4:	005b      	lsls	r3, r3, #1
    ace6:	18c3      	adds	r3, r0, r3
    ace8:	7a1b      	ldrb	r3, [r3, #8]
    acea:	09db      	lsrs	r3, r3, #7
    acec:	d0f5      	beq.n	acda <MiApp_SendData+0x42>
    acee:	008b      	lsls	r3, r1, #2
    acf0:	185b      	adds	r3, r3, r1
    acf2:	005b      	lsls	r3, r3, #1
    acf4:	18d3      	adds	r3, r2, r3
    acf6:	7a1b      	ldrb	r3, [r3, #8]
    acf8:	07db      	lsls	r3, r3, #31
    acfa:	d4ee      	bmi.n	acda <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    acfc:	4b2f      	ldr	r3, [pc, #188]	; (adbc <MiApp_SendData+0x124>)
    acfe:	8819      	ldrh	r1, [r3, #0]
    ad00:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad02:	9305      	str	r3, [sp, #20]
    ad04:	465b      	mov	r3, fp
    ad06:	9304      	str	r3, [sp, #16]
    ad08:	4653      	mov	r3, sl
    ad0a:	9303      	str	r3, [sp, #12]
    ad0c:	464b      	mov	r3, r9
    ad0e:	9302      	str	r3, [sp, #8]
    ad10:	9701      	str	r7, [sp, #4]
    ad12:	2301      	movs	r3, #1
    ad14:	9300      	str	r3, [sp, #0]
    ad16:	2300      	movs	r3, #0
    ad18:	2200      	movs	r2, #0
    ad1a:	2001      	movs	r0, #1
    ad1c:	4c28      	ldr	r4, [pc, #160]	; (adc0 <MiApp_SendData+0x128>)
    ad1e:	47a0      	blx	r4
			broadcast = true;
    ad20:	2001      	movs	r0, #1
					    break;
    ad22:	e02f      	b.n	ad84 <MiApp_SendData+0xec>
			broadcast = true;
    ad24:	2001      	movs	r0, #1
    ad26:	e02d      	b.n	ad84 <MiApp_SendData+0xec>
    ad28:	3401      	adds	r4, #1
    ad2a:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    ad2c:	2c05      	cmp	r4, #5
    ad2e:	d028      	beq.n	ad82 <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    ad30:	00a3      	lsls	r3, r4, #2
    ad32:	191b      	adds	r3, r3, r4
    ad34:	005b      	lsls	r3, r3, #1
    ad36:	18f3      	adds	r3, r6, r3
    ad38:	7a1b      	ldrb	r3, [r3, #8]
    ad3a:	09db      	lsrs	r3, r3, #7
    ad3c:	d0f4      	beq.n	ad28 <MiApp_SendData+0x90>
    ad3e:	00a3      	lsls	r3, r4, #2
    ad40:	191b      	adds	r3, r3, r4
    ad42:	005b      	lsls	r3, r3, #1
    ad44:	4a1b      	ldr	r2, [pc, #108]	; (adb4 <MiApp_SendData+0x11c>)
    ad46:	4694      	mov	ip, r2
    ad48:	4463      	add	r3, ip
    ad4a:	7a1b      	ldrb	r3, [r3, #8]
    ad4c:	07db      	lsls	r3, r3, #31
    ad4e:	d4eb      	bmi.n	ad28 <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    ad50:	0029      	movs	r1, r5
    ad52:	9807      	ldr	r0, [sp, #28]
    ad54:	4b1b      	ldr	r3, [pc, #108]	; (adc4 <MiApp_SendData+0x12c>)
    ad56:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    ad58:	2800      	cmp	r0, #0
    ad5a:	d0e5      	beq.n	ad28 <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    ad5c:	4b17      	ldr	r3, [pc, #92]	; (adbc <MiApp_SendData+0x124>)
    ad5e:	8819      	ldrh	r1, [r3, #0]
    ad60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad62:	9305      	str	r3, [sp, #20]
    ad64:	465b      	mov	r3, fp
    ad66:	9304      	str	r3, [sp, #16]
    ad68:	4653      	mov	r3, sl
    ad6a:	9303      	str	r3, [sp, #12]
    ad6c:	464b      	mov	r3, r9
    ad6e:	9302      	str	r3, [sp, #8]
    ad70:	9701      	str	r7, [sp, #4]
    ad72:	2301      	movs	r3, #1
    ad74:	9300      	str	r3, [sp, #0]
    ad76:	2300      	movs	r3, #0
    ad78:	9a07      	ldr	r2, [sp, #28]
    ad7a:	2000      	movs	r0, #0
    ad7c:	4c10      	ldr	r4, [pc, #64]	; (adc0 <MiApp_SendData+0x128>)
    ad7e:	47a0      	blx	r4
    ad80:	e011      	b.n	ada6 <MiApp_SendData+0x10e>
	    bool broadcast = false;
    ad82:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    ad84:	4b0d      	ldr	r3, [pc, #52]	; (adbc <MiApp_SendData+0x124>)
    ad86:	8819      	ldrh	r1, [r3, #0]
    ad88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad8a:	9305      	str	r3, [sp, #20]
    ad8c:	465b      	mov	r3, fp
    ad8e:	9304      	str	r3, [sp, #16]
    ad90:	4653      	mov	r3, sl
    ad92:	9303      	str	r3, [sp, #12]
    ad94:	464b      	mov	r3, r9
    ad96:	9302      	str	r3, [sp, #8]
    ad98:	9701      	str	r7, [sp, #4]
    ad9a:	2301      	movs	r3, #1
    ad9c:	9300      	str	r3, [sp, #0]
    ad9e:	2300      	movs	r3, #0
    ada0:	9a07      	ldr	r2, [sp, #28]
    ada2:	4c09      	ldr	r4, [pc, #36]	; (adc8 <MiApp_SendData+0x130>)
    ada4:	47a0      	blx	r4
}
    ada6:	b008      	add	sp, #32
    ada8:	bc1c      	pop	{r2, r3, r4}
    adaa:	4691      	mov	r9, r2
    adac:	469a      	mov	sl, r3
    adae:	46a3      	mov	fp, r4
    adb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adb2:	46c0      	nop			; (mov r8, r8)
    adb4:	20002668 	.word	0x20002668
    adb8:	0000ffff 	.word	0x0000ffff
    adbc:	200026bc 	.word	0x200026bc
    adc0:	0000aa69 	.word	0x0000aa69
    adc4:	0000ac71 	.word	0x0000ac71
    adc8:	0000ab9d 	.word	0x0000ab9d

0000adcc <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    adcc:	b570      	push	{r4, r5, r6, lr}
    adce:	000d      	movs	r5, r1
     break;

     default:
     break;
   }
    return false;
    add0:	2400      	movs	r4, #0
    switch(id)
    add2:	2800      	cmp	r0, #0
    add4:	d001      	beq.n	adda <MiApp_Set+0xe>
}
    add6:	0020      	movs	r0, r4
    add8:	bd70      	pop	{r4, r5, r6, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    adda:	4b05      	ldr	r3, [pc, #20]	; (adf0 <MiApp_Set+0x24>)
    addc:	4798      	blx	r3
    adde:	1e04      	subs	r4, r0, #0
    ade0:	d0f9      	beq.n	add6 <MiApp_Set+0xa>
          currentChannel = *value;
    ade2:	782a      	ldrb	r2, [r5, #0]
    ade4:	4b03      	ldr	r3, [pc, #12]	; (adf4 <MiApp_Set+0x28>)
    ade6:	701a      	strb	r2, [r3, #0]
			  PDS_Store(PDS_CURRENT_CHANNEL_ID);
    ade8:	2003      	movs	r0, #3
    adea:	4b03      	ldr	r3, [pc, #12]	; (adf8 <MiApp_Set+0x2c>)
    adec:	4798      	blx	r3
          return true;
    adee:	e7f2      	b.n	add6 <MiApp_Set+0xa>
    adf0:	00009981 	.word	0x00009981
    adf4:	20000019 	.word	0x20000019
    adf8:	000092e9 	.word	0x000092e9

0000adfc <MiApp_ProtocolInit>:
{
    adfc:	b570      	push	{r4, r5, r6, lr}
    adfe:	b084      	sub	sp, #16
    P2PStatus.Val = 0;
    ae00:	2200      	movs	r2, #0
    ae02:	4b3c      	ldr	r3, [pc, #240]	; (aef4 <MiApp_ProtocolInit+0xf8>)
    ae04:	701a      	strb	r2, [r3, #0]
    ae06:	4b3c      	ldr	r3, [pc, #240]	; (aef8 <MiApp_ProtocolInit+0xfc>)
    ae08:	0019      	movs	r1, r3
    ae0a:	3132      	adds	r1, #50	; 0x32
            ConnectionTable[i].status.Val = 0;
    ae0c:	721a      	strb	r2, [r3, #8]
            ConnectionTable[i].Address[0] = 0x00;
    ae0e:	701a      	strb	r2, [r3, #0]
            ConnectionTable[i].Address[1] = 0x00;
    ae10:	705a      	strb	r2, [r3, #1]
            ConnectionTable[i].Address[2] = 0x00;
    ae12:	709a      	strb	r2, [r3, #2]
    ae14:	330a      	adds	r3, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    ae16:	428b      	cmp	r3, r1
    ae18:	d1f8      	bne.n	ae0c <MiApp_ProtocolInit+0x10>
            indirectMessages[i].flags.Val = 0;
    ae1a:	4a38      	ldr	r2, [pc, #224]	; (aefc <MiApp_ProtocolInit+0x100>)
    ae1c:	2300      	movs	r3, #0
    ae1e:	7393      	strb	r3, [r2, #14]
    ae20:	2191      	movs	r1, #145	; 0x91
    ae22:	0049      	lsls	r1, r1, #1
    ae24:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    ae26:	4a36      	ldr	r2, [pc, #216]	; (af00 <MiApp_ProtocolInit+0x104>)
    ae28:	6013      	str	r3, [r2, #0]
    ae2a:	6053      	str	r3, [r2, #4]
    ae2c:	6093      	str	r3, [r2, #8]
    ae2e:	60d3      	str	r3, [r2, #12]
    ae30:	6113      	str	r3, [r2, #16]
			PDS_Restore(PDS_PANID_ID);
    ae32:	2002      	movs	r0, #2
    ae34:	4b33      	ldr	r3, [pc, #204]	; (af04 <MiApp_ProtocolInit+0x108>)
    ae36:	4798      	blx	r3
        if (myPANID.Val)
    ae38:	4b33      	ldr	r3, [pc, #204]	; (af08 <MiApp_ProtocolInit+0x10c>)
    ae3a:	881b      	ldrh	r3, [r3, #0]
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d021      	beq.n	ae84 <MiApp_ProtocolInit+0x88>
			PDS_Restore(PDS_CURRENT_CHANNEL_ID);
    ae40:	2003      	movs	r0, #3
    ae42:	4b30      	ldr	r3, [pc, #192]	; (af04 <MiApp_ProtocolInit+0x108>)
    ae44:	4798      	blx	r3
            if( currentChannel >= 32 )
    ae46:	4b31      	ldr	r3, [pc, #196]	; (af0c <MiApp_ProtocolInit+0x110>)
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	2b1f      	cmp	r3, #31
    ae4c:	d84f      	bhi.n	aeee <MiApp_ProtocolInit+0xf2>
			PDS_Restore(PDS_PANID_ID);
    ae4e:	2002      	movs	r0, #2
    ae50:	4c2c      	ldr	r4, [pc, #176]	; (af04 <MiApp_ProtocolInit+0x108>)
    ae52:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_MODE_ID);
    ae54:	2004      	movs	r0, #4
    ae56:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_TABLE_ID);
    ae58:	2005      	movs	r0, #5
    ae5a:	47a0      	blx	r4
			PDS_Restore(PDS_EDC_ID);
    ae5c:	2007      	movs	r0, #7
    ae5e:	47a0      	blx	r4
                printf("\r\nPANID:");
    ae60:	482b      	ldr	r0, [pc, #172]	; (af10 <MiApp_ProtocolInit+0x114>)
    ae62:	4c2c      	ldr	r4, [pc, #176]	; (af14 <MiApp_ProtocolInit+0x118>)
    ae64:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    ae66:	4e28      	ldr	r6, [pc, #160]	; (af08 <MiApp_ProtocolInit+0x10c>)
    ae68:	7871      	ldrb	r1, [r6, #1]
    ae6a:	4d2b      	ldr	r5, [pc, #172]	; (af18 <MiApp_ProtocolInit+0x11c>)
    ae6c:	0028      	movs	r0, r5
    ae6e:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    ae70:	7831      	ldrb	r1, [r6, #0]
    ae72:	0028      	movs	r0, r5
    ae74:	47a0      	blx	r4
                printf(" Channel:");
    ae76:	4829      	ldr	r0, [pc, #164]	; (af1c <MiApp_ProtocolInit+0x120>)
    ae78:	47a0      	blx	r4
                printf("%d",currentChannel);
    ae7a:	4b24      	ldr	r3, [pc, #144]	; (af0c <MiApp_ProtocolInit+0x110>)
    ae7c:	7819      	ldrb	r1, [r3, #0]
    ae7e:	4828      	ldr	r0, [pc, #160]	; (af20 <MiApp_ProtocolInit+0x124>)
    ae80:	47a0      	blx	r4
    ae82:	e00b      	b.n	ae9c <MiApp_ProtocolInit+0xa0>
                myPANID.Val = MY_PAN_ID;
    ae84:	4a27      	ldr	r2, [pc, #156]	; (af24 <MiApp_ProtocolInit+0x128>)
    ae86:	4b20      	ldr	r3, [pc, #128]	; (af08 <MiApp_ProtocolInit+0x10c>)
    ae88:	801a      	strh	r2, [r3, #0]
				PDS_Store(PDS_PANID_ID);
    ae8a:	2002      	movs	r0, #2
    ae8c:	4c26      	ldr	r4, [pc, #152]	; (af28 <MiApp_ProtocolInit+0x12c>)
    ae8e:	47a0      	blx	r4
			PDS_Store(PDS_CURRENT_CHANNEL_ID);
    ae90:	2003      	movs	r0, #3
    ae92:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_MODE_ID);
    ae94:	2004      	movs	r0, #4
    ae96:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_TABLE_ID);
    ae98:	2005      	movs	r0, #5
    ae9a:	47a0      	blx	r4
    initValue.PAddress = myLongAddress;
    ae9c:	aa02      	add	r2, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    ae9e:	7813      	ldrb	r3, [r2, #0]
    aea0:	2102      	movs	r1, #2
    aea2:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    aea4:	2187      	movs	r1, #135	; 0x87
    aea6:	400b      	ands	r3, r1
    aea8:	2140      	movs	r1, #64	; 0x40
    aeaa:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    aeac:	b2db      	uxtb	r3, r3
    aeae:	2104      	movs	r1, #4
    aeb0:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    aeb2:	21c6      	movs	r1, #198	; 0xc6
    aeb4:	400b      	ands	r3, r1
    aeb6:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    aeb8:	9802      	ldr	r0, [sp, #8]
    aeba:	491c      	ldr	r1, [pc, #112]	; (af2c <MiApp_ProtocolInit+0x130>)
    aebc:	4b1c      	ldr	r3, [pc, #112]	; (af30 <MiApp_ProtocolInit+0x134>)
    aebe:	4798      	blx	r3
    if (currentChannel != 0xFF)
    aec0:	4b12      	ldr	r3, [pc, #72]	; (af0c <MiApp_ProtocolInit+0x110>)
    aec2:	781b      	ldrb	r3, [r3, #0]
    aec4:	2bff      	cmp	r3, #255	; 0xff
    aec6:	d003      	beq.n	aed0 <MiApp_ProtocolInit+0xd4>
	    MiApp_Set(CHANNEL, &currentChannel);
    aec8:	4910      	ldr	r1, [pc, #64]	; (af0c <MiApp_ProtocolInit+0x110>)
    aeca:	2000      	movs	r0, #0
    aecc:	4b19      	ldr	r3, [pc, #100]	; (af34 <MiApp_ProtocolInit+0x138>)
    aece:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    aed0:	466b      	mov	r3, sp
    aed2:	1d98      	adds	r0, r3, #6
    aed4:	2301      	movs	r3, #1
    aed6:	425b      	negs	r3, r3
    aed8:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    aeda:	490b      	ldr	r1, [pc, #44]	; (af08 <MiApp_ProtocolInit+0x10c>)
    aedc:	4b16      	ldr	r3, [pc, #88]	; (af38 <MiApp_ProtocolInit+0x13c>)
    aede:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    aee0:	4b16      	ldr	r3, [pc, #88]	; (af3c <MiApp_ProtocolInit+0x140>)
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	011b      	lsls	r3, r3, #4
    aee6:	2209      	movs	r2, #9
    aee8:	4313      	orrs	r3, r2
    aeea:	4a15      	ldr	r2, [pc, #84]	; (af40 <MiApp_ProtocolInit+0x144>)
    aeec:	7013      	strb	r3, [r2, #0]
}
    aeee:	2000      	movs	r0, #0
    aef0:	b004      	add	sp, #16
    aef2:	bd70      	pop	{r4, r5, r6, pc}
    aef4:	200026e0 	.word	0x200026e0
    aef8:	20002668 	.word	0x20002668
    aefc:	200026e4 	.word	0x200026e4
    af00:	200026c8 	.word	0x200026c8
    af04:	00009211 	.word	0x00009211
    af08:	200026bc 	.word	0x200026bc
    af0c:	20000019 	.word	0x20000019
    af10:	00018960 	.word	0x00018960
    af14:	00016d45 	.word	0x00016d45
    af18:	00017fd0 	.word	0x00017fd0
    af1c:	0001896c 	.word	0x0001896c
    af20:	00017ca4 	.word	0x00017ca4
    af24:	00004761 	.word	0x00004761
    af28:	000092e9 	.word	0x000092e9
    af2c:	2000001c 	.word	0x2000001c
    af30:	000099a9 	.word	0x000099a9
    af34:	0000adcd 	.word	0x0000adcd
    af38:	00009581 	.word	0x00009581
    af3c:	20000018 	.word	0x20000018
    af40:	200026b5 	.word	0x200026b5

0000af44 <MiApp_StartConnection>:
    {
    af44:	b530      	push	{r4, r5, lr}
    af46:	b083      	sub	sp, #12
    af48:	0014      	movs	r4, r2
    af4a:	001d      	movs	r5, r3
        switch(Mode)
    af4c:	2801      	cmp	r0, #1
    af4e:	d032      	beq.n	afb6 <MiApp_StartConnection+0x72>
    af50:	2800      	cmp	r0, #0
    af52:	d005      	beq.n	af60 <MiApp_StartConnection+0x1c>
    af54:	2802      	cmp	r0, #2
    af56:	d032      	beq.n	afbe <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    af58:	2001      	movs	r0, #1
    af5a:	4798      	blx	r3
        return false;
    af5c:	2000      	movs	r0, #0
    af5e:	e028      	b.n	afb2 <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    af60:	2200      	movs	r2, #0
    af62:	466b      	mov	r3, sp
    af64:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    af66:	4918      	ldr	r1, [pc, #96]	; (afc8 <MiApp_StartConnection+0x84>)
    af68:	4b18      	ldr	r3, [pc, #96]	; (afcc <MiApp_StartConnection+0x88>)
    af6a:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    af6c:	466b      	mov	r3, sp
    af6e:	1d98      	adds	r0, r3, #6
    af70:	2301      	movs	r3, #1
    af72:	425b      	negs	r3, r3
    af74:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    af76:	4b16      	ldr	r3, [pc, #88]	; (afd0 <MiApp_StartConnection+0x8c>)
    af78:	4798      	blx	r3
				while (!(index & ChannelMap))
    af7a:	07e3      	lsls	r3, r4, #31
    af7c:	d40a      	bmi.n	af94 <MiApp_StartConnection+0x50>
    af7e:	466b      	mov	r3, sp
    af80:	3305      	adds	r3, #5
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	2201      	movs	r2, #1
				index = index << 1;
    af86:	0052      	lsls	r2, r2, #1
				++channel;
    af88:	3301      	adds	r3, #1
    af8a:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    af8c:	4222      	tst	r2, r4
    af8e:	d0fa      	beq.n	af86 <MiApp_StartConnection+0x42>
    af90:	466a      	mov	r2, sp
    af92:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    af94:	466b      	mov	r3, sp
    af96:	1d59      	adds	r1, r3, #5
    af98:	2000      	movs	r0, #0
    af9a:	4b0e      	ldr	r3, [pc, #56]	; (afd4 <MiApp_StartConnection+0x90>)
    af9c:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    af9e:	4c0e      	ldr	r4, [pc, #56]	; (afd8 <MiApp_StartConnection+0x94>)
    afa0:	47a0      	blx	r4
    afa2:	4b0e      	ldr	r3, [pc, #56]	; (afdc <MiApp_StartConnection+0x98>)
    afa4:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    afa6:	47a0      	blx	r4
    afa8:	4b0d      	ldr	r3, [pc, #52]	; (afe0 <MiApp_StartConnection+0x9c>)
    afaa:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    afac:	2000      	movs	r0, #0
    afae:	47a8      	blx	r5
                return true;
    afb0:	2001      	movs	r0, #1
    }
    afb2:	b003      	add	sp, #12
    afb4:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    afb6:	2001      	movs	r0, #1
    afb8:	4798      	blx	r3
                    return false;
    afba:	2000      	movs	r0, #0
    afbc:	e7f9      	b.n	afb2 <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    afbe:	2001      	movs	r0, #1
    afc0:	4798      	blx	r3
                return false;
    afc2:	2000      	movs	r0, #0
    afc4:	e7f5      	b.n	afb2 <MiApp_StartConnection+0x6e>
    afc6:	46c0      	nop			; (mov r8, r8)
    afc8:	200026bc 	.word	0x200026bc
    afcc:	00004761 	.word	0x00004761
    afd0:	00009581 	.word	0x00009581
    afd4:	0000adcd 	.word	0x0000adcd
    afd8:	0000bed1 	.word	0x0000bed1
    afdc:	2000290c 	.word	0x2000290c
    afe0:	2000269c 	.word	0x2000269c

0000afe4 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    afe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    afe6:	46d6      	mov	lr, sl
    afe8:	4647      	mov	r7, r8
    afea:	b580      	push	{r7, lr}
    afec:	b083      	sub	sp, #12
    afee:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    aff0:	2805      	cmp	r0, #5
    aff2:	d811      	bhi.n	b018 <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    aff4:	2d04      	cmp	r5, #4
    aff6:	d85e      	bhi.n	b0b6 <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    aff8:	4851      	ldr	r0, [pc, #324]	; (b140 <DumpConnection+0x15c>)
    affa:	4b52      	ldr	r3, [pc, #328]	; (b144 <DumpConnection+0x160>)
    affc:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    affe:	00ab      	lsls	r3, r5, #2
    b000:	195b      	adds	r3, r3, r5
    b002:	005b      	lsls	r3, r3, #1
    b004:	4a50      	ldr	r2, [pc, #320]	; (b148 <DumpConnection+0x164>)
    b006:	18d3      	adds	r3, r2, r3
    b008:	7a1b      	ldrb	r3, [r3, #8]
    b00a:	09db      	lsrs	r3, r3, #7
    b00c:	d123      	bne.n	b056 <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    b00e:	b003      	add	sp, #12
    b010:	bc0c      	pop	{r2, r3}
    b012:	4690      	mov	r8, r2
    b014:	469a      	mov	sl, r3
    b016:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    b018:	484c      	ldr	r0, [pc, #304]	; (b14c <DumpConnection+0x168>)
    b01a:	4b4d      	ldr	r3, [pc, #308]	; (b150 <DumpConnection+0x16c>)
    b01c:	4798      	blx	r3
    b01e:	4c4d      	ldr	r4, [pc, #308]	; (b154 <DumpConnection+0x170>)
    b020:	0026      	movs	r6, r4
    b022:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    b024:	4f4a      	ldr	r7, [pc, #296]	; (b150 <DumpConnection+0x16c>)
    b026:	79e1      	ldrb	r1, [r4, #7]
    b028:	484b      	ldr	r0, [pc, #300]	; (b158 <DumpConnection+0x174>)
    b02a:	47b8      	blx	r7
    b02c:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b02e:	42b4      	cmp	r4, r6
    b030:	d1f9      	bne.n	b026 <DumpConnection+0x42>
                printf("  PANID: 0x");
    b032:	484a      	ldr	r0, [pc, #296]	; (b15c <DumpConnection+0x178>)
    b034:	4c46      	ldr	r4, [pc, #280]	; (b150 <DumpConnection+0x16c>)
    b036:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    b038:	4f49      	ldr	r7, [pc, #292]	; (b160 <DumpConnection+0x17c>)
    b03a:	7879      	ldrb	r1, [r7, #1]
    b03c:	4e49      	ldr	r6, [pc, #292]	; (b164 <DumpConnection+0x180>)
    b03e:	0030      	movs	r0, r6
    b040:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    b042:	7839      	ldrb	r1, [r7, #0]
    b044:	0030      	movs	r0, r6
    b046:	47a0      	blx	r4
            printf("  Channel: ");
    b048:	4847      	ldr	r0, [pc, #284]	; (b168 <DumpConnection+0x184>)
    b04a:	47a0      	blx	r4
            printf("%d",currentChannel);
    b04c:	4b47      	ldr	r3, [pc, #284]	; (b16c <DumpConnection+0x188>)
    b04e:	7819      	ldrb	r1, [r3, #0]
    b050:	4847      	ldr	r0, [pc, #284]	; (b170 <DumpConnection+0x18c>)
    b052:	47a0      	blx	r4
    b054:	e7ce      	b.n	aff4 <DumpConnection+0x10>
                printf("%02x",index);
    b056:	0029      	movs	r1, r5
    b058:	483f      	ldr	r0, [pc, #252]	; (b158 <DumpConnection+0x174>)
    b05a:	4c3d      	ldr	r4, [pc, #244]	; (b150 <DumpConnection+0x16c>)
    b05c:	47a0      	blx	r4
                printf("\t\t\t");
    b05e:	4845      	ldr	r0, [pc, #276]	; (b174 <DumpConnection+0x190>)
    b060:	47a0      	blx	r4
    b062:	00ae      	lsls	r6, r5, #2
    b064:	1976      	adds	r6, r6, r5
    b066:	0076      	lsls	r6, r6, #1
    b068:	1df4      	adds	r4, r6, #7
    b06a:	4b37      	ldr	r3, [pc, #220]	; (b148 <DumpConnection+0x164>)
    b06c:	18e4      	adds	r4, r4, r3
    b06e:	3e01      	subs	r6, #1
    b070:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    b072:	4f37      	ldr	r7, [pc, #220]	; (b150 <DumpConnection+0x16c>)
    b074:	7821      	ldrb	r1, [r4, #0]
    b076:	4838      	ldr	r0, [pc, #224]	; (b158 <DumpConnection+0x174>)
    b078:	47b8      	blx	r7
    b07a:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    b07c:	42b4      	cmp	r4, r6
    b07e:	d1f9      	bne.n	b074 <DumpConnection+0x90>
                printf("/t");
    b080:	483d      	ldr	r0, [pc, #244]	; (b178 <DumpConnection+0x194>)
    b082:	4f33      	ldr	r7, [pc, #204]	; (b150 <DumpConnection+0x16c>)
    b084:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    b086:	4e30      	ldr	r6, [pc, #192]	; (b148 <DumpConnection+0x164>)
    b088:	00ac      	lsls	r4, r5, #2
    b08a:	1963      	adds	r3, r4, r5
    b08c:	005b      	lsls	r3, r3, #1
    b08e:	18f3      	adds	r3, r6, r3
    b090:	7a59      	ldrb	r1, [r3, #9]
    b092:	4831      	ldr	r0, [pc, #196]	; (b158 <DumpConnection+0x174>)
    b094:	47b8      	blx	r7
				printf("\t");
    b096:	2009      	movs	r0, #9
    b098:	4b38      	ldr	r3, [pc, #224]	; (b17c <DumpConnection+0x198>)
    b09a:	4698      	mov	r8, r3
    b09c:	4798      	blx	r3
				printf("\t");
    b09e:	2009      	movs	r0, #9
    b0a0:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    b0a2:	1964      	adds	r4, r4, r5
    b0a4:	0064      	lsls	r4, r4, #1
    b0a6:	1934      	adds	r4, r6, r4
    b0a8:	7a21      	ldrb	r1, [r4, #8]
    b0aa:	4831      	ldr	r0, [pc, #196]	; (b170 <DumpConnection+0x18c>)
    b0ac:	47b8      	blx	r7
                printf("\r\n");
    b0ae:	4834      	ldr	r0, [pc, #208]	; (b180 <DumpConnection+0x19c>)
    b0b0:	4b24      	ldr	r3, [pc, #144]	; (b144 <DumpConnection+0x160>)
    b0b2:	4798      	blx	r3
    b0b4:	e7ab      	b.n	b00e <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    b0b6:	4833      	ldr	r0, [pc, #204]	; (b184 <DumpConnection+0x1a0>)
    b0b8:	4b22      	ldr	r3, [pc, #136]	; (b144 <DumpConnection+0x160>)
    b0ba:	4798      	blx	r3
    b0bc:	4b32      	ldr	r3, [pc, #200]	; (b188 <DumpConnection+0x1a4>)
    b0be:	4698      	mov	r8, r3
    b0c0:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    b0c2:	4b21      	ldr	r3, [pc, #132]	; (b148 <DumpConnection+0x164>)
    b0c4:	469a      	mov	sl, r3
    b0c6:	e020      	b.n	b10a <DumpConnection+0x126>
                    printf("    ");
    b0c8:	4830      	ldr	r0, [pc, #192]	; (b18c <DumpConnection+0x1a8>)
    b0ca:	4e21      	ldr	r6, [pc, #132]	; (b150 <DumpConnection+0x16c>)
    b0cc:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    b0ce:	4643      	mov	r3, r8
    b0d0:	7899      	ldrb	r1, [r3, #2]
    b0d2:	4821      	ldr	r0, [pc, #132]	; (b158 <DumpConnection+0x174>)
    b0d4:	47b0      	blx	r6
					printf("\t");
    b0d6:	2009      	movs	r0, #9
    b0d8:	4c28      	ldr	r4, [pc, #160]	; (b17c <DumpConnection+0x198>)
    b0da:	47a0      	blx	r4
					printf("\t");
    b0dc:	2009      	movs	r0, #9
    b0de:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    b0e0:	9a01      	ldr	r2, [sp, #4]
    b0e2:	0093      	lsls	r3, r2, #2
    b0e4:	189f      	adds	r7, r3, r2
    b0e6:	007f      	lsls	r7, r7, #1
    b0e8:	4b17      	ldr	r3, [pc, #92]	; (b148 <DumpConnection+0x164>)
    b0ea:	19df      	adds	r7, r3, r7
    b0ec:	7a39      	ldrb	r1, [r7, #8]
    b0ee:	07c9      	lsls	r1, r1, #31
    b0f0:	0fc9      	lsrs	r1, r1, #31
    b0f2:	4819      	ldr	r0, [pc, #100]	; (b158 <DumpConnection+0x174>)
    b0f4:	47b0      	blx	r6
                    printf("\r\n");
    b0f6:	4822      	ldr	r0, [pc, #136]	; (b180 <DumpConnection+0x19c>)
    b0f8:	4b12      	ldr	r3, [pc, #72]	; (b144 <DumpConnection+0x160>)
    b0fa:	4798      	blx	r3
    b0fc:	3501      	adds	r5, #1
    b0fe:	230a      	movs	r3, #10
    b100:	469c      	mov	ip, r3
    b102:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    b104:	2d05      	cmp	r5, #5
    b106:	d100      	bne.n	b10a <DumpConnection+0x126>
    b108:	e781      	b.n	b00e <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    b10a:	9501      	str	r5, [sp, #4]
    b10c:	00ab      	lsls	r3, r5, #2
    b10e:	195b      	adds	r3, r3, r5
    b110:	005b      	lsls	r3, r3, #1
    b112:	4453      	add	r3, sl
    b114:	7a1b      	ldrb	r3, [r3, #8]
    b116:	09db      	lsrs	r3, r3, #7
    b118:	d0f0      	beq.n	b0fc <DumpConnection+0x118>
                    printf("%02x",i);
    b11a:	0029      	movs	r1, r5
    b11c:	480e      	ldr	r0, [pc, #56]	; (b158 <DumpConnection+0x174>)
    b11e:	4b0c      	ldr	r3, [pc, #48]	; (b150 <DumpConnection+0x16c>)
    b120:	4798      	blx	r3
                    printf("             ");
    b122:	481b      	ldr	r0, [pc, #108]	; (b190 <DumpConnection+0x1ac>)
    b124:	4b0a      	ldr	r3, [pc, #40]	; (b150 <DumpConnection+0x16c>)
    b126:	4798      	blx	r3
    b128:	4647      	mov	r7, r8
    b12a:	3f08      	subs	r7, #8
    b12c:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    b12e:	4e08      	ldr	r6, [pc, #32]	; (b150 <DumpConnection+0x16c>)
    b130:	7821      	ldrb	r1, [r4, #0]
    b132:	4809      	ldr	r0, [pc, #36]	; (b158 <DumpConnection+0x174>)
    b134:	47b0      	blx	r6
    b136:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    b138:	42bc      	cmp	r4, r7
    b13a:	d1f9      	bne.n	b130 <DumpConnection+0x14c>
    b13c:	e7c4      	b.n	b0c8 <DumpConnection+0xe4>
    b13e:	46c0      	nop			; (mov r8, r8)
    b140:	000188cc 	.word	0x000188cc
    b144:	00016e61 	.word	0x00016e61
    b148:	20002668 	.word	0x20002668
    b14c:	000188a0 	.word	0x000188a0
    b150:	00016d45 	.word	0x00016d45
    b154:	2000001c 	.word	0x2000001c
    b158:	00017fc0 	.word	0x00017fc0
    b15c:	000188b4 	.word	0x000188b4
    b160:	200026bc 	.word	0x200026bc
    b164:	00017fd0 	.word	0x00017fd0
    b168:	000188c0 	.word	0x000188c0
    b16c:	20000019 	.word	0x20000019
    b170:	00017ca4 	.word	0x00017ca4
    b174:	00018904 	.word	0x00018904
    b178:	00018908 	.word	0x00018908
    b17c:	00016d79 	.word	0x00016d79
    b180:	00018258 	.word	0x00018258
    b184:	0001890c 	.word	0x0001890c
    b188:	2000266f 	.word	0x2000266f
    b18c:	00018958 	.word	0x00018958
    b190:	00018948 	.word	0x00018948

0000b194 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b196:	46d6      	mov	lr, sl
    b198:	464f      	mov	r7, r9
    b19a:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b19c:	4b3b      	ldr	r3, [pc, #236]	; (b28c <AddConnection+0xf8>)
    b19e:	685e      	ldr	r6, [r3, #4]
    b1a0:	4d3b      	ldr	r5, [pc, #236]	; (b290 <AddConnection+0xfc>)
    b1a2:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    b1a4:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    b1a6:	46a9      	mov	r9, r5
    b1a8:	e005      	b.n	b1b6 <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    b1aa:	2fff      	cmp	r7, #255	; 0xff
    b1ac:	d015      	beq.n	b1da <AddConnection+0x46>
    b1ae:	3401      	adds	r4, #1
    b1b0:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b1b2:	2c05      	cmp	r4, #5
    b1b4:	d013      	beq.n	b1de <AddConnection+0x4a>
    b1b6:	b2e3      	uxtb	r3, r4
    b1b8:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    b1ba:	00a3      	lsls	r3, r4, #2
    b1bc:	191b      	adds	r3, r3, r4
    b1be:	005b      	lsls	r3, r3, #1
    b1c0:	444b      	add	r3, r9
    b1c2:	7a1b      	ldrb	r3, [r3, #8]
    b1c4:	09db      	lsrs	r3, r3, #7
    b1c6:	d0f0      	beq.n	b1aa <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b1c8:	0029      	movs	r1, r5
    b1ca:	0030      	movs	r0, r6
    b1cc:	4b31      	ldr	r3, [pc, #196]	; (b294 <AddConnection+0x100>)
    b1ce:	4798      	blx	r3
    b1d0:	2800      	cmp	r0, #0
    b1d2:	d0ec      	beq.n	b1ae <AddConnection+0x1a>
    b1d4:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    b1d6:	2401      	movs	r4, #1
    b1d8:	e002      	b.n	b1e0 <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    b1da:	4657      	mov	r7, sl
    b1dc:	e7e7      	b.n	b1ae <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    b1de:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    b1e0:	2fff      	cmp	r7, #255	; 0xff
    b1e2:	d04c      	beq.n	b27e <AddConnection+0xea>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    b1e4:	4b2c      	ldr	r3, [pc, #176]	; (b298 <AddConnection+0x104>)
    b1e6:	781b      	ldrb	r3, [r3, #0]
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d149      	bne.n	b280 <AddConnection+0xec>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    b1ec:	4b2b      	ldr	r3, [pc, #172]	; (b29c <AddConnection+0x108>)
    b1ee:	701f      	strb	r7, [r3, #0]
    b1f0:	00b9      	lsls	r1, r7, #2
    b1f2:	19c9      	adds	r1, r1, r7
    b1f4:	0049      	lsls	r1, r1, #1
    b1f6:	4b26      	ldr	r3, [pc, #152]	; (b290 <AddConnection+0xfc>)
    b1f8:	18c9      	adds	r1, r1, r3
    b1fa:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    b1fc:	0038      	movs	r0, r7
    b1fe:	5cf2      	ldrb	r2, [r6, r3]
    b200:	54ca      	strb	r2, [r1, r3]
    b202:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    b204:	2b08      	cmp	r3, #8
    b206:	d1fa      	bne.n	b1fe <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    b208:	0083      	lsls	r3, r0, #2
    b20a:	181b      	adds	r3, r3, r0
    b20c:	005b      	lsls	r3, r3, #1
    b20e:	4a20      	ldr	r2, [pc, #128]	; (b290 <AddConnection+0xfc>)
    b210:	18d3      	adds	r3, r2, r3
    b212:	7a19      	ldrb	r1, [r3, #8]
    b214:	2280      	movs	r2, #128	; 0x80
    b216:	4252      	negs	r2, r2
    b218:	430a      	orrs	r2, r1
    b21a:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    b21c:	4b1b      	ldr	r3, [pc, #108]	; (b28c <AddConnection+0xf8>)
    b21e:	689b      	ldr	r3, [r3, #8]
    b220:	789a      	ldrb	r2, [r3, #2]
    b222:	07d2      	lsls	r2, r2, #31
    b224:	d521      	bpl.n	b26a <AddConnection+0xd6>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    b226:	0082      	lsls	r2, r0, #2
    b228:	1812      	adds	r2, r2, r0
    b22a:	0052      	lsls	r2, r2, #1
    b22c:	4918      	ldr	r1, [pc, #96]	; (b290 <AddConnection+0xfc>)
    b22e:	188a      	adds	r2, r1, r2
    b230:	7a11      	ldrb	r1, [r2, #8]
    b232:	2501      	movs	r5, #1
    b234:	4329      	orrs	r1, r5
    b236:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    b238:	78d9      	ldrb	r1, [r3, #3]
    b23a:	0082      	lsls	r2, r0, #2
    b23c:	1810      	adds	r0, r2, r0
    b23e:	0043      	lsls	r3, r0, #1
    b240:	4813      	ldr	r0, [pc, #76]	; (b290 <AddConnection+0xfc>)
    b242:	18c0      	adds	r0, r0, r3
    b244:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    b246:	2100      	movs	r1, #0
    b248:	4b15      	ldr	r3, [pc, #84]	; (b2a0 <AddConnection+0x10c>)
    b24a:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    b24c:	4b15      	ldr	r3, [pc, #84]	; (b2a4 <AddConnection+0x110>)
    b24e:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    b250:	4a15      	ldr	r2, [pc, #84]	; (b2a8 <AddConnection+0x114>)
    b252:	7813      	ldrb	r3, [r2, #0]
    b254:	3110      	adds	r1, #16
    b256:	438b      	bics	r3, r1
    b258:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    b25a:	4b14      	ldr	r3, [pc, #80]	; (b2ac <AddConnection+0x118>)
    b25c:	4798      	blx	r3
    b25e:	4b14      	ldr	r3, [pc, #80]	; (b2b0 <AddConnection+0x11c>)
    b260:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    b262:	2007      	movs	r0, #7
    b264:	4b13      	ldr	r3, [pc, #76]	; (b2b4 <AddConnection+0x120>)
    b266:	4798      	blx	r3
    #endif

        return status;
    b268:	e00a      	b.n	b280 <AddConnection+0xec>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    b26a:	0082      	lsls	r2, r0, #2
    b26c:	1812      	adds	r2, r2, r0
    b26e:	0052      	lsls	r2, r2, #1
    b270:	4907      	ldr	r1, [pc, #28]	; (b290 <AddConnection+0xfc>)
    b272:	188a      	adds	r2, r1, r2
    b274:	7a11      	ldrb	r1, [r2, #8]
    b276:	2501      	movs	r5, #1
    b278:	43a9      	bics	r1, r5
    b27a:	7211      	strb	r1, [r2, #8]
    b27c:	e7dc      	b.n	b238 <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    b27e:	24f1      	movs	r4, #241	; 0xf1
    }
    b280:	0020      	movs	r0, r4
    b282:	bc0c      	pop	{r2, r3}
    b284:	4691      	mov	r9, r2
    b286:	469a      	mov	sl, r3
    b288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b28a:	46c0      	nop			; (mov r8, r8)
    b28c:	20002950 	.word	0x20002950
    b290:	20002668 	.word	0x20002668
    b294:	0000ac71 	.word	0x0000ac71
    b298:	20000018 	.word	0x20000018
    b29c:	200026dc 	.word	0x200026dc
    b2a0:	200026c8 	.word	0x200026c8
    b2a4:	20002664 	.word	0x20002664
    b2a8:	200026e0 	.word	0x200026e0
    b2ac:	0000aa41 	.word	0x0000aa41
    b2b0:	200026c5 	.word	0x200026c5
    b2b4:	000092e9 	.word	0x000092e9

0000b2b8 <MiApp_ConnectionMode>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    b2b8:	b510      	push	{r4, lr}
    if( Mode > 3 )
    b2ba:	2803      	cmp	r0, #3
    b2bc:	d900      	bls.n	b2c0 <MiApp_ConnectionMode+0x8>
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    b2be:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    b2c0:	4b06      	ldr	r3, [pc, #24]	; (b2dc <MiApp_ConnectionMode+0x24>)
    b2c2:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b2c4:	4a06      	ldr	r2, [pc, #24]	; (b2e0 <MiApp_ConnectionMode+0x28>)
    b2c6:	7811      	ldrb	r1, [r2, #0]
    b2c8:	230f      	movs	r3, #15
    b2ca:	400b      	ands	r3, r1
    b2cc:	0100      	lsls	r0, r0, #4
    b2ce:	4318      	orrs	r0, r3
    b2d0:	7010      	strb	r0, [r2, #0]
		PDS_Store(PDS_CONNECTION_MODE_ID);
    b2d2:	2004      	movs	r0, #4
    b2d4:	4b03      	ldr	r3, [pc, #12]	; (b2e4 <MiApp_ConnectionMode+0x2c>)
    b2d6:	4798      	blx	r3
    b2d8:	e7f1      	b.n	b2be <MiApp_ConnectionMode+0x6>
    b2da:	46c0      	nop			; (mov r8, r8)
    b2dc:	20000018 	.word	0x20000018
    b2e0:	200026b5 	.word	0x200026b5
    b2e4:	000092e9 	.word	0x000092e9

0000b2e8 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    b2e8:	2800      	cmp	r0, #0
    b2ea:	d003      	beq.n	b2f4 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    b2ec:	4b02      	ldr	r3, [pc, #8]	; (b2f8 <MiApp_SubscribeDataIndicationCallback+0x10>)
    b2ee:	6018      	str	r0, [r3, #0]
        return true;
    b2f0:	2001      	movs	r0, #1
    }
    return false;
}
    b2f2:	4770      	bx	lr
    return false;
    b2f4:	2000      	movs	r0, #0
    b2f6:	e7fc      	b.n	b2f2 <MiApp_SubscribeDataIndicationCallback+0xa>
    b2f8:	200002a8 	.word	0x200002a8

0000b2fc <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2fe:	46ce      	mov	lr, r9
    b300:	4647      	mov	r7, r8
    b302:	b580      	push	{r7, lr}
    b304:	b087      	sub	sp, #28
    b306:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    b308:	ab04      	add	r3, sp, #16
    b30a:	1dde      	adds	r6, r3, #7
    b30c:	2300      	movs	r3, #0
    b30e:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    b310:	aa04      	add	r2, sp, #16
    b312:	1d97      	adds	r7, r2, #6
    b314:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    b316:	ad05      	add	r5, sp, #20
    b318:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    b31a:	3303      	adds	r3, #3
    b31c:	4694      	mov	ip, r2
    b31e:	4463      	add	r3, ip
    b320:	4699      	mov	r9, r3
    b322:	2300      	movs	r3, #0
    b324:	464a      	mov	r2, r9
    b326:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    b328:	0031      	movs	r1, r6
    b32a:	2016      	movs	r0, #22
    b32c:	4c39      	ldr	r4, [pc, #228]	; (b414 <calculate_ToA+0x118>)
    b32e:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    b330:	0029      	movs	r1, r5
    b332:	2003      	movs	r0, #3
    b334:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    b336:	4649      	mov	r1, r9
    b338:	2014      	movs	r0, #20
    b33a:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    b33c:	0039      	movs	r1, r7
    b33e:	200b      	movs	r0, #11
    b340:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    b342:	7836      	ldrb	r6, [r6, #0]
    b344:	2001      	movs	r0, #1
    b346:	40b0      	lsls	r0, r6
    b348:	4b33      	ldr	r3, [pc, #204]	; (b418 <calculate_ToA+0x11c>)
    b34a:	4798      	blx	r3
    b34c:	1c01      	adds	r1, r0, #0
    b34e:	4c33      	ldr	r4, [pc, #204]	; (b41c <calculate_ToA+0x120>)
    b350:	4833      	ldr	r0, [pc, #204]	; (b420 <calculate_ToA+0x124>)
    b352:	47a0      	blx	r4
    b354:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    b356:	4833      	ldr	r0, [pc, #204]	; (b424 <calculate_ToA+0x128>)
    b358:	47a0      	blx	r4
    b35a:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    b35c:	8828      	ldrh	r0, [r5, #0]
    b35e:	4b32      	ldr	r3, [pc, #200]	; (b428 <calculate_ToA+0x12c>)
    b360:	4798      	blx	r3
    b362:	2200      	movs	r2, #0
    b364:	4b31      	ldr	r3, [pc, #196]	; (b42c <calculate_ToA+0x130>)
    b366:	4d32      	ldr	r5, [pc, #200]	; (b430 <calculate_ToA+0x134>)
    b368:	47a8      	blx	r5
    b36a:	9000      	str	r0, [sp, #0]
    b36c:	9101      	str	r1, [sp, #4]
    b36e:	1c20      	adds	r0, r4, #0
    b370:	4b30      	ldr	r3, [pc, #192]	; (b434 <calculate_ToA+0x138>)
    b372:	4798      	blx	r3
    b374:	0002      	movs	r2, r0
    b376:	000b      	movs	r3, r1
    b378:	9800      	ldr	r0, [sp, #0]
    b37a:	9901      	ldr	r1, [sp, #4]
    b37c:	4d2e      	ldr	r5, [pc, #184]	; (b438 <calculate_ToA+0x13c>)
    b37e:	47a8      	blx	r5
    b380:	4b2e      	ldr	r3, [pc, #184]	; (b43c <calculate_ToA+0x140>)
    b382:	4798      	blx	r3
    b384:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    b386:	2e0c      	cmp	r6, #12
    b388:	d040      	beq.n	b40c <calculate_ToA+0x110>
    b38a:	0033      	movs	r3, r6
    b38c:	3b0b      	subs	r3, #11
    b38e:	425a      	negs	r2, r3
    b390:	4153      	adcs	r3, r2
    b392:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    b394:	005b      	lsls	r3, r3, #1
    b396:	1af3      	subs	r3, r6, r3
    b398:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b39a:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    b39c:	4643      	mov	r3, r8
    b39e:	0058      	lsls	r0, r3, #1
    b3a0:	1b80      	subs	r0, r0, r6
    b3a2:	3007      	adds	r0, #7
    b3a4:	ab04      	add	r3, sp, #16
    b3a6:	3303      	adds	r3, #3
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	009b      	lsls	r3, r3, #2
    b3ac:	18c0      	adds	r0, r0, r3
    b3ae:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b3b0:	b280      	uxth	r0, r0
    b3b2:	19c0      	adds	r0, r0, r7
    b3b4:	4d1c      	ldr	r5, [pc, #112]	; (b428 <calculate_ToA+0x12c>)
    b3b6:	47a8      	blx	r5
    b3b8:	2200      	movs	r2, #0
    b3ba:	4b21      	ldr	r3, [pc, #132]	; (b440 <calculate_ToA+0x144>)
    b3bc:	4e21      	ldr	r6, [pc, #132]	; (b444 <calculate_ToA+0x148>)
    b3be:	47b0      	blx	r6
    b3c0:	9002      	str	r0, [sp, #8]
    b3c2:	9103      	str	r1, [sp, #12]
    b3c4:	0038      	movs	r0, r7
    b3c6:	47a8      	blx	r5
    b3c8:	0002      	movs	r2, r0
    b3ca:	000b      	movs	r3, r1
    b3cc:	9802      	ldr	r0, [sp, #8]
    b3ce:	9903      	ldr	r1, [sp, #12]
    b3d0:	4e1d      	ldr	r6, [pc, #116]	; (b448 <calculate_ToA+0x14c>)
    b3d2:	47b0      	blx	r6
    b3d4:	4b1d      	ldr	r3, [pc, #116]	; (b44c <calculate_ToA+0x150>)
    b3d6:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    b3d8:	b282      	uxth	r2, r0
    b3da:	ab04      	add	r3, sp, #16
    b3dc:	7998      	ldrb	r0, [r3, #6]
    b3de:	3004      	adds	r0, #4
    b3e0:	4350      	muls	r0, r2
    b3e2:	2800      	cmp	r0, #0
    b3e4:	dd14      	ble.n	b410 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    b3e6:	4b0c      	ldr	r3, [pc, #48]	; (b418 <calculate_ToA+0x11c>)
    b3e8:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    b3ea:	4e19      	ldr	r6, [pc, #100]	; (b450 <calculate_ToA+0x154>)
    b3ec:	2182      	movs	r1, #130	; 0x82
    b3ee:	05c9      	lsls	r1, r1, #23
    b3f0:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    b3f2:	1c21      	adds	r1, r4, #0
    b3f4:	4b17      	ldr	r3, [pc, #92]	; (b454 <calculate_ToA+0x158>)
    b3f6:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    b3f8:	9900      	ldr	r1, [sp, #0]
    b3fa:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    b3fc:	4b16      	ldr	r3, [pc, #88]	; (b458 <calculate_ToA+0x15c>)
    b3fe:	4798      	blx	r3
    b400:	b280      	uxth	r0, r0
    b402:	b007      	add	sp, #28
    b404:	bc0c      	pop	{r2, r3}
    b406:	4690      	mov	r8, r2
    b408:	4699      	mov	r9, r3
    b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    b40c:	2301      	movs	r3, #1
    b40e:	e7c1      	b.n	b394 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    b410:	2000      	movs	r0, #0
    b412:	e7ea      	b.n	b3ea <calculate_ToA+0xee>
    b414:	0000e209 	.word	0x0000e209
    b418:	00014881 	.word	0x00014881
    b41c:	00013ee9 	.word	0x00013ee9
    b420:	47f42400 	.word	0x47f42400
    b424:	447a0000 	.word	0x447a0000
    b428:	000163c9 	.word	0x000163c9
    b42c:	40110000 	.word	0x40110000
    b430:	000149ad 	.word	0x000149ad
    b434:	000164bd 	.word	0x000164bd
    b438:	00015835 	.word	0x00015835
    b43c:	00016561 	.word	0x00016561
    b440:	3ff00000 	.word	0x3ff00000
    b444:	00015d35 	.word	0x00015d35
    b448:	00014fcd 	.word	0x00014fcd
    b44c:	000139c9 	.word	0x000139c9
    b450:	00013bc5 	.word	0x00013bc5
    b454:	000142c9 	.word	0x000142c9
    b458:	00013999 	.word	0x00013999

0000b45c <P2PTasks>:
{
    b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b45e:	46de      	mov	lr, fp
    b460:	4657      	mov	r7, sl
    b462:	464e      	mov	r6, r9
    b464:	4645      	mov	r5, r8
    b466:	b5e0      	push	{r5, r6, r7, lr}
    b468:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    b46a:	4bc9      	ldr	r3, [pc, #804]	; (b790 <P2PTasks+0x334>)
    b46c:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    b46e:	4bc9      	ldr	r3, [pc, #804]	; (b794 <P2PTasks+0x338>)
    b470:	7b9b      	ldrb	r3, [r3, #14]
    b472:	07db      	lsls	r3, r3, #31
    b474:	d500      	bpl.n	b478 <P2PTasks+0x1c>
    b476:	e083      	b.n	b580 <P2PTasks+0x124>
    b478:	2391      	movs	r3, #145	; 0x91
    b47a:	005b      	lsls	r3, r3, #1
    b47c:	4ac5      	ldr	r2, [pc, #788]	; (b794 <P2PTasks+0x338>)
    b47e:	5cd3      	ldrb	r3, [r2, r3]
    b480:	07db      	lsls	r3, r3, #31
    b482:	d500      	bpl.n	b486 <P2PTasks+0x2a>
    b484:	e094      	b.n	b5b0 <P2PTasks+0x154>
        if( P2PStatus.bits.SaveConnection )
    b486:	4bc4      	ldr	r3, [pc, #784]	; (b798 <P2PTasks+0x33c>)
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	079b      	lsls	r3, r3, #30
    b48c:	d500      	bpl.n	b490 <P2PTasks+0x34>
    b48e:	e0aa      	b.n	b5e6 <P2PTasks+0x18a>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    b490:	2016      	movs	r0, #22
    b492:	4bc2      	ldr	r3, [pc, #776]	; (b79c <P2PTasks+0x340>)
    b494:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    b496:	23fa      	movs	r3, #250	; 0xfa
    b498:	009b      	lsls	r3, r3, #2
    b49a:	4358      	muls	r0, r3
    b49c:	4bc0      	ldr	r3, [pc, #768]	; (b7a0 <P2PTasks+0x344>)
    b49e:	469c      	mov	ip, r3
    b4a0:	4460      	add	r0, ip
    b4a2:	4bc0      	ldr	r3, [pc, #768]	; (b7a4 <P2PTasks+0x348>)
    b4a4:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    b4a6:	4bc0      	ldr	r3, [pc, #768]	; (b7a8 <P2PTasks+0x34c>)
    b4a8:	781b      	ldrb	r3, [r3, #0]
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d004      	beq.n	b4b8 <P2PTasks+0x5c>
    b4ae:	4bbf      	ldr	r3, [pc, #764]	; (b7ac <P2PTasks+0x350>)
    b4b0:	681b      	ldr	r3, [r3, #0]
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d000      	beq.n	b4b8 <P2PTasks+0x5c>
    b4b6:	e0ac      	b.n	b612 <P2PTasks+0x1b6>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b4b8:	4bb7      	ldr	r3, [pc, #732]	; (b798 <P2PTasks+0x33c>)
    b4ba:	781b      	ldrb	r3, [r3, #0]
    b4bc:	071b      	lsls	r3, r3, #28
    b4be:	d500      	bpl.n	b4c2 <P2PTasks+0x66>
    b4c0:	e38c      	b.n	bbdc <P2PTasks+0x780>
    b4c2:	4bbb      	ldr	r3, [pc, #748]	; (b7b0 <P2PTasks+0x354>)
    b4c4:	4798      	blx	r3
    b4c6:	2800      	cmp	r0, #0
    b4c8:	d100      	bne.n	b4cc <P2PTasks+0x70>
    b4ca:	e387      	b.n	bbdc <P2PTasks+0x780>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    b4cc:	2200      	movs	r2, #0
    b4ce:	4bb9      	ldr	r3, [pc, #740]	; (b7b4 <P2PTasks+0x358>)
    b4d0:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    b4d2:	4bb9      	ldr	r3, [pc, #740]	; (b7b8 <P2PTasks+0x35c>)
    b4d4:	7819      	ldrb	r1, [r3, #0]
    b4d6:	074b      	lsls	r3, r1, #29
    b4d8:	0fdb      	lsrs	r3, r3, #31
    b4da:	4ab8      	ldr	r2, [pc, #736]	; (b7bc <P2PTasks+0x360>)
    b4dc:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    b4de:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    b4e0:	08cc      	lsrs	r4, r1, #3
    b4e2:	2001      	movs	r0, #1
    b4e4:	4004      	ands	r4, r0
    b4e6:	00e4      	lsls	r4, r4, #3
    b4e8:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    b4ea:	400a      	ands	r2, r1
    b4ec:	3a01      	subs	r2, #1
    b4ee:	4255      	negs	r5, r2
    b4f0:	416a      	adcs	r2, r5
    b4f2:	4002      	ands	r2, r0
    b4f4:	0152      	lsls	r2, r2, #5
    b4f6:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    b4f8:	09cc      	lsrs	r4, r1, #7
    b4fa:	4020      	ands	r0, r4
    b4fc:	0180      	lsls	r0, r0, #6
    b4fe:	4313      	orrs	r3, r2
    b500:	4303      	orrs	r3, r0
    b502:	4aaf      	ldr	r2, [pc, #700]	; (b7c0 <P2PTasks+0x364>)
    b504:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    b506:	b249      	sxtb	r1, r1
    b508:	2900      	cmp	r1, #0
    b50a:	da00      	bge.n	b50e <P2PTasks+0xb2>
    b50c:	e097      	b.n	b63e <P2PTasks+0x1e2>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    b50e:	4aaa      	ldr	r2, [pc, #680]	; (b7b8 <P2PTasks+0x35c>)
    b510:	8a17      	ldrh	r7, [r2, #16]
    b512:	4bab      	ldr	r3, [pc, #684]	; (b7c0 <P2PTasks+0x364>)
    b514:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    b516:	7b11      	ldrb	r1, [r2, #12]
    b518:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    b51a:	6895      	ldr	r5, [r2, #8]
    b51c:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    b51e:	7b90      	ldrb	r0, [r2, #14]
    b520:	4680      	mov	r8, r0
    b522:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    b524:	7b52      	ldrb	r2, [r2, #13]
    b526:	4691      	mov	r9, r2
    b528:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    b52a:	781b      	ldrb	r3, [r3, #0]
    b52c:	069b      	lsls	r3, r3, #26
    b52e:	d400      	bmi.n	b532 <P2PTasks+0xd6>
    b530:	e332      	b.n	bb98 <P2PTasks+0x73c>
            switch( rxMessage.Payload[0] )
    b532:	782b      	ldrb	r3, [r5, #0]
    b534:	b2da      	uxtb	r2, r3
    b536:	2a83      	cmp	r2, #131	; 0x83
    b538:	d100      	bne.n	b53c <P2PTasks+0xe0>
    b53a:	e293      	b.n	ba64 <P2PTasks+0x608>
    b53c:	d800      	bhi.n	b540 <P2PTasks+0xe4>
    b53e:	e083      	b.n	b648 <P2PTasks+0x1ec>
    b540:	b2da      	uxtb	r2, r3
    b542:	2a91      	cmp	r2, #145	; 0x91
    b544:	d100      	bne.n	b548 <P2PTasks+0xec>
    b546:	e1e6      	b.n	b916 <P2PTasks+0x4ba>
    b548:	d800      	bhi.n	b54c <P2PTasks+0xf0>
    b54a:	e094      	b.n	b676 <P2PTasks+0x21a>
    b54c:	b2da      	uxtb	r2, r3
    b54e:	2a92      	cmp	r2, #146	; 0x92
    b550:	d100      	bne.n	b554 <P2PTasks+0xf8>
    b552:	e25e      	b.n	ba12 <P2PTasks+0x5b6>
    b554:	2a97      	cmp	r2, #151	; 0x97
    b556:	d17e      	bne.n	b656 <P2PTasks+0x1fa>
                            if( P2PStatus.bits.Resync )
    b558:	4b8f      	ldr	r3, [pc, #572]	; (b798 <P2PTasks+0x33c>)
    b55a:	781b      	ldrb	r3, [r3, #0]
    b55c:	069b      	lsls	r3, r3, #26
    b55e:	d500      	bpl.n	b562 <P2PTasks+0x106>
    b560:	e215      	b.n	b98e <P2PTasks+0x532>
                                    for(; i < ActiveScanResultIndex; i++)
    b562:	4b98      	ldr	r3, [pc, #608]	; (b7c4 <P2PTasks+0x368>)
    b564:	781b      	ldrb	r3, [r3, #0]
    b566:	469a      	mov	sl, r3
    b568:	2b00      	cmp	r3, #0
    b56a:	d100      	bne.n	b56e <P2PTasks+0x112>
    b56c:	e22c      	b.n	b9c8 <P2PTasks+0x56c>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b56e:	4b96      	ldr	r3, [pc, #600]	; (b7c8 <P2PTasks+0x36c>)
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b574:	4b92      	ldr	r3, [pc, #584]	; (b7c0 <P2PTasks+0x364>)
    b576:	685b      	ldr	r3, [r3, #4]
    b578:	9306      	str	r3, [sp, #24]
    b57a:	4e94      	ldr	r6, [pc, #592]	; (b7cc <P2PTasks+0x370>)
    b57c:	2400      	movs	r4, #0
    b57e:	e213      	b.n	b9a8 <P2PTasks+0x54c>
                tmpTick.Val = MiWi_TickGet();
    b580:	4b93      	ldr	r3, [pc, #588]	; (b7d0 <P2PTasks+0x374>)
    b582:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b584:	4b83      	ldr	r3, [pc, #524]	; (b794 <P2PTasks+0x338>)
    b586:	6819      	ldr	r1, [r3, #0]
    b588:	4b92      	ldr	r3, [pc, #584]	; (b7d4 <P2PTasks+0x378>)
    b58a:	4798      	blx	r3
    b58c:	4b92      	ldr	r3, [pc, #584]	; (b7d8 <P2PTasks+0x37c>)
    b58e:	4298      	cmp	r0, r3
    b590:	d800      	bhi.n	b594 <P2PTasks+0x138>
    b592:	e771      	b.n	b478 <P2PTasks+0x1c>
                    indirectMessages[i].flags.Val = 0x00;   
    b594:	4b7f      	ldr	r3, [pc, #508]	; (b794 <P2PTasks+0x338>)
    b596:	2200      	movs	r2, #0
    b598:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b59a:	001a      	movs	r2, r3
    b59c:	3210      	adds	r2, #16
    b59e:	2110      	movs	r1, #16
    b5a0:	31ff      	adds	r1, #255	; 0xff
    b5a2:	5c58      	ldrb	r0, [r3, r1]
    b5a4:	3101      	adds	r1, #1
    b5a6:	585b      	ldr	r3, [r3, r1]
    b5a8:	390c      	subs	r1, #12
    b5aa:	39ff      	subs	r1, #255	; 0xff
    b5ac:	4798      	blx	r3
    b5ae:	e763      	b.n	b478 <P2PTasks+0x1c>
                tmpTick.Val = MiWi_TickGet();
    b5b0:	4b87      	ldr	r3, [pc, #540]	; (b7d0 <P2PTasks+0x374>)
    b5b2:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b5b4:	238a      	movs	r3, #138	; 0x8a
    b5b6:	005b      	lsls	r3, r3, #1
    b5b8:	4a76      	ldr	r2, [pc, #472]	; (b794 <P2PTasks+0x338>)
    b5ba:	58d1      	ldr	r1, [r2, r3]
    b5bc:	4b85      	ldr	r3, [pc, #532]	; (b7d4 <P2PTasks+0x378>)
    b5be:	4798      	blx	r3
    b5c0:	4b85      	ldr	r3, [pc, #532]	; (b7d8 <P2PTasks+0x37c>)
    b5c2:	4298      	cmp	r0, r3
    b5c4:	d800      	bhi.n	b5c8 <P2PTasks+0x16c>
    b5c6:	e75e      	b.n	b486 <P2PTasks+0x2a>
                    indirectMessages[i].flags.Val = 0x00;   
    b5c8:	4b72      	ldr	r3, [pc, #456]	; (b794 <P2PTasks+0x338>)
    b5ca:	2100      	movs	r1, #0
    b5cc:	2291      	movs	r2, #145	; 0x91
    b5ce:	0052      	lsls	r2, r2, #1
    b5d0:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b5d2:	001a      	movs	r2, r3
    b5d4:	3225      	adds	r2, #37	; 0x25
    b5d6:	32ff      	adds	r2, #255	; 0xff
    b5d8:	4980      	ldr	r1, [pc, #512]	; (b7dc <P2PTasks+0x380>)
    b5da:	5c58      	ldrb	r0, [r3, r1]
    b5dc:	3101      	adds	r1, #1
    b5de:	585b      	ldr	r3, [r3, r1]
    b5e0:	2105      	movs	r1, #5
    b5e2:	4798      	blx	r3
    b5e4:	e74f      	b.n	b486 <P2PTasks+0x2a>
            tmpTick.Val = MiWi_TickGet();
    b5e6:	4b7a      	ldr	r3, [pc, #488]	; (b7d0 <P2PTasks+0x374>)
    b5e8:	4798      	blx	r3
            if( MiWi_TickGetDiff(tmpTick, nvmDelayTick) > (ONE_SECOND) )
    b5ea:	4b7d      	ldr	r3, [pc, #500]	; (b7e0 <P2PTasks+0x384>)
    b5ec:	6819      	ldr	r1, [r3, #0]
    b5ee:	4b79      	ldr	r3, [pc, #484]	; (b7d4 <P2PTasks+0x378>)
    b5f0:	4798      	blx	r3
    b5f2:	4b7c      	ldr	r3, [pc, #496]	; (b7e4 <P2PTasks+0x388>)
    b5f4:	4298      	cmp	r0, r3
    b5f6:	d800      	bhi.n	b5fa <P2PTasks+0x19e>
    b5f8:	e74a      	b.n	b490 <P2PTasks+0x34>
                P2PStatus.bits.SaveConnection = 0;
    b5fa:	4a67      	ldr	r2, [pc, #412]	; (b798 <P2PTasks+0x33c>)
    b5fc:	7813      	ldrb	r3, [r2, #0]
    b5fe:	2102      	movs	r1, #2
    b600:	438b      	bics	r3, r1
    b602:	7013      	strb	r3, [r2, #0]
				PDS_Store(PDS_CONNECTION_TABLE_ID);
    b604:	2005      	movs	r0, #5
    b606:	4b78      	ldr	r3, [pc, #480]	; (b7e8 <P2PTasks+0x38c>)
    b608:	4798      	blx	r3
                printf("\r\nSave Connection\r\n");
    b60a:	4878      	ldr	r0, [pc, #480]	; (b7ec <P2PTasks+0x390>)
    b60c:	4b78      	ldr	r3, [pc, #480]	; (b7f0 <P2PTasks+0x394>)
    b60e:	4798      	blx	r3
    b610:	e73e      	b.n	b490 <P2PTasks+0x34>
		tmpTick.Val = MiWi_TickGet();
    b612:	4b6f      	ldr	r3, [pc, #444]	; (b7d0 <P2PTasks+0x374>)
    b614:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    b616:	4b65      	ldr	r3, [pc, #404]	; (b7ac <P2PTasks+0x350>)
    b618:	6819      	ldr	r1, [r3, #0]
    b61a:	4b6e      	ldr	r3, [pc, #440]	; (b7d4 <P2PTasks+0x378>)
    b61c:	4798      	blx	r3
    b61e:	4b61      	ldr	r3, [pc, #388]	; (b7a4 <P2PTasks+0x348>)
    b620:	681b      	ldr	r3, [r3, #0]
    b622:	4298      	cmp	r0, r3
    b624:	d800      	bhi.n	b628 <P2PTasks+0x1cc>
    b626:	e747      	b.n	b4b8 <P2PTasks+0x5c>
			DataTxAckTimer.Val =0;
    b628:	2300      	movs	r3, #0
    b62a:	4a60      	ldr	r2, [pc, #384]	; (b7ac <P2PTasks+0x350>)
    b62c:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    b62e:	4a5e      	ldr	r2, [pc, #376]	; (b7a8 <P2PTasks+0x34c>)
    b630:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    b632:	4b70      	ldr	r3, [pc, #448]	; (b7f4 <P2PTasks+0x398>)
    b634:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    b636:	4870      	ldr	r0, [pc, #448]	; (b7f8 <P2PTasks+0x39c>)
    b638:	4b6d      	ldr	r3, [pc, #436]	; (b7f0 <P2PTasks+0x394>)
    b63a:	4798      	blx	r3
    b63c:	e73c      	b.n	b4b8 <P2PTasks+0x5c>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    b63e:	4b5e      	ldr	r3, [pc, #376]	; (b7b8 <P2PTasks+0x35c>)
    b640:	685a      	ldr	r2, [r3, #4]
    b642:	4b5f      	ldr	r3, [pc, #380]	; (b7c0 <P2PTasks+0x364>)
    b644:	605a      	str	r2, [r3, #4]
    b646:	e762      	b.n	b50e <P2PTasks+0xb2>
            switch( rxMessage.Payload[0] )
    b648:	2a81      	cmp	r2, #129	; 0x81
    b64a:	d024      	beq.n	b696 <P2PTasks+0x23a>
    b64c:	d900      	bls.n	b650 <P2PTasks+0x1f4>
    b64e:	e127      	b.n	b8a0 <P2PTasks+0x444>
    b650:	2b04      	cmp	r3, #4
    b652:	d100      	bne.n	b656 <P2PTasks+0x1fa>
    b654:	e206      	b.n	ba64 <P2PTasks+0x608>
                    P2PStatus.bits.RxHasUserData = 1;
    b656:	4c50      	ldr	r4, [pc, #320]	; (b798 <P2PTasks+0x33c>)
    b658:	7823      	ldrb	r3, [r4, #0]
    b65a:	2208      	movs	r2, #8
    b65c:	4313      	orrs	r3, r2
    b65e:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    b660:	4b66      	ldr	r3, [pc, #408]	; (b7fc <P2PTasks+0x3a0>)
    b662:	681b      	ldr	r3, [r3, #0]
    b664:	4856      	ldr	r0, [pc, #344]	; (b7c0 <P2PTasks+0x364>)
    b666:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
<<<<<<< Updated upstream
=======
0000aaa8 <PHY_EncryptReq>:
    aaa8:	b510      	push	{r4, lr}
    aaaa:	4b01      	ldr	r3, [pc, #4]	; (aab0 <PHY_EncryptReq+0x8>)
    aaac:	4798      	blx	r3
    aaae:	bd10      	pop	{r4, pc}
    aab0:	0000cced 	.word	0x0000cced

0000aab4 <PHY_SetIEEEAddr>:
    aab4:	2300      	movs	r3, #0
    aab6:	4903      	ldr	r1, [pc, #12]	; (aac4 <PHY_SetIEEEAddr+0x10>)
    aab8:	5cc2      	ldrb	r2, [r0, r3]
    aaba:	54ca      	strb	r2, [r1, r3]
    aabc:	3301      	adds	r3, #1
    aabe:	2b08      	cmp	r3, #8
    aac0:	d1fa      	bne.n	aab8 <PHY_SetIEEEAddr+0x4>
    aac2:	4770      	bx	lr
    aac4:	20002250 	.word	0x20002250

0000aac8 <PHY_TaskHandler>:
    aac8:	4770      	bx	lr
    aaca:	Address 0x0000aaca is out of bounds.


0000aacc <CommandConfCallback>:
    aacc:	b510      	push	{r4, lr}
    aace:	0010      	movs	r0, r2
    aad0:	4b01      	ldr	r3, [pc, #4]	; (aad8 <CommandConfCallback+0xc>)
    aad2:	4798      	blx	r3
    aad4:	bd10      	pop	{r4, pc}
    aad6:	46c0      	nop			; (mov r8, r8)
    aad8:	0000bde9 	.word	0x0000bde9

0000aadc <Total_Connections>:
    aadc:	2200      	movs	r2, #0
    aade:	2000      	movs	r0, #0
    aae0:	4907      	ldr	r1, [pc, #28]	; (ab00 <Total_Connections+0x24>)
    aae2:	e002      	b.n	aaea <Total_Connections+0xe>
    aae4:	3201      	adds	r2, #1
    aae6:	2a05      	cmp	r2, #5
    aae8:	d009      	beq.n	aafe <Total_Connections+0x22>
    aaea:	0093      	lsls	r3, r2, #2
    aaec:	189b      	adds	r3, r3, r2
    aaee:	005b      	lsls	r3, r3, #1
    aaf0:	18cb      	adds	r3, r1, r3
    aaf2:	7a1b      	ldrb	r3, [r3, #8]
    aaf4:	09db      	lsrs	r3, r3, #7
    aaf6:	d0f5      	beq.n	aae4 <Total_Connections+0x8>
    aaf8:	3001      	adds	r0, #1
    aafa:	b2c0      	uxtb	r0, r0
    aafc:	e7f2      	b.n	aae4 <Total_Connections+0x8>
    aafe:	4770      	bx	lr
    ab00:	20002668 	.word	0x20002668

0000ab04 <IndirectPacket>:
    ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab06:	46de      	mov	lr, fp
    ab08:	4657      	mov	r7, sl
    ab0a:	464e      	mov	r6, r9
    ab0c:	4645      	mov	r5, r8
    ab0e:	b5e0      	push	{r5, r6, r7, lr}
    ab10:	b083      	sub	sp, #12
    ab12:	466c      	mov	r4, sp
    ab14:	8061      	strh	r1, [r4, #2]
    ab16:	ac0c      	add	r4, sp, #48	; 0x30
    ab18:	7827      	ldrb	r7, [r4, #0]
    ab1a:	ac0d      	add	r4, sp, #52	; 0x34
    ab1c:	7826      	ldrb	r6, [r4, #0]
    ab1e:	ac0f      	add	r4, sp, #60	; 0x3c
    ab20:	7825      	ldrb	r5, [r4, #0]
    ab22:	ac10      	add	r4, sp, #64	; 0x40
    ab24:	7821      	ldrb	r1, [r4, #0]
    ab26:	4688      	mov	r8, r1
    ab28:	2800      	cmp	r0, #0
    ab2a:	d000      	beq.n	ab2e <IndirectPacket+0x2a>
    ab2c:	e07e      	b.n	ac2c <IndirectPacket+0x128>
    ab2e:	4c40      	ldr	r4, [pc, #256]	; (ac30 <IndirectPacket+0x12c>)
    ab30:	7ba4      	ldrb	r4, [r4, #14]
    ab32:	07e1      	lsls	r1, r4, #31
    ab34:	d400      	bmi.n	ab38 <IndirectPacket+0x34>
    ab36:	e077      	b.n	ac28 <IndirectPacket+0x124>
    ab38:	2491      	movs	r4, #145	; 0x91
    ab3a:	0064      	lsls	r4, r4, #1
    ab3c:	493c      	ldr	r1, [pc, #240]	; (ac30 <IndirectPacket+0x12c>)
    ab3e:	5d0c      	ldrb	r4, [r1, r4]
    ab40:	07e1      	lsls	r1, r4, #31
    ab42:	d506      	bpl.n	ab52 <IndirectPacket+0x4e>
    ab44:	b003      	add	sp, #12
    ab46:	bc3c      	pop	{r2, r3, r4, r5}
    ab48:	4690      	mov	r8, r2
    ab4a:	4699      	mov	r9, r3
    ab4c:	46a2      	mov	sl, r4
    ab4e:	46ab      	mov	fp, r5
    ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab52:	2401      	movs	r4, #1
    ab54:	208a      	movs	r0, #138	; 0x8a
    ab56:	0040      	lsls	r0, r0, #1
    ab58:	4360      	muls	r0, r4
    ab5a:	4935      	ldr	r1, [pc, #212]	; (ac30 <IndirectPacket+0x12c>)
    ab5c:	468c      	mov	ip, r1
    ab5e:	4484      	add	ip, r0
    ab60:	2108      	movs	r1, #8
    ab62:	4461      	add	r1, ip
    ab64:	4689      	mov	r9, r1
    ab66:	7989      	ldrb	r1, [r1, #6]
    ab68:	2001      	movs	r0, #1
    ab6a:	4301      	orrs	r1, r0
    ab6c:	468a      	mov	sl, r1
    ab6e:	2001      	movs	r0, #1
    ab70:	4003      	ands	r3, r0
    ab72:	0099      	lsls	r1, r3, #2
    ab74:	9101      	str	r1, [sp, #4]
    ab76:	21fd      	movs	r1, #253	; 0xfd
    ab78:	468b      	mov	fp, r1
    ab7a:	4651      	mov	r1, sl
    ab7c:	465b      	mov	r3, fp
    ab7e:	4019      	ands	r1, r3
    ab80:	3bf9      	subs	r3, #249	; 0xf9
    ab82:	4399      	bics	r1, r3
    ab84:	4007      	ands	r7, r0
    ab86:	00ff      	lsls	r7, r7, #3
    ab88:	000b      	movs	r3, r1
    ab8a:	9901      	ldr	r1, [sp, #4]
    ab8c:	4319      	orrs	r1, r3
    ab8e:	000b      	movs	r3, r1
    ab90:	2108      	movs	r1, #8
    ab92:	438b      	bics	r3, r1
    ab94:	4641      	mov	r1, r8
    ab96:	4008      	ands	r0, r1
    ab98:	0101      	lsls	r1, r0, #4
    ab9a:	433b      	orrs	r3, r7
    ab9c:	0018      	movs	r0, r3
    ab9e:	2310      	movs	r3, #16
    aba0:	4398      	bics	r0, r3
    aba2:	4308      	orrs	r0, r1
    aba4:	464b      	mov	r3, r9
    aba6:	7198      	strb	r0, [r3, #6]
    aba8:	4663      	mov	r3, ip
    abaa:	4669      	mov	r1, sp
    abac:	8849      	ldrh	r1, [r1, #2]
    abae:	8099      	strh	r1, [r3, #4]
    abb0:	2a00      	cmp	r2, #0
    abb2:	d00d      	beq.n	abd0 <IndirectPacket+0xcc>
    abb4:	0013      	movs	r3, r2
    abb6:	218a      	movs	r1, #138	; 0x8a
    abb8:	0049      	lsls	r1, r1, #1
    abba:	4361      	muls	r1, r4
    abbc:	3106      	adds	r1, #6
    abbe:	481c      	ldr	r0, [pc, #112]	; (ac30 <IndirectPacket+0x12c>)
    abc0:	1809      	adds	r1, r1, r0
    abc2:	3208      	adds	r2, #8
    abc4:	7818      	ldrb	r0, [r3, #0]
    abc6:	7008      	strb	r0, [r1, #0]
    abc8:	3301      	adds	r3, #1
    abca:	3101      	adds	r1, #1
    abcc:	4293      	cmp	r3, r2
    abce:	d1f9      	bne.n	abc4 <IndirectPacket+0xc0>
    abd0:	228a      	movs	r2, #138	; 0x8a
    abd2:	0052      	lsls	r2, r2, #1
    abd4:	4362      	muls	r2, r4
    abd6:	4b16      	ldr	r3, [pc, #88]	; (ac30 <IndirectPacket+0x12c>)
    abd8:	189b      	adds	r3, r3, r2
    abda:	73de      	strb	r6, [r3, #15]
    abdc:	2e00      	cmp	r6, #0
    abde:	d011      	beq.n	ac04 <IndirectPacket+0x100>
    abe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    abe2:	228a      	movs	r2, #138	; 0x8a
    abe4:	0052      	lsls	r2, r2, #1
    abe6:	4362      	muls	r2, r4
    abe8:	3210      	adds	r2, #16
    abea:	4911      	ldr	r1, [pc, #68]	; (ac30 <IndirectPacket+0x12c>)
    abec:	1852      	adds	r2, r2, r1
    abee:	3e01      	subs	r6, #1
    abf0:	b2f0      	uxtb	r0, r6
    abf2:	3001      	adds	r0, #1
    abf4:	469c      	mov	ip, r3
    abf6:	4460      	add	r0, ip
    abf8:	7819      	ldrb	r1, [r3, #0]
    abfa:	7011      	strb	r1, [r2, #0]
    abfc:	3301      	adds	r3, #1
    abfe:	3201      	adds	r2, #1
    ac00:	4283      	cmp	r3, r0
    ac02:	d1f9      	bne.n	abf8 <IndirectPacket+0xf4>
    ac04:	4e0a      	ldr	r6, [pc, #40]	; (ac30 <IndirectPacket+0x12c>)
    ac06:	238a      	movs	r3, #138	; 0x8a
    ac08:	005b      	lsls	r3, r3, #1
    ac0a:	435c      	muls	r4, r3
    ac0c:	1933      	adds	r3, r6, r4
    ac0e:	001a      	movs	r2, r3
    ac10:	3210      	adds	r2, #16
    ac12:	32ff      	adds	r2, #255	; 0xff
    ac14:	7015      	strb	r5, [r2, #0]
    ac16:	3311      	adds	r3, #17
    ac18:	33ff      	adds	r3, #255	; 0xff
    ac1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ac1c:	601a      	str	r2, [r3, #0]
    ac1e:	4b05      	ldr	r3, [pc, #20]	; (ac34 <IndirectPacket+0x130>)
    ac20:	4798      	blx	r3
    ac22:	51a0      	str	r0, [r4, r6]
    ac24:	2001      	movs	r0, #1
    ac26:	e78d      	b.n	ab44 <IndirectPacket+0x40>
    ac28:	2400      	movs	r4, #0
    ac2a:	e793      	b.n	ab54 <IndirectPacket+0x50>
    ac2c:	2000      	movs	r0, #0
    ac2e:	e789      	b.n	ab44 <IndirectPacket+0x40>
    ac30:	200026e4 	.word	0x200026e4
    ac34:	0000bf6d 	.word	0x0000bf6d

0000ac38 <SendPacket>:
    ac38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac3a:	46ce      	mov	lr, r9
    ac3c:	4647      	mov	r7, r8
    ac3e:	b580      	push	{r7, lr}
    ac40:	b08b      	sub	sp, #44	; 0x2c
    ac42:	0005      	movs	r5, r0
    ac44:	468c      	mov	ip, r1
    ac46:	9205      	str	r2, [sp, #20]
    ac48:	a812      	add	r0, sp, #72	; 0x48
    ac4a:	7800      	ldrb	r0, [r0, #0]
    ac4c:	ac13      	add	r4, sp, #76	; 0x4c
    ac4e:	7826      	ldrb	r6, [r4, #0]
    ac50:	ac15      	add	r4, sp, #84	; 0x54
    ac52:	7827      	ldrb	r7, [r4, #0]
    ac54:	ac16      	add	r4, sp, #88	; 0x58
    ac56:	7822      	ldrb	r2, [r4, #0]
    ac58:	2400      	movs	r4, #0
    ac5a:	46a0      	mov	r8, r4
    ac5c:	ac07      	add	r4, sp, #28
    ac5e:	4641      	mov	r1, r8
    ac60:	7021      	strb	r1, [r4, #0]
    ac62:	2b00      	cmp	r3, #0
    ac64:	d043      	beq.n	acee <SendPacket+0xb6>
    ac66:	0023      	movs	r3, r4
    ac68:	b2cc      	uxtb	r4, r1
    ac6a:	2103      	movs	r1, #3
    ac6c:	438c      	bics	r4, r1
    ac6e:	2101      	movs	r1, #1
    ac70:	4688      	mov	r8, r1
    ac72:	4641      	mov	r1, r8
    ac74:	430c      	orrs	r4, r1
    ac76:	701c      	strb	r4, [r3, #0]
    ac78:	2d00      	cmp	r5, #0
    ac7a:	d13e      	bne.n	acfa <SendPacket+0xc2>
    ac7c:	ac07      	add	r4, sp, #28
    ac7e:	2301      	movs	r3, #1
    ac80:	4013      	ands	r3, r2
    ac82:	015a      	lsls	r2, r3, #5
    ac84:	7823      	ldrb	r3, [r4, #0]
    ac86:	2120      	movs	r1, #32
    ac88:	438b      	bics	r3, r1
    ac8a:	4313      	orrs	r3, r2
    ac8c:	7023      	strb	r3, [r4, #0]
    ac8e:	ac07      	add	r4, sp, #28
    ac90:	2201      	movs	r2, #1
    ac92:	0013      	movs	r3, r2
    ac94:	402b      	ands	r3, r5
    ac96:	009b      	lsls	r3, r3, #2
    ac98:	4698      	mov	r8, r3
    ac9a:	7823      	ldrb	r3, [r4, #0]
    ac9c:	2104      	movs	r1, #4
    ac9e:	438b      	bics	r3, r1
    aca0:	4010      	ands	r0, r2
    aca2:	00c0      	lsls	r0, r0, #3
    aca4:	4641      	mov	r1, r8
    aca6:	430b      	orrs	r3, r1
    aca8:	2108      	movs	r1, #8
    acaa:	438b      	bics	r3, r1
    acac:	2100      	movs	r1, #0
    acae:	7261      	strb	r1, [r4, #9]
    acb0:	7225      	strb	r5, [r4, #8]
    acb2:	2101      	movs	r1, #1
    acb4:	4688      	mov	r8, r1
    acb6:	4641      	mov	r1, r8
    acb8:	404d      	eors	r5, r1
    acba:	4015      	ands	r5, r2
    acbc:	01ad      	lsls	r5, r5, #6
    acbe:	4318      	orrs	r0, r3
    acc0:	2340      	movs	r3, #64	; 0x40
    acc2:	4398      	bics	r0, r3
    acc4:	4328      	orrs	r0, r5
    acc6:	3bc0      	subs	r3, #192	; 0xc0
    acc8:	4318      	orrs	r0, r3
    acca:	7020      	strb	r0, [r4, #0]
    accc:	4663      	mov	r3, ip
    acce:	8163      	strh	r3, [r4, #10]
    acd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    acd2:	9302      	str	r3, [sp, #8]
    acd4:	9701      	str	r7, [sp, #4]
    acd6:	9600      	str	r6, [sp, #0]
    acd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    acda:	9807      	ldr	r0, [sp, #28]
    acdc:	9905      	ldr	r1, [sp, #20]
    acde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ace0:	4c09      	ldr	r4, [pc, #36]	; (ad08 <SendPacket+0xd0>)
    ace2:	47a0      	blx	r4
    ace4:	b00b      	add	sp, #44	; 0x2c
    ace6:	bc0c      	pop	{r2, r3}
    ace8:	4690      	mov	r8, r2
    acea:	4699      	mov	r9, r3
    acec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acee:	ab07      	add	r3, sp, #28
    acf0:	781c      	ldrb	r4, [r3, #0]
    acf2:	2103      	movs	r1, #3
    acf4:	438c      	bics	r4, r1
    acf6:	701c      	strb	r4, [r3, #0]
    acf8:	e7be      	b.n	ac78 <SendPacket+0x40>
    acfa:	ac07      	add	r4, sp, #28
    acfc:	7823      	ldrb	r3, [r4, #0]
    acfe:	2220      	movs	r2, #32
    ad00:	4393      	bics	r3, r2
    ad02:	7023      	strb	r3, [r4, #0]
    ad04:	e7c3      	b.n	ac8e <SendPacket+0x56>
    ad06:	46c0      	nop			; (mov r8, r8)
    ad08:	00009af1 	.word	0x00009af1

0000ad0c <isSameAddress>:
    ad0c:	b510      	push	{r4, lr}
    ad0e:	7802      	ldrb	r2, [r0, #0]
    ad10:	780b      	ldrb	r3, [r1, #0]
    ad12:	429a      	cmp	r2, r3
    ad14:	d109      	bne.n	ad2a <isSameAddress+0x1e>
    ad16:	2301      	movs	r3, #1
    ad18:	5cc4      	ldrb	r4, [r0, r3]
    ad1a:	5cca      	ldrb	r2, [r1, r3]
    ad1c:	4294      	cmp	r4, r2
    ad1e:	d106      	bne.n	ad2e <isSameAddress+0x22>
    ad20:	3301      	adds	r3, #1
    ad22:	2b08      	cmp	r3, #8
    ad24:	d1f8      	bne.n	ad18 <isSameAddress+0xc>
    ad26:	2001      	movs	r0, #1
    ad28:	bd10      	pop	{r4, pc}
    ad2a:	2000      	movs	r0, #0
    ad2c:	e7fc      	b.n	ad28 <isSameAddress+0x1c>
    ad2e:	2000      	movs	r0, #0
    ad30:	e7fa      	b.n	ad28 <isSameAddress+0x1c>
    ad32:	Address 0x0000ad32 is out of bounds.


0000ad34 <MiApp_SendData>:
    ad34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad36:	46de      	mov	lr, fp
    ad38:	4657      	mov	r7, sl
    ad3a:	464e      	mov	r6, r9
    ad3c:	b5c0      	push	{r6, r7, lr}
    ad3e:	b088      	sub	sp, #32
    ad40:	9107      	str	r1, [sp, #28]
    ad42:	0017      	movs	r7, r2
    ad44:	4699      	mov	r9, r3
    ad46:	ab10      	add	r3, sp, #64	; 0x40
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	469a      	mov	sl, r3
    ad4c:	ab11      	add	r3, sp, #68	; 0x44
    ad4e:	781b      	ldrb	r3, [r3, #0]
    ad50:	469b      	mov	fp, r3
    ad52:	2802      	cmp	r0, #2
    ad54:	d003      	beq.n	ad5e <MiApp_SendData+0x2a>
    ad56:	4d3e      	ldr	r5, [pc, #248]	; (ae50 <MiApp_SendData+0x11c>)
    ad58:	2400      	movs	r4, #0
    ad5a:	002e      	movs	r6, r5
    ad5c:	e036      	b.n	adcc <MiApp_SendData+0x98>
    ad5e:	784a      	ldrb	r2, [r1, #1]
    ad60:	0212      	lsls	r2, r2, #8
    ad62:	780b      	ldrb	r3, [r1, #0]
    ad64:	189b      	adds	r3, r3, r2
    ad66:	b29b      	uxth	r3, r3
    ad68:	4a3a      	ldr	r2, [pc, #232]	; (ae54 <MiApp_SendData+0x120>)
    ad6a:	4293      	cmp	r3, r2
    ad6c:	d1f3      	bne.n	ad56 <MiApp_SendData+0x22>
    ad6e:	2100      	movs	r1, #0
    ad70:	4837      	ldr	r0, [pc, #220]	; (ae50 <MiApp_SendData+0x11c>)
    ad72:	0002      	movs	r2, r0
    ad74:	e002      	b.n	ad7c <MiApp_SendData+0x48>
    ad76:	3101      	adds	r1, #1
    ad78:	2905      	cmp	r1, #5
    ad7a:	d021      	beq.n	adc0 <MiApp_SendData+0x8c>
    ad7c:	008b      	lsls	r3, r1, #2
    ad7e:	185b      	adds	r3, r3, r1
    ad80:	005b      	lsls	r3, r3, #1
    ad82:	18c3      	adds	r3, r0, r3
    ad84:	7a1b      	ldrb	r3, [r3, #8]
    ad86:	09db      	lsrs	r3, r3, #7
    ad88:	d0f5      	beq.n	ad76 <MiApp_SendData+0x42>
    ad8a:	008b      	lsls	r3, r1, #2
    ad8c:	185b      	adds	r3, r3, r1
    ad8e:	005b      	lsls	r3, r3, #1
    ad90:	18d3      	adds	r3, r2, r3
    ad92:	7a1b      	ldrb	r3, [r3, #8]
    ad94:	07db      	lsls	r3, r3, #31
    ad96:	d4ee      	bmi.n	ad76 <MiApp_SendData+0x42>
    ad98:	4b2f      	ldr	r3, [pc, #188]	; (ae58 <MiApp_SendData+0x124>)
    ad9a:	8819      	ldrh	r1, [r3, #0]
    ad9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad9e:	9305      	str	r3, [sp, #20]
    ada0:	465b      	mov	r3, fp
    ada2:	9304      	str	r3, [sp, #16]
    ada4:	4653      	mov	r3, sl
    ada6:	9303      	str	r3, [sp, #12]
    ada8:	464b      	mov	r3, r9
    adaa:	9302      	str	r3, [sp, #8]
    adac:	9701      	str	r7, [sp, #4]
    adae:	2301      	movs	r3, #1
    adb0:	9300      	str	r3, [sp, #0]
    adb2:	2300      	movs	r3, #0
    adb4:	2200      	movs	r2, #0
    adb6:	2001      	movs	r0, #1
    adb8:	4c28      	ldr	r4, [pc, #160]	; (ae5c <MiApp_SendData+0x128>)
    adba:	47a0      	blx	r4
    adbc:	2001      	movs	r0, #1
    adbe:	e02f      	b.n	ae20 <MiApp_SendData+0xec>
    adc0:	2001      	movs	r0, #1
    adc2:	e02d      	b.n	ae20 <MiApp_SendData+0xec>
    adc4:	3401      	adds	r4, #1
    adc6:	350a      	adds	r5, #10
    adc8:	2c05      	cmp	r4, #5
    adca:	d028      	beq.n	ae1e <MiApp_SendData+0xea>
    adcc:	00a3      	lsls	r3, r4, #2
    adce:	191b      	adds	r3, r3, r4
    add0:	005b      	lsls	r3, r3, #1
    add2:	18f3      	adds	r3, r6, r3
    add4:	7a1b      	ldrb	r3, [r3, #8]
    add6:	09db      	lsrs	r3, r3, #7
    add8:	d0f4      	beq.n	adc4 <MiApp_SendData+0x90>
    adda:	00a3      	lsls	r3, r4, #2
    addc:	191b      	adds	r3, r3, r4
    adde:	005b      	lsls	r3, r3, #1
    ade0:	4a1b      	ldr	r2, [pc, #108]	; (ae50 <MiApp_SendData+0x11c>)
    ade2:	4694      	mov	ip, r2
    ade4:	4463      	add	r3, ip
    ade6:	7a1b      	ldrb	r3, [r3, #8]
    ade8:	07db      	lsls	r3, r3, #31
    adea:	d4eb      	bmi.n	adc4 <MiApp_SendData+0x90>
    adec:	0029      	movs	r1, r5
    adee:	9807      	ldr	r0, [sp, #28]
    adf0:	4b1b      	ldr	r3, [pc, #108]	; (ae60 <MiApp_SendData+0x12c>)
    adf2:	4798      	blx	r3
    adf4:	2800      	cmp	r0, #0
    adf6:	d0e5      	beq.n	adc4 <MiApp_SendData+0x90>
    adf8:	4b17      	ldr	r3, [pc, #92]	; (ae58 <MiApp_SendData+0x124>)
    adfa:	8819      	ldrh	r1, [r3, #0]
    adfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    adfe:	9305      	str	r3, [sp, #20]
    ae00:	465b      	mov	r3, fp
    ae02:	9304      	str	r3, [sp, #16]
    ae04:	4653      	mov	r3, sl
    ae06:	9303      	str	r3, [sp, #12]
    ae08:	464b      	mov	r3, r9
    ae0a:	9302      	str	r3, [sp, #8]
    ae0c:	9701      	str	r7, [sp, #4]
    ae0e:	2301      	movs	r3, #1
    ae10:	9300      	str	r3, [sp, #0]
    ae12:	2300      	movs	r3, #0
    ae14:	9a07      	ldr	r2, [sp, #28]
    ae16:	2000      	movs	r0, #0
    ae18:	4c10      	ldr	r4, [pc, #64]	; (ae5c <MiApp_SendData+0x128>)
    ae1a:	47a0      	blx	r4
    ae1c:	e011      	b.n	ae42 <MiApp_SendData+0x10e>
    ae1e:	2000      	movs	r0, #0
    ae20:	4b0d      	ldr	r3, [pc, #52]	; (ae58 <MiApp_SendData+0x124>)
    ae22:	8819      	ldrh	r1, [r3, #0]
    ae24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae26:	9305      	str	r3, [sp, #20]
    ae28:	465b      	mov	r3, fp
    ae2a:	9304      	str	r3, [sp, #16]
    ae2c:	4653      	mov	r3, sl
    ae2e:	9303      	str	r3, [sp, #12]
    ae30:	464b      	mov	r3, r9
    ae32:	9302      	str	r3, [sp, #8]
    ae34:	9701      	str	r7, [sp, #4]
    ae36:	2301      	movs	r3, #1
    ae38:	9300      	str	r3, [sp, #0]
    ae3a:	2300      	movs	r3, #0
    ae3c:	9a07      	ldr	r2, [sp, #28]
    ae3e:	4c09      	ldr	r4, [pc, #36]	; (ae64 <MiApp_SendData+0x130>)
    ae40:	47a0      	blx	r4
    ae42:	b008      	add	sp, #32
    ae44:	bc1c      	pop	{r2, r3, r4}
    ae46:	4691      	mov	r9, r2
    ae48:	469a      	mov	sl, r3
    ae4a:	46a3      	mov	fp, r4
    ae4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae4e:	46c0      	nop			; (mov r8, r8)
    ae50:	20002668 	.word	0x20002668
    ae54:	0000ffff 	.word	0x0000ffff
    ae58:	200026bc 	.word	0x200026bc
    ae5c:	0000ab05 	.word	0x0000ab05
    ae60:	0000ad0d 	.word	0x0000ad0d
    ae64:	0000ac39 	.word	0x0000ac39

0000ae68 <MiApp_Set>:
    ae68:	b570      	push	{r4, r5, r6, lr}
    ae6a:	000d      	movs	r5, r1
    ae6c:	2400      	movs	r4, #0
    ae6e:	2800      	cmp	r0, #0
    ae70:	d001      	beq.n	ae76 <MiApp_Set+0xe>
    ae72:	0020      	movs	r0, r4
    ae74:	bd70      	pop	{r4, r5, r6, pc}
    ae76:	4b05      	ldr	r3, [pc, #20]	; (ae8c <MiApp_Set+0x24>)
    ae78:	4798      	blx	r3
    ae7a:	1e04      	subs	r4, r0, #0
    ae7c:	d0f9      	beq.n	ae72 <MiApp_Set+0xa>
    ae7e:	782a      	ldrb	r2, [r5, #0]
    ae80:	4b03      	ldr	r3, [pc, #12]	; (ae90 <MiApp_Set+0x28>)
    ae82:	701a      	strb	r2, [r3, #0]
    ae84:	2003      	movs	r0, #3
    ae86:	4b03      	ldr	r3, [pc, #12]	; (ae94 <MiApp_Set+0x2c>)
    ae88:	4798      	blx	r3
    ae8a:	e7f2      	b.n	ae72 <MiApp_Set+0xa>
    ae8c:	00009a1d 	.word	0x00009a1d
    ae90:	20000019 	.word	0x20000019
    ae94:	00009385 	.word	0x00009385

0000ae98 <MiApp_ProtocolInit>:
    ae98:	b570      	push	{r4, r5, r6, lr}
    ae9a:	b084      	sub	sp, #16
    ae9c:	2200      	movs	r2, #0
    ae9e:	4b3c      	ldr	r3, [pc, #240]	; (af90 <MiApp_ProtocolInit+0xf8>)
    aea0:	701a      	strb	r2, [r3, #0]
    aea2:	4b3c      	ldr	r3, [pc, #240]	; (af94 <MiApp_ProtocolInit+0xfc>)
    aea4:	0019      	movs	r1, r3
    aea6:	3132      	adds	r1, #50	; 0x32
    aea8:	721a      	strb	r2, [r3, #8]
    aeaa:	701a      	strb	r2, [r3, #0]
    aeac:	705a      	strb	r2, [r3, #1]
    aeae:	709a      	strb	r2, [r3, #2]
    aeb0:	330a      	adds	r3, #10
    aeb2:	428b      	cmp	r3, r1
    aeb4:	d1f8      	bne.n	aea8 <MiApp_ProtocolInit+0x10>
    aeb6:	4a38      	ldr	r2, [pc, #224]	; (af98 <MiApp_ProtocolInit+0x100>)
    aeb8:	2300      	movs	r3, #0
    aeba:	7393      	strb	r3, [r2, #14]
    aebc:	2191      	movs	r1, #145	; 0x91
    aebe:	0049      	lsls	r1, r1, #1
    aec0:	5453      	strb	r3, [r2, r1]
    aec2:	4a36      	ldr	r2, [pc, #216]	; (af9c <MiApp_ProtocolInit+0x104>)
    aec4:	6013      	str	r3, [r2, #0]
    aec6:	6053      	str	r3, [r2, #4]
    aec8:	6093      	str	r3, [r2, #8]
    aeca:	60d3      	str	r3, [r2, #12]
    aecc:	6113      	str	r3, [r2, #16]
    aece:	2002      	movs	r0, #2
    aed0:	4b33      	ldr	r3, [pc, #204]	; (afa0 <MiApp_ProtocolInit+0x108>)
    aed2:	4798      	blx	r3
    aed4:	4b33      	ldr	r3, [pc, #204]	; (afa4 <MiApp_ProtocolInit+0x10c>)
    aed6:	881b      	ldrh	r3, [r3, #0]
    aed8:	2b00      	cmp	r3, #0
    aeda:	d021      	beq.n	af20 <MiApp_ProtocolInit+0x88>
    aedc:	2003      	movs	r0, #3
    aede:	4b30      	ldr	r3, [pc, #192]	; (afa0 <MiApp_ProtocolInit+0x108>)
    aee0:	4798      	blx	r3
    aee2:	4b31      	ldr	r3, [pc, #196]	; (afa8 <MiApp_ProtocolInit+0x110>)
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	2b1f      	cmp	r3, #31
    aee8:	d84f      	bhi.n	af8a <MiApp_ProtocolInit+0xf2>
    aeea:	2002      	movs	r0, #2
    aeec:	4c2c      	ldr	r4, [pc, #176]	; (afa0 <MiApp_ProtocolInit+0x108>)
    aeee:	47a0      	blx	r4
    aef0:	2004      	movs	r0, #4
    aef2:	47a0      	blx	r4
    aef4:	2005      	movs	r0, #5
    aef6:	47a0      	blx	r4
    aef8:	2007      	movs	r0, #7
    aefa:	47a0      	blx	r4
    aefc:	482b      	ldr	r0, [pc, #172]	; (afac <MiApp_ProtocolInit+0x114>)
    aefe:	4c2c      	ldr	r4, [pc, #176]	; (afb0 <MiApp_ProtocolInit+0x118>)
    af00:	47a0      	blx	r4
    af02:	4e28      	ldr	r6, [pc, #160]	; (afa4 <MiApp_ProtocolInit+0x10c>)
    af04:	7871      	ldrb	r1, [r6, #1]
    af06:	4d2b      	ldr	r5, [pc, #172]	; (afb4 <MiApp_ProtocolInit+0x11c>)
    af08:	0028      	movs	r0, r5
    af0a:	47a0      	blx	r4
    af0c:	7831      	ldrb	r1, [r6, #0]
    af0e:	0028      	movs	r0, r5
    af10:	47a0      	blx	r4
    af12:	4829      	ldr	r0, [pc, #164]	; (afb8 <MiApp_ProtocolInit+0x120>)
    af14:	47a0      	blx	r4
    af16:	4b24      	ldr	r3, [pc, #144]	; (afa8 <MiApp_ProtocolInit+0x110>)
    af18:	7819      	ldrb	r1, [r3, #0]
    af1a:	4828      	ldr	r0, [pc, #160]	; (afbc <MiApp_ProtocolInit+0x124>)
    af1c:	47a0      	blx	r4
    af1e:	e00b      	b.n	af38 <MiApp_ProtocolInit+0xa0>
    af20:	4a27      	ldr	r2, [pc, #156]	; (afc0 <MiApp_ProtocolInit+0x128>)
    af22:	4b20      	ldr	r3, [pc, #128]	; (afa4 <MiApp_ProtocolInit+0x10c>)
    af24:	801a      	strh	r2, [r3, #0]
    af26:	2002      	movs	r0, #2
    af28:	4c26      	ldr	r4, [pc, #152]	; (afc4 <MiApp_ProtocolInit+0x12c>)
    af2a:	47a0      	blx	r4
    af2c:	2003      	movs	r0, #3
    af2e:	47a0      	blx	r4
    af30:	2004      	movs	r0, #4
    af32:	47a0      	blx	r4
    af34:	2005      	movs	r0, #5
    af36:	47a0      	blx	r4
    af38:	aa02      	add	r2, sp, #8
    af3a:	7813      	ldrb	r3, [r2, #0]
    af3c:	2102      	movs	r1, #2
    af3e:	430b      	orrs	r3, r1
    af40:	2187      	movs	r1, #135	; 0x87
    af42:	400b      	ands	r3, r1
    af44:	2140      	movs	r1, #64	; 0x40
    af46:	430b      	orrs	r3, r1
    af48:	b2db      	uxtb	r3, r3
    af4a:	2104      	movs	r1, #4
    af4c:	430b      	orrs	r3, r1
    af4e:	21c6      	movs	r1, #198	; 0xc6
    af50:	400b      	ands	r3, r1
    af52:	7013      	strb	r3, [r2, #0]
    af54:	9802      	ldr	r0, [sp, #8]
    af56:	491c      	ldr	r1, [pc, #112]	; (afc8 <MiApp_ProtocolInit+0x130>)
    af58:	4b1c      	ldr	r3, [pc, #112]	; (afcc <MiApp_ProtocolInit+0x134>)
    af5a:	4798      	blx	r3
    af5c:	4b12      	ldr	r3, [pc, #72]	; (afa8 <MiApp_ProtocolInit+0x110>)
    af5e:	781b      	ldrb	r3, [r3, #0]
    af60:	2bff      	cmp	r3, #255	; 0xff
    af62:	d003      	beq.n	af6c <MiApp_ProtocolInit+0xd4>
    af64:	4910      	ldr	r1, [pc, #64]	; (afa8 <MiApp_ProtocolInit+0x110>)
    af66:	2000      	movs	r0, #0
    af68:	4b19      	ldr	r3, [pc, #100]	; (afd0 <MiApp_ProtocolInit+0x138>)
    af6a:	4798      	blx	r3
    af6c:	466b      	mov	r3, sp
    af6e:	1d98      	adds	r0, r3, #6
    af70:	2301      	movs	r3, #1
    af72:	425b      	negs	r3, r3
    af74:	8003      	strh	r3, [r0, #0]
    af76:	490b      	ldr	r1, [pc, #44]	; (afa4 <MiApp_ProtocolInit+0x10c>)
    af78:	4b16      	ldr	r3, [pc, #88]	; (afd4 <MiApp_ProtocolInit+0x13c>)
    af7a:	4798      	blx	r3
    af7c:	4b16      	ldr	r3, [pc, #88]	; (afd8 <MiApp_ProtocolInit+0x140>)
    af7e:	781b      	ldrb	r3, [r3, #0]
    af80:	011b      	lsls	r3, r3, #4
    af82:	2209      	movs	r2, #9
    af84:	4313      	orrs	r3, r2
    af86:	4a15      	ldr	r2, [pc, #84]	; (afdc <MiApp_ProtocolInit+0x144>)
    af88:	7013      	strb	r3, [r2, #0]
    af8a:	2000      	movs	r0, #0
    af8c:	b004      	add	sp, #16
    af8e:	bd70      	pop	{r4, r5, r6, pc}
    af90:	200026e0 	.word	0x200026e0
    af94:	20002668 	.word	0x20002668
    af98:	200026e4 	.word	0x200026e4
    af9c:	200026c8 	.word	0x200026c8
    afa0:	000092ad 	.word	0x000092ad
    afa4:	200026bc 	.word	0x200026bc
    afa8:	20000019 	.word	0x20000019
    afac:	00018b44 	.word	0x00018b44
    afb0:	00016df1 	.word	0x00016df1
    afb4:	0001807c 	.word	0x0001807c
    afb8:	00018b50 	.word	0x00018b50
    afbc:	00017d50 	.word	0x00017d50
    afc0:	00004761 	.word	0x00004761
    afc4:	00009385 	.word	0x00009385
    afc8:	2000001c 	.word	0x2000001c
    afcc:	00009a45 	.word	0x00009a45
    afd0:	0000ae69 	.word	0x0000ae69
    afd4:	0000961d 	.word	0x0000961d
    afd8:	20000018 	.word	0x20000018
    afdc:	200026b5 	.word	0x200026b5

0000afe0 <MiApp_StartConnection>:
    afe0:	b530      	push	{r4, r5, lr}
    afe2:	b083      	sub	sp, #12
    afe4:	0014      	movs	r4, r2
    afe6:	001d      	movs	r5, r3
    afe8:	2801      	cmp	r0, #1
    afea:	d032      	beq.n	b052 <MiApp_StartConnection+0x72>
    afec:	2800      	cmp	r0, #0
    afee:	d005      	beq.n	affc <MiApp_StartConnection+0x1c>
    aff0:	2802      	cmp	r0, #2
    aff2:	d032      	beq.n	b05a <MiApp_StartConnection+0x7a>
    aff4:	2001      	movs	r0, #1
    aff6:	4798      	blx	r3
    aff8:	2000      	movs	r0, #0
    affa:	e028      	b.n	b04e <MiApp_StartConnection+0x6e>
    affc:	2200      	movs	r2, #0
    affe:	466b      	mov	r3, sp
    b000:	715a      	strb	r2, [r3, #5]
    b002:	4918      	ldr	r1, [pc, #96]	; (b064 <MiApp_StartConnection+0x84>)
    b004:	4b18      	ldr	r3, [pc, #96]	; (b068 <MiApp_StartConnection+0x88>)
    b006:	800b      	strh	r3, [r1, #0]
    b008:	466b      	mov	r3, sp
    b00a:	1d98      	adds	r0, r3, #6
    b00c:	2301      	movs	r3, #1
    b00e:	425b      	negs	r3, r3
    b010:	8003      	strh	r3, [r0, #0]
    b012:	4b16      	ldr	r3, [pc, #88]	; (b06c <MiApp_StartConnection+0x8c>)
    b014:	4798      	blx	r3
    b016:	07e3      	lsls	r3, r4, #31
    b018:	d40a      	bmi.n	b030 <MiApp_StartConnection+0x50>
    b01a:	466b      	mov	r3, sp
    b01c:	3305      	adds	r3, #5
    b01e:	781b      	ldrb	r3, [r3, #0]
    b020:	2201      	movs	r2, #1
    b022:	0052      	lsls	r2, r2, #1
    b024:	3301      	adds	r3, #1
    b026:	b2db      	uxtb	r3, r3
    b028:	4222      	tst	r2, r4
    b02a:	d0fa      	beq.n	b022 <MiApp_StartConnection+0x42>
    b02c:	466a      	mov	r2, sp
    b02e:	7153      	strb	r3, [r2, #5]
    b030:	466b      	mov	r3, sp
    b032:	1d59      	adds	r1, r3, #5
    b034:	2000      	movs	r0, #0
    b036:	4b0e      	ldr	r3, [pc, #56]	; (b070 <MiApp_StartConnection+0x90>)
    b038:	4798      	blx	r3
    b03a:	4c0e      	ldr	r4, [pc, #56]	; (b074 <MiApp_StartConnection+0x94>)
    b03c:	47a0      	blx	r4
    b03e:	4b0e      	ldr	r3, [pc, #56]	; (b078 <MiApp_StartConnection+0x98>)
    b040:	6018      	str	r0, [r3, #0]
    b042:	47a0      	blx	r4
    b044:	4b0d      	ldr	r3, [pc, #52]	; (b07c <MiApp_StartConnection+0x9c>)
    b046:	6018      	str	r0, [r3, #0]
    b048:	2000      	movs	r0, #0
    b04a:	47a8      	blx	r5
    b04c:	2001      	movs	r0, #1
    b04e:	b003      	add	sp, #12
    b050:	bd30      	pop	{r4, r5, pc}
    b052:	2001      	movs	r0, #1
    b054:	4798      	blx	r3
    b056:	2000      	movs	r0, #0
    b058:	e7f9      	b.n	b04e <MiApp_StartConnection+0x6e>
    b05a:	2001      	movs	r0, #1
    b05c:	4798      	blx	r3
    b05e:	2000      	movs	r0, #0
    b060:	e7f5      	b.n	b04e <MiApp_StartConnection+0x6e>
    b062:	46c0      	nop			; (mov r8, r8)
    b064:	200026bc 	.word	0x200026bc
    b068:	00004761 	.word	0x00004761
    b06c:	0000961d 	.word	0x0000961d
    b070:	0000ae69 	.word	0x0000ae69
    b074:	0000bf6d 	.word	0x0000bf6d
    b078:	2000290c 	.word	0x2000290c
    b07c:	2000269c 	.word	0x2000269c

0000b080 <DumpConnection>:
    b080:	b5f0      	push	{r4, r5, r6, r7, lr}
    b082:	46d6      	mov	lr, sl
    b084:	4647      	mov	r7, r8
    b086:	b580      	push	{r7, lr}
    b088:	b083      	sub	sp, #12
    b08a:	0005      	movs	r5, r0
    b08c:	2805      	cmp	r0, #5
    b08e:	d811      	bhi.n	b0b4 <DumpConnection+0x34>
    b090:	2d04      	cmp	r5, #4
    b092:	d85e      	bhi.n	b152 <DumpConnection+0xd2>
    b094:	4851      	ldr	r0, [pc, #324]	; (b1dc <DumpConnection+0x15c>)
    b096:	4b52      	ldr	r3, [pc, #328]	; (b1e0 <DumpConnection+0x160>)
    b098:	4798      	blx	r3
    b09a:	00ab      	lsls	r3, r5, #2
    b09c:	195b      	adds	r3, r3, r5
    b09e:	005b      	lsls	r3, r3, #1
    b0a0:	4a50      	ldr	r2, [pc, #320]	; (b1e4 <DumpConnection+0x164>)
    b0a2:	18d3      	adds	r3, r2, r3
    b0a4:	7a1b      	ldrb	r3, [r3, #8]
    b0a6:	09db      	lsrs	r3, r3, #7
    b0a8:	d123      	bne.n	b0f2 <DumpConnection+0x72>
    b0aa:	b003      	add	sp, #12
    b0ac:	bc0c      	pop	{r2, r3}
    b0ae:	4690      	mov	r8, r2
    b0b0:	469a      	mov	sl, r3
    b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0b4:	484c      	ldr	r0, [pc, #304]	; (b1e8 <DumpConnection+0x168>)
    b0b6:	4b4d      	ldr	r3, [pc, #308]	; (b1ec <DumpConnection+0x16c>)
    b0b8:	4798      	blx	r3
    b0ba:	4c4d      	ldr	r4, [pc, #308]	; (b1f0 <DumpConnection+0x170>)
    b0bc:	0026      	movs	r6, r4
    b0be:	3e08      	subs	r6, #8
    b0c0:	4f4a      	ldr	r7, [pc, #296]	; (b1ec <DumpConnection+0x16c>)
    b0c2:	79e1      	ldrb	r1, [r4, #7]
    b0c4:	484b      	ldr	r0, [pc, #300]	; (b1f4 <DumpConnection+0x174>)
    b0c6:	47b8      	blx	r7
    b0c8:	3c01      	subs	r4, #1
    b0ca:	42b4      	cmp	r4, r6
    b0cc:	d1f9      	bne.n	b0c2 <DumpConnection+0x42>
    b0ce:	484a      	ldr	r0, [pc, #296]	; (b1f8 <DumpConnection+0x178>)
    b0d0:	4c46      	ldr	r4, [pc, #280]	; (b1ec <DumpConnection+0x16c>)
    b0d2:	47a0      	blx	r4
    b0d4:	4f49      	ldr	r7, [pc, #292]	; (b1fc <DumpConnection+0x17c>)
    b0d6:	7879      	ldrb	r1, [r7, #1]
    b0d8:	4e49      	ldr	r6, [pc, #292]	; (b200 <DumpConnection+0x180>)
    b0da:	0030      	movs	r0, r6
    b0dc:	47a0      	blx	r4
    b0de:	7839      	ldrb	r1, [r7, #0]
    b0e0:	0030      	movs	r0, r6
    b0e2:	47a0      	blx	r4
    b0e4:	4847      	ldr	r0, [pc, #284]	; (b204 <DumpConnection+0x184>)
    b0e6:	47a0      	blx	r4
    b0e8:	4b47      	ldr	r3, [pc, #284]	; (b208 <DumpConnection+0x188>)
    b0ea:	7819      	ldrb	r1, [r3, #0]
    b0ec:	4847      	ldr	r0, [pc, #284]	; (b20c <DumpConnection+0x18c>)
    b0ee:	47a0      	blx	r4
    b0f0:	e7ce      	b.n	b090 <DumpConnection+0x10>
    b0f2:	0029      	movs	r1, r5
    b0f4:	483f      	ldr	r0, [pc, #252]	; (b1f4 <DumpConnection+0x174>)
    b0f6:	4c3d      	ldr	r4, [pc, #244]	; (b1ec <DumpConnection+0x16c>)
    b0f8:	47a0      	blx	r4
    b0fa:	4845      	ldr	r0, [pc, #276]	; (b210 <DumpConnection+0x190>)
    b0fc:	47a0      	blx	r4
    b0fe:	00ae      	lsls	r6, r5, #2
    b100:	1976      	adds	r6, r6, r5
    b102:	0076      	lsls	r6, r6, #1
    b104:	1df4      	adds	r4, r6, #7
    b106:	4b37      	ldr	r3, [pc, #220]	; (b1e4 <DumpConnection+0x164>)
    b108:	18e4      	adds	r4, r4, r3
    b10a:	3e01      	subs	r6, #1
    b10c:	18f6      	adds	r6, r6, r3
    b10e:	4f37      	ldr	r7, [pc, #220]	; (b1ec <DumpConnection+0x16c>)
    b110:	7821      	ldrb	r1, [r4, #0]
    b112:	4838      	ldr	r0, [pc, #224]	; (b1f4 <DumpConnection+0x174>)
    b114:	47b8      	blx	r7
    b116:	3c01      	subs	r4, #1
    b118:	42b4      	cmp	r4, r6
    b11a:	d1f9      	bne.n	b110 <DumpConnection+0x90>
    b11c:	483d      	ldr	r0, [pc, #244]	; (b214 <DumpConnection+0x194>)
    b11e:	4f33      	ldr	r7, [pc, #204]	; (b1ec <DumpConnection+0x16c>)
    b120:	47b8      	blx	r7
    b122:	4e30      	ldr	r6, [pc, #192]	; (b1e4 <DumpConnection+0x164>)
    b124:	00ac      	lsls	r4, r5, #2
    b126:	1963      	adds	r3, r4, r5
    b128:	005b      	lsls	r3, r3, #1
    b12a:	18f3      	adds	r3, r6, r3
    b12c:	7a59      	ldrb	r1, [r3, #9]
    b12e:	4831      	ldr	r0, [pc, #196]	; (b1f4 <DumpConnection+0x174>)
    b130:	47b8      	blx	r7
    b132:	2009      	movs	r0, #9
    b134:	4b38      	ldr	r3, [pc, #224]	; (b218 <DumpConnection+0x198>)
    b136:	4698      	mov	r8, r3
    b138:	4798      	blx	r3
    b13a:	2009      	movs	r0, #9
    b13c:	47c0      	blx	r8
    b13e:	1964      	adds	r4, r4, r5
    b140:	0064      	lsls	r4, r4, #1
    b142:	1934      	adds	r4, r6, r4
    b144:	7a21      	ldrb	r1, [r4, #8]
    b146:	4831      	ldr	r0, [pc, #196]	; (b20c <DumpConnection+0x18c>)
    b148:	47b8      	blx	r7
    b14a:	4834      	ldr	r0, [pc, #208]	; (b21c <DumpConnection+0x19c>)
    b14c:	4b24      	ldr	r3, [pc, #144]	; (b1e0 <DumpConnection+0x160>)
    b14e:	4798      	blx	r3
    b150:	e7ab      	b.n	b0aa <DumpConnection+0x2a>
    b152:	4833      	ldr	r0, [pc, #204]	; (b220 <DumpConnection+0x1a0>)
    b154:	4b22      	ldr	r3, [pc, #136]	; (b1e0 <DumpConnection+0x160>)
    b156:	4798      	blx	r3
    b158:	4b32      	ldr	r3, [pc, #200]	; (b224 <DumpConnection+0x1a4>)
    b15a:	4698      	mov	r8, r3
    b15c:	2500      	movs	r5, #0
    b15e:	4b21      	ldr	r3, [pc, #132]	; (b1e4 <DumpConnection+0x164>)
    b160:	469a      	mov	sl, r3
    b162:	e020      	b.n	b1a6 <DumpConnection+0x126>
    b164:	4830      	ldr	r0, [pc, #192]	; (b228 <DumpConnection+0x1a8>)
    b166:	4e21      	ldr	r6, [pc, #132]	; (b1ec <DumpConnection+0x16c>)
    b168:	47b0      	blx	r6
    b16a:	4643      	mov	r3, r8
    b16c:	7899      	ldrb	r1, [r3, #2]
    b16e:	4821      	ldr	r0, [pc, #132]	; (b1f4 <DumpConnection+0x174>)
    b170:	47b0      	blx	r6
    b172:	2009      	movs	r0, #9
    b174:	4c28      	ldr	r4, [pc, #160]	; (b218 <DumpConnection+0x198>)
    b176:	47a0      	blx	r4
    b178:	2009      	movs	r0, #9
    b17a:	47a0      	blx	r4
    b17c:	9a01      	ldr	r2, [sp, #4]
    b17e:	0093      	lsls	r3, r2, #2
    b180:	189f      	adds	r7, r3, r2
    b182:	007f      	lsls	r7, r7, #1
    b184:	4b17      	ldr	r3, [pc, #92]	; (b1e4 <DumpConnection+0x164>)
    b186:	19df      	adds	r7, r3, r7
    b188:	7a39      	ldrb	r1, [r7, #8]
    b18a:	07c9      	lsls	r1, r1, #31
    b18c:	0fc9      	lsrs	r1, r1, #31
    b18e:	4819      	ldr	r0, [pc, #100]	; (b1f4 <DumpConnection+0x174>)
    b190:	47b0      	blx	r6
    b192:	4822      	ldr	r0, [pc, #136]	; (b21c <DumpConnection+0x19c>)
    b194:	4b12      	ldr	r3, [pc, #72]	; (b1e0 <DumpConnection+0x160>)
    b196:	4798      	blx	r3
    b198:	3501      	adds	r5, #1
    b19a:	230a      	movs	r3, #10
    b19c:	469c      	mov	ip, r3
    b19e:	44e0      	add	r8, ip
    b1a0:	2d05      	cmp	r5, #5
    b1a2:	d100      	bne.n	b1a6 <DumpConnection+0x126>
    b1a4:	e781      	b.n	b0aa <DumpConnection+0x2a>
    b1a6:	9501      	str	r5, [sp, #4]
    b1a8:	00ab      	lsls	r3, r5, #2
    b1aa:	195b      	adds	r3, r3, r5
    b1ac:	005b      	lsls	r3, r3, #1
    b1ae:	4453      	add	r3, sl
    b1b0:	7a1b      	ldrb	r3, [r3, #8]
    b1b2:	09db      	lsrs	r3, r3, #7
    b1b4:	d0f0      	beq.n	b198 <DumpConnection+0x118>
    b1b6:	0029      	movs	r1, r5
    b1b8:	480e      	ldr	r0, [pc, #56]	; (b1f4 <DumpConnection+0x174>)
    b1ba:	4b0c      	ldr	r3, [pc, #48]	; (b1ec <DumpConnection+0x16c>)
    b1bc:	4798      	blx	r3
    b1be:	481b      	ldr	r0, [pc, #108]	; (b22c <DumpConnection+0x1ac>)
    b1c0:	4b0a      	ldr	r3, [pc, #40]	; (b1ec <DumpConnection+0x16c>)
    b1c2:	4798      	blx	r3
    b1c4:	4647      	mov	r7, r8
    b1c6:	3f08      	subs	r7, #8
    b1c8:	4644      	mov	r4, r8
    b1ca:	4e08      	ldr	r6, [pc, #32]	; (b1ec <DumpConnection+0x16c>)
    b1cc:	7821      	ldrb	r1, [r4, #0]
    b1ce:	4809      	ldr	r0, [pc, #36]	; (b1f4 <DumpConnection+0x174>)
    b1d0:	47b0      	blx	r6
    b1d2:	3c01      	subs	r4, #1
    b1d4:	42bc      	cmp	r4, r7
    b1d6:	d1f9      	bne.n	b1cc <DumpConnection+0x14c>
    b1d8:	e7c4      	b.n	b164 <DumpConnection+0xe4>
    b1da:	46c0      	nop			; (mov r8, r8)
    b1dc:	00018ab0 	.word	0x00018ab0
    b1e0:	00016f0d 	.word	0x00016f0d
    b1e4:	20002668 	.word	0x20002668
    b1e8:	00018a84 	.word	0x00018a84
    b1ec:	00016df1 	.word	0x00016df1
    b1f0:	2000001c 	.word	0x2000001c
    b1f4:	0001806c 	.word	0x0001806c
    b1f8:	00018a98 	.word	0x00018a98
    b1fc:	200026bc 	.word	0x200026bc
    b200:	0001807c 	.word	0x0001807c
    b204:	00018aa4 	.word	0x00018aa4
    b208:	20000019 	.word	0x20000019
    b20c:	00017d50 	.word	0x00017d50
    b210:	00018ae8 	.word	0x00018ae8
    b214:	00018aec 	.word	0x00018aec
    b218:	00016e25 	.word	0x00016e25
    b21c:	000182a8 	.word	0x000182a8
    b220:	00018af0 	.word	0x00018af0
    b224:	2000266f 	.word	0x2000266f
    b228:	00018b3c 	.word	0x00018b3c
    b22c:	00018b2c 	.word	0x00018b2c

0000b230 <AddConnection>:
    b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b232:	46d6      	mov	lr, sl
    b234:	464f      	mov	r7, r9
    b236:	b580      	push	{r7, lr}
    b238:	4b3b      	ldr	r3, [pc, #236]	; (b328 <AddConnection+0xf8>)
    b23a:	685e      	ldr	r6, [r3, #4]
    b23c:	4d3b      	ldr	r5, [pc, #236]	; (b32c <AddConnection+0xfc>)
    b23e:	2400      	movs	r4, #0
    b240:	27ff      	movs	r7, #255	; 0xff
    b242:	46a9      	mov	r9, r5
    b244:	e005      	b.n	b252 <AddConnection+0x22>
    b246:	2fff      	cmp	r7, #255	; 0xff
    b248:	d015      	beq.n	b276 <AddConnection+0x46>
    b24a:	3401      	adds	r4, #1
    b24c:	350a      	adds	r5, #10
    b24e:	2c05      	cmp	r4, #5
    b250:	d013      	beq.n	b27a <AddConnection+0x4a>
    b252:	b2e3      	uxtb	r3, r4
    b254:	469a      	mov	sl, r3
    b256:	00a3      	lsls	r3, r4, #2
    b258:	191b      	adds	r3, r3, r4
    b25a:	005b      	lsls	r3, r3, #1
    b25c:	444b      	add	r3, r9
    b25e:	7a1b      	ldrb	r3, [r3, #8]
    b260:	09db      	lsrs	r3, r3, #7
    b262:	d0f0      	beq.n	b246 <AddConnection+0x16>
    b264:	0029      	movs	r1, r5
    b266:	0030      	movs	r0, r6
    b268:	4b31      	ldr	r3, [pc, #196]	; (b330 <AddConnection+0x100>)
    b26a:	4798      	blx	r3
    b26c:	2800      	cmp	r0, #0
    b26e:	d0ec      	beq.n	b24a <AddConnection+0x1a>
    b270:	4657      	mov	r7, sl
    b272:	2401      	movs	r4, #1
    b274:	e002      	b.n	b27c <AddConnection+0x4c>
    b276:	4657      	mov	r7, sl
    b278:	e7e7      	b.n	b24a <AddConnection+0x1a>
    b27a:	2400      	movs	r4, #0
    b27c:	2fff      	cmp	r7, #255	; 0xff
    b27e:	d04c      	beq.n	b31a <AddConnection+0xea>
    b280:	4b2c      	ldr	r3, [pc, #176]	; (b334 <AddConnection+0x104>)
    b282:	781b      	ldrb	r3, [r3, #0]
    b284:	2b00      	cmp	r3, #0
    b286:	d149      	bne.n	b31c <AddConnection+0xec>
    b288:	4b2b      	ldr	r3, [pc, #172]	; (b338 <AddConnection+0x108>)
    b28a:	701f      	strb	r7, [r3, #0]
    b28c:	00b9      	lsls	r1, r7, #2
    b28e:	19c9      	adds	r1, r1, r7
    b290:	0049      	lsls	r1, r1, #1
    b292:	4b26      	ldr	r3, [pc, #152]	; (b32c <AddConnection+0xfc>)
    b294:	18c9      	adds	r1, r1, r3
    b296:	2300      	movs	r3, #0
    b298:	0038      	movs	r0, r7
    b29a:	5cf2      	ldrb	r2, [r6, r3]
    b29c:	54ca      	strb	r2, [r1, r3]
    b29e:	3301      	adds	r3, #1
    b2a0:	2b08      	cmp	r3, #8
    b2a2:	d1fa      	bne.n	b29a <AddConnection+0x6a>
    b2a4:	0083      	lsls	r3, r0, #2
    b2a6:	181b      	adds	r3, r3, r0
    b2a8:	005b      	lsls	r3, r3, #1
    b2aa:	4a20      	ldr	r2, [pc, #128]	; (b32c <AddConnection+0xfc>)
    b2ac:	18d3      	adds	r3, r2, r3
    b2ae:	7a19      	ldrb	r1, [r3, #8]
    b2b0:	2280      	movs	r2, #128	; 0x80
    b2b2:	4252      	negs	r2, r2
    b2b4:	430a      	orrs	r2, r1
    b2b6:	721a      	strb	r2, [r3, #8]
    b2b8:	4b1b      	ldr	r3, [pc, #108]	; (b328 <AddConnection+0xf8>)
    b2ba:	689b      	ldr	r3, [r3, #8]
    b2bc:	789a      	ldrb	r2, [r3, #2]
    b2be:	07d2      	lsls	r2, r2, #31
    b2c0:	d521      	bpl.n	b306 <AddConnection+0xd6>
    b2c2:	0082      	lsls	r2, r0, #2
    b2c4:	1812      	adds	r2, r2, r0
    b2c6:	0052      	lsls	r2, r2, #1
    b2c8:	4918      	ldr	r1, [pc, #96]	; (b32c <AddConnection+0xfc>)
    b2ca:	188a      	adds	r2, r1, r2
    b2cc:	7a11      	ldrb	r1, [r2, #8]
    b2ce:	2501      	movs	r5, #1
    b2d0:	4329      	orrs	r1, r5
    b2d2:	7211      	strb	r1, [r2, #8]
    b2d4:	78d9      	ldrb	r1, [r3, #3]
    b2d6:	0082      	lsls	r2, r0, #2
    b2d8:	1810      	adds	r0, r2, r0
    b2da:	0043      	lsls	r3, r0, #1
    b2dc:	4813      	ldr	r0, [pc, #76]	; (b32c <AddConnection+0xfc>)
    b2de:	18c0      	adds	r0, r0, r3
    b2e0:	7241      	strb	r1, [r0, #9]
    b2e2:	2100      	movs	r1, #0
    b2e4:	4b15      	ldr	r3, [pc, #84]	; (b33c <AddConnection+0x10c>)
    b2e6:	50d1      	str	r1, [r2, r3]
    b2e8:	4b15      	ldr	r3, [pc, #84]	; (b340 <AddConnection+0x110>)
    b2ea:	701f      	strb	r7, [r3, #0]
    b2ec:	4a15      	ldr	r2, [pc, #84]	; (b344 <AddConnection+0x114>)
    b2ee:	7813      	ldrb	r3, [r2, #0]
    b2f0:	3110      	adds	r1, #16
    b2f2:	438b      	bics	r3, r1
    b2f4:	7013      	strb	r3, [r2, #0]
    b2f6:	4b14      	ldr	r3, [pc, #80]	; (b348 <AddConnection+0x118>)
    b2f8:	4798      	blx	r3
    b2fa:	4b14      	ldr	r3, [pc, #80]	; (b34c <AddConnection+0x11c>)
    b2fc:	7018      	strb	r0, [r3, #0]
    b2fe:	2007      	movs	r0, #7
    b300:	4b13      	ldr	r3, [pc, #76]	; (b350 <AddConnection+0x120>)
    b302:	4798      	blx	r3
    b304:	e00a      	b.n	b31c <AddConnection+0xec>
    b306:	0082      	lsls	r2, r0, #2
    b308:	1812      	adds	r2, r2, r0
    b30a:	0052      	lsls	r2, r2, #1
    b30c:	4907      	ldr	r1, [pc, #28]	; (b32c <AddConnection+0xfc>)
    b30e:	188a      	adds	r2, r1, r2
    b310:	7a11      	ldrb	r1, [r2, #8]
    b312:	2501      	movs	r5, #1
    b314:	43a9      	bics	r1, r5
    b316:	7211      	strb	r1, [r2, #8]
    b318:	e7dc      	b.n	b2d4 <AddConnection+0xa4>
    b31a:	24f1      	movs	r4, #241	; 0xf1
    b31c:	0020      	movs	r0, r4
    b31e:	bc0c      	pop	{r2, r3}
    b320:	4691      	mov	r9, r2
    b322:	469a      	mov	sl, r3
    b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b326:	46c0      	nop			; (mov r8, r8)
    b328:	20002950 	.word	0x20002950
    b32c:	20002668 	.word	0x20002668
    b330:	0000ad0d 	.word	0x0000ad0d
    b334:	20000018 	.word	0x20000018
    b338:	200026dc 	.word	0x200026dc
    b33c:	200026c8 	.word	0x200026c8
    b340:	20002664 	.word	0x20002664
    b344:	200026e0 	.word	0x200026e0
    b348:	0000aadd 	.word	0x0000aadd
    b34c:	200026c5 	.word	0x200026c5
    b350:	00009385 	.word	0x00009385

0000b354 <MiApp_ConnectionMode>:
    b354:	b510      	push	{r4, lr}
    b356:	2803      	cmp	r0, #3
    b358:	d900      	bls.n	b35c <MiApp_ConnectionMode+0x8>
    b35a:	bd10      	pop	{r4, pc}
    b35c:	4b06      	ldr	r3, [pc, #24]	; (b378 <MiApp_ConnectionMode+0x24>)
    b35e:	7018      	strb	r0, [r3, #0]
    b360:	4a06      	ldr	r2, [pc, #24]	; (b37c <MiApp_ConnectionMode+0x28>)
    b362:	7811      	ldrb	r1, [r2, #0]
    b364:	230f      	movs	r3, #15
    b366:	400b      	ands	r3, r1
    b368:	0100      	lsls	r0, r0, #4
    b36a:	4318      	orrs	r0, r3
    b36c:	7010      	strb	r0, [r2, #0]
    b36e:	2004      	movs	r0, #4
    b370:	4b03      	ldr	r3, [pc, #12]	; (b380 <MiApp_ConnectionMode+0x2c>)
    b372:	4798      	blx	r3
    b374:	e7f1      	b.n	b35a <MiApp_ConnectionMode+0x6>
    b376:	46c0      	nop			; (mov r8, r8)
    b378:	20000018 	.word	0x20000018
    b37c:	200026b5 	.word	0x200026b5
    b380:	00009385 	.word	0x00009385

0000b384 <MiApp_SubscribeDataIndicationCallback>:
    b384:	2800      	cmp	r0, #0
    b386:	d003      	beq.n	b390 <MiApp_SubscribeDataIndicationCallback+0xc>
    b388:	4b02      	ldr	r3, [pc, #8]	; (b394 <MiApp_SubscribeDataIndicationCallback+0x10>)
    b38a:	6018      	str	r0, [r3, #0]
    b38c:	2001      	movs	r0, #1
    b38e:	4770      	bx	lr
    b390:	2000      	movs	r0, #0
    b392:	e7fc      	b.n	b38e <MiApp_SubscribeDataIndicationCallback+0xa>
    b394:	200002a8 	.word	0x200002a8

0000b398 <calculate_ToA>:
    b398:	b5f0      	push	{r4, r5, r6, r7, lr}
    b39a:	46ce      	mov	lr, r9
    b39c:	4647      	mov	r7, r8
    b39e:	b580      	push	{r7, lr}
    b3a0:	b087      	sub	sp, #28
    b3a2:	4680      	mov	r8, r0
    b3a4:	ab04      	add	r3, sp, #16
    b3a6:	1dde      	adds	r6, r3, #7
    b3a8:	2300      	movs	r3, #0
    b3aa:	7033      	strb	r3, [r6, #0]
    b3ac:	aa04      	add	r2, sp, #16
    b3ae:	1d97      	adds	r7, r2, #6
    b3b0:	7193      	strb	r3, [r2, #6]
    b3b2:	ad05      	add	r5, sp, #20
    b3b4:	802b      	strh	r3, [r5, #0]
    b3b6:	3303      	adds	r3, #3
    b3b8:	4694      	mov	ip, r2
    b3ba:	4463      	add	r3, ip
    b3bc:	4699      	mov	r9, r3
    b3be:	2300      	movs	r3, #0
    b3c0:	464a      	mov	r2, r9
    b3c2:	7013      	strb	r3, [r2, #0]
    b3c4:	0031      	movs	r1, r6
    b3c6:	2016      	movs	r0, #22
    b3c8:	4c39      	ldr	r4, [pc, #228]	; (b4b0 <calculate_ToA+0x118>)
    b3ca:	47a0      	blx	r4
    b3cc:	0029      	movs	r1, r5
    b3ce:	2003      	movs	r0, #3
    b3d0:	47a0      	blx	r4
    b3d2:	4649      	mov	r1, r9
    b3d4:	2014      	movs	r0, #20
    b3d6:	47a0      	blx	r4
    b3d8:	0039      	movs	r1, r7
    b3da:	200b      	movs	r0, #11
    b3dc:	47a0      	blx	r4
    b3de:	7836      	ldrb	r6, [r6, #0]
    b3e0:	2001      	movs	r0, #1
    b3e2:	40b0      	lsls	r0, r6
    b3e4:	4b33      	ldr	r3, [pc, #204]	; (b4b4 <calculate_ToA+0x11c>)
    b3e6:	4798      	blx	r3
    b3e8:	1c01      	adds	r1, r0, #0
    b3ea:	4c33      	ldr	r4, [pc, #204]	; (b4b8 <calculate_ToA+0x120>)
    b3ec:	4833      	ldr	r0, [pc, #204]	; (b4bc <calculate_ToA+0x124>)
    b3ee:	47a0      	blx	r4
    b3f0:	1c01      	adds	r1, r0, #0
    b3f2:	4833      	ldr	r0, [pc, #204]	; (b4c0 <calculate_ToA+0x128>)
    b3f4:	47a0      	blx	r4
    b3f6:	1c04      	adds	r4, r0, #0
    b3f8:	8828      	ldrh	r0, [r5, #0]
    b3fa:	4b32      	ldr	r3, [pc, #200]	; (b4c4 <calculate_ToA+0x12c>)
    b3fc:	4798      	blx	r3
    b3fe:	2200      	movs	r2, #0
    b400:	4b31      	ldr	r3, [pc, #196]	; (b4c8 <calculate_ToA+0x130>)
    b402:	4d32      	ldr	r5, [pc, #200]	; (b4cc <calculate_ToA+0x134>)
    b404:	47a8      	blx	r5
    b406:	9000      	str	r0, [sp, #0]
    b408:	9101      	str	r1, [sp, #4]
    b40a:	1c20      	adds	r0, r4, #0
    b40c:	4b30      	ldr	r3, [pc, #192]	; (b4d0 <calculate_ToA+0x138>)
    b40e:	4798      	blx	r3
    b410:	0002      	movs	r2, r0
    b412:	000b      	movs	r3, r1
    b414:	9800      	ldr	r0, [sp, #0]
    b416:	9901      	ldr	r1, [sp, #4]
    b418:	4d2e      	ldr	r5, [pc, #184]	; (b4d4 <calculate_ToA+0x13c>)
    b41a:	47a8      	blx	r5
    b41c:	4b2e      	ldr	r3, [pc, #184]	; (b4d8 <calculate_ToA+0x140>)
    b41e:	4798      	blx	r3
    b420:	9000      	str	r0, [sp, #0]
    b422:	2e0c      	cmp	r6, #12
    b424:	d040      	beq.n	b4a8 <calculate_ToA+0x110>
    b426:	0033      	movs	r3, r6
    b428:	3b0b      	subs	r3, #11
    b42a:	425a      	negs	r2, r3
    b42c:	4153      	adcs	r3, r2
    b42e:	b2db      	uxtb	r3, r3
    b430:	005b      	lsls	r3, r3, #1
    b432:	1af3      	subs	r3, r6, r3
    b434:	009b      	lsls	r3, r3, #2
    b436:	b2df      	uxtb	r7, r3
    b438:	4643      	mov	r3, r8
    b43a:	0058      	lsls	r0, r3, #1
    b43c:	1b80      	subs	r0, r0, r6
    b43e:	3007      	adds	r0, #7
    b440:	ab04      	add	r3, sp, #16
    b442:	3303      	adds	r3, #3
    b444:	781b      	ldrb	r3, [r3, #0]
    b446:	009b      	lsls	r3, r3, #2
    b448:	18c0      	adds	r0, r0, r3
    b44a:	0080      	lsls	r0, r0, #2
    b44c:	b280      	uxth	r0, r0
    b44e:	19c0      	adds	r0, r0, r7
    b450:	4d1c      	ldr	r5, [pc, #112]	; (b4c4 <calculate_ToA+0x12c>)
    b452:	47a8      	blx	r5
    b454:	2200      	movs	r2, #0
    b456:	4b21      	ldr	r3, [pc, #132]	; (b4dc <calculate_ToA+0x144>)
    b458:	4e21      	ldr	r6, [pc, #132]	; (b4e0 <calculate_ToA+0x148>)
    b45a:	47b0      	blx	r6
    b45c:	9002      	str	r0, [sp, #8]
    b45e:	9103      	str	r1, [sp, #12]
    b460:	0038      	movs	r0, r7
    b462:	47a8      	blx	r5
    b464:	0002      	movs	r2, r0
    b466:	000b      	movs	r3, r1
    b468:	9802      	ldr	r0, [sp, #8]
    b46a:	9903      	ldr	r1, [sp, #12]
    b46c:	4e1d      	ldr	r6, [pc, #116]	; (b4e4 <calculate_ToA+0x14c>)
    b46e:	47b0      	blx	r6
    b470:	4b1d      	ldr	r3, [pc, #116]	; (b4e8 <calculate_ToA+0x150>)
    b472:	4798      	blx	r3
    b474:	b282      	uxth	r2, r0
    b476:	ab04      	add	r3, sp, #16
    b478:	7998      	ldrb	r0, [r3, #6]
    b47a:	3004      	adds	r0, #4
    b47c:	4350      	muls	r0, r2
    b47e:	2800      	cmp	r0, #0
    b480:	dd14      	ble.n	b4ac <calculate_ToA+0x114>
    b482:	4b0c      	ldr	r3, [pc, #48]	; (b4b4 <calculate_ToA+0x11c>)
    b484:	4798      	blx	r3
    b486:	4e19      	ldr	r6, [pc, #100]	; (b4ec <calculate_ToA+0x154>)
    b488:	2182      	movs	r1, #130	; 0x82
    b48a:	05c9      	lsls	r1, r1, #23
    b48c:	47b0      	blx	r6
    b48e:	1c21      	adds	r1, r4, #0
    b490:	4b17      	ldr	r3, [pc, #92]	; (b4f0 <calculate_ToA+0x158>)
    b492:	4798      	blx	r3
    b494:	9900      	ldr	r1, [sp, #0]
    b496:	47b0      	blx	r6
    b498:	4b16      	ldr	r3, [pc, #88]	; (b4f4 <calculate_ToA+0x15c>)
    b49a:	4798      	blx	r3
    b49c:	b280      	uxth	r0, r0
    b49e:	b007      	add	sp, #28
    b4a0:	bc0c      	pop	{r2, r3}
    b4a2:	4690      	mov	r8, r2
    b4a4:	4699      	mov	r9, r3
    b4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4a8:	2301      	movs	r3, #1
    b4aa:	e7c1      	b.n	b430 <calculate_ToA+0x98>
    b4ac:	2000      	movs	r0, #0
    b4ae:	e7ea      	b.n	b486 <calculate_ToA+0xee>
    b4b0:	0000e2b5 	.word	0x0000e2b5
    b4b4:	0001492d 	.word	0x0001492d
    b4b8:	00013f95 	.word	0x00013f95
    b4bc:	47f42400 	.word	0x47f42400
    b4c0:	447a0000 	.word	0x447a0000
    b4c4:	00016475 	.word	0x00016475
    b4c8:	40110000 	.word	0x40110000
    b4cc:	00014a59 	.word	0x00014a59
    b4d0:	00016569 	.word	0x00016569
    b4d4:	000158e1 	.word	0x000158e1
    b4d8:	0001660d 	.word	0x0001660d
    b4dc:	3ff00000 	.word	0x3ff00000
    b4e0:	00015de1 	.word	0x00015de1
    b4e4:	00015079 	.word	0x00015079
    b4e8:	00013a75 	.word	0x00013a75
    b4ec:	00013c71 	.word	0x00013c71
    b4f0:	00014375 	.word	0x00014375
    b4f4:	00013a45 	.word	0x00013a45

0000b4f8 <P2PTasks>:
    b4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4fa:	46de      	mov	lr, fp
    b4fc:	4657      	mov	r7, sl
    b4fe:	464e      	mov	r6, r9
    b500:	4645      	mov	r5, r8
    b502:	b5e0      	push	{r5, r6, r7, lr}
    b504:	b08b      	sub	sp, #44	; 0x2c
    b506:	4bc9      	ldr	r3, [pc, #804]	; (b82c <P2PTasks+0x334>)
    b508:	4798      	blx	r3
    b50a:	4bc9      	ldr	r3, [pc, #804]	; (b830 <P2PTasks+0x338>)
    b50c:	7b9b      	ldrb	r3, [r3, #14]
    b50e:	07db      	lsls	r3, r3, #31
    b510:	d500      	bpl.n	b514 <P2PTasks+0x1c>
    b512:	e083      	b.n	b61c <P2PTasks+0x124>
    b514:	2391      	movs	r3, #145	; 0x91
    b516:	005b      	lsls	r3, r3, #1
    b518:	4ac5      	ldr	r2, [pc, #788]	; (b830 <P2PTasks+0x338>)
    b51a:	5cd3      	ldrb	r3, [r2, r3]
    b51c:	07db      	lsls	r3, r3, #31
    b51e:	d500      	bpl.n	b522 <P2PTasks+0x2a>
    b520:	e094      	b.n	b64c <P2PTasks+0x154>
    b522:	4bc4      	ldr	r3, [pc, #784]	; (b834 <P2PTasks+0x33c>)
    b524:	781b      	ldrb	r3, [r3, #0]
    b526:	079b      	lsls	r3, r3, #30
    b528:	d500      	bpl.n	b52c <P2PTasks+0x34>
    b52a:	e0aa      	b.n	b682 <P2PTasks+0x18a>
    b52c:	2016      	movs	r0, #22
    b52e:	4bc2      	ldr	r3, [pc, #776]	; (b838 <P2PTasks+0x340>)
    b530:	4798      	blx	r3
    b532:	23fa      	movs	r3, #250	; 0xfa
    b534:	009b      	lsls	r3, r3, #2
    b536:	4358      	muls	r0, r3
    b538:	4bc0      	ldr	r3, [pc, #768]	; (b83c <P2PTasks+0x344>)
    b53a:	469c      	mov	ip, r3
    b53c:	4460      	add	r0, ip
    b53e:	4bc0      	ldr	r3, [pc, #768]	; (b840 <P2PTasks+0x348>)
    b540:	6018      	str	r0, [r3, #0]
    b542:	4bc0      	ldr	r3, [pc, #768]	; (b844 <P2PTasks+0x34c>)
    b544:	781b      	ldrb	r3, [r3, #0]
    b546:	2b00      	cmp	r3, #0
    b548:	d004      	beq.n	b554 <P2PTasks+0x5c>
    b54a:	4bbf      	ldr	r3, [pc, #764]	; (b848 <P2PTasks+0x350>)
    b54c:	681b      	ldr	r3, [r3, #0]
    b54e:	2b00      	cmp	r3, #0
    b550:	d000      	beq.n	b554 <P2PTasks+0x5c>
    b552:	e0ac      	b.n	b6ae <P2PTasks+0x1b6>
    b554:	4bb7      	ldr	r3, [pc, #732]	; (b834 <P2PTasks+0x33c>)
    b556:	781b      	ldrb	r3, [r3, #0]
    b558:	071b      	lsls	r3, r3, #28
    b55a:	d500      	bpl.n	b55e <P2PTasks+0x66>
    b55c:	e38c      	b.n	bc78 <P2PTasks+0x780>
    b55e:	4bbb      	ldr	r3, [pc, #748]	; (b84c <P2PTasks+0x354>)
    b560:	4798      	blx	r3
    b562:	2800      	cmp	r0, #0
    b564:	d100      	bne.n	b568 <P2PTasks+0x70>
    b566:	e387      	b.n	bc78 <P2PTasks+0x780>
    b568:	2200      	movs	r2, #0
    b56a:	4bb9      	ldr	r3, [pc, #740]	; (b850 <P2PTasks+0x358>)
    b56c:	701a      	strb	r2, [r3, #0]
    b56e:	4bb9      	ldr	r3, [pc, #740]	; (b854 <P2PTasks+0x35c>)
    b570:	7819      	ldrb	r1, [r3, #0]
    b572:	074b      	lsls	r3, r1, #29
    b574:	0fdb      	lsrs	r3, r3, #31
    b576:	4ab8      	ldr	r2, [pc, #736]	; (b858 <P2PTasks+0x360>)
    b578:	7013      	strb	r3, [r2, #0]
    b57a:	2203      	movs	r2, #3
    b57c:	08cc      	lsrs	r4, r1, #3
    b57e:	2001      	movs	r0, #1
    b580:	4004      	ands	r4, r0
    b582:	00e4      	lsls	r4, r4, #3
    b584:	4013      	ands	r3, r2
    b586:	400a      	ands	r2, r1
    b588:	3a01      	subs	r2, #1
    b58a:	4255      	negs	r5, r2
    b58c:	416a      	adcs	r2, r5
    b58e:	4002      	ands	r2, r0
    b590:	0152      	lsls	r2, r2, #5
    b592:	4323      	orrs	r3, r4
    b594:	09cc      	lsrs	r4, r1, #7
    b596:	4020      	ands	r0, r4
    b598:	0180      	lsls	r0, r0, #6
    b59a:	4313      	orrs	r3, r2
    b59c:	4303      	orrs	r3, r0
    b59e:	4aaf      	ldr	r2, [pc, #700]	; (b85c <P2PTasks+0x364>)
    b5a0:	7013      	strb	r3, [r2, #0]
    b5a2:	b249      	sxtb	r1, r1
    b5a4:	2900      	cmp	r1, #0
    b5a6:	da00      	bge.n	b5aa <P2PTasks+0xb2>
    b5a8:	e097      	b.n	b6da <P2PTasks+0x1e2>
    b5aa:	4aaa      	ldr	r2, [pc, #680]	; (b854 <P2PTasks+0x35c>)
    b5ac:	8a17      	ldrh	r7, [r2, #16]
    b5ae:	4bab      	ldr	r3, [pc, #684]	; (b85c <P2PTasks+0x364>)
    b5b0:	805f      	strh	r7, [r3, #2]
    b5b2:	7b11      	ldrb	r1, [r2, #12]
    b5b4:	7319      	strb	r1, [r3, #12]
    b5b6:	6895      	ldr	r5, [r2, #8]
    b5b8:	609d      	str	r5, [r3, #8]
    b5ba:	7b90      	ldrb	r0, [r2, #14]
    b5bc:	4680      	mov	r8, r0
    b5be:	7398      	strb	r0, [r3, #14]
    b5c0:	7b52      	ldrb	r2, [r2, #13]
    b5c2:	4691      	mov	r9, r2
    b5c4:	735a      	strb	r2, [r3, #13]
    b5c6:	781b      	ldrb	r3, [r3, #0]
    b5c8:	069b      	lsls	r3, r3, #26
    b5ca:	d400      	bmi.n	b5ce <P2PTasks+0xd6>
    b5cc:	e332      	b.n	bc34 <P2PTasks+0x73c>
    b5ce:	782b      	ldrb	r3, [r5, #0]
    b5d0:	b2da      	uxtb	r2, r3
    b5d2:	2a83      	cmp	r2, #131	; 0x83
    b5d4:	d100      	bne.n	b5d8 <P2PTasks+0xe0>
    b5d6:	e293      	b.n	bb00 <P2PTasks+0x608>
    b5d8:	d800      	bhi.n	b5dc <P2PTasks+0xe4>
    b5da:	e083      	b.n	b6e4 <P2PTasks+0x1ec>
    b5dc:	b2da      	uxtb	r2, r3
    b5de:	2a91      	cmp	r2, #145	; 0x91
    b5e0:	d100      	bne.n	b5e4 <P2PTasks+0xec>
    b5e2:	e1e6      	b.n	b9b2 <P2PTasks+0x4ba>
    b5e4:	d800      	bhi.n	b5e8 <P2PTasks+0xf0>
    b5e6:	e094      	b.n	b712 <P2PTasks+0x21a>
    b5e8:	b2da      	uxtb	r2, r3
    b5ea:	2a92      	cmp	r2, #146	; 0x92
    b5ec:	d100      	bne.n	b5f0 <P2PTasks+0xf8>
    b5ee:	e25e      	b.n	baae <P2PTasks+0x5b6>
    b5f0:	2a97      	cmp	r2, #151	; 0x97
    b5f2:	d17e      	bne.n	b6f2 <P2PTasks+0x1fa>
    b5f4:	4b8f      	ldr	r3, [pc, #572]	; (b834 <P2PTasks+0x33c>)
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	069b      	lsls	r3, r3, #26
    b5fa:	d500      	bpl.n	b5fe <P2PTasks+0x106>
    b5fc:	e215      	b.n	ba2a <P2PTasks+0x532>
    b5fe:	4b98      	ldr	r3, [pc, #608]	; (b860 <P2PTasks+0x368>)
    b600:	781b      	ldrb	r3, [r3, #0]
    b602:	469a      	mov	sl, r3
    b604:	2b00      	cmp	r3, #0
    b606:	d100      	bne.n	b60a <P2PTasks+0x112>
    b608:	e22c      	b.n	ba64 <P2PTasks+0x56c>
    b60a:	4b96      	ldr	r3, [pc, #600]	; (b864 <P2PTasks+0x36c>)
    b60c:	781b      	ldrb	r3, [r3, #0]
    b60e:	469b      	mov	fp, r3
    b610:	4b92      	ldr	r3, [pc, #584]	; (b85c <P2PTasks+0x364>)
    b612:	685b      	ldr	r3, [r3, #4]
    b614:	9306      	str	r3, [sp, #24]
    b616:	4e94      	ldr	r6, [pc, #592]	; (b868 <P2PTasks+0x370>)
    b618:	2400      	movs	r4, #0
    b61a:	e213      	b.n	ba44 <P2PTasks+0x54c>
    b61c:	4b93      	ldr	r3, [pc, #588]	; (b86c <P2PTasks+0x374>)
    b61e:	4798      	blx	r3
    b620:	4b83      	ldr	r3, [pc, #524]	; (b830 <P2PTasks+0x338>)
    b622:	6819      	ldr	r1, [r3, #0]
    b624:	4b92      	ldr	r3, [pc, #584]	; (b870 <P2PTasks+0x378>)
    b626:	4798      	blx	r3
    b628:	4b92      	ldr	r3, [pc, #584]	; (b874 <P2PTasks+0x37c>)
    b62a:	4298      	cmp	r0, r3
    b62c:	d800      	bhi.n	b630 <P2PTasks+0x138>
    b62e:	e771      	b.n	b514 <P2PTasks+0x1c>
    b630:	4b7f      	ldr	r3, [pc, #508]	; (b830 <P2PTasks+0x338>)
    b632:	2200      	movs	r2, #0
    b634:	739a      	strb	r2, [r3, #14]
    b636:	001a      	movs	r2, r3
    b638:	3210      	adds	r2, #16
    b63a:	2110      	movs	r1, #16
    b63c:	31ff      	adds	r1, #255	; 0xff
    b63e:	5c58      	ldrb	r0, [r3, r1]
    b640:	3101      	adds	r1, #1
    b642:	585b      	ldr	r3, [r3, r1]
    b644:	390c      	subs	r1, #12
    b646:	39ff      	subs	r1, #255	; 0xff
    b648:	4798      	blx	r3
    b64a:	e763      	b.n	b514 <P2PTasks+0x1c>
    b64c:	4b87      	ldr	r3, [pc, #540]	; (b86c <P2PTasks+0x374>)
    b64e:	4798      	blx	r3
    b650:	238a      	movs	r3, #138	; 0x8a
    b652:	005b      	lsls	r3, r3, #1
    b654:	4a76      	ldr	r2, [pc, #472]	; (b830 <P2PTasks+0x338>)
    b656:	58d1      	ldr	r1, [r2, r3]
    b658:	4b85      	ldr	r3, [pc, #532]	; (b870 <P2PTasks+0x378>)
    b65a:	4798      	blx	r3
    b65c:	4b85      	ldr	r3, [pc, #532]	; (b874 <P2PTasks+0x37c>)
    b65e:	4298      	cmp	r0, r3
    b660:	d800      	bhi.n	b664 <P2PTasks+0x16c>
    b662:	e75e      	b.n	b522 <P2PTasks+0x2a>
    b664:	4b72      	ldr	r3, [pc, #456]	; (b830 <P2PTasks+0x338>)
    b666:	2100      	movs	r1, #0
    b668:	2291      	movs	r2, #145	; 0x91
    b66a:	0052      	lsls	r2, r2, #1
    b66c:	5499      	strb	r1, [r3, r2]
    b66e:	001a      	movs	r2, r3
    b670:	3225      	adds	r2, #37	; 0x25
    b672:	32ff      	adds	r2, #255	; 0xff
    b674:	4980      	ldr	r1, [pc, #512]	; (b878 <P2PTasks+0x380>)
    b676:	5c58      	ldrb	r0, [r3, r1]
    b678:	3101      	adds	r1, #1
    b67a:	585b      	ldr	r3, [r3, r1]
    b67c:	2105      	movs	r1, #5
    b67e:	4798      	blx	r3
    b680:	e74f      	b.n	b522 <P2PTasks+0x2a>
    b682:	4b7a      	ldr	r3, [pc, #488]	; (b86c <P2PTasks+0x374>)
    b684:	4798      	blx	r3
    b686:	4b7d      	ldr	r3, [pc, #500]	; (b87c <P2PTasks+0x384>)
    b688:	6819      	ldr	r1, [r3, #0]
    b68a:	4b79      	ldr	r3, [pc, #484]	; (b870 <P2PTasks+0x378>)
    b68c:	4798      	blx	r3
    b68e:	4b7c      	ldr	r3, [pc, #496]	; (b880 <P2PTasks+0x388>)
    b690:	4298      	cmp	r0, r3
    b692:	d800      	bhi.n	b696 <P2PTasks+0x19e>
    b694:	e74a      	b.n	b52c <P2PTasks+0x34>
    b696:	4a67      	ldr	r2, [pc, #412]	; (b834 <P2PTasks+0x33c>)
    b698:	7813      	ldrb	r3, [r2, #0]
    b69a:	2102      	movs	r1, #2
    b69c:	438b      	bics	r3, r1
    b69e:	7013      	strb	r3, [r2, #0]
    b6a0:	2005      	movs	r0, #5
    b6a2:	4b78      	ldr	r3, [pc, #480]	; (b884 <P2PTasks+0x38c>)
    b6a4:	4798      	blx	r3
    b6a6:	4878      	ldr	r0, [pc, #480]	; (b888 <P2PTasks+0x390>)
    b6a8:	4b78      	ldr	r3, [pc, #480]	; (b88c <P2PTasks+0x394>)
    b6aa:	4798      	blx	r3
    b6ac:	e73e      	b.n	b52c <P2PTasks+0x34>
    b6ae:	4b6f      	ldr	r3, [pc, #444]	; (b86c <P2PTasks+0x374>)
    b6b0:	4798      	blx	r3
    b6b2:	4b65      	ldr	r3, [pc, #404]	; (b848 <P2PTasks+0x350>)
    b6b4:	6819      	ldr	r1, [r3, #0]
    b6b6:	4b6e      	ldr	r3, [pc, #440]	; (b870 <P2PTasks+0x378>)
    b6b8:	4798      	blx	r3
    b6ba:	4b61      	ldr	r3, [pc, #388]	; (b840 <P2PTasks+0x348>)
    b6bc:	681b      	ldr	r3, [r3, #0]
    b6be:	4298      	cmp	r0, r3
    b6c0:	d800      	bhi.n	b6c4 <P2PTasks+0x1cc>
    b6c2:	e747      	b.n	b554 <P2PTasks+0x5c>
    b6c4:	2300      	movs	r3, #0
    b6c6:	4a60      	ldr	r2, [pc, #384]	; (b848 <P2PTasks+0x350>)
    b6c8:	6013      	str	r3, [r2, #0]
    b6ca:	4a5e      	ldr	r2, [pc, #376]	; (b844 <P2PTasks+0x34c>)
    b6cc:	7013      	strb	r3, [r2, #0]
    b6ce:	4b70      	ldr	r3, [pc, #448]	; (b890 <P2PTasks+0x398>)
    b6d0:	4798      	blx	r3
    b6d2:	4870      	ldr	r0, [pc, #448]	; (b894 <P2PTasks+0x39c>)
    b6d4:	4b6d      	ldr	r3, [pc, #436]	; (b88c <P2PTasks+0x394>)
    b6d6:	4798      	blx	r3
    b6d8:	e73c      	b.n	b554 <P2PTasks+0x5c>
    b6da:	4b5e      	ldr	r3, [pc, #376]	; (b854 <P2PTasks+0x35c>)
    b6dc:	685a      	ldr	r2, [r3, #4]
    b6de:	4b5f      	ldr	r3, [pc, #380]	; (b85c <P2PTasks+0x364>)
    b6e0:	605a      	str	r2, [r3, #4]
    b6e2:	e762      	b.n	b5aa <P2PTasks+0xb2>
    b6e4:	2a81      	cmp	r2, #129	; 0x81
    b6e6:	d024      	beq.n	b732 <P2PTasks+0x23a>
    b6e8:	d900      	bls.n	b6ec <P2PTasks+0x1f4>
    b6ea:	e127      	b.n	b93c <P2PTasks+0x444>
    b6ec:	2b04      	cmp	r3, #4
    b6ee:	d100      	bne.n	b6f2 <P2PTasks+0x1fa>
    b6f0:	e206      	b.n	bb00 <P2PTasks+0x608>
    b6f2:	4c50      	ldr	r4, [pc, #320]	; (b834 <P2PTasks+0x33c>)
>>>>>>> Stashed changes
    b6f4:	7823      	ldrb	r3, [r4, #0]
    b6f6:	2208      	movs	r2, #8
    b6f8:	4313      	orrs	r3, r2
    b6fa:	7023      	strb	r3, [r4, #0]
<<<<<<< Updated upstream
=======
    b668:	7823      	ldrb	r3, [r4, #0]
    b66a:	2208      	movs	r2, #8
    b66c:	4393      	bics	r3, r2
    b66e:	7023      	strb	r3, [r4, #0]
>>>>>>> Stashed changes
					MiMAC_DiscardPacket();
    b670:	4b63      	ldr	r3, [pc, #396]	; (b800 <P2PTasks+0x3a4>)
    b672:	4798      	blx	r3
                    break;
    b674:	e29f      	b.n	bbb6 <P2PTasks+0x75a>
            switch( rxMessage.Payload[0] )
    b676:	2a87      	cmp	r2, #135	; 0x87
    b678:	d1ed      	bne.n	b656 <P2PTasks+0x1fa>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    b67a:	4b62      	ldr	r3, [pc, #392]	; (b804 <P2PTasks+0x3a8>)
    b67c:	781b      	ldrb	r3, [r3, #0]
    b67e:	2b02      	cmp	r3, #2
    b680:	d900      	bls.n	b684 <P2PTasks+0x228>
    b682:	e082      	b.n	b78a <P2PTasks+0x32e>
                            if( currentChannel != rxMessage.Payload[1] )
    b684:	786a      	ldrb	r2, [r5, #1]
    b686:	4b50      	ldr	r3, [pc, #320]	; (b7c8 <P2PTasks+0x36c>)
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	429a      	cmp	r2, r3
    b68c:	d100      	bne.n	b690 <P2PTasks+0x234>
    b68e:	e0d5      	b.n	b83c <P2PTasks+0x3e0>
                                MiMAC_DiscardPacket();
    b690:	4b5b      	ldr	r3, [pc, #364]	; (b800 <P2PTasks+0x3a4>)
    b692:	4798      	blx	r3
                                break;
    b694:	e28f      	b.n	bbb6 <P2PTasks+0x75a>
                                if( currentChannel != rxMessage.Payload[1] )
    b696:	786a      	ldrb	r2, [r5, #1]
    b698:	4b4b      	ldr	r3, [pc, #300]	; (b7c8 <P2PTasks+0x36c>)
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	429a      	cmp	r2, r3
    b69e:	d002      	beq.n	b6a6 <P2PTasks+0x24a>
                                    MiMAC_DiscardPacket();
    b6a0:	4b57      	ldr	r3, [pc, #348]	; (b800 <P2PTasks+0x3a4>)
    b6a2:	4798      	blx	r3
                                    break;
    b6a4:	e287      	b.n	bbb6 <P2PTasks+0x75a>
                                if( ConnMode == DISABLE_ALL_CONN )
    b6a6:	4b57      	ldr	r3, [pc, #348]	; (b804 <P2PTasks+0x3a8>)
    b6a8:	781b      	ldrb	r3, [r3, #0]
    b6aa:	2b03      	cmp	r3, #3
    b6ac:	d04d      	beq.n	b74a <P2PTasks+0x2ee>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b6ae:	4b56      	ldr	r3, [pc, #344]	; (b808 <P2PTasks+0x3ac>)
    b6b0:	429f      	cmp	r7, r3
    b6b2:	d006      	beq.n	b6c2 <P2PTasks+0x266>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b6b4:	4b55      	ldr	r3, [pc, #340]	; (b80c <P2PTasks+0x3b0>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b6b6:	881b      	ldrh	r3, [r3, #0]
    b6b8:	42bb      	cmp	r3, r7
    b6ba:	d002      	beq.n	b6c2 <P2PTasks+0x266>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b6bc:	2902      	cmp	r1, #2
    b6be:	d900      	bls.n	b6c2 <P2PTasks+0x266>
    b6c0:	e295      	b.n	bbee <P2PTasks+0x792>
                                    status = AddConnection();
    b6c2:	4b53      	ldr	r3, [pc, #332]	; (b810 <P2PTasks+0x3b4>)
    b6c4:	4798      	blx	r3
    b6c6:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b6c8:	4b4e      	ldr	r3, [pc, #312]	; (b804 <P2PTasks+0x3a8>)
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	2b01      	cmp	r3, #1
    b6ce:	d03f      	beq.n	b750 <P2PTasks+0x2f4>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b6d0:	20e0      	movs	r0, #224	; 0xe0
    b6d2:	4b50      	ldr	r3, [pc, #320]	; (b814 <P2PTasks+0x3b8>)
    b6d4:	4798      	blx	r3
    b6d6:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b6d8:	d100      	bne.n	b6dc <P2PTasks+0x280>
    b6da:	e281      	b.n	bbe0 <P2PTasks+0x784>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b6dc:	2391      	movs	r3, #145	; 0x91
    b6de:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    b6e0:	7045      	strb	r5, [r0, #1]
    b6e2:	2702      	movs	r7, #2
                                if( status == STATUS_SUCCESS ||
    b6e4:	2d01      	cmp	r5, #1
    b6e6:	d944      	bls.n	b772 <P2PTasks+0x316>
                                MiMAC_DiscardPacket();
    b6e8:	4b45      	ldr	r3, [pc, #276]	; (b800 <P2PTasks+0x3a4>)
    b6ea:	4798      	blx	r3
                                i = PHY_RandomReq();
    b6ec:	4b4a      	ldr	r3, [pc, #296]	; (b818 <P2PTasks+0x3bc>)
    b6ee:	4798      	blx	r3
    b6f0:	b2c6      	uxtb	r6, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b6f2:	2103      	movs	r1, #3
    b6f4:	0030      	movs	r0, r6
    b6f6:	4b49      	ldr	r3, [pc, #292]	; (b81c <P2PTasks+0x3c0>)
    b6f8:	4798      	blx	r3
    b6fa:	b2c9      	uxtb	r1, r1
    b6fc:	2900      	cmp	r1, #0
    b6fe:	d040      	beq.n	b782 <P2PTasks+0x326>
    b700:	20fa      	movs	r0, #250	; 0xfa
    b702:	0080      	lsls	r0, r0, #2
    b704:	4370      	muls	r0, r6
    b706:	2103      	movs	r1, #3
    b708:	4b45      	ldr	r3, [pc, #276]	; (b820 <P2PTasks+0x3c4>)
    b70a:	4798      	blx	r3
    b70c:	0008      	movs	r0, r1
    b70e:	4b45      	ldr	r3, [pc, #276]	; (b824 <P2PTasks+0x3c8>)
    b710:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b712:	4b2b      	ldr	r3, [pc, #172]	; (b7c0 <P2PTasks+0x364>)
    b714:	685a      	ldr	r2, [r3, #4]
    b716:	8859      	ldrh	r1, [r3, #2]
    b718:	4843      	ldr	r0, [pc, #268]	; (b828 <P2PTasks+0x3cc>)
    b71a:	9005      	str	r0, [sp, #20]
    b71c:	2001      	movs	r0, #1
    b71e:	9004      	str	r0, [sp, #16]
    b720:	2000      	movs	r0, #0
    b722:	9003      	str	r0, [sp, #12]
    b724:	9402      	str	r4, [sp, #8]
    b726:	9701      	str	r7, [sp, #4]
    b728:	781b      	ldrb	r3, [r3, #0]
    b72a:	071b      	lsls	r3, r3, #28
    b72c:	0fdb      	lsrs	r3, r3, #31
    b72e:	9300      	str	r3, [sp, #0]
    b730:	2301      	movs	r3, #1
    b732:	4c3e      	ldr	r4, [pc, #248]	; (b82c <P2PTasks+0x3d0>)
    b734:	47a0      	blx	r4
								delay_ms (100);
    b736:	2064      	movs	r0, #100	; 0x64
    b738:	4b3a      	ldr	r3, [pc, #232]	; (b824 <P2PTasks+0x3c8>)
    b73a:	4798      	blx	r3
                                    if( status == STATUS_SUCCESS )
    b73c:	2d00      	cmp	r5, #0
    b73e:	d000      	beq.n	b742 <P2PTasks+0x2e6>
    b740:	e239      	b.n	bbb6 <P2PTasks+0x75a>
										PDS_Store(PDS_CONNECTION_TABLE_ID);
    b742:	2005      	movs	r0, #5
    b744:	4b28      	ldr	r3, [pc, #160]	; (b7e8 <P2PTasks+0x38c>)
    b746:	4798      	blx	r3
    b748:	e235      	b.n	bbb6 <P2PTasks+0x75a>
                                    MiMAC_DiscardPacket();
    b74a:	4b2d      	ldr	r3, [pc, #180]	; (b800 <P2PTasks+0x3a4>)
    b74c:	4798      	blx	r3
                                    break;
    b74e:	e232      	b.n	bbb6 <P2PTasks+0x75a>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b750:	3801      	subs	r0, #1
    b752:	b2c0      	uxtb	r0, r0
    b754:	2801      	cmp	r0, #1
    b756:	d9bb      	bls.n	b6d0 <P2PTasks+0x274>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b758:	20e0      	movs	r0, #224	; 0xe0
    b75a:	4b2e      	ldr	r3, [pc, #184]	; (b814 <P2PTasks+0x3b8>)
    b75c:	4798      	blx	r3
    b75e:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b760:	d100      	bne.n	b764 <P2PTasks+0x308>
    b762:	e23d      	b.n	bbe0 <P2PTasks+0x784>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b764:	2391      	movs	r3, #145	; 0x91
    b766:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b768:	3362      	adds	r3, #98	; 0x62
    b76a:	7063      	strb	r3, [r4, #1]
                                    status = STATUS_NOT_PERMITTED;
    b76c:	25f3      	movs	r5, #243	; 0xf3
                                dataPtr[dataLen++] = status;
    b76e:	2702      	movs	r7, #2
    b770:	e7ba      	b.n	b6e8 <P2PTasks+0x28c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b772:	4b2f      	ldr	r3, [pc, #188]	; (b830 <P2PTasks+0x3d4>)
    b774:	781b      	ldrb	r3, [r3, #0]
    b776:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b778:	4b2e      	ldr	r3, [pc, #184]	; (b834 <P2PTasks+0x3d8>)
    b77a:	781b      	ldrb	r3, [r3, #0]
    b77c:	70c3      	strb	r3, [r0, #3]
    b77e:	3702      	adds	r7, #2
    b780:	e7b2      	b.n	b6e8 <P2PTasks+0x28c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b782:	2001      	movs	r0, #1
    b784:	4b2c      	ldr	r3, [pc, #176]	; (b838 <P2PTasks+0x3dc>)
    b786:	4798      	blx	r3
    b788:	e7c3      	b.n	b712 <P2PTasks+0x2b6>
                                MiMAC_DiscardPacket();
    b78a:	4b1d      	ldr	r3, [pc, #116]	; (b800 <P2PTasks+0x3a4>)
    b78c:	4798      	blx	r3
                                break;
    b78e:	e212      	b.n	bbb6 <P2PTasks+0x75a>
    b790:	0000a58d 	.word	0x0000a58d
    b794:	200026e4 	.word	0x200026e4
    b798:	200026e0 	.word	0x200026e0
    b79c:	0000b2fd 	.word	0x0000b2fd
    b7a0:	000c8708 	.word	0x000c8708
    b7a4:	200002a0 	.word	0x200002a0
    b7a8:	2000028b 	.word	0x2000028b
    b7ac:	20002964 	.word	0x20002964
    b7b0:	00009e7d 	.word	0x00009e7d
    b7b4:	200026c6 	.word	0x200026c6
    b7b8:	200026a0 	.word	0x200026a0
    b7bc:	200026c4 	.word	0x200026c4
    b7c0:	20002950 	.word	0x20002950
    b7c4:	20002960 	.word	0x20002960
    b7c8:	20000019 	.word	0x20000019
    b7cc:	20002910 	.word	0x20002910
    b7d0:	0000bed1 	.word	0x0000bed1
    b7d4:	0000bf31 	.word	0x0000bf31
    b7d8:	016e3600 	.word	0x016e3600
    b7dc:	00000223 	.word	0x00000223
    b7e0:	200026b8 	.word	0x200026b8
    b7e4:	000f4240 	.word	0x000f4240
    b7e8:	000092e9 	.word	0x000092e9
    b7ec:	00018978 	.word	0x00018978
    b7f0:	00016e61 	.word	0x00016e61
    b7f4:	00009e39 	.word	0x00009e39
    b7f8:	0001898c 	.word	0x0001898c
    b7fc:	200002a8 	.word	0x200002a8
    b800:	00009dfd 	.word	0x00009dfd
    b804:	20000018 	.word	0x20000018
    b808:	0000ffff 	.word	0x0000ffff
    b80c:	200026bc 	.word	0x200026bc
    b810:	0000b195 	.word	0x0000b195
    b814:	0000bc91 	.word	0x0000bc91
    b818:	0000a9f5 	.word	0x0000a9f5
    b81c:	00013635 	.word	0x00013635
    b820:	00013809 	.word	0x00013809
    b824:	0000453d 	.word	0x0000453d
    b828:	0000aa31 	.word	0x0000aa31
    b82c:	0000ab9d 	.word	0x0000ab9d
    b830:	200026b5 	.word	0x200026b5
    b834:	20000014 	.word	0x20000014
    b838:	00004511 	.word	0x00004511
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    b83c:	2010      	movs	r0, #16
    b83e:	4bba      	ldr	r3, [pc, #744]	; (bb28 <P2PTasks+0x6cc>)
    b840:	4798      	blx	r3
    b842:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b844:	d100      	bne.n	b848 <P2PTasks+0x3ec>
    b846:	e1cb      	b.n	bbe0 <P2PTasks+0x784>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    b848:	2397      	movs	r3, #151	; 0x97
    b84a:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    b84c:	4bb7      	ldr	r3, [pc, #732]	; (bb2c <P2PTasks+0x6d0>)
    b84e:	781b      	ldrb	r3, [r3, #0]
    b850:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    b852:	4bb7      	ldr	r3, [pc, #732]	; (bb30 <P2PTasks+0x6d4>)
    b854:	781b      	ldrb	r3, [r3, #0]
    b856:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    b858:	4bb6      	ldr	r3, [pc, #728]	; (bb34 <P2PTasks+0x6d8>)
    b85a:	4798      	blx	r3
							i = PHY_RandomReq();
    b85c:	4bb6      	ldr	r3, [pc, #728]	; (bb38 <P2PTasks+0x6dc>)
    b85e:	4798      	blx	r3
							delay_ms(i*100);
    b860:	b2c3      	uxtb	r3, r0
    b862:	2064      	movs	r0, #100	; 0x64
    b864:	4358      	muls	r0, r3
    b866:	2800      	cmp	r0, #0
    b868:	d016      	beq.n	b898 <P2PTasks+0x43c>
    b86a:	4bb4      	ldr	r3, [pc, #720]	; (bb3c <P2PTasks+0x6e0>)
    b86c:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b86e:	4bb4      	ldr	r3, [pc, #720]	; (bb40 <P2PTasks+0x6e4>)
    b870:	685a      	ldr	r2, [r3, #4]
    b872:	8859      	ldrh	r1, [r3, #2]
    b874:	48b3      	ldr	r0, [pc, #716]	; (bb44 <P2PTasks+0x6e8>)
    b876:	9005      	str	r0, [sp, #20]
    b878:	2001      	movs	r0, #1
    b87a:	9004      	str	r0, [sp, #16]
    b87c:	2000      	movs	r0, #0
    b87e:	9003      	str	r0, [sp, #12]
    b880:	9402      	str	r4, [sp, #8]
    b882:	3003      	adds	r0, #3
    b884:	9001      	str	r0, [sp, #4]
    b886:	781b      	ldrb	r3, [r3, #0]
    b888:	071b      	lsls	r3, r3, #28
    b88a:	0fdb      	lsrs	r3, r3, #31
    b88c:	9300      	str	r3, [sp, #0]
    b88e:	2301      	movs	r3, #1
    b890:	2000      	movs	r0, #0
    b892:	4cad      	ldr	r4, [pc, #692]	; (bb48 <P2PTasks+0x6ec>)
    b894:	47a0      	blx	r4
                        break;
    b896:	e18e      	b.n	bbb6 <P2PTasks+0x75a>
							delay_ms(i*100);
    b898:	2001      	movs	r0, #1
    b89a:	4bac      	ldr	r3, [pc, #688]	; (bb4c <P2PTasks+0x6f0>)
    b89c:	4798      	blx	r3
    b89e:	e7e6      	b.n	b86e <P2PTasks+0x412>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    b8a0:	2010      	movs	r0, #16
    b8a2:	4ba1      	ldr	r3, [pc, #644]	; (bb28 <P2PTasks+0x6cc>)
    b8a4:	4798      	blx	r3
    b8a6:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    b8a8:	2800      	cmp	r0, #0
    b8aa:	d100      	bne.n	b8ae <P2PTasks+0x452>
    b8ac:	e198      	b.n	bbe0 <P2PTasks+0x784>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b8ae:	2392      	movs	r3, #146	; 0x92
    b8b0:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b8b2:	4ba3      	ldr	r3, [pc, #652]	; (bb40 <P2PTasks+0x6e4>)
    b8b4:	685b      	ldr	r3, [r3, #4]
    b8b6:	9307      	str	r3, [sp, #28]
    b8b8:	4ea5      	ldr	r6, [pc, #660]	; (bb50 <P2PTasks+0x6f4>)
    b8ba:	2400      	movs	r4, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b8bc:	2700      	movs	r7, #0
                                if( ConnectionTable[i].status.bits.isValid )
    b8be:	0035      	movs	r5, r6
    b8c0:	e006      	b.n	b8d0 <P2PTasks+0x474>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b8c2:	3701      	adds	r7, #1
    b8c4:	b2ff      	uxtb	r7, r7
    b8c6:	3401      	adds	r4, #1
    b8c8:	360a      	adds	r6, #10
    b8ca:	2f05      	cmp	r7, #5
    b8cc:	d100      	bne.n	b8d0 <P2PTasks+0x474>
    b8ce:	e195      	b.n	bbfc <P2PTasks+0x7a0>
                                if( ConnectionTable[i].status.bits.isValid )
    b8d0:	9406      	str	r4, [sp, #24]
    b8d2:	00a3      	lsls	r3, r4, #2
    b8d4:	191b      	adds	r3, r3, r4
    b8d6:	005b      	lsls	r3, r3, #1
    b8d8:	18eb      	adds	r3, r5, r3
    b8da:	7a1b      	ldrb	r3, [r3, #8]
    b8dc:	09db      	lsrs	r3, r3, #7
    b8de:	d0f0      	beq.n	b8c2 <P2PTasks+0x466>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b8e0:	0031      	movs	r1, r6
    b8e2:	9807      	ldr	r0, [sp, #28]
    b8e4:	4b9b      	ldr	r3, [pc, #620]	; (bb54 <P2PTasks+0x6f8>)
    b8e6:	4798      	blx	r3
    b8e8:	2800      	cmp	r0, #0
    b8ea:	d0ea      	beq.n	b8c2 <P2PTasks+0x466>
                                        ConnectionTable[i].status.Val = 0;
    b8ec:	9a06      	ldr	r2, [sp, #24]
    b8ee:	0093      	lsls	r3, r2, #2
    b8f0:	189d      	adds	r5, r3, r2
    b8f2:	006d      	lsls	r5, r5, #1
    b8f4:	4b96      	ldr	r3, [pc, #600]	; (bb50 <P2PTasks+0x6f4>)
    b8f6:	195d      	adds	r5, r3, r5
    b8f8:	2400      	movs	r4, #0
    b8fa:	722c      	strb	r4, [r5, #8]
											PDS_Store(PDS_CONNECTION_TABLE_ID);
    b8fc:	2005      	movs	r0, #5
    b8fe:	4b96      	ldr	r3, [pc, #600]	; (bb58 <P2PTasks+0x6fc>)
    b900:	4798      	blx	r3
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b902:	4643      	mov	r3, r8
    b904:	705c      	strb	r4, [r3, #1]
                            MiMAC_DiscardPacket();
    b906:	4b8b      	ldr	r3, [pc, #556]	; (bb34 <P2PTasks+0x6d8>)
    b908:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    b90a:	2f05      	cmp	r7, #5
    b90c:	d001      	beq.n	b912 <P2PTasks+0x4b6>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b90e:	3402      	adds	r4, #2
    b910:	e17b      	b.n	bc0a <P2PTasks+0x7ae>
    b912:	2302      	movs	r3, #2
    b914:	e175      	b.n	bc02 <P2PTasks+0x7a6>
                            switch( rxMessage.Payload[1] )
    b916:	786b      	ldrb	r3, [r5, #1]
    b918:	2b00      	cmp	r3, #0
    b91a:	d01d      	beq.n	b958 <P2PTasks+0x4fc>
    b91c:	2b01      	cmp	r3, #1
    b91e:	d118      	bne.n	b952 <P2PTasks+0x4f6>
                                    if (EstConfCallback)
    b920:	4b8e      	ldr	r3, [pc, #568]	; (bb5c <P2PTasks+0x700>)
    b922:	681b      	ldr	r3, [r3, #0]
    b924:	2b00      	cmp	r3, #0
    b926:	d004      	beq.n	b932 <P2PTasks+0x4d6>
                                        EstConfCallback(ALREADY_EXISTS);
    b928:	2006      	movs	r0, #6
    b92a:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b92c:	2200      	movs	r2, #0
    b92e:	4b8b      	ldr	r3, [pc, #556]	; (bb5c <P2PTasks+0x700>)
    b930:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    b932:	4b8b      	ldr	r3, [pc, #556]	; (bb60 <P2PTasks+0x704>)
    b934:	881a      	ldrh	r2, [r3, #0]
    b936:	4b8b      	ldr	r3, [pc, #556]	; (bb64 <P2PTasks+0x708>)
    b938:	429a      	cmp	r2, r3
    b93a:	d017      	beq.n	b96c <P2PTasks+0x510>
                                    AddConnection();
    b93c:	4b8a      	ldr	r3, [pc, #552]	; (bb68 <P2PTasks+0x70c>)
    b93e:	4798      	blx	r3
                                        P2PStatus.bits.SaveConnection = 1;
    b940:	4a8a      	ldr	r2, [pc, #552]	; (bb6c <P2PTasks+0x710>)
    b942:	7813      	ldrb	r3, [r2, #0]
    b944:	2102      	movs	r1, #2
    b946:	430b      	orrs	r3, r1
    b948:	7013      	strb	r3, [r2, #0]
                                        nvmDelayTick.Val = MiWi_TickGet();
    b94a:	4b89      	ldr	r3, [pc, #548]	; (bb70 <P2PTasks+0x714>)
    b94c:	4798      	blx	r3
    b94e:	4b89      	ldr	r3, [pc, #548]	; (bb74 <P2PTasks+0x718>)
    b950:	6018      	str	r0, [r3, #0]
                        MiMAC_DiscardPacket();
    b952:	4b78      	ldr	r3, [pc, #480]	; (bb34 <P2PTasks+0x6d8>)
    b954:	4798      	blx	r3
                        break; 
    b956:	e12e      	b.n	bbb6 <P2PTasks+0x75a>
                                    if (EstConfCallback)
    b958:	4b80      	ldr	r3, [pc, #512]	; (bb5c <P2PTasks+0x700>)
    b95a:	681b      	ldr	r3, [r3, #0]
    b95c:	2b00      	cmp	r3, #0
    b95e:	d0e8      	beq.n	b932 <P2PTasks+0x4d6>
                                        EstConfCallback(SUCCESS);
    b960:	2000      	movs	r0, #0
    b962:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b964:	2200      	movs	r2, #0
    b966:	4b7d      	ldr	r3, [pc, #500]	; (bb5c <P2PTasks+0x700>)
    b968:	601a      	str	r2, [r3, #0]
    b96a:	e7e2      	b.n	b932 <P2PTasks+0x4d6>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    b96c:	497c      	ldr	r1, [pc, #496]	; (bb60 <P2PTasks+0x704>)
    b96e:	4b74      	ldr	r3, [pc, #464]	; (bb40 <P2PTasks+0x6e4>)
    b970:	885b      	ldrh	r3, [r3, #2]
    b972:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    b974:	201e      	movs	r0, #30
    b976:	ab02      	add	r3, sp, #8
    b978:	469c      	mov	ip, r3
    b97a:	4460      	add	r0, ip
    b97c:	2301      	movs	r3, #1
    b97e:	425b      	negs	r3, r3
    b980:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b982:	4b7d      	ldr	r3, [pc, #500]	; (bb78 <P2PTasks+0x71c>)
    b984:	4798      	blx	r3
												PDS_Store(PDS_PANID_ID);
    b986:	2002      	movs	r0, #2
    b988:	4b73      	ldr	r3, [pc, #460]	; (bb58 <P2PTasks+0x6fc>)
    b98a:	4798      	blx	r3
    b98c:	e7d6      	b.n	b93c <P2PTasks+0x4e0>
                                P2PStatus.bits.Resync = 0;   
    b98e:	4a77      	ldr	r2, [pc, #476]	; (bb6c <P2PTasks+0x710>)
    b990:	7813      	ldrb	r3, [r2, #0]
    b992:	2120      	movs	r1, #32
    b994:	438b      	bics	r3, r1
    b996:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    b998:	4b66      	ldr	r3, [pc, #408]	; (bb34 <P2PTasks+0x6d8>)
    b99a:	4798      	blx	r3
                        break;                
    b99c:	e10b      	b.n	bbb6 <P2PTasks+0x75a>
                                    for(; i < ActiveScanResultIndex; i++)
    b99e:	3401      	adds	r4, #1
    b9a0:	b2e4      	uxtb	r4, r4
    b9a2:	3610      	adds	r6, #16
    b9a4:	4554      	cmp	r4, sl
    b9a6:	d00d      	beq.n	b9c4 <P2PTasks+0x568>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b9a8:	7833      	ldrb	r3, [r6, #0]
    b9aa:	455b      	cmp	r3, fp
    b9ac:	d1f7      	bne.n	b99e <P2PTasks+0x542>
    b9ae:	8973      	ldrh	r3, [r6, #10]
    b9b0:	42bb      	cmp	r3, r7
    b9b2:	d1f4      	bne.n	b99e <P2PTasks+0x542>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b9b4:	1c70      	adds	r0, r6, #1
    b9b6:	9906      	ldr	r1, [sp, #24]
    b9b8:	4b66      	ldr	r3, [pc, #408]	; (bb54 <P2PTasks+0x6f8>)
    b9ba:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    b9bc:	2800      	cmp	r0, #0
    b9be:	d0ee      	beq.n	b99e <P2PTasks+0x542>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    b9c0:	45a2      	cmp	sl, r4
    b9c2:	d1e9      	bne.n	b998 <P2PTasks+0x53c>
    b9c4:	2c03      	cmp	r4, #3
    b9c6:	d8e7      	bhi.n	b998 <P2PTasks+0x53c>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    b9c8:	496c      	ldr	r1, [pc, #432]	; (bb7c <P2PTasks+0x720>)
    b9ca:	4653      	mov	r3, sl
    b9cc:	011b      	lsls	r3, r3, #4
    b9ce:	4a6c      	ldr	r2, [pc, #432]	; (bb80 <P2PTasks+0x724>)
    b9d0:	7812      	ldrb	r2, [r2, #0]
    b9d2:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    b9d4:	18ca      	adds	r2, r1, r3
    b9d6:	4648      	mov	r0, r9
    b9d8:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    b9da:	4640      	mov	r0, r8
    b9dc:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    b9de:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    b9e0:	4a57      	ldr	r2, [pc, #348]	; (bb40 <P2PTasks+0x6e4>)
    b9e2:	6852      	ldr	r2, [r2, #4]
    b9e4:	3301      	adds	r3, #1
    b9e6:	185b      	adds	r3, r3, r1
    b9e8:	0010      	movs	r0, r2
    b9ea:	3008      	adds	r0, #8
    b9ec:	7811      	ldrb	r1, [r2, #0]
    b9ee:	7019      	strb	r1, [r3, #0]
    b9f0:	3201      	adds	r2, #1
    b9f2:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b9f4:	4290      	cmp	r0, r2
    b9f6:	d1f9      	bne.n	b9ec <P2PTasks+0x590>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    b9f8:	786a      	ldrb	r2, [r5, #1]
    b9fa:	4653      	mov	r3, sl
    b9fc:	0119      	lsls	r1, r3, #4
    b9fe:	4b5f      	ldr	r3, [pc, #380]	; (bb7c <P2PTasks+0x720>)
    ba00:	185b      	adds	r3, r3, r1
    ba02:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    ba04:	78aa      	ldrb	r2, [r5, #2]
    ba06:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    ba08:	4653      	mov	r3, sl
    ba0a:	3301      	adds	r3, #1
    ba0c:	4a5d      	ldr	r2, [pc, #372]	; (bb84 <P2PTasks+0x728>)
    ba0e:	7013      	strb	r3, [r2, #0]
    ba10:	e7c2      	b.n	b998 <P2PTasks+0x53c>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    ba12:	786b      	ldrb	r3, [r5, #1]
    ba14:	2b00      	cmp	r3, #0
    ba16:	d122      	bne.n	ba5e <P2PTasks+0x602>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ba18:	4b49      	ldr	r3, [pc, #292]	; (bb40 <P2PTasks+0x6e4>)
    ba1a:	685e      	ldr	r6, [r3, #4]
    ba1c:	4c4c      	ldr	r4, [pc, #304]	; (bb50 <P2PTasks+0x6f4>)
    ba1e:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    ba20:	0025      	movs	r5, r4
    ba22:	e003      	b.n	ba2c <P2PTasks+0x5d0>
    ba24:	3701      	adds	r7, #1
    ba26:	340a      	adds	r4, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    ba28:	2f05      	cmp	r7, #5
    ba2a:	d018      	beq.n	ba5e <P2PTasks+0x602>
                                    if( ConnectionTable[i].status.bits.isValid )
    ba2c:	9706      	str	r7, [sp, #24]
    ba2e:	00bb      	lsls	r3, r7, #2
    ba30:	19db      	adds	r3, r3, r7
    ba32:	005b      	lsls	r3, r3, #1
    ba34:	18eb      	adds	r3, r5, r3
    ba36:	7a1b      	ldrb	r3, [r3, #8]
    ba38:	09db      	lsrs	r3, r3, #7
    ba3a:	d0f3      	beq.n	ba24 <P2PTasks+0x5c8>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ba3c:	0021      	movs	r1, r4
    ba3e:	0030      	movs	r0, r6
    ba40:	4b44      	ldr	r3, [pc, #272]	; (bb54 <P2PTasks+0x6f8>)
    ba42:	4798      	blx	r3
    ba44:	2800      	cmp	r0, #0
    ba46:	d0ed      	beq.n	ba24 <P2PTasks+0x5c8>
                                            ConnectionTable[i].status.Val = 0;
    ba48:	9a06      	ldr	r2, [sp, #24]
    ba4a:	0093      	lsls	r3, r2, #2
    ba4c:	189c      	adds	r4, r3, r2
    ba4e:	0064      	lsls	r4, r4, #1
    ba50:	4b3f      	ldr	r3, [pc, #252]	; (bb50 <P2PTasks+0x6f4>)
    ba52:	191c      	adds	r4, r3, r4
    ba54:	2300      	movs	r3, #0
    ba56:	7223      	strb	r3, [r4, #8]
												PDS_Store(PDS_CONNECTION_TABLE_ID);
    ba58:	2005      	movs	r0, #5
    ba5a:	4b3f      	ldr	r3, [pc, #252]	; (bb58 <P2PTasks+0x6fc>)
    ba5c:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    ba5e:	4b35      	ldr	r3, [pc, #212]	; (bb34 <P2PTasks+0x6d8>)
    ba60:	4798      	blx	r3
                        break;
    ba62:	e0a8      	b.n	bbb6 <P2PTasks+0x75a>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    ba64:	20e0      	movs	r0, #224	; 0xe0
    ba66:	4b30      	ldr	r3, [pc, #192]	; (bb28 <P2PTasks+0x6cc>)
    ba68:	4798      	blx	r3
    ba6a:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    ba6c:	d100      	bne.n	ba70 <P2PTasks+0x614>
    ba6e:	e0b7      	b.n	bbe0 <P2PTasks+0x784>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ba70:	4b33      	ldr	r3, [pc, #204]	; (bb40 <P2PTasks+0x6e4>)
    ba72:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    ba74:	4b44      	ldr	r3, [pc, #272]	; (bb88 <P2PTasks+0x72c>)
    ba76:	7b9b      	ldrb	r3, [r3, #14]
    ba78:	07db      	lsls	r3, r3, #31
    ba7a:	d505      	bpl.n	ba88 <P2PTasks+0x62c>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ba7c:	0029      	movs	r1, r5
    ba7e:	4843      	ldr	r0, [pc, #268]	; (bb8c <P2PTasks+0x730>)
    ba80:	4b34      	ldr	r3, [pc, #208]	; (bb54 <P2PTasks+0x6f8>)
    ba82:	4798      	blx	r3
    ba84:	2800      	cmp	r0, #0
    ba86:	d11e      	bne.n	bac6 <P2PTasks+0x66a>
                                if( indirectMessages[i].flags.bits.isValid )
    ba88:	2391      	movs	r3, #145	; 0x91
    ba8a:	005b      	lsls	r3, r3, #1
    ba8c:	4a3e      	ldr	r2, [pc, #248]	; (bb88 <P2PTasks+0x72c>)
    ba8e:	5cd3      	ldrb	r3, [r2, r3]
    ba90:	07db      	lsls	r3, r3, #31
    ba92:	d507      	bpl.n	baa4 <P2PTasks+0x648>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ba94:	0029      	movs	r1, r5
    ba96:	483e      	ldr	r0, [pc, #248]	; (bb90 <P2PTasks+0x734>)
    ba98:	4b2e      	ldr	r3, [pc, #184]	; (bb54 <P2PTasks+0x6f8>)
    ba9a:	4798      	blx	r3
    ba9c:	4a3c      	ldr	r2, [pc, #240]	; (bb90 <P2PTasks+0x734>)
                                if( indirectMessages[i].flags.bits.isValid )
    ba9e:	2601      	movs	r6, #1
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    baa0:	2800      	cmp	r0, #0
    baa2:	d112      	bne.n	baca <P2PTasks+0x66e>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    baa4:	4b26      	ldr	r3, [pc, #152]	; (bb40 <P2PTasks+0x6e4>)
    baa6:	8859      	ldrh	r1, [r3, #2]
    baa8:	4b3a      	ldr	r3, [pc, #232]	; (bb94 <P2PTasks+0x738>)
    baaa:	9305      	str	r3, [sp, #20]
    baac:	2300      	movs	r3, #0
    baae:	9304      	str	r3, [sp, #16]
    bab0:	9303      	str	r3, [sp, #12]
    bab2:	9402      	str	r4, [sp, #8]
    bab4:	9301      	str	r3, [sp, #4]
    bab6:	9300      	str	r3, [sp, #0]
    bab8:	002a      	movs	r2, r5
    baba:	2000      	movs	r0, #0
    babc:	4c22      	ldr	r4, [pc, #136]	; (bb48 <P2PTasks+0x6ec>)
    babe:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    bac0:	4b1c      	ldr	r3, [pc, #112]	; (bb34 <P2PTasks+0x6d8>)
    bac2:	4798      	blx	r3
                        break;
    bac4:	e077      	b.n	bbb6 <P2PTasks+0x75a>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bac6:	4a31      	ldr	r2, [pc, #196]	; (bb8c <P2PTasks+0x730>)
                                if( indirectMessages[i].flags.bits.isValid )
    bac8:	2600      	movs	r6, #0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    baca:	218a      	movs	r1, #138	; 0x8a
    bacc:	0049      	lsls	r1, r1, #1
    bace:	4371      	muls	r1, r6
    bad0:	4b2d      	ldr	r3, [pc, #180]	; (bb88 <P2PTasks+0x72c>)
    bad2:	185b      	adds	r3, r3, r1
    bad4:	7bd8      	ldrb	r0, [r3, #15]
    bad6:	2800      	cmp	r0, #0
    bad8:	d00e      	beq.n	baf8 <P2PTasks+0x69c>
    bada:	2300      	movs	r3, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    badc:	0008      	movs	r0, r1
    bade:	492a      	ldr	r1, [pc, #168]	; (bb88 <P2PTasks+0x72c>)
    bae0:	1809      	adds	r1, r1, r0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bae2:	000f      	movs	r7, r1
    bae4:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bae6:	1c58      	adds	r0, r3, #1
    bae8:	b2c0      	uxtb	r0, r0
    baea:	18cd      	adds	r5, r1, r3
    baec:	7c2d      	ldrb	r5, [r5, #16]
    baee:	54e5      	strb	r5, [r4, r3]
    baf0:	0003      	movs	r3, r0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    baf2:	783d      	ldrb	r5, [r7, #0]
    baf4:	4285      	cmp	r5, r0
    baf6:	d8f6      	bhi.n	bae6 <P2PTasks+0x68a>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    baf8:	258a      	movs	r5, #138	; 0x8a
    bafa:	006d      	lsls	r5, r5, #1
    bafc:	436e      	muls	r6, r5
    bafe:	4d22      	ldr	r5, [pc, #136]	; (bb88 <P2PTasks+0x72c>)
    bb00:	19ad      	adds	r5, r5, r6
    bb02:	88a9      	ldrh	r1, [r5, #4]
    bb04:	4b23      	ldr	r3, [pc, #140]	; (bb94 <P2PTasks+0x738>)
    bb06:	9305      	str	r3, [sp, #20]
    bb08:	2600      	movs	r6, #0
    bb0a:	9604      	str	r6, [sp, #16]
    bb0c:	9603      	str	r6, [sp, #12]
    bb0e:	9402      	str	r4, [sp, #8]
    bb10:	9001      	str	r0, [sp, #4]
    bb12:	7bab      	ldrb	r3, [r5, #14]
    bb14:	071b      	lsls	r3, r3, #28
    bb16:	0fdb      	lsrs	r3, r3, #31
    bb18:	9300      	str	r3, [sp, #0]
    bb1a:	2300      	movs	r3, #0
    bb1c:	2000      	movs	r0, #0
    bb1e:	4c0a      	ldr	r4, [pc, #40]	; (bb48 <P2PTasks+0x6ec>)
    bb20:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    bb22:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    bb24:	e7cc      	b.n	bac0 <P2PTasks+0x664>
    bb26:	46c0      	nop			; (mov r8, r8)
    bb28:	0000bc91 	.word	0x0000bc91
    bb2c:	200026b5 	.word	0x200026b5
    bb30:	20000014 	.word	0x20000014
    bb34:	00009dfd 	.word	0x00009dfd
    bb38:	0000a9f5 	.word	0x0000a9f5
    bb3c:	0000453d 	.word	0x0000453d
    bb40:	20002950 	.word	0x20002950
    bb44:	0000aa31 	.word	0x0000aa31
    bb48:	0000ab9d 	.word	0x0000ab9d
    bb4c:	00004511 	.word	0x00004511
    bb50:	20002668 	.word	0x20002668
    bb54:	0000ac71 	.word	0x0000ac71
    bb58:	000092e9 	.word	0x000092e9
    bb5c:	200026c0 	.word	0x200026c0
    bb60:	200026bc 	.word	0x200026bc
    bb64:	0000ffff 	.word	0x0000ffff
    bb68:	0000b195 	.word	0x0000b195
    bb6c:	200026e0 	.word	0x200026e0
    bb70:	0000bed1 	.word	0x0000bed1
    bb74:	200026b8 	.word	0x200026b8
    bb78:	00009581 	.word	0x00009581
    bb7c:	20002910 	.word	0x20002910
    bb80:	20000019 	.word	0x20000019
    bb84:	20002960 	.word	0x20002960
    bb88:	200026e4 	.word	0x200026e4
    bb8c:	200026ea 	.word	0x200026ea
    bb90:	200027fe 	.word	0x200027fe
    bb94:	000075e1 	.word	0x000075e1
            P2PStatus.bits.RxHasUserData = 1;
    bb98:	4c26      	ldr	r4, [pc, #152]	; (bc34 <P2PTasks+0x7d8>)
    bb9a:	7823      	ldrb	r3, [r4, #0]
    bb9c:	2208      	movs	r2, #8
    bb9e:	4313      	orrs	r3, r2
    bba0:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    bba2:	4b25      	ldr	r3, [pc, #148]	; (bc38 <P2PTasks+0x7dc>)
    bba4:	681b      	ldr	r3, [r3, #0]
    bba6:	4825      	ldr	r0, [pc, #148]	; (bc3c <P2PTasks+0x7e0>)
    bba8:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
<<<<<<< Updated upstream
=======
    b6fc:	4b66      	ldr	r3, [pc, #408]	; (b898 <P2PTasks+0x3a0>)
    b6fe:	681b      	ldr	r3, [r3, #0]
    b700:	4856      	ldr	r0, [pc, #344]	; (b85c <P2PTasks+0x364>)
    b702:	4798      	blx	r3
    b704:	7823      	ldrb	r3, [r4, #0]
    b706:	2208      	movs	r2, #8
    b708:	4393      	bics	r3, r2
    b70a:	7023      	strb	r3, [r4, #0]
    b70c:	4b63      	ldr	r3, [pc, #396]	; (b89c <P2PTasks+0x3a4>)
    b70e:	4798      	blx	r3
    b710:	e29f      	b.n	bc52 <P2PTasks+0x75a>
    b712:	2a87      	cmp	r2, #135	; 0x87
    b714:	d1ed      	bne.n	b6f2 <P2PTasks+0x1fa>
    b716:	4b62      	ldr	r3, [pc, #392]	; (b8a0 <P2PTasks+0x3a8>)
    b718:	781b      	ldrb	r3, [r3, #0]
    b71a:	2b02      	cmp	r3, #2
    b71c:	d900      	bls.n	b720 <P2PTasks+0x228>
    b71e:	e082      	b.n	b826 <P2PTasks+0x32e>
    b720:	786a      	ldrb	r2, [r5, #1]
    b722:	4b50      	ldr	r3, [pc, #320]	; (b864 <P2PTasks+0x36c>)
    b724:	781b      	ldrb	r3, [r3, #0]
    b726:	429a      	cmp	r2, r3
    b728:	d100      	bne.n	b72c <P2PTasks+0x234>
    b72a:	e0d5      	b.n	b8d8 <P2PTasks+0x3e0>
    b72c:	4b5b      	ldr	r3, [pc, #364]	; (b89c <P2PTasks+0x3a4>)
    b72e:	4798      	blx	r3
    b730:	e28f      	b.n	bc52 <P2PTasks+0x75a>
    b732:	786a      	ldrb	r2, [r5, #1]
    b734:	4b4b      	ldr	r3, [pc, #300]	; (b864 <P2PTasks+0x36c>)
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	429a      	cmp	r2, r3
    b73a:	d002      	beq.n	b742 <P2PTasks+0x24a>
    b73c:	4b57      	ldr	r3, [pc, #348]	; (b89c <P2PTasks+0x3a4>)
    b73e:	4798      	blx	r3
    b740:	e287      	b.n	bc52 <P2PTasks+0x75a>
    b742:	4b57      	ldr	r3, [pc, #348]	; (b8a0 <P2PTasks+0x3a8>)
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	2b03      	cmp	r3, #3
    b748:	d04d      	beq.n	b7e6 <P2PTasks+0x2ee>
    b74a:	4b56      	ldr	r3, [pc, #344]	; (b8a4 <P2PTasks+0x3ac>)
    b74c:	429f      	cmp	r7, r3
    b74e:	d006      	beq.n	b75e <P2PTasks+0x266>
    b750:	4b55      	ldr	r3, [pc, #340]	; (b8a8 <P2PTasks+0x3b0>)
    b752:	881b      	ldrh	r3, [r3, #0]
    b754:	42bb      	cmp	r3, r7
    b756:	d002      	beq.n	b75e <P2PTasks+0x266>
    b758:	2902      	cmp	r1, #2
    b75a:	d900      	bls.n	b75e <P2PTasks+0x266>
    b75c:	e295      	b.n	bc8a <P2PTasks+0x792>
    b75e:	4b53      	ldr	r3, [pc, #332]	; (b8ac <P2PTasks+0x3b4>)
    b760:	4798      	blx	r3
    b762:	0005      	movs	r5, r0
    b764:	4b4e      	ldr	r3, [pc, #312]	; (b8a0 <P2PTasks+0x3a8>)
    b766:	781b      	ldrb	r3, [r3, #0]
    b768:	2b01      	cmp	r3, #1
    b76a:	d03f      	beq.n	b7ec <P2PTasks+0x2f4>
    b76c:	20e0      	movs	r0, #224	; 0xe0
    b76e:	4b50      	ldr	r3, [pc, #320]	; (b8b0 <P2PTasks+0x3b8>)
    b770:	4798      	blx	r3
    b772:	1e04      	subs	r4, r0, #0
    b774:	d100      	bne.n	b778 <P2PTasks+0x280>
    b776:	e281      	b.n	bc7c <P2PTasks+0x784>
    b778:	2391      	movs	r3, #145	; 0x91
    b77a:	7003      	strb	r3, [r0, #0]
    b77c:	7045      	strb	r5, [r0, #1]
    b77e:	2702      	movs	r7, #2
    b780:	2d01      	cmp	r5, #1
    b782:	d944      	bls.n	b80e <P2PTasks+0x316>
    b784:	4b45      	ldr	r3, [pc, #276]	; (b89c <P2PTasks+0x3a4>)
    b786:	4798      	blx	r3
    b788:	4b4a      	ldr	r3, [pc, #296]	; (b8b4 <P2PTasks+0x3bc>)
    b78a:	4798      	blx	r3
    b78c:	b2c6      	uxtb	r6, r0
    b78e:	2103      	movs	r1, #3
    b790:	0030      	movs	r0, r6
    b792:	4b49      	ldr	r3, [pc, #292]	; (b8b8 <P2PTasks+0x3c0>)
    b794:	4798      	blx	r3
    b796:	b2c9      	uxtb	r1, r1
    b798:	2900      	cmp	r1, #0
    b79a:	d040      	beq.n	b81e <P2PTasks+0x326>
    b79c:	20fa      	movs	r0, #250	; 0xfa
    b79e:	0080      	lsls	r0, r0, #2
    b7a0:	4370      	muls	r0, r6
    b7a2:	2103      	movs	r1, #3
    b7a4:	4b45      	ldr	r3, [pc, #276]	; (b8bc <P2PTasks+0x3c4>)
    b7a6:	4798      	blx	r3
    b7a8:	0008      	movs	r0, r1
    b7aa:	4b45      	ldr	r3, [pc, #276]	; (b8c0 <P2PTasks+0x3c8>)
    b7ac:	4798      	blx	r3
    b7ae:	4b2b      	ldr	r3, [pc, #172]	; (b85c <P2PTasks+0x364>)
    b7b0:	685a      	ldr	r2, [r3, #4]
    b7b2:	8859      	ldrh	r1, [r3, #2]
    b7b4:	4843      	ldr	r0, [pc, #268]	; (b8c4 <P2PTasks+0x3cc>)
    b7b6:	9005      	str	r0, [sp, #20]
    b7b8:	2001      	movs	r0, #1
    b7ba:	9004      	str	r0, [sp, #16]
    b7bc:	2000      	movs	r0, #0
    b7be:	9003      	str	r0, [sp, #12]
    b7c0:	9402      	str	r4, [sp, #8]
    b7c2:	9701      	str	r7, [sp, #4]
    b7c4:	781b      	ldrb	r3, [r3, #0]
    b7c6:	071b      	lsls	r3, r3, #28
    b7c8:	0fdb      	lsrs	r3, r3, #31
    b7ca:	9300      	str	r3, [sp, #0]
    b7cc:	2301      	movs	r3, #1
    b7ce:	4c3e      	ldr	r4, [pc, #248]	; (b8c8 <P2PTasks+0x3d0>)
    b7d0:	47a0      	blx	r4
    b7d2:	2064      	movs	r0, #100	; 0x64
    b7d4:	4b3a      	ldr	r3, [pc, #232]	; (b8c0 <P2PTasks+0x3c8>)
    b7d6:	4798      	blx	r3
    b7d8:	2d00      	cmp	r5, #0
    b7da:	d000      	beq.n	b7de <P2PTasks+0x2e6>
    b7dc:	e239      	b.n	bc52 <P2PTasks+0x75a>
    b7de:	2005      	movs	r0, #5
    b7e0:	4b28      	ldr	r3, [pc, #160]	; (b884 <P2PTasks+0x38c>)
    b7e2:	4798      	blx	r3
    b7e4:	e235      	b.n	bc52 <P2PTasks+0x75a>
    b7e6:	4b2d      	ldr	r3, [pc, #180]	; (b89c <P2PTasks+0x3a4>)
    b7e8:	4798      	blx	r3
    b7ea:	e232      	b.n	bc52 <P2PTasks+0x75a>
    b7ec:	3801      	subs	r0, #1
    b7ee:	b2c0      	uxtb	r0, r0
    b7f0:	2801      	cmp	r0, #1
    b7f2:	d9bb      	bls.n	b76c <P2PTasks+0x274>
    b7f4:	20e0      	movs	r0, #224	; 0xe0
    b7f6:	4b2e      	ldr	r3, [pc, #184]	; (b8b0 <P2PTasks+0x3b8>)
    b7f8:	4798      	blx	r3
    b7fa:	1e04      	subs	r4, r0, #0
    b7fc:	d100      	bne.n	b800 <P2PTasks+0x308>
    b7fe:	e23d      	b.n	bc7c <P2PTasks+0x784>
    b800:	2391      	movs	r3, #145	; 0x91
    b802:	7023      	strb	r3, [r4, #0]
    b804:	3362      	adds	r3, #98	; 0x62
    b806:	7063      	strb	r3, [r4, #1]
    b808:	25f3      	movs	r5, #243	; 0xf3
    b80a:	2702      	movs	r7, #2
    b80c:	e7ba      	b.n	b784 <P2PTasks+0x28c>
    b80e:	4b2f      	ldr	r3, [pc, #188]	; (b8cc <P2PTasks+0x3d4>)
    b810:	781b      	ldrb	r3, [r3, #0]
    b812:	7083      	strb	r3, [r0, #2]
    b814:	4b2e      	ldr	r3, [pc, #184]	; (b8d0 <P2PTasks+0x3d8>)
    b816:	781b      	ldrb	r3, [r3, #0]
    b818:	70c3      	strb	r3, [r0, #3]
    b81a:	3702      	adds	r7, #2
    b81c:	e7b2      	b.n	b784 <P2PTasks+0x28c>
    b81e:	2001      	movs	r0, #1
    b820:	4b2c      	ldr	r3, [pc, #176]	; (b8d4 <P2PTasks+0x3dc>)
    b822:	4798      	blx	r3
    b824:	e7c3      	b.n	b7ae <P2PTasks+0x2b6>
    b826:	4b1d      	ldr	r3, [pc, #116]	; (b89c <P2PTasks+0x3a4>)
    b828:	4798      	blx	r3
    b82a:	e212      	b.n	bc52 <P2PTasks+0x75a>
    b82c:	0000a629 	.word	0x0000a629
    b830:	200026e4 	.word	0x200026e4
    b834:	200026e0 	.word	0x200026e0
    b838:	0000b399 	.word	0x0000b399
    b83c:	000c8708 	.word	0x000c8708
    b840:	200002a0 	.word	0x200002a0
    b844:	2000028b 	.word	0x2000028b
    b848:	20002964 	.word	0x20002964
    b84c:	00009f19 	.word	0x00009f19
    b850:	200026c6 	.word	0x200026c6
    b854:	200026a0 	.word	0x200026a0
    b858:	200026c4 	.word	0x200026c4
    b85c:	20002950 	.word	0x20002950
    b860:	20002960 	.word	0x20002960
    b864:	20000019 	.word	0x20000019
    b868:	20002910 	.word	0x20002910
    b86c:	0000bf6d 	.word	0x0000bf6d
    b870:	0000bfcd 	.word	0x0000bfcd
    b874:	016e3600 	.word	0x016e3600
    b878:	00000223 	.word	0x00000223
    b87c:	200026b8 	.word	0x200026b8
    b880:	000f4240 	.word	0x000f4240
    b884:	00009385 	.word	0x00009385
    b888:	00018b5c 	.word	0x00018b5c
    b88c:	00016f0d 	.word	0x00016f0d
    b890:	00009ed5 	.word	0x00009ed5
    b894:	00018b70 	.word	0x00018b70
    b898:	200002a8 	.word	0x200002a8
    b89c:	00009e99 	.word	0x00009e99
    b8a0:	20000018 	.word	0x20000018
    b8a4:	0000ffff 	.word	0x0000ffff
    b8a8:	200026bc 	.word	0x200026bc
    b8ac:	0000b231 	.word	0x0000b231
    b8b0:	0000bd2d 	.word	0x0000bd2d
    b8b4:	0000aa91 	.word	0x0000aa91
    b8b8:	000136e1 	.word	0x000136e1
    b8bc:	000138b5 	.word	0x000138b5
    b8c0:	0000453d 	.word	0x0000453d
    b8c4:	0000aacd 	.word	0x0000aacd
    b8c8:	0000ac39 	.word	0x0000ac39
    b8cc:	200026b5 	.word	0x200026b5
    b8d0:	20000014 	.word	0x20000014
    b8d4:	00004511 	.word	0x00004511
    b8d8:	2010      	movs	r0, #16
    b8da:	4bba      	ldr	r3, [pc, #744]	; (bbc4 <P2PTasks+0x6cc>)
    b8dc:	4798      	blx	r3
    b8de:	1e04      	subs	r4, r0, #0
    b8e0:	d100      	bne.n	b8e4 <P2PTasks+0x3ec>
    b8e2:	e1cb      	b.n	bc7c <P2PTasks+0x784>
    b8e4:	2397      	movs	r3, #151	; 0x97
    b8e6:	7003      	strb	r3, [r0, #0]
    b8e8:	4bb7      	ldr	r3, [pc, #732]	; (bbc8 <P2PTasks+0x6d0>)
    b8ea:	781b      	ldrb	r3, [r3, #0]
    b8ec:	7043      	strb	r3, [r0, #1]
    b8ee:	4bb7      	ldr	r3, [pc, #732]	; (bbcc <P2PTasks+0x6d4>)
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	7083      	strb	r3, [r0, #2]
    b8f4:	4bb6      	ldr	r3, [pc, #728]	; (bbd0 <P2PTasks+0x6d8>)
    b8f6:	4798      	blx	r3
    b8f8:	4bb6      	ldr	r3, [pc, #728]	; (bbd4 <P2PTasks+0x6dc>)
    b8fa:	4798      	blx	r3
    b8fc:	b2c3      	uxtb	r3, r0
    b8fe:	2064      	movs	r0, #100	; 0x64
    b900:	4358      	muls	r0, r3
    b902:	2800      	cmp	r0, #0
    b904:	d016      	beq.n	b934 <P2PTasks+0x43c>
    b906:	4bb4      	ldr	r3, [pc, #720]	; (bbd8 <P2PTasks+0x6e0>)
    b908:	4798      	blx	r3
    b90a:	4bb4      	ldr	r3, [pc, #720]	; (bbdc <P2PTasks+0x6e4>)
    b90c:	685a      	ldr	r2, [r3, #4]
    b90e:	8859      	ldrh	r1, [r3, #2]
    b910:	48b3      	ldr	r0, [pc, #716]	; (bbe0 <P2PTasks+0x6e8>)
    b912:	9005      	str	r0, [sp, #20]
    b914:	2001      	movs	r0, #1
    b916:	9004      	str	r0, [sp, #16]
    b918:	2000      	movs	r0, #0
    b91a:	9003      	str	r0, [sp, #12]
    b91c:	9402      	str	r4, [sp, #8]
    b91e:	3003      	adds	r0, #3
    b920:	9001      	str	r0, [sp, #4]
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	071b      	lsls	r3, r3, #28
    b926:	0fdb      	lsrs	r3, r3, #31
    b928:	9300      	str	r3, [sp, #0]
    b92a:	2301      	movs	r3, #1
    b92c:	2000      	movs	r0, #0
    b92e:	4cad      	ldr	r4, [pc, #692]	; (bbe4 <P2PTasks+0x6ec>)
    b930:	47a0      	blx	r4
    b932:	e18e      	b.n	bc52 <P2PTasks+0x75a>
    b934:	2001      	movs	r0, #1
    b936:	4bac      	ldr	r3, [pc, #688]	; (bbe8 <P2PTasks+0x6f0>)
    b938:	4798      	blx	r3
    b93a:	e7e6      	b.n	b90a <P2PTasks+0x412>
    b93c:	2010      	movs	r0, #16
    b93e:	4ba1      	ldr	r3, [pc, #644]	; (bbc4 <P2PTasks+0x6cc>)
    b940:	4798      	blx	r3
    b942:	4680      	mov	r8, r0
    b944:	2800      	cmp	r0, #0
    b946:	d100      	bne.n	b94a <P2PTasks+0x452>
    b948:	e198      	b.n	bc7c <P2PTasks+0x784>
    b94a:	2392      	movs	r3, #146	; 0x92
    b94c:	7003      	strb	r3, [r0, #0]
    b94e:	4ba3      	ldr	r3, [pc, #652]	; (bbdc <P2PTasks+0x6e4>)
    b950:	685b      	ldr	r3, [r3, #4]
    b952:	9307      	str	r3, [sp, #28]
    b954:	4ea5      	ldr	r6, [pc, #660]	; (bbec <P2PTasks+0x6f4>)
    b956:	2400      	movs	r4, #0
    b958:	2700      	movs	r7, #0
    b95a:	0035      	movs	r5, r6
    b95c:	e006      	b.n	b96c <P2PTasks+0x474>
    b95e:	3701      	adds	r7, #1
    b960:	b2ff      	uxtb	r7, r7
    b962:	3401      	adds	r4, #1
    b964:	360a      	adds	r6, #10
    b966:	2f05      	cmp	r7, #5
    b968:	d100      	bne.n	b96c <P2PTasks+0x474>
    b96a:	e195      	b.n	bc98 <P2PTasks+0x7a0>
    b96c:	9406      	str	r4, [sp, #24]
    b96e:	00a3      	lsls	r3, r4, #2
    b970:	191b      	adds	r3, r3, r4
    b972:	005b      	lsls	r3, r3, #1
    b974:	18eb      	adds	r3, r5, r3
    b976:	7a1b      	ldrb	r3, [r3, #8]
    b978:	09db      	lsrs	r3, r3, #7
    b97a:	d0f0      	beq.n	b95e <P2PTasks+0x466>
    b97c:	0031      	movs	r1, r6
    b97e:	9807      	ldr	r0, [sp, #28]
    b980:	4b9b      	ldr	r3, [pc, #620]	; (bbf0 <P2PTasks+0x6f8>)
    b982:	4798      	blx	r3
    b984:	2800      	cmp	r0, #0
    b986:	d0ea      	beq.n	b95e <P2PTasks+0x466>
    b988:	9a06      	ldr	r2, [sp, #24]
    b98a:	0093      	lsls	r3, r2, #2
    b98c:	189d      	adds	r5, r3, r2
    b98e:	006d      	lsls	r5, r5, #1
    b990:	4b96      	ldr	r3, [pc, #600]	; (bbec <P2PTasks+0x6f4>)
    b992:	195d      	adds	r5, r3, r5
    b994:	2400      	movs	r4, #0
    b996:	722c      	strb	r4, [r5, #8]
    b998:	2005      	movs	r0, #5
    b99a:	4b96      	ldr	r3, [pc, #600]	; (bbf4 <P2PTasks+0x6fc>)
    b99c:	4798      	blx	r3
    b99e:	4643      	mov	r3, r8
    b9a0:	705c      	strb	r4, [r3, #1]
    b9a2:	4b8b      	ldr	r3, [pc, #556]	; (bbd0 <P2PTasks+0x6d8>)
    b9a4:	4798      	blx	r3
    b9a6:	2f05      	cmp	r7, #5
    b9a8:	d001      	beq.n	b9ae <P2PTasks+0x4b6>
    b9aa:	3402      	adds	r4, #2
    b9ac:	e17b      	b.n	bca6 <P2PTasks+0x7ae>
    b9ae:	2302      	movs	r3, #2
    b9b0:	e175      	b.n	bc9e <P2PTasks+0x7a6>
    b9b2:	786b      	ldrb	r3, [r5, #1]
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	d01d      	beq.n	b9f4 <P2PTasks+0x4fc>
    b9b8:	2b01      	cmp	r3, #1
    b9ba:	d118      	bne.n	b9ee <P2PTasks+0x4f6>
    b9bc:	4b8e      	ldr	r3, [pc, #568]	; (bbf8 <P2PTasks+0x700>)
    b9be:	681b      	ldr	r3, [r3, #0]
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	d004      	beq.n	b9ce <P2PTasks+0x4d6>
    b9c4:	2006      	movs	r0, #6
    b9c6:	4798      	blx	r3
    b9c8:	2200      	movs	r2, #0
    b9ca:	4b8b      	ldr	r3, [pc, #556]	; (bbf8 <P2PTasks+0x700>)
    b9cc:	601a      	str	r2, [r3, #0]
    b9ce:	4b8b      	ldr	r3, [pc, #556]	; (bbfc <P2PTasks+0x704>)
    b9d0:	881a      	ldrh	r2, [r3, #0]
    b9d2:	4b8b      	ldr	r3, [pc, #556]	; (bc00 <P2PTasks+0x708>)
    b9d4:	429a      	cmp	r2, r3
    b9d6:	d017      	beq.n	ba08 <P2PTasks+0x510>
    b9d8:	4b8a      	ldr	r3, [pc, #552]	; (bc04 <P2PTasks+0x70c>)
    b9da:	4798      	blx	r3
    b9dc:	4a8a      	ldr	r2, [pc, #552]	; (bc08 <P2PTasks+0x710>)
    b9de:	7813      	ldrb	r3, [r2, #0]
    b9e0:	2102      	movs	r1, #2
    b9e2:	430b      	orrs	r3, r1
    b9e4:	7013      	strb	r3, [r2, #0]
    b9e6:	4b89      	ldr	r3, [pc, #548]	; (bc0c <P2PTasks+0x714>)
    b9e8:	4798      	blx	r3
    b9ea:	4b89      	ldr	r3, [pc, #548]	; (bc10 <P2PTasks+0x718>)
    b9ec:	6018      	str	r0, [r3, #0]
    b9ee:	4b78      	ldr	r3, [pc, #480]	; (bbd0 <P2PTasks+0x6d8>)
    b9f0:	4798      	blx	r3
    b9f2:	e12e      	b.n	bc52 <P2PTasks+0x75a>
    b9f4:	4b80      	ldr	r3, [pc, #512]	; (bbf8 <P2PTasks+0x700>)
    b9f6:	681b      	ldr	r3, [r3, #0]
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d0e8      	beq.n	b9ce <P2PTasks+0x4d6>
    b9fc:	2000      	movs	r0, #0
    b9fe:	4798      	blx	r3
    ba00:	2200      	movs	r2, #0
    ba02:	4b7d      	ldr	r3, [pc, #500]	; (bbf8 <P2PTasks+0x700>)
    ba04:	601a      	str	r2, [r3, #0]
    ba06:	e7e2      	b.n	b9ce <P2PTasks+0x4d6>
    ba08:	497c      	ldr	r1, [pc, #496]	; (bbfc <P2PTasks+0x704>)
    ba0a:	4b74      	ldr	r3, [pc, #464]	; (bbdc <P2PTasks+0x6e4>)
    ba0c:	885b      	ldrh	r3, [r3, #2]
    ba0e:	800b      	strh	r3, [r1, #0]
    ba10:	201e      	movs	r0, #30
    ba12:	ab02      	add	r3, sp, #8
    ba14:	469c      	mov	ip, r3
    ba16:	4460      	add	r0, ip
    ba18:	2301      	movs	r3, #1
    ba1a:	425b      	negs	r3, r3
    ba1c:	8003      	strh	r3, [r0, #0]
    ba1e:	4b7d      	ldr	r3, [pc, #500]	; (bc14 <P2PTasks+0x71c>)
    ba20:	4798      	blx	r3
    ba22:	2002      	movs	r0, #2
    ba24:	4b73      	ldr	r3, [pc, #460]	; (bbf4 <P2PTasks+0x6fc>)
    ba26:	4798      	blx	r3
    ba28:	e7d6      	b.n	b9d8 <P2PTasks+0x4e0>
    ba2a:	4a77      	ldr	r2, [pc, #476]	; (bc08 <P2PTasks+0x710>)
    ba2c:	7813      	ldrb	r3, [r2, #0]
    ba2e:	2120      	movs	r1, #32
    ba30:	438b      	bics	r3, r1
    ba32:	7013      	strb	r3, [r2, #0]
    ba34:	4b66      	ldr	r3, [pc, #408]	; (bbd0 <P2PTasks+0x6d8>)
    ba36:	4798      	blx	r3
    ba38:	e10b      	b.n	bc52 <P2PTasks+0x75a>
    ba3a:	3401      	adds	r4, #1
    ba3c:	b2e4      	uxtb	r4, r4
    ba3e:	3610      	adds	r6, #16
    ba40:	4554      	cmp	r4, sl
    ba42:	d00d      	beq.n	ba60 <P2PTasks+0x568>
    ba44:	7833      	ldrb	r3, [r6, #0]
    ba46:	455b      	cmp	r3, fp
    ba48:	d1f7      	bne.n	ba3a <P2PTasks+0x542>
    ba4a:	8973      	ldrh	r3, [r6, #10]
    ba4c:	42bb      	cmp	r3, r7
    ba4e:	d1f4      	bne.n	ba3a <P2PTasks+0x542>
    ba50:	1c70      	adds	r0, r6, #1
    ba52:	9906      	ldr	r1, [sp, #24]
    ba54:	4b66      	ldr	r3, [pc, #408]	; (bbf0 <P2PTasks+0x6f8>)
    ba56:	4798      	blx	r3
    ba58:	2800      	cmp	r0, #0
    ba5a:	d0ee      	beq.n	ba3a <P2PTasks+0x542>
    ba5c:	45a2      	cmp	sl, r4
    ba5e:	d1e9      	bne.n	ba34 <P2PTasks+0x53c>
    ba60:	2c03      	cmp	r4, #3
    ba62:	d8e7      	bhi.n	ba34 <P2PTasks+0x53c>
    ba64:	496c      	ldr	r1, [pc, #432]	; (bc18 <P2PTasks+0x720>)
    ba66:	4653      	mov	r3, sl
    ba68:	011b      	lsls	r3, r3, #4
    ba6a:	4a6c      	ldr	r2, [pc, #432]	; (bc1c <P2PTasks+0x724>)
    ba6c:	7812      	ldrb	r2, [r2, #0]
    ba6e:	545a      	strb	r2, [r3, r1]
    ba70:	18ca      	adds	r2, r1, r3
    ba72:	4648      	mov	r0, r9
    ba74:	7310      	strb	r0, [r2, #12]
    ba76:	4640      	mov	r0, r8
    ba78:	7350      	strb	r0, [r2, #13]
    ba7a:	8157      	strh	r7, [r2, #10]
    ba7c:	4a57      	ldr	r2, [pc, #348]	; (bbdc <P2PTasks+0x6e4>)
    ba7e:	6852      	ldr	r2, [r2, #4]
    ba80:	3301      	adds	r3, #1
    ba82:	185b      	adds	r3, r3, r1
    ba84:	0010      	movs	r0, r2
    ba86:	3008      	adds	r0, #8
    ba88:	7811      	ldrb	r1, [r2, #0]
    ba8a:	7019      	strb	r1, [r3, #0]
    ba8c:	3201      	adds	r2, #1
    ba8e:	3301      	adds	r3, #1
    ba90:	4290      	cmp	r0, r2
    ba92:	d1f9      	bne.n	ba88 <P2PTasks+0x590>
    ba94:	786a      	ldrb	r2, [r5, #1]
    ba96:	4653      	mov	r3, sl
    ba98:	0119      	lsls	r1, r3, #4
    ba9a:	4b5f      	ldr	r3, [pc, #380]	; (bc18 <P2PTasks+0x720>)
    ba9c:	185b      	adds	r3, r3, r1
    ba9e:	739a      	strb	r2, [r3, #14]
    baa0:	78aa      	ldrb	r2, [r5, #2]
    baa2:	73da      	strb	r2, [r3, #15]
    baa4:	4653      	mov	r3, sl
    baa6:	3301      	adds	r3, #1
    baa8:	4a5d      	ldr	r2, [pc, #372]	; (bc20 <P2PTasks+0x728>)
    baaa:	7013      	strb	r3, [r2, #0]
    baac:	e7c2      	b.n	ba34 <P2PTasks+0x53c>
    baae:	786b      	ldrb	r3, [r5, #1]
    bab0:	2b00      	cmp	r3, #0
    bab2:	d122      	bne.n	bafa <P2PTasks+0x602>
    bab4:	4b49      	ldr	r3, [pc, #292]	; (bbdc <P2PTasks+0x6e4>)
    bab6:	685e      	ldr	r6, [r3, #4]
    bab8:	4c4c      	ldr	r4, [pc, #304]	; (bbec <P2PTasks+0x6f4>)
    baba:	2700      	movs	r7, #0
    babc:	0025      	movs	r5, r4
    babe:	e003      	b.n	bac8 <P2PTasks+0x5d0>
    bac0:	3701      	adds	r7, #1
    bac2:	340a      	adds	r4, #10
    bac4:	2f05      	cmp	r7, #5
    bac6:	d018      	beq.n	bafa <P2PTasks+0x602>
    bac8:	9706      	str	r7, [sp, #24]
    baca:	00bb      	lsls	r3, r7, #2
    bacc:	19db      	adds	r3, r3, r7
    bace:	005b      	lsls	r3, r3, #1
    bad0:	18eb      	adds	r3, r5, r3
    bad2:	7a1b      	ldrb	r3, [r3, #8]
    bad4:	09db      	lsrs	r3, r3, #7
    bad6:	d0f3      	beq.n	bac0 <P2PTasks+0x5c8>
    bad8:	0021      	movs	r1, r4
    bada:	0030      	movs	r0, r6
    badc:	4b44      	ldr	r3, [pc, #272]	; (bbf0 <P2PTasks+0x6f8>)
    bade:	4798      	blx	r3
    bae0:	2800      	cmp	r0, #0
    bae2:	d0ed      	beq.n	bac0 <P2PTasks+0x5c8>
    bae4:	9a06      	ldr	r2, [sp, #24]
    bae6:	0093      	lsls	r3, r2, #2
    bae8:	189c      	adds	r4, r3, r2
    baea:	0064      	lsls	r4, r4, #1
    baec:	4b3f      	ldr	r3, [pc, #252]	; (bbec <P2PTasks+0x6f4>)
    baee:	191c      	adds	r4, r3, r4
    baf0:	2300      	movs	r3, #0
    baf2:	7223      	strb	r3, [r4, #8]
    baf4:	2005      	movs	r0, #5
    baf6:	4b3f      	ldr	r3, [pc, #252]	; (bbf4 <P2PTasks+0x6fc>)
    baf8:	4798      	blx	r3
    bafa:	4b35      	ldr	r3, [pc, #212]	; (bbd0 <P2PTasks+0x6d8>)
    bafc:	4798      	blx	r3
    bafe:	e0a8      	b.n	bc52 <P2PTasks+0x75a>
    bb00:	20e0      	movs	r0, #224	; 0xe0
    bb02:	4b30      	ldr	r3, [pc, #192]	; (bbc4 <P2PTasks+0x6cc>)
    bb04:	4798      	blx	r3
    bb06:	1e04      	subs	r4, r0, #0
    bb08:	d100      	bne.n	bb0c <P2PTasks+0x614>
    bb0a:	e0b7      	b.n	bc7c <P2PTasks+0x784>
    bb0c:	4b33      	ldr	r3, [pc, #204]	; (bbdc <P2PTasks+0x6e4>)
    bb0e:	685d      	ldr	r5, [r3, #4]
    bb10:	4b44      	ldr	r3, [pc, #272]	; (bc24 <P2PTasks+0x72c>)
    bb12:	7b9b      	ldrb	r3, [r3, #14]
    bb14:	07db      	lsls	r3, r3, #31
    bb16:	d505      	bpl.n	bb24 <P2PTasks+0x62c>
    bb18:	0029      	movs	r1, r5
    bb1a:	4843      	ldr	r0, [pc, #268]	; (bc28 <P2PTasks+0x730>)
    bb1c:	4b34      	ldr	r3, [pc, #208]	; (bbf0 <P2PTasks+0x6f8>)
    bb1e:	4798      	blx	r3
    bb20:	2800      	cmp	r0, #0
    bb22:	d11e      	bne.n	bb62 <P2PTasks+0x66a>
    bb24:	2391      	movs	r3, #145	; 0x91
    bb26:	005b      	lsls	r3, r3, #1
    bb28:	4a3e      	ldr	r2, [pc, #248]	; (bc24 <P2PTasks+0x72c>)
    bb2a:	5cd3      	ldrb	r3, [r2, r3]
    bb2c:	07db      	lsls	r3, r3, #31
    bb2e:	d507      	bpl.n	bb40 <P2PTasks+0x648>
    bb30:	0029      	movs	r1, r5
    bb32:	483e      	ldr	r0, [pc, #248]	; (bc2c <P2PTasks+0x734>)
    bb34:	4b2e      	ldr	r3, [pc, #184]	; (bbf0 <P2PTasks+0x6f8>)
    bb36:	4798      	blx	r3
    bb38:	4a3c      	ldr	r2, [pc, #240]	; (bc2c <P2PTasks+0x734>)
    bb3a:	2601      	movs	r6, #1
    bb3c:	2800      	cmp	r0, #0
    bb3e:	d112      	bne.n	bb66 <P2PTasks+0x66e>
    bb40:	4b26      	ldr	r3, [pc, #152]	; (bbdc <P2PTasks+0x6e4>)
    bb42:	8859      	ldrh	r1, [r3, #2]
    bb44:	4b3a      	ldr	r3, [pc, #232]	; (bc30 <P2PTasks+0x738>)
    bb46:	9305      	str	r3, [sp, #20]
    bb48:	2300      	movs	r3, #0
    bb4a:	9304      	str	r3, [sp, #16]
    bb4c:	9303      	str	r3, [sp, #12]
    bb4e:	9402      	str	r4, [sp, #8]
    bb50:	9301      	str	r3, [sp, #4]
    bb52:	9300      	str	r3, [sp, #0]
    bb54:	002a      	movs	r2, r5
    bb56:	2000      	movs	r0, #0
    bb58:	4c22      	ldr	r4, [pc, #136]	; (bbe4 <P2PTasks+0x6ec>)
    bb5a:	47a0      	blx	r4
    bb5c:	4b1c      	ldr	r3, [pc, #112]	; (bbd0 <P2PTasks+0x6d8>)
    bb5e:	4798      	blx	r3
    bb60:	e077      	b.n	bc52 <P2PTasks+0x75a>
    bb62:	4a31      	ldr	r2, [pc, #196]	; (bc28 <P2PTasks+0x730>)
    bb64:	2600      	movs	r6, #0
    bb66:	218a      	movs	r1, #138	; 0x8a
    bb68:	0049      	lsls	r1, r1, #1
    bb6a:	4371      	muls	r1, r6
    bb6c:	4b2d      	ldr	r3, [pc, #180]	; (bc24 <P2PTasks+0x72c>)
    bb6e:	185b      	adds	r3, r3, r1
    bb70:	7bd8      	ldrb	r0, [r3, #15]
    bb72:	2800      	cmp	r0, #0
    bb74:	d00e      	beq.n	bb94 <P2PTasks+0x69c>
    bb76:	2300      	movs	r3, #0
    bb78:	0008      	movs	r0, r1
    bb7a:	492a      	ldr	r1, [pc, #168]	; (bc24 <P2PTasks+0x72c>)
    bb7c:	1809      	adds	r1, r1, r0
    bb7e:	000f      	movs	r7, r1
    bb80:	370f      	adds	r7, #15
    bb82:	1c58      	adds	r0, r3, #1
    bb84:	b2c0      	uxtb	r0, r0
    bb86:	18cd      	adds	r5, r1, r3
    bb88:	7c2d      	ldrb	r5, [r5, #16]
    bb8a:	54e5      	strb	r5, [r4, r3]
    bb8c:	0003      	movs	r3, r0
    bb8e:	783d      	ldrb	r5, [r7, #0]
    bb90:	4285      	cmp	r5, r0
    bb92:	d8f6      	bhi.n	bb82 <P2PTasks+0x68a>
    bb94:	258a      	movs	r5, #138	; 0x8a
    bb96:	006d      	lsls	r5, r5, #1
    bb98:	436e      	muls	r6, r5
    bb9a:	4d22      	ldr	r5, [pc, #136]	; (bc24 <P2PTasks+0x72c>)
    bb9c:	19ad      	adds	r5, r5, r6
    bb9e:	88a9      	ldrh	r1, [r5, #4]
    bba0:	4b23      	ldr	r3, [pc, #140]	; (bc30 <P2PTasks+0x738>)
    bba2:	9305      	str	r3, [sp, #20]
    bba4:	2600      	movs	r6, #0
    bba6:	9604      	str	r6, [sp, #16]
    bba8:	9603      	str	r6, [sp, #12]
    bbaa:	9402      	str	r4, [sp, #8]
    bbac:	9001      	str	r0, [sp, #4]
    bbae:	7bab      	ldrb	r3, [r5, #14]
    bbb0:	071b      	lsls	r3, r3, #28
    bbb2:	0fdb      	lsrs	r3, r3, #31
    bbb4:	9300      	str	r3, [sp, #0]
    bbb6:	2300      	movs	r3, #0
    bbb8:	2000      	movs	r0, #0
    bbba:	4c0a      	ldr	r4, [pc, #40]	; (bbe4 <P2PTasks+0x6ec>)
    bbbc:	47a0      	blx	r4
    bbbe:	73ae      	strb	r6, [r5, #14]
    bbc0:	e7cc      	b.n	bb5c <P2PTasks+0x664>
    bbc2:	46c0      	nop			; (mov r8, r8)
    bbc4:	0000bd2d 	.word	0x0000bd2d
    bbc8:	200026b5 	.word	0x200026b5
    bbcc:	20000014 	.word	0x20000014
    bbd0:	00009e99 	.word	0x00009e99
    bbd4:	0000aa91 	.word	0x0000aa91
    bbd8:	0000453d 	.word	0x0000453d
    bbdc:	20002950 	.word	0x20002950
    bbe0:	0000aacd 	.word	0x0000aacd
    bbe4:	0000ac39 	.word	0x0000ac39
    bbe8:	00004511 	.word	0x00004511
    bbec:	20002668 	.word	0x20002668
    bbf0:	0000ad0d 	.word	0x0000ad0d
    bbf4:	00009385 	.word	0x00009385
    bbf8:	200026c0 	.word	0x200026c0
    bbfc:	200026bc 	.word	0x200026bc
    bc00:	0000ffff 	.word	0x0000ffff
    bc04:	0000b231 	.word	0x0000b231
    bc08:	200026e0 	.word	0x200026e0
    bc0c:	0000bf6d 	.word	0x0000bf6d
    bc10:	200026b8 	.word	0x200026b8
    bc14:	0000961d 	.word	0x0000961d
    bc18:	20002910 	.word	0x20002910
    bc1c:	20000019 	.word	0x20000019
    bc20:	20002960 	.word	0x20002960
    bc24:	200026e4 	.word	0x200026e4
    bc28:	200026ea 	.word	0x200026ea
    bc2c:	200027fe 	.word	0x200027fe
    bc30:	000075e1 	.word	0x000075e1
    bc34:	4c26      	ldr	r4, [pc, #152]	; (bcd0 <P2PTasks+0x7d8>)
>>>>>>> Stashed changes
    bc36:	7823      	ldrb	r3, [r4, #0]
    bc38:	2208      	movs	r2, #8
    bc3a:	4313      	orrs	r3, r2
    bc3c:	7023      	strb	r3, [r4, #0]
<<<<<<< Updated upstream
=======
    bbaa:	7823      	ldrb	r3, [r4, #0]
    bbac:	2208      	movs	r2, #8
    bbae:	4393      	bics	r3, r2
    bbb0:	7023      	strb	r3, [r4, #0]
>>>>>>> Stashed changes
			MiMAC_DiscardPacket();
    bbb2:	4b23      	ldr	r3, [pc, #140]	; (bc40 <P2PTasks+0x7e4>)
    bbb4:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    bbb6:	4b21      	ldr	r3, [pc, #132]	; (bc3c <P2PTasks+0x7e0>)
    bbb8:	7b1b      	ldrb	r3, [r3, #12]
    bbba:	2b00      	cmp	r3, #0
    bbbc:	d007      	beq.n	bbce <P2PTasks+0x772>
    bbbe:	4b1d      	ldr	r3, [pc, #116]	; (bc34 <P2PTasks+0x7d8>)
    bbc0:	781b      	ldrb	r3, [r3, #0]
    bbc2:	06db      	lsls	r3, r3, #27
    bbc4:	d403      	bmi.n	bbce <P2PTasks+0x772>
    bbc6:	4b1b      	ldr	r3, [pc, #108]	; (bc34 <P2PTasks+0x7d8>)
    bbc8:	781b      	ldrb	r3, [r3, #0]
    bbca:	069b      	lsls	r3, r3, #26
    bbcc:	d506      	bpl.n	bbdc <P2PTasks+0x780>
            P2PStatus.bits.RxHasUserData = 0;
    bbce:	4a19      	ldr	r2, [pc, #100]	; (bc34 <P2PTasks+0x7d8>)
    bbd0:	7813      	ldrb	r3, [r2, #0]
    bbd2:	2108      	movs	r1, #8
    bbd4:	438b      	bics	r3, r1
    bbd6:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    bbd8:	4b19      	ldr	r3, [pc, #100]	; (bc40 <P2PTasks+0x7e4>)
    bbda:	4798      	blx	r3
    PDS_TaskHandler();
    bbdc:	4b19      	ldr	r3, [pc, #100]	; (bc44 <P2PTasks+0x7e8>)
    bbde:	4798      	blx	r3
}
    bbe0:	b00b      	add	sp, #44	; 0x2c
    bbe2:	bc3c      	pop	{r2, r3, r4, r5}
    bbe4:	4690      	mov	r8, r2
    bbe6:	4699      	mov	r9, r3
    bbe8:	46a2      	mov	sl, r4
    bbea:	46ab      	mov	fp, r5
    bbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    bbee:	4b16      	ldr	r3, [pc, #88]	; (bc48 <P2PTasks+0x7ec>)
    bbf0:	781b      	ldrb	r3, [r3, #0]
    bbf2:	2b01      	cmp	r3, #1
    bbf4:	d100      	bne.n	bbf8 <P2PTasks+0x79c>
    bbf6:	e5af      	b.n	b758 <P2PTasks+0x2fc>
                                        status = STATUS_NOT_SAME_PAN;
    bbf8:	25f2      	movs	r5, #242	; 0xf2
    bbfa:	e569      	b.n	b6d0 <P2PTasks+0x274>
                            MiMAC_DiscardPacket();
    bbfc:	4b10      	ldr	r3, [pc, #64]	; (bc40 <P2PTasks+0x7e4>)
    bbfe:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    bc00:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    bc02:	1c5c      	adds	r4, r3, #1
    bc04:	22f0      	movs	r2, #240	; 0xf0
    bc06:	4641      	mov	r1, r8
    bc08:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    bc0a:	4b0c      	ldr	r3, [pc, #48]	; (bc3c <P2PTasks+0x7e0>)
    bc0c:	685a      	ldr	r2, [r3, #4]
    bc0e:	8859      	ldrh	r1, [r3, #2]
    bc10:	480e      	ldr	r0, [pc, #56]	; (bc4c <P2PTasks+0x7f0>)
    bc12:	9005      	str	r0, [sp, #20]
    bc14:	2001      	movs	r0, #1
    bc16:	9004      	str	r0, [sp, #16]
    bc18:	2000      	movs	r0, #0
    bc1a:	9003      	str	r0, [sp, #12]
    bc1c:	4640      	mov	r0, r8
    bc1e:	9002      	str	r0, [sp, #8]
    bc20:	9401      	str	r4, [sp, #4]
    bc22:	781b      	ldrb	r3, [r3, #0]
    bc24:	071b      	lsls	r3, r3, #28
    bc26:	0fdb      	lsrs	r3, r3, #31
    bc28:	9300      	str	r3, [sp, #0]
    bc2a:	2301      	movs	r3, #1
    bc2c:	2000      	movs	r0, #0
    bc2e:	4c08      	ldr	r4, [pc, #32]	; (bc50 <P2PTasks+0x7f4>)
    bc30:	47a0      	blx	r4
                            break;
    bc32:	e7c0      	b.n	bbb6 <P2PTasks+0x75a>
    bc34:	200026e0 	.word	0x200026e0
    bc38:	200002a8 	.word	0x200002a8
    bc3c:	20002950 	.word	0x20002950
    bc40:	00009dfd 	.word	0x00009dfd
    bc44:	00009471 	.word	0x00009471
    bc48:	20000018 	.word	0x20000018
    bc4c:	0000aa31 	.word	0x0000aa31
    bc50:	0000ab9d 	.word	0x0000ab9d

0000bc54 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    bc54:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    bc56:	4a0b      	ldr	r2, [pc, #44]	; (bc84 <MiMem_Init+0x30>)
    bc58:	1e50      	subs	r0, r2, #1
    bc5a:	2403      	movs	r4, #3
    bc5c:	43a0      	bics	r0, r4
    bc5e:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    bc60:	4b09      	ldr	r3, [pc, #36]	; (bc88 <MiMem_Init+0x34>)
    bc62:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    bc64:	4253      	negs	r3, r2
    bc66:	43a3      	bics	r3, r4
    bc68:	24c0      	movs	r4, #192	; 0xc0
    bc6a:	0164      	lsls	r4, r4, #5
    bc6c:	46a4      	mov	ip, r4
    bc6e:	4462      	add	r2, ip
    bc70:	189b      	adds	r3, r3, r2
    bc72:	4a06      	ldr	r2, [pc, #24]	; (bc8c <MiMem_Init+0x38>)
    bc74:	6013      	str	r3, [r2, #0]
    bc76:	60c3      	str	r3, [r0, #12]
	base->free = true;
    bc78:	2301      	movs	r3, #1
    bc7a:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    bc7c:	2300      	movs	r3, #0
    bc7e:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    bc80:	6083      	str	r3, [r0, #8]
}
    bc82:	bd10      	pop	{r4, pc}
    bc84:	200002b0 	.word	0x200002b0
    bc88:	200002ac 	.word	0x200002ac
    bc8c:	20001ab0 	.word	0x20001ab0

0000bc90 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    bc90:	b570      	push	{r4, r5, r6, lr}
    bc92:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    bc94:	4b29      	ldr	r3, [pc, #164]	; (bd3c <MiMem_Alloc+0xac>)
    bc96:	681b      	ldr	r3, [r3, #0]
    bc98:	2b00      	cmp	r3, #0
    bc9a:	d012      	beq.n	bcc2 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    bc9c:	2d00      	cmp	r5, #0
    bc9e:	d047      	beq.n	bd30 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    bca0:	0029      	movs	r1, r5
    bca2:	310f      	adds	r1, #15
    bca4:	2303      	movs	r3, #3
    bca6:	4399      	bics	r1, r3
    bca8:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    bcaa:	4b25      	ldr	r3, [pc, #148]	; (bd40 <MiMem_Alloc+0xb0>)
    bcac:	6818      	ldr	r0, [r3, #0]
    bcae:	4281      	cmp	r1, r0
    bcb0:	d840      	bhi.n	bd34 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    bcb2:	4b22      	ldr	r3, [pc, #136]	; (bd3c <MiMem_Alloc+0xac>)
    bcb4:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	d03e      	beq.n	bd38 <MiMem_Alloc+0xa8>
    bcba:	2600      	movs	r6, #0
    bcbc:	2401      	movs	r4, #1
    bcbe:	4264      	negs	r4, r4
    bcc0:	e005      	b.n	bcce <MiMem_Alloc+0x3e>
		MiMem_Init();
    bcc2:	4b20      	ldr	r3, [pc, #128]	; (bd44 <MiMem_Alloc+0xb4>)
    bcc4:	4798      	blx	r3
    bcc6:	e7e9      	b.n	bc9c <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    bcc8:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    bcca:	2b00      	cmp	r3, #0
    bccc:	d00a      	beq.n	bce4 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    bcce:	7b1a      	ldrb	r2, [r3, #12]
    bcd0:	2a00      	cmp	r2, #0
    bcd2:	d0f9      	beq.n	bcc8 <MiMem_Alloc+0x38>
    bcd4:	689a      	ldr	r2, [r3, #8]
    bcd6:	4291      	cmp	r1, r2
    bcd8:	d8f6      	bhi.n	bcc8 <MiMem_Alloc+0x38>
    bcda:	42a2      	cmp	r2, r4
    bcdc:	d2f4      	bcs.n	bcc8 <MiMem_Alloc+0x38>
    bcde:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    bce0:	0014      	movs	r4, r2
    bce2:	e7f1      	b.n	bcc8 <MiMem_Alloc+0x38>
    bce4:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    bce6:	2e00      	cmp	r6, #0
    bce8:	d012      	beq.n	bd10 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    bcea:	68b3      	ldr	r3, [r6, #8]
    bcec:	1a5b      	subs	r3, r3, r1
    bcee:	2b14      	cmp	r3, #20
    bcf0:	d810      	bhi.n	bd14 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    bcf2:	2300      	movs	r3, #0
    bcf4:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    bcf6:	68b3      	ldr	r3, [r6, #8]
    bcf8:	1ac0      	subs	r0, r0, r3
    bcfa:	4b11      	ldr	r3, [pc, #68]	; (bd40 <MiMem_Alloc+0xb0>)
    bcfc:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    bcfe:	0034      	movs	r4, r6
    bd00:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    bd02:	2c00      	cmp	r4, #0
    bd04:	d004      	beq.n	bd10 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    bd06:	002a      	movs	r2, r5
    bd08:	2100      	movs	r1, #0
    bd0a:	0020      	movs	r0, r4
    bd0c:	4b0e      	ldr	r3, [pc, #56]	; (bd48 <MiMem_Alloc+0xb8>)
    bd0e:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    bd10:	0020      	movs	r0, r4
    bd12:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    bd14:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    bd16:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    bd18:	6833      	ldr	r3, [r6, #0]
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d000      	beq.n	bd20 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    bd1e:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    bd20:	6833      	ldr	r3, [r6, #0]
    bd22:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    bd24:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    bd26:	2301      	movs	r3, #1
    bd28:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    bd2a:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    bd2c:	60b1      	str	r1, [r6, #8]
    bd2e:	e7e0      	b.n	bcf2 <MiMem_Alloc+0x62>
    bd30:	2400      	movs	r4, #0
    bd32:	e7ed      	b.n	bd10 <MiMem_Alloc+0x80>
    bd34:	2400      	movs	r4, #0
    bd36:	e7eb      	b.n	bd10 <MiMem_Alloc+0x80>
			while (blockPtr)
    bd38:	2400      	movs	r4, #0
    bd3a:	e7e9      	b.n	bd10 <MiMem_Alloc+0x80>
    bd3c:	200002ac 	.word	0x200002ac
    bd40:	20001ab0 	.word	0x20001ab0
    bd44:	0000bc55 	.word	0x0000bc55
    bd48:	0001679d 	.word	0x0001679d

0000bd4c <MiMem_Free>:
	Block_t* blockPtr = base;
    bd4c:	4b1c      	ldr	r3, [pc, #112]	; (bdc0 <MiMem_Free+0x74>)
    bd4e:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    bd50:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    bd52:	2b00      	cmp	r3, #0
    bd54:	d030      	beq.n	bdb8 <MiMem_Free+0x6c>
    bd56:	4283      	cmp	r3, r0
    bd58:	d02f      	beq.n	bdba <MiMem_Free+0x6e>
    bd5a:	681b      	ldr	r3, [r3, #0]
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d02b      	beq.n	bdb8 <MiMem_Free+0x6c>
    bd60:	4298      	cmp	r0, r3
    bd62:	d1fa      	bne.n	bd5a <MiMem_Free+0xe>
		blockPtr->free = true;
    bd64:	2301      	movs	r3, #1
    bd66:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    bd68:	6881      	ldr	r1, [r0, #8]
    bd6a:	4a16      	ldr	r2, [pc, #88]	; (bdc4 <MiMem_Free+0x78>)
    bd6c:	6813      	ldr	r3, [r2, #0]
    bd6e:	185b      	adds	r3, r3, r1
    bd70:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    bd72:	6843      	ldr	r3, [r0, #4]
    bd74:	2b00      	cmp	r3, #0
    bd76:	d00f      	beq.n	bd98 <MiMem_Free+0x4c>
    bd78:	7b1a      	ldrb	r2, [r3, #12]
    bd7a:	2a00      	cmp	r2, #0
    bd7c:	d00c      	beq.n	bd98 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    bd7e:	689a      	ldr	r2, [r3, #8]
    bd80:	4694      	mov	ip, r2
    bd82:	4461      	add	r1, ip
    bd84:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    bd86:	6803      	ldr	r3, [r0, #0]
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d001      	beq.n	bd90 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    bd8c:	6842      	ldr	r2, [r0, #4]
    bd8e:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    bd90:	6843      	ldr	r3, [r0, #4]
    bd92:	6802      	ldr	r2, [r0, #0]
    bd94:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    bd96:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    bd98:	6803      	ldr	r3, [r0, #0]
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	d00c      	beq.n	bdb8 <MiMem_Free+0x6c>
    bd9e:	7b1a      	ldrb	r2, [r3, #12]
    bda0:	2a00      	cmp	r2, #0
    bda2:	d009      	beq.n	bdb8 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    bda4:	6882      	ldr	r2, [r0, #8]
    bda6:	6899      	ldr	r1, [r3, #8]
    bda8:	468c      	mov	ip, r1
    bdaa:	4462      	add	r2, ip
    bdac:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    bdae:	681b      	ldr	r3, [r3, #0]
    bdb0:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d000      	beq.n	bdb8 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    bdb6:	6058      	str	r0, [r3, #4]
}
    bdb8:	4770      	bx	lr
	Block_t* blockPtr = base;
    bdba:	0018      	movs	r0, r3
    bdbc:	e7d2      	b.n	bd64 <MiMem_Free+0x18>
    bdbe:	46c0      	nop			; (mov r8, r8)
    bdc0:	200002ac 	.word	0x200002ac
    bdc4:	20001ab0 	.word	0x20001ab0

0000bdc8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    bdc8:	b530      	push	{r4, r5, lr}
	if (timers) {
    bdca:	4b14      	ldr	r3, [pc, #80]	; (be1c <placeTimer+0x54>)
    bdcc:	681d      	ldr	r5, [r3, #0]
    bdce:	2d00      	cmp	r5, #0
    bdd0:	d01c      	beq.n	be0c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    bdd2:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    bdd4:	6869      	ldr	r1, [r5, #4]
    bdd6:	428a      	cmp	r2, r1
    bdd8:	d309      	bcc.n	bdee <placeTimer+0x26>
    bdda:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    bddc:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    bdde:	6823      	ldr	r3, [r4, #0]
    bde0:	2b00      	cmp	r3, #0
    bde2:	d008      	beq.n	bdf6 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    bde4:	6859      	ldr	r1, [r3, #4]
    bde6:	4291      	cmp	r1, r2
    bde8:	d803      	bhi.n	bdf2 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    bdea:	001c      	movs	r4, r3
    bdec:	e7f6      	b.n	bddc <placeTimer+0x14>
    bdee:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    bdf0:	2400      	movs	r4, #0
				t->timeout -= timeout;
    bdf2:	1a89      	subs	r1, r1, r2
    bdf4:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    bdf6:	6042      	str	r2, [r0, #4]

		if (prev) {
    bdf8:	2c00      	cmp	r4, #0
    bdfa:	d003      	beq.n	be04 <placeTimer+0x3c>
			timer->next = prev->next;
    bdfc:	6823      	ldr	r3, [r4, #0]
    bdfe:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    be00:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    be02:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    be04:	6005      	str	r5, [r0, #0]
			timers = timer;
    be06:	4b05      	ldr	r3, [pc, #20]	; (be1c <placeTimer+0x54>)
    be08:	6018      	str	r0, [r3, #0]
    be0a:	e7fa      	b.n	be02 <placeTimer+0x3a>
		timer->next = NULL;
    be0c:	2300      	movs	r3, #0
    be0e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    be10:	6883      	ldr	r3, [r0, #8]
    be12:	6043      	str	r3, [r0, #4]
		timers = timer;
    be14:	4b01      	ldr	r3, [pc, #4]	; (be1c <placeTimer+0x54>)
    be16:	6018      	str	r0, [r3, #0]
}
    be18:	e7f3      	b.n	be02 <placeTimer+0x3a>
    be1a:	46c0      	nop			; (mov r8, r8)
    be1c:	20001ab4 	.word	0x20001ab4

0000be20 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    be20:	4a06      	ldr	r2, [pc, #24]	; (be3c <SYS_HwOverflow_Cb+0x1c>)
    be22:	7813      	ldrb	r3, [r2, #0]
    be24:	3301      	adds	r3, #1
    be26:	b2db      	uxtb	r3, r3
    be28:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    be2a:	7813      	ldrb	r3, [r2, #0]
    be2c:	2b00      	cmp	r3, #0
    be2e:	d104      	bne.n	be3a <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
<<<<<<< Updated upstream
    bebc:	4a03      	ldr	r2, [pc, #12]	; (becc <SYS_HwOverflow_Cb+0x20>)
=======
    bc3e:	4b25      	ldr	r3, [pc, #148]	; (bcd4 <P2PTasks+0x7dc>)
    bc40:	681b      	ldr	r3, [r3, #0]
    bc42:	4825      	ldr	r0, [pc, #148]	; (bcd8 <P2PTasks+0x7e0>)
    bc44:	4798      	blx	r3
    bc46:	7823      	ldrb	r3, [r4, #0]
    bc48:	2208      	movs	r2, #8
    bc4a:	4393      	bics	r3, r2
    bc4c:	7023      	strb	r3, [r4, #0]
    bc4e:	4b23      	ldr	r3, [pc, #140]	; (bcdc <P2PTasks+0x7e4>)
    bc50:	4798      	blx	r3
    bc52:	4b21      	ldr	r3, [pc, #132]	; (bcd8 <P2PTasks+0x7e0>)
    bc54:	7b1b      	ldrb	r3, [r3, #12]
    bc56:	2b00      	cmp	r3, #0
    bc58:	d007      	beq.n	bc6a <P2PTasks+0x772>
    bc5a:	4b1d      	ldr	r3, [pc, #116]	; (bcd0 <P2PTasks+0x7d8>)
    bc5c:	781b      	ldrb	r3, [r3, #0]
    bc5e:	06db      	lsls	r3, r3, #27
    bc60:	d403      	bmi.n	bc6a <P2PTasks+0x772>
    bc62:	4b1b      	ldr	r3, [pc, #108]	; (bcd0 <P2PTasks+0x7d8>)
    bc64:	781b      	ldrb	r3, [r3, #0]
    bc66:	069b      	lsls	r3, r3, #26
    bc68:	d506      	bpl.n	bc78 <P2PTasks+0x780>
    bc6a:	4a19      	ldr	r2, [pc, #100]	; (bcd0 <P2PTasks+0x7d8>)
    bc6c:	7813      	ldrb	r3, [r2, #0]
    bc6e:	2108      	movs	r1, #8
    bc70:	438b      	bics	r3, r1
    bc72:	7013      	strb	r3, [r2, #0]
    bc74:	4b19      	ldr	r3, [pc, #100]	; (bcdc <P2PTasks+0x7e4>)
    bc76:	4798      	blx	r3
    bc78:	4b19      	ldr	r3, [pc, #100]	; (bce0 <P2PTasks+0x7e8>)
    bc7a:	4798      	blx	r3
    bc7c:	b00b      	add	sp, #44	; 0x2c
    bc7e:	bc3c      	pop	{r2, r3, r4, r5}
    bc80:	4690      	mov	r8, r2
    bc82:	4699      	mov	r9, r3
    bc84:	46a2      	mov	sl, r4
    bc86:	46ab      	mov	fp, r5
    bc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc8a:	4b16      	ldr	r3, [pc, #88]	; (bce4 <P2PTasks+0x7ec>)
    bc8c:	781b      	ldrb	r3, [r3, #0]
    bc8e:	2b01      	cmp	r3, #1
    bc90:	d100      	bne.n	bc94 <P2PTasks+0x79c>
    bc92:	e5af      	b.n	b7f4 <P2PTasks+0x2fc>
    bc94:	25f2      	movs	r5, #242	; 0xf2
    bc96:	e569      	b.n	b76c <P2PTasks+0x274>
    bc98:	4b10      	ldr	r3, [pc, #64]	; (bcdc <P2PTasks+0x7e4>)
    bc9a:	4798      	blx	r3
    bc9c:	2301      	movs	r3, #1
    bc9e:	1c5c      	adds	r4, r3, #1
    bca0:	22f0      	movs	r2, #240	; 0xf0
    bca2:	4641      	mov	r1, r8
    bca4:	54ca      	strb	r2, [r1, r3]
    bca6:	4b0c      	ldr	r3, [pc, #48]	; (bcd8 <P2PTasks+0x7e0>)
    bca8:	685a      	ldr	r2, [r3, #4]
    bcaa:	8859      	ldrh	r1, [r3, #2]
    bcac:	480e      	ldr	r0, [pc, #56]	; (bce8 <P2PTasks+0x7f0>)
    bcae:	9005      	str	r0, [sp, #20]
    bcb0:	2001      	movs	r0, #1
    bcb2:	9004      	str	r0, [sp, #16]
    bcb4:	2000      	movs	r0, #0
    bcb6:	9003      	str	r0, [sp, #12]
    bcb8:	4640      	mov	r0, r8
    bcba:	9002      	str	r0, [sp, #8]
    bcbc:	9401      	str	r4, [sp, #4]
    bcbe:	781b      	ldrb	r3, [r3, #0]
    bcc0:	071b      	lsls	r3, r3, #28
    bcc2:	0fdb      	lsrs	r3, r3, #31
    bcc4:	9300      	str	r3, [sp, #0]
    bcc6:	2301      	movs	r3, #1
    bcc8:	2000      	movs	r0, #0
    bcca:	4c08      	ldr	r4, [pc, #32]	; (bcec <P2PTasks+0x7f4>)
    bccc:	47a0      	blx	r4
    bcce:	e7c0      	b.n	bc52 <P2PTasks+0x75a>
    bcd0:	200026e0 	.word	0x200026e0
    bcd4:	200002a8 	.word	0x200002a8
    bcd8:	20002950 	.word	0x20002950
    bcdc:	00009e99 	.word	0x00009e99
    bce0:	0000950d 	.word	0x0000950d
    bce4:	20000018 	.word	0x20000018
    bce8:	0000aacd 	.word	0x0000aacd
    bcec:	0000ac39 	.word	0x0000ac39

0000bcf0 <MiMem_Init>:
    bcf0:	b510      	push	{r4, lr}
    bcf2:	4a0b      	ldr	r2, [pc, #44]	; (bd20 <MiMem_Init+0x30>)
    bcf4:	1e50      	subs	r0, r2, #1
    bcf6:	2403      	movs	r4, #3
    bcf8:	43a0      	bics	r0, r4
    bcfa:	1d01      	adds	r1, r0, #4
    bcfc:	4b09      	ldr	r3, [pc, #36]	; (bd24 <MiMem_Init+0x34>)
    bcfe:	6019      	str	r1, [r3, #0]
    bd00:	4253      	negs	r3, r2
    bd02:	43a3      	bics	r3, r4
    bd04:	24c0      	movs	r4, #192	; 0xc0
    bd06:	0164      	lsls	r4, r4, #5
    bd08:	46a4      	mov	ip, r4
    bd0a:	4462      	add	r2, ip
    bd0c:	189b      	adds	r3, r3, r2
    bd0e:	4a06      	ldr	r2, [pc, #24]	; (bd28 <MiMem_Init+0x38>)
    bd10:	6013      	str	r3, [r2, #0]
    bd12:	60c3      	str	r3, [r0, #12]
    bd14:	2301      	movs	r3, #1
    bd16:	7403      	strb	r3, [r0, #16]
    bd18:	2300      	movs	r3, #0
    bd1a:	6043      	str	r3, [r0, #4]
    bd1c:	6083      	str	r3, [r0, #8]
    bd1e:	bd10      	pop	{r4, pc}
    bd20:	200002b0 	.word	0x200002b0
    bd24:	200002ac 	.word	0x200002ac
    bd28:	20001ab0 	.word	0x20001ab0

0000bd2c <MiMem_Alloc>:
    bd2c:	b570      	push	{r4, r5, r6, lr}
    bd2e:	0005      	movs	r5, r0
    bd30:	4b29      	ldr	r3, [pc, #164]	; (bdd8 <MiMem_Alloc+0xac>)
    bd32:	681b      	ldr	r3, [r3, #0]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d012      	beq.n	bd5e <MiMem_Alloc+0x32>
    bd38:	2d00      	cmp	r5, #0
    bd3a:	d047      	beq.n	bdcc <MiMem_Alloc+0xa0>
    bd3c:	0029      	movs	r1, r5
    bd3e:	310f      	adds	r1, #15
    bd40:	2303      	movs	r3, #3
    bd42:	4399      	bics	r1, r3
    bd44:	3104      	adds	r1, #4
    bd46:	4b25      	ldr	r3, [pc, #148]	; (bddc <MiMem_Alloc+0xb0>)
    bd48:	6818      	ldr	r0, [r3, #0]
    bd4a:	4281      	cmp	r1, r0
    bd4c:	d840      	bhi.n	bdd0 <MiMem_Alloc+0xa4>
    bd4e:	4b22      	ldr	r3, [pc, #136]	; (bdd8 <MiMem_Alloc+0xac>)
    bd50:	681b      	ldr	r3, [r3, #0]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d03e      	beq.n	bdd4 <MiMem_Alloc+0xa8>
    bd56:	2600      	movs	r6, #0
    bd58:	2401      	movs	r4, #1
    bd5a:	4264      	negs	r4, r4
    bd5c:	e005      	b.n	bd6a <MiMem_Alloc+0x3e>
    bd5e:	4b20      	ldr	r3, [pc, #128]	; (bde0 <MiMem_Alloc+0xb4>)
    bd60:	4798      	blx	r3
    bd62:	e7e9      	b.n	bd38 <MiMem_Alloc+0xc>
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d00a      	beq.n	bd80 <MiMem_Alloc+0x54>
    bd6a:	7b1a      	ldrb	r2, [r3, #12]
    bd6c:	2a00      	cmp	r2, #0
    bd6e:	d0f9      	beq.n	bd64 <MiMem_Alloc+0x38>
    bd70:	689a      	ldr	r2, [r3, #8]
    bd72:	4291      	cmp	r1, r2
    bd74:	d8f6      	bhi.n	bd64 <MiMem_Alloc+0x38>
    bd76:	42a2      	cmp	r2, r4
    bd78:	d2f4      	bcs.n	bd64 <MiMem_Alloc+0x38>
    bd7a:	001e      	movs	r6, r3
    bd7c:	0014      	movs	r4, r2
    bd7e:	e7f1      	b.n	bd64 <MiMem_Alloc+0x38>
    bd80:	2400      	movs	r4, #0
    bd82:	2e00      	cmp	r6, #0
    bd84:	d012      	beq.n	bdac <MiMem_Alloc+0x80>
    bd86:	68b3      	ldr	r3, [r6, #8]
    bd88:	1a5b      	subs	r3, r3, r1
    bd8a:	2b14      	cmp	r3, #20
    bd8c:	d810      	bhi.n	bdb0 <MiMem_Alloc+0x84>
    bd8e:	2300      	movs	r3, #0
    bd90:	7333      	strb	r3, [r6, #12]
    bd92:	68b3      	ldr	r3, [r6, #8]
    bd94:	1ac0      	subs	r0, r0, r3
    bd96:	4b11      	ldr	r3, [pc, #68]	; (bddc <MiMem_Alloc+0xb0>)
    bd98:	6018      	str	r0, [r3, #0]
    bd9a:	0034      	movs	r4, r6
    bd9c:	3410      	adds	r4, #16
    bd9e:	2c00      	cmp	r4, #0
    bda0:	d004      	beq.n	bdac <MiMem_Alloc+0x80>
    bda2:	002a      	movs	r2, r5
    bda4:	2100      	movs	r1, #0
    bda6:	0020      	movs	r0, r4
    bda8:	4b0e      	ldr	r3, [pc, #56]	; (bde4 <MiMem_Alloc+0xb8>)
    bdaa:	4798      	blx	r3
    bdac:	0020      	movs	r0, r4
    bdae:	bd70      	pop	{r4, r5, r6, pc}
    bdb0:	1872      	adds	r2, r6, r1
    bdb2:	6093      	str	r3, [r2, #8]
    bdb4:	6833      	ldr	r3, [r6, #0]
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d000      	beq.n	bdbc <MiMem_Alloc+0x90>
    bdba:	605a      	str	r2, [r3, #4]
    bdbc:	6833      	ldr	r3, [r6, #0]
    bdbe:	6013      	str	r3, [r2, #0]
    bdc0:	6056      	str	r6, [r2, #4]
    bdc2:	2301      	movs	r3, #1
    bdc4:	7313      	strb	r3, [r2, #12]
    bdc6:	6032      	str	r2, [r6, #0]
    bdc8:	60b1      	str	r1, [r6, #8]
    bdca:	e7e0      	b.n	bd8e <MiMem_Alloc+0x62>
    bdcc:	2400      	movs	r4, #0
    bdce:	e7ed      	b.n	bdac <MiMem_Alloc+0x80>
    bdd0:	2400      	movs	r4, #0
    bdd2:	e7eb      	b.n	bdac <MiMem_Alloc+0x80>
    bdd4:	2400      	movs	r4, #0
    bdd6:	e7e9      	b.n	bdac <MiMem_Alloc+0x80>
    bdd8:	200002ac 	.word	0x200002ac
    bddc:	20001ab0 	.word	0x20001ab0
    bde0:	0000bcf1 	.word	0x0000bcf1
    bde4:	00016849 	.word	0x00016849

0000bde8 <MiMem_Free>:
    bde8:	4b1c      	ldr	r3, [pc, #112]	; (be5c <MiMem_Free+0x74>)
    bdea:	681b      	ldr	r3, [r3, #0]
    bdec:	3810      	subs	r0, #16
    bdee:	2b00      	cmp	r3, #0
    bdf0:	d030      	beq.n	be54 <MiMem_Free+0x6c>
    bdf2:	4283      	cmp	r3, r0
    bdf4:	d02f      	beq.n	be56 <MiMem_Free+0x6e>
    bdf6:	681b      	ldr	r3, [r3, #0]
    bdf8:	2b00      	cmp	r3, #0
    bdfa:	d02b      	beq.n	be54 <MiMem_Free+0x6c>
    bdfc:	4298      	cmp	r0, r3
    bdfe:	d1fa      	bne.n	bdf6 <MiMem_Free+0xe>
    be00:	2301      	movs	r3, #1
    be02:	7303      	strb	r3, [r0, #12]
    be04:	6881      	ldr	r1, [r0, #8]
    be06:	4a16      	ldr	r2, [pc, #88]	; (be60 <MiMem_Free+0x78>)
    be08:	6813      	ldr	r3, [r2, #0]
    be0a:	185b      	adds	r3, r3, r1
    be0c:	6013      	str	r3, [r2, #0]
    be0e:	6843      	ldr	r3, [r0, #4]
    be10:	2b00      	cmp	r3, #0
    be12:	d00f      	beq.n	be34 <MiMem_Free+0x4c>
    be14:	7b1a      	ldrb	r2, [r3, #12]
    be16:	2a00      	cmp	r2, #0
    be18:	d00c      	beq.n	be34 <MiMem_Free+0x4c>
    be1a:	689a      	ldr	r2, [r3, #8]
    be1c:	4694      	mov	ip, r2
    be1e:	4461      	add	r1, ip
    be20:	6099      	str	r1, [r3, #8]
    be22:	6803      	ldr	r3, [r0, #0]
    be24:	2b00      	cmp	r3, #0
    be26:	d001      	beq.n	be2c <MiMem_Free+0x44>
    be28:	6842      	ldr	r2, [r0, #4]
    be2a:	605a      	str	r2, [r3, #4]
    be2c:	6843      	ldr	r3, [r0, #4]
    be2e:	6802      	ldr	r2, [r0, #0]
    be30:	601a      	str	r2, [r3, #0]
    be32:	6840      	ldr	r0, [r0, #4]
    be34:	6803      	ldr	r3, [r0, #0]
    be36:	2b00      	cmp	r3, #0
    be38:	d00c      	beq.n	be54 <MiMem_Free+0x6c>
    be3a:	7b1a      	ldrb	r2, [r3, #12]
    be3c:	2a00      	cmp	r2, #0
    be3e:	d009      	beq.n	be54 <MiMem_Free+0x6c>
    be40:	6882      	ldr	r2, [r0, #8]
    be42:	6899      	ldr	r1, [r3, #8]
    be44:	468c      	mov	ip, r1
    be46:	4462      	add	r2, ip
    be48:	6082      	str	r2, [r0, #8]
    be4a:	681b      	ldr	r3, [r3, #0]
    be4c:	6003      	str	r3, [r0, #0]
    be4e:	2b00      	cmp	r3, #0
    be50:	d000      	beq.n	be54 <MiMem_Free+0x6c>
    be52:	6058      	str	r0, [r3, #4]
    be54:	4770      	bx	lr
    be56:	0018      	movs	r0, r3
    be58:	e7d2      	b.n	be00 <MiMem_Free+0x18>
    be5a:	46c0      	nop			; (mov r8, r8)
    be5c:	200002ac 	.word	0x200002ac
    be60:	20001ab0 	.word	0x20001ab0

0000be64 <placeTimer>:
    be64:	b530      	push	{r4, r5, lr}
    be66:	4b14      	ldr	r3, [pc, #80]	; (beb8 <placeTimer+0x54>)
    be68:	681d      	ldr	r5, [r3, #0]
    be6a:	2d00      	cmp	r5, #0
    be6c:	d01c      	beq.n	bea8 <placeTimer+0x44>
    be6e:	6882      	ldr	r2, [r0, #8]
    be70:	6869      	ldr	r1, [r5, #4]
    be72:	428a      	cmp	r2, r1
    be74:	d309      	bcc.n	be8a <placeTimer+0x26>
    be76:	002c      	movs	r4, r5
    be78:	1a52      	subs	r2, r2, r1
    be7a:	6823      	ldr	r3, [r4, #0]
    be7c:	2b00      	cmp	r3, #0
    be7e:	d008      	beq.n	be92 <placeTimer+0x2e>
    be80:	6859      	ldr	r1, [r3, #4]
    be82:	4291      	cmp	r1, r2
    be84:	d803      	bhi.n	be8e <placeTimer+0x2a>
    be86:	001c      	movs	r4, r3
    be88:	e7f6      	b.n	be78 <placeTimer+0x14>
    be8a:	002b      	movs	r3, r5
    be8c:	2400      	movs	r4, #0
    be8e:	1a89      	subs	r1, r1, r2
    be90:	6059      	str	r1, [r3, #4]
    be92:	6042      	str	r2, [r0, #4]
    be94:	2c00      	cmp	r4, #0
    be96:	d003      	beq.n	bea0 <placeTimer+0x3c>
    be98:	6823      	ldr	r3, [r4, #0]
    be9a:	6003      	str	r3, [r0, #0]
    be9c:	6020      	str	r0, [r4, #0]
    be9e:	bd30      	pop	{r4, r5, pc}
    bea0:	6005      	str	r5, [r0, #0]
    bea2:	4b05      	ldr	r3, [pc, #20]	; (beb8 <placeTimer+0x54>)
    bea4:	6018      	str	r0, [r3, #0]
    bea6:	e7fa      	b.n	be9e <placeTimer+0x3a>
    bea8:	2300      	movs	r3, #0
    beaa:	6003      	str	r3, [r0, #0]
    beac:	6883      	ldr	r3, [r0, #8]
    beae:	6043      	str	r3, [r0, #4]
    beb0:	4b01      	ldr	r3, [pc, #4]	; (beb8 <placeTimer+0x54>)
    beb2:	6018      	str	r0, [r3, #0]
    beb4:	e7f3      	b.n	be9e <placeTimer+0x3a>
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	20001ab4 	.word	0x20001ab4

0000bebc <SYS_HwOverflow_Cb>:
    bebc:	4a06      	ldr	r2, [pc, #24]	; (bed8 <SYS_HwOverflow_Cb+0x1c>)
>>>>>>> Stashed changes
    bebe:	7813      	ldrb	r3, [r2, #0]
    bec0:	3301      	adds	r3, #1
    bec2:	b2db      	uxtb	r3, r3
    bec4:	7013      	strb	r3, [r2, #0]
<<<<<<< Updated upstream
=======
    be30:	4a03      	ldr	r2, [pc, #12]	; (be40 <SYS_HwOverflow_Cb+0x20>)
    be32:	7813      	ldrb	r3, [r2, #0]
    be34:	3301      	adds	r3, #1
    be36:	b2db      	uxtb	r3, r3
    be38:	7013      	strb	r3, [r2, #0]
>>>>>>> Stashed changes
	}
}
    be3a:	4770      	bx	lr
    be3c:	2000296c 	.word	0x2000296c
    be40:	2000296d 	.word	0x2000296d

0000be44 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    be44:	4b0e      	ldr	r3, [pc, #56]	; (be80 <SYS_TimerStop+0x3c>)
    be46:	681a      	ldr	r2, [r3, #0]
    be48:	2a00      	cmp	r2, #0
    be4a:	d014      	beq.n	be76 <SYS_TimerStop+0x32>
		if (t == timer) {
    be4c:	4282      	cmp	r2, r0
    be4e:	d013      	beq.n	be78 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    be50:	6813      	ldr	r3, [r2, #0]
    be52:	2b00      	cmp	r3, #0
    be54:	d00f      	beq.n	be76 <SYS_TimerStop+0x32>
		if (t == timer) {
    be56:	4298      	cmp	r0, r3
    be58:	d001      	beq.n	be5e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    be5a:	001a      	movs	r2, r3
    be5c:	e7f8      	b.n	be50 <SYS_TimerStop+0xc>
			if (prev) {
    be5e:	2a00      	cmp	r2, #0
    be60:	d00a      	beq.n	be78 <SYS_TimerStop+0x34>
				prev->next = t->next;
    be62:	6803      	ldr	r3, [r0, #0]
    be64:	6013      	str	r3, [r2, #0]
			if (t->next) {
    be66:	6803      	ldr	r3, [r0, #0]
    be68:	2b00      	cmp	r3, #0
    be6a:	d004      	beq.n	be76 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    be6c:	6842      	ldr	r2, [r0, #4]
    be6e:	6859      	ldr	r1, [r3, #4]
    be70:	468c      	mov	ip, r1
    be72:	4462      	add	r2, ip
    be74:	605a      	str	r2, [r3, #4]
}
    be76:	4770      	bx	lr
				timers = t->next;
    be78:	4b01      	ldr	r3, [pc, #4]	; (be80 <SYS_TimerStop+0x3c>)
    be7a:	6802      	ldr	r2, [r0, #0]
    be7c:	601a      	str	r2, [r3, #0]
    be7e:	e7f2      	b.n	be66 <SYS_TimerStop+0x22>
    be80:	20001ab4 	.word	0x20001ab4

0000be84 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    be84:	4b09      	ldr	r3, [pc, #36]	; (beac <SYS_TimerStarted+0x28>)
    be86:	681b      	ldr	r3, [r3, #0]
    be88:	2b00      	cmp	r3, #0
    be8a:	d00a      	beq.n	bea2 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    be8c:	4283      	cmp	r3, r0
    be8e:	d00a      	beq.n	bea6 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    be90:	681b      	ldr	r3, [r3, #0]
    be92:	2b00      	cmp	r3, #0
    be94:	d003      	beq.n	be9e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    be96:	4298      	cmp	r0, r3
    be98:	d1fa      	bne.n	be90 <SYS_TimerStarted+0xc>
			return true;
    be9a:	2001      	movs	r0, #1
    be9c:	e000      	b.n	bea0 <SYS_TimerStarted+0x1c>
	return false;
    be9e:	2000      	movs	r0, #0
}
    bea0:	4770      	bx	lr
	return false;
    bea2:	2000      	movs	r0, #0
    bea4:	e7fc      	b.n	bea0 <SYS_TimerStarted+0x1c>
			return true;
    bea6:	2001      	movs	r0, #1
    bea8:	e7fa      	b.n	bea0 <SYS_TimerStarted+0x1c>
    beaa:	46c0      	nop			; (mov r8, r8)
    beac:	20001ab4 	.word	0x20001ab4

0000beb0 <SYS_TimerStart>:
{
    beb0:	b510      	push	{r4, lr}
    beb2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    beb4:	4b04      	ldr	r3, [pc, #16]	; (bec8 <SYS_TimerStart+0x18>)
    beb6:	4798      	blx	r3
    beb8:	2800      	cmp	r0, #0
    beba:	d000      	beq.n	bebe <SYS_TimerStart+0xe>
}
    bebc:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    bebe:	0020      	movs	r0, r4
    bec0:	4b02      	ldr	r3, [pc, #8]	; (becc <SYS_TimerStart+0x1c>)
    bec2:	4798      	blx	r3
}
    bec4:	e7fa      	b.n	bebc <SYS_TimerStart+0xc>
    bec6:	46c0      	nop			; (mov r8, r8)
    bec8:	0000be85 	.word	0x0000be85
    becc:	0000bdc9 	.word	0x0000bdc9

0000bed0 <MiWi_TickGet>:
{
    bed0:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    bed2:	4e11      	ldr	r6, [pc, #68]	; (bf18 <MiWi_TickGet+0x48>)
    bed4:	7835      	ldrb	r5, [r6, #0]
    bed6:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    bed8:	4b10      	ldr	r3, [pc, #64]	; (bf1c <MiWi_TickGet+0x4c>)
    beda:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    bedc:	4b10      	ldr	r3, [pc, #64]	; (bf20 <MiWi_TickGet+0x50>)
    bede:	4798      	blx	r3
    bee0:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    bee2:	4b10      	ldr	r3, [pc, #64]	; (bf24 <MiWi_TickGet+0x54>)
    bee4:	4798      	blx	r3
  __ASM volatile ("nop");
    bee6:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    bee8:	7833      	ldrb	r3, [r6, #0]
    beea:	b2db      	uxtb	r3, r3
    beec:	429d      	cmp	r5, r3
    beee:	d004      	beq.n	befa <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    bef0:	4b0b      	ldr	r3, [pc, #44]	; (bf20 <MiWi_TickGet+0x50>)
    bef2:	4798      	blx	r3
    bef4:	0c24      	lsrs	r4, r4, #16
    bef6:	0424      	lsls	r4, r4, #16
    bef8:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    befa:	4b07      	ldr	r3, [pc, #28]	; (bf18 <MiWi_TickGet+0x48>)
    befc:	781b      	ldrb	r3, [r3, #0]
    befe:	041b      	lsls	r3, r3, #16
    bf00:	4809      	ldr	r0, [pc, #36]	; (bf28 <MiWi_TickGet+0x58>)
    bf02:	4004      	ands	r4, r0
    bf04:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    bf06:	4b09      	ldr	r3, [pc, #36]	; (bf2c <MiWi_TickGet+0x5c>)
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	061b      	lsls	r3, r3, #24
    bf0c:	0224      	lsls	r4, r4, #8
    bf0e:	0a24      	lsrs	r4, r4, #8
    bf10:	431c      	orrs	r4, r3
}
    bf12:	0020      	movs	r0, r4
    bf14:	bd70      	pop	{r4, r5, r6, pc}
    bf16:	46c0      	nop			; (mov r8, r8)
    bf18:	2000296c 	.word	0x2000296c
    bf1c:	0000d959 	.word	0x0000d959
    bf20:	00013371 	.word	0x00013371
    bf24:	0000d96d 	.word	0x0000d96d
    bf28:	ff00ffff 	.word	0xff00ffff
    bf2c:	2000296d 	.word	0x2000296d

0000bf30 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    bf30:	4288      	cmp	r0, r1
    bf32:	d802      	bhi.n	bf3a <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    bf34:	3801      	subs	r0, #1
    bf36:	1a40      	subs	r0, r0, r1
}
    bf38:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    bf3a:	1a40      	subs	r0, r0, r1
    bf3c:	e7fc      	b.n	bf38 <MiWi_TickGetDiff+0x8>
    bf3e:	Address 0x0000bf3e is out of bounds.


0000bf40 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    bf40:	b570      	push	{r4, r5, r6, lr}
    bf42:	b082      	sub	sp, #8
    bf44:	0005      	movs	r5, r0
    bf46:	000e      	movs	r6, r1
	uint16_t temp = 0;
    bf48:	2200      	movs	r2, #0
    bf4a:	466b      	mov	r3, sp
    bf4c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    bf4e:	4c06      	ldr	r4, [pc, #24]	; (bf68 <usart_serial_getchar+0x28>)
    bf50:	466b      	mov	r3, sp
    bf52:	1d99      	adds	r1, r3, #6
    bf54:	0028      	movs	r0, r5
    bf56:	47a0      	blx	r4
    bf58:	2800      	cmp	r0, #0
    bf5a:	d1f9      	bne.n	bf50 <usart_serial_getchar+0x10>

	*c = temp;
    bf5c:	466b      	mov	r3, sp
    bf5e:	3306      	adds	r3, #6
    bf60:	881b      	ldrh	r3, [r3, #0]
    bf62:	7033      	strb	r3, [r6, #0]
}
    bf64:	b002      	add	sp, #8
    bf66:	bd70      	pop	{r4, r5, r6, pc}
    bf68:	0000604d 	.word	0x0000604d

0000bf6c <usart_serial_putchar>:
{
    bf6c:	b570      	push	{r4, r5, r6, lr}
    bf6e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    bf70:	b28c      	uxth	r4, r1
    bf72:	4e03      	ldr	r6, [pc, #12]	; (bf80 <usart_serial_putchar+0x14>)
    bf74:	0021      	movs	r1, r4
    bf76:	0028      	movs	r0, r5
    bf78:	47b0      	blx	r6
    bf7a:	2800      	cmp	r0, #0
    bf7c:	d1fa      	bne.n	bf74 <usart_serial_putchar+0x8>
}
    bf7e:	bd70      	pop	{r4, r5, r6, pc}
    bf80:	00006021 	.word	0x00006021

0000bf84 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    bf84:	b510      	push	{r4, lr}
    bf86:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    bf88:	466b      	mov	r3, sp
    bf8a:	1ddc      	adds	r4, r3, #7
    bf8c:	2201      	movs	r2, #1
    bf8e:	0021      	movs	r1, r4
    bf90:	480f      	ldr	r0, [pc, #60]	; (bfd0 <USART_HOST_ISR_VECT+0x4c>)
    bf92:	4b10      	ldr	r3, [pc, #64]	; (bfd4 <USART_HOST_ISR_VECT+0x50>)
    bf94:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    bf96:	b672      	cpsid	i
  __ASM volatile ("dmb");
    bf98:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    bf9c:	2200      	movs	r2, #0
    bf9e:	4b0e      	ldr	r3, [pc, #56]	; (bfd8 <USART_HOST_ISR_VECT+0x54>)
    bfa0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    bfa2:	4b0e      	ldr	r3, [pc, #56]	; (bfdc <USART_HOST_ISR_VECT+0x58>)
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	7821      	ldrb	r1, [r4, #0]
    bfa8:	4a0d      	ldr	r2, [pc, #52]	; (bfe0 <USART_HOST_ISR_VECT+0x5c>)
    bfaa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    bfac:	2b7f      	cmp	r3, #127	; 0x7f
    bfae:	d00a      	beq.n	bfc6 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    bfb0:	3301      	adds	r3, #1
    bfb2:	4a0a      	ldr	r2, [pc, #40]	; (bfdc <USART_HOST_ISR_VECT+0x58>)
    bfb4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    bfb6:	2201      	movs	r2, #1
    bfb8:	4b07      	ldr	r3, [pc, #28]	; (bfd8 <USART_HOST_ISR_VECT+0x54>)
    bfba:	701a      	strb	r2, [r3, #0]
    bfbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bfc0:	b662      	cpsie	i
}
    bfc2:	b002      	add	sp, #8
    bfc4:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
<<<<<<< Updated upstream
    c052:	2200      	movs	r2, #0
    c054:	4b04      	ldr	r3, [pc, #16]	; (c068 <USART_HOST_ISR_VECT+0x58>)
=======
    bec6:	7813      	ldrb	r3, [r2, #0]
    bec8:	2b00      	cmp	r3, #0
    beca:	d104      	bne.n	bed6 <SYS_HwOverflow_Cb+0x1a>
    becc:	4a03      	ldr	r2, [pc, #12]	; (bedc <SYS_HwOverflow_Cb+0x20>)
    bece:	7813      	ldrb	r3, [r2, #0]
    bed0:	3301      	adds	r3, #1
    bed2:	b2db      	uxtb	r3, r3
    bed4:	7013      	strb	r3, [r2, #0]
    bed6:	4770      	bx	lr
    bed8:	2000296c 	.word	0x2000296c
    bedc:	2000296d 	.word	0x2000296d

0000bee0 <SYS_TimerStop>:
    bee0:	4b0e      	ldr	r3, [pc, #56]	; (bf1c <SYS_TimerStop+0x3c>)
    bee2:	681a      	ldr	r2, [r3, #0]
    bee4:	2a00      	cmp	r2, #0
    bee6:	d014      	beq.n	bf12 <SYS_TimerStop+0x32>
    bee8:	4282      	cmp	r2, r0
    beea:	d013      	beq.n	bf14 <SYS_TimerStop+0x34>
    beec:	6813      	ldr	r3, [r2, #0]
    beee:	2b00      	cmp	r3, #0
    bef0:	d00f      	beq.n	bf12 <SYS_TimerStop+0x32>
    bef2:	4298      	cmp	r0, r3
    bef4:	d001      	beq.n	befa <SYS_TimerStop+0x1a>
    bef6:	001a      	movs	r2, r3
    bef8:	e7f8      	b.n	beec <SYS_TimerStop+0xc>
    befa:	2a00      	cmp	r2, #0
    befc:	d00a      	beq.n	bf14 <SYS_TimerStop+0x34>
    befe:	6803      	ldr	r3, [r0, #0]
    bf00:	6013      	str	r3, [r2, #0]
    bf02:	6803      	ldr	r3, [r0, #0]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d004      	beq.n	bf12 <SYS_TimerStop+0x32>
    bf08:	6842      	ldr	r2, [r0, #4]
    bf0a:	6859      	ldr	r1, [r3, #4]
    bf0c:	468c      	mov	ip, r1
    bf0e:	4462      	add	r2, ip
    bf10:	605a      	str	r2, [r3, #4]
    bf12:	4770      	bx	lr
    bf14:	4b01      	ldr	r3, [pc, #4]	; (bf1c <SYS_TimerStop+0x3c>)
    bf16:	6802      	ldr	r2, [r0, #0]
    bf18:	601a      	str	r2, [r3, #0]
    bf1a:	e7f2      	b.n	bf02 <SYS_TimerStop+0x22>
    bf1c:	20001ab4 	.word	0x20001ab4

0000bf20 <SYS_TimerStarted>:
    bf20:	4b09      	ldr	r3, [pc, #36]	; (bf48 <SYS_TimerStarted+0x28>)
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	2b00      	cmp	r3, #0
    bf26:	d00a      	beq.n	bf3e <SYS_TimerStarted+0x1e>
    bf28:	4283      	cmp	r3, r0
    bf2a:	d00a      	beq.n	bf42 <SYS_TimerStarted+0x22>
    bf2c:	681b      	ldr	r3, [r3, #0]
    bf2e:	2b00      	cmp	r3, #0
    bf30:	d003      	beq.n	bf3a <SYS_TimerStarted+0x1a>
    bf32:	4298      	cmp	r0, r3
    bf34:	d1fa      	bne.n	bf2c <SYS_TimerStarted+0xc>
    bf36:	2001      	movs	r0, #1
    bf38:	e000      	b.n	bf3c <SYS_TimerStarted+0x1c>
    bf3a:	2000      	movs	r0, #0
    bf3c:	4770      	bx	lr
    bf3e:	2000      	movs	r0, #0
    bf40:	e7fc      	b.n	bf3c <SYS_TimerStarted+0x1c>
    bf42:	2001      	movs	r0, #1
    bf44:	e7fa      	b.n	bf3c <SYS_TimerStarted+0x1c>
    bf46:	46c0      	nop			; (mov r8, r8)
    bf48:	20001ab4 	.word	0x20001ab4

0000bf4c <SYS_TimerStart>:
    bf4c:	b510      	push	{r4, lr}
    bf4e:	0004      	movs	r4, r0
    bf50:	4b04      	ldr	r3, [pc, #16]	; (bf64 <SYS_TimerStart+0x18>)
    bf52:	4798      	blx	r3
    bf54:	2800      	cmp	r0, #0
    bf56:	d000      	beq.n	bf5a <SYS_TimerStart+0xe>
    bf58:	bd10      	pop	{r4, pc}
    bf5a:	0020      	movs	r0, r4
    bf5c:	4b02      	ldr	r3, [pc, #8]	; (bf68 <SYS_TimerStart+0x1c>)
    bf5e:	4798      	blx	r3
    bf60:	e7fa      	b.n	bf58 <SYS_TimerStart+0xc>
    bf62:	46c0      	nop			; (mov r8, r8)
    bf64:	0000bf21 	.word	0x0000bf21
    bf68:	0000be65 	.word	0x0000be65

0000bf6c <MiWi_TickGet>:
    bf6c:	b570      	push	{r4, r5, r6, lr}
    bf6e:	4e11      	ldr	r6, [pc, #68]	; (bfb4 <MiWi_TickGet+0x48>)
    bf70:	7835      	ldrb	r5, [r6, #0]
    bf72:	b2ed      	uxtb	r5, r5
    bf74:	4b10      	ldr	r3, [pc, #64]	; (bfb8 <MiWi_TickGet+0x4c>)
    bf76:	4798      	blx	r3
    bf78:	4b10      	ldr	r3, [pc, #64]	; (bfbc <MiWi_TickGet+0x50>)
    bf7a:	4798      	blx	r3
    bf7c:	0004      	movs	r4, r0
    bf7e:	4b10      	ldr	r3, [pc, #64]	; (bfc0 <MiWi_TickGet+0x54>)
    bf80:	4798      	blx	r3
    bf82:	46c0      	nop			; (mov r8, r8)
    bf84:	7833      	ldrb	r3, [r6, #0]
    bf86:	b2db      	uxtb	r3, r3
    bf88:	429d      	cmp	r5, r3
    bf8a:	d004      	beq.n	bf96 <MiWi_TickGet+0x2a>
    bf8c:	4b0b      	ldr	r3, [pc, #44]	; (bfbc <MiWi_TickGet+0x50>)
    bf8e:	4798      	blx	r3
    bf90:	0c24      	lsrs	r4, r4, #16
    bf92:	0424      	lsls	r4, r4, #16
    bf94:	4304      	orrs	r4, r0
    bf96:	4b07      	ldr	r3, [pc, #28]	; (bfb4 <MiWi_TickGet+0x48>)
    bf98:	781b      	ldrb	r3, [r3, #0]
    bf9a:	041b      	lsls	r3, r3, #16
    bf9c:	4809      	ldr	r0, [pc, #36]	; (bfc4 <MiWi_TickGet+0x58>)
    bf9e:	4004      	ands	r4, r0
    bfa0:	431c      	orrs	r4, r3
    bfa2:	4b09      	ldr	r3, [pc, #36]	; (bfc8 <MiWi_TickGet+0x5c>)
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	061b      	lsls	r3, r3, #24
    bfa8:	0224      	lsls	r4, r4, #8
    bfaa:	0a24      	lsrs	r4, r4, #8
    bfac:	431c      	orrs	r4, r3
    bfae:	0020      	movs	r0, r4
    bfb0:	bd70      	pop	{r4, r5, r6, pc}
    bfb2:	46c0      	nop			; (mov r8, r8)
    bfb4:	2000296c 	.word	0x2000296c
    bfb8:	0000d9f5 	.word	0x0000d9f5
    bfbc:	0001341d 	.word	0x0001341d
    bfc0:	0000da09 	.word	0x0000da09
    bfc4:	ff00ffff 	.word	0xff00ffff
    bfc8:	2000296d 	.word	0x2000296d

0000bfcc <MiWi_TickGetDiff>:
    bfcc:	4288      	cmp	r0, r1
    bfce:	d802      	bhi.n	bfd6 <MiWi_TickGetDiff+0xa>
    bfd0:	3801      	subs	r0, #1
    bfd2:	1a40      	subs	r0, r0, r1
    bfd4:	4770      	bx	lr
    bfd6:	1a40      	subs	r0, r0, r1
    bfd8:	e7fc      	b.n	bfd4 <MiWi_TickGetDiff+0x8>
    bfda:	Address 0x0000bfda is out of bounds.


0000bfdc <usart_serial_getchar>:
    bfdc:	b570      	push	{r4, r5, r6, lr}
    bfde:	b082      	sub	sp, #8
    bfe0:	0005      	movs	r5, r0
    bfe2:	000e      	movs	r6, r1
    bfe4:	2200      	movs	r2, #0
    bfe6:	466b      	mov	r3, sp
    bfe8:	80da      	strh	r2, [r3, #6]
    bfea:	4c06      	ldr	r4, [pc, #24]	; (c004 <usart_serial_getchar+0x28>)
    bfec:	466b      	mov	r3, sp
    bfee:	1d99      	adds	r1, r3, #6
    bff0:	0028      	movs	r0, r5
    bff2:	47a0      	blx	r4
    bff4:	2800      	cmp	r0, #0
    bff6:	d1f9      	bne.n	bfec <usart_serial_getchar+0x10>
    bff8:	466b      	mov	r3, sp
    bffa:	3306      	adds	r3, #6
    bffc:	881b      	ldrh	r3, [r3, #0]
    bffe:	7033      	strb	r3, [r6, #0]
    c000:	b002      	add	sp, #8
    c002:	bd70      	pop	{r4, r5, r6, pc}
    c004:	0000604d 	.word	0x0000604d

0000c008 <usart_serial_putchar>:
    c008:	b570      	push	{r4, r5, r6, lr}
    c00a:	0005      	movs	r5, r0
    c00c:	b28c      	uxth	r4, r1
    c00e:	4e03      	ldr	r6, [pc, #12]	; (c01c <usart_serial_putchar+0x14>)
    c010:	0021      	movs	r1, r4
    c012:	0028      	movs	r0, r5
    c014:	47b0      	blx	r6
    c016:	2800      	cmp	r0, #0
    c018:	d1fa      	bne.n	c010 <usart_serial_putchar+0x8>
    c01a:	bd70      	pop	{r4, r5, r6, pc}
    c01c:	00006021 	.word	0x00006021

0000c020 <USART_HOST_ISR_VECT>:
    c020:	b510      	push	{r4, lr}
    c022:	b082      	sub	sp, #8
    c024:	466b      	mov	r3, sp
    c026:	1ddc      	adds	r4, r3, #7
    c028:	2201      	movs	r2, #1
    c02a:	0021      	movs	r1, r4
    c02c:	480f      	ldr	r0, [pc, #60]	; (c06c <USART_HOST_ISR_VECT+0x4c>)
    c02e:	4b10      	ldr	r3, [pc, #64]	; (c070 <USART_HOST_ISR_VECT+0x50>)
    c030:	4798      	blx	r3
    c032:	b672      	cpsid	i
    c034:	f3bf 8f5f 	dmb	sy
    c038:	2200      	movs	r2, #0
    c03a:	4b0e      	ldr	r3, [pc, #56]	; (c074 <USART_HOST_ISR_VECT+0x54>)
    c03c:	701a      	strb	r2, [r3, #0]
    c03e:	4b0e      	ldr	r3, [pc, #56]	; (c078 <USART_HOST_ISR_VECT+0x58>)
    c040:	781b      	ldrb	r3, [r3, #0]
    c042:	7821      	ldrb	r1, [r4, #0]
    c044:	4a0d      	ldr	r2, [pc, #52]	; (c07c <USART_HOST_ISR_VECT+0x5c>)
    c046:	54d1      	strb	r1, [r2, r3]
    c048:	2b7f      	cmp	r3, #127	; 0x7f
    c04a:	d00a      	beq.n	c062 <USART_HOST_ISR_VECT+0x42>
    c04c:	3301      	adds	r3, #1
    c04e:	4a0a      	ldr	r2, [pc, #40]	; (c078 <USART_HOST_ISR_VECT+0x58>)
    c050:	7013      	strb	r3, [r2, #0]
    c052:	2201      	movs	r2, #1
    c054:	4b07      	ldr	r3, [pc, #28]	; (c074 <USART_HOST_ISR_VECT+0x54>)
>>>>>>> Stashed changes
    c056:	701a      	strb	r2, [r3, #0]
    c058:	f3bf 8f5f 	dmb	sy
    c05c:	b662      	cpsie	i
    c05e:	b002      	add	sp, #8
    c060:	bd10      	pop	{r4, pc}
    c062:	2200      	movs	r2, #0
    c064:	4b04      	ldr	r3, [pc, #16]	; (c078 <USART_HOST_ISR_VECT+0x58>)
    c066:	701a      	strb	r2, [r3, #0]
    c068:	e7f3      	b.n	c052 <USART_HOST_ISR_VECT+0x32>
    c06a:	46c0      	nop			; (mov r8, r8)
    c06c:	20001ab8 	.word	0x20001ab8
    c070:	0000617d 	.word	0x0000617d
    c074:	20000008 	.word	0x20000008
    c078:	20001b6c 	.word	0x20001b6c
    c07c:	20001aec 	.word	0x20001aec

<<<<<<< Updated upstream
0000c070 <sio2host_init>:
=======
    bfc6:	2200      	movs	r2, #0
    bfc8:	4b04      	ldr	r3, [pc, #16]	; (bfdc <USART_HOST_ISR_VECT+0x58>)
    bfca:	701a      	strb	r2, [r3, #0]
    bfcc:	e7f3      	b.n	bfb6 <USART_HOST_ISR_VECT+0x32>
    bfce:	46c0      	nop			; (mov r8, r8)
    bfd0:	20001ab8 	.word	0x20001ab8
    bfd4:	0000617d 	.word	0x0000617d
    bfd8:	20000008 	.word	0x20000008
    bfdc:	20001b6c 	.word	0x20001b6c
    bfe0:	20001aec 	.word	0x20001aec

0000bfe4 <sio2host_init>:
>>>>>>> Stashed changes
{
    bfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfe6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    bfe8:	2380      	movs	r3, #128	; 0x80
    bfea:	05db      	lsls	r3, r3, #23
    bfec:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    bfee:	2300      	movs	r3, #0
    bff0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    bff2:	22ff      	movs	r2, #255	; 0xff
    bff4:	4669      	mov	r1, sp
    bff6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    bff8:	2200      	movs	r2, #0
    bffa:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    bffc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    bffe:	2401      	movs	r4, #1
    c000:	2124      	movs	r1, #36	; 0x24
    c002:	4668      	mov	r0, sp
    c004:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    c006:	3101      	adds	r1, #1
    c008:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    c00a:	3101      	adds	r1, #1
    c00c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    c00e:	3101      	adds	r1, #1
    c010:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    c012:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    c014:	3105      	adds	r1, #5
    c016:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    c018:	3101      	adds	r1, #1
    c01a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c01c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c01e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c020:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c022:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c024:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c026:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    c028:	2313      	movs	r3, #19
    c02a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c02c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    c02e:	2380      	movs	r3, #128	; 0x80
    c030:	035b      	lsls	r3, r3, #13
    c032:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    c034:	4b2f      	ldr	r3, [pc, #188]	; (c0f4 <sio2host_init+0x110>)
    c036:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    c038:	4b2f      	ldr	r3, [pc, #188]	; (c0f8 <sio2host_init+0x114>)
    c03a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    c03c:	2301      	movs	r3, #1
    c03e:	425b      	negs	r3, r3
    c040:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    c042:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    c044:	23e1      	movs	r3, #225	; 0xe1
    c046:	025b      	lsls	r3, r3, #9
    c048:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    c04a:	4d2c      	ldr	r5, [pc, #176]	; (c0fc <sio2host_init+0x118>)
    c04c:	4b2c      	ldr	r3, [pc, #176]	; (c100 <sio2host_init+0x11c>)
    c04e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c050:	4a2c      	ldr	r2, [pc, #176]	; (c104 <sio2host_init+0x120>)
    c052:	4b2d      	ldr	r3, [pc, #180]	; (c108 <sio2host_init+0x124>)
    c054:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c056:	4a2d      	ldr	r2, [pc, #180]	; (c10c <sio2host_init+0x128>)
    c058:	4b2d      	ldr	r3, [pc, #180]	; (c110 <sio2host_init+0x12c>)
    c05a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c05c:	466a      	mov	r2, sp
    c05e:	2184      	movs	r1, #132	; 0x84
    c060:	05c9      	lsls	r1, r1, #23
    c062:	0028      	movs	r0, r5
    c064:	4b2b      	ldr	r3, [pc, #172]	; (c114 <sio2host_init+0x130>)
    c066:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c068:	4f2b      	ldr	r7, [pc, #172]	; (c118 <sio2host_init+0x134>)
    c06a:	683b      	ldr	r3, [r7, #0]
    c06c:	6898      	ldr	r0, [r3, #8]
    c06e:	2100      	movs	r1, #0
    c070:	4e2a      	ldr	r6, [pc, #168]	; (c11c <sio2host_init+0x138>)
    c072:	47b0      	blx	r6
	setbuf(stdin, NULL);
    c074:	683b      	ldr	r3, [r7, #0]
    c076:	6858      	ldr	r0, [r3, #4]
    c078:	2100      	movs	r1, #0
    c07a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c07c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c07e:	0030      	movs	r0, r6
    c080:	4b27      	ldr	r3, [pc, #156]	; (c120 <sio2host_init+0x13c>)
    c082:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c084:	231f      	movs	r3, #31
    c086:	4018      	ands	r0, r3
    c088:	4084      	lsls	r4, r0
    c08a:	4b26      	ldr	r3, [pc, #152]	; (c124 <sio2host_init+0x140>)
    c08c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c08e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c090:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c092:	2b00      	cmp	r3, #0
    c094:	d1fc      	bne.n	c090 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c096:	6833      	ldr	r3, [r6, #0]
    c098:	2202      	movs	r2, #2
    c09a:	4313      	orrs	r3, r2
    c09c:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c09e:	4b17      	ldr	r3, [pc, #92]	; (c0fc <sio2host_init+0x118>)
    c0a0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c0a2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c0a4:	2a00      	cmp	r2, #0
    c0a6:	d1fc      	bne.n	c0a2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    c0a8:	6859      	ldr	r1, [r3, #4]
    c0aa:	2280      	movs	r2, #128	; 0x80
    c0ac:	0252      	lsls	r2, r2, #9
    c0ae:	430a      	orrs	r2, r1
    c0b0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    c0b2:	2101      	movs	r1, #1
    c0b4:	4a11      	ldr	r2, [pc, #68]	; (c0fc <sio2host_init+0x118>)
    c0b6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    c0b8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c0ba:	2a00      	cmp	r2, #0
    c0bc:	d1fc      	bne.n	c0b8 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    c0be:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c0c0:	2a00      	cmp	r2, #0
    c0c2:	d1fc      	bne.n	c0be <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    c0c4:	6859      	ldr	r1, [r3, #4]
    c0c6:	2280      	movs	r2, #128	; 0x80
    c0c8:	0292      	lsls	r2, r2, #10
    c0ca:	430a      	orrs	r2, r1
    c0cc:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    c0ce:	2101      	movs	r1, #1
    c0d0:	4a0a      	ldr	r2, [pc, #40]	; (c0fc <sio2host_init+0x118>)
    c0d2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    c0d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c0d6:	2a00      	cmp	r2, #0
    c0d8:	d1fc      	bne.n	c0d4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    c0da:	4913      	ldr	r1, [pc, #76]	; (c128 <sio2host_init+0x144>)
    c0dc:	2000      	movs	r0, #0
    c0de:	4b13      	ldr	r3, [pc, #76]	; (c12c <sio2host_init+0x148>)
    c0e0:	4798      	blx	r3
    c0e2:	2204      	movs	r2, #4
    c0e4:	2384      	movs	r3, #132	; 0x84
    c0e6:	05db      	lsls	r3, r3, #23
    c0e8:	759a      	strb	r2, [r3, #22]
    c0ea:	32fc      	adds	r2, #252	; 0xfc
    c0ec:	4b0d      	ldr	r3, [pc, #52]	; (c124 <sio2host_init+0x140>)
    c0ee:	601a      	str	r2, [r3, #0]
}
    c0f0:	b011      	add	sp, #68	; 0x44
    c0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0f4:	00040003 	.word	0x00040003
    c0f8:	00050003 	.word	0x00050003
    c0fc:	20001ab8 	.word	0x20001ab8
    c100:	20001f60 	.word	0x20001f60
    c104:	0000bf6d 	.word	0x0000bf6d
    c108:	20001f5c 	.word	0x20001f5c
    c10c:	0000bf41 	.word	0x0000bf41
    c110:	20001f58 	.word	0x20001f58
    c114:	00005cb5 	.word	0x00005cb5
    c118:	20000028 	.word	0x20000028
    c11c:	00016f49 	.word	0x00016f49
    c120:	000057e5 	.word	0x000057e5
    c124:	e000e100 	.word	0xe000e100
    c128:	0000bf85 	.word	0x0000bf85
    c12c:	000057a9 	.word	0x000057a9

0000c130 <sio2host_tx>:
{
    c130:	b5f0      	push	{r4, r5, r6, r7, lr}
    c132:	b083      	sub	sp, #12
    c134:	0006      	movs	r6, r0
    c136:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    c138:	466b      	mov	r3, sp
    c13a:	889d      	ldrh	r5, [r3, #4]
    c13c:	4c05      	ldr	r4, [pc, #20]	; (c154 <sio2host_tx+0x24>)
    c13e:	4f06      	ldr	r7, [pc, #24]	; (c158 <sio2host_tx+0x28>)
    c140:	002a      	movs	r2, r5
    c142:	0031      	movs	r1, r6
    c144:	0020      	movs	r0, r4
    c146:	47b8      	blx	r7
	} while (status != STATUS_OK);
    c148:	2800      	cmp	r0, #0
    c14a:	d1f9      	bne.n	c140 <sio2host_tx+0x10>
}
    c14c:	9801      	ldr	r0, [sp, #4]
    c14e:	b003      	add	sp, #12
    c150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c152:	46c0      	nop			; (mov r8, r8)
    c154:	20001ab8 	.word	0x20001ab8
    c158:	000060bd 	.word	0x000060bd

0000c15c <sio2host_putchar>:
{
    c15c:	b500      	push	{lr}
    c15e:	b083      	sub	sp, #12
    c160:	466b      	mov	r3, sp
    c162:	71d8      	strb	r0, [r3, #7]
    c164:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    c166:	2101      	movs	r1, #1
    c168:	0018      	movs	r0, r3
    c16a:	4b02      	ldr	r3, [pc, #8]	; (c174 <sio2host_putchar+0x18>)
    c16c:	4798      	blx	r3
}
    c16e:	b003      	add	sp, #12
    c170:	bd00      	pop	{pc}
    c172:	46c0      	nop			; (mov r8, r8)
    c174:	0000c131 	.word	0x0000c131

0000c178 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    c178:	4b13      	ldr	r3, [pc, #76]	; (c1c8 <HAL_SPISend+0x50>)
    c17a:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    c17c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c17e:	7e1a      	ldrb	r2, [r3, #24]
    c180:	420a      	tst	r2, r1
    c182:	d0fc      	beq.n	c17e <HAL_SPISend+0x6>
    c184:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c186:	07d2      	lsls	r2, r2, #31
    c188:	d500      	bpl.n	c18c <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c18a:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    c18c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c18e:	7e1a      	ldrb	r2, [r3, #24]
    c190:	420a      	tst	r2, r1
    c192:	d0fc      	beq.n	c18e <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    c194:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c196:	7e1a      	ldrb	r2, [r3, #24]
    c198:	420a      	tst	r2, r1
    c19a:	d0fc      	beq.n	c196 <HAL_SPISend+0x1e>
    c19c:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    c19e:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    c1a0:	0752      	lsls	r2, r2, #29
    c1a2:	d50a      	bpl.n	c1ba <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c1a4:	8b5a      	ldrh	r2, [r3, #26]
    c1a6:	0752      	lsls	r2, r2, #29
    c1a8:	d501      	bpl.n	c1ae <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c1aa:	2204      	movs	r2, #4
    c1ac:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c1ae:	4a06      	ldr	r2, [pc, #24]	; (c1c8 <HAL_SPISend+0x50>)
    c1b0:	7992      	ldrb	r2, [r2, #6]
    c1b2:	2a01      	cmp	r2, #1
    c1b4:	d003      	beq.n	c1be <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c1b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c1b8:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    c1ba:	b2c0      	uxtb	r0, r0
}
    c1bc:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c1be:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c1c0:	05c0      	lsls	r0, r0, #23
    c1c2:	0dc0      	lsrs	r0, r0, #23
    c1c4:	e7f9      	b.n	c1ba <HAL_SPISend+0x42>
    c1c6:	46c0      	nop			; (mov r8, r8)
    c1c8:	20001b7c 	.word	0x20001b7c

0000c1cc <HAL_ResetPinMakeOutput>:
{
    c1cc:	b500      	push	{lr}
    c1ce:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    c1d0:	a901      	add	r1, sp, #4
    c1d2:	2301      	movs	r3, #1
    c1d4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    c1d6:	2200      	movs	r2, #0
    c1d8:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c1da:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c1dc:	202f      	movs	r0, #47	; 0x2f
    c1de:	4b02      	ldr	r3, [pc, #8]	; (c1e8 <HAL_ResetPinMakeOutput+0x1c>)
    c1e0:	4798      	blx	r3
}
    c1e2:	b003      	add	sp, #12
    c1e4:	bd00      	pop	{pc}
    c1e6:	46c0      	nop			; (mov r8, r8)
    c1e8:	00004ca1 	.word	0x00004ca1

0000c1ec <HAL_RadioDIO2Callback>:
{
    c1ec:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    c1ee:	4b05      	ldr	r3, [pc, #20]	; (c204 <HAL_RadioDIO2Callback+0x18>)
    c1f0:	681b      	ldr	r3, [r3, #0]
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d004      	beq.n	c200 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    c1f6:	4b04      	ldr	r3, [pc, #16]	; (c208 <HAL_RadioDIO2Callback+0x1c>)
    c1f8:	4798      	blx	r3
    interruptHandlerDio2();
    c1fa:	4b02      	ldr	r3, [pc, #8]	; (c204 <HAL_RadioDIO2Callback+0x18>)
    c1fc:	681b      	ldr	r3, [r3, #0]
    c1fe:	4798      	blx	r3
}
    c200:	bd10      	pop	{r4, pc}
    c202:	46c0      	nop			; (mov r8, r8)
    c204:	20001b78 	.word	0x20001b78
    c208:	0000c64d 	.word	0x0000c64d

0000c20c <HAL_RadioDIO1Callback>:
{
    c20c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    c20e:	4b05      	ldr	r3, [pc, #20]	; (c224 <HAL_RadioDIO1Callback+0x18>)
    c210:	681b      	ldr	r3, [r3, #0]
    c212:	2b00      	cmp	r3, #0
    c214:	d004      	beq.n	c220 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    c216:	4b04      	ldr	r3, [pc, #16]	; (c228 <HAL_RadioDIO1Callback+0x1c>)
    c218:	4798      	blx	r3
    interruptHandlerDio1();
    c21a:	4b02      	ldr	r3, [pc, #8]	; (c224 <HAL_RadioDIO1Callback+0x18>)
    c21c:	681b      	ldr	r3, [r3, #0]
    c21e:	4798      	blx	r3
}
    c220:	bd10      	pop	{r4, pc}
    c222:	46c0      	nop			; (mov r8, r8)
    c224:	20001b74 	.word	0x20001b74
    c228:	0000c64d 	.word	0x0000c64d

0000c22c <HAL_RadioDIO0Callback>:
{
    c22c:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    c22e:	4b05      	ldr	r3, [pc, #20]	; (c244 <HAL_RadioDIO0Callback+0x18>)
    c230:	681b      	ldr	r3, [r3, #0]
    c232:	2b00      	cmp	r3, #0
    c234:	d004      	beq.n	c240 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    c236:	4b04      	ldr	r3, [pc, #16]	; (c248 <HAL_RadioDIO0Callback+0x1c>)
    c238:	4798      	blx	r3
    interruptHandlerDio0();
    c23a:	4b02      	ldr	r3, [pc, #8]	; (c244 <HAL_RadioDIO0Callback+0x18>)
    c23c:	681b      	ldr	r3, [r3, #0]
    c23e:	4798      	blx	r3
}
    c240:	bd10      	pop	{r4, pc}
    c242:	46c0      	nop			; (mov r8, r8)
    c244:	20001b70 	.word	0x20001b70
    c248:	0000c64d 	.word	0x0000c64d

0000c24c <HAL_SPICSAssert>:
{
    c24c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    c24e:	2201      	movs	r2, #1
    c250:	4902      	ldr	r1, [pc, #8]	; (c25c <HAL_SPICSAssert+0x10>)
    c252:	4803      	ldr	r0, [pc, #12]	; (c260 <HAL_SPICSAssert+0x14>)
    c254:	4b03      	ldr	r3, [pc, #12]	; (c264 <HAL_SPICSAssert+0x18>)
    c256:	4798      	blx	r3
}
    c258:	bd10      	pop	{r4, pc}
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	20002970 	.word	0x20002970
    c260:	20001b7c 	.word	0x20001b7c
    c264:	00005bc1 	.word	0x00005bc1

0000c268 <HAL_SPICSDeassert>:
{
    c268:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    c26a:	2200      	movs	r2, #0
    c26c:	4902      	ldr	r1, [pc, #8]	; (c278 <HAL_SPICSDeassert+0x10>)
    c26e:	4803      	ldr	r0, [pc, #12]	; (c27c <HAL_SPICSDeassert+0x14>)
    c270:	4b03      	ldr	r3, [pc, #12]	; (c280 <HAL_SPICSDeassert+0x18>)
    c272:	4798      	blx	r3
}
    c274:	bd10      	pop	{r4, pc}
    c276:	46c0      	nop			; (mov r8, r8)
    c278:	20002970 	.word	0x20002970
    c27c:	20001b7c 	.word	0x20001b7c
    c280:	00005bc1 	.word	0x00005bc1

0000c284 <HAL_RadioInit>:
{
    c284:	b5f0      	push	{r4, r5, r6, r7, lr}
    c286:	46d6      	mov	lr, sl
    c288:	464f      	mov	r7, r9
    c28a:	4646      	mov	r6, r8
    c28c:	b5c0      	push	{r6, r7, lr}
    c28e:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    c290:	ac01      	add	r4, sp, #4
    c292:	2601      	movs	r6, #1
    c294:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c296:	2500      	movs	r5, #0
    c298:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c29a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    c29c:	0021      	movs	r1, r4
    c29e:	2052      	movs	r0, #82	; 0x52
    c2a0:	4f52      	ldr	r7, [pc, #328]	; (c3ec <HAL_RadioInit+0x168>)
    c2a2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    c2a4:	0021      	movs	r1, r4
    c2a6:	203e      	movs	r0, #62	; 0x3e
    c2a8:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    c2aa:	0021      	movs	r1, r4
    c2ac:	203f      	movs	r0, #63	; 0x3f
    c2ae:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    c2b0:	0021      	movs	r1, r4
    c2b2:	202f      	movs	r0, #47	; 0x2f
    c2b4:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    c2b6:	2280      	movs	r2, #128	; 0x80
    c2b8:	02d2      	lsls	r2, r2, #11
    c2ba:	4b4d      	ldr	r3, [pc, #308]	; (c3f0 <HAL_RadioInit+0x16c>)
    c2bc:	619a      	str	r2, [r3, #24]
    c2be:	4b4d      	ldr	r3, [pc, #308]	; (c3f4 <HAL_RadioInit+0x170>)
    c2c0:	2280      	movs	r2, #128	; 0x80
    c2c2:	05d2      	lsls	r2, r2, #23
    c2c4:	619a      	str	r2, [r3, #24]
    c2c6:	2280      	movs	r2, #128	; 0x80
    c2c8:	0612      	lsls	r2, r2, #24
    c2ca:	619a      	str	r2, [r3, #24]
    c2cc:	2280      	movs	r2, #128	; 0x80
    c2ce:	0212      	lsls	r2, r2, #8
    c2d0:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c2d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    c2d4:	0021      	movs	r1, r4
    c2d6:	2053      	movs	r0, #83	; 0x53
    c2d8:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    c2da:	ac02      	add	r4, sp, #8
    c2dc:	0020      	movs	r0, r4
    c2de:	4b46      	ldr	r3, [pc, #280]	; (c3f8 <HAL_RadioInit+0x174>)
    c2e0:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    c2e2:	2330      	movs	r3, #48	; 0x30
    c2e4:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    c2e6:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c2e8:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c2ea:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    c2ec:	0021      	movs	r1, r4
    c2ee:	2000      	movs	r0, #0
    c2f0:	4b42      	ldr	r3, [pc, #264]	; (c3fc <HAL_RadioInit+0x178>)
    c2f2:	469a      	mov	sl, r3
    c2f4:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c2f6:	2200      	movs	r2, #0
    c2f8:	2100      	movs	r1, #0
    c2fa:	4841      	ldr	r0, [pc, #260]	; (c400 <HAL_RadioInit+0x17c>)
    c2fc:	4b41      	ldr	r3, [pc, #260]	; (c404 <HAL_RadioInit+0x180>)
    c2fe:	4699      	mov	r9, r3
    c300:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c302:	2100      	movs	r1, #0
    c304:	2000      	movs	r0, #0
    c306:	4b40      	ldr	r3, [pc, #256]	; (c408 <HAL_RadioInit+0x184>)
    c308:	4698      	mov	r8, r3
    c30a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    c30c:	230b      	movs	r3, #11
    c30e:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    c310:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c312:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c314:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    c316:	0021      	movs	r1, r4
    c318:	200b      	movs	r0, #11
    c31a:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c31c:	2200      	movs	r2, #0
    c31e:	210b      	movs	r1, #11
    c320:	483a      	ldr	r0, [pc, #232]	; (c40c <HAL_RadioInit+0x188>)
    c322:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c324:	2100      	movs	r1, #0
    c326:	200b      	movs	r0, #11
    c328:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    c32a:	230c      	movs	r3, #12
    c32c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    c32e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c330:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c332:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    c334:	0021      	movs	r1, r4
    c336:	200c      	movs	r0, #12
    c338:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c33a:	2200      	movs	r2, #0
    c33c:	210c      	movs	r1, #12
    c33e:	4834      	ldr	r0, [pc, #208]	; (c410 <HAL_RadioInit+0x18c>)
    c340:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c342:	2100      	movs	r1, #0
    c344:	200c      	movs	r0, #12
    c346:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    c348:	4b32      	ldr	r3, [pc, #200]	; (c414 <HAL_RadioInit+0x190>)
    c34a:	4698      	mov	r8, r3
    c34c:	233f      	movs	r3, #63	; 0x3f
    c34e:	4642      	mov	r2, r8
    c350:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    c352:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    c354:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c356:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c358:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c35a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c35c:	0021      	movs	r1, r4
    c35e:	203f      	movs	r0, #63	; 0x3f
    c360:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    c362:	4643      	mov	r3, r8
    c364:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    c366:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c368:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c36a:	2900      	cmp	r1, #0
    c36c:	d104      	bne.n	c378 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    c36e:	0953      	lsrs	r3, r2, #5
    c370:	01db      	lsls	r3, r3, #7
    c372:	4929      	ldr	r1, [pc, #164]	; (c418 <HAL_RadioInit+0x194>)
    c374:	468c      	mov	ip, r1
    c376:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c378:	211f      	movs	r1, #31
    c37a:	4011      	ands	r1, r2
    c37c:	2201      	movs	r2, #1
    c37e:	0010      	movs	r0, r2
    c380:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c382:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c384:	ac02      	add	r4, sp, #8
    c386:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c388:	2300      	movs	r3, #0
    c38a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c38c:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c38e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c390:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c392:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c394:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c396:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c398:	3223      	adds	r2, #35	; 0x23
    c39a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c39c:	3a18      	subs	r2, #24
    c39e:	2100      	movs	r1, #0
    c3a0:	a808      	add	r0, sp, #32
    c3a2:	4b1e      	ldr	r3, [pc, #120]	; (c41c <HAL_RadioInit+0x198>)
    c3a4:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    c3a6:	4b1e      	ldr	r3, [pc, #120]	; (c420 <HAL_RadioInit+0x19c>)
    c3a8:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    c3aa:	2380      	movs	r3, #128	; 0x80
    c3ac:	025b      	lsls	r3, r3, #9
    c3ae:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    c3b0:	4b1c      	ldr	r3, [pc, #112]	; (c424 <HAL_RadioInit+0x1a0>)
    c3b2:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    c3b4:	2301      	movs	r3, #1
    c3b6:	425b      	negs	r3, r3
    c3b8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    c3ba:	4b1b      	ldr	r3, [pc, #108]	; (c428 <HAL_RadioInit+0x1a4>)
    c3bc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    c3be:	4b1b      	ldr	r3, [pc, #108]	; (c42c <HAL_RadioInit+0x1a8>)
    c3c0:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    c3c2:	4d1b      	ldr	r5, [pc, #108]	; (c430 <HAL_RadioInit+0x1ac>)
    c3c4:	0022      	movs	r2, r4
    c3c6:	491b      	ldr	r1, [pc, #108]	; (c434 <HAL_RadioInit+0x1b0>)
    c3c8:	0028      	movs	r0, r5
    c3ca:	4b1b      	ldr	r3, [pc, #108]	; (c438 <HAL_RadioInit+0x1b4>)
    c3cc:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c3ce:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c3d0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d1fc      	bne.n	c3d0 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c3d6:	6813      	ldr	r3, [r2, #0]
    c3d8:	2102      	movs	r1, #2
    c3da:	430b      	orrs	r3, r1
    c3dc:	6013      	str	r3, [r2, #0]
}
    c3de:	b010      	add	sp, #64	; 0x40
    c3e0:	bc1c      	pop	{r2, r3, r4}
    c3e2:	4690      	mov	r8, r2
    c3e4:	4699      	mov	r9, r3
    c3e6:	46a2      	mov	sl, r4
    c3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3ea:	46c0      	nop			; (mov r8, r8)
    c3ec:	00004ca1 	.word	0x00004ca1
    c3f0:	40002900 	.word	0x40002900
    c3f4:	40002880 	.word	0x40002880
    c3f8:	00004965 	.word	0x00004965
    c3fc:	00004979 	.word	0x00004979
    c400:	0000c22d 	.word	0x0000c22d
    c404:	00004825 	.word	0x00004825
    c408:	00004851 	.word	0x00004851
    c40c:	0000c20d 	.word	0x0000c20d
    c410:	0000c1ed 	.word	0x0000c1ed
    c414:	20002970 	.word	0x20002970
    c418:	40002800 	.word	0x40002800
    c41c:	0001679d 	.word	0x0001679d
    c420:	001e8480 	.word	0x001e8480
    c424:	00530005 	.word	0x00530005
    c428:	003e0005 	.word	0x003e0005
    c42c:	00520005 	.word	0x00520005
    c430:	20001b7c 	.word	0x20001b7c
    c434:	42001000 	.word	0x42001000
    c438:	00005875 	.word	0x00005875

0000c43c <RADIO_Reset>:
{
    c43c:	b570      	push	{r4, r5, r6, lr}
    c43e:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    c440:	4c0a      	ldr	r4, [pc, #40]	; (c46c <RADIO_Reset+0x30>)
    c442:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c444:	4d0a      	ldr	r5, [pc, #40]	; (c470 <RADIO_Reset+0x34>)
    c446:	2680      	movs	r6, #128	; 0x80
    c448:	0236      	lsls	r6, r6, #8
    c44a:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c44c:	2001      	movs	r0, #1
    c44e:	4b09      	ldr	r3, [pc, #36]	; (c474 <RADIO_Reset+0x38>)
    c450:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c452:	a901      	add	r1, sp, #4
    c454:	2300      	movs	r3, #0
    c456:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c458:	2201      	movs	r2, #1
    c45a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c45c:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c45e:	202f      	movs	r0, #47	; 0x2f
    c460:	4b05      	ldr	r3, [pc, #20]	; (c478 <RADIO_Reset+0x3c>)
    c462:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c464:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c466:	47a0      	blx	r4
}
    c468:	b002      	add	sp, #8
    c46a:	bd70      	pop	{r4, r5, r6, pc}
    c46c:	0000c1cd 	.word	0x0000c1cd
    c470:	40002880 	.word	0x40002880
    c474:	0000c619 	.word	0x0000c619
    c478:	00004ca1 	.word	0x00004ca1

0000c47c <RADIO_RegisterWrite>:
{
    c47c:	b570      	push	{r4, r5, r6, lr}
    c47e:	0004      	movs	r4, r0
    c480:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c482:	4b05      	ldr	r3, [pc, #20]	; (c498 <RADIO_RegisterWrite+0x1c>)
    c484:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c486:	2080      	movs	r0, #128	; 0x80
    c488:	4320      	orrs	r0, r4
    c48a:	4c04      	ldr	r4, [pc, #16]	; (c49c <RADIO_RegisterWrite+0x20>)
    c48c:	47a0      	blx	r4
	HAL_SPISend(value);
    c48e:	0028      	movs	r0, r5
    c490:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c492:	4b03      	ldr	r3, [pc, #12]	; (c4a0 <RADIO_RegisterWrite+0x24>)
    c494:	4798      	blx	r3
}
    c496:	bd70      	pop	{r4, r5, r6, pc}
    c498:	0000c24d 	.word	0x0000c24d
    c49c:	0000c179 	.word	0x0000c179
    c4a0:	0000c269 	.word	0x0000c269

0000c4a4 <RADIO_RegisterRead>:
{
    c4a4:	b510      	push	{r4, lr}
    c4a6:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c4a8:	4b06      	ldr	r3, [pc, #24]	; (c4c4 <RADIO_RegisterRead+0x20>)
    c4aa:	4798      	blx	r3
	HAL_SPISend(reg);
    c4ac:	207f      	movs	r0, #127	; 0x7f
    c4ae:	4020      	ands	r0, r4
    c4b0:	4c05      	ldr	r4, [pc, #20]	; (c4c8 <RADIO_RegisterRead+0x24>)
    c4b2:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    c4b4:	20ff      	movs	r0, #255	; 0xff
    c4b6:	47a0      	blx	r4
    c4b8:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    c4ba:	4b04      	ldr	r3, [pc, #16]	; (c4cc <RADIO_RegisterRead+0x28>)
    c4bc:	4798      	blx	r3
}
    c4be:	0020      	movs	r0, r4
    c4c0:	bd10      	pop	{r4, pc}
    c4c2:	46c0      	nop			; (mov r8, r8)
    c4c4:	0000c24d 	.word	0x0000c24d
    c4c8:	0000c179 	.word	0x0000c179
    c4cc:	0000c269 	.word	0x0000c269

0000c4d0 <RADIO_FrameWrite>:
{
    c4d0:	b570      	push	{r4, r5, r6, lr}
    c4d2:	0004      	movs	r4, r0
    c4d4:	000e      	movs	r6, r1
    c4d6:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c4d8:	4b0a      	ldr	r3, [pc, #40]	; (c504 <RADIO_FrameWrite+0x34>)
    c4da:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c4dc:	2080      	movs	r0, #128	; 0x80
    c4de:	4320      	orrs	r0, r4
    c4e0:	4b09      	ldr	r3, [pc, #36]	; (c508 <RADIO_FrameWrite+0x38>)
    c4e2:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c4e4:	2d00      	cmp	r5, #0
    c4e6:	d00a      	beq.n	c4fe <RADIO_FrameWrite+0x2e>
    c4e8:	0034      	movs	r4, r6
    c4ea:	3d01      	subs	r5, #1
    c4ec:	b2ed      	uxtb	r5, r5
    c4ee:	3501      	adds	r5, #1
    c4f0:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    c4f2:	4e05      	ldr	r6, [pc, #20]	; (c508 <RADIO_FrameWrite+0x38>)
    c4f4:	7820      	ldrb	r0, [r4, #0]
    c4f6:	47b0      	blx	r6
    c4f8:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c4fa:	42ac      	cmp	r4, r5
    c4fc:	d1fa      	bne.n	c4f4 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    c4fe:	4b03      	ldr	r3, [pc, #12]	; (c50c <RADIO_FrameWrite+0x3c>)
    c500:	4798      	blx	r3
}
    c502:	bd70      	pop	{r4, r5, r6, pc}
    c504:	0000c24d 	.word	0x0000c24d
    c508:	0000c179 	.word	0x0000c179
    c50c:	0000c269 	.word	0x0000c269

0000c510 <RADIO_FrameRead>:
{
    c510:	b570      	push	{r4, r5, r6, lr}
    c512:	0004      	movs	r4, r0
    c514:	000e      	movs	r6, r1
    c516:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c518:	4b0a      	ldr	r3, [pc, #40]	; (c544 <RADIO_FrameRead+0x34>)
    c51a:	4798      	blx	r3
    HAL_SPISend(offset);
    c51c:	0020      	movs	r0, r4
    c51e:	4b0a      	ldr	r3, [pc, #40]	; (c548 <RADIO_FrameRead+0x38>)
    c520:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c522:	2d00      	cmp	r5, #0
    c524:	d00b      	beq.n	c53e <RADIO_FrameRead+0x2e>
    c526:	0034      	movs	r4, r6
    c528:	3d01      	subs	r5, #1
    c52a:	b2ed      	uxtb	r5, r5
    c52c:	3501      	adds	r5, #1
    c52e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    c530:	4e05      	ldr	r6, [pc, #20]	; (c548 <RADIO_FrameRead+0x38>)
    c532:	20ff      	movs	r0, #255	; 0xff
    c534:	47b0      	blx	r6
    c536:	7020      	strb	r0, [r4, #0]
    c538:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c53a:	42ac      	cmp	r4, r5
    c53c:	d1f9      	bne.n	c532 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    c53e:	4b03      	ldr	r3, [pc, #12]	; (c54c <RADIO_FrameRead+0x3c>)
    c540:	4798      	blx	r3
}
    c542:	bd70      	pop	{r4, r5, r6, pc}
    c544:	0000c24d 	.word	0x0000c24d
    c548:	0000c179 	.word	0x0000c179
    c54c:	0000c269 	.word	0x0000c269

0000c550 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    c550:	2802      	cmp	r0, #2
    c552:	d007      	beq.n	c564 <HAL_RegisterDioInterruptHandler+0x14>
    c554:	2804      	cmp	r0, #4
    c556:	d008      	beq.n	c56a <HAL_RegisterDioInterruptHandler+0x1a>
    c558:	2801      	cmp	r0, #1
    c55a:	d000      	beq.n	c55e <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    c55c:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    c55e:	4b04      	ldr	r3, [pc, #16]	; (c570 <HAL_RegisterDioInterruptHandler+0x20>)
    c560:	6019      	str	r1, [r3, #0]
      break;
    c562:	e7fb      	b.n	c55c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    c564:	4b03      	ldr	r3, [pc, #12]	; (c574 <HAL_RegisterDioInterruptHandler+0x24>)
    c566:	6019      	str	r1, [r3, #0]
      break;
    c568:	e7f8      	b.n	c55c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    c56a:	4b03      	ldr	r3, [pc, #12]	; (c578 <HAL_RegisterDioInterruptHandler+0x28>)
    c56c:	6019      	str	r1, [r3, #0]
}
    c56e:	e7f5      	b.n	c55c <HAL_RegisterDioInterruptHandler+0xc>
    c570:	20001b70 	.word	0x20001b70
    c574:	20001b74 	.word	0x20001b74
    c578:	20001b78 	.word	0x20001b78

0000c57c <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c57c:	2801      	cmp	r0, #1
    c57e:	d00a      	beq.n	c596 <HAL_EnableRFCtrl+0x1a>
    c580:	2900      	cmp	r1, #0
    c582:	d008      	beq.n	c596 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    c584:	2802      	cmp	r0, #2
    c586:	d10a      	bne.n	c59e <HAL_EnableRFCtrl+0x22>
    c588:	2901      	cmp	r1, #1
    c58a:	d108      	bne.n	c59e <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    c58c:	2280      	movs	r2, #128	; 0x80
    c58e:	0192      	lsls	r2, r2, #6
    c590:	4b03      	ldr	r3, [pc, #12]	; (c5a0 <HAL_EnableRFCtrl+0x24>)
    c592:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    c594:	e003      	b.n	c59e <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    c596:	2280      	movs	r2, #128	; 0x80
    c598:	0192      	lsls	r2, r2, #6
    c59a:	4b01      	ldr	r3, [pc, #4]	; (c5a0 <HAL_EnableRFCtrl+0x24>)
    c59c:	619a      	str	r2, [r3, #24]
    c59e:	4770      	bx	lr
    c5a0:	40002800 	.word	0x40002800

0000c5a4 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c5a4:	2801      	cmp	r0, #1
    c5a6:	d001      	beq.n	c5ac <HAL_DisableRFCtrl+0x8>
    c5a8:	2900      	cmp	r1, #0
    c5aa:	d103      	bne.n	c5b4 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    c5ac:	2280      	movs	r2, #128	; 0x80
    c5ae:	0192      	lsls	r2, r2, #6
    c5b0:	4b01      	ldr	r3, [pc, #4]	; (c5b8 <HAL_DisableRFCtrl+0x14>)
    c5b2:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    c5b4:	4770      	bx	lr
    c5b6:	46c0      	nop			; (mov r8, r8)
    c5b8:	40002800 	.word	0x40002800

0000c5bc <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    c5bc:	2002      	movs	r0, #2
    c5be:	4770      	bx	lr

0000c5c0 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    c5c0:	2000      	movs	r0, #0
    c5c2:	4770      	bx	lr

0000c5c4 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    c5c4:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    c5c6:	2280      	movs	r2, #128	; 0x80
    c5c8:	0092      	lsls	r2, r2, #2
    c5ca:	4b03      	ldr	r3, [pc, #12]	; (c5d8 <HAL_TCXOPowerOn+0x14>)
    c5cc:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    c5ce:	2002      	movs	r0, #2
    c5d0:	4b02      	ldr	r3, [pc, #8]	; (c5dc <HAL_TCXOPowerOn+0x18>)
    c5d2:	4798      	blx	r3
#endif
}
    c5d4:	bd10      	pop	{r4, pc}
    c5d6:	46c0      	nop			; (mov r8, r8)
    c5d8:	40002800 	.word	0x40002800
    c5dc:	0000453d 	.word	0x0000453d

0000c5e0 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    c5e0:	2280      	movs	r2, #128	; 0x80
    c5e2:	0092      	lsls	r2, r2, #2
    c5e4:	4b01      	ldr	r3, [pc, #4]	; (c5ec <HAL_TCXOPowerOff+0xc>)
    c5e6:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    c5e8:	4770      	bx	lr
    c5ea:	46c0      	nop			; (mov r8, r8)
    c5ec:	40002800 	.word	0x40002800

0000c5f0 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    c5f0:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    c5f2:	4802      	ldr	r0, [pc, #8]	; (c5fc <SleepTimerGetElapsedTime+0xc>)
    c5f4:	4b02      	ldr	r3, [pc, #8]	; (c600 <SleepTimerGetElapsedTime+0x10>)
    c5f6:	4798      	blx	r3
}
<<<<<<< Updated upstream
    c684:	bd10      	pop	{r4, pc}
=======
0000c080 <sio2host_init>:
    c080:	b5f0      	push	{r4, r5, r6, r7, lr}
    c082:	b091      	sub	sp, #68	; 0x44
    c084:	2380      	movs	r3, #128	; 0x80
    c086:	05db      	lsls	r3, r3, #23
    c088:	9300      	str	r3, [sp, #0]
    c08a:	2300      	movs	r3, #0
    c08c:	9301      	str	r3, [sp, #4]
    c08e:	22ff      	movs	r2, #255	; 0xff
    c090:	4669      	mov	r1, sp
    c092:	810a      	strh	r2, [r1, #8]
    c094:	2200      	movs	r2, #0
    c096:	728b      	strb	r3, [r1, #10]
    c098:	72cb      	strb	r3, [r1, #11]
    c09a:	2401      	movs	r4, #1
    c09c:	2124      	movs	r1, #36	; 0x24
    c09e:	4668      	mov	r0, sp
    c0a0:	5444      	strb	r4, [r0, r1]
    c0a2:	3101      	adds	r1, #1
    c0a4:	5444      	strb	r4, [r0, r1]
    c0a6:	3101      	adds	r1, #1
    c0a8:	5443      	strb	r3, [r0, r1]
    c0aa:	3101      	adds	r1, #1
    c0ac:	5443      	strb	r3, [r0, r1]
    c0ae:	930a      	str	r3, [sp, #40]	; 0x28
    c0b0:	3105      	adds	r1, #5
    c0b2:	5443      	strb	r3, [r0, r1]
    c0b4:	3101      	adds	r1, #1
    c0b6:	5443      	strb	r3, [r0, r1]
    c0b8:	9305      	str	r3, [sp, #20]
    c0ba:	8203      	strh	r3, [r0, #16]
    c0bc:	76c3      	strb	r3, [r0, #27]
    c0be:	7602      	strb	r2, [r0, #24]
    c0c0:	7702      	strb	r2, [r0, #28]
    c0c2:	7642      	strb	r2, [r0, #25]
    c0c4:	2313      	movs	r3, #19
    c0c6:	7683      	strb	r3, [r0, #26]
    c0c8:	7742      	strb	r2, [r0, #29]
    c0ca:	2380      	movs	r3, #128	; 0x80
    c0cc:	035b      	lsls	r3, r3, #13
    c0ce:	9303      	str	r3, [sp, #12]
    c0d0:	4b2f      	ldr	r3, [pc, #188]	; (c190 <sio2host_init+0x110>)
    c0d2:	930c      	str	r3, [sp, #48]	; 0x30
    c0d4:	4b2f      	ldr	r3, [pc, #188]	; (c194 <sio2host_init+0x114>)
    c0d6:	930d      	str	r3, [sp, #52]	; 0x34
    c0d8:	2301      	movs	r3, #1
    c0da:	425b      	negs	r3, r3
    c0dc:	930e      	str	r3, [sp, #56]	; 0x38
    c0de:	930f      	str	r3, [sp, #60]	; 0x3c
    c0e0:	23e1      	movs	r3, #225	; 0xe1
    c0e2:	025b      	lsls	r3, r3, #9
    c0e4:	9308      	str	r3, [sp, #32]
    c0e6:	4d2c      	ldr	r5, [pc, #176]	; (c198 <sio2host_init+0x118>)
    c0e8:	4b2c      	ldr	r3, [pc, #176]	; (c19c <sio2host_init+0x11c>)
    c0ea:	601d      	str	r5, [r3, #0]
    c0ec:	4a2c      	ldr	r2, [pc, #176]	; (c1a0 <sio2host_init+0x120>)
    c0ee:	4b2d      	ldr	r3, [pc, #180]	; (c1a4 <sio2host_init+0x124>)
    c0f0:	601a      	str	r2, [r3, #0]
    c0f2:	4a2d      	ldr	r2, [pc, #180]	; (c1a8 <sio2host_init+0x128>)
    c0f4:	4b2d      	ldr	r3, [pc, #180]	; (c1ac <sio2host_init+0x12c>)
    c0f6:	601a      	str	r2, [r3, #0]
    c0f8:	466a      	mov	r2, sp
    c0fa:	2184      	movs	r1, #132	; 0x84
    c0fc:	05c9      	lsls	r1, r1, #23
    c0fe:	0028      	movs	r0, r5
    c100:	4b2b      	ldr	r3, [pc, #172]	; (c1b0 <sio2host_init+0x130>)
    c102:	4798      	blx	r3
    c104:	4f2b      	ldr	r7, [pc, #172]	; (c1b4 <sio2host_init+0x134>)
    c106:	683b      	ldr	r3, [r7, #0]
    c108:	6898      	ldr	r0, [r3, #8]
    c10a:	2100      	movs	r1, #0
    c10c:	4e2a      	ldr	r6, [pc, #168]	; (c1b8 <sio2host_init+0x138>)
    c10e:	47b0      	blx	r6
    c110:	683b      	ldr	r3, [r7, #0]
    c112:	6858      	ldr	r0, [r3, #4]
    c114:	2100      	movs	r1, #0
    c116:	47b0      	blx	r6
    c118:	682e      	ldr	r6, [r5, #0]
    c11a:	0030      	movs	r0, r6
    c11c:	4b27      	ldr	r3, [pc, #156]	; (c1bc <sio2host_init+0x13c>)
    c11e:	4798      	blx	r3
    c120:	231f      	movs	r3, #31
    c122:	4018      	ands	r0, r3
    c124:	4084      	lsls	r4, r0
    c126:	4b26      	ldr	r3, [pc, #152]	; (c1c0 <sio2host_init+0x140>)
    c128:	601c      	str	r4, [r3, #0]
    c12a:	682a      	ldr	r2, [r5, #0]
    c12c:	69d3      	ldr	r3, [r2, #28]
    c12e:	2b00      	cmp	r3, #0
    c130:	d1fc      	bne.n	c12c <sio2host_init+0xac>
    c132:	6833      	ldr	r3, [r6, #0]
    c134:	2202      	movs	r2, #2
    c136:	4313      	orrs	r3, r2
    c138:	6033      	str	r3, [r6, #0]
    c13a:	4b17      	ldr	r3, [pc, #92]	; (c198 <sio2host_init+0x118>)
    c13c:	681b      	ldr	r3, [r3, #0]
    c13e:	69da      	ldr	r2, [r3, #28]
    c140:	2a00      	cmp	r2, #0
    c142:	d1fc      	bne.n	c13e <sio2host_init+0xbe>
    c144:	6859      	ldr	r1, [r3, #4]
    c146:	2280      	movs	r2, #128	; 0x80
    c148:	0252      	lsls	r2, r2, #9
    c14a:	430a      	orrs	r2, r1
    c14c:	605a      	str	r2, [r3, #4]
    c14e:	2101      	movs	r1, #1
    c150:	4a11      	ldr	r2, [pc, #68]	; (c198 <sio2host_init+0x118>)
    c152:	71d1      	strb	r1, [r2, #7]
    c154:	69da      	ldr	r2, [r3, #28]
    c156:	2a00      	cmp	r2, #0
    c158:	d1fc      	bne.n	c154 <sio2host_init+0xd4>
    c15a:	69da      	ldr	r2, [r3, #28]
    c15c:	2a00      	cmp	r2, #0
    c15e:	d1fc      	bne.n	c15a <sio2host_init+0xda>
    c160:	6859      	ldr	r1, [r3, #4]
    c162:	2280      	movs	r2, #128	; 0x80
    c164:	0292      	lsls	r2, r2, #10
    c166:	430a      	orrs	r2, r1
    c168:	605a      	str	r2, [r3, #4]
    c16a:	2101      	movs	r1, #1
    c16c:	4a0a      	ldr	r2, [pc, #40]	; (c198 <sio2host_init+0x118>)
    c16e:	7191      	strb	r1, [r2, #6]
    c170:	69da      	ldr	r2, [r3, #28]
    c172:	2a00      	cmp	r2, #0
    c174:	d1fc      	bne.n	c170 <sio2host_init+0xf0>
    c176:	4913      	ldr	r1, [pc, #76]	; (c1c4 <sio2host_init+0x144>)
    c178:	2000      	movs	r0, #0
    c17a:	4b13      	ldr	r3, [pc, #76]	; (c1c8 <sio2host_init+0x148>)
    c17c:	4798      	blx	r3
    c17e:	2204      	movs	r2, #4
    c180:	2384      	movs	r3, #132	; 0x84
    c182:	05db      	lsls	r3, r3, #23
    c184:	759a      	strb	r2, [r3, #22]
    c186:	32fc      	adds	r2, #252	; 0xfc
    c188:	4b0d      	ldr	r3, [pc, #52]	; (c1c0 <sio2host_init+0x140>)
    c18a:	601a      	str	r2, [r3, #0]
    c18c:	b011      	add	sp, #68	; 0x44
    c18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c190:	00040003 	.word	0x00040003
    c194:	00050003 	.word	0x00050003
    c198:	20001ab8 	.word	0x20001ab8
    c19c:	20001f60 	.word	0x20001f60
    c1a0:	0000c009 	.word	0x0000c009
    c1a4:	20001f5c 	.word	0x20001f5c
    c1a8:	0000bfdd 	.word	0x0000bfdd
    c1ac:	20001f58 	.word	0x20001f58
    c1b0:	00005cb5 	.word	0x00005cb5
    c1b4:	20000028 	.word	0x20000028
    c1b8:	00016ff5 	.word	0x00016ff5
    c1bc:	000057e5 	.word	0x000057e5
    c1c0:	e000e100 	.word	0xe000e100
    c1c4:	0000c021 	.word	0x0000c021
    c1c8:	000057a9 	.word	0x000057a9

0000c1cc <sio2host_tx>:
    c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1ce:	b083      	sub	sp, #12
    c1d0:	0006      	movs	r6, r0
    c1d2:	9101      	str	r1, [sp, #4]
    c1d4:	466b      	mov	r3, sp
    c1d6:	889d      	ldrh	r5, [r3, #4]
    c1d8:	4c05      	ldr	r4, [pc, #20]	; (c1f0 <sio2host_tx+0x24>)
    c1da:	4f06      	ldr	r7, [pc, #24]	; (c1f4 <sio2host_tx+0x28>)
    c1dc:	002a      	movs	r2, r5
    c1de:	0031      	movs	r1, r6
    c1e0:	0020      	movs	r0, r4
    c1e2:	47b8      	blx	r7
    c1e4:	2800      	cmp	r0, #0
    c1e6:	d1f9      	bne.n	c1dc <sio2host_tx+0x10>
    c1e8:	9801      	ldr	r0, [sp, #4]
    c1ea:	b003      	add	sp, #12
    c1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	20001ab8 	.word	0x20001ab8
    c1f4:	000060bd 	.word	0x000060bd

0000c1f8 <sio2host_putchar>:
    c1f8:	b500      	push	{lr}
    c1fa:	b083      	sub	sp, #12
    c1fc:	466b      	mov	r3, sp
    c1fe:	71d8      	strb	r0, [r3, #7]
    c200:	3307      	adds	r3, #7
    c202:	2101      	movs	r1, #1
    c204:	0018      	movs	r0, r3
    c206:	4b02      	ldr	r3, [pc, #8]	; (c210 <sio2host_putchar+0x18>)
    c208:	4798      	blx	r3
    c20a:	b003      	add	sp, #12
    c20c:	bd00      	pop	{pc}
    c20e:	46c0      	nop			; (mov r8, r8)
    c210:	0000c1cd 	.word	0x0000c1cd

0000c214 <HAL_SPISend>:
    c214:	4b13      	ldr	r3, [pc, #76]	; (c264 <HAL_SPISend+0x50>)
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	2101      	movs	r1, #1
    c21a:	7e1a      	ldrb	r2, [r3, #24]
    c21c:	420a      	tst	r2, r1
    c21e:	d0fc      	beq.n	c21a <HAL_SPISend+0x6>
    c220:	7e1a      	ldrb	r2, [r3, #24]
    c222:	07d2      	lsls	r2, r2, #31
    c224:	d500      	bpl.n	c228 <HAL_SPISend+0x14>
    c226:	6298      	str	r0, [r3, #40]	; 0x28
    c228:	2102      	movs	r1, #2
    c22a:	7e1a      	ldrb	r2, [r3, #24]
    c22c:	420a      	tst	r2, r1
    c22e:	d0fc      	beq.n	c22a <HAL_SPISend+0x16>
    c230:	2104      	movs	r1, #4
    c232:	7e1a      	ldrb	r2, [r3, #24]
    c234:	420a      	tst	r2, r1
    c236:	d0fc      	beq.n	c232 <HAL_SPISend+0x1e>
    c238:	7e1a      	ldrb	r2, [r3, #24]
    c23a:	2000      	movs	r0, #0
    c23c:	0752      	lsls	r2, r2, #29
    c23e:	d50a      	bpl.n	c256 <HAL_SPISend+0x42>
    c240:	8b5a      	ldrh	r2, [r3, #26]
    c242:	0752      	lsls	r2, r2, #29
    c244:	d501      	bpl.n	c24a <HAL_SPISend+0x36>
    c246:	2204      	movs	r2, #4
    c248:	835a      	strh	r2, [r3, #26]
    c24a:	4a06      	ldr	r2, [pc, #24]	; (c264 <HAL_SPISend+0x50>)
    c24c:	7992      	ldrb	r2, [r2, #6]
    c24e:	2a01      	cmp	r2, #1
    c250:	d003      	beq.n	c25a <HAL_SPISend+0x46>
    c252:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c254:	b2c0      	uxtb	r0, r0
    c256:	b2c0      	uxtb	r0, r0
    c258:	4770      	bx	lr
    c25a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c25c:	05c0      	lsls	r0, r0, #23
    c25e:	0dc0      	lsrs	r0, r0, #23
    c260:	e7f9      	b.n	c256 <HAL_SPISend+0x42>
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	20001b7c 	.word	0x20001b7c

0000c268 <HAL_ResetPinMakeOutput>:
    c268:	b500      	push	{lr}
    c26a:	b083      	sub	sp, #12
    c26c:	a901      	add	r1, sp, #4
    c26e:	2301      	movs	r3, #1
    c270:	704b      	strb	r3, [r1, #1]
    c272:	2200      	movs	r2, #0
    c274:	708a      	strb	r2, [r1, #2]
    c276:	700b      	strb	r3, [r1, #0]
    c278:	202f      	movs	r0, #47	; 0x2f
    c27a:	4b02      	ldr	r3, [pc, #8]	; (c284 <HAL_ResetPinMakeOutput+0x1c>)
    c27c:	4798      	blx	r3
    c27e:	b003      	add	sp, #12
    c280:	bd00      	pop	{pc}
    c282:	46c0      	nop			; (mov r8, r8)
    c284:	00004ca1 	.word	0x00004ca1

0000c288 <HAL_RadioDIO2Callback>:
    c288:	b510      	push	{r4, lr}
    c28a:	4b05      	ldr	r3, [pc, #20]	; (c2a0 <HAL_RadioDIO2Callback+0x18>)
    c28c:	681b      	ldr	r3, [r3, #0]
    c28e:	2b00      	cmp	r3, #0
    c290:	d004      	beq.n	c29c <HAL_RadioDIO2Callback+0x14>
    c292:	4b04      	ldr	r3, [pc, #16]	; (c2a4 <HAL_RadioDIO2Callback+0x1c>)
    c294:	4798      	blx	r3
    c296:	4b02      	ldr	r3, [pc, #8]	; (c2a0 <HAL_RadioDIO2Callback+0x18>)
    c298:	681b      	ldr	r3, [r3, #0]
    c29a:	4798      	blx	r3
    c29c:	bd10      	pop	{r4, pc}
    c29e:	46c0      	nop			; (mov r8, r8)
    c2a0:	20001b78 	.word	0x20001b78
    c2a4:	0000c6e9 	.word	0x0000c6e9

0000c2a8 <HAL_RadioDIO1Callback>:
    c2a8:	b510      	push	{r4, lr}
    c2aa:	4b05      	ldr	r3, [pc, #20]	; (c2c0 <HAL_RadioDIO1Callback+0x18>)
    c2ac:	681b      	ldr	r3, [r3, #0]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d004      	beq.n	c2bc <HAL_RadioDIO1Callback+0x14>
    c2b2:	4b04      	ldr	r3, [pc, #16]	; (c2c4 <HAL_RadioDIO1Callback+0x1c>)
    c2b4:	4798      	blx	r3
    c2b6:	4b02      	ldr	r3, [pc, #8]	; (c2c0 <HAL_RadioDIO1Callback+0x18>)
    c2b8:	681b      	ldr	r3, [r3, #0]
    c2ba:	4798      	blx	r3
    c2bc:	bd10      	pop	{r4, pc}
    c2be:	46c0      	nop			; (mov r8, r8)
    c2c0:	20001b74 	.word	0x20001b74
    c2c4:	0000c6e9 	.word	0x0000c6e9

0000c2c8 <HAL_RadioDIO0Callback>:
    c2c8:	b510      	push	{r4, lr}
    c2ca:	4b05      	ldr	r3, [pc, #20]	; (c2e0 <HAL_RadioDIO0Callback+0x18>)
    c2cc:	681b      	ldr	r3, [r3, #0]
    c2ce:	2b00      	cmp	r3, #0
    c2d0:	d004      	beq.n	c2dc <HAL_RadioDIO0Callback+0x14>
    c2d2:	4b04      	ldr	r3, [pc, #16]	; (c2e4 <HAL_RadioDIO0Callback+0x1c>)
    c2d4:	4798      	blx	r3
    c2d6:	4b02      	ldr	r3, [pc, #8]	; (c2e0 <HAL_RadioDIO0Callback+0x18>)
    c2d8:	681b      	ldr	r3, [r3, #0]
    c2da:	4798      	blx	r3
    c2dc:	bd10      	pop	{r4, pc}
    c2de:	46c0      	nop			; (mov r8, r8)
    c2e0:	20001b70 	.word	0x20001b70
    c2e4:	0000c6e9 	.word	0x0000c6e9

0000c2e8 <HAL_SPICSAssert>:
    c2e8:	b510      	push	{r4, lr}
    c2ea:	2201      	movs	r2, #1
    c2ec:	4902      	ldr	r1, [pc, #8]	; (c2f8 <HAL_SPICSAssert+0x10>)
    c2ee:	4803      	ldr	r0, [pc, #12]	; (c2fc <HAL_SPICSAssert+0x14>)
    c2f0:	4b03      	ldr	r3, [pc, #12]	; (c300 <HAL_SPICSAssert+0x18>)
    c2f2:	4798      	blx	r3
    c2f4:	bd10      	pop	{r4, pc}
    c2f6:	46c0      	nop			; (mov r8, r8)
    c2f8:	20002970 	.word	0x20002970
    c2fc:	20001b7c 	.word	0x20001b7c
    c300:	00005bc1 	.word	0x00005bc1

0000c304 <HAL_SPICSDeassert>:
    c304:	b510      	push	{r4, lr}
    c306:	2200      	movs	r2, #0
    c308:	4902      	ldr	r1, [pc, #8]	; (c314 <HAL_SPICSDeassert+0x10>)
    c30a:	4803      	ldr	r0, [pc, #12]	; (c318 <HAL_SPICSDeassert+0x14>)
    c30c:	4b03      	ldr	r3, [pc, #12]	; (c31c <HAL_SPICSDeassert+0x18>)
    c30e:	4798      	blx	r3
    c310:	bd10      	pop	{r4, pc}
    c312:	46c0      	nop			; (mov r8, r8)
    c314:	20002970 	.word	0x20002970
    c318:	20001b7c 	.word	0x20001b7c
    c31c:	00005bc1 	.word	0x00005bc1

0000c320 <HAL_RadioInit>:
    c320:	b5f0      	push	{r4, r5, r6, r7, lr}
    c322:	46d6      	mov	lr, sl
    c324:	464f      	mov	r7, r9
    c326:	4646      	mov	r6, r8
    c328:	b5c0      	push	{r6, r7, lr}
    c32a:	b090      	sub	sp, #64	; 0x40
    c32c:	ac01      	add	r4, sp, #4
    c32e:	2601      	movs	r6, #1
    c330:	7066      	strb	r6, [r4, #1]
    c332:	2500      	movs	r5, #0
    c334:	70a5      	strb	r5, [r4, #2]
    c336:	7026      	strb	r6, [r4, #0]
    c338:	0021      	movs	r1, r4
    c33a:	2052      	movs	r0, #82	; 0x52
    c33c:	4f52      	ldr	r7, [pc, #328]	; (c488 <HAL_RadioInit+0x168>)
    c33e:	47b8      	blx	r7
    c340:	0021      	movs	r1, r4
    c342:	203e      	movs	r0, #62	; 0x3e
    c344:	47b8      	blx	r7
    c346:	0021      	movs	r1, r4
    c348:	203f      	movs	r0, #63	; 0x3f
    c34a:	47b8      	blx	r7
    c34c:	0021      	movs	r1, r4
    c34e:	202f      	movs	r0, #47	; 0x2f
    c350:	47b8      	blx	r7
    c352:	2280      	movs	r2, #128	; 0x80
    c354:	02d2      	lsls	r2, r2, #11
    c356:	4b4d      	ldr	r3, [pc, #308]	; (c48c <HAL_RadioInit+0x16c>)
    c358:	619a      	str	r2, [r3, #24]
    c35a:	4b4d      	ldr	r3, [pc, #308]	; (c490 <HAL_RadioInit+0x170>)
    c35c:	2280      	movs	r2, #128	; 0x80
    c35e:	05d2      	lsls	r2, r2, #23
    c360:	619a      	str	r2, [r3, #24]
    c362:	2280      	movs	r2, #128	; 0x80
    c364:	0612      	lsls	r2, r2, #24
    c366:	619a      	str	r2, [r3, #24]
    c368:	2280      	movs	r2, #128	; 0x80
    c36a:	0212      	lsls	r2, r2, #8
    c36c:	619a      	str	r2, [r3, #24]
    c36e:	7025      	strb	r5, [r4, #0]
    c370:	0021      	movs	r1, r4
    c372:	2053      	movs	r0, #83	; 0x53
    c374:	47b8      	blx	r7
    c376:	ac02      	add	r4, sp, #8
    c378:	0020      	movs	r0, r4
    c37a:	4b46      	ldr	r3, [pc, #280]	; (c494 <HAL_RadioInit+0x174>)
    c37c:	4798      	blx	r3
    c37e:	2330      	movs	r3, #48	; 0x30
    c380:	9302      	str	r3, [sp, #8]
    c382:	6065      	str	r5, [r4, #4]
    c384:	7225      	strb	r5, [r4, #8]
    c386:	72e6      	strb	r6, [r4, #11]
    c388:	0021      	movs	r1, r4
    c38a:	2000      	movs	r0, #0
    c38c:	4b42      	ldr	r3, [pc, #264]	; (c498 <HAL_RadioInit+0x178>)
    c38e:	469a      	mov	sl, r3
    c390:	4798      	blx	r3
    c392:	2200      	movs	r2, #0
    c394:	2100      	movs	r1, #0
    c396:	4841      	ldr	r0, [pc, #260]	; (c49c <HAL_RadioInit+0x17c>)
    c398:	4b41      	ldr	r3, [pc, #260]	; (c4a0 <HAL_RadioInit+0x180>)
    c39a:	4699      	mov	r9, r3
    c39c:	4798      	blx	r3
    c39e:	2100      	movs	r1, #0
    c3a0:	2000      	movs	r0, #0
    c3a2:	4b40      	ldr	r3, [pc, #256]	; (c4a4 <HAL_RadioInit+0x184>)
    c3a4:	4698      	mov	r8, r3
    c3a6:	4798      	blx	r3
    c3a8:	230b      	movs	r3, #11
    c3aa:	9302      	str	r3, [sp, #8]
    c3ac:	6065      	str	r5, [r4, #4]
    c3ae:	7225      	strb	r5, [r4, #8]
    c3b0:	72e6      	strb	r6, [r4, #11]
    c3b2:	0021      	movs	r1, r4
    c3b4:	200b      	movs	r0, #11
    c3b6:	47d0      	blx	sl
    c3b8:	2200      	movs	r2, #0
    c3ba:	210b      	movs	r1, #11
    c3bc:	483a      	ldr	r0, [pc, #232]	; (c4a8 <HAL_RadioInit+0x188>)
    c3be:	47c8      	blx	r9
    c3c0:	2100      	movs	r1, #0
    c3c2:	200b      	movs	r0, #11
    c3c4:	47c0      	blx	r8
    c3c6:	230c      	movs	r3, #12
    c3c8:	9302      	str	r3, [sp, #8]
    c3ca:	6065      	str	r5, [r4, #4]
    c3cc:	7225      	strb	r5, [r4, #8]
    c3ce:	72e6      	strb	r6, [r4, #11]
    c3d0:	0021      	movs	r1, r4
    c3d2:	200c      	movs	r0, #12
    c3d4:	47d0      	blx	sl
    c3d6:	2200      	movs	r2, #0
    c3d8:	210c      	movs	r1, #12
    c3da:	4834      	ldr	r0, [pc, #208]	; (c4ac <HAL_RadioInit+0x18c>)
    c3dc:	47c8      	blx	r9
    c3de:	2100      	movs	r1, #0
    c3e0:	200c      	movs	r0, #12
    c3e2:	47c0      	blx	r8
    c3e4:	4b32      	ldr	r3, [pc, #200]	; (c4b0 <HAL_RadioInit+0x190>)
    c3e6:	4698      	mov	r8, r3
    c3e8:	233f      	movs	r3, #63	; 0x3f
    c3ea:	4642      	mov	r2, r8
    c3ec:	7013      	strb	r3, [r2, #0]
    c3ee:	7055      	strb	r5, [r2, #1]
    c3f0:	7095      	strb	r5, [r2, #2]
    c3f2:	7066      	strb	r6, [r4, #1]
    c3f4:	70a5      	strb	r5, [r4, #2]
    c3f6:	7026      	strb	r6, [r4, #0]
    c3f8:	0021      	movs	r1, r4
    c3fa:	203f      	movs	r0, #63	; 0x3f
    c3fc:	47b8      	blx	r7
    c3fe:	4643      	mov	r3, r8
    c400:	781a      	ldrb	r2, [r3, #0]
    c402:	09d1      	lsrs	r1, r2, #7
    c404:	2300      	movs	r3, #0
    c406:	2900      	cmp	r1, #0
    c408:	d104      	bne.n	c414 <HAL_RadioInit+0xf4>
    c40a:	0953      	lsrs	r3, r2, #5
    c40c:	01db      	lsls	r3, r3, #7
    c40e:	4929      	ldr	r1, [pc, #164]	; (c4b4 <HAL_RadioInit+0x194>)
    c410:	468c      	mov	ip, r1
    c412:	4463      	add	r3, ip
    c414:	211f      	movs	r1, #31
    c416:	4011      	ands	r1, r2
    c418:	2201      	movs	r2, #1
    c41a:	0010      	movs	r0, r2
    c41c:	4088      	lsls	r0, r1
    c41e:	6198      	str	r0, [r3, #24]
    c420:	ac02      	add	r4, sp, #8
    c422:	7022      	strb	r2, [r4, #0]
    c424:	2300      	movs	r3, #0
    c426:	9303      	str	r3, [sp, #12]
    c428:	9304      	str	r3, [sp, #16]
    c42a:	7423      	strb	r3, [r4, #16]
    c42c:	7463      	strb	r3, [r4, #17]
    c42e:	74a2      	strb	r2, [r4, #18]
    c430:	74e2      	strb	r2, [r4, #19]
    c432:	7523      	strb	r3, [r4, #20]
    c434:	3223      	adds	r2, #35	; 0x23
    c436:	54a3      	strb	r3, [r4, r2]
    c438:	3a18      	subs	r2, #24
    c43a:	2100      	movs	r1, #0
    c43c:	a808      	add	r0, sp, #32
    c43e:	4b1e      	ldr	r3, [pc, #120]	; (c4b8 <HAL_RadioInit+0x198>)
    c440:	4798      	blx	r3
    c442:	4b1e      	ldr	r3, [pc, #120]	; (c4bc <HAL_RadioInit+0x19c>)
    c444:	61a3      	str	r3, [r4, #24]
    c446:	2380      	movs	r3, #128	; 0x80
    c448:	025b      	lsls	r3, r3, #9
    c44a:	60e3      	str	r3, [r4, #12]
    c44c:	4b1c      	ldr	r3, [pc, #112]	; (c4c0 <HAL_RadioInit+0x1a0>)
    c44e:	62a3      	str	r3, [r4, #40]	; 0x28
    c450:	2301      	movs	r3, #1
    c452:	425b      	negs	r3, r3
    c454:	62e3      	str	r3, [r4, #44]	; 0x2c
    c456:	4b1b      	ldr	r3, [pc, #108]	; (c4c4 <HAL_RadioInit+0x1a4>)
    c458:	6323      	str	r3, [r4, #48]	; 0x30
    c45a:	4b1b      	ldr	r3, [pc, #108]	; (c4c8 <HAL_RadioInit+0x1a8>)
    c45c:	6363      	str	r3, [r4, #52]	; 0x34
    c45e:	4d1b      	ldr	r5, [pc, #108]	; (c4cc <HAL_RadioInit+0x1ac>)
    c460:	0022      	movs	r2, r4
    c462:	491b      	ldr	r1, [pc, #108]	; (c4d0 <HAL_RadioInit+0x1b0>)
    c464:	0028      	movs	r0, r5
    c466:	4b1b      	ldr	r3, [pc, #108]	; (c4d4 <HAL_RadioInit+0x1b4>)
    c468:	4798      	blx	r3
    c46a:	682a      	ldr	r2, [r5, #0]
    c46c:	69d3      	ldr	r3, [r2, #28]
    c46e:	2b00      	cmp	r3, #0
    c470:	d1fc      	bne.n	c46c <HAL_RadioInit+0x14c>
    c472:	6813      	ldr	r3, [r2, #0]
    c474:	2102      	movs	r1, #2
    c476:	430b      	orrs	r3, r1
    c478:	6013      	str	r3, [r2, #0]
    c47a:	b010      	add	sp, #64	; 0x40
    c47c:	bc1c      	pop	{r2, r3, r4}
    c47e:	4690      	mov	r8, r2
    c480:	4699      	mov	r9, r3
    c482:	46a2      	mov	sl, r4
    c484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c486:	46c0      	nop			; (mov r8, r8)
    c488:	00004ca1 	.word	0x00004ca1
    c48c:	40002900 	.word	0x40002900
    c490:	40002880 	.word	0x40002880
    c494:	00004965 	.word	0x00004965
    c498:	00004979 	.word	0x00004979
    c49c:	0000c2c9 	.word	0x0000c2c9
    c4a0:	00004825 	.word	0x00004825
    c4a4:	00004851 	.word	0x00004851
    c4a8:	0000c2a9 	.word	0x0000c2a9
    c4ac:	0000c289 	.word	0x0000c289
    c4b0:	20002970 	.word	0x20002970
    c4b4:	40002800 	.word	0x40002800
    c4b8:	00016849 	.word	0x00016849
    c4bc:	001e8480 	.word	0x001e8480
    c4c0:	00530005 	.word	0x00530005
    c4c4:	003e0005 	.word	0x003e0005
    c4c8:	00520005 	.word	0x00520005
    c4cc:	20001b7c 	.word	0x20001b7c
    c4d0:	42001000 	.word	0x42001000
    c4d4:	00005875 	.word	0x00005875

0000c4d8 <RADIO_Reset>:
    c4d8:	b570      	push	{r4, r5, r6, lr}
    c4da:	b082      	sub	sp, #8
    c4dc:	4c0a      	ldr	r4, [pc, #40]	; (c508 <RADIO_Reset+0x30>)
    c4de:	47a0      	blx	r4
    c4e0:	4d0a      	ldr	r5, [pc, #40]	; (c50c <RADIO_Reset+0x34>)
    c4e2:	2680      	movs	r6, #128	; 0x80
    c4e4:	0236      	lsls	r6, r6, #8
    c4e6:	616e      	str	r6, [r5, #20]
    c4e8:	2001      	movs	r0, #1
    c4ea:	4b09      	ldr	r3, [pc, #36]	; (c510 <RADIO_Reset+0x38>)
    c4ec:	4798      	blx	r3
    c4ee:	a901      	add	r1, sp, #4
    c4f0:	2300      	movs	r3, #0
    c4f2:	700b      	strb	r3, [r1, #0]
    c4f4:	2201      	movs	r2, #1
    c4f6:	704a      	strb	r2, [r1, #1]
    c4f8:	708b      	strb	r3, [r1, #2]
    c4fa:	202f      	movs	r0, #47	; 0x2f
    c4fc:	4b05      	ldr	r3, [pc, #20]	; (c514 <RADIO_Reset+0x3c>)
    c4fe:	4798      	blx	r3
    c500:	61ae      	str	r6, [r5, #24]
    c502:	47a0      	blx	r4
    c504:	b002      	add	sp, #8
    c506:	bd70      	pop	{r4, r5, r6, pc}
    c508:	0000c269 	.word	0x0000c269
    c50c:	40002880 	.word	0x40002880
    c510:	0000c6b5 	.word	0x0000c6b5
    c514:	00004ca1 	.word	0x00004ca1

0000c518 <RADIO_RegisterWrite>:
    c518:	b570      	push	{r4, r5, r6, lr}
    c51a:	0004      	movs	r4, r0
    c51c:	000d      	movs	r5, r1
    c51e:	4b05      	ldr	r3, [pc, #20]	; (c534 <RADIO_RegisterWrite+0x1c>)
    c520:	4798      	blx	r3
    c522:	2080      	movs	r0, #128	; 0x80
    c524:	4320      	orrs	r0, r4
    c526:	4c04      	ldr	r4, [pc, #16]	; (c538 <RADIO_RegisterWrite+0x20>)
    c528:	47a0      	blx	r4
    c52a:	0028      	movs	r0, r5
    c52c:	47a0      	blx	r4
    c52e:	4b03      	ldr	r3, [pc, #12]	; (c53c <RADIO_RegisterWrite+0x24>)
    c530:	4798      	blx	r3
    c532:	bd70      	pop	{r4, r5, r6, pc}
    c534:	0000c2e9 	.word	0x0000c2e9
    c538:	0000c215 	.word	0x0000c215
    c53c:	0000c305 	.word	0x0000c305

0000c540 <RADIO_RegisterRead>:
    c540:	b510      	push	{r4, lr}
    c542:	0004      	movs	r4, r0
    c544:	4b06      	ldr	r3, [pc, #24]	; (c560 <RADIO_RegisterRead+0x20>)
    c546:	4798      	blx	r3
    c548:	207f      	movs	r0, #127	; 0x7f
    c54a:	4020      	ands	r0, r4
    c54c:	4c05      	ldr	r4, [pc, #20]	; (c564 <RADIO_RegisterRead+0x24>)
    c54e:	47a0      	blx	r4
    c550:	20ff      	movs	r0, #255	; 0xff
    c552:	47a0      	blx	r4
    c554:	0004      	movs	r4, r0
    c556:	4b04      	ldr	r3, [pc, #16]	; (c568 <RADIO_RegisterRead+0x28>)
    c558:	4798      	blx	r3
    c55a:	0020      	movs	r0, r4
    c55c:	bd10      	pop	{r4, pc}
    c55e:	46c0      	nop			; (mov r8, r8)
    c560:	0000c2e9 	.word	0x0000c2e9
    c564:	0000c215 	.word	0x0000c215
    c568:	0000c305 	.word	0x0000c305

0000c56c <RADIO_FrameWrite>:
    c56c:	b570      	push	{r4, r5, r6, lr}
    c56e:	0004      	movs	r4, r0
    c570:	000e      	movs	r6, r1
    c572:	0015      	movs	r5, r2
    c574:	4b0a      	ldr	r3, [pc, #40]	; (c5a0 <RADIO_FrameWrite+0x34>)
    c576:	4798      	blx	r3
    c578:	2080      	movs	r0, #128	; 0x80
    c57a:	4320      	orrs	r0, r4
    c57c:	4b09      	ldr	r3, [pc, #36]	; (c5a4 <RADIO_FrameWrite+0x38>)
    c57e:	4798      	blx	r3
    c580:	2d00      	cmp	r5, #0
    c582:	d00a      	beq.n	c59a <RADIO_FrameWrite+0x2e>
    c584:	0034      	movs	r4, r6
    c586:	3d01      	subs	r5, #1
    c588:	b2ed      	uxtb	r5, r5
    c58a:	3501      	adds	r5, #1
    c58c:	1975      	adds	r5, r6, r5
    c58e:	4e05      	ldr	r6, [pc, #20]	; (c5a4 <RADIO_FrameWrite+0x38>)
    c590:	7820      	ldrb	r0, [r4, #0]
    c592:	47b0      	blx	r6
    c594:	3401      	adds	r4, #1
    c596:	42ac      	cmp	r4, r5
    c598:	d1fa      	bne.n	c590 <RADIO_FrameWrite+0x24>
    c59a:	4b03      	ldr	r3, [pc, #12]	; (c5a8 <RADIO_FrameWrite+0x3c>)
    c59c:	4798      	blx	r3
    c59e:	bd70      	pop	{r4, r5, r6, pc}
    c5a0:	0000c2e9 	.word	0x0000c2e9
    c5a4:	0000c215 	.word	0x0000c215
    c5a8:	0000c305 	.word	0x0000c305

0000c5ac <RADIO_FrameRead>:
    c5ac:	b570      	push	{r4, r5, r6, lr}
    c5ae:	0004      	movs	r4, r0
    c5b0:	000e      	movs	r6, r1
    c5b2:	0015      	movs	r5, r2
    c5b4:	4b0a      	ldr	r3, [pc, #40]	; (c5e0 <RADIO_FrameRead+0x34>)
    c5b6:	4798      	blx	r3
    c5b8:	0020      	movs	r0, r4
    c5ba:	4b0a      	ldr	r3, [pc, #40]	; (c5e4 <RADIO_FrameRead+0x38>)
    c5bc:	4798      	blx	r3
    c5be:	2d00      	cmp	r5, #0
    c5c0:	d00b      	beq.n	c5da <RADIO_FrameRead+0x2e>
    c5c2:	0034      	movs	r4, r6
    c5c4:	3d01      	subs	r5, #1
    c5c6:	b2ed      	uxtb	r5, r5
    c5c8:	3501      	adds	r5, #1
    c5ca:	1975      	adds	r5, r6, r5
    c5cc:	4e05      	ldr	r6, [pc, #20]	; (c5e4 <RADIO_FrameRead+0x38>)
    c5ce:	20ff      	movs	r0, #255	; 0xff
    c5d0:	47b0      	blx	r6
    c5d2:	7020      	strb	r0, [r4, #0]
    c5d4:	3401      	adds	r4, #1
    c5d6:	42ac      	cmp	r4, r5
    c5d8:	d1f9      	bne.n	c5ce <RADIO_FrameRead+0x22>
    c5da:	4b03      	ldr	r3, [pc, #12]	; (c5e8 <RADIO_FrameRead+0x3c>)
    c5dc:	4798      	blx	r3
    c5de:	bd70      	pop	{r4, r5, r6, pc}
    c5e0:	0000c2e9 	.word	0x0000c2e9
    c5e4:	0000c215 	.word	0x0000c215
    c5e8:	0000c305 	.word	0x0000c305

0000c5ec <HAL_RegisterDioInterruptHandler>:
    c5ec:	2802      	cmp	r0, #2
    c5ee:	d007      	beq.n	c600 <HAL_RegisterDioInterruptHandler+0x14>
    c5f0:	2804      	cmp	r0, #4
    c5f2:	d008      	beq.n	c606 <HAL_RegisterDioInterruptHandler+0x1a>
    c5f4:	2801      	cmp	r0, #1
    c5f6:	d000      	beq.n	c5fa <HAL_RegisterDioInterruptHandler+0xe>
    c5f8:	4770      	bx	lr
    c5fa:	4b04      	ldr	r3, [pc, #16]	; (c60c <HAL_RegisterDioInterruptHandler+0x20>)
    c5fc:	6019      	str	r1, [r3, #0]
    c5fe:	e7fb      	b.n	c5f8 <HAL_RegisterDioInterruptHandler+0xc>
    c600:	4b03      	ldr	r3, [pc, #12]	; (c610 <HAL_RegisterDioInterruptHandler+0x24>)
    c602:	6019      	str	r1, [r3, #0]
    c604:	e7f8      	b.n	c5f8 <HAL_RegisterDioInterruptHandler+0xc>
    c606:	4b03      	ldr	r3, [pc, #12]	; (c614 <HAL_RegisterDioInterruptHandler+0x28>)
    c608:	6019      	str	r1, [r3, #0]
    c60a:	e7f5      	b.n	c5f8 <HAL_RegisterDioInterruptHandler+0xc>
    c60c:	20001b70 	.word	0x20001b70
    c610:	20001b74 	.word	0x20001b74
    c614:	20001b78 	.word	0x20001b78

0000c618 <HAL_EnableRFCtrl>:
    c618:	2801      	cmp	r0, #1
    c61a:	d00a      	beq.n	c632 <HAL_EnableRFCtrl+0x1a>
    c61c:	2900      	cmp	r1, #0
    c61e:	d008      	beq.n	c632 <HAL_EnableRFCtrl+0x1a>
    c620:	2802      	cmp	r0, #2
    c622:	d10a      	bne.n	c63a <HAL_EnableRFCtrl+0x22>
    c624:	2901      	cmp	r1, #1
    c626:	d108      	bne.n	c63a <HAL_EnableRFCtrl+0x22>
    c628:	2280      	movs	r2, #128	; 0x80
    c62a:	0192      	lsls	r2, r2, #6
    c62c:	4b03      	ldr	r3, [pc, #12]	; (c63c <HAL_EnableRFCtrl+0x24>)
    c62e:	615a      	str	r2, [r3, #20]
    c630:	e003      	b.n	c63a <HAL_EnableRFCtrl+0x22>
    c632:	2280      	movs	r2, #128	; 0x80
    c634:	0192      	lsls	r2, r2, #6
    c636:	4b01      	ldr	r3, [pc, #4]	; (c63c <HAL_EnableRFCtrl+0x24>)
    c638:	619a      	str	r2, [r3, #24]
    c63a:	4770      	bx	lr
    c63c:	40002800 	.word	0x40002800

0000c640 <HAL_DisableRFCtrl>:
    c640:	2801      	cmp	r0, #1
    c642:	d001      	beq.n	c648 <HAL_DisableRFCtrl+0x8>
    c644:	2900      	cmp	r1, #0
    c646:	d103      	bne.n	c650 <HAL_DisableRFCtrl+0x10>
    c648:	2280      	movs	r2, #128	; 0x80
    c64a:	0192      	lsls	r2, r2, #6
    c64c:	4b01      	ldr	r3, [pc, #4]	; (c654 <HAL_DisableRFCtrl+0x14>)
    c64e:	615a      	str	r2, [r3, #20]
    c650:	4770      	bx	lr
    c652:	46c0      	nop			; (mov r8, r8)
    c654:	40002800 	.word	0x40002800

0000c658 <HAL_GetRadioClkStabilizationDelay>:
    c658:	2002      	movs	r0, #2
    c65a:	4770      	bx	lr

0000c65c <HAL_GetRadioClkSrc>:
    c65c:	2000      	movs	r0, #0
    c65e:	4770      	bx	lr

0000c660 <HAL_TCXOPowerOn>:
    c660:	b510      	push	{r4, lr}
    c662:	2280      	movs	r2, #128	; 0x80
    c664:	0092      	lsls	r2, r2, #2
    c666:	4b03      	ldr	r3, [pc, #12]	; (c674 <HAL_TCXOPowerOn+0x14>)
    c668:	619a      	str	r2, [r3, #24]
    c66a:	2002      	movs	r0, #2
    c66c:	4b02      	ldr	r3, [pc, #8]	; (c678 <HAL_TCXOPowerOn+0x18>)
    c66e:	4798      	blx	r3
    c670:	bd10      	pop	{r4, pc}
    c672:	46c0      	nop			; (mov r8, r8)
    c674:	40002800 	.word	0x40002800
    c678:	0000453d 	.word	0x0000453d

0000c67c <HAL_TCXOPowerOff>:
    c67c:	2280      	movs	r2, #128	; 0x80
    c67e:	0092      	lsls	r2, r2, #2
    c680:	4b01      	ldr	r3, [pc, #4]	; (c688 <HAL_TCXOPowerOff+0xc>)
    c682:	615a      	str	r2, [r3, #20]
    c684:	4770      	bx	lr
>>>>>>> Stashed changes
    c686:	46c0      	nop			; (mov r8, r8)
    c688:	40002800 	.word	0x40002800

<<<<<<< Updated upstream
0000c690 <SleepTimerStop>:
=======
    c5f8:	bd10      	pop	{r4, pc}
    c5fa:	46c0      	nop			; (mov r8, r8)
    c5fc:	20002974 	.word	0x20002974
    c600:	00004cd1 	.word	0x00004cd1

0000c604 <SleepTimerStop>:
>>>>>>> Stashed changes

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    c604:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    c606:	2108      	movs	r1, #8
    c608:	4801      	ldr	r0, [pc, #4]	; (c610 <SleepTimerStop+0xc>)
    c60a:	4b02      	ldr	r3, [pc, #8]	; (c614 <SleepTimerStop+0x10>)
    c60c:	4798      	blx	r3
}
    c60e:	bd10      	pop	{r4, pc}
    c610:	20002974 	.word	0x20002974
    c614:	00004cfd 	.word	0x00004cfd

0000c618 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    c618:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    c61a:	2800      	cmp	r0, #0
    c61c:	d103      	bne.n	c626 <SystemBlockingWaitMs+0xe>
    c61e:	2001      	movs	r0, #1
    c620:	4b02      	ldr	r3, [pc, #8]	; (c62c <SystemBlockingWaitMs+0x14>)
    c622:	4798      	blx	r3
#endif
}
    c624:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    c626:	4b02      	ldr	r3, [pc, #8]	; (c630 <SystemBlockingWaitMs+0x18>)
    c628:	4798      	blx	r3
    c62a:	e7fb      	b.n	c624 <SystemBlockingWaitMs+0xc>
    c62c:	00004511 	.word	0x00004511
    c630:	0000453d 	.word	0x0000453d

0000c634 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    c634:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    c636:	4b01      	ldr	r3, [pc, #4]	; (c63c <system_enter_critical_section+0x8>)
    c638:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    c63a:	bd10      	pop	{r4, pc}
    c63c:	00004569 	.word	0x00004569

0000c640 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    c640:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    c642:	4b01      	ldr	r3, [pc, #4]	; (c648 <system_leave_critical_section+0x8>)
    c644:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    c646:	bd10      	pop	{r4, pc}
    c648:	000045a9 	.word	0x000045a9

0000c64c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    c64c:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    c64e:	4b16      	ldr	r3, [pc, #88]	; (c6a8 <PMM_Wakeup+0x5c>)
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	2b01      	cmp	r3, #1
    c654:	d000      	beq.n	c658 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    c656:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    c658:	2200      	movs	r2, #0
    c65a:	4b13      	ldr	r3, [pc, #76]	; (c6a8 <PMM_Wakeup+0x5c>)
    c65c:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    c65e:	4b13      	ldr	r3, [pc, #76]	; (c6ac <PMM_Wakeup+0x60>)
    c660:	4798      	blx	r3
    c662:	4b13      	ldr	r3, [pc, #76]	; (c6b0 <PMM_Wakeup+0x64>)
    c664:	4798      	blx	r3
    c666:	4913      	ldr	r1, [pc, #76]	; (c6b4 <PMM_Wakeup+0x68>)
    c668:	4b13      	ldr	r3, [pc, #76]	; (c6b8 <PMM_Wakeup+0x6c>)
    c66a:	4798      	blx	r3
    c66c:	4b13      	ldr	r3, [pc, #76]	; (c6bc <PMM_Wakeup+0x70>)
    c66e:	4798      	blx	r3
    c670:	0004      	movs	r4, r0
    c672:	000d      	movs	r5, r1
        SleepTimerStop();
    c674:	4b12      	ldr	r3, [pc, #72]	; (c6c0 <PMM_Wakeup+0x74>)
    c676:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    c678:	0020      	movs	r0, r4
    c67a:	0029      	movs	r1, r5
    c67c:	4b11      	ldr	r3, [pc, #68]	; (c6c4 <PMM_Wakeup+0x78>)
    c67e:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    c680:	4b11      	ldr	r3, [pc, #68]	; (c6c8 <PMM_Wakeup+0x7c>)
    c682:	681b      	ldr	r3, [r3, #0]
    c684:	2b00      	cmp	r3, #0
    c686:	d0e6      	beq.n	c656 <PMM_Wakeup+0xa>
    c688:	689e      	ldr	r6, [r3, #8]
    c68a:	2e00      	cmp	r6, #0
    c68c:	d0e3      	beq.n	c656 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    c68e:	22fa      	movs	r2, #250	; 0xfa
    c690:	0092      	lsls	r2, r2, #2
    c692:	2300      	movs	r3, #0
    c694:	0020      	movs	r0, r4
    c696:	0029      	movs	r1, r5
    c698:	4c0c      	ldr	r4, [pc, #48]	; (c6cc <PMM_Wakeup+0x80>)
    c69a:	47a0      	blx	r4
    c69c:	47b0      	blx	r6
            sleepReq = NULL;
    c69e:	2200      	movs	r2, #0
    c6a0:	4b09      	ldr	r3, [pc, #36]	; (c6c8 <PMM_Wakeup+0x7c>)
    c6a2:	601a      	str	r2, [r3, #0]
}
    c6a4:	e7d7      	b.n	c656 <PMM_Wakeup+0xa>
    c6a6:	46c0      	nop			; (mov r8, r8)
    c6a8:	20001b88 	.word	0x20001b88
    c6ac:	0000c5f1 	.word	0x0000c5f1
    c6b0:	00014921 	.word	0x00014921
    c6b4:	41f423d7 	.word	0x41f423d7
    c6b8:	000142c9 	.word	0x000142c9
    c6bc:	00013a05 	.word	0x00013a05
    c6c0:	0000c605 	.word	0x0000c605
    c6c4:	0000d529 	.word	0x0000d529
    c6c8:	20001b8c 	.word	0x20001b8c
    c6cc:	00013905 	.word	0x00013905

0000c6d0 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    c6d0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    c6d2:	4c39      	ldr	r4, [pc, #228]	; (c7b8 <InitDefault868Channels+0xe8>)
    c6d4:	7920      	ldrb	r0, [r4, #4]
    c6d6:	7963      	ldrb	r3, [r4, #5]
    c6d8:	021b      	lsls	r3, r3, #8
    c6da:	4303      	orrs	r3, r0
    c6dc:	79a0      	ldrb	r0, [r4, #6]
    c6de:	0400      	lsls	r0, r0, #16
    c6e0:	4303      	orrs	r3, r0
    c6e2:	79e0      	ldrb	r0, [r4, #7]
    c6e4:	0600      	lsls	r0, r0, #24
    c6e6:	4318      	orrs	r0, r3
    c6e8:	2206      	movs	r2, #6
    c6ea:	2100      	movs	r1, #0
    c6ec:	4e33      	ldr	r6, [pc, #204]	; (c7bc <InitDefault868Channels+0xec>)
    c6ee:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    c6f0:	7920      	ldrb	r0, [r4, #4]
    c6f2:	7963      	ldrb	r3, [r4, #5]
    c6f4:	021b      	lsls	r3, r3, #8
    c6f6:	4303      	orrs	r3, r0
    c6f8:	79a0      	ldrb	r0, [r4, #6]
    c6fa:	0400      	lsls	r0, r0, #16
    c6fc:	4303      	orrs	r3, r0
    c6fe:	79e0      	ldrb	r0, [r4, #7]
    c700:	0600      	lsls	r0, r0, #24
    c702:	4318      	orrs	r0, r3
    c704:	2206      	movs	r2, #6
    c706:	492e      	ldr	r1, [pc, #184]	; (c7c0 <InitDefault868Channels+0xf0>)
    c708:	4d2e      	ldr	r5, [pc, #184]	; (c7c4 <InitDefault868Channels+0xf4>)
    c70a:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    c70c:	7a20      	ldrb	r0, [r4, #8]
    c70e:	7a63      	ldrb	r3, [r4, #9]
    c710:	021b      	lsls	r3, r3, #8
    c712:	4303      	orrs	r3, r0
    c714:	7aa0      	ldrb	r0, [r4, #10]
    c716:	0400      	lsls	r0, r0, #16
    c718:	4303      	orrs	r3, r0
    c71a:	7ae0      	ldrb	r0, [r4, #11]
    c71c:	0600      	lsls	r0, r0, #24
    c71e:	4318      	orrs	r0, r3
    c720:	2224      	movs	r2, #36	; 0x24
    c722:	2100      	movs	r1, #0
    c724:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    c726:	7a20      	ldrb	r0, [r4, #8]
    c728:	7a63      	ldrb	r3, [r4, #9]
    c72a:	021b      	lsls	r3, r3, #8
    c72c:	4303      	orrs	r3, r0
    c72e:	7aa0      	ldrb	r0, [r4, #10]
    c730:	0400      	lsls	r0, r0, #16
    c732:	4303      	orrs	r3, r0
    c734:	7ae0      	ldrb	r0, [r4, #11]
    c736:	0600      	lsls	r0, r0, #24
    c738:	4318      	orrs	r0, r3
    c73a:	2224      	movs	r2, #36	; 0x24
    c73c:	4922      	ldr	r1, [pc, #136]	; (c7c8 <InitDefault868Channels+0xf8>)
    c73e:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    c740:	7b20      	ldrb	r0, [r4, #12]
    c742:	7b63      	ldrb	r3, [r4, #13]
    c744:	021b      	lsls	r3, r3, #8
    c746:	4303      	orrs	r3, r0
    c748:	7ba0      	ldrb	r0, [r4, #14]
    c74a:	0400      	lsls	r0, r0, #16
    c74c:	4303      	orrs	r3, r0
    c74e:	7be0      	ldrb	r0, [r4, #15]
    c750:	0600      	lsls	r0, r0, #24
    c752:	4318      	orrs	r0, r3
    c754:	2248      	movs	r2, #72	; 0x48
    c756:	2100      	movs	r1, #0
    c758:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    c75a:	7b20      	ldrb	r0, [r4, #12]
    c75c:	7b63      	ldrb	r3, [r4, #13]
    c75e:	021b      	lsls	r3, r3, #8
    c760:	4303      	orrs	r3, r0
    c762:	7ba0      	ldrb	r0, [r4, #14]
    c764:	0400      	lsls	r0, r0, #16
    c766:	4303      	orrs	r3, r0
    c768:	7be0      	ldrb	r0, [r4, #15]
    c76a:	0600      	lsls	r0, r0, #24
    c76c:	4318      	orrs	r0, r3
    c76e:	2248      	movs	r2, #72	; 0x48
    c770:	4916      	ldr	r1, [pc, #88]	; (c7cc <InitDefault868Channels+0xfc>)
    c772:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    c774:	0020      	movs	r0, r4
    c776:	30af      	adds	r0, #175	; 0xaf
    c778:	30ff      	adds	r0, #255	; 0xff
    c77a:	220c      	movs	r2, #12
    c77c:	4914      	ldr	r1, [pc, #80]	; (c7d0 <InitDefault868Channels+0x100>)
    c77e:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    c780:	232a      	movs	r3, #42	; 0x2a
    c782:	56e3      	ldrsb	r3, [r4, r3]
    c784:	2b03      	cmp	r3, #3
    c786:	dd15      	ble.n	c7b4 <InitDefault868Channels+0xe4>
    c788:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c78a:	480b      	ldr	r0, [pc, #44]	; (c7b8 <InitDefault868Channels+0xe8>)
    c78c:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c78e:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c790:	7902      	ldrb	r2, [r0, #4]
    c792:	7941      	ldrb	r1, [r0, #5]
    c794:	0209      	lsls	r1, r1, #8
    c796:	4311      	orrs	r1, r2
    c798:	7982      	ldrb	r2, [r0, #6]
    c79a:	0412      	lsls	r2, r2, #16
    c79c:	4311      	orrs	r1, r2
    c79e:	79c2      	ldrb	r2, [r0, #7]
    c7a0:	0612      	lsls	r2, r2, #24
    c7a2:	430a      	orrs	r2, r1
    c7a4:	0059      	lsls	r1, r3, #1
    c7a6:	188a      	adds	r2, r1, r2
    c7a8:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c7aa:	3301      	adds	r3, #1
    c7ac:	b2db      	uxtb	r3, r3
    c7ae:	5702      	ldrsb	r2, [r0, r4]
    c7b0:	4293      	cmp	r3, r2
    c7b2:	dbed      	blt.n	c790 <InitDefault868Channels+0xc0>
    }
}
    c7b4:	bd70      	pop	{r4, r5, r6, pc}
    c7b6:	46c0      	nop			; (mov r8, r8)
    c7b8:	200029b0 	.word	0x200029b0
    c7bc:	0001679d 	.word	0x0001679d
    c7c0:	000189ec 	.word	0x000189ec
    c7c4:	0001678b 	.word	0x0001678b
    c7c8:	000189c0 	.word	0x000189c0
    c7cc:	00018a0c 	.word	0x00018a0c
    c7d0:	000189f4 	.word	0x000189f4

0000c7d4 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    c7d4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    c7d6:	4c36      	ldr	r4, [pc, #216]	; (c8b0 <InitDefault433Channels+0xdc>)
    c7d8:	7920      	ldrb	r0, [r4, #4]
    c7da:	7963      	ldrb	r3, [r4, #5]
    c7dc:	021b      	lsls	r3, r3, #8
    c7de:	4303      	orrs	r3, r0
    c7e0:	79a0      	ldrb	r0, [r4, #6]
    c7e2:	0400      	lsls	r0, r0, #16
    c7e4:	4303      	orrs	r3, r0
    c7e6:	79e0      	ldrb	r0, [r4, #7]
    c7e8:	0600      	lsls	r0, r0, #24
    c7ea:	4318      	orrs	r0, r3
    c7ec:	2206      	movs	r2, #6
    c7ee:	2100      	movs	r1, #0
    c7f0:	4e30      	ldr	r6, [pc, #192]	; (c8b4 <InitDefault433Channels+0xe0>)
    c7f2:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    c7f4:	7920      	ldrb	r0, [r4, #4]
    c7f6:	7963      	ldrb	r3, [r4, #5]
    c7f8:	021b      	lsls	r3, r3, #8
    c7fa:	4303      	orrs	r3, r0
    c7fc:	79a0      	ldrb	r0, [r4, #6]
    c7fe:	0400      	lsls	r0, r0, #16
    c800:	4303      	orrs	r3, r0
    c802:	79e0      	ldrb	r0, [r4, #7]
    c804:	0600      	lsls	r0, r0, #24
    c806:	4318      	orrs	r0, r3
    c808:	2206      	movs	r2, #6
    c80a:	492b      	ldr	r1, [pc, #172]	; (c8b8 <InitDefault433Channels+0xe4>)
    c80c:	4d2b      	ldr	r5, [pc, #172]	; (c8bc <InitDefault433Channels+0xe8>)
    c80e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    c810:	7a20      	ldrb	r0, [r4, #8]
    c812:	7a63      	ldrb	r3, [r4, #9]
    c814:	021b      	lsls	r3, r3, #8
    c816:	4303      	orrs	r3, r0
    c818:	7aa0      	ldrb	r0, [r4, #10]
    c81a:	0400      	lsls	r0, r0, #16
    c81c:	4303      	orrs	r3, r0
    c81e:	7ae0      	ldrb	r0, [r4, #11]
    c820:	0600      	lsls	r0, r0, #24
    c822:	4318      	orrs	r0, r3
    c824:	2224      	movs	r2, #36	; 0x24
    c826:	2100      	movs	r1, #0
    c828:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    c82a:	7a20      	ldrb	r0, [r4, #8]
    c82c:	7a63      	ldrb	r3, [r4, #9]
    c82e:	021b      	lsls	r3, r3, #8
    c830:	4303      	orrs	r3, r0
    c832:	7aa0      	ldrb	r0, [r4, #10]
    c834:	0400      	lsls	r0, r0, #16
    c836:	4303      	orrs	r3, r0
    c838:	7ae0      	ldrb	r0, [r4, #11]
    c83a:	0600      	lsls	r0, r0, #24
    c83c:	4318      	orrs	r0, r3
    c83e:	2224      	movs	r2, #36	; 0x24
    c840:	491f      	ldr	r1, [pc, #124]	; (c8c0 <InitDefault433Channels+0xec>)
    c842:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    c844:	7b20      	ldrb	r0, [r4, #12]
    c846:	7b63      	ldrb	r3, [r4, #13]
    c848:	021b      	lsls	r3, r3, #8
    c84a:	4303      	orrs	r3, r0
    c84c:	7ba0      	ldrb	r0, [r4, #14]
    c84e:	0400      	lsls	r0, r0, #16
    c850:	4303      	orrs	r3, r0
    c852:	7be0      	ldrb	r0, [r4, #15]
    c854:	0600      	lsls	r0, r0, #24
    c856:	4318      	orrs	r0, r3
    c858:	220c      	movs	r2, #12
    c85a:	2100      	movs	r1, #0
    c85c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    c85e:	7b20      	ldrb	r0, [r4, #12]
    c860:	7b63      	ldrb	r3, [r4, #13]
    c862:	021b      	lsls	r3, r3, #8
    c864:	4303      	orrs	r3, r0
    c866:	7ba0      	ldrb	r0, [r4, #14]
    c868:	0400      	lsls	r0, r0, #16
    c86a:	4303      	orrs	r3, r0
    c86c:	7be0      	ldrb	r0, [r4, #15]
    c86e:	0600      	lsls	r0, r0, #24
    c870:	4318      	orrs	r0, r3
    c872:	220c      	movs	r2, #12
    c874:	4913      	ldr	r1, [pc, #76]	; (c8c4 <InitDefault433Channels+0xf0>)
    c876:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    c878:	232a      	movs	r3, #42	; 0x2a
    c87a:	56e3      	ldrsb	r3, [r4, r3]
    c87c:	2b03      	cmp	r3, #3
    c87e:	dd15      	ble.n	c8ac <InitDefault433Channels+0xd8>
    c880:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c882:	480b      	ldr	r0, [pc, #44]	; (c8b0 <InitDefault433Channels+0xdc>)
    c884:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c886:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c888:	7902      	ldrb	r2, [r0, #4]
    c88a:	7941      	ldrb	r1, [r0, #5]
    c88c:	0209      	lsls	r1, r1, #8
    c88e:	4311      	orrs	r1, r2
    c890:	7982      	ldrb	r2, [r0, #6]
    c892:	0412      	lsls	r2, r2, #16
    c894:	4311      	orrs	r1, r2
    c896:	79c2      	ldrb	r2, [r0, #7]
    c898:	0612      	lsls	r2, r2, #24
    c89a:	430a      	orrs	r2, r1
    c89c:	0059      	lsls	r1, r3, #1
    c89e:	188a      	adds	r2, r1, r2
    c8a0:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c8a2:	3301      	adds	r3, #1
    c8a4:	b2db      	uxtb	r3, r3
    c8a6:	5702      	ldrsb	r2, [r0, r4]
    c8a8:	4293      	cmp	r3, r2
    c8aa:	dbed      	blt.n	c888 <InitDefault433Channels+0xb4>
    }
}
    c8ac:	bd70      	pop	{r4, r5, r6, pc}
    c8ae:	46c0      	nop			; (mov r8, r8)
    c8b0:	200029b0 	.word	0x200029b0
    c8b4:	0001679d 	.word	0x0001679d
    c8b8:	000189e4 	.word	0x000189e4
    c8bc:	0001678b 	.word	0x0001678b
    c8c0:	0001899c 	.word	0x0001899c
    c8c4:	00018a00 	.word	0x00018a00

0000c8c8 <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    c8ca:	4c40      	ldr	r4, [pc, #256]	; (c9cc <InitDefault920Channels+0x104>)
    c8cc:	7920      	ldrb	r0, [r4, #4]
    c8ce:	7963      	ldrb	r3, [r4, #5]
    c8d0:	021b      	lsls	r3, r3, #8
    c8d2:	4303      	orrs	r3, r0
    c8d4:	79a0      	ldrb	r0, [r4, #6]
    c8d6:	0400      	lsls	r0, r0, #16
    c8d8:	4303      	orrs	r3, r0
    c8da:	79e0      	ldrb	r0, [r4, #7]
    c8dc:	0600      	lsls	r0, r0, #24
    c8de:	4318      	orrs	r0, r3
    c8e0:	2204      	movs	r2, #4
    c8e2:	2100      	movs	r1, #0
    c8e4:	4e3a      	ldr	r6, [pc, #232]	; (c9d0 <InitDefault920Channels+0x108>)
    c8e6:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    c8e8:	7a20      	ldrb	r0, [r4, #8]
    c8ea:	7a63      	ldrb	r3, [r4, #9]
    c8ec:	021b      	lsls	r3, r3, #8
    c8ee:	4303      	orrs	r3, r0
    c8f0:	7aa0      	ldrb	r0, [r4, #10]
    c8f2:	0400      	lsls	r0, r0, #16
    c8f4:	4303      	orrs	r3, r0
    c8f6:	7ae0      	ldrb	r0, [r4, #11]
    c8f8:	0600      	lsls	r0, r0, #24
    c8fa:	4318      	orrs	r0, r3
    c8fc:	2218      	movs	r2, #24
    c8fe:	2100      	movs	r1, #0
    c900:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    c902:	7920      	ldrb	r0, [r4, #4]
    c904:	7963      	ldrb	r3, [r4, #5]
    c906:	021b      	lsls	r3, r3, #8
    c908:	4303      	orrs	r3, r0
    c90a:	79a0      	ldrb	r0, [r4, #6]
    c90c:	0400      	lsls	r0, r0, #16
    c90e:	4303      	orrs	r3, r0
    c910:	79e0      	ldrb	r0, [r4, #7]
    c912:	0600      	lsls	r0, r0, #24
    c914:	4318      	orrs	r0, r3
    c916:	2204      	movs	r2, #4
    c918:	492e      	ldr	r1, [pc, #184]	; (c9d4 <InitDefault920Channels+0x10c>)
    c91a:	4d2f      	ldr	r5, [pc, #188]	; (c9d8 <InitDefault920Channels+0x110>)
    c91c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    c91e:	7a20      	ldrb	r0, [r4, #8]
    c920:	7a63      	ldrb	r3, [r4, #9]
    c922:	021b      	lsls	r3, r3, #8
    c924:	4303      	orrs	r3, r0
    c926:	7aa0      	ldrb	r0, [r4, #10]
    c928:	0400      	lsls	r0, r0, #16
    c92a:	4303      	orrs	r3, r0
    c92c:	7ae0      	ldrb	r0, [r4, #11]
    c92e:	0600      	lsls	r0, r0, #24
    c930:	4318      	orrs	r0, r3
    c932:	2218      	movs	r2, #24
    c934:	4929      	ldr	r1, [pc, #164]	; (c9dc <InitDefault920Channels+0x114>)
    c936:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    c938:	7b20      	ldrb	r0, [r4, #12]
    c93a:	7b63      	ldrb	r3, [r4, #13]
    c93c:	021b      	lsls	r3, r3, #8
    c93e:	4303      	orrs	r3, r0
    c940:	7ba0      	ldrb	r0, [r4, #14]
    c942:	0400      	lsls	r0, r0, #16
    c944:	4303      	orrs	r3, r0
    c946:	7be0      	ldrb	r0, [r4, #15]
    c948:	0600      	lsls	r0, r0, #24
    c94a:	4318      	orrs	r0, r3
    c94c:	2218      	movs	r2, #24
    c94e:	2100      	movs	r1, #0
    c950:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    c952:	7b20      	ldrb	r0, [r4, #12]
    c954:	7b63      	ldrb	r3, [r4, #13]
    c956:	021b      	lsls	r3, r3, #8
    c958:	4303      	orrs	r3, r0
    c95a:	7ba0      	ldrb	r0, [r4, #14]
    c95c:	0400      	lsls	r0, r0, #16
    c95e:	4303      	orrs	r3, r0
    c960:	7be0      	ldrb	r0, [r4, #15]
    c962:	0600      	lsls	r0, r0, #24
    c964:	4318      	orrs	r0, r3
    c966:	2218      	movs	r2, #24
    c968:	491d      	ldr	r1, [pc, #116]	; (c9e0 <InitDefault920Channels+0x118>)
    c96a:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    c96c:	0020      	movs	r0, r4
    c96e:	30af      	adds	r0, #175	; 0xaf
    c970:	30ff      	adds	r0, #255	; 0xff
    c972:	2204      	movs	r2, #4
    c974:	491b      	ldr	r1, [pc, #108]	; (c9e4 <InitDefault920Channels+0x11c>)
    c976:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    c978:	232a      	movs	r3, #42	; 0x2a
    c97a:	56e3      	ldrsb	r3, [r4, r3]
    c97c:	2b02      	cmp	r3, #2
    c97e:	dd1f      	ble.n	c9c0 <InitDefault920Channels+0xf8>
    c980:	2302      	movs	r3, #2
    c982:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c984:	4911      	ldr	r1, [pc, #68]	; (c9cc <InitDefault920Channels+0x104>)
    c986:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c988:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    c98a:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c98c:	7908      	ldrb	r0, [r1, #4]
    c98e:	794c      	ldrb	r4, [r1, #5]
    c990:	0224      	lsls	r4, r4, #8
    c992:	4304      	orrs	r4, r0
    c994:	7988      	ldrb	r0, [r1, #6]
    c996:	0400      	lsls	r0, r0, #16
    c998:	4304      	orrs	r4, r0
    c99a:	79c8      	ldrb	r0, [r1, #7]
    c99c:	0600      	lsls	r0, r0, #24
    c99e:	4320      	orrs	r0, r4
    c9a0:	0054      	lsls	r4, r2, #1
    c9a2:	1820      	adds	r0, r4, r0
    c9a4:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c9a6:	3358      	adds	r3, #88	; 0x58
    c9a8:	009b      	lsls	r3, r3, #2
    c9aa:	18cb      	adds	r3, r1, r3
    c9ac:	725d      	strb	r5, [r3, #9]
    c9ae:	729d      	strb	r5, [r3, #10]
    c9b0:	72dd      	strb	r5, [r3, #11]
    c9b2:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    c9b4:	3201      	adds	r2, #1
    c9b6:	b2d2      	uxtb	r2, r2
    c9b8:	0013      	movs	r3, r2
    c9ba:	5788      	ldrsb	r0, [r1, r6]
    c9bc:	4282      	cmp	r2, r0
    c9be:	dbe5      	blt.n	c98c <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    c9c0:	21ff      	movs	r1, #255	; 0xff
    c9c2:	2330      	movs	r3, #48	; 0x30
    c9c4:	4a01      	ldr	r2, [pc, #4]	; (c9cc <InitDefault920Channels+0x104>)
    c9c6:	54d1      	strb	r1, [r2, r3]
}
    c9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c9ca:	46c0      	nop			; (mov r8, r8)
    c9cc:	200029b0 	.word	0x200029b0
    c9d0:	0001679d 	.word	0x0001679d
    c9d4:	00018a6c 	.word	0x00018a6c
    c9d8:	0001678b 	.word	0x0001678b
    c9dc:	00018a54 	.word	0x00018a54
    c9e0:	00018a74 	.word	0x00018a74
    c9e4:	00018a70 	.word	0x00018a70

0000c9e8 <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9ea:	46d6      	mov	lr, sl
    c9ec:	464f      	mov	r7, r9
    c9ee:	4646      	mov	r6, r8
    c9f0:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    c9f2:	4c46      	ldr	r4, [pc, #280]	; (cb0c <InitDefault920ChannelsKR+0x124>)
    c9f4:	7920      	ldrb	r0, [r4, #4]
    c9f6:	7963      	ldrb	r3, [r4, #5]
    c9f8:	021b      	lsls	r3, r3, #8
    c9fa:	4303      	orrs	r3, r0
    c9fc:	79a0      	ldrb	r0, [r4, #6]
    c9fe:	0400      	lsls	r0, r0, #16
    ca00:	4303      	orrs	r3, r0
    ca02:	79e0      	ldrb	r0, [r4, #7]
    ca04:	0600      	lsls	r0, r0, #24
    ca06:	4318      	orrs	r0, r3
    ca08:	2206      	movs	r2, #6
    ca0a:	2100      	movs	r1, #0
    ca0c:	4d40      	ldr	r5, [pc, #256]	; (cb10 <InitDefault920ChannelsKR+0x128>)
    ca0e:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    ca10:	7a20      	ldrb	r0, [r4, #8]
    ca12:	7a63      	ldrb	r3, [r4, #9]
    ca14:	021b      	lsls	r3, r3, #8
    ca16:	4303      	orrs	r3, r0
    ca18:	7aa0      	ldrb	r0, [r4, #10]
    ca1a:	0400      	lsls	r0, r0, #16
    ca1c:	4303      	orrs	r3, r0
    ca1e:	7ae0      	ldrb	r0, [r4, #11]
    ca20:	0600      	lsls	r0, r0, #24
    ca22:	4318      	orrs	r0, r3
    ca24:	2224      	movs	r2, #36	; 0x24
    ca26:	2100      	movs	r1, #0
    ca28:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    ca2a:	7920      	ldrb	r0, [r4, #4]
    ca2c:	7963      	ldrb	r3, [r4, #5]
    ca2e:	021b      	lsls	r3, r3, #8
    ca30:	4303      	orrs	r3, r0
    ca32:	79a0      	ldrb	r0, [r4, #6]
    ca34:	0400      	lsls	r0, r0, #16
    ca36:	4303      	orrs	r3, r0
    ca38:	79e0      	ldrb	r0, [r4, #7]
    ca3a:	0600      	lsls	r0, r0, #24
    ca3c:	4318      	orrs	r0, r3
    ca3e:	2206      	movs	r2, #6
    ca40:	4934      	ldr	r1, [pc, #208]	; (cb14 <InitDefault920ChannelsKR+0x12c>)
    ca42:	4d35      	ldr	r5, [pc, #212]	; (cb18 <InitDefault920ChannelsKR+0x130>)
    ca44:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    ca46:	7a20      	ldrb	r0, [r4, #8]
    ca48:	7a63      	ldrb	r3, [r4, #9]
    ca4a:	021b      	lsls	r3, r3, #8
    ca4c:	4303      	orrs	r3, r0
    ca4e:	7aa0      	ldrb	r0, [r4, #10]
    ca50:	0400      	lsls	r0, r0, #16
    ca52:	4303      	orrs	r3, r0
    ca54:	7ae0      	ldrb	r0, [r4, #11]
    ca56:	0600      	lsls	r0, r0, #24
    ca58:	4318      	orrs	r0, r3
    ca5a:	2224      	movs	r2, #36	; 0x24
    ca5c:	492f      	ldr	r1, [pc, #188]	; (cb1c <InitDefault920ChannelsKR+0x134>)
    ca5e:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    ca60:	232a      	movs	r3, #42	; 0x2a
    ca62:	56e3      	ldrsb	r3, [r4, r3]
    ca64:	2b03      	cmp	r3, #3
    ca66:	dd48      	ble.n	cafa <InitDefault920ChannelsKR+0x112>
    ca68:	2103      	movs	r1, #3
    ca6a:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ca6c:	4b27      	ldr	r3, [pc, #156]	; (cb0c <InitDefault920ChannelsKR+0x124>)
    ca6e:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    ca70:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    ca72:	22e1      	movs	r2, #225	; 0xe1
    ca74:	0052      	lsls	r2, r2, #1
    ca76:	4690      	mov	r8, r2
    ca78:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    ca7a:	3a99      	subs	r2, #153	; 0x99
    ca7c:	3aff      	subs	r2, #255	; 0xff
    ca7e:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ca80:	0042      	lsls	r2, r0, #1
    ca82:	791c      	ldrb	r4, [r3, #4]
    ca84:	46a1      	mov	r9, r4
    ca86:	795c      	ldrb	r4, [r3, #5]
    ca88:	0224      	lsls	r4, r4, #8
    ca8a:	464f      	mov	r7, r9
    ca8c:	4327      	orrs	r7, r4
    ca8e:	799c      	ldrb	r4, [r3, #6]
    ca90:	0424      	lsls	r4, r4, #16
    ca92:	4327      	orrs	r7, r4
    ca94:	79dc      	ldrb	r4, [r3, #7]
    ca96:	0624      	lsls	r4, r4, #24
    ca98:	433c      	orrs	r4, r7
    ca9a:	18a4      	adds	r4, r4, r2
    ca9c:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    ca9e:	791c      	ldrb	r4, [r3, #4]
    caa0:	46a1      	mov	r9, r4
    caa2:	795c      	ldrb	r4, [r3, #5]
    caa4:	0224      	lsls	r4, r4, #8
    caa6:	464f      	mov	r7, r9
    caa8:	4327      	orrs	r7, r4
    caaa:	799c      	ldrb	r4, [r3, #6]
    caac:	0424      	lsls	r4, r4, #16
    caae:	4327      	orrs	r7, r4
    cab0:	79dc      	ldrb	r4, [r3, #7]
    cab2:	0624      	lsls	r4, r4, #24
    cab4:	433c      	orrs	r4, r7
    cab6:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    cab8:	7a1c      	ldrb	r4, [r3, #8]
    caba:	46a1      	mov	r9, r4
    cabc:	7a5c      	ldrb	r4, [r3, #9]
    cabe:	0224      	lsls	r4, r4, #8
    cac0:	464f      	mov	r7, r9
    cac2:	4327      	orrs	r7, r4
    cac4:	7a9c      	ldrb	r4, [r3, #10]
    cac6:	0424      	lsls	r4, r4, #16
    cac8:	4327      	orrs	r7, r4
    caca:	7adc      	ldrb	r4, [r3, #11]
    cacc:	0624      	lsls	r4, r4, #24
    cace:	433c      	orrs	r4, r7
    cad0:	1812      	adds	r2, r2, r0
    cad2:	0092      	lsls	r2, r2, #2
    cad4:	1912      	adds	r2, r2, r4
    cad6:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    cad8:	4642      	mov	r2, r8
    cada:	4664      	mov	r4, ip
    cadc:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    cade:	3158      	adds	r1, #88	; 0x58
    cae0:	0089      	lsls	r1, r1, #2
    cae2:	1859      	adds	r1, r3, r1
    cae4:	724d      	strb	r5, [r1, #9]
    cae6:	728d      	strb	r5, [r1, #10]
    cae8:	72cd      	strb	r5, [r1, #11]
    caea:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    caec:	3001      	adds	r0, #1
    caee:	b2c0      	uxtb	r0, r0
    caf0:	0001      	movs	r1, r0
    caf2:	4652      	mov	r2, sl
    caf4:	569a      	ldrsb	r2, [r3, r2]
    caf6:	4290      	cmp	r0, r2
    caf8:	dbc2      	blt.n	ca80 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    cafa:	21ff      	movs	r1, #255	; 0xff
    cafc:	2330      	movs	r3, #48	; 0x30
    cafe:	4a03      	ldr	r2, [pc, #12]	; (cb0c <InitDefault920ChannelsKR+0x124>)
    cb00:	54d1      	strb	r1, [r2, r3]
}
    cb02:	bc1c      	pop	{r2, r3, r4}
    cb04:	4690      	mov	r8, r2
    cb06:	4699      	mov	r9, r3
    cb08:	46a2      	mov	sl, r4
    cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb0c:	200029b0 	.word	0x200029b0
    cb10:	0001679d 	.word	0x0001679d
    cb14:	00018ab0 	.word	0x00018ab0
    cb18:	0001678b 	.word	0x0001678b
    cb1c:	00018a8c 	.word	0x00018a8c

0000cb20 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    cb20:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    cb22:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    cb24:	283c      	cmp	r0, #60	; 0x3c
    cb26:	d901      	bls.n	cb2c <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    cb28:	0018      	movs	r0, r3
    cb2a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    cb2c:	0084      	lsls	r4, r0, #2
    cb2e:	4b02      	ldr	r3, [pc, #8]	; (cb38 <LORAREG_GetAttr+0x18>)
    cb30:	58e3      	ldr	r3, [r4, r3]
    cb32:	4798      	blx	r3
    cb34:	0003      	movs	r3, r0
    cb36:	e7f7      	b.n	cb28 <LORAREG_GetAttr+0x8>
    cb38:	20001b90 	.word	0x20001b90

0000cb3c <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    cb3c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    cb3e:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    cb40:	283c      	cmp	r0, #60	; 0x3c
    cb42:	d901      	bls.n	cb48 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    cb44:	0018      	movs	r0, r3
    cb46:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    cb48:	0082      	lsls	r2, r0, #2
    cb4a:	4b02      	ldr	r3, [pc, #8]	; (cb54 <LORAREG_ValidateAttr+0x18>)
    cb4c:	58d3      	ldr	r3, [r2, r3]
    cb4e:	4798      	blx	r3
    cb50:	0003      	movs	r3, r0
    cb52:	e7f7      	b.n	cb44 <LORAREG_ValidateAttr+0x8>
    cb54:	20001d78 	.word	0x20001d78

0000cb58 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    cb58:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    cb5a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    cb5c:	283c      	cmp	r0, #60	; 0x3c
    cb5e:	d901      	bls.n	cb64 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    cb60:	0018      	movs	r0, r3
    cb62:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    cb64:	0082      	lsls	r2, r0, #2
    cb66:	4b02      	ldr	r3, [pc, #8]	; (cb70 <LORAREG_SetAttr+0x18>)
    cb68:	58d3      	ldr	r3, [r2, r3]
    cb6a:	4798      	blx	r3
    cb6c:	0003      	movs	r3, r0
    cb6e:	e7f7      	b.n	cb60 <LORAREG_SetAttr+0x8>
    cb70:	20001c84 	.word	0x20001c84

0000cb74 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    cb74:	2800      	cmp	r0, #0
    cb76:	d00e      	beq.n	cb96 <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    cb78:	2805      	cmp	r0, #5
    cb7a:	d013      	beq.n	cba4 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    cb7c:	2804      	cmp	r0, #4
    cb7e:	d017      	beq.n	cbb0 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    cb80:	2803      	cmp	r0, #3
    cb82:	d01b      	beq.n	cbbc <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    cb84:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    cb86:	2802      	cmp	r0, #2
    cb88:	d10a      	bne.n	cba0 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    cb8a:	2107      	movs	r1, #7
    cb8c:	331d      	adds	r3, #29
    cb8e:	4a0e      	ldr	r2, [pc, #56]	; (cbc8 <setDefaultTxPower+0x54>)
    cb90:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cb92:	3b1f      	subs	r3, #31
    cb94:	e004      	b.n	cba0 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    cb96:	2101      	movs	r1, #1
    cb98:	2327      	movs	r3, #39	; 0x27
    cb9a:	4a0b      	ldr	r2, [pc, #44]	; (cbc8 <setDefaultTxPower+0x54>)
    cb9c:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cb9e:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    cba0:	0018      	movs	r0, r3
    cba2:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    cba4:	2101      	movs	r1, #1
    cba6:	2327      	movs	r3, #39	; 0x27
    cba8:	4a07      	ldr	r2, [pc, #28]	; (cbc8 <setDefaultTxPower+0x54>)
    cbaa:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cbac:	3b1f      	subs	r3, #31
    cbae:	e7f7      	b.n	cba0 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    cbb0:	2101      	movs	r1, #1
    cbb2:	2327      	movs	r3, #39	; 0x27
    cbb4:	4a04      	ldr	r2, [pc, #16]	; (cbc8 <setDefaultTxPower+0x54>)
    cbb6:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cbb8:	3b1f      	subs	r3, #31
    cbba:	e7f1      	b.n	cba0 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    cbbc:	2107      	movs	r1, #7
    cbbe:	2327      	movs	r3, #39	; 0x27
    cbc0:	4a01      	ldr	r2, [pc, #4]	; (cbc8 <setDefaultTxPower+0x54>)
    cbc2:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cbc4:	3b1f      	subs	r3, #31
    cbc6:	e7eb      	b.n	cba0 <setDefaultTxPower+0x2c>
    cbc8:	200029b0 	.word	0x200029b0

0000cbcc <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    cbcc:	b510      	push	{r4, lr}
    cbce:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    cbd0:	490a      	ldr	r1, [pc, #40]	; (cbfc <Enableallchannels+0x30>)
    cbd2:	2401      	movs	r4, #1
    cbd4:	790b      	ldrb	r3, [r1, #4]
    cbd6:	794a      	ldrb	r2, [r1, #5]
    cbd8:	0212      	lsls	r2, r2, #8
    cbda:	431a      	orrs	r2, r3
    cbdc:	798b      	ldrb	r3, [r1, #6]
    cbde:	041b      	lsls	r3, r3, #16
    cbe0:	431a      	orrs	r2, r3
    cbe2:	79cb      	ldrb	r3, [r1, #7]
    cbe4:	061b      	lsls	r3, r3, #24
    cbe6:	4313      	orrs	r3, r2
    cbe8:	541c      	strb	r4, [r3, r0]
    cbea:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    cbec:	2890      	cmp	r0, #144	; 0x90
    cbee:	d1f1      	bne.n	cbd4 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    cbf0:	2100      	movs	r1, #0
    cbf2:	23ac      	movs	r3, #172	; 0xac
    cbf4:	005b      	lsls	r3, r3, #1
    cbf6:	4a01      	ldr	r2, [pc, #4]	; (cbfc <Enableallchannels+0x30>)
    cbf8:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    cbfa:	bd10      	pop	{r4, pc}
    cbfc:	200029b0 	.word	0x200029b0

0000cc00 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    cc00:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    cc02:	2800      	cmp	r0, #0
    cc04:	d00a      	beq.n	cc1c <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    cc06:	2801      	cmp	r0, #1
    cc08:	d00b      	beq.n	cc22 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    cc0a:	2805      	cmp	r0, #5
    cc0c:	d00c      	beq.n	cc28 <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    cc0e:	2804      	cmp	r0, #4
    cc10:	d00d      	beq.n	cc2e <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    cc12:	3802      	subs	r0, #2
    cc14:	2801      	cmp	r0, #1
    cc16:	d90d      	bls.n	cc34 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    cc18:	2008      	movs	r0, #8
    cc1a:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    cc1c:	4b07      	ldr	r3, [pc, #28]	; (cc3c <LORAREG_EnableallChannels+0x3c>)
    cc1e:	4798      	blx	r3
    cc20:	e7fa      	b.n	cc18 <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    cc22:	4b07      	ldr	r3, [pc, #28]	; (cc40 <LORAREG_EnableallChannels+0x40>)
    cc24:	4798      	blx	r3
    cc26:	e7f7      	b.n	cc18 <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    cc28:	4b06      	ldr	r3, [pc, #24]	; (cc44 <LORAREG_EnableallChannels+0x44>)
    cc2a:	4798      	blx	r3
    cc2c:	e7f4      	b.n	cc18 <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    cc2e:	4b06      	ldr	r3, [pc, #24]	; (cc48 <LORAREG_EnableallChannels+0x48>)
    cc30:	4798      	blx	r3
    cc32:	e7f1      	b.n	cc18 <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    cc34:	4b05      	ldr	r3, [pc, #20]	; (cc4c <LORAREG_EnableallChannels+0x4c>)
    cc36:	4798      	blx	r3
    cc38:	e7ee      	b.n	cc18 <LORAREG_EnableallChannels+0x18>
    cc3a:	46c0      	nop			; (mov r8, r8)
    cc3c:	0000c6d1 	.word	0x0000c6d1
    cc40:	0000c7d5 	.word	0x0000c7d5
    cc44:	0000c8c9 	.word	0x0000c8c9
    cc48:	0000c9e9 	.word	0x0000c9e9
    cc4c:	0000cbcd 	.word	0x0000cbcd

0000cc50 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    cc50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc52:	b083      	sub	sp, #12
    cc54:	0004      	movs	r4, r0
    cc56:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    cc58:	4a2b      	ldr	r2, [pc, #172]	; (cd08 <AESEncode+0xb8>)
    cc5a:	2101      	movs	r1, #1
    cc5c:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    cc5e:	2300      	movs	r3, #0
    cc60:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    cc62:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    cc64:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    cc66:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    cc68:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    cc6a:	4928      	ldr	r1, [pc, #160]	; (cd0c <AESEncode+0xbc>)
    cc6c:	4828      	ldr	r0, [pc, #160]	; (cd10 <AESEncode+0xc0>)
    cc6e:	4b29      	ldr	r3, [pc, #164]	; (cd14 <AESEncode+0xc4>)
    cc70:	4798      	blx	r3
    cc72:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    cc74:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    cc76:	4f28      	ldr	r7, [pc, #160]	; (cd18 <AESEncode+0xc8>)
    cc78:	1870      	adds	r0, r6, r1
    cc7a:	2300      	movs	r3, #0
    cc7c:	5cc2      	ldrb	r2, [r0, r3]
    cc7e:	555a      	strb	r2, [r3, r5]
    cc80:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    cc82:	2b04      	cmp	r3, #4
    cc84:	d1fa      	bne.n	cc7c <AESEncode+0x2c>
    cc86:	9b01      	ldr	r3, [sp, #4]
    cc88:	51cb      	str	r3, [r1, r7]
    cc8a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    cc8c:	2910      	cmp	r1, #16
    cc8e:	d1f3      	bne.n	cc78 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    cc90:	4d1f      	ldr	r5, [pc, #124]	; (cd10 <AESEncode+0xc0>)
    cc92:	4921      	ldr	r1, [pc, #132]	; (cd18 <AESEncode+0xc8>)
    cc94:	0028      	movs	r0, r5
    cc96:	4b21      	ldr	r3, [pc, #132]	; (cd1c <AESEncode+0xcc>)
    cc98:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    cc9a:	682a      	ldr	r2, [r5, #0]
    cc9c:	7913      	ldrb	r3, [r2, #4]
    cc9e:	2102      	movs	r1, #2
    cca0:	430b      	orrs	r3, r1
    cca2:	7113      	strb	r3, [r2, #4]
    cca4:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    cca6:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    cca8:	4e1b      	ldr	r6, [pc, #108]	; (cd18 <AESEncode+0xc8>)
    ccaa:	1860      	adds	r0, r4, r1
    ccac:	2300      	movs	r3, #0
    ccae:	5cc2      	ldrb	r2, [r0, r3]
    ccb0:	555a      	strb	r2, [r3, r5]
    ccb2:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    ccb4:	2b04      	cmp	r3, #4
    ccb6:	d1fa      	bne.n	ccae <AESEncode+0x5e>
    ccb8:	9b01      	ldr	r3, [sp, #4]
    ccba:	518b      	str	r3, [r1, r6]
    ccbc:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    ccbe:	2910      	cmp	r1, #16
    ccc0:	d1f3      	bne.n	ccaa <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    ccc2:	4d13      	ldr	r5, [pc, #76]	; (cd10 <AESEncode+0xc0>)
    ccc4:	4914      	ldr	r1, [pc, #80]	; (cd18 <AESEncode+0xc8>)
    ccc6:	0028      	movs	r0, r5
    ccc8:	4b15      	ldr	r3, [pc, #84]	; (cd20 <AESEncode+0xd0>)
    ccca:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    cccc:	682d      	ldr	r5, [r5, #0]
    ccce:	792b      	ldrb	r3, [r5, #4]
    ccd0:	2202      	movs	r2, #2
    ccd2:	4393      	bics	r3, r2
    ccd4:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    ccd6:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    ccd8:	2002      	movs	r0, #2
    ccda:	e001      	b.n	cce0 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    ccdc:	4211      	tst	r1, r2
    ccde:	d107      	bne.n	ccf0 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    cce0:	79eb      	ldrb	r3, [r5, #7]
    cce2:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    cce4:	000a      	movs	r2, r1
    cce6:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    cce8:	4218      	tst	r0, r3
    ccea:	d0f7      	beq.n	ccdc <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    ccec:	4302      	orrs	r2, r0
    ccee:	e7f5      	b.n	ccdc <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    ccf0:	4d09      	ldr	r5, [pc, #36]	; (cd18 <AESEncode+0xc8>)
    ccf2:	0029      	movs	r1, r5
    ccf4:	4806      	ldr	r0, [pc, #24]	; (cd10 <AESEncode+0xc0>)
    ccf6:	4b0b      	ldr	r3, [pc, #44]	; (cd24 <AESEncode+0xd4>)
    ccf8:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    ccfa:	2210      	movs	r2, #16
    ccfc:	0029      	movs	r1, r5
    ccfe:	0020      	movs	r0, r4
    cd00:	4b09      	ldr	r3, [pc, #36]	; (cd28 <AESEncode+0xd8>)
    cd02:	4798      	blx	r3
#endif	
}
    cd04:	b003      	add	sp, #12
    cd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd08:	20002bbc 	.word	0x20002bbc
    cd0c:	42003400 	.word	0x42003400
    cd10:	20002bc8 	.word	0x20002bc8
    cd14:	00004681 	.word	0x00004681
    cd18:	20001e6c 	.word	0x20001e6c
    cd1c:	00004715 	.word	0x00004715
    cd20:	00004749 	.word	0x00004749
    cd24:	00004799 	.word	0x00004799
    cd28:	0001678b 	.word	0x0001678b

0000cd2c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    cd2c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    cd2e:	4d07      	ldr	r5, [pc, #28]	; (cd4c <AESInit+0x20>)
    cd30:	0028      	movs	r0, r5
    cd32:	4b07      	ldr	r3, [pc, #28]	; (cd50 <AESInit+0x24>)
    cd34:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    cd36:	4c07      	ldr	r4, [pc, #28]	; (cd54 <AESInit+0x28>)
    cd38:	002a      	movs	r2, r5
    cd3a:	4907      	ldr	r1, [pc, #28]	; (cd58 <AESInit+0x2c>)
    cd3c:	0020      	movs	r0, r4
    cd3e:	4b07      	ldr	r3, [pc, #28]	; (cd5c <AESInit+0x30>)
    cd40:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    cd42:	0020      	movs	r0, r4
    cd44:	4b06      	ldr	r3, [pc, #24]	; (cd60 <AESInit+0x34>)
    cd46:	4798      	blx	r3
#endif	
}
    cd48:	bd70      	pop	{r4, r5, r6, pc}
    cd4a:	46c0      	nop			; (mov r8, r8)
    cd4c:	20002bbc 	.word	0x20002bbc
    cd50:	00004645 	.word	0x00004645
    cd54:	20002bc8 	.word	0x20002bc8
    cd58:	42003400 	.word	0x42003400
    cd5c:	000046f5 	.word	0x000046f5
    cd60:	0000465f 	.word	0x0000465f

0000cd64 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    cd64:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    cd66:	4b06      	ldr	r3, [pc, #24]	; (cd80 <hwTimerExpiryCallback+0x1c>)
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d100      	bne.n	cd70 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    cd6e:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    cd70:	2201      	movs	r2, #1
    cd72:	4b04      	ldr	r3, [pc, #16]	; (cd84 <hwTimerExpiryCallback+0x20>)
    cd74:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    cd76:	2001      	movs	r0, #1
    cd78:	4b03      	ldr	r3, [pc, #12]	; (cd88 <hwTimerExpiryCallback+0x24>)
    cd7a:	4798      	blx	r3
}
    cd7c:	e7f7      	b.n	cd6e <hwTimerExpiryCallback+0xa>
    cd7e:	46c0      	nop			; (mov r8, r8)
    cd80:	20001e8c 	.word	0x20001e8c
    cd84:	20002d72 	.word	0x20002d72
    cd88:	0000d681 	.word	0x0000d681

0000cd8c <hwTimerOverflowCallback>:
{
    cd8c:	b510      	push	{r4, lr}
    cd8e:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    cd90:	4925      	ldr	r1, [pc, #148]	; (ce28 <hwTimerOverflowCallback+0x9c>)
    cd92:	880a      	ldrh	r2, [r1, #0]
    cd94:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    cd96:	880b      	ldrh	r3, [r1, #0]
    cd98:	3301      	adds	r3, #1
    cd9a:	b29b      	uxth	r3, r3
    cd9c:	800b      	strh	r3, [r1, #0]
    cd9e:	429a      	cmp	r2, r3
    cda0:	d903      	bls.n	cdaa <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    cda2:	4a22      	ldr	r2, [pc, #136]	; (ce2c <hwTimerOverflowCallback+0xa0>)
    cda4:	6813      	ldr	r3, [r2, #0]
    cda6:	3301      	adds	r3, #1
    cda8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cdaa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cdae:	425a      	negs	r2, r3
    cdb0:	4153      	adcs	r3, r2
    cdb2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cdb4:	b672      	cpsid	i
    cdb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cdba:	2200      	movs	r2, #0
    cdbc:	4b1c      	ldr	r3, [pc, #112]	; (ce30 <hwTimerOverflowCallback+0xa4>)
    cdbe:	701a      	strb	r2, [r3, #0]
	return flags;
    cdc0:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    cdc2:	4b1c      	ldr	r3, [pc, #112]	; (ce34 <hwTimerOverflowCallback+0xa8>)
    cdc4:	681b      	ldr	r3, [r3, #0]
    cdc6:	2bff      	cmp	r3, #255	; 0xff
    cdc8:	d00d      	beq.n	cde6 <hwTimerOverflowCallback+0x5a>
    cdca:	0119      	lsls	r1, r3, #4
    cdcc:	4a1a      	ldr	r2, [pc, #104]	; (ce38 <hwTimerOverflowCallback+0xac>)
    cdce:	1852      	adds	r2, r2, r1
    cdd0:	7b52      	ldrb	r2, [r2, #13]
    cdd2:	2a00      	cmp	r2, #0
    cdd4:	d107      	bne.n	cde6 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    cdd6:	4a18      	ldr	r2, [pc, #96]	; (ce38 <hwTimerOverflowCallback+0xac>)
    cdd8:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    cdda:	4b13      	ldr	r3, [pc, #76]	; (ce28 <hwTimerOverflowCallback+0x9c>)
    cddc:	881b      	ldrh	r3, [r3, #0]
    cdde:	b29b      	uxth	r3, r3
    cde0:	0c02      	lsrs	r2, r0, #16
    cde2:	429a      	cmp	r2, r3
    cde4:	d00c      	beq.n	ce00 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    cde6:	23ff      	movs	r3, #255	; 0xff
    cde8:	4223      	tst	r3, r4
    cdea:	d005      	beq.n	cdf8 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    cdec:	2201      	movs	r2, #1
    cdee:	4b10      	ldr	r3, [pc, #64]	; (ce30 <hwTimerOverflowCallback+0xa4>)
    cdf0:	701a      	strb	r2, [r3, #0]
    cdf2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cdf6:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    cdf8:	4b10      	ldr	r3, [pc, #64]	; (ce3c <hwTimerOverflowCallback+0xb0>)
    cdfa:	4798      	blx	r3
}
    cdfc:	b002      	add	sp, #8
    cdfe:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    ce00:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    ce02:	28ff      	cmp	r0, #255	; 0xff
    ce04:	d909      	bls.n	ce1a <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    ce06:	4b0e      	ldr	r3, [pc, #56]	; (ce40 <hwTimerOverflowCallback+0xb4>)
    ce08:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    ce0a:	4b0a      	ldr	r3, [pc, #40]	; (ce34 <hwTimerOverflowCallback+0xa8>)
    ce0c:	681a      	ldr	r2, [r3, #0]
    ce0e:	0112      	lsls	r2, r2, #4
    ce10:	4b09      	ldr	r3, [pc, #36]	; (ce38 <hwTimerOverflowCallback+0xac>)
    ce12:	189b      	adds	r3, r3, r2
    ce14:	2201      	movs	r2, #1
    ce16:	735a      	strb	r2, [r3, #13]
    ce18:	e7e5      	b.n	cde6 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    ce1a:	2201      	movs	r2, #1
    ce1c:	4b09      	ldr	r3, [pc, #36]	; (ce44 <hwTimerOverflowCallback+0xb8>)
    ce1e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    ce20:	2001      	movs	r0, #1
    ce22:	4b09      	ldr	r3, [pc, #36]	; (ce48 <hwTimerOverflowCallback+0xbc>)
    ce24:	4798      	blx	r3
    ce26:	e7de      	b.n	cde6 <hwTimerOverflowCallback+0x5a>
    ce28:	20002d70 	.word	0x20002d70
    ce2c:	20002d74 	.word	0x20002d74
    ce30:	20000008 	.word	0x20000008
    ce34:	20001e88 	.word	0x20001e88
    ce38:	20002be0 	.word	0x20002be0
    ce3c:	0000be21 	.word	0x0000be21
    ce40:	000133e5 	.word	0x000133e5
    ce44:	20002d72 	.word	0x20002d72
    ce48:	0000d681 	.word	0x0000d681

0000ce4c <loadHwTimer>:
{
    ce4c:	b570      	push	{r4, r5, r6, lr}
    ce4e:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    ce50:	28ff      	cmp	r0, #255	; 0xff
    ce52:	d030      	beq.n	ceb6 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    ce54:	4b19      	ldr	r3, [pc, #100]	; (cebc <loadHwTimer+0x70>)
    ce56:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ce58:	4b19      	ldr	r3, [pc, #100]	; (cec0 <loadHwTimer+0x74>)
    ce5a:	881d      	ldrh	r5, [r3, #0]
    ce5c:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    ce5e:	4b19      	ldr	r3, [pc, #100]	; (cec4 <loadHwTimer+0x78>)
    ce60:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    ce62:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    ce64:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    ce66:	4a18      	ldr	r2, [pc, #96]	; (cec8 <loadHwTimer+0x7c>)
    ce68:	589b      	ldr	r3, [r3, r2]
    ce6a:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    ce6c:	4b17      	ldr	r3, [pc, #92]	; (cecc <loadHwTimer+0x80>)
    ce6e:	4298      	cmp	r0, r3
    ce70:	d81a      	bhi.n	cea8 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    ce72:	0122      	lsls	r2, r4, #4
    ce74:	4b14      	ldr	r3, [pc, #80]	; (cec8 <loadHwTimer+0x7c>)
    ce76:	189b      	adds	r3, r3, r2
    ce78:	7b5b      	ldrb	r3, [r3, #13]
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d11d      	bne.n	ceba <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    ce7e:	28ff      	cmp	r0, #255	; 0xff
    ce80:	d90b      	bls.n	ce9a <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    ce82:	4b13      	ldr	r3, [pc, #76]	; (ced0 <loadHwTimer+0x84>)
    ce84:	4298      	cmp	r0, r3
    ce86:	d818      	bhi.n	ceba <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    ce88:	b280      	uxth	r0, r0
    ce8a:	4b12      	ldr	r3, [pc, #72]	; (ced4 <loadHwTimer+0x88>)
    ce8c:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    ce8e:	0124      	lsls	r4, r4, #4
    ce90:	4b0d      	ldr	r3, [pc, #52]	; (cec8 <loadHwTimer+0x7c>)
    ce92:	191c      	adds	r4, r3, r4
    ce94:	2301      	movs	r3, #1
    ce96:	7363      	strb	r3, [r4, #13]
    ce98:	e00f      	b.n	ceba <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ce9a:	2201      	movs	r2, #1
    ce9c:	4b0e      	ldr	r3, [pc, #56]	; (ced8 <loadHwTimer+0x8c>)
    ce9e:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    cea0:	2001      	movs	r0, #1
    cea2:	4b0e      	ldr	r3, [pc, #56]	; (cedc <loadHwTimer+0x90>)
    cea4:	4798      	blx	r3
    cea6:	e008      	b.n	ceba <loadHwTimer+0x6e>
            isTimerTriggered = true;
    cea8:	2201      	movs	r2, #1
    ceaa:	4b0b      	ldr	r3, [pc, #44]	; (ced8 <loadHwTimer+0x8c>)
    ceac:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ceae:	2001      	movs	r0, #1
    ceb0:	4b0a      	ldr	r3, [pc, #40]	; (cedc <loadHwTimer+0x90>)
    ceb2:	4798      	blx	r3
    ceb4:	e001      	b.n	ceba <loadHwTimer+0x6e>
        common_tc_compare_stop();
    ceb6:	4b0a      	ldr	r3, [pc, #40]	; (cee0 <loadHwTimer+0x94>)
    ceb8:	4798      	blx	r3
}
    ceba:	bd70      	pop	{r4, r5, r6, pc}
    cebc:	20002d74 	.word	0x20002d74
    cec0:	20002d70 	.word	0x20002d70
    cec4:	00013371 	.word	0x00013371
    cec8:	20002be0 	.word	0x20002be0
    cecc:	7ffffffe 	.word	0x7ffffffe
    ced0:	0000ffff 	.word	0x0000ffff
    ced4:	000133e5 	.word	0x000133e5
    ced8:	20002d72 	.word	0x20002d72
    cedc:	0000d681 	.word	0x0000d681
    cee0:	000133bd 	.word	0x000133bd

0000cee4 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    cee4:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    cee6:	4b1d      	ldr	r3, [pc, #116]	; (cf5c <swtimerInternalHandler+0x78>)
    cee8:	781b      	ldrb	r3, [r3, #0]
    ceea:	2b00      	cmp	r3, #0
    ceec:	d027      	beq.n	cf3e <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    ceee:	2200      	movs	r2, #0
    cef0:	4b1a      	ldr	r3, [pc, #104]	; (cf5c <swtimerInternalHandler+0x78>)
    cef2:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    cef4:	4b1a      	ldr	r3, [pc, #104]	; (cf60 <swtimerInternalHandler+0x7c>)
    cef6:	781b      	ldrb	r3, [r3, #0]
    cef8:	2b00      	cmp	r3, #0
    cefa:	d020      	beq.n	cf3e <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cefc:	4b19      	ldr	r3, [pc, #100]	; (cf64 <swtimerInternalHandler+0x80>)
    cefe:	681b      	ldr	r3, [r3, #0]
    cf00:	2bff      	cmp	r3, #255	; 0xff
    cf02:	d01d      	beq.n	cf40 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    cf04:	4b18      	ldr	r3, [pc, #96]	; (cf68 <swtimerInternalHandler+0x84>)
    cf06:	6818      	ldr	r0, [r3, #0]
    cf08:	4918      	ldr	r1, [pc, #96]	; (cf6c <swtimerInternalHandler+0x88>)
    cf0a:	680b      	ldr	r3, [r1, #0]
    cf0c:	011a      	lsls	r2, r3, #4
    cf0e:	4b18      	ldr	r3, [pc, #96]	; (cf70 <swtimerInternalHandler+0x8c>)
    cf10:	189b      	adds	r3, r3, r2
    cf12:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    cf14:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    cf16:	4a16      	ldr	r2, [pc, #88]	; (cf70 <swtimerInternalHandler+0x8c>)
    cf18:	4913      	ldr	r1, [pc, #76]	; (cf68 <swtimerInternalHandler+0x84>)
    cf1a:	680b      	ldr	r3, [r1, #0]
    cf1c:	011b      	lsls	r3, r3, #4
    cf1e:	18d3      	adds	r3, r2, r3
    cf20:	7b18      	ldrb	r0, [r3, #12]
    cf22:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    cf24:	4b11      	ldr	r3, [pc, #68]	; (cf6c <swtimerInternalHandler+0x88>)
    cf26:	681b      	ldr	r3, [r3, #0]
    cf28:	011b      	lsls	r3, r3, #4
    cf2a:	18d2      	adds	r2, r2, r3
    cf2c:	23ff      	movs	r3, #255	; 0xff
    cf2e:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    cf30:	4a0b      	ldr	r2, [pc, #44]	; (cf60 <swtimerInternalHandler+0x7c>)
    cf32:	7813      	ldrb	r3, [r2, #0]
    cf34:	3b01      	subs	r3, #1
    cf36:	b2db      	uxtb	r3, r3
    cf38:	7013      	strb	r3, [r2, #0]
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d10b      	bne.n	cf56 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    cf3e:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    cf40:	4b0a      	ldr	r3, [pc, #40]	; (cf6c <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cf42:	681b      	ldr	r3, [r3, #0]
    cf44:	2bff      	cmp	r3, #255	; 0xff
    cf46:	d1dd      	bne.n	cf04 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    cf48:	4b07      	ldr	r3, [pc, #28]	; (cf68 <swtimerInternalHandler+0x84>)
    cf4a:	681b      	ldr	r3, [r3, #0]
    cf4c:	4a05      	ldr	r2, [pc, #20]	; (cf64 <swtimerInternalHandler+0x80>)
    cf4e:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    cf50:	4a06      	ldr	r2, [pc, #24]	; (cf6c <swtimerInternalHandler+0x88>)
    cf52:	6013      	str	r3, [r2, #0]
    cf54:	e7df      	b.n	cf16 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    cf56:	4b07      	ldr	r3, [pc, #28]	; (cf74 <swtimerInternalHandler+0x90>)
    cf58:	4798      	blx	r3
}
    cf5a:	e7f0      	b.n	cf3e <swtimerInternalHandler+0x5a>
    cf5c:	20002d72 	.word	0x20002d72
    cf60:	20001e8c 	.word	0x20001e8c
    cf64:	20001e80 	.word	0x20001e80
    cf68:	20001e88 	.word	0x20001e88
    cf6c:	20001e84 	.word	0x20001e84
    cf70:	20002be0 	.word	0x20002be0
    cf74:	0000ce4d 	.word	0x0000ce4d

0000cf78 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    cf78:	2300      	movs	r3, #0
    cf7a:	4a0d      	ldr	r2, [pc, #52]	; (cfb0 <SwTimerReset+0x38>)
    cf7c:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    cf7e:	4a0d      	ldr	r2, [pc, #52]	; (cfb4 <SwTimerReset+0x3c>)
    cf80:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    cf82:	33ff      	adds	r3, #255	; 0xff
    cf84:	4a0c      	ldr	r2, [pc, #48]	; (cfb8 <SwTimerReset+0x40>)
    cf86:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    cf88:	4a0c      	ldr	r2, [pc, #48]	; (cfbc <SwTimerReset+0x44>)
    cf8a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    cf8c:	4a0c      	ldr	r2, [pc, #48]	; (cfc0 <SwTimerReset+0x48>)
    cf8e:	6013      	str	r3, [r2, #0]
    cf90:	4b0c      	ldr	r3, [pc, #48]	; (cfc4 <SwTimerReset+0x4c>)
    cf92:	0018      	movs	r0, r3
    cf94:	3091      	adds	r0, #145	; 0x91
    cf96:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cf98:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    cf9a:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cf9c:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    cf9e:	601a      	str	r2, [r3, #0]
    cfa0:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    cfa2:	4283      	cmp	r3, r0
    cfa4:	d1fa      	bne.n	cf9c <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    cfa6:	2200      	movs	r2, #0
    cfa8:	4b07      	ldr	r3, [pc, #28]	; (cfc8 <SwTimerReset+0x50>)
    cfaa:	701a      	strb	r2, [r3, #0]
}
    cfac:	4770      	bx	lr
    cfae:	46c0      	nop			; (mov r8, r8)
    cfb0:	20001e8c 	.word	0x20001e8c
    cfb4:	20002d72 	.word	0x20002d72
    cfb8:	20001e88 	.word	0x20001e88
    cfbc:	20001e80 	.word	0x20001e80
    cfc0:	20001e84 	.word	0x20001e84
    cfc4:	20002be4 	.word	0x20002be4
    cfc8:	20001e7c 	.word	0x20001e7c

0000cfcc <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    cfcc:	b510      	push	{r4, lr}
    SwTimerReset();
    cfce:	4b08      	ldr	r3, [pc, #32]	; (cff0 <SystemTimerInit+0x24>)
    cfd0:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    cfd2:	2300      	movs	r3, #0
    cfd4:	4a07      	ldr	r2, [pc, #28]	; (cff4 <SystemTimerInit+0x28>)
    cfd6:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    cfd8:	4a07      	ldr	r2, [pc, #28]	; (cff8 <SystemTimerInit+0x2c>)
    cfda:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    cfdc:	4b07      	ldr	r3, [pc, #28]	; (cffc <SystemTimerInit+0x30>)
    cfde:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    cfe0:	4807      	ldr	r0, [pc, #28]	; (d000 <SystemTimerInit+0x34>)
    cfe2:	4b08      	ldr	r3, [pc, #32]	; (d004 <SystemTimerInit+0x38>)
    cfe4:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    cfe6:	4808      	ldr	r0, [pc, #32]	; (d008 <SystemTimerInit+0x3c>)
    cfe8:	4b08      	ldr	r3, [pc, #32]	; (d00c <SystemTimerInit+0x40>)
    cfea:	4798      	blx	r3
}
    cfec:	bd10      	pop	{r4, pc}
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	0000cf79 	.word	0x0000cf79
    cff4:	20002d74 	.word	0x20002d74
    cff8:	20002d70 	.word	0x20002d70
    cffc:	00013451 	.word	0x00013451
    d000:	0000cd8d 	.word	0x0000cd8d
    d004:	000134d5 	.word	0x000134d5
    d008:	0000cd65 	.word	0x0000cd65
    d00c:	000134e1 	.word	0x000134e1

0000d010 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    d010:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d012:	4b05      	ldr	r3, [pc, #20]	; (d028 <SwTimerGetTime+0x18>)
    d014:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d016:	4b05      	ldr	r3, [pc, #20]	; (d02c <SwTimerGetTime+0x1c>)
    d018:	881d      	ldrh	r5, [r3, #0]
    d01a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d01c:	4b04      	ldr	r3, [pc, #16]	; (d030 <SwTimerGetTime+0x20>)
    d01e:	4798      	blx	r3
    d020:	4328      	orrs	r0, r5
    return gettime();
}
    d022:	0021      	movs	r1, r4
    d024:	bd70      	pop	{r4, r5, r6, pc}
    d026:	46c0      	nop			; (mov r8, r8)
    d028:	20002d74 	.word	0x20002d74
    d02c:	20002d70 	.word	0x20002d70
    d030:	00013371 	.word	0x00013371

0000d034 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    d034:	b510      	push	{r4, lr}
    d036:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d038:	4b08      	ldr	r3, [pc, #32]	; (d05c <SwTimerCreate+0x28>)
    d03a:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    d03c:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d03e:	2b18      	cmp	r3, #24
    d040:	d900      	bls.n	d044 <SwTimerCreate+0x10>
    }

    return retVal;
}
    d042:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    d044:	4b06      	ldr	r3, [pc, #24]	; (d060 <SwTimerCreate+0x2c>)
    d046:	4798      	blx	r3
        *timerId = allocatedTimerId;
    d048:	4a04      	ldr	r2, [pc, #16]	; (d05c <SwTimerCreate+0x28>)
    d04a:	7813      	ldrb	r3, [r2, #0]
    d04c:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    d04e:	3301      	adds	r3, #1
    d050:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    d052:	4b04      	ldr	r3, [pc, #16]	; (d064 <SwTimerCreate+0x30>)
    d054:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d056:	2008      	movs	r0, #8
    d058:	e7f3      	b.n	d042 <SwTimerCreate+0xe>
    d05a:	46c0      	nop			; (mov r8, r8)
    d05c:	20001e7c 	.word	0x20001e7c
    d060:	0000c635 	.word	0x0000c635
    d064:	0000c641 	.word	0x0000c641

0000d068 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    d068:	b5f0      	push	{r4, r5, r6, r7, lr}
    d06a:	46d6      	mov	lr, sl
    d06c:	464f      	mov	r7, r9
    d06e:	4646      	mov	r6, r8
    d070:	b5c0      	push	{r6, r7, lr}
    d072:	b084      	sub	sp, #16
    d074:	0007      	movs	r7, r0
    d076:	000d      	movs	r5, r1
    d078:	0016      	movs	r6, r2
    d07a:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d07c:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    d07e:	2f18      	cmp	r7, #24
    d080:	d809      	bhi.n	d096 <SwTimerStart+0x2e>
    d082:	2b00      	cmp	r3, #0
    d084:	d100      	bne.n	d088 <SwTimerStart+0x20>
    d086:	e08c      	b.n	d1a2 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    d088:	013a      	lsls	r2, r7, #4
    d08a:	4b52      	ldr	r3, [pc, #328]	; (d1d4 <SwTimerStart+0x16c>)
    d08c:	189b      	adds	r3, r3, r2
    d08e:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    d090:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    d092:	2b00      	cmp	r3, #0
    d094:	d005      	beq.n	d0a2 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    d096:	b004      	add	sp, #16
    d098:	bc1c      	pop	{r2, r3, r4}
    d09a:	4690      	mov	r8, r2
    d09c:	4699      	mov	r9, r3
    d09e:	46a2      	mov	sl, r4
    d0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d0a2:	4b4d      	ldr	r3, [pc, #308]	; (d1d8 <SwTimerStart+0x170>)
    d0a4:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d0a6:	4b4d      	ldr	r3, [pc, #308]	; (d1dc <SwTimerStart+0x174>)
    d0a8:	8818      	ldrh	r0, [r3, #0]
    d0aa:	0403      	lsls	r3, r0, #16
    d0ac:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    d0ae:	4b4c      	ldr	r3, [pc, #304]	; (d1e0 <SwTimerStart+0x178>)
    d0b0:	4798      	blx	r3
    d0b2:	4643      	mov	r3, r8
    d0b4:	4303      	orrs	r3, r0
    switch (timeoutType)
    d0b6:	2e00      	cmp	r6, #0
    d0b8:	d003      	beq.n	d0c2 <SwTimerStart+0x5a>
    d0ba:	2e01      	cmp	r6, #1
    d0bc:	d038      	beq.n	d130 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    d0be:	200a      	movs	r0, #10
    d0c0:	e7e9      	b.n	d096 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d0c2:	4948      	ldr	r1, [pc, #288]	; (d1e4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d0c4:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d0c6:	002a      	movs	r2, r5
    d0c8:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    d0ca:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d0cc:	428a      	cmp	r2, r1
    d0ce:	d8e2      	bhi.n	d096 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d0d0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d0d4:	425a      	negs	r2, r3
    d0d6:	4153      	adcs	r3, r2
    d0d8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    d0da:	b672      	cpsid	i
    d0dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d0e0:	2600      	movs	r6, #0
    d0e2:	4b41      	ldr	r3, [pc, #260]	; (d1e8 <SwTimerStart+0x180>)
    d0e4:	701e      	strb	r6, [r3, #0]
	return flags;
    d0e6:	9b03      	ldr	r3, [sp, #12]
    d0e8:	4699      	mov	r9, r3
    swtimerInternalHandler();
    d0ea:	4b40      	ldr	r3, [pc, #256]	; (d1ec <SwTimerStart+0x184>)
    d0ec:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    d0ee:	4b39      	ldr	r3, [pc, #228]	; (d1d4 <SwTimerStart+0x16c>)
    d0f0:	013a      	lsls	r2, r7, #4
    d0f2:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    d0f4:	189b      	adds	r3, r3, r2
    d0f6:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    d0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d0fa:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    d0fc:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    d0fe:	4a3c      	ldr	r2, [pc, #240]	; (d1f0 <SwTimerStart+0x188>)
    d100:	7813      	ldrb	r3, [r2, #0]
    d102:	3301      	adds	r3, #1
    d104:	b2db      	uxtb	r3, r3
    d106:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    d108:	4b3a      	ldr	r3, [pc, #232]	; (d1f4 <SwTimerStart+0x18c>)
    d10a:	681b      	ldr	r3, [r3, #0]
    d10c:	469a      	mov	sl, r3
    d10e:	2bff      	cmp	r3, #255	; 0xff
    d110:	d016      	beq.n	d140 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    d112:	466a      	mov	r2, sp
    d114:	7013      	strb	r3, [r2, #0]
    d116:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    d118:	4b35      	ldr	r3, [pc, #212]	; (d1f0 <SwTimerStart+0x188>)
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	2b00      	cmp	r3, #0
    d11e:	d042      	beq.n	d1a6 <SwTimerStart+0x13e>
    d120:	9200      	str	r2, [sp, #0]
    d122:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d124:	492b      	ldr	r1, [pc, #172]	; (d1d4 <SwTimerStart+0x16c>)
    d126:	4688      	mov	r8, r1
    d128:	4833      	ldr	r0, [pc, #204]	; (d1f8 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    d12a:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    d12c:	4c30      	ldr	r4, [pc, #192]	; (d1f0 <SwTimerStart+0x188>)
    d12e:	e02a      	b.n	d186 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d130:	0028      	movs	r0, r5
    d132:	38ff      	subs	r0, #255	; 0xff
    d134:	1ac3      	subs	r3, r0, r3
    d136:	4a2b      	ldr	r2, [pc, #172]	; (d1e4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d138:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d13a:	4293      	cmp	r3, r2
    d13c:	d9c8      	bls.n	d0d0 <SwTimerStart+0x68>
    d13e:	e7aa      	b.n	d096 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    d140:	4b2c      	ldr	r3, [pc, #176]	; (d1f4 <SwTimerStart+0x18c>)
    d142:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    d144:	0038      	movs	r0, r7
    d146:	4b2d      	ldr	r3, [pc, #180]	; (d1fc <SwTimerStart+0x194>)
    d148:	4798      	blx	r3
    d14a:	e036      	b.n	d1ba <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    d14c:	4b21      	ldr	r3, [pc, #132]	; (d1d4 <SwTimerStart+0x16c>)
    d14e:	013c      	lsls	r4, r7, #4
    d150:	191c      	adds	r4, r3, r4
    d152:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    d154:	9901      	ldr	r1, [sp, #4]
    d156:	0109      	lsls	r1, r1, #4
    d158:	1859      	adds	r1, r3, r1
    d15a:	2300      	movs	r3, #0
    d15c:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    d15e:	4592      	cmp	sl, r2
    d160:	d005      	beq.n	d16e <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    d162:	9b00      	ldr	r3, [sp, #0]
    d164:	0118      	lsls	r0, r3, #4
    d166:	4b1b      	ldr	r3, [pc, #108]	; (d1d4 <SwTimerStart+0x16c>)
    d168:	1818      	adds	r0, r3, r0
    d16a:	7307      	strb	r7, [r0, #12]
    d16c:	e025      	b.n	d1ba <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    d16e:	4b21      	ldr	r3, [pc, #132]	; (d1f4 <SwTimerStart+0x18c>)
    d170:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    d172:	0038      	movs	r0, r7
    d174:	4b21      	ldr	r3, [pc, #132]	; (d1fc <SwTimerStart+0x194>)
    d176:	4798      	blx	r3
    d178:	e01f      	b.n	d1ba <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    d17a:	3301      	adds	r3, #1
    d17c:	b2db      	uxtb	r3, r3
    d17e:	7821      	ldrb	r1, [r4, #0]
    d180:	b2c9      	uxtb	r1, r1
    d182:	428b      	cmp	r3, r1
    d184:	d210      	bcs.n	d1a8 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    d186:	2aff      	cmp	r2, #255	; 0xff
    d188:	d0f7      	beq.n	d17a <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d18a:	9201      	str	r2, [sp, #4]
    d18c:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    d18e:	4646      	mov	r6, r8
    d190:	5989      	ldr	r1, [r1, r6]
    d192:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d194:	4281      	cmp	r1, r0
    d196:	d8d9      	bhi.n	d14c <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    d198:	0111      	lsls	r1, r2, #4
    d19a:	4461      	add	r1, ip
    d19c:	9200      	str	r2, [sp, #0]
    d19e:	7b0a      	ldrb	r2, [r1, #12]
    d1a0:	e7eb      	b.n	d17a <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    d1a2:	200a      	movs	r0, #10
    d1a4:	e777      	b.n	d096 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    d1a6:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    d1a8:	4b0a      	ldr	r3, [pc, #40]	; (d1d4 <SwTimerStart+0x16c>)
    d1aa:	9a00      	ldr	r2, [sp, #0]
    d1ac:	0110      	lsls	r0, r2, #4
    d1ae:	1818      	adds	r0, r3, r0
    d1b0:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    d1b2:	013f      	lsls	r7, r7, #4
    d1b4:	19df      	adds	r7, r3, r7
    d1b6:	23ff      	movs	r3, #255	; 0xff
    d1b8:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    d1ba:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    d1bc:	2008      	movs	r0, #8
    d1be:	464a      	mov	r2, r9
    d1c0:	4213      	tst	r3, r2
    d1c2:	d100      	bne.n	d1c6 <SwTimerStart+0x15e>
    d1c4:	e767      	b.n	d096 <SwTimerStart+0x2e>
		cpu_irq_enable();
    d1c6:	2201      	movs	r2, #1
    d1c8:	4b07      	ldr	r3, [pc, #28]	; (d1e8 <SwTimerStart+0x180>)
    d1ca:	701a      	strb	r2, [r3, #0]
    d1cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d1d0:	b662      	cpsie	i
    d1d2:	e760      	b.n	d096 <SwTimerStart+0x2e>
    d1d4:	20002be0 	.word	0x20002be0
    d1d8:	20002d74 	.word	0x20002d74
    d1dc:	20002d70 	.word	0x20002d70
    d1e0:	00013371 	.word	0x00013371
    d1e4:	7fffff00 	.word	0x7fffff00
    d1e8:	20000008 	.word	0x20000008
    d1ec:	0000cee5 	.word	0x0000cee5
    d1f0:	20001e8c 	.word	0x20001e8c
    d1f4:	20001e88 	.word	0x20001e88
    d1f8:	7ffffffe 	.word	0x7ffffffe
    d1fc:	0000ce4d 	.word	0x0000ce4d

0000d200 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    d200:	0103      	lsls	r3, r0, #4
    d202:	4803      	ldr	r0, [pc, #12]	; (d210 <SwTimerIsRunning+0x10>)
    d204:	18c0      	adds	r0, r0, r3
    d206:	6840      	ldr	r0, [r0, #4]
    d208:	1e43      	subs	r3, r0, #1
    d20a:	4198      	sbcs	r0, r3
    d20c:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    d20e:	4770      	bx	lr
    d210:	20002be0 	.word	0x20002be0

0000d214 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    d214:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    d216:	0102      	lsls	r2, r0, #4
    d218:	4b0d      	ldr	r3, [pc, #52]	; (d250 <SwTimerReadValue+0x3c>)
    d21a:	189b      	adds	r3, r3, r2
    d21c:	685b      	ldr	r3, [r3, #4]
    d21e:	2b00      	cmp	r3, #0
    d220:	d014      	beq.n	d24c <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    d222:	4b0b      	ldr	r3, [pc, #44]	; (d250 <SwTimerReadValue+0x3c>)
    d224:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    d226:	4b0b      	ldr	r3, [pc, #44]	; (d254 <SwTimerReadValue+0x40>)
    d228:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d22a:	4b0b      	ldr	r3, [pc, #44]	; (d258 <SwTimerReadValue+0x44>)
    d22c:	881c      	ldrh	r4, [r3, #0]
    d22e:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    d230:	4b0a      	ldr	r3, [pc, #40]	; (d25c <SwTimerReadValue+0x48>)
    d232:	4798      	blx	r3
    d234:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    d236:	4285      	cmp	r5, r0
    d238:	d305      	bcc.n	d246 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    d23a:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    d23c:	4b08      	ldr	r3, [pc, #32]	; (d260 <SwTimerReadValue+0x4c>)
    d23e:	4298      	cmp	r0, r3
    d240:	d900      	bls.n	d244 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    d242:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    d244:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    d246:	3d01      	subs	r5, #1
    d248:	1a28      	subs	r0, r5, r0
    d24a:	e7f7      	b.n	d23c <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    d24c:	2000      	movs	r0, #0
    return remainingTime;
    d24e:	e7f9      	b.n	d244 <SwTimerReadValue+0x30>
    d250:	20002be0 	.word	0x20002be0
    d254:	20002d74 	.word	0x20002d74
    d258:	20002d70 	.word	0x20002d70
    d25c:	00013371 	.word	0x00013371
    d260:	7ffffffe 	.word	0x7ffffffe

0000d264 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    d264:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    d266:	4b05      	ldr	r3, [pc, #20]	; (d27c <SwTimerNextExpiryDuration+0x18>)
    d268:	6818      	ldr	r0, [r3, #0]
    d26a:	28ff      	cmp	r0, #255	; 0xff
    d26c:	d102      	bne.n	d274 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    d26e:	2001      	movs	r0, #1
    d270:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    d272:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    d274:	b2c0      	uxtb	r0, r0
    d276:	4b02      	ldr	r3, [pc, #8]	; (d280 <SwTimerNextExpiryDuration+0x1c>)
    d278:	4798      	blx	r3
    d27a:	e7fa      	b.n	d272 <SwTimerNextExpiryDuration+0xe>
    d27c:	20001e88 	.word	0x20001e88
    d280:	0000d215 	.word	0x0000d215

0000d284 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    d284:	b5f0      	push	{r4, r5, r6, r7, lr}
    d286:	46de      	mov	lr, fp
    d288:	4657      	mov	r7, sl
    d28a:	464e      	mov	r6, r9
    d28c:	4645      	mov	r5, r8
    d28e:	b5e0      	push	{r5, r6, r7, lr}
    d290:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    d292:	4b2f      	ldr	r3, [pc, #188]	; (d350 <SwTimersExecute+0xcc>)
    d294:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d296:	4b2f      	ldr	r3, [pc, #188]	; (d354 <SwTimersExecute+0xd0>)
    d298:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    d29a:	4b2f      	ldr	r3, [pc, #188]	; (d358 <SwTimersExecute+0xd4>)
    d29c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d29e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d2a2:	4253      	negs	r3, r2
    d2a4:	4153      	adcs	r3, r2
    d2a6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d2a8:	b672      	cpsid	i
    d2aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d2ae:	2200      	movs	r2, #0
    d2b0:	4b2a      	ldr	r3, [pc, #168]	; (d35c <SwTimersExecute+0xd8>)
    d2b2:	701a      	strb	r2, [r3, #0]
	return flags;
    d2b4:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    d2b6:	4b2a      	ldr	r3, [pc, #168]	; (d360 <SwTimersExecute+0xdc>)
    d2b8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d2ba:	23ff      	movs	r3, #255	; 0xff
    d2bc:	4223      	tst	r3, r4
    d2be:	d005      	beq.n	d2cc <SwTimersExecute+0x48>
		cpu_irq_enable();
    d2c0:	2201      	movs	r2, #1
    d2c2:	4b26      	ldr	r3, [pc, #152]	; (d35c <SwTimersExecute+0xd8>)
    d2c4:	701a      	strb	r2, [r3, #0]
    d2c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d2ca:	b662      	cpsie	i
	cpu_irq_disable();
    d2cc:	4b23      	ldr	r3, [pc, #140]	; (d35c <SwTimersExecute+0xd8>)
    d2ce:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d2d0:	4c24      	ldr	r4, [pc, #144]	; (d364 <SwTimersExecute+0xe0>)
    d2d2:	4b25      	ldr	r3, [pc, #148]	; (d368 <SwTimersExecute+0xe4>)
    d2d4:	4699      	mov	r9, r3
    d2d6:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d2d8:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    d2da:	4b24      	ldr	r3, [pc, #144]	; (d36c <SwTimersExecute+0xe8>)
    d2dc:	4698      	mov	r8, r3
		cpu_irq_enable();
    d2de:	4b1f      	ldr	r3, [pc, #124]	; (d35c <SwTimersExecute+0xd8>)
    d2e0:	469c      	mov	ip, r3
    d2e2:	e004      	b.n	d2ee <SwTimersExecute+0x6a>
    d2e4:	4643      	mov	r3, r8
    d2e6:	6018      	str	r0, [r3, #0]
    d2e8:	e01e      	b.n	d328 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    d2ea:	2e00      	cmp	r6, #0
    d2ec:	d125      	bne.n	d33a <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    d2ee:	4b1d      	ldr	r3, [pc, #116]	; (d364 <SwTimersExecute+0xe0>)
    d2f0:	681b      	ldr	r3, [r3, #0]
    d2f2:	2bff      	cmp	r3, #255	; 0xff
    d2f4:	d024      	beq.n	d340 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d2f6:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d2fa:	424b      	negs	r3, r1
    d2fc:	414b      	adcs	r3, r1
    d2fe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d300:	b672      	cpsid	i
    d302:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d306:	4653      	mov	r3, sl
    d308:	701a      	strb	r2, [r3, #0]
	return flags;
    d30a:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d30c:	6823      	ldr	r3, [r4, #0]
    d30e:	011b      	lsls	r3, r3, #4
    d310:	444b      	add	r3, r9
    d312:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    d314:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    d316:	689d      	ldr	r5, [r3, #8]
    d318:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d31a:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    d31c:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    d31e:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    d320:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    d322:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    d324:	29ff      	cmp	r1, #255	; 0xff
    d326:	d0dd      	beq.n	d2e4 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    d328:	4238      	tst	r0, r7
    d32a:	d0de      	beq.n	d2ea <SwTimersExecute+0x66>
		cpu_irq_enable();
    d32c:	2301      	movs	r3, #1
    d32e:	4661      	mov	r1, ip
    d330:	700b      	strb	r3, [r1, #0]
    d332:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d336:	b662      	cpsie	i
    d338:	e7d7      	b.n	d2ea <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    d33a:	4658      	mov	r0, fp
    d33c:	47b0      	blx	r6
    d33e:	e7ca      	b.n	d2d6 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    d340:	b003      	add	sp, #12
    d342:	bc3c      	pop	{r2, r3, r4, r5}
    d344:	4690      	mov	r8, r2
    d346:	4699      	mov	r9, r3
    d348:	46a2      	mov	sl, r4
    d34a:	46ab      	mov	fp, r5
    d34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d34e:	46c0      	nop			; (mov r8, r8)
    d350:	20002d74 	.word	0x20002d74
    d354:	20002d70 	.word	0x20002d70
    d358:	00013371 	.word	0x00013371
    d35c:	20000008 	.word	0x20000008
    d360:	0000cee5 	.word	0x0000cee5
    d364:	20001e80 	.word	0x20001e80
    d368:	20002be0 	.word	0x20002be0
    d36c:	20001e84 	.word	0x20001e84

0000d370 <TIMER_TaskHandler>:
{
    d370:	b510      	push	{r4, lr}
    SwTimersExecute();
    d372:	4b02      	ldr	r3, [pc, #8]	; (d37c <TIMER_TaskHandler+0xc>)
    d374:	4798      	blx	r3
}
    d376:	2000      	movs	r0, #0
    d378:	bd10      	pop	{r4, pc}
    d37a:	46c0      	nop			; (mov r8, r8)
    d37c:	0000d285 	.word	0x0000d285

0000d380 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    d380:	b570      	push	{r4, r5, r6, lr}
    d382:	b082      	sub	sp, #8
    d384:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d386:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    d388:	2c18      	cmp	r4, #24
    d38a:	d901      	bls.n	d390 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    d38c:	b002      	add	sp, #8
    d38e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d390:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d394:	425a      	negs	r2, r3
    d396:	4153      	adcs	r3, r2
    d398:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d39a:	b672      	cpsid	i
    d39c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d3a0:	2200      	movs	r2, #0
    d3a2:	4b47      	ldr	r3, [pc, #284]	; (d4c0 <SwTimerStop+0x140>)
    d3a4:	701a      	strb	r2, [r3, #0]
	return flags;
    d3a6:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    d3a8:	4b46      	ldr	r3, [pc, #280]	; (d4c4 <SwTimerStop+0x144>)
    d3aa:	4798      	blx	r3
    if (runningTimers > 0)
    d3ac:	4b46      	ldr	r3, [pc, #280]	; (d4c8 <SwTimerStop+0x148>)
    d3ae:	781b      	ldrb	r3, [r3, #0]
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d040      	beq.n	d436 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    d3b4:	4b44      	ldr	r3, [pc, #272]	; (d4c8 <SwTimerStop+0x148>)
    d3b6:	781b      	ldrb	r3, [r3, #0]
    d3b8:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    d3ba:	4a44      	ldr	r2, [pc, #272]	; (d4cc <SwTimerStop+0x14c>)
    d3bc:	6816      	ldr	r6, [r2, #0]
    d3be:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d038      	beq.n	d436 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d3c4:	428c      	cmp	r4, r1
    d3c6:	d00b      	beq.n	d3e0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d3c8:	4841      	ldr	r0, [pc, #260]	; (d4d0 <SwTimerStop+0x150>)
    d3ca:	010a      	lsls	r2, r1, #4
    d3cc:	1882      	adds	r2, r0, r2
    d3ce:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    d3d0:	3b01      	subs	r3, #1
    d3d2:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    d3d4:	2b00      	cmp	r3, #0
    d3d6:	d02e      	beq.n	d436 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d3d8:	4294      	cmp	r4, r2
    d3da:	d001      	beq.n	d3e0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d3dc:	0011      	movs	r1, r2
    d3de:	e7f4      	b.n	d3ca <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    d3e0:	42a6      	cmp	r6, r4
    d3e2:	d01d      	beq.n	d420 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d3e4:	4b3a      	ldr	r3, [pc, #232]	; (d4d0 <SwTimerStop+0x150>)
    d3e6:	0122      	lsls	r2, r4, #4
    d3e8:	189a      	adds	r2, r3, r2
    d3ea:	7b12      	ldrb	r2, [r2, #12]
    d3ec:	0109      	lsls	r1, r1, #4
    d3ee:	1859      	adds	r1, r3, r1
    d3f0:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    d3f2:	0122      	lsls	r2, r4, #4
    d3f4:	4b36      	ldr	r3, [pc, #216]	; (d4d0 <SwTimerStop+0x150>)
    d3f6:	189b      	adds	r3, r3, r2
    d3f8:	22ff      	movs	r2, #255	; 0xff
    d3fa:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    d3fc:	4a32      	ldr	r2, [pc, #200]	; (d4c8 <SwTimerStop+0x148>)
    d3fe:	7813      	ldrb	r3, [r2, #0]
    d400:	3b01      	subs	r3, #1
    d402:	b2db      	uxtb	r3, r3
    d404:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    d406:	0124      	lsls	r4, r4, #4
    d408:	4b31      	ldr	r3, [pc, #196]	; (d4d0 <SwTimerStop+0x150>)
    d40a:	191c      	adds	r4, r3, r4
    d40c:	2300      	movs	r3, #0
    d40e:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    d410:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    d412:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    d414:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    d416:	2008      	movs	r0, #8
    d418:	422b      	tst	r3, r5
    d41a:	d0b7      	beq.n	d38c <SwTimerStop+0xc>
    d41c:	2301      	movs	r3, #1
    d41e:	e040      	b.n	d4a2 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    d420:	4b2c      	ldr	r3, [pc, #176]	; (d4d4 <SwTimerStop+0x154>)
    d422:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    d424:	0122      	lsls	r2, r4, #4
    d426:	4b2a      	ldr	r3, [pc, #168]	; (d4d0 <SwTimerStop+0x150>)
    d428:	189b      	adds	r3, r3, r2
    d42a:	7b18      	ldrb	r0, [r3, #12]
    d42c:	4b27      	ldr	r3, [pc, #156]	; (d4cc <SwTimerStop+0x14c>)
    d42e:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    d430:	4b29      	ldr	r3, [pc, #164]	; (d4d8 <SwTimerStop+0x158>)
    d432:	4798      	blx	r3
    d434:	e7dd      	b.n	d3f2 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    d436:	4b29      	ldr	r3, [pc, #164]	; (d4dc <SwTimerStop+0x15c>)
    d438:	6818      	ldr	r0, [r3, #0]
    d43a:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    d43c:	2aff      	cmp	r2, #255	; 0xff
    d43e:	d02c      	beq.n	d49a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d440:	4294      	cmp	r4, r2
    d442:	d009      	beq.n	d458 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d444:	4922      	ldr	r1, [pc, #136]	; (d4d0 <SwTimerStop+0x150>)
    d446:	0113      	lsls	r3, r2, #4
    d448:	18cb      	adds	r3, r1, r3
    d44a:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d44c:	2bff      	cmp	r3, #255	; 0xff
    d44e:	d024      	beq.n	d49a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d450:	429c      	cmp	r4, r3
    d452:	d001      	beq.n	d458 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d454:	001a      	movs	r2, r3
    d456:	e7f6      	b.n	d446 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d458:	42a0      	cmp	r0, r4
    d45a:	d00d      	beq.n	d478 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d45c:	4b1c      	ldr	r3, [pc, #112]	; (d4d0 <SwTimerStop+0x150>)
    d45e:	0121      	lsls	r1, r4, #4
    d460:	1859      	adds	r1, r3, r1
    d462:	7b09      	ldrb	r1, [r1, #12]
    d464:	0110      	lsls	r0, r2, #4
    d466:	181b      	adds	r3, r3, r0
    d468:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d46a:	4b1d      	ldr	r3, [pc, #116]	; (d4e0 <SwTimerStop+0x160>)
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	429c      	cmp	r4, r3
    d470:	d1c9      	bne.n	d406 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d472:	4b1b      	ldr	r3, [pc, #108]	; (d4e0 <SwTimerStop+0x160>)
    d474:	601a      	str	r2, [r3, #0]
    d476:	e7c6      	b.n	d406 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d478:	4b19      	ldr	r3, [pc, #100]	; (d4e0 <SwTimerStop+0x160>)
    d47a:	681b      	ldr	r3, [r3, #0]
    d47c:	4298      	cmp	r0, r3
    d47e:	d006      	beq.n	d48e <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d480:	0100      	lsls	r0, r0, #4
    d482:	4b13      	ldr	r3, [pc, #76]	; (d4d0 <SwTimerStop+0x150>)
    d484:	1818      	adds	r0, r3, r0
    d486:	7b02      	ldrb	r2, [r0, #12]
    d488:	4b14      	ldr	r3, [pc, #80]	; (d4dc <SwTimerStop+0x15c>)
    d48a:	601a      	str	r2, [r3, #0]
    d48c:	e7bb      	b.n	d406 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d48e:	23ff      	movs	r3, #255	; 0xff
    d490:	4a13      	ldr	r2, [pc, #76]	; (d4e0 <SwTimerStop+0x160>)
    d492:	6013      	str	r3, [r2, #0]
    d494:	4a11      	ldr	r2, [pc, #68]	; (d4dc <SwTimerStop+0x15c>)
    d496:	6013      	str	r3, [r2, #0]
    d498:	e7b5      	b.n	d406 <SwTimerStop+0x86>
    d49a:	23ff      	movs	r3, #255	; 0xff
    d49c:	422b      	tst	r3, r5
    d49e:	d00a      	beq.n	d4b6 <SwTimerStop+0x136>
    d4a0:	2300      	movs	r3, #0
		cpu_irq_enable();
    d4a2:	2101      	movs	r1, #1
    d4a4:	4a06      	ldr	r2, [pc, #24]	; (d4c0 <SwTimerStop+0x140>)
    d4a6:	7011      	strb	r1, [r2, #0]
    d4a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d4ac:	b662      	cpsie	i
    if (timerStopReqStatus)
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	d103      	bne.n	d4ba <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d4b2:	2015      	movs	r0, #21
    d4b4:	e76a      	b.n	d38c <SwTimerStop+0xc>
    d4b6:	2015      	movs	r0, #21
    d4b8:	e768      	b.n	d38c <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    d4ba:	2008      	movs	r0, #8
    d4bc:	e766      	b.n	d38c <SwTimerStop+0xc>
    d4be:	46c0      	nop			; (mov r8, r8)
    d4c0:	20000008 	.word	0x20000008
    d4c4:	0000cee5 	.word	0x0000cee5
    d4c8:	20001e8c 	.word	0x20001e8c
    d4cc:	20001e88 	.word	0x20001e88
    d4d0:	20002be0 	.word	0x20002be0
    d4d4:	000133bd 	.word	0x000133bd
    d4d8:	0000ce4d 	.word	0x0000ce4d
    d4dc:	20001e80 	.word	0x20001e80
    d4e0:	20001e84 	.word	0x20001e84

0000d4e4 <SwTimerRunRemainingTime>:
{
    d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4e6:	b083      	sub	sp, #12
    d4e8:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d4ea:	4b0b      	ldr	r3, [pc, #44]	; (d518 <SwTimerRunRemainingTime+0x34>)
    d4ec:	681c      	ldr	r4, [r3, #0]
    d4ee:	0122      	lsls	r2, r4, #4
    d4f0:	4b0a      	ldr	r3, [pc, #40]	; (d51c <SwTimerRunRemainingTime+0x38>)
    d4f2:	189b      	adds	r3, r3, r2
    d4f4:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    d4f6:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    d4f8:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    d4fa:	0020      	movs	r0, r4
    d4fc:	4b08      	ldr	r3, [pc, #32]	; (d520 <SwTimerRunRemainingTime+0x3c>)
    d4fe:	4798      	blx	r3
    d500:	2808      	cmp	r0, #8
    d502:	d001      	beq.n	d508 <SwTimerRunRemainingTime+0x24>
}
    d504:	b003      	add	sp, #12
    d506:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    d508:	9700      	str	r7, [sp, #0]
    d50a:	0033      	movs	r3, r6
    d50c:	2200      	movs	r2, #0
    d50e:	0029      	movs	r1, r5
    d510:	0020      	movs	r0, r4
    d512:	4c04      	ldr	r4, [pc, #16]	; (d524 <SwTimerRunRemainingTime+0x40>)
    d514:	47a0      	blx	r4
}
    d516:	e7f5      	b.n	d504 <SwTimerRunRemainingTime+0x20>
    d518:	20001e88 	.word	0x20001e88
    d51c:	20002be0 	.word	0x20002be0
    d520:	0000d381 	.word	0x0000d381
    d524:	0000d069 	.word	0x0000d069

0000d528 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    d528:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    d52a:	4b22      	ldr	r3, [pc, #136]	; (d5b4 <SystemTimerSync+0x8c>)
    d52c:	681c      	ldr	r4, [r3, #0]
    d52e:	685d      	ldr	r5, [r3, #4]
    d530:	1900      	adds	r0, r0, r4
    d532:	4169      	adcs	r1, r5
    d534:	6018      	str	r0, [r3, #0]
    d536:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    d538:	4b1f      	ldr	r3, [pc, #124]	; (d5b8 <SystemTimerSync+0x90>)
    d53a:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    d53c:	0c02      	lsrs	r2, r0, #16
    d53e:	4b1f      	ldr	r3, [pc, #124]	; (d5bc <SystemTimerSync+0x94>)
    d540:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    d542:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    d544:	4b1e      	ldr	r3, [pc, #120]	; (d5c0 <SystemTimerSync+0x98>)
    d546:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    d548:	4a1e      	ldr	r2, [pc, #120]	; (d5c4 <SystemTimerSync+0x9c>)
    d54a:	7812      	ldrb	r2, [r2, #0]
    d54c:	2a00      	cmp	r2, #0
    d54e:	d012      	beq.n	d576 <SystemTimerSync+0x4e>
    d550:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d552:	4c1d      	ldr	r4, [pc, #116]	; (d5c8 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    d554:	4d1b      	ldr	r5, [pc, #108]	; (d5c4 <SystemTimerSync+0x9c>)
    d556:	e005      	b.n	d564 <SystemTimerSync+0x3c>
    d558:	3201      	adds	r2, #1
    d55a:	b2d2      	uxtb	r2, r2
    d55c:	7829      	ldrb	r1, [r5, #0]
    d55e:	b2c9      	uxtb	r1, r1
    d560:	4291      	cmp	r1, r2
    d562:	d908      	bls.n	d576 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    d564:	2bff      	cmp	r3, #255	; 0xff
    d566:	d0f7      	beq.n	d558 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d568:	011b      	lsls	r3, r3, #4
    d56a:	5919      	ldr	r1, [r3, r4]
    d56c:	1a09      	subs	r1, r1, r0
    d56e:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    d570:	18e3      	adds	r3, r4, r3
    d572:	7b1b      	ldrb	r3, [r3, #12]
    d574:	e7f0      	b.n	d558 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    d576:	4b15      	ldr	r3, [pc, #84]	; (d5cc <SystemTimerSync+0xa4>)
    d578:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d57a:	4815      	ldr	r0, [pc, #84]	; (d5d0 <SystemTimerSync+0xa8>)
    d57c:	4b15      	ldr	r3, [pc, #84]	; (d5d4 <SystemTimerSync+0xac>)
    d57e:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d580:	4815      	ldr	r0, [pc, #84]	; (d5d8 <SystemTimerSync+0xb0>)
    d582:	4b16      	ldr	r3, [pc, #88]	; (d5dc <SystemTimerSync+0xb4>)
    d584:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    d586:	4b0f      	ldr	r3, [pc, #60]	; (d5c4 <SystemTimerSync+0x9c>)
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	2b00      	cmp	r3, #0
    d58c:	d009      	beq.n	d5a2 <SystemTimerSync+0x7a>
    d58e:	4b0c      	ldr	r3, [pc, #48]	; (d5c0 <SystemTimerSync+0x98>)
    d590:	681b      	ldr	r3, [r3, #0]
    d592:	2bff      	cmp	r3, #255	; 0xff
    d594:	d005      	beq.n	d5a2 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    d596:	4b12      	ldr	r3, [pc, #72]	; (d5e0 <SystemTimerSync+0xb8>)
    d598:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    d59a:	28fe      	cmp	r0, #254	; 0xfe
    d59c:	d902      	bls.n	d5a4 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    d59e:	4b11      	ldr	r3, [pc, #68]	; (d5e4 <SystemTimerSync+0xbc>)
    d5a0:	4798      	blx	r3
        }
    }
}
    d5a2:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    d5a4:	2201      	movs	r2, #1
    d5a6:	4b10      	ldr	r3, [pc, #64]	; (d5e8 <SystemTimerSync+0xc0>)
    d5a8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d5aa:	2001      	movs	r0, #1
    d5ac:	4b0f      	ldr	r3, [pc, #60]	; (d5ec <SystemTimerSync+0xc4>)
    d5ae:	4798      	blx	r3
    d5b0:	e7f7      	b.n	d5a2 <SystemTimerSync+0x7a>
    d5b2:	46c0      	nop			; (mov r8, r8)
    d5b4:	20001e90 	.word	0x20001e90
    d5b8:	20002d74 	.word	0x20002d74
    d5bc:	20002d70 	.word	0x20002d70
    d5c0:	20001e88 	.word	0x20001e88
    d5c4:	20001e8c 	.word	0x20001e8c
    d5c8:	20002be0 	.word	0x20002be0
    d5cc:	00013451 	.word	0x00013451
    d5d0:	0000cd8d 	.word	0x0000cd8d
    d5d4:	000134d5 	.word	0x000134d5
    d5d8:	0000cd65 	.word	0x0000cd65
    d5dc:	000134e1 	.word	0x000134e1
    d5e0:	0000d265 	.word	0x0000d265
    d5e4:	0000d4e5 	.word	0x0000d4e5
    d5e8:	20002d72 	.word	0x20002d72
    d5ec:	0000d681 	.word	0x0000d681

0000d5f0 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    d5f0:	680a      	ldr	r2, [r1, #0]
    d5f2:	684b      	ldr	r3, [r1, #4]
    d5f4:	00c1      	lsls	r1, r0, #3
    d5f6:	4802      	ldr	r0, [pc, #8]	; (d600 <SwTimerWriteTimestamp+0x10>)
    d5f8:	1840      	adds	r0, r0, r1
    d5fa:	6002      	str	r2, [r0, #0]
    d5fc:	6043      	str	r3, [r0, #4]
}
    d5fe:	4770      	bx	lr
    d600:	20002bd0 	.word	0x20002bd0

0000d604 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    d604:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    d606:	2010      	movs	r0, #16
    d608:	4b01      	ldr	r3, [pc, #4]	; (d610 <Stack_Init+0xc>)
    d60a:	4798      	blx	r3
}
    d60c:	bd10      	pop	{r4, pc}
    d60e:	46c0      	nop			; (mov r8, r8)
    d610:	0000d681 	.word	0x0000d681

0000d614 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    d616:	4b16      	ldr	r3, [pc, #88]	; (d670 <SYSTEM_RunTasks+0x5c>)
    d618:	881b      	ldrh	r3, [r3, #0]
    d61a:	b29b      	uxth	r3, r3
    d61c:	2b1f      	cmp	r3, #31
    d61e:	d922      	bls.n	d666 <SYSTEM_RunTasks+0x52>
    d620:	e7fe      	b.n	d620 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    d622:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    d624:	4b13      	ldr	r3, [pc, #76]	; (d674 <SYSTEM_RunTasks+0x60>)
    d626:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    d628:	4911      	ldr	r1, [pc, #68]	; (d670 <SYSTEM_RunTasks+0x5c>)
    d62a:	880b      	ldrh	r3, [r1, #0]
    d62c:	2201      	movs	r2, #1
    d62e:	40aa      	lsls	r2, r5
    d630:	4393      	bics	r3, r2
    d632:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    d634:	4b10      	ldr	r3, [pc, #64]	; (d678 <SYSTEM_RunTasks+0x64>)
    d636:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    d638:	00ad      	lsls	r5, r5, #2
    d63a:	4b10      	ldr	r3, [pc, #64]	; (d67c <SYSTEM_RunTasks+0x68>)
    d63c:	58eb      	ldr	r3, [r5, r3]
    d63e:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    d640:	2101      	movs	r1, #1
        while (sysTaskFlag)
    d642:	883b      	ldrh	r3, [r7, #0]
    d644:	b29b      	uxth	r3, r3
    d646:	2b00      	cmp	r3, #0
    d648:	d011      	beq.n	d66e <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    d64a:	8823      	ldrh	r3, [r4, #0]
    d64c:	420b      	tst	r3, r1
    d64e:	d1e8      	bne.n	d622 <SYSTEM_RunTasks+0xe>
    d650:	2201      	movs	r2, #1
    d652:	8833      	ldrh	r3, [r6, #0]
    d654:	b29b      	uxth	r3, r3
    d656:	0015      	movs	r5, r2
    d658:	4113      	asrs	r3, r2
    d65a:	4219      	tst	r1, r3
    d65c:	d1e2      	bne.n	d624 <SYSTEM_RunTasks+0x10>
    d65e:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    d660:	2a05      	cmp	r2, #5
    d662:	d1f6      	bne.n	d652 <SYSTEM_RunTasks+0x3e>
    d664:	e7ed      	b.n	d642 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    d666:	4f02      	ldr	r7, [pc, #8]	; (d670 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    d668:	003c      	movs	r4, r7
    d66a:	003e      	movs	r6, r7
    d66c:	e7e8      	b.n	d640 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    d66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d670:	20001e98 	.word	0x20001e98
    d674:	0000c635 	.word	0x0000c635
    d678:	0000c641 	.word	0x0000c641
    d67c:	00018ab8 	.word	0x00018ab8

0000d680 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    d680:	b510      	push	{r4, lr}
    d682:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d684:	4b04      	ldr	r3, [pc, #16]	; (d698 <SYSTEM_PostTask+0x18>)
    d686:	4798      	blx	r3
    sysTaskFlag |= task;
    d688:	4b04      	ldr	r3, [pc, #16]	; (d69c <SYSTEM_PostTask+0x1c>)
    d68a:	8818      	ldrh	r0, [r3, #0]
    d68c:	4320      	orrs	r0, r4
    d68e:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    d690:	4b03      	ldr	r3, [pc, #12]	; (d6a0 <SYSTEM_PostTask+0x20>)
    d692:	4798      	blx	r3
}
    d694:	bd10      	pop	{r4, pc}
    d696:	46c0      	nop			; (mov r8, r8)
    d698:	0000c635 	.word	0x0000c635
    d69c:	20001e98 	.word	0x20001e98
    d6a0:	0000c641 	.word	0x0000c641

0000d6a4 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6a6:	46d6      	mov	lr, sl
    d6a8:	464f      	mov	r7, r9
    d6aa:	b580      	push	{r7, lr}
    d6ac:	b083      	sub	sp, #12
    d6ae:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    d6b0:	2900      	cmp	r1, #0
    d6b2:	d102      	bne.n	d6ba <Radio_WriteMode+0x16>
    d6b4:	1f83      	subs	r3, r0, #6
    d6b6:	2b01      	cmp	r3, #1
    d6b8:	d92a      	bls.n	d710 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    d6ba:	2307      	movs	r3, #7
    d6bc:	4699      	mov	r9, r3
    d6be:	001c      	movs	r4, r3
    d6c0:	4004      	ands	r4, r0
    newModulation &= 0x01;
    d6c2:	2601      	movs	r6, #1
    d6c4:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    d6c6:	2001      	movs	r0, #1
    d6c8:	4b2b      	ldr	r3, [pc, #172]	; (d778 <Radio_WriteMode+0xd4>)
    d6ca:	4798      	blx	r3
    d6cc:	0005      	movs	r5, r0
    d6ce:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    d6d0:	b243      	sxtb	r3, r0
    d6d2:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    d6d4:	464b      	mov	r3, r9
    d6d6:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    d6d8:	4652      	mov	r2, sl
    d6da:	0fd2      	lsrs	r2, r2, #31
    d6dc:	4296      	cmp	r6, r2
    d6de:	d00a      	beq.n	d6f6 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    d6e0:	2b00      	cmp	r3, #0
    d6e2:	d11a      	bne.n	d71a <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    d6e4:	2e00      	cmp	r6, #0
    d6e6:	d11e      	bne.n	d726 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    d6e8:	2778      	movs	r7, #120	; 0x78
    d6ea:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d6ec:	0039      	movs	r1, r7
    d6ee:	2001      	movs	r0, #1
    d6f0:	4b22      	ldr	r3, [pc, #136]	; (d77c <Radio_WriteMode+0xd8>)
    d6f2:	4798      	blx	r3
    d6f4:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    d6f6:	42a3      	cmp	r3, r4
    d6f8:	d00a      	beq.n	d710 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    d6fa:	2c00      	cmp	r4, #0
    d6fc:	d030      	beq.n	d760 <Radio_WriteMode+0xbc>
    d6fe:	9b01      	ldr	r3, [sp, #4]
    d700:	2b01      	cmp	r3, #1
    d702:	d016      	beq.n	d732 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    d704:	21f8      	movs	r1, #248	; 0xf8
    d706:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d708:	4321      	orrs	r1, r4
    d70a:	2001      	movs	r0, #1
    d70c:	4b1b      	ldr	r3, [pc, #108]	; (d77c <Radio_WriteMode+0xd8>)
    d70e:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    d710:	b003      	add	sp, #12
    d712:	bc0c      	pop	{r2, r3}
    d714:	4691      	mov	r9, r2
    d716:	469a      	mov	sl, r3
    d718:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    d71a:	21f8      	movs	r1, #248	; 0xf8
    d71c:	4001      	ands	r1, r0
    d71e:	2001      	movs	r0, #1
    d720:	4b16      	ldr	r3, [pc, #88]	; (d77c <Radio_WriteMode+0xd8>)
    d722:	4798      	blx	r3
    d724:	e7de      	b.n	d6e4 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    d726:	2778      	movs	r7, #120	; 0x78
    d728:	4653      	mov	r3, sl
    d72a:	401f      	ands	r7, r3
    d72c:	2180      	movs	r1, #128	; 0x80
    d72e:	430f      	orrs	r7, r1
    d730:	e7dc      	b.n	d6ec <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    d732:	2041      	movs	r0, #65	; 0x41
    d734:	4b10      	ldr	r3, [pc, #64]	; (d778 <Radio_WriteMode+0xd4>)
    d736:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    d738:	2e00      	cmp	r6, #0
    d73a:	d10e      	bne.n	d75a <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    d73c:	2130      	movs	r1, #48	; 0x30
    d73e:	4301      	orrs	r1, r0
    d740:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    d742:	2041      	movs	r0, #65	; 0x41
    d744:	4d0d      	ldr	r5, [pc, #52]	; (d77c <Radio_WriteMode+0xd8>)
    d746:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    d748:	21f8      	movs	r1, #248	; 0xf8
    d74a:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d74c:	4321      	orrs	r1, r4
    d74e:	2001      	movs	r0, #1
    d750:	47a8      	blx	r5
			   delay_ms(1);
    d752:	2001      	movs	r0, #1
    d754:	4b0a      	ldr	r3, [pc, #40]	; (d780 <Radio_WriteMode+0xdc>)
    d756:	4798      	blx	r3
    d758:	e7da      	b.n	d710 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    d75a:	21cf      	movs	r1, #207	; 0xcf
    d75c:	4001      	ands	r1, r0
    d75e:	e7f0      	b.n	d742 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    d760:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d762:	4039      	ands	r1, r7
    d764:	2001      	movs	r0, #1
    d766:	4b05      	ldr	r3, [pc, #20]	; (d77c <Radio_WriteMode+0xd8>)
    d768:	4798      	blx	r3
        if (1 == blocking)
    d76a:	9b01      	ldr	r3, [sp, #4]
    d76c:	2b01      	cmp	r3, #1
    d76e:	d1cf      	bne.n	d710 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    d770:	2001      	movs	r0, #1
    d772:	4b04      	ldr	r3, [pc, #16]	; (d784 <Radio_WriteMode+0xe0>)
    d774:	4798      	blx	r3
    d776:	e7cb      	b.n	d710 <Radio_WriteMode+0x6c>
    d778:	0000c4a5 	.word	0x0000c4a5
    d77c:	0000c47d 	.word	0x0000c47d
    d780:	0000453d 	.word	0x0000453d
    d784:	0000c619 	.word	0x0000c619

0000d788 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    d788:	b500      	push	{lr}
    d78a:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    d78c:	2012      	movs	r0, #18
    d78e:	4b0d      	ldr	r3, [pc, #52]	; (d7c4 <RADIO_FHSSChangeChannel+0x3c>)
    d790:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    d792:	4b0d      	ldr	r3, [pc, #52]	; (d7c8 <RADIO_FHSSChangeChannel+0x40>)
    d794:	8adb      	ldrh	r3, [r3, #22]
    d796:	2b00      	cmp	r3, #0
    d798:	d007      	beq.n	d7aa <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    d79a:	4b0b      	ldr	r3, [pc, #44]	; (d7c8 <RADIO_FHSSChangeChannel+0x40>)
    d79c:	691b      	ldr	r3, [r3, #16]
    d79e:	2b00      	cmp	r3, #0
    d7a0:	d003      	beq.n	d7aa <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    d7a2:	4a0a      	ldr	r2, [pc, #40]	; (d7cc <RADIO_FHSSChangeChannel+0x44>)
    d7a4:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    d7a6:	0692      	lsls	r2, r2, #26
    d7a8:	d405      	bmi.n	d7b6 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    d7aa:	2102      	movs	r1, #2
    d7ac:	2012      	movs	r0, #18
    d7ae:	4b08      	ldr	r3, [pc, #32]	; (d7d0 <RADIO_FHSSChangeChannel+0x48>)
    d7b0:	4798      	blx	r3
}
    d7b2:	b003      	add	sp, #12
    d7b4:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    d7b6:	a901      	add	r1, sp, #4
    d7b8:	2020      	movs	r0, #32
    d7ba:	4798      	blx	r3
            Radio_WriteFrequency(freq);
<<<<<<< Updated upstream
    d848:	9801      	ldr	r0, [sp, #4]
    d84a:	4b05      	ldr	r3, [pc, #20]	; (d860 <RADIO_FHSSChangeChannel+0x4c>)
=======
0000c68c <SleepTimerGetElapsedTime>:
    c68c:	b510      	push	{r4, lr}
    c68e:	4802      	ldr	r0, [pc, #8]	; (c698 <SleepTimerGetElapsedTime+0xc>)
    c690:	4b02      	ldr	r3, [pc, #8]	; (c69c <SleepTimerGetElapsedTime+0x10>)
    c692:	4798      	blx	r3
    c694:	bd10      	pop	{r4, pc}
    c696:	46c0      	nop			; (mov r8, r8)
    c698:	20002974 	.word	0x20002974
    c69c:	00004cd1 	.word	0x00004cd1

0000c6a0 <SleepTimerStop>:
    c6a0:	b510      	push	{r4, lr}
    c6a2:	2108      	movs	r1, #8
    c6a4:	4801      	ldr	r0, [pc, #4]	; (c6ac <SleepTimerStop+0xc>)
    c6a6:	4b02      	ldr	r3, [pc, #8]	; (c6b0 <SleepTimerStop+0x10>)
    c6a8:	4798      	blx	r3
    c6aa:	bd10      	pop	{r4, pc}
    c6ac:	20002974 	.word	0x20002974
    c6b0:	00004cfd 	.word	0x00004cfd

0000c6b4 <SystemBlockingWaitMs>:
    c6b4:	b510      	push	{r4, lr}
    c6b6:	2800      	cmp	r0, #0
    c6b8:	d103      	bne.n	c6c2 <SystemBlockingWaitMs+0xe>
    c6ba:	2001      	movs	r0, #1
    c6bc:	4b02      	ldr	r3, [pc, #8]	; (c6c8 <SystemBlockingWaitMs+0x14>)
    c6be:	4798      	blx	r3
    c6c0:	bd10      	pop	{r4, pc}
    c6c2:	4b02      	ldr	r3, [pc, #8]	; (c6cc <SystemBlockingWaitMs+0x18>)
    c6c4:	4798      	blx	r3
    c6c6:	e7fb      	b.n	c6c0 <SystemBlockingWaitMs+0xc>
    c6c8:	00004511 	.word	0x00004511
    c6cc:	0000453d 	.word	0x0000453d

0000c6d0 <system_enter_critical_section>:
    c6d0:	b510      	push	{r4, lr}
    c6d2:	4b01      	ldr	r3, [pc, #4]	; (c6d8 <system_enter_critical_section+0x8>)
    c6d4:	4798      	blx	r3
    c6d6:	bd10      	pop	{r4, pc}
    c6d8:	00004569 	.word	0x00004569

0000c6dc <system_leave_critical_section>:
    c6dc:	b510      	push	{r4, lr}
    c6de:	4b01      	ldr	r3, [pc, #4]	; (c6e4 <system_leave_critical_section+0x8>)
    c6e0:	4798      	blx	r3
    c6e2:	bd10      	pop	{r4, pc}
    c6e4:	000045a9 	.word	0x000045a9

0000c6e8 <PMM_Wakeup>:
    c6e8:	b570      	push	{r4, r5, r6, lr}
    c6ea:	4b16      	ldr	r3, [pc, #88]	; (c744 <PMM_Wakeup+0x5c>)
    c6ec:	781b      	ldrb	r3, [r3, #0]
    c6ee:	2b01      	cmp	r3, #1
    c6f0:	d000      	beq.n	c6f4 <PMM_Wakeup+0xc>
    c6f2:	bd70      	pop	{r4, r5, r6, pc}
    c6f4:	2200      	movs	r2, #0
    c6f6:	4b13      	ldr	r3, [pc, #76]	; (c744 <PMM_Wakeup+0x5c>)
    c6f8:	701a      	strb	r2, [r3, #0]
    c6fa:	4b13      	ldr	r3, [pc, #76]	; (c748 <PMM_Wakeup+0x60>)
    c6fc:	4798      	blx	r3
    c6fe:	4b13      	ldr	r3, [pc, #76]	; (c74c <PMM_Wakeup+0x64>)
    c700:	4798      	blx	r3
    c702:	4913      	ldr	r1, [pc, #76]	; (c750 <PMM_Wakeup+0x68>)
    c704:	4b13      	ldr	r3, [pc, #76]	; (c754 <PMM_Wakeup+0x6c>)
    c706:	4798      	blx	r3
    c708:	4b13      	ldr	r3, [pc, #76]	; (c758 <PMM_Wakeup+0x70>)
    c70a:	4798      	blx	r3
    c70c:	0004      	movs	r4, r0
    c70e:	000d      	movs	r5, r1
    c710:	4b12      	ldr	r3, [pc, #72]	; (c75c <PMM_Wakeup+0x74>)
    c712:	4798      	blx	r3
    c714:	0020      	movs	r0, r4
    c716:	0029      	movs	r1, r5
    c718:	4b11      	ldr	r3, [pc, #68]	; (c760 <PMM_Wakeup+0x78>)
    c71a:	4798      	blx	r3
    c71c:	4b11      	ldr	r3, [pc, #68]	; (c764 <PMM_Wakeup+0x7c>)
    c71e:	681b      	ldr	r3, [r3, #0]
    c720:	2b00      	cmp	r3, #0
    c722:	d0e6      	beq.n	c6f2 <PMM_Wakeup+0xa>
    c724:	689e      	ldr	r6, [r3, #8]
    c726:	2e00      	cmp	r6, #0
    c728:	d0e3      	beq.n	c6f2 <PMM_Wakeup+0xa>
    c72a:	22fa      	movs	r2, #250	; 0xfa
    c72c:	0092      	lsls	r2, r2, #2
    c72e:	2300      	movs	r3, #0
    c730:	0020      	movs	r0, r4
    c732:	0029      	movs	r1, r5
    c734:	4c0c      	ldr	r4, [pc, #48]	; (c768 <PMM_Wakeup+0x80>)
    c736:	47a0      	blx	r4
    c738:	47b0      	blx	r6
    c73a:	2200      	movs	r2, #0
    c73c:	4b09      	ldr	r3, [pc, #36]	; (c764 <PMM_Wakeup+0x7c>)
    c73e:	601a      	str	r2, [r3, #0]
    c740:	e7d7      	b.n	c6f2 <PMM_Wakeup+0xa>
    c742:	46c0      	nop			; (mov r8, r8)
    c744:	20001b88 	.word	0x20001b88
    c748:	0000c68d 	.word	0x0000c68d
    c74c:	000149cd 	.word	0x000149cd
    c750:	41f423d7 	.word	0x41f423d7
    c754:	00014375 	.word	0x00014375
    c758:	00013ab1 	.word	0x00013ab1
    c75c:	0000c6a1 	.word	0x0000c6a1
    c760:	0000d5c5 	.word	0x0000d5c5
    c764:	20001b8c 	.word	0x20001b8c
    c768:	000139b1 	.word	0x000139b1

0000c76c <InitDefault868Channels>:
    c76c:	b570      	push	{r4, r5, r6, lr}
    c76e:	4c39      	ldr	r4, [pc, #228]	; (c854 <InitDefault868Channels+0xe8>)
    c770:	7920      	ldrb	r0, [r4, #4]
    c772:	7963      	ldrb	r3, [r4, #5]
    c774:	021b      	lsls	r3, r3, #8
    c776:	4303      	orrs	r3, r0
    c778:	79a0      	ldrb	r0, [r4, #6]
    c77a:	0400      	lsls	r0, r0, #16
    c77c:	4303      	orrs	r3, r0
    c77e:	79e0      	ldrb	r0, [r4, #7]
    c780:	0600      	lsls	r0, r0, #24
    c782:	4318      	orrs	r0, r3
    c784:	2206      	movs	r2, #6
    c786:	2100      	movs	r1, #0
    c788:	4e33      	ldr	r6, [pc, #204]	; (c858 <InitDefault868Channels+0xec>)
    c78a:	47b0      	blx	r6
    c78c:	7920      	ldrb	r0, [r4, #4]
    c78e:	7963      	ldrb	r3, [r4, #5]
    c790:	021b      	lsls	r3, r3, #8
    c792:	4303      	orrs	r3, r0
    c794:	79a0      	ldrb	r0, [r4, #6]
    c796:	0400      	lsls	r0, r0, #16
    c798:	4303      	orrs	r3, r0
    c79a:	79e0      	ldrb	r0, [r4, #7]
    c79c:	0600      	lsls	r0, r0, #24
    c79e:	4318      	orrs	r0, r3
    c7a0:	2206      	movs	r2, #6
    c7a2:	492e      	ldr	r1, [pc, #184]	; (c85c <InitDefault868Channels+0xf0>)
    c7a4:	4d2e      	ldr	r5, [pc, #184]	; (c860 <InitDefault868Channels+0xf4>)
    c7a6:	47a8      	blx	r5
    c7a8:	7a20      	ldrb	r0, [r4, #8]
    c7aa:	7a63      	ldrb	r3, [r4, #9]
    c7ac:	021b      	lsls	r3, r3, #8
    c7ae:	4303      	orrs	r3, r0
    c7b0:	7aa0      	ldrb	r0, [r4, #10]
    c7b2:	0400      	lsls	r0, r0, #16
    c7b4:	4303      	orrs	r3, r0
    c7b6:	7ae0      	ldrb	r0, [r4, #11]
    c7b8:	0600      	lsls	r0, r0, #24
    c7ba:	4318      	orrs	r0, r3
    c7bc:	2224      	movs	r2, #36	; 0x24
    c7be:	2100      	movs	r1, #0
    c7c0:	47b0      	blx	r6
    c7c2:	7a20      	ldrb	r0, [r4, #8]
    c7c4:	7a63      	ldrb	r3, [r4, #9]
    c7c6:	021b      	lsls	r3, r3, #8
    c7c8:	4303      	orrs	r3, r0
    c7ca:	7aa0      	ldrb	r0, [r4, #10]
    c7cc:	0400      	lsls	r0, r0, #16
    c7ce:	4303      	orrs	r3, r0
    c7d0:	7ae0      	ldrb	r0, [r4, #11]
    c7d2:	0600      	lsls	r0, r0, #24
    c7d4:	4318      	orrs	r0, r3
    c7d6:	2224      	movs	r2, #36	; 0x24
    c7d8:	4922      	ldr	r1, [pc, #136]	; (c864 <InitDefault868Channels+0xf8>)
    c7da:	47a8      	blx	r5
    c7dc:	7b20      	ldrb	r0, [r4, #12]
    c7de:	7b63      	ldrb	r3, [r4, #13]
    c7e0:	021b      	lsls	r3, r3, #8
    c7e2:	4303      	orrs	r3, r0
    c7e4:	7ba0      	ldrb	r0, [r4, #14]
    c7e6:	0400      	lsls	r0, r0, #16
    c7e8:	4303      	orrs	r3, r0
    c7ea:	7be0      	ldrb	r0, [r4, #15]
    c7ec:	0600      	lsls	r0, r0, #24
    c7ee:	4318      	orrs	r0, r3
    c7f0:	2248      	movs	r2, #72	; 0x48
    c7f2:	2100      	movs	r1, #0
    c7f4:	47b0      	blx	r6
    c7f6:	7b20      	ldrb	r0, [r4, #12]
    c7f8:	7b63      	ldrb	r3, [r4, #13]
    c7fa:	021b      	lsls	r3, r3, #8
    c7fc:	4303      	orrs	r3, r0
    c7fe:	7ba0      	ldrb	r0, [r4, #14]
    c800:	0400      	lsls	r0, r0, #16
    c802:	4303      	orrs	r3, r0
    c804:	7be0      	ldrb	r0, [r4, #15]
    c806:	0600      	lsls	r0, r0, #24
    c808:	4318      	orrs	r0, r3
    c80a:	2248      	movs	r2, #72	; 0x48
    c80c:	4916      	ldr	r1, [pc, #88]	; (c868 <InitDefault868Channels+0xfc>)
    c80e:	47a8      	blx	r5
    c810:	0020      	movs	r0, r4
    c812:	30af      	adds	r0, #175	; 0xaf
    c814:	30ff      	adds	r0, #255	; 0xff
    c816:	220c      	movs	r2, #12
    c818:	4914      	ldr	r1, [pc, #80]	; (c86c <InitDefault868Channels+0x100>)
    c81a:	47a8      	blx	r5
    c81c:	232a      	movs	r3, #42	; 0x2a
    c81e:	56e3      	ldrsb	r3, [r4, r3]
    c820:	2b03      	cmp	r3, #3
    c822:	dd15      	ble.n	c850 <InitDefault868Channels+0xe4>
    c824:	2303      	movs	r3, #3
    c826:	480b      	ldr	r0, [pc, #44]	; (c854 <InitDefault868Channels+0xe8>)
    c828:	25ff      	movs	r5, #255	; 0xff
    c82a:	242a      	movs	r4, #42	; 0x2a
    c82c:	7902      	ldrb	r2, [r0, #4]
    c82e:	7941      	ldrb	r1, [r0, #5]
    c830:	0209      	lsls	r1, r1, #8
    c832:	4311      	orrs	r1, r2
    c834:	7982      	ldrb	r2, [r0, #6]
    c836:	0412      	lsls	r2, r2, #16
    c838:	4311      	orrs	r1, r2
    c83a:	79c2      	ldrb	r2, [r0, #7]
    c83c:	0612      	lsls	r2, r2, #24
    c83e:	430a      	orrs	r2, r1
    c840:	0059      	lsls	r1, r3, #1
    c842:	188a      	adds	r2, r1, r2
    c844:	7055      	strb	r5, [r2, #1]
    c846:	3301      	adds	r3, #1
    c848:	b2db      	uxtb	r3, r3
    c84a:	5702      	ldrsb	r2, [r0, r4]
    c84c:	4293      	cmp	r3, r2
    c84e:	dbed      	blt.n	c82c <InitDefault868Channels+0xc0>
    c850:	bd70      	pop	{r4, r5, r6, pc}
    c852:	46c0      	nop			; (mov r8, r8)
    c854:	200029b0 	.word	0x200029b0
    c858:	00016849 	.word	0x00016849
    c85c:	00018bd0 	.word	0x00018bd0
    c860:	00016837 	.word	0x00016837
    c864:	00018ba4 	.word	0x00018ba4
    c868:	00018bf0 	.word	0x00018bf0
    c86c:	00018bd8 	.word	0x00018bd8

0000c870 <InitDefault433Channels>:
    c870:	b570      	push	{r4, r5, r6, lr}
    c872:	4c36      	ldr	r4, [pc, #216]	; (c94c <InitDefault433Channels+0xdc>)
    c874:	7920      	ldrb	r0, [r4, #4]
    c876:	7963      	ldrb	r3, [r4, #5]
    c878:	021b      	lsls	r3, r3, #8
    c87a:	4303      	orrs	r3, r0
    c87c:	79a0      	ldrb	r0, [r4, #6]
    c87e:	0400      	lsls	r0, r0, #16
    c880:	4303      	orrs	r3, r0
    c882:	79e0      	ldrb	r0, [r4, #7]
    c884:	0600      	lsls	r0, r0, #24
    c886:	4318      	orrs	r0, r3
    c888:	2206      	movs	r2, #6
    c88a:	2100      	movs	r1, #0
    c88c:	4e30      	ldr	r6, [pc, #192]	; (c950 <InitDefault433Channels+0xe0>)
    c88e:	47b0      	blx	r6
    c890:	7920      	ldrb	r0, [r4, #4]
    c892:	7963      	ldrb	r3, [r4, #5]
    c894:	021b      	lsls	r3, r3, #8
    c896:	4303      	orrs	r3, r0
    c898:	79a0      	ldrb	r0, [r4, #6]
    c89a:	0400      	lsls	r0, r0, #16
    c89c:	4303      	orrs	r3, r0
    c89e:	79e0      	ldrb	r0, [r4, #7]
    c8a0:	0600      	lsls	r0, r0, #24
    c8a2:	4318      	orrs	r0, r3
    c8a4:	2206      	movs	r2, #6
    c8a6:	492b      	ldr	r1, [pc, #172]	; (c954 <InitDefault433Channels+0xe4>)
    c8a8:	4d2b      	ldr	r5, [pc, #172]	; (c958 <InitDefault433Channels+0xe8>)
    c8aa:	47a8      	blx	r5
    c8ac:	7a20      	ldrb	r0, [r4, #8]
    c8ae:	7a63      	ldrb	r3, [r4, #9]
    c8b0:	021b      	lsls	r3, r3, #8
    c8b2:	4303      	orrs	r3, r0
    c8b4:	7aa0      	ldrb	r0, [r4, #10]
    c8b6:	0400      	lsls	r0, r0, #16
    c8b8:	4303      	orrs	r3, r0
    c8ba:	7ae0      	ldrb	r0, [r4, #11]
    c8bc:	0600      	lsls	r0, r0, #24
    c8be:	4318      	orrs	r0, r3
    c8c0:	2224      	movs	r2, #36	; 0x24
    c8c2:	2100      	movs	r1, #0
    c8c4:	47b0      	blx	r6
    c8c6:	7a20      	ldrb	r0, [r4, #8]
    c8c8:	7a63      	ldrb	r3, [r4, #9]
    c8ca:	021b      	lsls	r3, r3, #8
    c8cc:	4303      	orrs	r3, r0
    c8ce:	7aa0      	ldrb	r0, [r4, #10]
    c8d0:	0400      	lsls	r0, r0, #16
    c8d2:	4303      	orrs	r3, r0
    c8d4:	7ae0      	ldrb	r0, [r4, #11]
    c8d6:	0600      	lsls	r0, r0, #24
    c8d8:	4318      	orrs	r0, r3
    c8da:	2224      	movs	r2, #36	; 0x24
    c8dc:	491f      	ldr	r1, [pc, #124]	; (c95c <InitDefault433Channels+0xec>)
    c8de:	47a8      	blx	r5
    c8e0:	7b20      	ldrb	r0, [r4, #12]
    c8e2:	7b63      	ldrb	r3, [r4, #13]
    c8e4:	021b      	lsls	r3, r3, #8
    c8e6:	4303      	orrs	r3, r0
    c8e8:	7ba0      	ldrb	r0, [r4, #14]
    c8ea:	0400      	lsls	r0, r0, #16
    c8ec:	4303      	orrs	r3, r0
    c8ee:	7be0      	ldrb	r0, [r4, #15]
    c8f0:	0600      	lsls	r0, r0, #24
    c8f2:	4318      	orrs	r0, r3
    c8f4:	220c      	movs	r2, #12
    c8f6:	2100      	movs	r1, #0
    c8f8:	47b0      	blx	r6
    c8fa:	7b20      	ldrb	r0, [r4, #12]
    c8fc:	7b63      	ldrb	r3, [r4, #13]
    c8fe:	021b      	lsls	r3, r3, #8
    c900:	4303      	orrs	r3, r0
    c902:	7ba0      	ldrb	r0, [r4, #14]
    c904:	0400      	lsls	r0, r0, #16
    c906:	4303      	orrs	r3, r0
    c908:	7be0      	ldrb	r0, [r4, #15]
    c90a:	0600      	lsls	r0, r0, #24
    c90c:	4318      	orrs	r0, r3
    c90e:	220c      	movs	r2, #12
    c910:	4913      	ldr	r1, [pc, #76]	; (c960 <InitDefault433Channels+0xf0>)
    c912:	47a8      	blx	r5
    c914:	232a      	movs	r3, #42	; 0x2a
    c916:	56e3      	ldrsb	r3, [r4, r3]
    c918:	2b03      	cmp	r3, #3
    c91a:	dd15      	ble.n	c948 <InitDefault433Channels+0xd8>
    c91c:	2303      	movs	r3, #3
    c91e:	480b      	ldr	r0, [pc, #44]	; (c94c <InitDefault433Channels+0xdc>)
    c920:	25ff      	movs	r5, #255	; 0xff
    c922:	242a      	movs	r4, #42	; 0x2a
    c924:	7902      	ldrb	r2, [r0, #4]
    c926:	7941      	ldrb	r1, [r0, #5]
    c928:	0209      	lsls	r1, r1, #8
    c92a:	4311      	orrs	r1, r2
    c92c:	7982      	ldrb	r2, [r0, #6]
    c92e:	0412      	lsls	r2, r2, #16
    c930:	4311      	orrs	r1, r2
    c932:	79c2      	ldrb	r2, [r0, #7]
    c934:	0612      	lsls	r2, r2, #24
    c936:	430a      	orrs	r2, r1
    c938:	0059      	lsls	r1, r3, #1
    c93a:	188a      	adds	r2, r1, r2
    c93c:	7055      	strb	r5, [r2, #1]
    c93e:	3301      	adds	r3, #1
    c940:	b2db      	uxtb	r3, r3
    c942:	5702      	ldrsb	r2, [r0, r4]
    c944:	4293      	cmp	r3, r2
    c946:	dbed      	blt.n	c924 <InitDefault433Channels+0xb4>
    c948:	bd70      	pop	{r4, r5, r6, pc}
    c94a:	46c0      	nop			; (mov r8, r8)
    c94c:	200029b0 	.word	0x200029b0
    c950:	00016849 	.word	0x00016849
    c954:	00018bc8 	.word	0x00018bc8
    c958:	00016837 	.word	0x00016837
    c95c:	00018b80 	.word	0x00018b80
    c960:	00018be4 	.word	0x00018be4

0000c964 <InitDefault920Channels>:
    c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c966:	4c40      	ldr	r4, [pc, #256]	; (ca68 <InitDefault920Channels+0x104>)
    c968:	7920      	ldrb	r0, [r4, #4]
    c96a:	7963      	ldrb	r3, [r4, #5]
    c96c:	021b      	lsls	r3, r3, #8
    c96e:	4303      	orrs	r3, r0
    c970:	79a0      	ldrb	r0, [r4, #6]
    c972:	0400      	lsls	r0, r0, #16
    c974:	4303      	orrs	r3, r0
    c976:	79e0      	ldrb	r0, [r4, #7]
    c978:	0600      	lsls	r0, r0, #24
    c97a:	4318      	orrs	r0, r3
    c97c:	2204      	movs	r2, #4
    c97e:	2100      	movs	r1, #0
    c980:	4e3a      	ldr	r6, [pc, #232]	; (ca6c <InitDefault920Channels+0x108>)
    c982:	47b0      	blx	r6
    c984:	7a20      	ldrb	r0, [r4, #8]
    c986:	7a63      	ldrb	r3, [r4, #9]
    c988:	021b      	lsls	r3, r3, #8
    c98a:	4303      	orrs	r3, r0
    c98c:	7aa0      	ldrb	r0, [r4, #10]
    c98e:	0400      	lsls	r0, r0, #16
    c990:	4303      	orrs	r3, r0
    c992:	7ae0      	ldrb	r0, [r4, #11]
    c994:	0600      	lsls	r0, r0, #24
    c996:	4318      	orrs	r0, r3
    c998:	2218      	movs	r2, #24
    c99a:	2100      	movs	r1, #0
    c99c:	47b0      	blx	r6
    c99e:	7920      	ldrb	r0, [r4, #4]
    c9a0:	7963      	ldrb	r3, [r4, #5]
    c9a2:	021b      	lsls	r3, r3, #8
    c9a4:	4303      	orrs	r3, r0
    c9a6:	79a0      	ldrb	r0, [r4, #6]
    c9a8:	0400      	lsls	r0, r0, #16
    c9aa:	4303      	orrs	r3, r0
    c9ac:	79e0      	ldrb	r0, [r4, #7]
    c9ae:	0600      	lsls	r0, r0, #24
    c9b0:	4318      	orrs	r0, r3
    c9b2:	2204      	movs	r2, #4
    c9b4:	492e      	ldr	r1, [pc, #184]	; (ca70 <InitDefault920Channels+0x10c>)
    c9b6:	4d2f      	ldr	r5, [pc, #188]	; (ca74 <InitDefault920Channels+0x110>)
    c9b8:	47a8      	blx	r5
    c9ba:	7a20      	ldrb	r0, [r4, #8]
    c9bc:	7a63      	ldrb	r3, [r4, #9]
    c9be:	021b      	lsls	r3, r3, #8
    c9c0:	4303      	orrs	r3, r0
    c9c2:	7aa0      	ldrb	r0, [r4, #10]
    c9c4:	0400      	lsls	r0, r0, #16
    c9c6:	4303      	orrs	r3, r0
    c9c8:	7ae0      	ldrb	r0, [r4, #11]
    c9ca:	0600      	lsls	r0, r0, #24
    c9cc:	4318      	orrs	r0, r3
    c9ce:	2218      	movs	r2, #24
    c9d0:	4929      	ldr	r1, [pc, #164]	; (ca78 <InitDefault920Channels+0x114>)
    c9d2:	47a8      	blx	r5
    c9d4:	7b20      	ldrb	r0, [r4, #12]
    c9d6:	7b63      	ldrb	r3, [r4, #13]
    c9d8:	021b      	lsls	r3, r3, #8
    c9da:	4303      	orrs	r3, r0
    c9dc:	7ba0      	ldrb	r0, [r4, #14]
    c9de:	0400      	lsls	r0, r0, #16
    c9e0:	4303      	orrs	r3, r0
    c9e2:	7be0      	ldrb	r0, [r4, #15]
    c9e4:	0600      	lsls	r0, r0, #24
    c9e6:	4318      	orrs	r0, r3
    c9e8:	2218      	movs	r2, #24
    c9ea:	2100      	movs	r1, #0
    c9ec:	47b0      	blx	r6
    c9ee:	7b20      	ldrb	r0, [r4, #12]
    c9f0:	7b63      	ldrb	r3, [r4, #13]
    c9f2:	021b      	lsls	r3, r3, #8
    c9f4:	4303      	orrs	r3, r0
    c9f6:	7ba0      	ldrb	r0, [r4, #14]
    c9f8:	0400      	lsls	r0, r0, #16
    c9fa:	4303      	orrs	r3, r0
    c9fc:	7be0      	ldrb	r0, [r4, #15]
    c9fe:	0600      	lsls	r0, r0, #24
    ca00:	4318      	orrs	r0, r3
    ca02:	2218      	movs	r2, #24
    ca04:	491d      	ldr	r1, [pc, #116]	; (ca7c <InitDefault920Channels+0x118>)
    ca06:	47a8      	blx	r5
    ca08:	0020      	movs	r0, r4
    ca0a:	30af      	adds	r0, #175	; 0xaf
    ca0c:	30ff      	adds	r0, #255	; 0xff
    ca0e:	2204      	movs	r2, #4
    ca10:	491b      	ldr	r1, [pc, #108]	; (ca80 <InitDefault920Channels+0x11c>)
    ca12:	47a8      	blx	r5
    ca14:	232a      	movs	r3, #42	; 0x2a
    ca16:	56e3      	ldrsb	r3, [r4, r3]
    ca18:	2b02      	cmp	r3, #2
    ca1a:	dd1f      	ble.n	ca5c <InitDefault920Channels+0xf8>
    ca1c:	2302      	movs	r3, #2
    ca1e:	2202      	movs	r2, #2
    ca20:	4911      	ldr	r1, [pc, #68]	; (ca68 <InitDefault920Channels+0x104>)
    ca22:	27ff      	movs	r7, #255	; 0xff
    ca24:	2500      	movs	r5, #0
    ca26:	262a      	movs	r6, #42	; 0x2a
    ca28:	7908      	ldrb	r0, [r1, #4]
    ca2a:	794c      	ldrb	r4, [r1, #5]
    ca2c:	0224      	lsls	r4, r4, #8
    ca2e:	4304      	orrs	r4, r0
    ca30:	7988      	ldrb	r0, [r1, #6]
    ca32:	0400      	lsls	r0, r0, #16
    ca34:	4304      	orrs	r4, r0
    ca36:	79c8      	ldrb	r0, [r1, #7]
    ca38:	0600      	lsls	r0, r0, #24
    ca3a:	4320      	orrs	r0, r4
    ca3c:	0054      	lsls	r4, r2, #1
    ca3e:	1820      	adds	r0, r4, r0
    ca40:	7047      	strb	r7, [r0, #1]
    ca42:	3358      	adds	r3, #88	; 0x58
    ca44:	009b      	lsls	r3, r3, #2
    ca46:	18cb      	adds	r3, r1, r3
    ca48:	725d      	strb	r5, [r3, #9]
    ca4a:	729d      	strb	r5, [r3, #10]
    ca4c:	72dd      	strb	r5, [r3, #11]
    ca4e:	731d      	strb	r5, [r3, #12]
    ca50:	3201      	adds	r2, #1
    ca52:	b2d2      	uxtb	r2, r2
    ca54:	0013      	movs	r3, r2
    ca56:	5788      	ldrsb	r0, [r1, r6]
    ca58:	4282      	cmp	r2, r0
    ca5a:	dbe5      	blt.n	ca28 <InitDefault920Channels+0xc4>
    ca5c:	21ff      	movs	r1, #255	; 0xff
    ca5e:	2330      	movs	r3, #48	; 0x30
    ca60:	4a01      	ldr	r2, [pc, #4]	; (ca68 <InitDefault920Channels+0x104>)
    ca62:	54d1      	strb	r1, [r2, r3]
    ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca66:	46c0      	nop			; (mov r8, r8)
    ca68:	200029b0 	.word	0x200029b0
    ca6c:	00016849 	.word	0x00016849
    ca70:	00018c50 	.word	0x00018c50
    ca74:	00016837 	.word	0x00016837
    ca78:	00018c38 	.word	0x00018c38
    ca7c:	00018c58 	.word	0x00018c58
    ca80:	00018c54 	.word	0x00018c54

0000ca84 <InitDefault920ChannelsKR>:
    ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca86:	46d6      	mov	lr, sl
    ca88:	464f      	mov	r7, r9
    ca8a:	4646      	mov	r6, r8
    ca8c:	b5c0      	push	{r6, r7, lr}
    ca8e:	4c46      	ldr	r4, [pc, #280]	; (cba8 <InitDefault920ChannelsKR+0x124>)
    ca90:	7920      	ldrb	r0, [r4, #4]
    ca92:	7963      	ldrb	r3, [r4, #5]
    ca94:	021b      	lsls	r3, r3, #8
    ca96:	4303      	orrs	r3, r0
    ca98:	79a0      	ldrb	r0, [r4, #6]
    ca9a:	0400      	lsls	r0, r0, #16
    ca9c:	4303      	orrs	r3, r0
    ca9e:	79e0      	ldrb	r0, [r4, #7]
    caa0:	0600      	lsls	r0, r0, #24
    caa2:	4318      	orrs	r0, r3
    caa4:	2206      	movs	r2, #6
    caa6:	2100      	movs	r1, #0
    caa8:	4d40      	ldr	r5, [pc, #256]	; (cbac <InitDefault920ChannelsKR+0x128>)
    caaa:	47a8      	blx	r5
    caac:	7a20      	ldrb	r0, [r4, #8]
    caae:	7a63      	ldrb	r3, [r4, #9]
    cab0:	021b      	lsls	r3, r3, #8
    cab2:	4303      	orrs	r3, r0
    cab4:	7aa0      	ldrb	r0, [r4, #10]
    cab6:	0400      	lsls	r0, r0, #16
    cab8:	4303      	orrs	r3, r0
    caba:	7ae0      	ldrb	r0, [r4, #11]
    cabc:	0600      	lsls	r0, r0, #24
    cabe:	4318      	orrs	r0, r3
    cac0:	2224      	movs	r2, #36	; 0x24
    cac2:	2100      	movs	r1, #0
    cac4:	47a8      	blx	r5
    cac6:	7920      	ldrb	r0, [r4, #4]
    cac8:	7963      	ldrb	r3, [r4, #5]
    caca:	021b      	lsls	r3, r3, #8
    cacc:	4303      	orrs	r3, r0
    cace:	79a0      	ldrb	r0, [r4, #6]
    cad0:	0400      	lsls	r0, r0, #16
    cad2:	4303      	orrs	r3, r0
    cad4:	79e0      	ldrb	r0, [r4, #7]
    cad6:	0600      	lsls	r0, r0, #24
    cad8:	4318      	orrs	r0, r3
    cada:	2206      	movs	r2, #6
    cadc:	4934      	ldr	r1, [pc, #208]	; (cbb0 <InitDefault920ChannelsKR+0x12c>)
    cade:	4d35      	ldr	r5, [pc, #212]	; (cbb4 <InitDefault920ChannelsKR+0x130>)
    cae0:	47a8      	blx	r5
    cae2:	7a20      	ldrb	r0, [r4, #8]
    cae4:	7a63      	ldrb	r3, [r4, #9]
    cae6:	021b      	lsls	r3, r3, #8
    cae8:	4303      	orrs	r3, r0
    caea:	7aa0      	ldrb	r0, [r4, #10]
    caec:	0400      	lsls	r0, r0, #16
    caee:	4303      	orrs	r3, r0
    caf0:	7ae0      	ldrb	r0, [r4, #11]
    caf2:	0600      	lsls	r0, r0, #24
    caf4:	4318      	orrs	r0, r3
    caf6:	2224      	movs	r2, #36	; 0x24
    caf8:	492f      	ldr	r1, [pc, #188]	; (cbb8 <InitDefault920ChannelsKR+0x134>)
    cafa:	47a8      	blx	r5
    cafc:	232a      	movs	r3, #42	; 0x2a
    cafe:	56e3      	ldrsb	r3, [r4, r3]
    cb00:	2b03      	cmp	r3, #3
    cb02:	dd48      	ble.n	cb96 <InitDefault920ChannelsKR+0x112>
    cb04:	2103      	movs	r1, #3
    cb06:	2003      	movs	r0, #3
    cb08:	4b27      	ldr	r3, [pc, #156]	; (cba8 <InitDefault920ChannelsKR+0x124>)
    cb0a:	26ff      	movs	r6, #255	; 0xff
    cb0c:	2500      	movs	r5, #0
    cb0e:	22e1      	movs	r2, #225	; 0xe1
    cb10:	0052      	lsls	r2, r2, #1
    cb12:	4690      	mov	r8, r2
    cb14:	46b4      	mov	ip, r6
    cb16:	3a99      	subs	r2, #153	; 0x99
    cb18:	3aff      	subs	r2, #255	; 0xff
    cb1a:	4692      	mov	sl, r2
    cb1c:	0042      	lsls	r2, r0, #1
    cb1e:	791c      	ldrb	r4, [r3, #4]
    cb20:	46a1      	mov	r9, r4
    cb22:	795c      	ldrb	r4, [r3, #5]
    cb24:	0224      	lsls	r4, r4, #8
    cb26:	464f      	mov	r7, r9
    cb28:	4327      	orrs	r7, r4
    cb2a:	799c      	ldrb	r4, [r3, #6]
    cb2c:	0424      	lsls	r4, r4, #16
    cb2e:	4327      	orrs	r7, r4
    cb30:	79dc      	ldrb	r4, [r3, #7]
    cb32:	0624      	lsls	r4, r4, #24
    cb34:	433c      	orrs	r4, r7
    cb36:	18a4      	adds	r4, r4, r2
    cb38:	7066      	strb	r6, [r4, #1]
    cb3a:	791c      	ldrb	r4, [r3, #4]
    cb3c:	46a1      	mov	r9, r4
    cb3e:	795c      	ldrb	r4, [r3, #5]
    cb40:	0224      	lsls	r4, r4, #8
    cb42:	464f      	mov	r7, r9
    cb44:	4327      	orrs	r7, r4
    cb46:	799c      	ldrb	r4, [r3, #6]
    cb48:	0424      	lsls	r4, r4, #16
    cb4a:	4327      	orrs	r7, r4
    cb4c:	79dc      	ldrb	r4, [r3, #7]
    cb4e:	0624      	lsls	r4, r4, #24
    cb50:	433c      	orrs	r4, r7
    cb52:	54a5      	strb	r5, [r4, r2]
    cb54:	7a1c      	ldrb	r4, [r3, #8]
    cb56:	46a1      	mov	r9, r4
    cb58:	7a5c      	ldrb	r4, [r3, #9]
    cb5a:	0224      	lsls	r4, r4, #8
    cb5c:	464f      	mov	r7, r9
    cb5e:	4327      	orrs	r7, r4
    cb60:	7a9c      	ldrb	r4, [r3, #10]
    cb62:	0424      	lsls	r4, r4, #16
    cb64:	4327      	orrs	r7, r4
    cb66:	7adc      	ldrb	r4, [r3, #11]
    cb68:	0624      	lsls	r4, r4, #24
    cb6a:	433c      	orrs	r4, r7
    cb6c:	1812      	adds	r2, r2, r0
    cb6e:	0092      	lsls	r2, r2, #2
    cb70:	1912      	adds	r2, r2, r4
    cb72:	7255      	strb	r5, [r2, #9]
    cb74:	4642      	mov	r2, r8
    cb76:	4664      	mov	r4, ip
    cb78:	549c      	strb	r4, [r3, r2]
    cb7a:	3158      	adds	r1, #88	; 0x58
    cb7c:	0089      	lsls	r1, r1, #2
    cb7e:	1859      	adds	r1, r3, r1
    cb80:	724d      	strb	r5, [r1, #9]
    cb82:	728d      	strb	r5, [r1, #10]
    cb84:	72cd      	strb	r5, [r1, #11]
    cb86:	730d      	strb	r5, [r1, #12]
    cb88:	3001      	adds	r0, #1
    cb8a:	b2c0      	uxtb	r0, r0
    cb8c:	0001      	movs	r1, r0
    cb8e:	4652      	mov	r2, sl
    cb90:	569a      	ldrsb	r2, [r3, r2]
    cb92:	4290      	cmp	r0, r2
    cb94:	dbc2      	blt.n	cb1c <InitDefault920ChannelsKR+0x98>
    cb96:	21ff      	movs	r1, #255	; 0xff
    cb98:	2330      	movs	r3, #48	; 0x30
    cb9a:	4a03      	ldr	r2, [pc, #12]	; (cba8 <InitDefault920ChannelsKR+0x124>)
    cb9c:	54d1      	strb	r1, [r2, r3]
    cb9e:	bc1c      	pop	{r2, r3, r4}
    cba0:	4690      	mov	r8, r2
    cba2:	4699      	mov	r9, r3
    cba4:	46a2      	mov	sl, r4
    cba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cba8:	200029b0 	.word	0x200029b0
    cbac:	00016849 	.word	0x00016849
    cbb0:	00018c94 	.word	0x00018c94
    cbb4:	00016837 	.word	0x00016837
    cbb8:	00018c70 	.word	0x00018c70

0000cbbc <LORAREG_GetAttr>:
    cbbc:	b510      	push	{r4, lr}
    cbbe:	230a      	movs	r3, #10
    cbc0:	283c      	cmp	r0, #60	; 0x3c
    cbc2:	d901      	bls.n	cbc8 <LORAREG_GetAttr+0xc>
    cbc4:	0018      	movs	r0, r3
    cbc6:	bd10      	pop	{r4, pc}
    cbc8:	0084      	lsls	r4, r0, #2
    cbca:	4b02      	ldr	r3, [pc, #8]	; (cbd4 <LORAREG_GetAttr+0x18>)
    cbcc:	58e3      	ldr	r3, [r4, r3]
    cbce:	4798      	blx	r3
    cbd0:	0003      	movs	r3, r0
    cbd2:	e7f7      	b.n	cbc4 <LORAREG_GetAttr+0x8>
    cbd4:	20001b90 	.word	0x20001b90

0000cbd8 <LORAREG_ValidateAttr>:
    cbd8:	b510      	push	{r4, lr}
    cbda:	230a      	movs	r3, #10
    cbdc:	283c      	cmp	r0, #60	; 0x3c
    cbde:	d901      	bls.n	cbe4 <LORAREG_ValidateAttr+0xc>
    cbe0:	0018      	movs	r0, r3
    cbe2:	bd10      	pop	{r4, pc}
    cbe4:	0082      	lsls	r2, r0, #2
    cbe6:	4b02      	ldr	r3, [pc, #8]	; (cbf0 <LORAREG_ValidateAttr+0x18>)
    cbe8:	58d3      	ldr	r3, [r2, r3]
    cbea:	4798      	blx	r3
    cbec:	0003      	movs	r3, r0
    cbee:	e7f7      	b.n	cbe0 <LORAREG_ValidateAttr+0x8>
    cbf0:	20001d78 	.word	0x20001d78

0000cbf4 <LORAREG_SetAttr>:
    cbf4:	b510      	push	{r4, lr}
    cbf6:	230a      	movs	r3, #10
    cbf8:	283c      	cmp	r0, #60	; 0x3c
    cbfa:	d901      	bls.n	cc00 <LORAREG_SetAttr+0xc>
    cbfc:	0018      	movs	r0, r3
    cbfe:	bd10      	pop	{r4, pc}
    cc00:	0082      	lsls	r2, r0, #2
    cc02:	4b02      	ldr	r3, [pc, #8]	; (cc0c <LORAREG_SetAttr+0x18>)
    cc04:	58d3      	ldr	r3, [r2, r3]
    cc06:	4798      	blx	r3
    cc08:	0003      	movs	r3, r0
    cc0a:	e7f7      	b.n	cbfc <LORAREG_SetAttr+0x8>
    cc0c:	20001c84 	.word	0x20001c84

0000cc10 <setDefaultTxPower>:
    cc10:	2800      	cmp	r0, #0
    cc12:	d00e      	beq.n	cc32 <setDefaultTxPower+0x22>
    cc14:	2805      	cmp	r0, #5
    cc16:	d013      	beq.n	cc40 <setDefaultTxPower+0x30>
    cc18:	2804      	cmp	r0, #4
    cc1a:	d017      	beq.n	cc4c <setDefaultTxPower+0x3c>
    cc1c:	2803      	cmp	r0, #3
    cc1e:	d01b      	beq.n	cc58 <setDefaultTxPower+0x48>
    cc20:	230a      	movs	r3, #10
    cc22:	2802      	cmp	r0, #2
    cc24:	d10a      	bne.n	cc3c <setDefaultTxPower+0x2c>
    cc26:	2107      	movs	r1, #7
    cc28:	331d      	adds	r3, #29
    cc2a:	4a0e      	ldr	r2, [pc, #56]	; (cc64 <setDefaultTxPower+0x54>)
    cc2c:	54d1      	strb	r1, [r2, r3]
    cc2e:	3b1f      	subs	r3, #31
    cc30:	e004      	b.n	cc3c <setDefaultTxPower+0x2c>
    cc32:	2101      	movs	r1, #1
    cc34:	2327      	movs	r3, #39	; 0x27
    cc36:	4a0b      	ldr	r2, [pc, #44]	; (cc64 <setDefaultTxPower+0x54>)
    cc38:	54d1      	strb	r1, [r2, r3]
    cc3a:	3b1f      	subs	r3, #31
    cc3c:	0018      	movs	r0, r3
    cc3e:	4770      	bx	lr
    cc40:	2101      	movs	r1, #1
    cc42:	2327      	movs	r3, #39	; 0x27
    cc44:	4a07      	ldr	r2, [pc, #28]	; (cc64 <setDefaultTxPower+0x54>)
    cc46:	54d1      	strb	r1, [r2, r3]
    cc48:	3b1f      	subs	r3, #31
    cc4a:	e7f7      	b.n	cc3c <setDefaultTxPower+0x2c>
    cc4c:	2101      	movs	r1, #1
    cc4e:	2327      	movs	r3, #39	; 0x27
    cc50:	4a04      	ldr	r2, [pc, #16]	; (cc64 <setDefaultTxPower+0x54>)
    cc52:	54d1      	strb	r1, [r2, r3]
    cc54:	3b1f      	subs	r3, #31
    cc56:	e7f1      	b.n	cc3c <setDefaultTxPower+0x2c>
    cc58:	2107      	movs	r1, #7
    cc5a:	2327      	movs	r3, #39	; 0x27
    cc5c:	4a01      	ldr	r2, [pc, #4]	; (cc64 <setDefaultTxPower+0x54>)
    cc5e:	54d1      	strb	r1, [r2, r3]
    cc60:	3b1f      	subs	r3, #31
    cc62:	e7eb      	b.n	cc3c <setDefaultTxPower+0x2c>
    cc64:	200029b0 	.word	0x200029b0

0000cc68 <Enableallchannels>:
    cc68:	b510      	push	{r4, lr}
    cc6a:	2000      	movs	r0, #0
    cc6c:	490a      	ldr	r1, [pc, #40]	; (cc98 <Enableallchannels+0x30>)
    cc6e:	2401      	movs	r4, #1
    cc70:	790b      	ldrb	r3, [r1, #4]
    cc72:	794a      	ldrb	r2, [r1, #5]
    cc74:	0212      	lsls	r2, r2, #8
    cc76:	431a      	orrs	r2, r3
    cc78:	798b      	ldrb	r3, [r1, #6]
    cc7a:	041b      	lsls	r3, r3, #16
    cc7c:	431a      	orrs	r2, r3
    cc7e:	79cb      	ldrb	r3, [r1, #7]
    cc80:	061b      	lsls	r3, r3, #24
    cc82:	4313      	orrs	r3, r2
    cc84:	541c      	strb	r4, [r3, r0]
    cc86:	3002      	adds	r0, #2
    cc88:	2890      	cmp	r0, #144	; 0x90
    cc8a:	d1f1      	bne.n	cc70 <Enableallchannels+0x8>
    cc8c:	2100      	movs	r1, #0
    cc8e:	23ac      	movs	r3, #172	; 0xac
    cc90:	005b      	lsls	r3, r3, #1
    cc92:	4a01      	ldr	r2, [pc, #4]	; (cc98 <Enableallchannels+0x30>)
    cc94:	54d1      	strb	r1, [r2, r3]
    cc96:	bd10      	pop	{r4, pc}
    cc98:	200029b0 	.word	0x200029b0

0000cc9c <LORAREG_EnableallChannels>:
    cc9c:	b510      	push	{r4, lr}
    cc9e:	2800      	cmp	r0, #0
    cca0:	d00a      	beq.n	ccb8 <LORAREG_EnableallChannels+0x1c>
    cca2:	2801      	cmp	r0, #1
    cca4:	d00b      	beq.n	ccbe <LORAREG_EnableallChannels+0x22>
    cca6:	2805      	cmp	r0, #5
    cca8:	d00c      	beq.n	ccc4 <LORAREG_EnableallChannels+0x28>
    ccaa:	2804      	cmp	r0, #4
    ccac:	d00d      	beq.n	ccca <LORAREG_EnableallChannels+0x2e>
    ccae:	3802      	subs	r0, #2
    ccb0:	2801      	cmp	r0, #1
    ccb2:	d90d      	bls.n	ccd0 <LORAREG_EnableallChannels+0x34>
    ccb4:	2008      	movs	r0, #8
    ccb6:	bd10      	pop	{r4, pc}
    ccb8:	4b07      	ldr	r3, [pc, #28]	; (ccd8 <LORAREG_EnableallChannels+0x3c>)
    ccba:	4798      	blx	r3
    ccbc:	e7fa      	b.n	ccb4 <LORAREG_EnableallChannels+0x18>
    ccbe:	4b07      	ldr	r3, [pc, #28]	; (ccdc <LORAREG_EnableallChannels+0x40>)
    ccc0:	4798      	blx	r3
    ccc2:	e7f7      	b.n	ccb4 <LORAREG_EnableallChannels+0x18>
    ccc4:	4b06      	ldr	r3, [pc, #24]	; (cce0 <LORAREG_EnableallChannels+0x44>)
    ccc6:	4798      	blx	r3
    ccc8:	e7f4      	b.n	ccb4 <LORAREG_EnableallChannels+0x18>
    ccca:	4b06      	ldr	r3, [pc, #24]	; (cce4 <LORAREG_EnableallChannels+0x48>)
    cccc:	4798      	blx	r3
    ccce:	e7f1      	b.n	ccb4 <LORAREG_EnableallChannels+0x18>
    ccd0:	4b05      	ldr	r3, [pc, #20]	; (cce8 <LORAREG_EnableallChannels+0x4c>)
    ccd2:	4798      	blx	r3
    ccd4:	e7ee      	b.n	ccb4 <LORAREG_EnableallChannels+0x18>
    ccd6:	46c0      	nop			; (mov r8, r8)
    ccd8:	0000c76d 	.word	0x0000c76d
    ccdc:	0000c871 	.word	0x0000c871
    cce0:	0000c965 	.word	0x0000c965
    cce4:	0000ca85 	.word	0x0000ca85
    cce8:	0000cc69 	.word	0x0000cc69

0000ccec <AESEncode>:
    ccec:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccee:	b083      	sub	sp, #12
    ccf0:	0004      	movs	r4, r0
    ccf2:	000e      	movs	r6, r1
    ccf4:	4a2b      	ldr	r2, [pc, #172]	; (cda4 <AESEncode+0xb8>)
    ccf6:	2101      	movs	r1, #1
    ccf8:	7011      	strb	r1, [r2, #0]
    ccfa:	2300      	movs	r3, #0
    ccfc:	7053      	strb	r3, [r2, #1]
    ccfe:	7091      	strb	r1, [r2, #2]
    cd00:	70d3      	strb	r3, [r2, #3]
    cd02:	7113      	strb	r3, [r2, #4]
    cd04:	7213      	strb	r3, [r2, #8]
    cd06:	4928      	ldr	r1, [pc, #160]	; (cda8 <AESEncode+0xbc>)
    cd08:	4828      	ldr	r0, [pc, #160]	; (cdac <AESEncode+0xc0>)
    cd0a:	4b29      	ldr	r3, [pc, #164]	; (cdb0 <AESEncode+0xc4>)
    cd0c:	4798      	blx	r3
    cd0e:	2100      	movs	r1, #0
    cd10:	ad01      	add	r5, sp, #4
    cd12:	4f28      	ldr	r7, [pc, #160]	; (cdb4 <AESEncode+0xc8>)
    cd14:	1870      	adds	r0, r6, r1
    cd16:	2300      	movs	r3, #0
    cd18:	5cc2      	ldrb	r2, [r0, r3]
    cd1a:	555a      	strb	r2, [r3, r5]
    cd1c:	3301      	adds	r3, #1
    cd1e:	2b04      	cmp	r3, #4
    cd20:	d1fa      	bne.n	cd18 <AESEncode+0x2c>
    cd22:	9b01      	ldr	r3, [sp, #4]
    cd24:	51cb      	str	r3, [r1, r7]
    cd26:	3104      	adds	r1, #4
    cd28:	2910      	cmp	r1, #16
    cd2a:	d1f3      	bne.n	cd14 <AESEncode+0x28>
    cd2c:	4d1f      	ldr	r5, [pc, #124]	; (cdac <AESEncode+0xc0>)
    cd2e:	4921      	ldr	r1, [pc, #132]	; (cdb4 <AESEncode+0xc8>)
    cd30:	0028      	movs	r0, r5
    cd32:	4b21      	ldr	r3, [pc, #132]	; (cdb8 <AESEncode+0xcc>)
    cd34:	4798      	blx	r3
    cd36:	682a      	ldr	r2, [r5, #0]
    cd38:	7913      	ldrb	r3, [r2, #4]
    cd3a:	2102      	movs	r1, #2
    cd3c:	430b      	orrs	r3, r1
    cd3e:	7113      	strb	r3, [r2, #4]
    cd40:	2100      	movs	r1, #0
    cd42:	ad01      	add	r5, sp, #4
    cd44:	4e1b      	ldr	r6, [pc, #108]	; (cdb4 <AESEncode+0xc8>)
    cd46:	1860      	adds	r0, r4, r1
    cd48:	2300      	movs	r3, #0
    cd4a:	5cc2      	ldrb	r2, [r0, r3]
    cd4c:	555a      	strb	r2, [r3, r5]
    cd4e:	3301      	adds	r3, #1
    cd50:	2b04      	cmp	r3, #4
    cd52:	d1fa      	bne.n	cd4a <AESEncode+0x5e>
    cd54:	9b01      	ldr	r3, [sp, #4]
    cd56:	518b      	str	r3, [r1, r6]
    cd58:	3104      	adds	r1, #4
    cd5a:	2910      	cmp	r1, #16
    cd5c:	d1f3      	bne.n	cd46 <AESEncode+0x5a>
    cd5e:	4d13      	ldr	r5, [pc, #76]	; (cdac <AESEncode+0xc0>)
    cd60:	4914      	ldr	r1, [pc, #80]	; (cdb4 <AESEncode+0xc8>)
    cd62:	0028      	movs	r0, r5
    cd64:	4b15      	ldr	r3, [pc, #84]	; (cdbc <AESEncode+0xd0>)
    cd66:	4798      	blx	r3
    cd68:	682d      	ldr	r5, [r5, #0]
    cd6a:	792b      	ldrb	r3, [r5, #4]
    cd6c:	2202      	movs	r2, #2
    cd6e:	4393      	bics	r3, r2
    cd70:	712b      	strb	r3, [r5, #4]
    cd72:	2101      	movs	r1, #1
    cd74:	2002      	movs	r0, #2
    cd76:	e001      	b.n	cd7c <AESEncode+0x90>
    cd78:	4211      	tst	r1, r2
    cd7a:	d107      	bne.n	cd8c <AESEncode+0xa0>
    cd7c:	79eb      	ldrb	r3, [r5, #7]
    cd7e:	b2db      	uxtb	r3, r3
    cd80:	000a      	movs	r2, r1
    cd82:	401a      	ands	r2, r3
    cd84:	4218      	tst	r0, r3
    cd86:	d0f7      	beq.n	cd78 <AESEncode+0x8c>
    cd88:	4302      	orrs	r2, r0
    cd8a:	e7f5      	b.n	cd78 <AESEncode+0x8c>
    cd8c:	4d09      	ldr	r5, [pc, #36]	; (cdb4 <AESEncode+0xc8>)
    cd8e:	0029      	movs	r1, r5
    cd90:	4806      	ldr	r0, [pc, #24]	; (cdac <AESEncode+0xc0>)
    cd92:	4b0b      	ldr	r3, [pc, #44]	; (cdc0 <AESEncode+0xd4>)
    cd94:	4798      	blx	r3
    cd96:	2210      	movs	r2, #16
    cd98:	0029      	movs	r1, r5
    cd9a:	0020      	movs	r0, r4
    cd9c:	4b09      	ldr	r3, [pc, #36]	; (cdc4 <AESEncode+0xd8>)
    cd9e:	4798      	blx	r3
    cda0:	b003      	add	sp, #12
    cda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cda4:	20002bbc 	.word	0x20002bbc
    cda8:	42003400 	.word	0x42003400
    cdac:	20002bc8 	.word	0x20002bc8
    cdb0:	00004681 	.word	0x00004681
    cdb4:	20001e6c 	.word	0x20001e6c
    cdb8:	00004715 	.word	0x00004715
    cdbc:	00004749 	.word	0x00004749
    cdc0:	00004799 	.word	0x00004799
    cdc4:	00016837 	.word	0x00016837

0000cdc8 <AESInit>:
    cdc8:	b570      	push	{r4, r5, r6, lr}
    cdca:	4d07      	ldr	r5, [pc, #28]	; (cde8 <AESInit+0x20>)
    cdcc:	0028      	movs	r0, r5
    cdce:	4b07      	ldr	r3, [pc, #28]	; (cdec <AESInit+0x24>)
    cdd0:	4798      	blx	r3
    cdd2:	4c07      	ldr	r4, [pc, #28]	; (cdf0 <AESInit+0x28>)
    cdd4:	002a      	movs	r2, r5
    cdd6:	4907      	ldr	r1, [pc, #28]	; (cdf4 <AESInit+0x2c>)
    cdd8:	0020      	movs	r0, r4
    cdda:	4b07      	ldr	r3, [pc, #28]	; (cdf8 <AESInit+0x30>)
    cddc:	4798      	blx	r3
    cdde:	0020      	movs	r0, r4
    cde0:	4b06      	ldr	r3, [pc, #24]	; (cdfc <AESInit+0x34>)
    cde2:	4798      	blx	r3
    cde4:	bd70      	pop	{r4, r5, r6, pc}
    cde6:	46c0      	nop			; (mov r8, r8)
    cde8:	20002bbc 	.word	0x20002bbc
    cdec:	00004645 	.word	0x00004645
    cdf0:	20002bc8 	.word	0x20002bc8
    cdf4:	42003400 	.word	0x42003400
    cdf8:	000046f5 	.word	0x000046f5
    cdfc:	0000465f 	.word	0x0000465f

0000ce00 <hwTimerExpiryCallback>:
    ce00:	b510      	push	{r4, lr}
    ce02:	4b06      	ldr	r3, [pc, #24]	; (ce1c <hwTimerExpiryCallback+0x1c>)
    ce04:	781b      	ldrb	r3, [r3, #0]
    ce06:	2b00      	cmp	r3, #0
    ce08:	d100      	bne.n	ce0c <hwTimerExpiryCallback+0xc>
    ce0a:	bd10      	pop	{r4, pc}
    ce0c:	2201      	movs	r2, #1
    ce0e:	4b04      	ldr	r3, [pc, #16]	; (ce20 <hwTimerExpiryCallback+0x20>)
    ce10:	701a      	strb	r2, [r3, #0]
    ce12:	2001      	movs	r0, #1
    ce14:	4b03      	ldr	r3, [pc, #12]	; (ce24 <hwTimerExpiryCallback+0x24>)
    ce16:	4798      	blx	r3
    ce18:	e7f7      	b.n	ce0a <hwTimerExpiryCallback+0xa>
    ce1a:	46c0      	nop			; (mov r8, r8)
    ce1c:	20001e8c 	.word	0x20001e8c
    ce20:	20002d72 	.word	0x20002d72
    ce24:	0000d71d 	.word	0x0000d71d

0000ce28 <hwTimerOverflowCallback>:
    ce28:	b510      	push	{r4, lr}
    ce2a:	b082      	sub	sp, #8
    ce2c:	4925      	ldr	r1, [pc, #148]	; (cec4 <hwTimerOverflowCallback+0x9c>)
    ce2e:	880a      	ldrh	r2, [r1, #0]
    ce30:	b292      	uxth	r2, r2
    ce32:	880b      	ldrh	r3, [r1, #0]
    ce34:	3301      	adds	r3, #1
    ce36:	b29b      	uxth	r3, r3
    ce38:	800b      	strh	r3, [r1, #0]
    ce3a:	429a      	cmp	r2, r3
    ce3c:	d903      	bls.n	ce46 <hwTimerOverflowCallback+0x1e>
    ce3e:	4a22      	ldr	r2, [pc, #136]	; (cec8 <hwTimerOverflowCallback+0xa0>)
    ce40:	6813      	ldr	r3, [r2, #0]
    ce42:	3301      	adds	r3, #1
    ce44:	6013      	str	r3, [r2, #0]
    ce46:	f3ef 8310 	mrs	r3, PRIMASK
    ce4a:	425a      	negs	r2, r3
    ce4c:	4153      	adcs	r3, r2
    ce4e:	9301      	str	r3, [sp, #4]
    ce50:	b672      	cpsid	i
    ce52:	f3bf 8f5f 	dmb	sy
    ce56:	2200      	movs	r2, #0
    ce58:	4b1c      	ldr	r3, [pc, #112]	; (cecc <hwTimerOverflowCallback+0xa4>)
    ce5a:	701a      	strb	r2, [r3, #0]
    ce5c:	9c01      	ldr	r4, [sp, #4]
    ce5e:	4b1c      	ldr	r3, [pc, #112]	; (ced0 <hwTimerOverflowCallback+0xa8>)
    ce60:	681b      	ldr	r3, [r3, #0]
    ce62:	2bff      	cmp	r3, #255	; 0xff
    ce64:	d00d      	beq.n	ce82 <hwTimerOverflowCallback+0x5a>
    ce66:	0119      	lsls	r1, r3, #4
    ce68:	4a1a      	ldr	r2, [pc, #104]	; (ced4 <hwTimerOverflowCallback+0xac>)
    ce6a:	1852      	adds	r2, r2, r1
    ce6c:	7b52      	ldrb	r2, [r2, #13]
    ce6e:	2a00      	cmp	r2, #0
    ce70:	d107      	bne.n	ce82 <hwTimerOverflowCallback+0x5a>
    ce72:	4a18      	ldr	r2, [pc, #96]	; (ced4 <hwTimerOverflowCallback+0xac>)
    ce74:	5888      	ldr	r0, [r1, r2]
    ce76:	4b13      	ldr	r3, [pc, #76]	; (cec4 <hwTimerOverflowCallback+0x9c>)
    ce78:	881b      	ldrh	r3, [r3, #0]
    ce7a:	b29b      	uxth	r3, r3
    ce7c:	0c02      	lsrs	r2, r0, #16
    ce7e:	429a      	cmp	r2, r3
    ce80:	d00c      	beq.n	ce9c <hwTimerOverflowCallback+0x74>
    ce82:	23ff      	movs	r3, #255	; 0xff
    ce84:	4223      	tst	r3, r4
    ce86:	d005      	beq.n	ce94 <hwTimerOverflowCallback+0x6c>
    ce88:	2201      	movs	r2, #1
    ce8a:	4b10      	ldr	r3, [pc, #64]	; (cecc <hwTimerOverflowCallback+0xa4>)
    ce8c:	701a      	strb	r2, [r3, #0]
    ce8e:	f3bf 8f5f 	dmb	sy
    ce92:	b662      	cpsie	i
    ce94:	4b10      	ldr	r3, [pc, #64]	; (ced8 <hwTimerOverflowCallback+0xb0>)
    ce96:	4798      	blx	r3
    ce98:	b002      	add	sp, #8
    ce9a:	bd10      	pop	{r4, pc}
    ce9c:	b280      	uxth	r0, r0
    ce9e:	28ff      	cmp	r0, #255	; 0xff
    cea0:	d909      	bls.n	ceb6 <hwTimerOverflowCallback+0x8e>
    cea2:	4b0e      	ldr	r3, [pc, #56]	; (cedc <hwTimerOverflowCallback+0xb4>)
    cea4:	4798      	blx	r3
    cea6:	4b0a      	ldr	r3, [pc, #40]	; (ced0 <hwTimerOverflowCallback+0xa8>)
    cea8:	681a      	ldr	r2, [r3, #0]
    ceaa:	0112      	lsls	r2, r2, #4
    ceac:	4b09      	ldr	r3, [pc, #36]	; (ced4 <hwTimerOverflowCallback+0xac>)
    ceae:	189b      	adds	r3, r3, r2
    ceb0:	2201      	movs	r2, #1
    ceb2:	735a      	strb	r2, [r3, #13]
    ceb4:	e7e5      	b.n	ce82 <hwTimerOverflowCallback+0x5a>
    ceb6:	2201      	movs	r2, #1
    ceb8:	4b09      	ldr	r3, [pc, #36]	; (cee0 <hwTimerOverflowCallback+0xb8>)
    ceba:	701a      	strb	r2, [r3, #0]
    cebc:	2001      	movs	r0, #1
    cebe:	4b09      	ldr	r3, [pc, #36]	; (cee4 <hwTimerOverflowCallback+0xbc>)
    cec0:	4798      	blx	r3
    cec2:	e7de      	b.n	ce82 <hwTimerOverflowCallback+0x5a>
    cec4:	20002d70 	.word	0x20002d70
    cec8:	20002d74 	.word	0x20002d74
    cecc:	20000008 	.word	0x20000008
    ced0:	20001e88 	.word	0x20001e88
    ced4:	20002be0 	.word	0x20002be0
    ced8:	0000bebd 	.word	0x0000bebd
    cedc:	00013491 	.word	0x00013491
    cee0:	20002d72 	.word	0x20002d72
    cee4:	0000d71d 	.word	0x0000d71d

0000cee8 <loadHwTimer>:
    cee8:	b570      	push	{r4, r5, r6, lr}
    ceea:	0004      	movs	r4, r0
    ceec:	28ff      	cmp	r0, #255	; 0xff
    ceee:	d030      	beq.n	cf52 <loadHwTimer+0x6a>
    cef0:	4b19      	ldr	r3, [pc, #100]	; (cf58 <loadHwTimer+0x70>)
    cef2:	681b      	ldr	r3, [r3, #0]
    cef4:	4b19      	ldr	r3, [pc, #100]	; (cf5c <loadHwTimer+0x74>)
    cef6:	881d      	ldrh	r5, [r3, #0]
    cef8:	042d      	lsls	r5, r5, #16
    cefa:	4b19      	ldr	r3, [pc, #100]	; (cf60 <loadHwTimer+0x78>)
    cefc:	4798      	blx	r3
    cefe:	0123      	lsls	r3, r4, #4
    cf00:	4328      	orrs	r0, r5
    cf02:	4a18      	ldr	r2, [pc, #96]	; (cf64 <loadHwTimer+0x7c>)
    cf04:	589b      	ldr	r3, [r3, r2]
    cf06:	1a18      	subs	r0, r3, r0
    cf08:	4b17      	ldr	r3, [pc, #92]	; (cf68 <loadHwTimer+0x80>)
    cf0a:	4298      	cmp	r0, r3
    cf0c:	d81a      	bhi.n	cf44 <loadHwTimer+0x5c>
    cf0e:	0122      	lsls	r2, r4, #4
    cf10:	4b14      	ldr	r3, [pc, #80]	; (cf64 <loadHwTimer+0x7c>)
    cf12:	189b      	adds	r3, r3, r2
    cf14:	7b5b      	ldrb	r3, [r3, #13]
    cf16:	2b00      	cmp	r3, #0
    cf18:	d11d      	bne.n	cf56 <loadHwTimer+0x6e>
    cf1a:	28ff      	cmp	r0, #255	; 0xff
    cf1c:	d90b      	bls.n	cf36 <loadHwTimer+0x4e>
    cf1e:	4b13      	ldr	r3, [pc, #76]	; (cf6c <loadHwTimer+0x84>)
    cf20:	4298      	cmp	r0, r3
    cf22:	d818      	bhi.n	cf56 <loadHwTimer+0x6e>
    cf24:	b280      	uxth	r0, r0
    cf26:	4b12      	ldr	r3, [pc, #72]	; (cf70 <loadHwTimer+0x88>)
    cf28:	4798      	blx	r3
    cf2a:	0124      	lsls	r4, r4, #4
    cf2c:	4b0d      	ldr	r3, [pc, #52]	; (cf64 <loadHwTimer+0x7c>)
    cf2e:	191c      	adds	r4, r3, r4
    cf30:	2301      	movs	r3, #1
    cf32:	7363      	strb	r3, [r4, #13]
    cf34:	e00f      	b.n	cf56 <loadHwTimer+0x6e>
    cf36:	2201      	movs	r2, #1
    cf38:	4b0e      	ldr	r3, [pc, #56]	; (cf74 <loadHwTimer+0x8c>)
    cf3a:	701a      	strb	r2, [r3, #0]
    cf3c:	2001      	movs	r0, #1
    cf3e:	4b0e      	ldr	r3, [pc, #56]	; (cf78 <loadHwTimer+0x90>)
    cf40:	4798      	blx	r3
    cf42:	e008      	b.n	cf56 <loadHwTimer+0x6e>
    cf44:	2201      	movs	r2, #1
    cf46:	4b0b      	ldr	r3, [pc, #44]	; (cf74 <loadHwTimer+0x8c>)
    cf48:	701a      	strb	r2, [r3, #0]
    cf4a:	2001      	movs	r0, #1
    cf4c:	4b0a      	ldr	r3, [pc, #40]	; (cf78 <loadHwTimer+0x90>)
    cf4e:	4798      	blx	r3
    cf50:	e001      	b.n	cf56 <loadHwTimer+0x6e>
    cf52:	4b0a      	ldr	r3, [pc, #40]	; (cf7c <loadHwTimer+0x94>)
    cf54:	4798      	blx	r3
    cf56:	bd70      	pop	{r4, r5, r6, pc}
    cf58:	20002d74 	.word	0x20002d74
    cf5c:	20002d70 	.word	0x20002d70
    cf60:	0001341d 	.word	0x0001341d
    cf64:	20002be0 	.word	0x20002be0
    cf68:	7ffffffe 	.word	0x7ffffffe
    cf6c:	0000ffff 	.word	0x0000ffff
    cf70:	00013491 	.word	0x00013491
    cf74:	20002d72 	.word	0x20002d72
    cf78:	0000d71d 	.word	0x0000d71d
    cf7c:	00013469 	.word	0x00013469

0000cf80 <swtimerInternalHandler>:
    cf80:	b510      	push	{r4, lr}
    cf82:	4b1d      	ldr	r3, [pc, #116]	; (cff8 <swtimerInternalHandler+0x78>)
    cf84:	781b      	ldrb	r3, [r3, #0]
    cf86:	2b00      	cmp	r3, #0
    cf88:	d027      	beq.n	cfda <swtimerInternalHandler+0x5a>
    cf8a:	2200      	movs	r2, #0
    cf8c:	4b1a      	ldr	r3, [pc, #104]	; (cff8 <swtimerInternalHandler+0x78>)
    cf8e:	701a      	strb	r2, [r3, #0]
    cf90:	4b1a      	ldr	r3, [pc, #104]	; (cffc <swtimerInternalHandler+0x7c>)
    cf92:	781b      	ldrb	r3, [r3, #0]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d020      	beq.n	cfda <swtimerInternalHandler+0x5a>
    cf98:	4b19      	ldr	r3, [pc, #100]	; (d000 <swtimerInternalHandler+0x80>)
    cf9a:	681b      	ldr	r3, [r3, #0]
    cf9c:	2bff      	cmp	r3, #255	; 0xff
    cf9e:	d01d      	beq.n	cfdc <swtimerInternalHandler+0x5c>
    cfa0:	4b18      	ldr	r3, [pc, #96]	; (d004 <swtimerInternalHandler+0x84>)
    cfa2:	6818      	ldr	r0, [r3, #0]
    cfa4:	4918      	ldr	r1, [pc, #96]	; (d008 <swtimerInternalHandler+0x88>)
    cfa6:	680b      	ldr	r3, [r1, #0]
    cfa8:	011a      	lsls	r2, r3, #4
    cfaa:	4b18      	ldr	r3, [pc, #96]	; (d00c <swtimerInternalHandler+0x8c>)
    cfac:	189b      	adds	r3, r3, r2
    cfae:	7318      	strb	r0, [r3, #12]
    cfb0:	6008      	str	r0, [r1, #0]
    cfb2:	4a16      	ldr	r2, [pc, #88]	; (d00c <swtimerInternalHandler+0x8c>)
    cfb4:	4913      	ldr	r1, [pc, #76]	; (d004 <swtimerInternalHandler+0x84>)
    cfb6:	680b      	ldr	r3, [r1, #0]
    cfb8:	011b      	lsls	r3, r3, #4
    cfba:	18d3      	adds	r3, r2, r3
    cfbc:	7b18      	ldrb	r0, [r3, #12]
    cfbe:	6008      	str	r0, [r1, #0]
    cfc0:	4b11      	ldr	r3, [pc, #68]	; (d008 <swtimerInternalHandler+0x88>)
    cfc2:	681b      	ldr	r3, [r3, #0]
    cfc4:	011b      	lsls	r3, r3, #4
    cfc6:	18d2      	adds	r2, r2, r3
    cfc8:	23ff      	movs	r3, #255	; 0xff
    cfca:	7313      	strb	r3, [r2, #12]
    cfcc:	4a0b      	ldr	r2, [pc, #44]	; (cffc <swtimerInternalHandler+0x7c>)
    cfce:	7813      	ldrb	r3, [r2, #0]
    cfd0:	3b01      	subs	r3, #1
    cfd2:	b2db      	uxtb	r3, r3
    cfd4:	7013      	strb	r3, [r2, #0]
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d10b      	bne.n	cff2 <swtimerInternalHandler+0x72>
    cfda:	bd10      	pop	{r4, pc}
    cfdc:	4b0a      	ldr	r3, [pc, #40]	; (d008 <swtimerInternalHandler+0x88>)
    cfde:	681b      	ldr	r3, [r3, #0]
    cfe0:	2bff      	cmp	r3, #255	; 0xff
    cfe2:	d1dd      	bne.n	cfa0 <swtimerInternalHandler+0x20>
    cfe4:	4b07      	ldr	r3, [pc, #28]	; (d004 <swtimerInternalHandler+0x84>)
    cfe6:	681b      	ldr	r3, [r3, #0]
    cfe8:	4a05      	ldr	r2, [pc, #20]	; (d000 <swtimerInternalHandler+0x80>)
    cfea:	6013      	str	r3, [r2, #0]
    cfec:	4a06      	ldr	r2, [pc, #24]	; (d008 <swtimerInternalHandler+0x88>)
    cfee:	6013      	str	r3, [r2, #0]
    cff0:	e7df      	b.n	cfb2 <swtimerInternalHandler+0x32>
    cff2:	4b07      	ldr	r3, [pc, #28]	; (d010 <swtimerInternalHandler+0x90>)
    cff4:	4798      	blx	r3
    cff6:	e7f0      	b.n	cfda <swtimerInternalHandler+0x5a>
    cff8:	20002d72 	.word	0x20002d72
    cffc:	20001e8c 	.word	0x20001e8c
    d000:	20001e80 	.word	0x20001e80
    d004:	20001e88 	.word	0x20001e88
    d008:	20001e84 	.word	0x20001e84
    d00c:	20002be0 	.word	0x20002be0
    d010:	0000cee9 	.word	0x0000cee9

0000d014 <SwTimerReset>:
    d014:	2300      	movs	r3, #0
    d016:	4a0d      	ldr	r2, [pc, #52]	; (d04c <SwTimerReset+0x38>)
    d018:	7013      	strb	r3, [r2, #0]
    d01a:	4a0d      	ldr	r2, [pc, #52]	; (d050 <SwTimerReset+0x3c>)
    d01c:	7013      	strb	r3, [r2, #0]
    d01e:	33ff      	adds	r3, #255	; 0xff
    d020:	4a0c      	ldr	r2, [pc, #48]	; (d054 <SwTimerReset+0x40>)
    d022:	6013      	str	r3, [r2, #0]
    d024:	4a0c      	ldr	r2, [pc, #48]	; (d058 <SwTimerReset+0x44>)
    d026:	6013      	str	r3, [r2, #0]
    d028:	4a0c      	ldr	r2, [pc, #48]	; (d05c <SwTimerReset+0x48>)
    d02a:	6013      	str	r3, [r2, #0]
    d02c:	4b0c      	ldr	r3, [pc, #48]	; (d060 <SwTimerReset+0x4c>)
    d02e:	0018      	movs	r0, r3
    d030:	3091      	adds	r0, #145	; 0x91
    d032:	30ff      	adds	r0, #255	; 0xff
    d034:	21ff      	movs	r1, #255	; 0xff
    d036:	2200      	movs	r2, #0
    d038:	7219      	strb	r1, [r3, #8]
    d03a:	601a      	str	r2, [r3, #0]
    d03c:	3310      	adds	r3, #16
    d03e:	4283      	cmp	r3, r0
    d040:	d1fa      	bne.n	d038 <SwTimerReset+0x24>
    d042:	2200      	movs	r2, #0
    d044:	4b07      	ldr	r3, [pc, #28]	; (d064 <SwTimerReset+0x50>)
    d046:	701a      	strb	r2, [r3, #0]
    d048:	4770      	bx	lr
    d04a:	46c0      	nop			; (mov r8, r8)
    d04c:	20001e8c 	.word	0x20001e8c
    d050:	20002d72 	.word	0x20002d72
    d054:	20001e88 	.word	0x20001e88
    d058:	20001e80 	.word	0x20001e80
    d05c:	20001e84 	.word	0x20001e84
    d060:	20002be4 	.word	0x20002be4
    d064:	20001e7c 	.word	0x20001e7c

0000d068 <SystemTimerInit>:
    d068:	b510      	push	{r4, lr}
    d06a:	4b08      	ldr	r3, [pc, #32]	; (d08c <SystemTimerInit+0x24>)
    d06c:	4798      	blx	r3
    d06e:	2300      	movs	r3, #0
    d070:	4a07      	ldr	r2, [pc, #28]	; (d090 <SystemTimerInit+0x28>)
    d072:	6013      	str	r3, [r2, #0]
    d074:	4a07      	ldr	r2, [pc, #28]	; (d094 <SystemTimerInit+0x2c>)
    d076:	8013      	strh	r3, [r2, #0]
    d078:	4b07      	ldr	r3, [pc, #28]	; (d098 <SystemTimerInit+0x30>)
    d07a:	4798      	blx	r3
    d07c:	4807      	ldr	r0, [pc, #28]	; (d09c <SystemTimerInit+0x34>)
    d07e:	4b08      	ldr	r3, [pc, #32]	; (d0a0 <SystemTimerInit+0x38>)
    d080:	4798      	blx	r3
    d082:	4808      	ldr	r0, [pc, #32]	; (d0a4 <SystemTimerInit+0x3c>)
    d084:	4b08      	ldr	r3, [pc, #32]	; (d0a8 <SystemTimerInit+0x40>)
    d086:	4798      	blx	r3
    d088:	bd10      	pop	{r4, pc}
    d08a:	46c0      	nop			; (mov r8, r8)
    d08c:	0000d015 	.word	0x0000d015
    d090:	20002d74 	.word	0x20002d74
    d094:	20002d70 	.word	0x20002d70
    d098:	000134fd 	.word	0x000134fd
    d09c:	0000ce29 	.word	0x0000ce29
    d0a0:	00013581 	.word	0x00013581
    d0a4:	0000ce01 	.word	0x0000ce01
    d0a8:	0001358d 	.word	0x0001358d

0000d0ac <SwTimerGetTime>:
    d0ac:	b570      	push	{r4, r5, r6, lr}
    d0ae:	4b05      	ldr	r3, [pc, #20]	; (d0c4 <SwTimerGetTime+0x18>)
    d0b0:	681c      	ldr	r4, [r3, #0]
    d0b2:	4b05      	ldr	r3, [pc, #20]	; (d0c8 <SwTimerGetTime+0x1c>)
    d0b4:	881d      	ldrh	r5, [r3, #0]
    d0b6:	042d      	lsls	r5, r5, #16
    d0b8:	4b04      	ldr	r3, [pc, #16]	; (d0cc <SwTimerGetTime+0x20>)
    d0ba:	4798      	blx	r3
    d0bc:	4328      	orrs	r0, r5
    d0be:	0021      	movs	r1, r4
    d0c0:	bd70      	pop	{r4, r5, r6, pc}
    d0c2:	46c0      	nop			; (mov r8, r8)
    d0c4:	20002d74 	.word	0x20002d74
    d0c8:	20002d70 	.word	0x20002d70
    d0cc:	0001341d 	.word	0x0001341d

0000d0d0 <SwTimerCreate>:
    d0d0:	b510      	push	{r4, lr}
    d0d2:	0004      	movs	r4, r0
    d0d4:	4b08      	ldr	r3, [pc, #32]	; (d0f8 <SwTimerCreate+0x28>)
    d0d6:	781b      	ldrb	r3, [r3, #0]
    d0d8:	2014      	movs	r0, #20
    d0da:	2b18      	cmp	r3, #24
    d0dc:	d900      	bls.n	d0e0 <SwTimerCreate+0x10>
    d0de:	bd10      	pop	{r4, pc}
    d0e0:	4b06      	ldr	r3, [pc, #24]	; (d0fc <SwTimerCreate+0x2c>)
    d0e2:	4798      	blx	r3
    d0e4:	4a04      	ldr	r2, [pc, #16]	; (d0f8 <SwTimerCreate+0x28>)
    d0e6:	7813      	ldrb	r3, [r2, #0]
    d0e8:	7023      	strb	r3, [r4, #0]
    d0ea:	3301      	adds	r3, #1
    d0ec:	7013      	strb	r3, [r2, #0]
    d0ee:	4b04      	ldr	r3, [pc, #16]	; (d100 <SwTimerCreate+0x30>)
    d0f0:	4798      	blx	r3
    d0f2:	2008      	movs	r0, #8
    d0f4:	e7f3      	b.n	d0de <SwTimerCreate+0xe>
    d0f6:	46c0      	nop			; (mov r8, r8)
    d0f8:	20001e7c 	.word	0x20001e7c
    d0fc:	0000c6d1 	.word	0x0000c6d1
    d100:	0000c6dd 	.word	0x0000c6dd

0000d104 <SwTimerStart>:
    d104:	b5f0      	push	{r4, r5, r6, r7, lr}
    d106:	46d6      	mov	lr, sl
    d108:	464f      	mov	r7, r9
    d10a:	4646      	mov	r6, r8
    d10c:	b5c0      	push	{r6, r7, lr}
    d10e:	b084      	sub	sp, #16
    d110:	0007      	movs	r7, r0
    d112:	000d      	movs	r5, r1
    d114:	0016      	movs	r6, r2
    d116:	001c      	movs	r4, r3
    d118:	200a      	movs	r0, #10
    d11a:	2f18      	cmp	r7, #24
    d11c:	d809      	bhi.n	d132 <SwTimerStart+0x2e>
    d11e:	2b00      	cmp	r3, #0
    d120:	d100      	bne.n	d124 <SwTimerStart+0x20>
    d122:	e08c      	b.n	d23e <SwTimerStart+0x13a>
    d124:	013a      	lsls	r2, r7, #4
    d126:	4b52      	ldr	r3, [pc, #328]	; (d270 <SwTimerStart+0x16c>)
    d128:	189b      	adds	r3, r3, r2
    d12a:	685b      	ldr	r3, [r3, #4]
    d12c:	300b      	adds	r0, #11
    d12e:	2b00      	cmp	r3, #0
    d130:	d005      	beq.n	d13e <SwTimerStart+0x3a>
    d132:	b004      	add	sp, #16
    d134:	bc1c      	pop	{r2, r3, r4}
    d136:	4690      	mov	r8, r2
    d138:	4699      	mov	r9, r3
    d13a:	46a2      	mov	sl, r4
    d13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d13e:	4b4d      	ldr	r3, [pc, #308]	; (d274 <SwTimerStart+0x170>)
    d140:	681b      	ldr	r3, [r3, #0]
    d142:	4b4d      	ldr	r3, [pc, #308]	; (d278 <SwTimerStart+0x174>)
    d144:	8818      	ldrh	r0, [r3, #0]
    d146:	0403      	lsls	r3, r0, #16
    d148:	4698      	mov	r8, r3
    d14a:	4b4c      	ldr	r3, [pc, #304]	; (d27c <SwTimerStart+0x178>)
    d14c:	4798      	blx	r3
    d14e:	4643      	mov	r3, r8
    d150:	4303      	orrs	r3, r0
    d152:	2e00      	cmp	r6, #0
    d154:	d003      	beq.n	d15e <SwTimerStart+0x5a>
    d156:	2e01      	cmp	r6, #1
    d158:	d038      	beq.n	d1cc <SwTimerStart+0xc8>
    d15a:	200a      	movs	r0, #10
    d15c:	e7e9      	b.n	d132 <SwTimerStart+0x2e>
    d15e:	4948      	ldr	r1, [pc, #288]	; (d280 <SwTimerStart+0x17c>)
    d160:	200a      	movs	r0, #10
    d162:	002a      	movs	r2, r5
    d164:	3aff      	subs	r2, #255	; 0xff
    d166:	18ed      	adds	r5, r5, r3
    d168:	428a      	cmp	r2, r1
    d16a:	d8e2      	bhi.n	d132 <SwTimerStart+0x2e>
    d16c:	f3ef 8310 	mrs	r3, PRIMASK
    d170:	425a      	negs	r2, r3
    d172:	4153      	adcs	r3, r2
    d174:	9303      	str	r3, [sp, #12]
    d176:	b672      	cpsid	i
    d178:	f3bf 8f5f 	dmb	sy
    d17c:	2600      	movs	r6, #0
    d17e:	4b41      	ldr	r3, [pc, #260]	; (d284 <SwTimerStart+0x180>)
    d180:	701e      	strb	r6, [r3, #0]
    d182:	9b03      	ldr	r3, [sp, #12]
    d184:	4699      	mov	r9, r3
    d186:	4b40      	ldr	r3, [pc, #256]	; (d288 <SwTimerStart+0x184>)
    d188:	4798      	blx	r3
    d18a:	4b39      	ldr	r3, [pc, #228]	; (d270 <SwTimerStart+0x16c>)
    d18c:	013a      	lsls	r2, r7, #4
    d18e:	50d5      	str	r5, [r2, r3]
    d190:	189b      	adds	r3, r3, r2
    d192:	605c      	str	r4, [r3, #4]
    d194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d196:	609a      	str	r2, [r3, #8]
    d198:	735e      	strb	r6, [r3, #13]
    d19a:	4a3c      	ldr	r2, [pc, #240]	; (d28c <SwTimerStart+0x188>)
    d19c:	7813      	ldrb	r3, [r2, #0]
    d19e:	3301      	adds	r3, #1
    d1a0:	b2db      	uxtb	r3, r3
    d1a2:	7013      	strb	r3, [r2, #0]
    d1a4:	4b3a      	ldr	r3, [pc, #232]	; (d290 <SwTimerStart+0x18c>)
    d1a6:	681b      	ldr	r3, [r3, #0]
    d1a8:	469a      	mov	sl, r3
    d1aa:	2bff      	cmp	r3, #255	; 0xff
    d1ac:	d016      	beq.n	d1dc <SwTimerStart+0xd8>
    d1ae:	466a      	mov	r2, sp
    d1b0:	7013      	strb	r3, [r2, #0]
    d1b2:	7812      	ldrb	r2, [r2, #0]
    d1b4:	4b35      	ldr	r3, [pc, #212]	; (d28c <SwTimerStart+0x188>)
    d1b6:	781b      	ldrb	r3, [r3, #0]
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d042      	beq.n	d242 <SwTimerStart+0x13e>
    d1bc:	9200      	str	r2, [sp, #0]
    d1be:	2300      	movs	r3, #0
    d1c0:	492b      	ldr	r1, [pc, #172]	; (d270 <SwTimerStart+0x16c>)
    d1c2:	4688      	mov	r8, r1
    d1c4:	4833      	ldr	r0, [pc, #204]	; (d294 <SwTimerStart+0x190>)
    d1c6:	468c      	mov	ip, r1
    d1c8:	4c30      	ldr	r4, [pc, #192]	; (d28c <SwTimerStart+0x188>)
    d1ca:	e02a      	b.n	d222 <SwTimerStart+0x11e>
    d1cc:	0028      	movs	r0, r5
    d1ce:	38ff      	subs	r0, #255	; 0xff
    d1d0:	1ac3      	subs	r3, r0, r3
    d1d2:	4a2b      	ldr	r2, [pc, #172]	; (d280 <SwTimerStart+0x17c>)
    d1d4:	200a      	movs	r0, #10
    d1d6:	4293      	cmp	r3, r2
    d1d8:	d9c8      	bls.n	d16c <SwTimerStart+0x68>
    d1da:	e7aa      	b.n	d132 <SwTimerStart+0x2e>
    d1dc:	4b2c      	ldr	r3, [pc, #176]	; (d290 <SwTimerStart+0x18c>)
    d1de:	601f      	str	r7, [r3, #0]
    d1e0:	0038      	movs	r0, r7
    d1e2:	4b2d      	ldr	r3, [pc, #180]	; (d298 <SwTimerStart+0x194>)
    d1e4:	4798      	blx	r3
    d1e6:	e036      	b.n	d256 <SwTimerStart+0x152>
    d1e8:	4b21      	ldr	r3, [pc, #132]	; (d270 <SwTimerStart+0x16c>)
    d1ea:	013c      	lsls	r4, r7, #4
    d1ec:	191c      	adds	r4, r3, r4
    d1ee:	7322      	strb	r2, [r4, #12]
    d1f0:	9901      	ldr	r1, [sp, #4]
    d1f2:	0109      	lsls	r1, r1, #4
    d1f4:	1859      	adds	r1, r3, r1
    d1f6:	2300      	movs	r3, #0
    d1f8:	734b      	strb	r3, [r1, #13]
    d1fa:	4592      	cmp	sl, r2
    d1fc:	d005      	beq.n	d20a <SwTimerStart+0x106>
    d1fe:	9b00      	ldr	r3, [sp, #0]
    d200:	0118      	lsls	r0, r3, #4
    d202:	4b1b      	ldr	r3, [pc, #108]	; (d270 <SwTimerStart+0x16c>)
    d204:	1818      	adds	r0, r3, r0
    d206:	7307      	strb	r7, [r0, #12]
    d208:	e025      	b.n	d256 <SwTimerStart+0x152>
    d20a:	4b21      	ldr	r3, [pc, #132]	; (d290 <SwTimerStart+0x18c>)
    d20c:	601f      	str	r7, [r3, #0]
    d20e:	0038      	movs	r0, r7
    d210:	4b21      	ldr	r3, [pc, #132]	; (d298 <SwTimerStart+0x194>)
    d212:	4798      	blx	r3
    d214:	e01f      	b.n	d256 <SwTimerStart+0x152>
    d216:	3301      	adds	r3, #1
    d218:	b2db      	uxtb	r3, r3
    d21a:	7821      	ldrb	r1, [r4, #0]
    d21c:	b2c9      	uxtb	r1, r1
    d21e:	428b      	cmp	r3, r1
    d220:	d210      	bcs.n	d244 <SwTimerStart+0x140>
    d222:	2aff      	cmp	r2, #255	; 0xff
    d224:	d0f7      	beq.n	d216 <SwTimerStart+0x112>
    d226:	9201      	str	r2, [sp, #4]
    d228:	0111      	lsls	r1, r2, #4
    d22a:	4646      	mov	r6, r8
    d22c:	5989      	ldr	r1, [r1, r6]
    d22e:	1a69      	subs	r1, r5, r1
    d230:	4281      	cmp	r1, r0
    d232:	d8d9      	bhi.n	d1e8 <SwTimerStart+0xe4>
    d234:	0111      	lsls	r1, r2, #4
    d236:	4461      	add	r1, ip
    d238:	9200      	str	r2, [sp, #0]
    d23a:	7b0a      	ldrb	r2, [r1, #12]
    d23c:	e7eb      	b.n	d216 <SwTimerStart+0x112>
    d23e:	200a      	movs	r0, #10
    d240:	e777      	b.n	d132 <SwTimerStart+0x2e>
    d242:	9200      	str	r2, [sp, #0]
    d244:	4b0a      	ldr	r3, [pc, #40]	; (d270 <SwTimerStart+0x16c>)
    d246:	9a00      	ldr	r2, [sp, #0]
    d248:	0110      	lsls	r0, r2, #4
    d24a:	1818      	adds	r0, r3, r0
    d24c:	7307      	strb	r7, [r0, #12]
    d24e:	013f      	lsls	r7, r7, #4
    d250:	19df      	adds	r7, r3, r7
    d252:	23ff      	movs	r3, #255	; 0xff
    d254:	733b      	strb	r3, [r7, #12]
    d256:	23ff      	movs	r3, #255	; 0xff
    d258:	2008      	movs	r0, #8
    d25a:	464a      	mov	r2, r9
    d25c:	4213      	tst	r3, r2
    d25e:	d100      	bne.n	d262 <SwTimerStart+0x15e>
    d260:	e767      	b.n	d132 <SwTimerStart+0x2e>
    d262:	2201      	movs	r2, #1
    d264:	4b07      	ldr	r3, [pc, #28]	; (d284 <SwTimerStart+0x180>)
    d266:	701a      	strb	r2, [r3, #0]
    d268:	f3bf 8f5f 	dmb	sy
    d26c:	b662      	cpsie	i
    d26e:	e760      	b.n	d132 <SwTimerStart+0x2e>
    d270:	20002be0 	.word	0x20002be0
    d274:	20002d74 	.word	0x20002d74
    d278:	20002d70 	.word	0x20002d70
    d27c:	0001341d 	.word	0x0001341d
    d280:	7fffff00 	.word	0x7fffff00
    d284:	20000008 	.word	0x20000008
    d288:	0000cf81 	.word	0x0000cf81
    d28c:	20001e8c 	.word	0x20001e8c
    d290:	20001e88 	.word	0x20001e88
    d294:	7ffffffe 	.word	0x7ffffffe
    d298:	0000cee9 	.word	0x0000cee9

0000d29c <SwTimerIsRunning>:
    d29c:	0103      	lsls	r3, r0, #4
    d29e:	4803      	ldr	r0, [pc, #12]	; (d2ac <SwTimerIsRunning+0x10>)
    d2a0:	18c0      	adds	r0, r0, r3
    d2a2:	6840      	ldr	r0, [r0, #4]
    d2a4:	1e43      	subs	r3, r0, #1
    d2a6:	4198      	sbcs	r0, r3
    d2a8:	b2c0      	uxtb	r0, r0
    d2aa:	4770      	bx	lr
    d2ac:	20002be0 	.word	0x20002be0

0000d2b0 <SwTimerReadValue>:
    d2b0:	b570      	push	{r4, r5, r6, lr}
    d2b2:	0102      	lsls	r2, r0, #4
    d2b4:	4b0d      	ldr	r3, [pc, #52]	; (d2ec <SwTimerReadValue+0x3c>)
    d2b6:	189b      	adds	r3, r3, r2
    d2b8:	685b      	ldr	r3, [r3, #4]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	d014      	beq.n	d2e8 <SwTimerReadValue+0x38>
    d2be:	4b0b      	ldr	r3, [pc, #44]	; (d2ec <SwTimerReadValue+0x3c>)
    d2c0:	58d5      	ldr	r5, [r2, r3]
    d2c2:	4b0b      	ldr	r3, [pc, #44]	; (d2f0 <SwTimerReadValue+0x40>)
    d2c4:	681b      	ldr	r3, [r3, #0]
    d2c6:	4b0b      	ldr	r3, [pc, #44]	; (d2f4 <SwTimerReadValue+0x44>)
    d2c8:	881c      	ldrh	r4, [r3, #0]
    d2ca:	0424      	lsls	r4, r4, #16
    d2cc:	4b0a      	ldr	r3, [pc, #40]	; (d2f8 <SwTimerReadValue+0x48>)
    d2ce:	4798      	blx	r3
    d2d0:	4320      	orrs	r0, r4
    d2d2:	4285      	cmp	r5, r0
    d2d4:	d305      	bcc.n	d2e2 <SwTimerReadValue+0x32>
    d2d6:	1a28      	subs	r0, r5, r0
    d2d8:	4b08      	ldr	r3, [pc, #32]	; (d2fc <SwTimerReadValue+0x4c>)
    d2da:	4298      	cmp	r0, r3
    d2dc:	d900      	bls.n	d2e0 <SwTimerReadValue+0x30>
    d2de:	2000      	movs	r0, #0
    d2e0:	bd70      	pop	{r4, r5, r6, pc}
    d2e2:	3d01      	subs	r5, #1
    d2e4:	1a28      	subs	r0, r5, r0
    d2e6:	e7f7      	b.n	d2d8 <SwTimerReadValue+0x28>
    d2e8:	2000      	movs	r0, #0
    d2ea:	e7f9      	b.n	d2e0 <SwTimerReadValue+0x30>
    d2ec:	20002be0 	.word	0x20002be0
    d2f0:	20002d74 	.word	0x20002d74
    d2f4:	20002d70 	.word	0x20002d70
    d2f8:	0001341d 	.word	0x0001341d
    d2fc:	7ffffffe 	.word	0x7ffffffe

0000d300 <SwTimerNextExpiryDuration>:
    d300:	b510      	push	{r4, lr}
    d302:	4b05      	ldr	r3, [pc, #20]	; (d318 <SwTimerNextExpiryDuration+0x18>)
    d304:	6818      	ldr	r0, [r3, #0]
    d306:	28ff      	cmp	r0, #255	; 0xff
    d308:	d102      	bne.n	d310 <SwTimerNextExpiryDuration+0x10>
    d30a:	2001      	movs	r0, #1
    d30c:	4240      	negs	r0, r0
    d30e:	bd10      	pop	{r4, pc}
    d310:	b2c0      	uxtb	r0, r0
    d312:	4b02      	ldr	r3, [pc, #8]	; (d31c <SwTimerNextExpiryDuration+0x1c>)
    d314:	4798      	blx	r3
    d316:	e7fa      	b.n	d30e <SwTimerNextExpiryDuration+0xe>
    d318:	20001e88 	.word	0x20001e88
    d31c:	0000d2b1 	.word	0x0000d2b1

0000d320 <SwTimersExecute>:
    d320:	b5f0      	push	{r4, r5, r6, r7, lr}
    d322:	46de      	mov	lr, fp
    d324:	4657      	mov	r7, sl
    d326:	464e      	mov	r6, r9
    d328:	4645      	mov	r5, r8
    d32a:	b5e0      	push	{r5, r6, r7, lr}
    d32c:	b083      	sub	sp, #12
    d32e:	4b2f      	ldr	r3, [pc, #188]	; (d3ec <SwTimersExecute+0xcc>)
    d330:	681b      	ldr	r3, [r3, #0]
    d332:	4b2f      	ldr	r3, [pc, #188]	; (d3f0 <SwTimersExecute+0xd0>)
    d334:	881b      	ldrh	r3, [r3, #0]
    d336:	4b2f      	ldr	r3, [pc, #188]	; (d3f4 <SwTimersExecute+0xd4>)
    d338:	4798      	blx	r3
    d33a:	f3ef 8210 	mrs	r2, PRIMASK
    d33e:	4253      	negs	r3, r2
    d340:	4153      	adcs	r3, r2
    d342:	9300      	str	r3, [sp, #0]
    d344:	b672      	cpsid	i
    d346:	f3bf 8f5f 	dmb	sy
    d34a:	2200      	movs	r2, #0
    d34c:	4b2a      	ldr	r3, [pc, #168]	; (d3f8 <SwTimersExecute+0xd8>)
    d34e:	701a      	strb	r2, [r3, #0]
    d350:	9c00      	ldr	r4, [sp, #0]
    d352:	4b2a      	ldr	r3, [pc, #168]	; (d3fc <SwTimersExecute+0xdc>)
    d354:	4798      	blx	r3
    d356:	23ff      	movs	r3, #255	; 0xff
    d358:	4223      	tst	r3, r4
    d35a:	d005      	beq.n	d368 <SwTimersExecute+0x48>
    d35c:	2201      	movs	r2, #1
    d35e:	4b26      	ldr	r3, [pc, #152]	; (d3f8 <SwTimersExecute+0xd8>)
    d360:	701a      	strb	r2, [r3, #0]
    d362:	f3bf 8f5f 	dmb	sy
    d366:	b662      	cpsie	i
    d368:	4b23      	ldr	r3, [pc, #140]	; (d3f8 <SwTimersExecute+0xd8>)
    d36a:	469a      	mov	sl, r3
    d36c:	4c24      	ldr	r4, [pc, #144]	; (d400 <SwTimersExecute+0xe0>)
    d36e:	4b25      	ldr	r3, [pc, #148]	; (d404 <SwTimersExecute+0xe4>)
    d370:	4699      	mov	r9, r3
    d372:	2200      	movs	r2, #0
    d374:	20ff      	movs	r0, #255	; 0xff
    d376:	4b24      	ldr	r3, [pc, #144]	; (d408 <SwTimersExecute+0xe8>)
    d378:	4698      	mov	r8, r3
    d37a:	4b1f      	ldr	r3, [pc, #124]	; (d3f8 <SwTimersExecute+0xd8>)
    d37c:	469c      	mov	ip, r3
    d37e:	e004      	b.n	d38a <SwTimersExecute+0x6a>
    d380:	4643      	mov	r3, r8
    d382:	6018      	str	r0, [r3, #0]
    d384:	e01e      	b.n	d3c4 <SwTimersExecute+0xa4>
    d386:	2e00      	cmp	r6, #0
    d388:	d125      	bne.n	d3d6 <SwTimersExecute+0xb6>
    d38a:	4b1d      	ldr	r3, [pc, #116]	; (d400 <SwTimersExecute+0xe0>)
    d38c:	681b      	ldr	r3, [r3, #0]
    d38e:	2bff      	cmp	r3, #255	; 0xff
    d390:	d024      	beq.n	d3dc <SwTimersExecute+0xbc>
    d392:	f3ef 8110 	mrs	r1, PRIMASK
    d396:	424b      	negs	r3, r1
    d398:	414b      	adcs	r3, r1
    d39a:	9301      	str	r3, [sp, #4]
    d39c:	b672      	cpsid	i
    d39e:	f3bf 8f5f 	dmb	sy
    d3a2:	4653      	mov	r3, sl
    d3a4:	701a      	strb	r2, [r3, #0]
    d3a6:	9f01      	ldr	r7, [sp, #4]
    d3a8:	6823      	ldr	r3, [r4, #0]
    d3aa:	011b      	lsls	r3, r3, #4
    d3ac:	444b      	add	r3, r9
    d3ae:	7b19      	ldrb	r1, [r3, #12]
    d3b0:	685e      	ldr	r6, [r3, #4]
    d3b2:	689d      	ldr	r5, [r3, #8]
    d3b4:	46ab      	mov	fp, r5
    d3b6:	7318      	strb	r0, [r3, #12]
    d3b8:	605a      	str	r2, [r3, #4]
    d3ba:	609a      	str	r2, [r3, #8]
    d3bc:	735a      	strb	r2, [r3, #13]
    d3be:	6021      	str	r1, [r4, #0]
    d3c0:	29ff      	cmp	r1, #255	; 0xff
    d3c2:	d0dd      	beq.n	d380 <SwTimersExecute+0x60>
    d3c4:	4238      	tst	r0, r7
    d3c6:	d0de      	beq.n	d386 <SwTimersExecute+0x66>
    d3c8:	2301      	movs	r3, #1
    d3ca:	4661      	mov	r1, ip
    d3cc:	700b      	strb	r3, [r1, #0]
    d3ce:	f3bf 8f5f 	dmb	sy
    d3d2:	b662      	cpsie	i
    d3d4:	e7d7      	b.n	d386 <SwTimersExecute+0x66>
    d3d6:	4658      	mov	r0, fp
    d3d8:	47b0      	blx	r6
    d3da:	e7ca      	b.n	d372 <SwTimersExecute+0x52>
    d3dc:	b003      	add	sp, #12
    d3de:	bc3c      	pop	{r2, r3, r4, r5}
    d3e0:	4690      	mov	r8, r2
    d3e2:	4699      	mov	r9, r3
    d3e4:	46a2      	mov	sl, r4
    d3e6:	46ab      	mov	fp, r5
    d3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	20002d74 	.word	0x20002d74
    d3f0:	20002d70 	.word	0x20002d70
    d3f4:	0001341d 	.word	0x0001341d
    d3f8:	20000008 	.word	0x20000008
    d3fc:	0000cf81 	.word	0x0000cf81
    d400:	20001e80 	.word	0x20001e80
    d404:	20002be0 	.word	0x20002be0
    d408:	20001e84 	.word	0x20001e84

0000d40c <TIMER_TaskHandler>:
    d40c:	b510      	push	{r4, lr}
    d40e:	4b02      	ldr	r3, [pc, #8]	; (d418 <TIMER_TaskHandler+0xc>)
    d410:	4798      	blx	r3
    d412:	2000      	movs	r0, #0
    d414:	bd10      	pop	{r4, pc}
    d416:	46c0      	nop			; (mov r8, r8)
    d418:	0000d321 	.word	0x0000d321

0000d41c <SwTimerStop>:
    d41c:	b570      	push	{r4, r5, r6, lr}
    d41e:	b082      	sub	sp, #8
    d420:	0004      	movs	r4, r0
    d422:	200a      	movs	r0, #10
    d424:	2c18      	cmp	r4, #24
    d426:	d901      	bls.n	d42c <SwTimerStop+0x10>
    d428:	b002      	add	sp, #8
    d42a:	bd70      	pop	{r4, r5, r6, pc}
    d42c:	f3ef 8310 	mrs	r3, PRIMASK
    d430:	425a      	negs	r2, r3
    d432:	4153      	adcs	r3, r2
    d434:	9301      	str	r3, [sp, #4]
    d436:	b672      	cpsid	i
    d438:	f3bf 8f5f 	dmb	sy
    d43c:	2200      	movs	r2, #0
    d43e:	4b47      	ldr	r3, [pc, #284]	; (d55c <SwTimerStop+0x140>)
    d440:	701a      	strb	r2, [r3, #0]
    d442:	9d01      	ldr	r5, [sp, #4]
    d444:	4b46      	ldr	r3, [pc, #280]	; (d560 <SwTimerStop+0x144>)
    d446:	4798      	blx	r3
    d448:	4b46      	ldr	r3, [pc, #280]	; (d564 <SwTimerStop+0x148>)
    d44a:	781b      	ldrb	r3, [r3, #0]
    d44c:	2b00      	cmp	r3, #0
    d44e:	d040      	beq.n	d4d2 <SwTimerStop+0xb6>
    d450:	4b44      	ldr	r3, [pc, #272]	; (d564 <SwTimerStop+0x148>)
    d452:	781b      	ldrb	r3, [r3, #0]
    d454:	b2db      	uxtb	r3, r3
    d456:	4a44      	ldr	r2, [pc, #272]	; (d568 <SwTimerStop+0x14c>)
    d458:	6816      	ldr	r6, [r2, #0]
    d45a:	b2f1      	uxtb	r1, r6
    d45c:	2b00      	cmp	r3, #0
    d45e:	d038      	beq.n	d4d2 <SwTimerStop+0xb6>
    d460:	428c      	cmp	r4, r1
    d462:	d00b      	beq.n	d47c <SwTimerStop+0x60>
    d464:	4841      	ldr	r0, [pc, #260]	; (d56c <SwTimerStop+0x150>)
    d466:	010a      	lsls	r2, r1, #4
    d468:	1882      	adds	r2, r0, r2
    d46a:	7b12      	ldrb	r2, [r2, #12]
    d46c:	3b01      	subs	r3, #1
    d46e:	b2db      	uxtb	r3, r3
    d470:	2b00      	cmp	r3, #0
    d472:	d02e      	beq.n	d4d2 <SwTimerStop+0xb6>
    d474:	4294      	cmp	r4, r2
    d476:	d001      	beq.n	d47c <SwTimerStop+0x60>
    d478:	0011      	movs	r1, r2
    d47a:	e7f4      	b.n	d466 <SwTimerStop+0x4a>
    d47c:	42a6      	cmp	r6, r4
    d47e:	d01d      	beq.n	d4bc <SwTimerStop+0xa0>
    d480:	4b3a      	ldr	r3, [pc, #232]	; (d56c <SwTimerStop+0x150>)
    d482:	0122      	lsls	r2, r4, #4
    d484:	189a      	adds	r2, r3, r2
    d486:	7b12      	ldrb	r2, [r2, #12]
    d488:	0109      	lsls	r1, r1, #4
    d48a:	1859      	adds	r1, r3, r1
    d48c:	730a      	strb	r2, [r1, #12]
    d48e:	0122      	lsls	r2, r4, #4
    d490:	4b36      	ldr	r3, [pc, #216]	; (d56c <SwTimerStop+0x150>)
    d492:	189b      	adds	r3, r3, r2
    d494:	22ff      	movs	r2, #255	; 0xff
    d496:	731a      	strb	r2, [r3, #12]
    d498:	4a32      	ldr	r2, [pc, #200]	; (d564 <SwTimerStop+0x148>)
    d49a:	7813      	ldrb	r3, [r2, #0]
    d49c:	3b01      	subs	r3, #1
    d49e:	b2db      	uxtb	r3, r3
    d4a0:	7013      	strb	r3, [r2, #0]
    d4a2:	0124      	lsls	r4, r4, #4
    d4a4:	4b31      	ldr	r3, [pc, #196]	; (d56c <SwTimerStop+0x150>)
    d4a6:	191c      	adds	r4, r3, r4
    d4a8:	2300      	movs	r3, #0
    d4aa:	6063      	str	r3, [r4, #4]
    d4ac:	60a3      	str	r3, [r4, #8]
    d4ae:	7363      	strb	r3, [r4, #13]
    d4b0:	33ff      	adds	r3, #255	; 0xff
    d4b2:	2008      	movs	r0, #8
    d4b4:	422b      	tst	r3, r5
    d4b6:	d0b7      	beq.n	d428 <SwTimerStop+0xc>
    d4b8:	2301      	movs	r3, #1
    d4ba:	e040      	b.n	d53e <SwTimerStop+0x122>
    d4bc:	4b2c      	ldr	r3, [pc, #176]	; (d570 <SwTimerStop+0x154>)
    d4be:	4798      	blx	r3
    d4c0:	0122      	lsls	r2, r4, #4
    d4c2:	4b2a      	ldr	r3, [pc, #168]	; (d56c <SwTimerStop+0x150>)
    d4c4:	189b      	adds	r3, r3, r2
    d4c6:	7b18      	ldrb	r0, [r3, #12]
    d4c8:	4b27      	ldr	r3, [pc, #156]	; (d568 <SwTimerStop+0x14c>)
    d4ca:	6018      	str	r0, [r3, #0]
    d4cc:	4b29      	ldr	r3, [pc, #164]	; (d574 <SwTimerStop+0x158>)
    d4ce:	4798      	blx	r3
    d4d0:	e7dd      	b.n	d48e <SwTimerStop+0x72>
    d4d2:	4b29      	ldr	r3, [pc, #164]	; (d578 <SwTimerStop+0x15c>)
    d4d4:	6818      	ldr	r0, [r3, #0]
    d4d6:	b2c2      	uxtb	r2, r0
    d4d8:	2aff      	cmp	r2, #255	; 0xff
    d4da:	d02c      	beq.n	d536 <SwTimerStop+0x11a>
    d4dc:	4294      	cmp	r4, r2
    d4de:	d009      	beq.n	d4f4 <SwTimerStop+0xd8>
    d4e0:	4922      	ldr	r1, [pc, #136]	; (d56c <SwTimerStop+0x150>)
    d4e2:	0113      	lsls	r3, r2, #4
    d4e4:	18cb      	adds	r3, r1, r3
    d4e6:	7b1b      	ldrb	r3, [r3, #12]
    d4e8:	2bff      	cmp	r3, #255	; 0xff
    d4ea:	d024      	beq.n	d536 <SwTimerStop+0x11a>
    d4ec:	429c      	cmp	r4, r3
    d4ee:	d001      	beq.n	d4f4 <SwTimerStop+0xd8>
    d4f0:	001a      	movs	r2, r3
    d4f2:	e7f6      	b.n	d4e2 <SwTimerStop+0xc6>
    d4f4:	42a0      	cmp	r0, r4
    d4f6:	d00d      	beq.n	d514 <SwTimerStop+0xf8>
    d4f8:	4b1c      	ldr	r3, [pc, #112]	; (d56c <SwTimerStop+0x150>)
    d4fa:	0121      	lsls	r1, r4, #4
    d4fc:	1859      	adds	r1, r3, r1
    d4fe:	7b09      	ldrb	r1, [r1, #12]
    d500:	0110      	lsls	r0, r2, #4
    d502:	181b      	adds	r3, r3, r0
    d504:	7319      	strb	r1, [r3, #12]
    d506:	4b1d      	ldr	r3, [pc, #116]	; (d57c <SwTimerStop+0x160>)
    d508:	681b      	ldr	r3, [r3, #0]
    d50a:	429c      	cmp	r4, r3
    d50c:	d1c9      	bne.n	d4a2 <SwTimerStop+0x86>
    d50e:	4b1b      	ldr	r3, [pc, #108]	; (d57c <SwTimerStop+0x160>)
    d510:	601a      	str	r2, [r3, #0]
    d512:	e7c6      	b.n	d4a2 <SwTimerStop+0x86>
    d514:	4b19      	ldr	r3, [pc, #100]	; (d57c <SwTimerStop+0x160>)
    d516:	681b      	ldr	r3, [r3, #0]
    d518:	4298      	cmp	r0, r3
    d51a:	d006      	beq.n	d52a <SwTimerStop+0x10e>
    d51c:	0100      	lsls	r0, r0, #4
    d51e:	4b13      	ldr	r3, [pc, #76]	; (d56c <SwTimerStop+0x150>)
    d520:	1818      	adds	r0, r3, r0
    d522:	7b02      	ldrb	r2, [r0, #12]
    d524:	4b14      	ldr	r3, [pc, #80]	; (d578 <SwTimerStop+0x15c>)
    d526:	601a      	str	r2, [r3, #0]
    d528:	e7bb      	b.n	d4a2 <SwTimerStop+0x86>
    d52a:	23ff      	movs	r3, #255	; 0xff
    d52c:	4a13      	ldr	r2, [pc, #76]	; (d57c <SwTimerStop+0x160>)
    d52e:	6013      	str	r3, [r2, #0]
    d530:	4a11      	ldr	r2, [pc, #68]	; (d578 <SwTimerStop+0x15c>)
    d532:	6013      	str	r3, [r2, #0]
    d534:	e7b5      	b.n	d4a2 <SwTimerStop+0x86>
    d536:	23ff      	movs	r3, #255	; 0xff
    d538:	422b      	tst	r3, r5
    d53a:	d00a      	beq.n	d552 <SwTimerStop+0x136>
    d53c:	2300      	movs	r3, #0
    d53e:	2101      	movs	r1, #1
    d540:	4a06      	ldr	r2, [pc, #24]	; (d55c <SwTimerStop+0x140>)
    d542:	7011      	strb	r1, [r2, #0]
    d544:	f3bf 8f5f 	dmb	sy
    d548:	b662      	cpsie	i
    d54a:	2b00      	cmp	r3, #0
    d54c:	d103      	bne.n	d556 <SwTimerStop+0x13a>
    d54e:	2015      	movs	r0, #21
    d550:	e76a      	b.n	d428 <SwTimerStop+0xc>
    d552:	2015      	movs	r0, #21
    d554:	e768      	b.n	d428 <SwTimerStop+0xc>
    d556:	2008      	movs	r0, #8
    d558:	e766      	b.n	d428 <SwTimerStop+0xc>
    d55a:	46c0      	nop			; (mov r8, r8)
    d55c:	20000008 	.word	0x20000008
    d560:	0000cf81 	.word	0x0000cf81
    d564:	20001e8c 	.word	0x20001e8c
    d568:	20001e88 	.word	0x20001e88
    d56c:	20002be0 	.word	0x20002be0
    d570:	00013469 	.word	0x00013469
    d574:	0000cee9 	.word	0x0000cee9
    d578:	20001e80 	.word	0x20001e80
    d57c:	20001e84 	.word	0x20001e84

0000d580 <SwTimerRunRemainingTime>:
    d580:	b5f0      	push	{r4, r5, r6, r7, lr}
    d582:	b083      	sub	sp, #12
    d584:	0005      	movs	r5, r0
    d586:	4b0b      	ldr	r3, [pc, #44]	; (d5b4 <SwTimerRunRemainingTime+0x34>)
    d588:	681c      	ldr	r4, [r3, #0]
    d58a:	0122      	lsls	r2, r4, #4
    d58c:	4b0a      	ldr	r3, [pc, #40]	; (d5b8 <SwTimerRunRemainingTime+0x38>)
    d58e:	189b      	adds	r3, r3, r2
    d590:	685e      	ldr	r6, [r3, #4]
    d592:	689f      	ldr	r7, [r3, #8]
    d594:	b2e4      	uxtb	r4, r4
    d596:	0020      	movs	r0, r4
    d598:	4b08      	ldr	r3, [pc, #32]	; (d5bc <SwTimerRunRemainingTime+0x3c>)
    d59a:	4798      	blx	r3
    d59c:	2808      	cmp	r0, #8
    d59e:	d001      	beq.n	d5a4 <SwTimerRunRemainingTime+0x24>
    d5a0:	b003      	add	sp, #12
    d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5a4:	9700      	str	r7, [sp, #0]
    d5a6:	0033      	movs	r3, r6
    d5a8:	2200      	movs	r2, #0
    d5aa:	0029      	movs	r1, r5
    d5ac:	0020      	movs	r0, r4
    d5ae:	4c04      	ldr	r4, [pc, #16]	; (d5c0 <SwTimerRunRemainingTime+0x40>)
    d5b0:	47a0      	blx	r4
    d5b2:	e7f5      	b.n	d5a0 <SwTimerRunRemainingTime+0x20>
    d5b4:	20001e88 	.word	0x20001e88
    d5b8:	20002be0 	.word	0x20002be0
    d5bc:	0000d41d 	.word	0x0000d41d
    d5c0:	0000d105 	.word	0x0000d105

0000d5c4 <SystemTimerSync>:
    d5c4:	b570      	push	{r4, r5, r6, lr}
    d5c6:	4b22      	ldr	r3, [pc, #136]	; (d650 <SystemTimerSync+0x8c>)
    d5c8:	681c      	ldr	r4, [r3, #0]
    d5ca:	685d      	ldr	r5, [r3, #4]
    d5cc:	1900      	adds	r0, r0, r4
    d5ce:	4169      	adcs	r1, r5
    d5d0:	6018      	str	r0, [r3, #0]
    d5d2:	6059      	str	r1, [r3, #4]
    d5d4:	4b1f      	ldr	r3, [pc, #124]	; (d654 <SystemTimerSync+0x90>)
    d5d6:	6019      	str	r1, [r3, #0]
    d5d8:	0c02      	lsrs	r2, r0, #16
    d5da:	4b1f      	ldr	r3, [pc, #124]	; (d658 <SystemTimerSync+0x94>)
    d5dc:	801a      	strh	r2, [r3, #0]
    d5de:	b280      	uxth	r0, r0
    d5e0:	4b1e      	ldr	r3, [pc, #120]	; (d65c <SystemTimerSync+0x98>)
    d5e2:	781b      	ldrb	r3, [r3, #0]
    d5e4:	4a1e      	ldr	r2, [pc, #120]	; (d660 <SystemTimerSync+0x9c>)
    d5e6:	7812      	ldrb	r2, [r2, #0]
    d5e8:	2a00      	cmp	r2, #0
    d5ea:	d012      	beq.n	d612 <SystemTimerSync+0x4e>
    d5ec:	2200      	movs	r2, #0
    d5ee:	4c1d      	ldr	r4, [pc, #116]	; (d664 <SystemTimerSync+0xa0>)
    d5f0:	4d1b      	ldr	r5, [pc, #108]	; (d660 <SystemTimerSync+0x9c>)
    d5f2:	e005      	b.n	d600 <SystemTimerSync+0x3c>
    d5f4:	3201      	adds	r2, #1
    d5f6:	b2d2      	uxtb	r2, r2
    d5f8:	7829      	ldrb	r1, [r5, #0]
    d5fa:	b2c9      	uxtb	r1, r1
    d5fc:	4291      	cmp	r1, r2
    d5fe:	d908      	bls.n	d612 <SystemTimerSync+0x4e>
    d600:	2bff      	cmp	r3, #255	; 0xff
    d602:	d0f7      	beq.n	d5f4 <SystemTimerSync+0x30>
    d604:	011b      	lsls	r3, r3, #4
    d606:	5919      	ldr	r1, [r3, r4]
    d608:	1a09      	subs	r1, r1, r0
    d60a:	5119      	str	r1, [r3, r4]
    d60c:	18e3      	adds	r3, r4, r3
    d60e:	7b1b      	ldrb	r3, [r3, #12]
    d610:	e7f0      	b.n	d5f4 <SystemTimerSync+0x30>
    d612:	4b15      	ldr	r3, [pc, #84]	; (d668 <SystemTimerSync+0xa4>)
    d614:	4798      	blx	r3
    d616:	4815      	ldr	r0, [pc, #84]	; (d66c <SystemTimerSync+0xa8>)
    d618:	4b15      	ldr	r3, [pc, #84]	; (d670 <SystemTimerSync+0xac>)
    d61a:	4798      	blx	r3
    d61c:	4815      	ldr	r0, [pc, #84]	; (d674 <SystemTimerSync+0xb0>)
    d61e:	4b16      	ldr	r3, [pc, #88]	; (d678 <SystemTimerSync+0xb4>)
    d620:	4798      	blx	r3
    d622:	4b0f      	ldr	r3, [pc, #60]	; (d660 <SystemTimerSync+0x9c>)
    d624:	781b      	ldrb	r3, [r3, #0]
    d626:	2b00      	cmp	r3, #0
    d628:	d009      	beq.n	d63e <SystemTimerSync+0x7a>
    d62a:	4b0c      	ldr	r3, [pc, #48]	; (d65c <SystemTimerSync+0x98>)
    d62c:	681b      	ldr	r3, [r3, #0]
    d62e:	2bff      	cmp	r3, #255	; 0xff
    d630:	d005      	beq.n	d63e <SystemTimerSync+0x7a>
    d632:	4b12      	ldr	r3, [pc, #72]	; (d67c <SystemTimerSync+0xb8>)
    d634:	4798      	blx	r3
    d636:	28fe      	cmp	r0, #254	; 0xfe
    d638:	d902      	bls.n	d640 <SystemTimerSync+0x7c>
    d63a:	4b11      	ldr	r3, [pc, #68]	; (d680 <SystemTimerSync+0xbc>)
    d63c:	4798      	blx	r3
    d63e:	bd70      	pop	{r4, r5, r6, pc}
    d640:	2201      	movs	r2, #1
    d642:	4b10      	ldr	r3, [pc, #64]	; (d684 <SystemTimerSync+0xc0>)
    d644:	701a      	strb	r2, [r3, #0]
    d646:	2001      	movs	r0, #1
    d648:	4b0f      	ldr	r3, [pc, #60]	; (d688 <SystemTimerSync+0xc4>)
    d64a:	4798      	blx	r3
    d64c:	e7f7      	b.n	d63e <SystemTimerSync+0x7a>
    d64e:	46c0      	nop			; (mov r8, r8)
    d650:	20001e90 	.word	0x20001e90
    d654:	20002d74 	.word	0x20002d74
    d658:	20002d70 	.word	0x20002d70
    d65c:	20001e88 	.word	0x20001e88
    d660:	20001e8c 	.word	0x20001e8c
    d664:	20002be0 	.word	0x20002be0
    d668:	000134fd 	.word	0x000134fd
    d66c:	0000ce29 	.word	0x0000ce29
    d670:	00013581 	.word	0x00013581
    d674:	0000ce01 	.word	0x0000ce01
    d678:	0001358d 	.word	0x0001358d
    d67c:	0000d301 	.word	0x0000d301
    d680:	0000d581 	.word	0x0000d581
    d684:	20002d72 	.word	0x20002d72
    d688:	0000d71d 	.word	0x0000d71d

0000d68c <SwTimerWriteTimestamp>:
    d68c:	680a      	ldr	r2, [r1, #0]
    d68e:	684b      	ldr	r3, [r1, #4]
    d690:	00c1      	lsls	r1, r0, #3
    d692:	4802      	ldr	r0, [pc, #8]	; (d69c <SwTimerWriteTimestamp+0x10>)
    d694:	1840      	adds	r0, r0, r1
    d696:	6002      	str	r2, [r0, #0]
    d698:	6043      	str	r3, [r0, #4]
    d69a:	4770      	bx	lr
    d69c:	20002bd0 	.word	0x20002bd0

0000d6a0 <Stack_Init>:
    d6a0:	b510      	push	{r4, lr}
    d6a2:	2010      	movs	r0, #16
    d6a4:	4b01      	ldr	r3, [pc, #4]	; (d6ac <Stack_Init+0xc>)
    d6a6:	4798      	blx	r3
    d6a8:	bd10      	pop	{r4, pc}
    d6aa:	46c0      	nop			; (mov r8, r8)
    d6ac:	0000d71d 	.word	0x0000d71d

0000d6b0 <SYSTEM_RunTasks>:
    d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6b2:	4b16      	ldr	r3, [pc, #88]	; (d70c <SYSTEM_RunTasks+0x5c>)
    d6b4:	881b      	ldrh	r3, [r3, #0]
    d6b6:	b29b      	uxth	r3, r3
    d6b8:	2b1f      	cmp	r3, #31
    d6ba:	d922      	bls.n	d702 <SYSTEM_RunTasks+0x52>
    d6bc:	e7fe      	b.n	d6bc <SYSTEM_RunTasks+0xc>
    d6be:	2500      	movs	r5, #0
    d6c0:	4b13      	ldr	r3, [pc, #76]	; (d710 <SYSTEM_RunTasks+0x60>)
    d6c2:	4798      	blx	r3
    d6c4:	4911      	ldr	r1, [pc, #68]	; (d70c <SYSTEM_RunTasks+0x5c>)
    d6c6:	880b      	ldrh	r3, [r1, #0]
    d6c8:	2201      	movs	r2, #1
    d6ca:	40aa      	lsls	r2, r5
    d6cc:	4393      	bics	r3, r2
    d6ce:	800b      	strh	r3, [r1, #0]
    d6d0:	4b10      	ldr	r3, [pc, #64]	; (d714 <SYSTEM_RunTasks+0x64>)
    d6d2:	4798      	blx	r3
    d6d4:	00ad      	lsls	r5, r5, #2
    d6d6:	4b10      	ldr	r3, [pc, #64]	; (d718 <SYSTEM_RunTasks+0x68>)
    d6d8:	58eb      	ldr	r3, [r5, r3]
    d6da:	4798      	blx	r3
    d6dc:	2101      	movs	r1, #1
    d6de:	883b      	ldrh	r3, [r7, #0]
    d6e0:	b29b      	uxth	r3, r3
    d6e2:	2b00      	cmp	r3, #0
    d6e4:	d011      	beq.n	d70a <SYSTEM_RunTasks+0x5a>
    d6e6:	8823      	ldrh	r3, [r4, #0]
    d6e8:	420b      	tst	r3, r1
    d6ea:	d1e8      	bne.n	d6be <SYSTEM_RunTasks+0xe>
    d6ec:	2201      	movs	r2, #1
    d6ee:	8833      	ldrh	r3, [r6, #0]
    d6f0:	b29b      	uxth	r3, r3
    d6f2:	0015      	movs	r5, r2
    d6f4:	4113      	asrs	r3, r2
    d6f6:	4219      	tst	r1, r3
    d6f8:	d1e2      	bne.n	d6c0 <SYSTEM_RunTasks+0x10>
    d6fa:	3201      	adds	r2, #1
    d6fc:	2a05      	cmp	r2, #5
    d6fe:	d1f6      	bne.n	d6ee <SYSTEM_RunTasks+0x3e>
    d700:	e7ed      	b.n	d6de <SYSTEM_RunTasks+0x2e>
    d702:	4f02      	ldr	r7, [pc, #8]	; (d70c <SYSTEM_RunTasks+0x5c>)
    d704:	003c      	movs	r4, r7
    d706:	003e      	movs	r6, r7
    d708:	e7e8      	b.n	d6dc <SYSTEM_RunTasks+0x2c>
    d70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d70c:	20001e98 	.word	0x20001e98
    d710:	0000c6d1 	.word	0x0000c6d1
    d714:	0000c6dd 	.word	0x0000c6dd
    d718:	00018c9c 	.word	0x00018c9c

0000d71c <SYSTEM_PostTask>:
    d71c:	b510      	push	{r4, lr}
    d71e:	0004      	movs	r4, r0
    d720:	4b04      	ldr	r3, [pc, #16]	; (d734 <SYSTEM_PostTask+0x18>)
    d722:	4798      	blx	r3
    d724:	4b04      	ldr	r3, [pc, #16]	; (d738 <SYSTEM_PostTask+0x1c>)
    d726:	8818      	ldrh	r0, [r3, #0]
    d728:	4320      	orrs	r0, r4
    d72a:	8018      	strh	r0, [r3, #0]
    d72c:	4b03      	ldr	r3, [pc, #12]	; (d73c <SYSTEM_PostTask+0x20>)
    d72e:	4798      	blx	r3
    d730:	bd10      	pop	{r4, pc}
    d732:	46c0      	nop			; (mov r8, r8)
    d734:	0000c6d1 	.word	0x0000c6d1
    d738:	20001e98 	.word	0x20001e98
    d73c:	0000c6dd 	.word	0x0000c6dd

0000d740 <Radio_WriteMode>:
    d740:	b5f0      	push	{r4, r5, r6, r7, lr}
    d742:	46d6      	mov	lr, sl
    d744:	464f      	mov	r7, r9
    d746:	b580      	push	{r7, lr}
    d748:	b083      	sub	sp, #12
    d74a:	9201      	str	r2, [sp, #4]
    d74c:	2900      	cmp	r1, #0
    d74e:	d102      	bne.n	d756 <Radio_WriteMode+0x16>
    d750:	1f83      	subs	r3, r0, #6
    d752:	2b01      	cmp	r3, #1
    d754:	d92a      	bls.n	d7ac <Radio_WriteMode+0x6c>
    d756:	2307      	movs	r3, #7
    d758:	4699      	mov	r9, r3
    d75a:	001c      	movs	r4, r3
    d75c:	4004      	ands	r4, r0
    d75e:	2601      	movs	r6, #1
    d760:	400e      	ands	r6, r1
    d762:	2001      	movs	r0, #1
    d764:	4b2b      	ldr	r3, [pc, #172]	; (d814 <Radio_WriteMode+0xd4>)
    d766:	4798      	blx	r3
    d768:	0005      	movs	r5, r0
    d76a:	0007      	movs	r7, r0
    d76c:	b243      	sxtb	r3, r0
    d76e:	469a      	mov	sl, r3
    d770:	464b      	mov	r3, r9
    d772:	4003      	ands	r3, r0
    d774:	4652      	mov	r2, sl
    d776:	0fd2      	lsrs	r2, r2, #31
    d778:	4296      	cmp	r6, r2
    d77a:	d00a      	beq.n	d792 <Radio_WriteMode+0x52>
    d77c:	2b00      	cmp	r3, #0
    d77e:	d11a      	bne.n	d7b6 <Radio_WriteMode+0x76>
    d780:	2e00      	cmp	r6, #0
    d782:	d11e      	bne.n	d7c2 <Radio_WriteMode+0x82>
    d784:	2778      	movs	r7, #120	; 0x78
    d786:	402f      	ands	r7, r5
    d788:	0039      	movs	r1, r7
    d78a:	2001      	movs	r0, #1
    d78c:	4b22      	ldr	r3, [pc, #136]	; (d818 <Radio_WriteMode+0xd8>)
    d78e:	4798      	blx	r3
    d790:	2300      	movs	r3, #0
    d792:	42a3      	cmp	r3, r4
    d794:	d00a      	beq.n	d7ac <Radio_WriteMode+0x6c>
    d796:	2c00      	cmp	r4, #0
    d798:	d030      	beq.n	d7fc <Radio_WriteMode+0xbc>
    d79a:	9b01      	ldr	r3, [sp, #4]
    d79c:	2b01      	cmp	r3, #1
    d79e:	d016      	beq.n	d7ce <Radio_WriteMode+0x8e>
    d7a0:	21f8      	movs	r1, #248	; 0xf8
    d7a2:	4039      	ands	r1, r7
    d7a4:	4321      	orrs	r1, r4
    d7a6:	2001      	movs	r0, #1
    d7a8:	4b1b      	ldr	r3, [pc, #108]	; (d818 <Radio_WriteMode+0xd8>)
    d7aa:	4798      	blx	r3
    d7ac:	b003      	add	sp, #12
    d7ae:	bc0c      	pop	{r2, r3}
    d7b0:	4691      	mov	r9, r2
    d7b2:	469a      	mov	sl, r3
    d7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7b6:	21f8      	movs	r1, #248	; 0xf8
    d7b8:	4001      	ands	r1, r0
    d7ba:	2001      	movs	r0, #1
    d7bc:	4b16      	ldr	r3, [pc, #88]	; (d818 <Radio_WriteMode+0xd8>)
    d7be:	4798      	blx	r3
    d7c0:	e7de      	b.n	d780 <Radio_WriteMode+0x40>
    d7c2:	2778      	movs	r7, #120	; 0x78
    d7c4:	4653      	mov	r3, sl
    d7c6:	401f      	ands	r7, r3
    d7c8:	2180      	movs	r1, #128	; 0x80
    d7ca:	430f      	orrs	r7, r1
    d7cc:	e7dc      	b.n	d788 <Radio_WriteMode+0x48>
    d7ce:	2041      	movs	r0, #65	; 0x41
    d7d0:	4b10      	ldr	r3, [pc, #64]	; (d814 <Radio_WriteMode+0xd4>)
    d7d2:	4798      	blx	r3
    d7d4:	2e00      	cmp	r6, #0
    d7d6:	d10e      	bne.n	d7f6 <Radio_WriteMode+0xb6>
    d7d8:	2130      	movs	r1, #48	; 0x30
    d7da:	4301      	orrs	r1, r0
    d7dc:	b2c9      	uxtb	r1, r1
    d7de:	2041      	movs	r0, #65	; 0x41
    d7e0:	4d0d      	ldr	r5, [pc, #52]	; (d818 <Radio_WriteMode+0xd8>)
    d7e2:	47a8      	blx	r5
    d7e4:	21f8      	movs	r1, #248	; 0xf8
    d7e6:	4039      	ands	r1, r7
    d7e8:	4321      	orrs	r1, r4
    d7ea:	2001      	movs	r0, #1
    d7ec:	47a8      	blx	r5
    d7ee:	2001      	movs	r0, #1
    d7f0:	4b0a      	ldr	r3, [pc, #40]	; (d81c <Radio_WriteMode+0xdc>)
    d7f2:	4798      	blx	r3
    d7f4:	e7da      	b.n	d7ac <Radio_WriteMode+0x6c>
    d7f6:	21cf      	movs	r1, #207	; 0xcf
    d7f8:	4001      	ands	r1, r0
    d7fa:	e7f0      	b.n	d7de <Radio_WriteMode+0x9e>
    d7fc:	21f8      	movs	r1, #248	; 0xf8
    d7fe:	4039      	ands	r1, r7
    d800:	2001      	movs	r0, #1
    d802:	4b05      	ldr	r3, [pc, #20]	; (d818 <Radio_WriteMode+0xd8>)
    d804:	4798      	blx	r3
    d806:	9b01      	ldr	r3, [sp, #4]
    d808:	2b01      	cmp	r3, #1
    d80a:	d1cf      	bne.n	d7ac <Radio_WriteMode+0x6c>
    d80c:	2001      	movs	r0, #1
    d80e:	4b04      	ldr	r3, [pc, #16]	; (d820 <Radio_WriteMode+0xe0>)
    d810:	4798      	blx	r3
    d812:	e7cb      	b.n	d7ac <Radio_WriteMode+0x6c>
    d814:	0000c541 	.word	0x0000c541
    d818:	0000c519 	.word	0x0000c519
    d81c:	0000453d 	.word	0x0000453d
    d820:	0000c6b5 	.word	0x0000c6b5

0000d824 <RADIO_FHSSChangeChannel>:
    d824:	b500      	push	{lr}
    d826:	b083      	sub	sp, #12
    d828:	2012      	movs	r0, #18
    d82a:	4b0d      	ldr	r3, [pc, #52]	; (d860 <RADIO_FHSSChangeChannel+0x3c>)
    d82c:	4798      	blx	r3
    d82e:	4b0d      	ldr	r3, [pc, #52]	; (d864 <RADIO_FHSSChangeChannel+0x40>)
    d830:	8adb      	ldrh	r3, [r3, #22]
    d832:	2b00      	cmp	r3, #0
    d834:	d007      	beq.n	d846 <RADIO_FHSSChangeChannel+0x22>
    d836:	4b0b      	ldr	r3, [pc, #44]	; (d864 <RADIO_FHSSChangeChannel+0x40>)
    d838:	691b      	ldr	r3, [r3, #16]
    d83a:	2b00      	cmp	r3, #0
    d83c:	d003      	beq.n	d846 <RADIO_FHSSChangeChannel+0x22>
    d83e:	4a0a      	ldr	r2, [pc, #40]	; (d868 <RADIO_FHSSChangeChannel+0x44>)
    d840:	7812      	ldrb	r2, [r2, #0]
    d842:	0692      	lsls	r2, r2, #26
    d844:	d405      	bmi.n	d852 <RADIO_FHSSChangeChannel+0x2e>
    d846:	2102      	movs	r1, #2
    d848:	2012      	movs	r0, #18
    d84a:	4b08      	ldr	r3, [pc, #32]	; (d86c <RADIO_FHSSChangeChannel+0x48>)
>>>>>>> Stashed changes
    d84c:	4798      	blx	r3
    d84e:	b003      	add	sp, #12
    d850:	bd00      	pop	{pc}
    d852:	a901      	add	r1, sp, #4
    d854:	2020      	movs	r0, #32
    d856:	4798      	blx	r3
    d858:	9801      	ldr	r0, [sp, #4]
    d85a:	4b05      	ldr	r3, [pc, #20]	; (d870 <RADIO_FHSSChangeChannel+0x4c>)
    d85c:	4798      	blx	r3
    d85e:	e7f2      	b.n	d846 <RADIO_FHSSChangeChannel+0x22>
    d860:	0000c541 	.word	0x0000c541
    d864:	20002d78 	.word	0x20002d78
    d868:	20003046 	.word	0x20003046
    d86c:	0000c519 	.word	0x0000c519
    d870:	0000e5f9 	.word	0x0000e5f9

<<<<<<< Updated upstream
0000d864 <RADIO_ReadRandom>:
=======
    d7bc:	9801      	ldr	r0, [sp, #4]
    d7be:	4b05      	ldr	r3, [pc, #20]	; (d7d4 <RADIO_FHSSChangeChannel+0x4c>)
    d7c0:	4798      	blx	r3
    d7c2:	e7f2      	b.n	d7aa <RADIO_FHSSChangeChannel+0x22>
    d7c4:	0000c4a5 	.word	0x0000c4a5
    d7c8:	20002d78 	.word	0x20002d78
    d7cc:	20003046 	.word	0x20003046
    d7d0:	0000c47d 	.word	0x0000c47d
    d7d4:	0000e54d 	.word	0x0000e54d

0000d7d8 <RADIO_ReadRandom>:
>>>>>>> Stashed changes

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    d7da:	2000      	movs	r0, #0
    d7dc:	4b1a      	ldr	r3, [pc, #104]	; (d848 <RADIO_ReadRandom+0x70>)
    d7de:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    d7e0:	4b1a      	ldr	r3, [pc, #104]	; (d84c <RADIO_ReadRandom+0x74>)
    d7e2:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d7e4:	2201      	movs	r2, #1
    d7e6:	2101      	movs	r1, #1
    d7e8:	2000      	movs	r0, #0
    d7ea:	4c19      	ldr	r4, [pc, #100]	; (d850 <RADIO_ReadRandom+0x78>)
    d7ec:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    d7ee:	21ff      	movs	r1, #255	; 0xff
    d7f0:	2011      	movs	r0, #17
    d7f2:	4b18      	ldr	r3, [pc, #96]	; (d854 <RADIO_ReadRandom+0x7c>)
    d7f4:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    d7f6:	2201      	movs	r2, #1
    d7f8:	2101      	movs	r1, #1
    d7fa:	2005      	movs	r0, #5
    d7fc:	47a0      	blx	r4
    d7fe:	2410      	movs	r4, #16
    retVal = 0;
    d800:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    d802:	4f15      	ldr	r7, [pc, #84]	; (d858 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d804:	4e15      	ldr	r6, [pc, #84]	; (d85c <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    d806:	2001      	movs	r0, #1
    d808:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d80a:	202c      	movs	r0, #44	; 0x2c
    d80c:	47b0      	blx	r6
    d80e:	2301      	movs	r3, #1
    d810:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    d812:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d814:	4305      	orrs	r5, r0
    d816:	b2ad      	uxth	r5, r5
    d818:	3c01      	subs	r4, #1
    d81a:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    d81c:	2c00      	cmp	r4, #0
    d81e:	d1f2      	bne.n	d806 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    d820:	2000      	movs	r0, #0
    d822:	4b0f      	ldr	r3, [pc, #60]	; (d860 <RADIO_ReadRandom+0x88>)
    d824:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d826:	2201      	movs	r2, #1
    d828:	2101      	movs	r1, #1
    d82a:	2000      	movs	r0, #0
    d82c:	4b08      	ldr	r3, [pc, #32]	; (d850 <RADIO_ReadRandom+0x78>)
    d82e:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    d830:	21ff      	movs	r1, #255	; 0xff
    d832:	2012      	movs	r0, #18
    d834:	4c07      	ldr	r4, [pc, #28]	; (d854 <RADIO_ReadRandom+0x7c>)
    d836:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    d838:	2100      	movs	r1, #0
    d83a:	2011      	movs	r0, #17
    d83c:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    d83e:	4b09      	ldr	r3, [pc, #36]	; (d864 <RADIO_ReadRandom+0x8c>)
    d840:	4798      	blx	r3
	
    return retVal;
}
    d842:	0028      	movs	r0, r5
    d844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d846:	46c0      	nop			; (mov r8, r8)
    d848:	0000ee09 	.word	0x0000ee09
    d84c:	0000f1c5 	.word	0x0000f1c5
    d850:	0000d6a5 	.word	0x0000d6a5
    d854:	0000c47d 	.word	0x0000c47d
    d858:	0000c619 	.word	0x0000c619
    d85c:	0000c4a5 	.word	0x0000c4a5
    d860:	0000ee3d 	.word	0x0000ee3d
    d864:	0000f2f5 	.word	0x0000f2f5

0000d868 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    d868:	b510      	push	{r4, lr}
    d86a:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    d86c:	2334      	movs	r3, #52	; 0x34
    d86e:	4a11      	ldr	r2, [pc, #68]	; (d8b4 <Radio_ReadRssi+0x4c>)
    d870:	5cd3      	ldrb	r3, [r2, r3]
    d872:	2b01      	cmp	r3, #1
    d874:	d003      	beq.n	d87e <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    d876:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    d878:	2b00      	cmp	r3, #0
    d87a:	d012      	beq.n	d8a2 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    d87c:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    d87e:	4b0e      	ldr	r3, [pc, #56]	; (d8b8 <Radio_ReadRssi+0x50>)
    d880:	6812      	ldr	r2, [r2, #0]
    d882:	429a      	cmp	r2, r3
    d884:	d906      	bls.n	d894 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d886:	201a      	movs	r0, #26
    d888:	4b0c      	ldr	r3, [pc, #48]	; (d8bc <Radio_ReadRssi+0x54>)
    d88a:	4798      	blx	r3
    d88c:	389d      	subs	r0, #157	; 0x9d
    d88e:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d890:	2000      	movs	r0, #0
    d892:	e7f3      	b.n	d87c <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d894:	201a      	movs	r0, #26
    d896:	4b09      	ldr	r3, [pc, #36]	; (d8bc <Radio_ReadRssi+0x54>)
    d898:	4798      	blx	r3
    d89a:	38a4      	subs	r0, #164	; 0xa4
    d89c:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d89e:	2000      	movs	r0, #0
    d8a0:	e7ec      	b.n	d87c <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d8a2:	300b      	adds	r0, #11
    d8a4:	4b05      	ldr	r3, [pc, #20]	; (d8bc <Radio_ReadRssi+0x54>)
    d8a6:	4798      	blx	r3
    d8a8:	0840      	lsrs	r0, r0, #1
    d8aa:	b2c3      	uxtb	r3, r0
    d8ac:	425b      	negs	r3, r3
    d8ae:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    d8b0:	2000      	movs	r0, #0
    d8b2:	e7e3      	b.n	d87c <Radio_ReadRssi+0x14>
    d8b4:	20002d78 	.word	0x20002d78
    d8b8:	3361137f 	.word	0x3361137f
    d8bc:	0000c4a5 	.word	0x0000c4a5

0000d8c0 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    d8c0:	b510      	push	{r4, lr}
    d8c2:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d8c4:	2011      	movs	r0, #17
    d8c6:	4b04      	ldr	r3, [pc, #16]	; (d8d8 <Radio_ReadFSKRssi+0x18>)
    d8c8:	4798      	blx	r3
    d8ca:	0840      	lsrs	r0, r0, #1
    d8cc:	b2c0      	uxtb	r0, r0
    d8ce:	4240      	negs	r0, r0
    d8d0:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    d8d2:	2000      	movs	r0, #0
    d8d4:	bd10      	pop	{r4, pc}
    d8d6:	46c0      	nop			; (mov r8, r8)
    d8d8:	0000c4a5 	.word	0x0000c4a5

0000d8dc <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d8dc:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d8de:	4b01      	ldr	r3, [pc, #4]	; (d8e4 <tc_cca_callback+0x8>)
    d8e0:	4798      	blx	r3
}
    d8e2:	bd10      	pop	{r4, pc}
    d8e4:	000134b9 	.word	0x000134b9

0000d8e8 <tc_ovf_callback>:
{
    d8e8:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d8ea:	4b01      	ldr	r3, [pc, #4]	; (d8f0 <tc_ovf_callback+0x8>)
    d8ec:	4798      	blx	r3
}
    d8ee:	bd10      	pop	{r4, pc}
    d8f0:	00013471 	.word	0x00013471

0000d8f4 <tmr_read_count>:
{
    d8f4:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d8f6:	4802      	ldr	r0, [pc, #8]	; (d900 <tmr_read_count+0xc>)
    d8f8:	4b02      	ldr	r3, [pc, #8]	; (d904 <tmr_read_count+0x10>)
    d8fa:	4798      	blx	r3
    d8fc:	b280      	uxth	r0, r0
}
<<<<<<< Updated upstream
=======
0000d874 <RADIO_ReadRandom>:
    d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d876:	2000      	movs	r0, #0
    d878:	4b1a      	ldr	r3, [pc, #104]	; (d8e4 <RADIO_ReadRandom+0x70>)
    d87a:	4798      	blx	r3
    d87c:	4b1a      	ldr	r3, [pc, #104]	; (d8e8 <RADIO_ReadRandom+0x74>)
    d87e:	4798      	blx	r3
    d880:	2201      	movs	r2, #1
    d882:	2101      	movs	r1, #1
    d884:	2000      	movs	r0, #0
    d886:	4c19      	ldr	r4, [pc, #100]	; (d8ec <RADIO_ReadRandom+0x78>)
    d888:	47a0      	blx	r4
    d88a:	21ff      	movs	r1, #255	; 0xff
    d88c:	2011      	movs	r0, #17
    d88e:	4b18      	ldr	r3, [pc, #96]	; (d8f0 <RADIO_ReadRandom+0x7c>)
    d890:	4798      	blx	r3
    d892:	2201      	movs	r2, #1
    d894:	2101      	movs	r1, #1
    d896:	2005      	movs	r0, #5
    d898:	47a0      	blx	r4
    d89a:	2410      	movs	r4, #16
    d89c:	2500      	movs	r5, #0
    d89e:	4f15      	ldr	r7, [pc, #84]	; (d8f4 <RADIO_ReadRandom+0x80>)
    d8a0:	4e15      	ldr	r6, [pc, #84]	; (d8f8 <RADIO_ReadRandom+0x84>)
    d8a2:	2001      	movs	r0, #1
    d8a4:	47b8      	blx	r7
    d8a6:	202c      	movs	r0, #44	; 0x2c
    d8a8:	47b0      	blx	r6
    d8aa:	2301      	movs	r3, #1
    d8ac:	4018      	ands	r0, r3
    d8ae:	006d      	lsls	r5, r5, #1
    d8b0:	4305      	orrs	r5, r0
    d8b2:	b2ad      	uxth	r5, r5
    d8b4:	3c01      	subs	r4, #1
    d8b6:	b2e4      	uxtb	r4, r4
    d8b8:	2c00      	cmp	r4, #0
    d8ba:	d1f2      	bne.n	d8a2 <RADIO_ReadRandom+0x2e>
    d8bc:	2000      	movs	r0, #0
    d8be:	4b0f      	ldr	r3, [pc, #60]	; (d8fc <RADIO_ReadRandom+0x88>)
    d8c0:	4798      	blx	r3
    d8c2:	2201      	movs	r2, #1
    d8c4:	2101      	movs	r1, #1
    d8c6:	2000      	movs	r0, #0
    d8c8:	4b08      	ldr	r3, [pc, #32]	; (d8ec <RADIO_ReadRandom+0x78>)
    d8ca:	4798      	blx	r3
    d8cc:	21ff      	movs	r1, #255	; 0xff
    d8ce:	2012      	movs	r0, #18
    d8d0:	4c07      	ldr	r4, [pc, #28]	; (d8f0 <RADIO_ReadRandom+0x7c>)
    d8d2:	47a0      	blx	r4
    d8d4:	2100      	movs	r1, #0
    d8d6:	2011      	movs	r0, #17
    d8d8:	47a0      	blx	r4
    d8da:	4b09      	ldr	r3, [pc, #36]	; (d900 <RADIO_ReadRandom+0x8c>)
    d8dc:	4798      	blx	r3
    d8de:	0028      	movs	r0, r5
    d8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8e2:	46c0      	nop			; (mov r8, r8)
    d8e4:	0000eeb5 	.word	0x0000eeb5
    d8e8:	0000f271 	.word	0x0000f271
    d8ec:	0000d741 	.word	0x0000d741
    d8f0:	0000c519 	.word	0x0000c519
    d8f4:	0000c6b5 	.word	0x0000c6b5
    d8f8:	0000c541 	.word	0x0000c541
    d8fc:	0000eee9 	.word	0x0000eee9
    d900:	0000f3a1 	.word	0x0000f3a1

0000d904 <Radio_ReadRssi>:
    d904:	b510      	push	{r4, lr}
    d906:	0004      	movs	r4, r0
    d908:	2334      	movs	r3, #52	; 0x34
    d90a:	4a11      	ldr	r2, [pc, #68]	; (d950 <Radio_ReadRssi+0x4c>)
    d90c:	5cd3      	ldrb	r3, [r2, r3]
    d90e:	2b01      	cmp	r3, #1
    d910:	d003      	beq.n	d91a <Radio_ReadRssi+0x16>
    d912:	2006      	movs	r0, #6
    d914:	2b00      	cmp	r3, #0
    d916:	d012      	beq.n	d93e <Radio_ReadRssi+0x3a>
    d918:	bd10      	pop	{r4, pc}
    d91a:	4b0e      	ldr	r3, [pc, #56]	; (d954 <Radio_ReadRssi+0x50>)
    d91c:	6812      	ldr	r2, [r2, #0]
    d91e:	429a      	cmp	r2, r3
    d920:	d906      	bls.n	d930 <Radio_ReadRssi+0x2c>
    d922:	201a      	movs	r0, #26
    d924:	4b0c      	ldr	r3, [pc, #48]	; (d958 <Radio_ReadRssi+0x54>)
    d926:	4798      	blx	r3
    d928:	389d      	subs	r0, #157	; 0x9d
    d92a:	8020      	strh	r0, [r4, #0]
    d92c:	2000      	movs	r0, #0
    d92e:	e7f3      	b.n	d918 <Radio_ReadRssi+0x14>
    d930:	201a      	movs	r0, #26
    d932:	4b09      	ldr	r3, [pc, #36]	; (d958 <Radio_ReadRssi+0x54>)
    d934:	4798      	blx	r3
    d936:	38a4      	subs	r0, #164	; 0xa4
    d938:	8020      	strh	r0, [r4, #0]
    d93a:	2000      	movs	r0, #0
    d93c:	e7ec      	b.n	d918 <Radio_ReadRssi+0x14>
    d93e:	300b      	adds	r0, #11
    d940:	4b05      	ldr	r3, [pc, #20]	; (d958 <Radio_ReadRssi+0x54>)
    d942:	4798      	blx	r3
    d944:	0840      	lsrs	r0, r0, #1
    d946:	b2c3      	uxtb	r3, r0
    d948:	425b      	negs	r3, r3
    d94a:	8023      	strh	r3, [r4, #0]
    d94c:	2000      	movs	r0, #0
    d94e:	e7e3      	b.n	d918 <Radio_ReadRssi+0x14>
    d950:	20002d78 	.word	0x20002d78
    d954:	3361137f 	.word	0x3361137f
    d958:	0000c541 	.word	0x0000c541

0000d95c <Radio_ReadFSKRssi>:
    d95c:	b510      	push	{r4, lr}
    d95e:	0004      	movs	r4, r0
    d960:	2011      	movs	r0, #17
    d962:	4b04      	ldr	r3, [pc, #16]	; (d974 <Radio_ReadFSKRssi+0x18>)
    d964:	4798      	blx	r3
    d966:	0840      	lsrs	r0, r0, #1
    d968:	b2c0      	uxtb	r0, r0
    d96a:	4240      	negs	r0, r0
    d96c:	8020      	strh	r0, [r4, #0]
    d96e:	2000      	movs	r0, #0
    d970:	bd10      	pop	{r4, pc}
    d972:	46c0      	nop			; (mov r8, r8)
    d974:	0000c541 	.word	0x0000c541

0000d978 <tc_cca_callback>:
    d978:	b510      	push	{r4, lr}
    d97a:	4b01      	ldr	r3, [pc, #4]	; (d980 <tc_cca_callback+0x8>)
    d97c:	4798      	blx	r3
    d97e:	bd10      	pop	{r4, pc}
    d980:	00013565 	.word	0x00013565

0000d984 <tc_ovf_callback>:
    d984:	b510      	push	{r4, lr}
    d986:	4b01      	ldr	r3, [pc, #4]	; (d98c <tc_ovf_callback+0x8>)
    d988:	4798      	blx	r3
>>>>>>> Stashed changes
    d98a:	bd10      	pop	{r4, pc}
    d98c:	0001351d 	.word	0x0001351d

<<<<<<< Updated upstream
0000d994 <tmr_disable_cc_interrupt>:
=======
    d8fe:	bd10      	pop	{r4, pc}
    d900:	20002e0c 	.word	0x20002e0c
    d904:	00006fb5 	.word	0x00006fb5

0000d908 <tmr_disable_cc_interrupt>:
>>>>>>> Stashed changes
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d908:	4b03      	ldr	r3, [pc, #12]	; (d918 <tmr_disable_cc_interrupt+0x10>)
    d90a:	2110      	movs	r1, #16
    d90c:	681a      	ldr	r2, [r3, #0]
    d90e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d910:	7e5a      	ldrb	r2, [r3, #25]
    d912:	438a      	bics	r2, r1
    d914:	765a      	strb	r2, [r3, #25]
}
    d916:	4770      	bx	lr
    d918:	20002e0c 	.word	0x20002e0c

0000d91c <tmr_enable_cc_interrupt>:
{
    d91c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d91e:	4c0a      	ldr	r4, [pc, #40]	; (d948 <tmr_enable_cc_interrupt+0x2c>)
    d920:	6820      	ldr	r0, [r4, #0]
    d922:	4b0a      	ldr	r3, [pc, #40]	; (d94c <tmr_enable_cc_interrupt+0x30>)
    d924:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d926:	4b0a      	ldr	r3, [pc, #40]	; (d950 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d928:	5c1b      	ldrb	r3, [r3, r0]
    d92a:	221f      	movs	r2, #31
    d92c:	401a      	ands	r2, r3
    d92e:	2301      	movs	r3, #1
    d930:	4093      	lsls	r3, r2
    d932:	4a08      	ldr	r2, [pc, #32]	; (d954 <tmr_enable_cc_interrupt+0x38>)
    d934:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d936:	7e63      	ldrb	r3, [r4, #25]
    d938:	2210      	movs	r2, #16
    d93a:	4313      	orrs	r3, r2
    d93c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d93e:	6823      	ldr	r3, [r4, #0]
    d940:	2210      	movs	r2, #16
    d942:	725a      	strb	r2, [r3, #9]
}
    d944:	bd10      	pop	{r4, pc}
    d946:	46c0      	nop			; (mov r8, r8)
    d948:	20002e0c 	.word	0x20002e0c
    d94c:	00006c89 	.word	0x00006c89
    d950:	00018acc 	.word	0x00018acc
    d954:	e000e100 	.word	0xe000e100

0000d958 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d958:	4b03      	ldr	r3, [pc, #12]	; (d968 <tmr_disable_ovf_interrupt+0x10>)
    d95a:	2101      	movs	r1, #1
    d95c:	681a      	ldr	r2, [r3, #0]
    d95e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d960:	7e5a      	ldrb	r2, [r3, #25]
    d962:	438a      	bics	r2, r1
    d964:	765a      	strb	r2, [r3, #25]
}
    d966:	4770      	bx	lr
    d968:	20002e0c 	.word	0x20002e0c

0000d96c <tmr_enable_ovf_interrupt>:
{
    d96c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d96e:	4c0a      	ldr	r4, [pc, #40]	; (d998 <tmr_enable_ovf_interrupt+0x2c>)
    d970:	6820      	ldr	r0, [r4, #0]
    d972:	4b0a      	ldr	r3, [pc, #40]	; (d99c <tmr_enable_ovf_interrupt+0x30>)
    d974:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d976:	4b0a      	ldr	r3, [pc, #40]	; (d9a0 <tmr_enable_ovf_interrupt+0x34>)
    d978:	5c1a      	ldrb	r2, [r3, r0]
    d97a:	231f      	movs	r3, #31
    d97c:	4013      	ands	r3, r2
    d97e:	2201      	movs	r2, #1
    d980:	0011      	movs	r1, r2
    d982:	4099      	lsls	r1, r3
    d984:	4b07      	ldr	r3, [pc, #28]	; (d9a4 <tmr_enable_ovf_interrupt+0x38>)
    d986:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d988:	7e63      	ldrb	r3, [r4, #25]
    d98a:	2101      	movs	r1, #1
    d98c:	430b      	orrs	r3, r1
    d98e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d990:	6823      	ldr	r3, [r4, #0]
    d992:	725a      	strb	r2, [r3, #9]
}
    d994:	bd10      	pop	{r4, pc}
    d996:	46c0      	nop			; (mov r8, r8)
    d998:	20002e0c 	.word	0x20002e0c
    d99c:	00006c89 	.word	0x00006c89
    d9a0:	00018acc 	.word	0x00018acc
    d9a4:	e000e100 	.word	0xe000e100

0000d9a8 <tmr_write_cmpreg>:
{
    d9a8:	b510      	push	{r4, lr}
    d9aa:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d9ac:	2100      	movs	r1, #0
    d9ae:	4802      	ldr	r0, [pc, #8]	; (d9b8 <tmr_write_cmpreg+0x10>)
    d9b0:	4b02      	ldr	r3, [pc, #8]	; (d9bc <tmr_write_cmpreg+0x14>)
    d9b2:	4798      	blx	r3
}
    d9b4:	bd10      	pop	{r4, pc}
    d9b6:	46c0      	nop			; (mov r8, r8)
    d9b8:	20002e0c 	.word	0x20002e0c
    d9bc:	00006ffd 	.word	0x00006ffd

0000d9c0 <save_cpu_interrupt>:
{
    d9c0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d9c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d9c6:	425a      	negs	r2, r3
    d9c8:	4153      	adcs	r3, r2
    d9ca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d9cc:	b672      	cpsid	i
    d9ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d9d2:	2200      	movs	r2, #0
    d9d4:	4b02      	ldr	r3, [pc, #8]	; (d9e0 <save_cpu_interrupt+0x20>)
    d9d6:	701a      	strb	r2, [r3, #0]
	return flags;
    d9d8:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    d9da:	b2c0      	uxtb	r0, r0
}
    d9dc:	b002      	add	sp, #8
    d9de:	4770      	bx	lr
    d9e0:	20000008 	.word	0x20000008

0000d9e4 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    d9e4:	2800      	cmp	r0, #0
    d9e6:	d005      	beq.n	d9f4 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    d9e8:	2201      	movs	r2, #1
    d9ea:	4b03      	ldr	r3, [pc, #12]	; (d9f8 <restore_cpu_interrupt+0x14>)
    d9ec:	701a      	strb	r2, [r3, #0]
    d9ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d9f2:	b662      	cpsie	i
}
    d9f4:	4770      	bx	lr
    d9f6:	46c0      	nop			; (mov r8, r8)
    d9f8:	20000008 	.word	0x20000008

0000d9fc <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d9fc:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d9fe:	4a33      	ldr	r2, [pc, #204]	; (dacc <tmr_init+0xd0>)
    da00:	2100      	movs	r1, #0
    da02:	2300      	movs	r3, #0
    da04:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    da06:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    da08:	2000      	movs	r0, #0
    da0a:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    da0c:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    da0e:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    da10:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    da12:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    da14:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    da16:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    da18:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    da1a:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    da1c:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    da1e:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    da20:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    da22:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    da24:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    da26:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    da28:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    da2a:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    da2c:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    da2e:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    da30:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    da32:	2334      	movs	r3, #52	; 0x34
    da34:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    da36:	3b35      	subs	r3, #53	; 0x35
    da38:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    da3a:	4c25      	ldr	r4, [pc, #148]	; (dad0 <tmr_init+0xd4>)
    da3c:	4925      	ldr	r1, [pc, #148]	; (dad4 <tmr_init+0xd8>)
    da3e:	0020      	movs	r0, r4
    da40:	4b25      	ldr	r3, [pc, #148]	; (dad8 <tmr_init+0xdc>)
    da42:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    da44:	2200      	movs	r2, #0
    da46:	4925      	ldr	r1, [pc, #148]	; (dadc <tmr_init+0xe0>)
    da48:	0020      	movs	r0, r4
    da4a:	4d25      	ldr	r5, [pc, #148]	; (dae0 <tmr_init+0xe4>)
    da4c:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    da4e:	2202      	movs	r2, #2
    da50:	4924      	ldr	r1, [pc, #144]	; (dae4 <tmr_init+0xe8>)
    da52:	0020      	movs	r0, r4
    da54:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    da56:	6820      	ldr	r0, [r4, #0]
    da58:	4b23      	ldr	r3, [pc, #140]	; (dae8 <tmr_init+0xec>)
    da5a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    da5c:	4b23      	ldr	r3, [pc, #140]	; (daec <tmr_init+0xf0>)
    da5e:	5c1a      	ldrb	r2, [r3, r0]
    da60:	231f      	movs	r3, #31
    da62:	4013      	ands	r3, r2
    da64:	2101      	movs	r1, #1
    da66:	000a      	movs	r2, r1
    da68:	409a      	lsls	r2, r3
    da6a:	4b21      	ldr	r3, [pc, #132]	; (daf0 <tmr_init+0xf4>)
    da6c:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    da6e:	7e63      	ldrb	r3, [r4, #25]
    da70:	2201      	movs	r2, #1
    da72:	4313      	orrs	r3, r2
    da74:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    da76:	6822      	ldr	r2, [r4, #0]
    da78:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    da7a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    da7c:	2b00      	cmp	r3, #0
    da7e:	d1fc      	bne.n	da7a <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    da80:	6813      	ldr	r3, [r2, #0]
    da82:	2102      	movs	r1, #2
    da84:	430b      	orrs	r3, r1
    da86:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    da88:	2000      	movs	r0, #0
    da8a:	4b1a      	ldr	r3, [pc, #104]	; (daf4 <tmr_init+0xf8>)
    da8c:	4798      	blx	r3
    da8e:	4d1a      	ldr	r5, [pc, #104]	; (daf8 <tmr_init+0xfc>)
    da90:	47a8      	blx	r5
    da92:	491a      	ldr	r1, [pc, #104]	; (dafc <tmr_init+0x100>)
    da94:	4b1a      	ldr	r3, [pc, #104]	; (db00 <tmr_init+0x104>)
    da96:	4798      	blx	r3
    da98:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
<<<<<<< Updated upstream
    db26:	4b1a      	ldr	r3, [pc, #104]	; (db90 <tmr_init+0x108>)
=======
0000d990 <tmr_read_count>:
    d990:	b510      	push	{r4, lr}
    d992:	4802      	ldr	r0, [pc, #8]	; (d99c <tmr_read_count+0xc>)
    d994:	4b02      	ldr	r3, [pc, #8]	; (d9a0 <tmr_read_count+0x10>)
    d996:	4798      	blx	r3
    d998:	b280      	uxth	r0, r0
    d99a:	bd10      	pop	{r4, pc}
    d99c:	20002e0c 	.word	0x20002e0c
    d9a0:	00006fb5 	.word	0x00006fb5

0000d9a4 <tmr_disable_cc_interrupt>:
    d9a4:	4b03      	ldr	r3, [pc, #12]	; (d9b4 <tmr_disable_cc_interrupt+0x10>)
    d9a6:	2110      	movs	r1, #16
    d9a8:	681a      	ldr	r2, [r3, #0]
    d9aa:	7211      	strb	r1, [r2, #8]
    d9ac:	7e5a      	ldrb	r2, [r3, #25]
    d9ae:	438a      	bics	r2, r1
    d9b0:	765a      	strb	r2, [r3, #25]
    d9b2:	4770      	bx	lr
    d9b4:	20002e0c 	.word	0x20002e0c

0000d9b8 <tmr_enable_cc_interrupt>:
    d9b8:	b510      	push	{r4, lr}
    d9ba:	4c0a      	ldr	r4, [pc, #40]	; (d9e4 <tmr_enable_cc_interrupt+0x2c>)
    d9bc:	6820      	ldr	r0, [r4, #0]
    d9be:	4b0a      	ldr	r3, [pc, #40]	; (d9e8 <tmr_enable_cc_interrupt+0x30>)
    d9c0:	4798      	blx	r3
    d9c2:	4b0a      	ldr	r3, [pc, #40]	; (d9ec <tmr_enable_cc_interrupt+0x34>)
    d9c4:	5c1b      	ldrb	r3, [r3, r0]
    d9c6:	221f      	movs	r2, #31
    d9c8:	401a      	ands	r2, r3
    d9ca:	2301      	movs	r3, #1
    d9cc:	4093      	lsls	r3, r2
    d9ce:	4a08      	ldr	r2, [pc, #32]	; (d9f0 <tmr_enable_cc_interrupt+0x38>)
    d9d0:	6013      	str	r3, [r2, #0]
    d9d2:	7e63      	ldrb	r3, [r4, #25]
    d9d4:	2210      	movs	r2, #16
    d9d6:	4313      	orrs	r3, r2
    d9d8:	7663      	strb	r3, [r4, #25]
    d9da:	6823      	ldr	r3, [r4, #0]
    d9dc:	2210      	movs	r2, #16
    d9de:	725a      	strb	r2, [r3, #9]
    d9e0:	bd10      	pop	{r4, pc}
    d9e2:	46c0      	nop			; (mov r8, r8)
    d9e4:	20002e0c 	.word	0x20002e0c
    d9e8:	00006c89 	.word	0x00006c89
    d9ec:	00018cb0 	.word	0x00018cb0
    d9f0:	e000e100 	.word	0xe000e100

0000d9f4 <tmr_disable_ovf_interrupt>:
    d9f4:	4b03      	ldr	r3, [pc, #12]	; (da04 <tmr_disable_ovf_interrupt+0x10>)
    d9f6:	2101      	movs	r1, #1
    d9f8:	681a      	ldr	r2, [r3, #0]
    d9fa:	7211      	strb	r1, [r2, #8]
    d9fc:	7e5a      	ldrb	r2, [r3, #25]
    d9fe:	438a      	bics	r2, r1
    da00:	765a      	strb	r2, [r3, #25]
    da02:	4770      	bx	lr
    da04:	20002e0c 	.word	0x20002e0c

0000da08 <tmr_enable_ovf_interrupt>:
    da08:	b510      	push	{r4, lr}
    da0a:	4c0a      	ldr	r4, [pc, #40]	; (da34 <tmr_enable_ovf_interrupt+0x2c>)
    da0c:	6820      	ldr	r0, [r4, #0]
    da0e:	4b0a      	ldr	r3, [pc, #40]	; (da38 <tmr_enable_ovf_interrupt+0x30>)
    da10:	4798      	blx	r3
    da12:	4b0a      	ldr	r3, [pc, #40]	; (da3c <tmr_enable_ovf_interrupt+0x34>)
    da14:	5c1a      	ldrb	r2, [r3, r0]
    da16:	231f      	movs	r3, #31
    da18:	4013      	ands	r3, r2
    da1a:	2201      	movs	r2, #1
    da1c:	0011      	movs	r1, r2
    da1e:	4099      	lsls	r1, r3
    da20:	4b07      	ldr	r3, [pc, #28]	; (da40 <tmr_enable_ovf_interrupt+0x38>)
    da22:	6019      	str	r1, [r3, #0]
    da24:	7e63      	ldrb	r3, [r4, #25]
    da26:	2101      	movs	r1, #1
    da28:	430b      	orrs	r3, r1
    da2a:	7663      	strb	r3, [r4, #25]
    da2c:	6823      	ldr	r3, [r4, #0]
    da2e:	725a      	strb	r2, [r3, #9]
    da30:	bd10      	pop	{r4, pc}
    da32:	46c0      	nop			; (mov r8, r8)
    da34:	20002e0c 	.word	0x20002e0c
    da38:	00006c89 	.word	0x00006c89
    da3c:	00018cb0 	.word	0x00018cb0
    da40:	e000e100 	.word	0xe000e100

0000da44 <tmr_write_cmpreg>:
    da44:	b510      	push	{r4, lr}
    da46:	0002      	movs	r2, r0
    da48:	2100      	movs	r1, #0
    da4a:	4802      	ldr	r0, [pc, #8]	; (da54 <tmr_write_cmpreg+0x10>)
    da4c:	4b02      	ldr	r3, [pc, #8]	; (da58 <tmr_write_cmpreg+0x14>)
    da4e:	4798      	blx	r3
    da50:	bd10      	pop	{r4, pc}
    da52:	46c0      	nop			; (mov r8, r8)
    da54:	20002e0c 	.word	0x20002e0c
    da58:	00006ffd 	.word	0x00006ffd

0000da5c <save_cpu_interrupt>:
    da5c:	b082      	sub	sp, #8
    da5e:	f3ef 8310 	mrs	r3, PRIMASK
    da62:	425a      	negs	r2, r3
    da64:	4153      	adcs	r3, r2
    da66:	9301      	str	r3, [sp, #4]
    da68:	b672      	cpsid	i
    da6a:	f3bf 8f5f 	dmb	sy
    da6e:	2200      	movs	r2, #0
    da70:	4b02      	ldr	r3, [pc, #8]	; (da7c <save_cpu_interrupt+0x20>)
    da72:	701a      	strb	r2, [r3, #0]
    da74:	9801      	ldr	r0, [sp, #4]
    da76:	b2c0      	uxtb	r0, r0
    da78:	b002      	add	sp, #8
    da7a:	4770      	bx	lr
    da7c:	20000008 	.word	0x20000008

0000da80 <restore_cpu_interrupt>:
    da80:	2800      	cmp	r0, #0
    da82:	d005      	beq.n	da90 <restore_cpu_interrupt+0x10>
    da84:	2201      	movs	r2, #1
    da86:	4b03      	ldr	r3, [pc, #12]	; (da94 <restore_cpu_interrupt+0x14>)
    da88:	701a      	strb	r2, [r3, #0]
    da8a:	f3bf 8f5f 	dmb	sy
    da8e:	b662      	cpsie	i
    da90:	4770      	bx	lr
    da92:	46c0      	nop			; (mov r8, r8)
    da94:	20000008 	.word	0x20000008

0000da98 <tmr_init>:
    da98:	b570      	push	{r4, r5, r6, lr}
    da9a:	4a33      	ldr	r2, [pc, #204]	; (db68 <tmr_init+0xd0>)
    da9c:	2100      	movs	r1, #0
    da9e:	2300      	movs	r3, #0
    daa0:	7011      	strb	r1, [r2, #0]
    daa2:	70d1      	strb	r1, [r2, #3]
    daa4:	2000      	movs	r0, #0
    daa6:	8091      	strh	r1, [r2, #4]
    daa8:	7190      	strb	r0, [r2, #6]
    daaa:	71d3      	strb	r3, [r2, #7]
    daac:	7053      	strb	r3, [r2, #1]
    daae:	7093      	strb	r3, [r2, #2]
    dab0:	7213      	strb	r3, [r2, #8]
    dab2:	7253      	strb	r3, [r2, #9]
    dab4:	7293      	strb	r3, [r2, #10]
    dab6:	72d3      	strb	r3, [r2, #11]
    dab8:	7313      	strb	r3, [r2, #12]
    daba:	7393      	strb	r3, [r2, #14]
    dabc:	7353      	strb	r3, [r2, #13]
    dabe:	7413      	strb	r3, [r2, #16]
    dac0:	6151      	str	r1, [r2, #20]
    dac2:	6191      	str	r1, [r2, #24]
    dac4:	7713      	strb	r3, [r2, #28]
    dac6:	6211      	str	r1, [r2, #32]
    dac8:	6251      	str	r1, [r2, #36]	; 0x24
    daca:	8511      	strh	r1, [r2, #40]	; 0x28
    dacc:	8591      	strh	r1, [r2, #44]	; 0x2c
    dace:	2334      	movs	r3, #52	; 0x34
    dad0:	54d0      	strb	r0, [r2, r3]
    dad2:	3b35      	subs	r3, #53	; 0x35
    dad4:	8553      	strh	r3, [r2, #42]	; 0x2a
    dad6:	4c25      	ldr	r4, [pc, #148]	; (db6c <tmr_init+0xd4>)
    dad8:	4925      	ldr	r1, [pc, #148]	; (db70 <tmr_init+0xd8>)
    dada:	0020      	movs	r0, r4
    dadc:	4b25      	ldr	r3, [pc, #148]	; (db74 <tmr_init+0xdc>)
    dade:	4798      	blx	r3
    dae0:	2200      	movs	r2, #0
    dae2:	4925      	ldr	r1, [pc, #148]	; (db78 <tmr_init+0xe0>)
    dae4:	0020      	movs	r0, r4
    dae6:	4d25      	ldr	r5, [pc, #148]	; (db7c <tmr_init+0xe4>)
    dae8:	47a8      	blx	r5
    daea:	2202      	movs	r2, #2
    daec:	4924      	ldr	r1, [pc, #144]	; (db80 <tmr_init+0xe8>)
    daee:	0020      	movs	r0, r4
    daf0:	47a8      	blx	r5
    daf2:	6820      	ldr	r0, [r4, #0]
    daf4:	4b23      	ldr	r3, [pc, #140]	; (db84 <tmr_init+0xec>)
    daf6:	4798      	blx	r3
    daf8:	4b23      	ldr	r3, [pc, #140]	; (db88 <tmr_init+0xf0>)
    dafa:	5c1a      	ldrb	r2, [r3, r0]
    dafc:	231f      	movs	r3, #31
    dafe:	4013      	ands	r3, r2
    db00:	2101      	movs	r1, #1
    db02:	000a      	movs	r2, r1
    db04:	409a      	lsls	r2, r3
    db06:	4b21      	ldr	r3, [pc, #132]	; (db8c <tmr_init+0xf4>)
    db08:	601a      	str	r2, [r3, #0]
    db0a:	7e63      	ldrb	r3, [r4, #25]
    db0c:	2201      	movs	r2, #1
    db0e:	4313      	orrs	r3, r2
    db10:	7663      	strb	r3, [r4, #25]
    db12:	6822      	ldr	r2, [r4, #0]
    db14:	7251      	strb	r1, [r2, #9]
    db16:	6913      	ldr	r3, [r2, #16]
    db18:	2b00      	cmp	r3, #0
    db1a:	d1fc      	bne.n	db16 <tmr_init+0x7e>
    db1c:	6813      	ldr	r3, [r2, #0]
    db1e:	2102      	movs	r1, #2
    db20:	430b      	orrs	r3, r1
    db22:	6013      	str	r3, [r2, #0]
    db24:	2000      	movs	r0, #0
    db26:	4b1a      	ldr	r3, [pc, #104]	; (db90 <tmr_init+0xf8>)
>>>>>>> Stashed changes
    db28:	4798      	blx	r3
    db2a:	4d1a      	ldr	r5, [pc, #104]	; (db94 <tmr_init+0xfc>)
    db2c:	47a8      	blx	r5
    db2e:	491a      	ldr	r1, [pc, #104]	; (db98 <tmr_init+0x100>)
    db30:	4b1a      	ldr	r3, [pc, #104]	; (db9c <tmr_init+0x104>)
    db32:	4798      	blx	r3
<<<<<<< Updated upstream
    db34:	21fc      	movs	r1, #252	; 0xfc
    db36:	0589      	lsls	r1, r1, #22
    db38:	4b17      	ldr	r3, [pc, #92]	; (db98 <tmr_init+0x110>)
    db3a:	4798      	blx	r3
    db3c:	2800      	cmp	r0, #0
    db3e:	d005      	beq.n	db4c <tmr_init+0xc4>
=======
    da9a:	4b1a      	ldr	r3, [pc, #104]	; (db04 <tmr_init+0x108>)
    da9c:	4798      	blx	r3
    da9e:	47a8      	blx	r5
    daa0:	1c01      	adds	r1, r0, #0
    daa2:	1c20      	adds	r0, r4, #0
    daa4:	4b18      	ldr	r3, [pc, #96]	; (db08 <tmr_init+0x10c>)
    daa6:	4798      	blx	r3
    daa8:	21fc      	movs	r1, #252	; 0xfc
    daaa:	0589      	lsls	r1, r1, #22
    daac:	4b17      	ldr	r3, [pc, #92]	; (db0c <tmr_init+0x110>)
    daae:	4798      	blx	r3
    dab0:	2800      	cmp	r0, #0
    dab2:	d005      	beq.n	dac0 <tmr_init+0xc4>
>>>>>>> Stashed changes
	{
		timer_multiplier += 1.0f;
    dab4:	21fe      	movs	r1, #254	; 0xfe
    dab6:	0589      	lsls	r1, r1, #22
    dab8:	1c20      	adds	r0, r4, #0
    daba:	4b15      	ldr	r3, [pc, #84]	; (db10 <tmr_init+0x114>)
    dabc:	4798      	blx	r3
    dabe:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    dac0:	1c20      	adds	r0, r4, #0
    dac2:	4b10      	ldr	r3, [pc, #64]	; (db04 <tmr_init+0x108>)
    dac4:	4798      	blx	r3
    dac6:	b2c0      	uxtb	r0, r0
}
    dac8:	bd70      	pop	{r4, r5, r6, pc}
    daca:	46c0      	nop			; (mov r8, r8)
    dacc:	20002dd4 	.word	0x20002dd4
    dad0:	20002e0c 	.word	0x20002e0c
    dad4:	42002000 	.word	0x42002000
    dad8:	00006cc5 	.word	0x00006cc5
    dadc:	0000d8e9 	.word	0x0000d8e9
    dae0:	00006bc1 	.word	0x00006bc1
    dae4:	0000d8dd 	.word	0x0000d8dd
    dae8:	00006c89 	.word	0x00006c89
    daec:	00018acc 	.word	0x00018acc
    daf0:	e000e100 	.word	0xe000e100
    daf4:	00006989 	.word	0x00006989
    daf8:	00014921 	.word	0x00014921
    dafc:	49742400 	.word	0x49742400
    db00:	00013ee9 	.word	0x00013ee9
    db04:	00013999 	.word	0x00013999
    db08:	00014509 	.word	0x00014509
    db0c:	000138f1 	.word	0x000138f1
    db10:	00013bc5 	.word	0x00013bc5

0000db14 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    db14:	b570      	push	{r4, r5, r6, lr}
    db16:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    db18:	aa03      	add	r2, sp, #12
    db1a:	2364      	movs	r3, #100	; 0x64
    db1c:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    db1e:	4b54      	ldr	r3, [pc, #336]	; (dc70 <edbg_eui_read_eui64+0x15c>)
    db20:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    db22:	2300      	movs	r3, #0
    db24:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    db26:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    db28:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    db2a:	2180      	movs	r1, #128	; 0x80
    db2c:	0389      	lsls	r1, r1, #14
    db2e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    db30:	2101      	movs	r1, #1
    db32:	4249      	negs	r1, r1
    db34:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    db36:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    db38:	3125      	adds	r1, #37	; 0x25
    db3a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    db3c:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    db3e:	3108      	adds	r1, #8
    db40:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    db42:	3101      	adds	r1, #1
    db44:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    db46:	3101      	adds	r1, #1
    db48:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    db4a:	33d7      	adds	r3, #215	; 0xd7
    db4c:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    db4e:	4b49      	ldr	r3, [pc, #292]	; (dc74 <edbg_eui_read_eui64+0x160>)
    db50:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    db52:	4b49      	ldr	r3, [pc, #292]	; (dc78 <edbg_eui_read_eui64+0x164>)
    db54:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    db56:	4c49      	ldr	r4, [pc, #292]	; (dc7c <edbg_eui_read_eui64+0x168>)
    db58:	4949      	ldr	r1, [pc, #292]	; (dc80 <edbg_eui_read_eui64+0x16c>)
    db5a:	0020      	movs	r0, r4
    db5c:	4b49      	ldr	r3, [pc, #292]	; (dc84 <edbg_eui_read_eui64+0x170>)
    db5e:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    db60:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    db62:	2107      	movs	r1, #7
    db64:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    db66:	4219      	tst	r1, r3
    db68:	d1fc      	bne.n	db64 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    db6a:	6813      	ldr	r3, [r2, #0]
    db6c:	2102      	movs	r1, #2
    db6e:	430b      	orrs	r3, r1
    db70:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    db72:	4b42      	ldr	r3, [pc, #264]	; (dc7c <edbg_eui_read_eui64+0x168>)
    db74:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    db76:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    db78:	2010      	movs	r0, #16
    db7a:	8b51      	ldrh	r1, [r2, #26]
    db7c:	4201      	tst	r1, r0
    db7e:	d104      	bne.n	db8a <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    db80:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    db82:	42a3      	cmp	r3, r4
    db84:	d3f9      	bcc.n	db7a <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    db86:	2310      	movs	r3, #16
    db88:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    db8a:	466a      	mov	r2, sp
    db8c:	4b3e      	ldr	r3, [pc, #248]	; (dc88 <edbg_eui_read_eui64+0x174>)
    db8e:	cb13      	ldmia	r3!, {r0, r1, r4}
    db90:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    db92:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    db94:	4c39      	ldr	r4, [pc, #228]	; (dc7c <edbg_eui_read_eui64+0x168>)
    db96:	4d3d      	ldr	r5, [pc, #244]	; (dc8c <edbg_eui_read_eui64+0x178>)
    db98:	e003      	b.n	dba2 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    db9a:	1c73      	adds	r3, r6, #1
    db9c:	2e0a      	cmp	r6, #10
    db9e:	d033      	beq.n	dc08 <edbg_eui_read_eui64+0xf4>
    dba0:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    dba2:	4669      	mov	r1, sp
    dba4:	0020      	movs	r0, r4
    dba6:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    dba8:	2818      	cmp	r0, #24
    dbaa:	d0f6      	beq.n	db9a <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    dbac:	2812      	cmp	r0, #18
    dbae:	d02f      	beq.n	dc10 <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    dbb0:	3801      	subs	r0, #1
    dbb2:	b2c0      	uxtb	r0, r0
    dbb4:	28fd      	cmp	r0, #253	; 0xfd
    dbb6:	d9f4      	bls.n	dba2 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    dbb8:	4b35      	ldr	r3, [pc, #212]	; (dc90 <edbg_eui_read_eui64+0x17c>)
    dbba:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    dbbc:	2380      	movs	r3, #128	; 0x80
    dbbe:	005b      	lsls	r3, r3, #1
    dbc0:	466a      	mov	r2, sp
    dbc2:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    dbc4:	4c2d      	ldr	r4, [pc, #180]	; (dc7c <edbg_eui_read_eui64+0x168>)
    dbc6:	4d33      	ldr	r5, [pc, #204]	; (dc94 <edbg_eui_read_eui64+0x180>)
    dbc8:	4669      	mov	r1, sp
    dbca:	0020      	movs	r0, r4
    dbcc:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    dbce:	2818      	cmp	r0, #24
    dbd0:	d043      	beq.n	dc5a <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    dbd2:	2812      	cmp	r0, #18
    dbd4:	d048      	beq.n	dc68 <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    dbd6:	3801      	subs	r0, #1
    dbd8:	b2c0      	uxtb	r0, r0
    dbda:	28fd      	cmp	r0, #253	; 0xfd
    dbdc:	d9f4      	bls.n	dbc8 <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    dbde:	4827      	ldr	r0, [pc, #156]	; (dc7c <edbg_eui_read_eui64+0x168>)
    dbe0:	4b2d      	ldr	r3, [pc, #180]	; (dc98 <edbg_eui_read_eui64+0x184>)
    dbe2:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    dbe4:	4a2a      	ldr	r2, [pc, #168]	; (dc90 <edbg_eui_read_eui64+0x17c>)
    dbe6:	7813      	ldrb	r3, [r2, #0]
    dbe8:	7851      	ldrb	r1, [r2, #1]
    dbea:	404b      	eors	r3, r1
    dbec:	7891      	ldrb	r1, [r2, #2]
    dbee:	404b      	eors	r3, r1
    dbf0:	78d1      	ldrb	r1, [r2, #3]
    dbf2:	404b      	eors	r3, r1
    dbf4:	7911      	ldrb	r1, [r2, #4]
    dbf6:	404b      	eors	r3, r1
    dbf8:	7951      	ldrb	r1, [r2, #5]
    dbfa:	404b      	eors	r3, r1
    dbfc:	7991      	ldrb	r1, [r2, #6]
    dbfe:	79d2      	ldrb	r2, [r2, #7]
    dc00:	404b      	eors	r3, r1
    dc02:	429a      	cmp	r2, r3
    dc04:	d126      	bne.n	dc54 <edbg_eui_read_eui64+0x140>
    dc06:	e00f      	b.n	dc28 <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    dc08:	4824      	ldr	r0, [pc, #144]	; (dc9c <edbg_eui_read_eui64+0x188>)
    dc0a:	4b25      	ldr	r3, [pc, #148]	; (dca0 <edbg_eui_read_eui64+0x18c>)
    dc0c:	4798      	blx	r3
				break;
    dc0e:	e002      	b.n	dc16 <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    dc10:	4824      	ldr	r0, [pc, #144]	; (dca4 <edbg_eui_read_eui64+0x190>)
    dc12:	4b25      	ldr	r3, [pc, #148]	; (dca8 <edbg_eui_read_eui64+0x194>)
    dc14:	4798      	blx	r3
  packet.data = readbuf;
    dc16:	4b1e      	ldr	r3, [pc, #120]	; (dc90 <edbg_eui_read_eui64+0x17c>)
    dc18:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    dc1a:	2380      	movs	r3, #128	; 0x80
    dc1c:	005b      	lsls	r3, r3, #1
    dc1e:	466a      	mov	r2, sp
    dc20:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    dc22:	4816      	ldr	r0, [pc, #88]	; (dc7c <edbg_eui_read_eui64+0x168>)
    dc24:	4b1c      	ldr	r3, [pc, #112]	; (dc98 <edbg_eui_read_eui64+0x184>)
    dc26:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    dc28:	4b20      	ldr	r3, [pc, #128]	; (dcac <edbg_eui_read_eui64+0x198>)
    dc2a:	6818      	ldr	r0, [r3, #0]
    dc2c:	4b20      	ldr	r3, [pc, #128]	; (dcb0 <edbg_eui_read_eui64+0x19c>)
    dc2e:	681b      	ldr	r3, [r3, #0]
    dc30:	4058      	eors	r0, r3
    dc32:	4b20      	ldr	r3, [pc, #128]	; (dcb4 <edbg_eui_read_eui64+0x1a0>)
    dc34:	681b      	ldr	r3, [r3, #0]
    dc36:	4058      	eors	r0, r3
    dc38:	4b1f      	ldr	r3, [pc, #124]	; (dcb8 <edbg_eui_read_eui64+0x1a4>)
    dc3a:	681b      	ldr	r3, [r3, #0]
    dc3c:	4058      	eors	r0, r3
	  srand(seed);
    dc3e:	4b1f      	ldr	r3, [pc, #124]	; (dcbc <edbg_eui_read_eui64+0x1a8>)
    dc40:	4798      	blx	r3
    dc42:	4c13      	ldr	r4, [pc, #76]	; (dc90 <edbg_eui_read_eui64+0x17c>)
    dc44:	0026      	movs	r6, r4
    dc46:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    dc48:	4d1d      	ldr	r5, [pc, #116]	; (dcc0 <edbg_eui_read_eui64+0x1ac>)
    dc4a:	47a8      	blx	r5
    dc4c:	7020      	strb	r0, [r4, #0]
    dc4e:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    dc50:	42a6      	cmp	r6, r4
    dc52:	d1fa      	bne.n	dc4a <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    dc54:	480e      	ldr	r0, [pc, #56]	; (dc90 <edbg_eui_read_eui64+0x17c>)
    dc56:	b010      	add	sp, #64	; 0x40
    dc58:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    dc5a:	4810      	ldr	r0, [pc, #64]	; (dc9c <edbg_eui_read_eui64+0x188>)
    dc5c:	4b10      	ldr	r3, [pc, #64]	; (dca0 <edbg_eui_read_eui64+0x18c>)
    dc5e:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    dc60:	4806      	ldr	r0, [pc, #24]	; (dc7c <edbg_eui_read_eui64+0x168>)
    dc62:	4b0d      	ldr	r3, [pc, #52]	; (dc98 <edbg_eui_read_eui64+0x184>)
    dc64:	4798      	blx	r3
    dc66:	e7df      	b.n	dc28 <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    dc68:	4816      	ldr	r0, [pc, #88]	; (dcc4 <edbg_eui_read_eui64+0x1b0>)
    dc6a:	4b0f      	ldr	r3, [pc, #60]	; (dca8 <edbg_eui_read_eui64+0x194>)
    dc6c:	4798      	blx	r3
			break;
    dc6e:	e7f7      	b.n	dc60 <edbg_eui_read_eui64+0x14c>
    dc70:	00000d48 	.word	0x00000d48
    dc74:	00100002 	.word	0x00100002
    dc78:	00110002 	.word	0x00110002
    dc7c:	20002f28 	.word	0x20002f28
    dc80:	42000400 	.word	0x42000400
    dc84:	00004e0d 	.word	0x00004e0d
    dc88:	00018ad4 	.word	0x00018ad4
    dc8c:	00005439 	.word	0x00005439
    dc90:	20002e28 	.word	0x20002e28
    dc94:	00005425 	.word	0x00005425
    dc98:	000050e9 	.word	0x000050e9
    dc9c:	00018ae0 	.word	0x00018ae0
    dca0:	00016d45 	.word	0x00016d45
    dca4:	00018af8 	.word	0x00018af8
    dca8:	00016e61 	.word	0x00016e61
    dcac:	0080a00c 	.word	0x0080a00c
    dcb0:	0080a040 	.word	0x0080a040
    dcb4:	0080a044 	.word	0x0080a044
    dcb8:	0080a048 	.word	0x0080a048
    dcbc:	00016e75 	.word	0x00016e75
    dcc0:	00016ed1 	.word	0x00016ed1
    dcc4:	00018b04 	.word	0x00018b04

0000dcc8 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    dcc8:	b500      	push	{lr}
    dcca:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    dccc:	2800      	cmp	r0, #0
    dcce:	d110      	bne.n	dcf2 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    dcd0:	2300      	movs	r3, #0
    dcd2:	466a      	mov	r2, sp
    dcd4:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    dcd6:	4a08      	ldr	r2, [pc, #32]	; (dcf8 <nvm_init+0x30>)
    dcd8:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    dcda:	466a      	mov	r2, sp
    dcdc:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    dcde:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    dce0:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    dce2:	3302      	adds	r3, #2
    dce4:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    dce6:	4668      	mov	r0, sp
    dce8:	4b04      	ldr	r3, [pc, #16]	; (dcfc <nvm_init+0x34>)
    dcea:	4798      	blx	r3

		return STATUS_OK;
    dcec:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    dcee:	b003      	add	sp, #12
    dcf0:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
<<<<<<< Updated upstream
    dd7e:	2008      	movs	r0, #8
    dd80:	4240      	negs	r0, r0
    dd82:	e7fa      	b.n	dd7a <nvm_init+0x26>
    dd84:	41004000 	.word	0x41004000
    dd88:	00004a05 	.word	0x00004a05
=======
    db34:	1c04      	adds	r4, r0, #0
    db36:	4b1a      	ldr	r3, [pc, #104]	; (dba0 <tmr_init+0x108>)
    db38:	4798      	blx	r3
    db3a:	47a8      	blx	r5
    db3c:	1c01      	adds	r1, r0, #0
    db3e:	1c20      	adds	r0, r4, #0
    db40:	4b18      	ldr	r3, [pc, #96]	; (dba4 <tmr_init+0x10c>)
    db42:	4798      	blx	r3
    db44:	21fc      	movs	r1, #252	; 0xfc
    db46:	0589      	lsls	r1, r1, #22
    db48:	4b17      	ldr	r3, [pc, #92]	; (dba8 <tmr_init+0x110>)
    db4a:	4798      	blx	r3
    db4c:	2800      	cmp	r0, #0
    db4e:	d005      	beq.n	db5c <tmr_init+0xc4>
    db50:	21fe      	movs	r1, #254	; 0xfe
    db52:	0589      	lsls	r1, r1, #22
    db54:	1c20      	adds	r0, r4, #0
    db56:	4b15      	ldr	r3, [pc, #84]	; (dbac <tmr_init+0x114>)
    db58:	4798      	blx	r3
    db5a:	1c04      	adds	r4, r0, #0
    db5c:	1c20      	adds	r0, r4, #0
    db5e:	4b10      	ldr	r3, [pc, #64]	; (dba0 <tmr_init+0x108>)
    db60:	4798      	blx	r3
    db62:	b2c0      	uxtb	r0, r0
    db64:	bd70      	pop	{r4, r5, r6, pc}
    db66:	46c0      	nop			; (mov r8, r8)
    db68:	20002dd4 	.word	0x20002dd4
    db6c:	20002e0c 	.word	0x20002e0c
    db70:	42002000 	.word	0x42002000
    db74:	00006cc5 	.word	0x00006cc5
    db78:	0000d985 	.word	0x0000d985
    db7c:	00006bc1 	.word	0x00006bc1
    db80:	0000d979 	.word	0x0000d979
    db84:	00006c89 	.word	0x00006c89
    db88:	00018cb0 	.word	0x00018cb0
    db8c:	e000e100 	.word	0xe000e100
    db90:	00006989 	.word	0x00006989
    db94:	000149cd 	.word	0x000149cd
    db98:	49742400 	.word	0x49742400
    db9c:	00013f95 	.word	0x00013f95
    dba0:	00013a45 	.word	0x00013a45
    dba4:	000145b5 	.word	0x000145b5
    dba8:	0001399d 	.word	0x0001399d
    dbac:	00013c71 	.word	0x00013c71

0000dbb0 <edbg_eui_read_eui64>:
    dbb0:	b570      	push	{r4, r5, r6, lr}
    dbb2:	b090      	sub	sp, #64	; 0x40
    dbb4:	aa03      	add	r2, sp, #12
    dbb6:	2364      	movs	r3, #100	; 0x64
    dbb8:	9303      	str	r3, [sp, #12]
    dbba:	4b54      	ldr	r3, [pc, #336]	; (dd0c <edbg_eui_read_eui64+0x15c>)
    dbbc:	6053      	str	r3, [r2, #4]
    dbbe:	2300      	movs	r3, #0
    dbc0:	6093      	str	r3, [r2, #8]
    dbc2:	7313      	strb	r3, [r2, #12]
    dbc4:	7613      	strb	r3, [r2, #24]
    dbc6:	2180      	movs	r1, #128	; 0x80
    dbc8:	0389      	lsls	r1, r1, #14
    dbca:	6111      	str	r1, [r2, #16]
    dbcc:	2101      	movs	r1, #1
    dbce:	4249      	negs	r1, r1
    dbd0:	82d1      	strh	r1, [r2, #22]
    dbd2:	8291      	strh	r1, [r2, #20]
    dbd4:	3125      	adds	r1, #37	; 0x25
    dbd6:	5453      	strb	r3, [r2, r1]
    dbd8:	6293      	str	r3, [r2, #40]	; 0x28
    dbda:	3108      	adds	r1, #8
    dbdc:	5453      	strb	r3, [r2, r1]
    dbde:	3101      	adds	r1, #1
    dbe0:	5453      	strb	r3, [r2, r1]
    dbe2:	3101      	adds	r1, #1
    dbe4:	5453      	strb	r3, [r2, r1]
    dbe6:	33d7      	adds	r3, #215	; 0xd7
    dbe8:	8613      	strh	r3, [r2, #48]	; 0x30
    dbea:	4b49      	ldr	r3, [pc, #292]	; (dd10 <edbg_eui_read_eui64+0x160>)
    dbec:	61d3      	str	r3, [r2, #28]
    dbee:	4b49      	ldr	r3, [pc, #292]	; (dd14 <edbg_eui_read_eui64+0x164>)
    dbf0:	6213      	str	r3, [r2, #32]
    dbf2:	4c49      	ldr	r4, [pc, #292]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dbf4:	4949      	ldr	r1, [pc, #292]	; (dd1c <edbg_eui_read_eui64+0x16c>)
    dbf6:	0020      	movs	r0, r4
    dbf8:	4b49      	ldr	r3, [pc, #292]	; (dd20 <edbg_eui_read_eui64+0x170>)
    dbfa:	4798      	blx	r3
    dbfc:	6822      	ldr	r2, [r4, #0]
    dbfe:	2107      	movs	r1, #7
    dc00:	69d3      	ldr	r3, [r2, #28]
    dc02:	4219      	tst	r1, r3
    dc04:	d1fc      	bne.n	dc00 <edbg_eui_read_eui64+0x50>
    dc06:	6813      	ldr	r3, [r2, #0]
    dc08:	2102      	movs	r1, #2
    dc0a:	430b      	orrs	r3, r1
    dc0c:	6013      	str	r3, [r2, #0]
    dc0e:	4b42      	ldr	r3, [pc, #264]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dc10:	88dc      	ldrh	r4, [r3, #6]
    dc12:	2300      	movs	r3, #0
    dc14:	2010      	movs	r0, #16
    dc16:	8b51      	ldrh	r1, [r2, #26]
    dc18:	4201      	tst	r1, r0
    dc1a:	d104      	bne.n	dc26 <edbg_eui_read_eui64+0x76>
    dc1c:	3301      	adds	r3, #1
    dc1e:	42a3      	cmp	r3, r4
    dc20:	d3f9      	bcc.n	dc16 <edbg_eui_read_eui64+0x66>
    dc22:	2310      	movs	r3, #16
    dc24:	8353      	strh	r3, [r2, #26]
    dc26:	466a      	mov	r2, sp
    dc28:	4b3e      	ldr	r3, [pc, #248]	; (dd24 <edbg_eui_read_eui64+0x174>)
    dc2a:	cb13      	ldmia	r3!, {r0, r1, r4}
    dc2c:	c213      	stmia	r2!, {r0, r1, r4}
    dc2e:	2600      	movs	r6, #0
    dc30:	4c39      	ldr	r4, [pc, #228]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dc32:	4d3d      	ldr	r5, [pc, #244]	; (dd28 <edbg_eui_read_eui64+0x178>)
    dc34:	e003      	b.n	dc3e <edbg_eui_read_eui64+0x8e>
    dc36:	1c73      	adds	r3, r6, #1
    dc38:	2e0a      	cmp	r6, #10
    dc3a:	d033      	beq.n	dca4 <edbg_eui_read_eui64+0xf4>
    dc3c:	001e      	movs	r6, r3
    dc3e:	4669      	mov	r1, sp
    dc40:	0020      	movs	r0, r4
    dc42:	47a8      	blx	r5
    dc44:	2818      	cmp	r0, #24
    dc46:	d0f6      	beq.n	dc36 <edbg_eui_read_eui64+0x86>
    dc48:	2812      	cmp	r0, #18
    dc4a:	d02f      	beq.n	dcac <edbg_eui_read_eui64+0xfc>
    dc4c:	3801      	subs	r0, #1
    dc4e:	b2c0      	uxtb	r0, r0
    dc50:	28fd      	cmp	r0, #253	; 0xfd
    dc52:	d9f4      	bls.n	dc3e <edbg_eui_read_eui64+0x8e>
    dc54:	4b35      	ldr	r3, [pc, #212]	; (dd2c <edbg_eui_read_eui64+0x17c>)
    dc56:	9301      	str	r3, [sp, #4]
    dc58:	2380      	movs	r3, #128	; 0x80
    dc5a:	005b      	lsls	r3, r3, #1
    dc5c:	466a      	mov	r2, sp
    dc5e:	8053      	strh	r3, [r2, #2]
    dc60:	4c2d      	ldr	r4, [pc, #180]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dc62:	4d33      	ldr	r5, [pc, #204]	; (dd30 <edbg_eui_read_eui64+0x180>)
    dc64:	4669      	mov	r1, sp
    dc66:	0020      	movs	r0, r4
    dc68:	47a8      	blx	r5
    dc6a:	2818      	cmp	r0, #24
    dc6c:	d043      	beq.n	dcf6 <edbg_eui_read_eui64+0x146>
    dc6e:	2812      	cmp	r0, #18
    dc70:	d048      	beq.n	dd04 <edbg_eui_read_eui64+0x154>
    dc72:	3801      	subs	r0, #1
    dc74:	b2c0      	uxtb	r0, r0
    dc76:	28fd      	cmp	r0, #253	; 0xfd
    dc78:	d9f4      	bls.n	dc64 <edbg_eui_read_eui64+0xb4>
    dc7a:	4827      	ldr	r0, [pc, #156]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dc7c:	4b2d      	ldr	r3, [pc, #180]	; (dd34 <edbg_eui_read_eui64+0x184>)
    dc7e:	4798      	blx	r3
    dc80:	4a2a      	ldr	r2, [pc, #168]	; (dd2c <edbg_eui_read_eui64+0x17c>)
    dc82:	7813      	ldrb	r3, [r2, #0]
    dc84:	7851      	ldrb	r1, [r2, #1]
    dc86:	404b      	eors	r3, r1
    dc88:	7891      	ldrb	r1, [r2, #2]
    dc8a:	404b      	eors	r3, r1
    dc8c:	78d1      	ldrb	r1, [r2, #3]
    dc8e:	404b      	eors	r3, r1
    dc90:	7911      	ldrb	r1, [r2, #4]
    dc92:	404b      	eors	r3, r1
    dc94:	7951      	ldrb	r1, [r2, #5]
    dc96:	404b      	eors	r3, r1
    dc98:	7991      	ldrb	r1, [r2, #6]
    dc9a:	79d2      	ldrb	r2, [r2, #7]
    dc9c:	404b      	eors	r3, r1
    dc9e:	429a      	cmp	r2, r3
    dca0:	d126      	bne.n	dcf0 <edbg_eui_read_eui64+0x140>
    dca2:	e00f      	b.n	dcc4 <edbg_eui_read_eui64+0x114>
    dca4:	4824      	ldr	r0, [pc, #144]	; (dd38 <edbg_eui_read_eui64+0x188>)
    dca6:	4b25      	ldr	r3, [pc, #148]	; (dd3c <edbg_eui_read_eui64+0x18c>)
    dca8:	4798      	blx	r3
    dcaa:	e002      	b.n	dcb2 <edbg_eui_read_eui64+0x102>
    dcac:	4824      	ldr	r0, [pc, #144]	; (dd40 <edbg_eui_read_eui64+0x190>)
    dcae:	4b25      	ldr	r3, [pc, #148]	; (dd44 <edbg_eui_read_eui64+0x194>)
    dcb0:	4798      	blx	r3
    dcb2:	4b1e      	ldr	r3, [pc, #120]	; (dd2c <edbg_eui_read_eui64+0x17c>)
    dcb4:	9301      	str	r3, [sp, #4]
    dcb6:	2380      	movs	r3, #128	; 0x80
    dcb8:	005b      	lsls	r3, r3, #1
    dcba:	466a      	mov	r2, sp
    dcbc:	8053      	strh	r3, [r2, #2]
    dcbe:	4816      	ldr	r0, [pc, #88]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dcc0:	4b1c      	ldr	r3, [pc, #112]	; (dd34 <edbg_eui_read_eui64+0x184>)
    dcc2:	4798      	blx	r3
    dcc4:	4b20      	ldr	r3, [pc, #128]	; (dd48 <edbg_eui_read_eui64+0x198>)
    dcc6:	6818      	ldr	r0, [r3, #0]
    dcc8:	4b20      	ldr	r3, [pc, #128]	; (dd4c <edbg_eui_read_eui64+0x19c>)
    dcca:	681b      	ldr	r3, [r3, #0]
    dccc:	4058      	eors	r0, r3
    dcce:	4b20      	ldr	r3, [pc, #128]	; (dd50 <edbg_eui_read_eui64+0x1a0>)
    dcd0:	681b      	ldr	r3, [r3, #0]
    dcd2:	4058      	eors	r0, r3
    dcd4:	4b1f      	ldr	r3, [pc, #124]	; (dd54 <edbg_eui_read_eui64+0x1a4>)
    dcd6:	681b      	ldr	r3, [r3, #0]
    dcd8:	4058      	eors	r0, r3
    dcda:	4b1f      	ldr	r3, [pc, #124]	; (dd58 <edbg_eui_read_eui64+0x1a8>)
    dcdc:	4798      	blx	r3
    dcde:	4c13      	ldr	r4, [pc, #76]	; (dd2c <edbg_eui_read_eui64+0x17c>)
    dce0:	0026      	movs	r6, r4
    dce2:	3608      	adds	r6, #8
    dce4:	4d1d      	ldr	r5, [pc, #116]	; (dd5c <edbg_eui_read_eui64+0x1ac>)
    dce6:	47a8      	blx	r5
    dce8:	7020      	strb	r0, [r4, #0]
    dcea:	3401      	adds	r4, #1
    dcec:	42a6      	cmp	r6, r4
    dcee:	d1fa      	bne.n	dce6 <edbg_eui_read_eui64+0x136>
    dcf0:	480e      	ldr	r0, [pc, #56]	; (dd2c <edbg_eui_read_eui64+0x17c>)
    dcf2:	b010      	add	sp, #64	; 0x40
    dcf4:	bd70      	pop	{r4, r5, r6, pc}
    dcf6:	4810      	ldr	r0, [pc, #64]	; (dd38 <edbg_eui_read_eui64+0x188>)
    dcf8:	4b10      	ldr	r3, [pc, #64]	; (dd3c <edbg_eui_read_eui64+0x18c>)
    dcfa:	4798      	blx	r3
    dcfc:	4806      	ldr	r0, [pc, #24]	; (dd18 <edbg_eui_read_eui64+0x168>)
    dcfe:	4b0d      	ldr	r3, [pc, #52]	; (dd34 <edbg_eui_read_eui64+0x184>)
    dd00:	4798      	blx	r3
    dd02:	e7df      	b.n	dcc4 <edbg_eui_read_eui64+0x114>
    dd04:	4816      	ldr	r0, [pc, #88]	; (dd60 <edbg_eui_read_eui64+0x1b0>)
    dd06:	4b0f      	ldr	r3, [pc, #60]	; (dd44 <edbg_eui_read_eui64+0x194>)
    dd08:	4798      	blx	r3
    dd0a:	e7f7      	b.n	dcfc <edbg_eui_read_eui64+0x14c>
    dd0c:	00000d48 	.word	0x00000d48
    dd10:	00100002 	.word	0x00100002
    dd14:	00110002 	.word	0x00110002
    dd18:	20002f28 	.word	0x20002f28
    dd1c:	42000400 	.word	0x42000400
    dd20:	00004e0d 	.word	0x00004e0d
    dd24:	00018cb8 	.word	0x00018cb8
    dd28:	00005439 	.word	0x00005439
    dd2c:	20002e28 	.word	0x20002e28
    dd30:	00005425 	.word	0x00005425
    dd34:	000050e9 	.word	0x000050e9
    dd38:	00018cc4 	.word	0x00018cc4
    dd3c:	00016df1 	.word	0x00016df1
    dd40:	00018cdc 	.word	0x00018cdc
    dd44:	00016f0d 	.word	0x00016f0d
    dd48:	0080a00c 	.word	0x0080a00c
    dd4c:	0080a040 	.word	0x0080a040
    dd50:	0080a044 	.word	0x0080a044
    dd54:	0080a048 	.word	0x0080a048
    dd58:	00016f21 	.word	0x00016f21
    dd5c:	00016f7d 	.word	0x00016f7d
    dd60:	00018ce8 	.word	0x00018ce8

0000dd64 <nvm_init>:
    dd64:	b500      	push	{lr}
    dd66:	b083      	sub	sp, #12
    dd68:	2800      	cmp	r0, #0
    dd6a:	d110      	bne.n	dd8e <nvm_init+0x2a>
    dd6c:	2300      	movs	r3, #0
    dd6e:	466a      	mov	r2, sp
    dd70:	7013      	strb	r3, [r2, #0]
    dd72:	4a08      	ldr	r2, [pc, #32]	; (dd94 <nvm_init+0x30>)
    dd74:	6852      	ldr	r2, [r2, #4]
    dd76:	466a      	mov	r2, sp
    dd78:	70d3      	strb	r3, [r2, #3]
    dd7a:	7113      	strb	r3, [r2, #4]
    dd7c:	7053      	strb	r3, [r2, #1]
    dd7e:	3302      	adds	r3, #2
    dd80:	7093      	strb	r3, [r2, #2]
    dd82:	4668      	mov	r0, sp
    dd84:	4b04      	ldr	r3, [pc, #16]	; (dd98 <nvm_init+0x34>)
    dd86:	4798      	blx	r3
    dd88:	2000      	movs	r0, #0
    dd8a:	b003      	add	sp, #12
    dd8c:	bd00      	pop	{pc}
    dd8e:	2008      	movs	r0, #8
    dd90:	4240      	negs	r0, r0
    dd92:	e7fa      	b.n	dd8a <nvm_init+0x26>
    dd94:	41004000 	.word	0x41004000
    dd98:	00004a05 	.word	0x00004a05
>>>>>>> Stashed changes

0000dd9c <UART_LoRa_rx_cb>:
=======
    dcf2:	2008      	movs	r0, #8
    dcf4:	4240      	negs	r0, r0
    dcf6:	e7fa      	b.n	dcee <nvm_init+0x26>
    dcf8:	41004000 	.word	0x41004000
    dcfc:	00004a05 	.word	0x00004a05

0000dd00 <UART_LoRa_rx_cb>:
>>>>>>> Stashed changes
void UART_LoRa_rx_cb(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_1_PIN);
	//usart_write_buffer_job(&UART_LoRa,(uint8_t *)rx_buffer_LoRa, LoRa_UART_RX_BUFFER_LENGTH);

}
<<<<<<< Updated upstream
    dd9c:	4770      	bx	lr
    dd9e:	Address 0x0000dd9e is out of bounds.


0000dda0 <UART_IO_rx_cb>:
=======
    dd00:	4770      	bx	lr
    dd02:	Address 0x0000dd02 is out of bounds.


0000dd04 <UART_IO_rx_cb>:
>>>>>>> Stashed changes
{
	port_pin_toggle_output_level(LED_1_PIN);
}

void UART_IO_rx_cb(struct usart_module *const usart_module)
{
<<<<<<< Updated upstream
    dda0:	b510      	push	{r4, lr}
=======
    dd04:	b510      	push	{r4, lr}
>>>>>>> Stashed changes
	//port_pin_toggle_output_level(LED_0_PIN);
	//usart_write_buffer_job(&UART_LoRa,(uint8_t *)rx_buffer_IO, IO_UART_RX_BUFFER_LENGTH);
	#ifdef DEBUG
	printf("\n\r UART message received %x", rx_buffer_IO[0]);
<<<<<<< Updated upstream
    dda2:	4c05      	ldr	r4, [pc, #20]	; (ddb8 <UART_IO_rx_cb+0x18>)
    dda4:	7821      	ldrb	r1, [r4, #0]
    dda6:	b2c9      	uxtb	r1, r1
    dda8:	4804      	ldr	r0, [pc, #16]	; (ddbc <UART_IO_rx_cb+0x1c>)
    ddaa:	4b05      	ldr	r3, [pc, #20]	; (ddc0 <UART_IO_rx_cb+0x20>)
    ddac:	4798      	blx	r3
	M_SendReceivedUARTMessage(rx_buffer_IO[0]);
    ddae:	7820      	ldrb	r0, [r4, #0]
    ddb0:	b2c0      	uxtb	r0, r0
    ddb2:	4b04      	ldr	r3, [pc, #16]	; (ddc4 <UART_IO_rx_cb+0x24>)
    ddb4:	4798      	blx	r3
}
    ddb6:	bd10      	pop	{r4, pc}
    ddb8:	20001f9c 	.word	0x20001f9c
    ddbc:	00018cf4 	.word	0x00018cf4
    ddc0:	00016df1 	.word	0x00016df1
    ddc4:	000076ed 	.word	0x000076ed

0000ddc8 <UART_LoRa_init>:
{
<<<<<<< Updated upstream
    ddb8:	b530      	push	{r4, r5, lr}
    ddba:	b091      	sub	sp, #68	; 0x44
=======
    ddc8:	b530      	push	{r4, r5, lr}
    ddca:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
>>>>>>> Stashed changes
	config->data_order       = USART_DATAORDER_LSB;
    ddcc:	2380      	movs	r3, #128	; 0x80
    ddce:	05db      	lsls	r3, r3, #23
    ddd0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    ddd2:	2300      	movs	r3, #0
    ddd4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    ddd6:	22ff      	movs	r2, #255	; 0xff
    ddd8:	4669      	mov	r1, sp
    ddda:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    dddc:	2200      	movs	r2, #0
    ddde:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
<<<<<<< Updated upstream
    ddd0:	72cb      	strb	r3, [r1, #11]
=======
    dde0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
>>>>>>> Stashed changes
	config->receiver_enable  = true;
    dde2:	2101      	movs	r1, #1
    dde4:	2024      	movs	r0, #36	; 0x24
    dde6:	466c      	mov	r4, sp
    dde8:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    ddea:	3001      	adds	r0, #1
    ddec:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    ddee:	3125      	adds	r1, #37	; 0x25
    ddf0:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    ddf2:	3101      	adds	r1, #1
    ddf4:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
<<<<<<< Updated upstream
    dde6:	930a      	str	r3, [sp, #40]	; 0x28
=======
    ddf6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
>>>>>>> Stashed changes
	config->run_in_standby   = false;
    ddf8:	3105      	adds	r1, #5
    ddfa:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
<<<<<<< Updated upstream
    ddec:	3101      	adds	r1, #1
    ddee:	5463      	strb	r3, [r4, r1]
=======
    ddfc:	3101      	adds	r1, #1
    ddfe:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
>>>>>>> Stashed changes
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    de00:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
<<<<<<< Updated upstream
    ddf2:	8223      	strh	r3, [r4, #16]
=======
	#endif
	M_SendReceivedUARTMessage(rx_buffer_IO[0]);	
    dd06:	4b03      	ldr	r3, [pc, #12]	; (dd14 <UART_IO_rx_cb+0x10>)
    dd08:	7818      	ldrb	r0, [r3, #0]
    dd0a:	b2c0      	uxtb	r0, r0
    dd0c:	4b02      	ldr	r3, [pc, #8]	; (dd18 <UART_IO_rx_cb+0x14>)
    dd0e:	4798      	blx	r3
}
    dd10:	bd10      	pop	{r4, pc}
    dd12:	46c0      	nop			; (mov r8, r8)
    dd14:	20001f9c 	.word	0x20001f9c
    dd18:	000076d1 	.word	0x000076d1

0000dd1c <UART_LoRa_init>:
{
    dd1c:	b530      	push	{r4, r5, lr}
    dd1e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    dd20:	2380      	movs	r3, #128	; 0x80
    dd22:	05db      	lsls	r3, r3, #23
    dd24:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    dd26:	2300      	movs	r3, #0
    dd28:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    dd2a:	22ff      	movs	r2, #255	; 0xff
    dd2c:	4669      	mov	r1, sp
    dd2e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    dd30:	2200      	movs	r2, #0
    dd32:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    dd34:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    dd36:	2101      	movs	r1, #1
    dd38:	2024      	movs	r0, #36	; 0x24
    dd3a:	466c      	mov	r4, sp
    dd3c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    dd3e:	3001      	adds	r0, #1
    dd40:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    dd42:	3125      	adds	r1, #37	; 0x25
    dd44:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    dd46:	3101      	adds	r1, #1
    dd48:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    dd4a:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    dd4c:	3105      	adds	r1, #5
    dd4e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    dd50:	3101      	adds	r1, #1
    dd52:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    dd54:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    dd56:	8223      	strh	r3, [r4, #16]
>>>>>>> Stashed changes
	config->lin_slave_enable      = false;
    dd58:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    dd5a:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
<<<<<<< Updated upstream
    ddf8:	7722      	strb	r2, [r4, #28]
=======
    de02:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    de04:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    de06:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    de08:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
>>>>>>> Stashed changes
	config->encoding_format_enable                  = false;
    de0a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
<<<<<<< Updated upstream
    ddfc:	2313      	movs	r3, #19
    ddfe:	76a3      	strb	r3, [r4, #26]
=======
    de0c:	2313      	movs	r3, #19
    de0e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
>>>>>>> Stashed changes
	config->collision_detection_enable              = false;
    de10:	7762      	strb	r2, [r4, #29]
	config_uart_LoRa.baudrate    = UART_BAUD;
    de12:	23e1      	movs	r3, #225	; 0xe1
    de14:	025b      	lsls	r3, r3, #9
    de16:	9308      	str	r3, [sp, #32]
	config_uart_LoRa.mux_setting = USART_RX_1_TX_0_XCK_1; //RX - TX positon ref: https://asf.microchip.com/docs/latest/common.services.fs.fatfs.access_example.saml21_xplained_pro/html/asfdoc_sam0_sercom_usart_mux_settings.html
    de18:	2380      	movs	r3, #128	; 0x80
    de1a:	035b      	lsls	r3, r3, #13
    de1c:	9303      	str	r3, [sp, #12]
	config_uart_LoRa.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0; //UNUSED - TX
    de1e:	4b12      	ldr	r3, [pc, #72]	; (de68 <UART_LoRa_init+0xa0>)
    de20:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_LoRa.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; //UNUSED - RX
    de22:	4b12      	ldr	r3, [pc, #72]	; (de6c <UART_LoRa_init+0xa4>)
    de24:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_LoRa.pinmux_pad2 = PINMUX_UNUSED; //PA06 - TX
    de26:	2301      	movs	r3, #1
    de28:	425b      	negs	r3, r3
    de2a:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_LoRa.pinmux_pad3 = PINMUX_UNUSED; //PA06 - RX
    de2c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_LoRa,SERCOM3, &config_uart_LoRa) != STATUS_OK) {
<<<<<<< Updated upstream
    de1e:	4d10      	ldr	r5, [pc, #64]	; (de60 <UART_LoRa_init+0xa8>)
    de20:	4c10      	ldr	r4, [pc, #64]	; (de64 <UART_LoRa_init+0xac>)
    de22:	466a      	mov	r2, sp
    de24:	4910      	ldr	r1, [pc, #64]	; (de68 <UART_LoRa_init+0xb0>)
    de26:	0028      	movs	r0, r5
    de28:	47a0      	blx	r4
    de2a:	2800      	cmp	r0, #0
    de2c:	d1f9      	bne.n	de22 <UART_LoRa_init+0x6a>
=======
    dd5c:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    dd5e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    dd60:	2313      	movs	r3, #19
    dd62:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    dd64:	7762      	strb	r2, [r4, #29]
	config_uart_LoRa.baudrate    = UART_BAUD;
    dd66:	23e1      	movs	r3, #225	; 0xe1
    dd68:	025b      	lsls	r3, r3, #9
    dd6a:	9308      	str	r3, [sp, #32]
	config_uart_LoRa.mux_setting = USART_RX_1_TX_0_XCK_1; //RX - TX positon ref: https://asf.microchip.com/docs/latest/common.services.fs.fatfs.access_example.saml21_xplained_pro/html/asfdoc_sam0_sercom_usart_mux_settings.html
    dd6c:	2380      	movs	r3, #128	; 0x80
    dd6e:	035b      	lsls	r3, r3, #13
    dd70:	9303      	str	r3, [sp, #12]
	config_uart_LoRa.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0; //UNUSED - TX
    dd72:	4b12      	ldr	r3, [pc, #72]	; (ddbc <UART_LoRa_init+0xa0>)
    dd74:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_LoRa.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; //UNUSED - RX
    dd76:	4b12      	ldr	r3, [pc, #72]	; (ddc0 <UART_LoRa_init+0xa4>)
    dd78:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_LoRa.pinmux_pad2 = PINMUX_UNUSED; //PA06 - TX
    dd7a:	2301      	movs	r3, #1
    dd7c:	425b      	negs	r3, r3
    dd7e:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_LoRa.pinmux_pad3 = PINMUX_UNUSED; //PA06 - RX
    dd80:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_LoRa,SERCOM3, &config_uart_LoRa) != STATUS_OK) {
    dd82:	4d10      	ldr	r5, [pc, #64]	; (ddc4 <UART_LoRa_init+0xa8>)
    dd84:	4c10      	ldr	r4, [pc, #64]	; (ddc8 <UART_LoRa_init+0xac>)
    dd86:	466a      	mov	r2, sp
    dd88:	4910      	ldr	r1, [pc, #64]	; (ddcc <UART_LoRa_init+0xb0>)
    dd8a:	0028      	movs	r0, r5
    dd8c:	47a0      	blx	r4
    dd8e:	2800      	cmp	r0, #0
    dd90:	d1f9      	bne.n	dd86 <UART_LoRa_init+0x6a>
>>>>>>> Stashed changes
	SercomUsart *const usart_hw = &(module->hw->USART);
    dd92:	4d0c      	ldr	r5, [pc, #48]	; (ddc4 <UART_LoRa_init+0xa8>)
    dd94:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
<<<<<<< Updated upstream
    de32:	0020      	movs	r0, r4
    de34:	4b0d      	ldr	r3, [pc, #52]	; (de6c <UART_LoRa_init+0xb4>)
    de36:	4798      	blx	r3
    de38:	231f      	movs	r3, #31
    de3a:	4018      	ands	r0, r3
    de3c:	3b1e      	subs	r3, #30
    de3e:	4083      	lsls	r3, r0
    de40:	4a0b      	ldr	r2, [pc, #44]	; (de70 <UART_LoRa_init+0xb8>)
    de42:	6013      	str	r3, [r2, #0]
=======
    de2e:	4d10      	ldr	r5, [pc, #64]	; (de70 <UART_LoRa_init+0xa8>)
    de30:	4c10      	ldr	r4, [pc, #64]	; (de74 <UART_LoRa_init+0xac>)
    de32:	466a      	mov	r2, sp
    de34:	4910      	ldr	r1, [pc, #64]	; (de78 <UART_LoRa_init+0xb0>)
    de36:	0028      	movs	r0, r5
    de38:	47a0      	blx	r4
    de3a:	2800      	cmp	r0, #0
    de3c:	d1f9      	bne.n	de32 <UART_LoRa_init+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    de3e:	4d0c      	ldr	r5, [pc, #48]	; (de70 <UART_LoRa_init+0xa8>)
    de40:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    de42:	0020      	movs	r0, r4
    de44:	4b0d      	ldr	r3, [pc, #52]	; (de7c <UART_LoRa_init+0xb4>)
    de46:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    de48:	231f      	movs	r3, #31
    de4a:	4018      	ands	r0, r3
    de4c:	3b1e      	subs	r3, #30
    de4e:	4083      	lsls	r3, r0
    de50:	4a0b      	ldr	r2, [pc, #44]	; (de80 <UART_LoRa_init+0xb8>)
    de52:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	SercomUsart *const usart_hw = &(module->hw->USART);
    de54:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    de56:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
<<<<<<< Updated upstream
    de48:	2b00      	cmp	r3, #0
    de4a:	d1fc      	bne.n	de46 <UART_LoRa_init+0x8e>
=======
    de58:	2b00      	cmp	r3, #0
    de5a:	d1fc      	bne.n	de56 <UART_LoRa_init+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
>>>>>>> Stashed changes
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    de5c:	6823      	ldr	r3, [r4, #0]
    de5e:	2202      	movs	r2, #2
    de60:	4313      	orrs	r3, r2
    de62:	6023      	str	r3, [r4, #0]
}
    de64:	b011      	add	sp, #68	; 0x44
    de66:	bd30      	pop	{r4, r5, pc}
    de68:	00160002 	.word	0x00160002
    de6c:	00170002 	.word	0x00170002
    de70:	20001fa0 	.word	0x20001fa0
    de74:	00005cb5 	.word	0x00005cb5
    de78:	42000c00 	.word	0x42000c00
    de7c:	000057e5 	.word	0x000057e5
    de80:	e000e100 	.word	0xe000e100

0000de84 <UART_IO_init>:
{
    de84:	b530      	push	{r4, r5, lr}
    de86:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    de88:	2380      	movs	r3, #128	; 0x80
    de8a:	05db      	lsls	r3, r3, #23
    de8c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    de8e:	2300      	movs	r3, #0
    de90:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    de92:	22ff      	movs	r2, #255	; 0xff
    de94:	4669      	mov	r1, sp
    de96:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    de98:	2200      	movs	r2, #0
    de9a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    de9c:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    de9e:	2101      	movs	r1, #1
    dea0:	2024      	movs	r0, #36	; 0x24
    dea2:	466c      	mov	r4, sp
    dea4:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    dea6:	3001      	adds	r0, #1
    dea8:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    deaa:	3125      	adds	r1, #37	; 0x25
    deac:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    deae:	3101      	adds	r1, #1
    deb0:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    deb2:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    deb4:	3105      	adds	r1, #5
    deb6:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    deb8:	3101      	adds	r1, #1
    deba:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    debc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    debe:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    dec0:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    dec2:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    dec4:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    dec6:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    dec8:	2313      	movs	r3, #19
    deca:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    decc:	7762      	strb	r2, [r4, #29]
	config_uart_IO.baudrate    = UART_BAUD;
    dece:	23e1      	movs	r3, #225	; 0xe1
    ded0:	025b      	lsls	r3, r3, #9
    ded2:	9308      	str	r3, [sp, #32]
	config_uart_IO.mux_setting = USART_RX_3_TX_0_XCK_1; //SERCOM1
    ded4:	23c0      	movs	r3, #192	; 0xc0
    ded6:	039b      	lsls	r3, r3, #14
    ded8:	9303      	str	r3, [sp, #12]
	config_uart_IO.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0; //TX
    deda:	4b12      	ldr	r3, [pc, #72]	; (df24 <UART_IO_init+0xa0>)
    dedc:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_IO.pinmux_pad1 = PINMUX_UNUSED; //UNUSED
    dede:	2301      	movs	r3, #1
    dee0:	425b      	negs	r3, r3
    dee2:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_IO.pinmux_pad2 = PINMUX_UNUSED;
    dee4:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_IO.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3; //RX
    dee6:	4b10      	ldr	r3, [pc, #64]	; (df28 <UART_IO_init+0xa4>)
    dee8:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_IO,SERCOM5, &config_uart_IO) != STATUS_OK) {
    deea:	4d10      	ldr	r5, [pc, #64]	; (df2c <UART_IO_init+0xa8>)
    deec:	4c10      	ldr	r4, [pc, #64]	; (df30 <UART_IO_init+0xac>)
    deee:	466a      	mov	r2, sp
    def0:	4910      	ldr	r1, [pc, #64]	; (df34 <UART_IO_init+0xb0>)
    def2:	0028      	movs	r0, r5
    def4:	47a0      	blx	r4
    def6:	2800      	cmp	r0, #0
    def8:	d1f9      	bne.n	deee <UART_IO_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    defa:	4d0c      	ldr	r5, [pc, #48]	; (df2c <UART_IO_init+0xa8>)
    defc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    defe:	0020      	movs	r0, r4
    df00:	4b0d      	ldr	r3, [pc, #52]	; (df38 <UART_IO_init+0xb4>)
    df02:	4798      	blx	r3
    df04:	231f      	movs	r3, #31
    df06:	4018      	ands	r0, r3
    df08:	3b1e      	subs	r3, #30
    df0a:	4083      	lsls	r3, r0
    df0c:	4a0b      	ldr	r2, [pc, #44]	; (df3c <UART_IO_init+0xb8>)
    df0e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    df10:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    df12:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    df14:	2b00      	cmp	r3, #0
    df16:	d1fc      	bne.n	df12 <UART_IO_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    df18:	6823      	ldr	r3, [r4, #0]
    df1a:	2202      	movs	r2, #2
    df1c:	4313      	orrs	r3, r2
    df1e:	6023      	str	r3, [r4, #0]
}
    df20:	b011      	add	sp, #68	; 0x44
    df22:	bd30      	pop	{r4, r5, pc}
    df24:	00220003 	.word	0x00220003
    df28:	00370003 	.word	0x00370003
    df2c:	20001f68 	.word	0x20001f68
    df30:	00005cb5 	.word	0x00005cb5
    df34:	43000400 	.word	0x43000400
    df38:	000057e5 	.word	0x000057e5
    df3c:	e000e100 	.word	0xe000e100

0000df40 <UART_init>:
{
    df40:	b510      	push	{r4, lr}
	UART_LoRa_init();
    df42:	4b02      	ldr	r3, [pc, #8]	; (df4c <UART_init+0xc>)
    df44:	4798      	blx	r3
	UART_IO_init();
    df46:	4b02      	ldr	r3, [pc, #8]	; (df50 <UART_init+0x10>)
    df48:	4798      	blx	r3
}
    df4a:	bd10      	pop	{r4, pc}
    df4c:	0000ddc9 	.word	0x0000ddc9
    df50:	0000de85 	.word	0x0000de85

0000df54 <UART_LoRa_cb_init>:
{
    df54:	b510      	push	{r4, lr}
	usart_register_callback(&UART_LoRa,UART_LoRa_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    df56:	4c06      	ldr	r4, [pc, #24]	; (df70 <UART_LoRa_cb_init+0x1c>)
    df58:	2201      	movs	r2, #1
    df5a:	4906      	ldr	r1, [pc, #24]	; (df74 <UART_LoRa_cb_init+0x20>)
    df5c:	0020      	movs	r0, r4
    df5e:	4b06      	ldr	r3, [pc, #24]	; (df78 <UART_LoRa_cb_init+0x24>)
    df60:	4798      	blx	r3
=======
    dd96:	0020      	movs	r0, r4
    dd98:	4b0d      	ldr	r3, [pc, #52]	; (ddd0 <UART_LoRa_init+0xb4>)
    dd9a:	4798      	blx	r3
    dd9c:	231f      	movs	r3, #31
    dd9e:	4018      	ands	r0, r3
    dda0:	3b1e      	subs	r3, #30
    dda2:	4083      	lsls	r3, r0
    dda4:	4a0b      	ldr	r2, [pc, #44]	; (ddd4 <UART_LoRa_init+0xb8>)
    dda6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    dda8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ddaa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ddac:	2b00      	cmp	r3, #0
    ddae:	d1fc      	bne.n	ddaa <UART_LoRa_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    ddb0:	6823      	ldr	r3, [r4, #0]
    ddb2:	2202      	movs	r2, #2
    ddb4:	4313      	orrs	r3, r2
    ddb6:	6023      	str	r3, [r4, #0]
}
    ddb8:	b011      	add	sp, #68	; 0x44
    ddba:	bd30      	pop	{r4, r5, pc}
    ddbc:	00160002 	.word	0x00160002
    ddc0:	00170002 	.word	0x00170002
    ddc4:	20001fa0 	.word	0x20001fa0
    ddc8:	00005cb5 	.word	0x00005cb5
    ddcc:	42000c00 	.word	0x42000c00
    ddd0:	000057e5 	.word	0x000057e5
    ddd4:	e000e100 	.word	0xe000e100

0000ddd8 <UART_IO_init>:
{
    ddd8:	b530      	push	{r4, r5, lr}
    ddda:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    dddc:	2380      	movs	r3, #128	; 0x80
    ddde:	05db      	lsls	r3, r3, #23
    dde0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    dde2:	2300      	movs	r3, #0
    dde4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    dde6:	22ff      	movs	r2, #255	; 0xff
    dde8:	4669      	mov	r1, sp
    ddea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    ddec:	2200      	movs	r2, #0
    ddee:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ddf0:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    ddf2:	2101      	movs	r1, #1
    ddf4:	2024      	movs	r0, #36	; 0x24
    ddf6:	466c      	mov	r4, sp
    ddf8:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    ddfa:	3001      	adds	r0, #1
    ddfc:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    ddfe:	3125      	adds	r1, #37	; 0x25
    de00:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    de02:	3101      	adds	r1, #1
    de04:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    de06:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    de08:	3105      	adds	r1, #5
    de0a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    de0c:	3101      	adds	r1, #1
    de0e:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    de10:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    de12:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    de14:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    de16:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    de18:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    de1a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    de1c:	2313      	movs	r3, #19
    de1e:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    de20:	7762      	strb	r2, [r4, #29]
	config_uart_IO.baudrate    = UART_BAUD;
    de22:	23e1      	movs	r3, #225	; 0xe1
    de24:	025b      	lsls	r3, r3, #9
    de26:	9308      	str	r3, [sp, #32]
	config_uart_IO.mux_setting = USART_RX_3_TX_0_XCK_1; //SERCOM1
    de28:	23c0      	movs	r3, #192	; 0xc0
    de2a:	039b      	lsls	r3, r3, #14
    de2c:	9303      	str	r3, [sp, #12]
	config_uart_IO.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0; //TX
    de2e:	4b12      	ldr	r3, [pc, #72]	; (de78 <UART_IO_init+0xa0>)
    de30:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_IO.pinmux_pad1 = PINMUX_UNUSED; //UNUSED
    de32:	2301      	movs	r3, #1
    de34:	425b      	negs	r3, r3
    de36:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_IO.pinmux_pad2 = PINMUX_UNUSED;
    de38:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_IO.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3; //RX
    de3a:	4b10      	ldr	r3, [pc, #64]	; (de7c <UART_IO_init+0xa4>)
    de3c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_IO,SERCOM5, &config_uart_IO) != STATUS_OK) {
    de3e:	4d10      	ldr	r5, [pc, #64]	; (de80 <UART_IO_init+0xa8>)
    de40:	4c10      	ldr	r4, [pc, #64]	; (de84 <UART_IO_init+0xac>)
    de42:	466a      	mov	r2, sp
    de44:	4910      	ldr	r1, [pc, #64]	; (de88 <UART_IO_init+0xb0>)
    de46:	0028      	movs	r0, r5
    de48:	47a0      	blx	r4
    de4a:	2800      	cmp	r0, #0
    de4c:	d1f9      	bne.n	de42 <UART_IO_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    de4e:	4d0c      	ldr	r5, [pc, #48]	; (de80 <UART_IO_init+0xa8>)
    de50:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    de52:	0020      	movs	r0, r4
    de54:	4b0d      	ldr	r3, [pc, #52]	; (de8c <UART_IO_init+0xb4>)
    de56:	4798      	blx	r3
    de58:	231f      	movs	r3, #31
    de5a:	4018      	ands	r0, r3
    de5c:	3b1e      	subs	r3, #30
    de5e:	4083      	lsls	r3, r0
    de60:	4a0b      	ldr	r2, [pc, #44]	; (de90 <UART_IO_init+0xb8>)
    de62:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    de64:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    de66:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    de68:	2b00      	cmp	r3, #0
    de6a:	d1fc      	bne.n	de66 <UART_IO_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    de6c:	6823      	ldr	r3, [r4, #0]
    de6e:	2202      	movs	r2, #2
    de70:	4313      	orrs	r3, r2
    de72:	6023      	str	r3, [r4, #0]
}
    de74:	b011      	add	sp, #68	; 0x44
    de76:	bd30      	pop	{r4, r5, pc}
    de78:	00220003 	.word	0x00220003
    de7c:	00370003 	.word	0x00370003
    de80:	20001f68 	.word	0x20001f68
    de84:	00005cb5 	.word	0x00005cb5
    de88:	43000400 	.word	0x43000400
    de8c:	000057e5 	.word	0x000057e5
    de90:	e000e100 	.word	0xe000e100

0000de94 <UART_init>:
{
    de94:	b510      	push	{r4, lr}
	UART_LoRa_init();
    de96:	4b02      	ldr	r3, [pc, #8]	; (dea0 <UART_init+0xc>)
    de98:	4798      	blx	r3
	UART_IO_init();
    de9a:	4b02      	ldr	r3, [pc, #8]	; (dea4 <UART_init+0x10>)
    de9c:	4798      	blx	r3
}
    de9e:	bd10      	pop	{r4, pc}
    dea0:	0000dd1d 	.word	0x0000dd1d
    dea4:	0000ddd9 	.word	0x0000ddd9

0000dea8 <UART_LoRa_cb_init>:
{
    dea8:	b510      	push	{r4, lr}
	usart_register_callback(&UART_LoRa,UART_LoRa_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    deaa:	4c06      	ldr	r4, [pc, #24]	; (dec4 <UART_LoRa_cb_init+0x1c>)
    deac:	2201      	movs	r2, #1
    deae:	4906      	ldr	r1, [pc, #24]	; (dec8 <UART_LoRa_cb_init+0x20>)
    deb0:	0020      	movs	r0, r4
    deb2:	4b06      	ldr	r3, [pc, #24]	; (decc <UART_LoRa_cb_init+0x24>)
    deb4:	4798      	blx	r3
>>>>>>> Stashed changes
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
<<<<<<< Updated upstream
    df62:	2231      	movs	r2, #49	; 0x31
    df64:	5ca3      	ldrb	r3, [r4, r2]
    df66:	2102      	movs	r1, #2
    df68:	430b      	orrs	r3, r1
    df6a:	54a3      	strb	r3, [r4, r2]
}
    df6c:	bd10      	pop	{r4, pc}
    df6e:	46c0      	nop			; (mov r8, r8)
    df70:	20001fa0 	.word	0x20001fa0
    df74:	0000dd9d 	.word	0x0000dd9d
    df78:	00006265 	.word	0x00006265

0000df7c <UART_IO_cb_init>:
{
    df7c:	b510      	push	{r4, lr}
	usart_register_callback(&UART_IO,UART_IO_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    df7e:	4c06      	ldr	r4, [pc, #24]	; (df98 <UART_IO_cb_init+0x1c>)
    df80:	2201      	movs	r2, #1
    df82:	4906      	ldr	r1, [pc, #24]	; (df9c <UART_IO_cb_init+0x20>)
    df84:	0020      	movs	r0, r4
    df86:	4b06      	ldr	r3, [pc, #24]	; (dfa0 <UART_IO_cb_init+0x24>)
    df88:	4798      	blx	r3
    df8a:	2231      	movs	r2, #49	; 0x31
    df8c:	5ca3      	ldrb	r3, [r4, r2]
    df8e:	2102      	movs	r1, #2
    df90:	430b      	orrs	r3, r1
    df92:	54a3      	strb	r3, [r4, r2]
}
    df94:	bd10      	pop	{r4, pc}
    df96:	46c0      	nop			; (mov r8, r8)
    df98:	20001f68 	.word	0x20001f68
    df9c:	0000dda1 	.word	0x0000dda1
    dfa0:	00006265 	.word	0x00006265

0000dfa4 <UART_cb_init>:
{
    dfa4:	b510      	push	{r4, lr}
	UART_LoRa_cb_init();
    dfa6:	4b02      	ldr	r3, [pc, #8]	; (dfb0 <UART_cb_init+0xc>)
    dfa8:	4798      	blx	r3
	UART_IO_cb_init();
    dfaa:	4b02      	ldr	r3, [pc, #8]	; (dfb4 <UART_cb_init+0x10>)
    dfac:	4798      	blx	r3
}
    dfae:	bd10      	pop	{r4, pc}
    dfb0:	0000df55 	.word	0x0000df55
    dfb4:	0000df7d 	.word	0x0000df7d

0000dfb8 <UART_SAM_To_IO>:
=======
    deb6:	2231      	movs	r2, #49	; 0x31
    deb8:	5ca3      	ldrb	r3, [r4, r2]
    deba:	2102      	movs	r1, #2
    debc:	430b      	orrs	r3, r1
    debe:	54a3      	strb	r3, [r4, r2]
}
    dec0:	bd10      	pop	{r4, pc}
    dec2:	46c0      	nop			; (mov r8, r8)
    dec4:	20001fa0 	.word	0x20001fa0
    dec8:	0000dd01 	.word	0x0000dd01
    decc:	00006265 	.word	0x00006265

0000ded0 <UART_IO_cb_init>:
{
    ded0:	b510      	push	{r4, lr}
	usart_register_callback(&UART_IO,UART_IO_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    ded2:	4c06      	ldr	r4, [pc, #24]	; (deec <UART_IO_cb_init+0x1c>)
    ded4:	2201      	movs	r2, #1
    ded6:	4906      	ldr	r1, [pc, #24]	; (def0 <UART_IO_cb_init+0x20>)
    ded8:	0020      	movs	r0, r4
    deda:	4b06      	ldr	r3, [pc, #24]	; (def4 <UART_IO_cb_init+0x24>)
    dedc:	4798      	blx	r3
    dede:	2231      	movs	r2, #49	; 0x31
    dee0:	5ca3      	ldrb	r3, [r4, r2]
    dee2:	2102      	movs	r1, #2
    dee4:	430b      	orrs	r3, r1
    dee6:	54a3      	strb	r3, [r4, r2]
}
    dee8:	bd10      	pop	{r4, pc}
    deea:	46c0      	nop			; (mov r8, r8)
    deec:	20001f68 	.word	0x20001f68
    def0:	0000dd05 	.word	0x0000dd05
    def4:	00006265 	.word	0x00006265

0000def8 <UART_cb_init>:
{
    def8:	b510      	push	{r4, lr}
	UART_LoRa_cb_init();
    defa:	4b02      	ldr	r3, [pc, #8]	; (df04 <UART_cb_init+0xc>)
    defc:	4798      	blx	r3
	UART_IO_cb_init();
    defe:	4b02      	ldr	r3, [pc, #8]	; (df08 <UART_cb_init+0x10>)
    df00:	4798      	blx	r3
}
    df02:	bd10      	pop	{r4, pc}
    df04:	0000dea9 	.word	0x0000dea9
    df08:	0000ded1 	.word	0x0000ded1

0000df0c <UART_SAM_To_IO>:
>>>>>>> Stashed changes
{
	usart_write_buffer_wait(&UART_LoRa, data, 1);
}

void UART_SAM_To_IO(uint8_t* data)
{
<<<<<<< Updated upstream
    dfb8:	b510      	push	{r4, lr}
    dfba:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_IO, data, 1);
    dfbc:	2201      	movs	r2, #1
    dfbe:	4802      	ldr	r0, [pc, #8]	; (dfc8 <UART_SAM_To_IO+0x10>)
    dfc0:	4b02      	ldr	r3, [pc, #8]	; (dfcc <UART_SAM_To_IO+0x14>)
    dfc2:	4798      	blx	r3
    dfc4:	bd10      	pop	{r4, pc}
    dfc6:	46c0      	nop			; (mov r8, r8)
    dfc8:	20001f68 	.word	0x20001f68
    dfcc:	000060bd 	.word	0x000060bd

<<<<<<< Updated upstream
0000dfc0 <push_back>:
=======
    df0c:	b510      	push	{r4, lr}
    df0e:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_IO, data, 1);
    df10:	2201      	movs	r2, #1
    df12:	4802      	ldr	r0, [pc, #8]	; (df1c <UART_SAM_To_IO+0x10>)
    df14:	4b02      	ldr	r3, [pc, #8]	; (df20 <UART_SAM_To_IO+0x14>)
    df16:	4798      	blx	r3
    df18:	bd10      	pop	{r4, pc}
    df1a:	46c0      	nop			; (mov r8, r8)
    df1c:	20001f68 	.word	0x20001f68
    df20:	000060bd 	.word	0x000060bd

0000df24 <push_back>:
>>>>>>> Stashed changes
	else
	return 0;
}


void push_back(struct queStruct* s,uint8_t data) {
    df24:	b570      	push	{r4, r5, r6, lr}
    df26:	0004      	movs	r4, r0
    df28:	000d      	movs	r5, r1
	if ((s.rear + 1) % MAX_QUEUE_SIZE == s.front)
    df2a:	7900      	ldrb	r0, [r0, #4]
    df2c:	3001      	adds	r0, #1
    df2e:	2103      	movs	r1, #3
    df30:	4b09      	ldr	r3, [pc, #36]	; (df58 <push_back+0x34>)
    df32:	4798      	blx	r3
    df34:	78e3      	ldrb	r3, [r4, #3]
	if (isFull(*s)) {
    df36:	4299      	cmp	r1, r3
    df38:	d00c      	beq.n	df54 <push_back+0x30>
		return;
		} else if (isEmpty(*s)) {
		s->front = 0;
		s->rear = 0;
		} else {
		s->rear = (s->rear + 1) % MAX_QUEUE_SIZE;
<<<<<<< Updated upstream
    dfd6:	7920      	ldrb	r0, [r4, #4]
=======
0000dfd0 <push_back>:
    dfd0:	b570      	push	{r4, r5, r6, lr}
    dfd2:	0004      	movs	r4, r0
    dfd4:	000d      	movs	r5, r1
    dfd6:	7900      	ldrb	r0, [r0, #4]
>>>>>>> Stashed changes
    dfd8:	3001      	adds	r0, #1
    dfda:	2103      	movs	r1, #3
    dfdc:	4b09      	ldr	r3, [pc, #36]	; (e004 <push_back+0x34>)
    dfde:	4798      	blx	r3
<<<<<<< Updated upstream
    dfe0:	7121      	strb	r1, [r4, #4]
=======
    df3a:	7920      	ldrb	r0, [r4, #4]
    df3c:	3001      	adds	r0, #1
    df3e:	2103      	movs	r1, #3
    df40:	4b05      	ldr	r3, [pc, #20]	; (df58 <push_back+0x34>)
    df42:	4798      	blx	r3
    df44:	7121      	strb	r1, [r4, #4]
>>>>>>> Stashed changes
	}
	s->queue[s->rear] = data;
    df46:	23ff      	movs	r3, #255	; 0xff
    df48:	4019      	ands	r1, r3
    df4a:	5465      	strb	r5, [r4, r1]
	printf("Added %d\n", data);
    df4c:	0029      	movs	r1, r5
    df4e:	4803      	ldr	r0, [pc, #12]	; (df5c <push_back+0x38>)
    df50:	4b03      	ldr	r3, [pc, #12]	; (df60 <push_back+0x3c>)
    df52:	4798      	blx	r3
}
    df54:	bd70      	pop	{r4, r5, r6, pc}
    df56:	46c0      	nop			; (mov r8, r8)
    df58:	00013809 	.word	0x00013809
    df5c:	00018b10 	.word	0x00018b10
    df60:	00016d45 	.word	0x00016d45

0000df64 <pop_front>:


uint8_t pop_front(struct queStruct* s) {
    df64:	b570      	push	{r4, r5, r6, lr}
    df66:	0004      	movs	r4, r0
	uint8_t data;
	if (isEmpty(*s)) {
		//printf("Queue is empty.\n");
		return -1;
		} else if (s->front == s->rear) {
    df68:	78c0      	ldrb	r0, [r0, #3]
    df6a:	7923      	ldrb	r3, [r4, #4]
    df6c:	4283      	cmp	r3, r0
    df6e:	d007      	beq.n	df80 <pop_front+0x1c>
		data = s->queue[s->front];
		s->front = -1;
		s->rear = -1;
		} else {
		data = s->queue[s->front];
    df70:	5c25      	ldrb	r5, [r4, r0]
		s->front = (s->front + 1) % MAX_QUEUE_SIZE;
    df72:	3001      	adds	r0, #1
    df74:	2103      	movs	r1, #3
    df76:	4b05      	ldr	r3, [pc, #20]	; (df8c <pop_front+0x28>)
    df78:	4798      	blx	r3
    df7a:	70e1      	strb	r1, [r4, #3]
	}
	return data;
}
    df7c:	0028      	movs	r0, r5
    df7e:	bd70      	pop	{r4, r5, r6, pc}
		data = s->queue[s->front];
    df80:	5c25      	ldrb	r5, [r4, r0]
		s->front = -1;
    df82:	23ff      	movs	r3, #255	; 0xff
    df84:	70e3      	strb	r3, [r4, #3]
		s->rear = -1;
<<<<<<< Updated upstream
    e022:	7123      	strb	r3, [r4, #4]
    e024:	e7f8      	b.n	e018 <pop_front+0x18>
    e026:	46c0      	nop			; (mov r8, r8)
    e028:	000138a5 	.word	0x000138a5
=======
    dfe0:	78e3      	ldrb	r3, [r4, #3]
    dfe2:	4299      	cmp	r1, r3
    dfe4:	d00c      	beq.n	e000 <push_back+0x30>
    dfe6:	7920      	ldrb	r0, [r4, #4]
    dfe8:	3001      	adds	r0, #1
    dfea:	2103      	movs	r1, #3
    dfec:	4b05      	ldr	r3, [pc, #20]	; (e004 <push_back+0x34>)
    dfee:	4798      	blx	r3
    dff0:	7121      	strb	r1, [r4, #4]
    dff2:	23ff      	movs	r3, #255	; 0xff
    dff4:	4019      	ands	r1, r3
    dff6:	5465      	strb	r5, [r4, r1]
    dff8:	0029      	movs	r1, r5
    dffa:	4803      	ldr	r0, [pc, #12]	; (e008 <push_back+0x38>)
    dffc:	4b03      	ldr	r3, [pc, #12]	; (e00c <push_back+0x3c>)
    dffe:	4798      	blx	r3
    e000:	bd70      	pop	{r4, r5, r6, pc}
    e002:	46c0      	nop			; (mov r8, r8)
    e004:	000138b5 	.word	0x000138b5
    e008:	00018d10 	.word	0x00018d10
    e00c:	00016df1 	.word	0x00016df1

0000e010 <pop_front>:
    e010:	b570      	push	{r4, r5, r6, lr}
    e012:	0004      	movs	r4, r0
    e014:	78c0      	ldrb	r0, [r0, #3]
    e016:	7923      	ldrb	r3, [r4, #4]
    e018:	4283      	cmp	r3, r0
    e01a:	d007      	beq.n	e02c <pop_front+0x1c>
    e01c:	5c25      	ldrb	r5, [r4, r0]
    e01e:	3001      	adds	r0, #1
    e020:	2103      	movs	r1, #3
    e022:	4b05      	ldr	r3, [pc, #20]	; (e038 <pop_front+0x28>)
    e024:	4798      	blx	r3
    e026:	70e1      	strb	r1, [r4, #3]
    e028:	0028      	movs	r0, r5
    e02a:	bd70      	pop	{r4, r5, r6, pc}
    e02c:	5c25      	ldrb	r5, [r4, r0]
    e02e:	23ff      	movs	r3, #255	; 0xff
    e030:	70e3      	strb	r3, [r4, #3]
    e032:	7123      	strb	r3, [r4, #4]
    e034:	e7f8      	b.n	e028 <pop_front+0x18>
    e036:	46c0      	nop			; (mov r8, r8)
    e038:	000138b5 	.word	0x000138b5
>>>>>>> Stashed changes

0000e03c <LORAWAN_TxHandler>:
    e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e03e:	b087      	sub	sp, #28
    e040:	466b      	mov	r3, sp
    e042:	2501      	movs	r5, #1
    e044:	4c2f      	ldr	r4, [pc, #188]	; (e104 <LORAWAN_TxHandler+0xc8>)
    e046:	701d      	strb	r5, [r3, #0]
    e048:	0023      	movs	r3, r4
    e04a:	466a      	mov	r2, sp
    e04c:	33e9      	adds	r3, #233	; 0xe9
    e04e:	781b      	ldrb	r3, [r3, #0]
    e050:	4669      	mov	r1, sp
    e052:	7053      	strb	r3, [r2, #1]
    e054:	0023      	movs	r3, r4
    e056:	33e7      	adds	r3, #231	; 0xe7
    e058:	781b      	ldrb	r3, [r3, #0]
    e05a:	202e      	movs	r0, #46	; 0x2e
    e05c:	7093      	strb	r3, [r2, #2]
    e05e:	aa03      	add	r2, sp, #12
    e060:	4b29      	ldr	r3, [pc, #164]	; (e108 <LORAWAN_TxHandler+0xcc>)
    e062:	4798      	blx	r3
    e064:	2808      	cmp	r0, #8
    e066:	d004      	beq.n	e072 <LORAWAN_TxHandler+0x36>
    e068:	4b28      	ldr	r3, [pc, #160]	; (e10c <LORAWAN_TxHandler+0xd0>)
    e06a:	4798      	blx	r3
    e06c:	2000      	movs	r0, #0
    e06e:	b007      	add	sp, #28
    e070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e072:	0023      	movs	r3, r4
    e074:	33fd      	adds	r3, #253	; 0xfd
    e076:	781b      	ldrb	r3, [r3, #0]
    e078:	ae01      	add	r6, sp, #4
    e07a:	2b04      	cmp	r3, #4
    e07c:	d103      	bne.n	e086 <LORAWAN_TxHandler+0x4a>
    e07e:	0030      	movs	r0, r6
    e080:	4b23      	ldr	r3, [pc, #140]	; (e110 <LORAWAN_TxHandler+0xd4>)
    e082:	7035      	strb	r5, [r6, #0]
    e084:	4798      	blx	r3
    e086:	4b23      	ldr	r3, [pc, #140]	; (e114 <LORAWAN_TxHandler+0xd8>)
    e088:	9803      	ldr	r0, [sp, #12]
    e08a:	9904      	ldr	r1, [sp, #16]
    e08c:	9a05      	ldr	r2, [sp, #20]
    e08e:	4798      	blx	r3
    e090:	0023      	movs	r3, r4
    e092:	33fc      	adds	r3, #252	; 0xfc
    e094:	68dd      	ldr	r5, [r3, #12]
    e096:	4f20      	ldr	r7, [pc, #128]	; (e118 <LORAWAN_TxHandler+0xdc>)
    e098:	4b20      	ldr	r3, [pc, #128]	; (e11c <LORAWAN_TxHandler+0xe0>)
    e09a:	2d00      	cmp	r5, #0
    e09c:	d023      	beq.n	e0e6 <LORAWAN_TxHandler+0xaa>
    e09e:	2201      	movs	r2, #1
    e0a0:	54e2      	strb	r2, [r4, r3]
    e0a2:	7828      	ldrb	r0, [r5, #0]
    e0a4:	7a2b      	ldrb	r3, [r5, #8]
    e0a6:	1e42      	subs	r2, r0, #1
    e0a8:	4190      	sbcs	r0, r2
    e0aa:	7869      	ldrb	r1, [r5, #1]
    e0ac:	686a      	ldr	r2, [r5, #4]
    e0ae:	b2c0      	uxtb	r0, r0
    e0b0:	47b8      	blx	r7
    e0b2:	0023      	movs	r3, r4
    e0b4:	33ce      	adds	r3, #206	; 0xce
    e0b6:	881b      	ldrh	r3, [r3, #0]
    e0b8:	0030      	movs	r0, r6
    e0ba:	7033      	strb	r3, [r6, #0]
    e0bc:	4b18      	ldr	r3, [pc, #96]	; (e120 <LORAWAN_TxHandler+0xe4>)
    e0be:	6073      	str	r3, [r6, #4]
    e0c0:	4b18      	ldr	r3, [pc, #96]	; (e124 <LORAWAN_TxHandler+0xe8>)
    e0c2:	4798      	blx	r3
    e0c4:	2800      	cmp	r0, #0
    e0c6:	d114      	bne.n	e0f2 <LORAWAN_TxHandler+0xb6>
    e0c8:	0021      	movs	r1, r4
    e0ca:	220e      	movs	r2, #14
    e0cc:	3184      	adds	r1, #132	; 0x84
    e0ce:	780b      	ldrb	r3, [r1, #0]
    e0d0:	4393      	bics	r3, r2
    e0d2:	001a      	movs	r2, r3
    e0d4:	2302      	movs	r3, #2
    e0d6:	4313      	orrs	r3, r2
    e0d8:	700b      	strb	r3, [r1, #0]
    e0da:	2208      	movs	r2, #8
    e0dc:	3494      	adds	r4, #148	; 0x94
    e0de:	7823      	ldrb	r3, [r4, #0]
    e0e0:	4393      	bics	r3, r2
    e0e2:	7023      	strb	r3, [r4, #0]
    e0e4:	e7c2      	b.n	e06c <LORAWAN_TxHandler+0x30>
    e0e6:	54e5      	strb	r5, [r4, r3]
    e0e8:	002a      	movs	r2, r5
    e0ea:	002b      	movs	r3, r5
    e0ec:	0029      	movs	r1, r5
    e0ee:	0028      	movs	r0, r5
    e0f0:	e7de      	b.n	e0b0 <LORAWAN_TxHandler+0x74>
    e0f2:	0022      	movs	r2, r4
    e0f4:	2120      	movs	r1, #32
    e0f6:	3294      	adds	r2, #148	; 0x94
    e0f8:	7813      	ldrb	r3, [r2, #0]
    e0fa:	438b      	bics	r3, r1
    e0fc:	7013      	strb	r3, [r2, #0]
    e0fe:	4b03      	ldr	r3, [pc, #12]	; (e10c <LORAWAN_TxHandler+0xd0>)
    e100:	4798      	blx	r3
    e102:	e7ea      	b.n	e0da <LORAWAN_TxHandler+0x9e>
    e104:	20003170 	.word	0x20003170
    e108:	0000cbbd 	.word	0x0000cbbd
    e10c:	00010e81 	.word	0x00010e81
    e110:	0000f5b1 	.word	0x0000f5b1
    e114:	00010a19 	.word	0x00010a19
    e118:	000129a5 	.word	0x000129a5
    e11c:	0000022a 	.word	0x0000022a
    e120:	200033c8 	.word	0x200033c8
    e124:	0000ecd5 	.word	0x0000ecd5

0000e128 <LORAWAN_JoinReqHandler>:
    e128:	b530      	push	{r4, r5, lr}
    e12a:	b087      	sub	sp, #28
    e12c:	466a      	mov	r2, sp
    e12e:	2300      	movs	r3, #0
    e130:	4c25      	ldr	r4, [pc, #148]	; (e1c8 <LORAWAN_JoinReqHandler+0xa0>)
    e132:	7013      	strb	r3, [r2, #0]
    e134:	0023      	movs	r3, r4
    e136:	33e9      	adds	r3, #233	; 0xe9
    e138:	781b      	ldrb	r3, [r3, #0]
    e13a:	7053      	strb	r3, [r2, #1]
    e13c:	0023      	movs	r3, r4
    e13e:	33e7      	adds	r3, #231	; 0xe7
    e140:	781b      	ldrb	r3, [r3, #0]
    e142:	7093      	strb	r3, [r2, #2]
    e144:	0023      	movs	r3, r4
    e146:	33ff      	adds	r3, #255	; 0xff
    e148:	7f5b      	ldrb	r3, [r3, #29]
    e14a:	069b      	lsls	r3, r3, #26
    e14c:	d507      	bpl.n	e15e <LORAWAN_JoinReqHandler+0x36>
    e14e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e150:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    e152:	4313      	orrs	r3, r2
    e154:	d103      	bne.n	e15e <LORAWAN_JoinReqHandler+0x36>
    e156:	0023      	movs	r3, r4
    e158:	2201      	movs	r2, #1
    e15a:	3380      	adds	r3, #128	; 0x80
    e15c:	701a      	strb	r2, [r3, #0]
    e15e:	aa03      	add	r2, sp, #12
    e160:	4669      	mov	r1, sp
    e162:	202e      	movs	r0, #46	; 0x2e
    e164:	4b19      	ldr	r3, [pc, #100]	; (e1cc <LORAWAN_JoinReqHandler+0xa4>)
    e166:	4798      	blx	r3
    e168:	2808      	cmp	r0, #8
    e16a:	d004      	beq.n	e176 <LORAWAN_JoinReqHandler+0x4e>
    e16c:	4b18      	ldr	r3, [pc, #96]	; (e1d0 <LORAWAN_JoinReqHandler+0xa8>)
    e16e:	4798      	blx	r3
    e170:	2000      	movs	r0, #0
    e172:	b007      	add	sp, #28
    e174:	bd30      	pop	{r4, r5, pc}
    e176:	4b17      	ldr	r3, [pc, #92]	; (e1d4 <LORAWAN_JoinReqHandler+0xac>)
    e178:	9803      	ldr	r0, [sp, #12]
    e17a:	9904      	ldr	r1, [sp, #16]
    e17c:	9a05      	ldr	r2, [sp, #20]
    e17e:	4798      	blx	r3
    e180:	0023      	movs	r3, r4
    e182:	33fd      	adds	r3, #253	; 0xfd
    e184:	781b      	ldrb	r3, [r3, #0]
    e186:	ad01      	add	r5, sp, #4
    e188:	2b04      	cmp	r3, #4
    e18a:	d104      	bne.n	e196 <LORAWAN_JoinReqHandler+0x6e>
    e18c:	3b03      	subs	r3, #3
    e18e:	702b      	strb	r3, [r5, #0]
    e190:	0028      	movs	r0, r5
    e192:	4b11      	ldr	r3, [pc, #68]	; (e1d8 <LORAWAN_JoinReqHandler+0xb0>)
    e194:	4798      	blx	r3
    e196:	2200      	movs	r2, #0
    e198:	4b10      	ldr	r3, [pc, #64]	; (e1dc <LORAWAN_JoinReqHandler+0xb4>)
    e19a:	54e2      	strb	r2, [r4, r3]
    e19c:	4b10      	ldr	r3, [pc, #64]	; (e1e0 <LORAWAN_JoinReqHandler+0xb8>)
    e19e:	4798      	blx	r3
    e1a0:	4b10      	ldr	r3, [pc, #64]	; (e1e4 <LORAWAN_JoinReqHandler+0xbc>)
    e1a2:	7028      	strb	r0, [r5, #0]
    e1a4:	606b      	str	r3, [r5, #4]
    e1a6:	0028      	movs	r0, r5
    e1a8:	4b0f      	ldr	r3, [pc, #60]	; (e1e8 <LORAWAN_JoinReqHandler+0xc0>)
    e1aa:	4798      	blx	r3
    e1ac:	2800      	cmp	r0, #0
    e1ae:	d001      	beq.n	e1b4 <LORAWAN_JoinReqHandler+0x8c>
    e1b0:	201b      	movs	r0, #27
    e1b2:	e7db      	b.n	e16c <LORAWAN_JoinReqHandler+0x44>
    e1b4:	220e      	movs	r2, #14
    e1b6:	3484      	adds	r4, #132	; 0x84
    e1b8:	7823      	ldrb	r3, [r4, #0]
    e1ba:	4393      	bics	r3, r2
    e1bc:	001a      	movs	r2, r3
    e1be:	2302      	movs	r3, #2
    e1c0:	4313      	orrs	r3, r2
    e1c2:	7023      	strb	r3, [r4, #0]
    e1c4:	e7d4      	b.n	e170 <LORAWAN_JoinReqHandler+0x48>
    e1c6:	46c0      	nop			; (mov r8, r8)
    e1c8:	20003170 	.word	0x20003170
    e1cc:	0000cbbd 	.word	0x0000cbbd
    e1d0:	000104e1 	.word	0x000104e1
    e1d4:	00010a19 	.word	0x00010a19
    e1d8:	0000f5b1 	.word	0x0000f5b1
    e1dc:	0000022a 	.word	0x0000022a
    e1e0:	000108dd 	.word	0x000108dd
    e1e4:	200033b8 	.word	0x200033b8
    e1e8:	0000ecd5 	.word	0x0000ecd5

0000e1ec <LORAWAN_RxHandler>:
    e1ec:	b513      	push	{r0, r1, r4, lr}
    e1ee:	4b0c      	ldr	r3, [pc, #48]	; (e220 <LORAWAN_RxHandler+0x34>)
    e1f0:	781b      	ldrb	r3, [r3, #0]
    e1f2:	2b08      	cmp	r3, #8
    e1f4:	d011      	beq.n	e21a <LORAWAN_RxHandler+0x2e>
    e1f6:	2b10      	cmp	r3, #16
    e1f8:	d001      	beq.n	e1fe <LORAWAN_RxHandler+0x12>
    e1fa:	2b01      	cmp	r3, #1
    e1fc:	d10b      	bne.n	e216 <LORAWAN_RxHandler+0x2a>
    e1fe:	466b      	mov	r3, sp
    e200:	1c9c      	adds	r4, r3, #2
    e202:	0021      	movs	r1, r4
    e204:	a801      	add	r0, sp, #4
    e206:	4b07      	ldr	r3, [pc, #28]	; (e224 <LORAWAN_RxHandler+0x38>)
    e208:	4798      	blx	r3
    e20a:	9801      	ldr	r0, [sp, #4]
    e20c:	2800      	cmp	r0, #0
    e20e:	d002      	beq.n	e216 <LORAWAN_RxHandler+0x2a>
    e210:	7821      	ldrb	r1, [r4, #0]
    e212:	4b05      	ldr	r3, [pc, #20]	; (e228 <LORAWAN_RxHandler+0x3c>)
    e214:	4798      	blx	r3
    e216:	2000      	movs	r0, #0
    e218:	bd16      	pop	{r1, r2, r4, pc}
    e21a:	4b04      	ldr	r3, [pc, #16]	; (e22c <LORAWAN_RxHandler+0x40>)
    e21c:	4798      	blx	r3
    e21e:	e7fa      	b.n	e216 <LORAWAN_RxHandler+0x2a>
    e220:	2000224f 	.word	0x2000224f
    e224:	0000eea1 	.word	0x0000eea1
    e228:	00011901 	.word	0x00011901
    e22c:	00011215 	.word	0x00011215

0000e230 <LORAWAN_PostTask>:
    e230:	b510      	push	{r4, lr}
    e232:	4b08      	ldr	r3, [pc, #32]	; (e254 <LORAWAN_PostTask+0x24>)
    e234:	0004      	movs	r4, r0
    e236:	4798      	blx	r3
    e238:	2201      	movs	r2, #1
    e23a:	40a2      	lsls	r2, r4
    e23c:	4906      	ldr	r1, [pc, #24]	; (e258 <LORAWAN_PostTask+0x28>)
    e23e:	780b      	ldrb	r3, [r1, #0]
    e240:	4313      	orrs	r3, r2
    e242:	b2db      	uxtb	r3, r3
    e244:	700b      	strb	r3, [r1, #0]
    e246:	4b05      	ldr	r3, [pc, #20]	; (e25c <LORAWAN_PostTask+0x2c>)
    e248:	4798      	blx	r3
    e24a:	2004      	movs	r0, #4
    e24c:	4b04      	ldr	r3, [pc, #16]	; (e260 <LORAWAN_PostTask+0x30>)
    e24e:	4798      	blx	r3
    e250:	bd10      	pop	{r4, pc}
    e252:	46c0      	nop			; (mov r8, r8)
    e254:	0000c6d1 	.word	0x0000c6d1
    e258:	20001e9a 	.word	0x20001e9a
    e25c:	0000c6dd 	.word	0x0000c6dd
    e260:	0000d71d 	.word	0x0000d71d

0000e264 <LORAWAN_TaskHandler>:
    e264:	b570      	push	{r4, r5, r6, lr}
    e266:	2601      	movs	r6, #1
    e268:	4d0e      	ldr	r5, [pc, #56]	; (e2a4 <LORAWAN_TaskHandler+0x40>)
    e26a:	e015      	b.n	e298 <LORAWAN_TaskHandler+0x34>
    e26c:	2400      	movs	r4, #0
    e26e:	782b      	ldrb	r3, [r5, #0]
    e270:	4123      	asrs	r3, r4
    e272:	4233      	tst	r3, r6
    e274:	d00d      	beq.n	e292 <LORAWAN_TaskHandler+0x2e>
    e276:	4b0c      	ldr	r3, [pc, #48]	; (e2a8 <LORAWAN_TaskHandler+0x44>)
    e278:	4798      	blx	r3
    e27a:	0032      	movs	r2, r6
    e27c:	40a2      	lsls	r2, r4
    e27e:	782b      	ldrb	r3, [r5, #0]
    e280:	00a4      	lsls	r4, r4, #2
    e282:	4393      	bics	r3, r2
    e284:	702b      	strb	r3, [r5, #0]
    e286:	4b09      	ldr	r3, [pc, #36]	; (e2ac <LORAWAN_TaskHandler+0x48>)
    e288:	4798      	blx	r3
    e28a:	4b09      	ldr	r3, [pc, #36]	; (e2b0 <LORAWAN_TaskHandler+0x4c>)
    e28c:	58e3      	ldr	r3, [r4, r3]
    e28e:	4798      	blx	r3
    e290:	e7ea      	b.n	e268 <LORAWAN_TaskHandler+0x4>
    e292:	3401      	adds	r4, #1
    e294:	2c03      	cmp	r4, #3
    e296:	d1ea      	bne.n	e26e <LORAWAN_TaskHandler+0xa>
    e298:	7828      	ldrb	r0, [r5, #0]
    e29a:	b2c0      	uxtb	r0, r0
    e29c:	2800      	cmp	r0, #0
    e29e:	d1e5      	bne.n	e26c <LORAWAN_TaskHandler+0x8>
    e2a0:	bd70      	pop	{r4, r5, r6, pc}
    e2a2:	46c0      	nop			; (mov r8, r8)
    e2a4:	20001e9a 	.word	0x20001e9a
    e2a8:	0000c6d1 	.word	0x0000c6d1
    e2ac:	0000c6dd 	.word	0x0000c6dd
    e2b0:	00018d1c 	.word	0x00018d1c

0000e2b4 <RADIO_GetAttr>:
    e2b4:	b510      	push	{r4, lr}
    e2b6:	000b      	movs	r3, r1
    e2b8:	281f      	cmp	r0, #31
    e2ba:	d900      	bls.n	e2be <RADIO_GetAttr+0xa>
    e2bc:	e069      	b.n	e392 <RADIO_GetAttr+0xde>
    e2be:	f005 f96b 	bl	13598 <__gnu_thumb1_case_uqi>
    e2c2:	1410      	.short	0x1410
    e2c4:	68201c19 	.word	0x68201c19
    e2c8:	312e2a27 	.word	0x312e2a27
    e2cc:	3d3a3734 	.word	0x3d3a3734
    e2d0:	46434054 	.word	0x46434054
    e2d4:	68245149 	.word	0x68245149
    e2d8:	68686859 	.word	0x68686859
    e2dc:	5c686817 	.word	0x5c686817
    e2e0:	6360      	.short	0x6360
    e2e2:	4a2d      	ldr	r2, [pc, #180]	; (e398 <RADIO_GetAttr+0xe4>)
    e2e4:	7e12      	ldrb	r2, [r2, #24]
    e2e6:	701a      	strb	r2, [r3, #0]
    e2e8:	e002      	b.n	e2f0 <RADIO_GetAttr+0x3c>
    e2ea:	4a2b      	ldr	r2, [pc, #172]	; (e398 <RADIO_GetAttr+0xe4>)
    e2ec:	6812      	ldr	r2, [r2, #0]
    e2ee:	601a      	str	r2, [r3, #0]
    e2f0:	2000      	movs	r0, #0
    e2f2:	bd10      	pop	{r4, pc}
    e2f4:	4a28      	ldr	r2, [pc, #160]	; (e398 <RADIO_GetAttr+0xe4>)
    e2f6:	6852      	ldr	r2, [r2, #4]
    e2f8:	e7f9      	b.n	e2ee <RADIO_GetAttr+0x3a>
    e2fa:	4a27      	ldr	r2, [pc, #156]	; (e398 <RADIO_GetAttr+0xe4>)
    e2fc:	8a92      	ldrh	r2, [r2, #20]
    e2fe:	801a      	strh	r2, [r3, #0]
    e300:	e7f6      	b.n	e2f0 <RADIO_GetAttr+0x3c>
    e302:	4a25      	ldr	r2, [pc, #148]	; (e398 <RADIO_GetAttr+0xe4>)
    e304:	3203      	adds	r2, #3
    e306:	7fd2      	ldrb	r2, [r2, #31]
    e308:	e7ed      	b.n	e2e6 <RADIO_GetAttr+0x32>
    e30a:	4a23      	ldr	r2, [pc, #140]	; (e398 <RADIO_GetAttr+0xe4>)
    e30c:	3204      	adds	r2, #4
    e30e:	e7fa      	b.n	e306 <RADIO_GetAttr+0x52>
    e310:	4a21      	ldr	r2, [pc, #132]	; (e398 <RADIO_GetAttr+0xe4>)
    e312:	3206      	adds	r2, #6
    e314:	e7f7      	b.n	e306 <RADIO_GetAttr+0x52>
    e316:	4a20      	ldr	r2, [pc, #128]	; (e398 <RADIO_GetAttr+0xe4>)
    e318:	3236      	adds	r2, #54	; 0x36
    e31a:	7812      	ldrb	r2, [r2, #0]
    e31c:	e7e3      	b.n	e2e6 <RADIO_GetAttr+0x32>
    e31e:	4a1e      	ldr	r2, [pc, #120]	; (e398 <RADIO_GetAttr+0xe4>)
    e320:	3205      	adds	r2, #5
    e322:	e7f0      	b.n	e306 <RADIO_GetAttr+0x52>
    e324:	4a1c      	ldr	r2, [pc, #112]	; (e398 <RADIO_GetAttr+0xe4>)
    e326:	3234      	adds	r2, #52	; 0x34
    e328:	e7f7      	b.n	e31a <RADIO_GetAttr+0x66>
    e32a:	4a1b      	ldr	r2, [pc, #108]	; (e398 <RADIO_GetAttr+0xe4>)
    e32c:	8ad2      	ldrh	r2, [r2, #22]
    e32e:	e7e6      	b.n	e2fe <RADIO_GetAttr+0x4a>
    e330:	4a19      	ldr	r2, [pc, #100]	; (e398 <RADIO_GetAttr+0xe4>)
    e332:	3233      	adds	r2, #51	; 0x33
    e334:	e7f1      	b.n	e31a <RADIO_GetAttr+0x66>
    e336:	4a18      	ldr	r2, [pc, #96]	; (e398 <RADIO_GetAttr+0xe4>)
    e338:	68d2      	ldr	r2, [r2, #12]
    e33a:	e7d8      	b.n	e2ee <RADIO_GetAttr+0x3a>
    e33c:	4a16      	ldr	r2, [pc, #88]	; (e398 <RADIO_GetAttr+0xe4>)
    e33e:	6892      	ldr	r2, [r2, #8]
    e340:	e7d5      	b.n	e2ee <RADIO_GetAttr+0x3a>
    e342:	4a15      	ldr	r2, [pc, #84]	; (e398 <RADIO_GetAttr+0xe4>)
    e344:	3237      	adds	r2, #55	; 0x37
    e346:	e7e8      	b.n	e31a <RADIO_GetAttr+0x66>
    e348:	4a13      	ldr	r2, [pc, #76]	; (e398 <RADIO_GetAttr+0xe4>)
    e34a:	3238      	adds	r2, #56	; 0x38
    e34c:	e7e5      	b.n	e31a <RADIO_GetAttr+0x66>
    e34e:	4a12      	ldr	r2, [pc, #72]	; (e398 <RADIO_GetAttr+0xe4>)
    e350:	3239      	adds	r2, #57	; 0x39
    e352:	e7e2      	b.n	e31a <RADIO_GetAttr+0x66>
    e354:	4a10      	ldr	r2, [pc, #64]	; (e398 <RADIO_GetAttr+0xe4>)
    e356:	4911      	ldr	r1, [pc, #68]	; (e39c <RADIO_GetAttr+0xe8>)
    e358:	3202      	adds	r2, #2
    e35a:	7fd2      	ldrb	r2, [r2, #31]
    e35c:	0018      	movs	r0, r3
    e35e:	4b10      	ldr	r3, [pc, #64]	; (e3a0 <RADIO_GetAttr+0xec>)
    e360:	4798      	blx	r3
    e362:	e7c5      	b.n	e2f0 <RADIO_GetAttr+0x3c>
    e364:	4a0c      	ldr	r2, [pc, #48]	; (e398 <RADIO_GetAttr+0xe4>)
    e366:	3202      	adds	r2, #2
    e368:	e7cd      	b.n	e306 <RADIO_GetAttr+0x52>
    e36a:	4a0b      	ldr	r2, [pc, #44]	; (e398 <RADIO_GetAttr+0xe4>)
    e36c:	3232      	adds	r2, #50	; 0x32
    e36e:	7812      	ldrb	r2, [r2, #0]
    e370:	b252      	sxtb	r2, r2
    e372:	e7b8      	b.n	e2e6 <RADIO_GetAttr+0x32>
    e374:	4a08      	ldr	r2, [pc, #32]	; (e398 <RADIO_GetAttr+0xe4>)
    e376:	3235      	adds	r2, #53	; 0x35
    e378:	e7cf      	b.n	e31a <RADIO_GetAttr+0x66>
    e37a:	4907      	ldr	r1, [pc, #28]	; (e398 <RADIO_GetAttr+0xe4>)
    e37c:	2206      	movs	r2, #6
    e37e:	313c      	adds	r1, #60	; 0x3c
    e380:	e7ec      	b.n	e35c <RADIO_GetAttr+0xa8>
    e382:	4a05      	ldr	r2, [pc, #20]	; (e398 <RADIO_GetAttr+0xe4>)
    e384:	3254      	adds	r2, #84	; 0x54
    e386:	e7c8      	b.n	e31a <RADIO_GetAttr+0x66>
    e388:	4a03      	ldr	r2, [pc, #12]	; (e398 <RADIO_GetAttr+0xe4>)
    e38a:	3256      	adds	r2, #86	; 0x56
    e38c:	2100      	movs	r1, #0
    e38e:	5e52      	ldrsh	r2, [r2, r1]
    e390:	e7b5      	b.n	e2fe <RADIO_GetAttr+0x4a>
    e392:	2005      	movs	r0, #5
    e394:	e7ad      	b.n	e2f2 <RADIO_GetAttr+0x3e>
    e396:	46c0      	nop			; (mov r8, r8)
    e398:	20002d78 	.word	0x20002d78
    e39c:	20002d91 	.word	0x20002d91
    e3a0:	00016837 	.word	0x00016837

0000e3a4 <RADIO_SetAttr>:
    e3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e3a6:	4b71      	ldr	r3, [pc, #452]	; (e56c <RADIO_SetAttr+0x1c8>)
    e3a8:	0004      	movs	r4, r0
    e3aa:	000d      	movs	r5, r1
    e3ac:	4798      	blx	r3
    e3ae:	2304      	movs	r3, #4
    e3b0:	2801      	cmp	r0, #1
    e3b2:	d11a      	bne.n	e3ea <RADIO_SetAttr+0x46>
    e3b4:	2c1d      	cmp	r4, #29
    e3b6:	d900      	bls.n	e3ba <RADIO_SetAttr+0x16>
    e3b8:	e0d5      	b.n	e566 <RADIO_SetAttr+0x1c2>
    e3ba:	0020      	movs	r0, r4
    e3bc:	f005 f8ec 	bl	13598 <__gnu_thumb1_case_uqi>
    e3c0:	605c4844 	.word	0x605c4844
    e3c4:	7770d364 	.word	0x7770d364
    e3c8:	908c8480 	.word	0x908c8480
    e3cc:	a0d39c99 	.word	0xa0d39c99
    e3d0:	c2bab1a8 	.word	0xc2bab1a8
    e3d4:	d3cad369 	.word	0xd3cad369
    e3d8:	d30fd3d3 	.word	0xd30fd3d3
    e3dc:	17d3      	.short	0x17d3
    e3de:	2303      	movs	r3, #3
    e3e0:	2d00      	cmp	r5, #0
    e3e2:	d002      	beq.n	e3ea <RADIO_SetAttr+0x46>
    e3e4:	4b62      	ldr	r3, [pc, #392]	; (e570 <RADIO_SetAttr+0x1cc>)
    e3e6:	611d      	str	r5, [r3, #16]
    e3e8:	2300      	movs	r3, #0
    e3ea:	0018      	movs	r0, r3
    e3ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e3ee:	796c      	ldrb	r4, [r5, #5]
    e3f0:	2c00      	cmp	r4, #0
    e3f2:	d109      	bne.n	e408 <RADIO_SetAttr+0x64>
    e3f4:	4b5e      	ldr	r3, [pc, #376]	; (e570 <RADIO_SetAttr+0x1cc>)
    e3f6:	001a      	movs	r2, r3
    e3f8:	649c      	str	r4, [r3, #72]	; 0x48
    e3fa:	879c      	strh	r4, [r3, #60]	; 0x3c
    e3fc:	87dc      	strh	r4, [r3, #62]	; 0x3e
    e3fe:	3240      	adds	r2, #64	; 0x40
    e400:	3341      	adds	r3, #65	; 0x41
    e402:	7014      	strb	r4, [r2, #0]
    e404:	701c      	strb	r4, [r3, #0]
    e406:	e7ef      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e408:	882f      	ldrh	r7, [r5, #0]
    e40a:	2303      	movs	r3, #3
    e40c:	2f00      	cmp	r7, #0
    e40e:	d0ec      	beq.n	e3ea <RADIO_SetAttr+0x46>
    e410:	792e      	ldrb	r6, [r5, #4]
    e412:	2e00      	cmp	r6, #0
    e414:	d0e9      	beq.n	e3ea <RADIO_SetAttr+0x46>
    e416:	20fa      	movs	r0, #250	; 0xfa
    e418:	2202      	movs	r2, #2
    e41a:	5eab      	ldrsh	r3, [r5, r2]
    e41c:	0080      	lsls	r0, r0, #2
    e41e:	0031      	movs	r1, r6
    e420:	9301      	str	r3, [sp, #4]
    e422:	4378      	muls	r0, r7
    e424:	4b53      	ldr	r3, [pc, #332]	; (e574 <RADIO_SetAttr+0x1d0>)
    e426:	4798      	blx	r3
    e428:	4b53      	ldr	r3, [pc, #332]	; (e578 <RADIO_SetAttr+0x1d4>)
    e42a:	4798      	blx	r3
    e42c:	4b53      	ldr	r3, [pc, #332]	; (e57c <RADIO_SetAttr+0x1d8>)
    e42e:	4798      	blx	r3
    e430:	466b      	mov	r3, sp
    e432:	4d4f      	ldr	r5, [pc, #316]	; (e570 <RADIO_SetAttr+0x1cc>)
    e434:	889b      	ldrh	r3, [r3, #4]
    e436:	64a8      	str	r0, [r5, #72]	; 0x48
    e438:	87eb      	strh	r3, [r5, #62]	; 0x3e
    e43a:	002b      	movs	r3, r5
    e43c:	87af      	strh	r7, [r5, #60]	; 0x3c
    e43e:	3340      	adds	r3, #64	; 0x40
    e440:	3541      	adds	r5, #65	; 0x41
    e442:	701e      	strb	r6, [r3, #0]
    e444:	702c      	strb	r4, [r5, #0]
    e446:	e7cf      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e448:	782a      	ldrb	r2, [r5, #0]
    e44a:	4b49      	ldr	r3, [pc, #292]	; (e570 <RADIO_SetAttr+0x1cc>)
    e44c:	761a      	strb	r2, [r3, #24]
    e44e:	e7cb      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e450:	4b4b      	ldr	r3, [pc, #300]	; (e580 <RADIO_SetAttr+0x1dc>)
    e452:	682a      	ldr	r2, [r5, #0]
    e454:	18d1      	adds	r1, r2, r3
    e456:	4b4b      	ldr	r3, [pc, #300]	; (e584 <RADIO_SetAttr+0x1e0>)
    e458:	4299      	cmp	r1, r3
    e45a:	d90a      	bls.n	e472 <RADIO_SetAttr+0xce>
    e45c:	4b4a      	ldr	r3, [pc, #296]	; (e588 <RADIO_SetAttr+0x1e4>)
    e45e:	494b      	ldr	r1, [pc, #300]	; (e58c <RADIO_SetAttr+0x1e8>)
    e460:	18d3      	adds	r3, r2, r3
    e462:	428b      	cmp	r3, r1
    e464:	d905      	bls.n	e472 <RADIO_SetAttr+0xce>
    e466:	494a      	ldr	r1, [pc, #296]	; (e590 <RADIO_SetAttr+0x1ec>)
    e468:	484a      	ldr	r0, [pc, #296]	; (e594 <RADIO_SetAttr+0x1f0>)
    e46a:	1851      	adds	r1, r2, r1
    e46c:	2305      	movs	r3, #5
    e46e:	4281      	cmp	r1, r0
    e470:	d8bb      	bhi.n	e3ea <RADIO_SetAttr+0x46>
    e472:	4b3f      	ldr	r3, [pc, #252]	; (e570 <RADIO_SetAttr+0x1cc>)
    e474:	601a      	str	r2, [r3, #0]
    e476:	e7b7      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e478:	682a      	ldr	r2, [r5, #0]
    e47a:	4b3d      	ldr	r3, [pc, #244]	; (e570 <RADIO_SetAttr+0x1cc>)
    e47c:	605a      	str	r2, [r3, #4]
    e47e:	e7b3      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e480:	882a      	ldrh	r2, [r5, #0]
    e482:	4b3b      	ldr	r3, [pc, #236]	; (e570 <RADIO_SetAttr+0x1cc>)
    e484:	829a      	strh	r2, [r3, #20]
    e486:	e7af      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e488:	4b39      	ldr	r3, [pc, #228]	; (e570 <RADIO_SetAttr+0x1cc>)
    e48a:	782a      	ldrb	r2, [r5, #0]
    e48c:	3303      	adds	r3, #3
    e48e:	77da      	strb	r2, [r3, #31]
    e490:	e7aa      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e492:	782a      	ldrb	r2, [r5, #0]
    e494:	2305      	movs	r3, #5
    e496:	2a01      	cmp	r2, #1
    e498:	d8a7      	bhi.n	e3ea <RADIO_SetAttr+0x46>
    e49a:	4b35      	ldr	r3, [pc, #212]	; (e570 <RADIO_SetAttr+0x1cc>)
    e49c:	3304      	adds	r3, #4
    e49e:	e7f6      	b.n	e48e <RADIO_SetAttr+0xea>
    e4a0:	782a      	ldrb	r2, [r5, #0]
    e4a2:	2305      	movs	r3, #5
    e4a4:	2a01      	cmp	r2, #1
    e4a6:	d8a0      	bhi.n	e3ea <RADIO_SetAttr+0x46>
    e4a8:	4b31      	ldr	r3, [pc, #196]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4aa:	3306      	adds	r3, #6
    e4ac:	e7ef      	b.n	e48e <RADIO_SetAttr+0xea>
    e4ae:	782a      	ldrb	r2, [r5, #0]
    e4b0:	2305      	movs	r3, #5
    e4b2:	1fd1      	subs	r1, r2, #7
    e4b4:	2902      	cmp	r1, #2
    e4b6:	d898      	bhi.n	e3ea <RADIO_SetAttr+0x46>
    e4b8:	4b2d      	ldr	r3, [pc, #180]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4ba:	3336      	adds	r3, #54	; 0x36
    e4bc:	701a      	strb	r2, [r3, #0]
    e4be:	e793      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e4c0:	4b2b      	ldr	r3, [pc, #172]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4c2:	782a      	ldrb	r2, [r5, #0]
    e4c4:	3305      	adds	r3, #5
    e4c6:	e7e2      	b.n	e48e <RADIO_SetAttr+0xea>
    e4c8:	782a      	ldrb	r2, [r5, #0]
    e4ca:	2305      	movs	r3, #5
    e4cc:	2a01      	cmp	r2, #1
    e4ce:	d900      	bls.n	e4d2 <RADIO_SetAttr+0x12e>
    e4d0:	e78b      	b.n	e3ea <RADIO_SetAttr+0x46>
    e4d2:	4b27      	ldr	r3, [pc, #156]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4d4:	3334      	adds	r3, #52	; 0x34
    e4d6:	e7f1      	b.n	e4bc <RADIO_SetAttr+0x118>
    e4d8:	882a      	ldrh	r2, [r5, #0]
    e4da:	4b25      	ldr	r3, [pc, #148]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4dc:	82da      	strh	r2, [r3, #22]
    e4de:	e783      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e4e0:	782a      	ldrb	r2, [r5, #0]
    e4e2:	2305      	movs	r3, #5
    e4e4:	1e51      	subs	r1, r2, #1
    e4e6:	2903      	cmp	r1, #3
    e4e8:	d900      	bls.n	e4ec <RADIO_SetAttr+0x148>
    e4ea:	e77e      	b.n	e3ea <RADIO_SetAttr+0x46>
    e4ec:	4b20      	ldr	r3, [pc, #128]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4ee:	3333      	adds	r3, #51	; 0x33
    e4f0:	e7e4      	b.n	e4bc <RADIO_SetAttr+0x118>
    e4f2:	4b1f      	ldr	r3, [pc, #124]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4f4:	682a      	ldr	r2, [r5, #0]
    e4f6:	60da      	str	r2, [r3, #12]
    e4f8:	682a      	ldr	r2, [r5, #0]
    e4fa:	4b1d      	ldr	r3, [pc, #116]	; (e570 <RADIO_SetAttr+0x1cc>)
    e4fc:	609a      	str	r2, [r3, #8]
    e4fe:	e773      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e500:	782a      	ldrb	r2, [r5, #0]
    e502:	2305      	movs	r3, #5
    e504:	2a03      	cmp	r2, #3
    e506:	d900      	bls.n	e50a <RADIO_SetAttr+0x166>
    e508:	e76f      	b.n	e3ea <RADIO_SetAttr+0x46>
    e50a:	4b19      	ldr	r3, [pc, #100]	; (e570 <RADIO_SetAttr+0x1cc>)
    e50c:	3337      	adds	r3, #55	; 0x37
    e50e:	e7d5      	b.n	e4bc <RADIO_SetAttr+0x118>
    e510:	782a      	ldrb	r2, [r5, #0]
    e512:	2305      	movs	r3, #5
    e514:	1e51      	subs	r1, r2, #1
    e516:	2916      	cmp	r1, #22
    e518:	d900      	bls.n	e51c <RADIO_SetAttr+0x178>
    e51a:	e766      	b.n	e3ea <RADIO_SetAttr+0x46>
    e51c:	4b14      	ldr	r3, [pc, #80]	; (e570 <RADIO_SetAttr+0x1cc>)
    e51e:	3338      	adds	r3, #56	; 0x38
    e520:	e7cc      	b.n	e4bc <RADIO_SetAttr+0x118>
    e522:	782a      	ldrb	r2, [r5, #0]
    e524:	2305      	movs	r3, #5
    e526:	1e51      	subs	r1, r2, #1
    e528:	2916      	cmp	r1, #22
    e52a:	d900      	bls.n	e52e <RADIO_SetAttr+0x18a>
    e52c:	e75d      	b.n	e3ea <RADIO_SetAttr+0x46>
    e52e:	4b10      	ldr	r3, [pc, #64]	; (e570 <RADIO_SetAttr+0x1cc>)
    e530:	3339      	adds	r3, #57	; 0x39
    e532:	e7c3      	b.n	e4bc <RADIO_SetAttr+0x118>
    e534:	4b0e      	ldr	r3, [pc, #56]	; (e570 <RADIO_SetAttr+0x1cc>)
    e536:	0029      	movs	r1, r5
    e538:	3302      	adds	r3, #2
    e53a:	7fda      	ldrb	r2, [r3, #31]
    e53c:	4816      	ldr	r0, [pc, #88]	; (e598 <RADIO_SetAttr+0x1f4>)
    e53e:	4b17      	ldr	r3, [pc, #92]	; (e59c <RADIO_SetAttr+0x1f8>)
    e540:	4798      	blx	r3
    e542:	e751      	b.n	e3e8 <RADIO_SetAttr+0x44>
    e544:	782b      	ldrb	r3, [r5, #0]
    e546:	1c1a      	adds	r2, r3, #0
    e548:	2b08      	cmp	r3, #8
    e54a:	d900      	bls.n	e54e <RADIO_SetAttr+0x1aa>
    e54c:	2208      	movs	r2, #8
    e54e:	4b08      	ldr	r3, [pc, #32]	; (e570 <RADIO_SetAttr+0x1cc>)
    e550:	3302      	adds	r3, #2
    e552:	e79c      	b.n	e48e <RADIO_SetAttr+0xea>
    e554:	2305      	movs	r3, #5
    e556:	782a      	ldrb	r2, [r5, #0]
    e558:	1fd1      	subs	r1, r2, #7
    e55a:	4299      	cmp	r1, r3
    e55c:	d900      	bls.n	e560 <RADIO_SetAttr+0x1bc>
    e55e:	e744      	b.n	e3ea <RADIO_SetAttr+0x46>
    e560:	4b03      	ldr	r3, [pc, #12]	; (e570 <RADIO_SetAttr+0x1cc>)
    e562:	3335      	adds	r3, #53	; 0x35
    e564:	e7aa      	b.n	e4bc <RADIO_SetAttr+0x118>
    e566:	2305      	movs	r3, #5
    e568:	e73f      	b.n	e3ea <RADIO_SetAttr+0x46>
    e56a:	46c0      	nop			; (mov r8, r8)
    e56c:	0000ecb9 	.word	0x0000ecb9
    e570:	20002d78 	.word	0x20002d78
    e574:	000136e9 	.word	0x000136e9
    e578:	0001492d 	.word	0x0001492d
    e57c:	00013a45 	.word	0x00013a45
    e580:	f7d58bc0 	.word	0xf7d58bc0
    e584:	0243d580 	.word	0x0243d580
    e588:	e78fe580 	.word	0xe78fe580
    e58c:	06dac2c0 	.word	0x06dac2c0
    e590:	cc9eec80 	.word	0xcc9eec80
    e594:	096ae380 	.word	0x096ae380
    e598:	20002d91 	.word	0x20002d91
    e59c:	00016837 	.word	0x00016837

0000e5a0 <RADIO_Init>:
    e5a0:	b510      	push	{r4, lr}
    e5a2:	4b0c      	ldr	r3, [pc, #48]	; (e5d4 <RADIO_Init+0x34>)
    e5a4:	4798      	blx	r3
    e5a6:	4b0c      	ldr	r3, [pc, #48]	; (e5d8 <RADIO_Init+0x38>)
    e5a8:	201f      	movs	r0, #31
    e5aa:	4798      	blx	r3
    e5ac:	4c0b      	ldr	r4, [pc, #44]	; (e5dc <RADIO_Init+0x3c>)
    e5ae:	490c      	ldr	r1, [pc, #48]	; (e5e0 <RADIO_Init+0x40>)
    e5b0:	2001      	movs	r0, #1
    e5b2:	47a0      	blx	r4
    e5b4:	490b      	ldr	r1, [pc, #44]	; (e5e4 <RADIO_Init+0x44>)
    e5b6:	2002      	movs	r0, #2
    e5b8:	47a0      	blx	r4
    e5ba:	490b      	ldr	r1, [pc, #44]	; (e5e8 <RADIO_Init+0x48>)
    e5bc:	2004      	movs	r0, #4
    e5be:	47a0      	blx	r4
    e5c0:	490a      	ldr	r1, [pc, #40]	; (e5ec <RADIO_Init+0x4c>)
    e5c2:	2008      	movs	r0, #8
    e5c4:	47a0      	blx	r4
    e5c6:	490a      	ldr	r1, [pc, #40]	; (e5f0 <RADIO_Init+0x50>)
    e5c8:	2010      	movs	r0, #16
    e5ca:	47a0      	blx	r4
    e5cc:	4909      	ldr	r1, [pc, #36]	; (e5f4 <RADIO_Init+0x54>)
    e5ce:	2020      	movs	r0, #32
    e5d0:	47a0      	blx	r4
    e5d2:	bd10      	pop	{r4, pc}
    e5d4:	0000f3bd 	.word	0x0000f3bd
    e5d8:	0000ecc5 	.word	0x0000ecc5
    e5dc:	0000c5ed 	.word	0x0000c5ed
    e5e0:	0000ea51 	.word	0x0000ea51
    e5e4:	0000eac9 	.word	0x0000eac9
    e5e8:	0000eb39 	.word	0x0000eb39
    e5ec:	0000eb89 	.word	0x0000eb89
    e5f0:	0000ebb1 	.word	0x0000ebb1
    e5f4:	0000ebd9 	.word	0x0000ebd9

0000e5f8 <Radio_WriteFrequency>:
    e5f8:	b570      	push	{r4, r5, r6, lr}
    e5fa:	490d      	ldr	r1, [pc, #52]	; (e630 <Radio_WriteFrequency+0x38>)
    e5fc:	4d0d      	ldr	r5, [pc, #52]	; (e634 <Radio_WriteFrequency+0x3c>)
    e5fe:	0006      	movs	r6, r0
    e600:	47a8      	blx	r5
    e602:	4b0d      	ldr	r3, [pc, #52]	; (e638 <Radio_WriteFrequency+0x40>)
    e604:	0004      	movs	r4, r0
    e606:	490a      	ldr	r1, [pc, #40]	; (e630 <Radio_WriteFrequency+0x38>)
    e608:	0030      	movs	r0, r6
    e60a:	4798      	blx	r3
    e60c:	0208      	lsls	r0, r1, #8
    e60e:	4908      	ldr	r1, [pc, #32]	; (e630 <Radio_WriteFrequency+0x38>)
    e610:	47a8      	blx	r5
    e612:	0224      	lsls	r4, r4, #8
    e614:	1904      	adds	r4, r0, r4
    e616:	0c21      	lsrs	r1, r4, #16
    e618:	4d08      	ldr	r5, [pc, #32]	; (e63c <Radio_WriteFrequency+0x44>)
    e61a:	b2c9      	uxtb	r1, r1
    e61c:	2006      	movs	r0, #6
    e61e:	47a8      	blx	r5
    e620:	0a21      	lsrs	r1, r4, #8
    e622:	b2c9      	uxtb	r1, r1
    e624:	2007      	movs	r0, #7
    e626:	47a8      	blx	r5
    e628:	b2e1      	uxtb	r1, r4
    e62a:	2008      	movs	r0, #8
    e62c:	47a8      	blx	r5
    e62e:	bd70      	pop	{r4, r5, r6, pc}
    e630:	00003d09 	.word	0x00003d09
    e634:	000135d5 	.word	0x000135d5
    e638:	000136e1 	.word	0x000136e1
    e63c:	0000c519 	.word	0x0000c519

0000e640 <Radio_WriteConfiguration>:
    e640:	b5f0      	push	{r4, r5, r6, r7, lr}
    e642:	4cb0      	ldr	r4, [pc, #704]	; (e904 <Radio_WriteConfiguration+0x2c4>)
    e644:	2200      	movs	r2, #0
    e646:	0023      	movs	r3, r4
    e648:	b085      	sub	sp, #20
    e64a:	9002      	str	r0, [sp, #8]
    e64c:	3334      	adds	r3, #52	; 0x34
    e64e:	0010      	movs	r0, r2
    e650:	7819      	ldrb	r1, [r3, #0]
    e652:	4bad      	ldr	r3, [pc, #692]	; (e908 <Radio_WriteConfiguration+0x2c8>)
    e654:	4798      	blx	r3
    e656:	4bad      	ldr	r3, [pc, #692]	; (e90c <Radio_WriteConfiguration+0x2cc>)
    e658:	6820      	ldr	r0, [r4, #0]
    e65a:	4798      	blx	r3
    e65c:	1ce3      	adds	r3, r4, #3
    e65e:	1d62      	adds	r2, r4, #5
    e660:	7fdb      	ldrb	r3, [r3, #31]
    e662:	7fd2      	ldrb	r2, [r2, #31]
    e664:	b25b      	sxtb	r3, r3
    e666:	4eaa      	ldr	r6, [pc, #680]	; (e910 <Radio_WriteConfiguration+0x2d0>)
    e668:	4daa      	ldr	r5, [pc, #680]	; (e914 <Radio_WriteConfiguration+0x2d4>)
    e66a:	2a00      	cmp	r2, #0
    e66c:	d000      	beq.n	e670 <Radio_WriteConfiguration+0x30>
    e66e:	e0fc      	b.n	e86a <Radio_WriteConfiguration+0x22a>
    e670:	1c1f      	adds	r7, r3, #0
    e672:	2b0f      	cmp	r3, #15
    e674:	dc00      	bgt.n	e678 <Radio_WriteConfiguration+0x38>
    e676:	e0ec      	b.n	e852 <Radio_WriteConfiguration+0x212>
    e678:	270f      	movs	r7, #15
    e67a:	b27b      	sxtb	r3, r7
    e67c:	204d      	movs	r0, #77	; 0x4d
    e67e:	9301      	str	r3, [sp, #4]
    e680:	47b0      	blx	r6
    e682:	21f8      	movs	r1, #248	; 0xf8
    e684:	4008      	ands	r0, r1
    e686:	39f4      	subs	r1, #244	; 0xf4
    e688:	4301      	orrs	r1, r0
    e68a:	204d      	movs	r0, #77	; 0x4d
    e68c:	47a8      	blx	r5
    e68e:	b27b      	sxtb	r3, r7
    e690:	2b00      	cmp	r3, #0
    e692:	db00      	blt.n	e696 <Radio_WriteConfiguration+0x56>
    e694:	e0e4      	b.n	e860 <Radio_WriteConfiguration+0x220>
    e696:	3703      	adds	r7, #3
    e698:	b2f9      	uxtb	r1, r7
    e69a:	2720      	movs	r7, #32
    e69c:	4339      	orrs	r1, r7
    e69e:	2009      	movs	r0, #9
    e6a0:	47a8      	blx	r5
    e6a2:	0023      	movs	r3, r4
    e6a4:	3334      	adds	r3, #52	; 0x34
    e6a6:	781f      	ldrb	r7, [r3, #0]
    e6a8:	2f01      	cmp	r7, #1
    e6aa:	d000      	beq.n	e6ae <Radio_WriteConfiguration+0x6e>
    e6ac:	e144      	b.n	e938 <Radio_WriteConfiguration+0x2f8>
    e6ae:	7e21      	ldrb	r1, [r4, #24]
    e6b0:	2039      	movs	r0, #57	; 0x39
    e6b2:	47a8      	blx	r5
    e6b4:	4b98      	ldr	r3, [pc, #608]	; (e918 <Radio_WriteConfiguration+0x2d8>)
    e6b6:	201d      	movs	r0, #29
    e6b8:	7819      	ldrb	r1, [r3, #0]
    e6ba:	0023      	movs	r3, r4
    e6bc:	3333      	adds	r3, #51	; 0x33
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	0109      	lsls	r1, r1, #4
    e6c2:	005b      	lsls	r3, r3, #1
    e6c4:	4319      	orrs	r1, r3
    e6c6:	1de3      	adds	r3, r4, #7
    e6c8:	7fdb      	ldrb	r3, [r3, #31]
    e6ca:	401f      	ands	r7, r3
    e6cc:	4339      	orrs	r1, r7
    e6ce:	b2c9      	uxtb	r1, r1
    e6d0:	47a8      	blx	r5
    e6d2:	1d23      	adds	r3, r4, #4
    e6d4:	7fd9      	ldrb	r1, [r3, #31]
    e6d6:	2304      	movs	r3, #4
    e6d8:	0089      	lsls	r1, r1, #2
    e6da:	4019      	ands	r1, r3
    e6dc:	0023      	movs	r3, r4
    e6de:	3335      	adds	r3, #53	; 0x35
    e6e0:	781b      	ldrb	r3, [r3, #0]
    e6e2:	201e      	movs	r0, #30
    e6e4:	011b      	lsls	r3, r3, #4
    e6e6:	4319      	orrs	r1, r3
    e6e8:	9b02      	ldr	r3, [sp, #8]
    e6ea:	059b      	lsls	r3, r3, #22
    e6ec:	0f9b      	lsrs	r3, r3, #30
    e6ee:	4319      	orrs	r1, r3
    e6f0:	b2c9      	uxtb	r1, r1
    e6f2:	47a8      	blx	r5
    e6f4:	2300      	movs	r3, #0
    e6f6:	8ae1      	ldrh	r1, [r4, #22]
    e6f8:	4299      	cmp	r1, r3
    e6fa:	d011      	beq.n	e720 <Radio_WriteConfiguration+0xe0>
    e6fc:	4a86      	ldr	r2, [pc, #536]	; (e918 <Radio_WriteConfiguration+0x2d8>)
    e6fe:	7812      	ldrb	r2, [r2, #0]
    e700:	2a08      	cmp	r2, #8
    e702:	d100      	bne.n	e706 <Radio_WriteConfiguration+0xc6>
    e704:	e0e4      	b.n	e8d0 <Radio_WriteConfiguration+0x290>
    e706:	2a09      	cmp	r2, #9
    e708:	d100      	bne.n	e70c <Radio_WriteConfiguration+0xcc>
    e70a:	e0e3      	b.n	e8d4 <Radio_WriteConfiguration+0x294>
    e70c:	2a07      	cmp	r2, #7
    e70e:	d000      	beq.n	e712 <Radio_WriteConfiguration+0xd2>
    e710:	e0e3      	b.n	e8da <Radio_WriteConfiguration+0x29a>
    e712:	337d      	adds	r3, #125	; 0x7d
    e714:	4359      	muls	r1, r3
    e716:	0023      	movs	r3, r4
    e718:	3335      	adds	r3, #53	; 0x35
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	40d9      	lsrs	r1, r3
    e71e:	000b      	movs	r3, r1
    e720:	b2d9      	uxtb	r1, r3
    e722:	2024      	movs	r0, #36	; 0x24
    e724:	4d7b      	ldr	r5, [pc, #492]	; (e914 <Radio_WriteConfiguration+0x2d4>)
    e726:	47a8      	blx	r5
    e728:	466b      	mov	r3, sp
    e72a:	201f      	movs	r0, #31
    e72c:	7a19      	ldrb	r1, [r3, #8]
    e72e:	47a8      	blx	r5
    e730:	2026      	movs	r0, #38	; 0x26
    e732:	47b0      	blx	r6
    e734:	0023      	movs	r3, r4
    e736:	3335      	adds	r3, #53	; 0x35
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	2b0c      	cmp	r3, #12
    e73c:	d105      	bne.n	e74a <Radio_WriteConfiguration+0x10a>
    e73e:	0023      	movs	r3, r4
    e740:	3336      	adds	r3, #54	; 0x36
    e742:	781b      	ldrb	r3, [r3, #0]
    e744:	3b07      	subs	r3, #7
    e746:	2b01      	cmp	r3, #1
    e748:	d906      	bls.n	e758 <Radio_WriteConfiguration+0x118>
    e74a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e74c:	4b73      	ldr	r3, [pc, #460]	; (e91c <Radio_WriteConfiguration+0x2dc>)
    e74e:	4013      	ands	r3, r2
    e750:	4a73      	ldr	r2, [pc, #460]	; (e920 <Radio_WriteConfiguration+0x2e0>)
    e752:	4293      	cmp	r3, r2
    e754:	d000      	beq.n	e758 <Radio_WriteConfiguration+0x118>
    e756:	e0c2      	b.n	e8de <Radio_WriteConfiguration+0x29e>
    e758:	2108      	movs	r1, #8
    e75a:	4308      	orrs	r0, r1
    e75c:	b2c0      	uxtb	r0, r0
    e75e:	2104      	movs	r1, #4
    e760:	4301      	orrs	r1, r0
    e762:	2026      	movs	r0, #38	; 0x26
    e764:	47a8      	blx	r5
    e766:	2031      	movs	r0, #49	; 0x31
    e768:	47b0      	blx	r6
    e76a:	21f8      	movs	r1, #248	; 0xf8
    e76c:	4008      	ands	r0, r1
    e76e:	39f5      	subs	r1, #245	; 0xf5
    e770:	4301      	orrs	r1, r0
    e772:	2031      	movs	r0, #49	; 0x31
    e774:	47a8      	blx	r5
    e776:	210a      	movs	r1, #10
    e778:	2037      	movs	r0, #55	; 0x37
    e77a:	47a8      	blx	r5
    e77c:	0023      	movs	r3, r4
    e77e:	3331      	adds	r3, #49	; 0x31
    e780:	781b      	ldrb	r3, [r3, #0]
    e782:	2b12      	cmp	r3, #18
    e784:	d11e      	bne.n	e7c4 <Radio_WriteConfiguration+0x184>
    e786:	0023      	movs	r3, r4
    e788:	3336      	adds	r3, #54	; 0x36
    e78a:	781b      	ldrb	r3, [r3, #0]
    e78c:	3b07      	subs	r3, #7
    e78e:	2b01      	cmp	r3, #1
    e790:	d80b      	bhi.n	e7aa <Radio_WriteConfiguration+0x16a>
    e792:	2031      	movs	r0, #49	; 0x31
    e794:	47b0      	blx	r6
    e796:	217f      	movs	r1, #127	; 0x7f
    e798:	4001      	ands	r1, r0
    e79a:	2031      	movs	r0, #49	; 0x31
    e79c:	47a8      	blx	r5
    e79e:	2140      	movs	r1, #64	; 0x40
    e7a0:	202f      	movs	r0, #47	; 0x2f
    e7a2:	47a8      	blx	r5
    e7a4:	2100      	movs	r1, #0
    e7a6:	2030      	movs	r0, #48	; 0x30
    e7a8:	47a8      	blx	r5
    e7aa:	0023      	movs	r3, r4
    e7ac:	3336      	adds	r3, #54	; 0x36
    e7ae:	781b      	ldrb	r3, [r3, #0]
    e7b0:	2b09      	cmp	r3, #9
    e7b2:	d107      	bne.n	e7c4 <Radio_WriteConfiguration+0x184>
    e7b4:	2031      	movs	r0, #49	; 0x31
    e7b6:	47b0      	blx	r6
    e7b8:	2180      	movs	r1, #128	; 0x80
    e7ba:	4249      	negs	r1, r1
    e7bc:	4301      	orrs	r1, r0
    e7be:	b2c9      	uxtb	r1, r1
    e7c0:	2031      	movs	r0, #49	; 0x31
    e7c2:	47a8      	blx	r5
    e7c4:	2033      	movs	r0, #51	; 0x33
    e7c6:	47b0      	blx	r6
    e7c8:	1da3      	adds	r3, r4, #6
    e7ca:	7fd9      	ldrb	r1, [r3, #31]
    e7cc:	2340      	movs	r3, #64	; 0x40
    e7ce:	0189      	lsls	r1, r1, #6
    e7d0:	4398      	bics	r0, r3
    e7d2:	4019      	ands	r1, r3
    e7d4:	4301      	orrs	r1, r0
    e7d6:	b2c9      	uxtb	r1, r1
    e7d8:	2033      	movs	r0, #51	; 0x33
    e7da:	47a8      	blx	r5
    e7dc:	8aa1      	ldrh	r1, [r4, #20]
    e7de:	2020      	movs	r0, #32
    e7e0:	0a09      	lsrs	r1, r1, #8
    e7e2:	47a8      	blx	r5
    e7e4:	7d21      	ldrb	r1, [r4, #20]
    e7e6:	2021      	movs	r0, #33	; 0x21
    e7e8:	47a8      	blx	r5
    e7ea:	2100      	movs	r1, #0
    e7ec:	200d      	movs	r0, #13
    e7ee:	47a8      	blx	r5
    e7f0:	2100      	movs	r1, #0
    e7f2:	200e      	movs	r0, #14
    e7f4:	47a8      	blx	r5
    e7f6:	2100      	movs	r1, #0
    e7f8:	200f      	movs	r0, #15
    e7fa:	47a8      	blx	r5
    e7fc:	0023      	movs	r3, r4
    e7fe:	3331      	adds	r3, #49	; 0x31
    e800:	781b      	ldrb	r3, [r3, #0]
    e802:	2b12      	cmp	r3, #18
    e804:	d120      	bne.n	e848 <Radio_WriteConfiguration+0x208>
    e806:	0023      	movs	r3, r4
    e808:	3336      	adds	r3, #54	; 0x36
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	2b09      	cmp	r3, #9
    e80e:	d000      	beq.n	e812 <Radio_WriteConfiguration+0x1d2>
    e810:	e072      	b.n	e8f8 <Radio_WriteConfiguration+0x2b8>
    e812:	4a44      	ldr	r2, [pc, #272]	; (e924 <Radio_WriteConfiguration+0x2e4>)
    e814:	6823      	ldr	r3, [r4, #0]
    e816:	1899      	adds	r1, r3, r2
    e818:	4a43      	ldr	r2, [pc, #268]	; (e928 <Radio_WriteConfiguration+0x2e8>)
    e81a:	4291      	cmp	r1, r2
    e81c:	d862      	bhi.n	e8e4 <Radio_WriteConfiguration+0x2a4>
    e81e:	2102      	movs	r1, #2
    e820:	2036      	movs	r0, #54	; 0x36
    e822:	47a8      	blx	r5
    e824:	2164      	movs	r1, #100	; 0x64
    e826:	203a      	movs	r0, #58	; 0x3a
    e828:	47a8      	blx	r5
    e82a:	0023      	movs	r3, r4
    e82c:	3336      	adds	r3, #54	; 0x36
    e82e:	781b      	ldrb	r3, [r3, #0]
    e830:	2165      	movs	r1, #101	; 0x65
    e832:	203a      	movs	r0, #58	; 0x3a
    e834:	2b09      	cmp	r3, #9
    e836:	d162      	bne.n	e8fe <Radio_WriteConfiguration+0x2be>
    e838:	3406      	adds	r4, #6
    e83a:	7fe3      	ldrb	r3, [r4, #31]
    e83c:	2b01      	cmp	r3, #1
    e83e:	d15e      	bne.n	e8fe <Radio_WriteConfiguration+0x2be>
    e840:	47a8      	blx	r5
    e842:	2119      	movs	r1, #25
    e844:	203b      	movs	r0, #59	; 0x3b
    e846:	47a8      	blx	r5
    e848:	21ff      	movs	r1, #255	; 0xff
    e84a:	2012      	movs	r0, #18
    e84c:	47a8      	blx	r5
    e84e:	b005      	add	sp, #20
    e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e852:	b25b      	sxtb	r3, r3
    e854:	3303      	adds	r3, #3
    e856:	db00      	blt.n	e85a <Radio_WriteConfiguration+0x21a>
    e858:	e70f      	b.n	e67a <Radio_WriteConfiguration+0x3a>
    e85a:	4b34      	ldr	r3, [pc, #208]	; (e92c <Radio_WriteConfiguration+0x2ec>)
    e85c:	781f      	ldrb	r7, [r3, #0]
    e85e:	e70c      	b.n	e67a <Radio_WriteConfiguration+0x3a>
    e860:	2170      	movs	r1, #112	; 0x70
    e862:	9b01      	ldr	r3, [sp, #4]
    e864:	4319      	orrs	r1, r3
    e866:	b2c9      	uxtb	r1, r1
    e868:	e719      	b.n	e69e <Radio_WriteConfiguration+0x5e>
    e86a:	2b01      	cmp	r3, #1
    e86c:	dd07      	ble.n	e87e <Radio_WriteConfiguration+0x23e>
    e86e:	2714      	movs	r7, #20
    e870:	2b13      	cmp	r3, #19
    e872:	dc06      	bgt.n	e882 <Radio_WriteConfiguration+0x242>
    e874:	1c1f      	adds	r7, r3, #0
    e876:	2b11      	cmp	r3, #17
    e878:	dd02      	ble.n	e880 <Radio_WriteConfiguration+0x240>
    e87a:	2711      	movs	r7, #17
    e87c:	e000      	b.n	e880 <Radio_WriteConfiguration+0x240>
    e87e:	2702      	movs	r7, #2
    e880:	b27f      	sxtb	r7, r7
    e882:	200b      	movs	r0, #11
    e884:	47b0      	blx	r6
    e886:	9003      	str	r0, [sp, #12]
    e888:	204d      	movs	r0, #77	; 0x4d
    e88a:	47b0      	blx	r6
    e88c:	2307      	movs	r3, #7
    e88e:	4398      	bics	r0, r3
    e890:	b2c1      	uxtb	r1, r0
    e892:	2f14      	cmp	r7, #20
    e894:	d112      	bne.n	e8bc <Radio_WriteConfiguration+0x27c>
    e896:	4319      	orrs	r1, r3
    e898:	9b03      	ldr	r3, [sp, #12]
    e89a:	37cb      	adds	r7, #203	; 0xcb
    e89c:	403b      	ands	r3, r7
    e89e:	001f      	movs	r7, r3
    e8a0:	230f      	movs	r3, #15
    e8a2:	9301      	str	r3, [sp, #4]
    e8a4:	204d      	movs	r0, #77	; 0x4d
    e8a6:	47a8      	blx	r5
    e8a8:	2180      	movs	r1, #128	; 0x80
    e8aa:	9b01      	ldr	r3, [sp, #4]
    e8ac:	4249      	negs	r1, r1
    e8ae:	4319      	orrs	r1, r3
    e8b0:	b2c9      	uxtb	r1, r1
    e8b2:	2009      	movs	r0, #9
    e8b4:	47a8      	blx	r5
    e8b6:	0039      	movs	r1, r7
    e8b8:	200b      	movs	r0, #11
    e8ba:	e6f1      	b.n	e6a0 <Radio_WriteConfiguration+0x60>
    e8bc:	3f02      	subs	r7, #2
    e8be:	b27b      	sxtb	r3, r7
    e8c0:	2720      	movs	r7, #32
    e8c2:	2004      	movs	r0, #4
    e8c4:	9301      	str	r3, [sp, #4]
    e8c6:	9b03      	ldr	r3, [sp, #12]
    e8c8:	4301      	orrs	r1, r0
    e8ca:	431f      	orrs	r7, r3
    e8cc:	b2ff      	uxtb	r7, r7
    e8ce:	e7e9      	b.n	e8a4 <Radio_WriteConfiguration+0x264>
    e8d0:	23fa      	movs	r3, #250	; 0xfa
    e8d2:	e71f      	b.n	e714 <Radio_WriteConfiguration+0xd4>
    e8d4:	23fa      	movs	r3, #250	; 0xfa
    e8d6:	005b      	lsls	r3, r3, #1
    e8d8:	e71c      	b.n	e714 <Radio_WriteConfiguration+0xd4>
    e8da:	0019      	movs	r1, r3
    e8dc:	e71b      	b.n	e716 <Radio_WriteConfiguration+0xd6>
    e8de:	21f7      	movs	r1, #247	; 0xf7
    e8e0:	4008      	ands	r0, r1
    e8e2:	e73c      	b.n	e75e <Radio_WriteConfiguration+0x11e>
    e8e4:	4a12      	ldr	r2, [pc, #72]	; (e930 <Radio_WriteConfiguration+0x2f0>)
    e8e6:	189b      	adds	r3, r3, r2
    e8e8:	4a12      	ldr	r2, [pc, #72]	; (e934 <Radio_WriteConfiguration+0x2f4>)
    e8ea:	4293      	cmp	r3, r2
    e8ec:	d804      	bhi.n	e8f8 <Radio_WriteConfiguration+0x2b8>
    e8ee:	2102      	movs	r1, #2
    e8f0:	2036      	movs	r0, #54	; 0x36
    e8f2:	47a8      	blx	r5
    e8f4:	217f      	movs	r1, #127	; 0x7f
    e8f6:	e796      	b.n	e826 <Radio_WriteConfiguration+0x1e6>
    e8f8:	2103      	movs	r1, #3
    e8fa:	2036      	movs	r0, #54	; 0x36
    e8fc:	e794      	b.n	e828 <Radio_WriteConfiguration+0x1e8>
    e8fe:	47a8      	blx	r5
    e900:	211d      	movs	r1, #29
    e902:	e79f      	b.n	e844 <Radio_WriteConfiguration+0x204>
    e904:	20002d78 	.word	0x20002d78
    e908:	0000d741 	.word	0x0000d741
    e90c:	0000e5f9 	.word	0x0000e5f9
    e910:	0000c541 	.word	0x0000c541
    e914:	0000c519 	.word	0x0000c519
    e918:	20002dae 	.word	0x20002dae
    e91c:	00ffff00 	.word	0x00ffff00
    e920:	00070b00 	.word	0x00070b00
    e924:	cc9eec80 	.word	0xcc9eec80
    e928:	096ae380 	.word	0x096ae380
    e92c:	00018d28 	.word	0x00018d28
    e930:	e78fe580 	.word	0xe78fe580
    e934:	06dac2c0 	.word	0x06dac2c0
    e938:	6863      	ldr	r3, [r4, #4]
    e93a:	492c      	ldr	r1, [pc, #176]	; (e9ec <Radio_WriteConfiguration+0x3ac>)
    e93c:	0218      	lsls	r0, r3, #8
    e93e:	4b2c      	ldr	r3, [pc, #176]	; (e9f0 <Radio_WriteConfiguration+0x3b0>)
    e940:	4798      	blx	r3
    e942:	0007      	movs	r7, r0
    e944:	0a01      	lsrs	r1, r0, #8
    e946:	b2c9      	uxtb	r1, r1
    e948:	2004      	movs	r0, #4
    e94a:	47a8      	blx	r5
    e94c:	b2f9      	uxtb	r1, r7
    e94e:	2005      	movs	r0, #5
    e950:	47a8      	blx	r5
    e952:	4b27      	ldr	r3, [pc, #156]	; (e9f0 <Radio_WriteConfiguration+0x3b0>)
    e954:	68a1      	ldr	r1, [r4, #8]
    e956:	4827      	ldr	r0, [pc, #156]	; (e9f4 <Radio_WriteConfiguration+0x3b4>)
    e958:	4798      	blx	r3
    e95a:	0007      	movs	r7, r0
    e95c:	0a01      	lsrs	r1, r0, #8
    e95e:	b2c9      	uxtb	r1, r1
    e960:	2002      	movs	r0, #2
    e962:	47a8      	blx	r5
    e964:	b2f9      	uxtb	r1, r7
    e966:	2003      	movs	r0, #3
    e968:	47a8      	blx	r5
    e96a:	2100      	movs	r1, #0
    e96c:	205d      	movs	r0, #93	; 0x5d
    e96e:	47a8      	blx	r5
    e970:	8aa1      	ldrh	r1, [r4, #20]
    e972:	2025      	movs	r0, #37	; 0x25
    e974:	0a09      	lsrs	r1, r1, #8
    e976:	47a8      	blx	r5
    e978:	7d21      	ldrb	r1, [r4, #20]
    e97a:	2026      	movs	r0, #38	; 0x26
    e97c:	47a8      	blx	r5
    e97e:	219e      	movs	r1, #158	; 0x9e
    e980:	200d      	movs	r0, #13
    e982:	47a8      	blx	r5
    e984:	21bf      	movs	r1, #191	; 0xbf
    e986:	2035      	movs	r0, #53	; 0x35
    e988:	47a8      	blx	r5
    e98a:	200a      	movs	r0, #10
    e98c:	47b0      	blx	r6
    e98e:	0023      	movs	r3, r4
    e990:	3337      	adds	r3, #55	; 0x37
    e992:	7819      	ldrb	r1, [r3, #0]
    e994:	2360      	movs	r3, #96	; 0x60
    e996:	0149      	lsls	r1, r1, #5
    e998:	4398      	bics	r0, r3
    e99a:	4301      	orrs	r1, r0
    e99c:	b2c9      	uxtb	r1, r1
    e99e:	200a      	movs	r0, #10
    e9a0:	47a8      	blx	r5
    e9a2:	1d23      	adds	r3, r4, #4
    e9a4:	7fdb      	ldrb	r3, [r3, #31]
    e9a6:	21c0      	movs	r1, #192	; 0xc0
    e9a8:	2b00      	cmp	r3, #0
    e9aa:	d000      	beq.n	e9ae <Radio_WriteConfiguration+0x36e>
    e9ac:	3110      	adds	r1, #16
    e9ae:	2030      	movs	r0, #48	; 0x30
    e9b0:	47a8      	blx	r5
    e9b2:	2600      	movs	r6, #0
    e9b4:	1ca3      	adds	r3, r4, #2
    e9b6:	7fd9      	ldrb	r1, [r3, #31]
    e9b8:	428e      	cmp	r6, r1
    e9ba:	d30d      	bcc.n	e9d8 <Radio_WriteConfiguration+0x398>
    e9bc:	2900      	cmp	r1, #0
    e9be:	d003      	beq.n	e9c8 <Radio_WriteConfiguration+0x388>
    e9c0:	2310      	movs	r3, #16
    e9c2:	3901      	subs	r1, #1
    e9c4:	4319      	orrs	r1, r3
    e9c6:	b2c9      	uxtb	r1, r1
    e9c8:	2027      	movs	r0, #39	; 0x27
    e9ca:	47a8      	blx	r5
    e9cc:	21ff      	movs	r1, #255	; 0xff
    e9ce:	203e      	movs	r0, #62	; 0x3e
    e9d0:	47a8      	blx	r5
    e9d2:	21ff      	movs	r1, #255	; 0xff
    e9d4:	203f      	movs	r0, #63	; 0x3f
    e9d6:	e739      	b.n	e84c <Radio_WriteConfiguration+0x20c>
    e9d8:	0030      	movs	r0, r6
    e9da:	19a3      	adds	r3, r4, r6
    e9dc:	3028      	adds	r0, #40	; 0x28
    e9de:	7e59      	ldrb	r1, [r3, #25]
    e9e0:	b2c0      	uxtb	r0, r0
    e9e2:	3601      	adds	r6, #1
    e9e4:	47a8      	blx	r5
    e9e6:	b2f6      	uxtb	r6, r6
    e9e8:	e7e4      	b.n	e9b4 <Radio_WriteConfiguration+0x374>
    e9ea:	46c0      	nop			; (mov r8, r8)
    e9ec:	00003d09 	.word	0x00003d09
    e9f0:	000135d5 	.word	0x000135d5
    e9f4:	01e84800 	.word	0x01e84800

0000e9f8 <RADIO_getMappingAndOpmode>:
    e9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e9fa:	0006      	movs	r6, r0
    e9fc:	4d06      	ldr	r5, [pc, #24]	; (ea18 <RADIO_getMappingAndOpmode+0x20>)
    e9fe:	2040      	movs	r0, #64	; 0x40
    ea00:	001f      	movs	r7, r3
    ea02:	0014      	movs	r4, r2
    ea04:	9101      	str	r1, [sp, #4]
    ea06:	47a8      	blx	r5
    ea08:	4004      	ands	r4, r0
    ea0a:	413c      	asrs	r4, r7
    ea0c:	2001      	movs	r0, #1
    ea0e:	7034      	strb	r4, [r6, #0]
    ea10:	47a8      	blx	r5
    ea12:	9b01      	ldr	r3, [sp, #4]
    ea14:	7018      	strb	r0, [r3, #0]
    ea16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ea18:	0000c541 	.word	0x0000c541

0000ea1c <RADIO_UnhandledInterrupt.part.0>:
    ea1c:	b510      	push	{r4, lr}
    ea1e:	21ff      	movs	r1, #255	; 0xff
    ea20:	2012      	movs	r0, #18
    ea22:	4b01      	ldr	r3, [pc, #4]	; (ea28 <RADIO_UnhandledInterrupt.part.0+0xc>)
    ea24:	4798      	blx	r3
    ea26:	bd10      	pop	{r4, pc}
    ea28:	0000c519 	.word	0x0000c519

0000ea2c <RADIO_UnhandledInterrupt>:
    ea2c:	b510      	push	{r4, lr}
    ea2e:	2801      	cmp	r0, #1
    ea30:	d102      	bne.n	ea38 <RADIO_UnhandledInterrupt+0xc>
    ea32:	4b05      	ldr	r3, [pc, #20]	; (ea48 <RADIO_UnhandledInterrupt+0x1c>)
    ea34:	4798      	blx	r3
    ea36:	bd10      	pop	{r4, pc}
    ea38:	21ff      	movs	r1, #255	; 0xff
    ea3a:	203e      	movs	r0, #62	; 0x3e
    ea3c:	4c03      	ldr	r4, [pc, #12]	; (ea4c <RADIO_UnhandledInterrupt+0x20>)
    ea3e:	47a0      	blx	r4
    ea40:	21ff      	movs	r1, #255	; 0xff
    ea42:	203f      	movs	r0, #63	; 0x3f
    ea44:	47a0      	blx	r4
    ea46:	e7f6      	b.n	ea36 <RADIO_UnhandledInterrupt+0xa>
    ea48:	0000ea1d 	.word	0x0000ea1d
    ea4c:	0000c519 	.word	0x0000c519

0000ea50 <RADIO_DIO0>:
    ea50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ea52:	466b      	mov	r3, sp
    ea54:	1ddc      	adds	r4, r3, #7
    ea56:	1d9d      	adds	r5, r3, #6
    ea58:	22c0      	movs	r2, #192	; 0xc0
    ea5a:	2306      	movs	r3, #6
    ea5c:	0028      	movs	r0, r5
    ea5e:	0021      	movs	r1, r4
    ea60:	4e12      	ldr	r6, [pc, #72]	; (eaac <RADIO_DIO0+0x5c>)
    ea62:	47b0      	blx	r6
    ea64:	7823      	ldrb	r3, [r4, #0]
    ea66:	7828      	ldrb	r0, [r5, #0]
    ea68:	b25a      	sxtb	r2, r3
    ea6a:	b2c0      	uxtb	r0, r0
    ea6c:	2a00      	cmp	r2, #0
    ea6e:	da0b      	bge.n	ea88 <RADIO_DIO0+0x38>
    ea70:	2800      	cmp	r0, #0
    ea72:	d004      	beq.n	ea7e <RADIO_DIO0+0x2e>
    ea74:	2801      	cmp	r0, #1
    ea76:	d005      	beq.n	ea84 <RADIO_DIO0+0x34>
    ea78:	4b0d      	ldr	r3, [pc, #52]	; (eab0 <RADIO_DIO0+0x60>)
    ea7a:	4798      	blx	r3
    ea7c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ea7e:	4b0d      	ldr	r3, [pc, #52]	; (eab4 <RADIO_DIO0+0x64>)
    ea80:	4798      	blx	r3
    ea82:	e7fb      	b.n	ea7c <RADIO_DIO0+0x2c>
    ea84:	4b0c      	ldr	r3, [pc, #48]	; (eab8 <RADIO_DIO0+0x68>)
    ea86:	e7fb      	b.n	ea80 <RADIO_DIO0+0x30>
    ea88:	2800      	cmp	r0, #0
    ea8a:	d10a      	bne.n	eaa2 <RADIO_DIO0+0x52>
    ea8c:	2207      	movs	r2, #7
    ea8e:	4013      	ands	r3, r2
    ea90:	7023      	strb	r3, [r4, #0]
    ea92:	2b03      	cmp	r3, #3
    ea94:	d101      	bne.n	ea9a <RADIO_DIO0+0x4a>
    ea96:	4b09      	ldr	r3, [pc, #36]	; (eabc <RADIO_DIO0+0x6c>)
    ea98:	e7f2      	b.n	ea80 <RADIO_DIO0+0x30>
    ea9a:	2b05      	cmp	r3, #5
    ea9c:	d102      	bne.n	eaa4 <RADIO_DIO0+0x54>
    ea9e:	4b08      	ldr	r3, [pc, #32]	; (eac0 <RADIO_DIO0+0x70>)
    eaa0:	e7ee      	b.n	ea80 <RADIO_DIO0+0x30>
    eaa2:	2000      	movs	r0, #0
    eaa4:	4b07      	ldr	r3, [pc, #28]	; (eac4 <RADIO_DIO0+0x74>)
    eaa6:	4798      	blx	r3
    eaa8:	e7e8      	b.n	ea7c <RADIO_DIO0+0x2c>
    eaaa:	46c0      	nop			; (mov r8, r8)
    eaac:	0000e9f9 	.word	0x0000e9f9
    eab0:	0000ea1d 	.word	0x0000ea1d
    eab4:	0000f0e1 	.word	0x0000f0e1
    eab8:	0000efe5 	.word	0x0000efe5
    eabc:	0000f061 	.word	0x0000f061
    eac0:	0000f15d 	.word	0x0000f15d
    eac4:	0000ea2d 	.word	0x0000ea2d

0000eac8 <RADIO_DIO1>:
    eac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eaca:	466b      	mov	r3, sp
    eacc:	1ddc      	adds	r4, r3, #7
    eace:	1d9d      	adds	r5, r3, #6
    ead0:	2230      	movs	r2, #48	; 0x30
    ead2:	2304      	movs	r3, #4
    ead4:	0021      	movs	r1, r4
    ead6:	0028      	movs	r0, r5
    ead8:	4e11      	ldr	r6, [pc, #68]	; (eb20 <RADIO_DIO1+0x58>)
    eada:	47b0      	blx	r6
    eadc:	7822      	ldrb	r2, [r4, #0]
    eade:	782b      	ldrb	r3, [r5, #0]
    eae0:	b251      	sxtb	r1, r2
    eae2:	2900      	cmp	r1, #0
    eae4:	da0c      	bge.n	eb00 <RADIO_DIO1+0x38>
    eae6:	b2db      	uxtb	r3, r3
    eae8:	2b00      	cmp	r3, #0
    eaea:	d004      	beq.n	eaf6 <RADIO_DIO1+0x2e>
    eaec:	2b01      	cmp	r3, #1
    eaee:	d005      	beq.n	eafc <RADIO_DIO1+0x34>
    eaf0:	4b0c      	ldr	r3, [pc, #48]	; (eb24 <RADIO_DIO1+0x5c>)
    eaf2:	4798      	blx	r3
    eaf4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    eaf6:	4b0c      	ldr	r3, [pc, #48]	; (eb28 <RADIO_DIO1+0x60>)
    eaf8:	4798      	blx	r3
    eafa:	e7fb      	b.n	eaf4 <RADIO_DIO1+0x2c>
    eafc:	4b0b      	ldr	r3, [pc, #44]	; (eb2c <RADIO_DIO1+0x64>)
    eafe:	e7fb      	b.n	eaf8 <RADIO_DIO1+0x30>
    eb00:	2107      	movs	r1, #7
    eb02:	b2db      	uxtb	r3, r3
    eb04:	400a      	ands	r2, r1
    eb06:	7022      	strb	r2, [r4, #0]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d005      	beq.n	eb18 <RADIO_DIO1+0x50>
    eb0c:	2b01      	cmp	r3, #1
    eb0e:	d1f1      	bne.n	eaf4 <RADIO_DIO1+0x2c>
    eb10:	2a03      	cmp	r2, #3
    eb12:	d1ef      	bne.n	eaf4 <RADIO_DIO1+0x2c>
    eb14:	4b06      	ldr	r3, [pc, #24]	; (eb30 <RADIO_DIO1+0x68>)
    eb16:	e7ef      	b.n	eaf8 <RADIO_DIO1+0x30>
    eb18:	4b06      	ldr	r3, [pc, #24]	; (eb34 <RADIO_DIO1+0x6c>)
    eb1a:	2a05      	cmp	r2, #5
    eb1c:	d1ea      	bne.n	eaf4 <RADIO_DIO1+0x2c>
    eb1e:	e7eb      	b.n	eaf8 <RADIO_DIO1+0x30>
    eb20:	0000e9f9 	.word	0x0000e9f9
    eb24:	0000ea1d 	.word	0x0000ea1d
    eb28:	0000ef69 	.word	0x0000ef69
    eb2c:	0000d825 	.word	0x0000d825
    eb30:	0000ee85 	.word	0x0000ee85
    eb34:	0000ede9 	.word	0x0000ede9

0000eb38 <RADIO_DIO2>:
    eb38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eb3a:	466b      	mov	r3, sp
    eb3c:	1ddc      	adds	r4, r3, #7
    eb3e:	1d9d      	adds	r5, r3, #6
    eb40:	220c      	movs	r2, #12
    eb42:	2302      	movs	r3, #2
    eb44:	0021      	movs	r1, r4
    eb46:	0028      	movs	r0, r5
    eb48:	4e0b      	ldr	r6, [pc, #44]	; (eb78 <RADIO_DIO2+0x40>)
    eb4a:	47b0      	blx	r6
    eb4c:	7823      	ldrb	r3, [r4, #0]
    eb4e:	782a      	ldrb	r2, [r5, #0]
    eb50:	b259      	sxtb	r1, r3
    eb52:	2900      	cmp	r1, #0
    eb54:	da05      	bge.n	eb62 <RADIO_DIO2+0x2a>
    eb56:	4b09      	ldr	r3, [pc, #36]	; (eb7c <RADIO_DIO2+0x44>)
    eb58:	2a02      	cmp	r2, #2
    eb5a:	d90a      	bls.n	eb72 <RADIO_DIO2+0x3a>
    eb5c:	4b08      	ldr	r3, [pc, #32]	; (eb80 <RADIO_DIO2+0x48>)
    eb5e:	4798      	blx	r3
    eb60:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    eb62:	2107      	movs	r1, #7
    eb64:	400b      	ands	r3, r1
    eb66:	7023      	strb	r3, [r4, #0]
    eb68:	2a03      	cmp	r2, #3
    eb6a:	d1f9      	bne.n	eb60 <RADIO_DIO2+0x28>
    eb6c:	2b05      	cmp	r3, #5
    eb6e:	d1f7      	bne.n	eb60 <RADIO_DIO2+0x28>
    eb70:	4b04      	ldr	r3, [pc, #16]	; (eb84 <RADIO_DIO2+0x4c>)
    eb72:	4798      	blx	r3
    eb74:	e7f4      	b.n	eb60 <RADIO_DIO2+0x28>
    eb76:	46c0      	nop			; (mov r8, r8)
    eb78:	0000e9f9 	.word	0x0000e9f9
    eb7c:	0000d825 	.word	0x0000d825
    eb80:	0000ea1d 	.word	0x0000ea1d
    eb84:	0000edb9 	.word	0x0000edb9

0000eb88 <RADIO_DIO3>:
    eb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eb8a:	466b      	mov	r3, sp
    eb8c:	4668      	mov	r0, sp
    eb8e:	1ddc      	adds	r4, r3, #7
    eb90:	2203      	movs	r2, #3
    eb92:	2300      	movs	r3, #0
    eb94:	0021      	movs	r1, r4
    eb96:	3006      	adds	r0, #6
    eb98:	4d03      	ldr	r5, [pc, #12]	; (eba8 <RADIO_DIO3+0x20>)
    eb9a:	47a8      	blx	r5
    eb9c:	7823      	ldrb	r3, [r4, #0]
    eb9e:	2b7f      	cmp	r3, #127	; 0x7f
    eba0:	d901      	bls.n	eba6 <RADIO_DIO3+0x1e>
    eba2:	4b02      	ldr	r3, [pc, #8]	; (ebac <RADIO_DIO3+0x24>)
    eba4:	4798      	blx	r3
    eba6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eba8:	0000e9f9 	.word	0x0000e9f9
    ebac:	0000ea1d 	.word	0x0000ea1d

0000ebb0 <RADIO_DIO4>:
    ebb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ebb2:	466b      	mov	r3, sp
    ebb4:	4668      	mov	r0, sp
    ebb6:	1ddc      	adds	r4, r3, #7
    ebb8:	2306      	movs	r3, #6
    ebba:	22c0      	movs	r2, #192	; 0xc0
    ebbc:	18c0      	adds	r0, r0, r3
    ebbe:	0021      	movs	r1, r4
    ebc0:	4d03      	ldr	r5, [pc, #12]	; (ebd0 <RADIO_DIO4+0x20>)
    ebc2:	47a8      	blx	r5
    ebc4:	7823      	ldrb	r3, [r4, #0]
    ebc6:	2b7f      	cmp	r3, #127	; 0x7f
    ebc8:	d901      	bls.n	ebce <RADIO_DIO4+0x1e>
    ebca:	4b02      	ldr	r3, [pc, #8]	; (ebd4 <RADIO_DIO4+0x24>)
    ebcc:	4798      	blx	r3
    ebce:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ebd0:	0000e9f9 	.word	0x0000e9f9
    ebd4:	0000ea1d 	.word	0x0000ea1d

0000ebd8 <RADIO_DIO5>:
    ebd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ebda:	466b      	mov	r3, sp
    ebdc:	4668      	mov	r0, sp
    ebde:	1ddc      	adds	r4, r3, #7
    ebe0:	2230      	movs	r2, #48	; 0x30
    ebe2:	2304      	movs	r3, #4
    ebe4:	0021      	movs	r1, r4
    ebe6:	3006      	adds	r0, #6
    ebe8:	4d03      	ldr	r5, [pc, #12]	; (ebf8 <RADIO_DIO5+0x20>)
    ebea:	47a8      	blx	r5
    ebec:	7823      	ldrb	r3, [r4, #0]
    ebee:	2b7f      	cmp	r3, #127	; 0x7f
    ebf0:	d901      	bls.n	ebf6 <RADIO_DIO5+0x1e>
    ebf2:	4b02      	ldr	r3, [pc, #8]	; (ebfc <RADIO_DIO5+0x24>)
    ebf4:	4798      	blx	r3
    ebf6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ebf8:	0000e9f9 	.word	0x0000e9f9
    ebfc:	0000ea1d 	.word	0x0000ea1d

0000ec00 <radioPostTask>:
    ec00:	b510      	push	{r4, lr}
    ec02:	0004      	movs	r4, r0
    ec04:	4b05      	ldr	r3, [pc, #20]	; (ec1c <radioPostTask+0x1c>)
    ec06:	4798      	blx	r3
    ec08:	4b05      	ldr	r3, [pc, #20]	; (ec20 <radioPostTask+0x20>)
    ec0a:	8818      	ldrh	r0, [r3, #0]
    ec0c:	4320      	orrs	r0, r4
    ec0e:	8018      	strh	r0, [r3, #0]
    ec10:	4b04      	ldr	r3, [pc, #16]	; (ec24 <radioPostTask+0x24>)
    ec12:	4798      	blx	r3
    ec14:	2002      	movs	r0, #2
    ec16:	4b04      	ldr	r3, [pc, #16]	; (ec28 <radioPostTask+0x28>)
    ec18:	4798      	blx	r3
    ec1a:	bd10      	pop	{r4, pc}
    ec1c:	0000c6d1 	.word	0x0000c6d1
    ec20:	20001e9c 	.word	0x20001e9c
    ec24:	0000c6dd 	.word	0x0000c6dd
    ec28:	0000d71d 	.word	0x0000d71d

0000ec2c <radioClearTask>:
    ec2c:	b510      	push	{r4, lr}
    ec2e:	0004      	movs	r4, r0
    ec30:	4b04      	ldr	r3, [pc, #16]	; (ec44 <radioClearTask+0x18>)
    ec32:	4798      	blx	r3
    ec34:	4a04      	ldr	r2, [pc, #16]	; (ec48 <radioClearTask+0x1c>)
    ec36:	8813      	ldrh	r3, [r2, #0]
    ec38:	43a3      	bics	r3, r4
    ec3a:	8013      	strh	r3, [r2, #0]
    ec3c:	4b03      	ldr	r3, [pc, #12]	; (ec4c <radioClearTask+0x20>)
    ec3e:	4798      	blx	r3
    ec40:	bd10      	pop	{r4, pc}
    ec42:	46c0      	nop			; (mov r8, r8)
    ec44:	0000c6d1 	.word	0x0000c6d1
    ec48:	20001e9c 	.word	0x20001e9c
    ec4c:	0000c6dd 	.word	0x0000c6dd

0000ec50 <RADIO_TaskHandler>:
    ec50:	b570      	push	{r4, r5, r6, lr}
    ec52:	2400      	movs	r4, #0
    ec54:	4d10      	ldr	r5, [pc, #64]	; (ec98 <RADIO_TaskHandler+0x48>)
    ec56:	2601      	movs	r6, #1
    ec58:	882b      	ldrh	r3, [r5, #0]
    ec5a:	42a3      	cmp	r3, r4
    ec5c:	d015      	beq.n	ec8a <RADIO_TaskHandler+0x3a>
    ec5e:	882b      	ldrh	r3, [r5, #0]
    ec60:	4123      	asrs	r3, r4
    ec62:	4233      	tst	r3, r6
    ec64:	d013      	beq.n	ec8e <RADIO_TaskHandler+0x3e>
    ec66:	40a6      	lsls	r6, r4
    ec68:	4b0c      	ldr	r3, [pc, #48]	; (ec9c <RADIO_TaskHandler+0x4c>)
    ec6a:	4798      	blx	r3
    ec6c:	882b      	ldrh	r3, [r5, #0]
    ec6e:	00a4      	lsls	r4, r4, #2
    ec70:	43b3      	bics	r3, r6
    ec72:	802b      	strh	r3, [r5, #0]
    ec74:	4b0a      	ldr	r3, [pc, #40]	; (eca0 <RADIO_TaskHandler+0x50>)
    ec76:	4798      	blx	r3
    ec78:	4b0a      	ldr	r3, [pc, #40]	; (eca4 <RADIO_TaskHandler+0x54>)
    ec7a:	58e3      	ldr	r3, [r4, r3]
    ec7c:	4798      	blx	r3
    ec7e:	882b      	ldrh	r3, [r5, #0]
    ec80:	2b00      	cmp	r3, #0
    ec82:	d002      	beq.n	ec8a <RADIO_TaskHandler+0x3a>
    ec84:	2002      	movs	r0, #2
    ec86:	4b08      	ldr	r3, [pc, #32]	; (eca8 <RADIO_TaskHandler+0x58>)
    ec88:	4798      	blx	r3
    ec8a:	2000      	movs	r0, #0
    ec8c:	bd70      	pop	{r4, r5, r6, pc}
    ec8e:	3401      	adds	r4, #1
    ec90:	2c05      	cmp	r4, #5
    ec92:	d1e4      	bne.n	ec5e <RADIO_TaskHandler+0xe>
    ec94:	e7f9      	b.n	ec8a <RADIO_TaskHandler+0x3a>
    ec96:	46c0      	nop			; (mov r8, r8)
    ec98:	20001e9c 	.word	0x20001e9c
    ec9c:	0000c6d1 	.word	0x0000c6d1
    eca0:	0000c6dd 	.word	0x0000c6dd
    eca4:	00018d2c 	.word	0x00018d2c
    eca8:	0000d71d 	.word	0x0000d71d

0000ecac <RadioSetState>:
    ecac:	4b01      	ldr	r3, [pc, #4]	; (ecb4 <RadioSetState+0x8>)
    ecae:	7018      	strb	r0, [r3, #0]
    ecb0:	4770      	bx	lr
    ecb2:	46c0      	nop			; (mov r8, r8)
    ecb4:	20003047 	.word	0x20003047

0000ecb8 <RADIO_GetState>:
    ecb8:	4b01      	ldr	r3, [pc, #4]	; (ecc0 <RADIO_GetState+0x8>)
    ecba:	7818      	ldrb	r0, [r3, #0]
    ecbc:	b2c0      	uxtb	r0, r0
    ecbe:	4770      	bx	lr
    ecc0:	20003047 	.word	0x20003047

0000ecc4 <RADIO_SetCallbackBitmask>:
    ecc4:	4a02      	ldr	r2, [pc, #8]	; (ecd0 <RADIO_SetCallbackBitmask+0xc>)
    ecc6:	7813      	ldrb	r3, [r2, #0]
    ecc8:	4318      	orrs	r0, r3
    ecca:	7010      	strb	r0, [r2, #0]
    eccc:	4770      	bx	lr
    ecce:	46c0      	nop			; (mov r8, r8)
    ecd0:	20003046 	.word	0x20003046

0000ecd4 <RADIO_Transmit>:
    ecd4:	b570      	push	{r4, r5, r6, lr}
    ecd6:	4d10      	ldr	r5, [pc, #64]	; (ed18 <RADIO_Transmit+0x44>)
    ecd8:	0006      	movs	r6, r0
    ecda:	782b      	ldrb	r3, [r5, #0]
    ecdc:	2004      	movs	r0, #4
    ecde:	2b01      	cmp	r3, #1
    ece0:	d118      	bne.n	ed14 <RADIO_Transmit+0x40>
    ece2:	4c0e      	ldr	r4, [pc, #56]	; (ed1c <RADIO_Transmit+0x48>)
    ece4:	0023      	movs	r3, r4
    ece6:	332f      	adds	r3, #47	; 0x2f
    ece8:	7818      	ldrb	r0, [r3, #0]
    ecea:	4b0d      	ldr	r3, [pc, #52]	; (ed20 <RADIO_Transmit+0x4c>)
    ecec:	4798      	blx	r3
    ecee:	4b0d      	ldr	r3, [pc, #52]	; (ed24 <RADIO_Transmit+0x50>)
    ecf0:	7832      	ldrb	r2, [r6, #0]
    ecf2:	6871      	ldr	r1, [r6, #4]
    ecf4:	701a      	strb	r2, [r3, #0]
    ecf6:	4b0c      	ldr	r3, [pc, #48]	; (ed28 <RADIO_Transmit+0x54>)
    ecf8:	3434      	adds	r4, #52	; 0x34
    ecfa:	6019      	str	r1, [r3, #0]
    ecfc:	7821      	ldrb	r1, [r4, #0]
    ecfe:	2302      	movs	r3, #2
    ed00:	2900      	cmp	r1, #0
    ed02:	d102      	bne.n	ed0a <RADIO_Transmit+0x36>
    ed04:	0018      	movs	r0, r3
    ed06:	2a3f      	cmp	r2, #63	; 0x3f
    ed08:	d804      	bhi.n	ed14 <RADIO_Transmit+0x40>
    ed0a:	702b      	strb	r3, [r5, #0]
    ed0c:	2004      	movs	r0, #4
    ed0e:	4b07      	ldr	r3, [pc, #28]	; (ed2c <RADIO_Transmit+0x58>)
    ed10:	4798      	blx	r3
    ed12:	2000      	movs	r0, #0
    ed14:	bd70      	pop	{r4, r5, r6, pc}
    ed16:	46c0      	nop			; (mov r8, r8)
    ed18:	20003047 	.word	0x20003047
    ed1c:	20002d78 	.word	0x20002d78
    ed20:	0000d41d 	.word	0x0000d41d
    ed24:	20001eb4 	.word	0x20001eb4
    ed28:	20001eb0 	.word	0x20001eb0
    ed2c:	0000ec01 	.word	0x0000ec01

0000ed30 <Radio_FSKTxPayloadHandler>:
    ed30:	b570      	push	{r4, r5, r6, lr}
    ed32:	4b1c      	ldr	r3, [pc, #112]	; (eda4 <Radio_FSKTxPayloadHandler+0x74>)
    ed34:	000d      	movs	r5, r1
    ed36:	4798      	blx	r3
    ed38:	4c1b      	ldr	r4, [pc, #108]	; (eda8 <Radio_FSKTxPayloadHandler+0x78>)
    ed3a:	3458      	adds	r4, #88	; 0x58
    ed3c:	7820      	ldrb	r0, [r4, #0]
    ed3e:	b2c0      	uxtb	r0, r0
    ed40:	2800      	cmp	r0, #0
    ed42:	d112      	bne.n	ed6a <Radio_FSKTxPayloadHandler+0x3a>
    ed44:	2d00      	cmp	r5, #0
    ed46:	d007      	beq.n	ed58 <Radio_FSKTxPayloadHandler+0x28>
    ed48:	4918      	ldr	r1, [pc, #96]	; (edac <Radio_FSKTxPayloadHandler+0x7c>)
    ed4a:	4b19      	ldr	r3, [pc, #100]	; (edb0 <Radio_FSKTxPayloadHandler+0x80>)
    ed4c:	2d3e      	cmp	r5, #62	; 0x3e
    ed4e:	d806      	bhi.n	ed5e <Radio_FSKTxPayloadHandler+0x2e>
    ed50:	002a      	movs	r2, r5
    ed52:	6809      	ldr	r1, [r1, #0]
    ed54:	4798      	blx	r3
    ed56:	7025      	strb	r5, [r4, #0]
    ed58:	4b16      	ldr	r3, [pc, #88]	; (edb4 <Radio_FSKTxPayloadHandler+0x84>)
    ed5a:	4798      	blx	r3
    ed5c:	bd70      	pop	{r4, r5, r6, pc}
    ed5e:	223f      	movs	r2, #63	; 0x3f
    ed60:	6809      	ldr	r1, [r1, #0]
    ed62:	4798      	blx	r3
    ed64:	233f      	movs	r3, #63	; 0x3f
    ed66:	7023      	strb	r3, [r4, #0]
    ed68:	e7f6      	b.n	ed58 <Radio_FSKTxPayloadHandler+0x28>
    ed6a:	7823      	ldrb	r3, [r4, #0]
    ed6c:	429d      	cmp	r5, r3
    ed6e:	d0f3      	beq.n	ed58 <Radio_FSKTxPayloadHandler+0x28>
    ed70:	7822      	ldrb	r2, [r4, #0]
    ed72:	480e      	ldr	r0, [pc, #56]	; (edac <Radio_FSKTxPayloadHandler+0x7c>)
    ed74:	1aaa      	subs	r2, r5, r2
    ed76:	b2d2      	uxtb	r2, r2
    ed78:	4b0d      	ldr	r3, [pc, #52]	; (edb0 <Radio_FSKTxPayloadHandler+0x80>)
    ed7a:	2a3f      	cmp	r2, #63	; 0x3f
    ed7c:	d807      	bhi.n	ed8e <Radio_FSKTxPayloadHandler+0x5e>
    ed7e:	7826      	ldrb	r6, [r4, #0]
    ed80:	7822      	ldrb	r2, [r4, #0]
    ed82:	6801      	ldr	r1, [r0, #0]
    ed84:	1aaa      	subs	r2, r5, r2
    ed86:	b2d2      	uxtb	r2, r2
    ed88:	1989      	adds	r1, r1, r6
    ed8a:	2000      	movs	r0, #0
    ed8c:	e7e2      	b.n	ed54 <Radio_FSKTxPayloadHandler+0x24>
    ed8e:	7822      	ldrb	r2, [r4, #0]
    ed90:	6801      	ldr	r1, [r0, #0]
    ed92:	2000      	movs	r0, #0
    ed94:	1889      	adds	r1, r1, r2
    ed96:	223f      	movs	r2, #63	; 0x3f
    ed98:	4798      	blx	r3
    ed9a:	7823      	ldrb	r3, [r4, #0]
    ed9c:	333f      	adds	r3, #63	; 0x3f
    ed9e:	b2db      	uxtb	r3, r3
    eda0:	e7e1      	b.n	ed66 <Radio_FSKTxPayloadHandler+0x36>
    eda2:	46c0      	nop			; (mov r8, r8)
    eda4:	00004569 	.word	0x00004569
    eda8:	20002d78 	.word	0x20002d78
    edac:	20001eb0 	.word	0x20001eb0
    edb0:	0000c56d 	.word	0x0000c56d
    edb4:	000045a9 	.word	0x000045a9

0000edb8 <RADIO_FSKSyncAddr>:
    edb8:	4b08      	ldr	r3, [pc, #32]	; (eddc <RADIO_FSKSyncAddr+0x24>)
    edba:	b510      	push	{r4, lr}
    edbc:	4798      	blx	r3
    edbe:	4b08      	ldr	r3, [pc, #32]	; (ede0 <RADIO_FSKSyncAddr+0x28>)
    edc0:	001a      	movs	r2, r3
    edc2:	3234      	adds	r2, #52	; 0x34
    edc4:	7812      	ldrb	r2, [r2, #0]
    edc6:	2a00      	cmp	r2, #0
    edc8:	d104      	bne.n	edd4 <RADIO_FSKSyncAddr+0x1c>
    edca:	0019      	movs	r1, r3
    edcc:	3358      	adds	r3, #88	; 0x58
    edce:	312c      	adds	r1, #44	; 0x2c
    edd0:	700a      	strb	r2, [r1, #0]
    edd2:	701a      	strb	r2, [r3, #0]
    edd4:	4b03      	ldr	r3, [pc, #12]	; (ede4 <RADIO_FSKSyncAddr+0x2c>)
    edd6:	4798      	blx	r3
    edd8:	bd10      	pop	{r4, pc}
    edda:	46c0      	nop			; (mov r8, r8)
    eddc:	00004569 	.word	0x00004569
    ede0:	20002d78 	.word	0x20002d78
    ede4:	000045a9 	.word	0x000045a9

0000ede8 <RADIO_FSKFifoLevel>:
    ede8:	b570      	push	{r4, r5, r6, lr}
    edea:	4b22      	ldr	r3, [pc, #136]	; (ee74 <RADIO_FSKFifoLevel+0x8c>)
    edec:	4798      	blx	r3
    edee:	4d22      	ldr	r5, [pc, #136]	; (ee78 <RADIO_FSKFifoLevel+0x90>)
    edf0:	002a      	movs	r2, r5
    edf2:	002b      	movs	r3, r5
    edf4:	322c      	adds	r2, #44	; 0x2c
    edf6:	3358      	adds	r3, #88	; 0x58
    edf8:	7810      	ldrb	r0, [r2, #0]
    edfa:	7819      	ldrb	r1, [r3, #0]
    edfc:	4288      	cmp	r0, r1
    edfe:	d105      	bne.n	ee0c <RADIO_FSKFifoLevel+0x24>
    ee00:	7812      	ldrb	r2, [r2, #0]
    ee02:	2a00      	cmp	r2, #0
    ee04:	d002      	beq.n	ee0c <RADIO_FSKFifoLevel+0x24>
    ee06:	781b      	ldrb	r3, [r3, #0]
    ee08:	2b00      	cmp	r3, #0
    ee0a:	d11f      	bne.n	ee4c <RADIO_FSKFifoLevel+0x64>
    ee0c:	0029      	movs	r1, r5
    ee0e:	312c      	adds	r1, #44	; 0x2c
    ee10:	7808      	ldrb	r0, [r1, #0]
    ee12:	b2c0      	uxtb	r0, r0
    ee14:	2800      	cmp	r0, #0
    ee16:	d102      	bne.n	ee1e <RADIO_FSKFifoLevel+0x36>
    ee18:	2201      	movs	r2, #1
    ee1a:	4b18      	ldr	r3, [pc, #96]	; (ee7c <RADIO_FSKFifoLevel+0x94>)
    ee1c:	4798      	blx	r3
    ee1e:	002e      	movs	r6, r5
    ee20:	002c      	movs	r4, r5
    ee22:	362c      	adds	r6, #44	; 0x2c
    ee24:	3458      	adds	r4, #88	; 0x58
    ee26:	7833      	ldrb	r3, [r6, #0]
    ee28:	7822      	ldrb	r2, [r4, #0]
    ee2a:	1a9b      	subs	r3, r3, r2
    ee2c:	b2db      	uxtb	r3, r3
    ee2e:	2b3e      	cmp	r3, #62	; 0x3e
    ee30:	d80f      	bhi.n	ee52 <RADIO_FSKFifoLevel+0x6a>
    ee32:	7823      	ldrb	r3, [r4, #0]
    ee34:	7832      	ldrb	r2, [r6, #0]
    ee36:	7821      	ldrb	r1, [r4, #0]
    ee38:	2000      	movs	r0, #0
    ee3a:	1a52      	subs	r2, r2, r1
    ee3c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ee3e:	b2d2      	uxtb	r2, r2
    ee40:	18c9      	adds	r1, r1, r3
    ee42:	4b0e      	ldr	r3, [pc, #56]	; (ee7c <RADIO_FSKFifoLevel+0x94>)
    ee44:	4798      	blx	r3
    ee46:	7833      	ldrb	r3, [r6, #0]
    ee48:	b2db      	uxtb	r3, r3
    ee4a:	7023      	strb	r3, [r4, #0]
    ee4c:	4b0c      	ldr	r3, [pc, #48]	; (ee80 <RADIO_FSKFifoLevel+0x98>)
    ee4e:	4798      	blx	r3
    ee50:	bd70      	pop	{r4, r5, r6, pc}
    ee52:	7833      	ldrb	r3, [r6, #0]
    ee54:	7822      	ldrb	r2, [r4, #0]
    ee56:	1a9b      	subs	r3, r3, r2
    ee58:	b2db      	uxtb	r3, r3
    ee5a:	2b3f      	cmp	r3, #63	; 0x3f
    ee5c:	d9f6      	bls.n	ee4c <RADIO_FSKFifoLevel+0x64>
    ee5e:	7823      	ldrb	r3, [r4, #0]
    ee60:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ee62:	223f      	movs	r2, #63	; 0x3f
    ee64:	18c9      	adds	r1, r1, r3
    ee66:	2000      	movs	r0, #0
    ee68:	4b04      	ldr	r3, [pc, #16]	; (ee7c <RADIO_FSKFifoLevel+0x94>)
    ee6a:	4798      	blx	r3
    ee6c:	7823      	ldrb	r3, [r4, #0]
    ee6e:	333f      	adds	r3, #63	; 0x3f
    ee70:	e7ea      	b.n	ee48 <RADIO_FSKFifoLevel+0x60>
    ee72:	46c0      	nop			; (mov r8, r8)
    ee74:	00004569 	.word	0x00004569
    ee78:	20002d78 	.word	0x20002d78
    ee7c:	0000c5ad 	.word	0x0000c5ad
    ee80:	000045a9 	.word	0x000045a9

0000ee84 <RADIO_FSKFifoEmpty>:
    ee84:	b510      	push	{r4, lr}
    ee86:	4b03      	ldr	r3, [pc, #12]	; (ee94 <RADIO_FSKFifoEmpty+0x10>)
    ee88:	7819      	ldrb	r1, [r3, #0]
    ee8a:	4b03      	ldr	r3, [pc, #12]	; (ee98 <RADIO_FSKFifoEmpty+0x14>)
    ee8c:	6818      	ldr	r0, [r3, #0]
    ee8e:	4b03      	ldr	r3, [pc, #12]	; (ee9c <RADIO_FSKFifoEmpty+0x18>)
    ee90:	4798      	blx	r3
    ee92:	bd10      	pop	{r4, pc}
    ee94:	20001eb4 	.word	0x20001eb4
    ee98:	20001eb0 	.word	0x20001eb0
    ee9c:	0000ed31 	.word	0x0000ed31

0000eea0 <RADIO_GetData>:
    eea0:	4b03      	ldr	r3, [pc, #12]	; (eeb0 <RADIO_GetData+0x10>)
    eea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    eea4:	332c      	adds	r3, #44	; 0x2c
    eea6:	6002      	str	r2, [r0, #0]
    eea8:	781b      	ldrb	r3, [r3, #0]
    eeaa:	2000      	movs	r0, #0
    eeac:	800b      	strh	r3, [r1, #0]
    eeae:	4770      	bx	lr
    eeb0:	20002d78 	.word	0x20002d78

0000eeb4 <Radio_EnableRfControl>:
    eeb4:	b510      	push	{r4, lr}
    eeb6:	4b08      	ldr	r3, [pc, #32]	; (eed8 <Radio_EnableRfControl+0x24>)
    eeb8:	0001      	movs	r1, r0
    eeba:	681a      	ldr	r2, [r3, #0]
    eebc:	4807      	ldr	r0, [pc, #28]	; (eedc <Radio_EnableRfControl+0x28>)
    eebe:	4c08      	ldr	r4, [pc, #32]	; (eee0 <Radio_EnableRfControl+0x2c>)
    eec0:	1812      	adds	r2, r2, r0
    eec2:	2000      	movs	r0, #0
    eec4:	42a2      	cmp	r2, r4
    eec6:	d804      	bhi.n	eed2 <Radio_EnableRfControl+0x1e>
    eec8:	3305      	adds	r3, #5
    eeca:	7fdb      	ldrb	r3, [r3, #31]
    eecc:	1e58      	subs	r0, r3, #1
    eece:	4183      	sbcs	r3, r0
    eed0:	1c58      	adds	r0, r3, #1
    eed2:	4b04      	ldr	r3, [pc, #16]	; (eee4 <Radio_EnableRfControl+0x30>)
    eed4:	4798      	blx	r3
    eed6:	bd10      	pop	{r4, pc}
    eed8:	20002d78 	.word	0x20002d78
    eedc:	cc9eec80 	.word	0xcc9eec80
    eee0:	096ae380 	.word	0x096ae380
    eee4:	0000c619 	.word	0x0000c619

0000eee8 <Radio_DisableRfControl>:
    eee8:	b510      	push	{r4, lr}
    eeea:	4b08      	ldr	r3, [pc, #32]	; (ef0c <Radio_DisableRfControl+0x24>)
    eeec:	0001      	movs	r1, r0
    eeee:	681a      	ldr	r2, [r3, #0]
    eef0:	4807      	ldr	r0, [pc, #28]	; (ef10 <Radio_DisableRfControl+0x28>)
    eef2:	4c08      	ldr	r4, [pc, #32]	; (ef14 <Radio_DisableRfControl+0x2c>)
    eef4:	1812      	adds	r2, r2, r0
    eef6:	2000      	movs	r0, #0
    eef8:	42a2      	cmp	r2, r4
    eefa:	d804      	bhi.n	ef06 <Radio_DisableRfControl+0x1e>
    eefc:	3305      	adds	r3, #5
    eefe:	7fdb      	ldrb	r3, [r3, #31]
    ef00:	1e58      	subs	r0, r3, #1
    ef02:	4183      	sbcs	r3, r0
    ef04:	1c58      	adds	r0, r3, #1
    ef06:	4b04      	ldr	r3, [pc, #16]	; (ef18 <Radio_DisableRfControl+0x30>)
    ef08:	4798      	blx	r3
    ef0a:	bd10      	pop	{r4, pc}
    ef0c:	20002d78 	.word	0x20002d78
    ef10:	cc9eec80 	.word	0xcc9eec80
    ef14:	096ae380 	.word	0x096ae380
    ef18:	0000c641 	.word	0x0000c641

0000ef1c <Radio_WatchdogTimeout>:
    ef1c:	b510      	push	{r4, lr}
    ef1e:	4b0e      	ldr	r3, [pc, #56]	; (ef58 <Radio_WatchdogTimeout+0x3c>)
    ef20:	781a      	ldrb	r2, [r3, #0]
    ef22:	2a04      	cmp	r2, #4
    ef24:	d10b      	bne.n	ef3e <Radio_WatchdogTimeout+0x22>
    ef26:	2320      	movs	r3, #32
    ef28:	4a0c      	ldr	r2, [pc, #48]	; (ef5c <Radio_WatchdogTimeout+0x40>)
    ef2a:	2000      	movs	r0, #0
    ef2c:	8811      	ldrh	r1, [r2, #0]
    ef2e:	430b      	orrs	r3, r1
    ef30:	8013      	strh	r3, [r2, #0]
    ef32:	4b0b      	ldr	r3, [pc, #44]	; (ef60 <Radio_WatchdogTimeout+0x44>)
    ef34:	4798      	blx	r3
    ef36:	2002      	movs	r0, #2
    ef38:	4b0a      	ldr	r3, [pc, #40]	; (ef64 <Radio_WatchdogTimeout+0x48>)
    ef3a:	4798      	blx	r3
    ef3c:	bd10      	pop	{r4, pc}
    ef3e:	781b      	ldrb	r3, [r3, #0]
    ef40:	2b02      	cmp	r3, #2
    ef42:	d1fb      	bne.n	ef3c <Radio_WatchdogTimeout+0x20>
    ef44:	4a05      	ldr	r2, [pc, #20]	; (ef5c <Radio_WatchdogTimeout+0x40>)
    ef46:	330e      	adds	r3, #14
    ef48:	8811      	ldrh	r1, [r2, #0]
    ef4a:	2001      	movs	r0, #1
    ef4c:	430b      	orrs	r3, r1
    ef4e:	8013      	strh	r3, [r2, #0]
    ef50:	4b03      	ldr	r3, [pc, #12]	; (ef60 <Radio_WatchdogTimeout+0x44>)
    ef52:	4798      	blx	r3
    ef54:	2001      	movs	r0, #1
    ef56:	e7ef      	b.n	ef38 <Radio_WatchdogTimeout+0x1c>
    ef58:	20003047 	.word	0x20003047
    ef5c:	20003044 	.word	0x20003044
    ef60:	0000eee9 	.word	0x0000eee9
    ef64:	0000ec01 	.word	0x0000ec01

0000ef68 <RADIO_RxTimeout>:
    ef68:	b510      	push	{r4, lr}
    ef6a:	4b0a      	ldr	r3, [pc, #40]	; (ef94 <RADIO_RxTimeout+0x2c>)
    ef6c:	332f      	adds	r3, #47	; 0x2f
    ef6e:	7818      	ldrb	r0, [r3, #0]
    ef70:	4b09      	ldr	r3, [pc, #36]	; (ef98 <RADIO_RxTimeout+0x30>)
    ef72:	4798      	blx	r3
    ef74:	2000      	movs	r0, #0
    ef76:	4b09      	ldr	r3, [pc, #36]	; (ef9c <RADIO_RxTimeout+0x34>)
    ef78:	4798      	blx	r3
    ef7a:	2180      	movs	r1, #128	; 0x80
    ef7c:	2012      	movs	r0, #18
    ef7e:	4b08      	ldr	r3, [pc, #32]	; (efa0 <RADIO_RxTimeout+0x38>)
    ef80:	4798      	blx	r3
    ef82:	2340      	movs	r3, #64	; 0x40
    ef84:	4a07      	ldr	r2, [pc, #28]	; (efa4 <RADIO_RxTimeout+0x3c>)
    ef86:	2002      	movs	r0, #2
    ef88:	8811      	ldrh	r1, [r2, #0]
    ef8a:	430b      	orrs	r3, r1
    ef8c:	8013      	strh	r3, [r2, #0]
    ef8e:	4b06      	ldr	r3, [pc, #24]	; (efa8 <RADIO_RxTimeout+0x40>)
    ef90:	4798      	blx	r3
    ef92:	bd10      	pop	{r4, pc}
    ef94:	20002d78 	.word	0x20002d78
    ef98:	0000d41d 	.word	0x0000d41d
    ef9c:	0000eee9 	.word	0x0000eee9
    efa0:	0000c519 	.word	0x0000c519
    efa4:	20003044 	.word	0x20003044
    efa8:	0000ec01 	.word	0x0000ec01

0000efac <Radio_RxFSKTimeout>:
    efac:	b510      	push	{r4, lr}
    efae:	4b08      	ldr	r3, [pc, #32]	; (efd0 <Radio_RxFSKTimeout+0x24>)
    efb0:	332f      	adds	r3, #47	; 0x2f
    efb2:	7818      	ldrb	r0, [r3, #0]
    efb4:	4b07      	ldr	r3, [pc, #28]	; (efd4 <Radio_RxFSKTimeout+0x28>)
    efb6:	4798      	blx	r3
    efb8:	2000      	movs	r0, #0
    efba:	4b07      	ldr	r3, [pc, #28]	; (efd8 <Radio_RxFSKTimeout+0x2c>)
    efbc:	4798      	blx	r3
    efbe:	2380      	movs	r3, #128	; 0x80
    efc0:	4a06      	ldr	r2, [pc, #24]	; (efdc <Radio_RxFSKTimeout+0x30>)
    efc2:	2002      	movs	r0, #2
    efc4:	8811      	ldrh	r1, [r2, #0]
    efc6:	430b      	orrs	r3, r1
    efc8:	8013      	strh	r3, [r2, #0]
    efca:	4b05      	ldr	r3, [pc, #20]	; (efe0 <Radio_RxFSKTimeout+0x34>)
    efcc:	4798      	blx	r3
    efce:	bd10      	pop	{r4, pc}
    efd0:	20002d78 	.word	0x20002d78
    efd4:	0000d41d 	.word	0x0000d41d
    efd8:	0000eee9 	.word	0x0000eee9
    efdc:	20003044 	.word	0x20003044
    efe0:	0000ec01 	.word	0x0000ec01

0000efe4 <RADIO_TxDone>:
    efe4:	b570      	push	{r4, r5, r6, lr}
    efe6:	4b14      	ldr	r3, [pc, #80]	; (f038 <RADIO_TxDone+0x54>)
    efe8:	332f      	adds	r3, #47	; 0x2f
    efea:	7818      	ldrb	r0, [r3, #0]
    efec:	4b13      	ldr	r3, [pc, #76]	; (f03c <RADIO_TxDone+0x58>)
    efee:	4798      	blx	r3
    eff0:	2001      	movs	r0, #1
    eff2:	4b13      	ldr	r3, [pc, #76]	; (f040 <RADIO_TxDone+0x5c>)
    eff4:	4798      	blx	r3
    eff6:	4b13      	ldr	r3, [pc, #76]	; (f044 <RADIO_TxDone+0x60>)
    eff8:	2108      	movs	r1, #8
    effa:	2012      	movs	r0, #18
    effc:	4798      	blx	r3
    effe:	4b12      	ldr	r3, [pc, #72]	; (f048 <RADIO_TxDone+0x64>)
    f000:	781a      	ldrb	r2, [r3, #0]
    f002:	4b12      	ldr	r3, [pc, #72]	; (f04c <RADIO_TxDone+0x68>)
    f004:	2a02      	cmp	r2, #2
    f006:	d002      	beq.n	f00e <RADIO_TxDone+0x2a>
    f008:	881a      	ldrh	r2, [r3, #0]
    f00a:	0692      	lsls	r2, r2, #26
    f00c:	d413      	bmi.n	f036 <RADIO_TxDone+0x52>
    f00e:	2001      	movs	r0, #1
    f010:	881a      	ldrh	r2, [r3, #0]
    f012:	4302      	orrs	r2, r0
    f014:	801a      	strh	r2, [r3, #0]
    f016:	4b0e      	ldr	r3, [pc, #56]	; (f050 <RADIO_TxDone+0x6c>)
    f018:	4798      	blx	r3
    f01a:	4b0e      	ldr	r3, [pc, #56]	; (f054 <RADIO_TxDone+0x70>)
    f01c:	4798      	blx	r3
    f01e:	4c0e      	ldr	r4, [pc, #56]	; (f058 <RADIO_TxDone+0x74>)
    f020:	4d0e      	ldr	r5, [pc, #56]	; (f05c <RADIO_TxDone+0x78>)
    f022:	6822      	ldr	r2, [r4, #0]
    f024:	6863      	ldr	r3, [r4, #4]
    f026:	1a80      	subs	r0, r0, r2
    f028:	4199      	sbcs	r1, r3
    f02a:	22fa      	movs	r2, #250	; 0xfa
    f02c:	2300      	movs	r3, #0
    f02e:	0092      	lsls	r2, r2, #2
    f030:	47a8      	blx	r5
    f032:	6020      	str	r0, [r4, #0]
    f034:	6061      	str	r1, [r4, #4]
    f036:	bd70      	pop	{r4, r5, r6, pc}
    f038:	20002d78 	.word	0x20002d78
    f03c:	0000d41d 	.word	0x0000d41d
    f040:	0000eee9 	.word	0x0000eee9
    f044:	0000c519 	.word	0x0000c519
    f048:	20003047 	.word	0x20003047
    f04c:	20003044 	.word	0x20003044
    f050:	0000ec01 	.word	0x0000ec01
    f054:	0000d0ad 	.word	0x0000d0ad
    f058:	20001ea8 	.word	0x20001ea8
    f05c:	000139b1 	.word	0x000139b1

0000f060 <RADIO_FSKPacketSent>:
    f060:	b570      	push	{r4, r5, r6, lr}
    f062:	4b15      	ldr	r3, [pc, #84]	; (f0b8 <RADIO_FSKPacketSent+0x58>)
    f064:	203f      	movs	r0, #63	; 0x3f
    f066:	4798      	blx	r3
    f068:	0703      	lsls	r3, r0, #28
    f06a:	d524      	bpl.n	f0b6 <RADIO_FSKPacketSent+0x56>
    f06c:	4b13      	ldr	r3, [pc, #76]	; (f0bc <RADIO_FSKPacketSent+0x5c>)
    f06e:	332f      	adds	r3, #47	; 0x2f
    f070:	7818      	ldrb	r0, [r3, #0]
    f072:	4b13      	ldr	r3, [pc, #76]	; (f0c0 <RADIO_FSKPacketSent+0x60>)
    f074:	4798      	blx	r3
    f076:	4b13      	ldr	r3, [pc, #76]	; (f0c4 <RADIO_FSKPacketSent+0x64>)
    f078:	2001      	movs	r0, #1
    f07a:	4798      	blx	r3
    f07c:	4b12      	ldr	r3, [pc, #72]	; (f0c8 <RADIO_FSKPacketSent+0x68>)
    f07e:	4c13      	ldr	r4, [pc, #76]	; (f0cc <RADIO_FSKPacketSent+0x6c>)
    f080:	781b      	ldrb	r3, [r3, #0]
    f082:	2b02      	cmp	r3, #2
    f084:	d002      	beq.n	f08c <RADIO_FSKPacketSent+0x2c>
    f086:	8823      	ldrh	r3, [r4, #0]
    f088:	069b      	lsls	r3, r3, #26
    f08a:	d414      	bmi.n	f0b6 <RADIO_FSKPacketSent+0x56>
    f08c:	4b10      	ldr	r3, [pc, #64]	; (f0d0 <RADIO_FSKPacketSent+0x70>)
    f08e:	4798      	blx	r3
    f090:	4d10      	ldr	r5, [pc, #64]	; (f0d4 <RADIO_FSKPacketSent+0x74>)
    f092:	4e11      	ldr	r6, [pc, #68]	; (f0d8 <RADIO_FSKPacketSent+0x78>)
    f094:	682a      	ldr	r2, [r5, #0]
    f096:	686b      	ldr	r3, [r5, #4]
    f098:	1a80      	subs	r0, r0, r2
    f09a:	4199      	sbcs	r1, r3
    f09c:	22fa      	movs	r2, #250	; 0xfa
    f09e:	2300      	movs	r3, #0
    f0a0:	0092      	lsls	r2, r2, #2
    f0a2:	47b0      	blx	r6
    f0a4:	4b0d      	ldr	r3, [pc, #52]	; (f0dc <RADIO_FSKPacketSent+0x7c>)
    f0a6:	6028      	str	r0, [r5, #0]
    f0a8:	6069      	str	r1, [r5, #4]
    f0aa:	2001      	movs	r0, #1
    f0ac:	4798      	blx	r3
    f0ae:	2304      	movs	r3, #4
    f0b0:	8822      	ldrh	r2, [r4, #0]
    f0b2:	4313      	orrs	r3, r2
    f0b4:	8023      	strh	r3, [r4, #0]
    f0b6:	bd70      	pop	{r4, r5, r6, pc}
    f0b8:	0000c541 	.word	0x0000c541
    f0bc:	20002d78 	.word	0x20002d78
    f0c0:	0000d41d 	.word	0x0000d41d
    f0c4:	0000eee9 	.word	0x0000eee9
    f0c8:	20003047 	.word	0x20003047
    f0cc:	20003044 	.word	0x20003044
    f0d0:	0000d0ad 	.word	0x0000d0ad
    f0d4:	20001ea8 	.word	0x20001ea8
    f0d8:	000139b1 	.word	0x000139b1
    f0dc:	0000ec01 	.word	0x0000ec01

0000f0e0 <RADIO_RxDone>:
    f0e0:	b570      	push	{r4, r5, r6, lr}
    f0e2:	2012      	movs	r0, #18
    f0e4:	4e16      	ldr	r6, [pc, #88]	; (f140 <RADIO_RxDone+0x60>)
    f0e6:	47b0      	blx	r6
    f0e8:	4b16      	ldr	r3, [pc, #88]	; (f144 <RADIO_RxDone+0x64>)
    f0ea:	0005      	movs	r5, r0
    f0ec:	2170      	movs	r1, #112	; 0x70
    f0ee:	2012      	movs	r0, #18
    f0f0:	4798      	blx	r3
    f0f2:	2350      	movs	r3, #80	; 0x50
    f0f4:	402b      	ands	r3, r5
    f0f6:	2b50      	cmp	r3, #80	; 0x50
    f0f8:	d119      	bne.n	f12e <RADIO_RxDone+0x4e>
    f0fa:	4c13      	ldr	r4, [pc, #76]	; (f148 <RADIO_RxDone+0x68>)
    f0fc:	0023      	movs	r3, r4
    f0fe:	332f      	adds	r3, #47	; 0x2f
    f100:	7818      	ldrb	r0, [r3, #0]
    f102:	4b12      	ldr	r3, [pc, #72]	; (f14c <RADIO_RxDone+0x6c>)
    f104:	4798      	blx	r3
    f106:	4b12      	ldr	r3, [pc, #72]	; (f150 <RADIO_RxDone+0x70>)
    f108:	2000      	movs	r0, #0
    f10a:	4798      	blx	r3
    f10c:	3404      	adds	r4, #4
    f10e:	201c      	movs	r0, #28
    f110:	47b0      	blx	r6
    f112:	7fe2      	ldrb	r2, [r4, #31]
    f114:	4b0f      	ldr	r3, [pc, #60]	; (f154 <RADIO_RxDone+0x74>)
    f116:	4910      	ldr	r1, [pc, #64]	; (f158 <RADIO_RxDone+0x78>)
    f118:	2a00      	cmp	r2, #0
    f11a:	d003      	beq.n	f124 <RADIO_RxDone+0x44>
    f11c:	06aa      	lsls	r2, r5, #26
    f11e:	d407      	bmi.n	f130 <RADIO_RxDone+0x50>
    f120:	0642      	lsls	r2, r0, #25
    f122:	d505      	bpl.n	f130 <RADIO_RxDone+0x50>
    f124:	2002      	movs	r0, #2
    f126:	881a      	ldrh	r2, [r3, #0]
    f128:	4302      	orrs	r2, r0
    f12a:	801a      	strh	r2, [r3, #0]
    f12c:	4788      	blx	r1
    f12e:	bd70      	pop	{r4, r5, r6, pc}
    f130:	2280      	movs	r2, #128	; 0x80
    f132:	8818      	ldrh	r0, [r3, #0]
    f134:	0052      	lsls	r2, r2, #1
    f136:	4302      	orrs	r2, r0
    f138:	801a      	strh	r2, [r3, #0]
    f13a:	2002      	movs	r0, #2
    f13c:	e7f6      	b.n	f12c <RADIO_RxDone+0x4c>
    f13e:	46c0      	nop			; (mov r8, r8)
    f140:	0000c541 	.word	0x0000c541
    f144:	0000c519 	.word	0x0000c519
    f148:	20002d78 	.word	0x20002d78
    f14c:	0000d41d 	.word	0x0000d41d
    f150:	0000eee9 	.word	0x0000eee9
    f154:	20003044 	.word	0x20003044
    f158:	0000ec01 	.word	0x0000ec01

0000f15c <RADIO_FSKPayloadReady>:
    f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f15e:	203f      	movs	r0, #63	; 0x3f
    f160:	4b39      	ldr	r3, [pc, #228]	; (f248 <RADIO_FSKPayloadReady+0xec>)
    f162:	4798      	blx	r3
    f164:	0743      	lsls	r3, r0, #29
    f166:	d559      	bpl.n	f21c <RADIO_FSKPayloadReady+0xc0>
    f168:	4c38      	ldr	r4, [pc, #224]	; (f24c <RADIO_FSKPayloadReady+0xf0>)
    f16a:	4d39      	ldr	r5, [pc, #228]	; (f250 <RADIO_FSKPayloadReady+0xf4>)
    f16c:	1d23      	adds	r3, r4, #4
    f16e:	7fdb      	ldrb	r3, [r3, #31]
    f170:	2b01      	cmp	r3, #1
    f172:	d154      	bne.n	f21e <RADIO_FSKPayloadReady+0xc2>
    f174:	2202      	movs	r2, #2
    f176:	4210      	tst	r0, r2
    f178:	d048      	beq.n	f20c <RADIO_FSKPayloadReady+0xb0>
    f17a:	0023      	movs	r3, r4
    f17c:	332f      	adds	r3, #47	; 0x2f
    f17e:	7818      	ldrb	r0, [r3, #0]
    f180:	4e34      	ldr	r6, [pc, #208]	; (f254 <RADIO_FSKPayloadReady+0xf8>)
    f182:	47b0      	blx	r6
    f184:	0023      	movs	r3, r4
    f186:	332e      	adds	r3, #46	; 0x2e
    f188:	7818      	ldrb	r0, [r3, #0]
    f18a:	47b0      	blx	r6
    f18c:	4b32      	ldr	r3, [pc, #200]	; (f258 <RADIO_FSKPayloadReady+0xfc>)
    f18e:	4798      	blx	r3
    f190:	0022      	movs	r2, r4
    f192:	0023      	movs	r3, r4
    f194:	322c      	adds	r2, #44	; 0x2c
    f196:	3358      	adds	r3, #88	; 0x58
    f198:	7810      	ldrb	r0, [r2, #0]
    f19a:	7819      	ldrb	r1, [r3, #0]
    f19c:	4288      	cmp	r0, r1
    f19e:	d105      	bne.n	f1ac <RADIO_FSKPayloadReady+0x50>
    f1a0:	7812      	ldrb	r2, [r2, #0]
    f1a2:	2a00      	cmp	r2, #0
    f1a4:	d002      	beq.n	f1ac <RADIO_FSKPayloadReady+0x50>
    f1a6:	781b      	ldrb	r3, [r3, #0]
    f1a8:	2b00      	cmp	r3, #0
    f1aa:	d118      	bne.n	f1de <RADIO_FSKPayloadReady+0x82>
    f1ac:	0021      	movs	r1, r4
    f1ae:	312c      	adds	r1, #44	; 0x2c
    f1b0:	7808      	ldrb	r0, [r1, #0]
    f1b2:	b2c0      	uxtb	r0, r0
    f1b4:	2800      	cmp	r0, #0
    f1b6:	d102      	bne.n	f1be <RADIO_FSKPayloadReady+0x62>
    f1b8:	2201      	movs	r2, #1
    f1ba:	4b28      	ldr	r3, [pc, #160]	; (f25c <RADIO_FSKPayloadReady+0x100>)
    f1bc:	4798      	blx	r3
    f1be:	0026      	movs	r6, r4
    f1c0:	0027      	movs	r7, r4
    f1c2:	3658      	adds	r6, #88	; 0x58
    f1c4:	7830      	ldrb	r0, [r6, #0]
    f1c6:	372c      	adds	r7, #44	; 0x2c
    f1c8:	b2c0      	uxtb	r0, r0
    f1ca:	2800      	cmp	r0, #0
    f1cc:	d110      	bne.n	f1f0 <RADIO_FSKPayloadReady+0x94>
    f1ce:	783a      	ldrb	r2, [r7, #0]
    f1d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f1d2:	b2d2      	uxtb	r2, r2
    f1d4:	4b21      	ldr	r3, [pc, #132]	; (f25c <RADIO_FSKPayloadReady+0x100>)
    f1d6:	4798      	blx	r3
    f1d8:	783b      	ldrb	r3, [r7, #0]
    f1da:	b2db      	uxtb	r3, r3
    f1dc:	7033      	strb	r3, [r6, #0]
    f1de:	4b20      	ldr	r3, [pc, #128]	; (f260 <RADIO_FSKPayloadReady+0x104>)
    f1e0:	4798      	blx	r3
    f1e2:	4b20      	ldr	r3, [pc, #128]	; (f264 <RADIO_FSKPayloadReady+0x108>)
    f1e4:	2000      	movs	r0, #0
    f1e6:	4798      	blx	r3
    f1e8:	2308      	movs	r3, #8
    f1ea:	882a      	ldrh	r2, [r5, #0]
    f1ec:	4313      	orrs	r3, r2
    f1ee:	e011      	b.n	f214 <RADIO_FSKPayloadReady+0xb8>
    f1f0:	783b      	ldrb	r3, [r7, #0]
    f1f2:	7832      	ldrb	r2, [r6, #0]
    f1f4:	1a9b      	subs	r3, r3, r2
    f1f6:	2b00      	cmp	r3, #0
    f1f8:	ddf1      	ble.n	f1de <RADIO_FSKPayloadReady+0x82>
    f1fa:	7833      	ldrb	r3, [r6, #0]
    f1fc:	783a      	ldrb	r2, [r7, #0]
    f1fe:	7831      	ldrb	r1, [r6, #0]
    f200:	2000      	movs	r0, #0
    f202:	1a52      	subs	r2, r2, r1
    f204:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f206:	b2d2      	uxtb	r2, r2
    f208:	18c9      	adds	r1, r1, r3
    f20a:	e7e3      	b.n	f1d4 <RADIO_FSKPayloadReady+0x78>
    f20c:	2380      	movs	r3, #128	; 0x80
    f20e:	8829      	ldrh	r1, [r5, #0]
    f210:	005b      	lsls	r3, r3, #1
    f212:	430b      	orrs	r3, r1
    f214:	802b      	strh	r3, [r5, #0]
    f216:	2002      	movs	r0, #2
    f218:	4b13      	ldr	r3, [pc, #76]	; (f268 <RADIO_FSKPayloadReady+0x10c>)
    f21a:	4798      	blx	r3
    f21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f21e:	0023      	movs	r3, r4
    f220:	332f      	adds	r3, #47	; 0x2f
    f222:	4e0c      	ldr	r6, [pc, #48]	; (f254 <RADIO_FSKPayloadReady+0xf8>)
    f224:	7818      	ldrb	r0, [r3, #0]
    f226:	47b0      	blx	r6
    f228:	0023      	movs	r3, r4
    f22a:	332e      	adds	r3, #46	; 0x2e
    f22c:	7818      	ldrb	r0, [r3, #0]
    f22e:	47b0      	blx	r6
    f230:	4e0e      	ldr	r6, [pc, #56]	; (f26c <RADIO_FSKPayloadReady+0x110>)
    f232:	2201      	movs	r2, #1
    f234:	0031      	movs	r1, r6
    f236:	2000      	movs	r0, #0
    f238:	4f08      	ldr	r7, [pc, #32]	; (f25c <RADIO_FSKPayloadReady+0x100>)
    f23a:	47b8      	blx	r7
    f23c:	7832      	ldrb	r2, [r6, #0]
    f23e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f240:	b2d2      	uxtb	r2, r2
    f242:	2000      	movs	r0, #0
    f244:	47b8      	blx	r7
    f246:	e7cc      	b.n	f1e2 <RADIO_FSKPayloadReady+0x86>
    f248:	0000c541 	.word	0x0000c541
    f24c:	20002d78 	.word	0x20002d78
    f250:	20003044 	.word	0x20003044
    f254:	0000d41d 	.word	0x0000d41d
    f258:	00004569 	.word	0x00004569
    f25c:	0000c5ad 	.word	0x0000c5ad
    f260:	000045a9 	.word	0x000045a9
    f264:	0000eee9 	.word	0x0000eee9
    f268:	0000ec01 	.word	0x0000ec01
    f26c:	20002da4 	.word	0x20002da4

0000f270 <Radio_SetClockInput>:
    f270:	b510      	push	{r4, lr}
    f272:	4b08      	ldr	r3, [pc, #32]	; (f294 <Radio_SetClockInput+0x24>)
    f274:	3355      	adds	r3, #85	; 0x55
    f276:	781b      	ldrb	r3, [r3, #0]
    f278:	2b00      	cmp	r3, #0
    f27a:	d10a      	bne.n	f292 <Radio_SetClockInput+0x22>
    f27c:	4b06      	ldr	r3, [pc, #24]	; (f298 <Radio_SetClockInput+0x28>)
    f27e:	204b      	movs	r0, #75	; 0x4b
    f280:	4798      	blx	r3
    f282:	2110      	movs	r1, #16
    f284:	4301      	orrs	r1, r0
    f286:	4b05      	ldr	r3, [pc, #20]	; (f29c <Radio_SetClockInput+0x2c>)
    f288:	b2c9      	uxtb	r1, r1
    f28a:	204b      	movs	r0, #75	; 0x4b
    f28c:	4798      	blx	r3
    f28e:	4b04      	ldr	r3, [pc, #16]	; (f2a0 <Radio_SetClockInput+0x30>)
    f290:	4798      	blx	r3
    f292:	bd10      	pop	{r4, pc}
    f294:	20002d78 	.word	0x20002d78
    f298:	0000c541 	.word	0x0000c541
    f29c:	0000c519 	.word	0x0000c519
    f2a0:	0000c661 	.word	0x0000c661

0000f2a4 <RADIO_RxHandler>:
    f2a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f2a6:	4b34      	ldr	r3, [pc, #208]	; (f378 <RADIO_RxHandler+0xd4>)
    f2a8:	4798      	blx	r3
    f2aa:	2000      	movs	r0, #0
    f2ac:	4b33      	ldr	r3, [pc, #204]	; (f37c <RADIO_RxHandler+0xd8>)
    f2ae:	4798      	blx	r3
    f2b0:	4e33      	ldr	r6, [pc, #204]	; (f380 <RADIO_RxHandler+0xdc>)
    f2b2:	4b34      	ldr	r3, [pc, #208]	; (f384 <RADIO_RxHandler+0xe0>)
    f2b4:	8830      	ldrh	r0, [r6, #0]
    f2b6:	2800      	cmp	r0, #0
    f2b8:	d100      	bne.n	f2bc <RADIO_RxHandler+0x18>
    f2ba:	3004      	adds	r0, #4
    f2bc:	4798      	blx	r3
    f2be:	4c32      	ldr	r4, [pc, #200]	; (f388 <RADIO_RxHandler+0xe4>)
    f2c0:	4d32      	ldr	r5, [pc, #200]	; (f38c <RADIO_RxHandler+0xe8>)
    f2c2:	0023      	movs	r3, r4
    f2c4:	3334      	adds	r3, #52	; 0x34
    f2c6:	7819      	ldrb	r1, [r3, #0]
    f2c8:	2901      	cmp	r1, #1
    f2ca:	d122      	bne.n	f312 <RADIO_RxHandler+0x6e>
    f2cc:	2022      	movs	r0, #34	; 0x22
    f2ce:	47a8      	blx	r5
    f2d0:	2100      	movs	r1, #0
    f2d2:	2040      	movs	r0, #64	; 0x40
    f2d4:	47a8      	blx	r5
    f2d6:	2100      	movs	r1, #0
    f2d8:	2041      	movs	r0, #65	; 0x41
    f2da:	47a8      	blx	r5
    f2dc:	8832      	ldrh	r2, [r6, #0]
    f2de:	4b2c      	ldr	r3, [pc, #176]	; (f390 <RADIO_RxHandler+0xec>)
    f2e0:	2a00      	cmp	r2, #0
    f2e2:	d131      	bne.n	f348 <RADIO_RxHandler+0xa4>
    f2e4:	0021      	movs	r1, r4
    f2e6:	2005      	movs	r0, #5
    f2e8:	3134      	adds	r1, #52	; 0x34
    f2ea:	7809      	ldrb	r1, [r1, #0]
    f2ec:	4798      	blx	r3
    f2ee:	68e3      	ldr	r3, [r4, #12]
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d00c      	beq.n	f30e <RADIO_RxHandler+0x6a>
    f2f4:	8832      	ldrh	r2, [r6, #0]
    f2f6:	2a00      	cmp	r2, #0
    f2f8:	d009      	beq.n	f30e <RADIO_RxHandler+0x6a>
    f2fa:	21fa      	movs	r1, #250	; 0xfa
    f2fc:	2200      	movs	r2, #0
    f2fe:	342f      	adds	r4, #47	; 0x2f
    f300:	0089      	lsls	r1, r1, #2
    f302:	7820      	ldrb	r0, [r4, #0]
    f304:	4359      	muls	r1, r3
    f306:	9200      	str	r2, [sp, #0]
    f308:	4b22      	ldr	r3, [pc, #136]	; (f394 <RADIO_RxHandler+0xf0>)
    f30a:	4c23      	ldr	r4, [pc, #140]	; (f398 <RADIO_RxHandler+0xf4>)
    f30c:	47a0      	blx	r4
    f30e:	2000      	movs	r0, #0
    f310:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f312:	0023      	movs	r3, r4
    f314:	3338      	adds	r3, #56	; 0x38
    f316:	7819      	ldrb	r1, [r3, #0]
    f318:	2012      	movs	r0, #18
    f31a:	47a8      	blx	r5
    f31c:	0023      	movs	r3, r4
    f31e:	3339      	adds	r3, #57	; 0x39
    f320:	7819      	ldrb	r1, [r3, #0]
    f322:	2013      	movs	r0, #19
    f324:	47a8      	blx	r5
    f326:	210c      	movs	r1, #12
    f328:	2040      	movs	r0, #64	; 0x40
    f32a:	47a8      	blx	r5
    f32c:	2100      	movs	r1, #0
    f32e:	2041      	movs	r0, #65	; 0x41
    f330:	47a8      	blx	r5
    f332:	0022      	movs	r2, r4
    f334:	2300      	movs	r3, #0
    f336:	3256      	adds	r2, #86	; 0x56
    f338:	8013      	strh	r3, [r2, #0]
    f33a:	0022      	movs	r2, r4
    f33c:	322c      	adds	r2, #44	; 0x2c
    f33e:	7013      	strb	r3, [r2, #0]
    f340:	0022      	movs	r2, r4
    f342:	3258      	adds	r2, #88	; 0x58
    f344:	7013      	strb	r3, [r2, #0]
    f346:	e7c9      	b.n	f2dc <RADIO_RxHandler+0x38>
    f348:	0022      	movs	r2, r4
    f34a:	3234      	adds	r2, #52	; 0x34
    f34c:	7811      	ldrb	r1, [r2, #0]
    f34e:	2200      	movs	r2, #0
    f350:	2901      	cmp	r1, #1
    f352:	d101      	bne.n	f358 <RADIO_RxHandler+0xb4>
    f354:	2006      	movs	r0, #6
    f356:	e7c9      	b.n	f2ec <RADIO_RxHandler+0x48>
    f358:	0011      	movs	r1, r2
    f35a:	2005      	movs	r0, #5
    f35c:	4798      	blx	r3
    f35e:	21fa      	movs	r1, #250	; 0xfa
    f360:	8833      	ldrh	r3, [r6, #0]
    f362:	0089      	lsls	r1, r1, #2
    f364:	4359      	muls	r1, r3
    f366:	0023      	movs	r3, r4
    f368:	2200      	movs	r2, #0
    f36a:	332e      	adds	r3, #46	; 0x2e
    f36c:	7818      	ldrb	r0, [r3, #0]
    f36e:	4d0a      	ldr	r5, [pc, #40]	; (f398 <RADIO_RxHandler+0xf4>)
    f370:	9200      	str	r2, [sp, #0]
    f372:	4b0a      	ldr	r3, [pc, #40]	; (f39c <RADIO_RxHandler+0xf8>)
    f374:	47a8      	blx	r5
    f376:	e7ba      	b.n	f2ee <RADIO_RxHandler+0x4a>
    f378:	0000f271 	.word	0x0000f271
    f37c:	0000eeb5 	.word	0x0000eeb5
    f380:	20001ea0 	.word	0x20001ea0
    f384:	0000e641 	.word	0x0000e641
    f388:	20002d78 	.word	0x20002d78
    f38c:	0000c519 	.word	0x0000c519
    f390:	0000d741 	.word	0x0000d741
    f394:	0000ef1d 	.word	0x0000ef1d
    f398:	0000d105 	.word	0x0000d105
    f39c:	0000efad 	.word	0x0000efad

0000f3a0 <Radio_ResetClockInput>:
    f3a0:	b510      	push	{r4, lr}
    f3a2:	4b04      	ldr	r3, [pc, #16]	; (f3b4 <Radio_ResetClockInput+0x14>)
    f3a4:	3355      	adds	r3, #85	; 0x55
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	2b00      	cmp	r3, #0
    f3aa:	d101      	bne.n	f3b0 <Radio_ResetClockInput+0x10>
    f3ac:	4b02      	ldr	r3, [pc, #8]	; (f3b8 <Radio_ResetClockInput+0x18>)
    f3ae:	4798      	blx	r3
    f3b0:	bd10      	pop	{r4, pc}
    f3b2:	46c0      	nop			; (mov r8, r8)
    f3b4:	20002d78 	.word	0x20002d78
    f3b8:	0000c67d 	.word	0x0000c67d

0000f3bc <RADIO_InitDefaultAttributes>:
    f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3be:	2501      	movs	r5, #1
    f3c0:	4b64      	ldr	r3, [pc, #400]	; (f554 <RADIO_InitDefaultAttributes+0x198>)
    f3c2:	4c65      	ldr	r4, [pc, #404]	; (f558 <RADIO_InitDefaultAttributes+0x19c>)
    f3c4:	701d      	strb	r5, [r3, #0]
    f3c6:	4b65      	ldr	r3, [pc, #404]	; (f55c <RADIO_InitDefaultAttributes+0x1a0>)
    f3c8:	2207      	movs	r2, #7
    f3ca:	6023      	str	r3, [r4, #0]
    f3cc:	4b64      	ldr	r3, [pc, #400]	; (f560 <RADIO_InitDefaultAttributes+0x1a4>)
    f3ce:	18a1      	adds	r1, r4, r2
    f3d0:	6063      	str	r3, [r4, #4]
    f3d2:	4b64      	ldr	r3, [pc, #400]	; (f564 <RADIO_InitDefaultAttributes+0x1a8>)
    f3d4:	0027      	movs	r7, r4
    f3d6:	60a3      	str	r3, [r4, #8]
    f3d8:	0023      	movs	r3, r4
    f3da:	3334      	adds	r3, #52	; 0x34
    f3dc:	701d      	strb	r5, [r3, #0]
    f3de:	0023      	movs	r3, r4
    f3e0:	3336      	adds	r3, #54	; 0x36
    f3e2:	701a      	strb	r2, [r3, #0]
    f3e4:	1ce3      	adds	r3, r4, #3
    f3e6:	77dd      	strb	r5, [r3, #31]
    f3e8:	0023      	movs	r3, r4
    f3ea:	3333      	adds	r3, #51	; 0x33
    f3ec:	701d      	strb	r5, [r3, #0]
    f3ee:	2300      	movs	r3, #0
    f3f0:	77cb      	strb	r3, [r1, #31]
    f3f2:	2108      	movs	r1, #8
    f3f4:	82a1      	strh	r1, [r4, #20]
    f3f6:	0021      	movs	r1, r4
    f3f8:	3135      	adds	r1, #53	; 0x35
    f3fa:	700a      	strb	r2, [r1, #0]
    f3fc:	1d22      	adds	r2, r4, #4
    f3fe:	77d5      	strb	r5, [r2, #31]
    f400:	1d62      	adds	r2, r4, #5
    f402:	77d3      	strb	r3, [r2, #31]
    f404:	1da2      	adds	r2, r4, #6
    f406:	77d3      	strb	r3, [r2, #31]
    f408:	2194      	movs	r1, #148	; 0x94
    f40a:	22c1      	movs	r2, #193	; 0xc1
    f40c:	76a1      	strb	r1, [r4, #26]
    f40e:	7662      	strb	r2, [r4, #25]
    f410:	76e2      	strb	r2, [r4, #27]
    f412:	3991      	subs	r1, #145	; 0x91
    f414:	1ca2      	adds	r2, r4, #2
    f416:	77d1      	strb	r1, [r2, #31]
    f418:	2234      	movs	r2, #52	; 0x34
    f41a:	7622      	strb	r2, [r4, #24]
    f41c:	0022      	movs	r2, r4
    f41e:	317d      	adds	r1, #125	; 0x7d
    f420:	3232      	adds	r2, #50	; 0x32
    f422:	7011      	strb	r1, [r2, #0]
    f424:	4a50      	ldr	r2, [pc, #320]	; (f568 <RADIO_InitDefaultAttributes+0x1ac>)
    f426:	397e      	subs	r1, #126	; 0x7e
    f428:	60e2      	str	r2, [r4, #12]
    f42a:	0022      	movs	r2, r4
    f42c:	3237      	adds	r2, #55	; 0x37
    f42e:	7011      	strb	r1, [r2, #0]
    f430:	0022      	movs	r2, r4
    f432:	3109      	adds	r1, #9
    f434:	3238      	adds	r2, #56	; 0x38
    f436:	7011      	strb	r1, [r2, #0]
    f438:	0022      	movs	r2, r4
    f43a:	3107      	adds	r1, #7
    f43c:	3239      	adds	r2, #57	; 0x39
    f43e:	7011      	strb	r1, [r2, #0]
    f440:	0022      	movs	r2, r4
    f442:	322c      	adds	r2, #44	; 0x2c
    f444:	7013      	strb	r3, [r2, #0]
    f446:	4a49      	ldr	r2, [pc, #292]	; (f56c <RADIO_InitDefaultAttributes+0x1b0>)
    f448:	82e3      	strh	r3, [r4, #22]
    f44a:	62a2      	str	r2, [r4, #40]	; 0x28
    f44c:	0022      	movs	r2, r4
    f44e:	324c      	adds	r2, #76	; 0x4c
    f450:	8013      	strh	r3, [r2, #0]
    f452:	0022      	movs	r2, r4
    f454:	324e      	adds	r2, #78	; 0x4e
    f456:	7013      	strb	r3, [r2, #0]
    f458:	0022      	movs	r2, r4
    f45a:	324f      	adds	r2, #79	; 0x4f
    f45c:	7013      	strb	r3, [r2, #0]
    f45e:	0022      	movs	r2, r4
    f460:	3240      	adds	r2, #64	; 0x40
    f462:	7013      	strb	r3, [r2, #0]
    f464:	0022      	movs	r2, r4
    f466:	3241      	adds	r2, #65	; 0x41
    f468:	7013      	strb	r3, [r2, #0]
    f46a:	0022      	movs	r2, r4
    f46c:	3254      	adds	r2, #84	; 0x54
    f46e:	7013      	strb	r3, [r2, #0]
    f470:	0022      	movs	r2, r4
    f472:	3255      	adds	r2, #85	; 0x55
    f474:	7015      	strb	r5, [r2, #0]
    f476:	0022      	movs	r2, r4
    f478:	3258      	adds	r2, #88	; 0x58
    f47a:	6463      	str	r3, [r4, #68]	; 0x44
    f47c:	64a3      	str	r3, [r4, #72]	; 0x48
    f47e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f480:	87e3      	strh	r3, [r4, #62]	; 0x3e
    f482:	7013      	strb	r3, [r2, #0]
    f484:	3730      	adds	r7, #48	; 0x30
    f486:	783b      	ldrb	r3, [r7, #0]
    f488:	2b00      	cmp	r3, #0
    f48a:	d151      	bne.n	f530 <RADIO_InitDefaultAttributes+0x174>
    f48c:	4838      	ldr	r0, [pc, #224]	; (f570 <RADIO_InitDefaultAttributes+0x1b4>)
    f48e:	4e39      	ldr	r6, [pc, #228]	; (f574 <RADIO_InitDefaultAttributes+0x1b8>)
    f490:	47b0      	blx	r6
    f492:	2808      	cmp	r0, #8
    f494:	d149      	bne.n	f52a <RADIO_InitDefaultAttributes+0x16e>
    f496:	4838      	ldr	r0, [pc, #224]	; (f578 <RADIO_InitDefaultAttributes+0x1bc>)
    f498:	47b0      	blx	r6
    f49a:	2808      	cmp	r0, #8
    f49c:	d145      	bne.n	f52a <RADIO_InitDefaultAttributes+0x16e>
    f49e:	4837      	ldr	r0, [pc, #220]	; (f57c <RADIO_InitDefaultAttributes+0x1c0>)
    f4a0:	47b0      	blx	r6
    f4a2:	2808      	cmp	r0, #8
    f4a4:	d141      	bne.n	f52a <RADIO_InitDefaultAttributes+0x16e>
    f4a6:	4836      	ldr	r0, [pc, #216]	; (f580 <RADIO_InitDefaultAttributes+0x1c4>)
    f4a8:	47b0      	blx	r6
    f4aa:	2808      	cmp	r0, #8
    f4ac:	d13d      	bne.n	f52a <RADIO_InitDefaultAttributes+0x16e>
    f4ae:	703d      	strb	r5, [r7, #0]
    f4b0:	4b34      	ldr	r3, [pc, #208]	; (f584 <RADIO_InitDefaultAttributes+0x1c8>)
    f4b2:	4798      	blx	r3
    f4b4:	4b34      	ldr	r3, [pc, #208]	; (f588 <RADIO_InitDefaultAttributes+0x1cc>)
    f4b6:	4798      	blx	r3
    f4b8:	2800      	cmp	r0, #0
    f4ba:	d107      	bne.n	f4cc <RADIO_InitDefaultAttributes+0x110>
    f4bc:	0023      	movs	r3, r4
    f4be:	3355      	adds	r3, #85	; 0x55
    f4c0:	7018      	strb	r0, [r3, #0]
    f4c2:	4b32      	ldr	r3, [pc, #200]	; (f58c <RADIO_InitDefaultAttributes+0x1d0>)
    f4c4:	4798      	blx	r3
    f4c6:	0023      	movs	r3, r4
    f4c8:	3354      	adds	r3, #84	; 0x54
    f4ca:	7018      	strb	r0, [r3, #0]
    f4cc:	4b30      	ldr	r3, [pc, #192]	; (f590 <RADIO_InitDefaultAttributes+0x1d4>)
    f4ce:	4798      	blx	r3
    f4d0:	2201      	movs	r2, #1
    f4d2:	2100      	movs	r1, #0
    f4d4:	0010      	movs	r0, r2
    f4d6:	4f2f      	ldr	r7, [pc, #188]	; (f594 <RADIO_InitDefaultAttributes+0x1d8>)
    f4d8:	47b8      	blx	r7
    f4da:	6820      	ldr	r0, [r4, #0]
    f4dc:	4b2e      	ldr	r3, [pc, #184]	; (f598 <RADIO_InitDefaultAttributes+0x1dc>)
    f4de:	4798      	blx	r3
    f4e0:	2142      	movs	r1, #66	; 0x42
    f4e2:	203b      	movs	r0, #59	; 0x3b
    f4e4:	4d2d      	ldr	r5, [pc, #180]	; (f59c <RADIO_InitDefaultAttributes+0x1e0>)
    f4e6:	47a8      	blx	r5
    f4e8:	203b      	movs	r0, #59	; 0x3b
    f4ea:	4b2d      	ldr	r3, [pc, #180]	; (f5a0 <RADIO_InitDefaultAttributes+0x1e4>)
    f4ec:	4798      	blx	r3
    f4ee:	2620      	movs	r6, #32
    f4f0:	4006      	ands	r6, r0
    f4f2:	d1f9      	bne.n	f4e8 <RADIO_InitDefaultAttributes+0x12c>
    f4f4:	2123      	movs	r1, #35	; 0x23
    f4f6:	200c      	movs	r0, #12
    f4f8:	47a8      	blx	r5
    f4fa:	21aa      	movs	r1, #170	; 0xaa
    f4fc:	201f      	movs	r0, #31
    f4fe:	47a8      	blx	r5
    f500:	21ff      	movs	r1, #255	; 0xff
    f502:	2032      	movs	r0, #50	; 0x32
    f504:	47a8      	blx	r5
    f506:	2140      	movs	r1, #64	; 0x40
    f508:	2031      	movs	r0, #49	; 0x31
    f50a:	47a8      	blx	r5
    f50c:	2201      	movs	r2, #1
    f50e:	0030      	movs	r0, r6
    f510:	0011      	movs	r1, r2
    f512:	47b8      	blx	r7
    f514:	21ff      	movs	r1, #255	; 0xff
    f516:	2023      	movs	r0, #35	; 0x23
    f518:	47a8      	blx	r5
    f51a:	4b21      	ldr	r3, [pc, #132]	; (f5a0 <RADIO_InitDefaultAttributes+0x1e4>)
    f51c:	2042      	movs	r0, #66	; 0x42
    f51e:	4798      	blx	r3
    f520:	3431      	adds	r4, #49	; 0x31
    f522:	4b20      	ldr	r3, [pc, #128]	; (f5a4 <RADIO_InitDefaultAttributes+0x1e8>)
    f524:	7020      	strb	r0, [r4, #0]
    f526:	4798      	blx	r3
    f528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f52a:	4b1f      	ldr	r3, [pc, #124]	; (f5a8 <RADIO_InitDefaultAttributes+0x1ec>)
    f52c:	4798      	blx	r3
    f52e:	e7bf      	b.n	f4b0 <RADIO_InitDefaultAttributes+0xf4>
    f530:	0023      	movs	r3, r4
    f532:	332d      	adds	r3, #45	; 0x2d
    f534:	4d1d      	ldr	r5, [pc, #116]	; (f5ac <RADIO_InitDefaultAttributes+0x1f0>)
    f536:	7818      	ldrb	r0, [r3, #0]
    f538:	47a8      	blx	r5
    f53a:	0023      	movs	r3, r4
    f53c:	332e      	adds	r3, #46	; 0x2e
    f53e:	7818      	ldrb	r0, [r3, #0]
    f540:	47a8      	blx	r5
    f542:	0023      	movs	r3, r4
    f544:	332f      	adds	r3, #47	; 0x2f
    f546:	7818      	ldrb	r0, [r3, #0]
    f548:	47a8      	blx	r5
    f54a:	0023      	movs	r3, r4
    f54c:	3350      	adds	r3, #80	; 0x50
    f54e:	7818      	ldrb	r0, [r3, #0]
    f550:	47a8      	blx	r5
    f552:	e7ad      	b.n	f4b0 <RADIO_InitDefaultAttributes+0xf4>
    f554:	20003047 	.word	0x20003047
    f558:	20002d78 	.word	0x20002d78
    f55c:	33be27a0 	.word	0x33be27a0
    f560:	000061a8 	.word	0x000061a8
    f564:	0000c350 	.word	0x0000c350
    f568:	00003a98 	.word	0x00003a98
    f56c:	20002f44 	.word	0x20002f44
    f570:	20002da5 	.word	0x20002da5
    f574:	0000d0d1 	.word	0x0000d0d1
    f578:	20002da6 	.word	0x20002da6
    f57c:	20002da7 	.word	0x20002da7
    f580:	20002dc8 	.word	0x20002dc8
    f584:	0000c4d9 	.word	0x0000c4d9
    f588:	0000c65d 	.word	0x0000c65d
    f58c:	0000c659 	.word	0x0000c659
    f590:	0000f271 	.word	0x0000f271
    f594:	0000d741 	.word	0x0000d741
    f598:	0000e5f9 	.word	0x0000e5f9
    f59c:	0000c519 	.word	0x0000c519
    f5a0:	0000c541 	.word	0x0000c541
    f5a4:	0000f3a1 	.word	0x0000f3a1
    f5a8:	0000d015 	.word	0x0000d015
    f5ac:	0000d41d 	.word	0x0000d41d

0000f5b0 <RADIO_Receive>:
    f5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5b2:	7803      	ldrb	r3, [r0, #0]
    f5b4:	0006      	movs	r6, r0
    f5b6:	4d24      	ldr	r5, [pc, #144]	; (f648 <RADIO_Receive+0x98>)
    f5b8:	2b00      	cmp	r3, #0
    f5ba:	d11d      	bne.n	f5f8 <RADIO_Receive+0x48>
    f5bc:	782b      	ldrb	r3, [r5, #0]
    f5be:	2004      	movs	r0, #4
    f5c0:	2b01      	cmp	r3, #1
    f5c2:	d118      	bne.n	f5f6 <RADIO_Receive+0x46>
    f5c4:	4c21      	ldr	r4, [pc, #132]	; (f64c <RADIO_Receive+0x9c>)
    f5c6:	4f22      	ldr	r7, [pc, #136]	; (f650 <RADIO_Receive+0xa0>)
    f5c8:	0023      	movs	r3, r4
    f5ca:	332f      	adds	r3, #47	; 0x2f
    f5cc:	7818      	ldrb	r0, [r3, #0]
    f5ce:	47b8      	blx	r7
    f5d0:	0023      	movs	r3, r4
    f5d2:	3334      	adds	r3, #52	; 0x34
    f5d4:	781b      	ldrb	r3, [r3, #0]
    f5d6:	2b00      	cmp	r3, #0
    f5d8:	d102      	bne.n	f5e0 <RADIO_Receive+0x30>
    f5da:	342e      	adds	r4, #46	; 0x2e
    f5dc:	7820      	ldrb	r0, [r4, #0]
    f5de:	47b8      	blx	r7
    f5e0:	8872      	ldrh	r2, [r6, #2]
    f5e2:	4b1c      	ldr	r3, [pc, #112]	; (f654 <RADIO_Receive+0xa4>)
    f5e4:	2008      	movs	r0, #8
    f5e6:	801a      	strh	r2, [r3, #0]
    f5e8:	2304      	movs	r3, #4
    f5ea:	702b      	strb	r3, [r5, #0]
    f5ec:	4b1a      	ldr	r3, [pc, #104]	; (f658 <RADIO_Receive+0xa8>)
    f5ee:	4798      	blx	r3
    f5f0:	4b1a      	ldr	r3, [pc, #104]	; (f65c <RADIO_Receive+0xac>)
    f5f2:	4798      	blx	r3
    f5f4:	2000      	movs	r0, #0
    f5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5f8:	782b      	ldrb	r3, [r5, #0]
    f5fa:	2000      	movs	r0, #0
    f5fc:	2b01      	cmp	r3, #1
    f5fe:	d0fa      	beq.n	f5f6 <RADIO_Receive+0x46>
    f600:	782b      	ldrb	r3, [r5, #0]
    f602:	3003      	adds	r0, #3
    f604:	2b04      	cmp	r3, #4
    f606:	d1f6      	bne.n	f5f6 <RADIO_Receive+0x46>
    f608:	4c10      	ldr	r4, [pc, #64]	; (f64c <RADIO_Receive+0x9c>)
    f60a:	4e11      	ldr	r6, [pc, #68]	; (f650 <RADIO_Receive+0xa0>)
    f60c:	0023      	movs	r3, r4
    f60e:	332f      	adds	r3, #47	; 0x2f
    f610:	7818      	ldrb	r0, [r3, #0]
    f612:	47b0      	blx	r6
    f614:	0023      	movs	r3, r4
    f616:	3334      	adds	r3, #52	; 0x34
    f618:	781b      	ldrb	r3, [r3, #0]
    f61a:	2b00      	cmp	r3, #0
    f61c:	d103      	bne.n	f626 <RADIO_Receive+0x76>
    f61e:	0023      	movs	r3, r4
    f620:	332e      	adds	r3, #46	; 0x2e
    f622:	7818      	ldrb	r0, [r3, #0]
    f624:	47b0      	blx	r6
    f626:	2200      	movs	r2, #0
    f628:	3434      	adds	r4, #52	; 0x34
    f62a:	7821      	ldrb	r1, [r4, #0]
    f62c:	0010      	movs	r0, r2
    f62e:	4b0c      	ldr	r3, [pc, #48]	; (f660 <RADIO_Receive+0xb0>)
    f630:	4798      	blx	r3
    f632:	4b0c      	ldr	r3, [pc, #48]	; (f664 <RADIO_Receive+0xb4>)
    f634:	4798      	blx	r3
    f636:	2301      	movs	r3, #1
    f638:	2008      	movs	r0, #8
    f63a:	4c0b      	ldr	r4, [pc, #44]	; (f668 <RADIO_Receive+0xb8>)
    f63c:	702b      	strb	r3, [r5, #0]
    f63e:	47a0      	blx	r4
    f640:	2002      	movs	r0, #2
    f642:	47a0      	blx	r4
    f644:	e7d6      	b.n	f5f4 <RADIO_Receive+0x44>
    f646:	46c0      	nop			; (mov r8, r8)
    f648:	20003047 	.word	0x20003047
    f64c:	20002d78 	.word	0x20002d78
    f650:	0000d41d 	.word	0x0000d41d
    f654:	20001ea0 	.word	0x20001ea0
    f658:	0000ec01 	.word	0x0000ec01
    f65c:	0000f271 	.word	0x0000f271
    f660:	0000d741 	.word	0x0000d741
    f664:	0000f3a1 	.word	0x0000f3a1
    f668:	0000ec2d 	.word	0x0000ec2d

0000f66c <RADIO_TxHandler>:
    f66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f66e:	2500      	movs	r5, #0
    f670:	b087      	sub	sp, #28
    f672:	ae03      	add	r6, sp, #12
    f674:	4f56      	ldr	r7, [pc, #344]	; (f7d0 <RADIO_TxHandler+0x164>)
    f676:	7035      	strb	r5, [r6, #0]
    f678:	47b8      	blx	r7
    f67a:	4c56      	ldr	r4, [pc, #344]	; (f7d4 <RADIO_TxHandler+0x168>)
    f67c:	0023      	movs	r3, r4
    f67e:	332d      	adds	r3, #45	; 0x2d
    f680:	7818      	ldrb	r0, [r3, #0]
    f682:	4b55      	ldr	r3, [pc, #340]	; (f7d8 <RADIO_TxHandler+0x16c>)
    f684:	4798      	blx	r3
    f686:	0023      	movs	r3, r4
    f688:	3341      	adds	r3, #65	; 0x41
    f68a:	781b      	ldrb	r3, [r3, #0]
    f68c:	42ab      	cmp	r3, r5
    f68e:	d021      	beq.n	f6d4 <RADIO_TxHandler+0x68>
    f690:	2214      	movs	r2, #20
    f692:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    f694:	4353      	muls	r3, r2
    f696:	0022      	movs	r2, r4
    f698:	3240      	adds	r2, #64	; 0x40
    f69a:	7013      	strb	r3, [r2, #0]
    f69c:	47b8      	blx	r7
    f69e:	0028      	movs	r0, r5
    f6a0:	4b4e      	ldr	r3, [pc, #312]	; (f7dc <RADIO_TxHandler+0x170>)
    f6a2:	4798      	blx	r3
    f6a4:	6820      	ldr	r0, [r4, #0]
    f6a6:	4b4e      	ldr	r3, [pc, #312]	; (f7e0 <RADIO_TxHandler+0x174>)
    f6a8:	4798      	blx	r3
    f6aa:	0023      	movs	r3, r4
    f6ac:	2201      	movs	r2, #1
    f6ae:	334c      	adds	r3, #76	; 0x4c
    f6b0:	0029      	movs	r1, r5
    f6b2:	0028      	movs	r0, r5
    f6b4:	4f4b      	ldr	r7, [pc, #300]	; (f7e4 <RADIO_TxHandler+0x178>)
    f6b6:	801d      	strh	r5, [r3, #0]
    f6b8:	47b8      	blx	r7
    f6ba:	2109      	movs	r1, #9
    f6bc:	2012      	movs	r0, #18
    f6be:	4b4a      	ldr	r3, [pc, #296]	; (f7e8 <RADIO_TxHandler+0x17c>)
    f6c0:	4798      	blx	r3
    f6c2:	2201      	movs	r2, #1
    f6c4:	0029      	movs	r1, r5
    f6c6:	2005      	movs	r0, #5
    f6c8:	47b8      	blx	r7
    f6ca:	0023      	movs	r3, r4
    f6cc:	3340      	adds	r3, #64	; 0x40
    f6ce:	781b      	ldrb	r3, [r3, #0]
    f6d0:	42ab      	cmp	r3, r5
    f6d2:	d846      	bhi.n	f762 <RADIO_TxHandler+0xf6>
    f6d4:	7833      	ldrb	r3, [r6, #0]
    f6d6:	2b07      	cmp	r3, #7
    f6d8:	d076      	beq.n	f7c8 <RADIO_TxHandler+0x15c>
    f6da:	2001      	movs	r0, #1
    f6dc:	4b3f      	ldr	r3, [pc, #252]	; (f7dc <RADIO_TxHandler+0x170>)
    f6de:	4798      	blx	r3
    f6e0:	4b42      	ldr	r3, [pc, #264]	; (f7ec <RADIO_TxHandler+0x180>)
    f6e2:	2004      	movs	r0, #4
    f6e4:	4798      	blx	r3
    f6e6:	4b42      	ldr	r3, [pc, #264]	; (f7f0 <RADIO_TxHandler+0x184>)
    f6e8:	4d3f      	ldr	r5, [pc, #252]	; (f7e8 <RADIO_TxHandler+0x17c>)
    f6ea:	781f      	ldrb	r7, [r3, #0]
    f6ec:	4e41      	ldr	r6, [pc, #260]	; (f7f4 <RADIO_TxHandler+0x188>)
    f6ee:	2f01      	cmp	r7, #1
    f6f0:	d144      	bne.n	f77c <RADIO_TxHandler+0x110>
    f6f2:	7831      	ldrb	r1, [r6, #0]
    f6f4:	2022      	movs	r0, #34	; 0x22
    f6f6:	47a8      	blx	r5
    f6f8:	4b3f      	ldr	r3, [pc, #252]	; (f7f8 <RADIO_TxHandler+0x18c>)
    f6fa:	200a      	movs	r0, #10
    f6fc:	4798      	blx	r3
    f6fe:	21f0      	movs	r1, #240	; 0xf0
    f700:	4008      	ands	r0, r1
    f702:	39e8      	subs	r1, #232	; 0xe8
    f704:	4301      	orrs	r1, r0
    f706:	200a      	movs	r0, #10
    f708:	47a8      	blx	r5
    f70a:	2140      	movs	r1, #64	; 0x40
    f70c:	0008      	movs	r0, r1
    f70e:	47a8      	blx	r5
    f710:	2100      	movs	r1, #0
    f712:	2041      	movs	r0, #65	; 0x41
    f714:	47a8      	blx	r5
    f716:	4b36      	ldr	r3, [pc, #216]	; (f7f0 <RADIO_TxHandler+0x184>)
    f718:	003a      	movs	r2, r7
    f71a:	7819      	ldrb	r1, [r3, #0]
    f71c:	0038      	movs	r0, r7
    f71e:	4b31      	ldr	r3, [pc, #196]	; (f7e4 <RADIO_TxHandler+0x178>)
    f720:	4798      	blx	r3
    f722:	4b36      	ldr	r3, [pc, #216]	; (f7fc <RADIO_TxHandler+0x190>)
    f724:	7832      	ldrb	r2, [r6, #0]
    f726:	6819      	ldr	r1, [r3, #0]
    f728:	2000      	movs	r0, #0
    f72a:	4b35      	ldr	r3, [pc, #212]	; (f800 <RADIO_TxHandler+0x194>)
    f72c:	4798      	blx	r3
    f72e:	0023      	movs	r3, r4
    f730:	3334      	adds	r3, #52	; 0x34
    f732:	7819      	ldrb	r1, [r3, #0]
    f734:	2200      	movs	r2, #0
    f736:	2003      	movs	r0, #3
    f738:	4b2a      	ldr	r3, [pc, #168]	; (f7e4 <RADIO_TxHandler+0x178>)
    f73a:	4798      	blx	r3
    f73c:	4b31      	ldr	r3, [pc, #196]	; (f804 <RADIO_TxHandler+0x198>)
    f73e:	4798      	blx	r3
    f740:	4b31      	ldr	r3, [pc, #196]	; (f808 <RADIO_TxHandler+0x19c>)
    f742:	6018      	str	r0, [r3, #0]
    f744:	6059      	str	r1, [r3, #4]
    f746:	68e3      	ldr	r3, [r4, #12]
    f748:	2b00      	cmp	r3, #0
    f74a:	d03d      	beq.n	f7c8 <RADIO_TxHandler+0x15c>
    f74c:	21fa      	movs	r1, #250	; 0xfa
    f74e:	2200      	movs	r2, #0
    f750:	342f      	adds	r4, #47	; 0x2f
    f752:	0089      	lsls	r1, r1, #2
    f754:	4359      	muls	r1, r3
    f756:	7820      	ldrb	r0, [r4, #0]
    f758:	4b2c      	ldr	r3, [pc, #176]	; (f80c <RADIO_TxHandler+0x1a0>)
    f75a:	9200      	str	r2, [sp, #0]
    f75c:	4c2c      	ldr	r4, [pc, #176]	; (f810 <RADIO_TxHandler+0x1a4>)
    f75e:	47a0      	blx	r4
    f760:	e032      	b.n	f7c8 <RADIO_TxHandler+0x15c>
    f762:	4f2c      	ldr	r7, [pc, #176]	; (f814 <RADIO_TxHandler+0x1a8>)
    f764:	4b2c      	ldr	r3, [pc, #176]	; (f818 <RADIO_TxHandler+0x1ac>)
    f766:	0038      	movs	r0, r7
    f768:	4798      	blx	r3
    f76a:	233e      	movs	r3, #62	; 0x3e
    f76c:	5ee2      	ldrsh	r2, [r4, r3]
    f76e:	2100      	movs	r1, #0
    f770:	5e7b      	ldrsh	r3, [r7, r1]
    f772:	429a      	cmp	r2, r3
    f774:	db14      	blt.n	f7a0 <RADIO_TxHandler+0x134>
    f776:	3501      	adds	r5, #1
    f778:	b2ed      	uxtb	r5, r5
    f77a:	e7a6      	b.n	f6ca <RADIO_TxHandler+0x5e>
    f77c:	2100      	movs	r1, #0
    f77e:	2040      	movs	r0, #64	; 0x40
    f780:	47a8      	blx	r5
    f782:	2100      	movs	r1, #0
    f784:	2041      	movs	r0, #65	; 0x41
    f786:	47a8      	blx	r5
    f788:	0023      	movs	r3, r4
    f78a:	2000      	movs	r0, #0
    f78c:	3358      	adds	r3, #88	; 0x58
    f78e:	7831      	ldrb	r1, [r6, #0]
    f790:	7018      	strb	r0, [r3, #0]
    f792:	47a8      	blx	r5
    f794:	4b19      	ldr	r3, [pc, #100]	; (f7fc <RADIO_TxHandler+0x190>)
    f796:	7831      	ldrb	r1, [r6, #0]
    f798:	6818      	ldr	r0, [r3, #0]
    f79a:	4b20      	ldr	r3, [pc, #128]	; (f81c <RADIO_TxHandler+0x1b0>)
    f79c:	4798      	blx	r3
    f79e:	e7c6      	b.n	f72e <RADIO_TxHandler+0xc2>
    f7a0:	2000      	movs	r0, #0
    f7a2:	4b1f      	ldr	r3, [pc, #124]	; (f820 <RADIO_TxHandler+0x1b4>)
    f7a4:	4798      	blx	r3
    f7a6:	4b1f      	ldr	r3, [pc, #124]	; (f824 <RADIO_TxHandler+0x1b8>)
    f7a8:	4798      	blx	r3
    f7aa:	2307      	movs	r3, #7
    f7ac:	2201      	movs	r2, #1
    f7ae:	7033      	strb	r3, [r6, #0]
    f7b0:	4b1d      	ldr	r3, [pc, #116]	; (f828 <RADIO_TxHandler+0x1bc>)
    f7b2:	701a      	strb	r2, [r3, #0]
    f7b4:	4b1d      	ldr	r3, [pc, #116]	; (f82c <RADIO_TxHandler+0x1c0>)
    f7b6:	781b      	ldrb	r3, [r3, #0]
    f7b8:	079b      	lsls	r3, r3, #30
    f7ba:	d58b      	bpl.n	f6d4 <RADIO_TxHandler+0x68>
    f7bc:	6923      	ldr	r3, [r4, #16]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d088      	beq.n	f6d4 <RADIO_TxHandler+0x68>
    f7c2:	0031      	movs	r1, r6
    f7c4:	2002      	movs	r0, #2
    f7c6:	4798      	blx	r3
    f7c8:	2000      	movs	r0, #0
    f7ca:	b007      	add	sp, #28
    f7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7ce:	46c0      	nop			; (mov r8, r8)
    f7d0:	0000f271 	.word	0x0000f271
    f7d4:	20002d78 	.word	0x20002d78
    f7d8:	0000d41d 	.word	0x0000d41d
    f7dc:	0000eeb5 	.word	0x0000eeb5
    f7e0:	0000e5f9 	.word	0x0000e5f9
    f7e4:	0000d741 	.word	0x0000d741
    f7e8:	0000c519 	.word	0x0000c519
    f7ec:	0000e641 	.word	0x0000e641
    f7f0:	20002dac 	.word	0x20002dac
    f7f4:	20001eb4 	.word	0x20001eb4
    f7f8:	0000c541 	.word	0x0000c541
    f7fc:	20001eb0 	.word	0x20001eb0
    f800:	0000c56d 	.word	0x0000c56d
    f804:	0000d0ad 	.word	0x0000d0ad
    f808:	20001ea8 	.word	0x20001ea8
    f80c:	0000ef1d 	.word	0x0000ef1d
    f810:	0000d105 	.word	0x0000d105
    f814:	20001e9e 	.word	0x20001e9e
    f818:	0000d95d 	.word	0x0000d95d
    f81c:	0000ed31 	.word	0x0000ed31
    f820:	0000eee9 	.word	0x0000eee9
    f824:	0000f3a1 	.word	0x0000f3a1
    f828:	20003047 	.word	0x20003047
    f82c:	20003046 	.word	0x20003046

0000f830 <RADIO_TxDoneHandler>:
    f830:	b5f0      	push	{r4, r5, r6, r7, lr}
    f832:	4b35      	ldr	r3, [pc, #212]	; (f908 <RADIO_TxDoneHandler+0xd8>)
    f834:	b087      	sub	sp, #28
    f836:	881a      	ldrh	r2, [r3, #0]
    f838:	06d2      	lsls	r2, r2, #27
    f83a:	0fd2      	lsrs	r2, r2, #31
    f83c:	9200      	str	r2, [sp, #0]
    f83e:	466a      	mov	r2, sp
    f840:	7810      	ldrb	r0, [r2, #0]
    f842:	881a      	ldrh	r2, [r3, #0]
    f844:	2801      	cmp	r0, #1
    f846:	d12b      	bne.n	f8a0 <RADIO_TxDoneHandler+0x70>
    f848:	4c30      	ldr	r4, [pc, #192]	; (f90c <RADIO_TxDoneHandler+0xdc>)
    f84a:	2110      	movs	r1, #16
    f84c:	0027      	movs	r7, r4
    f84e:	2500      	movs	r5, #0
    f850:	438a      	bics	r2, r1
    f852:	801a      	strh	r2, [r3, #0]
    f854:	3734      	adds	r7, #52	; 0x34
    f856:	0002      	movs	r2, r0
    f858:	7839      	ldrb	r1, [r7, #0]
    f85a:	4b2d      	ldr	r3, [pc, #180]	; (f910 <RADIO_TxDoneHandler+0xe0>)
    f85c:	4798      	blx	r3
    f85e:	68e3      	ldr	r3, [r4, #12]
    f860:	ae03      	add	r6, sp, #12
    f862:	9304      	str	r3, [sp, #16]
    f864:	7035      	strb	r5, [r6, #0]
    f866:	002a      	movs	r2, r5
    f868:	4b29      	ldr	r3, [pc, #164]	; (f910 <RADIO_TxDoneHandler+0xe0>)
    f86a:	7839      	ldrb	r1, [r7, #0]
    f86c:	0028      	movs	r0, r5
    f86e:	4798      	blx	r3
    f870:	466a      	mov	r2, sp
    f872:	4b28      	ldr	r3, [pc, #160]	; (f914 <RADIO_TxDoneHandler+0xe4>)
    f874:	7812      	ldrb	r2, [r2, #0]
    f876:	701a      	strb	r2, [r3, #0]
    f878:	0023      	movs	r3, r4
    f87a:	3358      	adds	r3, #88	; 0x58
    f87c:	701d      	strb	r5, [r3, #0]
    f87e:	4b26      	ldr	r3, [pc, #152]	; (f918 <RADIO_TxDoneHandler+0xe8>)
    f880:	781b      	ldrb	r3, [r3, #0]
    f882:	075b      	lsls	r3, r3, #29
    f884:	d505      	bpl.n	f892 <RADIO_TxDoneHandler+0x62>
    f886:	6923      	ldr	r3, [r4, #16]
    f888:	42ab      	cmp	r3, r5
    f88a:	d002      	beq.n	f892 <RADIO_TxDoneHandler+0x62>
    f88c:	0031      	movs	r1, r6
    f88e:	2004      	movs	r0, #4
    f890:	4798      	blx	r3
    f892:	4b22      	ldr	r3, [pc, #136]	; (f91c <RADIO_TxDoneHandler+0xec>)
    f894:	4798      	blx	r3
    f896:	4b22      	ldr	r3, [pc, #136]	; (f920 <RADIO_TxDoneHandler+0xf0>)
    f898:	4798      	blx	r3
    f89a:	2000      	movs	r0, #0
    f89c:	b007      	add	sp, #28
    f89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8a0:	07d2      	lsls	r2, r2, #31
    f8a2:	d402      	bmi.n	f8aa <RADIO_TxDoneHandler+0x7a>
    f8a4:	881a      	ldrh	r2, [r3, #0]
    f8a6:	0752      	lsls	r2, r2, #29
    f8a8:	d527      	bpl.n	f8fa <RADIO_TxDoneHandler+0xca>
    f8aa:	2601      	movs	r6, #1
    f8ac:	2104      	movs	r1, #4
    f8ae:	881a      	ldrh	r2, [r3, #0]
    f8b0:	4f16      	ldr	r7, [pc, #88]	; (f90c <RADIO_TxDoneHandler+0xdc>)
    f8b2:	43b2      	bics	r2, r6
    f8b4:	801a      	strh	r2, [r3, #0]
    f8b6:	881a      	ldrh	r2, [r3, #0]
    f8b8:	2400      	movs	r4, #0
    f8ba:	438a      	bics	r2, r1
    f8bc:	801a      	strh	r2, [r3, #0]
    f8be:	4b19      	ldr	r3, [pc, #100]	; (f924 <RADIO_TxDoneHandler+0xf4>)
    f8c0:	ad03      	add	r5, sp, #12
    f8c2:	681b      	ldr	r3, [r3, #0]
    f8c4:	702c      	strb	r4, [r5, #0]
    f8c6:	9304      	str	r3, [sp, #16]
    f8c8:	003b      	movs	r3, r7
    f8ca:	3334      	adds	r3, #52	; 0x34
    f8cc:	7819      	ldrb	r1, [r3, #0]
    f8ce:	0022      	movs	r2, r4
    f8d0:	0020      	movs	r0, r4
    f8d2:	4b0f      	ldr	r3, [pc, #60]	; (f910 <RADIO_TxDoneHandler+0xe0>)
    f8d4:	4798      	blx	r3
    f8d6:	4b14      	ldr	r3, [pc, #80]	; (f928 <RADIO_TxDoneHandler+0xf8>)
    f8d8:	4798      	blx	r3
    f8da:	4b0e      	ldr	r3, [pc, #56]	; (f914 <RADIO_TxDoneHandler+0xe4>)
    f8dc:	701e      	strb	r6, [r3, #0]
    f8de:	003b      	movs	r3, r7
    f8e0:	3358      	adds	r3, #88	; 0x58
    f8e2:	701c      	strb	r4, [r3, #0]
    f8e4:	4b0c      	ldr	r3, [pc, #48]	; (f918 <RADIO_TxDoneHandler+0xe8>)
    f8e6:	781b      	ldrb	r3, [r3, #0]
    f8e8:	079b      	lsls	r3, r3, #30
    f8ea:	d5d6      	bpl.n	f89a <RADIO_TxDoneHandler+0x6a>
    f8ec:	693b      	ldr	r3, [r7, #16]
    f8ee:	42a3      	cmp	r3, r4
    f8f0:	d0d3      	beq.n	f89a <RADIO_TxDoneHandler+0x6a>
    f8f2:	0029      	movs	r1, r5
    f8f4:	2002      	movs	r0, #2
    f8f6:	4798      	blx	r3
    f8f8:	e7cf      	b.n	f89a <RADIO_TxDoneHandler+0x6a>
    f8fa:	881b      	ldrh	r3, [r3, #0]
    f8fc:	059b      	lsls	r3, r3, #22
    f8fe:	d5cc      	bpl.n	f89a <RADIO_TxDoneHandler+0x6a>
    f900:	4b0a      	ldr	r3, [pc, #40]	; (f92c <RADIO_TxDoneHandler+0xfc>)
    f902:	4798      	blx	r3
    f904:	e7c9      	b.n	f89a <RADIO_TxDoneHandler+0x6a>
    f906:	46c0      	nop			; (mov r8, r8)
    f908:	20003044 	.word	0x20003044
    f90c:	20002d78 	.word	0x20002d78
    f910:	0000d741 	.word	0x0000d741
    f914:	20003047 	.word	0x20003047
    f918:	20003046 	.word	0x20003046
    f91c:	0000c4d9 	.word	0x0000c4d9
    f920:	0000f3bd 	.word	0x0000f3bd
    f924:	20001ea8 	.word	0x20001ea8
    f928:	0000f3a1 	.word	0x0000f3a1
    f92c:	00013395 	.word	0x00013395

0000f930 <RADIO_RxDoneHandler>:
    f930:	b5f0      	push	{r4, r5, r6, r7, lr}
    f932:	4b97      	ldr	r3, [pc, #604]	; (fb90 <RADIO_RxDoneHandler+0x260>)
    f934:	b085      	sub	sp, #20
    f936:	881c      	ldrh	r4, [r3, #0]
    f938:	881a      	ldrh	r2, [r3, #0]
    f93a:	06a4      	lsls	r4, r4, #26
    f93c:	0fe4      	lsrs	r4, r4, #31
    f93e:	b2e0      	uxtb	r0, r4
    f940:	2801      	cmp	r0, #1
    f942:	d126      	bne.n	f992 <RADIO_RxDoneHandler+0x62>
    f944:	4d93      	ldr	r5, [pc, #588]	; (fb94 <RADIO_RxDoneHandler+0x264>)
    f946:	2120      	movs	r1, #32
    f948:	002e      	movs	r6, r5
    f94a:	438a      	bics	r2, r1
    f94c:	801a      	strh	r2, [r3, #0]
    f94e:	3634      	adds	r6, #52	; 0x34
    f950:	0002      	movs	r2, r0
    f952:	7831      	ldrb	r1, [r6, #0]
    f954:	4f90      	ldr	r7, [pc, #576]	; (fb98 <RADIO_RxDoneHandler+0x268>)
    f956:	47b8      	blx	r7
    f958:	2200      	movs	r2, #0
    f95a:	7831      	ldrb	r1, [r6, #0]
    f95c:	0010      	movs	r0, r2
    f95e:	47b8      	blx	r7
    f960:	4b8e      	ldr	r3, [pc, #568]	; (fb9c <RADIO_RxDoneHandler+0x26c>)
    f962:	4798      	blx	r3
    f964:	4b8e      	ldr	r3, [pc, #568]	; (fba0 <RADIO_RxDoneHandler+0x270>)
    f966:	002a      	movs	r2, r5
    f968:	701c      	strb	r4, [r3, #0]
    f96a:	2300      	movs	r3, #0
    f96c:	322c      	adds	r2, #44	; 0x2c
    f96e:	7013      	strb	r3, [r2, #0]
    f970:	002a      	movs	r2, r5
    f972:	a901      	add	r1, sp, #4
    f974:	3258      	adds	r2, #88	; 0x58
    f976:	7013      	strb	r3, [r2, #0]
    f978:	700b      	strb	r3, [r1, #0]
    f97a:	4b8a      	ldr	r3, [pc, #552]	; (fba4 <RADIO_RxDoneHandler+0x274>)
    f97c:	781b      	ldrb	r3, [r3, #0]
    f97e:	071b      	lsls	r3, r3, #28
    f980:	d504      	bpl.n	f98c <RADIO_RxDoneHandler+0x5c>
    f982:	692b      	ldr	r3, [r5, #16]
    f984:	2008      	movs	r0, #8
    f986:	2b00      	cmp	r3, #0
    f988:	d000      	beq.n	f98c <RADIO_RxDoneHandler+0x5c>
    f98a:	e084      	b.n	fa96 <RADIO_RxDoneHandler+0x166>
    f98c:	2000      	movs	r0, #0
    f98e:	b005      	add	sp, #20
    f990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f992:	0652      	lsls	r2, r2, #25
    f994:	d402      	bmi.n	f99c <RADIO_RxDoneHandler+0x6c>
    f996:	881a      	ldrh	r2, [r3, #0]
    f998:	0612      	lsls	r2, r2, #24
    f99a:	d523      	bpl.n	f9e4 <RADIO_RxDoneHandler+0xb4>
    f99c:	2140      	movs	r1, #64	; 0x40
    f99e:	881a      	ldrh	r2, [r3, #0]
    f9a0:	4c7c      	ldr	r4, [pc, #496]	; (fb94 <RADIO_RxDoneHandler+0x264>)
    f9a2:	438a      	bics	r2, r1
    f9a4:	801a      	strh	r2, [r3, #0]
    f9a6:	881a      	ldrh	r2, [r3, #0]
    f9a8:	1849      	adds	r1, r1, r1
    f9aa:	438a      	bics	r2, r1
    f9ac:	801a      	strh	r2, [r3, #0]
    f9ae:	0023      	movs	r3, r4
    f9b0:	2200      	movs	r2, #0
    f9b2:	3334      	adds	r3, #52	; 0x34
    f9b4:	7819      	ldrb	r1, [r3, #0]
    f9b6:	0010      	movs	r0, r2
    f9b8:	4b77      	ldr	r3, [pc, #476]	; (fb98 <RADIO_RxDoneHandler+0x268>)
    f9ba:	4798      	blx	r3
    f9bc:	4b77      	ldr	r3, [pc, #476]	; (fb9c <RADIO_RxDoneHandler+0x26c>)
    f9be:	4798      	blx	r3
    f9c0:	2201      	movs	r2, #1
    f9c2:	4b77      	ldr	r3, [pc, #476]	; (fba0 <RADIO_RxDoneHandler+0x270>)
    f9c4:	a901      	add	r1, sp, #4
    f9c6:	701a      	strb	r2, [r3, #0]
    f9c8:	0022      	movs	r2, r4
    f9ca:	2300      	movs	r3, #0
    f9cc:	322c      	adds	r2, #44	; 0x2c
    f9ce:	7013      	strb	r3, [r2, #0]
    f9d0:	0022      	movs	r2, r4
    f9d2:	3258      	adds	r2, #88	; 0x58
    f9d4:	7013      	strb	r3, [r2, #0]
    f9d6:	700b      	strb	r3, [r1, #0]
    f9d8:	4b72      	ldr	r3, [pc, #456]	; (fba4 <RADIO_RxDoneHandler+0x274>)
    f9da:	781b      	ldrb	r3, [r3, #0]
    f9dc:	071b      	lsls	r3, r3, #28
    f9de:	d5d5      	bpl.n	f98c <RADIO_RxDoneHandler+0x5c>
    f9e0:	6923      	ldr	r3, [r4, #16]
    f9e2:	e7cf      	b.n	f984 <RADIO_RxDoneHandler+0x54>
    f9e4:	881a      	ldrh	r2, [r3, #0]
    f9e6:	0792      	lsls	r2, r2, #30
    f9e8:	d571      	bpl.n	face <RADIO_RxDoneHandler+0x19e>
    f9ea:	2102      	movs	r1, #2
    f9ec:	881a      	ldrh	r2, [r3, #0]
    f9ee:	4d6e      	ldr	r5, [pc, #440]	; (fba8 <RADIO_RxDoneHandler+0x278>)
    f9f0:	438a      	bics	r2, r1
    f9f2:	801a      	strh	r2, [r3, #0]
    f9f4:	2013      	movs	r0, #19
    f9f6:	47a8      	blx	r5
    f9f8:	4c66      	ldr	r4, [pc, #408]	; (fb94 <RADIO_RxDoneHandler+0x264>)
    f9fa:	2100      	movs	r1, #0
    f9fc:	0026      	movs	r6, r4
    f9fe:	362c      	adds	r6, #44	; 0x2c
    fa00:	7030      	strb	r0, [r6, #0]
    fa02:	4b6a      	ldr	r3, [pc, #424]	; (fbac <RADIO_RxDoneHandler+0x27c>)
    fa04:	200d      	movs	r0, #13
    fa06:	4798      	blx	r3
    fa08:	7832      	ldrb	r2, [r6, #0]
    fa0a:	4b69      	ldr	r3, [pc, #420]	; (fbb0 <RADIO_RxDoneHandler+0x280>)
    fa0c:	b2d2      	uxtb	r2, r2
    fa0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fa10:	2000      	movs	r0, #0
    fa12:	4798      	blx	r3
    fa14:	2019      	movs	r0, #25
    fa16:	47a8      	blx	r5
    fa18:	0023      	movs	r3, r4
    fa1a:	b240      	sxtb	r0, r0
    fa1c:	3332      	adds	r3, #50	; 0x32
    fa1e:	2800      	cmp	r0, #0
    fa20:	da3b      	bge.n	fa9a <RADIO_RxDoneHandler+0x16a>
    fa22:	4240      	negs	r0, r0
    fa24:	1080      	asrs	r0, r0, #2
    fa26:	4240      	negs	r0, r0
    fa28:	7018      	strb	r0, [r3, #0]
    fa2a:	201a      	movs	r0, #26
    fa2c:	47a8      	blx	r5
    fa2e:	0023      	movs	r3, r4
    fa30:	3332      	adds	r3, #50	; 0x32
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	b202      	sxth	r2, r0
    fa36:	b25b      	sxtb	r3, r3
    fa38:	4d5e      	ldr	r5, [pc, #376]	; (fbb4 <RADIO_RxDoneHandler+0x284>)
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	da36      	bge.n	faac <RADIO_RxDoneHandler+0x17c>
    fa3e:	6821      	ldr	r1, [r4, #0]
    fa40:	4e5d      	ldr	r6, [pc, #372]	; (fbb8 <RADIO_RxDoneHandler+0x288>)
    fa42:	198e      	adds	r6, r1, r6
    fa44:	42ae      	cmp	r6, r5
    fa46:	d82a      	bhi.n	fa9e <RADIO_RxDoneHandler+0x16e>
    fa48:	3b9d      	subs	r3, #157	; 0x9d
    fa4a:	181b      	adds	r3, r3, r0
    fa4c:	1112      	asrs	r2, r2, #4
    fa4e:	189b      	adds	r3, r3, r2
    fa50:	0022      	movs	r2, r4
    fa52:	3256      	adds	r2, #86	; 0x56
    fa54:	8013      	strh	r3, [r2, #0]
    fa56:	0023      	movs	r3, r4
    fa58:	2200      	movs	r2, #0
    fa5a:	3334      	adds	r3, #52	; 0x34
    fa5c:	7819      	ldrb	r1, [r3, #0]
    fa5e:	0010      	movs	r0, r2
    fa60:	4b4d      	ldr	r3, [pc, #308]	; (fb98 <RADIO_RxDoneHandler+0x268>)
    fa62:	4798      	blx	r3
    fa64:	4b4d      	ldr	r3, [pc, #308]	; (fb9c <RADIO_RxDoneHandler+0x26c>)
    fa66:	4798      	blx	r3
    fa68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fa6a:	a901      	add	r1, sp, #4
    fa6c:	604b      	str	r3, [r1, #4]
    fa6e:	0023      	movs	r3, r4
    fa70:	332c      	adds	r3, #44	; 0x2c
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	2201      	movs	r2, #1
    fa76:	720b      	strb	r3, [r1, #8]
    fa78:	2300      	movs	r3, #0
    fa7a:	700b      	strb	r3, [r1, #0]
    fa7c:	4b48      	ldr	r3, [pc, #288]	; (fba0 <RADIO_RxDoneHandler+0x270>)
    fa7e:	701a      	strb	r2, [r3, #0]
    fa80:	4b48      	ldr	r3, [pc, #288]	; (fba4 <RADIO_RxDoneHandler+0x274>)
    fa82:	7818      	ldrb	r0, [r3, #0]
    fa84:	07c0      	lsls	r0, r0, #31
    fa86:	0fc0      	lsrs	r0, r0, #31
    fa88:	4290      	cmp	r0, r2
    fa8a:	d000      	beq.n	fa8e <RADIO_RxDoneHandler+0x15e>
    fa8c:	e77e      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fa8e:	6923      	ldr	r3, [r4, #16]
    fa90:	2b00      	cmp	r3, #0
    fa92:	d100      	bne.n	fa96 <RADIO_RxDoneHandler+0x166>
    fa94:	e77a      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fa96:	4798      	blx	r3
    fa98:	e778      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fa9a:	1080      	asrs	r0, r0, #2
    fa9c:	e7c4      	b.n	fa28 <RADIO_RxDoneHandler+0xf8>
    fa9e:	4d47      	ldr	r5, [pc, #284]	; (fbbc <RADIO_RxDoneHandler+0x28c>)
    faa0:	1949      	adds	r1, r1, r5
    faa2:	4d47      	ldr	r5, [pc, #284]	; (fbc0 <RADIO_RxDoneHandler+0x290>)
    faa4:	42a9      	cmp	r1, r5
    faa6:	d8d6      	bhi.n	fa56 <RADIO_RxDoneHandler+0x126>
    faa8:	3ba4      	subs	r3, #164	; 0xa4
    faaa:	e7ce      	b.n	fa4a <RADIO_RxDoneHandler+0x11a>
    faac:	6823      	ldr	r3, [r4, #0]
    faae:	4942      	ldr	r1, [pc, #264]	; (fbb8 <RADIO_RxDoneHandler+0x288>)
    fab0:	1859      	adds	r1, r3, r1
    fab2:	42a9      	cmp	r1, r5
    fab4:	d802      	bhi.n	fabc <RADIO_RxDoneHandler+0x18c>
    fab6:	0003      	movs	r3, r0
    fab8:	3b9d      	subs	r3, #157	; 0x9d
    faba:	e7c7      	b.n	fa4c <RADIO_RxDoneHandler+0x11c>
    fabc:	493f      	ldr	r1, [pc, #252]	; (fbbc <RADIO_RxDoneHandler+0x28c>)
    fabe:	185b      	adds	r3, r3, r1
    fac0:	493f      	ldr	r1, [pc, #252]	; (fbc0 <RADIO_RxDoneHandler+0x290>)
    fac2:	428b      	cmp	r3, r1
    fac4:	d8c7      	bhi.n	fa56 <RADIO_RxDoneHandler+0x126>
    fac6:	38a4      	subs	r0, #164	; 0xa4
    fac8:	1113      	asrs	r3, r2, #4
    faca:	18c3      	adds	r3, r0, r3
    facc:	e7c0      	b.n	fa50 <RADIO_RxDoneHandler+0x120>
    face:	881a      	ldrh	r2, [r3, #0]
    fad0:	0712      	lsls	r2, r2, #28
    fad2:	0fd5      	lsrs	r5, r2, #31
    fad4:	2a00      	cmp	r2, #0
    fad6:	da27      	bge.n	fb28 <RADIO_RxDoneHandler+0x1f8>
    fad8:	2108      	movs	r1, #8
    fada:	881a      	ldrh	r2, [r3, #0]
    fadc:	4c2d      	ldr	r4, [pc, #180]	; (fb94 <RADIO_RxDoneHandler+0x264>)
    fade:	438a      	bics	r2, r1
    fae0:	801a      	strh	r2, [r3, #0]
    fae2:	0023      	movs	r3, r4
    fae4:	2280      	movs	r2, #128	; 0x80
    fae6:	3332      	adds	r3, #50	; 0x32
    fae8:	701a      	strb	r2, [r3, #0]
    faea:	0023      	movs	r3, r4
    faec:	2200      	movs	r2, #0
    faee:	3334      	adds	r3, #52	; 0x34
    faf0:	7819      	ldrb	r1, [r3, #0]
    faf2:	0010      	movs	r0, r2
    faf4:	4b28      	ldr	r3, [pc, #160]	; (fb98 <RADIO_RxDoneHandler+0x268>)
    faf6:	4798      	blx	r3
    faf8:	4b28      	ldr	r3, [pc, #160]	; (fb9c <RADIO_RxDoneHandler+0x26c>)
    fafa:	4798      	blx	r3
    fafc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fafe:	a901      	add	r1, sp, #4
    fb00:	604b      	str	r3, [r1, #4]
    fb02:	0023      	movs	r3, r4
    fb04:	332c      	adds	r3, #44	; 0x2c
    fb06:	781b      	ldrb	r3, [r3, #0]
    fb08:	0022      	movs	r2, r4
    fb0a:	720b      	strb	r3, [r1, #8]
    fb0c:	2300      	movs	r3, #0
    fb0e:	3258      	adds	r2, #88	; 0x58
    fb10:	7013      	strb	r3, [r2, #0]
    fb12:	700b      	strb	r3, [r1, #0]
    fb14:	4b22      	ldr	r3, [pc, #136]	; (fba0 <RADIO_RxDoneHandler+0x270>)
    fb16:	701d      	strb	r5, [r3, #0]
    fb18:	4b22      	ldr	r3, [pc, #136]	; (fba4 <RADIO_RxDoneHandler+0x274>)
    fb1a:	7818      	ldrb	r0, [r3, #0]
    fb1c:	07c0      	lsls	r0, r0, #31
    fb1e:	0fc0      	lsrs	r0, r0, #31
    fb20:	2801      	cmp	r0, #1
    fb22:	d000      	beq.n	fb26 <RADIO_RxDoneHandler+0x1f6>
    fb24:	e732      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fb26:	e7b2      	b.n	fa8e <RADIO_RxDoneHandler+0x15e>
    fb28:	881a      	ldrh	r2, [r3, #0]
    fb2a:	05d2      	lsls	r2, r2, #23
    fb2c:	0fd5      	lsrs	r5, r2, #31
    fb2e:	2a00      	cmp	r2, #0
    fb30:	db00      	blt.n	fb34 <RADIO_RxDoneHandler+0x204>
    fb32:	e72b      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fb34:	4c17      	ldr	r4, [pc, #92]	; (fb94 <RADIO_RxDoneHandler+0x264>)
    fb36:	881a      	ldrh	r2, [r3, #0]
    fb38:	0026      	movs	r6, r4
    fb3a:	4922      	ldr	r1, [pc, #136]	; (fbc4 <RADIO_RxDoneHandler+0x294>)
    fb3c:	362c      	adds	r6, #44	; 0x2c
    fb3e:	400a      	ands	r2, r1
    fb40:	801a      	strh	r2, [r3, #0]
    fb42:	7832      	ldrb	r2, [r6, #0]
    fb44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fb46:	b2d2      	uxtb	r2, r2
    fb48:	2000      	movs	r0, #0
    fb4a:	4b19      	ldr	r3, [pc, #100]	; (fbb0 <RADIO_RxDoneHandler+0x280>)
    fb4c:	4798      	blx	r3
    fb4e:	0023      	movs	r3, r4
    fb50:	2200      	movs	r2, #0
    fb52:	3334      	adds	r3, #52	; 0x34
    fb54:	7819      	ldrb	r1, [r3, #0]
    fb56:	0010      	movs	r0, r2
    fb58:	4b0f      	ldr	r3, [pc, #60]	; (fb98 <RADIO_RxDoneHandler+0x268>)
    fb5a:	4798      	blx	r3
    fb5c:	4b0f      	ldr	r3, [pc, #60]	; (fb9c <RADIO_RxDoneHandler+0x26c>)
    fb5e:	4798      	blx	r3
    fb60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fb62:	a901      	add	r1, sp, #4
    fb64:	604b      	str	r3, [r1, #4]
    fb66:	7833      	ldrb	r3, [r6, #0]
    fb68:	0022      	movs	r2, r4
    fb6a:	720b      	strb	r3, [r1, #8]
    fb6c:	2300      	movs	r3, #0
    fb6e:	3258      	adds	r2, #88	; 0x58
    fb70:	7013      	strb	r3, [r2, #0]
    fb72:	700b      	strb	r3, [r1, #0]
    fb74:	4b0a      	ldr	r3, [pc, #40]	; (fba0 <RADIO_RxDoneHandler+0x270>)
    fb76:	701d      	strb	r5, [r3, #0]
    fb78:	4b0a      	ldr	r3, [pc, #40]	; (fba4 <RADIO_RxDoneHandler+0x274>)
    fb7a:	781b      	ldrb	r3, [r3, #0]
    fb7c:	06db      	lsls	r3, r3, #27
    fb7e:	d400      	bmi.n	fb82 <RADIO_RxDoneHandler+0x252>
    fb80:	e704      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fb82:	6923      	ldr	r3, [r4, #16]
    fb84:	2b00      	cmp	r3, #0
    fb86:	d100      	bne.n	fb8a <RADIO_RxDoneHandler+0x25a>
    fb88:	e700      	b.n	f98c <RADIO_RxDoneHandler+0x5c>
    fb8a:	2010      	movs	r0, #16
    fb8c:	e783      	b.n	fa96 <RADIO_RxDoneHandler+0x166>
    fb8e:	46c0      	nop			; (mov r8, r8)
    fb90:	20003044 	.word	0x20003044
    fb94:	20002d78 	.word	0x20002d78
    fb98:	0000d741 	.word	0x0000d741
    fb9c:	0000f3a1 	.word	0x0000f3a1
    fba0:	20003047 	.word	0x20003047
    fba4:	20003046 	.word	0x20003046
    fba8:	0000c541 	.word	0x0000c541
    fbac:	0000c519 	.word	0x0000c519
    fbb0:	0000c5ad 	.word	0x0000c5ad
    fbb4:	096ae380 	.word	0x096ae380
    fbb8:	cc9eec80 	.word	0xcc9eec80
    fbbc:	e78fe580 	.word	0xe78fe580
    fbc0:	06dac2c0 	.word	0x06dac2c0
    fbc4:	fffffeff 	.word	0xfffffeff

0000fbc8 <MacClearCommands>:
    fbc8:	490e      	ldr	r1, [pc, #56]	; (fc04 <MacClearCommands+0x3c>)
    fbca:	b570      	push	{r4, r5, r6, lr}
    fbcc:	000b      	movs	r3, r1
    fbce:	33e0      	adds	r3, #224	; 0xe0
    fbd0:	7818      	ldrb	r0, [r3, #0]
    fbd2:	2303      	movs	r3, #3
    fbd4:	25a4      	movs	r5, #164	; 0xa4
    fbd6:	4343      	muls	r3, r0
    fbd8:	2401      	movs	r4, #1
    fbda:	20ff      	movs	r0, #255	; 0xff
    fbdc:	3399      	adds	r3, #153	; 0x99
    fbde:	4a0a      	ldr	r2, [pc, #40]	; (fc08 <MacClearCommands+0x40>)
    fbe0:	185b      	adds	r3, r3, r1
    fbe2:	00ed      	lsls	r5, r5, #3
    fbe4:	429a      	cmp	r2, r3
    fbe6:	d100      	bne.n	fbea <MacClearCommands+0x22>
    fbe8:	bd70      	pop	{r4, r5, r6, pc}
    fbea:	7811      	ldrb	r1, [r2, #0]
    fbec:	29ff      	cmp	r1, #255	; 0xff
    fbee:	d006      	beq.n	fbfe <MacClearCommands+0x36>
    fbf0:	290a      	cmp	r1, #10
    fbf2:	d803      	bhi.n	fbfc <MacClearCommands+0x34>
    fbf4:	0026      	movs	r6, r4
    fbf6:	408e      	lsls	r6, r1
    fbf8:	422e      	tst	r6, r5
    fbfa:	d100      	bne.n	fbfe <MacClearCommands+0x36>
    fbfc:	7010      	strb	r0, [r2, #0]
    fbfe:	3203      	adds	r2, #3
    fc00:	e7f0      	b.n	fbe4 <MacClearCommands+0x1c>
    fc02:	46c0      	nop			; (mov r8, r8)
    fc04:	20003170 	.word	0x20003170
    fc08:	20003209 	.word	0x20003209

0000fc0c <CountfOptsLength>:
    fc0c:	2200      	movs	r2, #0
    fc0e:	490d      	ldr	r1, [pc, #52]	; (fc44 <CountfOptsLength+0x38>)
    fc10:	b570      	push	{r4, r5, r6, lr}
    fc12:	000b      	movs	r3, r1
    fc14:	0010      	movs	r0, r2
    fc16:	2503      	movs	r5, #3
    fc18:	33e0      	adds	r3, #224	; 0xe0
    fc1a:	781c      	ldrb	r4, [r3, #0]
    fc1c:	4e0a      	ldr	r6, [pc, #40]	; (fc48 <CountfOptsLength+0x3c>)
    fc1e:	b2d3      	uxtb	r3, r2
    fc20:	429c      	cmp	r4, r3
    fc22:	d800      	bhi.n	fc26 <CountfOptsLength+0x1a>
    fc24:	bd70      	pop	{r4, r5, r6, pc}
    fc26:	002b      	movs	r3, r5
    fc28:	4353      	muls	r3, r2
    fc2a:	3399      	adds	r3, #153	; 0x99
    fc2c:	5ccb      	ldrb	r3, [r1, r3]
    fc2e:	2bff      	cmp	r3, #255	; 0xff
    fc30:	d006      	beq.n	fc40 <CountfOptsLength+0x34>
    fc32:	18f3      	adds	r3, r6, r3
    fc34:	3b02      	subs	r3, #2
    fc36:	781b      	ldrb	r3, [r3, #0]
    fc38:	18c3      	adds	r3, r0, r3
    fc3a:	2b0f      	cmp	r3, #15
    fc3c:	dcf2      	bgt.n	fc24 <CountfOptsLength+0x18>
    fc3e:	b2d8      	uxtb	r0, r3
    fc40:	3201      	adds	r2, #1
    fc42:	e7ec      	b.n	fc1e <CountfOptsLength+0x12>
    fc44:	20003170 	.word	0x20003170
    fc48:	00018d4f 	.word	0x00018d4f

0000fc4c <LorawanGetMaxPayloadSize>:
    fc4c:	b513      	push	{r0, r1, r4, lr}
    fc4e:	466b      	mov	r3, sp
    fc50:	1ddc      	adds	r4, r3, #7
    fc52:	2300      	movs	r3, #0
    fc54:	0022      	movs	r2, r4
    fc56:	7023      	strb	r3, [r4, #0]
    fc58:	4903      	ldr	r1, [pc, #12]	; (fc68 <LorawanGetMaxPayloadSize+0x1c>)
    fc5a:	4b04      	ldr	r3, [pc, #16]	; (fc6c <LorawanGetMaxPayloadSize+0x20>)
    fc5c:	2005      	movs	r0, #5
    fc5e:	4798      	blx	r3
    fc60:	7820      	ldrb	r0, [r4, #0]
    fc62:	3808      	subs	r0, #8
    fc64:	b2c0      	uxtb	r0, r0
    fc66:	bd16      	pop	{r1, r2, r4, pc}
    fc68:	20003257 	.word	0x20003257
    fc6c:	0000cbbd 	.word	0x0000cbbd

0000fc70 <UpdateReceiveDelays>:
    fc70:	23fa      	movs	r3, #250	; 0xfa
    fc72:	b570      	push	{r4, r5, r6, lr}
    fc74:	009b      	lsls	r3, r3, #2
    fc76:	4c0b      	ldr	r4, [pc, #44]	; (fca4 <UpdateReceiveDelays+0x34>)
    fc78:	2800      	cmp	r0, #0
    fc7a:	d000      	beq.n	fc7e <UpdateReceiveDelays+0xe>
    fc7c:	4343      	muls	r3, r0
    fc7e:	0022      	movs	r2, r4
    fc80:	4d09      	ldr	r5, [pc, #36]	; (fca8 <UpdateReceiveDelays+0x38>)
    fc82:	32d0      	adds	r2, #208	; 0xd0
    fc84:	210c      	movs	r1, #12
    fc86:	2000      	movs	r0, #0
    fc88:	8013      	strh	r3, [r2, #0]
    fc8a:	47a8      	blx	r5
    fc8c:	0023      	movs	r3, r4
    fc8e:	22fa      	movs	r2, #250	; 0xfa
    fc90:	33d0      	adds	r3, #208	; 0xd0
    fc92:	881b      	ldrh	r3, [r3, #0]
    fc94:	0092      	lsls	r2, r2, #2
    fc96:	189b      	adds	r3, r3, r2
    fc98:	34d2      	adds	r4, #210	; 0xd2
    fc9a:	210d      	movs	r1, #13
    fc9c:	2000      	movs	r0, #0
    fc9e:	8023      	strh	r3, [r4, #0]
    fca0:	47a8      	blx	r5
    fca2:	bd70      	pop	{r4, r5, r6, pc}
    fca4:	20003170 	.word	0x20003170
    fca8:	00009385 	.word	0x00009385

0000fcac <IncludeMacCommandsResponse>:
    fcac:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcae:	0005      	movs	r5, r0
    fcb0:	2600      	movs	r6, #0
    fcb2:	b087      	sub	sp, #28
    fcb4:	880c      	ldrh	r4, [r1, #0]
    fcb6:	9101      	str	r1, [sp, #4]
    fcb8:	9203      	str	r2, [sp, #12]
    fcba:	4f77      	ldr	r7, [pc, #476]	; (fe98 <IncludeMacCommandsResponse+0x1ec>)
    fcbc:	003b      	movs	r3, r7
    fcbe:	33e0      	adds	r3, #224	; 0xe0
    fcc0:	781b      	ldrb	r3, [r3, #0]
    fcc2:	42b3      	cmp	r3, r6
    fcc4:	d913      	bls.n	fcee <IncludeMacCommandsResponse+0x42>
    fcc6:	9b03      	ldr	r3, [sp, #12]
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d019      	beq.n	fd00 <IncludeMacCommandsResponse+0x54>
    fccc:	2303      	movs	r3, #3
    fcce:	4373      	muls	r3, r6
    fcd0:	18fb      	adds	r3, r7, r3
    fcd2:	3399      	adds	r3, #153	; 0x99
    fcd4:	7819      	ldrb	r1, [r3, #0]
    fcd6:	29ff      	cmp	r1, #255	; 0xff
    fcd8:	d012      	beq.n	fd00 <IncludeMacCommandsResponse+0x54>
    fcda:	9b01      	ldr	r3, [sp, #4]
    fcdc:	881a      	ldrh	r2, [r3, #0]
    fcde:	4b6f      	ldr	r3, [pc, #444]	; (fe9c <IncludeMacCommandsResponse+0x1f0>)
    fce0:	1aa2      	subs	r2, r4, r2
    fce2:	185b      	adds	r3, r3, r1
    fce4:	3b02      	subs	r3, #2
    fce6:	781b      	ldrb	r3, [r3, #0]
    fce8:	18d3      	adds	r3, r2, r3
    fcea:	2b0f      	cmp	r3, #15
    fcec:	dd08      	ble.n	fd00 <IncludeMacCommandsResponse+0x54>
    fcee:	2207      	movs	r2, #7
    fcf0:	2100      	movs	r1, #0
    fcf2:	4b6b      	ldr	r3, [pc, #428]	; (fea0 <IncludeMacCommandsResponse+0x1f4>)
    fcf4:	486b      	ldr	r0, [pc, #428]	; (fea4 <IncludeMacCommandsResponse+0x1f8>)
    fcf6:	4798      	blx	r3
    fcf8:	9b01      	ldr	r3, [sp, #4]
    fcfa:	801c      	strh	r4, [r3, #0]
    fcfc:	b007      	add	sp, #28
    fcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd00:	2303      	movs	r3, #3
    fd02:	4373      	muls	r3, r6
    fd04:	18fb      	adds	r3, r7, r3
    fd06:	3399      	adds	r3, #153	; 0x99
    fd08:	781b      	ldrb	r3, [r3, #0]
    fd0a:	1e98      	subs	r0, r3, #2
    fd0c:	280b      	cmp	r0, #11
    fd0e:	d862      	bhi.n	fdd6 <IncludeMacCommandsResponse+0x12a>
    fd10:	f003 fc42 	bl	13598 <__gnu_thumb1_case_uqi>
    fd14:	27a20698 	.word	0x27a20698
    fd18:	7da26748 	.word	0x7da26748
    fd1c:	a6616182 	.word	0xa6616182
    fd20:	2303      	movs	r3, #3
    fd22:	2200      	movs	r2, #0
    fd24:	552b      	strb	r3, [r5, r4]
    fd26:	1c63      	adds	r3, r4, #1
    fd28:	b29b      	uxth	r3, r3
    fd2a:	18eb      	adds	r3, r5, r3
    fd2c:	4f5a      	ldr	r7, [pc, #360]	; (fe98 <IncludeMacCommandsResponse+0x1ec>)
    fd2e:	485e      	ldr	r0, [pc, #376]	; (fea8 <IncludeMacCommandsResponse+0x1fc>)
    fd30:	701a      	strb	r2, [r3, #0]
    fd32:	5c39      	ldrb	r1, [r7, r0]
    fd34:	3201      	adds	r2, #1
    fd36:	4011      	ands	r1, r2
    fd38:	466a      	mov	r2, sp
    fd3a:	9102      	str	r1, [sp, #8]
    fd3c:	7a12      	ldrb	r2, [r2, #8]
    fd3e:	701a      	strb	r2, [r3, #0]
    fd40:	5c3a      	ldrb	r2, [r7, r0]
    fd42:	4694      	mov	ip, r2
    fd44:	2202      	movs	r2, #2
    fd46:	4661      	mov	r1, ip
    fd48:	4211      	tst	r1, r2
    fd4a:	d002      	beq.n	fd52 <IncludeMacCommandsResponse+0xa6>
    fd4c:	9902      	ldr	r1, [sp, #8]
    fd4e:	430a      	orrs	r2, r1
    fd50:	701a      	strb	r2, [r3, #0]
    fd52:	2204      	movs	r2, #4
    fd54:	5c39      	ldrb	r1, [r7, r0]
    fd56:	4211      	tst	r1, r2
    fd58:	d071      	beq.n	fe3e <IncludeMacCommandsResponse+0x192>
    fd5a:	7819      	ldrb	r1, [r3, #0]
    fd5c:	430a      	orrs	r2, r1
    fd5e:	701a      	strb	r2, [r3, #0]
    fd60:	e06d      	b.n	fe3e <IncludeMacCommandsResponse+0x192>
    fd62:	2305      	movs	r3, #5
    fd64:	2103      	movs	r1, #3
    fd66:	2200      	movs	r2, #0
    fd68:	552b      	strb	r3, [r5, r4]
    fd6a:	1c63      	adds	r3, r4, #1
    fd6c:	b29b      	uxth	r3, r3
    fd6e:	4371      	muls	r1, r6
    fd70:	18eb      	adds	r3, r5, r3
    fd72:	701a      	strb	r2, [r3, #0]
    fd74:	4a48      	ldr	r2, [pc, #288]	; (fe98 <IncludeMacCommandsResponse+0x1ec>)
    fd76:	1851      	adds	r1, r2, r1
    fd78:	3198      	adds	r1, #152	; 0x98
    fd7a:	7888      	ldrb	r0, [r1, #2]
    fd7c:	0700      	lsls	r0, r0, #28
    fd7e:	0fc0      	lsrs	r0, r0, #31
    fd80:	7018      	strb	r0, [r3, #0]
    fd82:	7889      	ldrb	r1, [r1, #2]
    fd84:	b2c7      	uxtb	r7, r0
    fd86:	06c9      	lsls	r1, r1, #27
    fd88:	d502      	bpl.n	fd90 <IncludeMacCommandsResponse+0xe4>
    fd8a:	2102      	movs	r1, #2
    fd8c:	4339      	orrs	r1, r7
    fd8e:	7019      	strb	r1, [r3, #0]
    fd90:	2103      	movs	r1, #3
    fd92:	4371      	muls	r1, r6
    fd94:	1852      	adds	r2, r2, r1
    fd96:	3298      	adds	r2, #152	; 0x98
    fd98:	7892      	ldrb	r2, [r2, #2]
    fd9a:	0692      	lsls	r2, r2, #26
    fd9c:	d54f      	bpl.n	fe3e <IncludeMacCommandsResponse+0x192>
    fd9e:	7819      	ldrb	r1, [r3, #0]
    fda0:	2204      	movs	r2, #4
    fda2:	e7db      	b.n	fd5c <IncludeMacCommandsResponse+0xb0>
    fda4:	a904      	add	r1, sp, #16
    fda6:	4b41      	ldr	r3, [pc, #260]	; (feac <IncludeMacCommandsResponse+0x200>)
    fda8:	200e      	movs	r0, #14
    fdaa:	4798      	blx	r3
    fdac:	2306      	movs	r3, #6
    fdae:	4a3a      	ldr	r2, [pc, #232]	; (fe98 <IncludeMacCommandsResponse+0x1ec>)
    fdb0:	552b      	strb	r3, [r5, r4]
    fdb2:	32e8      	adds	r2, #232	; 0xe8
    fdb4:	7811      	ldrb	r1, [r2, #0]
    fdb6:	1c62      	adds	r2, r4, #1
    fdb8:	b292      	uxth	r2, r2
    fdba:	54a9      	strb	r1, [r5, r2]
    fdbc:	aa04      	add	r2, sp, #16
    fdbe:	7812      	ldrb	r2, [r2, #0]
    fdc0:	1ca3      	adds	r3, r4, #2
    fdc2:	0011      	movs	r1, r2
    fdc4:	3120      	adds	r1, #32
    fdc6:	3403      	adds	r4, #3
    fdc8:	b2c9      	uxtb	r1, r1
    fdca:	b29b      	uxth	r3, r3
    fdcc:	b2a4      	uxth	r4, r4
    fdce:	293f      	cmp	r1, #63	; 0x3f
    fdd0:	d904      	bls.n	fddc <IncludeMacCommandsResponse+0x130>
    fdd2:	2220      	movs	r2, #32
    fdd4:	54ea      	strb	r2, [r5, r3]
    fdd6:	3601      	adds	r6, #1
    fdd8:	b2f6      	uxtb	r6, r6
    fdda:	e76e      	b.n	fcba <IncludeMacCommandsResponse+0xe>
    fddc:	213f      	movs	r1, #63	; 0x3f
    fdde:	400a      	ands	r2, r1
    fde0:	e7f8      	b.n	fdd4 <IncludeMacCommandsResponse+0x128>
    fde2:	2307      	movs	r3, #7
    fde4:	2103      	movs	r1, #3
    fde6:	2200      	movs	r2, #0
    fde8:	552b      	strb	r3, [r5, r4]
    fdea:	1c63      	adds	r3, r4, #1
    fdec:	4371      	muls	r1, r6
    fdee:	b29b      	uxth	r3, r3
    fdf0:	18eb      	adds	r3, r5, r3
    fdf2:	701a      	strb	r2, [r3, #0]
    fdf4:	4a28      	ldr	r2, [pc, #160]	; (fe98 <IncludeMacCommandsResponse+0x1ec>)
    fdf6:	1852      	adds	r2, r2, r1
    fdf8:	3298      	adds	r2, #152	; 0x98
    fdfa:	7891      	ldrb	r1, [r2, #2]
    fdfc:	09c9      	lsrs	r1, r1, #7
    fdfe:	7019      	strb	r1, [r3, #0]
    fe00:	7892      	ldrb	r2, [r2, #2]
    fe02:	b2c8      	uxtb	r0, r1
    fe04:	0652      	lsls	r2, r2, #25
    fe06:	d51a      	bpl.n	fe3e <IncludeMacCommandsResponse+0x192>
    fe08:	2202      	movs	r2, #2
    fe0a:	4302      	orrs	r2, r0
    fe0c:	e7a7      	b.n	fd5e <IncludeMacCommandsResponse+0xb2>
    fe0e:	2209      	movs	r2, #9
    fe10:	1c63      	adds	r3, r4, #1
    fe12:	552a      	strb	r2, [r5, r4]
    fe14:	b29c      	uxth	r4, r3
    fe16:	e7de      	b.n	fdd6 <IncludeMacCommandsResponse+0x12a>
    fe18:	230a      	movs	r3, #10
    fe1a:	2103      	movs	r1, #3
    fe1c:	2200      	movs	r2, #0
    fe1e:	552b      	strb	r3, [r5, r4]
    fe20:	1c63      	adds	r3, r4, #1
    fe22:	4371      	muls	r1, r6
    fe24:	b29b      	uxth	r3, r3
    fe26:	18eb      	adds	r3, r5, r3
    fe28:	701a      	strb	r2, [r3, #0]
    fe2a:	4a1b      	ldr	r2, [pc, #108]	; (fe98 <IncludeMacCommandsResponse+0x1ec>)
    fe2c:	1852      	adds	r2, r2, r1
    fe2e:	3298      	adds	r2, #152	; 0x98
    fe30:	7891      	ldrb	r1, [r2, #2]
    fe32:	09c9      	lsrs	r1, r1, #7
    fe34:	7019      	strb	r1, [r3, #0]
    fe36:	78d2      	ldrb	r2, [r2, #3]
    fe38:	b2c8      	uxtb	r0, r1
    fe3a:	07d2      	lsls	r2, r2, #31
    fe3c:	d4e4      	bmi.n	fe08 <IncludeMacCommandsResponse+0x15c>
    fe3e:	3402      	adds	r4, #2
    fe40:	b2a4      	uxth	r4, r4
    fe42:	e7c8      	b.n	fdd6 <IncludeMacCommandsResponse+0x12a>
    fe44:	003b      	movs	r3, r7
    fe46:	22ff      	movs	r2, #255	; 0xff
    fe48:	33e5      	adds	r3, #229	; 0xe5
    fe4a:	701a      	strb	r2, [r3, #0]
    fe4c:	2300      	movs	r3, #0
    fe4e:	37e6      	adds	r7, #230	; 0xe6
    fe50:	703b      	strb	r3, [r7, #0]
    fe52:	3afd      	subs	r2, #253	; 0xfd
    fe54:	1c63      	adds	r3, r4, #1
    fe56:	e7dc      	b.n	fe12 <IncludeMacCommandsResponse+0x166>
    fe58:	1c62      	adds	r2, r4, #1
    fe5a:	552b      	strb	r3, [r5, r4]
    fe5c:	b294      	uxth	r4, r2
    fe5e:	e7ba      	b.n	fdd6 <IncludeMacCommandsResponse+0x12a>
    fe60:	2201      	movs	r2, #1
    fe62:	4252      	negs	r2, r2
    fe64:	17d3      	asrs	r3, r2, #31
    fe66:	9204      	str	r2, [sp, #16]
    fe68:	9305      	str	r3, [sp, #20]
    fe6a:	4b11      	ldr	r3, [pc, #68]	; (feb0 <IncludeMacCommandsResponse+0x204>)
    fe6c:	a904      	add	r1, sp, #16
    fe6e:	5cf8      	ldrb	r0, [r7, r3]
    fe70:	4b10      	ldr	r3, [pc, #64]	; (feb4 <IncludeMacCommandsResponse+0x208>)
    fe72:	4798      	blx	r3
    fe74:	2301      	movs	r3, #1
    fe76:	228d      	movs	r2, #141	; 0x8d
    fe78:	425b      	negs	r3, r3
    fe7a:	0092      	lsls	r2, r2, #2
    fe7c:	50bb      	str	r3, [r7, r2]
    fe7e:	3204      	adds	r2, #4
    fe80:	54bb      	strb	r3, [r7, r2]
    fe82:	238c      	movs	r3, #140	; 0x8c
    fe84:	2201      	movs	r2, #1
    fe86:	009b      	lsls	r3, r3, #2
    fe88:	54fa      	strb	r2, [r7, r3]
    fe8a:	2303      	movs	r3, #3
    fe8c:	4373      	muls	r3, r6
    fe8e:	18ff      	adds	r7, r7, r3
    fe90:	3799      	adds	r7, #153	; 0x99
    fe92:	18a2      	adds	r2, r4, r2
    fe94:	783b      	ldrb	r3, [r7, #0]
    fe96:	e7e0      	b.n	fe5a <IncludeMacCommandsResponse+0x1ae>
    fe98:	20003170 	.word	0x20003170
    fe9c:	00018d4f 	.word	0x00018d4f
    fea0:	00016849 	.word	0x00016849
    fea4:	20003393 	.word	0x20003393
    fea8:	00000223 	.word	0x00000223
    feac:	0000e2b5 	.word	0x0000e2b5
    feb0:	00000231 	.word	0x00000231
    feb4:	0000d68d 	.word	0x0000d68d

0000feb8 <UpdateJoinSuccessState>:
    feb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    feba:	4c32      	ldr	r4, [pc, #200]	; (ff84 <UpdateJoinSuccessState+0xcc>)
    febc:	2104      	movs	r1, #4
    febe:	0022      	movs	r2, r4
    fec0:	3294      	adds	r2, #148	; 0x94
    fec2:	7813      	ldrb	r3, [r2, #0]
    fec4:	2001      	movs	r0, #1
    fec6:	438b      	bics	r3, r1
    fec8:	7013      	strb	r3, [r2, #0]
    feca:	0022      	movs	r2, r4
    fecc:	3284      	adds	r2, #132	; 0x84
    fece:	7813      	ldrb	r3, [r2, #0]
    fed0:	b087      	sub	sp, #28
    fed2:	4303      	orrs	r3, r0
    fed4:	3107      	adds	r1, #7
    fed6:	4f2c      	ldr	r7, [pc, #176]	; (ff88 <UpdateJoinSuccessState+0xd0>)
    fed8:	7013      	strb	r3, [r2, #0]
    feda:	2500      	movs	r5, #0
    fedc:	47b8      	blx	r7
    fede:	0023      	movs	r3, r4
    fee0:	2115      	movs	r1, #21
    fee2:	3388      	adds	r3, #136	; 0x88
    fee4:	0028      	movs	r0, r5
    fee6:	601d      	str	r5, [r3, #0]
    fee8:	47b8      	blx	r7
    feea:	0023      	movs	r3, r4
    feec:	2020      	movs	r0, #32
    feee:	33ff      	adds	r3, #255	; 0xff
    fef0:	7f5b      	ldrb	r3, [r3, #29]
    fef2:	4e26      	ldr	r6, [pc, #152]	; (ff8c <UpdateJoinSuccessState+0xd4>)
    fef4:	4203      	tst	r3, r0
    fef6:	d00c      	beq.n	ff12 <UpdateJoinSuccessState+0x5a>
    fef8:	0023      	movs	r3, r4
    fefa:	a904      	add	r1, sp, #16
    fefc:	3380      	adds	r3, #128	; 0x80
    fefe:	710d      	strb	r5, [r1, #4]
    ff00:	701d      	strb	r5, [r3, #0]
    ff02:	6765      	str	r5, [r4, #116]	; 0x74
    ff04:	67a5      	str	r5, [r4, #120]	; 0x78
    ff06:	47b0      	blx	r6
    ff08:	210f      	movs	r1, #15
    ff0a:	2021      	movs	r0, #33	; 0x21
    ff0c:	4469      	add	r1, sp
    ff0e:	700d      	strb	r5, [r1, #0]
    ff10:	47b0      	blx	r6
    ff12:	0023      	movs	r3, r4
    ff14:	2500      	movs	r5, #0
    ff16:	338c      	adds	r3, #140	; 0x8c
    ff18:	210a      	movs	r1, #10
    ff1a:	2001      	movs	r0, #1
    ff1c:	601d      	str	r5, [r3, #0]
    ff1e:	47b8      	blx	r7
    ff20:	0023      	movs	r3, r4
    ff22:	33ca      	adds	r3, #202	; 0xca
    ff24:	801d      	strh	r5, [r3, #0]
    ff26:	0022      	movs	r2, r4
    ff28:	0023      	movs	r3, r4
    ff2a:	210e      	movs	r1, #14
    ff2c:	3284      	adds	r2, #132	; 0x84
    ff2e:	33f6      	adds	r3, #246	; 0xf6
    ff30:	701d      	strb	r5, [r3, #0]
    ff32:	7813      	ldrb	r3, [r2, #0]
    ff34:	2039      	movs	r0, #57	; 0x39
    ff36:	438b      	bics	r3, r1
    ff38:	0029      	movs	r1, r5
    ff3a:	7013      	strb	r3, [r2, #0]
    ff3c:	47b0      	blx	r6
    ff3e:	0023      	movs	r3, r4
    ff40:	3385      	adds	r3, #133	; 0x85
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	079b      	lsls	r3, r3, #30
    ff46:	d50c      	bpl.n	ff62 <UpdateJoinSuccessState+0xaa>
    ff48:	0023      	movs	r3, r4
    ff4a:	21fa      	movs	r1, #250	; 0xfa
    ff4c:	3390      	adds	r3, #144	; 0x90
    ff4e:	681b      	ldr	r3, [r3, #0]
    ff50:	34f0      	adds	r4, #240	; 0xf0
    ff52:	0089      	lsls	r1, r1, #2
    ff54:	7820      	ldrb	r0, [r4, #0]
    ff56:	4359      	muls	r1, r3
    ff58:	9500      	str	r5, [sp, #0]
    ff5a:	4b0d      	ldr	r3, [pc, #52]	; (ff90 <UpdateJoinSuccessState+0xd8>)
    ff5c:	002a      	movs	r2, r5
    ff5e:	4c0d      	ldr	r4, [pc, #52]	; (ff94 <UpdateJoinSuccessState+0xdc>)
    ff60:	47a0      	blx	r4
    ff62:	490d      	ldr	r1, [pc, #52]	; (ff98 <UpdateJoinSuccessState+0xe0>)
    ff64:	794a      	ldrb	r2, [r1, #5]
    ff66:	790b      	ldrb	r3, [r1, #4]
    ff68:	0212      	lsls	r2, r2, #8
    ff6a:	431a      	orrs	r2, r3
    ff6c:	798b      	ldrb	r3, [r1, #6]
    ff6e:	041b      	lsls	r3, r3, #16
    ff70:	431a      	orrs	r2, r3
    ff72:	79cb      	ldrb	r3, [r1, #7]
    ff74:	061b      	lsls	r3, r3, #24
    ff76:	4313      	orrs	r3, r2
    ff78:	d001      	beq.n	ff7e <UpdateJoinSuccessState+0xc6>
    ff7a:	2008      	movs	r0, #8
    ff7c:	4798      	blx	r3
    ff7e:	b007      	add	sp, #28
    ff80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff82:	46c0      	nop			; (mov r8, r8)
    ff84:	20003170 	.word	0x20003170
    ff88:	00009385 	.word	0x00009385
    ff8c:	0000cbf5 	.word	0x0000cbf5
    ff90:	000100d9 	.word	0x000100d9
    ff94:	0000d105 	.word	0x0000d105
    ff98:	200034cc 	.word	0x200034cc

0000ff9c <PrepareSessionKeys>:
    ff9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff9e:	0004      	movs	r4, r0
    ffa0:	2603      	movs	r6, #3
    ffa2:	000d      	movs	r5, r1
    ffa4:	0017      	movs	r7, r2
    ffa6:	4b09      	ldr	r3, [pc, #36]	; (ffcc <PrepareSessionKeys+0x30>)
    ffa8:	2210      	movs	r2, #16
    ffaa:	2100      	movs	r1, #0
    ffac:	4798      	blx	r3
    ffae:	0032      	movs	r2, r6
    ffb0:	0029      	movs	r1, r5
    ffb2:	1c60      	adds	r0, r4, #1
    ffb4:	4d06      	ldr	r5, [pc, #24]	; (ffd0 <PrepareSessionKeys+0x34>)
    ffb6:	47a8      	blx	r5
    ffb8:	0032      	movs	r2, r6
    ffba:	0039      	movs	r1, r7
    ffbc:	1d20      	adds	r0, r4, #4
    ffbe:	47a8      	blx	r5
    ffc0:	1de0      	adds	r0, r4, #7
    ffc2:	2202      	movs	r2, #2
    ffc4:	4903      	ldr	r1, [pc, #12]	; (ffd4 <PrepareSessionKeys+0x38>)
    ffc6:	47a8      	blx	r5
    ffc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffca:	46c0      	nop			; (mov r8, r8)
    ffcc:	00016849 	.word	0x00016849
    ffd0:	00016837 	.word	0x00016837
    ffd4:	2000323c 	.word	0x2000323c

0000ffd8 <AssembleEncryptionBlock>:
    ffd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ffda:	001e      	movs	r6, r3
    ffdc:	4c0b      	ldr	r4, [pc, #44]	; (1000c <AssembleEncryptionBlock+0x34>)
    ffde:	0017      	movs	r7, r2
    ffe0:	4b0b      	ldr	r3, [pc, #44]	; (10010 <AssembleEncryptionBlock+0x38>)
    ffe2:	0005      	movs	r5, r0
    ffe4:	9101      	str	r1, [sp, #4]
    ffe6:	2210      	movs	r2, #16
    ffe8:	2100      	movs	r1, #0
    ffea:	0020      	movs	r0, r4
    ffec:	4798      	blx	r3
    ffee:	7026      	strb	r6, [r4, #0]
    fff0:	2604      	movs	r6, #4
    fff2:	7165      	strb	r5, [r4, #5]
    fff4:	0032      	movs	r2, r6
    fff6:	4d07      	ldr	r5, [pc, #28]	; (10014 <AssembleEncryptionBlock+0x3c>)
    fff8:	a908      	add	r1, sp, #32
    fffa:	1da0      	adds	r0, r4, #6
    fffc:	47a8      	blx	r5
    fffe:	0020      	movs	r0, r4
   10000:	0032      	movs	r2, r6
   10002:	a901      	add	r1, sp, #4
   10004:	300a      	adds	r0, #10
   10006:	47a8      	blx	r5
   10008:	73e7      	strb	r7, [r4, #15]
   1000a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1000c:	20001eb5 	.word	0x20001eb5
   10010:	00016849 	.word	0x00016849
   10014:	00016837 	.word	0x00016837

00010018 <ConfigureRadio>:
   10018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1001a:	0001      	movs	r1, r0
   1001c:	0005      	movs	r5, r0
   1001e:	4c11      	ldr	r4, [pc, #68]	; (10064 <ConfigureRadio+0x4c>)
   10020:	3109      	adds	r1, #9
   10022:	2009      	movs	r0, #9
   10024:	47a0      	blx	r4
   10026:	0029      	movs	r1, r5
   10028:	2001      	movs	r0, #1
   1002a:	47a0      	blx	r4
   1002c:	1d29      	adds	r1, r5, #4
   1002e:	200a      	movs	r0, #10
   10030:	47a0      	blx	r4
   10032:	7a6b      	ldrb	r3, [r5, #9]
   10034:	2b01      	cmp	r3, #1
   10036:	d10b      	bne.n	10050 <ConfigureRadio+0x38>
   10038:	0029      	movs	r1, r5
   1003a:	2016      	movs	r0, #22
   1003c:	310b      	adds	r1, #11
   1003e:	47a0      	blx	r4
   10040:	0029      	movs	r1, r5
   10042:	2007      	movs	r0, #7
   10044:	310a      	adds	r1, #10
   10046:	47a0      	blx	r4
   10048:	2000      	movs	r0, #0
   1004a:	4907      	ldr	r1, [pc, #28]	; (10068 <ConfigureRadio+0x50>)
   1004c:	47a0      	blx	r4
   1004e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10050:	466b      	mov	r3, sp
   10052:	1dd9      	adds	r1, r3, #7
   10054:	2303      	movs	r3, #3
   10056:	2013      	movs	r0, #19
   10058:	700b      	strb	r3, [r1, #0]
   1005a:	47a0      	blx	r4
   1005c:	4903      	ldr	r1, [pc, #12]	; (1006c <ConfigureRadio+0x54>)
   1005e:	2012      	movs	r0, #18
   10060:	e7f4      	b.n	1004c <ConfigureRadio+0x34>
   10062:	46c0      	nop			; (mov r8, r8)
   10064:	0000e3a5 	.word	0x0000e3a5
   10068:	20003270 	.word	0x20003270
   1006c:	00018d40 	.word	0x00018d40

00010070 <StopReceiveWindow2Timer>:
   10070:	b510      	push	{r4, lr}
   10072:	4c0b      	ldr	r4, [pc, #44]	; (100a0 <StopReceiveWindow2Timer+0x30>)
   10074:	0022      	movs	r2, r4
   10076:	32fd      	adds	r2, #253	; 0xfd
   10078:	7812      	ldrb	r2, [r2, #0]
   1007a:	2a01      	cmp	r2, #1
   1007c:	d10e      	bne.n	1009c <StopReceiveWindow2Timer+0x2c>
   1007e:	0021      	movs	r1, r4
   10080:	200e      	movs	r0, #14
   10082:	3184      	adds	r1, #132	; 0x84
   10084:	780a      	ldrb	r2, [r1, #0]
   10086:	34ee      	adds	r4, #238	; 0xee
   10088:	4382      	bics	r2, r0
   1008a:	700a      	strb	r2, [r1, #0]
   1008c:	7820      	ldrb	r0, [r4, #0]
   1008e:	4b05      	ldr	r3, [pc, #20]	; (100a4 <StopReceiveWindow2Timer+0x34>)
   10090:	4798      	blx	r3
   10092:	2800      	cmp	r0, #0
   10094:	d002      	beq.n	1009c <StopReceiveWindow2Timer+0x2c>
   10096:	7820      	ldrb	r0, [r4, #0]
   10098:	4b03      	ldr	r3, [pc, #12]	; (100a8 <StopReceiveWindow2Timer+0x38>)
   1009a:	4798      	blx	r3
   1009c:	bd10      	pop	{r4, pc}
   1009e:	46c0      	nop			; (mov r8, r8)
   100a0:	20003170 	.word	0x20003170
   100a4:	0000d29d 	.word	0x0000d29d
   100a8:	0000d41d 	.word	0x0000d41d

000100ac <LorawanLinkCheckCallback.part.1>:
   100ac:	4b07      	ldr	r3, [pc, #28]	; (100cc <LorawanLinkCheckCallback.part.1+0x20>)
   100ae:	b513      	push	{r0, r1, r4, lr}
   100b0:	001a      	movs	r2, r3
   100b2:	21fa      	movs	r1, #250	; 0xfa
   100b4:	3290      	adds	r2, #144	; 0x90
   100b6:	6812      	ldr	r2, [r2, #0]
   100b8:	0089      	lsls	r1, r1, #2
   100ba:	4351      	muls	r1, r2
   100bc:	2200      	movs	r2, #0
   100be:	33f0      	adds	r3, #240	; 0xf0
   100c0:	7818      	ldrb	r0, [r3, #0]
   100c2:	4c03      	ldr	r4, [pc, #12]	; (100d0 <LorawanLinkCheckCallback.part.1+0x24>)
   100c4:	9200      	str	r2, [sp, #0]
   100c6:	4b03      	ldr	r3, [pc, #12]	; (100d4 <LorawanLinkCheckCallback.part.1+0x28>)
   100c8:	47a0      	blx	r4
   100ca:	bd13      	pop	{r0, r1, r4, pc}
   100cc:	20003170 	.word	0x20003170
   100d0:	0000d105 	.word	0x0000d105
   100d4:	000100d9 	.word	0x000100d9

000100d8 <LorawanLinkCheckCallback>:
   100d8:	4b17      	ldr	r3, [pc, #92]	; (10138 <LorawanLinkCheckCallback+0x60>)
   100da:	20a0      	movs	r0, #160	; 0xa0
   100dc:	001a      	movs	r2, r3
   100de:	2180      	movs	r1, #128	; 0x80
   100e0:	b510      	push	{r4, lr}
   100e2:	3284      	adds	r2, #132	; 0x84
   100e4:	8812      	ldrh	r2, [r2, #0]
   100e6:	0080      	lsls	r0, r0, #2
   100e8:	0089      	lsls	r1, r1, #2
   100ea:	4002      	ands	r2, r0
   100ec:	428a      	cmp	r2, r1
   100ee:	d11c      	bne.n	1012a <LorawanLinkCheckCallback+0x52>
   100f0:	001a      	movs	r2, r3
   100f2:	32e0      	adds	r2, #224	; 0xe0
   100f4:	7810      	ldrb	r0, [r2, #0]
   100f6:	2403      	movs	r4, #3
   100f8:	2200      	movs	r2, #0
   100fa:	b2d1      	uxtb	r1, r2
   100fc:	4281      	cmp	r1, r0
   100fe:	d30d      	bcc.n	1011c <LorawanLinkCheckCallback+0x44>
   10100:	d113      	bne.n	1012a <LorawanLinkCheckCallback+0x52>
   10102:	2203      	movs	r2, #3
   10104:	434a      	muls	r2, r1
   10106:	2102      	movs	r1, #2
   10108:	189a      	adds	r2, r3, r2
   1010a:	3299      	adds	r2, #153	; 0x99
   1010c:	7011      	strb	r1, [r2, #0]
   1010e:	280f      	cmp	r0, #15
   10110:	d80b      	bhi.n	1012a <LorawanLinkCheckCallback+0x52>
   10112:	001a      	movs	r2, r3
   10114:	3001      	adds	r0, #1
   10116:	32e0      	adds	r2, #224	; 0xe0
   10118:	7010      	strb	r0, [r2, #0]
   1011a:	e006      	b.n	1012a <LorawanLinkCheckCallback+0x52>
   1011c:	0021      	movs	r1, r4
   1011e:	3201      	adds	r2, #1
   10120:	4351      	muls	r1, r2
   10122:	3196      	adds	r1, #150	; 0x96
   10124:	5c59      	ldrb	r1, [r3, r1]
   10126:	2902      	cmp	r1, #2
   10128:	d1e7      	bne.n	100fa <LorawanLinkCheckCallback+0x22>
   1012a:	3385      	adds	r3, #133	; 0x85
   1012c:	781b      	ldrb	r3, [r3, #0]
   1012e:	079b      	lsls	r3, r3, #30
   10130:	d501      	bpl.n	10136 <LorawanLinkCheckCallback+0x5e>
   10132:	4b02      	ldr	r3, [pc, #8]	; (1013c <LorawanLinkCheckCallback+0x64>)
   10134:	4798      	blx	r3
   10136:	bd10      	pop	{r4, pc}
   10138:	20003170 	.word	0x20003170
   1013c:	000100ad 	.word	0x000100ad

00010140 <LORAWAN_Send>:
   10140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10142:	4c37      	ldr	r4, [pc, #220]	; (10220 <LORAWAN_Send+0xe0>)
   10144:	0006      	movs	r6, r0
   10146:	0023      	movs	r3, r4
   10148:	3384      	adds	r3, #132	; 0x84
   1014a:	781b      	ldrb	r3, [r3, #0]
   1014c:	250f      	movs	r5, #15
   1014e:	b25a      	sxtb	r2, r3
   10150:	2a00      	cmp	r2, #0
   10152:	db0b      	blt.n	1016c <LORAWAN_Send+0x2c>
   10154:	3d03      	subs	r5, #3
   10156:	065a      	lsls	r2, r3, #25
   10158:	d408      	bmi.n	1016c <LORAWAN_Send+0x2c>
   1015a:	3d03      	subs	r5, #3
   1015c:	07db      	lsls	r3, r3, #31
   1015e:	d505      	bpl.n	1016c <LORAWAN_Send+0x2c>
   10160:	2388      	movs	r3, #136	; 0x88
   10162:	009b      	lsls	r3, r3, #2
   10164:	5ce7      	ldrb	r7, [r4, r3]
   10166:	2f00      	cmp	r7, #0
   10168:	d102      	bne.n	10170 <LORAWAN_Send+0x30>
   1016a:	2511      	movs	r5, #17
   1016c:	0028      	movs	r0, r5
   1016e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10170:	2800      	cmp	r0, #0
   10172:	d10f      	bne.n	10194 <LORAWAN_Send+0x54>
   10174:	2700      	movs	r7, #0
   10176:	0023      	movs	r3, r4
   10178:	3388      	adds	r3, #136	; 0x88
   1017a:	681b      	ldr	r3, [r3, #0]
   1017c:	3301      	adds	r3, #1
   1017e:	d123      	bne.n	101c8 <LORAWAN_Send+0x88>
   10180:	2001      	movs	r0, #1
   10182:	3484      	adds	r4, #132	; 0x84
   10184:	78a3      	ldrb	r3, [r4, #2]
   10186:	210b      	movs	r1, #11
   10188:	4303      	orrs	r3, r0
   1018a:	70a3      	strb	r3, [r4, #2]
   1018c:	4b25      	ldr	r3, [pc, #148]	; (10224 <LORAWAN_Send+0xe4>)
   1018e:	4798      	blx	r3
   10190:	250d      	movs	r5, #13
   10192:	e7eb      	b.n	1016c <LORAWAN_Send+0x2c>
   10194:	7843      	ldrb	r3, [r0, #1]
   10196:	7a02      	ldrb	r2, [r0, #8]
   10198:	3b01      	subs	r3, #1
   1019a:	b2db      	uxtb	r3, r3
   1019c:	9201      	str	r2, [sp, #4]
   1019e:	2bdf      	cmp	r3, #223	; 0xdf
   101a0:	d902      	bls.n	101a8 <LORAWAN_Send+0x68>
   101a2:	250a      	movs	r5, #10
   101a4:	2a00      	cmp	r2, #0
   101a6:	d1e1      	bne.n	1016c <LORAWAN_Send+0x2c>
   101a8:	4b1f      	ldr	r3, [pc, #124]	; (10228 <LORAWAN_Send+0xe8>)
   101aa:	4798      	blx	r3
   101ac:	4684      	mov	ip, r0
   101ae:	9b01      	ldr	r3, [sp, #4]
   101b0:	9000      	str	r0, [sp, #0]
   101b2:	4463      	add	r3, ip
   101b4:	001d      	movs	r5, r3
   101b6:	4b1d      	ldr	r3, [pc, #116]	; (1022c <LORAWAN_Send+0xec>)
   101b8:	4798      	blx	r3
   101ba:	4285      	cmp	r5, r0
   101bc:	ddda      	ble.n	10174 <LORAWAN_Send+0x34>
   101be:	9b00      	ldr	r3, [sp, #0]
   101c0:	250e      	movs	r5, #14
   101c2:	2b00      	cmp	r3, #0
   101c4:	d0d2      	beq.n	1016c <LORAWAN_Send+0x2c>
   101c6:	e7d6      	b.n	10176 <LORAWAN_Send+0x36>
   101c8:	0023      	movs	r3, r4
   101ca:	33fd      	adds	r3, #253	; 0xfd
   101cc:	781b      	ldrb	r3, [r3, #0]
   101ce:	2b04      	cmp	r3, #4
   101d0:	d01d      	beq.n	1020e <LORAWAN_Send+0xce>
   101d2:	0023      	movs	r3, r4
   101d4:	33fd      	adds	r3, #253	; 0xfd
   101d6:	781b      	ldrb	r3, [r3, #0]
   101d8:	2b01      	cmp	r3, #1
   101da:	d105      	bne.n	101e8 <LORAWAN_Send+0xa8>
   101dc:	0023      	movs	r3, r4
   101de:	3384      	adds	r3, #132	; 0x84
   101e0:	781a      	ldrb	r2, [r3, #0]
   101e2:	230e      	movs	r3, #14
   101e4:	421a      	tst	r2, r3
   101e6:	d1c0      	bne.n	1016a <LORAWAN_Send+0x2a>
   101e8:	0023      	movs	r3, r4
   101ea:	33fc      	adds	r3, #252	; 0xfc
   101ec:	2f00      	cmp	r7, #0
   101ee:	d113      	bne.n	10218 <LORAWAN_Send+0xd8>
   101f0:	2508      	movs	r5, #8
   101f2:	60de      	str	r6, [r3, #12]
   101f4:	2388      	movs	r3, #136	; 0x88
   101f6:	2200      	movs	r2, #0
   101f8:	009b      	lsls	r3, r3, #2
   101fa:	54e2      	strb	r2, [r4, r3]
   101fc:	2001      	movs	r0, #1
   101fe:	4b0c      	ldr	r3, [pc, #48]	; (10230 <LORAWAN_Send+0xf0>)
   10200:	4798      	blx	r3
   10202:	2320      	movs	r3, #32
   10204:	3494      	adds	r4, #148	; 0x94
   10206:	7822      	ldrb	r2, [r4, #0]
   10208:	4313      	orrs	r3, r2
   1020a:	7023      	strb	r3, [r4, #0]
   1020c:	e7ae      	b.n	1016c <LORAWAN_Send+0x2c>
   1020e:	4b09      	ldr	r3, [pc, #36]	; (10234 <LORAWAN_Send+0xf4>)
   10210:	4798      	blx	r3
   10212:	2808      	cmp	r0, #8
   10214:	d1a9      	bne.n	1016a <LORAWAN_Send+0x2a>
   10216:	e7dc      	b.n	101d2 <LORAWAN_Send+0x92>
   10218:	2200      	movs	r2, #0
   1021a:	2511      	movs	r5, #17
   1021c:	60da      	str	r2, [r3, #12]
   1021e:	e7e9      	b.n	101f4 <LORAWAN_Send+0xb4>
   10220:	20003170 	.word	0x20003170
   10224:	00009385 	.word	0x00009385
   10228:	0000fc0d 	.word	0x0000fc0d
   1022c:	0000fc4d 	.word	0x0000fc4d
   10230:	0000e231 	.word	0x0000e231
   10234:	00012d7d 	.word	0x00012d7d

00010238 <AutomaticReplyCallback>:
   10238:	b510      	push	{r4, lr}
   1023a:	4c0d      	ldr	r4, [pc, #52]	; (10270 <AutomaticReplyCallback+0x38>)
   1023c:	0023      	movs	r3, r4
   1023e:	33fd      	adds	r3, #253	; 0xfd
   10240:	781b      	ldrb	r3, [r3, #0]
   10242:	2b01      	cmp	r3, #1
   10244:	d10e      	bne.n	10264 <AutomaticReplyCallback+0x2c>
   10246:	0022      	movs	r2, r4
   10248:	210e      	movs	r1, #14
   1024a:	3284      	adds	r2, #132	; 0x84
   1024c:	7813      	ldrb	r3, [r2, #0]
   1024e:	438b      	bics	r3, r1
   10250:	7013      	strb	r3, [r2, #0]
   10252:	4b08      	ldr	r3, [pc, #32]	; (10274 <AutomaticReplyCallback+0x3c>)
   10254:	2000      	movs	r0, #0
   10256:	4798      	blx	r3
   10258:	2208      	movs	r2, #8
   1025a:	3494      	adds	r4, #148	; 0x94
   1025c:	7823      	ldrb	r3, [r4, #0]
   1025e:	4393      	bics	r3, r2
   10260:	7023      	strb	r3, [r4, #0]
   10262:	bd10      	pop	{r4, pc}
   10264:	2b04      	cmp	r3, #4
   10266:	d1f4      	bne.n	10252 <AutomaticReplyCallback+0x1a>
   10268:	4b03      	ldr	r3, [pc, #12]	; (10278 <AutomaticReplyCallback+0x40>)
   1026a:	4798      	blx	r3
   1026c:	e7f1      	b.n	10252 <AutomaticReplyCallback+0x1a>
   1026e:	46c0      	nop			; (mov r8, r8)
   10270:	20003170 	.word	0x20003170
   10274:	00010141 	.word	0x00010141
   10278:	0000ecb9 	.word	0x0000ecb9

0001027c <LorawanLinkCheckConfigure>:
   1027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1027e:	23fa      	movs	r3, #250	; 0xfa
   10280:	4c21      	ldr	r4, [pc, #132]	; (10308 <LorawanLinkCheckConfigure+0x8c>)
   10282:	009b      	lsls	r3, r3, #2
   10284:	0022      	movs	r2, r4
   10286:	0025      	movs	r5, r4
   10288:	4343      	muls	r3, r0
   1028a:	3290      	adds	r2, #144	; 0x90
   1028c:	0006      	movs	r6, r0
   1028e:	2102      	movs	r1, #2
   10290:	2000      	movs	r0, #0
   10292:	4f1e      	ldr	r7, [pc, #120]	; (1030c <LorawanLinkCheckConfigure+0x90>)
   10294:	6013      	str	r3, [r2, #0]
   10296:	3584      	adds	r5, #132	; 0x84
   10298:	47b8      	blx	r7
   1029a:	2e00      	cmp	r6, #0
   1029c:	d127      	bne.n	102ee <LorawanLinkCheckConfigure+0x72>
   1029e:	0023      	movs	r3, r4
   102a0:	33f0      	adds	r3, #240	; 0xf0
   102a2:	7818      	ldrb	r0, [r3, #0]
   102a4:	4b1a      	ldr	r3, [pc, #104]	; (10310 <LorawanLinkCheckConfigure+0x94>)
   102a6:	4798      	blx	r3
   102a8:	2202      	movs	r2, #2
   102aa:	786b      	ldrb	r3, [r5, #1]
   102ac:	210b      	movs	r1, #11
   102ae:	4393      	bics	r3, r2
   102b0:	706b      	strb	r3, [r5, #1]
   102b2:	2001      	movs	r0, #1
   102b4:	47b8      	blx	r7
   102b6:	0023      	movs	r3, r4
   102b8:	2701      	movs	r7, #1
   102ba:	33e0      	adds	r3, #224	; 0xe0
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	0030      	movs	r0, r6
   102c0:	0032      	movs	r2, r6
   102c2:	36ff      	adds	r6, #255	; 0xff
   102c4:	429a      	cmp	r2, r3
   102c6:	d304      	bcc.n	102d2 <LorawanLinkCheckConfigure+0x56>
   102c8:	2800      	cmp	r0, #0
   102ca:	d001      	beq.n	102d0 <LorawanLinkCheckConfigure+0x54>
   102cc:	34e0      	adds	r4, #224	; 0xe0
   102ce:	7023      	strb	r3, [r4, #0]
   102d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102d2:	2103      	movs	r1, #3
   102d4:	4351      	muls	r1, r2
   102d6:	1861      	adds	r1, r4, r1
   102d8:	3199      	adds	r1, #153	; 0x99
   102da:	780d      	ldrb	r5, [r1, #0]
   102dc:	2d02      	cmp	r5, #2
   102de:	d103      	bne.n	102e8 <LorawanLinkCheckConfigure+0x6c>
   102e0:	0038      	movs	r0, r7
   102e2:	3b01      	subs	r3, #1
   102e4:	700e      	strb	r6, [r1, #0]
   102e6:	b2db      	uxtb	r3, r3
   102e8:	3201      	adds	r2, #1
   102ea:	b2d2      	uxtb	r2, r2
   102ec:	e7ea      	b.n	102c4 <LorawanLinkCheckConfigure+0x48>
   102ee:	2302      	movs	r3, #2
   102f0:	786a      	ldrb	r2, [r5, #1]
   102f2:	210b      	movs	r1, #11
   102f4:	4313      	orrs	r3, r2
   102f6:	706b      	strb	r3, [r5, #1]
   102f8:	2001      	movs	r0, #1
   102fa:	47b8      	blx	r7
   102fc:	782b      	ldrb	r3, [r5, #0]
   102fe:	07db      	lsls	r3, r3, #31
   10300:	d5e6      	bpl.n	102d0 <LorawanLinkCheckConfigure+0x54>
   10302:	4b04      	ldr	r3, [pc, #16]	; (10314 <LorawanLinkCheckConfigure+0x98>)
   10304:	4798      	blx	r3
   10306:	e7e3      	b.n	102d0 <LorawanLinkCheckConfigure+0x54>
   10308:	20003170 	.word	0x20003170
   1030c:	00009385 	.word	0x00009385
   10310:	0000d41d 	.word	0x0000d41d
   10314:	000100ad 	.word	0x000100ad

00010318 <EncodeDeviceTimeReq>:
   10318:	4b08      	ldr	r3, [pc, #32]	; (1033c <EncodeDeviceTimeReq+0x24>)
   1031a:	b510      	push	{r4, lr}
   1031c:	001c      	movs	r4, r3
   1031e:	34e0      	adds	r4, #224	; 0xe0
   10320:	7822      	ldrb	r2, [r4, #0]
   10322:	2015      	movs	r0, #21
   10324:	2a0f      	cmp	r2, #15
   10326:	d808      	bhi.n	1033a <EncodeDeviceTimeReq+0x22>
   10328:	2103      	movs	r1, #3
   1032a:	4351      	muls	r1, r2
   1032c:	185b      	adds	r3, r3, r1
   1032e:	210d      	movs	r1, #13
   10330:	3399      	adds	r3, #153	; 0x99
   10332:	3201      	adds	r2, #1
   10334:	7019      	strb	r1, [r3, #0]
   10336:	7022      	strb	r2, [r4, #0]
   10338:	380d      	subs	r0, #13
   1033a:	bd10      	pop	{r4, pc}
   1033c:	20003170 	.word	0x20003170

00010340 <EncodeLinkCheckReq>:
   10340:	4b08      	ldr	r3, [pc, #32]	; (10364 <EncodeLinkCheckReq+0x24>)
   10342:	b510      	push	{r4, lr}
   10344:	001c      	movs	r4, r3
   10346:	34e0      	adds	r4, #224	; 0xe0
   10348:	7822      	ldrb	r2, [r4, #0]
   1034a:	2015      	movs	r0, #21
   1034c:	2a0f      	cmp	r2, #15
   1034e:	d808      	bhi.n	10362 <EncodeLinkCheckReq+0x22>
   10350:	2103      	movs	r1, #3
   10352:	4351      	muls	r1, r2
   10354:	185b      	adds	r3, r3, r1
   10356:	2102      	movs	r1, #2
   10358:	3399      	adds	r3, #153	; 0x99
   1035a:	3201      	adds	r2, #1
   1035c:	7019      	strb	r1, [r3, #0]
   1035e:	7022      	strb	r2, [r4, #0]
   10360:	380d      	subs	r0, #13
   10362:	bd10      	pop	{r4, pc}
   10364:	20003170 	.word	0x20003170

00010368 <UpdateCurrentDataRate>:
   10368:	b510      	push	{r4, lr}
   1036a:	4b04      	ldr	r3, [pc, #16]	; (1037c <UpdateCurrentDataRate+0x14>)
   1036c:	210c      	movs	r1, #12
   1036e:	33e7      	adds	r3, #231	; 0xe7
   10370:	7018      	strb	r0, [r3, #0]
   10372:	2001      	movs	r0, #1
   10374:	4b02      	ldr	r3, [pc, #8]	; (10380 <UpdateCurrentDataRate+0x18>)
   10376:	4798      	blx	r3
   10378:	bd10      	pop	{r4, pc}
   1037a:	46c0      	nop			; (mov r8, r8)
   1037c:	20003170 	.word	0x20003170
   10380:	00009385 	.word	0x00009385

00010384 <UpdateDLSettings>:
   10384:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10386:	466b      	mov	r3, sp
   10388:	1dde      	adds	r6, r3, #7
   1038a:	1d9c      	adds	r4, r3, #6
   1038c:	71d8      	strb	r0, [r3, #7]
   1038e:	7021      	strb	r1, [r4, #0]
   10390:	2017      	movs	r0, #23
   10392:	0031      	movs	r1, r6
   10394:	4d0c      	ldr	r5, [pc, #48]	; (103c8 <UpdateDLSettings+0x44>)
   10396:	47a8      	blx	r5
   10398:	2808      	cmp	r0, #8
   1039a:	d107      	bne.n	103ac <UpdateDLSettings+0x28>
   1039c:	4b0b      	ldr	r3, [pc, #44]	; (103cc <UpdateDLSettings+0x48>)
   1039e:	7832      	ldrb	r2, [r6, #0]
   103a0:	336e      	adds	r3, #110	; 0x6e
   103a2:	701a      	strb	r2, [r3, #0]
   103a4:	2100      	movs	r1, #0
   103a6:	3807      	subs	r0, #7
   103a8:	4b09      	ldr	r3, [pc, #36]	; (103d0 <UpdateDLSettings+0x4c>)
   103aa:	4798      	blx	r3
   103ac:	0021      	movs	r1, r4
   103ae:	2018      	movs	r0, #24
   103b0:	47a8      	blx	r5
   103b2:	2808      	cmp	r0, #8
   103b4:	d107      	bne.n	103c6 <UpdateDLSettings+0x42>
   103b6:	2101      	movs	r1, #1
   103b8:	4b04      	ldr	r3, [pc, #16]	; (103cc <UpdateDLSettings+0x48>)
   103ba:	7822      	ldrb	r2, [r4, #0]
   103bc:	33f7      	adds	r3, #247	; 0xf7
   103be:	701a      	strb	r2, [r3, #0]
   103c0:	0008      	movs	r0, r1
   103c2:	4b03      	ldr	r3, [pc, #12]	; (103d0 <UpdateDLSettings+0x4c>)
   103c4:	4798      	blx	r3
   103c6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   103c8:	0000cbd9 	.word	0x0000cbd9
   103cc:	20003170 	.word	0x20003170
   103d0:	00009385 	.word	0x00009385

000103d4 <UpdateTxPower>:
   103d4:	b510      	push	{r4, lr}
   103d6:	4b04      	ldr	r3, [pc, #16]	; (103e8 <UpdateTxPower+0x14>)
   103d8:	210a      	movs	r1, #10
   103da:	33e9      	adds	r3, #233	; 0xe9
   103dc:	7018      	strb	r0, [r3, #0]
   103de:	2000      	movs	r0, #0
   103e0:	4b02      	ldr	r3, [pc, #8]	; (103ec <UpdateTxPower+0x18>)
   103e2:	4798      	blx	r3
   103e4:	bd10      	pop	{r4, pc}
   103e6:	46c0      	nop			; (mov r8, r8)
   103e8:	20003170 	.word	0x20003170
   103ec:	00009385 	.word	0x00009385

000103f0 <UpdateRetransmissionAckTimeoutState>:
   103f0:	4b10      	ldr	r3, [pc, #64]	; (10434 <UpdateRetransmissionAckTimeoutState+0x44>)
   103f2:	b513      	push	{r0, r1, r4, lr}
   103f4:	001a      	movs	r2, r3
   103f6:	32fd      	adds	r2, #253	; 0xfd
   103f8:	7812      	ldrb	r2, [r2, #0]
   103fa:	2a01      	cmp	r2, #1
   103fc:	d108      	bne.n	10410 <UpdateRetransmissionAckTimeoutState+0x20>
   103fe:	0018      	movs	r0, r3
   10400:	210e      	movs	r1, #14
   10402:	3084      	adds	r0, #132	; 0x84
   10404:	7802      	ldrb	r2, [r0, #0]
   10406:	438a      	bics	r2, r1
   10408:	0011      	movs	r1, r2
   1040a:	220c      	movs	r2, #12
   1040c:	430a      	orrs	r2, r1
   1040e:	7002      	strb	r2, [r0, #0]
   10410:	001a      	movs	r2, r3
   10412:	32da      	adds	r2, #218	; 0xda
   10414:	8811      	ldrh	r1, [r2, #0]
   10416:	4a08      	ldr	r2, [pc, #32]	; (10438 <UpdateRetransmissionAckTimeoutState+0x48>)
   10418:	4c08      	ldr	r4, [pc, #32]	; (1043c <UpdateRetransmissionAckTimeoutState+0x4c>)
   1041a:	5c9a      	ldrb	r2, [r3, r2]
   1041c:	33f1      	adds	r3, #241	; 0xf1
   1041e:	1a8a      	subs	r2, r1, r2
   10420:	21fa      	movs	r1, #250	; 0xfa
   10422:	0089      	lsls	r1, r1, #2
   10424:	4351      	muls	r1, r2
   10426:	2200      	movs	r2, #0
   10428:	7818      	ldrb	r0, [r3, #0]
   1042a:	9200      	str	r2, [sp, #0]
   1042c:	4b04      	ldr	r3, [pc, #16]	; (10440 <UpdateRetransmissionAckTimeoutState+0x50>)
   1042e:	47a0      	blx	r4
   10430:	bd13      	pop	{r0, r1, r4, pc}
   10432:	46c0      	nop			; (mov r8, r8)
   10434:	20003170 	.word	0x20003170
   10438:	0000022b 	.word	0x0000022b
   1043c:	0000d105 	.word	0x0000d105
   10440:	00011181 	.word	0x00011181

00010444 <UpdateReceiveWindow2Parameters>:
   10444:	4b0f      	ldr	r3, [pc, #60]	; (10484 <UpdateReceiveWindow2Parameters+0x40>)
   10446:	b570      	push	{r4, r5, r6, lr}
   10448:	001a      	movs	r2, r3
   1044a:	326e      	adds	r2, #110	; 0x6e
   1044c:	7011      	strb	r1, [r2, #0]
   1044e:	001a      	movs	r2, r3
   10450:	0c04      	lsrs	r4, r0, #16
   10452:	326a      	adds	r2, #106	; 0x6a
   10454:	8010      	strh	r0, [r2, #0]
   10456:	8054      	strh	r4, [r2, #2]
   10458:	001a      	movs	r2, r3
   1045a:	25fd      	movs	r5, #253	; 0xfd
   1045c:	32fd      	adds	r2, #253	; 0xfd
   1045e:	7812      	ldrb	r2, [r2, #0]
   10460:	3a02      	subs	r2, #2
   10462:	422a      	tst	r2, r5
   10464:	d109      	bne.n	1047a <UpdateReceiveWindow2Parameters+0x36>
   10466:	001a      	movs	r2, r3
   10468:	336f      	adds	r3, #111	; 0x6f
   1046a:	3273      	adds	r2, #115	; 0x73
   1046c:	7011      	strb	r1, [r2, #0]
   1046e:	7018      	strb	r0, [r3, #0]
   10470:	0a02      	lsrs	r2, r0, #8
   10472:	0e00      	lsrs	r0, r0, #24
   10474:	705a      	strb	r2, [r3, #1]
   10476:	709c      	strb	r4, [r3, #2]
   10478:	70d8      	strb	r0, [r3, #3]
   1047a:	2100      	movs	r1, #0
   1047c:	4b02      	ldr	r3, [pc, #8]	; (10488 <UpdateReceiveWindow2Parameters+0x44>)
   1047e:	2001      	movs	r0, #1
   10480:	4798      	blx	r3
   10482:	bd70      	pop	{r4, r5, r6, pc}
   10484:	20003170 	.word	0x20003170
   10488:	00009385 	.word	0x00009385

0001048c <ResetParametersForConfirmedTransmission>:
   1048c:	4b0a      	ldr	r3, [pc, #40]	; (104b8 <ResetParametersForConfirmedTransmission+0x2c>)
   1048e:	001a      	movs	r2, r3
   10490:	32fd      	adds	r2, #253	; 0xfd
   10492:	7812      	ldrb	r2, [r2, #0]
   10494:	2a01      	cmp	r2, #1
   10496:	d105      	bne.n	104a4 <ResetParametersForConfirmedTransmission+0x18>
   10498:	0019      	movs	r1, r3
   1049a:	200e      	movs	r0, #14
   1049c:	3184      	adds	r1, #132	; 0x84
   1049e:	780a      	ldrb	r2, [r1, #0]
   104a0:	4382      	bics	r2, r0
   104a2:	700a      	strb	r2, [r1, #0]
   104a4:	001a      	movs	r2, r3
   104a6:	2100      	movs	r1, #0
   104a8:	3394      	adds	r3, #148	; 0x94
   104aa:	32e4      	adds	r2, #228	; 0xe4
   104ac:	7011      	strb	r1, [r2, #0]
   104ae:	781a      	ldrb	r2, [r3, #0]
   104b0:	3101      	adds	r1, #1
   104b2:	438a      	bics	r2, r1
   104b4:	701a      	strb	r2, [r3, #0]
   104b6:	4770      	bx	lr
   104b8:	20003170 	.word	0x20003170

000104bc <ResetParametersForUnconfirmedTransmission>:
   104bc:	4b07      	ldr	r3, [pc, #28]	; (104dc <ResetParametersForUnconfirmedTransmission+0x20>)
   104be:	001a      	movs	r2, r3
   104c0:	32fd      	adds	r2, #253	; 0xfd
   104c2:	7812      	ldrb	r2, [r2, #0]
   104c4:	2a01      	cmp	r2, #1
   104c6:	d105      	bne.n	104d4 <ResetParametersForUnconfirmedTransmission+0x18>
   104c8:	0019      	movs	r1, r3
   104ca:	200e      	movs	r0, #14
   104cc:	3184      	adds	r1, #132	; 0x84
   104ce:	780a      	ldrb	r2, [r1, #0]
   104d0:	4382      	bics	r2, r0
   104d2:	700a      	strb	r2, [r1, #0]
   104d4:	2200      	movs	r2, #0
   104d6:	33e3      	adds	r3, #227	; 0xe3
   104d8:	701a      	strb	r2, [r3, #0]
   104da:	4770      	bx	lr
   104dc:	20003170 	.word	0x20003170

000104e0 <SetJoinFailState>:
   104e0:	b570      	push	{r4, r5, r6, lr}
   104e2:	4c15      	ldr	r4, [pc, #84]	; (10538 <SetJoinFailState+0x58>)
   104e4:	2604      	movs	r6, #4
   104e6:	0025      	movs	r5, r4
   104e8:	3594      	adds	r5, #148	; 0x94
   104ea:	782a      	ldrb	r2, [r5, #0]
   104ec:	0021      	movs	r1, r4
   104ee:	43b2      	bics	r2, r6
   104f0:	702a      	strb	r2, [r5, #0]
   104f2:	22f0      	movs	r2, #240	; 0xf0
   104f4:	3184      	adds	r1, #132	; 0x84
   104f6:	780b      	ldrb	r3, [r1, #0]
   104f8:	4013      	ands	r3, r2
   104fa:	700b      	strb	r3, [r1, #0]
   104fc:	0023      	movs	r3, r4
   104fe:	33ff      	adds	r3, #255	; 0xff
   10500:	7f5b      	ldrb	r3, [r3, #29]
   10502:	069b      	lsls	r3, r3, #26
   10504:	d503      	bpl.n	1050e <SetJoinFailState+0x2e>
   10506:	0023      	movs	r3, r4
   10508:	2200      	movs	r2, #0
   1050a:	3380      	adds	r3, #128	; 0x80
   1050c:	701a      	strb	r2, [r3, #0]
   1050e:	490b      	ldr	r1, [pc, #44]	; (1053c <SetJoinFailState+0x5c>)
   10510:	794a      	ldrb	r2, [r1, #5]
   10512:	790b      	ldrb	r3, [r1, #4]
   10514:	0212      	lsls	r2, r2, #8
   10516:	431a      	orrs	r2, r3
   10518:	798b      	ldrb	r3, [r1, #6]
   1051a:	041b      	lsls	r3, r3, #16
   1051c:	431a      	orrs	r2, r3
   1051e:	79cb      	ldrb	r3, [r1, #7]
   10520:	061b      	lsls	r3, r3, #24
   10522:	4313      	orrs	r3, r2
   10524:	d000      	beq.n	10528 <SetJoinFailState+0x48>
   10526:	4798      	blx	r3
   10528:	2300      	movs	r3, #0
   1052a:	34f9      	adds	r4, #249	; 0xf9
   1052c:	7023      	strb	r3, [r4, #0]
   1052e:	210b      	movs	r1, #11
   10530:	4b03      	ldr	r3, [pc, #12]	; (10540 <SetJoinFailState+0x60>)
   10532:	2001      	movs	r0, #1
   10534:	4798      	blx	r3
   10536:	bd70      	pop	{r4, r5, r6, pc}
   10538:	20003170 	.word	0x20003170
   1053c:	200034cc 	.word	0x200034cc
   10540:	00009385 	.word	0x00009385

00010544 <ExecuteRxParamSetupReq>:
   10544:	b5f0      	push	{r4, r5, r6, r7, lr}
   10546:	b085      	sub	sp, #20
   10548:	7805      	ldrb	r5, [r0, #0]
   1054a:	0004      	movs	r4, r0
   1054c:	1c41      	adds	r1, r0, #1
   1054e:	2204      	movs	r2, #4
   10550:	4b36      	ldr	r3, [pc, #216]	; (1062c <ExecuteRxParamSetupReq+0xe8>)
   10552:	a803      	add	r0, sp, #12
   10554:	4798      	blx	r3
   10556:	2264      	movs	r2, #100	; 0x64
   10558:	9b03      	ldr	r3, [sp, #12]
   1055a:	a903      	add	r1, sp, #12
   1055c:	021b      	lsls	r3, r3, #8
   1055e:	0a1b      	lsrs	r3, r3, #8
   10560:	4353      	muls	r3, r2
   10562:	9303      	str	r3, [sp, #12]
   10564:	1d23      	adds	r3, r4, #4
   10566:	9301      	str	r3, [sp, #4]
   10568:	072b      	lsls	r3, r5, #28
   1056a:	0f1b      	lsrs	r3, r3, #28
   1056c:	b2da      	uxtb	r2, r3
   1056e:	9200      	str	r2, [sp, #0]
   10570:	aa02      	add	r2, sp, #8
   10572:	1c96      	adds	r6, r2, #2
   10574:	066d      	lsls	r5, r5, #25
   10576:	7033      	strb	r3, [r6, #0]
   10578:	1cd7      	adds	r7, r2, #3
   1057a:	0f6d      	lsrs	r5, r5, #29
   1057c:	2001      	movs	r0, #1
   1057e:	4b2c      	ldr	r3, [pc, #176]	; (10630 <ExecuteRxParamSetupReq+0xec>)
   10580:	703d      	strb	r5, [r7, #0]
   10582:	4798      	blx	r3
   10584:	4c2b      	ldr	r4, [pc, #172]	; (10634 <ExecuteRxParamSetupReq+0xf0>)
   10586:	2808      	cmp	r0, #8
   10588:	d109      	bne.n	1059e <ExecuteRxParamSetupReq+0x5a>
   1058a:	0023      	movs	r3, r4
   1058c:	33e0      	adds	r3, #224	; 0xe0
   1058e:	781a      	ldrb	r2, [r3, #0]
   10590:	2303      	movs	r3, #3
   10592:	4353      	muls	r3, r2
   10594:	18e3      	adds	r3, r4, r3
   10596:	3398      	adds	r3, #152	; 0x98
   10598:	789a      	ldrb	r2, [r3, #2]
   1059a:	4310      	orrs	r0, r2
   1059c:	7098      	strb	r0, [r3, #2]
   1059e:	0031      	movs	r1, r6
   105a0:	200f      	movs	r0, #15
   105a2:	4e23      	ldr	r6, [pc, #140]	; (10630 <ExecuteRxParamSetupReq+0xec>)
   105a4:	47b0      	blx	r6
   105a6:	2808      	cmp	r0, #8
   105a8:	d10a      	bne.n	105c0 <ExecuteRxParamSetupReq+0x7c>
   105aa:	0023      	movs	r3, r4
   105ac:	33e0      	adds	r3, #224	; 0xe0
   105ae:	781a      	ldrb	r2, [r3, #0]
   105b0:	2303      	movs	r3, #3
   105b2:	4353      	muls	r3, r2
   105b4:	2210      	movs	r2, #16
   105b6:	18e3      	adds	r3, r4, r3
   105b8:	3398      	adds	r3, #152	; 0x98
   105ba:	7899      	ldrb	r1, [r3, #2]
   105bc:	430a      	orrs	r2, r1
   105be:	709a      	strb	r2, [r3, #2]
   105c0:	0039      	movs	r1, r7
   105c2:	2018      	movs	r0, #24
   105c4:	47b0      	blx	r6
   105c6:	2808      	cmp	r0, #8
   105c8:	d10a      	bne.n	105e0 <ExecuteRxParamSetupReq+0x9c>
   105ca:	0023      	movs	r3, r4
   105cc:	33e0      	adds	r3, #224	; 0xe0
   105ce:	781a      	ldrb	r2, [r3, #0]
   105d0:	2303      	movs	r3, #3
   105d2:	4353      	muls	r3, r2
   105d4:	2220      	movs	r2, #32
   105d6:	18e3      	adds	r3, r4, r3
   105d8:	3398      	adds	r3, #152	; 0x98
   105da:	7899      	ldrb	r1, [r3, #2]
   105dc:	430a      	orrs	r2, r1
   105de:	709a      	strb	r2, [r3, #2]
   105e0:	0023      	movs	r3, r4
   105e2:	33e0      	adds	r3, #224	; 0xe0
   105e4:	781a      	ldrb	r2, [r3, #0]
   105e6:	2303      	movs	r3, #3
   105e8:	4353      	muls	r3, r2
   105ea:	18e3      	adds	r3, r4, r3
   105ec:	3398      	adds	r3, #152	; 0x98
   105ee:	789e      	ldrb	r6, [r3, #2]
   105f0:	06f3      	lsls	r3, r6, #27
   105f2:	d518      	bpl.n	10626 <ExecuteRxParamSetupReq+0xe2>
   105f4:	0733      	lsls	r3, r6, #28
   105f6:	d516      	bpl.n	10626 <ExecuteRxParamSetupReq+0xe2>
   105f8:	06b6      	lsls	r6, r6, #26
   105fa:	0ff6      	lsrs	r6, r6, #31
   105fc:	2e01      	cmp	r6, #1
   105fe:	d112      	bne.n	10626 <ExecuteRxParamSetupReq+0xe2>
   10600:	0023      	movs	r3, r4
   10602:	33f7      	adds	r3, #247	; 0xf7
   10604:	701d      	strb	r5, [r3, #0]
   10606:	0031      	movs	r1, r6
   10608:	0030      	movs	r0, r6
   1060a:	4d0b      	ldr	r5, [pc, #44]	; (10638 <ExecuteRxParamSetupReq+0xf4>)
   1060c:	47a8      	blx	r5
   1060e:	9900      	ldr	r1, [sp, #0]
   10610:	9803      	ldr	r0, [sp, #12]
   10612:	4b0a      	ldr	r3, [pc, #40]	; (1063c <ExecuteRxParamSetupReq+0xf8>)
   10614:	4798      	blx	r3
   10616:	2340      	movs	r3, #64	; 0x40
   10618:	3484      	adds	r4, #132	; 0x84
   1061a:	7862      	ldrb	r2, [r4, #1]
   1061c:	210b      	movs	r1, #11
   1061e:	4313      	orrs	r3, r2
   10620:	7063      	strb	r3, [r4, #1]
   10622:	0030      	movs	r0, r6
   10624:	47a8      	blx	r5
   10626:	9801      	ldr	r0, [sp, #4]
   10628:	b005      	add	sp, #20
   1062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1062c:	00016837 	.word	0x00016837
   10630:	0000cbd9 	.word	0x0000cbd9
   10634:	20003170 	.word	0x20003170
   10638:	00009385 	.word	0x00009385
   1063c:	00010445 	.word	0x00010445

00010640 <ExecuteDutyCycle>:
   10640:	b570      	push	{r4, r5, r6, lr}
   10642:	7803      	ldrb	r3, [r0, #0]
   10644:	1c46      	adds	r6, r0, #1
   10646:	2b0f      	cmp	r3, #15
   10648:	d80f      	bhi.n	1066a <ExecuteDutyCycle+0x2a>
   1064a:	4c09      	ldr	r4, [pc, #36]	; (10670 <ExecuteDutyCycle+0x30>)
   1064c:	210b      	movs	r1, #11
   1064e:	0022      	movs	r2, r4
   10650:	2000      	movs	r0, #0
   10652:	3298      	adds	r2, #152	; 0x98
   10654:	4d07      	ldr	r5, [pc, #28]	; (10674 <ExecuteDutyCycle+0x34>)
   10656:	7013      	strb	r3, [r2, #0]
   10658:	47a8      	blx	r5
   1065a:	2320      	movs	r3, #32
   1065c:	3484      	adds	r4, #132	; 0x84
   1065e:	7862      	ldrb	r2, [r4, #1]
   10660:	210b      	movs	r1, #11
   10662:	4313      	orrs	r3, r2
   10664:	7063      	strb	r3, [r4, #1]
   10666:	2001      	movs	r0, #1
   10668:	47a8      	blx	r5
   1066a:	0030      	movs	r0, r6
   1066c:	bd70      	pop	{r4, r5, r6, pc}
   1066e:	46c0      	nop			; (mov r8, r8)
   10670:	20003170 	.word	0x20003170
   10674:	00009385 	.word	0x00009385

00010678 <ExecuteDlChannel>:
   10678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1067a:	b089      	sub	sp, #36	; 0x24
   1067c:	7805      	ldrb	r5, [r0, #0]
   1067e:	ab02      	add	r3, sp, #8
   10680:	1c41      	adds	r1, r0, #1
   10682:	0007      	movs	r7, r0
   10684:	719d      	strb	r5, [r3, #6]
   10686:	1d9e      	adds	r6, r3, #6
   10688:	2204      	movs	r2, #4
   1068a:	4b23      	ldr	r3, [pc, #140]	; (10718 <ExecuteDlChannel+0xa0>)
   1068c:	a805      	add	r0, sp, #20
   1068e:	4798      	blx	r3
   10690:	9b05      	ldr	r3, [sp, #20]
   10692:	a904      	add	r1, sp, #16
   10694:	021c      	lsls	r4, r3, #8
   10696:	2364      	movs	r3, #100	; 0x64
   10698:	0a24      	lsrs	r4, r4, #8
   1069a:	435c      	muls	r4, r3
   1069c:	1d3b      	adds	r3, r7, #4
   1069e:	9301      	str	r3, [sp, #4]
   106a0:	2301      	movs	r3, #1
   106a2:	2015      	movs	r0, #21
   106a4:	704b      	strb	r3, [r1, #1]
   106a6:	4b1d      	ldr	r3, [pc, #116]	; (1071c <ExecuteDlChannel+0xa4>)
   106a8:	9405      	str	r4, [sp, #20]
   106aa:	700d      	strb	r5, [r1, #0]
   106ac:	4798      	blx	r3
   106ae:	2808      	cmp	r0, #8
   106b0:	d12f      	bne.n	10712 <ExecuteDlChannel+0x9a>
   106b2:	ab02      	add	r3, sp, #8
   106b4:	1ddd      	adds	r5, r3, #7
   106b6:	2300      	movs	r3, #0
   106b8:	702b      	strb	r3, [r5, #0]
   106ba:	7833      	ldrb	r3, [r6, #0]
   106bc:	af06      	add	r7, sp, #24
   106be:	713b      	strb	r3, [r7, #4]
   106c0:	002a      	movs	r2, r5
   106c2:	0031      	movs	r1, r6
   106c4:	300e      	adds	r0, #14
   106c6:	4b16      	ldr	r3, [pc, #88]	; (10720 <ExecuteDlChannel+0xa8>)
   106c8:	9406      	str	r4, [sp, #24]
   106ca:	4798      	blx	r3
   106cc:	280a      	cmp	r0, #10
   106ce:	d00d      	beq.n	106ec <ExecuteDlChannel+0x74>
   106d0:	782a      	ldrb	r2, [r5, #0]
   106d2:	2a01      	cmp	r2, #1
   106d4:	d10a      	bne.n	106ec <ExecuteDlChannel+0x74>
   106d6:	4b13      	ldr	r3, [pc, #76]	; (10724 <ExecuteDlChannel+0xac>)
   106d8:	0019      	movs	r1, r3
   106da:	31e0      	adds	r1, #224	; 0xe0
   106dc:	7808      	ldrb	r0, [r1, #0]
   106de:	2103      	movs	r1, #3
   106e0:	4341      	muls	r1, r0
   106e2:	185b      	adds	r3, r3, r1
   106e4:	3398      	adds	r3, #152	; 0x98
   106e6:	78d9      	ldrb	r1, [r3, #3]
   106e8:	430a      	orrs	r2, r1
   106ea:	70da      	strb	r2, [r3, #3]
   106ec:	0039      	movs	r1, r7
   106ee:	2033      	movs	r0, #51	; 0x33
   106f0:	4b0d      	ldr	r3, [pc, #52]	; (10728 <ExecuteDlChannel+0xb0>)
   106f2:	4798      	blx	r3
   106f4:	2808      	cmp	r0, #8
   106f6:	d10c      	bne.n	10712 <ExecuteDlChannel+0x9a>
   106f8:	4b0a      	ldr	r3, [pc, #40]	; (10724 <ExecuteDlChannel+0xac>)
   106fa:	001a      	movs	r2, r3
   106fc:	32e0      	adds	r2, #224	; 0xe0
   106fe:	7811      	ldrb	r1, [r2, #0]
   10700:	2203      	movs	r2, #3
   10702:	434a      	muls	r2, r1
   10704:	189b      	adds	r3, r3, r2
   10706:	2280      	movs	r2, #128	; 0x80
   10708:	3398      	adds	r3, #152	; 0x98
   1070a:	7899      	ldrb	r1, [r3, #2]
   1070c:	4252      	negs	r2, r2
   1070e:	430a      	orrs	r2, r1
   10710:	709a      	strb	r2, [r3, #2]
   10712:	9801      	ldr	r0, [sp, #4]
   10714:	b009      	add	sp, #36	; 0x24
   10716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10718:	00016837 	.word	0x00016837
   1071c:	0000cbd9 	.word	0x0000cbd9
   10720:	0000cbbd 	.word	0x0000cbbd
   10724:	20003170 	.word	0x20003170
   10728:	0000cbf5 	.word	0x0000cbf5

0001072c <ExecuteTxParamSetup>:
   1072c:	220f      	movs	r2, #15
   1072e:	b513      	push	{r0, r1, r4, lr}
   10730:	7803      	ldrb	r3, [r0, #0]
   10732:	4c0f      	ldr	r4, [pc, #60]	; (10770 <ExecuteTxParamSetup+0x44>)
   10734:	401a      	ands	r2, r3
   10736:	5ca2      	ldrb	r2, [r4, r2]
   10738:	2401      	movs	r4, #1
   1073a:	a901      	add	r1, sp, #4
   1073c:	700a      	strb	r2, [r1, #0]
   1073e:	111a      	asrs	r2, r3, #4
   10740:	115b      	asrs	r3, r3, #5
   10742:	4023      	ands	r3, r4
   10744:	40a3      	lsls	r3, r4
   10746:	4022      	ands	r2, r4
   10748:	4313      	orrs	r3, r2
   1074a:	704b      	strb	r3, [r1, #1]
   1074c:	1904      	adds	r4, r0, r4
   1074e:	4b09      	ldr	r3, [pc, #36]	; (10774 <ExecuteTxParamSetup+0x48>)
   10750:	2034      	movs	r0, #52	; 0x34
   10752:	4798      	blx	r3
   10754:	2808      	cmp	r0, #8
   10756:	d009      	beq.n	1076c <ExecuteTxParamSetup+0x40>
   10758:	4b07      	ldr	r3, [pc, #28]	; (10778 <ExecuteTxParamSetup+0x4c>)
   1075a:	001a      	movs	r2, r3
   1075c:	32e0      	adds	r2, #224	; 0xe0
   1075e:	7811      	ldrb	r1, [r2, #0]
   10760:	2203      	movs	r2, #3
   10762:	434a      	muls	r2, r1
   10764:	189b      	adds	r3, r3, r2
   10766:	22ff      	movs	r2, #255	; 0xff
   10768:	3399      	adds	r3, #153	; 0x99
   1076a:	701a      	strb	r2, [r3, #0]
   1076c:	0020      	movs	r0, r4
   1076e:	bd16      	pop	{r1, r2, r4, pc}
   10770:	00018d61 	.word	0x00018d61
   10774:	0000cbf5 	.word	0x0000cbf5
   10778:	20003170 	.word	0x20003170

0001077c <ExecuteLinkAdr>:
   1077c:	220f      	movs	r2, #15
   1077e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10780:	0006      	movs	r6, r0
   10782:	7803      	ldrb	r3, [r0, #0]
   10784:	b089      	sub	sp, #36	; 0x24
   10786:	401a      	ands	r2, r3
   10788:	a905      	add	r1, sp, #20
   1078a:	700a      	strb	r2, [r1, #0]
   1078c:	aa04      	add	r2, sp, #16
   1078e:	1d97      	adds	r7, r2, #6
   10790:	091b      	lsrs	r3, r3, #4
   10792:	7153      	strb	r3, [r2, #5]
   10794:	1c41      	adds	r1, r0, #1
   10796:	2202      	movs	r2, #2
   10798:	0038      	movs	r0, r7
   1079a:	4b3d      	ldr	r3, [pc, #244]	; (10890 <ExecuteLinkAdr+0x114>)
   1079c:	4798      	blx	r3
   1079e:	2201      	movs	r2, #1
   107a0:	1d33      	adds	r3, r6, #4
   107a2:	9303      	str	r3, [sp, #12]
   107a4:	78f3      	ldrb	r3, [r6, #3]
   107a6:	4c3b      	ldr	r4, [pc, #236]	; (10894 <ExecuteLinkAdr+0x118>)
   107a8:	4d3b      	ldr	r5, [pc, #236]	; (10898 <ExecuteLinkAdr+0x11c>)
   107aa:	065b      	lsls	r3, r3, #25
   107ac:	0f5b      	lsrs	r3, r3, #29
   107ae:	9300      	str	r3, [sp, #0]
   107b0:	5d63      	ldrb	r3, [r4, r5]
   107b2:	a906      	add	r1, sp, #24
   107b4:	4393      	bics	r3, r2
   107b6:	1892      	adds	r2, r2, r2
   107b8:	4393      	bics	r3, r2
   107ba:	3202      	adds	r2, #2
   107bc:	4393      	bics	r3, r2
   107be:	5563      	strb	r3, [r4, r5]
   107c0:	883b      	ldrh	r3, [r7, #0]
   107c2:	2037      	movs	r0, #55	; 0x37
   107c4:	9302      	str	r3, [sp, #8]
   107c6:	466b      	mov	r3, sp
   107c8:	891b      	ldrh	r3, [r3, #8]
   107ca:	4f34      	ldr	r7, [pc, #208]	; (1089c <ExecuteLinkAdr+0x120>)
   107cc:	804b      	strh	r3, [r1, #2]
   107ce:	466b      	mov	r3, sp
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	700b      	strb	r3, [r1, #0]
   107d4:	47b8      	blx	r7
   107d6:	2808      	cmp	r0, #8
   107d8:	d117      	bne.n	1080a <ExecuteLinkAdr+0x8e>
   107da:	466b      	mov	r3, sp
   107dc:	891b      	ldrh	r3, [r3, #8]
   107de:	a907      	add	r1, sp, #28
   107e0:	800b      	strh	r3, [r1, #0]
   107e2:	466b      	mov	r3, sp
   107e4:	781b      	ldrb	r3, [r3, #0]
   107e6:	3014      	adds	r0, #20
   107e8:	708b      	strb	r3, [r1, #2]
   107ea:	4b2d      	ldr	r3, [pc, #180]	; (108a0 <ExecuteLinkAdr+0x124>)
   107ec:	4798      	blx	r3
   107ee:	2201      	movs	r2, #1
   107f0:	5d63      	ldrb	r3, [r4, r5]
   107f2:	2010      	movs	r0, #16
   107f4:	4313      	orrs	r3, r2
   107f6:	5563      	strb	r3, [r4, r5]
   107f8:	ab04      	add	r3, sp, #16
   107fa:	1d59      	adds	r1, r3, #5
   107fc:	47b8      	blx	r7
   107fe:	2808      	cmp	r0, #8
   10800:	d103      	bne.n	1080a <ExecuteLinkAdr+0x8e>
   10802:	2202      	movs	r2, #2
   10804:	5d63      	ldrb	r3, [r4, r5]
   10806:	4313      	orrs	r3, r2
   10808:	5563      	strb	r3, [r4, r5]
   1080a:	af05      	add	r7, sp, #20
   1080c:	4b23      	ldr	r3, [pc, #140]	; (1089c <ExecuteLinkAdr+0x120>)
   1080e:	0039      	movs	r1, r7
   10810:	201d      	movs	r0, #29
   10812:	4798      	blx	r3
   10814:	4b1f      	ldr	r3, [pc, #124]	; (10894 <ExecuteLinkAdr+0x118>)
   10816:	2808      	cmp	r0, #8
   10818:	d103      	bne.n	10822 <ExecuteLinkAdr+0xa6>
   1081a:	2204      	movs	r2, #4
   1081c:	5d59      	ldrb	r1, [r3, r5]
   1081e:	430a      	orrs	r2, r1
   10820:	555a      	strb	r2, [r3, r5]
   10822:	5d5a      	ldrb	r2, [r3, r5]
   10824:	43d2      	mvns	r2, r2
   10826:	0752      	lsls	r2, r2, #29
   10828:	d12a      	bne.n	10880 <ExecuteLinkAdr+0x104>
   1082a:	4669      	mov	r1, sp
   1082c:	4a1d      	ldr	r2, [pc, #116]	; (108a4 <ExecuteLinkAdr+0x128>)
   1082e:	7a09      	ldrb	r1, [r1, #8]
   10830:	5499      	strb	r1, [r3, r2]
   10832:	9a02      	ldr	r2, [sp, #8]
   10834:	491b      	ldr	r1, [pc, #108]	; (108a4 <ExecuteLinkAdr+0x128>)
   10836:	0a12      	lsrs	r2, r2, #8
   10838:	1859      	adds	r1, r3, r1
   1083a:	704a      	strb	r2, [r1, #1]
   1083c:	aa04      	add	r2, sp, #16
   1083e:	3205      	adds	r2, #5
   10840:	7812      	ldrb	r2, [r2, #0]
   10842:	2a0f      	cmp	r2, #15
   10844:	d101      	bne.n	1084a <ExecuteLinkAdr+0xce>
   10846:	33e7      	adds	r3, #231	; 0xe7
   10848:	781a      	ldrb	r2, [r3, #0]
   1084a:	2389      	movs	r3, #137	; 0x89
   1084c:	2170      	movs	r1, #112	; 0x70
   1084e:	2070      	movs	r0, #112	; 0x70
   10850:	009b      	lsls	r3, r3, #2
   10852:	54e2      	strb	r2, [r4, r3]
   10854:	78f3      	ldrb	r3, [r6, #3]
   10856:	4a14      	ldr	r2, [pc, #80]	; (108a8 <ExecuteLinkAdr+0x12c>)
   10858:	4019      	ands	r1, r3
   1085a:	5ca3      	ldrb	r3, [r4, r2]
   1085c:	4383      	bics	r3, r0
   1085e:	430b      	orrs	r3, r1
   10860:	54a3      	strb	r3, [r4, r2]
   10862:	78f1      	ldrb	r1, [r6, #3]
   10864:	3861      	subs	r0, #97	; 0x61
   10866:	b2db      	uxtb	r3, r3
   10868:	4001      	ands	r1, r0
   1086a:	4383      	bics	r3, r0
   1086c:	430b      	orrs	r3, r1
   1086e:	54a3      	strb	r3, [r4, r2]
   10870:	783b      	ldrb	r3, [r7, #0]
   10872:	4283      	cmp	r3, r0
   10874:	d101      	bne.n	1087a <ExecuteLinkAdr+0xfe>
   10876:	34e9      	adds	r4, #233	; 0xe9
   10878:	7823      	ldrb	r3, [r4, #0]
   1087a:	4a0c      	ldr	r2, [pc, #48]	; (108ac <ExecuteLinkAdr+0x130>)
   1087c:	4905      	ldr	r1, [pc, #20]	; (10894 <ExecuteLinkAdr+0x118>)
   1087e:	548b      	strb	r3, [r1, r2]
   10880:	4904      	ldr	r1, [pc, #16]	; (10894 <ExecuteLinkAdr+0x118>)
   10882:	4a0b      	ldr	r2, [pc, #44]	; (108b0 <ExecuteLinkAdr+0x134>)
   10884:	9803      	ldr	r0, [sp, #12]
   10886:	5c8b      	ldrb	r3, [r1, r2]
   10888:	3301      	adds	r3, #1
   1088a:	548b      	strb	r3, [r1, r2]
   1088c:	b009      	add	sp, #36	; 0x24
   1088e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10890:	00016837 	.word	0x00016837
   10894:	20003170 	.word	0x20003170
   10898:	00000223 	.word	0x00000223
   1089c:	0000cbd9 	.word	0x0000cbd9
   108a0:	0000cbf5 	.word	0x0000cbf5
   108a4:	00000227 	.word	0x00000227
   108a8:	00000229 	.word	0x00000229
   108ac:	00000225 	.word	0x00000225
   108b0:	00000226 	.word	0x00000226

000108b4 <ExecuteDevTimeAns>:
   108b4:	b510      	push	{r4, lr}
   108b6:	0001      	movs	r1, r0
   108b8:	0004      	movs	r4, r0
   108ba:	2204      	movs	r2, #4
   108bc:	4b04      	ldr	r3, [pc, #16]	; (108d0 <ExecuteDevTimeAns+0x1c>)
   108be:	4805      	ldr	r0, [pc, #20]	; (108d4 <ExecuteDevTimeAns+0x20>)
   108c0:	4798      	blx	r3
   108c2:	238e      	movs	r3, #142	; 0x8e
   108c4:	7921      	ldrb	r1, [r4, #4]
   108c6:	4a04      	ldr	r2, [pc, #16]	; (108d8 <ExecuteDevTimeAns+0x24>)
   108c8:	009b      	lsls	r3, r3, #2
   108ca:	1d60      	adds	r0, r4, #5
   108cc:	54d1      	strb	r1, [r2, r3]
   108ce:	bd10      	pop	{r4, pc}
   108d0:	00016837 	.word	0x00016837
   108d4:	200033a4 	.word	0x200033a4
   108d8:	20003170 	.word	0x20003170

000108dc <PrepareJoinRequestFrame>:
   108dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   108de:	2210      	movs	r2, #16
   108e0:	4d22      	ldr	r5, [pc, #136]	; (1096c <PrepareJoinRequestFrame+0x90>)
   108e2:	4b23      	ldr	r3, [pc, #140]	; (10970 <PrepareJoinRequestFrame+0x94>)
   108e4:	32ff      	adds	r2, #255	; 0xff
   108e6:	2100      	movs	r1, #0
   108e8:	0028      	movs	r0, r5
   108ea:	4798      	blx	r3
   108ec:	2300      	movs	r3, #0
   108ee:	4c21      	ldr	r4, [pc, #132]	; (10974 <PrepareJoinRequestFrame+0x98>)
   108f0:	702b      	strb	r3, [r5, #0]
   108f2:	4b21      	ldr	r3, [pc, #132]	; (10978 <PrepareJoinRequestFrame+0x9c>)
   108f4:	5ce3      	ldrb	r3, [r4, r3]
   108f6:	2b00      	cmp	r3, #0
   108f8:	d006      	beq.n	10908 <PrepareJoinRequestFrame+0x2c>
   108fa:	4920      	ldr	r1, [pc, #128]	; (1097c <PrepareJoinRequestFrame+0xa0>)
   108fc:	2006      	movs	r0, #6
   108fe:	4e20      	ldr	r6, [pc, #128]	; (10980 <PrepareJoinRequestFrame+0xa4>)
   10900:	47b0      	blx	r6
   10902:	4920      	ldr	r1, [pc, #128]	; (10984 <PrepareJoinRequestFrame+0xa8>)
   10904:	2007      	movs	r0, #7
   10906:	47b0      	blx	r6
   10908:	2300      	movs	r3, #0
   1090a:	205c      	movs	r0, #92	; 0x5c
   1090c:	1ac1      	subs	r1, r0, r3
   1090e:	5c61      	ldrb	r1, [r4, r1]
   10910:	18ea      	adds	r2, r5, r3
   10912:	3301      	adds	r3, #1
   10914:	7051      	strb	r1, [r2, #1]
   10916:	2b08      	cmp	r3, #8
   10918:	d1f8      	bne.n	1090c <PrepareJoinRequestFrame+0x30>
   1091a:	2300      	movs	r3, #0
   1091c:	2064      	movs	r0, #100	; 0x64
   1091e:	1ac1      	subs	r1, r0, r3
   10920:	5c61      	ldrb	r1, [r4, r1]
   10922:	18ea      	adds	r2, r5, r3
   10924:	3301      	adds	r3, #1
   10926:	7251      	strb	r1, [r2, #9]
   10928:	2b08      	cmp	r3, #8
   1092a:	d1f8      	bne.n	1091e <PrepareJoinRequestFrame+0x42>
   1092c:	4b16      	ldr	r3, [pc, #88]	; (10988 <PrepareJoinRequestFrame+0xac>)
   1092e:	4798      	blx	r3
   10930:	4b16      	ldr	r3, [pc, #88]	; (1098c <PrepareJoinRequestFrame+0xb0>)
   10932:	4917      	ldr	r1, [pc, #92]	; (10990 <PrepareJoinRequestFrame+0xb4>)
   10934:	4798      	blx	r3
   10936:	34cc      	adds	r4, #204	; 0xcc
   10938:	8021      	strh	r1, [r4, #0]
   1093a:	2202      	movs	r2, #2
   1093c:	0021      	movs	r1, r4
   1093e:	4815      	ldr	r0, [pc, #84]	; (10994 <PrepareJoinRequestFrame+0xb8>)
   10940:	4c15      	ldr	r4, [pc, #84]	; (10998 <PrepareJoinRequestFrame+0xbc>)
   10942:	47a0      	blx	r4
   10944:	2313      	movs	r3, #19
   10946:	4e15      	ldr	r6, [pc, #84]	; (1099c <PrepareJoinRequestFrame+0xc0>)
   10948:	9300      	str	r3, [sp, #0]
   1094a:	0032      	movs	r2, r6
   1094c:	002b      	movs	r3, r5
   1094e:	2100      	movs	r1, #0
   10950:	4d13      	ldr	r5, [pc, #76]	; (109a0 <PrepareJoinRequestFrame+0xc4>)
   10952:	4814      	ldr	r0, [pc, #80]	; (109a4 <PrepareJoinRequestFrame+0xc8>)
   10954:	47a8      	blx	r5
   10956:	0031      	movs	r1, r6
   10958:	2204      	movs	r2, #4
   1095a:	a803      	add	r0, sp, #12
   1095c:	47a0      	blx	r4
   1095e:	2204      	movs	r2, #4
   10960:	a903      	add	r1, sp, #12
   10962:	4811      	ldr	r0, [pc, #68]	; (109a8 <PrepareJoinRequestFrame+0xcc>)
   10964:	47a0      	blx	r4
   10966:	2017      	movs	r0, #23
   10968:	b004      	add	sp, #16
   1096a:	bd70      	pop	{r4, r5, r6, pc}
   1096c:	200033b8 	.word	0x200033b8
   10970:	00016849 	.word	0x00016849
   10974:	20003170 	.word	0x20003170
   10978:	0000022d 	.word	0x0000022d
   1097c:	200031c5 	.word	0x200031c5
   10980:	00007255 	.word	0x00007255
   10984:	200031cd 	.word	0x200031cd
   10988:	00016f7d 	.word	0x00016f7d
   1098c:	000138b5 	.word	0x000138b5
   10990:	0000ffff 	.word	0x0000ffff
   10994:	200033c9 	.word	0x200033c9
   10998:	00016837 	.word	0x00016837
   1099c:	20001eb5 	.word	0x20001eb5
   109a0:	00007259 	.word	0x00007259
   109a4:	200031b5 	.word	0x200031b5
   109a8:	200033cb 	.word	0x200033cb

000109ac <ConfigureRadioRx>:
   109ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ae:	b087      	sub	sp, #28
   109b0:	466b      	mov	r3, sp
   109b2:	2600      	movs	r6, #0
   109b4:	1ddc      	adds	r4, r3, #7
   109b6:	71d8      	strb	r0, [r3, #7]
   109b8:	729e      	strb	r6, [r3, #10]
   109ba:	466a      	mov	r2, sp
   109bc:	2301      	movs	r3, #1
   109be:	72d3      	strb	r3, [r2, #11]
   109c0:	2215      	movs	r2, #21
   109c2:	ad03      	add	r5, sp, #12
   109c4:	4f11      	ldr	r7, [pc, #68]	; (10a0c <ConfigureRadioRx+0x60>)
   109c6:	9100      	str	r1, [sp, #0]
   109c8:	446a      	add	r2, sp
   109ca:	0021      	movs	r1, r4
   109cc:	2023      	movs	r0, #35	; 0x23
   109ce:	80ae      	strh	r6, [r5, #4]
   109d0:	47b8      	blx	r7
   109d2:	2216      	movs	r2, #22
   109d4:	0021      	movs	r1, r4
   109d6:	446a      	add	r2, sp
   109d8:	2024      	movs	r0, #36	; 0x24
   109da:	47b8      	blx	r7
   109dc:	2217      	movs	r2, #23
   109de:	0021      	movs	r1, r4
   109e0:	446a      	add	r2, sp
   109e2:	2025      	movs	r0, #37	; 0x25
   109e4:	47b8      	blx	r7
   109e6:	9b00      	ldr	r3, [sp, #0]
   109e8:	0028      	movs	r0, r5
   109ea:	9303      	str	r3, [sp, #12]
   109ec:	4b08      	ldr	r3, [pc, #32]	; (10a10 <ConfigureRadioRx+0x64>)
   109ee:	80ae      	strh	r6, [r5, #4]
   109f0:	4798      	blx	r3
   109f2:	230a      	movs	r3, #10
   109f4:	446b      	add	r3, sp
   109f6:	0019      	movs	r1, r3
   109f8:	4c06      	ldr	r4, [pc, #24]	; (10a14 <ConfigureRadioRx+0x68>)
   109fa:	2014      	movs	r0, #20
   109fc:	47a0      	blx	r4
   109fe:	230b      	movs	r3, #11
   10a00:	446b      	add	r3, sp
   10a02:	0019      	movs	r1, r3
   10a04:	2006      	movs	r0, #6
   10a06:	47a0      	blx	r4
   10a08:	b007      	add	sp, #28
   10a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a0c:	0000cbbd 	.word	0x0000cbbd
   10a10:	00010019 	.word	0x00010019
   10a14:	0000e3a5 	.word	0x0000e3a5

00010a18 <ConfigureRadioTx>:
   10a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a1a:	2517      	movs	r5, #23
   10a1c:	2300      	movs	r3, #0
   10a1e:	2616      	movs	r6, #22
   10a20:	2701      	movs	r7, #1
   10a22:	b087      	sub	sp, #28
   10a24:	ac01      	add	r4, sp, #4
   10a26:	446d      	add	r5, sp
   10a28:	9001      	str	r0, [sp, #4]
   10a2a:	702b      	strb	r3, [r5, #0]
   10a2c:	0020      	movs	r0, r4
   10a2e:	4b10      	ldr	r3, [pc, #64]	; (10a70 <ConfigureRadioTx+0x58>)
   10a30:	446e      	add	r6, sp
   10a32:	9102      	str	r1, [sp, #8]
   10a34:	9203      	str	r2, [sp, #12]
   10a36:	7037      	strb	r7, [r6, #0]
   10a38:	4798      	blx	r3
   10a3a:	79e3      	ldrb	r3, [r4, #7]
   10a3c:	4c0d      	ldr	r4, [pc, #52]	; (10a74 <ConfigureRadioTx+0x5c>)
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d00a      	beq.n	10a58 <ConfigureRadioTx+0x40>
   10a42:	4b0d      	ldr	r3, [pc, #52]	; (10a78 <ConfigureRadioTx+0x60>)
   10a44:	4a0d      	ldr	r2, [pc, #52]	; (10a7c <ConfigureRadioTx+0x64>)
   10a46:	490e      	ldr	r1, [pc, #56]	; (10a80 <ConfigureRadioTx+0x68>)
   10a48:	54d7      	strb	r7, [r2, r3]
   10a4a:	200b      	movs	r0, #11
   10a4c:	4b0d      	ldr	r3, [pc, #52]	; (10a84 <ConfigureRadioTx+0x6c>)
   10a4e:	4798      	blx	r3
   10a50:	210a      	movs	r1, #10
   10a52:	200b      	movs	r0, #11
   10a54:	4469      	add	r1, sp
   10a56:	47a0      	blx	r4
   10a58:	a903      	add	r1, sp, #12
   10a5a:	2004      	movs	r0, #4
   10a5c:	47a0      	blx	r4
   10a5e:	0031      	movs	r1, r6
   10a60:	2014      	movs	r0, #20
   10a62:	47a0      	blx	r4
   10a64:	0029      	movs	r1, r5
   10a66:	2006      	movs	r0, #6
   10a68:	47a0      	blx	r4
   10a6a:	b007      	add	sp, #28
   10a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a6e:	46c0      	nop			; (mov r8, r8)
   10a70:	00010019 	.word	0x00010019
   10a74:	0000e3a5 	.word	0x0000e3a5
   10a78:	00000222 	.word	0x00000222
   10a7c:	20003170 	.word	0x20003170
   10a80:	20003391 	.word	0x20003391
   10a84:	0000e2b5 	.word	0x0000e2b5

00010a88 <LorawanGetChAndInitiateRadioTransmit>:
   10a88:	2301      	movs	r3, #1
   10a8a:	b530      	push	{r4, r5, lr}
   10a8c:	4c46      	ldr	r4, [pc, #280]	; (10ba8 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10a8e:	b089      	sub	sp, #36	; 0x24
   10a90:	a902      	add	r1, sp, #8
   10a92:	700b      	strb	r3, [r1, #0]
   10a94:	0023      	movs	r3, r4
   10a96:	33e9      	adds	r3, #233	; 0xe9
   10a98:	781b      	ldrb	r3, [r3, #0]
   10a9a:	704b      	strb	r3, [r1, #1]
   10a9c:	0023      	movs	r3, r4
   10a9e:	33e7      	adds	r3, #231	; 0xe7
   10aa0:	781b      	ldrb	r3, [r3, #0]
   10aa2:	708b      	strb	r3, [r1, #2]
   10aa4:	0023      	movs	r3, r4
   10aa6:	33fd      	adds	r3, #253	; 0xfd
   10aa8:	781b      	ldrb	r3, [r3, #0]
   10aaa:	2b01      	cmp	r3, #1
   10aac:	d108      	bne.n	10ac0 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10aae:	0020      	movs	r0, r4
   10ab0:	220e      	movs	r2, #14
   10ab2:	3084      	adds	r0, #132	; 0x84
   10ab4:	7803      	ldrb	r3, [r0, #0]
   10ab6:	4393      	bics	r3, r2
   10ab8:	001a      	movs	r2, r3
   10aba:	230c      	movs	r3, #12
   10abc:	4313      	orrs	r3, r2
   10abe:	7003      	strb	r3, [r0, #0]
   10ac0:	aa05      	add	r2, sp, #20
   10ac2:	202e      	movs	r0, #46	; 0x2e
   10ac4:	4d39      	ldr	r5, [pc, #228]	; (10bac <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10ac6:	47a8      	blx	r5
   10ac8:	0023      	movs	r3, r4
   10aca:	2808      	cmp	r0, #8
   10acc:	d135      	bne.n	10b3a <LorawanGetChAndInitiateRadioTransmit+0xb2>
   10ace:	33fd      	adds	r3, #253	; 0xfd
   10ad0:	781b      	ldrb	r3, [r3, #0]
   10ad2:	ad03      	add	r5, sp, #12
   10ad4:	2b04      	cmp	r3, #4
   10ad6:	d108      	bne.n	10aea <LorawanGetChAndInitiateRadioTransmit+0x62>
   10ad8:	2390      	movs	r3, #144	; 0x90
   10ada:	2200      	movs	r2, #0
   10adc:	009b      	lsls	r3, r3, #2
   10ade:	54e2      	strb	r2, [r4, r3]
   10ae0:	2301      	movs	r3, #1
   10ae2:	0028      	movs	r0, r5
   10ae4:	702b      	strb	r3, [r5, #0]
   10ae6:	4b32      	ldr	r3, [pc, #200]	; (10bb0 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10ae8:	4798      	blx	r3
   10aea:	9805      	ldr	r0, [sp, #20]
   10aec:	4b31      	ldr	r3, [pc, #196]	; (10bb4 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10aee:	9906      	ldr	r1, [sp, #24]
   10af0:	9a07      	ldr	r2, [sp, #28]
   10af2:	4798      	blx	r3
   10af4:	0023      	movs	r3, r4
   10af6:	33ce      	adds	r3, #206	; 0xce
   10af8:	881b      	ldrh	r3, [r3, #0]
   10afa:	0028      	movs	r0, r5
   10afc:	702b      	strb	r3, [r5, #0]
   10afe:	4b2e      	ldr	r3, [pc, #184]	; (10bb8 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10b00:	606b      	str	r3, [r5, #4]
   10b02:	4b2e      	ldr	r3, [pc, #184]	; (10bbc <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10b04:	4798      	blx	r3
   10b06:	2800      	cmp	r0, #0
   10b08:	d109      	bne.n	10b1e <LorawanGetChAndInitiateRadioTransmit+0x96>
   10b0a:	220e      	movs	r2, #14
   10b0c:	3484      	adds	r4, #132	; 0x84
   10b0e:	7823      	ldrb	r3, [r4, #0]
   10b10:	4393      	bics	r3, r2
   10b12:	001a      	movs	r2, r3
   10b14:	2302      	movs	r3, #2
   10b16:	4313      	orrs	r3, r2
   10b18:	7023      	strb	r3, [r4, #0]
   10b1a:	b009      	add	sp, #36	; 0x24
   10b1c:	bd30      	pop	{r4, r5, pc}
   10b1e:	2200      	movs	r2, #0
   10b20:	4b27      	ldr	r3, [pc, #156]	; (10bc0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10b22:	4928      	ldr	r1, [pc, #160]	; (10bc4 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10b24:	5ce3      	ldrb	r3, [r4, r3]
   10b26:	34fc      	adds	r4, #252	; 0xfc
   10b28:	4359      	muls	r1, r3
   10b2a:	4b27      	ldr	r3, [pc, #156]	; (10bc8 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10b2c:	7820      	ldrb	r0, [r4, #0]
   10b2e:	18c9      	adds	r1, r1, r3
   10b30:	4b26      	ldr	r3, [pc, #152]	; (10bcc <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10b32:	9200      	str	r2, [sp, #0]
   10b34:	4c26      	ldr	r4, [pc, #152]	; (10bd0 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10b36:	47a0      	blx	r4
   10b38:	e7ef      	b.n	10b1a <LorawanGetChAndInitiateRadioTransmit+0x92>
   10b3a:	33ff      	adds	r3, #255	; 0xff
   10b3c:	7f5b      	ldrb	r3, [r3, #29]
   10b3e:	079a      	lsls	r2, r3, #30
   10b40:	d515      	bpl.n	10b6e <LorawanGetChAndInitiateRadioTransmit+0xe6>
   10b42:	aa03      	add	r2, sp, #12
   10b44:	4923      	ldr	r1, [pc, #140]	; (10bd4 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10b46:	2026      	movs	r0, #38	; 0x26
   10b48:	47a8      	blx	r5
   10b4a:	9b03      	ldr	r3, [sp, #12]
   10b4c:	1c5a      	adds	r2, r3, #1
   10b4e:	d001      	beq.n	10b54 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10b50:	3314      	adds	r3, #20
   10b52:	9303      	str	r3, [sp, #12]
   10b54:	21fa      	movs	r1, #250	; 0xfa
   10b56:	4b1a      	ldr	r3, [pc, #104]	; (10bc0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10b58:	9a03      	ldr	r2, [sp, #12]
   10b5a:	5ce3      	ldrb	r3, [r4, r3]
   10b5c:	0089      	lsls	r1, r1, #2
   10b5e:	1ad3      	subs	r3, r2, r3
   10b60:	2200      	movs	r2, #0
   10b62:	4359      	muls	r1, r3
   10b64:	34f2      	adds	r4, #242	; 0xf2
   10b66:	7820      	ldrb	r0, [r4, #0]
   10b68:	9200      	str	r2, [sp, #0]
   10b6a:	4b1b      	ldr	r3, [pc, #108]	; (10bd8 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10b6c:	e7e2      	b.n	10b34 <LorawanGetChAndInitiateRadioTransmit+0xac>
   10b6e:	075b      	lsls	r3, r3, #29
   10b70:	d508      	bpl.n	10b84 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   10b72:	aa03      	add	r2, sp, #12
   10b74:	4917      	ldr	r1, [pc, #92]	; (10bd4 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10b76:	2032      	movs	r0, #50	; 0x32
   10b78:	47a8      	blx	r5
   10b7a:	9b03      	ldr	r3, [sp, #12]
   10b7c:	1c5a      	adds	r2, r3, #1
   10b7e:	d0e9      	beq.n	10b54 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10b80:	3301      	adds	r3, #1
   10b82:	e7e6      	b.n	10b52 <LorawanGetChAndInitiateRadioTransmit+0xca>
   10b84:	0023      	movs	r3, r4
   10b86:	2201      	movs	r2, #1
   10b88:	3394      	adds	r3, #148	; 0x94
   10b8a:	781b      	ldrb	r3, [r3, #0]
   10b8c:	401a      	ands	r2, r3
   10b8e:	d108      	bne.n	10ba2 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10b90:	4b0b      	ldr	r3, [pc, #44]	; (10bc0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10b92:	490c      	ldr	r1, [pc, #48]	; (10bc4 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10b94:	5ce3      	ldrb	r3, [r4, r3]
   10b96:	34f2      	adds	r4, #242	; 0xf2
   10b98:	4359      	muls	r1, r3
   10b9a:	4b0b      	ldr	r3, [pc, #44]	; (10bc8 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10b9c:	7820      	ldrb	r0, [r4, #0]
   10b9e:	18c9      	adds	r1, r1, r3
   10ba0:	e7e2      	b.n	10b68 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   10ba2:	4b0e      	ldr	r3, [pc, #56]	; (10bdc <LorawanGetChAndInitiateRadioTransmit+0x154>)
   10ba4:	4798      	blx	r3
   10ba6:	e7b8      	b.n	10b1a <LorawanGetChAndInitiateRadioTransmit+0x92>
   10ba8:	20003170 	.word	0x20003170
   10bac:	0000cbbd 	.word	0x0000cbbd
   10bb0:	0000f5b1 	.word	0x0000f5b1
   10bb4:	00010a19 	.word	0x00010a19
   10bb8:	200033c8 	.word	0x200033c8
   10bbc:	0000ecd5 	.word	0x0000ecd5
   10bc0:	0000022b 	.word	0x0000022b
   10bc4:	fffffc18 	.word	0xfffffc18
   10bc8:	001e8480 	.word	0x001e8480
   10bcc:	00010be1 	.word	0x00010be1
   10bd0:	0000d105 	.word	0x0000d105
   10bd4:	20003257 	.word	0x20003257
   10bd8:	00010c99 	.word	0x00010c99
   10bdc:	000103f1 	.word	0x000103f1

00010be0 <TransmissionErrorCallback>:
   10be0:	b530      	push	{r4, r5, lr}
   10be2:	4c22      	ldr	r4, [pc, #136]	; (10c6c <TransmissionErrorCallback+0x8c>)
   10be4:	2501      	movs	r5, #1
   10be6:	0023      	movs	r3, r4
   10be8:	b08b      	sub	sp, #44	; 0x2c
   10bea:	a903      	add	r1, sp, #12
   10bec:	700d      	strb	r5, [r1, #0]
   10bee:	33e9      	adds	r3, #233	; 0xe9
   10bf0:	781b      	ldrb	r3, [r3, #0]
   10bf2:	aa07      	add	r2, sp, #28
   10bf4:	704b      	strb	r3, [r1, #1]
   10bf6:	0023      	movs	r3, r4
   10bf8:	33e7      	adds	r3, #231	; 0xe7
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	202e      	movs	r0, #46	; 0x2e
   10bfe:	708b      	strb	r3, [r1, #2]
   10c00:	4b1b      	ldr	r3, [pc, #108]	; (10c70 <TransmissionErrorCallback+0x90>)
   10c02:	4798      	blx	r3
   10c04:	2808      	cmp	r0, #8
   10c06:	d121      	bne.n	10c4c <TransmissionErrorCallback+0x6c>
   10c08:	a804      	add	r0, sp, #16
   10c0a:	4b1a      	ldr	r3, [pc, #104]	; (10c74 <TransmissionErrorCallback+0x94>)
   10c0c:	7005      	strb	r5, [r0, #0]
   10c0e:	4798      	blx	r3
   10c10:	9807      	ldr	r0, [sp, #28]
   10c12:	4b19      	ldr	r3, [pc, #100]	; (10c78 <TransmissionErrorCallback+0x98>)
   10c14:	9908      	ldr	r1, [sp, #32]
   10c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c18:	4798      	blx	r3
   10c1a:	0023      	movs	r3, r4
   10c1c:	33ce      	adds	r3, #206	; 0xce
   10c1e:	881b      	ldrh	r3, [r3, #0]
   10c20:	a805      	add	r0, sp, #20
   10c22:	7003      	strb	r3, [r0, #0]
   10c24:	4b15      	ldr	r3, [pc, #84]	; (10c7c <TransmissionErrorCallback+0x9c>)
   10c26:	6043      	str	r3, [r0, #4]
   10c28:	4b15      	ldr	r3, [pc, #84]	; (10c80 <TransmissionErrorCallback+0xa0>)
   10c2a:	4798      	blx	r3
   10c2c:	2800      	cmp	r0, #0
   10c2e:	d01a      	beq.n	10c66 <TransmissionErrorCallback+0x86>
   10c30:	0023      	movs	r3, r4
   10c32:	33fd      	adds	r3, #253	; 0xfd
   10c34:	781b      	ldrb	r3, [r3, #0]
   10c36:	42ab      	cmp	r3, r5
   10c38:	d108      	bne.n	10c4c <TransmissionErrorCallback+0x6c>
   10c3a:	0021      	movs	r1, r4
   10c3c:	220e      	movs	r2, #14
   10c3e:	3184      	adds	r1, #132	; 0x84
   10c40:	780b      	ldrb	r3, [r1, #0]
   10c42:	4393      	bics	r3, r2
   10c44:	001a      	movs	r2, r3
   10c46:	230c      	movs	r3, #12
   10c48:	4313      	orrs	r3, r2
   10c4a:	700b      	strb	r3, [r1, #0]
   10c4c:	2200      	movs	r2, #0
   10c4e:	4b0d      	ldr	r3, [pc, #52]	; (10c84 <TransmissionErrorCallback+0xa4>)
   10c50:	490d      	ldr	r1, [pc, #52]	; (10c88 <TransmissionErrorCallback+0xa8>)
   10c52:	5ce3      	ldrb	r3, [r4, r3]
   10c54:	34fc      	adds	r4, #252	; 0xfc
   10c56:	4359      	muls	r1, r3
   10c58:	4b0c      	ldr	r3, [pc, #48]	; (10c8c <TransmissionErrorCallback+0xac>)
   10c5a:	7820      	ldrb	r0, [r4, #0]
   10c5c:	18c9      	adds	r1, r1, r3
   10c5e:	9200      	str	r2, [sp, #0]
   10c60:	4b0b      	ldr	r3, [pc, #44]	; (10c90 <TransmissionErrorCallback+0xb0>)
   10c62:	4c0c      	ldr	r4, [pc, #48]	; (10c94 <TransmissionErrorCallback+0xb4>)
   10c64:	47a0      	blx	r4
   10c66:	b00b      	add	sp, #44	; 0x2c
   10c68:	bd30      	pop	{r4, r5, pc}
   10c6a:	46c0      	nop			; (mov r8, r8)
   10c6c:	20003170 	.word	0x20003170
   10c70:	0000cbbd 	.word	0x0000cbbd
   10c74:	0000f5b1 	.word	0x0000f5b1
   10c78:	00010a19 	.word	0x00010a19
   10c7c:	200033c8 	.word	0x200033c8
   10c80:	0000ecd5 	.word	0x0000ecd5
   10c84:	0000022b 	.word	0x0000022b
   10c88:	fffffc18 	.word	0xfffffc18
   10c8c:	001e8480 	.word	0x001e8480
   10c90:	00010be1 	.word	0x00010be1
   10c94:	0000d105 	.word	0x0000d105

00010c98 <UnconfirmedTransmissionCallback>:
   10c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c9a:	4c3a      	ldr	r4, [pc, #232]	; (10d84 <UnconfirmedTransmissionCallback+0xec>)
   10c9c:	b08b      	sub	sp, #44	; 0x2c
   10c9e:	0023      	movs	r3, r4
   10ca0:	33ce      	adds	r3, #206	; 0xce
   10ca2:	881b      	ldrh	r3, [r3, #0]
   10ca4:	af05      	add	r7, sp, #20
   10ca6:	703b      	strb	r3, [r7, #0]
   10ca8:	4b37      	ldr	r3, [pc, #220]	; (10d88 <UnconfirmedTransmissionCallback+0xf0>)
   10caa:	a903      	add	r1, sp, #12
   10cac:	9306      	str	r3, [sp, #24]
   10cae:	2301      	movs	r3, #1
   10cb0:	700b      	strb	r3, [r1, #0]
   10cb2:	0023      	movs	r3, r4
   10cb4:	0026      	movs	r6, r4
   10cb6:	33e9      	adds	r3, #233	; 0xe9
   10cb8:	781b      	ldrb	r3, [r3, #0]
   10cba:	36e7      	adds	r6, #231	; 0xe7
   10cbc:	704b      	strb	r3, [r1, #1]
   10cbe:	7833      	ldrb	r3, [r6, #0]
   10cc0:	aa07      	add	r2, sp, #28
   10cc2:	202e      	movs	r0, #46	; 0x2e
   10cc4:	4d31      	ldr	r5, [pc, #196]	; (10d8c <UnconfirmedTransmissionCallback+0xf4>)
   10cc6:	708b      	strb	r3, [r1, #2]
   10cc8:	47a8      	blx	r5
   10cca:	2808      	cmp	r0, #8
   10ccc:	d12b      	bne.n	10d26 <UnconfirmedTransmissionCallback+0x8e>
   10cce:	2301      	movs	r3, #1
   10cd0:	a804      	add	r0, sp, #16
   10cd2:	7003      	strb	r3, [r0, #0]
   10cd4:	4b2e      	ldr	r3, [pc, #184]	; (10d90 <UnconfirmedTransmissionCallback+0xf8>)
   10cd6:	4798      	blx	r3
   10cd8:	9807      	ldr	r0, [sp, #28]
   10cda:	4b2e      	ldr	r3, [pc, #184]	; (10d94 <UnconfirmedTransmissionCallback+0xfc>)
   10cdc:	9908      	ldr	r1, [sp, #32]
   10cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ce0:	4798      	blx	r3
   10ce2:	0038      	movs	r0, r7
   10ce4:	4b2c      	ldr	r3, [pc, #176]	; (10d98 <UnconfirmedTransmissionCallback+0x100>)
   10ce6:	4798      	blx	r3
   10ce8:	2800      	cmp	r0, #0
   10cea:	d01a      	beq.n	10d22 <UnconfirmedTransmissionCallback+0x8a>
   10cec:	0023      	movs	r3, r4
   10cee:	33fd      	adds	r3, #253	; 0xfd
   10cf0:	781b      	ldrb	r3, [r3, #0]
   10cf2:	2b01      	cmp	r3, #1
   10cf4:	d108      	bne.n	10d08 <UnconfirmedTransmissionCallback+0x70>
   10cf6:	0021      	movs	r1, r4
   10cf8:	220e      	movs	r2, #14
   10cfa:	3184      	adds	r1, #132	; 0x84
   10cfc:	780b      	ldrb	r3, [r1, #0]
   10cfe:	4393      	bics	r3, r2
   10d00:	001a      	movs	r2, r3
   10d02:	230c      	movs	r3, #12
   10d04:	4313      	orrs	r3, r2
   10d06:	700b      	strb	r3, [r1, #0]
   10d08:	2200      	movs	r2, #0
   10d0a:	4b24      	ldr	r3, [pc, #144]	; (10d9c <UnconfirmedTransmissionCallback+0x104>)
   10d0c:	4924      	ldr	r1, [pc, #144]	; (10da0 <UnconfirmedTransmissionCallback+0x108>)
   10d0e:	5ce3      	ldrb	r3, [r4, r3]
   10d10:	34fc      	adds	r4, #252	; 0xfc
   10d12:	4359      	muls	r1, r3
   10d14:	4b23      	ldr	r3, [pc, #140]	; (10da4 <UnconfirmedTransmissionCallback+0x10c>)
   10d16:	7820      	ldrb	r0, [r4, #0]
   10d18:	18c9      	adds	r1, r1, r3
   10d1a:	4b23      	ldr	r3, [pc, #140]	; (10da8 <UnconfirmedTransmissionCallback+0x110>)
   10d1c:	9200      	str	r2, [sp, #0]
   10d1e:	4c23      	ldr	r4, [pc, #140]	; (10dac <UnconfirmedTransmissionCallback+0x114>)
   10d20:	47a0      	blx	r4
   10d22:	b00b      	add	sp, #44	; 0x2c
   10d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d26:	4b22      	ldr	r3, [pc, #136]	; (10db0 <UnconfirmedTransmissionCallback+0x118>)
   10d28:	4798      	blx	r3
   10d2a:	4b22      	ldr	r3, [pc, #136]	; (10db4 <UnconfirmedTransmissionCallback+0x11c>)
   10d2c:	4922      	ldr	r1, [pc, #136]	; (10db8 <UnconfirmedTransmissionCallback+0x120>)
   10d2e:	4798      	blx	r3
   10d30:	23fa      	movs	r3, #250	; 0xfa
   10d32:	009b      	lsls	r3, r3, #2
   10d34:	18c9      	adds	r1, r1, r3
   10d36:	0023      	movs	r3, r4
   10d38:	9104      	str	r1, [sp, #16]
   10d3a:	33ff      	adds	r3, #255	; 0xff
   10d3c:	7f5b      	ldrb	r3, [r3, #29]
   10d3e:	079a      	lsls	r2, r3, #30
   10d40:	d515      	bpl.n	10d6e <UnconfirmedTransmissionCallback+0xd6>
   10d42:	aa04      	add	r2, sp, #16
   10d44:	0031      	movs	r1, r6
   10d46:	2026      	movs	r0, #38	; 0x26
   10d48:	47a8      	blx	r5
   10d4a:	9b04      	ldr	r3, [sp, #16]
   10d4c:	1c5a      	adds	r2, r3, #1
   10d4e:	d001      	beq.n	10d54 <UnconfirmedTransmissionCallback+0xbc>
   10d50:	3314      	adds	r3, #20
   10d52:	9304      	str	r3, [sp, #16]
   10d54:	4b11      	ldr	r3, [pc, #68]	; (10d9c <UnconfirmedTransmissionCallback+0x104>)
   10d56:	9a04      	ldr	r2, [sp, #16]
   10d58:	5ce3      	ldrb	r3, [r4, r3]
   10d5a:	21fa      	movs	r1, #250	; 0xfa
   10d5c:	1ad3      	subs	r3, r2, r3
   10d5e:	2200      	movs	r2, #0
   10d60:	0089      	lsls	r1, r1, #2
   10d62:	34f2      	adds	r4, #242	; 0xf2
   10d64:	4359      	muls	r1, r3
   10d66:	7820      	ldrb	r0, [r4, #0]
   10d68:	4b14      	ldr	r3, [pc, #80]	; (10dbc <UnconfirmedTransmissionCallback+0x124>)
   10d6a:	9200      	str	r2, [sp, #0]
   10d6c:	e7d7      	b.n	10d1e <UnconfirmedTransmissionCallback+0x86>
   10d6e:	075b      	lsls	r3, r3, #29
   10d70:	d5f0      	bpl.n	10d54 <UnconfirmedTransmissionCallback+0xbc>
   10d72:	aa04      	add	r2, sp, #16
   10d74:	0031      	movs	r1, r6
   10d76:	2032      	movs	r0, #50	; 0x32
   10d78:	47a8      	blx	r5
   10d7a:	9b04      	ldr	r3, [sp, #16]
   10d7c:	1c5a      	adds	r2, r3, #1
   10d7e:	d0e9      	beq.n	10d54 <UnconfirmedTransmissionCallback+0xbc>
   10d80:	3301      	adds	r3, #1
   10d82:	e7e6      	b.n	10d52 <UnconfirmedTransmissionCallback+0xba>
   10d84:	20003170 	.word	0x20003170
   10d88:	200033c8 	.word	0x200033c8
   10d8c:	0000cbbd 	.word	0x0000cbbd
   10d90:	0000f5b1 	.word	0x0000f5b1
   10d94:	00010a19 	.word	0x00010a19
   10d98:	0000ecd5 	.word	0x0000ecd5
   10d9c:	0000022b 	.word	0x0000022b
   10da0:	fffffc18 	.word	0xfffffc18
   10da4:	001e8480 	.word	0x001e8480
   10da8:	00010be1 	.word	0x00010be1
   10dac:	0000d105 	.word	0x0000d105
   10db0:	00016f7d 	.word	0x00016f7d
   10db4:	000138b5 	.word	0x000138b5
   10db8:	000007d1 	.word	0x000007d1
   10dbc:	00010c99 	.word	0x00010c99

00010dc0 <EncryptFRMPayload>:
   10dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dc2:	0007      	movs	r7, r0
   10dc4:	2401      	movs	r4, #1
   10dc6:	b089      	sub	sp, #36	; 0x24
   10dc8:	9306      	str	r3, [sp, #24]
   10dca:	ab10      	add	r3, sp, #64	; 0x40
   10dcc:	881d      	ldrh	r5, [r3, #0]
   10dce:	090b      	lsrs	r3, r1, #4
   10dd0:	9104      	str	r1, [sp, #16]
   10dd2:	9205      	str	r2, [sp, #20]
   10dd4:	9303      	str	r3, [sp, #12]
   10dd6:	9b03      	ldr	r3, [sp, #12]
   10dd8:	429c      	cmp	r4, r3
   10dda:	d907      	bls.n	10dec <EncryptFRMPayload+0x2c>
   10ddc:	260f      	movs	r6, #15
   10dde:	9b04      	ldr	r3, [sp, #16]
   10de0:	4033      	ands	r3, r6
   10de2:	1e1e      	subs	r6, r3, #0
   10de4:	d126      	bne.n	10e34 <EncryptFRMPayload+0x74>
   10de6:	2000      	movs	r0, #0
   10de8:	b009      	add	sp, #36	; 0x24
   10dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10dee:	0022      	movs	r2, r4
   10df0:	9300      	str	r3, [sp, #0]
   10df2:	9906      	ldr	r1, [sp, #24]
   10df4:	2301      	movs	r3, #1
   10df6:	9805      	ldr	r0, [sp, #20]
   10df8:	4e1e      	ldr	r6, [pc, #120]	; (10e74 <EncryptFRMPayload+0xb4>)
   10dfa:	47b0      	blx	r6
   10dfc:	4e1e      	ldr	r6, [pc, #120]	; (10e78 <EncryptFRMPayload+0xb8>)
   10dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10e00:	2101      	movs	r1, #1
   10e02:	0030      	movs	r0, r6
   10e04:	4b1d      	ldr	r3, [pc, #116]	; (10e7c <EncryptFRMPayload+0xbc>)
   10e06:	4798      	blx	r3
   10e08:	2800      	cmp	r0, #0
   10e0a:	d1ed      	bne.n	10de8 <EncryptFRMPayload+0x28>
   10e0c:	1e63      	subs	r3, r4, #1
   10e0e:	011b      	lsls	r3, r3, #4
   10e10:	18fb      	adds	r3, r7, r3
   10e12:	9307      	str	r3, [sp, #28]
   10e14:	9b07      	ldr	r3, [sp, #28]
   10e16:	182a      	adds	r2, r5, r0
   10e18:	5c19      	ldrb	r1, [r3, r0]
   10e1a:	5d83      	ldrb	r3, [r0, r6]
   10e1c:	b292      	uxth	r2, r2
   10e1e:	4059      	eors	r1, r3
   10e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e22:	3001      	adds	r0, #1
   10e24:	5499      	strb	r1, [r3, r2]
   10e26:	2810      	cmp	r0, #16
   10e28:	d1f4      	bne.n	10e14 <EncryptFRMPayload+0x54>
   10e2a:	3510      	adds	r5, #16
   10e2c:	3401      	adds	r4, #1
   10e2e:	b2ad      	uxth	r5, r5
   10e30:	b2e4      	uxtb	r4, r4
   10e32:	e7d0      	b.n	10dd6 <EncryptFRMPayload+0x16>
   10e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10e36:	0022      	movs	r2, r4
   10e38:	9300      	str	r3, [sp, #0]
   10e3a:	9906      	ldr	r1, [sp, #24]
   10e3c:	2301      	movs	r3, #1
   10e3e:	9805      	ldr	r0, [sp, #20]
   10e40:	4c0c      	ldr	r4, [pc, #48]	; (10e74 <EncryptFRMPayload+0xb4>)
   10e42:	47a0      	blx	r4
   10e44:	4c0c      	ldr	r4, [pc, #48]	; (10e78 <EncryptFRMPayload+0xb8>)
   10e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10e48:	2101      	movs	r1, #1
   10e4a:	0020      	movs	r0, r4
   10e4c:	4b0b      	ldr	r3, [pc, #44]	; (10e7c <EncryptFRMPayload+0xbc>)
   10e4e:	4798      	blx	r3
   10e50:	2800      	cmp	r0, #0
   10e52:	d1c9      	bne.n	10de8 <EncryptFRMPayload+0x28>
   10e54:	9b03      	ldr	r3, [sp, #12]
   10e56:	011b      	lsls	r3, r3, #4
   10e58:	18fb      	adds	r3, r7, r3
   10e5a:	5d07      	ldrb	r7, [r0, r4]
   10e5c:	5c19      	ldrb	r1, [r3, r0]
   10e5e:	182a      	adds	r2, r5, r0
   10e60:	4079      	eors	r1, r7
   10e62:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10e64:	b292      	uxth	r2, r2
   10e66:	3001      	adds	r0, #1
   10e68:	54b9      	strb	r1, [r7, r2]
   10e6a:	b2c2      	uxtb	r2, r0
   10e6c:	4296      	cmp	r6, r2
   10e6e:	d8f4      	bhi.n	10e5a <EncryptFRMPayload+0x9a>
   10e70:	e7b9      	b.n	10de6 <EncryptFRMPayload+0x26>
   10e72:	46c0      	nop			; (mov r8, r8)
   10e74:	0000ffd9 	.word	0x0000ffd9
   10e78:	20001eb5 	.word	0x20001eb5
   10e7c:	00007221 	.word	0x00007221

00010e80 <UpdateTransactionCompleteCbParams>:
   10e80:	2388      	movs	r3, #136	; 0x88
   10e82:	2201      	movs	r2, #1
   10e84:	b570      	push	{r4, r5, r6, lr}
   10e86:	0001      	movs	r1, r0
   10e88:	4c13      	ldr	r4, [pc, #76]	; (10ed8 <UpdateTransactionCompleteCbParams+0x58>)
   10e8a:	4814      	ldr	r0, [pc, #80]	; (10edc <UpdateTransactionCompleteCbParams+0x5c>)
   10e8c:	009b      	lsls	r3, r3, #2
   10e8e:	54e2      	strb	r2, [r4, r3]
   10e90:	7842      	ldrb	r2, [r0, #1]
   10e92:	7803      	ldrb	r3, [r0, #0]
   10e94:	0212      	lsls	r2, r2, #8
   10e96:	431a      	orrs	r2, r3
   10e98:	7883      	ldrb	r3, [r0, #2]
   10e9a:	041b      	lsls	r3, r3, #16
   10e9c:	431a      	orrs	r2, r3
   10e9e:	78c3      	ldrb	r3, [r0, #3]
   10ea0:	061b      	lsls	r3, r3, #24
   10ea2:	4313      	orrs	r3, r2
   10ea4:	d00e      	beq.n	10ec4 <UpdateTransactionCompleteCbParams+0x44>
   10ea6:	0022      	movs	r2, r4
   10ea8:	2504      	movs	r5, #4
   10eaa:	32fc      	adds	r2, #252	; 0xfc
   10eac:	6890      	ldr	r0, [r2, #8]
   10eae:	4228      	tst	r0, r5
   10eb0:	d008      	beq.n	10ec4 <UpdateTransactionCompleteCbParams+0x44>
   10eb2:	68d0      	ldr	r0, [r2, #12]
   10eb4:	2800      	cmp	r0, #0
   10eb6:	d005      	beq.n	10ec4 <UpdateTransactionCompleteCbParams+0x44>
   10eb8:	0022      	movs	r2, r4
   10eba:	32ff      	adds	r2, #255	; 0xff
   10ebc:	7451      	strb	r1, [r2, #17]
   10ebe:	7355      	strb	r5, [r2, #13]
   10ec0:	4907      	ldr	r1, [pc, #28]	; (10ee0 <UpdateTransactionCompleteCbParams+0x60>)
   10ec2:	4798      	blx	r3
   10ec4:	2388      	movs	r3, #136	; 0x88
   10ec6:	009b      	lsls	r3, r3, #2
   10ec8:	5ce3      	ldrb	r3, [r4, r3]
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d002      	beq.n	10ed4 <UpdateTransactionCompleteCbParams+0x54>
   10ece:	2300      	movs	r3, #0
   10ed0:	34fc      	adds	r4, #252	; 0xfc
   10ed2:	60e3      	str	r3, [r4, #12]
   10ed4:	bd70      	pop	{r4, r5, r6, pc}
   10ed6:	46c0      	nop			; (mov r8, r8)
   10ed8:	20003170 	.word	0x20003170
   10edc:	200034cc 	.word	0x200034cc
   10ee0:	2000327c 	.word	0x2000327c

00010ee4 <UpdateRxDataAvailableCbParams>:
   10ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ee6:	4e0f      	ldr	r6, [pc, #60]	; (10f24 <UpdateRxDataAvailableCbParams+0x40>)
   10ee8:	469c      	mov	ip, r3
   10eea:	7875      	ldrb	r5, [r6, #1]
   10eec:	7834      	ldrb	r4, [r6, #0]
   10eee:	022d      	lsls	r5, r5, #8
   10ef0:	4325      	orrs	r5, r4
   10ef2:	78b4      	ldrb	r4, [r6, #2]
   10ef4:	0424      	lsls	r4, r4, #16
   10ef6:	4325      	orrs	r5, r4
   10ef8:	78f4      	ldrb	r4, [r6, #3]
   10efa:	0624      	lsls	r4, r4, #24
   10efc:	432c      	orrs	r4, r5
   10efe:	d010      	beq.n	10f22 <UpdateRxDataAvailableCbParams+0x3e>
   10f00:	4d09      	ldr	r5, [pc, #36]	; (10f28 <UpdateRxDataAvailableCbParams+0x44>)
   10f02:	2702      	movs	r7, #2
   10f04:	002e      	movs	r6, r5
   10f06:	36fc      	adds	r6, #252	; 0xfc
   10f08:	68b3      	ldr	r3, [r6, #8]
   10f0a:	423b      	tst	r3, r7
   10f0c:	d009      	beq.n	10f22 <UpdateRxDataAvailableCbParams+0x3e>
   10f0e:	4663      	mov	r3, ip
   10f10:	35ff      	adds	r5, #255	; 0xff
   10f12:	6170      	str	r0, [r6, #20]
   10f14:	61b1      	str	r1, [r6, #24]
   10f16:	736f      	strb	r7, [r5, #13]
   10f18:	766a      	strb	r2, [r5, #25]
   10f1a:	76ab      	strb	r3, [r5, #26]
   10f1c:	4903      	ldr	r1, [pc, #12]	; (10f2c <UpdateRxDataAvailableCbParams+0x48>)
   10f1e:	68f0      	ldr	r0, [r6, #12]
   10f20:	47a0      	blx	r4
   10f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f24:	200034cc 	.word	0x200034cc
   10f28:	20003170 	.word	0x20003170
   10f2c:	2000327c 	.word	0x2000327c

00010f30 <LorawanNotifyAppOnRxdone>:
   10f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f32:	4c25      	ldr	r4, [pc, #148]	; (10fc8 <LorawanNotifyAppOnRxdone+0x98>)
   10f34:	0007      	movs	r7, r0
   10f36:	0023      	movs	r3, r4
   10f38:	33fd      	adds	r3, #253	; 0xfd
   10f3a:	781b      	ldrb	r3, [r3, #0]
   10f3c:	000d      	movs	r5, r1
   10f3e:	0016      	movs	r6, r2
   10f40:	2b01      	cmp	r3, #1
   10f42:	d136      	bne.n	10fb2 <LorawanNotifyAppOnRxdone+0x82>
   10f44:	0022      	movs	r2, r4
   10f46:	210e      	movs	r1, #14
   10f48:	3284      	adds	r2, #132	; 0x84
   10f4a:	7813      	ldrb	r3, [r2, #0]
   10f4c:	438b      	bics	r3, r1
   10f4e:	7013      	strb	r3, [r2, #0]
   10f50:	491e      	ldr	r1, [pc, #120]	; (10fcc <LorawanNotifyAppOnRxdone+0x9c>)
   10f52:	784a      	ldrb	r2, [r1, #1]
   10f54:	780b      	ldrb	r3, [r1, #0]
   10f56:	0212      	lsls	r2, r2, #8
   10f58:	431a      	orrs	r2, r3
   10f5a:	788b      	ldrb	r3, [r1, #2]
   10f5c:	041b      	lsls	r3, r3, #16
   10f5e:	431a      	orrs	r2, r3
   10f60:	78cb      	ldrb	r3, [r1, #3]
   10f62:	061b      	lsls	r3, r3, #24
   10f64:	4313      	orrs	r3, r2
   10f66:	d023      	beq.n	10fb0 <LorawanNotifyAppOnRxdone+0x80>
   10f68:	0022      	movs	r2, r4
   10f6a:	2120      	movs	r1, #32
   10f6c:	3294      	adds	r2, #148	; 0x94
   10f6e:	7813      	ldrb	r3, [r2, #0]
   10f70:	438b      	bics	r3, r1
   10f72:	7013      	strb	r3, [r2, #0]
   10f74:	0023      	movs	r3, r4
   10f76:	33fd      	adds	r3, #253	; 0xfd
   10f78:	781b      	ldrb	r3, [r3, #0]
   10f7a:	7878      	ldrb	r0, [r7, #1]
   10f7c:	469c      	mov	ip, r3
   10f7e:	78fa      	ldrb	r2, [r7, #3]
   10f80:	78b9      	ldrb	r1, [r7, #2]
   10f82:	793b      	ldrb	r3, [r7, #4]
   10f84:	4667      	mov	r7, ip
   10f86:	0209      	lsls	r1, r1, #8
   10f88:	4301      	orrs	r1, r0
   10f8a:	0410      	lsls	r0, r2, #16
   10f8c:	4308      	orrs	r0, r1
   10f8e:	061b      	lsls	r3, r3, #24
   10f90:	4318      	orrs	r0, r3
   10f92:	0032      	movs	r2, r6
   10f94:	2308      	movs	r3, #8
   10f96:	0029      	movs	r1, r5
   10f98:	2f04      	cmp	r7, #4
   10f9a:	d112      	bne.n	10fc2 <LorawanNotifyAppOnRxdone+0x92>
   10f9c:	4d0c      	ldr	r5, [pc, #48]	; (10fd0 <LorawanNotifyAppOnRxdone+0xa0>)
   10f9e:	47a8      	blx	r5
   10fa0:	2388      	movs	r3, #136	; 0x88
   10fa2:	009b      	lsls	r3, r3, #2
   10fa4:	5ce3      	ldrb	r3, [r4, r3]
   10fa6:	2b00      	cmp	r3, #0
   10fa8:	d102      	bne.n	10fb0 <LorawanNotifyAppOnRxdone+0x80>
   10faa:	2008      	movs	r0, #8
   10fac:	4b09      	ldr	r3, [pc, #36]	; (10fd4 <LorawanNotifyAppOnRxdone+0xa4>)
   10fae:	4798      	blx	r3
   10fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fb2:	2b04      	cmp	r3, #4
   10fb4:	d1cc      	bne.n	10f50 <LorawanNotifyAppOnRxdone+0x20>
   10fb6:	0023      	movs	r3, r4
   10fb8:	33f1      	adds	r3, #241	; 0xf1
   10fba:	7818      	ldrb	r0, [r3, #0]
   10fbc:	4b06      	ldr	r3, [pc, #24]	; (10fd8 <LorawanNotifyAppOnRxdone+0xa8>)
   10fbe:	4798      	blx	r3
   10fc0:	e7c6      	b.n	10f50 <LorawanNotifyAppOnRxdone+0x20>
   10fc2:	4d06      	ldr	r5, [pc, #24]	; (10fdc <LorawanNotifyAppOnRxdone+0xac>)
   10fc4:	47a8      	blx	r5
   10fc6:	e7eb      	b.n	10fa0 <LorawanNotifyAppOnRxdone+0x70>
   10fc8:	20003170 	.word	0x20003170
   10fcc:	200034cc 	.word	0x200034cc
   10fd0:	00012e89 	.word	0x00012e89
   10fd4:	00010e81 	.word	0x00010e81
   10fd8:	0000d41d 	.word	0x0000d41d
   10fdc:	00010ee5 	.word	0x00010ee5

00010fe0 <LorawanSetReceiveWindow2Parameters>:
   10fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10fe2:	466b      	mov	r3, sp
   10fe4:	1cdd      	adds	r5, r3, #3
   10fe6:	9001      	str	r0, [sp, #4]
   10fe8:	7029      	strb	r1, [r5, #0]
   10fea:	2001      	movs	r0, #1
   10fec:	a901      	add	r1, sp, #4
   10fee:	4c09      	ldr	r4, [pc, #36]	; (11014 <LorawanSetReceiveWindow2Parameters+0x34>)
   10ff0:	47a0      	blx	r4
   10ff2:	2808      	cmp	r0, #8
   10ff4:	d002      	beq.n	10ffc <LorawanSetReceiveWindow2Parameters+0x1c>
   10ff6:	240a      	movs	r4, #10
   10ff8:	0020      	movs	r0, r4
   10ffa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10ffc:	0029      	movs	r1, r5
   10ffe:	200f      	movs	r0, #15
   11000:	47a0      	blx	r4
   11002:	0004      	movs	r4, r0
   11004:	2808      	cmp	r0, #8
   11006:	d1f6      	bne.n	10ff6 <LorawanSetReceiveWindow2Parameters+0x16>
   11008:	7829      	ldrb	r1, [r5, #0]
   1100a:	9801      	ldr	r0, [sp, #4]
   1100c:	4b02      	ldr	r3, [pc, #8]	; (11018 <LorawanSetReceiveWindow2Parameters+0x38>)
   1100e:	4798      	blx	r3
   11010:	e7f2      	b.n	10ff8 <LorawanSetReceiveWindow2Parameters+0x18>
   11012:	46c0      	nop			; (mov r8, r8)
   11014:	0000cbd9 	.word	0x0000cbd9
   11018:	00010445 	.word	0x00010445

0001101c <LorawanSetReceiveWindowCParameters>:
   1101c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1101e:	466b      	mov	r3, sp
   11020:	1cdc      	adds	r4, r3, #3
   11022:	9001      	str	r0, [sp, #4]
   11024:	7021      	strb	r1, [r4, #0]
   11026:	2001      	movs	r0, #1
   11028:	a901      	add	r1, sp, #4
   1102a:	4d0d      	ldr	r5, [pc, #52]	; (11060 <LorawanSetReceiveWindowCParameters+0x44>)
   1102c:	47a8      	blx	r5
   1102e:	2808      	cmp	r0, #8
   11030:	d001      	beq.n	11036 <LorawanSetReceiveWindowCParameters+0x1a>
   11032:	200a      	movs	r0, #10
   11034:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11036:	0021      	movs	r1, r4
   11038:	200f      	movs	r0, #15
   1103a:	47a8      	blx	r5
   1103c:	2808      	cmp	r0, #8
   1103e:	d1f8      	bne.n	11032 <LorawanSetReceiveWindowCParameters+0x16>
   11040:	4b08      	ldr	r3, [pc, #32]	; (11064 <LorawanSetReceiveWindowCParameters+0x48>)
   11042:	9a01      	ldr	r2, [sp, #4]
   11044:	0019      	movs	r1, r3
   11046:	7824      	ldrb	r4, [r4, #0]
   11048:	3173      	adds	r1, #115	; 0x73
   1104a:	336f      	adds	r3, #111	; 0x6f
   1104c:	700c      	strb	r4, [r1, #0]
   1104e:	0a11      	lsrs	r1, r2, #8
   11050:	701a      	strb	r2, [r3, #0]
   11052:	7059      	strb	r1, [r3, #1]
   11054:	0c11      	lsrs	r1, r2, #16
   11056:	0e12      	lsrs	r2, r2, #24
   11058:	7099      	strb	r1, [r3, #2]
   1105a:	70da      	strb	r2, [r3, #3]
   1105c:	e7ea      	b.n	11034 <LorawanSetReceiveWindowCParameters+0x18>
   1105e:	46c0      	nop			; (mov r8, r8)
   11060:	0000cbd9 	.word	0x0000cbd9
   11064:	20003170 	.word	0x20003170

00011068 <LorawanSetFrequency>:
   11068:	b507      	push	{r0, r1, r2, lr}
   1106a:	466b      	mov	r3, sp
   1106c:	9100      	str	r1, [sp, #0]
   1106e:	7118      	strb	r0, [r3, #4]
   11070:	4669      	mov	r1, sp
   11072:	2000      	movs	r0, #0
   11074:	4b01      	ldr	r3, [pc, #4]	; (1107c <LorawanSetFrequency+0x14>)
   11076:	4798      	blx	r3
   11078:	bd0e      	pop	{r1, r2, r3, pc}
   1107a:	46c0      	nop			; (mov r8, r8)
   1107c:	0000cbf5 	.word	0x0000cbf5

00011080 <LorawanCheckAndDoRetryOnTimeout>:
   11080:	b513      	push	{r0, r1, r4, lr}
   11082:	4c33      	ldr	r4, [pc, #204]	; (11150 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   11084:	0023      	movs	r3, r4
   11086:	3394      	adds	r3, #148	; 0x94
   11088:	781b      	ldrb	r3, [r3, #0]
   1108a:	0022      	movs	r2, r4
   1108c:	07db      	lsls	r3, r3, #31
   1108e:	d54b      	bpl.n	11128 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   11090:	0023      	movs	r3, r4
   11092:	32e4      	adds	r2, #228	; 0xe4
   11094:	33e2      	adds	r3, #226	; 0xe2
   11096:	7812      	ldrb	r2, [r2, #0]
   11098:	781b      	ldrb	r3, [r3, #0]
   1109a:	429a      	cmp	r2, r3
   1109c:	d836      	bhi.n	1110c <LorawanCheckAndDoRetryOnTimeout+0x8c>
   1109e:	4b2d      	ldr	r3, [pc, #180]	; (11154 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   110a0:	5ce3      	ldrb	r3, [r4, r3]
   110a2:	2b00      	cmp	r3, #0
   110a4:	d032      	beq.n	1110c <LorawanCheckAndDoRetryOnTimeout+0x8c>
   110a6:	0023      	movs	r3, r4
   110a8:	33fd      	adds	r3, #253	; 0xfd
   110aa:	781b      	ldrb	r3, [r3, #0]
   110ac:	2b01      	cmp	r3, #1
   110ae:	d119      	bne.n	110e4 <LorawanCheckAndDoRetryOnTimeout+0x64>
   110b0:	0021      	movs	r1, r4
   110b2:	220e      	movs	r2, #14
   110b4:	3184      	adds	r1, #132	; 0x84
   110b6:	780b      	ldrb	r3, [r1, #0]
   110b8:	4393      	bics	r3, r2
   110ba:	001a      	movs	r2, r3
   110bc:	230c      	movs	r3, #12
   110be:	4313      	orrs	r3, r2
   110c0:	700b      	strb	r3, [r1, #0]
   110c2:	0023      	movs	r3, r4
   110c4:	33da      	adds	r3, #218	; 0xda
   110c6:	8819      	ldrh	r1, [r3, #0]
   110c8:	4b23      	ldr	r3, [pc, #140]	; (11158 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   110ca:	2200      	movs	r2, #0
   110cc:	5ce3      	ldrb	r3, [r4, r3]
   110ce:	34f1      	adds	r4, #241	; 0xf1
   110d0:	1acb      	subs	r3, r1, r3
   110d2:	21fa      	movs	r1, #250	; 0xfa
   110d4:	0089      	lsls	r1, r1, #2
   110d6:	7820      	ldrb	r0, [r4, #0]
   110d8:	4359      	muls	r1, r3
   110da:	9200      	str	r2, [sp, #0]
   110dc:	4b1f      	ldr	r3, [pc, #124]	; (1115c <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   110de:	4c20      	ldr	r4, [pc, #128]	; (11160 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   110e0:	47a0      	blx	r4
   110e2:	bd13      	pop	{r0, r1, r4, pc}
   110e4:	2b04      	cmp	r3, #4
   110e6:	d1fc      	bne.n	110e2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   110e8:	4b1e      	ldr	r3, [pc, #120]	; (11164 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   110ea:	4798      	blx	r3
   110ec:	34ce      	adds	r4, #206	; 0xce
   110ee:	300d      	adds	r0, #13
   110f0:	8823      	ldrh	r3, [r4, #0]
   110f2:	b280      	uxth	r0, r0
   110f4:	4283      	cmp	r3, r0
   110f6:	d802      	bhi.n	110fe <LorawanCheckAndDoRetryOnTimeout+0x7e>
   110f8:	4b1b      	ldr	r3, [pc, #108]	; (11168 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   110fa:	4798      	blx	r3
   110fc:	e7f1      	b.n	110e2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   110fe:	200e      	movs	r0, #14
   11100:	4b1a      	ldr	r3, [pc, #104]	; (1116c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11102:	4798      	blx	r3
   11104:	4b1a      	ldr	r3, [pc, #104]	; (11170 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   11106:	4798      	blx	r3
   11108:	4b1a      	ldr	r3, [pc, #104]	; (11174 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1110a:	e7f6      	b.n	110fa <LorawanCheckAndDoRetryOnTimeout+0x7a>
   1110c:	2012      	movs	r0, #18
   1110e:	4b17      	ldr	r3, [pc, #92]	; (1116c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11110:	4798      	blx	r3
   11112:	4b17      	ldr	r3, [pc, #92]	; (11170 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   11114:	4798      	blx	r3
   11116:	34fd      	adds	r4, #253	; 0xfd
   11118:	4b16      	ldr	r3, [pc, #88]	; (11174 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1111a:	4798      	blx	r3
   1111c:	7823      	ldrb	r3, [r4, #0]
   1111e:	2b04      	cmp	r3, #4
   11120:	d1df      	bne.n	110e2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   11122:	4b15      	ldr	r3, [pc, #84]	; (11178 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   11124:	4798      	blx	r3
   11126:	e7dc      	b.n	110e2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   11128:	0023      	movs	r3, r4
   1112a:	32e3      	adds	r2, #227	; 0xe3
   1112c:	33e1      	adds	r3, #225	; 0xe1
   1112e:	7812      	ldrb	r2, [r2, #0]
   11130:	781b      	ldrb	r3, [r3, #0]
   11132:	429a      	cmp	r2, r3
   11134:	d803      	bhi.n	1113e <LorawanCheckAndDoRetryOnTimeout+0xbe>
   11136:	4b07      	ldr	r3, [pc, #28]	; (11154 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   11138:	5ce3      	ldrb	r3, [r4, r3]
   1113a:	2b00      	cmp	r3, #0
   1113c:	d1dc      	bne.n	110f8 <LorawanCheckAndDoRetryOnTimeout+0x78>
   1113e:	4b0f      	ldr	r3, [pc, #60]	; (1117c <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   11140:	4798      	blx	r3
   11142:	4b0c      	ldr	r3, [pc, #48]	; (11174 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   11144:	4798      	blx	r3
   11146:	2008      	movs	r0, #8
   11148:	4b08      	ldr	r3, [pc, #32]	; (1116c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1114a:	4798      	blx	r3
   1114c:	e7c9      	b.n	110e2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1114e:	46c0      	nop			; (mov r8, r8)
   11150:	20003170 	.word	0x20003170
   11154:	0000022a 	.word	0x0000022a
   11158:	0000022b 	.word	0x0000022b
   1115c:	00011181 	.word	0x00011181
   11160:	0000d105 	.word	0x0000d105
   11164:	0000fc4d 	.word	0x0000fc4d
   11168:	00010a89 	.word	0x00010a89
   1116c:	00010e81 	.word	0x00010e81
   11170:	0001048d 	.word	0x0001048d
   11174:	0000fbc9 	.word	0x0000fbc9
   11178:	0000ecb9 	.word	0x0000ecb9
   1117c:	000104bd 	.word	0x000104bd

00011180 <AckRetransmissionCallback>:
   11180:	b510      	push	{r4, lr}
   11182:	4c1c      	ldr	r4, [pc, #112]	; (111f4 <AckRetransmissionCallback+0x74>)
   11184:	0023      	movs	r3, r4
   11186:	3384      	adds	r3, #132	; 0x84
   11188:	781b      	ldrb	r3, [r3, #0]
   1118a:	2b7f      	cmp	r3, #127	; 0x7f
   1118c:	d82d      	bhi.n	111ea <AckRetransmissionCallback+0x6a>
   1118e:	0023      	movs	r3, r4
   11190:	33fd      	adds	r3, #253	; 0xfd
   11192:	781b      	ldrb	r3, [r3, #0]
   11194:	2b04      	cmp	r3, #4
   11196:	d102      	bne.n	1119e <AckRetransmissionCallback+0x1e>
   11198:	4b17      	ldr	r3, [pc, #92]	; (111f8 <AckRetransmissionCallback+0x78>)
   1119a:	4798      	blx	r3
   1119c:	e01e      	b.n	111dc <AckRetransmissionCallback+0x5c>
   1119e:	2b01      	cmp	r3, #1
   111a0:	d11c      	bne.n	111dc <AckRetransmissionCallback+0x5c>
   111a2:	0022      	movs	r2, r4
   111a4:	0023      	movs	r3, r4
   111a6:	32e4      	adds	r2, #228	; 0xe4
   111a8:	33e2      	adds	r3, #226	; 0xe2
   111aa:	7812      	ldrb	r2, [r2, #0]
   111ac:	781b      	ldrb	r3, [r3, #0]
   111ae:	429a      	cmp	r2, r3
   111b0:	d815      	bhi.n	111de <AckRetransmissionCallback+0x5e>
   111b2:	4b12      	ldr	r3, [pc, #72]	; (111fc <AckRetransmissionCallback+0x7c>)
   111b4:	5ce3      	ldrb	r3, [r4, r3]
   111b6:	2b00      	cmp	r3, #0
   111b8:	d011      	beq.n	111de <AckRetransmissionCallback+0x5e>
   111ba:	4b11      	ldr	r3, [pc, #68]	; (11200 <AckRetransmissionCallback+0x80>)
   111bc:	4798      	blx	r3
   111be:	34ce      	adds	r4, #206	; 0xce
   111c0:	300d      	adds	r0, #13
   111c2:	8823      	ldrh	r3, [r4, #0]
   111c4:	b280      	uxth	r0, r0
   111c6:	4283      	cmp	r3, r0
   111c8:	d801      	bhi.n	111ce <AckRetransmissionCallback+0x4e>
   111ca:	4b0e      	ldr	r3, [pc, #56]	; (11204 <AckRetransmissionCallback+0x84>)
   111cc:	e7e5      	b.n	1119a <AckRetransmissionCallback+0x1a>
   111ce:	4b0e      	ldr	r3, [pc, #56]	; (11208 <AckRetransmissionCallback+0x88>)
   111d0:	4798      	blx	r3
   111d2:	4b0e      	ldr	r3, [pc, #56]	; (1120c <AckRetransmissionCallback+0x8c>)
   111d4:	4798      	blx	r3
   111d6:	200e      	movs	r0, #14
   111d8:	4b0d      	ldr	r3, [pc, #52]	; (11210 <AckRetransmissionCallback+0x90>)
   111da:	4798      	blx	r3
   111dc:	bd10      	pop	{r4, pc}
   111de:	4b0a      	ldr	r3, [pc, #40]	; (11208 <AckRetransmissionCallback+0x88>)
   111e0:	4798      	blx	r3
   111e2:	4b0a      	ldr	r3, [pc, #40]	; (1120c <AckRetransmissionCallback+0x8c>)
   111e4:	4798      	blx	r3
   111e6:	2012      	movs	r0, #18
   111e8:	e7f6      	b.n	111d8 <AckRetransmissionCallback+0x58>
   111ea:	4b07      	ldr	r3, [pc, #28]	; (11208 <AckRetransmissionCallback+0x88>)
   111ec:	4798      	blx	r3
   111ee:	4b07      	ldr	r3, [pc, #28]	; (1120c <AckRetransmissionCallback+0x8c>)
   111f0:	e7d3      	b.n	1119a <AckRetransmissionCallback+0x1a>
   111f2:	46c0      	nop			; (mov r8, r8)
   111f4:	20003170 	.word	0x20003170
   111f8:	00011081 	.word	0x00011081
   111fc:	0000022a 	.word	0x0000022a
   11200:	0000fc4d 	.word	0x0000fc4d
   11204:	00010a89 	.word	0x00010a89
   11208:	0001048d 	.word	0x0001048d
   1120c:	0000fbc9 	.word	0x0000fbc9
   11210:	00010e81 	.word	0x00010e81

00011214 <LORAWAN_RxTimeout>:
   11214:	4b24      	ldr	r3, [pc, #144]	; (112a8 <LORAWAN_RxTimeout+0x94>)
   11216:	b510      	push	{r4, lr}
   11218:	001a      	movs	r2, r3
   1121a:	3284      	adds	r2, #132	; 0x84
   1121c:	7812      	ldrb	r2, [r2, #0]
   1121e:	b251      	sxtb	r1, r2
   11220:	2900      	cmp	r1, #0
   11222:	db27      	blt.n	11274 <LORAWAN_RxTimeout+0x60>
   11224:	0019      	movs	r1, r3
   11226:	31fd      	adds	r1, #253	; 0xfd
   11228:	7809      	ldrb	r1, [r1, #0]
   1122a:	2904      	cmp	r1, #4
   1122c:	d108      	bne.n	11240 <LORAWAN_RxTimeout+0x2c>
   1122e:	3903      	subs	r1, #3
   11230:	420a      	tst	r2, r1
   11232:	d005      	beq.n	11240 <LORAWAN_RxTimeout+0x2c>
   11234:	2290      	movs	r2, #144	; 0x90
   11236:	0092      	lsls	r2, r2, #2
   11238:	5499      	strb	r1, [r3, r2]
   1123a:	4b1c      	ldr	r3, [pc, #112]	; (112ac <LORAWAN_RxTimeout+0x98>)
   1123c:	4798      	blx	r3
   1123e:	bd10      	pop	{r4, pc}
   11240:	210e      	movs	r1, #14
   11242:	0010      	movs	r0, r2
   11244:	4008      	ands	r0, r1
   11246:	2806      	cmp	r0, #6
   11248:	d107      	bne.n	1125a <LORAWAN_RxTimeout+0x46>
   1124a:	3384      	adds	r3, #132	; 0x84
   1124c:	781a      	ldrb	r2, [r3, #0]
   1124e:	438a      	bics	r2, r1
   11250:	0011      	movs	r1, r2
   11252:	2208      	movs	r2, #8
   11254:	430a      	orrs	r2, r1
   11256:	701a      	strb	r2, [r3, #0]
   11258:	e7f1      	b.n	1123e <LORAWAN_RxTimeout+0x2a>
   1125a:	2004      	movs	r0, #4
   1125c:	3394      	adds	r3, #148	; 0x94
   1125e:	781b      	ldrb	r3, [r3, #0]
   11260:	4203      	tst	r3, r0
   11262:	d002      	beq.n	1126a <LORAWAN_RxTimeout+0x56>
   11264:	4b12      	ldr	r3, [pc, #72]	; (112b0 <LORAWAN_RxTimeout+0x9c>)
   11266:	4798      	blx	r3
   11268:	e7e9      	b.n	1123e <LORAWAN_RxTimeout+0x2a>
   1126a:	07d3      	lsls	r3, r2, #31
   1126c:	d5e7      	bpl.n	1123e <LORAWAN_RxTimeout+0x2a>
   1126e:	4b11      	ldr	r3, [pc, #68]	; (112b4 <LORAWAN_RxTimeout+0xa0>)
   11270:	4798      	blx	r3
   11272:	e7e4      	b.n	1123e <LORAWAN_RxTimeout+0x2a>
   11274:	4810      	ldr	r0, [pc, #64]	; (112b8 <LORAWAN_RxTimeout+0xa4>)
   11276:	7841      	ldrb	r1, [r0, #1]
   11278:	7802      	ldrb	r2, [r0, #0]
   1127a:	0209      	lsls	r1, r1, #8
   1127c:	4311      	orrs	r1, r2
   1127e:	7882      	ldrb	r2, [r0, #2]
   11280:	0412      	lsls	r2, r2, #16
   11282:	4311      	orrs	r1, r2
   11284:	78c2      	ldrb	r2, [r0, #3]
   11286:	0612      	lsls	r2, r2, #24
   11288:	430a      	orrs	r2, r1
   1128a:	d0d8      	beq.n	1123e <LORAWAN_RxTimeout+0x2a>
   1128c:	2188      	movs	r1, #136	; 0x88
   1128e:	2001      	movs	r0, #1
   11290:	0089      	lsls	r1, r1, #2
   11292:	5458      	strb	r0, [r3, r1]
   11294:	0019      	movs	r1, r3
   11296:	2404      	movs	r4, #4
   11298:	31ff      	adds	r1, #255	; 0xff
   1129a:	33fc      	adds	r3, #252	; 0xfc
   1129c:	734c      	strb	r4, [r1, #13]
   1129e:	7448      	strb	r0, [r1, #17]
   112a0:	4906      	ldr	r1, [pc, #24]	; (112bc <LORAWAN_RxTimeout+0xa8>)
   112a2:	68d8      	ldr	r0, [r3, #12]
   112a4:	4790      	blx	r2
   112a6:	e7ca      	b.n	1123e <LORAWAN_RxTimeout+0x2a>
   112a8:	20003170 	.word	0x20003170
   112ac:	00012e4d 	.word	0x00012e4d
   112b0:	000104e1 	.word	0x000104e1
   112b4:	00011081 	.word	0x00011081
   112b8:	200034cc 	.word	0x200034cc
   112bc:	2000327c 	.word	0x2000327c

000112c0 <LorawanConfigureRadioForRX2>:
   112c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   112c2:	466b      	mov	r3, sp
   112c4:	1cdd      	adds	r5, r3, #3
   112c6:	2300      	movs	r3, #0
   112c8:	702b      	strb	r3, [r5, #0]
   112ca:	2390      	movs	r3, #144	; 0x90
   112cc:	4c29      	ldr	r4, [pc, #164]	; (11374 <LorawanConfigureRadioForRX2+0xb4>)
   112ce:	009b      	lsls	r3, r3, #2
   112d0:	5ce1      	ldrb	r1, [r4, r3]
   112d2:	0006      	movs	r6, r0
   112d4:	0023      	movs	r3, r4
   112d6:	2900      	cmp	r1, #0
   112d8:	d02f      	beq.n	1133a <LorawanConfigureRadioForRX2+0x7a>
   112da:	3373      	adds	r3, #115	; 0x73
   112dc:	781b      	ldrb	r3, [r3, #0]
   112de:	702b      	strb	r3, [r5, #0]
   112e0:	0023      	movs	r3, r4
   112e2:	6f22      	ldr	r2, [r4, #112]	; 0x70
   112e4:	336f      	adds	r3, #111	; 0x6f
   112e6:	781b      	ldrb	r3, [r3, #0]
   112e8:	0211      	lsls	r1, r2, #8
   112ea:	4319      	orrs	r1, r3
   112ec:	7828      	ldrb	r0, [r5, #0]
   112ee:	4b22      	ldr	r3, [pc, #136]	; (11378 <LorawanConfigureRadioForRX2+0xb8>)
   112f0:	4798      	blx	r3
   112f2:	2300      	movs	r3, #0
   112f4:	0022      	movs	r2, r4
   112f6:	af01      	add	r7, sp, #4
   112f8:	703b      	strb	r3, [r7, #0]
   112fa:	32fd      	adds	r2, #253	; 0xfd
   112fc:	7812      	ldrb	r2, [r2, #0]
   112fe:	2a04      	cmp	r2, #4
   11300:	d130      	bne.n	11364 <LorawanConfigureRadioForRX2+0xa4>
   11302:	0022      	movs	r2, r4
   11304:	3284      	adds	r2, #132	; 0x84
   11306:	7812      	ldrb	r2, [r2, #0]
   11308:	07d2      	lsls	r2, r2, #31
   1130a:	d52b      	bpl.n	11364 <LorawanConfigureRadioForRX2+0xa4>
   1130c:	2290      	movs	r2, #144	; 0x90
   1130e:	0092      	lsls	r2, r2, #2
   11310:	5ca2      	ldrb	r2, [r4, r2]
   11312:	429a      	cmp	r2, r3
   11314:	d026      	beq.n	11364 <LorawanConfigureRadioForRX2+0xa4>
   11316:	807b      	strh	r3, [r7, #2]
   11318:	0038      	movs	r0, r7
   1131a:	4b18      	ldr	r3, [pc, #96]	; (1137c <LorawanConfigureRadioForRX2+0xbc>)
   1131c:	4798      	blx	r3
   1131e:	1e04      	subs	r4, r0, #0
   11320:	d00a      	beq.n	11338 <LorawanConfigureRadioForRX2+0x78>
   11322:	4b17      	ldr	r3, [pc, #92]	; (11380 <LorawanConfigureRadioForRX2+0xc0>)
   11324:	4798      	blx	r3
   11326:	4b17      	ldr	r3, [pc, #92]	; (11384 <LorawanConfigureRadioForRX2+0xc4>)
   11328:	4798      	blx	r3
   1132a:	4b17      	ldr	r3, [pc, #92]	; (11388 <LorawanConfigureRadioForRX2+0xc8>)
   1132c:	4798      	blx	r3
   1132e:	2e00      	cmp	r6, #0
   11330:	d002      	beq.n	11338 <LorawanConfigureRadioForRX2+0x78>
   11332:	0020      	movs	r0, r4
   11334:	4b15      	ldr	r3, [pc, #84]	; (1138c <LorawanConfigureRadioForRX2+0xcc>)
   11336:	4798      	blx	r3
   11338:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1133a:	3394      	adds	r3, #148	; 0x94
   1133c:	781b      	ldrb	r3, [r3, #0]
   1133e:	075b      	lsls	r3, r3, #29
   11340:	d50b      	bpl.n	1135a <LorawanConfigureRadioForRX2+0x9a>
   11342:	002a      	movs	r2, r5
   11344:	2009      	movs	r0, #9
   11346:	4b12      	ldr	r3, [pc, #72]	; (11390 <LorawanConfigureRadioForRX2+0xd0>)
   11348:	4798      	blx	r3
   1134a:	0022      	movs	r2, r4
   1134c:	0023      	movs	r3, r4
   1134e:	326c      	adds	r2, #108	; 0x6c
   11350:	8811      	ldrh	r1, [r2, #0]
   11352:	336a      	adds	r3, #106	; 0x6a
   11354:	881b      	ldrh	r3, [r3, #0]
   11356:	0409      	lsls	r1, r1, #16
   11358:	e7c7      	b.n	112ea <LorawanConfigureRadioForRX2+0x2a>
   1135a:	0023      	movs	r3, r4
   1135c:	336e      	adds	r3, #110	; 0x6e
   1135e:	781b      	ldrb	r3, [r3, #0]
   11360:	702b      	strb	r3, [r5, #0]
   11362:	e7f2      	b.n	1134a <LorawanConfigureRadioForRX2+0x8a>
   11364:	466b      	mov	r3, sp
   11366:	0029      	movs	r1, r5
   11368:	1d9a      	adds	r2, r3, #6
   1136a:	2003      	movs	r0, #3
   1136c:	4b08      	ldr	r3, [pc, #32]	; (11390 <LorawanConfigureRadioForRX2+0xd0>)
   1136e:	4798      	blx	r3
   11370:	e7d2      	b.n	11318 <LorawanConfigureRadioForRX2+0x58>
   11372:	46c0      	nop			; (mov r8, r8)
   11374:	20003170 	.word	0x20003170
   11378:	000109ad 	.word	0x000109ad
   1137c:	0000f5b1 	.word	0x0000f5b1
   11380:	0001048d 	.word	0x0001048d
   11384:	000104bd 	.word	0x000104bd
   11388:	0000fbc9 	.word	0x0000fbc9
   1138c:	00010e81 	.word	0x00010e81
   11390:	0000cbbd 	.word	0x0000cbbd

00011394 <SetReceptionNotOkState>:
   11394:	4a0c      	ldr	r2, [pc, #48]	; (113c8 <SetReceptionNotOkState+0x34>)
   11396:	b510      	push	{r4, lr}
   11398:	0013      	movs	r3, r2
   1139a:	33fd      	adds	r3, #253	; 0xfd
   1139c:	7819      	ldrb	r1, [r3, #0]
   1139e:	0013      	movs	r3, r2
   113a0:	4c0a      	ldr	r4, [pc, #40]	; (113cc <SetReceptionNotOkState+0x38>)
   113a2:	3384      	adds	r3, #132	; 0x84
   113a4:	2904      	cmp	r1, #4
   113a6:	d105      	bne.n	113b4 <SetReceptionNotOkState+0x20>
   113a8:	2088      	movs	r0, #136	; 0x88
   113aa:	3903      	subs	r1, #3
   113ac:	0080      	lsls	r0, r0, #2
   113ae:	5411      	strb	r1, [r2, r0]
   113b0:	3020      	adds	r0, #32
   113b2:	5411      	strb	r1, [r2, r0]
   113b4:	210e      	movs	r1, #14
   113b6:	781a      	ldrb	r2, [r3, #0]
   113b8:	2000      	movs	r0, #0
   113ba:	438a      	bics	r2, r1
   113bc:	0011      	movs	r1, r2
   113be:	220a      	movs	r2, #10
   113c0:	430a      	orrs	r2, r1
   113c2:	701a      	strb	r2, [r3, #0]
   113c4:	47a0      	blx	r4
   113c6:	bd10      	pop	{r4, pc}
   113c8:	20003170 	.word	0x20003170
   113cc:	000112c1 	.word	0x000112c1

000113d0 <LorawanProcessFcntDown>:
   113d0:	b570      	push	{r4, r5, r6, lr}
   113d2:	79c3      	ldrb	r3, [r0, #7]
   113d4:	7982      	ldrb	r2, [r0, #6]
   113d6:	4c1f      	ldr	r4, [pc, #124]	; (11454 <LorawanProcessFcntDown+0x84>)
   113d8:	021b      	lsls	r3, r3, #8
   113da:	4313      	orrs	r3, r2
   113dc:	0022      	movs	r2, r4
   113de:	218b      	movs	r1, #139	; 0x8b
   113e0:	328c      	adds	r2, #140	; 0x8c
   113e2:	8810      	ldrh	r0, [r2, #0]
   113e4:	0089      	lsls	r1, r1, #2
   113e6:	8013      	strh	r3, [r2, #0]
   113e8:	4298      	cmp	r0, r3
   113ea:	d80f      	bhi.n	1140c <LorawanProcessFcntDown+0x3c>
   113ec:	5c61      	ldrb	r1, [r4, r1]
   113ee:	2900      	cmp	r1, #0
   113f0:	d007      	beq.n	11402 <LorawanProcessFcntDown+0x32>
   113f2:	2301      	movs	r3, #1
   113f4:	408b      	lsls	r3, r1
   113f6:	6812      	ldr	r2, [r2, #0]
   113f8:	3b01      	subs	r3, #1
   113fa:	421a      	tst	r2, r3
   113fc:	d001      	beq.n	11402 <LorawanProcessFcntDown+0x32>
   113fe:	2008      	movs	r0, #8
   11400:	bd70      	pop	{r4, r5, r6, pc}
   11402:	210a      	movs	r1, #10
   11404:	4b14      	ldr	r3, [pc, #80]	; (11458 <LorawanProcessFcntDown+0x88>)
   11406:	2001      	movs	r0, #1
   11408:	4798      	blx	r3
   1140a:	e7f8      	b.n	113fe <LorawanProcessFcntDown+0x2e>
   1140c:	0020      	movs	r0, r4
   1140e:	308e      	adds	r0, #142	; 0x8e
   11410:	8803      	ldrh	r3, [r0, #0]
   11412:	3301      	adds	r3, #1
   11414:	8003      	strh	r3, [r0, #0]
   11416:	5c61      	ldrb	r1, [r4, r1]
   11418:	2900      	cmp	r1, #0
   1141a:	d005      	beq.n	11428 <LorawanProcessFcntDown+0x58>
   1141c:	2301      	movs	r3, #1
   1141e:	408b      	lsls	r3, r1
   11420:	6812      	ldr	r2, [r2, #0]
   11422:	3b01      	subs	r3, #1
   11424:	421a      	tst	r2, r3
   11426:	d103      	bne.n	11430 <LorawanProcessFcntDown+0x60>
   11428:	210a      	movs	r1, #10
   1142a:	2001      	movs	r0, #1
   1142c:	4b0a      	ldr	r3, [pc, #40]	; (11458 <LorawanProcessFcntDown+0x88>)
   1142e:	4798      	blx	r3
   11430:	0023      	movs	r3, r4
   11432:	338c      	adds	r3, #140	; 0x8c
   11434:	681b      	ldr	r3, [r3, #0]
   11436:	3301      	adds	r3, #1
   11438:	d1e1      	bne.n	113fe <LorawanProcessFcntDown+0x2e>
   1143a:	2501      	movs	r5, #1
   1143c:	3484      	adds	r4, #132	; 0x84
   1143e:	78a3      	ldrb	r3, [r4, #2]
   11440:	432b      	orrs	r3, r5
   11442:	70a3      	strb	r3, [r4, #2]
   11444:	4b05      	ldr	r3, [pc, #20]	; (1145c <LorawanProcessFcntDown+0x8c>)
   11446:	4798      	blx	r3
   11448:	210b      	movs	r1, #11
   1144a:	0028      	movs	r0, r5
   1144c:	4b02      	ldr	r3, [pc, #8]	; (11458 <LorawanProcessFcntDown+0x88>)
   1144e:	4798      	blx	r3
   11450:	200d      	movs	r0, #13
   11452:	e7d5      	b.n	11400 <LorawanProcessFcntDown+0x30>
   11454:	20003170 	.word	0x20003170
   11458:	00009385 	.word	0x00009385
   1145c:	00011395 	.word	0x00011395

00011460 <UpdateCurrentDataRateAfterDataRangeChanges>:
   11460:	4b09      	ldr	r3, [pc, #36]	; (11488 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   11462:	001a      	movs	r2, r3
   11464:	32f4      	adds	r2, #244	; 0xf4
   11466:	7811      	ldrb	r1, [r2, #0]
   11468:	001a      	movs	r2, r3
   1146a:	32e7      	adds	r2, #231	; 0xe7
   1146c:	7810      	ldrb	r0, [r2, #0]
   1146e:	4288      	cmp	r0, r1
   11470:	d900      	bls.n	11474 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   11472:	7011      	strb	r1, [r2, #0]
   11474:	001a      	movs	r2, r3
   11476:	33e7      	adds	r3, #231	; 0xe7
   11478:	32f3      	adds	r2, #243	; 0xf3
   1147a:	7812      	ldrb	r2, [r2, #0]
   1147c:	7819      	ldrb	r1, [r3, #0]
   1147e:	4291      	cmp	r1, r2
   11480:	d200      	bcs.n	11484 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   11482:	701a      	strb	r2, [r3, #0]
   11484:	4770      	bx	lr
   11486:	46c0      	nop			; (mov r8, r8)
   11488:	20003170 	.word	0x20003170

0001148c <ExecuteNewChannel>:
   1148c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1148e:	b08d      	sub	sp, #52	; 0x34
   11490:	7807      	ldrb	r7, [r0, #0]
   11492:	ab02      	add	r3, sp, #8
   11494:	0006      	movs	r6, r0
   11496:	71df      	strb	r7, [r3, #7]
   11498:	1c41      	adds	r1, r0, #1
   1149a:	4b59      	ldr	r3, [pc, #356]	; (11600 <ExecuteNewChannel+0x174>)
   1149c:	2204      	movs	r2, #4
   1149e:	a808      	add	r0, sp, #32
   114a0:	4798      	blx	r3
   114a2:	9b08      	ldr	r3, [sp, #32]
   114a4:	4c57      	ldr	r4, [pc, #348]	; (11604 <ExecuteNewChannel+0x178>)
   114a6:	021d      	lsls	r5, r3, #8
   114a8:	2364      	movs	r3, #100	; 0x64
   114aa:	0a2d      	lsrs	r5, r5, #8
   114ac:	435d      	muls	r5, r3
   114ae:	1d73      	adds	r3, r6, #5
   114b0:	9301      	str	r3, [sp, #4]
   114b2:	0023      	movs	r3, r4
   114b4:	9508      	str	r5, [sp, #32]
   114b6:	33ff      	adds	r3, #255	; 0xff
   114b8:	781b      	ldrb	r3, [r3, #0]
   114ba:	3b02      	subs	r3, #2
   114bc:	2b01      	cmp	r3, #1
   114be:	d800      	bhi.n	114c2 <ExecuteNewChannel+0x36>
   114c0:	e092      	b.n	115e8 <ExecuteNewChannel+0x15c>
   114c2:	7933      	ldrb	r3, [r6, #4]
   114c4:	a904      	add	r1, sp, #16
   114c6:	9300      	str	r3, [sp, #0]
   114c8:	2300      	movs	r3, #0
   114ca:	2015      	movs	r0, #21
   114cc:	4e4e      	ldr	r6, [pc, #312]	; (11608 <ExecuteNewChannel+0x17c>)
   114ce:	700f      	strb	r7, [r1, #0]
   114d0:	704b      	strb	r3, [r1, #1]
   114d2:	47b0      	blx	r6
   114d4:	2808      	cmp	r0, #8
   114d6:	d12b      	bne.n	11530 <ExecuteNewChannel+0xa4>
   114d8:	466a      	mov	r2, sp
   114da:	ab02      	add	r3, sp, #8
   114dc:	79db      	ldrb	r3, [r3, #7]
   114de:	7812      	ldrb	r2, [r2, #0]
   114e0:	af06      	add	r7, sp, #24
   114e2:	a90a      	add	r1, sp, #40	; 0x28
   114e4:	3806      	subs	r0, #6
   114e6:	703b      	strb	r3, [r7, #0]
   114e8:	707a      	strb	r2, [r7, #1]
   114ea:	710b      	strb	r3, [r1, #4]
   114ec:	950a      	str	r5, [sp, #40]	; 0x28
   114ee:	47b0      	blx	r6
   114f0:	2808      	cmp	r0, #8
   114f2:	d001      	beq.n	114f8 <ExecuteNewChannel+0x6c>
   114f4:	2d00      	cmp	r5, #0
   114f6:	d10b      	bne.n	11510 <ExecuteNewChannel+0x84>
   114f8:	0023      	movs	r3, r4
   114fa:	33e0      	adds	r3, #224	; 0xe0
   114fc:	781a      	ldrb	r2, [r3, #0]
   114fe:	2303      	movs	r3, #3
   11500:	4353      	muls	r3, r2
   11502:	2280      	movs	r2, #128	; 0x80
   11504:	18e3      	adds	r3, r4, r3
   11506:	3398      	adds	r3, #152	; 0x98
   11508:	7899      	ldrb	r1, [r3, #2]
   1150a:	4252      	negs	r2, r2
   1150c:	430a      	orrs	r2, r1
   1150e:	709a      	strb	r2, [r3, #2]
   11510:	0039      	movs	r1, r7
   11512:	2012      	movs	r0, #18
   11514:	47b0      	blx	r6
   11516:	2808      	cmp	r0, #8
   11518:	d10a      	bne.n	11530 <ExecuteNewChannel+0xa4>
   1151a:	0023      	movs	r3, r4
   1151c:	33e0      	adds	r3, #224	; 0xe0
   1151e:	781a      	ldrb	r2, [r3, #0]
   11520:	2303      	movs	r3, #3
   11522:	4353      	muls	r3, r2
   11524:	2240      	movs	r2, #64	; 0x40
   11526:	18e3      	adds	r3, r4, r3
   11528:	3398      	adds	r3, #152	; 0x98
   1152a:	7899      	ldrb	r1, [r3, #2]
   1152c:	430a      	orrs	r2, r1
   1152e:	709a      	strb	r2, [r3, #2]
   11530:	0023      	movs	r3, r4
   11532:	33e0      	adds	r3, #224	; 0xe0
   11534:	781a      	ldrb	r2, [r3, #0]
   11536:	2303      	movs	r3, #3
   11538:	4353      	muls	r3, r2
   1153a:	18e3      	adds	r3, r4, r3
   1153c:	3398      	adds	r3, #152	; 0x98
   1153e:	789b      	ldrb	r3, [r3, #2]
   11540:	09da      	lsrs	r2, r3, #7
   11542:	2a01      	cmp	r2, #1
   11544:	d150      	bne.n	115e8 <ExecuteNewChannel+0x15c>
   11546:	065b      	lsls	r3, r3, #25
   11548:	d54e      	bpl.n	115e8 <ExecuteNewChannel+0x15c>
   1154a:	4e30      	ldr	r6, [pc, #192]	; (1160c <ExecuteNewChannel+0x180>)
   1154c:	2d00      	cmp	r5, #0
   1154e:	d04e      	beq.n	115ee <ExecuteNewChannel+0x162>
   11550:	a906      	add	r1, sp, #24
   11552:	2012      	movs	r0, #18
   11554:	47b0      	blx	r6
   11556:	ad07      	add	r5, sp, #28
   11558:	a90a      	add	r1, sp, #40	; 0x28
   1155a:	2000      	movs	r0, #0
   1155c:	47b0      	blx	r6
   1155e:	002a      	movs	r2, r5
   11560:	2100      	movs	r1, #0
   11562:	2014      	movs	r0, #20
   11564:	4f2a      	ldr	r7, [pc, #168]	; (11610 <ExecuteNewChannel+0x184>)
   11566:	47b8      	blx	r7
   11568:	0023      	movs	r3, r4
   1156a:	782a      	ldrb	r2, [r5, #0]
   1156c:	33f3      	adds	r3, #243	; 0xf3
   1156e:	701a      	strb	r2, [r3, #0]
   11570:	0023      	movs	r3, r4
   11572:	786a      	ldrb	r2, [r5, #1]
   11574:	33f4      	adds	r3, #244	; 0xf4
   11576:	701a      	strb	r2, [r3, #0]
   11578:	34ff      	adds	r4, #255	; 0xff
   1157a:	4b26      	ldr	r3, [pc, #152]	; (11614 <ExecuteNewChannel+0x188>)
   1157c:	4798      	blx	r3
   1157e:	7f63      	ldrb	r3, [r4, #29]
   11580:	079b      	lsls	r3, r3, #30
   11582:	d50e      	bpl.n	115a2 <ExecuteNewChannel+0x116>
   11584:	2416      	movs	r4, #22
   11586:	ab02      	add	r3, sp, #8
   11588:	18e4      	adds	r4, r4, r3
   1158a:	1dd9      	adds	r1, r3, #7
   1158c:	0022      	movs	r2, r4
   1158e:	201e      	movs	r0, #30
   11590:	47b8      	blx	r7
   11592:	ab02      	add	r3, sp, #8
   11594:	79db      	ldrb	r3, [r3, #7]
   11596:	a909      	add	r1, sp, #36	; 0x24
   11598:	708b      	strb	r3, [r1, #2]
   1159a:	8823      	ldrh	r3, [r4, #0]
   1159c:	201e      	movs	r0, #30
   1159e:	800b      	strh	r3, [r1, #0]
   115a0:	47b0      	blx	r6
   115a2:	ab02      	add	r3, sp, #8
   115a4:	79db      	ldrb	r3, [r3, #7]
   115a6:	a905      	add	r1, sp, #20
   115a8:	700b      	strb	r3, [r1, #0]
   115aa:	2301      	movs	r3, #1
   115ac:	2016      	movs	r0, #22
   115ae:	704b      	strb	r3, [r1, #1]
   115b0:	4b16      	ldr	r3, [pc, #88]	; (1160c <ExecuteNewChannel+0x180>)
   115b2:	4798      	blx	r3
   115b4:	ad09      	add	r5, sp, #36	; 0x24
   115b6:	2100      	movs	r1, #0
   115b8:	002a      	movs	r2, r5
   115ba:	4b15      	ldr	r3, [pc, #84]	; (11610 <ExecuteNewChannel+0x184>)
   115bc:	2014      	movs	r0, #20
   115be:	4798      	blx	r3
   115c0:	4c10      	ldr	r4, [pc, #64]	; (11604 <ExecuteNewChannel+0x178>)
   115c2:	782a      	ldrb	r2, [r5, #0]
   115c4:	0023      	movs	r3, r4
   115c6:	33f3      	adds	r3, #243	; 0xf3
   115c8:	701a      	strb	r2, [r3, #0]
   115ca:	0023      	movs	r3, r4
   115cc:	786a      	ldrb	r2, [r5, #1]
   115ce:	33f4      	adds	r3, #244	; 0xf4
   115d0:	701a      	strb	r2, [r3, #0]
   115d2:	4b10      	ldr	r3, [pc, #64]	; (11614 <ExecuteNewChannel+0x188>)
   115d4:	4798      	blx	r3
   115d6:	2304      	movs	r3, #4
   115d8:	3484      	adds	r4, #132	; 0x84
   115da:	7862      	ldrb	r2, [r4, #1]
   115dc:	210b      	movs	r1, #11
   115de:	4313      	orrs	r3, r2
   115e0:	7063      	strb	r3, [r4, #1]
   115e2:	2001      	movs	r0, #1
   115e4:	4b0c      	ldr	r3, [pc, #48]	; (11618 <ExecuteNewChannel+0x18c>)
   115e6:	4798      	blx	r3
   115e8:	9801      	ldr	r0, [sp, #4]
   115ea:	b00d      	add	sp, #52	; 0x34
   115ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115ee:	ab02      	add	r3, sp, #8
   115f0:	79db      	ldrb	r3, [r3, #7]
   115f2:	a905      	add	r1, sp, #20
   115f4:	2016      	movs	r0, #22
   115f6:	700b      	strb	r3, [r1, #0]
   115f8:	704d      	strb	r5, [r1, #1]
   115fa:	47b0      	blx	r6
   115fc:	e7da      	b.n	115b4 <ExecuteNewChannel+0x128>
   115fe:	46c0      	nop			; (mov r8, r8)
   11600:	00016837 	.word	0x00016837
   11604:	20003170 	.word	0x20003170
   11608:	0000cbd9 	.word	0x0000cbd9
   1160c:	0000cbf5 	.word	0x0000cbf5
   11610:	0000cbbd 	.word	0x0000cbbd
   11614:	00011461 	.word	0x00011461
   11618:	00009385 	.word	0x00009385

0001161c <MacExecuteCommands>:
   1161c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1161e:	1843      	adds	r3, r0, r1
   11620:	b087      	sub	sp, #28
   11622:	9301      	str	r3, [sp, #4]
   11624:	2300      	movs	r3, #0
   11626:	0007      	movs	r7, r0
   11628:	2501      	movs	r5, #1
   1162a:	9302      	str	r3, [sp, #8]
   1162c:	9b01      	ldr	r3, [sp, #4]
   1162e:	4e71      	ldr	r6, [pc, #452]	; (117f4 <MacExecuteCommands+0x1d8>)
   11630:	429f      	cmp	r7, r3
   11632:	d362      	bcc.n	116fa <MacExecuteCommands+0xde>
   11634:	4b70      	ldr	r3, [pc, #448]	; (117f8 <MacExecuteCommands+0x1dc>)
   11636:	5cf3      	ldrb	r3, [r6, r3]
   11638:	2b00      	cmp	r3, #0
   1163a:	d000      	beq.n	1163e <MacExecuteCommands+0x22>
   1163c:	e08f      	b.n	1175e <MacExecuteCommands+0x142>
   1163e:	0038      	movs	r0, r7
   11640:	b007      	add	sp, #28
   11642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11644:	0032      	movs	r2, r6
   11646:	7879      	ldrb	r1, [r7, #1]
   11648:	32e5      	adds	r2, #229	; 0xe5
   1164a:	7011      	strb	r1, [r2, #0]
   1164c:	0032      	movs	r2, r6
   1164e:	78b9      	ldrb	r1, [r7, #2]
   11650:	32e6      	adds	r2, #230	; 0xe6
   11652:	1cfc      	adds	r4, r7, #3
   11654:	7011      	strb	r1, [r2, #0]
   11656:	2203      	movs	r2, #3
   11658:	4353      	muls	r3, r2
   1165a:	18f3      	adds	r3, r6, r3
   1165c:	3399      	adds	r3, #153	; 0x99
   1165e:	32fc      	adds	r2, #252	; 0xfc
   11660:	701a      	strb	r2, [r3, #0]
   11662:	e020      	b.n	116a6 <MacExecuteCommands+0x8a>
   11664:	0020      	movs	r0, r4
   11666:	4b65      	ldr	r3, [pc, #404]	; (117fc <MacExecuteCommands+0x1e0>)
   11668:	4798      	blx	r3
   1166a:	0004      	movs	r4, r0
   1166c:	e01b      	b.n	116a6 <MacExecuteCommands+0x8a>
   1166e:	0020      	movs	r0, r4
   11670:	4b63      	ldr	r3, [pc, #396]	; (11800 <MacExecuteCommands+0x1e4>)
   11672:	e7f9      	b.n	11668 <MacExecuteCommands+0x4c>
   11674:	0020      	movs	r0, r4
   11676:	4b63      	ldr	r3, [pc, #396]	; (11804 <MacExecuteCommands+0x1e8>)
   11678:	e7f6      	b.n	11668 <MacExecuteCommands+0x4c>
   1167a:	0020      	movs	r0, r4
   1167c:	4b62      	ldr	r3, [pc, #392]	; (11808 <MacExecuteCommands+0x1ec>)
   1167e:	e7f3      	b.n	11668 <MacExecuteCommands+0x4c>
   11680:	7878      	ldrb	r0, [r7, #1]
   11682:	230f      	movs	r3, #15
   11684:	0002      	movs	r2, r0
   11686:	1cbc      	adds	r4, r7, #2
   11688:	439a      	bics	r2, r3
   1168a:	d10c      	bne.n	116a6 <MacExecuteCommands+0x8a>
   1168c:	4b5f      	ldr	r3, [pc, #380]	; (1180c <MacExecuteCommands+0x1f0>)
   1168e:	4798      	blx	r3
   11690:	0032      	movs	r2, r6
   11692:	2380      	movs	r3, #128	; 0x80
   11694:	3284      	adds	r2, #132	; 0x84
   11696:	7851      	ldrb	r1, [r2, #1]
   11698:	425b      	negs	r3, r3
   1169a:	430b      	orrs	r3, r1
   1169c:	7053      	strb	r3, [r2, #1]
   1169e:	210b      	movs	r1, #11
   116a0:	0028      	movs	r0, r5
   116a2:	4b5b      	ldr	r3, [pc, #364]	; (11810 <MacExecuteCommands+0x1f4>)
   116a4:	4798      	blx	r3
   116a6:	0032      	movs	r2, r6
   116a8:	2103      	movs	r1, #3
   116aa:	32e0      	adds	r2, #224	; 0xe0
   116ac:	7813      	ldrb	r3, [r2, #0]
   116ae:	4359      	muls	r1, r3
   116b0:	1876      	adds	r6, r6, r1
   116b2:	3699      	adds	r6, #153	; 0x99
   116b4:	7831      	ldrb	r1, [r6, #0]
   116b6:	29ff      	cmp	r1, #255	; 0xff
   116b8:	d003      	beq.n	116c2 <MacExecuteCommands+0xa6>
   116ba:	2b0f      	cmp	r3, #15
   116bc:	d801      	bhi.n	116c2 <MacExecuteCommands+0xa6>
   116be:	3301      	adds	r3, #1
   116c0:	7013      	strb	r3, [r2, #0]
   116c2:	0027      	movs	r7, r4
   116c4:	e7b2      	b.n	1162c <MacExecuteCommands+0x10>
   116c6:	0020      	movs	r0, r4
   116c8:	4b52      	ldr	r3, [pc, #328]	; (11814 <MacExecuteCommands+0x1f8>)
   116ca:	e7cd      	b.n	11668 <MacExecuteCommands+0x4c>
   116cc:	0020      	movs	r0, r4
   116ce:	4b52      	ldr	r3, [pc, #328]	; (11818 <MacExecuteCommands+0x1fc>)
   116d0:	e7ca      	b.n	11668 <MacExecuteCommands+0x4c>
   116d2:	0020      	movs	r0, r4
   116d4:	4b51      	ldr	r3, [pc, #324]	; (1181c <MacExecuteCommands+0x200>)
   116d6:	4798      	blx	r3
   116d8:	0033      	movs	r3, r6
   116da:	33e0      	adds	r3, #224	; 0xe0
   116dc:	0004      	movs	r4, r0
   116de:	781b      	ldrb	r3, [r3, #0]
   116e0:	e7b9      	b.n	11656 <MacExecuteCommands+0x3a>
   116e2:	2203      	movs	r2, #3
   116e4:	4353      	muls	r3, r2
   116e6:	18f3      	adds	r3, r6, r3
   116e8:	3399      	adds	r3, #153	; 0x99
   116ea:	32fc      	adds	r2, #252	; 0xfc
   116ec:	701a      	strb	r2, [r3, #0]
   116ee:	9c01      	ldr	r4, [sp, #4]
   116f0:	9502      	str	r5, [sp, #8]
   116f2:	e7d8      	b.n	116a6 <MacExecuteCommands+0x8a>
   116f4:	23ff      	movs	r3, #255	; 0xff
   116f6:	7013      	strb	r3, [r2, #0]
   116f8:	e7f9      	b.n	116ee <MacExecuteCommands+0xd2>
   116fa:	9b02      	ldr	r3, [sp, #8]
   116fc:	2b00      	cmp	r3, #0
   116fe:	d199      	bne.n	11634 <MacExecuteCommands+0x18>
   11700:	0033      	movs	r3, r6
   11702:	2203      	movs	r2, #3
   11704:	33e0      	adds	r3, #224	; 0xe0
   11706:	781b      	ldrb	r3, [r3, #0]
   11708:	2401      	movs	r4, #1
   1170a:	435a      	muls	r2, r3
   1170c:	18b2      	adds	r2, r6, r2
   1170e:	0010      	movs	r0, r2
   11710:	3098      	adds	r0, #152	; 0x98
   11712:	7881      	ldrb	r1, [r0, #2]
   11714:	3299      	adds	r2, #153	; 0x99
   11716:	43a9      	bics	r1, r5
   11718:	4021      	ands	r1, r4
   1171a:	7081      	strb	r1, [r0, #2]
   1171c:	78c1      	ldrb	r1, [r0, #3]
   1171e:	193c      	adds	r4, r7, r4
   11720:	43a9      	bics	r1, r5
   11722:	70c1      	strb	r1, [r0, #3]
   11724:	7839      	ldrb	r1, [r7, #0]
   11726:	7011      	strb	r1, [r2, #0]
   11728:	7838      	ldrb	r0, [r7, #0]
   1172a:	493d      	ldr	r1, [pc, #244]	; (11820 <MacExecuteCommands+0x204>)
   1172c:	1809      	adds	r1, r1, r0
   1172e:	3902      	subs	r1, #2
   11730:	7809      	ldrb	r1, [r1, #0]
   11732:	1861      	adds	r1, r4, r1
   11734:	468c      	mov	ip, r1
   11736:	9901      	ldr	r1, [sp, #4]
   11738:	4561      	cmp	r1, ip
   1173a:	d3db      	bcc.n	116f4 <MacExecuteCommands+0xd8>
   1173c:	3802      	subs	r0, #2
   1173e:	280b      	cmp	r0, #11
   11740:	d8cf      	bhi.n	116e2 <MacExecuteCommands+0xc6>
   11742:	f001 ff33 	bl	135ac <__gnu_thumb1_case_shi>
   11746:	ff7f      	.short	0xff7f
   11748:	ff94ff8f 	.word	0xff94ff8f
   1174c:	ffb0ff97 	.word	0xffb0ff97
   11750:	ff9dff9a 	.word	0xff9dff9a
   11754:	ffc3ffc0 	.word	0xffc3ffc0
   11758:	ffceffce 	.word	0xffceffce
   1175c:	ffc6      	.short	0xffc6
   1175e:	4b31      	ldr	r3, [pc, #196]	; (11824 <MacExecuteCommands+0x208>)
   11760:	5cf3      	ldrb	r3, [r6, r3]
   11762:	43db      	mvns	r3, r3
   11764:	075b      	lsls	r3, r3, #29
   11766:	d000      	beq.n	1176a <MacExecuteCommands+0x14e>
   11768:	e769      	b.n	1163e <MacExecuteCommands+0x22>
   1176a:	4b2f      	ldr	r3, [pc, #188]	; (11828 <MacExecuteCommands+0x20c>)
   1176c:	ad05      	add	r5, sp, #20
   1176e:	5cf4      	ldrb	r4, [r6, r3]
   11770:	2100      	movs	r1, #0
   11772:	0724      	lsls	r4, r4, #28
   11774:	0f24      	lsrs	r4, r4, #28
   11776:	b2e3      	uxtb	r3, r4
   11778:	9301      	str	r3, [sp, #4]
   1177a:	4b2c      	ldr	r3, [pc, #176]	; (1182c <MacExecuteCommands+0x210>)
   1177c:	002a      	movs	r2, r5
   1177e:	5cf3      	ldrb	r3, [r6, r3]
   11780:	2014      	movs	r0, #20
   11782:	9302      	str	r3, [sp, #8]
   11784:	2389      	movs	r3, #137	; 0x89
   11786:	009b      	lsls	r3, r3, #2
   11788:	5cf3      	ldrb	r3, [r6, r3]
   1178a:	9303      	str	r3, [sp, #12]
   1178c:	4b28      	ldr	r3, [pc, #160]	; (11830 <MacExecuteCommands+0x214>)
   1178e:	4798      	blx	r3
   11790:	0033      	movs	r3, r6
   11792:	782a      	ldrb	r2, [r5, #0]
   11794:	33f3      	adds	r3, #243	; 0xf3
   11796:	701a      	strb	r2, [r3, #0]
   11798:	0033      	movs	r3, r6
   1179a:	786a      	ldrb	r2, [r5, #1]
   1179c:	33f4      	adds	r3, #244	; 0xf4
   1179e:	701a      	strb	r2, [r3, #0]
   117a0:	4b24      	ldr	r3, [pc, #144]	; (11834 <MacExecuteCommands+0x218>)
   117a2:	4798      	blx	r3
   117a4:	9802      	ldr	r0, [sp, #8]
   117a6:	4b24      	ldr	r3, [pc, #144]	; (11838 <MacExecuteCommands+0x21c>)
   117a8:	4798      	blx	r3
   117aa:	0032      	movs	r2, r6
   117ac:	2308      	movs	r3, #8
   117ae:	3284      	adds	r2, #132	; 0x84
   117b0:	7851      	ldrb	r1, [r2, #1]
   117b2:	430b      	orrs	r3, r1
   117b4:	7053      	strb	r3, [r2, #1]
   117b6:	9803      	ldr	r0, [sp, #12]
   117b8:	4b20      	ldr	r3, [pc, #128]	; (1183c <MacExecuteCommands+0x220>)
   117ba:	4798      	blx	r3
   117bc:	0033      	movs	r3, r6
   117be:	b2e2      	uxtb	r2, r4
   117c0:	33e1      	adds	r3, #225	; 0xe1
   117c2:	2a00      	cmp	r2, #0
   117c4:	d10e      	bne.n	117e4 <MacExecuteCommands+0x1c8>
   117c6:	701c      	strb	r4, [r3, #0]
   117c8:	2113      	movs	r1, #19
   117ca:	4c11      	ldr	r4, [pc, #68]	; (11810 <MacExecuteCommands+0x1f4>)
   117cc:	2000      	movs	r0, #0
   117ce:	47a0      	blx	r4
   117d0:	2210      	movs	r2, #16
   117d2:	4b08      	ldr	r3, [pc, #32]	; (117f4 <MacExecuteCommands+0x1d8>)
   117d4:	2001      	movs	r0, #1
   117d6:	3384      	adds	r3, #132	; 0x84
   117d8:	7859      	ldrb	r1, [r3, #1]
   117da:	430a      	orrs	r2, r1
   117dc:	705a      	strb	r2, [r3, #1]
   117de:	210b      	movs	r1, #11
   117e0:	47a0      	blx	r4
   117e2:	e72c      	b.n	1163e <MacExecuteCommands+0x22>
   117e4:	9a01      	ldr	r2, [sp, #4]
   117e6:	3a01      	subs	r2, #1
   117e8:	b2d2      	uxtb	r2, r2
   117ea:	701a      	strb	r2, [r3, #0]
   117ec:	0033      	movs	r3, r6
   117ee:	33e2      	adds	r3, #226	; 0xe2
   117f0:	701a      	strb	r2, [r3, #0]
   117f2:	e7e9      	b.n	117c8 <MacExecuteCommands+0x1ac>
   117f4:	20003170 	.word	0x20003170
   117f8:	00000226 	.word	0x00000226
   117fc:	0001077d 	.word	0x0001077d
   11800:	00010641 	.word	0x00010641
   11804:	00010545 	.word	0x00010545
   11808:	0001148d 	.word	0x0001148d
   1180c:	0000fc71 	.word	0x0000fc71
   11810:	00009385 	.word	0x00009385
   11814:	0001072d 	.word	0x0001072d
   11818:	00010679 	.word	0x00010679
   1181c:	000108b5 	.word	0x000108b5
   11820:	00018d43 	.word	0x00018d43
   11824:	00000223 	.word	0x00000223
   11828:	00000229 	.word	0x00000229
   1182c:	00000225 	.word	0x00000225
   11830:	0000cbbd 	.word	0x0000cbbd
   11834:	00011461 	.word	0x00011461
   11838:	000103d5 	.word	0x000103d5
   1183c:	00010369 	.word	0x00010369

00011840 <LorawanSetDataRange>:
   11840:	2201      	movs	r2, #1
   11842:	b530      	push	{r4, r5, lr}
   11844:	b085      	sub	sp, #20
   11846:	ab01      	add	r3, sp, #4
   11848:	ac02      	add	r4, sp, #8
   1184a:	7018      	strb	r0, [r3, #0]
   1184c:	7020      	strb	r0, [r4, #0]
   1184e:	7061      	strb	r1, [r4, #1]
   11850:	2015      	movs	r0, #21
   11852:	0019      	movs	r1, r3
   11854:	4d11      	ldr	r5, [pc, #68]	; (1189c <LorawanSetDataRange+0x5c>)
   11856:	705a      	strb	r2, [r3, #1]
   11858:	47a8      	blx	r5
   1185a:	2808      	cmp	r0, #8
   1185c:	d003      	beq.n	11866 <LorawanSetDataRange+0x26>
   1185e:	250a      	movs	r5, #10
   11860:	0028      	movs	r0, r5
   11862:	b005      	add	sp, #20
   11864:	bd30      	pop	{r4, r5, pc}
   11866:	0021      	movs	r1, r4
   11868:	2012      	movs	r0, #18
   1186a:	47a8      	blx	r5
   1186c:	0005      	movs	r5, r0
   1186e:	2808      	cmp	r0, #8
   11870:	d1f5      	bne.n	1185e <LorawanSetDataRange+0x1e>
   11872:	0021      	movs	r1, r4
   11874:	4b0a      	ldr	r3, [pc, #40]	; (118a0 <LorawanSetDataRange+0x60>)
   11876:	ac03      	add	r4, sp, #12
   11878:	2012      	movs	r0, #18
   1187a:	4798      	blx	r3
   1187c:	0022      	movs	r2, r4
   1187e:	2100      	movs	r1, #0
   11880:	4b08      	ldr	r3, [pc, #32]	; (118a4 <LorawanSetDataRange+0x64>)
   11882:	2014      	movs	r0, #20
   11884:	4798      	blx	r3
   11886:	4b08      	ldr	r3, [pc, #32]	; (118a8 <LorawanSetDataRange+0x68>)
   11888:	7821      	ldrb	r1, [r4, #0]
   1188a:	001a      	movs	r2, r3
   1188c:	32f3      	adds	r2, #243	; 0xf3
   1188e:	7011      	strb	r1, [r2, #0]
   11890:	7862      	ldrb	r2, [r4, #1]
   11892:	33f4      	adds	r3, #244	; 0xf4
   11894:	701a      	strb	r2, [r3, #0]
   11896:	4b05      	ldr	r3, [pc, #20]	; (118ac <LorawanSetDataRange+0x6c>)
   11898:	4798      	blx	r3
   1189a:	e7e1      	b.n	11860 <LorawanSetDataRange+0x20>
   1189c:	0000cbd9 	.word	0x0000cbd9
   118a0:	0000cbf5 	.word	0x0000cbf5
   118a4:	0000cbbd 	.word	0x0000cbbd
   118a8:	20003170 	.word	0x20003170
   118ac:	00011461 	.word	0x00011461

000118b0 <LorawanSetChannelIdStatus>:
   118b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   118b2:	466b      	mov	r3, sp
   118b4:	7018      	strb	r0, [r3, #0]
   118b6:	7059      	strb	r1, [r3, #1]
   118b8:	2016      	movs	r0, #22
   118ba:	4669      	mov	r1, sp
   118bc:	4b0c      	ldr	r3, [pc, #48]	; (118f0 <LorawanSetChannelIdStatus+0x40>)
   118be:	4798      	blx	r3
   118c0:	0004      	movs	r4, r0
   118c2:	2808      	cmp	r0, #8
   118c4:	d111      	bne.n	118ea <LorawanSetChannelIdStatus+0x3a>
   118c6:	ad01      	add	r5, sp, #4
   118c8:	002a      	movs	r2, r5
   118ca:	2100      	movs	r1, #0
   118cc:	4b09      	ldr	r3, [pc, #36]	; (118f4 <LorawanSetChannelIdStatus+0x44>)
   118ce:	2014      	movs	r0, #20
   118d0:	4798      	blx	r3
   118d2:	4b09      	ldr	r3, [pc, #36]	; (118f8 <LorawanSetChannelIdStatus+0x48>)
   118d4:	7829      	ldrb	r1, [r5, #0]
   118d6:	001a      	movs	r2, r3
   118d8:	32f3      	adds	r2, #243	; 0xf3
   118da:	7011      	strb	r1, [r2, #0]
   118dc:	786a      	ldrb	r2, [r5, #1]
   118de:	33f4      	adds	r3, #244	; 0xf4
   118e0:	701a      	strb	r2, [r3, #0]
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <LorawanSetChannelIdStatus+0x4c>)
   118e4:	4798      	blx	r3
   118e6:	0020      	movs	r0, r4
   118e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   118ea:	240a      	movs	r4, #10
   118ec:	e7fb      	b.n	118e6 <LorawanSetChannelIdStatus+0x36>
   118ee:	46c0      	nop			; (mov r8, r8)
   118f0:	0000cbf5 	.word	0x0000cbf5
   118f4:	0000cbbd 	.word	0x0000cbbd
   118f8:	20003170 	.word	0x20003170
   118fc:	00011461 	.word	0x00011461

00011900 <LORAWAN_RxDone>:
   11900:	b5f0      	push	{r4, r5, r6, r7, lr}
   11902:	4bc4      	ldr	r3, [pc, #784]	; (11c14 <LORAWAN_RxDone+0x314>)
   11904:	b093      	sub	sp, #76	; 0x4c
   11906:	781b      	ldrb	r3, [r3, #0]
   11908:	0007      	movs	r7, r0
   1190a:	b25a      	sxtb	r2, r3
   1190c:	9106      	str	r1, [sp, #24]
   1190e:	4cc2      	ldr	r4, [pc, #776]	; (11c18 <LORAWAN_RxDone+0x318>)
   11910:	2a00      	cmp	r2, #0
   11912:	da01      	bge.n	11918 <LORAWAN_RxDone+0x18>
   11914:	f000 fc86 	bl	12224 <LORAWAN_RxDone+0x924>
   11918:	7801      	ldrb	r1, [r0, #0]
   1191a:	221f      	movs	r2, #31
   1191c:	000e      	movs	r6, r1
   1191e:	4396      	bics	r6, r2
   11920:	2e20      	cmp	r6, #32
   11922:	d000      	beq.n	11926 <LORAWAN_RxDone+0x26>
   11924:	e1ae      	b.n	11c84 <LORAWAN_RxDone+0x384>
   11926:	7822      	ldrb	r2, [r4, #0]
   11928:	2a00      	cmp	r2, #0
   1192a:	d001      	beq.n	11930 <LORAWAN_RxDone+0x30>
   1192c:	f000 fc66 	bl	121fc <LORAWAN_RxDone+0x8fc>
   11930:	0022      	movs	r2, r4
   11932:	3294      	adds	r2, #148	; 0x94
   11934:	7812      	ldrb	r2, [r2, #0]
   11936:	0752      	lsls	r2, r2, #29
   11938:	d401      	bmi.n	1193e <LORAWAN_RxDone+0x3e>
   1193a:	f000 fc5f 	bl	121fc <LORAWAN_RxDone+0x8fc>
   1193e:	9b06      	ldr	r3, [sp, #24]
   11940:	3b01      	subs	r3, #1
   11942:	b2db      	uxtb	r3, r3
   11944:	9307      	str	r3, [sp, #28]
   11946:	4bb5      	ldr	r3, [pc, #724]	; (11c1c <LORAWAN_RxDone+0x31c>)
   11948:	469c      	mov	ip, r3
   1194a:	9b07      	ldr	r3, [sp, #28]
   1194c:	2b00      	cmp	r3, #0
   1194e:	d12c      	bne.n	119aa <LORAWAN_RxDone+0xaa>
   11950:	9b06      	ldr	r3, [sp, #24]
   11952:	4660      	mov	r0, ip
   11954:	1f1d      	subs	r5, r3, #4
   11956:	b2eb      	uxtb	r3, r5
   11958:	9300      	str	r3, [sp, #0]
   1195a:	4ab1      	ldr	r2, [pc, #708]	; (11c20 <LORAWAN_RxDone+0x320>)
   1195c:	003b      	movs	r3, r7
   1195e:	9907      	ldr	r1, [sp, #28]
   11960:	4eb0      	ldr	r6, [pc, #704]	; (11c24 <LORAWAN_RxDone+0x324>)
   11962:	47b0      	blx	r6
   11964:	2204      	movs	r2, #4
   11966:	49ae      	ldr	r1, [pc, #696]	; (11c20 <LORAWAN_RxDone+0x320>)
   11968:	4baf      	ldr	r3, [pc, #700]	; (11c28 <LORAWAN_RxDone+0x328>)
   1196a:	a810      	add	r0, sp, #64	; 0x40
   1196c:	4798      	blx	r3
   1196e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11970:	1979      	adds	r1, r7, r5
   11972:	2204      	movs	r2, #4
   11974:	4bac      	ldr	r3, [pc, #688]	; (11c28 <LORAWAN_RxDone+0x328>)
   11976:	a810      	add	r0, sp, #64	; 0x40
   11978:	960d      	str	r6, [sp, #52]	; 0x34
   1197a:	4798      	blx	r3
   1197c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1197e:	4ba6      	ldr	r3, [pc, #664]	; (11c18 <LORAWAN_RxDone+0x318>)
   11980:	210e      	movs	r1, #14
   11982:	42b2      	cmp	r2, r6
   11984:	d029      	beq.n	119da <LORAWAN_RxDone+0xda>
   11986:	001a      	movs	r2, r3
   11988:	3284      	adds	r2, #132	; 0x84
   1198a:	7812      	ldrb	r2, [r2, #0]
   1198c:	400a      	ands	r2, r1
   1198e:	2a0a      	cmp	r2, #10
   11990:	d005      	beq.n	1199e <LORAWAN_RxDone+0x9e>
   11992:	2a06      	cmp	r2, #6
   11994:	d106      	bne.n	119a4 <LORAWAN_RxDone+0xa4>
   11996:	33f9      	adds	r3, #249	; 0xf9
   11998:	781b      	ldrb	r3, [r3, #0]
   1199a:	2b00      	cmp	r3, #0
   1199c:	d002      	beq.n	119a4 <LORAWAN_RxDone+0xa4>
   1199e:	2018      	movs	r0, #24
   119a0:	4ba2      	ldr	r3, [pc, #648]	; (11c2c <LORAWAN_RxDone+0x32c>)
   119a2:	4798      	blx	r3
   119a4:	4ba2      	ldr	r3, [pc, #648]	; (11c30 <LORAWAN_RxDone+0x330>)
   119a6:	4798      	blx	r3
   119a8:	e1d0      	b.n	11d4c <LORAWAN_RxDone+0x44c>
   119aa:	9b06      	ldr	r3, [sp, #24]
   119ac:	9a07      	ldr	r2, [sp, #28]
   119ae:	2100      	movs	r1, #0
   119b0:	1a98      	subs	r0, r3, r2
   119b2:	1838      	adds	r0, r7, r0
   119b4:	4662      	mov	r2, ip
   119b6:	4b9f      	ldr	r3, [pc, #636]	; (11c34 <LORAWAN_RxDone+0x334>)
   119b8:	4798      	blx	r3
   119ba:	2800      	cmp	r0, #0
   119bc:	d006      	beq.n	119cc <LORAWAN_RxDone+0xcc>
   119be:	4b9b      	ldr	r3, [pc, #620]	; (11c2c <LORAWAN_RxDone+0x32c>)
   119c0:	4798      	blx	r3
   119c2:	4b9b      	ldr	r3, [pc, #620]	; (11c30 <LORAWAN_RxDone+0x330>)
   119c4:	4798      	blx	r3
   119c6:	201f      	movs	r0, #31
   119c8:	b013      	add	sp, #76	; 0x4c
   119ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119cc:	9b07      	ldr	r3, [sp, #28]
   119ce:	2b10      	cmp	r3, #16
   119d0:	d901      	bls.n	119d6 <LORAWAN_RxDone+0xd6>
   119d2:	3b10      	subs	r3, #16
   119d4:	e7b5      	b.n	11942 <LORAWAN_RxDone+0x42>
   119d6:	9007      	str	r0, [sp, #28]
   119d8:	e7b5      	b.n	11946 <LORAWAN_RxDone+0x46>
   119da:	001a      	movs	r2, r3
   119dc:	3284      	adds	r2, #132	; 0x84
   119de:	7812      	ldrb	r2, [r2, #0]
   119e0:	400a      	ands	r2, r1
   119e2:	2a06      	cmp	r2, #6
   119e4:	d103      	bne.n	119ee <LORAWAN_RxDone+0xee>
   119e6:	33ec      	adds	r3, #236	; 0xec
   119e8:	7818      	ldrb	r0, [r3, #0]
   119ea:	4b93      	ldr	r3, [pc, #588]	; (11c38 <LORAWAN_RxDone+0x338>)
   119ec:	4798      	blx	r3
   119ee:	7a3a      	ldrb	r2, [r7, #8]
   119f0:	79fb      	ldrb	r3, [r7, #7]
   119f2:	0212      	lsls	r2, r2, #8
   119f4:	431a      	orrs	r2, r3
   119f6:	7a7b      	ldrb	r3, [r7, #9]
   119f8:	2001      	movs	r0, #1
   119fa:	041b      	lsls	r3, r3, #16
   119fc:	431a      	orrs	r2, r3
   119fe:	7abb      	ldrb	r3, [r7, #10]
   11a00:	061b      	lsls	r3, r3, #24
   11a02:	4313      	orrs	r3, r2
   11a04:	0a19      	lsrs	r1, r3, #8
   11a06:	7063      	strb	r3, [r4, #1]
   11a08:	70a1      	strb	r1, [r4, #2]
   11a0a:	0c19      	lsrs	r1, r3, #16
   11a0c:	0e1b      	lsrs	r3, r3, #24
   11a0e:	70e1      	strb	r1, [r4, #3]
   11a10:	7123      	strb	r3, [r4, #4]
   11a12:	240f      	movs	r4, #15
   11a14:	2103      	movs	r1, #3
   11a16:	4b89      	ldr	r3, [pc, #548]	; (11c3c <LORAWAN_RxDone+0x33c>)
   11a18:	4798      	blx	r3
   11a1a:	7b38      	ldrb	r0, [r7, #12]
   11a1c:	4b88      	ldr	r3, [pc, #544]	; (11c40 <LORAWAN_RxDone+0x340>)
   11a1e:	4020      	ands	r0, r4
   11a20:	4798      	blx	r3
   11a22:	7af8      	ldrb	r0, [r7, #11]
   11a24:	4b87      	ldr	r3, [pc, #540]	; (11c44 <LORAWAN_RxDone+0x344>)
   11a26:	0641      	lsls	r1, r0, #25
   11a28:	0700      	lsls	r0, r0, #28
   11a2a:	0f49      	lsrs	r1, r1, #29
   11a2c:	0f00      	lsrs	r0, r0, #28
   11a2e:	4798      	blx	r3
   11a30:	4b85      	ldr	r3, [pc, #532]	; (11c48 <LORAWAN_RxDone+0x348>)
   11a32:	2100      	movs	r1, #0
   11a34:	203b      	movs	r0, #59	; 0x3b
   11a36:	4798      	blx	r3
   11a38:	9b06      	ldr	r3, [sp, #24]
   11a3a:	2b21      	cmp	r3, #33	; 0x21
   11a3c:	d000      	beq.n	11a40 <LORAWAN_RxDone+0x140>
   11a3e:	e08c      	b.n	11b5a <LORAWAN_RxDone+0x25a>
   11a40:	251a      	movs	r5, #26
   11a42:	ab04      	add	r3, sp, #16
   11a44:	18ed      	adds	r5, r5, r3
   11a46:	002a      	movs	r2, r5
   11a48:	4b80      	ldr	r3, [pc, #512]	; (11c4c <LORAWAN_RxDone+0x34c>)
   11a4a:	4981      	ldr	r1, [pc, #516]	; (11c50 <LORAWAN_RxDone+0x350>)
   11a4c:	2007      	movs	r0, #7
   11a4e:	4798      	blx	r3
   11a50:	782b      	ldrb	r3, [r5, #0]
   11a52:	2bff      	cmp	r3, #255	; 0xff
   11a54:	d100      	bne.n	11a58 <LORAWAN_RxDone+0x158>
   11a56:	e080      	b.n	11b5a <LORAWAN_RxDone+0x25a>
   11a58:	2350      	movs	r3, #80	; 0x50
   11a5a:	43a3      	bics	r3, r4
   11a5c:	9308      	str	r3, [sp, #32]
   11a5e:	003b      	movs	r3, r7
   11a60:	330d      	adds	r3, #13
   11a62:	9306      	str	r3, [sp, #24]
   11a64:	2600      	movs	r6, #0
   11a66:	2203      	movs	r2, #3
   11a68:	9906      	ldr	r1, [sp, #24]
   11a6a:	4b6f      	ldr	r3, [pc, #444]	; (11c28 <LORAWAN_RxDone+0x328>)
   11a6c:	a80e      	add	r0, sp, #56	; 0x38
   11a6e:	960e      	str	r6, [sp, #56]	; 0x38
   11a70:	4798      	blx	r3
   11a72:	2364      	movs	r3, #100	; 0x64
   11a74:	990e      	ldr	r1, [sp, #56]	; 0x38
   11a76:	aa04      	add	r2, sp, #16
   11a78:	4359      	muls	r1, r3
   11a7a:	3b4a      	subs	r3, #74	; 0x4a
   11a7c:	189b      	adds	r3, r3, r2
   11a7e:	7818      	ldrb	r0, [r3, #0]
   11a80:	9b07      	ldr	r3, [sp, #28]
   11a82:	910e      	str	r1, [sp, #56]	; 0x38
   11a84:	1818      	adds	r0, r3, r0
   11a86:	b2c0      	uxtb	r0, r0
   11a88:	76d0      	strb	r0, [r2, #27]
   11a8a:	42b1      	cmp	r1, r6
   11a8c:	d100      	bne.n	11a90 <LORAWAN_RxDone+0x190>
   11a8e:	e0a7      	b.n	11be0 <LORAWAN_RxDone+0x2e0>
   11a90:	466b      	mov	r3, sp
   11a92:	2220      	movs	r2, #32
   11a94:	189b      	adds	r3, r3, r2
   11a96:	781b      	ldrb	r3, [r3, #0]
   11a98:	ad10      	add	r5, sp, #64	; 0x40
   11a9a:	ac0b      	add	r4, sp, #44	; 0x2c
   11a9c:	7128      	strb	r0, [r5, #4]
   11a9e:	9110      	str	r1, [sp, #64]	; 0x40
   11aa0:	7020      	strb	r0, [r4, #0]
   11aa2:	7063      	strb	r3, [r4, #1]
   11aa4:	0029      	movs	r1, r5
   11aa6:	2002      	movs	r0, #2
   11aa8:	4b6a      	ldr	r3, [pc, #424]	; (11c54 <LORAWAN_RxDone+0x354>)
   11aaa:	4798      	blx	r3
   11aac:	2808      	cmp	r0, #8
   11aae:	d140      	bne.n	11b32 <LORAWAN_RxDone+0x232>
   11ab0:	0029      	movs	r1, r5
   11ab2:	0030      	movs	r0, r6
   11ab4:	4b64      	ldr	r3, [pc, #400]	; (11c48 <LORAWAN_RxDone+0x348>)
   11ab6:	4798      	blx	r3
   11ab8:	ad0c      	add	r5, sp, #48	; 0x30
   11aba:	0021      	movs	r1, r4
   11abc:	4b62      	ldr	r3, [pc, #392]	; (11c48 <LORAWAN_RxDone+0x348>)
   11abe:	2012      	movs	r0, #18
   11ac0:	4798      	blx	r3
   11ac2:	0031      	movs	r1, r6
   11ac4:	002a      	movs	r2, r5
   11ac6:	4e61      	ldr	r6, [pc, #388]	; (11c4c <LORAWAN_RxDone+0x34c>)
   11ac8:	2014      	movs	r0, #20
   11aca:	47b0      	blx	r6
   11acc:	4c52      	ldr	r4, [pc, #328]	; (11c18 <LORAWAN_RxDone+0x318>)
   11ace:	782a      	ldrb	r2, [r5, #0]
   11ad0:	0023      	movs	r3, r4
   11ad2:	33f3      	adds	r3, #243	; 0xf3
   11ad4:	701a      	strb	r2, [r3, #0]
   11ad6:	0023      	movs	r3, r4
   11ad8:	786a      	ldrb	r2, [r5, #1]
   11ada:	2522      	movs	r5, #34	; 0x22
   11adc:	33f4      	adds	r3, #244	; 0xf4
   11ade:	701a      	strb	r2, [r3, #0]
   11ae0:	4b5d      	ldr	r3, [pc, #372]	; (11c58 <LORAWAN_RxDone+0x358>)
   11ae2:	4798      	blx	r3
   11ae4:	ab04      	add	r3, sp, #16
   11ae6:	18ed      	adds	r5, r5, r3
   11ae8:	231b      	movs	r3, #27
   11aea:	a904      	add	r1, sp, #16
   11aec:	185b      	adds	r3, r3, r1
   11aee:	0019      	movs	r1, r3
   11af0:	002a      	movs	r2, r5
   11af2:	201e      	movs	r0, #30
   11af4:	47b0      	blx	r6
   11af6:	0023      	movs	r3, r4
   11af8:	33ff      	adds	r3, #255	; 0xff
   11afa:	7f5b      	ldrb	r3, [r3, #29]
   11afc:	079b      	lsls	r3, r3, #30
   11afe:	d508      	bpl.n	11b12 <LORAWAN_RxDone+0x212>
   11b00:	ab04      	add	r3, sp, #16
   11b02:	7edb      	ldrb	r3, [r3, #27]
   11b04:	a90f      	add	r1, sp, #60	; 0x3c
   11b06:	708b      	strb	r3, [r1, #2]
   11b08:	882b      	ldrh	r3, [r5, #0]
   11b0a:	201e      	movs	r0, #30
   11b0c:	800b      	strh	r3, [r1, #0]
   11b0e:	4b4e      	ldr	r3, [pc, #312]	; (11c48 <LORAWAN_RxDone+0x348>)
   11b10:	4798      	blx	r3
   11b12:	231b      	movs	r3, #27
   11b14:	aa04      	add	r2, sp, #16
   11b16:	189b      	adds	r3, r3, r2
   11b18:	7818      	ldrb	r0, [r3, #0]
   11b1a:	2101      	movs	r1, #1
   11b1c:	4b4f      	ldr	r3, [pc, #316]	; (11c5c <LORAWAN_RxDone+0x35c>)
   11b1e:	4798      	blx	r3
   11b20:	2204      	movs	r2, #4
   11b22:	3484      	adds	r4, #132	; 0x84
   11b24:	7863      	ldrb	r3, [r4, #1]
   11b26:	210b      	movs	r1, #11
   11b28:	4313      	orrs	r3, r2
   11b2a:	7063      	strb	r3, [r4, #1]
   11b2c:	2001      	movs	r0, #1
   11b2e:	4b43      	ldr	r3, [pc, #268]	; (11c3c <LORAWAN_RxDone+0x33c>)
   11b30:	4798      	blx	r3
   11b32:	9b07      	ldr	r3, [sp, #28]
   11b34:	3301      	adds	r3, #1
   11b36:	b2db      	uxtb	r3, r3
   11b38:	9307      	str	r3, [sp, #28]
   11b3a:	9b06      	ldr	r3, [sp, #24]
   11b3c:	3303      	adds	r3, #3
   11b3e:	9306      	str	r3, [sp, #24]
   11b40:	9b07      	ldr	r3, [sp, #28]
   11b42:	2b05      	cmp	r3, #5
   11b44:	d18e      	bne.n	11a64 <LORAWAN_RxDone+0x164>
   11b46:	2204      	movs	r2, #4
   11b48:	4b33      	ldr	r3, [pc, #204]	; (11c18 <LORAWAN_RxDone+0x318>)
   11b4a:	2001      	movs	r0, #1
   11b4c:	3384      	adds	r3, #132	; 0x84
   11b4e:	7859      	ldrb	r1, [r3, #1]
   11b50:	430a      	orrs	r2, r1
   11b52:	705a      	strb	r2, [r3, #1]
   11b54:	210b      	movs	r1, #11
   11b56:	4b39      	ldr	r3, [pc, #228]	; (11c3c <LORAWAN_RxDone+0x33c>)
   11b58:	4798      	blx	r3
   11b5a:	4d41      	ldr	r5, [pc, #260]	; (11c60 <LORAWAN_RxDone+0x360>)
   11b5c:	1c7e      	adds	r6, r7, #1
   11b5e:	3704      	adds	r7, #4
   11b60:	0028      	movs	r0, r5
   11b62:	003a      	movs	r2, r7
   11b64:	0031      	movs	r1, r6
   11b66:	4b3f      	ldr	r3, [pc, #252]	; (11c64 <LORAWAN_RxDone+0x364>)
   11b68:	4798      	blx	r3
   11b6a:	2302      	movs	r3, #2
   11b6c:	4c2a      	ldr	r4, [pc, #168]	; (11c18 <LORAWAN_RxDone+0x318>)
   11b6e:	0028      	movs	r0, r5
   11b70:	7563      	strb	r3, [r4, #21]
   11b72:	4a2a      	ldr	r2, [pc, #168]	; (11c1c <LORAWAN_RxDone+0x31c>)
   11b74:	3b01      	subs	r3, #1
   11b76:	2100      	movs	r1, #0
   11b78:	4d3b      	ldr	r5, [pc, #236]	; (11c68 <LORAWAN_RxDone+0x368>)
   11b7a:	47a8      	blx	r5
   11b7c:	2800      	cmp	r0, #0
   11b7e:	d003      	beq.n	11b88 <LORAWAN_RxDone+0x288>
   11b80:	4b2a      	ldr	r3, [pc, #168]	; (11c2c <LORAWAN_RxDone+0x32c>)
   11b82:	4798      	blx	r3
   11b84:	4b2a      	ldr	r3, [pc, #168]	; (11c30 <LORAWAN_RxDone+0x330>)
   11b86:	4798      	blx	r3
   11b88:	2105      	movs	r1, #5
   11b8a:	4b2c      	ldr	r3, [pc, #176]	; (11c3c <LORAWAN_RxDone+0x33c>)
   11b8c:	2001      	movs	r0, #1
   11b8e:	4798      	blx	r3
   11b90:	4d36      	ldr	r5, [pc, #216]	; (11c6c <LORAWAN_RxDone+0x36c>)
   11b92:	003a      	movs	r2, r7
   11b94:	0028      	movs	r0, r5
   11b96:	0031      	movs	r1, r6
   11b98:	4b32      	ldr	r3, [pc, #200]	; (11c64 <LORAWAN_RxDone+0x364>)
   11b9a:	4798      	blx	r3
   11b9c:	2301      	movs	r3, #1
   11b9e:	0028      	movs	r0, r5
   11ba0:	7163      	strb	r3, [r4, #5]
   11ba2:	4a1e      	ldr	r2, [pc, #120]	; (11c1c <LORAWAN_RxDone+0x31c>)
   11ba4:	18db      	adds	r3, r3, r3
   11ba6:	2100      	movs	r1, #0
   11ba8:	4d2f      	ldr	r5, [pc, #188]	; (11c68 <LORAWAN_RxDone+0x368>)
   11baa:	47a8      	blx	r5
   11bac:	2800      	cmp	r0, #0
   11bae:	d003      	beq.n	11bb8 <LORAWAN_RxDone+0x2b8>
   11bb0:	4b1e      	ldr	r3, [pc, #120]	; (11c2c <LORAWAN_RxDone+0x32c>)
   11bb2:	4798      	blx	r3
   11bb4:	4b1e      	ldr	r3, [pc, #120]	; (11c30 <LORAWAN_RxDone+0x330>)
   11bb6:	4798      	blx	r3
   11bb8:	4b20      	ldr	r3, [pc, #128]	; (11c3c <LORAWAN_RxDone+0x33c>)
   11bba:	2104      	movs	r1, #4
   11bbc:	2001      	movs	r0, #1
   11bbe:	4798      	blx	r3
   11bc0:	4b2b      	ldr	r3, [pc, #172]	; (11c70 <LORAWAN_RxDone+0x370>)
   11bc2:	5ce3      	ldrb	r3, [r4, r3]
   11bc4:	2b00      	cmp	r3, #0
   11bc6:	d017      	beq.n	11bf8 <LORAWAN_RxDone+0x2f8>
   11bc8:	492a      	ldr	r1, [pc, #168]	; (11c74 <LORAWAN_RxDone+0x374>)
   11bca:	2002      	movs	r0, #2
   11bcc:	4c2a      	ldr	r4, [pc, #168]	; (11c78 <LORAWAN_RxDone+0x378>)
   11bce:	47a0      	blx	r4
   11bd0:	2800      	cmp	r0, #0
   11bd2:	d008      	beq.n	11be6 <LORAWAN_RxDone+0x2e6>
   11bd4:	4b15      	ldr	r3, [pc, #84]	; (11c2c <LORAWAN_RxDone+0x32c>)
   11bd6:	4798      	blx	r3
   11bd8:	4b15      	ldr	r3, [pc, #84]	; (11c30 <LORAWAN_RxDone+0x330>)
   11bda:	4798      	blx	r3
   11bdc:	2023      	movs	r0, #35	; 0x23
   11bde:	e6f3      	b.n	119c8 <LORAWAN_RxDone+0xc8>
   11be0:	4b1e      	ldr	r3, [pc, #120]	; (11c5c <LORAWAN_RxDone+0x35c>)
   11be2:	4798      	blx	r3
   11be4:	e7a5      	b.n	11b32 <LORAWAN_RxDone+0x232>
   11be6:	4925      	ldr	r1, [pc, #148]	; (11c7c <LORAWAN_RxDone+0x37c>)
   11be8:	2001      	movs	r0, #1
   11bea:	47a0      	blx	r4
   11bec:	2800      	cmp	r0, #0
   11bee:	d1f1      	bne.n	11bd4 <LORAWAN_RxDone+0x2d4>
   11bf0:	4b23      	ldr	r3, [pc, #140]	; (11c80 <LORAWAN_RxDone+0x380>)
   11bf2:	4798      	blx	r3
   11bf4:	2008      	movs	r0, #8
   11bf6:	e6e7      	b.n	119c8 <LORAWAN_RxDone+0xc8>
   11bf8:	0020      	movs	r0, r4
   11bfa:	0021      	movs	r1, r4
   11bfc:	2210      	movs	r2, #16
   11bfe:	3115      	adds	r1, #21
   11c00:	4d09      	ldr	r5, [pc, #36]	; (11c28 <LORAWAN_RxDone+0x328>)
   11c02:	3035      	adds	r0, #53	; 0x35
   11c04:	47a8      	blx	r5
   11c06:	0020      	movs	r0, r4
   11c08:	1d61      	adds	r1, r4, #5
   11c0a:	2210      	movs	r2, #16
   11c0c:	3025      	adds	r0, #37	; 0x25
   11c0e:	47a8      	blx	r5
   11c10:	e7ee      	b.n	11bf0 <LORAWAN_RxDone+0x2f0>
   11c12:	46c0      	nop			; (mov r8, r8)
   11c14:	200031f4 	.word	0x200031f4
   11c18:	20003170 	.word	0x20003170
   11c1c:	200031b5 	.word	0x200031b5
   11c20:	20001eb5 	.word	0x20001eb5
   11c24:	00007259 	.word	0x00007259
   11c28:	00016837 	.word	0x00016837
   11c2c:	000104e1 	.word	0x000104e1
   11c30:	00011395 	.word	0x00011395
   11c34:	00007221 	.word	0x00007221
   11c38:	0000d41d 	.word	0x0000d41d
   11c3c:	00009385 	.word	0x00009385
   11c40:	0000fc71 	.word	0x0000fc71
   11c44:	00010385 	.word	0x00010385
   11c48:	0000cbf5 	.word	0x0000cbf5
   11c4c:	0000cbbd 	.word	0x0000cbbd
   11c50:	20003257 	.word	0x20003257
   11c54:	0000cbd9 	.word	0x0000cbd9
   11c58:	00011461 	.word	0x00011461
   11c5c:	000118b1 	.word	0x000118b1
   11c60:	20003185 	.word	0x20003185
   11c64:	0000ff9d 	.word	0x0000ff9d
   11c68:	00007249 	.word	0x00007249
   11c6c:	20003175 	.word	0x20003175
   11c70:	0000022d 	.word	0x0000022d
   11c74:	20003195 	.word	0x20003195
   11c78:	00007255 	.word	0x00007255
   11c7c:	200031a5 	.word	0x200031a5
   11c80:	0000feb9 	.word	0x0000feb9
   11c84:	22bf      	movs	r2, #191	; 0xbf
   11c86:	3e60      	subs	r6, #96	; 0x60
   11c88:	4016      	ands	r6, r2
   11c8a:	d000      	beq.n	11c8e <LORAWAN_RxDone+0x38e>
   11c8c:	e2b6      	b.n	121fc <LORAWAN_RxDone+0x8fc>
   11c8e:	2501      	movs	r5, #1
   11c90:	422b      	tst	r3, r5
   11c92:	d100      	bne.n	11c96 <LORAWAN_RxDone+0x396>
   11c94:	e2b2      	b.n	121fc <LORAWAN_RxDone+0x8fc>
   11c96:	7922      	ldrb	r2, [r4, #4]
   11c98:	6823      	ldr	r3, [r4, #0]
   11c9a:	0612      	lsls	r2, r2, #24
   11c9c:	0a1b      	lsrs	r3, r3, #8
   11c9e:	431a      	orrs	r2, r3
   11ca0:	0023      	movs	r3, r4
   11ca2:	33e0      	adds	r3, #224	; 0xe0
   11ca4:	701e      	strb	r6, [r3, #0]
   11ca6:	9207      	str	r2, [sp, #28]
   11ca8:	7882      	ldrb	r2, [r0, #2]
   11caa:	7843      	ldrb	r3, [r0, #1]
   11cac:	0212      	lsls	r2, r2, #8
   11cae:	431a      	orrs	r2, r3
   11cb0:	78c3      	ldrb	r3, [r0, #3]
   11cb2:	041b      	lsls	r3, r3, #16
   11cb4:	431a      	orrs	r2, r3
   11cb6:	7903      	ldrb	r3, [r0, #4]
   11cb8:	061b      	lsls	r3, r3, #24
   11cba:	4313      	orrs	r3, r2
   11cbc:	9a07      	ldr	r2, [sp, #28]
   11cbe:	429a      	cmp	r2, r3
   11cc0:	d100      	bne.n	11cc4 <LORAWAN_RxDone+0x3c4>
   11cc2:	e2cc      	b.n	1225e <LORAWAN_RxDone+0x95e>
   11cc4:	ab04      	add	r3, sp, #16
   11cc6:	3521      	adds	r5, #33	; 0x21
   11cc8:	18ed      	adds	r5, r5, r3
   11cca:	7a02      	ldrb	r2, [r0, #8]
   11ccc:	0949      	lsrs	r1, r1, #5
   11cce:	002b      	movs	r3, r5
   11cd0:	4eda      	ldr	r6, [pc, #872]	; (1203c <LORAWAN_RxDone+0x73c>)
   11cd2:	47b0      	blx	r6
   11cd4:	2808      	cmp	r0, #8
   11cd6:	d131      	bne.n	11d3c <LORAWAN_RxDone+0x43c>
   11cd8:	233c      	movs	r3, #60	; 0x3c
   11cda:	7829      	ldrb	r1, [r5, #0]
   11cdc:	434b      	muls	r3, r1
   11cde:	001d      	movs	r5, r3
   11ce0:	3535      	adds	r5, #53	; 0x35
   11ce2:	35ff      	adds	r5, #255	; 0xff
   11ce4:	192d      	adds	r5, r5, r4
   11ce6:	18e4      	adds	r4, r4, r3
   11ce8:	0023      	movs	r3, r4
   11cea:	33fc      	adds	r3, #252	; 0xfc
   11cec:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11cf0:	9308      	str	r3, [sp, #32]
   11cf2:	79fb      	ldrb	r3, [r7, #7]
   11cf4:	79ba      	ldrb	r2, [r7, #6]
   11cf6:	021b      	lsls	r3, r3, #8
   11cf8:	4313      	orrs	r3, r2
   11cfa:	0022      	movs	r2, r4
   11cfc:	3255      	adds	r2, #85	; 0x55
   11cfe:	32ff      	adds	r2, #255	; 0xff
   11d00:	8816      	ldrh	r6, [r2, #0]
   11d02:	429e      	cmp	r6, r3
   11d04:	d908      	bls.n	11d18 <LORAWAN_RxDone+0x418>
   11d06:	3457      	adds	r4, #87	; 0x57
   11d08:	34ff      	adds	r4, #255	; 0xff
   11d0a:	8823      	ldrh	r3, [r4, #0]
   11d0c:	3301      	adds	r3, #1
   11d0e:	8023      	strh	r3, [r4, #0]
   11d10:	79fb      	ldrb	r3, [r7, #7]
   11d12:	79bc      	ldrb	r4, [r7, #6]
   11d14:	021b      	lsls	r3, r3, #8
   11d16:	4323      	orrs	r3, r4
   11d18:	8013      	strh	r3, [r2, #0]
   11d1a:	9b06      	ldr	r3, [sp, #24]
   11d1c:	9000      	str	r0, [sp, #0]
   11d1e:	1f1a      	subs	r2, r3, #4
   11d20:	233c      	movs	r3, #60	; 0x3c
   11d22:	434b      	muls	r3, r1
   11d24:	49c6      	ldr	r1, [pc, #792]	; (12040 <LORAWAN_RxDone+0x740>)
   11d26:	b2d2      	uxtb	r2, r2
   11d28:	18c9      	adds	r1, r1, r3
   11d2a:	31fc      	adds	r1, #252	; 0xfc
   11d2c:	2349      	movs	r3, #73	; 0x49
   11d2e:	6d89      	ldr	r1, [r1, #88]	; 0x58
   11d30:	2001      	movs	r0, #1
   11d32:	4cc4      	ldr	r4, [pc, #784]	; (12044 <LORAWAN_RxDone+0x744>)
   11d34:	47a0      	blx	r4
   11d36:	2301      	movs	r3, #1
   11d38:	9307      	str	r3, [sp, #28]
   11d3a:	e2a6      	b.n	1228a <LORAWAN_RxDone+0x98a>
   11d3c:	220e      	movs	r2, #14
   11d3e:	4bc2      	ldr	r3, [pc, #776]	; (12048 <LORAWAN_RxDone+0x748>)
   11d40:	781b      	ldrb	r3, [r3, #0]
   11d42:	4013      	ands	r3, r2
   11d44:	2b0a      	cmp	r3, #10
   11d46:	d008      	beq.n	11d5a <LORAWAN_RxDone+0x45a>
   11d48:	2b06      	cmp	r3, #6
   11d4a:	d001      	beq.n	11d50 <LORAWAN_RxDone+0x450>
   11d4c:	200a      	movs	r0, #10
   11d4e:	e63b      	b.n	119c8 <LORAWAN_RxDone+0xc8>
   11d50:	0023      	movs	r3, r4
   11d52:	33f9      	adds	r3, #249	; 0xf9
   11d54:	781b      	ldrb	r3, [r3, #0]
   11d56:	2b00      	cmp	r3, #0
   11d58:	d0f8      	beq.n	11d4c <LORAWAN_RxDone+0x44c>
   11d5a:	2220      	movs	r2, #32
   11d5c:	201e      	movs	r0, #30
   11d5e:	3494      	adds	r4, #148	; 0x94
   11d60:	7823      	ldrb	r3, [r4, #0]
   11d62:	4393      	bics	r3, r2
   11d64:	7023      	strb	r3, [r4, #0]
   11d66:	4bb9      	ldr	r3, [pc, #740]	; (1204c <LORAWAN_RxDone+0x74c>)
   11d68:	e61b      	b.n	119a2 <LORAWAN_RxDone+0xa2>
   11d6a:	0022      	movs	r2, r4
   11d6c:	2102      	movs	r1, #2
   11d6e:	e2a6      	b.n	122be <LORAWAN_RxDone+0x9be>
   11d70:	9b08      	ldr	r3, [sp, #32]
   11d72:	328c      	adds	r2, #140	; 0x8c
   11d74:	6013      	str	r3, [r2, #0]
   11d76:	e2e3      	b.n	12340 <LORAWAN_RxDone+0xa40>
   11d78:	9b07      	ldr	r3, [sp, #28]
   11d7a:	4cb1      	ldr	r4, [pc, #708]	; (12040 <LORAWAN_RxDone+0x740>)
   11d7c:	2b00      	cmp	r3, #0
   11d7e:	d000      	beq.n	11d82 <LORAWAN_RxDone+0x482>
   11d80:	e224      	b.n	121cc <LORAWAN_RxDone+0x8cc>
   11d82:	466a      	mov	r2, sp
   11d84:	0023      	movs	r3, r4
   11d86:	7f12      	ldrb	r2, [r2, #28]
   11d88:	33e3      	adds	r3, #227	; 0xe3
   11d8a:	701a      	strb	r2, [r3, #0]
   11d8c:	797b      	ldrb	r3, [r7, #5]
   11d8e:	2b7f      	cmp	r3, #127	; 0x7f
   11d90:	d909      	bls.n	11da6 <LORAWAN_RxDone+0x4a6>
   11d92:	0022      	movs	r2, r4
   11d94:	2320      	movs	r3, #32
   11d96:	3284      	adds	r2, #132	; 0x84
   11d98:	7811      	ldrb	r1, [r2, #0]
   11d9a:	2001      	movs	r0, #1
   11d9c:	430b      	orrs	r3, r1
   11d9e:	7013      	strb	r3, [r2, #0]
   11da0:	210b      	movs	r1, #11
   11da2:	4bab      	ldr	r3, [pc, #684]	; (12050 <LORAWAN_RxDone+0x750>)
   11da4:	4798      	blx	r3
   11da6:	797b      	ldrb	r3, [r7, #5]
   11da8:	06db      	lsls	r3, r3, #27
   11daa:	d505      	bpl.n	11db8 <LORAWAN_RxDone+0x4b8>
   11dac:	0022      	movs	r2, r4
   11dae:	2308      	movs	r3, #8
   11db0:	3294      	adds	r2, #148	; 0x94
   11db2:	7811      	ldrb	r1, [r2, #0]
   11db4:	430b      	orrs	r3, r1
   11db6:	7013      	strb	r3, [r2, #0]
   11db8:	797b      	ldrb	r3, [r7, #5]
   11dba:	065b      	lsls	r3, r3, #25
   11dbc:	d505      	bpl.n	11dca <LORAWAN_RxDone+0x4ca>
   11dbe:	0022      	movs	r2, r4
   11dc0:	2310      	movs	r3, #16
   11dc2:	3294      	adds	r2, #148	; 0x94
   11dc4:	7811      	ldrb	r1, [r2, #0]
   11dc6:	430b      	orrs	r3, r1
   11dc8:	7013      	strb	r3, [r2, #0]
   11dca:	221f      	movs	r2, #31
   11dcc:	783b      	ldrb	r3, [r7, #0]
   11dce:	4393      	bics	r3, r2
   11dd0:	2ba0      	cmp	r3, #160	; 0xa0
   11dd2:	d105      	bne.n	11de0 <LORAWAN_RxDone+0x4e0>
   11dd4:	0022      	movs	r2, r4
   11dd6:	3294      	adds	r2, #148	; 0x94
   11dd8:	7811      	ldrb	r1, [r2, #0]
   11dda:	3b9e      	subs	r3, #158	; 0x9e
   11ddc:	430b      	orrs	r3, r1
   11dde:	7013      	strb	r3, [r2, #0]
   11de0:	7979      	ldrb	r1, [r7, #5]
   11de2:	070b      	lsls	r3, r1, #28
   11de4:	d100      	bne.n	11de8 <LORAWAN_RxDone+0x4e8>
   11de6:	e0d4      	b.n	11f92 <LORAWAN_RxDone+0x692>
   11de8:	0709      	lsls	r1, r1, #28
   11dea:	0f09      	lsrs	r1, r1, #28
   11dec:	187b      	adds	r3, r7, r1
   11dee:	7a1b      	ldrb	r3, [r3, #8]
   11df0:	2b00      	cmp	r3, #0
   11df2:	d100      	bne.n	11df6 <LORAWAN_RxDone+0x4f6>
   11df4:	e0a9      	b.n	11f4a <LORAWAN_RxDone+0x64a>
   11df6:	0038      	movs	r0, r7
   11df8:	4b96      	ldr	r3, [pc, #600]	; (12054 <LORAWAN_RxDone+0x754>)
   11dfa:	3008      	adds	r0, #8
   11dfc:	4798      	blx	r3
   11dfe:	2301      	movs	r3, #1
   11e00:	0006      	movs	r6, r0
   11e02:	9307      	str	r3, [sp, #28]
   11e04:	7978      	ldrb	r0, [r7, #5]
   11e06:	9906      	ldr	r1, [sp, #24]
   11e08:	0703      	lsls	r3, r0, #28
   11e0a:	0f1b      	lsrs	r3, r3, #28
   11e0c:	001a      	movs	r2, r3
   11e0e:	320c      	adds	r2, #12
   11e10:	4291      	cmp	r1, r2
   11e12:	d100      	bne.n	11e16 <LORAWAN_RxDone+0x516>
   11e14:	e0f1      	b.n	11ffa <LORAWAN_RxDone+0x6fa>
   11e16:	7832      	ldrb	r2, [r6, #0]
   11e18:	1ac9      	subs	r1, r1, r3
   11e1a:	b2c9      	uxtb	r1, r1
   11e1c:	9208      	str	r2, [sp, #32]
   11e1e:	000a      	movs	r2, r1
   11e20:	3319      	adds	r3, #25
   11e22:	3a0c      	subs	r2, #12
   11e24:	469c      	mov	ip, r3
   11e26:	9b08      	ldr	r3, [sp, #32]
   11e28:	b2d2      	uxtb	r2, r2
   11e2a:	9206      	str	r2, [sp, #24]
   11e2c:	1c75      	adds	r5, r6, #1
   11e2e:	4a84      	ldr	r2, [pc, #528]	; (12040 <LORAWAN_RxDone+0x740>)
   11e30:	2b00      	cmp	r3, #0
   11e32:	d100      	bne.n	11e36 <LORAWAN_RxDone+0x536>
   11e34:	e0b0      	b.n	11f98 <LORAWAN_RxDone+0x698>
   11e36:	6813      	ldr	r3, [r2, #0]
   11e38:	0010      	movs	r0, r2
   11e3a:	7912      	ldrb	r2, [r2, #4]
   11e3c:	0a1c      	lsrs	r4, r3, #8
   11e3e:	0612      	lsls	r2, r2, #24
   11e40:	4322      	orrs	r2, r4
   11e42:	9204      	str	r2, [sp, #16]
   11e44:	4a84      	ldr	r2, [pc, #528]	; (12058 <LORAWAN_RxDone+0x758>)
   11e46:	4663      	mov	r3, ip
   11e48:	9203      	str	r2, [sp, #12]
   11e4a:	466a      	mov	r2, sp
   11e4c:	8493      	strh	r3, [r2, #36]	; 0x24
   11e4e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   11e50:	2201      	movs	r2, #1
   11e52:	9302      	str	r3, [sp, #8]
   11e54:	4b81      	ldr	r3, [pc, #516]	; (1205c <LORAWAN_RxDone+0x75c>)
   11e56:	308c      	adds	r0, #140	; 0x8c
   11e58:	390d      	subs	r1, #13
   11e5a:	9201      	str	r2, [sp, #4]
   11e5c:	9300      	str	r3, [sp, #0]
   11e5e:	6803      	ldr	r3, [r0, #0]
   11e60:	b2c9      	uxtb	r1, r1
   11e62:	0028      	movs	r0, r5
   11e64:	4c7e      	ldr	r4, [pc, #504]	; (12060 <LORAWAN_RxDone+0x760>)
   11e66:	47a0      	blx	r4
   11e68:	2800      	cmp	r0, #0
   11e6a:	d004      	beq.n	11e76 <LORAWAN_RxDone+0x576>
   11e6c:	4b7d      	ldr	r3, [pc, #500]	; (12064 <LORAWAN_RxDone+0x764>)
   11e6e:	4798      	blx	r3
   11e70:	201f      	movs	r0, #31
   11e72:	4b76      	ldr	r3, [pc, #472]	; (1204c <LORAWAN_RxDone+0x74c>)
   11e74:	4798      	blx	r3
   11e76:	4c72      	ldr	r4, [pc, #456]	; (12040 <LORAWAN_RxDone+0x740>)
   11e78:	2300      	movs	r3, #0
   11e7a:	0022      	movs	r2, r4
   11e7c:	32ca      	adds	r2, #202	; 0xca
   11e7e:	8013      	strh	r3, [r2, #0]
   11e80:	0022      	movs	r2, r4
   11e82:	32f6      	adds	r2, #246	; 0xf6
   11e84:	7013      	strb	r3, [r2, #0]
   11e86:	0022      	movs	r2, r4
   11e88:	2110      	movs	r1, #16
   11e8a:	3294      	adds	r2, #148	; 0x94
   11e8c:	7813      	ldrb	r3, [r2, #0]
   11e8e:	438b      	bics	r3, r1
   11e90:	7013      	strb	r3, [r2, #0]
   11e92:	0023      	movs	r3, r4
   11e94:	2201      	movs	r2, #1
   11e96:	3384      	adds	r3, #132	; 0x84
   11e98:	7859      	ldrb	r1, [r3, #1]
   11e9a:	430a      	orrs	r2, r1
   11e9c:	705a      	strb	r2, [r3, #1]
   11e9e:	220e      	movs	r2, #14
   11ea0:	781b      	ldrb	r3, [r3, #0]
   11ea2:	4013      	ands	r3, r2
   11ea4:	2b06      	cmp	r3, #6
   11ea6:	d104      	bne.n	11eb2 <LORAWAN_RxDone+0x5b2>
   11ea8:	0023      	movs	r3, r4
   11eaa:	33ee      	adds	r3, #238	; 0xee
   11eac:	7818      	ldrb	r0, [r3, #0]
   11eae:	4b6e      	ldr	r3, [pc, #440]	; (12068 <LORAWAN_RxDone+0x768>)
   11eb0:	4798      	blx	r3
   11eb2:	0025      	movs	r5, r4
   11eb4:	2201      	movs	r2, #1
   11eb6:	3594      	adds	r5, #148	; 0x94
   11eb8:	782b      	ldrb	r3, [r5, #0]
   11eba:	4213      	tst	r3, r2
   11ebc:	d100      	bne.n	11ec0 <LORAWAN_RxDone+0x5c0>
   11ebe:	e107      	b.n	120d0 <LORAWAN_RxDone+0x7d0>
   11ec0:	797b      	ldrb	r3, [r7, #5]
   11ec2:	321f      	adds	r2, #31
   11ec4:	4213      	tst	r3, r2
   11ec6:	d100      	bne.n	11eca <LORAWAN_RxDone+0x5ca>
   11ec8:	e0e8      	b.n	1209c <LORAWAN_RxDone+0x79c>
   11eca:	4b68      	ldr	r3, [pc, #416]	; (1206c <LORAWAN_RxDone+0x76c>)
   11ecc:	4798      	blx	r3
   11ece:	0023      	movs	r3, r4
   11ed0:	2101      	movs	r1, #1
   11ed2:	3384      	adds	r3, #132	; 0x84
   11ed4:	785a      	ldrb	r2, [r3, #1]
   11ed6:	438a      	bics	r2, r1
   11ed8:	705a      	strb	r2, [r3, #1]
   11eda:	9a08      	ldr	r2, [sp, #32]
   11edc:	2a00      	cmp	r2, #0
   11ede:	d100      	bne.n	11ee2 <LORAWAN_RxDone+0x5e2>
   11ee0:	e093      	b.n	1200a <LORAWAN_RxDone+0x70a>
   11ee2:	9a06      	ldr	r2, [sp, #24]
   11ee4:	0031      	movs	r1, r6
   11ee6:	0038      	movs	r0, r7
   11ee8:	4b61      	ldr	r3, [pc, #388]	; (12070 <LORAWAN_RxDone+0x770>)
   11eea:	4798      	blx	r3
   11eec:	4b56      	ldr	r3, [pc, #344]	; (12048 <LORAWAN_RxDone+0x748>)
   11eee:	4d54      	ldr	r5, [pc, #336]	; (12040 <LORAWAN_RxDone+0x740>)
   11ef0:	781b      	ldrb	r3, [r3, #0]
   11ef2:	06db      	lsls	r3, r3, #27
   11ef4:	d400      	bmi.n	11ef8 <LORAWAN_RxDone+0x5f8>
   11ef6:	e160      	b.n	121ba <LORAWAN_RxDone+0x8ba>
   11ef8:	2220      	movs	r2, #32
   11efa:	4b5e      	ldr	r3, [pc, #376]	; (12074 <LORAWAN_RxDone+0x774>)
   11efc:	781b      	ldrb	r3, [r3, #0]
   11efe:	401a      	ands	r2, r3
   11f00:	9206      	str	r2, [sp, #24]
   11f02:	d000      	beq.n	11f06 <LORAWAN_RxDone+0x606>
   11f04:	e159      	b.n	121ba <LORAWAN_RxDone+0x8ba>
   11f06:	320a      	adds	r2, #10
   11f08:	4213      	tst	r3, r2
   11f0a:	d100      	bne.n	11f0e <LORAWAN_RxDone+0x60e>
   11f0c:	e155      	b.n	121ba <LORAWAN_RxDone+0x8ba>
   11f0e:	002b      	movs	r3, r5
   11f10:	33f5      	adds	r3, #245	; 0xf5
   11f12:	781b      	ldrb	r3, [r3, #0]
   11f14:	a90f      	add	r1, sp, #60	; 0x3c
   11f16:	704b      	strb	r3, [r1, #1]
   11f18:	002e      	movs	r6, r5
   11f1a:	2301      	movs	r3, #1
   11f1c:	36e7      	adds	r6, #231	; 0xe7
   11f1e:	700b      	strb	r3, [r1, #0]
   11f20:	7833      	ldrb	r3, [r6, #0]
   11f22:	aa0e      	add	r2, sp, #56	; 0x38
   11f24:	202f      	movs	r0, #47	; 0x2f
   11f26:	4f54      	ldr	r7, [pc, #336]	; (12078 <LORAWAN_RxDone+0x778>)
   11f28:	708b      	strb	r3, [r1, #2]
   11f2a:	47b8      	blx	r7
   11f2c:	9007      	str	r0, [sp, #28]
   11f2e:	2808      	cmp	r0, #8
   11f30:	d000      	beq.n	11f34 <LORAWAN_RxDone+0x634>
   11f32:	e0fb      	b.n	1212c <LORAWAN_RxDone+0x82c>
   11f34:	4b51      	ldr	r3, [pc, #324]	; (1207c <LORAWAN_RxDone+0x77c>)
   11f36:	9806      	ldr	r0, [sp, #24]
   11f38:	4798      	blx	r3
   11f3a:	4b4e      	ldr	r3, [pc, #312]	; (12074 <LORAWAN_RxDone+0x774>)
   11f3c:	9a07      	ldr	r2, [sp, #28]
   11f3e:	781b      	ldrb	r3, [r3, #0]
   11f40:	4393      	bics	r3, r2
   11f42:	4a4c      	ldr	r2, [pc, #304]	; (12074 <LORAWAN_RxDone+0x774>)
   11f44:	7013      	strb	r3, [r2, #0]
   11f46:	2001      	movs	r0, #1
   11f48:	e53e      	b.n	119c8 <LORAWAN_RxDone+0xc8>
   11f4a:	0023      	movs	r3, r4
   11f4c:	220e      	movs	r2, #14
   11f4e:	3384      	adds	r3, #132	; 0x84
   11f50:	781b      	ldrb	r3, [r3, #0]
   11f52:	4013      	ands	r3, r2
   11f54:	2b06      	cmp	r3, #6
   11f56:	d101      	bne.n	11f5c <LORAWAN_RxDone+0x65c>
   11f58:	4b49      	ldr	r3, [pc, #292]	; (12080 <LORAWAN_RxDone+0x780>)
   11f5a:	4798      	blx	r3
   11f5c:	4949      	ldr	r1, [pc, #292]	; (12084 <LORAWAN_RxDone+0x784>)
   11f5e:	784a      	ldrb	r2, [r1, #1]
   11f60:	780b      	ldrb	r3, [r1, #0]
   11f62:	0212      	lsls	r2, r2, #8
   11f64:	431a      	orrs	r2, r3
   11f66:	788b      	ldrb	r3, [r1, #2]
   11f68:	041b      	lsls	r3, r3, #16
   11f6a:	431a      	orrs	r2, r3
   11f6c:	78cb      	ldrb	r3, [r1, #3]
   11f6e:	061b      	lsls	r3, r3, #24
   11f70:	4313      	orrs	r3, r2
   11f72:	d008      	beq.n	11f86 <LORAWAN_RxDone+0x686>
   11f74:	0022      	movs	r2, r4
   11f76:	2120      	movs	r1, #32
   11f78:	3294      	adds	r2, #148	; 0x94
   11f7a:	7813      	ldrb	r3, [r2, #0]
   11f7c:	201e      	movs	r0, #30
   11f7e:	438b      	bics	r3, r1
   11f80:	7013      	strb	r3, [r2, #0]
   11f82:	4b32      	ldr	r3, [pc, #200]	; (1204c <LORAWAN_RxDone+0x74c>)
   11f84:	4798      	blx	r3
   11f86:	2300      	movs	r3, #0
   11f88:	34e0      	adds	r4, #224	; 0xe0
   11f8a:	7023      	strb	r3, [r4, #0]
   11f8c:	4b35      	ldr	r3, [pc, #212]	; (12064 <LORAWAN_RxDone+0x764>)
   11f8e:	4798      	blx	r3
   11f90:	e7d9      	b.n	11f46 <LORAWAN_RxDone+0x646>
   11f92:	003e      	movs	r6, r7
   11f94:	3608      	adds	r6, #8
   11f96:	e735      	b.n	11e04 <LORAWAN_RxDone+0x504>
   11f98:	9b06      	ldr	r3, [sp, #24]
   11f9a:	2b00      	cmp	r3, #0
   11f9c:	d031      	beq.n	12002 <LORAWAN_RxDone+0x702>
   11f9e:	0703      	lsls	r3, r0, #28
   11fa0:	d1d3      	bne.n	11f4a <LORAWAN_RxDone+0x64a>
   11fa2:	390d      	subs	r1, #13
   11fa4:	6813      	ldr	r3, [r2, #0]
   11fa6:	b2cc      	uxtb	r4, r1
   11fa8:	0011      	movs	r1, r2
   11faa:	7912      	ldrb	r2, [r2, #4]
   11fac:	0a18      	lsrs	r0, r3, #8
   11fae:	0612      	lsls	r2, r2, #24
   11fb0:	4302      	orrs	r2, r0
   11fb2:	9204      	str	r2, [sp, #16]
   11fb4:	4a28      	ldr	r2, [pc, #160]	; (12058 <LORAWAN_RxDone+0x758>)
   11fb6:	4663      	mov	r3, ip
   11fb8:	9203      	str	r2, [sp, #12]
   11fba:	466a      	mov	r2, sp
   11fbc:	8313      	strh	r3, [r2, #24]
   11fbe:	8b13      	ldrh	r3, [r2, #24]
   11fc0:	318c      	adds	r1, #140	; 0x8c
   11fc2:	9302      	str	r3, [sp, #8]
   11fc4:	2302      	movs	r3, #2
   11fc6:	9301      	str	r3, [sp, #4]
   11fc8:	4b2f      	ldr	r3, [pc, #188]	; (12088 <LORAWAN_RxDone+0x788>)
   11fca:	2201      	movs	r2, #1
   11fcc:	9300      	str	r3, [sp, #0]
   11fce:	680b      	ldr	r3, [r1, #0]
   11fd0:	0028      	movs	r0, r5
   11fd2:	0021      	movs	r1, r4
   11fd4:	4e22      	ldr	r6, [pc, #136]	; (12060 <LORAWAN_RxDone+0x760>)
   11fd6:	47b0      	blx	r6
   11fd8:	2800      	cmp	r0, #0
   11fda:	d004      	beq.n	11fe6 <LORAWAN_RxDone+0x6e6>
   11fdc:	4b21      	ldr	r3, [pc, #132]	; (12064 <LORAWAN_RxDone+0x764>)
   11fde:	4798      	blx	r3
   11fe0:	201f      	movs	r0, #31
   11fe2:	4b1a      	ldr	r3, [pc, #104]	; (1204c <LORAWAN_RxDone+0x74c>)
   11fe4:	4798      	blx	r3
   11fe6:	4b1b      	ldr	r3, [pc, #108]	; (12054 <LORAWAN_RxDone+0x754>)
   11fe8:	0021      	movs	r1, r4
   11fea:	0028      	movs	r0, r5
   11fec:	4798      	blx	r3
   11fee:	2300      	movs	r3, #0
   11ff0:	9306      	str	r3, [sp, #24]
   11ff2:	3301      	adds	r3, #1
   11ff4:	9307      	str	r3, [sp, #28]
   11ff6:	2600      	movs	r6, #0
   11ff8:	e73d      	b.n	11e76 <LORAWAN_RxDone+0x576>
   11ffa:	2600      	movs	r6, #0
   11ffc:	9608      	str	r6, [sp, #32]
   11ffe:	9606      	str	r6, [sp, #24]
   12000:	e739      	b.n	11e76 <LORAWAN_RxDone+0x576>
   12002:	9b06      	ldr	r3, [sp, #24]
   12004:	9308      	str	r3, [sp, #32]
   12006:	001e      	movs	r6, r3
   12008:	e735      	b.n	11e76 <LORAWAN_RxDone+0x576>
   1200a:	2120      	movs	r1, #32
   1200c:	782a      	ldrb	r2, [r5, #0]
   1200e:	438a      	bics	r2, r1
   12010:	702a      	strb	r2, [r5, #0]
   12012:	0022      	movs	r2, r4
   12014:	32fd      	adds	r2, #253	; 0xfd
   12016:	7812      	ldrb	r2, [r2, #0]
   12018:	2a01      	cmp	r2, #1
   1201a:	d137      	bne.n	1208c <LORAWAN_RxDone+0x78c>
   1201c:	781a      	ldrb	r2, [r3, #0]
   1201e:	3912      	subs	r1, #18
   12020:	438a      	bics	r2, r1
   12022:	701a      	strb	r2, [r3, #0]
   12024:	2388      	movs	r3, #136	; 0x88
   12026:	4a06      	ldr	r2, [pc, #24]	; (12040 <LORAWAN_RxDone+0x740>)
   12028:	009b      	lsls	r3, r3, #2
   1202a:	5cd3      	ldrb	r3, [r2, r3]
   1202c:	2b00      	cmp	r3, #0
   1202e:	d000      	beq.n	12032 <LORAWAN_RxDone+0x732>
   12030:	e75c      	b.n	11eec <LORAWAN_RxDone+0x5ec>
   12032:	2008      	movs	r0, #8
   12034:	4b05      	ldr	r3, [pc, #20]	; (1204c <LORAWAN_RxDone+0x74c>)
   12036:	4798      	blx	r3
   12038:	e758      	b.n	11eec <LORAWAN_RxDone+0x5ec>
   1203a:	46c0      	nop			; (mov r8, r8)
   1203c:	00012f35 	.word	0x00012f35
   12040:	20003170 	.word	0x20003170
   12044:	0000ffd9 	.word	0x0000ffd9
   12048:	200031f4 	.word	0x200031f4
   1204c:	00010e81 	.word	0x00010e81
   12050:	00009385 	.word	0x00009385
   12054:	0001161d 	.word	0x0001161d
   12058:	20002f34 	.word	0x20002f34
   1205c:	200031a5 	.word	0x200031a5
   12060:	00010dc1 	.word	0x00010dc1
   12064:	00011395 	.word	0x00011395
   12068:	0000d41d 	.word	0x0000d41d
   1206c:	0001048d 	.word	0x0001048d
   12070:	00010f31 	.word	0x00010f31
   12074:	20003204 	.word	0x20003204
   12078:	0000cbbd 	.word	0x0000cbbd
   1207c:	00010141 	.word	0x00010141
   12080:	00010071 	.word	0x00010071
   12084:	200034cc 	.word	0x200034cc
   12088:	20003195 	.word	0x20003195
   1208c:	2a04      	cmp	r2, #4
   1208e:	d1c9      	bne.n	12024 <LORAWAN_RxDone+0x724>
   12090:	0023      	movs	r3, r4
   12092:	33f1      	adds	r3, #241	; 0xf1
   12094:	7818      	ldrb	r0, [r3, #0]
   12096:	4bab      	ldr	r3, [pc, #684]	; (12344 <LORAWAN_RxDone+0xa44>)
   12098:	4798      	blx	r3
   1209a:	e7c3      	b.n	12024 <LORAWAN_RxDone+0x724>
   1209c:	9b07      	ldr	r3, [sp, #28]
   1209e:	2b00      	cmp	r3, #0
   120a0:	d013      	beq.n	120ca <LORAWAN_RxDone+0x7ca>
   120a2:	0023      	movs	r3, r4
   120a4:	33fd      	adds	r3, #253	; 0xfd
   120a6:	781e      	ldrb	r6, [r3, #0]
   120a8:	2e01      	cmp	r6, #1
   120aa:	d10e      	bne.n	120ca <LORAWAN_RxDone+0x7ca>
   120ac:	4ba6      	ldr	r3, [pc, #664]	; (12348 <LORAWAN_RxDone+0xa48>)
   120ae:	4798      	blx	r3
   120b0:	0022      	movs	r2, r4
   120b2:	3284      	adds	r2, #132	; 0x84
   120b4:	7853      	ldrb	r3, [r2, #1]
   120b6:	43b3      	bics	r3, r6
   120b8:	7053      	strb	r3, [r2, #1]
   120ba:	2220      	movs	r2, #32
   120bc:	782b      	ldrb	r3, [r5, #0]
   120be:	4393      	bics	r3, r2
   120c0:	702b      	strb	r3, [r5, #0]
   120c2:	2388      	movs	r3, #136	; 0x88
   120c4:	009b      	lsls	r3, r3, #2
   120c6:	5ce3      	ldrb	r3, [r4, r3]
   120c8:	e7b0      	b.n	1202c <LORAWAN_RxDone+0x72c>
   120ca:	4ba0      	ldr	r3, [pc, #640]	; (1234c <LORAWAN_RxDone+0xa4c>)
   120cc:	4798      	blx	r3
   120ce:	e70d      	b.n	11eec <LORAWAN_RxDone+0x5ec>
   120d0:	9a08      	ldr	r2, [sp, #32]
   120d2:	2a00      	cmp	r2, #0
   120d4:	d00b      	beq.n	120ee <LORAWAN_RxDone+0x7ee>
   120d6:	9a06      	ldr	r2, [sp, #24]
   120d8:	0031      	movs	r1, r6
   120da:	0038      	movs	r0, r7
   120dc:	4b9c      	ldr	r3, [pc, #624]	; (12350 <LORAWAN_RxDone+0xa50>)
   120de:	4798      	blx	r3
   120e0:	0022      	movs	r2, r4
   120e2:	2101      	movs	r1, #1
   120e4:	3284      	adds	r2, #132	; 0x84
   120e6:	7853      	ldrb	r3, [r2, #1]
   120e8:	438b      	bics	r3, r1
   120ea:	7053      	strb	r3, [r2, #1]
   120ec:	e6fe      	b.n	11eec <LORAWAN_RxDone+0x5ec>
   120ee:	2220      	movs	r2, #32
   120f0:	4393      	bics	r3, r2
   120f2:	702b      	strb	r3, [r5, #0]
   120f4:	0023      	movs	r3, r4
   120f6:	33fd      	adds	r3, #253	; 0xfd
   120f8:	781b      	ldrb	r3, [r3, #0]
   120fa:	2b01      	cmp	r3, #1
   120fc:	d10e      	bne.n	1211c <LORAWAN_RxDone+0x81c>
   120fe:	0022      	movs	r2, r4
   12100:	210e      	movs	r1, #14
   12102:	3284      	adds	r2, #132	; 0x84
   12104:	7813      	ldrb	r3, [r2, #0]
   12106:	438b      	bics	r3, r1
   12108:	7013      	strb	r3, [r2, #0]
   1210a:	2388      	movs	r3, #136	; 0x88
   1210c:	009b      	lsls	r3, r3, #2
   1210e:	5ce3      	ldrb	r3, [r4, r3]
   12110:	2b00      	cmp	r3, #0
   12112:	d1e5      	bne.n	120e0 <LORAWAN_RxDone+0x7e0>
   12114:	2008      	movs	r0, #8
   12116:	4b8f      	ldr	r3, [pc, #572]	; (12354 <LORAWAN_RxDone+0xa54>)
   12118:	4798      	blx	r3
   1211a:	e7e1      	b.n	120e0 <LORAWAN_RxDone+0x7e0>
   1211c:	2b04      	cmp	r3, #4
   1211e:	d1f4      	bne.n	1210a <LORAWAN_RxDone+0x80a>
   12120:	0023      	movs	r3, r4
   12122:	33f1      	adds	r3, #241	; 0xf1
   12124:	7818      	ldrb	r0, [r3, #0]
   12126:	4b87      	ldr	r3, [pc, #540]	; (12344 <LORAWAN_RxDone+0xa44>)
   12128:	4798      	blx	r3
   1212a:	e7ee      	b.n	1210a <LORAWAN_RxDone+0x80a>
   1212c:	35ff      	adds	r5, #255	; 0xff
   1212e:	7f6b      	ldrb	r3, [r5, #29]
   12130:	079a      	lsls	r2, r3, #30
   12132:	d520      	bpl.n	12176 <LORAWAN_RxDone+0x876>
   12134:	aa10      	add	r2, sp, #64	; 0x40
   12136:	0031      	movs	r1, r6
   12138:	2026      	movs	r0, #38	; 0x26
   1213a:	47b8      	blx	r7
   1213c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1213e:	1c5a      	adds	r2, r3, #1
   12140:	d001      	beq.n	12146 <LORAWAN_RxDone+0x846>
   12142:	3314      	adds	r3, #20
   12144:	9310      	str	r3, [sp, #64]	; 0x40
   12146:	0021      	movs	r1, r4
   12148:	220e      	movs	r2, #14
   1214a:	3184      	adds	r1, #132	; 0x84
   1214c:	780b      	ldrb	r3, [r1, #0]
   1214e:	4393      	bics	r3, r2
   12150:	001a      	movs	r2, r3
   12152:	230c      	movs	r3, #12
   12154:	4313      	orrs	r3, r2
   12156:	700b      	strb	r3, [r1, #0]
   12158:	4b7f      	ldr	r3, [pc, #508]	; (12358 <LORAWAN_RxDone+0xa58>)
   1215a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1215c:	5ce3      	ldrb	r3, [r4, r3]
   1215e:	21fa      	movs	r1, #250	; 0xfa
   12160:	1ad3      	subs	r3, r2, r3
   12162:	2200      	movs	r2, #0
   12164:	0089      	lsls	r1, r1, #2
   12166:	4359      	muls	r1, r3
   12168:	34ef      	adds	r4, #239	; 0xef
   1216a:	4b7c      	ldr	r3, [pc, #496]	; (1235c <LORAWAN_RxDone+0xa5c>)
   1216c:	7820      	ldrb	r0, [r4, #0]
   1216e:	9200      	str	r2, [sp, #0]
   12170:	4c7b      	ldr	r4, [pc, #492]	; (12360 <LORAWAN_RxDone+0xa60>)
   12172:	47a0      	blx	r4
   12174:	e6e7      	b.n	11f46 <LORAWAN_RxDone+0x646>
   12176:	075b      	lsls	r3, r3, #29
   12178:	d400      	bmi.n	1217c <LORAWAN_RxDone+0x87c>
   1217a:	e6e4      	b.n	11f46 <LORAWAN_RxDone+0x646>
   1217c:	aa10      	add	r2, sp, #64	; 0x40
   1217e:	0031      	movs	r1, r6
   12180:	2032      	movs	r0, #50	; 0x32
   12182:	47b8      	blx	r7
   12184:	220e      	movs	r2, #14
   12186:	4b77      	ldr	r3, [pc, #476]	; (12364 <LORAWAN_RxDone+0xa64>)
   12188:	781b      	ldrb	r3, [r3, #0]
   1218a:	4393      	bics	r3, r2
   1218c:	001a      	movs	r2, r3
   1218e:	230c      	movs	r3, #12
   12190:	4313      	orrs	r3, r2
   12192:	4a74      	ldr	r2, [pc, #464]	; (12364 <LORAWAN_RxDone+0xa64>)
   12194:	7013      	strb	r3, [r2, #0]
   12196:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12198:	1c5a      	adds	r2, r3, #1
   1219a:	d001      	beq.n	121a0 <LORAWAN_RxDone+0x8a0>
   1219c:	3301      	adds	r3, #1
   1219e:	9310      	str	r3, [sp, #64]	; 0x40
   121a0:	4b6d      	ldr	r3, [pc, #436]	; (12358 <LORAWAN_RxDone+0xa58>)
   121a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   121a4:	5ce3      	ldrb	r3, [r4, r3]
   121a6:	21fa      	movs	r1, #250	; 0xfa
   121a8:	1ad3      	subs	r3, r2, r3
   121aa:	2200      	movs	r2, #0
   121ac:	0089      	lsls	r1, r1, #2
   121ae:	34f2      	adds	r4, #242	; 0xf2
   121b0:	4359      	muls	r1, r3
   121b2:	7820      	ldrb	r0, [r4, #0]
   121b4:	4b6c      	ldr	r3, [pc, #432]	; (12368 <LORAWAN_RxDone+0xa68>)
   121b6:	9200      	str	r2, [sp, #0]
   121b8:	e7da      	b.n	12170 <LORAWAN_RxDone+0x870>
   121ba:	35fd      	adds	r5, #253	; 0xfd
   121bc:	782b      	ldrb	r3, [r5, #0]
   121be:	2b04      	cmp	r3, #4
   121c0:	d000      	beq.n	121c4 <LORAWAN_RxDone+0x8c4>
   121c2:	e6c0      	b.n	11f46 <LORAWAN_RxDone+0x646>
   121c4:	0038      	movs	r0, r7
   121c6:	4b69      	ldr	r3, [pc, #420]	; (1236c <LORAWAN_RxDone+0xa6c>)
   121c8:	4798      	blx	r3
   121ca:	e6bc      	b.n	11f46 <LORAWAN_RxDone+0x646>
   121cc:	2390      	movs	r3, #144	; 0x90
   121ce:	009b      	lsls	r3, r3, #2
   121d0:	5ce3      	ldrb	r3, [r4, r3]
   121d2:	2b00      	cmp	r3, #0
   121d4:	d009      	beq.n	121ea <LORAWAN_RxDone+0x8ea>
   121d6:	2322      	movs	r3, #34	; 0x22
   121d8:	aa04      	add	r2, sp, #16
   121da:	189b      	adds	r3, r3, r2
   121dc:	781b      	ldrb	r3, [r3, #0]
   121de:	003a      	movs	r2, r7
   121e0:	9906      	ldr	r1, [sp, #24]
   121e2:	0038      	movs	r0, r7
   121e4:	4c62      	ldr	r4, [pc, #392]	; (12370 <LORAWAN_RxDone+0xa70>)
   121e6:	47a0      	blx	r4
   121e8:	e6ad      	b.n	11f46 <LORAWAN_RxDone+0x646>
   121ea:	2220      	movs	r2, #32
   121ec:	3494      	adds	r4, #148	; 0x94
   121ee:	7823      	ldrb	r3, [r4, #0]
   121f0:	201e      	movs	r0, #30
   121f2:	4393      	bics	r3, r2
   121f4:	7023      	strb	r3, [r4, #0]
   121f6:	4b57      	ldr	r3, [pc, #348]	; (12354 <LORAWAN_RxDone+0xa54>)
   121f8:	4798      	blx	r3
   121fa:	e6c7      	b.n	11f8c <LORAWAN_RxDone+0x68c>
   121fc:	220e      	movs	r2, #14
   121fe:	4013      	ands	r3, r2
   12200:	2b0a      	cmp	r3, #10
   12202:	d008      	beq.n	12216 <LORAWAN_RxDone+0x916>
   12204:	2b06      	cmp	r3, #6
   12206:	d000      	beq.n	1220a <LORAWAN_RxDone+0x90a>
   12208:	e5a0      	b.n	11d4c <LORAWAN_RxDone+0x44c>
   1220a:	0023      	movs	r3, r4
   1220c:	33f9      	adds	r3, #249	; 0xf9
   1220e:	781b      	ldrb	r3, [r3, #0]
   12210:	2b00      	cmp	r3, #0
   12212:	d100      	bne.n	12216 <LORAWAN_RxDone+0x916>
   12214:	e59a      	b.n	11d4c <LORAWAN_RxDone+0x44c>
   12216:	2220      	movs	r2, #32
   12218:	3494      	adds	r4, #148	; 0x94
   1221a:	7823      	ldrb	r3, [r4, #0]
   1221c:	2019      	movs	r0, #25
   1221e:	4393      	bics	r3, r2
   12220:	7023      	strb	r3, [r4, #0]
   12222:	e5a0      	b.n	11d66 <LORAWAN_RxDone+0x466>
   12224:	4953      	ldr	r1, [pc, #332]	; (12374 <LORAWAN_RxDone+0xa74>)
   12226:	784a      	ldrb	r2, [r1, #1]
   12228:	780b      	ldrb	r3, [r1, #0]
   1222a:	0212      	lsls	r2, r2, #8
   1222c:	431a      	orrs	r2, r3
   1222e:	788b      	ldrb	r3, [r1, #2]
   12230:	041b      	lsls	r3, r3, #16
   12232:	431a      	orrs	r2, r3
   12234:	78cb      	ldrb	r3, [r1, #3]
   12236:	061b      	lsls	r3, r3, #24
   12238:	4313      	orrs	r3, r2
   1223a:	d100      	bne.n	1223e <LORAWAN_RxDone+0x93e>
   1223c:	e683      	b.n	11f46 <LORAWAN_RxDone+0x646>
   1223e:	4b4e      	ldr	r3, [pc, #312]	; (12378 <LORAWAN_RxDone+0xa78>)
   12240:	4c4e      	ldr	r4, [pc, #312]	; (1237c <LORAWAN_RxDone+0xa7c>)
   12242:	781b      	ldrb	r3, [r3, #0]
   12244:	2b10      	cmp	r3, #16
   12246:	d105      	bne.n	12254 <LORAWAN_RxDone+0x954>
   12248:	0001      	movs	r1, r0
   1224a:	2000      	movs	r0, #0
   1224c:	9a06      	ldr	r2, [sp, #24]
   1224e:	3b0c      	subs	r3, #12
   12250:	47a0      	blx	r4
   12252:	e678      	b.n	11f46 <LORAWAN_RxDone+0x646>
   12254:	2300      	movs	r3, #0
   12256:	0001      	movs	r1, r0
   12258:	9a06      	ldr	r2, [sp, #24]
   1225a:	0018      	movs	r0, r3
   1225c:	e7f8      	b.n	12250 <LORAWAN_RxDone+0x950>
   1225e:	348c      	adds	r4, #140	; 0x8c
   12260:	6823      	ldr	r3, [r4, #0]
   12262:	0031      	movs	r1, r6
   12264:	9308      	str	r3, [sp, #32]
   12266:	4b46      	ldr	r3, [pc, #280]	; (12380 <LORAWAN_RxDone+0xa80>)
   12268:	4798      	blx	r3
   1226a:	2808      	cmp	r0, #8
   1226c:	d001      	beq.n	12272 <LORAWAN_RxDone+0x972>
   1226e:	f7ff fbab 	bl	119c8 <LORAWAN_RxDone+0xc8>
   12272:	9b06      	ldr	r3, [sp, #24]
   12274:	0028      	movs	r0, r5
   12276:	1f1a      	subs	r2, r3, #4
   12278:	9b07      	ldr	r3, [sp, #28]
   1227a:	b2d2      	uxtb	r2, r2
   1227c:	9300      	str	r3, [sp, #0]
   1227e:	6821      	ldr	r1, [r4, #0]
   12280:	2349      	movs	r3, #73	; 0x49
   12282:	4c40      	ldr	r4, [pc, #256]	; (12384 <LORAWAN_RxDone+0xa84>)
   12284:	47a0      	blx	r4
   12286:	4d40      	ldr	r5, [pc, #256]	; (12388 <LORAWAN_RxDone+0xa88>)
   12288:	9607      	str	r6, [sp, #28]
   1228a:	4e40      	ldr	r6, [pc, #256]	; (1238c <LORAWAN_RxDone+0xa8c>)
   1228c:	4c40      	ldr	r4, [pc, #256]	; (12390 <LORAWAN_RxDone+0xa90>)
   1228e:	2210      	movs	r2, #16
   12290:	0021      	movs	r1, r4
   12292:	4b40      	ldr	r3, [pc, #256]	; (12394 <LORAWAN_RxDone+0xa94>)
   12294:	0030      	movs	r0, r6
   12296:	4798      	blx	r3
   12298:	9b06      	ldr	r3, [sp, #24]
   1229a:	0039      	movs	r1, r7
   1229c:	3b04      	subs	r3, #4
   1229e:	001a      	movs	r2, r3
   122a0:	9309      	str	r3, [sp, #36]	; 0x24
   122a2:	483d      	ldr	r0, [pc, #244]	; (12398 <LORAWAN_RxDone+0xa98>)
   122a4:	4b3b      	ldr	r3, [pc, #236]	; (12394 <LORAWAN_RxDone+0xa94>)
   122a6:	4798      	blx	r3
   122a8:	9b06      	ldr	r3, [sp, #24]
   122aa:	9a07      	ldr	r2, [sp, #28]
   122ac:	330c      	adds	r3, #12
   122ae:	b29b      	uxth	r3, r3
   122b0:	9300      	str	r3, [sp, #0]
   122b2:	0033      	movs	r3, r6
   122b4:	2a00      	cmp	r2, #0
   122b6:	d100      	bne.n	122ba <LORAWAN_RxDone+0x9ba>
   122b8:	e557      	b.n	11d6a <LORAWAN_RxDone+0x46a>
   122ba:	0022      	movs	r2, r4
   122bc:	2104      	movs	r1, #4
   122be:	4c37      	ldr	r4, [pc, #220]	; (1239c <LORAWAN_RxDone+0xa9c>)
   122c0:	0028      	movs	r0, r5
   122c2:	47a0      	blx	r4
   122c4:	2204      	movs	r2, #4
   122c6:	4932      	ldr	r1, [pc, #200]	; (12390 <LORAWAN_RxDone+0xa90>)
   122c8:	4c32      	ldr	r4, [pc, #200]	; (12394 <LORAWAN_RxDone+0xa94>)
   122ca:	a80d      	add	r0, sp, #52	; 0x34
   122cc:	47a0      	blx	r4
   122ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122d0:	2204      	movs	r2, #4
   122d2:	18f9      	adds	r1, r7, r3
   122d4:	a810      	add	r0, sp, #64	; 0x40
   122d6:	47a0      	blx	r4
   122d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122da:	9a10      	ldr	r2, [sp, #64]	; 0x40
   122dc:	4293      	cmp	r3, r2
   122de:	d100      	bne.n	122e2 <LORAWAN_RxDone+0x9e2>
   122e0:	e54a      	b.n	11d78 <LORAWAN_RxDone+0x478>
   122e2:	9b07      	ldr	r3, [sp, #28]
   122e4:	2b00      	cmp	r3, #0
   122e6:	d108      	bne.n	122fa <LORAWAN_RxDone+0x9fa>
   122e8:	220e      	movs	r2, #14
   122ea:	4b2d      	ldr	r3, [pc, #180]	; (123a0 <LORAWAN_RxDone+0xaa0>)
   122ec:	3384      	adds	r3, #132	; 0x84
   122ee:	781b      	ldrb	r3, [r3, #0]
   122f0:	4013      	ands	r3, r2
   122f2:	2b06      	cmp	r3, #6
   122f4:	d101      	bne.n	122fa <LORAWAN_RxDone+0x9fa>
   122f6:	4b2b      	ldr	r3, [pc, #172]	; (123a4 <LORAWAN_RxDone+0xaa4>)
   122f8:	4798      	blx	r3
   122fa:	491e      	ldr	r1, [pc, #120]	; (12374 <LORAWAN_RxDone+0xa74>)
   122fc:	784a      	ldrb	r2, [r1, #1]
   122fe:	780b      	ldrb	r3, [r1, #0]
   12300:	0212      	lsls	r2, r2, #8
   12302:	431a      	orrs	r2, r3
   12304:	788b      	ldrb	r3, [r1, #2]
   12306:	041b      	lsls	r3, r3, #16
   12308:	431a      	orrs	r2, r3
   1230a:	78cb      	ldrb	r3, [r1, #3]
   1230c:	061b      	lsls	r3, r3, #24
   1230e:	4313      	orrs	r3, r2
   12310:	d101      	bne.n	12316 <LORAWAN_RxDone+0xa16>
   12312:	f7ff fb47 	bl	119a4 <LORAWAN_RxDone+0xa4>
   12316:	4a22      	ldr	r2, [pc, #136]	; (123a0 <LORAWAN_RxDone+0xaa0>)
   12318:	2020      	movs	r0, #32
   1231a:	0011      	movs	r1, r2
   1231c:	3194      	adds	r1, #148	; 0x94
   1231e:	780b      	ldrb	r3, [r1, #0]
   12320:	4383      	bics	r3, r0
   12322:	700b      	strb	r3, [r1, #0]
   12324:	9b07      	ldr	r3, [sp, #28]
   12326:	2b00      	cmp	r3, #0
   12328:	d100      	bne.n	1232c <LORAWAN_RxDone+0xa2c>
   1232a:	e521      	b.n	11d70 <LORAWAN_RxDone+0x470>
   1232c:	2322      	movs	r3, #34	; 0x22
   1232e:	a904      	add	r1, sp, #16
   12330:	185b      	adds	r3, r3, r1
   12332:	7819      	ldrb	r1, [r3, #0]
   12334:	233c      	movs	r3, #60	; 0x3c
   12336:	434b      	muls	r3, r1
   12338:	18d3      	adds	r3, r2, r3
   1233a:	9a08      	ldr	r2, [sp, #32]
   1233c:	33fc      	adds	r3, #252	; 0xfc
   1233e:	659a      	str	r2, [r3, #88]	; 0x58
   12340:	2018      	movs	r0, #24
   12342:	e510      	b.n	11d66 <LORAWAN_RxDone+0x466>
   12344:	0000d41d 	.word	0x0000d41d
   12348:	0001048d 	.word	0x0001048d
   1234c:	000103f1 	.word	0x000103f1
   12350:	00010f31 	.word	0x00010f31
   12354:	00010e81 	.word	0x00010e81
   12358:	0000022b 	.word	0x0000022b
   1235c:	00010239 	.word	0x00010239
   12360:	0000d105 	.word	0x0000d105
   12364:	200031f4 	.word	0x200031f4
   12368:	00010c99 	.word	0x00010c99
   1236c:	00012db5 	.word	0x00012db5
   12370:	00012fa9 	.word	0x00012fa9
   12374:	200034cc 	.word	0x200034cc
   12378:	2000224f 	.word	0x2000224f
   1237c:	00010ee5 	.word	0x00010ee5
   12380:	000113d1 	.word	0x000113d1
   12384:	0000ffd9 	.word	0x0000ffd9
   12388:	20003195 	.word	0x20003195
   1238c:	20002f34 	.word	0x20002f34
   12390:	20001eb5 	.word	0x20001eb5
   12394:	00016837 	.word	0x00016837
   12398:	20002f44 	.word	0x20002f44
   1239c:	00007259 	.word	0x00007259
   123a0:	20003170 	.word	0x20003170
   123a4:	00010071 	.word	0x00010071

000123a8 <LorawanSetEdClass>:
   123a8:	2388      	movs	r3, #136	; 0x88
   123aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   123ac:	4d1a      	ldr	r5, [pc, #104]	; (12418 <LorawanSetEdClass+0x70>)
   123ae:	009b      	lsls	r3, r3, #2
   123b0:	5ceb      	ldrb	r3, [r5, r3]
   123b2:	0004      	movs	r4, r0
   123b4:	2011      	movs	r0, #17
   123b6:	2b00      	cmp	r3, #0
   123b8:	d013      	beq.n	123e2 <LorawanSetEdClass+0x3a>
   123ba:	002b      	movs	r3, r5
   123bc:	33fe      	adds	r3, #254	; 0xfe
   123be:	781b      	ldrb	r3, [r3, #0]
   123c0:	3807      	subs	r0, #7
   123c2:	4223      	tst	r3, r4
   123c4:	d00d      	beq.n	123e2 <LorawanSetEdClass+0x3a>
   123c6:	002b      	movs	r3, r5
   123c8:	33fd      	adds	r3, #253	; 0xfd
   123ca:	7819      	ldrb	r1, [r3, #0]
   123cc:	428c      	cmp	r4, r1
   123ce:	d007      	beq.n	123e0 <LorawanSetEdClass+0x38>
   123d0:	2901      	cmp	r1, #1
   123d2:	d107      	bne.n	123e4 <LorawanSetEdClass+0x3c>
   123d4:	2c04      	cmp	r4, #4
   123d6:	d104      	bne.n	123e2 <LorawanSetEdClass+0x3a>
   123d8:	701c      	strb	r4, [r3, #0]
   123da:	2000      	movs	r0, #0
   123dc:	4b0f      	ldr	r3, [pc, #60]	; (1241c <LorawanSetEdClass+0x74>)
   123de:	4798      	blx	r3
   123e0:	2008      	movs	r0, #8
   123e2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   123e4:	2904      	cmp	r1, #4
   123e6:	d1fc      	bne.n	123e2 <LorawanSetEdClass+0x3a>
   123e8:	2c01      	cmp	r4, #1
   123ea:	d1fa      	bne.n	123e2 <LorawanSetEdClass+0x3a>
   123ec:	701c      	strb	r4, [r3, #0]
   123ee:	0021      	movs	r1, r4
   123f0:	4b0a      	ldr	r3, [pc, #40]	; (1241c <LorawanSetEdClass+0x74>)
   123f2:	2000      	movs	r0, #0
   123f4:	4798      	blx	r3
   123f6:	002a      	movs	r2, r5
   123f8:	210e      	movs	r1, #14
   123fa:	3284      	adds	r2, #132	; 0x84
   123fc:	7813      	ldrb	r3, [r2, #0]
   123fe:	a801      	add	r0, sp, #4
   12400:	438b      	bics	r3, r1
   12402:	7013      	strb	r3, [r2, #0]
   12404:	4b06      	ldr	r3, [pc, #24]	; (12420 <LorawanSetEdClass+0x78>)
   12406:	7004      	strb	r4, [r0, #0]
   12408:	4798      	blx	r3
   1240a:	2394      	movs	r3, #148	; 0x94
   1240c:	005b      	lsls	r3, r3, #1
   1240e:	5ce8      	ldrb	r0, [r5, r3]
   12410:	4b04      	ldr	r3, [pc, #16]	; (12424 <LorawanSetEdClass+0x7c>)
   12412:	4798      	blx	r3
   12414:	e7e4      	b.n	123e0 <LorawanSetEdClass+0x38>
   12416:	46c0      	nop			; (mov r8, r8)
   12418:	20003170 	.word	0x20003170
   1241c:	00009385 	.word	0x00009385
   12420:	0000f5b1 	.word	0x0000f5b1
   12424:	0000d41d 	.word	0x0000d41d

00012428 <LORAWAN_SetAttr>:
   12428:	2388      	movs	r3, #136	; 0x88
   1242a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1242c:	4cbb      	ldr	r4, [pc, #748]	; (1271c <LORAWAN_SetAttr+0x2f4>)
   1242e:	009b      	lsls	r3, r3, #2
   12430:	5ce3      	ldrb	r3, [r4, r3]
   12432:	000d      	movs	r5, r1
   12434:	2611      	movs	r6, #17
   12436:	2b00      	cmp	r3, #0
   12438:	d100      	bne.n	1243c <LORAWAN_SetAttr+0x14>
   1243a:	e11f      	b.n	1267c <LORAWAN_SetAttr+0x254>
   1243c:	2846      	cmp	r0, #70	; 0x46
   1243e:	d878      	bhi.n	12532 <LORAWAN_SetAttr+0x10a>
   12440:	f001 f8be 	bl	135c0 <__gnu_thumb1_case_uhi>
   12444:	00930047 	.word	0x00930047
   12448:	00fc00b2 	.word	0x00fc00b2
   1244c:	00e600c5 	.word	0x00e600c5
   12450:	0134011e 	.word	0x0134011e
   12454:	01660154 	.word	0x01660154
   12458:	01830178 	.word	0x01830178
   1245c:	01a6018d 	.word	0x01a6018d
   12460:	007701ab 	.word	0x007701ab
   12464:	01b501b0 	.word	0x01b501b0
   12468:	01bf01ba 	.word	0x01bf01ba
   1246c:	01e601c4 	.word	0x01e601c4
   12470:	01cb01eb 	.word	0x01cb01eb
   12474:	01fc01c8 	.word	0x01fc01c8
   12478:	01e101f8 	.word	0x01e101f8
   1247c:	01d701dd 	.word	0x01d701dd
   12480:	00770077 	.word	0x00770077
   12484:	0077019e 	.word	0x0077019e
   12488:	00770077 	.word	0x00770077
   1248c:	00770077 	.word	0x00770077
   12490:	02000077 	.word	0x02000077
   12494:	02030066 	.word	0x02030066
   12498:	020d0211 	.word	0x020d0211
   1249c:	00770208 	.word	0x00770208
   124a0:	02190215 	.word	0x02190215
   124a4:	0221021d 	.word	0x0221021d
   124a8:	02290225 	.word	0x02290225
   124ac:	00770249 	.word	0x00770249
   124b0:	00770077 	.word	0x00770077
   124b4:	00770077 	.word	0x00770077
   124b8:	00770077 	.word	0x00770077
   124bc:	00770077 	.word	0x00770077
   124c0:	02600077 	.word	0x02600077
   124c4:	026e026a 	.word	0x026e026a
   124c8:	00770077 	.word	0x00770077
   124cc:	02730077 	.word	0x02730077
   124d0:	0271      	.short	0x0271
   124d2:	260a      	movs	r6, #10
   124d4:	2900      	cmp	r1, #0
   124d6:	d100      	bne.n	124da <LORAWAN_SetAttr+0xb2>
   124d8:	e0d0      	b.n	1267c <LORAWAN_SetAttr+0x254>
   124da:	0020      	movs	r0, r4
   124dc:	2208      	movs	r2, #8
   124de:	4b90      	ldr	r3, [pc, #576]	; (12720 <LORAWAN_SetAttr+0x2f8>)
   124e0:	305d      	adds	r0, #93	; 0x5d
   124e2:	4798      	blx	r3
   124e4:	2108      	movs	r1, #8
   124e6:	4e8f      	ldr	r6, [pc, #572]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   124e8:	2001      	movs	r0, #1
   124ea:	47b0      	blx	r6
   124ec:	0022      	movs	r2, r4
   124ee:	2501      	movs	r5, #1
   124f0:	32de      	adds	r2, #222	; 0xde
   124f2:	7813      	ldrb	r3, [r2, #0]
   124f4:	2109      	movs	r1, #9
   124f6:	432b      	orrs	r3, r5
   124f8:	3484      	adds	r4, #132	; 0x84
   124fa:	0028      	movs	r0, r5
   124fc:	7013      	strb	r3, [r2, #0]
   124fe:	47b0      	blx	r6
   12500:	7823      	ldrb	r3, [r4, #0]
   12502:	210b      	movs	r1, #11
   12504:	43ab      	bics	r3, r5
   12506:	0028      	movs	r0, r5
   12508:	7023      	strb	r3, [r4, #0]
   1250a:	47b0      	blx	r6
   1250c:	2608      	movs	r6, #8
   1250e:	e0b5      	b.n	1267c <LORAWAN_SetAttr+0x254>
   12510:	0023      	movs	r3, r4
   12512:	33ff      	adds	r3, #255	; 0xff
   12514:	7f5b      	ldrb	r3, [r3, #29]
   12516:	260a      	movs	r6, #10
   12518:	075b      	lsls	r3, r3, #29
   1251a:	d400      	bmi.n	1251e <LORAWAN_SetAttr+0xf6>
   1251c:	e0ae      	b.n	1267c <LORAWAN_SetAttr+0x254>
   1251e:	79ca      	ldrb	r2, [r1, #7]
   12520:	4b81      	ldr	r3, [pc, #516]	; (12728 <LORAWAN_SetAttr+0x300>)
   12522:	2a00      	cmp	r2, #0
   12524:	d10e      	bne.n	12544 <LORAWAN_SetAttr+0x11c>
   12526:	4669      	mov	r1, sp
   12528:	201d      	movs	r0, #29
   1252a:	714a      	strb	r2, [r1, #5]
   1252c:	4798      	blx	r3
   1252e:	2800      	cmp	r0, #0
   12530:	d001      	beq.n	12536 <LORAWAN_SetAttr+0x10e>
   12532:	260a      	movs	r6, #10
   12534:	e0a2      	b.n	1267c <LORAWAN_SetAttr+0x254>
   12536:	2109      	movs	r1, #9
   12538:	34fe      	adds	r4, #254	; 0xfe
   1253a:	8460      	strh	r0, [r4, #34]	; 0x22
   1253c:	8420      	strh	r0, [r4, #32]
   1253e:	4b79      	ldr	r3, [pc, #484]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   12540:	4798      	blx	r3
   12542:	e7e3      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   12544:	2002      	movs	r0, #2
   12546:	5e2a      	ldrsh	r2, [r5, r0]
   12548:	88ae      	ldrh	r6, [r5, #4]
   1254a:	79a8      	ldrb	r0, [r5, #6]
   1254c:	466d      	mov	r5, sp
   1254e:	806a      	strh	r2, [r5, #2]
   12550:	2201      	movs	r2, #1
   12552:	8809      	ldrh	r1, [r1, #0]
   12554:	7128      	strb	r0, [r5, #4]
   12556:	8029      	strh	r1, [r5, #0]
   12558:	201d      	movs	r0, #29
   1255a:	4669      	mov	r1, sp
   1255c:	716a      	strb	r2, [r5, #5]
   1255e:	4798      	blx	r3
   12560:	2800      	cmp	r0, #0
   12562:	d1e6      	bne.n	12532 <LORAWAN_SetAttr+0x10a>
   12564:	34fe      	adds	r4, #254	; 0xfe
   12566:	8466      	strh	r6, [r4, #34]	; 0x22
   12568:	e7d0      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   1256a:	260a      	movs	r6, #10
   1256c:	2900      	cmp	r1, #0
   1256e:	d100      	bne.n	12572 <LORAWAN_SetAttr+0x14a>
   12570:	e084      	b.n	1267c <LORAWAN_SetAttr+0x254>
   12572:	0020      	movs	r0, r4
   12574:	2208      	movs	r2, #8
   12576:	4b6a      	ldr	r3, [pc, #424]	; (12720 <LORAWAN_SetAttr+0x2f8>)
   12578:	3055      	adds	r0, #85	; 0x55
   1257a:	4798      	blx	r3
   1257c:	2107      	movs	r1, #7
   1257e:	4d69      	ldr	r5, [pc, #420]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   12580:	2001      	movs	r0, #1
   12582:	47a8      	blx	r5
   12584:	0022      	movs	r2, r4
   12586:	2302      	movs	r3, #2
   12588:	32de      	adds	r2, #222	; 0xde
   1258a:	7811      	ldrb	r1, [r2, #0]
   1258c:	2001      	movs	r0, #1
   1258e:	430b      	orrs	r3, r1
   12590:	2109      	movs	r1, #9
   12592:	7013      	strb	r3, [r2, #0]
   12594:	47a8      	blx	r5
   12596:	2001      	movs	r0, #1
   12598:	3484      	adds	r4, #132	; 0x84
   1259a:	7823      	ldrb	r3, [r4, #0]
   1259c:	210b      	movs	r1, #11
   1259e:	4383      	bics	r3, r0
   125a0:	7023      	strb	r3, [r4, #0]
   125a2:	47a8      	blx	r5
   125a4:	3e02      	subs	r6, #2
   125a6:	e069      	b.n	1267c <LORAWAN_SetAttr+0x254>
   125a8:	680b      	ldr	r3, [r1, #0]
   125aa:	2001      	movs	r0, #1
   125ac:	0a19      	lsrs	r1, r3, #8
   125ae:	70a1      	strb	r1, [r4, #2]
   125b0:	0c19      	lsrs	r1, r3, #16
   125b2:	7063      	strb	r3, [r4, #1]
   125b4:	70e1      	strb	r1, [r4, #3]
   125b6:	0e1b      	lsrs	r3, r3, #24
   125b8:	2103      	movs	r1, #3
   125ba:	4d5a      	ldr	r5, [pc, #360]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   125bc:	7123      	strb	r3, [r4, #4]
   125be:	47a8      	blx	r5
   125c0:	0022      	movs	r2, r4
   125c2:	2304      	movs	r3, #4
   125c4:	32de      	adds	r2, #222	; 0xde
   125c6:	7811      	ldrb	r1, [r2, #0]
   125c8:	430b      	orrs	r3, r1
   125ca:	7013      	strb	r3, [r2, #0]
   125cc:	e015      	b.n	125fa <LORAWAN_SetAttr+0x1d2>
   125ce:	260a      	movs	r6, #10
   125d0:	2900      	cmp	r1, #0
   125d2:	d053      	beq.n	1267c <LORAWAN_SetAttr+0x254>
   125d4:	3606      	adds	r6, #6
   125d6:	0032      	movs	r2, r6
   125d8:	4f51      	ldr	r7, [pc, #324]	; (12720 <LORAWAN_SetAttr+0x2f8>)
   125da:	1d60      	adds	r0, r4, #5
   125dc:	47b8      	blx	r7
   125de:	0020      	movs	r0, r4
   125e0:	0032      	movs	r2, r6
   125e2:	0029      	movs	r1, r5
   125e4:	3025      	adds	r0, #37	; 0x25
   125e6:	47b8      	blx	r7
   125e8:	2104      	movs	r1, #4
   125ea:	2001      	movs	r0, #1
   125ec:	4d4d      	ldr	r5, [pc, #308]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   125ee:	47a8      	blx	r5
   125f0:	0023      	movs	r3, r4
   125f2:	33de      	adds	r3, #222	; 0xde
   125f4:	781a      	ldrb	r2, [r3, #0]
   125f6:	4316      	orrs	r6, r2
   125f8:	701e      	strb	r6, [r3, #0]
   125fa:	2109      	movs	r1, #9
   125fc:	2001      	movs	r0, #1
   125fe:	47a8      	blx	r5
   12600:	2001      	movs	r0, #1
   12602:	210b      	movs	r1, #11
   12604:	3484      	adds	r4, #132	; 0x84
   12606:	7823      	ldrb	r3, [r4, #0]
   12608:	4383      	bics	r3, r0
   1260a:	7023      	strb	r3, [r4, #0]
   1260c:	47a8      	blx	r5
   1260e:	e77d      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   12610:	260a      	movs	r6, #10
   12612:	2900      	cmp	r1, #0
   12614:	d032      	beq.n	1267c <LORAWAN_SetAttr+0x254>
   12616:	0020      	movs	r0, r4
   12618:	2210      	movs	r2, #16
   1261a:	4e41      	ldr	r6, [pc, #260]	; (12720 <LORAWAN_SetAttr+0x2f8>)
   1261c:	3015      	adds	r0, #21
   1261e:	47b0      	blx	r6
   12620:	0020      	movs	r0, r4
   12622:	2210      	movs	r2, #16
   12624:	0029      	movs	r1, r5
   12626:	3035      	adds	r0, #53	; 0x35
   12628:	47b0      	blx	r6
   1262a:	2105      	movs	r1, #5
   1262c:	2001      	movs	r0, #1
   1262e:	4d3d      	ldr	r5, [pc, #244]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   12630:	47a8      	blx	r5
   12632:	0022      	movs	r2, r4
   12634:	32de      	adds	r2, #222	; 0xde
   12636:	7811      	ldrb	r1, [r2, #0]
   12638:	2320      	movs	r3, #32
   1263a:	e7c5      	b.n	125c8 <LORAWAN_SetAttr+0x1a0>
   1263c:	260a      	movs	r6, #10
   1263e:	2900      	cmp	r1, #0
   12640:	d01c      	beq.n	1267c <LORAWAN_SetAttr+0x254>
   12642:	4b3a      	ldr	r3, [pc, #232]	; (1272c <LORAWAN_SetAttr+0x304>)
   12644:	3e02      	subs	r6, #2
   12646:	5ce3      	ldrb	r3, [r4, r3]
   12648:	2b00      	cmp	r3, #0
   1264a:	d117      	bne.n	1267c <LORAWAN_SetAttr+0x254>
   1264c:	0020      	movs	r0, r4
   1264e:	2210      	movs	r2, #16
   12650:	4b33      	ldr	r3, [pc, #204]	; (12720 <LORAWAN_SetAttr+0x2f8>)
   12652:	3045      	adds	r0, #69	; 0x45
   12654:	4798      	blx	r3
   12656:	2106      	movs	r1, #6
   12658:	4d32      	ldr	r5, [pc, #200]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   1265a:	2001      	movs	r0, #1
   1265c:	47a8      	blx	r5
   1265e:	0022      	movs	r2, r4
   12660:	32de      	adds	r2, #222	; 0xde
   12662:	7813      	ldrb	r3, [r2, #0]
   12664:	2109      	movs	r1, #9
   12666:	4333      	orrs	r3, r6
   12668:	2001      	movs	r0, #1
   1266a:	7013      	strb	r3, [r2, #0]
   1266c:	47a8      	blx	r5
   1266e:	2001      	movs	r0, #1
   12670:	3484      	adds	r4, #132	; 0x84
   12672:	7823      	ldrb	r3, [r4, #0]
   12674:	210b      	movs	r1, #11
   12676:	4383      	bics	r3, r0
   12678:	7023      	strb	r3, [r4, #0]
   1267a:	47a8      	blx	r5
   1267c:	0030      	movs	r0, r6
   1267e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12680:	780b      	ldrb	r3, [r1, #0]
   12682:	2001      	movs	r0, #1
   12684:	0021      	movs	r1, r4
   12686:	2520      	movs	r5, #32
   12688:	3184      	adds	r1, #132	; 0x84
   1268a:	4003      	ands	r3, r0
   1268c:	015a      	lsls	r2, r3, #5
   1268e:	780b      	ldrb	r3, [r1, #0]
   12690:	43ab      	bics	r3, r5
   12692:	4313      	orrs	r3, r2
   12694:	700b      	strb	r3, [r1, #0]
   12696:	0023      	movs	r3, r4
   12698:	2200      	movs	r2, #0
   1269a:	33ca      	adds	r3, #202	; 0xca
   1269c:	3494      	adds	r4, #148	; 0x94
   1269e:	801a      	strh	r2, [r3, #0]
   126a0:	7823      	ldrb	r3, [r4, #0]
   126a2:	3210      	adds	r2, #16
   126a4:	4393      	bics	r3, r2
   126a6:	7023      	strb	r3, [r4, #0]
   126a8:	210b      	movs	r1, #11
   126aa:	e748      	b.n	1253e <LORAWAN_SetAttr+0x116>
   126ac:	466a      	mov	r2, sp
   126ae:	780b      	ldrb	r3, [r1, #0]
   126b0:	7013      	strb	r3, [r2, #0]
   126b2:	0022      	movs	r2, r4
   126b4:	32f3      	adds	r2, #243	; 0xf3
   126b6:	7812      	ldrb	r2, [r2, #0]
   126b8:	429a      	cmp	r2, r3
   126ba:	d900      	bls.n	126be <LORAWAN_SetAttr+0x296>
   126bc:	e739      	b.n	12532 <LORAWAN_SetAttr+0x10a>
   126be:	0022      	movs	r2, r4
   126c0:	32f4      	adds	r2, #244	; 0xf4
   126c2:	7812      	ldrb	r2, [r2, #0]
   126c4:	429a      	cmp	r2, r3
   126c6:	d200      	bcs.n	126ca <LORAWAN_SetAttr+0x2a2>
   126c8:	e733      	b.n	12532 <LORAWAN_SetAttr+0x10a>
   126ca:	4669      	mov	r1, sp
   126cc:	2010      	movs	r0, #16
   126ce:	4b18      	ldr	r3, [pc, #96]	; (12730 <LORAWAN_SetAttr+0x308>)
   126d0:	4798      	blx	r3
   126d2:	0006      	movs	r6, r0
   126d4:	2808      	cmp	r0, #8
   126d6:	d000      	beq.n	126da <LORAWAN_SetAttr+0x2b2>
   126d8:	e72b      	b.n	12532 <LORAWAN_SetAttr+0x10a>
   126da:	466b      	mov	r3, sp
   126dc:	210c      	movs	r1, #12
   126de:	2001      	movs	r0, #1
   126e0:	781b      	ldrb	r3, [r3, #0]
   126e2:	34e7      	adds	r4, #231	; 0xe7
   126e4:	7023      	strb	r3, [r4, #0]
   126e6:	4b0f      	ldr	r3, [pc, #60]	; (12724 <LORAWAN_SetAttr+0x2fc>)
   126e8:	4798      	blx	r3
   126ea:	e7c7      	b.n	1267c <LORAWAN_SetAttr+0x254>
   126ec:	466a      	mov	r2, sp
   126ee:	780b      	ldrb	r3, [r1, #0]
   126f0:	201d      	movs	r0, #29
   126f2:	7013      	strb	r3, [r2, #0]
   126f4:	4669      	mov	r1, sp
   126f6:	4b0e      	ldr	r3, [pc, #56]	; (12730 <LORAWAN_SetAttr+0x308>)
   126f8:	4798      	blx	r3
   126fa:	0006      	movs	r6, r0
   126fc:	2808      	cmp	r0, #8
   126fe:	d000      	beq.n	12702 <LORAWAN_SetAttr+0x2da>
   12700:	e717      	b.n	12532 <LORAWAN_SetAttr+0x10a>
   12702:	466b      	mov	r3, sp
   12704:	781b      	ldrb	r3, [r3, #0]
   12706:	34e9      	adds	r4, #233	; 0xe9
   12708:	7023      	strb	r3, [r4, #0]
   1270a:	210a      	movs	r1, #10
   1270c:	2000      	movs	r0, #0
   1270e:	e7ea      	b.n	126e6 <LORAWAN_SetAttr+0x2be>
   12710:	780b      	ldrb	r3, [r1, #0]
   12712:	2103      	movs	r1, #3
   12714:	34ff      	adds	r4, #255	; 0xff
   12716:	7063      	strb	r3, [r4, #1]
   12718:	2000      	movs	r0, #0
   1271a:	e710      	b.n	1253e <LORAWAN_SetAttr+0x116>
   1271c:	20003170 	.word	0x20003170
   12720:	00016837 	.word	0x00016837
   12724:	00009385 	.word	0x00009385
   12728:	0000e3a5 	.word	0x0000e3a5
   1272c:	0000022d 	.word	0x0000022d
   12730:	0000cbd9 	.word	0x0000cbd9
   12734:	680b      	ldr	r3, [r1, #0]
   12736:	260a      	movs	r6, #10
   12738:	1c5a      	adds	r2, r3, #1
   1273a:	d09f      	beq.n	1267c <LORAWAN_SetAttr+0x254>
   1273c:	2115      	movs	r1, #21
   1273e:	2000      	movs	r0, #0
   12740:	3488      	adds	r4, #136	; 0x88
   12742:	6023      	str	r3, [r4, #0]
   12744:	4b7f      	ldr	r3, [pc, #508]	; (12944 <LORAWAN_SetAttr+0x51c>)
   12746:	4798      	blx	r3
   12748:	e72c      	b.n	125a4 <LORAWAN_SetAttr+0x17c>
   1274a:	680b      	ldr	r3, [r1, #0]
   1274c:	260a      	movs	r6, #10
   1274e:	1c5a      	adds	r2, r3, #1
   12750:	d100      	bne.n	12754 <LORAWAN_SetAttr+0x32c>
   12752:	e793      	b.n	1267c <LORAWAN_SetAttr+0x254>
   12754:	0031      	movs	r1, r6
   12756:	348c      	adds	r4, #140	; 0x8c
   12758:	6023      	str	r3, [r4, #0]
   1275a:	2001      	movs	r0, #1
   1275c:	e7f2      	b.n	12744 <LORAWAN_SetAttr+0x31c>
   1275e:	0026      	movs	r6, r4
   12760:	880b      	ldrh	r3, [r1, #0]
   12762:	36d0      	adds	r6, #208	; 0xd0
   12764:	210c      	movs	r1, #12
   12766:	2000      	movs	r0, #0
   12768:	4d76      	ldr	r5, [pc, #472]	; (12944 <LORAWAN_SetAttr+0x51c>)
   1276a:	8033      	strh	r3, [r6, #0]
   1276c:	47a8      	blx	r5
   1276e:	22fa      	movs	r2, #250	; 0xfa
   12770:	8833      	ldrh	r3, [r6, #0]
   12772:	0092      	lsls	r2, r2, #2
   12774:	189b      	adds	r3, r3, r2
   12776:	34d2      	adds	r4, #210	; 0xd2
   12778:	8023      	strh	r3, [r4, #0]
   1277a:	210d      	movs	r1, #13
   1277c:	2000      	movs	r0, #0
   1277e:	e745      	b.n	1260c <LORAWAN_SetAttr+0x1e4>
   12780:	780b      	ldrb	r3, [r1, #0]
   12782:	260a      	movs	r6, #10
   12784:	2b0f      	cmp	r3, #15
   12786:	d900      	bls.n	1278a <LORAWAN_SetAttr+0x362>
   12788:	e778      	b.n	1267c <LORAWAN_SetAttr+0x254>
   1278a:	3498      	adds	r4, #152	; 0x98
   1278c:	7023      	strb	r3, [r4, #0]
   1278e:	e709      	b.n	125a4 <LORAWAN_SetAttr+0x17c>
   12790:	880b      	ldrh	r3, [r1, #0]
   12792:	34d4      	adds	r4, #212	; 0xd4
   12794:	8023      	strh	r3, [r4, #0]
   12796:	210e      	movs	r1, #14
   12798:	e7be      	b.n	12718 <LORAWAN_SetAttr+0x2f0>
   1279a:	880b      	ldrh	r3, [r1, #0]
   1279c:	34d6      	adds	r4, #214	; 0xd6
   1279e:	8023      	strh	r3, [r4, #0]
   127a0:	210f      	movs	r1, #15
   127a2:	e7b9      	b.n	12718 <LORAWAN_SetAttr+0x2f0>
   127a4:	780b      	ldrb	r3, [r1, #0]
   127a6:	34dc      	adds	r4, #220	; 0xdc
   127a8:	7023      	strb	r3, [r4, #0]
   127aa:	2111      	movs	r1, #17
   127ac:	e7b4      	b.n	12718 <LORAWAN_SetAttr+0x2f0>
   127ae:	780b      	ldrb	r3, [r1, #0]
   127b0:	34dd      	adds	r4, #221	; 0xdd
   127b2:	7023      	strb	r3, [r4, #0]
   127b4:	2112      	movs	r1, #18
   127b6:	e7af      	b.n	12718 <LORAWAN_SetAttr+0x2f0>
   127b8:	880b      	ldrh	r3, [r1, #0]
   127ba:	34da      	adds	r4, #218	; 0xda
   127bc:	8023      	strh	r3, [r4, #0]
   127be:	2110      	movs	r1, #16
   127c0:	e7aa      	b.n	12718 <LORAWAN_SetAttr+0x2f0>
   127c2:	780b      	ldrb	r3, [r1, #0]
   127c4:	34e2      	adds	r4, #226	; 0xe2
   127c6:	7023      	strb	r3, [r4, #0]
   127c8:	2114      	movs	r1, #20
   127ca:	e7a5      	b.n	12718 <LORAWAN_SetAttr+0x2f0>
   127cc:	780b      	ldrb	r3, [r1, #0]
   127ce:	34e1      	adds	r4, #225	; 0xe1
   127d0:	7023      	strb	r3, [r4, #0]
   127d2:	e69b      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   127d4:	780b      	ldrb	r3, [r1, #0]
   127d6:	34e8      	adds	r4, #232	; 0xe8
   127d8:	e7fa      	b.n	127d0 <LORAWAN_SetAttr+0x3a8>
   127da:	2001      	movs	r0, #1
   127dc:	780b      	ldrb	r3, [r1, #0]
   127de:	2110      	movs	r1, #16
   127e0:	3484      	adds	r4, #132	; 0x84
   127e2:	4003      	ands	r3, r0
   127e4:	011a      	lsls	r2, r3, #4
   127e6:	7823      	ldrb	r3, [r4, #0]
   127e8:	438b      	bics	r3, r1
   127ea:	4313      	orrs	r3, r2
   127ec:	7023      	strb	r3, [r4, #0]
   127ee:	3905      	subs	r1, #5
   127f0:	e6a5      	b.n	1253e <LORAWAN_SetAttr+0x116>
   127f2:	7909      	ldrb	r1, [r1, #4]
   127f4:	7828      	ldrb	r0, [r5, #0]
   127f6:	4b54      	ldr	r3, [pc, #336]	; (12948 <LORAWAN_SetAttr+0x520>)
   127f8:	4798      	blx	r3
   127fa:	0006      	movs	r6, r0
   127fc:	e73e      	b.n	1267c <LORAWAN_SetAttr+0x254>
   127fe:	7909      	ldrb	r1, [r1, #4]
   12800:	7828      	ldrb	r0, [r5, #0]
   12802:	4b52      	ldr	r3, [pc, #328]	; (1294c <LORAWAN_SetAttr+0x524>)
   12804:	e7f8      	b.n	127f8 <LORAWAN_SetAttr+0x3d0>
   12806:	7808      	ldrb	r0, [r1, #0]
   12808:	4b51      	ldr	r3, [pc, #324]	; (12950 <LORAWAN_SetAttr+0x528>)
   1280a:	6849      	ldr	r1, [r1, #4]
   1280c:	4798      	blx	r3
   1280e:	e7f4      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   12810:	7909      	ldrb	r1, [r1, #4]
   12812:	6828      	ldr	r0, [r5, #0]
   12814:	4b4f      	ldr	r3, [pc, #316]	; (12954 <LORAWAN_SetAttr+0x52c>)
   12816:	4798      	blx	r3
   12818:	e7ef      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   1281a:	786b      	ldrb	r3, [r5, #1]
   1281c:	7828      	ldrb	r0, [r5, #0]
   1281e:	021b      	lsls	r3, r3, #8
   12820:	4303      	orrs	r3, r0
   12822:	78a8      	ldrb	r0, [r5, #2]
   12824:	7909      	ldrb	r1, [r1, #4]
   12826:	0400      	lsls	r0, r0, #16
   12828:	4303      	orrs	r3, r0
   1282a:	78e8      	ldrb	r0, [r5, #3]
   1282c:	0600      	lsls	r0, r0, #24
   1282e:	4318      	orrs	r0, r3
   12830:	4b49      	ldr	r3, [pc, #292]	; (12958 <LORAWAN_SetAttr+0x530>)
   12832:	e7f0      	b.n	12816 <LORAWAN_SetAttr+0x3ee>
   12834:	7808      	ldrb	r0, [r1, #0]
   12836:	4b49      	ldr	r3, [pc, #292]	; (1295c <LORAWAN_SetAttr+0x534>)
   12838:	4798      	blx	r3
   1283a:	e7de      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   1283c:	8808      	ldrh	r0, [r1, #0]
   1283e:	4b48      	ldr	r3, [pc, #288]	; (12960 <LORAWAN_SetAttr+0x538>)
   12840:	4798      	blx	r3
   12842:	e663      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   12844:	4b47      	ldr	r3, [pc, #284]	; (12964 <LORAWAN_SetAttr+0x53c>)
   12846:	6019      	str	r1, [r3, #0]
   12848:	e673      	b.n	12532 <LORAWAN_SetAttr+0x10a>
   1284a:	7809      	ldrb	r1, [r1, #0]
   1284c:	7868      	ldrb	r0, [r5, #1]
   1284e:	4b46      	ldr	r3, [pc, #280]	; (12968 <LORAWAN_SetAttr+0x540>)
   12850:	4798      	blx	r3
   12852:	e7d2      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   12854:	7809      	ldrb	r1, [r1, #0]
   12856:	4b45      	ldr	r3, [pc, #276]	; (1296c <LORAWAN_SetAttr+0x544>)
   12858:	1c68      	adds	r0, r5, #1
   1285a:	4798      	blx	r3
   1285c:	e7cd      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   1285e:	7809      	ldrb	r1, [r1, #0]
   12860:	1c68      	adds	r0, r5, #1
   12862:	4b43      	ldr	r3, [pc, #268]	; (12970 <LORAWAN_SetAttr+0x548>)
   12864:	e7f9      	b.n	1285a <LORAWAN_SetAttr+0x432>
   12866:	7809      	ldrb	r1, [r1, #0]
   12868:	6868      	ldr	r0, [r5, #4]
   1286a:	4b42      	ldr	r3, [pc, #264]	; (12974 <LORAWAN_SetAttr+0x54c>)
   1286c:	e7f5      	b.n	1285a <LORAWAN_SetAttr+0x432>
   1286e:	7809      	ldrb	r1, [r1, #0]
   12870:	6868      	ldr	r0, [r5, #4]
   12872:	4b41      	ldr	r3, [pc, #260]	; (12978 <LORAWAN_SetAttr+0x550>)
   12874:	e7f1      	b.n	1285a <LORAWAN_SetAttr+0x432>
   12876:	7809      	ldrb	r1, [r1, #0]
   12878:	6868      	ldr	r0, [r5, #4]
   1287a:	4b40      	ldr	r3, [pc, #256]	; (1297c <LORAWAN_SetAttr+0x554>)
   1287c:	e7ed      	b.n	1285a <LORAWAN_SetAttr+0x432>
   1287e:	7809      	ldrb	r1, [r1, #0]
   12880:	6868      	ldr	r0, [r5, #4]
   12882:	4b3f      	ldr	r3, [pc, #252]	; (12980 <LORAWAN_SetAttr+0x558>)
   12884:	e7e9      	b.n	1285a <LORAWAN_SetAttr+0x432>
   12886:	7809      	ldrb	r1, [r1, #0]
   12888:	7868      	ldrb	r0, [r5, #1]
   1288a:	4b3e      	ldr	r3, [pc, #248]	; (12984 <LORAWAN_SetAttr+0x55c>)
   1288c:	e7e0      	b.n	12850 <LORAWAN_SetAttr+0x428>
   1288e:	7809      	ldrb	r1, [r1, #0]
   12890:	7868      	ldrb	r0, [r5, #1]
   12892:	4b3d      	ldr	r3, [pc, #244]	; (12988 <LORAWAN_SetAttr+0x560>)
   12894:	e7dc      	b.n	12850 <LORAWAN_SetAttr+0x428>
   12896:	2300      	movs	r3, #0
   12898:	466a      	mov	r2, sp
   1289a:	7809      	ldrb	r1, [r1, #0]
   1289c:	7013      	strb	r3, [r2, #0]
   1289e:	4299      	cmp	r1, r3
   128a0:	d014      	beq.n	128cc <LORAWAN_SetAttr+0x4a4>
   128a2:	0022      	movs	r2, r4
   128a4:	2102      	movs	r1, #2
   128a6:	32ff      	adds	r2, #255	; 0xff
   128a8:	7f53      	ldrb	r3, [r2, #29]
   128aa:	420b      	tst	r3, r1
   128ac:	d001      	beq.n	128b2 <LORAWAN_SetAttr+0x48a>
   128ae:	438b      	bics	r3, r1
   128b0:	7753      	strb	r3, [r2, #29]
   128b2:	2220      	movs	r2, #32
   128b4:	34ff      	adds	r4, #255	; 0xff
   128b6:	7f63      	ldrb	r3, [r4, #29]
   128b8:	4213      	tst	r3, r2
   128ba:	d100      	bne.n	128be <LORAWAN_SetAttr+0x496>
   128bc:	e626      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   128be:	4393      	bics	r3, r2
   128c0:	7763      	strb	r3, [r4, #29]
   128c2:	4669      	mov	r1, sp
   128c4:	4b31      	ldr	r3, [pc, #196]	; (1298c <LORAWAN_SetAttr+0x564>)
   128c6:	2038      	movs	r0, #56	; 0x38
   128c8:	4798      	blx	r3
   128ca:	e61f      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   128cc:	4a30      	ldr	r2, [pc, #192]	; (12990 <LORAWAN_SetAttr+0x568>)
   128ce:	4b31      	ldr	r3, [pc, #196]	; (12994 <LORAWAN_SetAttr+0x56c>)
   128d0:	200e      	movs	r0, #14
   128d2:	4798      	blx	r3
   128d4:	e61a      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   128d6:	466b      	mov	r3, sp
   128d8:	780a      	ldrb	r2, [r1, #0]
   128da:	34ff      	adds	r4, #255	; 0xff
   128dc:	701a      	strb	r2, [r3, #0]
   128de:	2320      	movs	r3, #32
   128e0:	2a00      	cmp	r2, #0
   128e2:	d007      	beq.n	128f4 <LORAWAN_SetAttr+0x4cc>
   128e4:	7f62      	ldrb	r2, [r4, #29]
   128e6:	4313      	orrs	r3, r2
   128e8:	7763      	strb	r3, [r4, #29]
   128ea:	4669      	mov	r1, sp
   128ec:	4b27      	ldr	r3, [pc, #156]	; (1298c <LORAWAN_SetAttr+0x564>)
   128ee:	2038      	movs	r0, #56	; 0x38
   128f0:	4798      	blx	r3
   128f2:	e782      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   128f4:	7f62      	ldrb	r2, [r4, #29]
   128f6:	260a      	movs	r6, #10
   128f8:	421a      	tst	r2, r3
   128fa:	d100      	bne.n	128fe <LORAWAN_SetAttr+0x4d6>
   128fc:	e6be      	b.n	1267c <LORAWAN_SetAttr+0x254>
   128fe:	439a      	bics	r2, r3
   12900:	7762      	strb	r2, [r4, #29]
   12902:	e7f2      	b.n	128ea <LORAWAN_SetAttr+0x4c2>
   12904:	780b      	ldrb	r3, [r1, #0]
   12906:	260a      	movs	r6, #10
   12908:	2b08      	cmp	r3, #8
   1290a:	d900      	bls.n	1290e <LORAWAN_SetAttr+0x4e6>
   1290c:	e6b6      	b.n	1267c <LORAWAN_SetAttr+0x254>
   1290e:	228b      	movs	r2, #139	; 0x8b
   12910:	0092      	lsls	r2, r2, #2
   12912:	54a3      	strb	r3, [r4, r2]
   12914:	210d      	movs	r1, #13
   12916:	e720      	b.n	1275a <LORAWAN_SetAttr+0x332>
   12918:	780a      	ldrb	r2, [r1, #0]
   1291a:	4b1f      	ldr	r3, [pc, #124]	; (12998 <LORAWAN_SetAttr+0x570>)
   1291c:	54e2      	strb	r2, [r4, r3]
   1291e:	e5f5      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   12920:	4b1e      	ldr	r3, [pc, #120]	; (1299c <LORAWAN_SetAttr+0x574>)
   12922:	4798      	blx	r3
   12924:	e769      	b.n	127fa <LORAWAN_SetAttr+0x3d2>
   12926:	4b1e      	ldr	r3, [pc, #120]	; (129a0 <LORAWAN_SetAttr+0x578>)
   12928:	e7fb      	b.n	12922 <LORAWAN_SetAttr+0x4fa>
   1292a:	780a      	ldrb	r2, [r1, #0]
   1292c:	2302      	movs	r3, #2
   1292e:	34ff      	adds	r4, #255	; 0xff
   12930:	2a00      	cmp	r2, #0
   12932:	d003      	beq.n	1293c <LORAWAN_SetAttr+0x514>
   12934:	7f62      	ldrb	r2, [r4, #29]
   12936:	4313      	orrs	r3, r2
   12938:	7763      	strb	r3, [r4, #29]
   1293a:	e5e7      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   1293c:	7f62      	ldrb	r2, [r4, #29]
   1293e:	439a      	bics	r2, r3
   12940:	7762      	strb	r2, [r4, #29]
   12942:	e5e3      	b.n	1250c <LORAWAN_SetAttr+0xe4>
   12944:	00009385 	.word	0x00009385
   12948:	000118b1 	.word	0x000118b1
   1294c:	00011841 	.word	0x00011841
   12950:	00011069 	.word	0x00011069
   12954:	00010fe1 	.word	0x00010fe1
   12958:	0001101d 	.word	0x0001101d
   1295c:	000123a9 	.word	0x000123a9
   12960:	0001027d 	.word	0x0001027d
   12964:	200034c8 	.word	0x200034c8
   12968:	00012ebd 	.word	0x00012ebd
   1296c:	0001311d 	.word	0x0001311d
   12970:	00013169 	.word	0x00013169
   12974:	000130d5 	.word	0x000130d5
   12978:	000131b5 	.word	0x000131b5
   1297c:	000131d5 	.word	0x000131d5
   12980:	000131f1 	.word	0x000131f1
   12984:	00013235 	.word	0x00013235
   12988:	00013271 	.word	0x00013271
   1298c:	0000cbf5 	.word	0x0000cbf5
   12990:	2000328c 	.word	0x2000328c
   12994:	0000cbbd 	.word	0x0000cbbd
   12998:	0000022d 	.word	0x0000022d
   1299c:	00010319 	.word	0x00010319
   129a0:	00010341 	.word	0x00010341

000129a4 <AssemblePacket>:
   129a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   129a6:	2710      	movs	r7, #16
   129a8:	b08f      	sub	sp, #60	; 0x3c
   129aa:	9308      	str	r3, [sp, #32]
   129ac:	ab0d      	add	r3, sp, #52	; 0x34
   129ae:	801f      	strh	r7, [r3, #0]
   129b0:	231e      	movs	r3, #30
   129b2:	920a      	str	r2, [sp, #40]	; 0x28
   129b4:	aa06      	add	r2, sp, #24
   129b6:	189b      	adds	r3, r3, r2
   129b8:	2500      	movs	r5, #0
   129ba:	2210      	movs	r2, #16
   129bc:	ac0c      	add	r4, sp, #48	; 0x30
   129be:	9006      	str	r0, [sp, #24]
   129c0:	910b      	str	r1, [sp, #44]	; 0x2c
   129c2:	32ff      	adds	r2, #255	; 0xff
   129c4:	0029      	movs	r1, r5
   129c6:	4ed1      	ldr	r6, [pc, #836]	; (12d0c <AssemblePacket+0x368>)
   129c8:	7025      	strb	r5, [r4, #0]
   129ca:	48d1      	ldr	r0, [pc, #836]	; (12d10 <AssemblePacket+0x36c>)
   129cc:	801d      	strh	r5, [r3, #0]
   129ce:	47b0      	blx	r6
   129d0:	003a      	movs	r2, r7
   129d2:	0029      	movs	r1, r5
   129d4:	48cf      	ldr	r0, [pc, #828]	; (12d14 <AssemblePacket+0x370>)
   129d6:	47b0      	blx	r6
   129d8:	221f      	movs	r2, #31
   129da:	7823      	ldrb	r3, [r4, #0]
   129dc:	9906      	ldr	r1, [sp, #24]
   129de:	4013      	ands	r3, r2
   129e0:	42a9      	cmp	r1, r5
   129e2:	d100      	bne.n	129e6 <AssemblePacket+0x42>
   129e4:	e0dc      	b.n	12ba0 <AssemblePacket+0x1fc>
   129e6:	3a9f      	subs	r2, #159	; 0x9f
   129e8:	4313      	orrs	r3, r2
   129ea:	7023      	strb	r3, [r4, #0]
   129ec:	4bca      	ldr	r3, [pc, #808]	; (12d18 <AssemblePacket+0x374>)
   129ee:	3281      	adds	r2, #129	; 0x81
   129f0:	3394      	adds	r3, #148	; 0x94
   129f2:	7819      	ldrb	r1, [r3, #0]
   129f4:	430a      	orrs	r2, r1
   129f6:	701a      	strb	r2, [r3, #0]
   129f8:	22e0      	movs	r2, #224	; 0xe0
   129fa:	7823      	ldrb	r3, [r4, #0]
   129fc:	48c4      	ldr	r0, [pc, #784]	; (12d10 <AssemblePacket+0x36c>)
   129fe:	4013      	ands	r3, r2
   12a00:	7023      	strb	r3, [r4, #0]
   12a02:	4cc5      	ldr	r4, [pc, #788]	; (12d18 <AssemblePacket+0x374>)
   12a04:	7403      	strb	r3, [r0, #16]
   12a06:	3adc      	subs	r2, #220	; 0xdc
   12a08:	4bc4      	ldr	r3, [pc, #784]	; (12d1c <AssemblePacket+0x378>)
   12a0a:	3011      	adds	r0, #17
   12a0c:	1c61      	adds	r1, r4, #1
   12a0e:	4798      	blx	r3
   12a10:	2215      	movs	r2, #21
   12a12:	ab0d      	add	r3, sp, #52	; 0x34
   12a14:	0025      	movs	r5, r4
   12a16:	801a      	strh	r2, [r3, #0]
   12a18:	2600      	movs	r6, #0
   12a1a:	466b      	mov	r3, sp
   12a1c:	3584      	adds	r5, #132	; 0x84
   12a1e:	761e      	strb	r6, [r3, #24]
   12a20:	782b      	ldrb	r3, [r5, #0]
   12a22:	069b      	lsls	r3, r3, #26
   12a24:	d400      	bmi.n	12a28 <AssemblePacket+0x84>
   12a26:	e130      	b.n	12c8a <AssemblePacket+0x2e6>
   12a28:	0027      	movs	r7, r4
   12a2a:	4bbd      	ldr	r3, [pc, #756]	; (12d20 <AssemblePacket+0x37c>)
   12a2c:	37f3      	adds	r7, #243	; 0xf3
   12a2e:	781a      	ldrb	r2, [r3, #0]
   12a30:	783b      	ldrb	r3, [r7, #0]
   12a32:	429a      	cmp	r2, r3
   12a34:	d31e      	bcc.n	12a74 <AssemblePacket+0xd0>
   12a36:	2180      	movs	r1, #128	; 0x80
   12a38:	466b      	mov	r3, sp
   12a3a:	0022      	movs	r2, r4
   12a3c:	4249      	negs	r1, r1
   12a3e:	32ca      	adds	r2, #202	; 0xca
   12a40:	7619      	strb	r1, [r3, #24]
   12a42:	8813      	ldrh	r3, [r2, #0]
   12a44:	3301      	adds	r3, #1
   12a46:	b29b      	uxth	r3, r3
   12a48:	8013      	strh	r3, [r2, #0]
   12a4a:	0022      	movs	r2, r4
   12a4c:	32dc      	adds	r2, #220	; 0xdc
   12a4e:	7812      	ldrb	r2, [r2, #0]
   12a50:	4293      	cmp	r3, r2
   12a52:	d30f      	bcc.n	12a74 <AssemblePacket+0xd0>
   12a54:	2040      	movs	r0, #64	; 0x40
   12a56:	4308      	orrs	r0, r1
   12a58:	9006      	str	r0, [sp, #24]
   12a5a:	0020      	movs	r0, r4
   12a5c:	3094      	adds	r0, #148	; 0x94
   12a5e:	7801      	ldrb	r1, [r0, #0]
   12a60:	4684      	mov	ip, r0
   12a62:	2010      	movs	r0, #16
   12a64:	4301      	orrs	r1, r0
   12a66:	4660      	mov	r0, ip
   12a68:	7001      	strb	r1, [r0, #0]
   12a6a:	4293      	cmp	r3, r2
   12a6c:	d000      	beq.n	12a70 <AssemblePacket+0xcc>
   12a6e:	e09b      	b.n	12ba8 <AssemblePacket+0x204>
   12a70:	34f6      	adds	r4, #246	; 0xf6
   12a72:	7026      	strb	r6, [r4, #0]
   12a74:	4da8      	ldr	r5, [pc, #672]	; (12d18 <AssemblePacket+0x374>)
   12a76:	2102      	movs	r1, #2
   12a78:	002a      	movs	r2, r5
   12a7a:	3294      	adds	r2, #148	; 0x94
   12a7c:	7813      	ldrb	r3, [r2, #0]
   12a7e:	420b      	tst	r3, r1
   12a80:	d005      	beq.n	12a8e <AssemblePacket+0xea>
   12a82:	2020      	movs	r0, #32
   12a84:	9c06      	ldr	r4, [sp, #24]
   12a86:	438b      	bics	r3, r1
   12a88:	4304      	orrs	r4, r0
   12a8a:	9406      	str	r4, [sp, #24]
   12a8c:	7013      	strb	r3, [r2, #0]
   12a8e:	2310      	movs	r3, #16
   12a90:	9c06      	ldr	r4, [sp, #24]
   12a92:	439c      	bics	r4, r3
   12a94:	002b      	movs	r3, r5
   12a96:	33e0      	adds	r3, #224	; 0xe0
   12a98:	781b      	ldrb	r3, [r3, #0]
   12a9a:	9309      	str	r3, [sp, #36]	; 0x24
   12a9c:	2b00      	cmp	r3, #0
   12a9e:	d003      	beq.n	12aa8 <AssemblePacket+0x104>
   12aa0:	9b08      	ldr	r3, [sp, #32]
   12aa2:	2b00      	cmp	r3, #0
   12aa4:	d000      	beq.n	12aa8 <AssemblePacket+0x104>
   12aa6:	e0f6      	b.n	12c96 <AssemblePacket+0x2f2>
   12aa8:	230f      	movs	r3, #15
   12aaa:	439c      	bics	r4, r3
   12aac:	466b      	mov	r3, sp
   12aae:	9406      	str	r4, [sp, #24]
   12ab0:	ac0d      	add	r4, sp, #52	; 0x34
   12ab2:	8826      	ldrh	r6, [r4, #0]
   12ab4:	4f96      	ldr	r7, [pc, #600]	; (12d10 <AssemblePacket+0x36c>)
   12ab6:	7e1b      	ldrb	r3, [r3, #24]
   12ab8:	1c70      	adds	r0, r6, #1
   12aba:	b280      	uxth	r0, r0
   12abc:	55bb      	strb	r3, [r7, r6]
   12abe:	19c0      	adds	r0, r0, r7
   12ac0:	4b96      	ldr	r3, [pc, #600]	; (12d1c <AssemblePacket+0x378>)
   12ac2:	2202      	movs	r2, #2
   12ac4:	4997      	ldr	r1, [pc, #604]	; (12d24 <AssemblePacket+0x380>)
   12ac6:	4798      	blx	r3
   12ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12aca:	3603      	adds	r6, #3
   12acc:	8026      	strh	r6, [r4, #0]
   12ace:	2b00      	cmp	r3, #0
   12ad0:	d100      	bne.n	12ad4 <AssemblePacket+0x130>
   12ad2:	e0e7      	b.n	12ca4 <AssemblePacket+0x300>
   12ad4:	9b08      	ldr	r3, [sp, #32]
   12ad6:	2b00      	cmp	r3, #0
   12ad8:	d004      	beq.n	12ae4 <AssemblePacket+0x140>
   12ada:	2201      	movs	r2, #1
   12adc:	0021      	movs	r1, r4
   12ade:	0038      	movs	r0, r7
   12ae0:	4b91      	ldr	r3, [pc, #580]	; (12d28 <AssemblePacket+0x384>)
   12ae2:	4798      	blx	r3
   12ae4:	466a      	mov	r2, sp
   12ae6:	212c      	movs	r1, #44	; 0x2c
   12ae8:	1852      	adds	r2, r2, r1
   12aea:	8823      	ldrh	r3, [r4, #0]
   12aec:	7812      	ldrb	r2, [r2, #0]
   12aee:	1c5e      	adds	r6, r3, #1
   12af0:	54fa      	strb	r2, [r7, r3]
   12af2:	9b08      	ldr	r3, [sp, #32]
   12af4:	b2b6      	uxth	r6, r6
   12af6:	8026      	strh	r6, [r4, #0]
   12af8:	2b00      	cmp	r3, #0
   12afa:	d100      	bne.n	12afe <AssemblePacket+0x15a>
   12afc:	e0d6      	b.n	12cac <AssemblePacket+0x308>
   12afe:	001a      	movs	r2, r3
   12b00:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b02:	4b86      	ldr	r3, [pc, #536]	; (12d1c <AssemblePacket+0x378>)
   12b04:	19b8      	adds	r0, r7, r6
   12b06:	4798      	blx	r3
   12b08:	2120      	movs	r1, #32
   12b0a:	466b      	mov	r3, sp
   12b0c:	185b      	adds	r3, r3, r1
   12b0e:	7819      	ldrb	r1, [r3, #0]
   12b10:	682b      	ldr	r3, [r5, #0]
   12b12:	002a      	movs	r2, r5
   12b14:	0a18      	lsrs	r0, r3, #8
   12b16:	792b      	ldrb	r3, [r5, #4]
   12b18:	3288      	adds	r2, #136	; 0x88
   12b1a:	061b      	lsls	r3, r3, #24
   12b1c:	4303      	orrs	r3, r0
   12b1e:	9304      	str	r3, [sp, #16]
   12b20:	2301      	movs	r3, #1
   12b22:	9301      	str	r3, [sp, #4]
   12b24:	4b81      	ldr	r3, [pc, #516]	; (12d2c <AssemblePacket+0x388>)
   12b26:	9703      	str	r7, [sp, #12]
   12b28:	9602      	str	r6, [sp, #8]
   12b2a:	9300      	str	r3, [sp, #0]
   12b2c:	6813      	ldr	r3, [r2, #0]
   12b2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12b30:	2200      	movs	r2, #0
   12b32:	4c7f      	ldr	r4, [pc, #508]	; (12d30 <AssemblePacket+0x38c>)
   12b34:	47a0      	blx	r4
   12b36:	2800      	cmp	r0, #0
   12b38:	d002      	beq.n	12b40 <AssemblePacket+0x19c>
   12b3a:	2020      	movs	r0, #32
   12b3c:	4b7d      	ldr	r3, [pc, #500]	; (12d34 <AssemblePacket+0x390>)
   12b3e:	4798      	blx	r3
   12b40:	aa0d      	add	r2, sp, #52	; 0x34
   12b42:	8813      	ldrh	r3, [r2, #0]
   12b44:	9908      	ldr	r1, [sp, #32]
   12b46:	18cb      	adds	r3, r1, r3
   12b48:	8013      	strh	r3, [r2, #0]
   12b4a:	4c73      	ldr	r4, [pc, #460]	; (12d18 <AssemblePacket+0x374>)
   12b4c:	ae0d      	add	r6, sp, #52	; 0x34
   12b4e:	0021      	movs	r1, r4
   12b50:	6823      	ldr	r3, [r4, #0]
   12b52:	8832      	ldrh	r2, [r6, #0]
   12b54:	0a18      	lsrs	r0, r3, #8
   12b56:	7923      	ldrb	r3, [r4, #4]
   12b58:	3a10      	subs	r2, #16
   12b5a:	061b      	lsls	r3, r3, #24
   12b5c:	4303      	orrs	r3, r0
   12b5e:	9300      	str	r3, [sp, #0]
   12b60:	3188      	adds	r1, #136	; 0x88
   12b62:	b2d2      	uxtb	r2, r2
   12b64:	2349      	movs	r3, #73	; 0x49
   12b66:	6809      	ldr	r1, [r1, #0]
   12b68:	2000      	movs	r0, #0
   12b6a:	4d73      	ldr	r5, [pc, #460]	; (12d38 <AssemblePacket+0x394>)
   12b6c:	47a8      	blx	r5
   12b6e:	4f68      	ldr	r7, [pc, #416]	; (12d10 <AssemblePacket+0x36c>)
   12b70:	2210      	movs	r2, #16
   12b72:	4968      	ldr	r1, [pc, #416]	; (12d14 <AssemblePacket+0x370>)
   12b74:	0038      	movs	r0, r7
   12b76:	4b69      	ldr	r3, [pc, #420]	; (12d1c <AssemblePacket+0x378>)
   12b78:	4798      	blx	r3
   12b7a:	8833      	ldrh	r3, [r6, #0]
   12b7c:	4a65      	ldr	r2, [pc, #404]	; (12d14 <AssemblePacket+0x370>)
   12b7e:	9300      	str	r3, [sp, #0]
   12b80:	2102      	movs	r1, #2
   12b82:	003b      	movs	r3, r7
   12b84:	4d6d      	ldr	r5, [pc, #436]	; (12d3c <AssemblePacket+0x398>)
   12b86:	486e      	ldr	r0, [pc, #440]	; (12d40 <AssemblePacket+0x39c>)
   12b88:	47a8      	blx	r5
   12b8a:	8836      	ldrh	r6, [r6, #0]
   12b8c:	2204      	movs	r2, #4
   12b8e:	19f0      	adds	r0, r6, r7
   12b90:	4960      	ldr	r1, [pc, #384]	; (12d14 <AssemblePacket+0x370>)
   12b92:	4b62      	ldr	r3, [pc, #392]	; (12d1c <AssemblePacket+0x378>)
   12b94:	4798      	blx	r3
   12b96:	3e0c      	subs	r6, #12
   12b98:	34ce      	adds	r4, #206	; 0xce
   12b9a:	8026      	strh	r6, [r4, #0]
   12b9c:	b00f      	add	sp, #60	; 0x3c
   12b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ba0:	2240      	movs	r2, #64	; 0x40
   12ba2:	4313      	orrs	r3, r2
   12ba4:	7023      	strb	r3, [r4, #0]
   12ba6:	e727      	b.n	129f8 <AssemblePacket+0x54>
   12ba8:	4293      	cmp	r3, r2
   12baa:	d800      	bhi.n	12bae <AssemblePacket+0x20a>
   12bac:	e762      	b.n	12a74 <AssemblePacket+0xd0>
   12bae:	0022      	movs	r2, r4
   12bb0:	0021      	movs	r1, r4
   12bb2:	32f6      	adds	r2, #246	; 0xf6
   12bb4:	7813      	ldrb	r3, [r2, #0]
   12bb6:	31dd      	adds	r1, #221	; 0xdd
   12bb8:	3301      	adds	r3, #1
   12bba:	b2db      	uxtb	r3, r3
   12bbc:	7013      	strb	r3, [r2, #0]
   12bbe:	7809      	ldrb	r1, [r1, #0]
   12bc0:	4299      	cmp	r1, r3
   12bc2:	d900      	bls.n	12bc6 <AssemblePacket+0x222>
   12bc4:	e756      	b.n	12a74 <AssemblePacket+0xd0>
   12bc6:	231a      	movs	r3, #26
   12bc8:	7016      	strb	r6, [r2, #0]
   12bca:	aa06      	add	r2, sp, #24
   12bcc:	189b      	adds	r3, r3, r2
   12bce:	001a      	movs	r2, r3
   12bd0:	0031      	movs	r1, r6
   12bd2:	4b5c      	ldr	r3, [pc, #368]	; (12d44 <AssemblePacket+0x3a0>)
   12bd4:	203c      	movs	r0, #60	; 0x3c
   12bd6:	4798      	blx	r3
   12bd8:	4b5b      	ldr	r3, [pc, #364]	; (12d48 <AssemblePacket+0x3a4>)
   12bda:	781a      	ldrb	r2, [r3, #0]
   12bdc:	ab06      	add	r3, sp, #24
   12bde:	7e9b      	ldrb	r3, [r3, #26]
   12be0:	429a      	cmp	r2, r3
   12be2:	d00d      	beq.n	12c00 <AssemblePacket+0x25c>
   12be4:	34ff      	adds	r4, #255	; 0xff
   12be6:	7820      	ldrb	r0, [r4, #0]
   12be8:	4b58      	ldr	r3, [pc, #352]	; (12d4c <AssemblePacket+0x3a8>)
   12bea:	4798      	blx	r3
   12bec:	0031      	movs	r1, r6
   12bee:	4a56      	ldr	r2, [pc, #344]	; (12d48 <AssemblePacket+0x3a4>)
   12bf0:	4b54      	ldr	r3, [pc, #336]	; (12d44 <AssemblePacket+0x3a0>)
   12bf2:	2035      	movs	r0, #53	; 0x35
   12bf4:	4798      	blx	r3
   12bf6:	210a      	movs	r1, #10
   12bf8:	0030      	movs	r0, r6
   12bfa:	4b55      	ldr	r3, [pc, #340]	; (12d50 <AssemblePacket+0x3ac>)
   12bfc:	4798      	blx	r3
   12bfe:	e739      	b.n	12a74 <AssemblePacket+0xd0>
   12c00:	4b47      	ldr	r3, [pc, #284]	; (12d20 <AssemblePacket+0x37c>)
   12c02:	783a      	ldrb	r2, [r7, #0]
   12c04:	781b      	ldrb	r3, [r3, #0]
   12c06:	4293      	cmp	r3, r2
   12c08:	d022      	beq.n	12c50 <AssemblePacket+0x2ac>
   12c0a:	d800      	bhi.n	12c0e <AssemblePacket+0x26a>
   12c0c:	e732      	b.n	12a74 <AssemblePacket+0xd0>
   12c0e:	221b      	movs	r2, #27
   12c10:	003d      	movs	r5, r7
   12c12:	a906      	add	r1, sp, #24
   12c14:	3b01      	subs	r3, #1
   12c16:	1852      	adds	r2, r2, r1
   12c18:	7013      	strb	r3, [r2, #0]
   12c1a:	261b      	movs	r6, #27
   12c1c:	ab06      	add	r3, sp, #24
   12c1e:	18f6      	adds	r6, r6, r3
   12c20:	782a      	ldrb	r2, [r5, #0]
   12c22:	7833      	ldrb	r3, [r6, #0]
   12c24:	429a      	cmp	r2, r3
   12c26:	d900      	bls.n	12c2a <AssemblePacket+0x286>
   12c28:	e724      	b.n	12a74 <AssemblePacket+0xd0>
   12c2a:	0031      	movs	r1, r6
   12c2c:	2010      	movs	r0, #16
   12c2e:	4f49      	ldr	r7, [pc, #292]	; (12d54 <AssemblePacket+0x3b0>)
   12c30:	47b8      	blx	r7
   12c32:	2808      	cmp	r0, #8
   12c34:	d000      	beq.n	12c38 <AssemblePacket+0x294>
   12c36:	e71d      	b.n	12a74 <AssemblePacket+0xd0>
   12c38:	0031      	movs	r1, r6
   12c3a:	3009      	adds	r0, #9
   12c3c:	47b8      	blx	r7
   12c3e:	7833      	ldrb	r3, [r6, #0]
   12c40:	2808      	cmp	r0, #8
   12c42:	d061      	beq.n	12d08 <AssemblePacket+0x364>
   12c44:	782a      	ldrb	r2, [r5, #0]
   12c46:	429a      	cmp	r2, r3
   12c48:	d2e7      	bcs.n	12c1a <AssemblePacket+0x276>
   12c4a:	3b01      	subs	r3, #1
   12c4c:	7033      	strb	r3, [r6, #0]
   12c4e:	e7e4      	b.n	12c1a <AssemblePacket+0x276>
   12c50:	34ff      	adds	r4, #255	; 0xff
   12c52:	7820      	ldrb	r0, [r4, #0]
   12c54:	4b40      	ldr	r3, [pc, #256]	; (12d58 <AssemblePacket+0x3b4>)
   12c56:	4798      	blx	r3
   12c58:	231b      	movs	r3, #27
   12c5a:	aa06      	add	r2, sp, #24
   12c5c:	189b      	adds	r3, r3, r2
   12c5e:	0019      	movs	r1, r3
   12c60:	4c3e      	ldr	r4, [pc, #248]	; (12d5c <AssemblePacket+0x3b8>)
   12c62:	2013      	movs	r0, #19
   12c64:	47a0      	blx	r4
   12c66:	231b      	movs	r3, #27
   12c68:	aa06      	add	r2, sp, #24
   12c6a:	189b      	adds	r3, r3, r2
   12c6c:	0019      	movs	r1, r3
   12c6e:	2014      	movs	r0, #20
   12c70:	47a0      	blx	r4
   12c72:	2113      	movs	r1, #19
   12c74:	0030      	movs	r0, r6
   12c76:	4c36      	ldr	r4, [pc, #216]	; (12d50 <AssemblePacket+0x3ac>)
   12c78:	47a0      	blx	r4
   12c7a:	2210      	movs	r2, #16
   12c7c:	786b      	ldrb	r3, [r5, #1]
   12c7e:	210b      	movs	r1, #11
   12c80:	4313      	orrs	r3, r2
   12c82:	706b      	strb	r3, [r5, #1]
   12c84:	2001      	movs	r0, #1
   12c86:	47a0      	blx	r4
   12c88:	e6f4      	b.n	12a74 <AssemblePacket+0xd0>
   12c8a:	2210      	movs	r2, #16
   12c8c:	3494      	adds	r4, #148	; 0x94
   12c8e:	7823      	ldrb	r3, [r4, #0]
   12c90:	4393      	bics	r3, r2
   12c92:	7023      	strb	r3, [r4, #0]
   12c94:	e6ee      	b.n	12a74 <AssemblePacket+0xd0>
   12c96:	4b32      	ldr	r3, [pc, #200]	; (12d60 <AssemblePacket+0x3bc>)
   12c98:	4798      	blx	r3
   12c9a:	230f      	movs	r3, #15
   12c9c:	4018      	ands	r0, r3
   12c9e:	439c      	bics	r4, r3
   12ca0:	4304      	orrs	r4, r0
   12ca2:	e703      	b.n	12aac <AssemblePacket+0x108>
   12ca4:	9b08      	ldr	r3, [sp, #32]
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d000      	beq.n	12cac <AssemblePacket+0x308>
   12caa:	e71b      	b.n	12ae4 <AssemblePacket+0x140>
   12cac:	4d1a      	ldr	r5, [pc, #104]	; (12d18 <AssemblePacket+0x374>)
   12cae:	002b      	movs	r3, r5
   12cb0:	33e0      	adds	r3, #224	; 0xe0
   12cb2:	781b      	ldrb	r3, [r3, #0]
   12cb4:	2b00      	cmp	r3, #0
   12cb6:	d100      	bne.n	12cba <AssemblePacket+0x316>
   12cb8:	e747      	b.n	12b4a <AssemblePacket+0x1a6>
   12cba:	261e      	movs	r6, #30
   12cbc:	ab06      	add	r3, sp, #24
   12cbe:	18f6      	adds	r6, r6, r3
   12cc0:	2200      	movs	r2, #0
   12cc2:	0031      	movs	r1, r6
   12cc4:	4827      	ldr	r0, [pc, #156]	; (12d64 <AssemblePacket+0x3c0>)
   12cc6:	4b18      	ldr	r3, [pc, #96]	; (12d28 <AssemblePacket+0x384>)
   12cc8:	4798      	blx	r3
   12cca:	682b      	ldr	r3, [r5, #0]
   12ccc:	7831      	ldrb	r1, [r6, #0]
   12cce:	0a18      	lsrs	r0, r3, #8
   12cd0:	792b      	ldrb	r3, [r5, #4]
   12cd2:	9703      	str	r7, [sp, #12]
   12cd4:	061b      	lsls	r3, r3, #24
   12cd6:	4303      	orrs	r3, r0
   12cd8:	9304      	str	r3, [sp, #16]
   12cda:	8823      	ldrh	r3, [r4, #0]
   12cdc:	002a      	movs	r2, r5
   12cde:	9302      	str	r3, [sp, #8]
   12ce0:	2302      	movs	r3, #2
   12ce2:	9301      	str	r3, [sp, #4]
   12ce4:	4b16      	ldr	r3, [pc, #88]	; (12d40 <AssemblePacket+0x39c>)
   12ce6:	3288      	adds	r2, #136	; 0x88
   12ce8:	9300      	str	r3, [sp, #0]
   12cea:	6813      	ldr	r3, [r2, #0]
   12cec:	481d      	ldr	r0, [pc, #116]	; (12d64 <AssemblePacket+0x3c0>)
   12cee:	2200      	movs	r2, #0
   12cf0:	4d0f      	ldr	r5, [pc, #60]	; (12d30 <AssemblePacket+0x38c>)
   12cf2:	47a8      	blx	r5
   12cf4:	2800      	cmp	r0, #0
   12cf6:	d002      	beq.n	12cfe <AssemblePacket+0x35a>
   12cf8:	2020      	movs	r0, #32
   12cfa:	4b0e      	ldr	r3, [pc, #56]	; (12d34 <AssemblePacket+0x390>)
   12cfc:	4798      	blx	r3
   12cfe:	8823      	ldrh	r3, [r4, #0]
   12d00:	8832      	ldrh	r2, [r6, #0]
   12d02:	189b      	adds	r3, r3, r2
   12d04:	8023      	strh	r3, [r4, #0]
   12d06:	e720      	b.n	12b4a <AssemblePacket+0x1a6>
   12d08:	34e7      	adds	r4, #231	; 0xe7
   12d0a:	e7c2      	b.n	12c92 <AssemblePacket+0x2ee>
   12d0c:	00016849 	.word	0x00016849
   12d10:	200033b8 	.word	0x200033b8
   12d14:	20001eb5 	.word	0x20001eb5
   12d18:	20003170 	.word	0x20003170
   12d1c:	00016837 	.word	0x00016837
   12d20:	20003257 	.word	0x20003257
   12d24:	200031f8 	.word	0x200031f8
   12d28:	0000fcad 	.word	0x0000fcad
   12d2c:	200031a5 	.word	0x200031a5
   12d30:	00010dc1 	.word	0x00010dc1
   12d34:	00010e81 	.word	0x00010e81
   12d38:	0000ffd9 	.word	0x0000ffd9
   12d3c:	00007259 	.word	0x00007259
   12d40:	20003195 	.word	0x20003195
   12d44:	0000cbbd 	.word	0x0000cbbd
   12d48:	20003259 	.word	0x20003259
   12d4c:	0000cc11 	.word	0x0000cc11
   12d50:	00009385 	.word	0x00009385
   12d54:	0000cbd9 	.word	0x0000cbd9
   12d58:	0000cc9d 	.word	0x0000cc9d
   12d5c:	00012429 	.word	0x00012429
   12d60:	0000fc0d 	.word	0x0000fc0d
   12d64:	20002f34 	.word	0x20002f34

00012d68 <LorawanClasscUlAckTimerCallback>:
   12d68:	2102      	movs	r1, #2
   12d6a:	4b03      	ldr	r3, [pc, #12]	; (12d78 <LorawanClasscUlAckTimerCallback+0x10>)
   12d6c:	3394      	adds	r3, #148	; 0x94
   12d6e:	781a      	ldrb	r2, [r3, #0]
   12d70:	438a      	bics	r2, r1
   12d72:	701a      	strb	r2, [r3, #0]
   12d74:	4770      	bx	lr
   12d76:	46c0      	nop			; (mov r8, r8)
   12d78:	20003170 	.word	0x20003170

00012d7c <LorawanClasscValidateSend>:
   12d7c:	2388      	movs	r3, #136	; 0x88
   12d7e:	b510      	push	{r4, lr}
   12d80:	4c0a      	ldr	r4, [pc, #40]	; (12dac <LorawanClasscValidateSend+0x30>)
   12d82:	009b      	lsls	r3, r3, #2
   12d84:	5ce3      	ldrb	r3, [r4, r3]
   12d86:	2b00      	cmp	r3, #0
   12d88:	d008      	beq.n	12d9c <LorawanClasscValidateSend+0x20>
   12d8a:	220e      	movs	r2, #14
   12d8c:	3484      	adds	r4, #132	; 0x84
   12d8e:	7823      	ldrb	r3, [r4, #0]
   12d90:	2008      	movs	r0, #8
   12d92:	4013      	ands	r3, r2
   12d94:	2b02      	cmp	r3, #2
   12d96:	d100      	bne.n	12d9a <LorawanClasscValidateSend+0x1e>
   12d98:	2011      	movs	r0, #17
   12d9a:	bd10      	pop	{r4, pc}
   12d9c:	2394      	movs	r3, #148	; 0x94
   12d9e:	005b      	lsls	r3, r3, #1
   12da0:	5ce0      	ldrb	r0, [r4, r3]
   12da2:	4b03      	ldr	r3, [pc, #12]	; (12db0 <LorawanClasscValidateSend+0x34>)
   12da4:	4798      	blx	r3
   12da6:	2800      	cmp	r0, #0
   12da8:	d1ef      	bne.n	12d8a <LorawanClasscValidateSend+0xe>
   12daa:	e7f5      	b.n	12d98 <LorawanClasscValidateSend+0x1c>
   12dac:	20003170 	.word	0x20003170
   12db0:	0000d29d 	.word	0x0000d29d

00012db4 <LorawanClasscRxDone>:
   12db4:	221f      	movs	r2, #31
   12db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12db8:	7803      	ldrb	r3, [r0, #0]
   12dba:	4c1c      	ldr	r4, [pc, #112]	; (12e2c <LorawanClasscRxDone+0x78>)
   12dbc:	4393      	bics	r3, r2
   12dbe:	2ba0      	cmp	r3, #160	; 0xa0
   12dc0:	d10c      	bne.n	12ddc <LorawanClasscRxDone+0x28>
   12dc2:	2694      	movs	r6, #148	; 0x94
   12dc4:	0076      	lsls	r6, r6, #1
   12dc6:	5da0      	ldrb	r0, [r4, r6]
   12dc8:	4b19      	ldr	r3, [pc, #100]	; (12e30 <LorawanClasscRxDone+0x7c>)
   12dca:	4798      	blx	r3
   12dcc:	1e05      	subs	r5, r0, #0
   12dce:	d019      	beq.n	12e04 <LorawanClasscRxDone+0x50>
   12dd0:	0022      	movs	r2, r4
   12dd2:	2102      	movs	r1, #2
   12dd4:	3294      	adds	r2, #148	; 0x94
   12dd6:	7813      	ldrb	r3, [r2, #0]
   12dd8:	438b      	bics	r3, r1
   12dda:	7013      	strb	r3, [r2, #0]
   12ddc:	0021      	movs	r1, r4
   12dde:	3184      	adds	r1, #132	; 0x84
   12de0:	780b      	ldrb	r3, [r1, #0]
   12de2:	220e      	movs	r2, #14
   12de4:	0018      	movs	r0, r3
   12de6:	4010      	ands	r0, r2
   12de8:	2806      	cmp	r0, #6
   12dea:	d103      	bne.n	12df4 <LorawanClasscRxDone+0x40>
   12dec:	4393      	bics	r3, r2
   12dee:	3a04      	subs	r2, #4
   12df0:	4313      	orrs	r3, r2
   12df2:	700b      	strb	r3, [r1, #0]
   12df4:	2390      	movs	r3, #144	; 0x90
   12df6:	2201      	movs	r2, #1
   12df8:	009b      	lsls	r3, r3, #2
   12dfa:	54e2      	strb	r2, [r4, r3]
   12dfc:	2000      	movs	r0, #0
   12dfe:	4b0d      	ldr	r3, [pc, #52]	; (12e34 <LorawanClasscRxDone+0x80>)
   12e00:	4798      	blx	r3
   12e02:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12e04:	4b0c      	ldr	r3, [pc, #48]	; (12e38 <LorawanClasscRxDone+0x84>)
   12e06:	5da6      	ldrb	r6, [r4, r6]
   12e08:	4798      	blx	r3
   12e0a:	4b0c      	ldr	r3, [pc, #48]	; (12e3c <LorawanClasscRxDone+0x88>)
   12e0c:	490c      	ldr	r1, [pc, #48]	; (12e40 <LorawanClasscRxDone+0x8c>)
   12e0e:	4798      	blx	r3
   12e10:	23fa      	movs	r3, #250	; 0xfa
   12e12:	009b      	lsls	r3, r3, #2
   12e14:	18cb      	adds	r3, r1, r3
   12e16:	21fa      	movs	r1, #250	; 0xfa
   12e18:	0089      	lsls	r1, r1, #2
   12e1a:	4359      	muls	r1, r3
   12e1c:	9500      	str	r5, [sp, #0]
   12e1e:	002a      	movs	r2, r5
   12e20:	4b08      	ldr	r3, [pc, #32]	; (12e44 <LorawanClasscRxDone+0x90>)
   12e22:	0030      	movs	r0, r6
   12e24:	4d08      	ldr	r5, [pc, #32]	; (12e48 <LorawanClasscRxDone+0x94>)
   12e26:	47a8      	blx	r5
   12e28:	e7d8      	b.n	12ddc <LorawanClasscRxDone+0x28>
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20003170 	.word	0x20003170
   12e30:	0000d29d 	.word	0x0000d29d
   12e34:	000112c1 	.word	0x000112c1
   12e38:	00016f7d 	.word	0x00016f7d
   12e3c:	000138b5 	.word	0x000138b5
   12e40:	000007d1 	.word	0x000007d1
   12e44:	00012d69 	.word	0x00012d69
   12e48:	0000d105 	.word	0x0000d105

00012e4c <LorawanClasscRxTimeout>:
   12e4c:	4a0c      	ldr	r2, [pc, #48]	; (12e80 <LorawanClasscRxTimeout+0x34>)
   12e4e:	b510      	push	{r4, lr}
   12e50:	0010      	movs	r0, r2
   12e52:	3084      	adds	r0, #132	; 0x84
   12e54:	7803      	ldrb	r3, [r0, #0]
   12e56:	240e      	movs	r4, #14
   12e58:	0019      	movs	r1, r3
   12e5a:	4021      	ands	r1, r4
   12e5c:	2906      	cmp	r1, #6
   12e5e:	d107      	bne.n	12e70 <LorawanClasscRxTimeout+0x24>
   12e60:	2208      	movs	r2, #8
   12e62:	43a3      	bics	r3, r4
   12e64:	4313      	orrs	r3, r2
   12e66:	7003      	strb	r3, [r0, #0]
   12e68:	2000      	movs	r0, #0
   12e6a:	4b06      	ldr	r3, [pc, #24]	; (12e84 <LorawanClasscRxTimeout+0x38>)
   12e6c:	4798      	blx	r3
   12e6e:	e006      	b.n	12e7e <LorawanClasscRxTimeout+0x32>
   12e70:	290a      	cmp	r1, #10
   12e72:	d1f9      	bne.n	12e68 <LorawanClasscRxTimeout+0x1c>
   12e74:	2388      	movs	r3, #136	; 0x88
   12e76:	009b      	lsls	r3, r3, #2
   12e78:	5cd3      	ldrb	r3, [r2, r3]
   12e7a:	2b00      	cmp	r3, #0
   12e7c:	d0f4      	beq.n	12e68 <LorawanClasscRxTimeout+0x1c>
   12e7e:	bd10      	pop	{r4, pc}
   12e80:	20003170 	.word	0x20003170
   12e84:	000112c1 	.word	0x000112c1

00012e88 <LorawanClasscNotifyAppOnReceive>:
   12e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e8a:	001f      	movs	r7, r3
   12e8c:	2394      	movs	r3, #148	; 0x94
   12e8e:	0016      	movs	r6, r2
   12e90:	4a07      	ldr	r2, [pc, #28]	; (12eb0 <LorawanClasscNotifyAppOnReceive+0x28>)
   12e92:	005b      	lsls	r3, r3, #1
   12e94:	0004      	movs	r4, r0
   12e96:	5cd0      	ldrb	r0, [r2, r3]
   12e98:	4b06      	ldr	r3, [pc, #24]	; (12eb4 <LorawanClasscNotifyAppOnReceive+0x2c>)
   12e9a:	000d      	movs	r5, r1
   12e9c:	4798      	blx	r3
   12e9e:	2800      	cmp	r0, #0
   12ea0:	d105      	bne.n	12eae <LorawanClasscNotifyAppOnReceive+0x26>
   12ea2:	0020      	movs	r0, r4
   12ea4:	003b      	movs	r3, r7
   12ea6:	0032      	movs	r2, r6
   12ea8:	0029      	movs	r1, r5
   12eaa:	4c03      	ldr	r4, [pc, #12]	; (12eb8 <LorawanClasscNotifyAppOnReceive+0x30>)
   12eac:	47a0      	blx	r4
   12eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12eb0:	20003170 	.word	0x20003170
   12eb4:	0000d29d 	.word	0x0000d29d
   12eb8:	00010ee5 	.word	0x00010ee5

00012ebc <LorawanMcastEnable>:
   12ebc:	0002      	movs	r2, r0
   12ebe:	b510      	push	{r4, lr}
   12ec0:	200a      	movs	r0, #10
   12ec2:	2903      	cmp	r1, #3
   12ec4:	d822      	bhi.n	12f0c <LorawanMcastEnable+0x50>
   12ec6:	4b1a      	ldr	r3, [pc, #104]	; (12f30 <LorawanMcastEnable+0x74>)
   12ec8:	2a00      	cmp	r2, #0
   12eca:	d020      	beq.n	12f0e <LorawanMcastEnable+0x52>
   12ecc:	223c      	movs	r2, #60	; 0x3c
   12ece:	434a      	muls	r2, r1
   12ed0:	189a      	adds	r2, r3, r2
   12ed2:	3259      	adds	r2, #89	; 0x59
   12ed4:	32ff      	adds	r2, #255	; 0xff
   12ed6:	7a12      	ldrb	r2, [r2, #8]
   12ed8:	0754      	lsls	r4, r2, #29
   12eda:	d512      	bpl.n	12f02 <LorawanMcastEnable+0x46>
   12edc:	0794      	lsls	r4, r2, #30
   12ede:	d510      	bpl.n	12f02 <LorawanMcastEnable+0x46>
   12ee0:	07d2      	lsls	r2, r2, #31
   12ee2:	0fd2      	lsrs	r2, r2, #31
   12ee4:	2a01      	cmp	r2, #1
   12ee6:	d10c      	bne.n	12f02 <LorawanMcastEnable+0x46>
   12ee8:	001c      	movs	r4, r3
   12eea:	34fd      	adds	r4, #253	; 0xfd
   12eec:	7824      	ldrb	r4, [r4, #0]
   12eee:	0764      	lsls	r4, r4, #29
   12ef0:	d007      	beq.n	12f02 <LorawanMcastEnable+0x46>
   12ef2:	202e      	movs	r0, #46	; 0x2e
   12ef4:	408a      	lsls	r2, r1
   12ef6:	30ff      	adds	r0, #255	; 0xff
   12ef8:	5c19      	ldrb	r1, [r3, r0]
   12efa:	430a      	orrs	r2, r1
   12efc:	541a      	strb	r2, [r3, r0]
   12efe:	3826      	subs	r0, #38	; 0x26
   12f00:	38ff      	subs	r0, #255	; 0xff
   12f02:	2196      	movs	r1, #150	; 0x96
   12f04:	0049      	lsls	r1, r1, #1
   12f06:	5c5a      	ldrb	r2, [r3, r1]
   12f08:	3201      	adds	r2, #1
   12f0a:	545a      	strb	r2, [r3, r1]
   12f0c:	bd10      	pop	{r4, pc}
   12f0e:	2201      	movs	r2, #1
   12f10:	408a      	lsls	r2, r1
   12f12:	202e      	movs	r0, #46	; 0x2e
   12f14:	0011      	movs	r1, r2
   12f16:	30ff      	adds	r0, #255	; 0xff
   12f18:	5c1a      	ldrb	r2, [r3, r0]
   12f1a:	438a      	bics	r2, r1
   12f1c:	2196      	movs	r1, #150	; 0x96
   12f1e:	541a      	strb	r2, [r3, r0]
   12f20:	0049      	lsls	r1, r1, #1
   12f22:	5c5a      	ldrb	r2, [r3, r1]
   12f24:	3826      	subs	r0, #38	; 0x26
   12f26:	3a01      	subs	r2, #1
   12f28:	545a      	strb	r2, [r3, r1]
   12f2a:	38ff      	subs	r0, #255	; 0xff
   12f2c:	e7ee      	b.n	12f0c <LorawanMcastEnable+0x50>
   12f2e:	46c0      	nop			; (mov r8, r8)
   12f30:	20003170 	.word	0x20003170

00012f34 <LorawanMcastValidateHdr>:
   12f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12f36:	469c      	mov	ip, r3
   12f38:	2400      	movs	r4, #0
   12f3a:	230a      	movs	r3, #10
   12f3c:	4f18      	ldr	r7, [pc, #96]	; (12fa0 <LorawanMcastValidateHdr+0x6c>)
   12f3e:	b2e5      	uxtb	r5, r4
   12f40:	9501      	str	r5, [sp, #4]
   12f42:	252e      	movs	r5, #46	; 0x2e
   12f44:	35ff      	adds	r5, #255	; 0xff
   12f46:	5d7d      	ldrb	r5, [r7, r5]
   12f48:	2601      	movs	r6, #1
   12f4a:	4125      	asrs	r5, r4
   12f4c:	4235      	tst	r5, r6
   12f4e:	d022      	beq.n	12f96 <LorawanMcastValidateHdr+0x62>
   12f50:	7886      	ldrb	r6, [r0, #2]
   12f52:	7845      	ldrb	r5, [r0, #1]
   12f54:	0236      	lsls	r6, r6, #8
   12f56:	432e      	orrs	r6, r5
   12f58:	78c5      	ldrb	r5, [r0, #3]
   12f5a:	042d      	lsls	r5, r5, #16
   12f5c:	432e      	orrs	r6, r5
   12f5e:	7905      	ldrb	r5, [r0, #4]
   12f60:	062d      	lsls	r5, r5, #24
   12f62:	4335      	orrs	r5, r6
   12f64:	263c      	movs	r6, #60	; 0x3c
   12f66:	4366      	muls	r6, r4
   12f68:	3631      	adds	r6, #49	; 0x31
   12f6a:	36ff      	adds	r6, #255	; 0xff
   12f6c:	59be      	ldr	r6, [r7, r6]
   12f6e:	42b5      	cmp	r5, r6
   12f70:	d111      	bne.n	12f96 <LorawanMcastValidateHdr+0x62>
   12f72:	4d0c      	ldr	r5, [pc, #48]	; (12fa4 <LorawanMcastValidateHdr+0x70>)
   12f74:	782e      	ldrb	r6, [r5, #0]
   12f76:	2506      	movs	r5, #6
   12f78:	422e      	tst	r6, r5
   12f7a:	d00c      	beq.n	12f96 <LorawanMcastValidateHdr+0x62>
   12f7c:	2a00      	cmp	r2, #0
   12f7e:	d00a      	beq.n	12f96 <LorawanMcastValidateHdr+0x62>
   12f80:	7946      	ldrb	r6, [r0, #5]
   12f82:	3569      	adds	r5, #105	; 0x69
   12f84:	422e      	tst	r6, r5
   12f86:	d106      	bne.n	12f96 <LorawanMcastValidateHdr+0x62>
   12f88:	2903      	cmp	r1, #3
   12f8a:	d104      	bne.n	12f96 <LorawanMcastValidateHdr+0x62>
   12f8c:	466d      	mov	r5, sp
   12f8e:	4663      	mov	r3, ip
   12f90:	792d      	ldrb	r5, [r5, #4]
   12f92:	701d      	strb	r5, [r3, #0]
   12f94:	2308      	movs	r3, #8
   12f96:	3401      	adds	r4, #1
   12f98:	2c04      	cmp	r4, #4
   12f9a:	d1d0      	bne.n	12f3e <LorawanMcastValidateHdr+0xa>
   12f9c:	0018      	movs	r0, r3
   12f9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12fa0:	20003170 	.word	0x20003170
   12fa4:	2000326d 	.word	0x2000326d

00012fa8 <LorawanMcastProcessPkt>:
   12fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12faa:	0015      	movs	r5, r2
   12fac:	223c      	movs	r2, #60	; 0x3c
   12fae:	435a      	muls	r2, r3
   12fb0:	b089      	sub	sp, #36	; 0x24
   12fb2:	9107      	str	r1, [sp, #28]
   12fb4:	493f      	ldr	r1, [pc, #252]	; (130b4 <LorawanMcastProcessPkt+0x10c>)
   12fb6:	9006      	str	r0, [sp, #24]
   12fb8:	1889      	adds	r1, r1, r2
   12fba:	31fc      	adds	r1, #252	; 0xfc
   12fbc:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   12fbe:	6e08      	ldr	r0, [r1, #96]	; 0x60
   12fc0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   12fc2:	4284      	cmp	r4, r0
   12fc4:	d224      	bcs.n	13010 <LorawanMcastProcessPkt+0x68>
   12fc6:	2100      	movs	r1, #0
   12fc8:	4294      	cmp	r4, r2
   12fca:	d802      	bhi.n	12fd2 <LorawanMcastProcessPkt+0x2a>
   12fcc:	4282      	cmp	r2, r0
   12fce:	4192      	sbcs	r2, r2
   12fd0:	4251      	negs	r1, r2
   12fd2:	270a      	movs	r7, #10
   12fd4:	2900      	cmp	r1, #0
   12fd6:	d11d      	bne.n	13014 <LorawanMcastProcessPkt+0x6c>
   12fd8:	4a36      	ldr	r2, [pc, #216]	; (130b4 <LorawanMcastProcessPkt+0x10c>)
   12fda:	210e      	movs	r1, #14
   12fdc:	0010      	movs	r0, r2
   12fde:	3084      	adds	r0, #132	; 0x84
   12fe0:	7803      	ldrb	r3, [r0, #0]
   12fe2:	001c      	movs	r4, r3
   12fe4:	400c      	ands	r4, r1
   12fe6:	2c06      	cmp	r4, #6
   12fe8:	d108      	bne.n	12ffc <LorawanMcastProcessPkt+0x54>
   12fea:	0014      	movs	r4, r2
   12fec:	34fd      	adds	r4, #253	; 0xfd
   12fee:	7824      	ldrb	r4, [r4, #0]
   12ff0:	2c04      	cmp	r4, #4
   12ff2:	d103      	bne.n	12ffc <LorawanMcastProcessPkt+0x54>
   12ff4:	438b      	bics	r3, r1
   12ff6:	3904      	subs	r1, #4
   12ff8:	430b      	orrs	r3, r1
   12ffa:	7003      	strb	r3, [r0, #0]
   12ffc:	2390      	movs	r3, #144	; 0x90
   12ffe:	2101      	movs	r1, #1
   13000:	009b      	lsls	r3, r3, #2
   13002:	54d1      	strb	r1, [r2, r3]
   13004:	2000      	movs	r0, #0
   13006:	4b2c      	ldr	r3, [pc, #176]	; (130b8 <LorawanMcastProcessPkt+0x110>)
   13008:	4798      	blx	r3
   1300a:	0038      	movs	r0, r7
   1300c:	b009      	add	sp, #36	; 0x24
   1300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13010:	4294      	cmp	r4, r2
   13012:	d8db      	bhi.n	12fcc <LorawanMcastProcessPkt+0x24>
   13014:	243c      	movs	r4, #60	; 0x3c
   13016:	435c      	muls	r4, r3
   13018:	4e26      	ldr	r6, [pc, #152]	; (130b4 <LorawanMcastProcessPkt+0x10c>)
   1301a:	79ea      	ldrb	r2, [r5, #7]
   1301c:	1937      	adds	r7, r6, r4
   1301e:	003b      	movs	r3, r7
   13020:	79a9      	ldrb	r1, [r5, #6]
   13022:	0212      	lsls	r2, r2, #8
   13024:	3355      	adds	r3, #85	; 0x55
   13026:	430a      	orrs	r2, r1
   13028:	33ff      	adds	r3, #255	; 0xff
   1302a:	801a      	strh	r2, [r3, #0]
   1302c:	2105      	movs	r1, #5
   1302e:	4b23      	ldr	r3, [pc, #140]	; (130bc <LorawanMcastProcessPkt+0x114>)
   13030:	37fc      	adds	r7, #252	; 0xfc
   13032:	2000      	movs	r0, #0
   13034:	4798      	blx	r3
   13036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13038:	3445      	adds	r4, #69	; 0x45
   1303a:	9304      	str	r3, [sp, #16]
   1303c:	4b20      	ldr	r3, [pc, #128]	; (130c0 <LorawanMcastProcessPkt+0x118>)
   1303e:	9907      	ldr	r1, [sp, #28]
   13040:	9303      	str	r3, [sp, #12]
   13042:	2319      	movs	r3, #25
   13044:	34ff      	adds	r4, #255	; 0xff
   13046:	9302      	str	r3, [sp, #8]
   13048:	19a4      	adds	r4, r4, r6
   1304a:	3b16      	subs	r3, #22
   1304c:	9806      	ldr	r0, [sp, #24]
   1304e:	9400      	str	r4, [sp, #0]
   13050:	390d      	subs	r1, #13
   13052:	9301      	str	r3, [sp, #4]
   13054:	b2c9      	uxtb	r1, r1
   13056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13058:	2201      	movs	r2, #1
   1305a:	3009      	adds	r0, #9
   1305c:	4c19      	ldr	r4, [pc, #100]	; (130c4 <LorawanMcastProcessPkt+0x11c>)
   1305e:	47a0      	blx	r4
   13060:	2800      	cmp	r0, #0
   13062:	d002      	beq.n	1306a <LorawanMcastProcessPkt+0xc2>
   13064:	201f      	movs	r0, #31
   13066:	4b18      	ldr	r3, [pc, #96]	; (130c8 <LorawanMcastProcessPkt+0x120>)
   13068:	4798      	blx	r3
   1306a:	4918      	ldr	r1, [pc, #96]	; (130cc <LorawanMcastProcessPkt+0x124>)
   1306c:	2708      	movs	r7, #8
   1306e:	784a      	ldrb	r2, [r1, #1]
   13070:	780b      	ldrb	r3, [r1, #0]
   13072:	0212      	lsls	r2, r2, #8
   13074:	431a      	orrs	r2, r3
   13076:	788b      	ldrb	r3, [r1, #2]
   13078:	041b      	lsls	r3, r3, #16
   1307a:	431a      	orrs	r2, r3
   1307c:	78cb      	ldrb	r3, [r1, #3]
   1307e:	061b      	lsls	r3, r3, #24
   13080:	4313      	orrs	r3, r2
   13082:	d0a9      	beq.n	12fd8 <LorawanMcastProcessPkt+0x30>
   13084:	2220      	movs	r2, #32
   13086:	3694      	adds	r6, #148	; 0x94
   13088:	7833      	ldrb	r3, [r6, #0]
   1308a:	9906      	ldr	r1, [sp, #24]
   1308c:	4393      	bics	r3, r2
   1308e:	7033      	strb	r3, [r6, #0]
   13090:	78ab      	ldrb	r3, [r5, #2]
   13092:	7868      	ldrb	r0, [r5, #1]
   13094:	40bb      	lsls	r3, r7
   13096:	4303      	orrs	r3, r0
   13098:	78e8      	ldrb	r0, [r5, #3]
   1309a:	9a07      	ldr	r2, [sp, #28]
   1309c:	0400      	lsls	r0, r0, #16
   1309e:	4303      	orrs	r3, r0
   130a0:	7928      	ldrb	r0, [r5, #4]
   130a2:	3a0c      	subs	r2, #12
   130a4:	0600      	lsls	r0, r0, #24
   130a6:	4318      	orrs	r0, r3
   130a8:	b2d2      	uxtb	r2, r2
   130aa:	19c9      	adds	r1, r1, r7
   130ac:	003b      	movs	r3, r7
   130ae:	4c08      	ldr	r4, [pc, #32]	; (130d0 <LorawanMcastProcessPkt+0x128>)
   130b0:	47a0      	blx	r4
   130b2:	e791      	b.n	12fd8 <LorawanMcastProcessPkt+0x30>
   130b4:	20003170 	.word	0x20003170
   130b8:	000112c1 	.word	0x000112c1
   130bc:	00009385 	.word	0x00009385
   130c0:	20002f34 	.word	0x20002f34
   130c4:	00010dc1 	.word	0x00010dc1
   130c8:	00010e81 	.word	0x00010e81
   130cc:	200034cc 	.word	0x200034cc
   130d0:	00010ee5 	.word	0x00010ee5

000130d4 <LorawanAddMcastAddr>:
   130d4:	b570      	push	{r4, r5, r6, lr}
   130d6:	260a      	movs	r6, #10
   130d8:	2903      	cmp	r1, #3
   130da:	d818      	bhi.n	1310e <LorawanAddMcastAddr+0x3a>
   130dc:	4b0d      	ldr	r3, [pc, #52]	; (13114 <LorawanAddMcastAddr+0x40>)
   130de:	681a      	ldr	r2, [r3, #0]
   130e0:	0a15      	lsrs	r5, r2, #8
   130e2:	791a      	ldrb	r2, [r3, #4]
   130e4:	0612      	lsls	r2, r2, #24
   130e6:	432a      	orrs	r2, r5
   130e8:	4282      	cmp	r2, r0
   130ea:	d010      	beq.n	1310e <LorawanAddMcastAddr+0x3a>
   130ec:	243c      	movs	r4, #60	; 0x3c
   130ee:	434c      	muls	r4, r1
   130f0:	191c      	adds	r4, r3, r4
   130f2:	0023      	movs	r3, r4
   130f4:	33fc      	adds	r3, #252	; 0xfc
   130f6:	6358      	str	r0, [r3, #52]	; 0x34
   130f8:	2106      	movs	r1, #6
   130fa:	2000      	movs	r0, #0
   130fc:	4b06      	ldr	r3, [pc, #24]	; (13118 <LorawanAddMcastAddr+0x44>)
   130fe:	4798      	blx	r3
   13100:	2201      	movs	r2, #1
   13102:	3459      	adds	r4, #89	; 0x59
   13104:	34ff      	adds	r4, #255	; 0xff
   13106:	7a21      	ldrb	r1, [r4, #8]
   13108:	3e02      	subs	r6, #2
   1310a:	430a      	orrs	r2, r1
   1310c:	7222      	strb	r2, [r4, #8]
   1310e:	0030      	movs	r0, r6
   13110:	bd70      	pop	{r4, r5, r6, pc}
   13112:	46c0      	nop			; (mov r8, r8)
   13114:	20003170 	.word	0x20003170
   13118:	00009385 	.word	0x00009385

0001311c <LorawanAddMcastAppskey>:
   1311c:	b570      	push	{r4, r5, r6, lr}
   1311e:	0006      	movs	r6, r0
   13120:	200a      	movs	r0, #10
   13122:	2903      	cmp	r1, #3
   13124:	d818      	bhi.n	13158 <LorawanAddMcastAppskey+0x3c>
   13126:	2e00      	cmp	r6, #0
   13128:	d016      	beq.n	13158 <LorawanAddMcastAppskey+0x3c>
   1312a:	253c      	movs	r5, #60	; 0x3c
   1312c:	434d      	muls	r5, r1
   1312e:	0028      	movs	r0, r5
   13130:	4c0a      	ldr	r4, [pc, #40]	; (1315c <LorawanAddMcastAppskey+0x40>)
   13132:	3045      	adds	r0, #69	; 0x45
   13134:	30ff      	adds	r0, #255	; 0xff
   13136:	2210      	movs	r2, #16
   13138:	1900      	adds	r0, r0, r4
   1313a:	0031      	movs	r1, r6
   1313c:	4b08      	ldr	r3, [pc, #32]	; (13160 <LorawanAddMcastAppskey+0x44>)
   1313e:	4798      	blx	r3
   13140:	4b08      	ldr	r3, [pc, #32]	; (13164 <LorawanAddMcastAppskey+0x48>)
   13142:	2107      	movs	r1, #7
   13144:	2000      	movs	r0, #0
   13146:	4798      	blx	r3
   13148:	2304      	movs	r3, #4
   1314a:	2008      	movs	r0, #8
   1314c:	1964      	adds	r4, r4, r5
   1314e:	3459      	adds	r4, #89	; 0x59
   13150:	34ff      	adds	r4, #255	; 0xff
   13152:	7a22      	ldrb	r2, [r4, #8]
   13154:	4313      	orrs	r3, r2
   13156:	7223      	strb	r3, [r4, #8]
   13158:	bd70      	pop	{r4, r5, r6, pc}
   1315a:	46c0      	nop			; (mov r8, r8)
   1315c:	20003170 	.word	0x20003170
   13160:	00016837 	.word	0x00016837
   13164:	00009385 	.word	0x00009385

00013168 <LorawanAddMcastNwkskey>:
   13168:	b570      	push	{r4, r5, r6, lr}
   1316a:	0006      	movs	r6, r0
   1316c:	200a      	movs	r0, #10
   1316e:	2903      	cmp	r1, #3
   13170:	d818      	bhi.n	131a4 <LorawanAddMcastNwkskey+0x3c>
   13172:	2e00      	cmp	r6, #0
   13174:	d016      	beq.n	131a4 <LorawanAddMcastNwkskey+0x3c>
   13176:	253c      	movs	r5, #60	; 0x3c
   13178:	434d      	muls	r5, r1
   1317a:	0028      	movs	r0, r5
   1317c:	4c0a      	ldr	r4, [pc, #40]	; (131a8 <LorawanAddMcastNwkskey+0x40>)
   1317e:	3035      	adds	r0, #53	; 0x35
   13180:	30ff      	adds	r0, #255	; 0xff
   13182:	2210      	movs	r2, #16
   13184:	1900      	adds	r0, r0, r4
   13186:	0031      	movs	r1, r6
   13188:	4b08      	ldr	r3, [pc, #32]	; (131ac <LorawanAddMcastNwkskey+0x44>)
   1318a:	4798      	blx	r3
   1318c:	4b08      	ldr	r3, [pc, #32]	; (131b0 <LorawanAddMcastNwkskey+0x48>)
   1318e:	2108      	movs	r1, #8
   13190:	2000      	movs	r0, #0
   13192:	4798      	blx	r3
   13194:	2302      	movs	r3, #2
   13196:	2008      	movs	r0, #8
   13198:	1964      	adds	r4, r4, r5
   1319a:	3459      	adds	r4, #89	; 0x59
   1319c:	34ff      	adds	r4, #255	; 0xff
   1319e:	7a22      	ldrb	r2, [r4, #8]
   131a0:	4313      	orrs	r3, r2
   131a2:	7223      	strb	r3, [r4, #8]
   131a4:	bd70      	pop	{r4, r5, r6, pc}
   131a6:	46c0      	nop			; (mov r8, r8)
   131a8:	20003170 	.word	0x20003170
   131ac:	00016837 	.word	0x00016837
   131b0:	00009385 	.word	0x00009385

000131b4 <LorawanAddMcastFcntMin>:
   131b4:	220a      	movs	r2, #10
   131b6:	2903      	cmp	r1, #3
   131b8:	d807      	bhi.n	131ca <LorawanAddMcastFcntMin+0x16>
   131ba:	233c      	movs	r3, #60	; 0x3c
   131bc:	434b      	muls	r3, r1
   131be:	4904      	ldr	r1, [pc, #16]	; (131d0 <LorawanAddMcastFcntMin+0x1c>)
   131c0:	3a02      	subs	r2, #2
   131c2:	18c9      	adds	r1, r1, r3
   131c4:	31fc      	adds	r1, #252	; 0xfc
   131c6:	65c8      	str	r0, [r1, #92]	; 0x5c
   131c8:	6588      	str	r0, [r1, #88]	; 0x58
   131ca:	0010      	movs	r0, r2
   131cc:	4770      	bx	lr
   131ce:	46c0      	nop			; (mov r8, r8)
   131d0:	20003170 	.word	0x20003170

000131d4 <LorawanAddMcastFcntMax>:
   131d4:	220a      	movs	r2, #10
   131d6:	2903      	cmp	r1, #3
   131d8:	d806      	bhi.n	131e8 <LorawanAddMcastFcntMax+0x14>
   131da:	233c      	movs	r3, #60	; 0x3c
   131dc:	434b      	muls	r3, r1
   131de:	4903      	ldr	r1, [pc, #12]	; (131ec <LorawanAddMcastFcntMax+0x18>)
   131e0:	3a02      	subs	r2, #2
   131e2:	18c9      	adds	r1, r1, r3
   131e4:	31fc      	adds	r1, #252	; 0xfc
   131e6:	6608      	str	r0, [r1, #96]	; 0x60
   131e8:	0010      	movs	r0, r2
   131ea:	4770      	bx	lr
   131ec:	20003170 	.word	0x20003170

000131f0 <LorawanAddMcastDlFrequency>:
   131f0:	b513      	push	{r0, r1, r4, lr}
   131f2:	000c      	movs	r4, r1
   131f4:	9001      	str	r0, [sp, #4]
   131f6:	2903      	cmp	r1, #3
   131f8:	d901      	bls.n	131fe <LorawanAddMcastDlFrequency+0xe>
   131fa:	200a      	movs	r0, #10
   131fc:	bd16      	pop	{r1, r2, r4, pc}
   131fe:	a901      	add	r1, sp, #4
   13200:	2001      	movs	r0, #1
   13202:	4b0a      	ldr	r3, [pc, #40]	; (1322c <LorawanAddMcastDlFrequency+0x3c>)
   13204:	4798      	blx	r3
   13206:	2808      	cmp	r0, #8
   13208:	d1f7      	bne.n	131fa <LorawanAddMcastDlFrequency+0xa>
   1320a:	213c      	movs	r1, #60	; 0x3c
   1320c:	4361      	muls	r1, r4
   1320e:	4b08      	ldr	r3, [pc, #32]	; (13230 <LorawanAddMcastDlFrequency+0x40>)
   13210:	9a01      	ldr	r2, [sp, #4]
   13212:	1859      	adds	r1, r3, r1
   13214:	31fc      	adds	r1, #252	; 0xfc
   13216:	336f      	adds	r3, #111	; 0x6f
   13218:	668a      	str	r2, [r1, #104]	; 0x68
   1321a:	0a11      	lsrs	r1, r2, #8
   1321c:	701a      	strb	r2, [r3, #0]
   1321e:	7059      	strb	r1, [r3, #1]
   13220:	0c11      	lsrs	r1, r2, #16
   13222:	0e12      	lsrs	r2, r2, #24
   13224:	7099      	strb	r1, [r3, #2]
   13226:	70da      	strb	r2, [r3, #3]
   13228:	e7e8      	b.n	131fc <LorawanAddMcastDlFrequency+0xc>
   1322a:	46c0      	nop			; (mov r8, r8)
   1322c:	0000cbd9 	.word	0x0000cbd9
   13230:	20003170 	.word	0x20003170

00013234 <LorawanAddMcastDatarate>:
   13234:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13236:	466b      	mov	r3, sp
   13238:	1ddd      	adds	r5, r3, #7
   1323a:	000c      	movs	r4, r1
   1323c:	7028      	strb	r0, [r5, #0]
   1323e:	2903      	cmp	r1, #3
   13240:	d901      	bls.n	13246 <LorawanAddMcastDatarate+0x12>
   13242:	200a      	movs	r0, #10
   13244:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13246:	0029      	movs	r1, r5
   13248:	200f      	movs	r0, #15
   1324a:	4b07      	ldr	r3, [pc, #28]	; (13268 <LorawanAddMcastDatarate+0x34>)
   1324c:	4798      	blx	r3
   1324e:	2808      	cmp	r0, #8
   13250:	d1f7      	bne.n	13242 <LorawanAddMcastDatarate+0xe>
   13252:	213c      	movs	r1, #60	; 0x3c
   13254:	4361      	muls	r1, r4
   13256:	4b05      	ldr	r3, [pc, #20]	; (1326c <LorawanAddMcastDatarate+0x38>)
   13258:	782a      	ldrb	r2, [r5, #0]
   1325a:	1859      	adds	r1, r3, r1
   1325c:	3169      	adds	r1, #105	; 0x69
   1325e:	31ff      	adds	r1, #255	; 0xff
   13260:	3373      	adds	r3, #115	; 0x73
   13262:	700a      	strb	r2, [r1, #0]
   13264:	701a      	strb	r2, [r3, #0]
   13266:	e7ed      	b.n	13244 <LorawanAddMcastDatarate+0x10>
   13268:	0000cbd9 	.word	0x0000cbd9
   1326c:	20003170 	.word	0x20003170

00013270 <LorawanAddMcastPeriodicity>:
   13270:	220a      	movs	r2, #10
   13272:	2903      	cmp	r1, #3
   13274:	d809      	bhi.n	1328a <LorawanAddMcastPeriodicity+0x1a>
   13276:	2807      	cmp	r0, #7
   13278:	d807      	bhi.n	1328a <LorawanAddMcastPeriodicity+0x1a>
   1327a:	233c      	movs	r3, #60	; 0x3c
   1327c:	434b      	muls	r3, r1
   1327e:	4904      	ldr	r1, [pc, #16]	; (13290 <LorawanAddMcastPeriodicity+0x20>)
   13280:	3a02      	subs	r2, #2
   13282:	18c9      	adds	r1, r1, r3
   13284:	316a      	adds	r1, #106	; 0x6a
   13286:	31ff      	adds	r1, #255	; 0xff
   13288:	7008      	strb	r0, [r1, #0]
   1328a:	0010      	movs	r0, r2
   1328c:	4770      	bx	lr
   1328e:	46c0      	nop			; (mov r8, r8)
   13290:	20003170 	.word	0x20003170

00013294 <Radio_LBTScanTimeout>:
   13294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13296:	4c1c      	ldr	r4, [pc, #112]	; (13308 <Radio_LBTScanTimeout+0x74>)
   13298:	0025      	movs	r5, r4
   1329a:	0023      	movs	r3, r4
   1329c:	354f      	adds	r5, #79	; 0x4f
   1329e:	7829      	ldrb	r1, [r5, #0]
   132a0:	3340      	adds	r3, #64	; 0x40
   132a2:	3101      	adds	r1, #1
   132a4:	b2c9      	uxtb	r1, r1
   132a6:	7029      	strb	r1, [r5, #0]
   132a8:	781b      	ldrb	r3, [r3, #0]
   132aa:	428b      	cmp	r3, r1
   132ac:	d315      	bcc.n	132da <Radio_LBTScanTimeout+0x46>
   132ae:	260e      	movs	r6, #14
   132b0:	446e      	add	r6, sp
   132b2:	4b16      	ldr	r3, [pc, #88]	; (1330c <Radio_LBTScanTimeout+0x78>)
   132b4:	0030      	movs	r0, r6
   132b6:	4798      	blx	r3
   132b8:	2300      	movs	r3, #0
   132ba:	5ef2      	ldrsh	r2, [r6, r3]
   132bc:	782b      	ldrb	r3, [r5, #0]
   132be:	4353      	muls	r3, r2
   132c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   132c2:	189b      	adds	r3, r3, r2
   132c4:	6463      	str	r3, [r4, #68]	; 0x44
   132c6:	0023      	movs	r3, r4
   132c8:	2200      	movs	r2, #0
   132ca:	3350      	adds	r3, #80	; 0x50
   132cc:	7818      	ldrb	r0, [r3, #0]
   132ce:	9200      	str	r2, [sp, #0]
   132d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   132d2:	4b0f      	ldr	r3, [pc, #60]	; (13310 <Radio_LBTScanTimeout+0x7c>)
   132d4:	4c0f      	ldr	r4, [pc, #60]	; (13314 <Radio_LBTScanTimeout+0x80>)
   132d6:	47a0      	blx	r4
   132d8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   132da:	2380      	movs	r3, #128	; 0x80
   132dc:	4a0e      	ldr	r2, [pc, #56]	; (13318 <Radio_LBTScanTimeout+0x84>)
   132de:	009b      	lsls	r3, r3, #2
   132e0:	8810      	ldrh	r0, [r2, #0]
   132e2:	4303      	orrs	r3, r0
   132e4:	8013      	strh	r3, [r2, #0]
   132e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   132e8:	0058      	lsls	r0, r3, #1
   132ea:	1e4b      	subs	r3, r1, #1
   132ec:	4359      	muls	r1, r3
   132ee:	4b0b      	ldr	r3, [pc, #44]	; (1331c <Radio_LBTScanTimeout+0x88>)
   132f0:	b289      	uxth	r1, r1
   132f2:	4798      	blx	r3
   132f4:	0023      	movs	r3, r4
   132f6:	334c      	adds	r3, #76	; 0x4c
   132f8:	8018      	strh	r0, [r3, #0]
   132fa:	2300      	movs	r3, #0
   132fc:	2001      	movs	r0, #1
   132fe:	702b      	strb	r3, [r5, #0]
   13300:	6463      	str	r3, [r4, #68]	; 0x44
   13302:	4b07      	ldr	r3, [pc, #28]	; (13320 <Radio_LBTScanTimeout+0x8c>)
   13304:	4798      	blx	r3
   13306:	e7e7      	b.n	132d8 <Radio_LBTScanTimeout+0x44>
   13308:	20002d78 	.word	0x20002d78
   1330c:	0000d95d 	.word	0x0000d95d
   13310:	00013295 	.word	0x00013295
   13314:	0000d105 	.word	0x0000d105
   13318:	20003044 	.word	0x20003044
   1331c:	000136e9 	.word	0x000136e9
   13320:	0000ec01 	.word	0x0000ec01

00013324 <RADIO_ScanHandler>:
   13324:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13326:	4b12      	ldr	r3, [pc, #72]	; (13370 <RADIO_ScanHandler+0x4c>)
   13328:	4798      	blx	r3
   1332a:	2000      	movs	r0, #0
   1332c:	4b11      	ldr	r3, [pc, #68]	; (13374 <RADIO_ScanHandler+0x50>)
   1332e:	4798      	blx	r3
   13330:	4d11      	ldr	r5, [pc, #68]	; (13378 <RADIO_ScanHandler+0x54>)
   13332:	4b12      	ldr	r3, [pc, #72]	; (1337c <RADIO_ScanHandler+0x58>)
   13334:	6828      	ldr	r0, [r5, #0]
   13336:	2400      	movs	r4, #0
   13338:	4798      	blx	r3
   1333a:	002b      	movs	r3, r5
   1333c:	4e10      	ldr	r6, [pc, #64]	; (13380 <RADIO_ScanHandler+0x5c>)
   1333e:	334c      	adds	r3, #76	; 0x4c
   13340:	2201      	movs	r2, #1
   13342:	0021      	movs	r1, r4
   13344:	0020      	movs	r0, r4
   13346:	801c      	strh	r4, [r3, #0]
   13348:	47b0      	blx	r6
   1334a:	4b0e      	ldr	r3, [pc, #56]	; (13384 <RADIO_ScanHandler+0x60>)
   1334c:	2109      	movs	r1, #9
   1334e:	2012      	movs	r0, #18
   13350:	4798      	blx	r3
   13352:	3550      	adds	r5, #80	; 0x50
   13354:	0022      	movs	r2, r4
   13356:	0021      	movs	r1, r4
   13358:	2005      	movs	r0, #5
   1335a:	47b0      	blx	r6
   1335c:	7828      	ldrb	r0, [r5, #0]
   1335e:	4b0a      	ldr	r3, [pc, #40]	; (13388 <RADIO_ScanHandler+0x64>)
   13360:	4d0a      	ldr	r5, [pc, #40]	; (1338c <RADIO_ScanHandler+0x68>)
   13362:	9400      	str	r4, [sp, #0]
   13364:	0022      	movs	r2, r4
   13366:	490a      	ldr	r1, [pc, #40]	; (13390 <RADIO_ScanHandler+0x6c>)
   13368:	47a8      	blx	r5
   1336a:	0020      	movs	r0, r4
   1336c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1336e:	46c0      	nop			; (mov r8, r8)
   13370:	0000f271 	.word	0x0000f271
   13374:	0000eeb5 	.word	0x0000eeb5
   13378:	20002d78 	.word	0x20002d78
   1337c:	0000e5f9 	.word	0x0000e5f9
   13380:	0000d741 	.word	0x0000d741
   13384:	0000c519 	.word	0x0000c519
   13388:	00013295 	.word	0x00013295
   1338c:	0000d105 	.word	0x0000d105
   13390:	00002328 	.word	0x00002328

00013394 <radioScanDoneHandler>:
   13394:	b530      	push	{r4, r5, lr}
   13396:	4a18      	ldr	r2, [pc, #96]	; (133f8 <radioScanDoneHandler+0x64>)
   13398:	4918      	ldr	r1, [pc, #96]	; (133fc <radioScanDoneHandler+0x68>)
   1339a:	8813      	ldrh	r3, [r2, #0]
   1339c:	b085      	sub	sp, #20
   1339e:	400b      	ands	r3, r1
   133a0:	8013      	strh	r3, [r2, #0]
   133a2:	2200      	movs	r2, #0
   133a4:	4b16      	ldr	r3, [pc, #88]	; (13400 <radioScanDoneHandler+0x6c>)
   133a6:	0011      	movs	r1, r2
   133a8:	0010      	movs	r0, r2
   133aa:	4798      	blx	r3
   133ac:	2000      	movs	r0, #0
   133ae:	4b15      	ldr	r3, [pc, #84]	; (13404 <radioScanDoneHandler+0x70>)
   133b0:	4798      	blx	r3
   133b2:	4b15      	ldr	r3, [pc, #84]	; (13408 <radioScanDoneHandler+0x74>)
   133b4:	4798      	blx	r3
   133b6:	4c15      	ldr	r4, [pc, #84]	; (1340c <radioScanDoneHandler+0x78>)
   133b8:	0023      	movs	r3, r4
   133ba:	334c      	adds	r3, #76	; 0x4c
   133bc:	2100      	movs	r1, #0
   133be:	5e59      	ldrsh	r1, [r3, r1]
   133c0:	233e      	movs	r3, #62	; 0x3e
   133c2:	5ee2      	ldrsh	r2, [r4, r3]
   133c4:	4b12      	ldr	r3, [pc, #72]	; (13410 <radioScanDoneHandler+0x7c>)
   133c6:	4291      	cmp	r1, r2
   133c8:	da06      	bge.n	133d8 <radioScanDoneHandler+0x44>
   133ca:	2002      	movs	r0, #2
   133cc:	4798      	blx	r3
   133ce:	4b11      	ldr	r3, [pc, #68]	; (13414 <radioScanDoneHandler+0x80>)
   133d0:	4798      	blx	r3
   133d2:	2000      	movs	r0, #0
   133d4:	b005      	add	sp, #20
   133d6:	bd30      	pop	{r4, r5, pc}
   133d8:	2207      	movs	r2, #7
   133da:	ad01      	add	r5, sp, #4
   133dc:	2001      	movs	r0, #1
   133de:	702a      	strb	r2, [r5, #0]
   133e0:	4798      	blx	r3
   133e2:	4b0d      	ldr	r3, [pc, #52]	; (13418 <radioScanDoneHandler+0x84>)
   133e4:	781b      	ldrb	r3, [r3, #0]
   133e6:	079b      	lsls	r3, r3, #30
   133e8:	d5f3      	bpl.n	133d2 <radioScanDoneHandler+0x3e>
   133ea:	6923      	ldr	r3, [r4, #16]
   133ec:	2b00      	cmp	r3, #0
   133ee:	d0f0      	beq.n	133d2 <radioScanDoneHandler+0x3e>
   133f0:	0029      	movs	r1, r5
   133f2:	2002      	movs	r0, #2
   133f4:	4798      	blx	r3
   133f6:	e7ec      	b.n	133d2 <radioScanDoneHandler+0x3e>
   133f8:	20003044 	.word	0x20003044
   133fc:	fffffdff 	.word	0xfffffdff
   13400:	0000d741 	.word	0x0000d741
   13404:	0000eee9 	.word	0x0000eee9
   13408:	0000f3a1 	.word	0x0000f3a1
   1340c:	20002d78 	.word	0x20002d78
   13410:	0000ecad 	.word	0x0000ecad
   13414:	0000f66d 	.word	0x0000f66d
   13418:	20003046 	.word	0x20003046

0001341c <common_tc_read_count>:
   1341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1341e:	4b0d      	ldr	r3, [pc, #52]	; (13454 <common_tc_read_count+0x38>)
   13420:	4798      	blx	r3
   13422:	4b0d      	ldr	r3, [pc, #52]	; (13458 <common_tc_read_count+0x3c>)
   13424:	781b      	ldrb	r3, [r3, #0]
   13426:	2b00      	cmp	r3, #0
   13428:	d00e      	beq.n	13448 <common_tc_read_count+0x2c>
   1342a:	4b0c      	ldr	r3, [pc, #48]	; (1345c <common_tc_read_count+0x40>)
   1342c:	781d      	ldrb	r5, [r3, #0]
   1342e:	4b0a      	ldr	r3, [pc, #40]	; (13458 <common_tc_read_count+0x3c>)
   13430:	781f      	ldrb	r7, [r3, #0]
   13432:	4c0b      	ldr	r4, [pc, #44]	; (13460 <common_tc_read_count+0x44>)
   13434:	1c29      	adds	r1, r5, #0
   13436:	47a0      	blx	r4
   13438:	1c06      	adds	r6, r0, #0
   1343a:	480a      	ldr	r0, [pc, #40]	; (13464 <common_tc_read_count+0x48>)
   1343c:	1c29      	adds	r1, r5, #0
   1343e:	47a0      	blx	r4
   13440:	4378      	muls	r0, r7
   13442:	1830      	adds	r0, r6, r0
   13444:	b280      	uxth	r0, r0
   13446:	e004      	b.n	13452 <common_tc_read_count+0x36>
   13448:	4b04      	ldr	r3, [pc, #16]	; (1345c <common_tc_read_count+0x40>)
   1344a:	7819      	ldrb	r1, [r3, #0]
   1344c:	4b04      	ldr	r3, [pc, #16]	; (13460 <common_tc_read_count+0x44>)
   1344e:	4798      	blx	r3
   13450:	b280      	uxth	r0, r0
   13452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13454:	0000d991 	.word	0x0000d991
   13458:	20001ec8 	.word	0x20001ec8
   1345c:	200034d4 	.word	0x200034d4
   13460:	000136e9 	.word	0x000136e9
   13464:	0000ffff 	.word	0x0000ffff

00013468 <common_tc_compare_stop>:
   13468:	b508      	push	{r3, lr}
   1346a:	4b05      	ldr	r3, [pc, #20]	; (13480 <common_tc_compare_stop+0x18>)
   1346c:	4798      	blx	r3
   1346e:	4b05      	ldr	r3, [pc, #20]	; (13484 <common_tc_compare_stop+0x1c>)
   13470:	4798      	blx	r3
   13472:	4b05      	ldr	r3, [pc, #20]	; (13488 <common_tc_compare_stop+0x20>)
   13474:	2200      	movs	r2, #0
   13476:	605a      	str	r2, [r3, #4]
   13478:	811a      	strh	r2, [r3, #8]
   1347a:	4b04      	ldr	r3, [pc, #16]	; (1348c <common_tc_compare_stop+0x24>)
   1347c:	4798      	blx	r3
   1347e:	bd08      	pop	{r3, pc}
   13480:	0000d9a5 	.word	0x0000d9a5
   13484:	0000da5d 	.word	0x0000da5d
   13488:	20001ec8 	.word	0x20001ec8
   1348c:	0000da81 	.word	0x0000da81

00013490 <common_tc_delay>:
   13490:	b510      	push	{r4, lr}
   13492:	1c04      	adds	r4, r0, #0
   13494:	4b13      	ldr	r3, [pc, #76]	; (134e4 <common_tc_delay+0x54>)
   13496:	4798      	blx	r3
   13498:	4b13      	ldr	r3, [pc, #76]	; (134e8 <common_tc_delay+0x58>)
   1349a:	781a      	ldrb	r2, [r3, #0]
   1349c:	4362      	muls	r2, r4
   1349e:	1881      	adds	r1, r0, r2
   134a0:	4b12      	ldr	r3, [pc, #72]	; (134ec <common_tc_delay+0x5c>)
   134a2:	6059      	str	r1, [r3, #4]
   134a4:	6859      	ldr	r1, [r3, #4]
   134a6:	0c09      	lsrs	r1, r1, #16
   134a8:	6059      	str	r1, [r3, #4]
   134aa:	685b      	ldr	r3, [r3, #4]
   134ac:	2b00      	cmp	r3, #0
   134ae:	d007      	beq.n	134c0 <common_tc_delay+0x30>
   134b0:	4b0e      	ldr	r3, [pc, #56]	; (134ec <common_tc_delay+0x5c>)
   134b2:	6859      	ldr	r1, [r3, #4]
   134b4:	3201      	adds	r2, #1
   134b6:	1880      	adds	r0, r0, r2
   134b8:	8118      	strh	r0, [r3, #8]
   134ba:	4b0d      	ldr	r3, [pc, #52]	; (134f0 <common_tc_delay+0x60>)
   134bc:	4798      	blx	r3
   134be:	e004      	b.n	134ca <common_tc_delay+0x3a>
   134c0:	1882      	adds	r2, r0, r2
   134c2:	4b0a      	ldr	r3, [pc, #40]	; (134ec <common_tc_delay+0x5c>)
   134c4:	811a      	strh	r2, [r3, #8]
   134c6:	4b0b      	ldr	r3, [pc, #44]	; (134f4 <common_tc_delay+0x64>)
   134c8:	4798      	blx	r3
   134ca:	4b08      	ldr	r3, [pc, #32]	; (134ec <common_tc_delay+0x5c>)
   134cc:	891b      	ldrh	r3, [r3, #8]
   134ce:	2b63      	cmp	r3, #99	; 0x63
   134d0:	d802      	bhi.n	134d8 <common_tc_delay+0x48>
   134d2:	3364      	adds	r3, #100	; 0x64
   134d4:	4a05      	ldr	r2, [pc, #20]	; (134ec <common_tc_delay+0x5c>)
   134d6:	8113      	strh	r3, [r2, #8]
   134d8:	4b04      	ldr	r3, [pc, #16]	; (134ec <common_tc_delay+0x5c>)
   134da:	8918      	ldrh	r0, [r3, #8]
   134dc:	4b06      	ldr	r3, [pc, #24]	; (134f8 <common_tc_delay+0x68>)
   134de:	4798      	blx	r3
   134e0:	bd10      	pop	{r4, pc}
   134e2:	46c0      	nop			; (mov r8, r8)
   134e4:	0000d991 	.word	0x0000d991
   134e8:	200034d4 	.word	0x200034d4
   134ec:	20001ec8 	.word	0x20001ec8
   134f0:	0000d9a5 	.word	0x0000d9a5
   134f4:	0000d9b9 	.word	0x0000d9b9
   134f8:	0000da45 	.word	0x0000da45

000134fc <common_tc_init>:
   134fc:	b508      	push	{r3, lr}
   134fe:	2200      	movs	r2, #0
   13500:	4b03      	ldr	r3, [pc, #12]	; (13510 <common_tc_init+0x14>)
   13502:	701a      	strb	r2, [r3, #0]
   13504:	4b03      	ldr	r3, [pc, #12]	; (13514 <common_tc_init+0x18>)
   13506:	4798      	blx	r3
   13508:	4b03      	ldr	r3, [pc, #12]	; (13518 <common_tc_init+0x1c>)
   1350a:	7018      	strb	r0, [r3, #0]
   1350c:	bd08      	pop	{r3, pc}
   1350e:	46c0      	nop			; (mov r8, r8)
   13510:	20001ec8 	.word	0x20001ec8
   13514:	0000da99 	.word	0x0000da99
   13518:	200034d4 	.word	0x200034d4

0001351c <tmr_ovf_callback>:
   1351c:	b508      	push	{r3, lr}
   1351e:	4b0e      	ldr	r3, [pc, #56]	; (13558 <tmr_ovf_callback+0x3c>)
   13520:	685b      	ldr	r3, [r3, #4]
   13522:	2b00      	cmp	r3, #0
   13524:	d007      	beq.n	13536 <tmr_ovf_callback+0x1a>
   13526:	4a0c      	ldr	r2, [pc, #48]	; (13558 <tmr_ovf_callback+0x3c>)
   13528:	6853      	ldr	r3, [r2, #4]
   1352a:	3b01      	subs	r3, #1
   1352c:	6053      	str	r3, [r2, #4]
   1352e:	2b00      	cmp	r3, #0
   13530:	d101      	bne.n	13536 <tmr_ovf_callback+0x1a>
   13532:	4b0a      	ldr	r3, [pc, #40]	; (1355c <tmr_ovf_callback+0x40>)
   13534:	4798      	blx	r3
   13536:	4a08      	ldr	r2, [pc, #32]	; (13558 <tmr_ovf_callback+0x3c>)
   13538:	7813      	ldrb	r3, [r2, #0]
   1353a:	3301      	adds	r3, #1
   1353c:	b2db      	uxtb	r3, r3
   1353e:	7013      	strb	r3, [r2, #0]
   13540:	4a07      	ldr	r2, [pc, #28]	; (13560 <tmr_ovf_callback+0x44>)
   13542:	7812      	ldrb	r2, [r2, #0]
   13544:	429a      	cmp	r2, r3
   13546:	d806      	bhi.n	13556 <tmr_ovf_callback+0x3a>
   13548:	4b03      	ldr	r3, [pc, #12]	; (13558 <tmr_ovf_callback+0x3c>)
   1354a:	2200      	movs	r2, #0
   1354c:	701a      	strb	r2, [r3, #0]
   1354e:	68db      	ldr	r3, [r3, #12]
   13550:	2b00      	cmp	r3, #0
   13552:	d000      	beq.n	13556 <tmr_ovf_callback+0x3a>
   13554:	4798      	blx	r3
   13556:	bd08      	pop	{r3, pc}
   13558:	20001ec8 	.word	0x20001ec8
   1355c:	0000d9b9 	.word	0x0000d9b9
   13560:	200034d4 	.word	0x200034d4

00013564 <tmr_cca_callback>:
   13564:	b508      	push	{r3, lr}
   13566:	4b04      	ldr	r3, [pc, #16]	; (13578 <tmr_cca_callback+0x14>)
   13568:	4798      	blx	r3
   1356a:	4b04      	ldr	r3, [pc, #16]	; (1357c <tmr_cca_callback+0x18>)
   1356c:	691b      	ldr	r3, [r3, #16]
   1356e:	2b00      	cmp	r3, #0
   13570:	d000      	beq.n	13574 <tmr_cca_callback+0x10>
   13572:	4798      	blx	r3
   13574:	bd08      	pop	{r3, pc}
   13576:	46c0      	nop			; (mov r8, r8)
   13578:	0000d9a5 	.word	0x0000d9a5
   1357c:	20001ec8 	.word	0x20001ec8

00013580 <set_common_tc_overflow_callback>:
   13580:	4b01      	ldr	r3, [pc, #4]	; (13588 <set_common_tc_overflow_callback+0x8>)
   13582:	60d8      	str	r0, [r3, #12]
   13584:	4770      	bx	lr
   13586:	46c0      	nop			; (mov r8, r8)
   13588:	20001ec8 	.word	0x20001ec8

0001358c <set_common_tc_expiry_callback>:
   1358c:	4b01      	ldr	r3, [pc, #4]	; (13594 <set_common_tc_expiry_callback+0x8>)
   1358e:	6118      	str	r0, [r3, #16]
   13590:	4770      	bx	lr
   13592:	46c0      	nop			; (mov r8, r8)
   13594:	20001ec8 	.word	0x20001ec8

00013598 <__gnu_thumb1_case_uqi>:
   13598:	b402      	push	{r1}
   1359a:	4671      	mov	r1, lr
   1359c:	0849      	lsrs	r1, r1, #1
   1359e:	0049      	lsls	r1, r1, #1
   135a0:	5c09      	ldrb	r1, [r1, r0]
   135a2:	0049      	lsls	r1, r1, #1
   135a4:	448e      	add	lr, r1
   135a6:	bc02      	pop	{r1}
   135a8:	4770      	bx	lr
   135aa:	46c0      	nop			; (mov r8, r8)

000135ac <__gnu_thumb1_case_shi>:
   135ac:	b403      	push	{r0, r1}
   135ae:	4671      	mov	r1, lr
   135b0:	0849      	lsrs	r1, r1, #1
   135b2:	0040      	lsls	r0, r0, #1
   135b4:	0049      	lsls	r1, r1, #1
   135b6:	5e09      	ldrsh	r1, [r1, r0]
   135b8:	0049      	lsls	r1, r1, #1
   135ba:	448e      	add	lr, r1
   135bc:	bc03      	pop	{r0, r1}
   135be:	4770      	bx	lr

000135c0 <__gnu_thumb1_case_uhi>:
   135c0:	b403      	push	{r0, r1}
   135c2:	4671      	mov	r1, lr
   135c4:	0849      	lsrs	r1, r1, #1
   135c6:	0040      	lsls	r0, r0, #1
   135c8:	0049      	lsls	r1, r1, #1
   135ca:	5a09      	ldrh	r1, [r1, r0]
   135cc:	0049      	lsls	r1, r1, #1
   135ce:	448e      	add	lr, r1
   135d0:	bc03      	pop	{r0, r1}
   135d2:	4770      	bx	lr

000135d4 <__udivsi3>:
   135d4:	2200      	movs	r2, #0
   135d6:	0843      	lsrs	r3, r0, #1
   135d8:	428b      	cmp	r3, r1
   135da:	d374      	bcc.n	136c6 <__udivsi3+0xf2>
   135dc:	0903      	lsrs	r3, r0, #4
   135de:	428b      	cmp	r3, r1
   135e0:	d35f      	bcc.n	136a2 <__udivsi3+0xce>
   135e2:	0a03      	lsrs	r3, r0, #8
   135e4:	428b      	cmp	r3, r1
   135e6:	d344      	bcc.n	13672 <__udivsi3+0x9e>
   135e8:	0b03      	lsrs	r3, r0, #12
   135ea:	428b      	cmp	r3, r1
   135ec:	d328      	bcc.n	13640 <__udivsi3+0x6c>
   135ee:	0c03      	lsrs	r3, r0, #16
   135f0:	428b      	cmp	r3, r1
   135f2:	d30d      	bcc.n	13610 <__udivsi3+0x3c>
   135f4:	22ff      	movs	r2, #255	; 0xff
   135f6:	0209      	lsls	r1, r1, #8
   135f8:	ba12      	rev	r2, r2
   135fa:	0c03      	lsrs	r3, r0, #16
   135fc:	428b      	cmp	r3, r1
   135fe:	d302      	bcc.n	13606 <__udivsi3+0x32>
   13600:	1212      	asrs	r2, r2, #8
   13602:	0209      	lsls	r1, r1, #8
   13604:	d065      	beq.n	136d2 <__udivsi3+0xfe>
   13606:	0b03      	lsrs	r3, r0, #12
   13608:	428b      	cmp	r3, r1
   1360a:	d319      	bcc.n	13640 <__udivsi3+0x6c>
   1360c:	e000      	b.n	13610 <__udivsi3+0x3c>
   1360e:	0a09      	lsrs	r1, r1, #8
   13610:	0bc3      	lsrs	r3, r0, #15
   13612:	428b      	cmp	r3, r1
   13614:	d301      	bcc.n	1361a <__udivsi3+0x46>
   13616:	03cb      	lsls	r3, r1, #15
   13618:	1ac0      	subs	r0, r0, r3
   1361a:	4152      	adcs	r2, r2
   1361c:	0b83      	lsrs	r3, r0, #14
   1361e:	428b      	cmp	r3, r1
   13620:	d301      	bcc.n	13626 <__udivsi3+0x52>
   13622:	038b      	lsls	r3, r1, #14
   13624:	1ac0      	subs	r0, r0, r3
   13626:	4152      	adcs	r2, r2
   13628:	0b43      	lsrs	r3, r0, #13
   1362a:	428b      	cmp	r3, r1
   1362c:	d301      	bcc.n	13632 <__udivsi3+0x5e>
   1362e:	034b      	lsls	r3, r1, #13
   13630:	1ac0      	subs	r0, r0, r3
   13632:	4152      	adcs	r2, r2
   13634:	0b03      	lsrs	r3, r0, #12
   13636:	428b      	cmp	r3, r1
   13638:	d301      	bcc.n	1363e <__udivsi3+0x6a>
   1363a:	030b      	lsls	r3, r1, #12
   1363c:	1ac0      	subs	r0, r0, r3
   1363e:	4152      	adcs	r2, r2
   13640:	0ac3      	lsrs	r3, r0, #11
   13642:	428b      	cmp	r3, r1
   13644:	d301      	bcc.n	1364a <__udivsi3+0x76>
   13646:	02cb      	lsls	r3, r1, #11
   13648:	1ac0      	subs	r0, r0, r3
   1364a:	4152      	adcs	r2, r2
   1364c:	0a83      	lsrs	r3, r0, #10
   1364e:	428b      	cmp	r3, r1
   13650:	d301      	bcc.n	13656 <__udivsi3+0x82>
   13652:	028b      	lsls	r3, r1, #10
   13654:	1ac0      	subs	r0, r0, r3
   13656:	4152      	adcs	r2, r2
   13658:	0a43      	lsrs	r3, r0, #9
   1365a:	428b      	cmp	r3, r1
   1365c:	d301      	bcc.n	13662 <__udivsi3+0x8e>
   1365e:	024b      	lsls	r3, r1, #9
   13660:	1ac0      	subs	r0, r0, r3
   13662:	4152      	adcs	r2, r2
   13664:	0a03      	lsrs	r3, r0, #8
   13666:	428b      	cmp	r3, r1
   13668:	d301      	bcc.n	1366e <__udivsi3+0x9a>
   1366a:	020b      	lsls	r3, r1, #8
   1366c:	1ac0      	subs	r0, r0, r3
   1366e:	4152      	adcs	r2, r2
   13670:	d2cd      	bcs.n	1360e <__udivsi3+0x3a>
   13672:	09c3      	lsrs	r3, r0, #7
   13674:	428b      	cmp	r3, r1
   13676:	d301      	bcc.n	1367c <__udivsi3+0xa8>
   13678:	01cb      	lsls	r3, r1, #7
   1367a:	1ac0      	subs	r0, r0, r3
   1367c:	4152      	adcs	r2, r2
   1367e:	0983      	lsrs	r3, r0, #6
   13680:	428b      	cmp	r3, r1
   13682:	d301      	bcc.n	13688 <__udivsi3+0xb4>
   13684:	018b      	lsls	r3, r1, #6
   13686:	1ac0      	subs	r0, r0, r3
   13688:	4152      	adcs	r2, r2
   1368a:	0943      	lsrs	r3, r0, #5
   1368c:	428b      	cmp	r3, r1
   1368e:	d301      	bcc.n	13694 <__udivsi3+0xc0>
   13690:	014b      	lsls	r3, r1, #5
   13692:	1ac0      	subs	r0, r0, r3
   13694:	4152      	adcs	r2, r2
   13696:	0903      	lsrs	r3, r0, #4
   13698:	428b      	cmp	r3, r1
   1369a:	d301      	bcc.n	136a0 <__udivsi3+0xcc>
   1369c:	010b      	lsls	r3, r1, #4
   1369e:	1ac0      	subs	r0, r0, r3
   136a0:	4152      	adcs	r2, r2
   136a2:	08c3      	lsrs	r3, r0, #3
   136a4:	428b      	cmp	r3, r1
   136a6:	d301      	bcc.n	136ac <__udivsi3+0xd8>
   136a8:	00cb      	lsls	r3, r1, #3
   136aa:	1ac0      	subs	r0, r0, r3
   136ac:	4152      	adcs	r2, r2
   136ae:	0883      	lsrs	r3, r0, #2
   136b0:	428b      	cmp	r3, r1
   136b2:	d301      	bcc.n	136b8 <__udivsi3+0xe4>
   136b4:	008b      	lsls	r3, r1, #2
   136b6:	1ac0      	subs	r0, r0, r3
   136b8:	4152      	adcs	r2, r2
   136ba:	0843      	lsrs	r3, r0, #1
   136bc:	428b      	cmp	r3, r1
   136be:	d301      	bcc.n	136c4 <__udivsi3+0xf0>
   136c0:	004b      	lsls	r3, r1, #1
   136c2:	1ac0      	subs	r0, r0, r3
   136c4:	4152      	adcs	r2, r2
   136c6:	1a41      	subs	r1, r0, r1
   136c8:	d200      	bcs.n	136cc <__udivsi3+0xf8>
   136ca:	4601      	mov	r1, r0
   136cc:	4152      	adcs	r2, r2
   136ce:	4610      	mov	r0, r2
   136d0:	4770      	bx	lr
   136d2:	e7ff      	b.n	136d4 <__udivsi3+0x100>
   136d4:	b501      	push	{r0, lr}
   136d6:	2000      	movs	r0, #0
   136d8:	f000 f8f0 	bl	138bc <__aeabi_idiv0>
   136dc:	bd02      	pop	{r1, pc}
   136de:	46c0      	nop			; (mov r8, r8)

000136e0 <__aeabi_uidivmod>:
   136e0:	2900      	cmp	r1, #0
   136e2:	d0f7      	beq.n	136d4 <__udivsi3+0x100>
   136e4:	e776      	b.n	135d4 <__udivsi3>
   136e6:	4770      	bx	lr

000136e8 <__divsi3>:
   136e8:	4603      	mov	r3, r0
   136ea:	430b      	orrs	r3, r1
   136ec:	d47f      	bmi.n	137ee <__divsi3+0x106>
   136ee:	2200      	movs	r2, #0
   136f0:	0843      	lsrs	r3, r0, #1
   136f2:	428b      	cmp	r3, r1
   136f4:	d374      	bcc.n	137e0 <__divsi3+0xf8>
   136f6:	0903      	lsrs	r3, r0, #4
   136f8:	428b      	cmp	r3, r1
   136fa:	d35f      	bcc.n	137bc <__divsi3+0xd4>
   136fc:	0a03      	lsrs	r3, r0, #8
   136fe:	428b      	cmp	r3, r1
   13700:	d344      	bcc.n	1378c <__divsi3+0xa4>
   13702:	0b03      	lsrs	r3, r0, #12
   13704:	428b      	cmp	r3, r1
   13706:	d328      	bcc.n	1375a <__divsi3+0x72>
   13708:	0c03      	lsrs	r3, r0, #16
   1370a:	428b      	cmp	r3, r1
   1370c:	d30d      	bcc.n	1372a <__divsi3+0x42>
   1370e:	22ff      	movs	r2, #255	; 0xff
   13710:	0209      	lsls	r1, r1, #8
   13712:	ba12      	rev	r2, r2
   13714:	0c03      	lsrs	r3, r0, #16
   13716:	428b      	cmp	r3, r1
   13718:	d302      	bcc.n	13720 <__divsi3+0x38>
   1371a:	1212      	asrs	r2, r2, #8
   1371c:	0209      	lsls	r1, r1, #8
   1371e:	d065      	beq.n	137ec <__divsi3+0x104>
   13720:	0b03      	lsrs	r3, r0, #12
   13722:	428b      	cmp	r3, r1
   13724:	d319      	bcc.n	1375a <__divsi3+0x72>
   13726:	e000      	b.n	1372a <__divsi3+0x42>
   13728:	0a09      	lsrs	r1, r1, #8
   1372a:	0bc3      	lsrs	r3, r0, #15
   1372c:	428b      	cmp	r3, r1
   1372e:	d301      	bcc.n	13734 <__divsi3+0x4c>
   13730:	03cb      	lsls	r3, r1, #15
   13732:	1ac0      	subs	r0, r0, r3
   13734:	4152      	adcs	r2, r2
   13736:	0b83      	lsrs	r3, r0, #14
   13738:	428b      	cmp	r3, r1
   1373a:	d301      	bcc.n	13740 <__divsi3+0x58>
   1373c:	038b      	lsls	r3, r1, #14
   1373e:	1ac0      	subs	r0, r0, r3
   13740:	4152      	adcs	r2, r2
   13742:	0b43      	lsrs	r3, r0, #13
   13744:	428b      	cmp	r3, r1
   13746:	d301      	bcc.n	1374c <__divsi3+0x64>
   13748:	034b      	lsls	r3, r1, #13
   1374a:	1ac0      	subs	r0, r0, r3
   1374c:	4152      	adcs	r2, r2
   1374e:	0b03      	lsrs	r3, r0, #12
   13750:	428b      	cmp	r3, r1
   13752:	d301      	bcc.n	13758 <__divsi3+0x70>
   13754:	030b      	lsls	r3, r1, #12
   13756:	1ac0      	subs	r0, r0, r3
   13758:	4152      	adcs	r2, r2
   1375a:	0ac3      	lsrs	r3, r0, #11
   1375c:	428b      	cmp	r3, r1
   1375e:	d301      	bcc.n	13764 <__divsi3+0x7c>
   13760:	02cb      	lsls	r3, r1, #11
   13762:	1ac0      	subs	r0, r0, r3
   13764:	4152      	adcs	r2, r2
   13766:	0a83      	lsrs	r3, r0, #10
   13768:	428b      	cmp	r3, r1
   1376a:	d301      	bcc.n	13770 <__divsi3+0x88>
   1376c:	028b      	lsls	r3, r1, #10
   1376e:	1ac0      	subs	r0, r0, r3
   13770:	4152      	adcs	r2, r2
   13772:	0a43      	lsrs	r3, r0, #9
   13774:	428b      	cmp	r3, r1
   13776:	d301      	bcc.n	1377c <__divsi3+0x94>
   13778:	024b      	lsls	r3, r1, #9
   1377a:	1ac0      	subs	r0, r0, r3
   1377c:	4152      	adcs	r2, r2
   1377e:	0a03      	lsrs	r3, r0, #8
   13780:	428b      	cmp	r3, r1
   13782:	d301      	bcc.n	13788 <__divsi3+0xa0>
   13784:	020b      	lsls	r3, r1, #8
   13786:	1ac0      	subs	r0, r0, r3
   13788:	4152      	adcs	r2, r2
   1378a:	d2cd      	bcs.n	13728 <__divsi3+0x40>
   1378c:	09c3      	lsrs	r3, r0, #7
   1378e:	428b      	cmp	r3, r1
   13790:	d301      	bcc.n	13796 <__divsi3+0xae>
   13792:	01cb      	lsls	r3, r1, #7
   13794:	1ac0      	subs	r0, r0, r3
   13796:	4152      	adcs	r2, r2
   13798:	0983      	lsrs	r3, r0, #6
   1379a:	428b      	cmp	r3, r1
   1379c:	d301      	bcc.n	137a2 <__divsi3+0xba>
   1379e:	018b      	lsls	r3, r1, #6
   137a0:	1ac0      	subs	r0, r0, r3
   137a2:	4152      	adcs	r2, r2
   137a4:	0943      	lsrs	r3, r0, #5
   137a6:	428b      	cmp	r3, r1
   137a8:	d301      	bcc.n	137ae <__divsi3+0xc6>
   137aa:	014b      	lsls	r3, r1, #5
   137ac:	1ac0      	subs	r0, r0, r3
   137ae:	4152      	adcs	r2, r2
   137b0:	0903      	lsrs	r3, r0, #4
   137b2:	428b      	cmp	r3, r1
   137b4:	d301      	bcc.n	137ba <__divsi3+0xd2>
   137b6:	010b      	lsls	r3, r1, #4
   137b8:	1ac0      	subs	r0, r0, r3
   137ba:	4152      	adcs	r2, r2
   137bc:	08c3      	lsrs	r3, r0, #3
   137be:	428b      	cmp	r3, r1
   137c0:	d301      	bcc.n	137c6 <__divsi3+0xde>
   137c2:	00cb      	lsls	r3, r1, #3
   137c4:	1ac0      	subs	r0, r0, r3
   137c6:	4152      	adcs	r2, r2
   137c8:	0883      	lsrs	r3, r0, #2
   137ca:	428b      	cmp	r3, r1
   137cc:	d301      	bcc.n	137d2 <__divsi3+0xea>
   137ce:	008b      	lsls	r3, r1, #2
   137d0:	1ac0      	subs	r0, r0, r3
   137d2:	4152      	adcs	r2, r2
   137d4:	0843      	lsrs	r3, r0, #1
   137d6:	428b      	cmp	r3, r1
   137d8:	d301      	bcc.n	137de <__divsi3+0xf6>
   137da:	004b      	lsls	r3, r1, #1
   137dc:	1ac0      	subs	r0, r0, r3
   137de:	4152      	adcs	r2, r2
   137e0:	1a41      	subs	r1, r0, r1
   137e2:	d200      	bcs.n	137e6 <__divsi3+0xfe>
   137e4:	4601      	mov	r1, r0
   137e6:	4152      	adcs	r2, r2
   137e8:	4610      	mov	r0, r2
   137ea:	4770      	bx	lr
   137ec:	e05d      	b.n	138aa <__divsi3+0x1c2>
   137ee:	0fca      	lsrs	r2, r1, #31
   137f0:	d000      	beq.n	137f4 <__divsi3+0x10c>
   137f2:	4249      	negs	r1, r1
   137f4:	1003      	asrs	r3, r0, #32
   137f6:	d300      	bcc.n	137fa <__divsi3+0x112>
   137f8:	4240      	negs	r0, r0
   137fa:	4053      	eors	r3, r2
   137fc:	2200      	movs	r2, #0
   137fe:	469c      	mov	ip, r3
   13800:	0903      	lsrs	r3, r0, #4
   13802:	428b      	cmp	r3, r1
   13804:	d32d      	bcc.n	13862 <__divsi3+0x17a>
   13806:	0a03      	lsrs	r3, r0, #8
   13808:	428b      	cmp	r3, r1
   1380a:	d312      	bcc.n	13832 <__divsi3+0x14a>
   1380c:	22fc      	movs	r2, #252	; 0xfc
   1380e:	0189      	lsls	r1, r1, #6
   13810:	ba12      	rev	r2, r2
   13812:	0a03      	lsrs	r3, r0, #8
   13814:	428b      	cmp	r3, r1
   13816:	d30c      	bcc.n	13832 <__divsi3+0x14a>
   13818:	0189      	lsls	r1, r1, #6
   1381a:	1192      	asrs	r2, r2, #6
   1381c:	428b      	cmp	r3, r1
   1381e:	d308      	bcc.n	13832 <__divsi3+0x14a>
   13820:	0189      	lsls	r1, r1, #6
   13822:	1192      	asrs	r2, r2, #6
   13824:	428b      	cmp	r3, r1
   13826:	d304      	bcc.n	13832 <__divsi3+0x14a>
   13828:	0189      	lsls	r1, r1, #6
   1382a:	d03a      	beq.n	138a2 <__divsi3+0x1ba>
   1382c:	1192      	asrs	r2, r2, #6
   1382e:	e000      	b.n	13832 <__divsi3+0x14a>
   13830:	0989      	lsrs	r1, r1, #6
   13832:	09c3      	lsrs	r3, r0, #7
   13834:	428b      	cmp	r3, r1
   13836:	d301      	bcc.n	1383c <__divsi3+0x154>
   13838:	01cb      	lsls	r3, r1, #7
   1383a:	1ac0      	subs	r0, r0, r3
   1383c:	4152      	adcs	r2, r2
   1383e:	0983      	lsrs	r3, r0, #6
   13840:	428b      	cmp	r3, r1
   13842:	d301      	bcc.n	13848 <__divsi3+0x160>
   13844:	018b      	lsls	r3, r1, #6
   13846:	1ac0      	subs	r0, r0, r3
   13848:	4152      	adcs	r2, r2
   1384a:	0943      	lsrs	r3, r0, #5
   1384c:	428b      	cmp	r3, r1
   1384e:	d301      	bcc.n	13854 <__divsi3+0x16c>
   13850:	014b      	lsls	r3, r1, #5
   13852:	1ac0      	subs	r0, r0, r3
   13854:	4152      	adcs	r2, r2
   13856:	0903      	lsrs	r3, r0, #4
   13858:	428b      	cmp	r3, r1
   1385a:	d301      	bcc.n	13860 <__divsi3+0x178>
   1385c:	010b      	lsls	r3, r1, #4
   1385e:	1ac0      	subs	r0, r0, r3
   13860:	4152      	adcs	r2, r2
   13862:	08c3      	lsrs	r3, r0, #3
   13864:	428b      	cmp	r3, r1
   13866:	d301      	bcc.n	1386c <__divsi3+0x184>
   13868:	00cb      	lsls	r3, r1, #3
   1386a:	1ac0      	subs	r0, r0, r3
   1386c:	4152      	adcs	r2, r2
   1386e:	0883      	lsrs	r3, r0, #2
   13870:	428b      	cmp	r3, r1
   13872:	d301      	bcc.n	13878 <__divsi3+0x190>
   13874:	008b      	lsls	r3, r1, #2
   13876:	1ac0      	subs	r0, r0, r3
   13878:	4152      	adcs	r2, r2
   1387a:	d2d9      	bcs.n	13830 <__divsi3+0x148>
   1387c:	0843      	lsrs	r3, r0, #1
   1387e:	428b      	cmp	r3, r1
   13880:	d301      	bcc.n	13886 <__divsi3+0x19e>
   13882:	004b      	lsls	r3, r1, #1
   13884:	1ac0      	subs	r0, r0, r3
   13886:	4152      	adcs	r2, r2
   13888:	1a41      	subs	r1, r0, r1
   1388a:	d200      	bcs.n	1388e <__divsi3+0x1a6>
   1388c:	4601      	mov	r1, r0
   1388e:	4663      	mov	r3, ip
   13890:	4152      	adcs	r2, r2
   13892:	105b      	asrs	r3, r3, #1
   13894:	4610      	mov	r0, r2
   13896:	d301      	bcc.n	1389c <__divsi3+0x1b4>
   13898:	4240      	negs	r0, r0
   1389a:	2b00      	cmp	r3, #0
   1389c:	d500      	bpl.n	138a0 <__divsi3+0x1b8>
   1389e:	4249      	negs	r1, r1
   138a0:	4770      	bx	lr
   138a2:	4663      	mov	r3, ip
   138a4:	105b      	asrs	r3, r3, #1
   138a6:	d300      	bcc.n	138aa <__divsi3+0x1c2>
   138a8:	4240      	negs	r0, r0
   138aa:	b501      	push	{r0, lr}
   138ac:	2000      	movs	r0, #0
   138ae:	f000 f805 	bl	138bc <__aeabi_idiv0>
   138b2:	bd02      	pop	{r1, pc}

000138b4 <__aeabi_idivmod>:
   138b4:	2900      	cmp	r1, #0
   138b6:	d0f8      	beq.n	138aa <__divsi3+0x1c2>
   138b8:	e716      	b.n	136e8 <__divsi3>
   138ba:	4770      	bx	lr

000138bc <__aeabi_idiv0>:
   138bc:	4770      	bx	lr
   138be:	46c0      	nop			; (mov r8, r8)

000138c0 <__aeabi_cdrcmple>:
   138c0:	4684      	mov	ip, r0
   138c2:	1c10      	adds	r0, r2, #0
   138c4:	4662      	mov	r2, ip
   138c6:	468c      	mov	ip, r1
   138c8:	1c19      	adds	r1, r3, #0
   138ca:	4663      	mov	r3, ip
   138cc:	e000      	b.n	138d0 <__aeabi_cdcmpeq>
   138ce:	46c0      	nop			; (mov r8, r8)

000138d0 <__aeabi_cdcmpeq>:
   138d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   138d2:	f001 ffa3 	bl	1581c <__ledf2>
   138d6:	2800      	cmp	r0, #0
   138d8:	d401      	bmi.n	138de <__aeabi_cdcmpeq+0xe>
   138da:	2100      	movs	r1, #0
   138dc:	42c8      	cmn	r0, r1
   138de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000138e0 <__aeabi_dcmpeq>:
   138e0:	b510      	push	{r4, lr}
   138e2:	f001 fefd 	bl	156e0 <__eqdf2>
   138e6:	4240      	negs	r0, r0
   138e8:	3001      	adds	r0, #1
   138ea:	bd10      	pop	{r4, pc}

000138ec <__aeabi_dcmplt>:
   138ec:	b510      	push	{r4, lr}
   138ee:	f001 ff95 	bl	1581c <__ledf2>
   138f2:	2800      	cmp	r0, #0
   138f4:	db01      	blt.n	138fa <__aeabi_dcmplt+0xe>
   138f6:	2000      	movs	r0, #0
   138f8:	bd10      	pop	{r4, pc}
   138fa:	2001      	movs	r0, #1
=======
    df86:	7123      	strb	r3, [r4, #4]
    df88:	e7f8      	b.n	df7c <pop_front+0x18>
    df8a:	46c0      	nop			; (mov r8, r8)
    df8c:	00013809 	.word	0x00013809

0000df90 <LORAWAN_TxHandler>:
    df90:	b5f0      	push	{r4, r5, r6, r7, lr}
    df92:	b087      	sub	sp, #28
    df94:	466b      	mov	r3, sp
    df96:	2501      	movs	r5, #1
    df98:	4c2f      	ldr	r4, [pc, #188]	; (e058 <LORAWAN_TxHandler+0xc8>)
    df9a:	701d      	strb	r5, [r3, #0]
    df9c:	0023      	movs	r3, r4
    df9e:	466a      	mov	r2, sp
    dfa0:	33e9      	adds	r3, #233	; 0xe9
    dfa2:	781b      	ldrb	r3, [r3, #0]
    dfa4:	4669      	mov	r1, sp
    dfa6:	7053      	strb	r3, [r2, #1]
    dfa8:	0023      	movs	r3, r4
    dfaa:	33e7      	adds	r3, #231	; 0xe7
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	202e      	movs	r0, #46	; 0x2e
    dfb0:	7093      	strb	r3, [r2, #2]
    dfb2:	aa03      	add	r2, sp, #12
    dfb4:	4b29      	ldr	r3, [pc, #164]	; (e05c <LORAWAN_TxHandler+0xcc>)
    dfb6:	4798      	blx	r3
    dfb8:	2808      	cmp	r0, #8
    dfba:	d004      	beq.n	dfc6 <LORAWAN_TxHandler+0x36>
    dfbc:	4b28      	ldr	r3, [pc, #160]	; (e060 <LORAWAN_TxHandler+0xd0>)
    dfbe:	4798      	blx	r3
    dfc0:	2000      	movs	r0, #0
    dfc2:	b007      	add	sp, #28
    dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfc6:	0023      	movs	r3, r4
    dfc8:	33fd      	adds	r3, #253	; 0xfd
    dfca:	781b      	ldrb	r3, [r3, #0]
    dfcc:	ae01      	add	r6, sp, #4
    dfce:	2b04      	cmp	r3, #4
    dfd0:	d103      	bne.n	dfda <LORAWAN_TxHandler+0x4a>
    dfd2:	0030      	movs	r0, r6
    dfd4:	4b23      	ldr	r3, [pc, #140]	; (e064 <LORAWAN_TxHandler+0xd4>)
    dfd6:	7035      	strb	r5, [r6, #0]
    dfd8:	4798      	blx	r3
    dfda:	4b23      	ldr	r3, [pc, #140]	; (e068 <LORAWAN_TxHandler+0xd8>)
    dfdc:	9803      	ldr	r0, [sp, #12]
    dfde:	9904      	ldr	r1, [sp, #16]
    dfe0:	9a05      	ldr	r2, [sp, #20]
    dfe2:	4798      	blx	r3
    dfe4:	0023      	movs	r3, r4
    dfe6:	33fc      	adds	r3, #252	; 0xfc
    dfe8:	68dd      	ldr	r5, [r3, #12]
    dfea:	4f20      	ldr	r7, [pc, #128]	; (e06c <LORAWAN_TxHandler+0xdc>)
    dfec:	4b20      	ldr	r3, [pc, #128]	; (e070 <LORAWAN_TxHandler+0xe0>)
    dfee:	2d00      	cmp	r5, #0
    dff0:	d023      	beq.n	e03a <LORAWAN_TxHandler+0xaa>
    dff2:	2201      	movs	r2, #1
    dff4:	54e2      	strb	r2, [r4, r3]
    dff6:	7828      	ldrb	r0, [r5, #0]
    dff8:	7a2b      	ldrb	r3, [r5, #8]
    dffa:	1e42      	subs	r2, r0, #1
    dffc:	4190      	sbcs	r0, r2
    dffe:	7869      	ldrb	r1, [r5, #1]
    e000:	686a      	ldr	r2, [r5, #4]
    e002:	b2c0      	uxtb	r0, r0
    e004:	47b8      	blx	r7
    e006:	0023      	movs	r3, r4
    e008:	33ce      	adds	r3, #206	; 0xce
    e00a:	881b      	ldrh	r3, [r3, #0]
    e00c:	0030      	movs	r0, r6
    e00e:	7033      	strb	r3, [r6, #0]
    e010:	4b18      	ldr	r3, [pc, #96]	; (e074 <LORAWAN_TxHandler+0xe4>)
    e012:	6073      	str	r3, [r6, #4]
    e014:	4b18      	ldr	r3, [pc, #96]	; (e078 <LORAWAN_TxHandler+0xe8>)
    e016:	4798      	blx	r3
    e018:	2800      	cmp	r0, #0
    e01a:	d114      	bne.n	e046 <LORAWAN_TxHandler+0xb6>
    e01c:	0021      	movs	r1, r4
    e01e:	220e      	movs	r2, #14
    e020:	3184      	adds	r1, #132	; 0x84
    e022:	780b      	ldrb	r3, [r1, #0]
    e024:	4393      	bics	r3, r2
    e026:	001a      	movs	r2, r3
    e028:	2302      	movs	r3, #2
    e02a:	4313      	orrs	r3, r2
    e02c:	700b      	strb	r3, [r1, #0]
    e02e:	2208      	movs	r2, #8
    e030:	3494      	adds	r4, #148	; 0x94
    e032:	7823      	ldrb	r3, [r4, #0]
    e034:	4393      	bics	r3, r2
    e036:	7023      	strb	r3, [r4, #0]
    e038:	e7c2      	b.n	dfc0 <LORAWAN_TxHandler+0x30>
    e03a:	54e5      	strb	r5, [r4, r3]
    e03c:	002a      	movs	r2, r5
    e03e:	002b      	movs	r3, r5
    e040:	0029      	movs	r1, r5
    e042:	0028      	movs	r0, r5
    e044:	e7de      	b.n	e004 <LORAWAN_TxHandler+0x74>
    e046:	0022      	movs	r2, r4
    e048:	2120      	movs	r1, #32
    e04a:	3294      	adds	r2, #148	; 0x94
    e04c:	7813      	ldrb	r3, [r2, #0]
    e04e:	438b      	bics	r3, r1
    e050:	7013      	strb	r3, [r2, #0]
    e052:	4b03      	ldr	r3, [pc, #12]	; (e060 <LORAWAN_TxHandler+0xd0>)
    e054:	4798      	blx	r3
    e056:	e7ea      	b.n	e02e <LORAWAN_TxHandler+0x9e>
    e058:	20003170 	.word	0x20003170
    e05c:	0000cb21 	.word	0x0000cb21
    e060:	00010dd5 	.word	0x00010dd5
    e064:	0000f505 	.word	0x0000f505
    e068:	0001096d 	.word	0x0001096d
    e06c:	000128f9 	.word	0x000128f9
    e070:	0000022a 	.word	0x0000022a
    e074:	200033c8 	.word	0x200033c8
    e078:	0000ec29 	.word	0x0000ec29

0000e07c <LORAWAN_JoinReqHandler>:
    e07c:	b530      	push	{r4, r5, lr}
    e07e:	b087      	sub	sp, #28
    e080:	466a      	mov	r2, sp
    e082:	2300      	movs	r3, #0
    e084:	4c25      	ldr	r4, [pc, #148]	; (e11c <LORAWAN_JoinReqHandler+0xa0>)
    e086:	7013      	strb	r3, [r2, #0]
    e088:	0023      	movs	r3, r4
    e08a:	33e9      	adds	r3, #233	; 0xe9
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	7053      	strb	r3, [r2, #1]
    e090:	0023      	movs	r3, r4
    e092:	33e7      	adds	r3, #231	; 0xe7
    e094:	781b      	ldrb	r3, [r3, #0]
    e096:	7093      	strb	r3, [r2, #2]
    e098:	0023      	movs	r3, r4
    e09a:	33ff      	adds	r3, #255	; 0xff
    e09c:	7f5b      	ldrb	r3, [r3, #29]
    e09e:	069b      	lsls	r3, r3, #26
    e0a0:	d507      	bpl.n	e0b2 <LORAWAN_JoinReqHandler+0x36>
    e0a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e0a4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    e0a6:	4313      	orrs	r3, r2
    e0a8:	d103      	bne.n	e0b2 <LORAWAN_JoinReqHandler+0x36>
    e0aa:	0023      	movs	r3, r4
    e0ac:	2201      	movs	r2, #1
    e0ae:	3380      	adds	r3, #128	; 0x80
    e0b0:	701a      	strb	r2, [r3, #0]
    e0b2:	aa03      	add	r2, sp, #12
    e0b4:	4669      	mov	r1, sp
    e0b6:	202e      	movs	r0, #46	; 0x2e
    e0b8:	4b19      	ldr	r3, [pc, #100]	; (e120 <LORAWAN_JoinReqHandler+0xa4>)
    e0ba:	4798      	blx	r3
    e0bc:	2808      	cmp	r0, #8
    e0be:	d004      	beq.n	e0ca <LORAWAN_JoinReqHandler+0x4e>
    e0c0:	4b18      	ldr	r3, [pc, #96]	; (e124 <LORAWAN_JoinReqHandler+0xa8>)
    e0c2:	4798      	blx	r3
    e0c4:	2000      	movs	r0, #0
    e0c6:	b007      	add	sp, #28
    e0c8:	bd30      	pop	{r4, r5, pc}
    e0ca:	4b17      	ldr	r3, [pc, #92]	; (e128 <LORAWAN_JoinReqHandler+0xac>)
    e0cc:	9803      	ldr	r0, [sp, #12]
    e0ce:	9904      	ldr	r1, [sp, #16]
    e0d0:	9a05      	ldr	r2, [sp, #20]
    e0d2:	4798      	blx	r3
    e0d4:	0023      	movs	r3, r4
    e0d6:	33fd      	adds	r3, #253	; 0xfd
    e0d8:	781b      	ldrb	r3, [r3, #0]
    e0da:	ad01      	add	r5, sp, #4
    e0dc:	2b04      	cmp	r3, #4
    e0de:	d104      	bne.n	e0ea <LORAWAN_JoinReqHandler+0x6e>
    e0e0:	3b03      	subs	r3, #3
    e0e2:	702b      	strb	r3, [r5, #0]
    e0e4:	0028      	movs	r0, r5
    e0e6:	4b11      	ldr	r3, [pc, #68]	; (e12c <LORAWAN_JoinReqHandler+0xb0>)
    e0e8:	4798      	blx	r3
    e0ea:	2200      	movs	r2, #0
    e0ec:	4b10      	ldr	r3, [pc, #64]	; (e130 <LORAWAN_JoinReqHandler+0xb4>)
    e0ee:	54e2      	strb	r2, [r4, r3]
    e0f0:	4b10      	ldr	r3, [pc, #64]	; (e134 <LORAWAN_JoinReqHandler+0xb8>)
    e0f2:	4798      	blx	r3
    e0f4:	4b10      	ldr	r3, [pc, #64]	; (e138 <LORAWAN_JoinReqHandler+0xbc>)
    e0f6:	7028      	strb	r0, [r5, #0]
    e0f8:	606b      	str	r3, [r5, #4]
    e0fa:	0028      	movs	r0, r5
    e0fc:	4b0f      	ldr	r3, [pc, #60]	; (e13c <LORAWAN_JoinReqHandler+0xc0>)
    e0fe:	4798      	blx	r3
    e100:	2800      	cmp	r0, #0
    e102:	d001      	beq.n	e108 <LORAWAN_JoinReqHandler+0x8c>
    e104:	201b      	movs	r0, #27
    e106:	e7db      	b.n	e0c0 <LORAWAN_JoinReqHandler+0x44>
    e108:	220e      	movs	r2, #14
    e10a:	3484      	adds	r4, #132	; 0x84
    e10c:	7823      	ldrb	r3, [r4, #0]
    e10e:	4393      	bics	r3, r2
    e110:	001a      	movs	r2, r3
    e112:	2302      	movs	r3, #2
    e114:	4313      	orrs	r3, r2
    e116:	7023      	strb	r3, [r4, #0]
    e118:	e7d4      	b.n	e0c4 <LORAWAN_JoinReqHandler+0x48>
    e11a:	46c0      	nop			; (mov r8, r8)
    e11c:	20003170 	.word	0x20003170
    e120:	0000cb21 	.word	0x0000cb21
    e124:	00010435 	.word	0x00010435
    e128:	0001096d 	.word	0x0001096d
    e12c:	0000f505 	.word	0x0000f505
    e130:	0000022a 	.word	0x0000022a
    e134:	00010831 	.word	0x00010831
    e138:	200033b8 	.word	0x200033b8
    e13c:	0000ec29 	.word	0x0000ec29

0000e140 <LORAWAN_RxHandler>:
    e140:	b513      	push	{r0, r1, r4, lr}
    e142:	4b0c      	ldr	r3, [pc, #48]	; (e174 <LORAWAN_RxHandler+0x34>)
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	2b08      	cmp	r3, #8
    e148:	d011      	beq.n	e16e <LORAWAN_RxHandler+0x2e>
    e14a:	2b10      	cmp	r3, #16
    e14c:	d001      	beq.n	e152 <LORAWAN_RxHandler+0x12>
    e14e:	2b01      	cmp	r3, #1
    e150:	d10b      	bne.n	e16a <LORAWAN_RxHandler+0x2a>
    e152:	466b      	mov	r3, sp
    e154:	1c9c      	adds	r4, r3, #2
    e156:	0021      	movs	r1, r4
    e158:	a801      	add	r0, sp, #4
    e15a:	4b07      	ldr	r3, [pc, #28]	; (e178 <LORAWAN_RxHandler+0x38>)
    e15c:	4798      	blx	r3
    e15e:	9801      	ldr	r0, [sp, #4]
    e160:	2800      	cmp	r0, #0
    e162:	d002      	beq.n	e16a <LORAWAN_RxHandler+0x2a>
    e164:	7821      	ldrb	r1, [r4, #0]
    e166:	4b05      	ldr	r3, [pc, #20]	; (e17c <LORAWAN_RxHandler+0x3c>)
    e168:	4798      	blx	r3
    e16a:	2000      	movs	r0, #0
    e16c:	bd16      	pop	{r1, r2, r4, pc}
    e16e:	4b04      	ldr	r3, [pc, #16]	; (e180 <LORAWAN_RxHandler+0x40>)
    e170:	4798      	blx	r3
    e172:	e7fa      	b.n	e16a <LORAWAN_RxHandler+0x2a>
    e174:	2000224f 	.word	0x2000224f
    e178:	0000edf5 	.word	0x0000edf5
    e17c:	00011855 	.word	0x00011855
    e180:	00011169 	.word	0x00011169

0000e184 <LORAWAN_PostTask>:
    e184:	b510      	push	{r4, lr}
    e186:	4b08      	ldr	r3, [pc, #32]	; (e1a8 <LORAWAN_PostTask+0x24>)
    e188:	0004      	movs	r4, r0
    e18a:	4798      	blx	r3
    e18c:	2201      	movs	r2, #1
    e18e:	40a2      	lsls	r2, r4
    e190:	4906      	ldr	r1, [pc, #24]	; (e1ac <LORAWAN_PostTask+0x28>)
    e192:	780b      	ldrb	r3, [r1, #0]
    e194:	4313      	orrs	r3, r2
    e196:	b2db      	uxtb	r3, r3
    e198:	700b      	strb	r3, [r1, #0]
    e19a:	4b05      	ldr	r3, [pc, #20]	; (e1b0 <LORAWAN_PostTask+0x2c>)
    e19c:	4798      	blx	r3
    e19e:	2004      	movs	r0, #4
    e1a0:	4b04      	ldr	r3, [pc, #16]	; (e1b4 <LORAWAN_PostTask+0x30>)
    e1a2:	4798      	blx	r3
    e1a4:	bd10      	pop	{r4, pc}
    e1a6:	46c0      	nop			; (mov r8, r8)
    e1a8:	0000c635 	.word	0x0000c635
    e1ac:	20001e9a 	.word	0x20001e9a
    e1b0:	0000c641 	.word	0x0000c641
    e1b4:	0000d681 	.word	0x0000d681

0000e1b8 <LORAWAN_TaskHandler>:
    e1b8:	b570      	push	{r4, r5, r6, lr}
    e1ba:	2601      	movs	r6, #1
    e1bc:	4d0e      	ldr	r5, [pc, #56]	; (e1f8 <LORAWAN_TaskHandler+0x40>)
    e1be:	e015      	b.n	e1ec <LORAWAN_TaskHandler+0x34>
    e1c0:	2400      	movs	r4, #0
    e1c2:	782b      	ldrb	r3, [r5, #0]
    e1c4:	4123      	asrs	r3, r4
    e1c6:	4233      	tst	r3, r6
    e1c8:	d00d      	beq.n	e1e6 <LORAWAN_TaskHandler+0x2e>
    e1ca:	4b0c      	ldr	r3, [pc, #48]	; (e1fc <LORAWAN_TaskHandler+0x44>)
    e1cc:	4798      	blx	r3
    e1ce:	0032      	movs	r2, r6
    e1d0:	40a2      	lsls	r2, r4
    e1d2:	782b      	ldrb	r3, [r5, #0]
    e1d4:	00a4      	lsls	r4, r4, #2
    e1d6:	4393      	bics	r3, r2
    e1d8:	702b      	strb	r3, [r5, #0]
    e1da:	4b09      	ldr	r3, [pc, #36]	; (e200 <LORAWAN_TaskHandler+0x48>)
    e1dc:	4798      	blx	r3
    e1de:	4b09      	ldr	r3, [pc, #36]	; (e204 <LORAWAN_TaskHandler+0x4c>)
    e1e0:	58e3      	ldr	r3, [r4, r3]
    e1e2:	4798      	blx	r3
    e1e4:	e7ea      	b.n	e1bc <LORAWAN_TaskHandler+0x4>
    e1e6:	3401      	adds	r4, #1
    e1e8:	2c03      	cmp	r4, #3
    e1ea:	d1ea      	bne.n	e1c2 <LORAWAN_TaskHandler+0xa>
    e1ec:	7828      	ldrb	r0, [r5, #0]
    e1ee:	b2c0      	uxtb	r0, r0
    e1f0:	2800      	cmp	r0, #0
    e1f2:	d1e5      	bne.n	e1c0 <LORAWAN_TaskHandler+0x8>
    e1f4:	bd70      	pop	{r4, r5, r6, pc}
    e1f6:	46c0      	nop			; (mov r8, r8)
    e1f8:	20001e9a 	.word	0x20001e9a
    e1fc:	0000c635 	.word	0x0000c635
    e200:	0000c641 	.word	0x0000c641
    e204:	00018b1c 	.word	0x00018b1c

0000e208 <RADIO_GetAttr>:
    e208:	b510      	push	{r4, lr}
    e20a:	000b      	movs	r3, r1
    e20c:	281f      	cmp	r0, #31
    e20e:	d900      	bls.n	e212 <RADIO_GetAttr+0xa>
    e210:	e069      	b.n	e2e6 <RADIO_GetAttr+0xde>
    e212:	f005 f96b 	bl	134ec <__gnu_thumb1_case_uqi>
    e216:	1410      	.short	0x1410
    e218:	68201c19 	.word	0x68201c19
    e21c:	312e2a27 	.word	0x312e2a27
    e220:	3d3a3734 	.word	0x3d3a3734
    e224:	46434054 	.word	0x46434054
    e228:	68245149 	.word	0x68245149
    e22c:	68686859 	.word	0x68686859
    e230:	5c686817 	.word	0x5c686817
    e234:	6360      	.short	0x6360
    e236:	4a2d      	ldr	r2, [pc, #180]	; (e2ec <RADIO_GetAttr+0xe4>)
    e238:	7e12      	ldrb	r2, [r2, #24]
    e23a:	701a      	strb	r2, [r3, #0]
    e23c:	e002      	b.n	e244 <RADIO_GetAttr+0x3c>
    e23e:	4a2b      	ldr	r2, [pc, #172]	; (e2ec <RADIO_GetAttr+0xe4>)
    e240:	6812      	ldr	r2, [r2, #0]
    e242:	601a      	str	r2, [r3, #0]
    e244:	2000      	movs	r0, #0
    e246:	bd10      	pop	{r4, pc}
    e248:	4a28      	ldr	r2, [pc, #160]	; (e2ec <RADIO_GetAttr+0xe4>)
    e24a:	6852      	ldr	r2, [r2, #4]
    e24c:	e7f9      	b.n	e242 <RADIO_GetAttr+0x3a>
    e24e:	4a27      	ldr	r2, [pc, #156]	; (e2ec <RADIO_GetAttr+0xe4>)
    e250:	8a92      	ldrh	r2, [r2, #20]
    e252:	801a      	strh	r2, [r3, #0]
    e254:	e7f6      	b.n	e244 <RADIO_GetAttr+0x3c>
    e256:	4a25      	ldr	r2, [pc, #148]	; (e2ec <RADIO_GetAttr+0xe4>)
    e258:	3203      	adds	r2, #3
    e25a:	7fd2      	ldrb	r2, [r2, #31]
    e25c:	e7ed      	b.n	e23a <RADIO_GetAttr+0x32>
    e25e:	4a23      	ldr	r2, [pc, #140]	; (e2ec <RADIO_GetAttr+0xe4>)
    e260:	3204      	adds	r2, #4
    e262:	e7fa      	b.n	e25a <RADIO_GetAttr+0x52>
    e264:	4a21      	ldr	r2, [pc, #132]	; (e2ec <RADIO_GetAttr+0xe4>)
    e266:	3206      	adds	r2, #6
    e268:	e7f7      	b.n	e25a <RADIO_GetAttr+0x52>
    e26a:	4a20      	ldr	r2, [pc, #128]	; (e2ec <RADIO_GetAttr+0xe4>)
    e26c:	3236      	adds	r2, #54	; 0x36
    e26e:	7812      	ldrb	r2, [r2, #0]
    e270:	e7e3      	b.n	e23a <RADIO_GetAttr+0x32>
    e272:	4a1e      	ldr	r2, [pc, #120]	; (e2ec <RADIO_GetAttr+0xe4>)
    e274:	3205      	adds	r2, #5
    e276:	e7f0      	b.n	e25a <RADIO_GetAttr+0x52>
    e278:	4a1c      	ldr	r2, [pc, #112]	; (e2ec <RADIO_GetAttr+0xe4>)
    e27a:	3234      	adds	r2, #52	; 0x34
    e27c:	e7f7      	b.n	e26e <RADIO_GetAttr+0x66>
    e27e:	4a1b      	ldr	r2, [pc, #108]	; (e2ec <RADIO_GetAttr+0xe4>)
    e280:	8ad2      	ldrh	r2, [r2, #22]
    e282:	e7e6      	b.n	e252 <RADIO_GetAttr+0x4a>
    e284:	4a19      	ldr	r2, [pc, #100]	; (e2ec <RADIO_GetAttr+0xe4>)
    e286:	3233      	adds	r2, #51	; 0x33
    e288:	e7f1      	b.n	e26e <RADIO_GetAttr+0x66>
    e28a:	4a18      	ldr	r2, [pc, #96]	; (e2ec <RADIO_GetAttr+0xe4>)
    e28c:	68d2      	ldr	r2, [r2, #12]
    e28e:	e7d8      	b.n	e242 <RADIO_GetAttr+0x3a>
    e290:	4a16      	ldr	r2, [pc, #88]	; (e2ec <RADIO_GetAttr+0xe4>)
    e292:	6892      	ldr	r2, [r2, #8]
    e294:	e7d5      	b.n	e242 <RADIO_GetAttr+0x3a>
    e296:	4a15      	ldr	r2, [pc, #84]	; (e2ec <RADIO_GetAttr+0xe4>)
    e298:	3237      	adds	r2, #55	; 0x37
    e29a:	e7e8      	b.n	e26e <RADIO_GetAttr+0x66>
    e29c:	4a13      	ldr	r2, [pc, #76]	; (e2ec <RADIO_GetAttr+0xe4>)
    e29e:	3238      	adds	r2, #56	; 0x38
    e2a0:	e7e5      	b.n	e26e <RADIO_GetAttr+0x66>
    e2a2:	4a12      	ldr	r2, [pc, #72]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2a4:	3239      	adds	r2, #57	; 0x39
    e2a6:	e7e2      	b.n	e26e <RADIO_GetAttr+0x66>
    e2a8:	4a10      	ldr	r2, [pc, #64]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2aa:	4911      	ldr	r1, [pc, #68]	; (e2f0 <RADIO_GetAttr+0xe8>)
    e2ac:	3202      	adds	r2, #2
    e2ae:	7fd2      	ldrb	r2, [r2, #31]
    e2b0:	0018      	movs	r0, r3
    e2b2:	4b10      	ldr	r3, [pc, #64]	; (e2f4 <RADIO_GetAttr+0xec>)
    e2b4:	4798      	blx	r3
    e2b6:	e7c5      	b.n	e244 <RADIO_GetAttr+0x3c>
    e2b8:	4a0c      	ldr	r2, [pc, #48]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2ba:	3202      	adds	r2, #2
    e2bc:	e7cd      	b.n	e25a <RADIO_GetAttr+0x52>
    e2be:	4a0b      	ldr	r2, [pc, #44]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2c0:	3232      	adds	r2, #50	; 0x32
    e2c2:	7812      	ldrb	r2, [r2, #0]
    e2c4:	b252      	sxtb	r2, r2
    e2c6:	e7b8      	b.n	e23a <RADIO_GetAttr+0x32>
    e2c8:	4a08      	ldr	r2, [pc, #32]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2ca:	3235      	adds	r2, #53	; 0x35
    e2cc:	e7cf      	b.n	e26e <RADIO_GetAttr+0x66>
    e2ce:	4907      	ldr	r1, [pc, #28]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2d0:	2206      	movs	r2, #6
    e2d2:	313c      	adds	r1, #60	; 0x3c
    e2d4:	e7ec      	b.n	e2b0 <RADIO_GetAttr+0xa8>
    e2d6:	4a05      	ldr	r2, [pc, #20]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2d8:	3254      	adds	r2, #84	; 0x54
    e2da:	e7c8      	b.n	e26e <RADIO_GetAttr+0x66>
    e2dc:	4a03      	ldr	r2, [pc, #12]	; (e2ec <RADIO_GetAttr+0xe4>)
    e2de:	3256      	adds	r2, #86	; 0x56
    e2e0:	2100      	movs	r1, #0
    e2e2:	5e52      	ldrsh	r2, [r2, r1]
    e2e4:	e7b5      	b.n	e252 <RADIO_GetAttr+0x4a>
    e2e6:	2005      	movs	r0, #5
    e2e8:	e7ad      	b.n	e246 <RADIO_GetAttr+0x3e>
    e2ea:	46c0      	nop			; (mov r8, r8)
    e2ec:	20002d78 	.word	0x20002d78
    e2f0:	20002d91 	.word	0x20002d91
    e2f4:	0001678b 	.word	0x0001678b

0000e2f8 <RADIO_SetAttr>:
    e2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e2fa:	4b71      	ldr	r3, [pc, #452]	; (e4c0 <RADIO_SetAttr+0x1c8>)
    e2fc:	0004      	movs	r4, r0
    e2fe:	000d      	movs	r5, r1
    e300:	4798      	blx	r3
    e302:	2304      	movs	r3, #4
    e304:	2801      	cmp	r0, #1
    e306:	d11a      	bne.n	e33e <RADIO_SetAttr+0x46>
    e308:	2c1d      	cmp	r4, #29
    e30a:	d900      	bls.n	e30e <RADIO_SetAttr+0x16>
    e30c:	e0d5      	b.n	e4ba <RADIO_SetAttr+0x1c2>
    e30e:	0020      	movs	r0, r4
    e310:	f005 f8ec 	bl	134ec <__gnu_thumb1_case_uqi>
    e314:	605c4844 	.word	0x605c4844
    e318:	7770d364 	.word	0x7770d364
    e31c:	908c8480 	.word	0x908c8480
    e320:	a0d39c99 	.word	0xa0d39c99
    e324:	c2bab1a8 	.word	0xc2bab1a8
    e328:	d3cad369 	.word	0xd3cad369
    e32c:	d30fd3d3 	.word	0xd30fd3d3
    e330:	17d3      	.short	0x17d3
    e332:	2303      	movs	r3, #3
    e334:	2d00      	cmp	r5, #0
    e336:	d002      	beq.n	e33e <RADIO_SetAttr+0x46>
    e338:	4b62      	ldr	r3, [pc, #392]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e33a:	611d      	str	r5, [r3, #16]
    e33c:	2300      	movs	r3, #0
    e33e:	0018      	movs	r0, r3
    e340:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e342:	796c      	ldrb	r4, [r5, #5]
    e344:	2c00      	cmp	r4, #0
    e346:	d109      	bne.n	e35c <RADIO_SetAttr+0x64>
    e348:	4b5e      	ldr	r3, [pc, #376]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e34a:	001a      	movs	r2, r3
    e34c:	649c      	str	r4, [r3, #72]	; 0x48
    e34e:	879c      	strh	r4, [r3, #60]	; 0x3c
    e350:	87dc      	strh	r4, [r3, #62]	; 0x3e
    e352:	3240      	adds	r2, #64	; 0x40
    e354:	3341      	adds	r3, #65	; 0x41
    e356:	7014      	strb	r4, [r2, #0]
    e358:	701c      	strb	r4, [r3, #0]
    e35a:	e7ef      	b.n	e33c <RADIO_SetAttr+0x44>
    e35c:	882f      	ldrh	r7, [r5, #0]
    e35e:	2303      	movs	r3, #3
    e360:	2f00      	cmp	r7, #0
    e362:	d0ec      	beq.n	e33e <RADIO_SetAttr+0x46>
    e364:	792e      	ldrb	r6, [r5, #4]
    e366:	2e00      	cmp	r6, #0
    e368:	d0e9      	beq.n	e33e <RADIO_SetAttr+0x46>
    e36a:	20fa      	movs	r0, #250	; 0xfa
    e36c:	2202      	movs	r2, #2
    e36e:	5eab      	ldrsh	r3, [r5, r2]
    e370:	0080      	lsls	r0, r0, #2
    e372:	0031      	movs	r1, r6
    e374:	9301      	str	r3, [sp, #4]
    e376:	4378      	muls	r0, r7
    e378:	4b53      	ldr	r3, [pc, #332]	; (e4c8 <RADIO_SetAttr+0x1d0>)
    e37a:	4798      	blx	r3
    e37c:	4b53      	ldr	r3, [pc, #332]	; (e4cc <RADIO_SetAttr+0x1d4>)
    e37e:	4798      	blx	r3
    e380:	4b53      	ldr	r3, [pc, #332]	; (e4d0 <RADIO_SetAttr+0x1d8>)
    e382:	4798      	blx	r3
    e384:	466b      	mov	r3, sp
    e386:	4d4f      	ldr	r5, [pc, #316]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e388:	889b      	ldrh	r3, [r3, #4]
    e38a:	64a8      	str	r0, [r5, #72]	; 0x48
    e38c:	87eb      	strh	r3, [r5, #62]	; 0x3e
    e38e:	002b      	movs	r3, r5
    e390:	87af      	strh	r7, [r5, #60]	; 0x3c
    e392:	3340      	adds	r3, #64	; 0x40
    e394:	3541      	adds	r5, #65	; 0x41
    e396:	701e      	strb	r6, [r3, #0]
    e398:	702c      	strb	r4, [r5, #0]
    e39a:	e7cf      	b.n	e33c <RADIO_SetAttr+0x44>
    e39c:	782a      	ldrb	r2, [r5, #0]
    e39e:	4b49      	ldr	r3, [pc, #292]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3a0:	761a      	strb	r2, [r3, #24]
    e3a2:	e7cb      	b.n	e33c <RADIO_SetAttr+0x44>
    e3a4:	4b4b      	ldr	r3, [pc, #300]	; (e4d4 <RADIO_SetAttr+0x1dc>)
    e3a6:	682a      	ldr	r2, [r5, #0]
    e3a8:	18d1      	adds	r1, r2, r3
    e3aa:	4b4b      	ldr	r3, [pc, #300]	; (e4d8 <RADIO_SetAttr+0x1e0>)
    e3ac:	4299      	cmp	r1, r3
    e3ae:	d90a      	bls.n	e3c6 <RADIO_SetAttr+0xce>
    e3b0:	4b4a      	ldr	r3, [pc, #296]	; (e4dc <RADIO_SetAttr+0x1e4>)
    e3b2:	494b      	ldr	r1, [pc, #300]	; (e4e0 <RADIO_SetAttr+0x1e8>)
    e3b4:	18d3      	adds	r3, r2, r3
    e3b6:	428b      	cmp	r3, r1
    e3b8:	d905      	bls.n	e3c6 <RADIO_SetAttr+0xce>
    e3ba:	494a      	ldr	r1, [pc, #296]	; (e4e4 <RADIO_SetAttr+0x1ec>)
    e3bc:	484a      	ldr	r0, [pc, #296]	; (e4e8 <RADIO_SetAttr+0x1f0>)
    e3be:	1851      	adds	r1, r2, r1
    e3c0:	2305      	movs	r3, #5
    e3c2:	4281      	cmp	r1, r0
    e3c4:	d8bb      	bhi.n	e33e <RADIO_SetAttr+0x46>
    e3c6:	4b3f      	ldr	r3, [pc, #252]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3c8:	601a      	str	r2, [r3, #0]
    e3ca:	e7b7      	b.n	e33c <RADIO_SetAttr+0x44>
    e3cc:	682a      	ldr	r2, [r5, #0]
    e3ce:	4b3d      	ldr	r3, [pc, #244]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3d0:	605a      	str	r2, [r3, #4]
    e3d2:	e7b3      	b.n	e33c <RADIO_SetAttr+0x44>
    e3d4:	882a      	ldrh	r2, [r5, #0]
    e3d6:	4b3b      	ldr	r3, [pc, #236]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3d8:	829a      	strh	r2, [r3, #20]
    e3da:	e7af      	b.n	e33c <RADIO_SetAttr+0x44>
    e3dc:	4b39      	ldr	r3, [pc, #228]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3de:	782a      	ldrb	r2, [r5, #0]
    e3e0:	3303      	adds	r3, #3
    e3e2:	77da      	strb	r2, [r3, #31]
    e3e4:	e7aa      	b.n	e33c <RADIO_SetAttr+0x44>
    e3e6:	782a      	ldrb	r2, [r5, #0]
    e3e8:	2305      	movs	r3, #5
    e3ea:	2a01      	cmp	r2, #1
    e3ec:	d8a7      	bhi.n	e33e <RADIO_SetAttr+0x46>
    e3ee:	4b35      	ldr	r3, [pc, #212]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3f0:	3304      	adds	r3, #4
    e3f2:	e7f6      	b.n	e3e2 <RADIO_SetAttr+0xea>
    e3f4:	782a      	ldrb	r2, [r5, #0]
    e3f6:	2305      	movs	r3, #5
    e3f8:	2a01      	cmp	r2, #1
    e3fa:	d8a0      	bhi.n	e33e <RADIO_SetAttr+0x46>
    e3fc:	4b31      	ldr	r3, [pc, #196]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e3fe:	3306      	adds	r3, #6
    e400:	e7ef      	b.n	e3e2 <RADIO_SetAttr+0xea>
    e402:	782a      	ldrb	r2, [r5, #0]
    e404:	2305      	movs	r3, #5
    e406:	1fd1      	subs	r1, r2, #7
    e408:	2902      	cmp	r1, #2
    e40a:	d898      	bhi.n	e33e <RADIO_SetAttr+0x46>
    e40c:	4b2d      	ldr	r3, [pc, #180]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e40e:	3336      	adds	r3, #54	; 0x36
    e410:	701a      	strb	r2, [r3, #0]
    e412:	e793      	b.n	e33c <RADIO_SetAttr+0x44>
    e414:	4b2b      	ldr	r3, [pc, #172]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e416:	782a      	ldrb	r2, [r5, #0]
    e418:	3305      	adds	r3, #5
    e41a:	e7e2      	b.n	e3e2 <RADIO_SetAttr+0xea>
    e41c:	782a      	ldrb	r2, [r5, #0]
    e41e:	2305      	movs	r3, #5
    e420:	2a01      	cmp	r2, #1
    e422:	d900      	bls.n	e426 <RADIO_SetAttr+0x12e>
    e424:	e78b      	b.n	e33e <RADIO_SetAttr+0x46>
    e426:	4b27      	ldr	r3, [pc, #156]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e428:	3334      	adds	r3, #52	; 0x34
    e42a:	e7f1      	b.n	e410 <RADIO_SetAttr+0x118>
    e42c:	882a      	ldrh	r2, [r5, #0]
    e42e:	4b25      	ldr	r3, [pc, #148]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e430:	82da      	strh	r2, [r3, #22]
    e432:	e783      	b.n	e33c <RADIO_SetAttr+0x44>
    e434:	782a      	ldrb	r2, [r5, #0]
    e436:	2305      	movs	r3, #5
    e438:	1e51      	subs	r1, r2, #1
    e43a:	2903      	cmp	r1, #3
    e43c:	d900      	bls.n	e440 <RADIO_SetAttr+0x148>
    e43e:	e77e      	b.n	e33e <RADIO_SetAttr+0x46>
    e440:	4b20      	ldr	r3, [pc, #128]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e442:	3333      	adds	r3, #51	; 0x33
    e444:	e7e4      	b.n	e410 <RADIO_SetAttr+0x118>
    e446:	4b1f      	ldr	r3, [pc, #124]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e448:	682a      	ldr	r2, [r5, #0]
    e44a:	60da      	str	r2, [r3, #12]
    e44c:	682a      	ldr	r2, [r5, #0]
    e44e:	4b1d      	ldr	r3, [pc, #116]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e450:	609a      	str	r2, [r3, #8]
    e452:	e773      	b.n	e33c <RADIO_SetAttr+0x44>
    e454:	782a      	ldrb	r2, [r5, #0]
    e456:	2305      	movs	r3, #5
    e458:	2a03      	cmp	r2, #3
    e45a:	d900      	bls.n	e45e <RADIO_SetAttr+0x166>
    e45c:	e76f      	b.n	e33e <RADIO_SetAttr+0x46>
    e45e:	4b19      	ldr	r3, [pc, #100]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e460:	3337      	adds	r3, #55	; 0x37
    e462:	e7d5      	b.n	e410 <RADIO_SetAttr+0x118>
    e464:	782a      	ldrb	r2, [r5, #0]
    e466:	2305      	movs	r3, #5
    e468:	1e51      	subs	r1, r2, #1
    e46a:	2916      	cmp	r1, #22
    e46c:	d900      	bls.n	e470 <RADIO_SetAttr+0x178>
    e46e:	e766      	b.n	e33e <RADIO_SetAttr+0x46>
    e470:	4b14      	ldr	r3, [pc, #80]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e472:	3338      	adds	r3, #56	; 0x38
    e474:	e7cc      	b.n	e410 <RADIO_SetAttr+0x118>
    e476:	782a      	ldrb	r2, [r5, #0]
    e478:	2305      	movs	r3, #5
    e47a:	1e51      	subs	r1, r2, #1
    e47c:	2916      	cmp	r1, #22
    e47e:	d900      	bls.n	e482 <RADIO_SetAttr+0x18a>
    e480:	e75d      	b.n	e33e <RADIO_SetAttr+0x46>
    e482:	4b10      	ldr	r3, [pc, #64]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e484:	3339      	adds	r3, #57	; 0x39
    e486:	e7c3      	b.n	e410 <RADIO_SetAttr+0x118>
    e488:	4b0e      	ldr	r3, [pc, #56]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e48a:	0029      	movs	r1, r5
    e48c:	3302      	adds	r3, #2
    e48e:	7fda      	ldrb	r2, [r3, #31]
    e490:	4816      	ldr	r0, [pc, #88]	; (e4ec <RADIO_SetAttr+0x1f4>)
    e492:	4b17      	ldr	r3, [pc, #92]	; (e4f0 <RADIO_SetAttr+0x1f8>)
    e494:	4798      	blx	r3
    e496:	e751      	b.n	e33c <RADIO_SetAttr+0x44>
    e498:	782b      	ldrb	r3, [r5, #0]
    e49a:	1c1a      	adds	r2, r3, #0
    e49c:	2b08      	cmp	r3, #8
    e49e:	d900      	bls.n	e4a2 <RADIO_SetAttr+0x1aa>
    e4a0:	2208      	movs	r2, #8
    e4a2:	4b08      	ldr	r3, [pc, #32]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e4a4:	3302      	adds	r3, #2
    e4a6:	e79c      	b.n	e3e2 <RADIO_SetAttr+0xea>
    e4a8:	2305      	movs	r3, #5
    e4aa:	782a      	ldrb	r2, [r5, #0]
    e4ac:	1fd1      	subs	r1, r2, #7
    e4ae:	4299      	cmp	r1, r3
    e4b0:	d900      	bls.n	e4b4 <RADIO_SetAttr+0x1bc>
    e4b2:	e744      	b.n	e33e <RADIO_SetAttr+0x46>
    e4b4:	4b03      	ldr	r3, [pc, #12]	; (e4c4 <RADIO_SetAttr+0x1cc>)
    e4b6:	3335      	adds	r3, #53	; 0x35
    e4b8:	e7aa      	b.n	e410 <RADIO_SetAttr+0x118>
    e4ba:	2305      	movs	r3, #5
    e4bc:	e73f      	b.n	e33e <RADIO_SetAttr+0x46>
    e4be:	46c0      	nop			; (mov r8, r8)
    e4c0:	0000ec0d 	.word	0x0000ec0d
    e4c4:	20002d78 	.word	0x20002d78
    e4c8:	0001363d 	.word	0x0001363d
    e4cc:	00014881 	.word	0x00014881
    e4d0:	00013999 	.word	0x00013999
    e4d4:	f7d58bc0 	.word	0xf7d58bc0
    e4d8:	0243d580 	.word	0x0243d580
    e4dc:	e78fe580 	.word	0xe78fe580
    e4e0:	06dac2c0 	.word	0x06dac2c0
    e4e4:	cc9eec80 	.word	0xcc9eec80
    e4e8:	096ae380 	.word	0x096ae380
    e4ec:	20002d91 	.word	0x20002d91
    e4f0:	0001678b 	.word	0x0001678b

0000e4f4 <RADIO_Init>:
    e4f4:	b510      	push	{r4, lr}
    e4f6:	4b0c      	ldr	r3, [pc, #48]	; (e528 <RADIO_Init+0x34>)
    e4f8:	4798      	blx	r3
    e4fa:	4b0c      	ldr	r3, [pc, #48]	; (e52c <RADIO_Init+0x38>)
    e4fc:	201f      	movs	r0, #31
    e4fe:	4798      	blx	r3
    e500:	4c0b      	ldr	r4, [pc, #44]	; (e530 <RADIO_Init+0x3c>)
    e502:	490c      	ldr	r1, [pc, #48]	; (e534 <RADIO_Init+0x40>)
    e504:	2001      	movs	r0, #1
    e506:	47a0      	blx	r4
    e508:	490b      	ldr	r1, [pc, #44]	; (e538 <RADIO_Init+0x44>)
    e50a:	2002      	movs	r0, #2
    e50c:	47a0      	blx	r4
    e50e:	490b      	ldr	r1, [pc, #44]	; (e53c <RADIO_Init+0x48>)
    e510:	2004      	movs	r0, #4
    e512:	47a0      	blx	r4
    e514:	490a      	ldr	r1, [pc, #40]	; (e540 <RADIO_Init+0x4c>)
    e516:	2008      	movs	r0, #8
    e518:	47a0      	blx	r4
    e51a:	490a      	ldr	r1, [pc, #40]	; (e544 <RADIO_Init+0x50>)
    e51c:	2010      	movs	r0, #16
    e51e:	47a0      	blx	r4
    e520:	4909      	ldr	r1, [pc, #36]	; (e548 <RADIO_Init+0x54>)
    e522:	2020      	movs	r0, #32
    e524:	47a0      	blx	r4
    e526:	bd10      	pop	{r4, pc}
    e528:	0000f311 	.word	0x0000f311
    e52c:	0000ec19 	.word	0x0000ec19
    e530:	0000c551 	.word	0x0000c551
    e534:	0000e9a5 	.word	0x0000e9a5
    e538:	0000ea1d 	.word	0x0000ea1d
    e53c:	0000ea8d 	.word	0x0000ea8d
    e540:	0000eadd 	.word	0x0000eadd
    e544:	0000eb05 	.word	0x0000eb05
    e548:	0000eb2d 	.word	0x0000eb2d

0000e54c <Radio_WriteFrequency>:
    e54c:	b570      	push	{r4, r5, r6, lr}
    e54e:	490d      	ldr	r1, [pc, #52]	; (e584 <Radio_WriteFrequency+0x38>)
    e550:	4d0d      	ldr	r5, [pc, #52]	; (e588 <Radio_WriteFrequency+0x3c>)
    e552:	0006      	movs	r6, r0
    e554:	47a8      	blx	r5
    e556:	4b0d      	ldr	r3, [pc, #52]	; (e58c <Radio_WriteFrequency+0x40>)
    e558:	0004      	movs	r4, r0
    e55a:	490a      	ldr	r1, [pc, #40]	; (e584 <Radio_WriteFrequency+0x38>)
    e55c:	0030      	movs	r0, r6
    e55e:	4798      	blx	r3
    e560:	0208      	lsls	r0, r1, #8
    e562:	4908      	ldr	r1, [pc, #32]	; (e584 <Radio_WriteFrequency+0x38>)
    e564:	47a8      	blx	r5
    e566:	0224      	lsls	r4, r4, #8
    e568:	1904      	adds	r4, r0, r4
    e56a:	0c21      	lsrs	r1, r4, #16
    e56c:	4d08      	ldr	r5, [pc, #32]	; (e590 <Radio_WriteFrequency+0x44>)
    e56e:	b2c9      	uxtb	r1, r1
    e570:	2006      	movs	r0, #6
    e572:	47a8      	blx	r5
    e574:	0a21      	lsrs	r1, r4, #8
    e576:	b2c9      	uxtb	r1, r1
    e578:	2007      	movs	r0, #7
    e57a:	47a8      	blx	r5
    e57c:	b2e1      	uxtb	r1, r4
    e57e:	2008      	movs	r0, #8
    e580:	47a8      	blx	r5
    e582:	bd70      	pop	{r4, r5, r6, pc}
    e584:	00003d09 	.word	0x00003d09
    e588:	00013529 	.word	0x00013529
    e58c:	00013635 	.word	0x00013635
    e590:	0000c47d 	.word	0x0000c47d

0000e594 <Radio_WriteConfiguration>:
    e594:	b5f0      	push	{r4, r5, r6, r7, lr}
    e596:	4cb0      	ldr	r4, [pc, #704]	; (e858 <Radio_WriteConfiguration+0x2c4>)
    e598:	2200      	movs	r2, #0
    e59a:	0023      	movs	r3, r4
    e59c:	b085      	sub	sp, #20
    e59e:	9002      	str	r0, [sp, #8]
    e5a0:	3334      	adds	r3, #52	; 0x34
    e5a2:	0010      	movs	r0, r2
    e5a4:	7819      	ldrb	r1, [r3, #0]
    e5a6:	4bad      	ldr	r3, [pc, #692]	; (e85c <Radio_WriteConfiguration+0x2c8>)
    e5a8:	4798      	blx	r3
    e5aa:	4bad      	ldr	r3, [pc, #692]	; (e860 <Radio_WriteConfiguration+0x2cc>)
    e5ac:	6820      	ldr	r0, [r4, #0]
    e5ae:	4798      	blx	r3
    e5b0:	1ce3      	adds	r3, r4, #3
    e5b2:	1d62      	adds	r2, r4, #5
    e5b4:	7fdb      	ldrb	r3, [r3, #31]
    e5b6:	7fd2      	ldrb	r2, [r2, #31]
    e5b8:	b25b      	sxtb	r3, r3
    e5ba:	4eaa      	ldr	r6, [pc, #680]	; (e864 <Radio_WriteConfiguration+0x2d0>)
    e5bc:	4daa      	ldr	r5, [pc, #680]	; (e868 <Radio_WriteConfiguration+0x2d4>)
    e5be:	2a00      	cmp	r2, #0
    e5c0:	d000      	beq.n	e5c4 <Radio_WriteConfiguration+0x30>
    e5c2:	e0fc      	b.n	e7be <Radio_WriteConfiguration+0x22a>
    e5c4:	1c1f      	adds	r7, r3, #0
    e5c6:	2b0f      	cmp	r3, #15
    e5c8:	dc00      	bgt.n	e5cc <Radio_WriteConfiguration+0x38>
    e5ca:	e0ec      	b.n	e7a6 <Radio_WriteConfiguration+0x212>
    e5cc:	270f      	movs	r7, #15
    e5ce:	b27b      	sxtb	r3, r7
    e5d0:	204d      	movs	r0, #77	; 0x4d
    e5d2:	9301      	str	r3, [sp, #4]
    e5d4:	47b0      	blx	r6
    e5d6:	21f8      	movs	r1, #248	; 0xf8
    e5d8:	4008      	ands	r0, r1
    e5da:	39f4      	subs	r1, #244	; 0xf4
    e5dc:	4301      	orrs	r1, r0
    e5de:	204d      	movs	r0, #77	; 0x4d
    e5e0:	47a8      	blx	r5
    e5e2:	b27b      	sxtb	r3, r7
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	db00      	blt.n	e5ea <Radio_WriteConfiguration+0x56>
    e5e8:	e0e4      	b.n	e7b4 <Radio_WriteConfiguration+0x220>
    e5ea:	3703      	adds	r7, #3
    e5ec:	b2f9      	uxtb	r1, r7
    e5ee:	2720      	movs	r7, #32
    e5f0:	4339      	orrs	r1, r7
    e5f2:	2009      	movs	r0, #9
    e5f4:	47a8      	blx	r5
    e5f6:	0023      	movs	r3, r4
    e5f8:	3334      	adds	r3, #52	; 0x34
    e5fa:	781f      	ldrb	r7, [r3, #0]
    e5fc:	2f01      	cmp	r7, #1
    e5fe:	d000      	beq.n	e602 <Radio_WriteConfiguration+0x6e>
    e600:	e144      	b.n	e88c <Radio_WriteConfiguration+0x2f8>
    e602:	7e21      	ldrb	r1, [r4, #24]
    e604:	2039      	movs	r0, #57	; 0x39
    e606:	47a8      	blx	r5
    e608:	4b98      	ldr	r3, [pc, #608]	; (e86c <Radio_WriteConfiguration+0x2d8>)
    e60a:	201d      	movs	r0, #29
    e60c:	7819      	ldrb	r1, [r3, #0]
    e60e:	0023      	movs	r3, r4
    e610:	3333      	adds	r3, #51	; 0x33
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	0109      	lsls	r1, r1, #4
    e616:	005b      	lsls	r3, r3, #1
    e618:	4319      	orrs	r1, r3
    e61a:	1de3      	adds	r3, r4, #7
    e61c:	7fdb      	ldrb	r3, [r3, #31]
    e61e:	401f      	ands	r7, r3
    e620:	4339      	orrs	r1, r7
    e622:	b2c9      	uxtb	r1, r1
    e624:	47a8      	blx	r5
    e626:	1d23      	adds	r3, r4, #4
    e628:	7fd9      	ldrb	r1, [r3, #31]
    e62a:	2304      	movs	r3, #4
    e62c:	0089      	lsls	r1, r1, #2
    e62e:	4019      	ands	r1, r3
    e630:	0023      	movs	r3, r4
    e632:	3335      	adds	r3, #53	; 0x35
    e634:	781b      	ldrb	r3, [r3, #0]
    e636:	201e      	movs	r0, #30
    e638:	011b      	lsls	r3, r3, #4
    e63a:	4319      	orrs	r1, r3
    e63c:	9b02      	ldr	r3, [sp, #8]
    e63e:	059b      	lsls	r3, r3, #22
    e640:	0f9b      	lsrs	r3, r3, #30
    e642:	4319      	orrs	r1, r3
    e644:	b2c9      	uxtb	r1, r1
    e646:	47a8      	blx	r5
    e648:	2300      	movs	r3, #0
    e64a:	8ae1      	ldrh	r1, [r4, #22]
    e64c:	4299      	cmp	r1, r3
    e64e:	d011      	beq.n	e674 <Radio_WriteConfiguration+0xe0>
    e650:	4a86      	ldr	r2, [pc, #536]	; (e86c <Radio_WriteConfiguration+0x2d8>)
    e652:	7812      	ldrb	r2, [r2, #0]
    e654:	2a08      	cmp	r2, #8
    e656:	d100      	bne.n	e65a <Radio_WriteConfiguration+0xc6>
    e658:	e0e4      	b.n	e824 <Radio_WriteConfiguration+0x290>
    e65a:	2a09      	cmp	r2, #9
    e65c:	d100      	bne.n	e660 <Radio_WriteConfiguration+0xcc>
    e65e:	e0e3      	b.n	e828 <Radio_WriteConfiguration+0x294>
    e660:	2a07      	cmp	r2, #7
    e662:	d000      	beq.n	e666 <Radio_WriteConfiguration+0xd2>
    e664:	e0e3      	b.n	e82e <Radio_WriteConfiguration+0x29a>
    e666:	337d      	adds	r3, #125	; 0x7d
    e668:	4359      	muls	r1, r3
    e66a:	0023      	movs	r3, r4
    e66c:	3335      	adds	r3, #53	; 0x35
    e66e:	781b      	ldrb	r3, [r3, #0]
    e670:	40d9      	lsrs	r1, r3
    e672:	000b      	movs	r3, r1
    e674:	b2d9      	uxtb	r1, r3
    e676:	2024      	movs	r0, #36	; 0x24
    e678:	4d7b      	ldr	r5, [pc, #492]	; (e868 <Radio_WriteConfiguration+0x2d4>)
    e67a:	47a8      	blx	r5
    e67c:	466b      	mov	r3, sp
    e67e:	201f      	movs	r0, #31
    e680:	7a19      	ldrb	r1, [r3, #8]
    e682:	47a8      	blx	r5
    e684:	2026      	movs	r0, #38	; 0x26
    e686:	47b0      	blx	r6
    e688:	0023      	movs	r3, r4
    e68a:	3335      	adds	r3, #53	; 0x35
    e68c:	781b      	ldrb	r3, [r3, #0]
    e68e:	2b0c      	cmp	r3, #12
    e690:	d105      	bne.n	e69e <Radio_WriteConfiguration+0x10a>
    e692:	0023      	movs	r3, r4
    e694:	3336      	adds	r3, #54	; 0x36
    e696:	781b      	ldrb	r3, [r3, #0]
    e698:	3b07      	subs	r3, #7
    e69a:	2b01      	cmp	r3, #1
    e69c:	d906      	bls.n	e6ac <Radio_WriteConfiguration+0x118>
    e69e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e6a0:	4b73      	ldr	r3, [pc, #460]	; (e870 <Radio_WriteConfiguration+0x2dc>)
    e6a2:	4013      	ands	r3, r2
    e6a4:	4a73      	ldr	r2, [pc, #460]	; (e874 <Radio_WriteConfiguration+0x2e0>)
    e6a6:	4293      	cmp	r3, r2
    e6a8:	d000      	beq.n	e6ac <Radio_WriteConfiguration+0x118>
    e6aa:	e0c2      	b.n	e832 <Radio_WriteConfiguration+0x29e>
    e6ac:	2108      	movs	r1, #8
    e6ae:	4308      	orrs	r0, r1
    e6b0:	b2c0      	uxtb	r0, r0
    e6b2:	2104      	movs	r1, #4
    e6b4:	4301      	orrs	r1, r0
    e6b6:	2026      	movs	r0, #38	; 0x26
    e6b8:	47a8      	blx	r5
    e6ba:	2031      	movs	r0, #49	; 0x31
    e6bc:	47b0      	blx	r6
    e6be:	21f8      	movs	r1, #248	; 0xf8
    e6c0:	4008      	ands	r0, r1
    e6c2:	39f5      	subs	r1, #245	; 0xf5
    e6c4:	4301      	orrs	r1, r0
    e6c6:	2031      	movs	r0, #49	; 0x31
    e6c8:	47a8      	blx	r5
    e6ca:	210a      	movs	r1, #10
    e6cc:	2037      	movs	r0, #55	; 0x37
    e6ce:	47a8      	blx	r5
    e6d0:	0023      	movs	r3, r4
    e6d2:	3331      	adds	r3, #49	; 0x31
    e6d4:	781b      	ldrb	r3, [r3, #0]
    e6d6:	2b12      	cmp	r3, #18
    e6d8:	d11e      	bne.n	e718 <Radio_WriteConfiguration+0x184>
    e6da:	0023      	movs	r3, r4
    e6dc:	3336      	adds	r3, #54	; 0x36
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	3b07      	subs	r3, #7
    e6e2:	2b01      	cmp	r3, #1
    e6e4:	d80b      	bhi.n	e6fe <Radio_WriteConfiguration+0x16a>
    e6e6:	2031      	movs	r0, #49	; 0x31
    e6e8:	47b0      	blx	r6
    e6ea:	217f      	movs	r1, #127	; 0x7f
    e6ec:	4001      	ands	r1, r0
    e6ee:	2031      	movs	r0, #49	; 0x31
    e6f0:	47a8      	blx	r5
    e6f2:	2140      	movs	r1, #64	; 0x40
    e6f4:	202f      	movs	r0, #47	; 0x2f
    e6f6:	47a8      	blx	r5
    e6f8:	2100      	movs	r1, #0
    e6fa:	2030      	movs	r0, #48	; 0x30
    e6fc:	47a8      	blx	r5
    e6fe:	0023      	movs	r3, r4
    e700:	3336      	adds	r3, #54	; 0x36
    e702:	781b      	ldrb	r3, [r3, #0]
    e704:	2b09      	cmp	r3, #9
    e706:	d107      	bne.n	e718 <Radio_WriteConfiguration+0x184>
    e708:	2031      	movs	r0, #49	; 0x31
    e70a:	47b0      	blx	r6
    e70c:	2180      	movs	r1, #128	; 0x80
    e70e:	4249      	negs	r1, r1
    e710:	4301      	orrs	r1, r0
    e712:	b2c9      	uxtb	r1, r1
    e714:	2031      	movs	r0, #49	; 0x31
    e716:	47a8      	blx	r5
    e718:	2033      	movs	r0, #51	; 0x33
    e71a:	47b0      	blx	r6
    e71c:	1da3      	adds	r3, r4, #6
    e71e:	7fd9      	ldrb	r1, [r3, #31]
    e720:	2340      	movs	r3, #64	; 0x40
    e722:	0189      	lsls	r1, r1, #6
    e724:	4398      	bics	r0, r3
    e726:	4019      	ands	r1, r3
    e728:	4301      	orrs	r1, r0
    e72a:	b2c9      	uxtb	r1, r1
    e72c:	2033      	movs	r0, #51	; 0x33
    e72e:	47a8      	blx	r5
    e730:	8aa1      	ldrh	r1, [r4, #20]
    e732:	2020      	movs	r0, #32
    e734:	0a09      	lsrs	r1, r1, #8
    e736:	47a8      	blx	r5
    e738:	7d21      	ldrb	r1, [r4, #20]
    e73a:	2021      	movs	r0, #33	; 0x21
    e73c:	47a8      	blx	r5
    e73e:	2100      	movs	r1, #0
    e740:	200d      	movs	r0, #13
    e742:	47a8      	blx	r5
    e744:	2100      	movs	r1, #0
    e746:	200e      	movs	r0, #14
    e748:	47a8      	blx	r5
    e74a:	2100      	movs	r1, #0
    e74c:	200f      	movs	r0, #15
    e74e:	47a8      	blx	r5
    e750:	0023      	movs	r3, r4
    e752:	3331      	adds	r3, #49	; 0x31
    e754:	781b      	ldrb	r3, [r3, #0]
    e756:	2b12      	cmp	r3, #18
    e758:	d120      	bne.n	e79c <Radio_WriteConfiguration+0x208>
    e75a:	0023      	movs	r3, r4
    e75c:	3336      	adds	r3, #54	; 0x36
    e75e:	781b      	ldrb	r3, [r3, #0]
    e760:	2b09      	cmp	r3, #9
    e762:	d000      	beq.n	e766 <Radio_WriteConfiguration+0x1d2>
    e764:	e072      	b.n	e84c <Radio_WriteConfiguration+0x2b8>
    e766:	4a44      	ldr	r2, [pc, #272]	; (e878 <Radio_WriteConfiguration+0x2e4>)
    e768:	6823      	ldr	r3, [r4, #0]
    e76a:	1899      	adds	r1, r3, r2
    e76c:	4a43      	ldr	r2, [pc, #268]	; (e87c <Radio_WriteConfiguration+0x2e8>)
    e76e:	4291      	cmp	r1, r2
    e770:	d862      	bhi.n	e838 <Radio_WriteConfiguration+0x2a4>
    e772:	2102      	movs	r1, #2
    e774:	2036      	movs	r0, #54	; 0x36
    e776:	47a8      	blx	r5
    e778:	2164      	movs	r1, #100	; 0x64
    e77a:	203a      	movs	r0, #58	; 0x3a
    e77c:	47a8      	blx	r5
    e77e:	0023      	movs	r3, r4
    e780:	3336      	adds	r3, #54	; 0x36
    e782:	781b      	ldrb	r3, [r3, #0]
    e784:	2165      	movs	r1, #101	; 0x65
    e786:	203a      	movs	r0, #58	; 0x3a
    e788:	2b09      	cmp	r3, #9
    e78a:	d162      	bne.n	e852 <Radio_WriteConfiguration+0x2be>
    e78c:	3406      	adds	r4, #6
    e78e:	7fe3      	ldrb	r3, [r4, #31]
    e790:	2b01      	cmp	r3, #1
    e792:	d15e      	bne.n	e852 <Radio_WriteConfiguration+0x2be>
    e794:	47a8      	blx	r5
    e796:	2119      	movs	r1, #25
    e798:	203b      	movs	r0, #59	; 0x3b
    e79a:	47a8      	blx	r5
    e79c:	21ff      	movs	r1, #255	; 0xff
    e79e:	2012      	movs	r0, #18
    e7a0:	47a8      	blx	r5
    e7a2:	b005      	add	sp, #20
    e7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7a6:	b25b      	sxtb	r3, r3
    e7a8:	3303      	adds	r3, #3
    e7aa:	db00      	blt.n	e7ae <Radio_WriteConfiguration+0x21a>
    e7ac:	e70f      	b.n	e5ce <Radio_WriteConfiguration+0x3a>
    e7ae:	4b34      	ldr	r3, [pc, #208]	; (e880 <Radio_WriteConfiguration+0x2ec>)
    e7b0:	781f      	ldrb	r7, [r3, #0]
    e7b2:	e70c      	b.n	e5ce <Radio_WriteConfiguration+0x3a>
    e7b4:	2170      	movs	r1, #112	; 0x70
    e7b6:	9b01      	ldr	r3, [sp, #4]
    e7b8:	4319      	orrs	r1, r3
    e7ba:	b2c9      	uxtb	r1, r1
    e7bc:	e719      	b.n	e5f2 <Radio_WriteConfiguration+0x5e>
    e7be:	2b01      	cmp	r3, #1
    e7c0:	dd07      	ble.n	e7d2 <Radio_WriteConfiguration+0x23e>
    e7c2:	2714      	movs	r7, #20
    e7c4:	2b13      	cmp	r3, #19
    e7c6:	dc06      	bgt.n	e7d6 <Radio_WriteConfiguration+0x242>
    e7c8:	1c1f      	adds	r7, r3, #0
    e7ca:	2b11      	cmp	r3, #17
    e7cc:	dd02      	ble.n	e7d4 <Radio_WriteConfiguration+0x240>
    e7ce:	2711      	movs	r7, #17
    e7d0:	e000      	b.n	e7d4 <Radio_WriteConfiguration+0x240>
    e7d2:	2702      	movs	r7, #2
    e7d4:	b27f      	sxtb	r7, r7
    e7d6:	200b      	movs	r0, #11
    e7d8:	47b0      	blx	r6
    e7da:	9003      	str	r0, [sp, #12]
    e7dc:	204d      	movs	r0, #77	; 0x4d
    e7de:	47b0      	blx	r6
    e7e0:	2307      	movs	r3, #7
    e7e2:	4398      	bics	r0, r3
    e7e4:	b2c1      	uxtb	r1, r0
    e7e6:	2f14      	cmp	r7, #20
    e7e8:	d112      	bne.n	e810 <Radio_WriteConfiguration+0x27c>
    e7ea:	4319      	orrs	r1, r3
    e7ec:	9b03      	ldr	r3, [sp, #12]
    e7ee:	37cb      	adds	r7, #203	; 0xcb
    e7f0:	403b      	ands	r3, r7
    e7f2:	001f      	movs	r7, r3
    e7f4:	230f      	movs	r3, #15
    e7f6:	9301      	str	r3, [sp, #4]
    e7f8:	204d      	movs	r0, #77	; 0x4d
    e7fa:	47a8      	blx	r5
    e7fc:	2180      	movs	r1, #128	; 0x80
    e7fe:	9b01      	ldr	r3, [sp, #4]
    e800:	4249      	negs	r1, r1
    e802:	4319      	orrs	r1, r3
    e804:	b2c9      	uxtb	r1, r1
    e806:	2009      	movs	r0, #9
    e808:	47a8      	blx	r5
    e80a:	0039      	movs	r1, r7
    e80c:	200b      	movs	r0, #11
    e80e:	e6f1      	b.n	e5f4 <Radio_WriteConfiguration+0x60>
    e810:	3f02      	subs	r7, #2
    e812:	b27b      	sxtb	r3, r7
    e814:	2720      	movs	r7, #32
    e816:	2004      	movs	r0, #4
    e818:	9301      	str	r3, [sp, #4]
    e81a:	9b03      	ldr	r3, [sp, #12]
    e81c:	4301      	orrs	r1, r0
    e81e:	431f      	orrs	r7, r3
    e820:	b2ff      	uxtb	r7, r7
    e822:	e7e9      	b.n	e7f8 <Radio_WriteConfiguration+0x264>
    e824:	23fa      	movs	r3, #250	; 0xfa
    e826:	e71f      	b.n	e668 <Radio_WriteConfiguration+0xd4>
    e828:	23fa      	movs	r3, #250	; 0xfa
    e82a:	005b      	lsls	r3, r3, #1
    e82c:	e71c      	b.n	e668 <Radio_WriteConfiguration+0xd4>
    e82e:	0019      	movs	r1, r3
    e830:	e71b      	b.n	e66a <Radio_WriteConfiguration+0xd6>
    e832:	21f7      	movs	r1, #247	; 0xf7
    e834:	4008      	ands	r0, r1
    e836:	e73c      	b.n	e6b2 <Radio_WriteConfiguration+0x11e>
    e838:	4a12      	ldr	r2, [pc, #72]	; (e884 <Radio_WriteConfiguration+0x2f0>)
    e83a:	189b      	adds	r3, r3, r2
    e83c:	4a12      	ldr	r2, [pc, #72]	; (e888 <Radio_WriteConfiguration+0x2f4>)
    e83e:	4293      	cmp	r3, r2
    e840:	d804      	bhi.n	e84c <Radio_WriteConfiguration+0x2b8>
    e842:	2102      	movs	r1, #2
    e844:	2036      	movs	r0, #54	; 0x36
    e846:	47a8      	blx	r5
    e848:	217f      	movs	r1, #127	; 0x7f
    e84a:	e796      	b.n	e77a <Radio_WriteConfiguration+0x1e6>
    e84c:	2103      	movs	r1, #3
    e84e:	2036      	movs	r0, #54	; 0x36
    e850:	e794      	b.n	e77c <Radio_WriteConfiguration+0x1e8>
    e852:	47a8      	blx	r5
    e854:	211d      	movs	r1, #29
    e856:	e79f      	b.n	e798 <Radio_WriteConfiguration+0x204>
    e858:	20002d78 	.word	0x20002d78
    e85c:	0000d6a5 	.word	0x0000d6a5
    e860:	0000e54d 	.word	0x0000e54d
    e864:	0000c4a5 	.word	0x0000c4a5
    e868:	0000c47d 	.word	0x0000c47d
    e86c:	20002dae 	.word	0x20002dae
    e870:	00ffff00 	.word	0x00ffff00
    e874:	00070b00 	.word	0x00070b00
    e878:	cc9eec80 	.word	0xcc9eec80
    e87c:	096ae380 	.word	0x096ae380
    e880:	00018b28 	.word	0x00018b28
    e884:	e78fe580 	.word	0xe78fe580
    e888:	06dac2c0 	.word	0x06dac2c0
    e88c:	6863      	ldr	r3, [r4, #4]
    e88e:	492c      	ldr	r1, [pc, #176]	; (e940 <Radio_WriteConfiguration+0x3ac>)
    e890:	0218      	lsls	r0, r3, #8
    e892:	4b2c      	ldr	r3, [pc, #176]	; (e944 <Radio_WriteConfiguration+0x3b0>)
    e894:	4798      	blx	r3
    e896:	0007      	movs	r7, r0
    e898:	0a01      	lsrs	r1, r0, #8
    e89a:	b2c9      	uxtb	r1, r1
    e89c:	2004      	movs	r0, #4
    e89e:	47a8      	blx	r5
    e8a0:	b2f9      	uxtb	r1, r7
    e8a2:	2005      	movs	r0, #5
    e8a4:	47a8      	blx	r5
    e8a6:	4b27      	ldr	r3, [pc, #156]	; (e944 <Radio_WriteConfiguration+0x3b0>)
    e8a8:	68a1      	ldr	r1, [r4, #8]
    e8aa:	4827      	ldr	r0, [pc, #156]	; (e948 <Radio_WriteConfiguration+0x3b4>)
    e8ac:	4798      	blx	r3
    e8ae:	0007      	movs	r7, r0
    e8b0:	0a01      	lsrs	r1, r0, #8
    e8b2:	b2c9      	uxtb	r1, r1
    e8b4:	2002      	movs	r0, #2
    e8b6:	47a8      	blx	r5
    e8b8:	b2f9      	uxtb	r1, r7
    e8ba:	2003      	movs	r0, #3
    e8bc:	47a8      	blx	r5
    e8be:	2100      	movs	r1, #0
    e8c0:	205d      	movs	r0, #93	; 0x5d
    e8c2:	47a8      	blx	r5
    e8c4:	8aa1      	ldrh	r1, [r4, #20]
    e8c6:	2025      	movs	r0, #37	; 0x25
    e8c8:	0a09      	lsrs	r1, r1, #8
    e8ca:	47a8      	blx	r5
    e8cc:	7d21      	ldrb	r1, [r4, #20]
    e8ce:	2026      	movs	r0, #38	; 0x26
    e8d0:	47a8      	blx	r5
    e8d2:	219e      	movs	r1, #158	; 0x9e
    e8d4:	200d      	movs	r0, #13
    e8d6:	47a8      	blx	r5
    e8d8:	21bf      	movs	r1, #191	; 0xbf
    e8da:	2035      	movs	r0, #53	; 0x35
    e8dc:	47a8      	blx	r5
    e8de:	200a      	movs	r0, #10
    e8e0:	47b0      	blx	r6
    e8e2:	0023      	movs	r3, r4
    e8e4:	3337      	adds	r3, #55	; 0x37
    e8e6:	7819      	ldrb	r1, [r3, #0]
    e8e8:	2360      	movs	r3, #96	; 0x60
    e8ea:	0149      	lsls	r1, r1, #5
    e8ec:	4398      	bics	r0, r3
    e8ee:	4301      	orrs	r1, r0
    e8f0:	b2c9      	uxtb	r1, r1
    e8f2:	200a      	movs	r0, #10
    e8f4:	47a8      	blx	r5
    e8f6:	1d23      	adds	r3, r4, #4
    e8f8:	7fdb      	ldrb	r3, [r3, #31]
    e8fa:	21c0      	movs	r1, #192	; 0xc0
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d000      	beq.n	e902 <Radio_WriteConfiguration+0x36e>
    e900:	3110      	adds	r1, #16
    e902:	2030      	movs	r0, #48	; 0x30
    e904:	47a8      	blx	r5
    e906:	2600      	movs	r6, #0
    e908:	1ca3      	adds	r3, r4, #2
    e90a:	7fd9      	ldrb	r1, [r3, #31]
    e90c:	428e      	cmp	r6, r1
    e90e:	d30d      	bcc.n	e92c <Radio_WriteConfiguration+0x398>
    e910:	2900      	cmp	r1, #0
    e912:	d003      	beq.n	e91c <Radio_WriteConfiguration+0x388>
    e914:	2310      	movs	r3, #16
    e916:	3901      	subs	r1, #1
    e918:	4319      	orrs	r1, r3
    e91a:	b2c9      	uxtb	r1, r1
    e91c:	2027      	movs	r0, #39	; 0x27
    e91e:	47a8      	blx	r5
    e920:	21ff      	movs	r1, #255	; 0xff
    e922:	203e      	movs	r0, #62	; 0x3e
    e924:	47a8      	blx	r5
    e926:	21ff      	movs	r1, #255	; 0xff
    e928:	203f      	movs	r0, #63	; 0x3f
    e92a:	e739      	b.n	e7a0 <Radio_WriteConfiguration+0x20c>
    e92c:	0030      	movs	r0, r6
    e92e:	19a3      	adds	r3, r4, r6
    e930:	3028      	adds	r0, #40	; 0x28
    e932:	7e59      	ldrb	r1, [r3, #25]
    e934:	b2c0      	uxtb	r0, r0
    e936:	3601      	adds	r6, #1
    e938:	47a8      	blx	r5
    e93a:	b2f6      	uxtb	r6, r6
    e93c:	e7e4      	b.n	e908 <Radio_WriteConfiguration+0x374>
    e93e:	46c0      	nop			; (mov r8, r8)
    e940:	00003d09 	.word	0x00003d09
    e944:	00013529 	.word	0x00013529
    e948:	01e84800 	.word	0x01e84800

0000e94c <RADIO_getMappingAndOpmode>:
    e94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e94e:	0006      	movs	r6, r0
    e950:	4d06      	ldr	r5, [pc, #24]	; (e96c <RADIO_getMappingAndOpmode+0x20>)
    e952:	2040      	movs	r0, #64	; 0x40
    e954:	001f      	movs	r7, r3
    e956:	0014      	movs	r4, r2
    e958:	9101      	str	r1, [sp, #4]
    e95a:	47a8      	blx	r5
    e95c:	4004      	ands	r4, r0
    e95e:	413c      	asrs	r4, r7
    e960:	2001      	movs	r0, #1
    e962:	7034      	strb	r4, [r6, #0]
    e964:	47a8      	blx	r5
    e966:	9b01      	ldr	r3, [sp, #4]
    e968:	7018      	strb	r0, [r3, #0]
    e96a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e96c:	0000c4a5 	.word	0x0000c4a5

0000e970 <RADIO_UnhandledInterrupt.part.0>:
    e970:	b510      	push	{r4, lr}
    e972:	21ff      	movs	r1, #255	; 0xff
    e974:	2012      	movs	r0, #18
    e976:	4b01      	ldr	r3, [pc, #4]	; (e97c <RADIO_UnhandledInterrupt.part.0+0xc>)
    e978:	4798      	blx	r3
    e97a:	bd10      	pop	{r4, pc}
    e97c:	0000c47d 	.word	0x0000c47d

0000e980 <RADIO_UnhandledInterrupt>:
    e980:	b510      	push	{r4, lr}
    e982:	2801      	cmp	r0, #1
    e984:	d102      	bne.n	e98c <RADIO_UnhandledInterrupt+0xc>
    e986:	4b05      	ldr	r3, [pc, #20]	; (e99c <RADIO_UnhandledInterrupt+0x1c>)
    e988:	4798      	blx	r3
    e98a:	bd10      	pop	{r4, pc}
    e98c:	21ff      	movs	r1, #255	; 0xff
    e98e:	203e      	movs	r0, #62	; 0x3e
    e990:	4c03      	ldr	r4, [pc, #12]	; (e9a0 <RADIO_UnhandledInterrupt+0x20>)
    e992:	47a0      	blx	r4
    e994:	21ff      	movs	r1, #255	; 0xff
    e996:	203f      	movs	r0, #63	; 0x3f
    e998:	47a0      	blx	r4
    e99a:	e7f6      	b.n	e98a <RADIO_UnhandledInterrupt+0xa>
    e99c:	0000e971 	.word	0x0000e971
    e9a0:	0000c47d 	.word	0x0000c47d

0000e9a4 <RADIO_DIO0>:
    e9a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e9a6:	466b      	mov	r3, sp
    e9a8:	1ddc      	adds	r4, r3, #7
    e9aa:	1d9d      	adds	r5, r3, #6
    e9ac:	22c0      	movs	r2, #192	; 0xc0
    e9ae:	2306      	movs	r3, #6
    e9b0:	0028      	movs	r0, r5
    e9b2:	0021      	movs	r1, r4
    e9b4:	4e12      	ldr	r6, [pc, #72]	; (ea00 <RADIO_DIO0+0x5c>)
    e9b6:	47b0      	blx	r6
    e9b8:	7823      	ldrb	r3, [r4, #0]
    e9ba:	7828      	ldrb	r0, [r5, #0]
    e9bc:	b25a      	sxtb	r2, r3
    e9be:	b2c0      	uxtb	r0, r0
    e9c0:	2a00      	cmp	r2, #0
    e9c2:	da0b      	bge.n	e9dc <RADIO_DIO0+0x38>
    e9c4:	2800      	cmp	r0, #0
    e9c6:	d004      	beq.n	e9d2 <RADIO_DIO0+0x2e>
    e9c8:	2801      	cmp	r0, #1
    e9ca:	d005      	beq.n	e9d8 <RADIO_DIO0+0x34>
    e9cc:	4b0d      	ldr	r3, [pc, #52]	; (ea04 <RADIO_DIO0+0x60>)
    e9ce:	4798      	blx	r3
    e9d0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e9d2:	4b0d      	ldr	r3, [pc, #52]	; (ea08 <RADIO_DIO0+0x64>)
    e9d4:	4798      	blx	r3
    e9d6:	e7fb      	b.n	e9d0 <RADIO_DIO0+0x2c>
    e9d8:	4b0c      	ldr	r3, [pc, #48]	; (ea0c <RADIO_DIO0+0x68>)
    e9da:	e7fb      	b.n	e9d4 <RADIO_DIO0+0x30>
    e9dc:	2800      	cmp	r0, #0
    e9de:	d10a      	bne.n	e9f6 <RADIO_DIO0+0x52>
    e9e0:	2207      	movs	r2, #7
    e9e2:	4013      	ands	r3, r2
    e9e4:	7023      	strb	r3, [r4, #0]
    e9e6:	2b03      	cmp	r3, #3
    e9e8:	d101      	bne.n	e9ee <RADIO_DIO0+0x4a>
    e9ea:	4b09      	ldr	r3, [pc, #36]	; (ea10 <RADIO_DIO0+0x6c>)
    e9ec:	e7f2      	b.n	e9d4 <RADIO_DIO0+0x30>
    e9ee:	2b05      	cmp	r3, #5
    e9f0:	d102      	bne.n	e9f8 <RADIO_DIO0+0x54>
    e9f2:	4b08      	ldr	r3, [pc, #32]	; (ea14 <RADIO_DIO0+0x70>)
    e9f4:	e7ee      	b.n	e9d4 <RADIO_DIO0+0x30>
    e9f6:	2000      	movs	r0, #0
    e9f8:	4b07      	ldr	r3, [pc, #28]	; (ea18 <RADIO_DIO0+0x74>)
    e9fa:	4798      	blx	r3
    e9fc:	e7e8      	b.n	e9d0 <RADIO_DIO0+0x2c>
    e9fe:	46c0      	nop			; (mov r8, r8)
    ea00:	0000e94d 	.word	0x0000e94d
    ea04:	0000e971 	.word	0x0000e971
    ea08:	0000f035 	.word	0x0000f035
    ea0c:	0000ef39 	.word	0x0000ef39
    ea10:	0000efb5 	.word	0x0000efb5
    ea14:	0000f0b1 	.word	0x0000f0b1
    ea18:	0000e981 	.word	0x0000e981

0000ea1c <RADIO_DIO1>:
    ea1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ea1e:	466b      	mov	r3, sp
    ea20:	1ddc      	adds	r4, r3, #7
    ea22:	1d9d      	adds	r5, r3, #6
    ea24:	2230      	movs	r2, #48	; 0x30
    ea26:	2304      	movs	r3, #4
    ea28:	0021      	movs	r1, r4
    ea2a:	0028      	movs	r0, r5
    ea2c:	4e11      	ldr	r6, [pc, #68]	; (ea74 <RADIO_DIO1+0x58>)
    ea2e:	47b0      	blx	r6
    ea30:	7822      	ldrb	r2, [r4, #0]
    ea32:	782b      	ldrb	r3, [r5, #0]
    ea34:	b251      	sxtb	r1, r2
    ea36:	2900      	cmp	r1, #0
    ea38:	da0c      	bge.n	ea54 <RADIO_DIO1+0x38>
    ea3a:	b2db      	uxtb	r3, r3
    ea3c:	2b00      	cmp	r3, #0
    ea3e:	d004      	beq.n	ea4a <RADIO_DIO1+0x2e>
    ea40:	2b01      	cmp	r3, #1
    ea42:	d005      	beq.n	ea50 <RADIO_DIO1+0x34>
    ea44:	4b0c      	ldr	r3, [pc, #48]	; (ea78 <RADIO_DIO1+0x5c>)
    ea46:	4798      	blx	r3
    ea48:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ea4a:	4b0c      	ldr	r3, [pc, #48]	; (ea7c <RADIO_DIO1+0x60>)
    ea4c:	4798      	blx	r3
    ea4e:	e7fb      	b.n	ea48 <RADIO_DIO1+0x2c>
    ea50:	4b0b      	ldr	r3, [pc, #44]	; (ea80 <RADIO_DIO1+0x64>)
    ea52:	e7fb      	b.n	ea4c <RADIO_DIO1+0x30>
    ea54:	2107      	movs	r1, #7
    ea56:	b2db      	uxtb	r3, r3
    ea58:	400a      	ands	r2, r1
    ea5a:	7022      	strb	r2, [r4, #0]
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	d005      	beq.n	ea6c <RADIO_DIO1+0x50>
    ea60:	2b01      	cmp	r3, #1
    ea62:	d1f1      	bne.n	ea48 <RADIO_DIO1+0x2c>
    ea64:	2a03      	cmp	r2, #3
    ea66:	d1ef      	bne.n	ea48 <RADIO_DIO1+0x2c>
    ea68:	4b06      	ldr	r3, [pc, #24]	; (ea84 <RADIO_DIO1+0x68>)
    ea6a:	e7ef      	b.n	ea4c <RADIO_DIO1+0x30>
    ea6c:	4b06      	ldr	r3, [pc, #24]	; (ea88 <RADIO_DIO1+0x6c>)
    ea6e:	2a05      	cmp	r2, #5
    ea70:	d1ea      	bne.n	ea48 <RADIO_DIO1+0x2c>
    ea72:	e7eb      	b.n	ea4c <RADIO_DIO1+0x30>
    ea74:	0000e94d 	.word	0x0000e94d
    ea78:	0000e971 	.word	0x0000e971
    ea7c:	0000eebd 	.word	0x0000eebd
    ea80:	0000d789 	.word	0x0000d789
    ea84:	0000edd9 	.word	0x0000edd9
    ea88:	0000ed3d 	.word	0x0000ed3d

0000ea8c <RADIO_DIO2>:
    ea8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ea8e:	466b      	mov	r3, sp
    ea90:	1ddc      	adds	r4, r3, #7
    ea92:	1d9d      	adds	r5, r3, #6
    ea94:	220c      	movs	r2, #12
    ea96:	2302      	movs	r3, #2
    ea98:	0021      	movs	r1, r4
    ea9a:	0028      	movs	r0, r5
    ea9c:	4e0b      	ldr	r6, [pc, #44]	; (eacc <RADIO_DIO2+0x40>)
    ea9e:	47b0      	blx	r6
    eaa0:	7823      	ldrb	r3, [r4, #0]
    eaa2:	782a      	ldrb	r2, [r5, #0]
    eaa4:	b259      	sxtb	r1, r3
    eaa6:	2900      	cmp	r1, #0
    eaa8:	da05      	bge.n	eab6 <RADIO_DIO2+0x2a>
    eaaa:	4b09      	ldr	r3, [pc, #36]	; (ead0 <RADIO_DIO2+0x44>)
    eaac:	2a02      	cmp	r2, #2
    eaae:	d90a      	bls.n	eac6 <RADIO_DIO2+0x3a>
    eab0:	4b08      	ldr	r3, [pc, #32]	; (ead4 <RADIO_DIO2+0x48>)
    eab2:	4798      	blx	r3
    eab4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    eab6:	2107      	movs	r1, #7
    eab8:	400b      	ands	r3, r1
    eaba:	7023      	strb	r3, [r4, #0]
    eabc:	2a03      	cmp	r2, #3
    eabe:	d1f9      	bne.n	eab4 <RADIO_DIO2+0x28>
    eac0:	2b05      	cmp	r3, #5
    eac2:	d1f7      	bne.n	eab4 <RADIO_DIO2+0x28>
    eac4:	4b04      	ldr	r3, [pc, #16]	; (ead8 <RADIO_DIO2+0x4c>)
    eac6:	4798      	blx	r3
    eac8:	e7f4      	b.n	eab4 <RADIO_DIO2+0x28>
    eaca:	46c0      	nop			; (mov r8, r8)
    eacc:	0000e94d 	.word	0x0000e94d
    ead0:	0000d789 	.word	0x0000d789
    ead4:	0000e971 	.word	0x0000e971
    ead8:	0000ed0d 	.word	0x0000ed0d

0000eadc <RADIO_DIO3>:
    eadc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eade:	466b      	mov	r3, sp
    eae0:	4668      	mov	r0, sp
    eae2:	1ddc      	adds	r4, r3, #7
    eae4:	2203      	movs	r2, #3
    eae6:	2300      	movs	r3, #0
    eae8:	0021      	movs	r1, r4
    eaea:	3006      	adds	r0, #6
    eaec:	4d03      	ldr	r5, [pc, #12]	; (eafc <RADIO_DIO3+0x20>)
    eaee:	47a8      	blx	r5
    eaf0:	7823      	ldrb	r3, [r4, #0]
    eaf2:	2b7f      	cmp	r3, #127	; 0x7f
    eaf4:	d901      	bls.n	eafa <RADIO_DIO3+0x1e>
    eaf6:	4b02      	ldr	r3, [pc, #8]	; (eb00 <RADIO_DIO3+0x24>)
    eaf8:	4798      	blx	r3
    eafa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eafc:	0000e94d 	.word	0x0000e94d
    eb00:	0000e971 	.word	0x0000e971

0000eb04 <RADIO_DIO4>:
    eb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eb06:	466b      	mov	r3, sp
    eb08:	4668      	mov	r0, sp
    eb0a:	1ddc      	adds	r4, r3, #7
    eb0c:	2306      	movs	r3, #6
    eb0e:	22c0      	movs	r2, #192	; 0xc0
    eb10:	18c0      	adds	r0, r0, r3
    eb12:	0021      	movs	r1, r4
    eb14:	4d03      	ldr	r5, [pc, #12]	; (eb24 <RADIO_DIO4+0x20>)
    eb16:	47a8      	blx	r5
    eb18:	7823      	ldrb	r3, [r4, #0]
    eb1a:	2b7f      	cmp	r3, #127	; 0x7f
    eb1c:	d901      	bls.n	eb22 <RADIO_DIO4+0x1e>
    eb1e:	4b02      	ldr	r3, [pc, #8]	; (eb28 <RADIO_DIO4+0x24>)
    eb20:	4798      	blx	r3
    eb22:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eb24:	0000e94d 	.word	0x0000e94d
    eb28:	0000e971 	.word	0x0000e971

0000eb2c <RADIO_DIO5>:
    eb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eb2e:	466b      	mov	r3, sp
    eb30:	4668      	mov	r0, sp
    eb32:	1ddc      	adds	r4, r3, #7
    eb34:	2230      	movs	r2, #48	; 0x30
    eb36:	2304      	movs	r3, #4
    eb38:	0021      	movs	r1, r4
    eb3a:	3006      	adds	r0, #6
    eb3c:	4d03      	ldr	r5, [pc, #12]	; (eb4c <RADIO_DIO5+0x20>)
    eb3e:	47a8      	blx	r5
    eb40:	7823      	ldrb	r3, [r4, #0]
    eb42:	2b7f      	cmp	r3, #127	; 0x7f
    eb44:	d901      	bls.n	eb4a <RADIO_DIO5+0x1e>
    eb46:	4b02      	ldr	r3, [pc, #8]	; (eb50 <RADIO_DIO5+0x24>)
    eb48:	4798      	blx	r3
    eb4a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eb4c:	0000e94d 	.word	0x0000e94d
    eb50:	0000e971 	.word	0x0000e971

0000eb54 <radioPostTask>:
    eb54:	b510      	push	{r4, lr}
    eb56:	0004      	movs	r4, r0
    eb58:	4b05      	ldr	r3, [pc, #20]	; (eb70 <radioPostTask+0x1c>)
    eb5a:	4798      	blx	r3
    eb5c:	4b05      	ldr	r3, [pc, #20]	; (eb74 <radioPostTask+0x20>)
    eb5e:	8818      	ldrh	r0, [r3, #0]
    eb60:	4320      	orrs	r0, r4
    eb62:	8018      	strh	r0, [r3, #0]
    eb64:	4b04      	ldr	r3, [pc, #16]	; (eb78 <radioPostTask+0x24>)
    eb66:	4798      	blx	r3
    eb68:	2002      	movs	r0, #2
    eb6a:	4b04      	ldr	r3, [pc, #16]	; (eb7c <radioPostTask+0x28>)
    eb6c:	4798      	blx	r3
    eb6e:	bd10      	pop	{r4, pc}
    eb70:	0000c635 	.word	0x0000c635
    eb74:	20001e9c 	.word	0x20001e9c
    eb78:	0000c641 	.word	0x0000c641
    eb7c:	0000d681 	.word	0x0000d681

0000eb80 <radioClearTask>:
    eb80:	b510      	push	{r4, lr}
    eb82:	0004      	movs	r4, r0
    eb84:	4b04      	ldr	r3, [pc, #16]	; (eb98 <radioClearTask+0x18>)
    eb86:	4798      	blx	r3
    eb88:	4a04      	ldr	r2, [pc, #16]	; (eb9c <radioClearTask+0x1c>)
    eb8a:	8813      	ldrh	r3, [r2, #0]
    eb8c:	43a3      	bics	r3, r4
    eb8e:	8013      	strh	r3, [r2, #0]
    eb90:	4b03      	ldr	r3, [pc, #12]	; (eba0 <radioClearTask+0x20>)
    eb92:	4798      	blx	r3
    eb94:	bd10      	pop	{r4, pc}
    eb96:	46c0      	nop			; (mov r8, r8)
    eb98:	0000c635 	.word	0x0000c635
    eb9c:	20001e9c 	.word	0x20001e9c
    eba0:	0000c641 	.word	0x0000c641

0000eba4 <RADIO_TaskHandler>:
    eba4:	b570      	push	{r4, r5, r6, lr}
    eba6:	2400      	movs	r4, #0
    eba8:	4d10      	ldr	r5, [pc, #64]	; (ebec <RADIO_TaskHandler+0x48>)
    ebaa:	2601      	movs	r6, #1
    ebac:	882b      	ldrh	r3, [r5, #0]
    ebae:	42a3      	cmp	r3, r4
    ebb0:	d015      	beq.n	ebde <RADIO_TaskHandler+0x3a>
    ebb2:	882b      	ldrh	r3, [r5, #0]
    ebb4:	4123      	asrs	r3, r4
    ebb6:	4233      	tst	r3, r6
    ebb8:	d013      	beq.n	ebe2 <RADIO_TaskHandler+0x3e>
    ebba:	40a6      	lsls	r6, r4
    ebbc:	4b0c      	ldr	r3, [pc, #48]	; (ebf0 <RADIO_TaskHandler+0x4c>)
    ebbe:	4798      	blx	r3
    ebc0:	882b      	ldrh	r3, [r5, #0]
    ebc2:	00a4      	lsls	r4, r4, #2
    ebc4:	43b3      	bics	r3, r6
    ebc6:	802b      	strh	r3, [r5, #0]
    ebc8:	4b0a      	ldr	r3, [pc, #40]	; (ebf4 <RADIO_TaskHandler+0x50>)
    ebca:	4798      	blx	r3
    ebcc:	4b0a      	ldr	r3, [pc, #40]	; (ebf8 <RADIO_TaskHandler+0x54>)
    ebce:	58e3      	ldr	r3, [r4, r3]
    ebd0:	4798      	blx	r3
    ebd2:	882b      	ldrh	r3, [r5, #0]
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d002      	beq.n	ebde <RADIO_TaskHandler+0x3a>
    ebd8:	2002      	movs	r0, #2
    ebda:	4b08      	ldr	r3, [pc, #32]	; (ebfc <RADIO_TaskHandler+0x58>)
    ebdc:	4798      	blx	r3
    ebde:	2000      	movs	r0, #0
    ebe0:	bd70      	pop	{r4, r5, r6, pc}
    ebe2:	3401      	adds	r4, #1
    ebe4:	2c05      	cmp	r4, #5
    ebe6:	d1e4      	bne.n	ebb2 <RADIO_TaskHandler+0xe>
    ebe8:	e7f9      	b.n	ebde <RADIO_TaskHandler+0x3a>
    ebea:	46c0      	nop			; (mov r8, r8)
    ebec:	20001e9c 	.word	0x20001e9c
    ebf0:	0000c635 	.word	0x0000c635
    ebf4:	0000c641 	.word	0x0000c641
    ebf8:	00018b2c 	.word	0x00018b2c
    ebfc:	0000d681 	.word	0x0000d681

0000ec00 <RadioSetState>:
    ec00:	4b01      	ldr	r3, [pc, #4]	; (ec08 <RadioSetState+0x8>)
    ec02:	7018      	strb	r0, [r3, #0]
    ec04:	4770      	bx	lr
    ec06:	46c0      	nop			; (mov r8, r8)
    ec08:	20003047 	.word	0x20003047

0000ec0c <RADIO_GetState>:
    ec0c:	4b01      	ldr	r3, [pc, #4]	; (ec14 <RADIO_GetState+0x8>)
    ec0e:	7818      	ldrb	r0, [r3, #0]
    ec10:	b2c0      	uxtb	r0, r0
    ec12:	4770      	bx	lr
    ec14:	20003047 	.word	0x20003047

0000ec18 <RADIO_SetCallbackBitmask>:
    ec18:	4a02      	ldr	r2, [pc, #8]	; (ec24 <RADIO_SetCallbackBitmask+0xc>)
    ec1a:	7813      	ldrb	r3, [r2, #0]
    ec1c:	4318      	orrs	r0, r3
    ec1e:	7010      	strb	r0, [r2, #0]
    ec20:	4770      	bx	lr
    ec22:	46c0      	nop			; (mov r8, r8)
    ec24:	20003046 	.word	0x20003046

0000ec28 <RADIO_Transmit>:
    ec28:	b570      	push	{r4, r5, r6, lr}
    ec2a:	4d10      	ldr	r5, [pc, #64]	; (ec6c <RADIO_Transmit+0x44>)
    ec2c:	0006      	movs	r6, r0
    ec2e:	782b      	ldrb	r3, [r5, #0]
    ec30:	2004      	movs	r0, #4
    ec32:	2b01      	cmp	r3, #1
    ec34:	d118      	bne.n	ec68 <RADIO_Transmit+0x40>
    ec36:	4c0e      	ldr	r4, [pc, #56]	; (ec70 <RADIO_Transmit+0x48>)
    ec38:	0023      	movs	r3, r4
    ec3a:	332f      	adds	r3, #47	; 0x2f
    ec3c:	7818      	ldrb	r0, [r3, #0]
    ec3e:	4b0d      	ldr	r3, [pc, #52]	; (ec74 <RADIO_Transmit+0x4c>)
    ec40:	4798      	blx	r3
    ec42:	4b0d      	ldr	r3, [pc, #52]	; (ec78 <RADIO_Transmit+0x50>)
    ec44:	7832      	ldrb	r2, [r6, #0]
    ec46:	6871      	ldr	r1, [r6, #4]
    ec48:	701a      	strb	r2, [r3, #0]
    ec4a:	4b0c      	ldr	r3, [pc, #48]	; (ec7c <RADIO_Transmit+0x54>)
    ec4c:	3434      	adds	r4, #52	; 0x34
    ec4e:	6019      	str	r1, [r3, #0]
    ec50:	7821      	ldrb	r1, [r4, #0]
    ec52:	2302      	movs	r3, #2
    ec54:	2900      	cmp	r1, #0
    ec56:	d102      	bne.n	ec5e <RADIO_Transmit+0x36>
    ec58:	0018      	movs	r0, r3
    ec5a:	2a3f      	cmp	r2, #63	; 0x3f
    ec5c:	d804      	bhi.n	ec68 <RADIO_Transmit+0x40>
    ec5e:	702b      	strb	r3, [r5, #0]
    ec60:	2004      	movs	r0, #4
    ec62:	4b07      	ldr	r3, [pc, #28]	; (ec80 <RADIO_Transmit+0x58>)
    ec64:	4798      	blx	r3
    ec66:	2000      	movs	r0, #0
    ec68:	bd70      	pop	{r4, r5, r6, pc}
    ec6a:	46c0      	nop			; (mov r8, r8)
    ec6c:	20003047 	.word	0x20003047
    ec70:	20002d78 	.word	0x20002d78
    ec74:	0000d381 	.word	0x0000d381
    ec78:	20001eb4 	.word	0x20001eb4
    ec7c:	20001eb0 	.word	0x20001eb0
    ec80:	0000eb55 	.word	0x0000eb55

0000ec84 <Radio_FSKTxPayloadHandler>:
    ec84:	b570      	push	{r4, r5, r6, lr}
    ec86:	4b1c      	ldr	r3, [pc, #112]	; (ecf8 <Radio_FSKTxPayloadHandler+0x74>)
    ec88:	000d      	movs	r5, r1
    ec8a:	4798      	blx	r3
    ec8c:	4c1b      	ldr	r4, [pc, #108]	; (ecfc <Radio_FSKTxPayloadHandler+0x78>)
    ec8e:	3458      	adds	r4, #88	; 0x58
    ec90:	7820      	ldrb	r0, [r4, #0]
    ec92:	b2c0      	uxtb	r0, r0
    ec94:	2800      	cmp	r0, #0
    ec96:	d112      	bne.n	ecbe <Radio_FSKTxPayloadHandler+0x3a>
    ec98:	2d00      	cmp	r5, #0
    ec9a:	d007      	beq.n	ecac <Radio_FSKTxPayloadHandler+0x28>
    ec9c:	4918      	ldr	r1, [pc, #96]	; (ed00 <Radio_FSKTxPayloadHandler+0x7c>)
    ec9e:	4b19      	ldr	r3, [pc, #100]	; (ed04 <Radio_FSKTxPayloadHandler+0x80>)
    eca0:	2d3e      	cmp	r5, #62	; 0x3e
    eca2:	d806      	bhi.n	ecb2 <Radio_FSKTxPayloadHandler+0x2e>
    eca4:	002a      	movs	r2, r5
    eca6:	6809      	ldr	r1, [r1, #0]
    eca8:	4798      	blx	r3
    ecaa:	7025      	strb	r5, [r4, #0]
    ecac:	4b16      	ldr	r3, [pc, #88]	; (ed08 <Radio_FSKTxPayloadHandler+0x84>)
    ecae:	4798      	blx	r3
    ecb0:	bd70      	pop	{r4, r5, r6, pc}
    ecb2:	223f      	movs	r2, #63	; 0x3f
    ecb4:	6809      	ldr	r1, [r1, #0]
    ecb6:	4798      	blx	r3
    ecb8:	233f      	movs	r3, #63	; 0x3f
    ecba:	7023      	strb	r3, [r4, #0]
    ecbc:	e7f6      	b.n	ecac <Radio_FSKTxPayloadHandler+0x28>
    ecbe:	7823      	ldrb	r3, [r4, #0]
    ecc0:	429d      	cmp	r5, r3
    ecc2:	d0f3      	beq.n	ecac <Radio_FSKTxPayloadHandler+0x28>
    ecc4:	7822      	ldrb	r2, [r4, #0]
    ecc6:	480e      	ldr	r0, [pc, #56]	; (ed00 <Radio_FSKTxPayloadHandler+0x7c>)
    ecc8:	1aaa      	subs	r2, r5, r2
    ecca:	b2d2      	uxtb	r2, r2
    eccc:	4b0d      	ldr	r3, [pc, #52]	; (ed04 <Radio_FSKTxPayloadHandler+0x80>)
    ecce:	2a3f      	cmp	r2, #63	; 0x3f
    ecd0:	d807      	bhi.n	ece2 <Radio_FSKTxPayloadHandler+0x5e>
    ecd2:	7826      	ldrb	r6, [r4, #0]
    ecd4:	7822      	ldrb	r2, [r4, #0]
    ecd6:	6801      	ldr	r1, [r0, #0]
    ecd8:	1aaa      	subs	r2, r5, r2
    ecda:	b2d2      	uxtb	r2, r2
    ecdc:	1989      	adds	r1, r1, r6
    ecde:	2000      	movs	r0, #0
    ece0:	e7e2      	b.n	eca8 <Radio_FSKTxPayloadHandler+0x24>
    ece2:	7822      	ldrb	r2, [r4, #0]
    ece4:	6801      	ldr	r1, [r0, #0]
    ece6:	2000      	movs	r0, #0
    ece8:	1889      	adds	r1, r1, r2
    ecea:	223f      	movs	r2, #63	; 0x3f
    ecec:	4798      	blx	r3
    ecee:	7823      	ldrb	r3, [r4, #0]
    ecf0:	333f      	adds	r3, #63	; 0x3f
    ecf2:	b2db      	uxtb	r3, r3
    ecf4:	e7e1      	b.n	ecba <Radio_FSKTxPayloadHandler+0x36>
    ecf6:	46c0      	nop			; (mov r8, r8)
    ecf8:	00004569 	.word	0x00004569
    ecfc:	20002d78 	.word	0x20002d78
    ed00:	20001eb0 	.word	0x20001eb0
    ed04:	0000c4d1 	.word	0x0000c4d1
    ed08:	000045a9 	.word	0x000045a9

0000ed0c <RADIO_FSKSyncAddr>:
    ed0c:	4b08      	ldr	r3, [pc, #32]	; (ed30 <RADIO_FSKSyncAddr+0x24>)
    ed0e:	b510      	push	{r4, lr}
    ed10:	4798      	blx	r3
    ed12:	4b08      	ldr	r3, [pc, #32]	; (ed34 <RADIO_FSKSyncAddr+0x28>)
    ed14:	001a      	movs	r2, r3
    ed16:	3234      	adds	r2, #52	; 0x34
    ed18:	7812      	ldrb	r2, [r2, #0]
    ed1a:	2a00      	cmp	r2, #0
    ed1c:	d104      	bne.n	ed28 <RADIO_FSKSyncAddr+0x1c>
    ed1e:	0019      	movs	r1, r3
    ed20:	3358      	adds	r3, #88	; 0x58
    ed22:	312c      	adds	r1, #44	; 0x2c
    ed24:	700a      	strb	r2, [r1, #0]
    ed26:	701a      	strb	r2, [r3, #0]
    ed28:	4b03      	ldr	r3, [pc, #12]	; (ed38 <RADIO_FSKSyncAddr+0x2c>)
    ed2a:	4798      	blx	r3
    ed2c:	bd10      	pop	{r4, pc}
    ed2e:	46c0      	nop			; (mov r8, r8)
    ed30:	00004569 	.word	0x00004569
    ed34:	20002d78 	.word	0x20002d78
    ed38:	000045a9 	.word	0x000045a9

0000ed3c <RADIO_FSKFifoLevel>:
    ed3c:	b570      	push	{r4, r5, r6, lr}
    ed3e:	4b22      	ldr	r3, [pc, #136]	; (edc8 <RADIO_FSKFifoLevel+0x8c>)
    ed40:	4798      	blx	r3
    ed42:	4d22      	ldr	r5, [pc, #136]	; (edcc <RADIO_FSKFifoLevel+0x90>)
    ed44:	002a      	movs	r2, r5
    ed46:	002b      	movs	r3, r5
    ed48:	322c      	adds	r2, #44	; 0x2c
    ed4a:	3358      	adds	r3, #88	; 0x58
    ed4c:	7810      	ldrb	r0, [r2, #0]
    ed4e:	7819      	ldrb	r1, [r3, #0]
    ed50:	4288      	cmp	r0, r1
    ed52:	d105      	bne.n	ed60 <RADIO_FSKFifoLevel+0x24>
    ed54:	7812      	ldrb	r2, [r2, #0]
    ed56:	2a00      	cmp	r2, #0
    ed58:	d002      	beq.n	ed60 <RADIO_FSKFifoLevel+0x24>
    ed5a:	781b      	ldrb	r3, [r3, #0]
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	d11f      	bne.n	eda0 <RADIO_FSKFifoLevel+0x64>
    ed60:	0029      	movs	r1, r5
    ed62:	312c      	adds	r1, #44	; 0x2c
    ed64:	7808      	ldrb	r0, [r1, #0]
    ed66:	b2c0      	uxtb	r0, r0
    ed68:	2800      	cmp	r0, #0
    ed6a:	d102      	bne.n	ed72 <RADIO_FSKFifoLevel+0x36>
    ed6c:	2201      	movs	r2, #1
    ed6e:	4b18      	ldr	r3, [pc, #96]	; (edd0 <RADIO_FSKFifoLevel+0x94>)
    ed70:	4798      	blx	r3
    ed72:	002e      	movs	r6, r5
    ed74:	002c      	movs	r4, r5
    ed76:	362c      	adds	r6, #44	; 0x2c
    ed78:	3458      	adds	r4, #88	; 0x58
    ed7a:	7833      	ldrb	r3, [r6, #0]
    ed7c:	7822      	ldrb	r2, [r4, #0]
    ed7e:	1a9b      	subs	r3, r3, r2
    ed80:	b2db      	uxtb	r3, r3
    ed82:	2b3e      	cmp	r3, #62	; 0x3e
    ed84:	d80f      	bhi.n	eda6 <RADIO_FSKFifoLevel+0x6a>
    ed86:	7823      	ldrb	r3, [r4, #0]
    ed88:	7832      	ldrb	r2, [r6, #0]
    ed8a:	7821      	ldrb	r1, [r4, #0]
    ed8c:	2000      	movs	r0, #0
    ed8e:	1a52      	subs	r2, r2, r1
    ed90:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ed92:	b2d2      	uxtb	r2, r2
    ed94:	18c9      	adds	r1, r1, r3
    ed96:	4b0e      	ldr	r3, [pc, #56]	; (edd0 <RADIO_FSKFifoLevel+0x94>)
    ed98:	4798      	blx	r3
    ed9a:	7833      	ldrb	r3, [r6, #0]
    ed9c:	b2db      	uxtb	r3, r3
    ed9e:	7023      	strb	r3, [r4, #0]
    eda0:	4b0c      	ldr	r3, [pc, #48]	; (edd4 <RADIO_FSKFifoLevel+0x98>)
    eda2:	4798      	blx	r3
    eda4:	bd70      	pop	{r4, r5, r6, pc}
    eda6:	7833      	ldrb	r3, [r6, #0]
    eda8:	7822      	ldrb	r2, [r4, #0]
    edaa:	1a9b      	subs	r3, r3, r2
    edac:	b2db      	uxtb	r3, r3
    edae:	2b3f      	cmp	r3, #63	; 0x3f
    edb0:	d9f6      	bls.n	eda0 <RADIO_FSKFifoLevel+0x64>
    edb2:	7823      	ldrb	r3, [r4, #0]
    edb4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    edb6:	223f      	movs	r2, #63	; 0x3f
    edb8:	18c9      	adds	r1, r1, r3
    edba:	2000      	movs	r0, #0
    edbc:	4b04      	ldr	r3, [pc, #16]	; (edd0 <RADIO_FSKFifoLevel+0x94>)
    edbe:	4798      	blx	r3
    edc0:	7823      	ldrb	r3, [r4, #0]
    edc2:	333f      	adds	r3, #63	; 0x3f
    edc4:	e7ea      	b.n	ed9c <RADIO_FSKFifoLevel+0x60>
    edc6:	46c0      	nop			; (mov r8, r8)
    edc8:	00004569 	.word	0x00004569
    edcc:	20002d78 	.word	0x20002d78
    edd0:	0000c511 	.word	0x0000c511
    edd4:	000045a9 	.word	0x000045a9

0000edd8 <RADIO_FSKFifoEmpty>:
    edd8:	b510      	push	{r4, lr}
    edda:	4b03      	ldr	r3, [pc, #12]	; (ede8 <RADIO_FSKFifoEmpty+0x10>)
    eddc:	7819      	ldrb	r1, [r3, #0]
    edde:	4b03      	ldr	r3, [pc, #12]	; (edec <RADIO_FSKFifoEmpty+0x14>)
    ede0:	6818      	ldr	r0, [r3, #0]
    ede2:	4b03      	ldr	r3, [pc, #12]	; (edf0 <RADIO_FSKFifoEmpty+0x18>)
    ede4:	4798      	blx	r3
    ede6:	bd10      	pop	{r4, pc}
    ede8:	20001eb4 	.word	0x20001eb4
    edec:	20001eb0 	.word	0x20001eb0
    edf0:	0000ec85 	.word	0x0000ec85

0000edf4 <RADIO_GetData>:
    edf4:	4b03      	ldr	r3, [pc, #12]	; (ee04 <RADIO_GetData+0x10>)
    edf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    edf8:	332c      	adds	r3, #44	; 0x2c
    edfa:	6002      	str	r2, [r0, #0]
    edfc:	781b      	ldrb	r3, [r3, #0]
    edfe:	2000      	movs	r0, #0
    ee00:	800b      	strh	r3, [r1, #0]
    ee02:	4770      	bx	lr
    ee04:	20002d78 	.word	0x20002d78

0000ee08 <Radio_EnableRfControl>:
    ee08:	b510      	push	{r4, lr}
    ee0a:	4b08      	ldr	r3, [pc, #32]	; (ee2c <Radio_EnableRfControl+0x24>)
    ee0c:	0001      	movs	r1, r0
    ee0e:	681a      	ldr	r2, [r3, #0]
    ee10:	4807      	ldr	r0, [pc, #28]	; (ee30 <Radio_EnableRfControl+0x28>)
    ee12:	4c08      	ldr	r4, [pc, #32]	; (ee34 <Radio_EnableRfControl+0x2c>)
    ee14:	1812      	adds	r2, r2, r0
    ee16:	2000      	movs	r0, #0
    ee18:	42a2      	cmp	r2, r4
    ee1a:	d804      	bhi.n	ee26 <Radio_EnableRfControl+0x1e>
    ee1c:	3305      	adds	r3, #5
    ee1e:	7fdb      	ldrb	r3, [r3, #31]
    ee20:	1e58      	subs	r0, r3, #1
    ee22:	4183      	sbcs	r3, r0
    ee24:	1c58      	adds	r0, r3, #1
    ee26:	4b04      	ldr	r3, [pc, #16]	; (ee38 <Radio_EnableRfControl+0x30>)
    ee28:	4798      	blx	r3
    ee2a:	bd10      	pop	{r4, pc}
    ee2c:	20002d78 	.word	0x20002d78
    ee30:	cc9eec80 	.word	0xcc9eec80
    ee34:	096ae380 	.word	0x096ae380
    ee38:	0000c57d 	.word	0x0000c57d

0000ee3c <Radio_DisableRfControl>:
    ee3c:	b510      	push	{r4, lr}
    ee3e:	4b08      	ldr	r3, [pc, #32]	; (ee60 <Radio_DisableRfControl+0x24>)
    ee40:	0001      	movs	r1, r0
    ee42:	681a      	ldr	r2, [r3, #0]
    ee44:	4807      	ldr	r0, [pc, #28]	; (ee64 <Radio_DisableRfControl+0x28>)
    ee46:	4c08      	ldr	r4, [pc, #32]	; (ee68 <Radio_DisableRfControl+0x2c>)
    ee48:	1812      	adds	r2, r2, r0
    ee4a:	2000      	movs	r0, #0
    ee4c:	42a2      	cmp	r2, r4
    ee4e:	d804      	bhi.n	ee5a <Radio_DisableRfControl+0x1e>
    ee50:	3305      	adds	r3, #5
    ee52:	7fdb      	ldrb	r3, [r3, #31]
    ee54:	1e58      	subs	r0, r3, #1
    ee56:	4183      	sbcs	r3, r0
    ee58:	1c58      	adds	r0, r3, #1
    ee5a:	4b04      	ldr	r3, [pc, #16]	; (ee6c <Radio_DisableRfControl+0x30>)
    ee5c:	4798      	blx	r3
    ee5e:	bd10      	pop	{r4, pc}
    ee60:	20002d78 	.word	0x20002d78
    ee64:	cc9eec80 	.word	0xcc9eec80
    ee68:	096ae380 	.word	0x096ae380
    ee6c:	0000c5a5 	.word	0x0000c5a5

0000ee70 <Radio_WatchdogTimeout>:
    ee70:	b510      	push	{r4, lr}
    ee72:	4b0e      	ldr	r3, [pc, #56]	; (eeac <Radio_WatchdogTimeout+0x3c>)
    ee74:	781a      	ldrb	r2, [r3, #0]
    ee76:	2a04      	cmp	r2, #4
    ee78:	d10b      	bne.n	ee92 <Radio_WatchdogTimeout+0x22>
    ee7a:	2320      	movs	r3, #32
    ee7c:	4a0c      	ldr	r2, [pc, #48]	; (eeb0 <Radio_WatchdogTimeout+0x40>)
    ee7e:	2000      	movs	r0, #0
    ee80:	8811      	ldrh	r1, [r2, #0]
    ee82:	430b      	orrs	r3, r1
    ee84:	8013      	strh	r3, [r2, #0]
    ee86:	4b0b      	ldr	r3, [pc, #44]	; (eeb4 <Radio_WatchdogTimeout+0x44>)
    ee88:	4798      	blx	r3
    ee8a:	2002      	movs	r0, #2
    ee8c:	4b0a      	ldr	r3, [pc, #40]	; (eeb8 <Radio_WatchdogTimeout+0x48>)
    ee8e:	4798      	blx	r3
    ee90:	bd10      	pop	{r4, pc}
    ee92:	781b      	ldrb	r3, [r3, #0]
    ee94:	2b02      	cmp	r3, #2
    ee96:	d1fb      	bne.n	ee90 <Radio_WatchdogTimeout+0x20>
    ee98:	4a05      	ldr	r2, [pc, #20]	; (eeb0 <Radio_WatchdogTimeout+0x40>)
    ee9a:	330e      	adds	r3, #14
    ee9c:	8811      	ldrh	r1, [r2, #0]
    ee9e:	2001      	movs	r0, #1
    eea0:	430b      	orrs	r3, r1
    eea2:	8013      	strh	r3, [r2, #0]
    eea4:	4b03      	ldr	r3, [pc, #12]	; (eeb4 <Radio_WatchdogTimeout+0x44>)
    eea6:	4798      	blx	r3
    eea8:	2001      	movs	r0, #1
    eeaa:	e7ef      	b.n	ee8c <Radio_WatchdogTimeout+0x1c>
    eeac:	20003047 	.word	0x20003047
    eeb0:	20003044 	.word	0x20003044
    eeb4:	0000ee3d 	.word	0x0000ee3d
    eeb8:	0000eb55 	.word	0x0000eb55

0000eebc <RADIO_RxTimeout>:
    eebc:	b510      	push	{r4, lr}
    eebe:	4b0a      	ldr	r3, [pc, #40]	; (eee8 <RADIO_RxTimeout+0x2c>)
    eec0:	332f      	adds	r3, #47	; 0x2f
    eec2:	7818      	ldrb	r0, [r3, #0]
    eec4:	4b09      	ldr	r3, [pc, #36]	; (eeec <RADIO_RxTimeout+0x30>)
    eec6:	4798      	blx	r3
    eec8:	2000      	movs	r0, #0
    eeca:	4b09      	ldr	r3, [pc, #36]	; (eef0 <RADIO_RxTimeout+0x34>)
    eecc:	4798      	blx	r3
    eece:	2180      	movs	r1, #128	; 0x80
    eed0:	2012      	movs	r0, #18
    eed2:	4b08      	ldr	r3, [pc, #32]	; (eef4 <RADIO_RxTimeout+0x38>)
    eed4:	4798      	blx	r3
    eed6:	2340      	movs	r3, #64	; 0x40
    eed8:	4a07      	ldr	r2, [pc, #28]	; (eef8 <RADIO_RxTimeout+0x3c>)
    eeda:	2002      	movs	r0, #2
    eedc:	8811      	ldrh	r1, [r2, #0]
    eede:	430b      	orrs	r3, r1
    eee0:	8013      	strh	r3, [r2, #0]
    eee2:	4b06      	ldr	r3, [pc, #24]	; (eefc <RADIO_RxTimeout+0x40>)
    eee4:	4798      	blx	r3
    eee6:	bd10      	pop	{r4, pc}
    eee8:	20002d78 	.word	0x20002d78
    eeec:	0000d381 	.word	0x0000d381
    eef0:	0000ee3d 	.word	0x0000ee3d
    eef4:	0000c47d 	.word	0x0000c47d
    eef8:	20003044 	.word	0x20003044
    eefc:	0000eb55 	.word	0x0000eb55

0000ef00 <Radio_RxFSKTimeout>:
    ef00:	b510      	push	{r4, lr}
    ef02:	4b08      	ldr	r3, [pc, #32]	; (ef24 <Radio_RxFSKTimeout+0x24>)
    ef04:	332f      	adds	r3, #47	; 0x2f
    ef06:	7818      	ldrb	r0, [r3, #0]
    ef08:	4b07      	ldr	r3, [pc, #28]	; (ef28 <Radio_RxFSKTimeout+0x28>)
    ef0a:	4798      	blx	r3
    ef0c:	2000      	movs	r0, #0
    ef0e:	4b07      	ldr	r3, [pc, #28]	; (ef2c <Radio_RxFSKTimeout+0x2c>)
    ef10:	4798      	blx	r3
    ef12:	2380      	movs	r3, #128	; 0x80
    ef14:	4a06      	ldr	r2, [pc, #24]	; (ef30 <Radio_RxFSKTimeout+0x30>)
    ef16:	2002      	movs	r0, #2
    ef18:	8811      	ldrh	r1, [r2, #0]
    ef1a:	430b      	orrs	r3, r1
    ef1c:	8013      	strh	r3, [r2, #0]
    ef1e:	4b05      	ldr	r3, [pc, #20]	; (ef34 <Radio_RxFSKTimeout+0x34>)
    ef20:	4798      	blx	r3
    ef22:	bd10      	pop	{r4, pc}
    ef24:	20002d78 	.word	0x20002d78
    ef28:	0000d381 	.word	0x0000d381
    ef2c:	0000ee3d 	.word	0x0000ee3d
    ef30:	20003044 	.word	0x20003044
    ef34:	0000eb55 	.word	0x0000eb55

0000ef38 <RADIO_TxDone>:
    ef38:	b570      	push	{r4, r5, r6, lr}
    ef3a:	4b14      	ldr	r3, [pc, #80]	; (ef8c <RADIO_TxDone+0x54>)
    ef3c:	332f      	adds	r3, #47	; 0x2f
    ef3e:	7818      	ldrb	r0, [r3, #0]
    ef40:	4b13      	ldr	r3, [pc, #76]	; (ef90 <RADIO_TxDone+0x58>)
    ef42:	4798      	blx	r3
    ef44:	2001      	movs	r0, #1
    ef46:	4b13      	ldr	r3, [pc, #76]	; (ef94 <RADIO_TxDone+0x5c>)
    ef48:	4798      	blx	r3
    ef4a:	4b13      	ldr	r3, [pc, #76]	; (ef98 <RADIO_TxDone+0x60>)
    ef4c:	2108      	movs	r1, #8
    ef4e:	2012      	movs	r0, #18
    ef50:	4798      	blx	r3
    ef52:	4b12      	ldr	r3, [pc, #72]	; (ef9c <RADIO_TxDone+0x64>)
    ef54:	781a      	ldrb	r2, [r3, #0]
    ef56:	4b12      	ldr	r3, [pc, #72]	; (efa0 <RADIO_TxDone+0x68>)
    ef58:	2a02      	cmp	r2, #2
    ef5a:	d002      	beq.n	ef62 <RADIO_TxDone+0x2a>
    ef5c:	881a      	ldrh	r2, [r3, #0]
    ef5e:	0692      	lsls	r2, r2, #26
    ef60:	d413      	bmi.n	ef8a <RADIO_TxDone+0x52>
    ef62:	2001      	movs	r0, #1
    ef64:	881a      	ldrh	r2, [r3, #0]
    ef66:	4302      	orrs	r2, r0
    ef68:	801a      	strh	r2, [r3, #0]
    ef6a:	4b0e      	ldr	r3, [pc, #56]	; (efa4 <RADIO_TxDone+0x6c>)
    ef6c:	4798      	blx	r3
    ef6e:	4b0e      	ldr	r3, [pc, #56]	; (efa8 <RADIO_TxDone+0x70>)
    ef70:	4798      	blx	r3
    ef72:	4c0e      	ldr	r4, [pc, #56]	; (efac <RADIO_TxDone+0x74>)
    ef74:	4d0e      	ldr	r5, [pc, #56]	; (efb0 <RADIO_TxDone+0x78>)
    ef76:	6822      	ldr	r2, [r4, #0]
    ef78:	6863      	ldr	r3, [r4, #4]
    ef7a:	1a80      	subs	r0, r0, r2
    ef7c:	4199      	sbcs	r1, r3
    ef7e:	22fa      	movs	r2, #250	; 0xfa
    ef80:	2300      	movs	r3, #0
    ef82:	0092      	lsls	r2, r2, #2
    ef84:	47a8      	blx	r5
    ef86:	6020      	str	r0, [r4, #0]
    ef88:	6061      	str	r1, [r4, #4]
    ef8a:	bd70      	pop	{r4, r5, r6, pc}
    ef8c:	20002d78 	.word	0x20002d78
    ef90:	0000d381 	.word	0x0000d381
    ef94:	0000ee3d 	.word	0x0000ee3d
    ef98:	0000c47d 	.word	0x0000c47d
    ef9c:	20003047 	.word	0x20003047
    efa0:	20003044 	.word	0x20003044
    efa4:	0000eb55 	.word	0x0000eb55
    efa8:	0000d011 	.word	0x0000d011
    efac:	20001ea8 	.word	0x20001ea8
    efb0:	00013905 	.word	0x00013905

0000efb4 <RADIO_FSKPacketSent>:
    efb4:	b570      	push	{r4, r5, r6, lr}
    efb6:	4b15      	ldr	r3, [pc, #84]	; (f00c <RADIO_FSKPacketSent+0x58>)
    efb8:	203f      	movs	r0, #63	; 0x3f
    efba:	4798      	blx	r3
    efbc:	0703      	lsls	r3, r0, #28
    efbe:	d524      	bpl.n	f00a <RADIO_FSKPacketSent+0x56>
    efc0:	4b13      	ldr	r3, [pc, #76]	; (f010 <RADIO_FSKPacketSent+0x5c>)
    efc2:	332f      	adds	r3, #47	; 0x2f
    efc4:	7818      	ldrb	r0, [r3, #0]
    efc6:	4b13      	ldr	r3, [pc, #76]	; (f014 <RADIO_FSKPacketSent+0x60>)
    efc8:	4798      	blx	r3
    efca:	4b13      	ldr	r3, [pc, #76]	; (f018 <RADIO_FSKPacketSent+0x64>)
    efcc:	2001      	movs	r0, #1
    efce:	4798      	blx	r3
    efd0:	4b12      	ldr	r3, [pc, #72]	; (f01c <RADIO_FSKPacketSent+0x68>)
    efd2:	4c13      	ldr	r4, [pc, #76]	; (f020 <RADIO_FSKPacketSent+0x6c>)
    efd4:	781b      	ldrb	r3, [r3, #0]
    efd6:	2b02      	cmp	r3, #2
    efd8:	d002      	beq.n	efe0 <RADIO_FSKPacketSent+0x2c>
    efda:	8823      	ldrh	r3, [r4, #0]
    efdc:	069b      	lsls	r3, r3, #26
    efde:	d414      	bmi.n	f00a <RADIO_FSKPacketSent+0x56>
    efe0:	4b10      	ldr	r3, [pc, #64]	; (f024 <RADIO_FSKPacketSent+0x70>)
    efe2:	4798      	blx	r3
    efe4:	4d10      	ldr	r5, [pc, #64]	; (f028 <RADIO_FSKPacketSent+0x74>)
    efe6:	4e11      	ldr	r6, [pc, #68]	; (f02c <RADIO_FSKPacketSent+0x78>)
    efe8:	682a      	ldr	r2, [r5, #0]
    efea:	686b      	ldr	r3, [r5, #4]
    efec:	1a80      	subs	r0, r0, r2
    efee:	4199      	sbcs	r1, r3
    eff0:	22fa      	movs	r2, #250	; 0xfa
    eff2:	2300      	movs	r3, #0
    eff4:	0092      	lsls	r2, r2, #2
    eff6:	47b0      	blx	r6
    eff8:	4b0d      	ldr	r3, [pc, #52]	; (f030 <RADIO_FSKPacketSent+0x7c>)
    effa:	6028      	str	r0, [r5, #0]
    effc:	6069      	str	r1, [r5, #4]
    effe:	2001      	movs	r0, #1
    f000:	4798      	blx	r3
    f002:	2304      	movs	r3, #4
    f004:	8822      	ldrh	r2, [r4, #0]
    f006:	4313      	orrs	r3, r2
    f008:	8023      	strh	r3, [r4, #0]
    f00a:	bd70      	pop	{r4, r5, r6, pc}
    f00c:	0000c4a5 	.word	0x0000c4a5
    f010:	20002d78 	.word	0x20002d78
    f014:	0000d381 	.word	0x0000d381
    f018:	0000ee3d 	.word	0x0000ee3d
    f01c:	20003047 	.word	0x20003047
    f020:	20003044 	.word	0x20003044
    f024:	0000d011 	.word	0x0000d011
    f028:	20001ea8 	.word	0x20001ea8
    f02c:	00013905 	.word	0x00013905
    f030:	0000eb55 	.word	0x0000eb55

0000f034 <RADIO_RxDone>:
    f034:	b570      	push	{r4, r5, r6, lr}
    f036:	2012      	movs	r0, #18
    f038:	4e16      	ldr	r6, [pc, #88]	; (f094 <RADIO_RxDone+0x60>)
    f03a:	47b0      	blx	r6
    f03c:	4b16      	ldr	r3, [pc, #88]	; (f098 <RADIO_RxDone+0x64>)
    f03e:	0005      	movs	r5, r0
    f040:	2170      	movs	r1, #112	; 0x70
    f042:	2012      	movs	r0, #18
    f044:	4798      	blx	r3
    f046:	2350      	movs	r3, #80	; 0x50
    f048:	402b      	ands	r3, r5
    f04a:	2b50      	cmp	r3, #80	; 0x50
    f04c:	d119      	bne.n	f082 <RADIO_RxDone+0x4e>
    f04e:	4c13      	ldr	r4, [pc, #76]	; (f09c <RADIO_RxDone+0x68>)
    f050:	0023      	movs	r3, r4
    f052:	332f      	adds	r3, #47	; 0x2f
    f054:	7818      	ldrb	r0, [r3, #0]
    f056:	4b12      	ldr	r3, [pc, #72]	; (f0a0 <RADIO_RxDone+0x6c>)
    f058:	4798      	blx	r3
    f05a:	4b12      	ldr	r3, [pc, #72]	; (f0a4 <RADIO_RxDone+0x70>)
    f05c:	2000      	movs	r0, #0
    f05e:	4798      	blx	r3
    f060:	3404      	adds	r4, #4
    f062:	201c      	movs	r0, #28
    f064:	47b0      	blx	r6
    f066:	7fe2      	ldrb	r2, [r4, #31]
    f068:	4b0f      	ldr	r3, [pc, #60]	; (f0a8 <RADIO_RxDone+0x74>)
    f06a:	4910      	ldr	r1, [pc, #64]	; (f0ac <RADIO_RxDone+0x78>)
    f06c:	2a00      	cmp	r2, #0
    f06e:	d003      	beq.n	f078 <RADIO_RxDone+0x44>
    f070:	06aa      	lsls	r2, r5, #26
    f072:	d407      	bmi.n	f084 <RADIO_RxDone+0x50>
    f074:	0642      	lsls	r2, r0, #25
    f076:	d505      	bpl.n	f084 <RADIO_RxDone+0x50>
    f078:	2002      	movs	r0, #2
    f07a:	881a      	ldrh	r2, [r3, #0]
    f07c:	4302      	orrs	r2, r0
    f07e:	801a      	strh	r2, [r3, #0]
    f080:	4788      	blx	r1
    f082:	bd70      	pop	{r4, r5, r6, pc}
    f084:	2280      	movs	r2, #128	; 0x80
    f086:	8818      	ldrh	r0, [r3, #0]
    f088:	0052      	lsls	r2, r2, #1
    f08a:	4302      	orrs	r2, r0
    f08c:	801a      	strh	r2, [r3, #0]
    f08e:	2002      	movs	r0, #2
    f090:	e7f6      	b.n	f080 <RADIO_RxDone+0x4c>
    f092:	46c0      	nop			; (mov r8, r8)
    f094:	0000c4a5 	.word	0x0000c4a5
    f098:	0000c47d 	.word	0x0000c47d
    f09c:	20002d78 	.word	0x20002d78
    f0a0:	0000d381 	.word	0x0000d381
    f0a4:	0000ee3d 	.word	0x0000ee3d
    f0a8:	20003044 	.word	0x20003044
    f0ac:	0000eb55 	.word	0x0000eb55

0000f0b0 <RADIO_FSKPayloadReady>:
    f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0b2:	203f      	movs	r0, #63	; 0x3f
    f0b4:	4b39      	ldr	r3, [pc, #228]	; (f19c <RADIO_FSKPayloadReady+0xec>)
    f0b6:	4798      	blx	r3
    f0b8:	0743      	lsls	r3, r0, #29
    f0ba:	d559      	bpl.n	f170 <RADIO_FSKPayloadReady+0xc0>
    f0bc:	4c38      	ldr	r4, [pc, #224]	; (f1a0 <RADIO_FSKPayloadReady+0xf0>)
    f0be:	4d39      	ldr	r5, [pc, #228]	; (f1a4 <RADIO_FSKPayloadReady+0xf4>)
    f0c0:	1d23      	adds	r3, r4, #4
    f0c2:	7fdb      	ldrb	r3, [r3, #31]
    f0c4:	2b01      	cmp	r3, #1
    f0c6:	d154      	bne.n	f172 <RADIO_FSKPayloadReady+0xc2>
    f0c8:	2202      	movs	r2, #2
    f0ca:	4210      	tst	r0, r2
    f0cc:	d048      	beq.n	f160 <RADIO_FSKPayloadReady+0xb0>
    f0ce:	0023      	movs	r3, r4
    f0d0:	332f      	adds	r3, #47	; 0x2f
    f0d2:	7818      	ldrb	r0, [r3, #0]
    f0d4:	4e34      	ldr	r6, [pc, #208]	; (f1a8 <RADIO_FSKPayloadReady+0xf8>)
    f0d6:	47b0      	blx	r6
    f0d8:	0023      	movs	r3, r4
    f0da:	332e      	adds	r3, #46	; 0x2e
    f0dc:	7818      	ldrb	r0, [r3, #0]
    f0de:	47b0      	blx	r6
    f0e0:	4b32      	ldr	r3, [pc, #200]	; (f1ac <RADIO_FSKPayloadReady+0xfc>)
    f0e2:	4798      	blx	r3
    f0e4:	0022      	movs	r2, r4
    f0e6:	0023      	movs	r3, r4
    f0e8:	322c      	adds	r2, #44	; 0x2c
    f0ea:	3358      	adds	r3, #88	; 0x58
    f0ec:	7810      	ldrb	r0, [r2, #0]
    f0ee:	7819      	ldrb	r1, [r3, #0]
    f0f0:	4288      	cmp	r0, r1
    f0f2:	d105      	bne.n	f100 <RADIO_FSKPayloadReady+0x50>
    f0f4:	7812      	ldrb	r2, [r2, #0]
    f0f6:	2a00      	cmp	r2, #0
    f0f8:	d002      	beq.n	f100 <RADIO_FSKPayloadReady+0x50>
    f0fa:	781b      	ldrb	r3, [r3, #0]
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d118      	bne.n	f132 <RADIO_FSKPayloadReady+0x82>
    f100:	0021      	movs	r1, r4
    f102:	312c      	adds	r1, #44	; 0x2c
    f104:	7808      	ldrb	r0, [r1, #0]
    f106:	b2c0      	uxtb	r0, r0
    f108:	2800      	cmp	r0, #0
    f10a:	d102      	bne.n	f112 <RADIO_FSKPayloadReady+0x62>
    f10c:	2201      	movs	r2, #1
    f10e:	4b28      	ldr	r3, [pc, #160]	; (f1b0 <RADIO_FSKPayloadReady+0x100>)
    f110:	4798      	blx	r3
    f112:	0026      	movs	r6, r4
    f114:	0027      	movs	r7, r4
    f116:	3658      	adds	r6, #88	; 0x58
    f118:	7830      	ldrb	r0, [r6, #0]
    f11a:	372c      	adds	r7, #44	; 0x2c
    f11c:	b2c0      	uxtb	r0, r0
    f11e:	2800      	cmp	r0, #0
    f120:	d110      	bne.n	f144 <RADIO_FSKPayloadReady+0x94>
    f122:	783a      	ldrb	r2, [r7, #0]
    f124:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f126:	b2d2      	uxtb	r2, r2
    f128:	4b21      	ldr	r3, [pc, #132]	; (f1b0 <RADIO_FSKPayloadReady+0x100>)
    f12a:	4798      	blx	r3
    f12c:	783b      	ldrb	r3, [r7, #0]
    f12e:	b2db      	uxtb	r3, r3
    f130:	7033      	strb	r3, [r6, #0]
    f132:	4b20      	ldr	r3, [pc, #128]	; (f1b4 <RADIO_FSKPayloadReady+0x104>)
    f134:	4798      	blx	r3
    f136:	4b20      	ldr	r3, [pc, #128]	; (f1b8 <RADIO_FSKPayloadReady+0x108>)
    f138:	2000      	movs	r0, #0
    f13a:	4798      	blx	r3
    f13c:	2308      	movs	r3, #8
    f13e:	882a      	ldrh	r2, [r5, #0]
    f140:	4313      	orrs	r3, r2
    f142:	e011      	b.n	f168 <RADIO_FSKPayloadReady+0xb8>
    f144:	783b      	ldrb	r3, [r7, #0]
    f146:	7832      	ldrb	r2, [r6, #0]
    f148:	1a9b      	subs	r3, r3, r2
    f14a:	2b00      	cmp	r3, #0
    f14c:	ddf1      	ble.n	f132 <RADIO_FSKPayloadReady+0x82>
    f14e:	7833      	ldrb	r3, [r6, #0]
    f150:	783a      	ldrb	r2, [r7, #0]
    f152:	7831      	ldrb	r1, [r6, #0]
    f154:	2000      	movs	r0, #0
    f156:	1a52      	subs	r2, r2, r1
    f158:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f15a:	b2d2      	uxtb	r2, r2
    f15c:	18c9      	adds	r1, r1, r3
    f15e:	e7e3      	b.n	f128 <RADIO_FSKPayloadReady+0x78>
    f160:	2380      	movs	r3, #128	; 0x80
    f162:	8829      	ldrh	r1, [r5, #0]
    f164:	005b      	lsls	r3, r3, #1
    f166:	430b      	orrs	r3, r1
    f168:	802b      	strh	r3, [r5, #0]
    f16a:	2002      	movs	r0, #2
    f16c:	4b13      	ldr	r3, [pc, #76]	; (f1bc <RADIO_FSKPayloadReady+0x10c>)
    f16e:	4798      	blx	r3
    f170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f172:	0023      	movs	r3, r4
    f174:	332f      	adds	r3, #47	; 0x2f
    f176:	4e0c      	ldr	r6, [pc, #48]	; (f1a8 <RADIO_FSKPayloadReady+0xf8>)
    f178:	7818      	ldrb	r0, [r3, #0]
    f17a:	47b0      	blx	r6
    f17c:	0023      	movs	r3, r4
    f17e:	332e      	adds	r3, #46	; 0x2e
    f180:	7818      	ldrb	r0, [r3, #0]
    f182:	47b0      	blx	r6
    f184:	4e0e      	ldr	r6, [pc, #56]	; (f1c0 <RADIO_FSKPayloadReady+0x110>)
    f186:	2201      	movs	r2, #1
    f188:	0031      	movs	r1, r6
    f18a:	2000      	movs	r0, #0
    f18c:	4f08      	ldr	r7, [pc, #32]	; (f1b0 <RADIO_FSKPayloadReady+0x100>)
    f18e:	47b8      	blx	r7
    f190:	7832      	ldrb	r2, [r6, #0]
    f192:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f194:	b2d2      	uxtb	r2, r2
    f196:	2000      	movs	r0, #0
    f198:	47b8      	blx	r7
    f19a:	e7cc      	b.n	f136 <RADIO_FSKPayloadReady+0x86>
    f19c:	0000c4a5 	.word	0x0000c4a5
    f1a0:	20002d78 	.word	0x20002d78
    f1a4:	20003044 	.word	0x20003044
    f1a8:	0000d381 	.word	0x0000d381
    f1ac:	00004569 	.word	0x00004569
    f1b0:	0000c511 	.word	0x0000c511
    f1b4:	000045a9 	.word	0x000045a9
    f1b8:	0000ee3d 	.word	0x0000ee3d
    f1bc:	0000eb55 	.word	0x0000eb55
    f1c0:	20002da4 	.word	0x20002da4

0000f1c4 <Radio_SetClockInput>:
    f1c4:	b510      	push	{r4, lr}
    f1c6:	4b08      	ldr	r3, [pc, #32]	; (f1e8 <Radio_SetClockInput+0x24>)
    f1c8:	3355      	adds	r3, #85	; 0x55
    f1ca:	781b      	ldrb	r3, [r3, #0]
    f1cc:	2b00      	cmp	r3, #0
    f1ce:	d10a      	bne.n	f1e6 <Radio_SetClockInput+0x22>
    f1d0:	4b06      	ldr	r3, [pc, #24]	; (f1ec <Radio_SetClockInput+0x28>)
    f1d2:	204b      	movs	r0, #75	; 0x4b
    f1d4:	4798      	blx	r3
    f1d6:	2110      	movs	r1, #16
    f1d8:	4301      	orrs	r1, r0
    f1da:	4b05      	ldr	r3, [pc, #20]	; (f1f0 <Radio_SetClockInput+0x2c>)
    f1dc:	b2c9      	uxtb	r1, r1
    f1de:	204b      	movs	r0, #75	; 0x4b
    f1e0:	4798      	blx	r3
    f1e2:	4b04      	ldr	r3, [pc, #16]	; (f1f4 <Radio_SetClockInput+0x30>)
    f1e4:	4798      	blx	r3
    f1e6:	bd10      	pop	{r4, pc}
    f1e8:	20002d78 	.word	0x20002d78
    f1ec:	0000c4a5 	.word	0x0000c4a5
    f1f0:	0000c47d 	.word	0x0000c47d
    f1f4:	0000c5c5 	.word	0x0000c5c5

0000f1f8 <RADIO_RxHandler>:
    f1f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f1fa:	4b34      	ldr	r3, [pc, #208]	; (f2cc <RADIO_RxHandler+0xd4>)
    f1fc:	4798      	blx	r3
    f1fe:	2000      	movs	r0, #0
    f200:	4b33      	ldr	r3, [pc, #204]	; (f2d0 <RADIO_RxHandler+0xd8>)
    f202:	4798      	blx	r3
    f204:	4e33      	ldr	r6, [pc, #204]	; (f2d4 <RADIO_RxHandler+0xdc>)
    f206:	4b34      	ldr	r3, [pc, #208]	; (f2d8 <RADIO_RxHandler+0xe0>)
    f208:	8830      	ldrh	r0, [r6, #0]
    f20a:	2800      	cmp	r0, #0
    f20c:	d100      	bne.n	f210 <RADIO_RxHandler+0x18>
    f20e:	3004      	adds	r0, #4
    f210:	4798      	blx	r3
    f212:	4c32      	ldr	r4, [pc, #200]	; (f2dc <RADIO_RxHandler+0xe4>)
    f214:	4d32      	ldr	r5, [pc, #200]	; (f2e0 <RADIO_RxHandler+0xe8>)
    f216:	0023      	movs	r3, r4
    f218:	3334      	adds	r3, #52	; 0x34
    f21a:	7819      	ldrb	r1, [r3, #0]
    f21c:	2901      	cmp	r1, #1
    f21e:	d122      	bne.n	f266 <RADIO_RxHandler+0x6e>
    f220:	2022      	movs	r0, #34	; 0x22
    f222:	47a8      	blx	r5
    f224:	2100      	movs	r1, #0
    f226:	2040      	movs	r0, #64	; 0x40
    f228:	47a8      	blx	r5
    f22a:	2100      	movs	r1, #0
    f22c:	2041      	movs	r0, #65	; 0x41
    f22e:	47a8      	blx	r5
    f230:	8832      	ldrh	r2, [r6, #0]
    f232:	4b2c      	ldr	r3, [pc, #176]	; (f2e4 <RADIO_RxHandler+0xec>)
    f234:	2a00      	cmp	r2, #0
    f236:	d131      	bne.n	f29c <RADIO_RxHandler+0xa4>
    f238:	0021      	movs	r1, r4
    f23a:	2005      	movs	r0, #5
    f23c:	3134      	adds	r1, #52	; 0x34
    f23e:	7809      	ldrb	r1, [r1, #0]
    f240:	4798      	blx	r3
    f242:	68e3      	ldr	r3, [r4, #12]
    f244:	2b00      	cmp	r3, #0
    f246:	d00c      	beq.n	f262 <RADIO_RxHandler+0x6a>
    f248:	8832      	ldrh	r2, [r6, #0]
    f24a:	2a00      	cmp	r2, #0
    f24c:	d009      	beq.n	f262 <RADIO_RxHandler+0x6a>
    f24e:	21fa      	movs	r1, #250	; 0xfa
    f250:	2200      	movs	r2, #0
    f252:	342f      	adds	r4, #47	; 0x2f
    f254:	0089      	lsls	r1, r1, #2
    f256:	7820      	ldrb	r0, [r4, #0]
    f258:	4359      	muls	r1, r3
    f25a:	9200      	str	r2, [sp, #0]
    f25c:	4b22      	ldr	r3, [pc, #136]	; (f2e8 <RADIO_RxHandler+0xf0>)
    f25e:	4c23      	ldr	r4, [pc, #140]	; (f2ec <RADIO_RxHandler+0xf4>)
    f260:	47a0      	blx	r4
    f262:	2000      	movs	r0, #0
    f264:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f266:	0023      	movs	r3, r4
    f268:	3338      	adds	r3, #56	; 0x38
    f26a:	7819      	ldrb	r1, [r3, #0]
    f26c:	2012      	movs	r0, #18
    f26e:	47a8      	blx	r5
    f270:	0023      	movs	r3, r4
    f272:	3339      	adds	r3, #57	; 0x39
    f274:	7819      	ldrb	r1, [r3, #0]
    f276:	2013      	movs	r0, #19
    f278:	47a8      	blx	r5
    f27a:	210c      	movs	r1, #12
    f27c:	2040      	movs	r0, #64	; 0x40
    f27e:	47a8      	blx	r5
    f280:	2100      	movs	r1, #0
    f282:	2041      	movs	r0, #65	; 0x41
    f284:	47a8      	blx	r5
    f286:	0022      	movs	r2, r4
    f288:	2300      	movs	r3, #0
    f28a:	3256      	adds	r2, #86	; 0x56
    f28c:	8013      	strh	r3, [r2, #0]
    f28e:	0022      	movs	r2, r4
    f290:	322c      	adds	r2, #44	; 0x2c
    f292:	7013      	strb	r3, [r2, #0]
    f294:	0022      	movs	r2, r4
    f296:	3258      	adds	r2, #88	; 0x58
    f298:	7013      	strb	r3, [r2, #0]
    f29a:	e7c9      	b.n	f230 <RADIO_RxHandler+0x38>
    f29c:	0022      	movs	r2, r4
    f29e:	3234      	adds	r2, #52	; 0x34
    f2a0:	7811      	ldrb	r1, [r2, #0]
    f2a2:	2200      	movs	r2, #0
    f2a4:	2901      	cmp	r1, #1
    f2a6:	d101      	bne.n	f2ac <RADIO_RxHandler+0xb4>
    f2a8:	2006      	movs	r0, #6
    f2aa:	e7c9      	b.n	f240 <RADIO_RxHandler+0x48>
    f2ac:	0011      	movs	r1, r2
    f2ae:	2005      	movs	r0, #5
    f2b0:	4798      	blx	r3
    f2b2:	21fa      	movs	r1, #250	; 0xfa
    f2b4:	8833      	ldrh	r3, [r6, #0]
    f2b6:	0089      	lsls	r1, r1, #2
    f2b8:	4359      	muls	r1, r3
    f2ba:	0023      	movs	r3, r4
    f2bc:	2200      	movs	r2, #0
    f2be:	332e      	adds	r3, #46	; 0x2e
    f2c0:	7818      	ldrb	r0, [r3, #0]
    f2c2:	4d0a      	ldr	r5, [pc, #40]	; (f2ec <RADIO_RxHandler+0xf4>)
    f2c4:	9200      	str	r2, [sp, #0]
    f2c6:	4b0a      	ldr	r3, [pc, #40]	; (f2f0 <RADIO_RxHandler+0xf8>)
    f2c8:	47a8      	blx	r5
    f2ca:	e7ba      	b.n	f242 <RADIO_RxHandler+0x4a>
    f2cc:	0000f1c5 	.word	0x0000f1c5
    f2d0:	0000ee09 	.word	0x0000ee09
    f2d4:	20001ea0 	.word	0x20001ea0
    f2d8:	0000e595 	.word	0x0000e595
    f2dc:	20002d78 	.word	0x20002d78
    f2e0:	0000c47d 	.word	0x0000c47d
    f2e4:	0000d6a5 	.word	0x0000d6a5
    f2e8:	0000ee71 	.word	0x0000ee71
    f2ec:	0000d069 	.word	0x0000d069
    f2f0:	0000ef01 	.word	0x0000ef01

0000f2f4 <Radio_ResetClockInput>:
    f2f4:	b510      	push	{r4, lr}
    f2f6:	4b04      	ldr	r3, [pc, #16]	; (f308 <Radio_ResetClockInput+0x14>)
    f2f8:	3355      	adds	r3, #85	; 0x55
    f2fa:	781b      	ldrb	r3, [r3, #0]
    f2fc:	2b00      	cmp	r3, #0
    f2fe:	d101      	bne.n	f304 <Radio_ResetClockInput+0x10>
    f300:	4b02      	ldr	r3, [pc, #8]	; (f30c <Radio_ResetClockInput+0x18>)
    f302:	4798      	blx	r3
    f304:	bd10      	pop	{r4, pc}
    f306:	46c0      	nop			; (mov r8, r8)
    f308:	20002d78 	.word	0x20002d78
    f30c:	0000c5e1 	.word	0x0000c5e1

0000f310 <RADIO_InitDefaultAttributes>:
    f310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f312:	2501      	movs	r5, #1
    f314:	4b64      	ldr	r3, [pc, #400]	; (f4a8 <RADIO_InitDefaultAttributes+0x198>)
    f316:	4c65      	ldr	r4, [pc, #404]	; (f4ac <RADIO_InitDefaultAttributes+0x19c>)
    f318:	701d      	strb	r5, [r3, #0]
    f31a:	4b65      	ldr	r3, [pc, #404]	; (f4b0 <RADIO_InitDefaultAttributes+0x1a0>)
    f31c:	2207      	movs	r2, #7
    f31e:	6023      	str	r3, [r4, #0]
    f320:	4b64      	ldr	r3, [pc, #400]	; (f4b4 <RADIO_InitDefaultAttributes+0x1a4>)
    f322:	18a1      	adds	r1, r4, r2
    f324:	6063      	str	r3, [r4, #4]
    f326:	4b64      	ldr	r3, [pc, #400]	; (f4b8 <RADIO_InitDefaultAttributes+0x1a8>)
    f328:	0027      	movs	r7, r4
    f32a:	60a3      	str	r3, [r4, #8]
    f32c:	0023      	movs	r3, r4
    f32e:	3334      	adds	r3, #52	; 0x34
    f330:	701d      	strb	r5, [r3, #0]
    f332:	0023      	movs	r3, r4
    f334:	3336      	adds	r3, #54	; 0x36
    f336:	701a      	strb	r2, [r3, #0]
    f338:	1ce3      	adds	r3, r4, #3
    f33a:	77dd      	strb	r5, [r3, #31]
    f33c:	0023      	movs	r3, r4
    f33e:	3333      	adds	r3, #51	; 0x33
    f340:	701d      	strb	r5, [r3, #0]
    f342:	2300      	movs	r3, #0
    f344:	77cb      	strb	r3, [r1, #31]
    f346:	2108      	movs	r1, #8
    f348:	82a1      	strh	r1, [r4, #20]
    f34a:	0021      	movs	r1, r4
    f34c:	3135      	adds	r1, #53	; 0x35
    f34e:	700a      	strb	r2, [r1, #0]
    f350:	1d22      	adds	r2, r4, #4
    f352:	77d5      	strb	r5, [r2, #31]
    f354:	1d62      	adds	r2, r4, #5
    f356:	77d3      	strb	r3, [r2, #31]
    f358:	1da2      	adds	r2, r4, #6
    f35a:	77d3      	strb	r3, [r2, #31]
    f35c:	2194      	movs	r1, #148	; 0x94
    f35e:	22c1      	movs	r2, #193	; 0xc1
    f360:	76a1      	strb	r1, [r4, #26]
    f362:	7662      	strb	r2, [r4, #25]
    f364:	76e2      	strb	r2, [r4, #27]
    f366:	3991      	subs	r1, #145	; 0x91
    f368:	1ca2      	adds	r2, r4, #2
    f36a:	77d1      	strb	r1, [r2, #31]
    f36c:	2234      	movs	r2, #52	; 0x34
    f36e:	7622      	strb	r2, [r4, #24]
    f370:	0022      	movs	r2, r4
    f372:	317d      	adds	r1, #125	; 0x7d
    f374:	3232      	adds	r2, #50	; 0x32
    f376:	7011      	strb	r1, [r2, #0]
    f378:	4a50      	ldr	r2, [pc, #320]	; (f4bc <RADIO_InitDefaultAttributes+0x1ac>)
    f37a:	397e      	subs	r1, #126	; 0x7e
    f37c:	60e2      	str	r2, [r4, #12]
    f37e:	0022      	movs	r2, r4
    f380:	3237      	adds	r2, #55	; 0x37
    f382:	7011      	strb	r1, [r2, #0]
    f384:	0022      	movs	r2, r4
    f386:	3109      	adds	r1, #9
    f388:	3238      	adds	r2, #56	; 0x38
    f38a:	7011      	strb	r1, [r2, #0]
    f38c:	0022      	movs	r2, r4
    f38e:	3107      	adds	r1, #7
    f390:	3239      	adds	r2, #57	; 0x39
    f392:	7011      	strb	r1, [r2, #0]
    f394:	0022      	movs	r2, r4
    f396:	322c      	adds	r2, #44	; 0x2c
    f398:	7013      	strb	r3, [r2, #0]
    f39a:	4a49      	ldr	r2, [pc, #292]	; (f4c0 <RADIO_InitDefaultAttributes+0x1b0>)
    f39c:	82e3      	strh	r3, [r4, #22]
    f39e:	62a2      	str	r2, [r4, #40]	; 0x28
    f3a0:	0022      	movs	r2, r4
    f3a2:	324c      	adds	r2, #76	; 0x4c
    f3a4:	8013      	strh	r3, [r2, #0]
    f3a6:	0022      	movs	r2, r4
    f3a8:	324e      	adds	r2, #78	; 0x4e
    f3aa:	7013      	strb	r3, [r2, #0]
    f3ac:	0022      	movs	r2, r4
    f3ae:	324f      	adds	r2, #79	; 0x4f
    f3b0:	7013      	strb	r3, [r2, #0]
    f3b2:	0022      	movs	r2, r4
    f3b4:	3240      	adds	r2, #64	; 0x40
    f3b6:	7013      	strb	r3, [r2, #0]
    f3b8:	0022      	movs	r2, r4
    f3ba:	3241      	adds	r2, #65	; 0x41
    f3bc:	7013      	strb	r3, [r2, #0]
    f3be:	0022      	movs	r2, r4
    f3c0:	3254      	adds	r2, #84	; 0x54
    f3c2:	7013      	strb	r3, [r2, #0]
    f3c4:	0022      	movs	r2, r4
    f3c6:	3255      	adds	r2, #85	; 0x55
    f3c8:	7015      	strb	r5, [r2, #0]
    f3ca:	0022      	movs	r2, r4
    f3cc:	3258      	adds	r2, #88	; 0x58
    f3ce:	6463      	str	r3, [r4, #68]	; 0x44
    f3d0:	64a3      	str	r3, [r4, #72]	; 0x48
    f3d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f3d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    f3d6:	7013      	strb	r3, [r2, #0]
    f3d8:	3730      	adds	r7, #48	; 0x30
    f3da:	783b      	ldrb	r3, [r7, #0]
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d151      	bne.n	f484 <RADIO_InitDefaultAttributes+0x174>
    f3e0:	4838      	ldr	r0, [pc, #224]	; (f4c4 <RADIO_InitDefaultAttributes+0x1b4>)
    f3e2:	4e39      	ldr	r6, [pc, #228]	; (f4c8 <RADIO_InitDefaultAttributes+0x1b8>)
    f3e4:	47b0      	blx	r6
    f3e6:	2808      	cmp	r0, #8
    f3e8:	d149      	bne.n	f47e <RADIO_InitDefaultAttributes+0x16e>
    f3ea:	4838      	ldr	r0, [pc, #224]	; (f4cc <RADIO_InitDefaultAttributes+0x1bc>)
    f3ec:	47b0      	blx	r6
    f3ee:	2808      	cmp	r0, #8
    f3f0:	d145      	bne.n	f47e <RADIO_InitDefaultAttributes+0x16e>
    f3f2:	4837      	ldr	r0, [pc, #220]	; (f4d0 <RADIO_InitDefaultAttributes+0x1c0>)
    f3f4:	47b0      	blx	r6
    f3f6:	2808      	cmp	r0, #8
    f3f8:	d141      	bne.n	f47e <RADIO_InitDefaultAttributes+0x16e>
    f3fa:	4836      	ldr	r0, [pc, #216]	; (f4d4 <RADIO_InitDefaultAttributes+0x1c4>)
    f3fc:	47b0      	blx	r6
    f3fe:	2808      	cmp	r0, #8
    f400:	d13d      	bne.n	f47e <RADIO_InitDefaultAttributes+0x16e>
    f402:	703d      	strb	r5, [r7, #0]
    f404:	4b34      	ldr	r3, [pc, #208]	; (f4d8 <RADIO_InitDefaultAttributes+0x1c8>)
    f406:	4798      	blx	r3
    f408:	4b34      	ldr	r3, [pc, #208]	; (f4dc <RADIO_InitDefaultAttributes+0x1cc>)
    f40a:	4798      	blx	r3
    f40c:	2800      	cmp	r0, #0
    f40e:	d107      	bne.n	f420 <RADIO_InitDefaultAttributes+0x110>
    f410:	0023      	movs	r3, r4
    f412:	3355      	adds	r3, #85	; 0x55
    f414:	7018      	strb	r0, [r3, #0]
    f416:	4b32      	ldr	r3, [pc, #200]	; (f4e0 <RADIO_InitDefaultAttributes+0x1d0>)
    f418:	4798      	blx	r3
    f41a:	0023      	movs	r3, r4
    f41c:	3354      	adds	r3, #84	; 0x54
    f41e:	7018      	strb	r0, [r3, #0]
    f420:	4b30      	ldr	r3, [pc, #192]	; (f4e4 <RADIO_InitDefaultAttributes+0x1d4>)
    f422:	4798      	blx	r3
    f424:	2201      	movs	r2, #1
    f426:	2100      	movs	r1, #0
    f428:	0010      	movs	r0, r2
    f42a:	4f2f      	ldr	r7, [pc, #188]	; (f4e8 <RADIO_InitDefaultAttributes+0x1d8>)
    f42c:	47b8      	blx	r7
    f42e:	6820      	ldr	r0, [r4, #0]
    f430:	4b2e      	ldr	r3, [pc, #184]	; (f4ec <RADIO_InitDefaultAttributes+0x1dc>)
    f432:	4798      	blx	r3
    f434:	2142      	movs	r1, #66	; 0x42
    f436:	203b      	movs	r0, #59	; 0x3b
    f438:	4d2d      	ldr	r5, [pc, #180]	; (f4f0 <RADIO_InitDefaultAttributes+0x1e0>)
    f43a:	47a8      	blx	r5
    f43c:	203b      	movs	r0, #59	; 0x3b
    f43e:	4b2d      	ldr	r3, [pc, #180]	; (f4f4 <RADIO_InitDefaultAttributes+0x1e4>)
    f440:	4798      	blx	r3
    f442:	2620      	movs	r6, #32
    f444:	4006      	ands	r6, r0
    f446:	d1f9      	bne.n	f43c <RADIO_InitDefaultAttributes+0x12c>
    f448:	2123      	movs	r1, #35	; 0x23
    f44a:	200c      	movs	r0, #12
    f44c:	47a8      	blx	r5
    f44e:	21aa      	movs	r1, #170	; 0xaa
    f450:	201f      	movs	r0, #31
    f452:	47a8      	blx	r5
    f454:	21ff      	movs	r1, #255	; 0xff
    f456:	2032      	movs	r0, #50	; 0x32
    f458:	47a8      	blx	r5
    f45a:	2140      	movs	r1, #64	; 0x40
    f45c:	2031      	movs	r0, #49	; 0x31
    f45e:	47a8      	blx	r5
    f460:	2201      	movs	r2, #1
    f462:	0030      	movs	r0, r6
    f464:	0011      	movs	r1, r2
    f466:	47b8      	blx	r7
    f468:	21ff      	movs	r1, #255	; 0xff
    f46a:	2023      	movs	r0, #35	; 0x23
    f46c:	47a8      	blx	r5
    f46e:	4b21      	ldr	r3, [pc, #132]	; (f4f4 <RADIO_InitDefaultAttributes+0x1e4>)
    f470:	2042      	movs	r0, #66	; 0x42
    f472:	4798      	blx	r3
    f474:	3431      	adds	r4, #49	; 0x31
    f476:	4b20      	ldr	r3, [pc, #128]	; (f4f8 <RADIO_InitDefaultAttributes+0x1e8>)
    f478:	7020      	strb	r0, [r4, #0]
    f47a:	4798      	blx	r3
    f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f47e:	4b1f      	ldr	r3, [pc, #124]	; (f4fc <RADIO_InitDefaultAttributes+0x1ec>)
    f480:	4798      	blx	r3
    f482:	e7bf      	b.n	f404 <RADIO_InitDefaultAttributes+0xf4>
    f484:	0023      	movs	r3, r4
    f486:	332d      	adds	r3, #45	; 0x2d
    f488:	4d1d      	ldr	r5, [pc, #116]	; (f500 <RADIO_InitDefaultAttributes+0x1f0>)
    f48a:	7818      	ldrb	r0, [r3, #0]
    f48c:	47a8      	blx	r5
    f48e:	0023      	movs	r3, r4
    f490:	332e      	adds	r3, #46	; 0x2e
    f492:	7818      	ldrb	r0, [r3, #0]
    f494:	47a8      	blx	r5
    f496:	0023      	movs	r3, r4
    f498:	332f      	adds	r3, #47	; 0x2f
    f49a:	7818      	ldrb	r0, [r3, #0]
    f49c:	47a8      	blx	r5
    f49e:	0023      	movs	r3, r4
    f4a0:	3350      	adds	r3, #80	; 0x50
    f4a2:	7818      	ldrb	r0, [r3, #0]
    f4a4:	47a8      	blx	r5
    f4a6:	e7ad      	b.n	f404 <RADIO_InitDefaultAttributes+0xf4>
    f4a8:	20003047 	.word	0x20003047
    f4ac:	20002d78 	.word	0x20002d78
    f4b0:	33be27a0 	.word	0x33be27a0
    f4b4:	000061a8 	.word	0x000061a8
    f4b8:	0000c350 	.word	0x0000c350
    f4bc:	00003a98 	.word	0x00003a98
    f4c0:	20002f44 	.word	0x20002f44
    f4c4:	20002da5 	.word	0x20002da5
    f4c8:	0000d035 	.word	0x0000d035
    f4cc:	20002da6 	.word	0x20002da6
    f4d0:	20002da7 	.word	0x20002da7
    f4d4:	20002dc8 	.word	0x20002dc8
    f4d8:	0000c43d 	.word	0x0000c43d
    f4dc:	0000c5c1 	.word	0x0000c5c1
    f4e0:	0000c5bd 	.word	0x0000c5bd
    f4e4:	0000f1c5 	.word	0x0000f1c5
    f4e8:	0000d6a5 	.word	0x0000d6a5
    f4ec:	0000e54d 	.word	0x0000e54d
    f4f0:	0000c47d 	.word	0x0000c47d
    f4f4:	0000c4a5 	.word	0x0000c4a5
    f4f8:	0000f2f5 	.word	0x0000f2f5
    f4fc:	0000cf79 	.word	0x0000cf79
    f500:	0000d381 	.word	0x0000d381

0000f504 <RADIO_Receive>:
    f504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f506:	7803      	ldrb	r3, [r0, #0]
    f508:	0006      	movs	r6, r0
    f50a:	4d24      	ldr	r5, [pc, #144]	; (f59c <RADIO_Receive+0x98>)
    f50c:	2b00      	cmp	r3, #0
    f50e:	d11d      	bne.n	f54c <RADIO_Receive+0x48>
    f510:	782b      	ldrb	r3, [r5, #0]
    f512:	2004      	movs	r0, #4
    f514:	2b01      	cmp	r3, #1
    f516:	d118      	bne.n	f54a <RADIO_Receive+0x46>
    f518:	4c21      	ldr	r4, [pc, #132]	; (f5a0 <RADIO_Receive+0x9c>)
    f51a:	4f22      	ldr	r7, [pc, #136]	; (f5a4 <RADIO_Receive+0xa0>)
    f51c:	0023      	movs	r3, r4
    f51e:	332f      	adds	r3, #47	; 0x2f
    f520:	7818      	ldrb	r0, [r3, #0]
    f522:	47b8      	blx	r7
    f524:	0023      	movs	r3, r4
    f526:	3334      	adds	r3, #52	; 0x34
    f528:	781b      	ldrb	r3, [r3, #0]
    f52a:	2b00      	cmp	r3, #0
    f52c:	d102      	bne.n	f534 <RADIO_Receive+0x30>
    f52e:	342e      	adds	r4, #46	; 0x2e
    f530:	7820      	ldrb	r0, [r4, #0]
    f532:	47b8      	blx	r7
    f534:	8872      	ldrh	r2, [r6, #2]
    f536:	4b1c      	ldr	r3, [pc, #112]	; (f5a8 <RADIO_Receive+0xa4>)
    f538:	2008      	movs	r0, #8
    f53a:	801a      	strh	r2, [r3, #0]
    f53c:	2304      	movs	r3, #4
    f53e:	702b      	strb	r3, [r5, #0]
    f540:	4b1a      	ldr	r3, [pc, #104]	; (f5ac <RADIO_Receive+0xa8>)
    f542:	4798      	blx	r3
    f544:	4b1a      	ldr	r3, [pc, #104]	; (f5b0 <RADIO_Receive+0xac>)
    f546:	4798      	blx	r3
    f548:	2000      	movs	r0, #0
    f54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f54c:	782b      	ldrb	r3, [r5, #0]
    f54e:	2000      	movs	r0, #0
    f550:	2b01      	cmp	r3, #1
    f552:	d0fa      	beq.n	f54a <RADIO_Receive+0x46>
    f554:	782b      	ldrb	r3, [r5, #0]
    f556:	3003      	adds	r0, #3
    f558:	2b04      	cmp	r3, #4
    f55a:	d1f6      	bne.n	f54a <RADIO_Receive+0x46>
    f55c:	4c10      	ldr	r4, [pc, #64]	; (f5a0 <RADIO_Receive+0x9c>)
    f55e:	4e11      	ldr	r6, [pc, #68]	; (f5a4 <RADIO_Receive+0xa0>)
    f560:	0023      	movs	r3, r4
    f562:	332f      	adds	r3, #47	; 0x2f
    f564:	7818      	ldrb	r0, [r3, #0]
    f566:	47b0      	blx	r6
    f568:	0023      	movs	r3, r4
    f56a:	3334      	adds	r3, #52	; 0x34
    f56c:	781b      	ldrb	r3, [r3, #0]
    f56e:	2b00      	cmp	r3, #0
    f570:	d103      	bne.n	f57a <RADIO_Receive+0x76>
    f572:	0023      	movs	r3, r4
    f574:	332e      	adds	r3, #46	; 0x2e
    f576:	7818      	ldrb	r0, [r3, #0]
    f578:	47b0      	blx	r6
    f57a:	2200      	movs	r2, #0
    f57c:	3434      	adds	r4, #52	; 0x34
    f57e:	7821      	ldrb	r1, [r4, #0]
    f580:	0010      	movs	r0, r2
    f582:	4b0c      	ldr	r3, [pc, #48]	; (f5b4 <RADIO_Receive+0xb0>)
    f584:	4798      	blx	r3
    f586:	4b0c      	ldr	r3, [pc, #48]	; (f5b8 <RADIO_Receive+0xb4>)
    f588:	4798      	blx	r3
    f58a:	2301      	movs	r3, #1
    f58c:	2008      	movs	r0, #8
    f58e:	4c0b      	ldr	r4, [pc, #44]	; (f5bc <RADIO_Receive+0xb8>)
    f590:	702b      	strb	r3, [r5, #0]
    f592:	47a0      	blx	r4
    f594:	2002      	movs	r0, #2
    f596:	47a0      	blx	r4
    f598:	e7d6      	b.n	f548 <RADIO_Receive+0x44>
    f59a:	46c0      	nop			; (mov r8, r8)
    f59c:	20003047 	.word	0x20003047
    f5a0:	20002d78 	.word	0x20002d78
    f5a4:	0000d381 	.word	0x0000d381
    f5a8:	20001ea0 	.word	0x20001ea0
    f5ac:	0000eb55 	.word	0x0000eb55
    f5b0:	0000f1c5 	.word	0x0000f1c5
    f5b4:	0000d6a5 	.word	0x0000d6a5
    f5b8:	0000f2f5 	.word	0x0000f2f5
    f5bc:	0000eb81 	.word	0x0000eb81

0000f5c0 <RADIO_TxHandler>:
    f5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5c2:	2500      	movs	r5, #0
    f5c4:	b087      	sub	sp, #28
    f5c6:	ae03      	add	r6, sp, #12
    f5c8:	4f56      	ldr	r7, [pc, #344]	; (f724 <RADIO_TxHandler+0x164>)
    f5ca:	7035      	strb	r5, [r6, #0]
    f5cc:	47b8      	blx	r7
    f5ce:	4c56      	ldr	r4, [pc, #344]	; (f728 <RADIO_TxHandler+0x168>)
    f5d0:	0023      	movs	r3, r4
    f5d2:	332d      	adds	r3, #45	; 0x2d
    f5d4:	7818      	ldrb	r0, [r3, #0]
    f5d6:	4b55      	ldr	r3, [pc, #340]	; (f72c <RADIO_TxHandler+0x16c>)
    f5d8:	4798      	blx	r3
    f5da:	0023      	movs	r3, r4
    f5dc:	3341      	adds	r3, #65	; 0x41
    f5de:	781b      	ldrb	r3, [r3, #0]
    f5e0:	42ab      	cmp	r3, r5
    f5e2:	d021      	beq.n	f628 <RADIO_TxHandler+0x68>
    f5e4:	2214      	movs	r2, #20
    f5e6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    f5e8:	4353      	muls	r3, r2
    f5ea:	0022      	movs	r2, r4
    f5ec:	3240      	adds	r2, #64	; 0x40
    f5ee:	7013      	strb	r3, [r2, #0]
    f5f0:	47b8      	blx	r7
    f5f2:	0028      	movs	r0, r5
    f5f4:	4b4e      	ldr	r3, [pc, #312]	; (f730 <RADIO_TxHandler+0x170>)
    f5f6:	4798      	blx	r3
    f5f8:	6820      	ldr	r0, [r4, #0]
    f5fa:	4b4e      	ldr	r3, [pc, #312]	; (f734 <RADIO_TxHandler+0x174>)
    f5fc:	4798      	blx	r3
    f5fe:	0023      	movs	r3, r4
    f600:	2201      	movs	r2, #1
    f602:	334c      	adds	r3, #76	; 0x4c
    f604:	0029      	movs	r1, r5
    f606:	0028      	movs	r0, r5
    f608:	4f4b      	ldr	r7, [pc, #300]	; (f738 <RADIO_TxHandler+0x178>)
    f60a:	801d      	strh	r5, [r3, #0]
    f60c:	47b8      	blx	r7
    f60e:	2109      	movs	r1, #9
    f610:	2012      	movs	r0, #18
    f612:	4b4a      	ldr	r3, [pc, #296]	; (f73c <RADIO_TxHandler+0x17c>)
    f614:	4798      	blx	r3
    f616:	2201      	movs	r2, #1
    f618:	0029      	movs	r1, r5
    f61a:	2005      	movs	r0, #5
    f61c:	47b8      	blx	r7
    f61e:	0023      	movs	r3, r4
    f620:	3340      	adds	r3, #64	; 0x40
    f622:	781b      	ldrb	r3, [r3, #0]
    f624:	42ab      	cmp	r3, r5
    f626:	d846      	bhi.n	f6b6 <RADIO_TxHandler+0xf6>
    f628:	7833      	ldrb	r3, [r6, #0]
    f62a:	2b07      	cmp	r3, #7
    f62c:	d076      	beq.n	f71c <RADIO_TxHandler+0x15c>
    f62e:	2001      	movs	r0, #1
    f630:	4b3f      	ldr	r3, [pc, #252]	; (f730 <RADIO_TxHandler+0x170>)
    f632:	4798      	blx	r3
    f634:	4b42      	ldr	r3, [pc, #264]	; (f740 <RADIO_TxHandler+0x180>)
    f636:	2004      	movs	r0, #4
    f638:	4798      	blx	r3
    f63a:	4b42      	ldr	r3, [pc, #264]	; (f744 <RADIO_TxHandler+0x184>)
    f63c:	4d3f      	ldr	r5, [pc, #252]	; (f73c <RADIO_TxHandler+0x17c>)
    f63e:	781f      	ldrb	r7, [r3, #0]
    f640:	4e41      	ldr	r6, [pc, #260]	; (f748 <RADIO_TxHandler+0x188>)
    f642:	2f01      	cmp	r7, #1
    f644:	d144      	bne.n	f6d0 <RADIO_TxHandler+0x110>
    f646:	7831      	ldrb	r1, [r6, #0]
    f648:	2022      	movs	r0, #34	; 0x22
    f64a:	47a8      	blx	r5
    f64c:	4b3f      	ldr	r3, [pc, #252]	; (f74c <RADIO_TxHandler+0x18c>)
    f64e:	200a      	movs	r0, #10
    f650:	4798      	blx	r3
    f652:	21f0      	movs	r1, #240	; 0xf0
    f654:	4008      	ands	r0, r1
    f656:	39e8      	subs	r1, #232	; 0xe8
    f658:	4301      	orrs	r1, r0
    f65a:	200a      	movs	r0, #10
    f65c:	47a8      	blx	r5
    f65e:	2140      	movs	r1, #64	; 0x40
    f660:	0008      	movs	r0, r1
    f662:	47a8      	blx	r5
    f664:	2100      	movs	r1, #0
    f666:	2041      	movs	r0, #65	; 0x41
    f668:	47a8      	blx	r5
    f66a:	4b36      	ldr	r3, [pc, #216]	; (f744 <RADIO_TxHandler+0x184>)
    f66c:	003a      	movs	r2, r7
    f66e:	7819      	ldrb	r1, [r3, #0]
    f670:	0038      	movs	r0, r7
    f672:	4b31      	ldr	r3, [pc, #196]	; (f738 <RADIO_TxHandler+0x178>)
    f674:	4798      	blx	r3
    f676:	4b36      	ldr	r3, [pc, #216]	; (f750 <RADIO_TxHandler+0x190>)
    f678:	7832      	ldrb	r2, [r6, #0]
    f67a:	6819      	ldr	r1, [r3, #0]
    f67c:	2000      	movs	r0, #0
    f67e:	4b35      	ldr	r3, [pc, #212]	; (f754 <RADIO_TxHandler+0x194>)
    f680:	4798      	blx	r3
    f682:	0023      	movs	r3, r4
    f684:	3334      	adds	r3, #52	; 0x34
    f686:	7819      	ldrb	r1, [r3, #0]
    f688:	2200      	movs	r2, #0
    f68a:	2003      	movs	r0, #3
    f68c:	4b2a      	ldr	r3, [pc, #168]	; (f738 <RADIO_TxHandler+0x178>)
    f68e:	4798      	blx	r3
    f690:	4b31      	ldr	r3, [pc, #196]	; (f758 <RADIO_TxHandler+0x198>)
    f692:	4798      	blx	r3
    f694:	4b31      	ldr	r3, [pc, #196]	; (f75c <RADIO_TxHandler+0x19c>)
    f696:	6018      	str	r0, [r3, #0]
    f698:	6059      	str	r1, [r3, #4]
    f69a:	68e3      	ldr	r3, [r4, #12]
    f69c:	2b00      	cmp	r3, #0
    f69e:	d03d      	beq.n	f71c <RADIO_TxHandler+0x15c>
    f6a0:	21fa      	movs	r1, #250	; 0xfa
    f6a2:	2200      	movs	r2, #0
    f6a4:	342f      	adds	r4, #47	; 0x2f
    f6a6:	0089      	lsls	r1, r1, #2
    f6a8:	4359      	muls	r1, r3
    f6aa:	7820      	ldrb	r0, [r4, #0]
    f6ac:	4b2c      	ldr	r3, [pc, #176]	; (f760 <RADIO_TxHandler+0x1a0>)
    f6ae:	9200      	str	r2, [sp, #0]
    f6b0:	4c2c      	ldr	r4, [pc, #176]	; (f764 <RADIO_TxHandler+0x1a4>)
    f6b2:	47a0      	blx	r4
    f6b4:	e032      	b.n	f71c <RADIO_TxHandler+0x15c>
    f6b6:	4f2c      	ldr	r7, [pc, #176]	; (f768 <RADIO_TxHandler+0x1a8>)
    f6b8:	4b2c      	ldr	r3, [pc, #176]	; (f76c <RADIO_TxHandler+0x1ac>)
    f6ba:	0038      	movs	r0, r7
    f6bc:	4798      	blx	r3
    f6be:	233e      	movs	r3, #62	; 0x3e
    f6c0:	5ee2      	ldrsh	r2, [r4, r3]
    f6c2:	2100      	movs	r1, #0
    f6c4:	5e7b      	ldrsh	r3, [r7, r1]
    f6c6:	429a      	cmp	r2, r3
    f6c8:	db14      	blt.n	f6f4 <RADIO_TxHandler+0x134>
    f6ca:	3501      	adds	r5, #1
    f6cc:	b2ed      	uxtb	r5, r5
    f6ce:	e7a6      	b.n	f61e <RADIO_TxHandler+0x5e>
    f6d0:	2100      	movs	r1, #0
    f6d2:	2040      	movs	r0, #64	; 0x40
    f6d4:	47a8      	blx	r5
    f6d6:	2100      	movs	r1, #0
    f6d8:	2041      	movs	r0, #65	; 0x41
    f6da:	47a8      	blx	r5
    f6dc:	0023      	movs	r3, r4
    f6de:	2000      	movs	r0, #0
    f6e0:	3358      	adds	r3, #88	; 0x58
    f6e2:	7831      	ldrb	r1, [r6, #0]
    f6e4:	7018      	strb	r0, [r3, #0]
    f6e6:	47a8      	blx	r5
    f6e8:	4b19      	ldr	r3, [pc, #100]	; (f750 <RADIO_TxHandler+0x190>)
    f6ea:	7831      	ldrb	r1, [r6, #0]
    f6ec:	6818      	ldr	r0, [r3, #0]
    f6ee:	4b20      	ldr	r3, [pc, #128]	; (f770 <RADIO_TxHandler+0x1b0>)
    f6f0:	4798      	blx	r3
    f6f2:	e7c6      	b.n	f682 <RADIO_TxHandler+0xc2>
    f6f4:	2000      	movs	r0, #0
    f6f6:	4b1f      	ldr	r3, [pc, #124]	; (f774 <RADIO_TxHandler+0x1b4>)
    f6f8:	4798      	blx	r3
    f6fa:	4b1f      	ldr	r3, [pc, #124]	; (f778 <RADIO_TxHandler+0x1b8>)
    f6fc:	4798      	blx	r3
    f6fe:	2307      	movs	r3, #7
    f700:	2201      	movs	r2, #1
    f702:	7033      	strb	r3, [r6, #0]
    f704:	4b1d      	ldr	r3, [pc, #116]	; (f77c <RADIO_TxHandler+0x1bc>)
    f706:	701a      	strb	r2, [r3, #0]
    f708:	4b1d      	ldr	r3, [pc, #116]	; (f780 <RADIO_TxHandler+0x1c0>)
    f70a:	781b      	ldrb	r3, [r3, #0]
    f70c:	079b      	lsls	r3, r3, #30
    f70e:	d58b      	bpl.n	f628 <RADIO_TxHandler+0x68>
    f710:	6923      	ldr	r3, [r4, #16]
    f712:	2b00      	cmp	r3, #0
    f714:	d088      	beq.n	f628 <RADIO_TxHandler+0x68>
    f716:	0031      	movs	r1, r6
    f718:	2002      	movs	r0, #2
    f71a:	4798      	blx	r3
    f71c:	2000      	movs	r0, #0
    f71e:	b007      	add	sp, #28
    f720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f722:	46c0      	nop			; (mov r8, r8)
    f724:	0000f1c5 	.word	0x0000f1c5
    f728:	20002d78 	.word	0x20002d78
    f72c:	0000d381 	.word	0x0000d381
    f730:	0000ee09 	.word	0x0000ee09
    f734:	0000e54d 	.word	0x0000e54d
    f738:	0000d6a5 	.word	0x0000d6a5
    f73c:	0000c47d 	.word	0x0000c47d
    f740:	0000e595 	.word	0x0000e595
    f744:	20002dac 	.word	0x20002dac
    f748:	20001eb4 	.word	0x20001eb4
    f74c:	0000c4a5 	.word	0x0000c4a5
    f750:	20001eb0 	.word	0x20001eb0
    f754:	0000c4d1 	.word	0x0000c4d1
    f758:	0000d011 	.word	0x0000d011
    f75c:	20001ea8 	.word	0x20001ea8
    f760:	0000ee71 	.word	0x0000ee71
    f764:	0000d069 	.word	0x0000d069
    f768:	20001e9e 	.word	0x20001e9e
    f76c:	0000d8c1 	.word	0x0000d8c1
    f770:	0000ec85 	.word	0x0000ec85
    f774:	0000ee3d 	.word	0x0000ee3d
    f778:	0000f2f5 	.word	0x0000f2f5
    f77c:	20003047 	.word	0x20003047
    f780:	20003046 	.word	0x20003046

0000f784 <RADIO_TxDoneHandler>:
    f784:	b5f0      	push	{r4, r5, r6, r7, lr}
    f786:	4b35      	ldr	r3, [pc, #212]	; (f85c <RADIO_TxDoneHandler+0xd8>)
    f788:	b087      	sub	sp, #28
    f78a:	881a      	ldrh	r2, [r3, #0]
    f78c:	06d2      	lsls	r2, r2, #27
    f78e:	0fd2      	lsrs	r2, r2, #31
    f790:	9200      	str	r2, [sp, #0]
    f792:	466a      	mov	r2, sp
    f794:	7810      	ldrb	r0, [r2, #0]
    f796:	881a      	ldrh	r2, [r3, #0]
    f798:	2801      	cmp	r0, #1
    f79a:	d12b      	bne.n	f7f4 <RADIO_TxDoneHandler+0x70>
    f79c:	4c30      	ldr	r4, [pc, #192]	; (f860 <RADIO_TxDoneHandler+0xdc>)
    f79e:	2110      	movs	r1, #16
    f7a0:	0027      	movs	r7, r4
    f7a2:	2500      	movs	r5, #0
    f7a4:	438a      	bics	r2, r1
    f7a6:	801a      	strh	r2, [r3, #0]
    f7a8:	3734      	adds	r7, #52	; 0x34
    f7aa:	0002      	movs	r2, r0
    f7ac:	7839      	ldrb	r1, [r7, #0]
    f7ae:	4b2d      	ldr	r3, [pc, #180]	; (f864 <RADIO_TxDoneHandler+0xe0>)
    f7b0:	4798      	blx	r3
    f7b2:	68e3      	ldr	r3, [r4, #12]
    f7b4:	ae03      	add	r6, sp, #12
    f7b6:	9304      	str	r3, [sp, #16]
    f7b8:	7035      	strb	r5, [r6, #0]
    f7ba:	002a      	movs	r2, r5
    f7bc:	4b29      	ldr	r3, [pc, #164]	; (f864 <RADIO_TxDoneHandler+0xe0>)
    f7be:	7839      	ldrb	r1, [r7, #0]
    f7c0:	0028      	movs	r0, r5
    f7c2:	4798      	blx	r3
    f7c4:	466a      	mov	r2, sp
    f7c6:	4b28      	ldr	r3, [pc, #160]	; (f868 <RADIO_TxDoneHandler+0xe4>)
    f7c8:	7812      	ldrb	r2, [r2, #0]
    f7ca:	701a      	strb	r2, [r3, #0]
    f7cc:	0023      	movs	r3, r4
    f7ce:	3358      	adds	r3, #88	; 0x58
    f7d0:	701d      	strb	r5, [r3, #0]
    f7d2:	4b26      	ldr	r3, [pc, #152]	; (f86c <RADIO_TxDoneHandler+0xe8>)
    f7d4:	781b      	ldrb	r3, [r3, #0]
    f7d6:	075b      	lsls	r3, r3, #29
    f7d8:	d505      	bpl.n	f7e6 <RADIO_TxDoneHandler+0x62>
    f7da:	6923      	ldr	r3, [r4, #16]
    f7dc:	42ab      	cmp	r3, r5
    f7de:	d002      	beq.n	f7e6 <RADIO_TxDoneHandler+0x62>
    f7e0:	0031      	movs	r1, r6
    f7e2:	2004      	movs	r0, #4
    f7e4:	4798      	blx	r3
    f7e6:	4b22      	ldr	r3, [pc, #136]	; (f870 <RADIO_TxDoneHandler+0xec>)
    f7e8:	4798      	blx	r3
    f7ea:	4b22      	ldr	r3, [pc, #136]	; (f874 <RADIO_TxDoneHandler+0xf0>)
    f7ec:	4798      	blx	r3
    f7ee:	2000      	movs	r0, #0
    f7f0:	b007      	add	sp, #28
    f7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7f4:	07d2      	lsls	r2, r2, #31
    f7f6:	d402      	bmi.n	f7fe <RADIO_TxDoneHandler+0x7a>
    f7f8:	881a      	ldrh	r2, [r3, #0]
    f7fa:	0752      	lsls	r2, r2, #29
    f7fc:	d527      	bpl.n	f84e <RADIO_TxDoneHandler+0xca>
    f7fe:	2601      	movs	r6, #1
    f800:	2104      	movs	r1, #4
    f802:	881a      	ldrh	r2, [r3, #0]
    f804:	4f16      	ldr	r7, [pc, #88]	; (f860 <RADIO_TxDoneHandler+0xdc>)
    f806:	43b2      	bics	r2, r6
    f808:	801a      	strh	r2, [r3, #0]
    f80a:	881a      	ldrh	r2, [r3, #0]
    f80c:	2400      	movs	r4, #0
    f80e:	438a      	bics	r2, r1
    f810:	801a      	strh	r2, [r3, #0]
    f812:	4b19      	ldr	r3, [pc, #100]	; (f878 <RADIO_TxDoneHandler+0xf4>)
    f814:	ad03      	add	r5, sp, #12
    f816:	681b      	ldr	r3, [r3, #0]
    f818:	702c      	strb	r4, [r5, #0]
    f81a:	9304      	str	r3, [sp, #16]
    f81c:	003b      	movs	r3, r7
    f81e:	3334      	adds	r3, #52	; 0x34
    f820:	7819      	ldrb	r1, [r3, #0]
    f822:	0022      	movs	r2, r4
    f824:	0020      	movs	r0, r4
    f826:	4b0f      	ldr	r3, [pc, #60]	; (f864 <RADIO_TxDoneHandler+0xe0>)
    f828:	4798      	blx	r3
    f82a:	4b14      	ldr	r3, [pc, #80]	; (f87c <RADIO_TxDoneHandler+0xf8>)
    f82c:	4798      	blx	r3
    f82e:	4b0e      	ldr	r3, [pc, #56]	; (f868 <RADIO_TxDoneHandler+0xe4>)
    f830:	701e      	strb	r6, [r3, #0]
    f832:	003b      	movs	r3, r7
    f834:	3358      	adds	r3, #88	; 0x58
    f836:	701c      	strb	r4, [r3, #0]
    f838:	4b0c      	ldr	r3, [pc, #48]	; (f86c <RADIO_TxDoneHandler+0xe8>)
    f83a:	781b      	ldrb	r3, [r3, #0]
    f83c:	079b      	lsls	r3, r3, #30
    f83e:	d5d6      	bpl.n	f7ee <RADIO_TxDoneHandler+0x6a>
    f840:	693b      	ldr	r3, [r7, #16]
    f842:	42a3      	cmp	r3, r4
    f844:	d0d3      	beq.n	f7ee <RADIO_TxDoneHandler+0x6a>
    f846:	0029      	movs	r1, r5
    f848:	2002      	movs	r0, #2
    f84a:	4798      	blx	r3
    f84c:	e7cf      	b.n	f7ee <RADIO_TxDoneHandler+0x6a>
    f84e:	881b      	ldrh	r3, [r3, #0]
    f850:	059b      	lsls	r3, r3, #22
    f852:	d5cc      	bpl.n	f7ee <RADIO_TxDoneHandler+0x6a>
    f854:	4b0a      	ldr	r3, [pc, #40]	; (f880 <RADIO_TxDoneHandler+0xfc>)
    f856:	4798      	blx	r3
    f858:	e7c9      	b.n	f7ee <RADIO_TxDoneHandler+0x6a>
    f85a:	46c0      	nop			; (mov r8, r8)
    f85c:	20003044 	.word	0x20003044
    f860:	20002d78 	.word	0x20002d78
    f864:	0000d6a5 	.word	0x0000d6a5
    f868:	20003047 	.word	0x20003047
    f86c:	20003046 	.word	0x20003046
    f870:	0000c43d 	.word	0x0000c43d
    f874:	0000f311 	.word	0x0000f311
    f878:	20001ea8 	.word	0x20001ea8
    f87c:	0000f2f5 	.word	0x0000f2f5
    f880:	000132e9 	.word	0x000132e9

0000f884 <RADIO_RxDoneHandler>:
    f884:	b5f0      	push	{r4, r5, r6, r7, lr}
    f886:	4b97      	ldr	r3, [pc, #604]	; (fae4 <RADIO_RxDoneHandler+0x260>)
    f888:	b085      	sub	sp, #20
    f88a:	881c      	ldrh	r4, [r3, #0]
    f88c:	881a      	ldrh	r2, [r3, #0]
    f88e:	06a4      	lsls	r4, r4, #26
    f890:	0fe4      	lsrs	r4, r4, #31
    f892:	b2e0      	uxtb	r0, r4
    f894:	2801      	cmp	r0, #1
    f896:	d126      	bne.n	f8e6 <RADIO_RxDoneHandler+0x62>
    f898:	4d93      	ldr	r5, [pc, #588]	; (fae8 <RADIO_RxDoneHandler+0x264>)
    f89a:	2120      	movs	r1, #32
    f89c:	002e      	movs	r6, r5
    f89e:	438a      	bics	r2, r1
    f8a0:	801a      	strh	r2, [r3, #0]
    f8a2:	3634      	adds	r6, #52	; 0x34
    f8a4:	0002      	movs	r2, r0
    f8a6:	7831      	ldrb	r1, [r6, #0]
    f8a8:	4f90      	ldr	r7, [pc, #576]	; (faec <RADIO_RxDoneHandler+0x268>)
    f8aa:	47b8      	blx	r7
    f8ac:	2200      	movs	r2, #0
    f8ae:	7831      	ldrb	r1, [r6, #0]
    f8b0:	0010      	movs	r0, r2
    f8b2:	47b8      	blx	r7
    f8b4:	4b8e      	ldr	r3, [pc, #568]	; (faf0 <RADIO_RxDoneHandler+0x26c>)
    f8b6:	4798      	blx	r3
    f8b8:	4b8e      	ldr	r3, [pc, #568]	; (faf4 <RADIO_RxDoneHandler+0x270>)
    f8ba:	002a      	movs	r2, r5
    f8bc:	701c      	strb	r4, [r3, #0]
    f8be:	2300      	movs	r3, #0
    f8c0:	322c      	adds	r2, #44	; 0x2c
    f8c2:	7013      	strb	r3, [r2, #0]
    f8c4:	002a      	movs	r2, r5
    f8c6:	a901      	add	r1, sp, #4
    f8c8:	3258      	adds	r2, #88	; 0x58
    f8ca:	7013      	strb	r3, [r2, #0]
    f8cc:	700b      	strb	r3, [r1, #0]
    f8ce:	4b8a      	ldr	r3, [pc, #552]	; (faf8 <RADIO_RxDoneHandler+0x274>)
    f8d0:	781b      	ldrb	r3, [r3, #0]
    f8d2:	071b      	lsls	r3, r3, #28
    f8d4:	d504      	bpl.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    f8d6:	692b      	ldr	r3, [r5, #16]
    f8d8:	2008      	movs	r0, #8
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d000      	beq.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    f8de:	e084      	b.n	f9ea <RADIO_RxDoneHandler+0x166>
    f8e0:	2000      	movs	r0, #0
    f8e2:	b005      	add	sp, #20
    f8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8e6:	0652      	lsls	r2, r2, #25
    f8e8:	d402      	bmi.n	f8f0 <RADIO_RxDoneHandler+0x6c>
    f8ea:	881a      	ldrh	r2, [r3, #0]
    f8ec:	0612      	lsls	r2, r2, #24
    f8ee:	d523      	bpl.n	f938 <RADIO_RxDoneHandler+0xb4>
    f8f0:	2140      	movs	r1, #64	; 0x40
    f8f2:	881a      	ldrh	r2, [r3, #0]
    f8f4:	4c7c      	ldr	r4, [pc, #496]	; (fae8 <RADIO_RxDoneHandler+0x264>)
    f8f6:	438a      	bics	r2, r1
    f8f8:	801a      	strh	r2, [r3, #0]
    f8fa:	881a      	ldrh	r2, [r3, #0]
    f8fc:	1849      	adds	r1, r1, r1
    f8fe:	438a      	bics	r2, r1
    f900:	801a      	strh	r2, [r3, #0]
    f902:	0023      	movs	r3, r4
    f904:	2200      	movs	r2, #0
    f906:	3334      	adds	r3, #52	; 0x34
    f908:	7819      	ldrb	r1, [r3, #0]
    f90a:	0010      	movs	r0, r2
    f90c:	4b77      	ldr	r3, [pc, #476]	; (faec <RADIO_RxDoneHandler+0x268>)
    f90e:	4798      	blx	r3
    f910:	4b77      	ldr	r3, [pc, #476]	; (faf0 <RADIO_RxDoneHandler+0x26c>)
    f912:	4798      	blx	r3
    f914:	2201      	movs	r2, #1
    f916:	4b77      	ldr	r3, [pc, #476]	; (faf4 <RADIO_RxDoneHandler+0x270>)
    f918:	a901      	add	r1, sp, #4
    f91a:	701a      	strb	r2, [r3, #0]
    f91c:	0022      	movs	r2, r4
    f91e:	2300      	movs	r3, #0
    f920:	322c      	adds	r2, #44	; 0x2c
    f922:	7013      	strb	r3, [r2, #0]
    f924:	0022      	movs	r2, r4
    f926:	3258      	adds	r2, #88	; 0x58
    f928:	7013      	strb	r3, [r2, #0]
    f92a:	700b      	strb	r3, [r1, #0]
    f92c:	4b72      	ldr	r3, [pc, #456]	; (faf8 <RADIO_RxDoneHandler+0x274>)
    f92e:	781b      	ldrb	r3, [r3, #0]
    f930:	071b      	lsls	r3, r3, #28
    f932:	d5d5      	bpl.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    f934:	6923      	ldr	r3, [r4, #16]
    f936:	e7cf      	b.n	f8d8 <RADIO_RxDoneHandler+0x54>
    f938:	881a      	ldrh	r2, [r3, #0]
    f93a:	0792      	lsls	r2, r2, #30
    f93c:	d571      	bpl.n	fa22 <RADIO_RxDoneHandler+0x19e>
    f93e:	2102      	movs	r1, #2
    f940:	881a      	ldrh	r2, [r3, #0]
    f942:	4d6e      	ldr	r5, [pc, #440]	; (fafc <RADIO_RxDoneHandler+0x278>)
    f944:	438a      	bics	r2, r1
    f946:	801a      	strh	r2, [r3, #0]
    f948:	2013      	movs	r0, #19
    f94a:	47a8      	blx	r5
    f94c:	4c66      	ldr	r4, [pc, #408]	; (fae8 <RADIO_RxDoneHandler+0x264>)
    f94e:	2100      	movs	r1, #0
    f950:	0026      	movs	r6, r4
    f952:	362c      	adds	r6, #44	; 0x2c
    f954:	7030      	strb	r0, [r6, #0]
    f956:	4b6a      	ldr	r3, [pc, #424]	; (fb00 <RADIO_RxDoneHandler+0x27c>)
    f958:	200d      	movs	r0, #13
    f95a:	4798      	blx	r3
    f95c:	7832      	ldrb	r2, [r6, #0]
    f95e:	4b69      	ldr	r3, [pc, #420]	; (fb04 <RADIO_RxDoneHandler+0x280>)
    f960:	b2d2      	uxtb	r2, r2
    f962:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f964:	2000      	movs	r0, #0
    f966:	4798      	blx	r3
    f968:	2019      	movs	r0, #25
    f96a:	47a8      	blx	r5
    f96c:	0023      	movs	r3, r4
    f96e:	b240      	sxtb	r0, r0
    f970:	3332      	adds	r3, #50	; 0x32
    f972:	2800      	cmp	r0, #0
    f974:	da3b      	bge.n	f9ee <RADIO_RxDoneHandler+0x16a>
    f976:	4240      	negs	r0, r0
    f978:	1080      	asrs	r0, r0, #2
    f97a:	4240      	negs	r0, r0
    f97c:	7018      	strb	r0, [r3, #0]
    f97e:	201a      	movs	r0, #26
    f980:	47a8      	blx	r5
    f982:	0023      	movs	r3, r4
    f984:	3332      	adds	r3, #50	; 0x32
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	b202      	sxth	r2, r0
    f98a:	b25b      	sxtb	r3, r3
    f98c:	4d5e      	ldr	r5, [pc, #376]	; (fb08 <RADIO_RxDoneHandler+0x284>)
    f98e:	2b00      	cmp	r3, #0
    f990:	da36      	bge.n	fa00 <RADIO_RxDoneHandler+0x17c>
    f992:	6821      	ldr	r1, [r4, #0]
    f994:	4e5d      	ldr	r6, [pc, #372]	; (fb0c <RADIO_RxDoneHandler+0x288>)
    f996:	198e      	adds	r6, r1, r6
    f998:	42ae      	cmp	r6, r5
    f99a:	d82a      	bhi.n	f9f2 <RADIO_RxDoneHandler+0x16e>
    f99c:	3b9d      	subs	r3, #157	; 0x9d
    f99e:	181b      	adds	r3, r3, r0
    f9a0:	1112      	asrs	r2, r2, #4
    f9a2:	189b      	adds	r3, r3, r2
    f9a4:	0022      	movs	r2, r4
    f9a6:	3256      	adds	r2, #86	; 0x56
    f9a8:	8013      	strh	r3, [r2, #0]
    f9aa:	0023      	movs	r3, r4
    f9ac:	2200      	movs	r2, #0
    f9ae:	3334      	adds	r3, #52	; 0x34
    f9b0:	7819      	ldrb	r1, [r3, #0]
    f9b2:	0010      	movs	r0, r2
    f9b4:	4b4d      	ldr	r3, [pc, #308]	; (faec <RADIO_RxDoneHandler+0x268>)
    f9b6:	4798      	blx	r3
    f9b8:	4b4d      	ldr	r3, [pc, #308]	; (faf0 <RADIO_RxDoneHandler+0x26c>)
    f9ba:	4798      	blx	r3
    f9bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f9be:	a901      	add	r1, sp, #4
    f9c0:	604b      	str	r3, [r1, #4]
    f9c2:	0023      	movs	r3, r4
    f9c4:	332c      	adds	r3, #44	; 0x2c
    f9c6:	781b      	ldrb	r3, [r3, #0]
    f9c8:	2201      	movs	r2, #1
    f9ca:	720b      	strb	r3, [r1, #8]
    f9cc:	2300      	movs	r3, #0
    f9ce:	700b      	strb	r3, [r1, #0]
    f9d0:	4b48      	ldr	r3, [pc, #288]	; (faf4 <RADIO_RxDoneHandler+0x270>)
    f9d2:	701a      	strb	r2, [r3, #0]
    f9d4:	4b48      	ldr	r3, [pc, #288]	; (faf8 <RADIO_RxDoneHandler+0x274>)
    f9d6:	7818      	ldrb	r0, [r3, #0]
    f9d8:	07c0      	lsls	r0, r0, #31
    f9da:	0fc0      	lsrs	r0, r0, #31
    f9dc:	4290      	cmp	r0, r2
    f9de:	d000      	beq.n	f9e2 <RADIO_RxDoneHandler+0x15e>
    f9e0:	e77e      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    f9e2:	6923      	ldr	r3, [r4, #16]
    f9e4:	2b00      	cmp	r3, #0
    f9e6:	d100      	bne.n	f9ea <RADIO_RxDoneHandler+0x166>
    f9e8:	e77a      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    f9ea:	4798      	blx	r3
    f9ec:	e778      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    f9ee:	1080      	asrs	r0, r0, #2
    f9f0:	e7c4      	b.n	f97c <RADIO_RxDoneHandler+0xf8>
    f9f2:	4d47      	ldr	r5, [pc, #284]	; (fb10 <RADIO_RxDoneHandler+0x28c>)
    f9f4:	1949      	adds	r1, r1, r5
    f9f6:	4d47      	ldr	r5, [pc, #284]	; (fb14 <RADIO_RxDoneHandler+0x290>)
    f9f8:	42a9      	cmp	r1, r5
    f9fa:	d8d6      	bhi.n	f9aa <RADIO_RxDoneHandler+0x126>
    f9fc:	3ba4      	subs	r3, #164	; 0xa4
    f9fe:	e7ce      	b.n	f99e <RADIO_RxDoneHandler+0x11a>
    fa00:	6823      	ldr	r3, [r4, #0]
    fa02:	4942      	ldr	r1, [pc, #264]	; (fb0c <RADIO_RxDoneHandler+0x288>)
    fa04:	1859      	adds	r1, r3, r1
    fa06:	42a9      	cmp	r1, r5
    fa08:	d802      	bhi.n	fa10 <RADIO_RxDoneHandler+0x18c>
    fa0a:	0003      	movs	r3, r0
    fa0c:	3b9d      	subs	r3, #157	; 0x9d
    fa0e:	e7c7      	b.n	f9a0 <RADIO_RxDoneHandler+0x11c>
    fa10:	493f      	ldr	r1, [pc, #252]	; (fb10 <RADIO_RxDoneHandler+0x28c>)
    fa12:	185b      	adds	r3, r3, r1
    fa14:	493f      	ldr	r1, [pc, #252]	; (fb14 <RADIO_RxDoneHandler+0x290>)
    fa16:	428b      	cmp	r3, r1
    fa18:	d8c7      	bhi.n	f9aa <RADIO_RxDoneHandler+0x126>
    fa1a:	38a4      	subs	r0, #164	; 0xa4
    fa1c:	1113      	asrs	r3, r2, #4
    fa1e:	18c3      	adds	r3, r0, r3
    fa20:	e7c0      	b.n	f9a4 <RADIO_RxDoneHandler+0x120>
    fa22:	881a      	ldrh	r2, [r3, #0]
    fa24:	0712      	lsls	r2, r2, #28
    fa26:	0fd5      	lsrs	r5, r2, #31
    fa28:	2a00      	cmp	r2, #0
    fa2a:	da27      	bge.n	fa7c <RADIO_RxDoneHandler+0x1f8>
    fa2c:	2108      	movs	r1, #8
    fa2e:	881a      	ldrh	r2, [r3, #0]
    fa30:	4c2d      	ldr	r4, [pc, #180]	; (fae8 <RADIO_RxDoneHandler+0x264>)
    fa32:	438a      	bics	r2, r1
    fa34:	801a      	strh	r2, [r3, #0]
    fa36:	0023      	movs	r3, r4
    fa38:	2280      	movs	r2, #128	; 0x80
    fa3a:	3332      	adds	r3, #50	; 0x32
    fa3c:	701a      	strb	r2, [r3, #0]
    fa3e:	0023      	movs	r3, r4
    fa40:	2200      	movs	r2, #0
    fa42:	3334      	adds	r3, #52	; 0x34
    fa44:	7819      	ldrb	r1, [r3, #0]
    fa46:	0010      	movs	r0, r2
    fa48:	4b28      	ldr	r3, [pc, #160]	; (faec <RADIO_RxDoneHandler+0x268>)
    fa4a:	4798      	blx	r3
    fa4c:	4b28      	ldr	r3, [pc, #160]	; (faf0 <RADIO_RxDoneHandler+0x26c>)
    fa4e:	4798      	blx	r3
    fa50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fa52:	a901      	add	r1, sp, #4
    fa54:	604b      	str	r3, [r1, #4]
    fa56:	0023      	movs	r3, r4
    fa58:	332c      	adds	r3, #44	; 0x2c
    fa5a:	781b      	ldrb	r3, [r3, #0]
    fa5c:	0022      	movs	r2, r4
    fa5e:	720b      	strb	r3, [r1, #8]
    fa60:	2300      	movs	r3, #0
    fa62:	3258      	adds	r2, #88	; 0x58
    fa64:	7013      	strb	r3, [r2, #0]
    fa66:	700b      	strb	r3, [r1, #0]
    fa68:	4b22      	ldr	r3, [pc, #136]	; (faf4 <RADIO_RxDoneHandler+0x270>)
    fa6a:	701d      	strb	r5, [r3, #0]
    fa6c:	4b22      	ldr	r3, [pc, #136]	; (faf8 <RADIO_RxDoneHandler+0x274>)
    fa6e:	7818      	ldrb	r0, [r3, #0]
    fa70:	07c0      	lsls	r0, r0, #31
    fa72:	0fc0      	lsrs	r0, r0, #31
    fa74:	2801      	cmp	r0, #1
    fa76:	d000      	beq.n	fa7a <RADIO_RxDoneHandler+0x1f6>
    fa78:	e732      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    fa7a:	e7b2      	b.n	f9e2 <RADIO_RxDoneHandler+0x15e>
    fa7c:	881a      	ldrh	r2, [r3, #0]
    fa7e:	05d2      	lsls	r2, r2, #23
    fa80:	0fd5      	lsrs	r5, r2, #31
    fa82:	2a00      	cmp	r2, #0
    fa84:	db00      	blt.n	fa88 <RADIO_RxDoneHandler+0x204>
    fa86:	e72b      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    fa88:	4c17      	ldr	r4, [pc, #92]	; (fae8 <RADIO_RxDoneHandler+0x264>)
    fa8a:	881a      	ldrh	r2, [r3, #0]
    fa8c:	0026      	movs	r6, r4
    fa8e:	4922      	ldr	r1, [pc, #136]	; (fb18 <RADIO_RxDoneHandler+0x294>)
    fa90:	362c      	adds	r6, #44	; 0x2c
    fa92:	400a      	ands	r2, r1
    fa94:	801a      	strh	r2, [r3, #0]
    fa96:	7832      	ldrb	r2, [r6, #0]
    fa98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fa9a:	b2d2      	uxtb	r2, r2
    fa9c:	2000      	movs	r0, #0
    fa9e:	4b19      	ldr	r3, [pc, #100]	; (fb04 <RADIO_RxDoneHandler+0x280>)
    faa0:	4798      	blx	r3
    faa2:	0023      	movs	r3, r4
    faa4:	2200      	movs	r2, #0
    faa6:	3334      	adds	r3, #52	; 0x34
    faa8:	7819      	ldrb	r1, [r3, #0]
    faaa:	0010      	movs	r0, r2
    faac:	4b0f      	ldr	r3, [pc, #60]	; (faec <RADIO_RxDoneHandler+0x268>)
    faae:	4798      	blx	r3
    fab0:	4b0f      	ldr	r3, [pc, #60]	; (faf0 <RADIO_RxDoneHandler+0x26c>)
    fab2:	4798      	blx	r3
    fab4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fab6:	a901      	add	r1, sp, #4
    fab8:	604b      	str	r3, [r1, #4]
    faba:	7833      	ldrb	r3, [r6, #0]
    fabc:	0022      	movs	r2, r4
    fabe:	720b      	strb	r3, [r1, #8]
    fac0:	2300      	movs	r3, #0
    fac2:	3258      	adds	r2, #88	; 0x58
    fac4:	7013      	strb	r3, [r2, #0]
    fac6:	700b      	strb	r3, [r1, #0]
    fac8:	4b0a      	ldr	r3, [pc, #40]	; (faf4 <RADIO_RxDoneHandler+0x270>)
    faca:	701d      	strb	r5, [r3, #0]
    facc:	4b0a      	ldr	r3, [pc, #40]	; (faf8 <RADIO_RxDoneHandler+0x274>)
    face:	781b      	ldrb	r3, [r3, #0]
    fad0:	06db      	lsls	r3, r3, #27
    fad2:	d400      	bmi.n	fad6 <RADIO_RxDoneHandler+0x252>
    fad4:	e704      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    fad6:	6923      	ldr	r3, [r4, #16]
    fad8:	2b00      	cmp	r3, #0
    fada:	d100      	bne.n	fade <RADIO_RxDoneHandler+0x25a>
    fadc:	e700      	b.n	f8e0 <RADIO_RxDoneHandler+0x5c>
    fade:	2010      	movs	r0, #16
    fae0:	e783      	b.n	f9ea <RADIO_RxDoneHandler+0x166>
    fae2:	46c0      	nop			; (mov r8, r8)
    fae4:	20003044 	.word	0x20003044
    fae8:	20002d78 	.word	0x20002d78
    faec:	0000d6a5 	.word	0x0000d6a5
    faf0:	0000f2f5 	.word	0x0000f2f5
    faf4:	20003047 	.word	0x20003047
    faf8:	20003046 	.word	0x20003046
    fafc:	0000c4a5 	.word	0x0000c4a5
    fb00:	0000c47d 	.word	0x0000c47d
    fb04:	0000c511 	.word	0x0000c511
    fb08:	096ae380 	.word	0x096ae380
    fb0c:	cc9eec80 	.word	0xcc9eec80
    fb10:	e78fe580 	.word	0xe78fe580
    fb14:	06dac2c0 	.word	0x06dac2c0
    fb18:	fffffeff 	.word	0xfffffeff

0000fb1c <MacClearCommands>:
    fb1c:	490e      	ldr	r1, [pc, #56]	; (fb58 <MacClearCommands+0x3c>)
    fb1e:	b570      	push	{r4, r5, r6, lr}
    fb20:	000b      	movs	r3, r1
    fb22:	33e0      	adds	r3, #224	; 0xe0
    fb24:	7818      	ldrb	r0, [r3, #0]
    fb26:	2303      	movs	r3, #3
    fb28:	25a4      	movs	r5, #164	; 0xa4
    fb2a:	4343      	muls	r3, r0
    fb2c:	2401      	movs	r4, #1
    fb2e:	20ff      	movs	r0, #255	; 0xff
    fb30:	3399      	adds	r3, #153	; 0x99
    fb32:	4a0a      	ldr	r2, [pc, #40]	; (fb5c <MacClearCommands+0x40>)
    fb34:	185b      	adds	r3, r3, r1
    fb36:	00ed      	lsls	r5, r5, #3
    fb38:	429a      	cmp	r2, r3
    fb3a:	d100      	bne.n	fb3e <MacClearCommands+0x22>
    fb3c:	bd70      	pop	{r4, r5, r6, pc}
    fb3e:	7811      	ldrb	r1, [r2, #0]
    fb40:	29ff      	cmp	r1, #255	; 0xff
    fb42:	d006      	beq.n	fb52 <MacClearCommands+0x36>
    fb44:	290a      	cmp	r1, #10
    fb46:	d803      	bhi.n	fb50 <MacClearCommands+0x34>
    fb48:	0026      	movs	r6, r4
    fb4a:	408e      	lsls	r6, r1
    fb4c:	422e      	tst	r6, r5
    fb4e:	d100      	bne.n	fb52 <MacClearCommands+0x36>
    fb50:	7010      	strb	r0, [r2, #0]
    fb52:	3203      	adds	r2, #3
    fb54:	e7f0      	b.n	fb38 <MacClearCommands+0x1c>
    fb56:	46c0      	nop			; (mov r8, r8)
    fb58:	20003170 	.word	0x20003170
    fb5c:	20003209 	.word	0x20003209

0000fb60 <CountfOptsLength>:
    fb60:	2200      	movs	r2, #0
    fb62:	490d      	ldr	r1, [pc, #52]	; (fb98 <CountfOptsLength+0x38>)
    fb64:	b570      	push	{r4, r5, r6, lr}
    fb66:	000b      	movs	r3, r1
    fb68:	0010      	movs	r0, r2
    fb6a:	2503      	movs	r5, #3
    fb6c:	33e0      	adds	r3, #224	; 0xe0
    fb6e:	781c      	ldrb	r4, [r3, #0]
    fb70:	4e0a      	ldr	r6, [pc, #40]	; (fb9c <CountfOptsLength+0x3c>)
    fb72:	b2d3      	uxtb	r3, r2
    fb74:	429c      	cmp	r4, r3
    fb76:	d800      	bhi.n	fb7a <CountfOptsLength+0x1a>
    fb78:	bd70      	pop	{r4, r5, r6, pc}
    fb7a:	002b      	movs	r3, r5
    fb7c:	4353      	muls	r3, r2
    fb7e:	3399      	adds	r3, #153	; 0x99
    fb80:	5ccb      	ldrb	r3, [r1, r3]
    fb82:	2bff      	cmp	r3, #255	; 0xff
    fb84:	d006      	beq.n	fb94 <CountfOptsLength+0x34>
    fb86:	18f3      	adds	r3, r6, r3
    fb88:	3b02      	subs	r3, #2
    fb8a:	781b      	ldrb	r3, [r3, #0]
    fb8c:	18c3      	adds	r3, r0, r3
    fb8e:	2b0f      	cmp	r3, #15
    fb90:	dcf2      	bgt.n	fb78 <CountfOptsLength+0x18>
    fb92:	b2d8      	uxtb	r0, r3
    fb94:	3201      	adds	r2, #1
    fb96:	e7ec      	b.n	fb72 <CountfOptsLength+0x12>
    fb98:	20003170 	.word	0x20003170
    fb9c:	00018b4f 	.word	0x00018b4f

0000fba0 <LorawanGetMaxPayloadSize>:
    fba0:	b513      	push	{r0, r1, r4, lr}
    fba2:	466b      	mov	r3, sp
    fba4:	1ddc      	adds	r4, r3, #7
    fba6:	2300      	movs	r3, #0
    fba8:	0022      	movs	r2, r4
    fbaa:	7023      	strb	r3, [r4, #0]
    fbac:	4903      	ldr	r1, [pc, #12]	; (fbbc <LorawanGetMaxPayloadSize+0x1c>)
    fbae:	4b04      	ldr	r3, [pc, #16]	; (fbc0 <LorawanGetMaxPayloadSize+0x20>)
    fbb0:	2005      	movs	r0, #5
    fbb2:	4798      	blx	r3
    fbb4:	7820      	ldrb	r0, [r4, #0]
    fbb6:	3808      	subs	r0, #8
    fbb8:	b2c0      	uxtb	r0, r0
    fbba:	bd16      	pop	{r1, r2, r4, pc}
    fbbc:	20003257 	.word	0x20003257
    fbc0:	0000cb21 	.word	0x0000cb21

0000fbc4 <UpdateReceiveDelays>:
    fbc4:	23fa      	movs	r3, #250	; 0xfa
    fbc6:	b570      	push	{r4, r5, r6, lr}
    fbc8:	009b      	lsls	r3, r3, #2
    fbca:	4c0b      	ldr	r4, [pc, #44]	; (fbf8 <UpdateReceiveDelays+0x34>)
    fbcc:	2800      	cmp	r0, #0
    fbce:	d000      	beq.n	fbd2 <UpdateReceiveDelays+0xe>
    fbd0:	4343      	muls	r3, r0
    fbd2:	0022      	movs	r2, r4
    fbd4:	4d09      	ldr	r5, [pc, #36]	; (fbfc <UpdateReceiveDelays+0x38>)
    fbd6:	32d0      	adds	r2, #208	; 0xd0
    fbd8:	210c      	movs	r1, #12
    fbda:	2000      	movs	r0, #0
    fbdc:	8013      	strh	r3, [r2, #0]
    fbde:	47a8      	blx	r5
    fbe0:	0023      	movs	r3, r4
    fbe2:	22fa      	movs	r2, #250	; 0xfa
    fbe4:	33d0      	adds	r3, #208	; 0xd0
    fbe6:	881b      	ldrh	r3, [r3, #0]
    fbe8:	0092      	lsls	r2, r2, #2
    fbea:	189b      	adds	r3, r3, r2
    fbec:	34d2      	adds	r4, #210	; 0xd2
    fbee:	210d      	movs	r1, #13
    fbf0:	2000      	movs	r0, #0
    fbf2:	8023      	strh	r3, [r4, #0]
    fbf4:	47a8      	blx	r5
    fbf6:	bd70      	pop	{r4, r5, r6, pc}
    fbf8:	20003170 	.word	0x20003170
    fbfc:	000092e9 	.word	0x000092e9

0000fc00 <IncludeMacCommandsResponse>:
    fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc02:	0005      	movs	r5, r0
    fc04:	2600      	movs	r6, #0
    fc06:	b087      	sub	sp, #28
    fc08:	880c      	ldrh	r4, [r1, #0]
    fc0a:	9101      	str	r1, [sp, #4]
    fc0c:	9203      	str	r2, [sp, #12]
    fc0e:	4f77      	ldr	r7, [pc, #476]	; (fdec <IncludeMacCommandsResponse+0x1ec>)
    fc10:	003b      	movs	r3, r7
    fc12:	33e0      	adds	r3, #224	; 0xe0
    fc14:	781b      	ldrb	r3, [r3, #0]
    fc16:	42b3      	cmp	r3, r6
    fc18:	d913      	bls.n	fc42 <IncludeMacCommandsResponse+0x42>
    fc1a:	9b03      	ldr	r3, [sp, #12]
    fc1c:	2b00      	cmp	r3, #0
    fc1e:	d019      	beq.n	fc54 <IncludeMacCommandsResponse+0x54>
    fc20:	2303      	movs	r3, #3
    fc22:	4373      	muls	r3, r6
    fc24:	18fb      	adds	r3, r7, r3
    fc26:	3399      	adds	r3, #153	; 0x99
    fc28:	7819      	ldrb	r1, [r3, #0]
    fc2a:	29ff      	cmp	r1, #255	; 0xff
    fc2c:	d012      	beq.n	fc54 <IncludeMacCommandsResponse+0x54>
    fc2e:	9b01      	ldr	r3, [sp, #4]
    fc30:	881a      	ldrh	r2, [r3, #0]
    fc32:	4b6f      	ldr	r3, [pc, #444]	; (fdf0 <IncludeMacCommandsResponse+0x1f0>)
    fc34:	1aa2      	subs	r2, r4, r2
    fc36:	185b      	adds	r3, r3, r1
    fc38:	3b02      	subs	r3, #2
    fc3a:	781b      	ldrb	r3, [r3, #0]
    fc3c:	18d3      	adds	r3, r2, r3
    fc3e:	2b0f      	cmp	r3, #15
    fc40:	dd08      	ble.n	fc54 <IncludeMacCommandsResponse+0x54>
    fc42:	2207      	movs	r2, #7
    fc44:	2100      	movs	r1, #0
    fc46:	4b6b      	ldr	r3, [pc, #428]	; (fdf4 <IncludeMacCommandsResponse+0x1f4>)
    fc48:	486b      	ldr	r0, [pc, #428]	; (fdf8 <IncludeMacCommandsResponse+0x1f8>)
    fc4a:	4798      	blx	r3
    fc4c:	9b01      	ldr	r3, [sp, #4]
    fc4e:	801c      	strh	r4, [r3, #0]
    fc50:	b007      	add	sp, #28
    fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc54:	2303      	movs	r3, #3
    fc56:	4373      	muls	r3, r6
    fc58:	18fb      	adds	r3, r7, r3
    fc5a:	3399      	adds	r3, #153	; 0x99
    fc5c:	781b      	ldrb	r3, [r3, #0]
    fc5e:	1e98      	subs	r0, r3, #2
    fc60:	280b      	cmp	r0, #11
    fc62:	d862      	bhi.n	fd2a <IncludeMacCommandsResponse+0x12a>
    fc64:	f003 fc42 	bl	134ec <__gnu_thumb1_case_uqi>
    fc68:	27a20698 	.word	0x27a20698
    fc6c:	7da26748 	.word	0x7da26748
    fc70:	a6616182 	.word	0xa6616182
    fc74:	2303      	movs	r3, #3
    fc76:	2200      	movs	r2, #0
    fc78:	552b      	strb	r3, [r5, r4]
    fc7a:	1c63      	adds	r3, r4, #1
    fc7c:	b29b      	uxth	r3, r3
    fc7e:	18eb      	adds	r3, r5, r3
    fc80:	4f5a      	ldr	r7, [pc, #360]	; (fdec <IncludeMacCommandsResponse+0x1ec>)
    fc82:	485e      	ldr	r0, [pc, #376]	; (fdfc <IncludeMacCommandsResponse+0x1fc>)
    fc84:	701a      	strb	r2, [r3, #0]
    fc86:	5c39      	ldrb	r1, [r7, r0]
    fc88:	3201      	adds	r2, #1
    fc8a:	4011      	ands	r1, r2
    fc8c:	466a      	mov	r2, sp
    fc8e:	9102      	str	r1, [sp, #8]
    fc90:	7a12      	ldrb	r2, [r2, #8]
    fc92:	701a      	strb	r2, [r3, #0]
    fc94:	5c3a      	ldrb	r2, [r7, r0]
    fc96:	4694      	mov	ip, r2
    fc98:	2202      	movs	r2, #2
    fc9a:	4661      	mov	r1, ip
    fc9c:	4211      	tst	r1, r2
    fc9e:	d002      	beq.n	fca6 <IncludeMacCommandsResponse+0xa6>
    fca0:	9902      	ldr	r1, [sp, #8]
    fca2:	430a      	orrs	r2, r1
    fca4:	701a      	strb	r2, [r3, #0]
    fca6:	2204      	movs	r2, #4
    fca8:	5c39      	ldrb	r1, [r7, r0]
    fcaa:	4211      	tst	r1, r2
    fcac:	d071      	beq.n	fd92 <IncludeMacCommandsResponse+0x192>
    fcae:	7819      	ldrb	r1, [r3, #0]
    fcb0:	430a      	orrs	r2, r1
    fcb2:	701a      	strb	r2, [r3, #0]
    fcb4:	e06d      	b.n	fd92 <IncludeMacCommandsResponse+0x192>
    fcb6:	2305      	movs	r3, #5
    fcb8:	2103      	movs	r1, #3
    fcba:	2200      	movs	r2, #0
    fcbc:	552b      	strb	r3, [r5, r4]
    fcbe:	1c63      	adds	r3, r4, #1
    fcc0:	b29b      	uxth	r3, r3
    fcc2:	4371      	muls	r1, r6
    fcc4:	18eb      	adds	r3, r5, r3
    fcc6:	701a      	strb	r2, [r3, #0]
    fcc8:	4a48      	ldr	r2, [pc, #288]	; (fdec <IncludeMacCommandsResponse+0x1ec>)
    fcca:	1851      	adds	r1, r2, r1
    fccc:	3198      	adds	r1, #152	; 0x98
    fcce:	7888      	ldrb	r0, [r1, #2]
    fcd0:	0700      	lsls	r0, r0, #28
    fcd2:	0fc0      	lsrs	r0, r0, #31
    fcd4:	7018      	strb	r0, [r3, #0]
    fcd6:	7889      	ldrb	r1, [r1, #2]
    fcd8:	b2c7      	uxtb	r7, r0
    fcda:	06c9      	lsls	r1, r1, #27
    fcdc:	d502      	bpl.n	fce4 <IncludeMacCommandsResponse+0xe4>
    fcde:	2102      	movs	r1, #2
    fce0:	4339      	orrs	r1, r7
    fce2:	7019      	strb	r1, [r3, #0]
    fce4:	2103      	movs	r1, #3
    fce6:	4371      	muls	r1, r6
    fce8:	1852      	adds	r2, r2, r1
    fcea:	3298      	adds	r2, #152	; 0x98
    fcec:	7892      	ldrb	r2, [r2, #2]
    fcee:	0692      	lsls	r2, r2, #26
    fcf0:	d54f      	bpl.n	fd92 <IncludeMacCommandsResponse+0x192>
    fcf2:	7819      	ldrb	r1, [r3, #0]
    fcf4:	2204      	movs	r2, #4
    fcf6:	e7db      	b.n	fcb0 <IncludeMacCommandsResponse+0xb0>
    fcf8:	a904      	add	r1, sp, #16
    fcfa:	4b41      	ldr	r3, [pc, #260]	; (fe00 <IncludeMacCommandsResponse+0x200>)
    fcfc:	200e      	movs	r0, #14
    fcfe:	4798      	blx	r3
    fd00:	2306      	movs	r3, #6
    fd02:	4a3a      	ldr	r2, [pc, #232]	; (fdec <IncludeMacCommandsResponse+0x1ec>)
    fd04:	552b      	strb	r3, [r5, r4]
    fd06:	32e8      	adds	r2, #232	; 0xe8
    fd08:	7811      	ldrb	r1, [r2, #0]
    fd0a:	1c62      	adds	r2, r4, #1
    fd0c:	b292      	uxth	r2, r2
    fd0e:	54a9      	strb	r1, [r5, r2]
    fd10:	aa04      	add	r2, sp, #16
    fd12:	7812      	ldrb	r2, [r2, #0]
    fd14:	1ca3      	adds	r3, r4, #2
    fd16:	0011      	movs	r1, r2
    fd18:	3120      	adds	r1, #32
    fd1a:	3403      	adds	r4, #3
    fd1c:	b2c9      	uxtb	r1, r1
    fd1e:	b29b      	uxth	r3, r3
    fd20:	b2a4      	uxth	r4, r4
    fd22:	293f      	cmp	r1, #63	; 0x3f
    fd24:	d904      	bls.n	fd30 <IncludeMacCommandsResponse+0x130>
    fd26:	2220      	movs	r2, #32
    fd28:	54ea      	strb	r2, [r5, r3]
    fd2a:	3601      	adds	r6, #1
    fd2c:	b2f6      	uxtb	r6, r6
    fd2e:	e76e      	b.n	fc0e <IncludeMacCommandsResponse+0xe>
    fd30:	213f      	movs	r1, #63	; 0x3f
    fd32:	400a      	ands	r2, r1
    fd34:	e7f8      	b.n	fd28 <IncludeMacCommandsResponse+0x128>
    fd36:	2307      	movs	r3, #7
    fd38:	2103      	movs	r1, #3
    fd3a:	2200      	movs	r2, #0
    fd3c:	552b      	strb	r3, [r5, r4]
    fd3e:	1c63      	adds	r3, r4, #1
    fd40:	4371      	muls	r1, r6
    fd42:	b29b      	uxth	r3, r3
    fd44:	18eb      	adds	r3, r5, r3
    fd46:	701a      	strb	r2, [r3, #0]
    fd48:	4a28      	ldr	r2, [pc, #160]	; (fdec <IncludeMacCommandsResponse+0x1ec>)
    fd4a:	1852      	adds	r2, r2, r1
    fd4c:	3298      	adds	r2, #152	; 0x98
    fd4e:	7891      	ldrb	r1, [r2, #2]
    fd50:	09c9      	lsrs	r1, r1, #7
    fd52:	7019      	strb	r1, [r3, #0]
    fd54:	7892      	ldrb	r2, [r2, #2]
    fd56:	b2c8      	uxtb	r0, r1
    fd58:	0652      	lsls	r2, r2, #25
    fd5a:	d51a      	bpl.n	fd92 <IncludeMacCommandsResponse+0x192>
    fd5c:	2202      	movs	r2, #2
    fd5e:	4302      	orrs	r2, r0
    fd60:	e7a7      	b.n	fcb2 <IncludeMacCommandsResponse+0xb2>
    fd62:	2209      	movs	r2, #9
    fd64:	1c63      	adds	r3, r4, #1
    fd66:	552a      	strb	r2, [r5, r4]
    fd68:	b29c      	uxth	r4, r3
    fd6a:	e7de      	b.n	fd2a <IncludeMacCommandsResponse+0x12a>
    fd6c:	230a      	movs	r3, #10
    fd6e:	2103      	movs	r1, #3
    fd70:	2200      	movs	r2, #0
    fd72:	552b      	strb	r3, [r5, r4]
    fd74:	1c63      	adds	r3, r4, #1
    fd76:	4371      	muls	r1, r6
    fd78:	b29b      	uxth	r3, r3
    fd7a:	18eb      	adds	r3, r5, r3
    fd7c:	701a      	strb	r2, [r3, #0]
    fd7e:	4a1b      	ldr	r2, [pc, #108]	; (fdec <IncludeMacCommandsResponse+0x1ec>)
    fd80:	1852      	adds	r2, r2, r1
    fd82:	3298      	adds	r2, #152	; 0x98
    fd84:	7891      	ldrb	r1, [r2, #2]
    fd86:	09c9      	lsrs	r1, r1, #7
    fd88:	7019      	strb	r1, [r3, #0]
    fd8a:	78d2      	ldrb	r2, [r2, #3]
    fd8c:	b2c8      	uxtb	r0, r1
    fd8e:	07d2      	lsls	r2, r2, #31
    fd90:	d4e4      	bmi.n	fd5c <IncludeMacCommandsResponse+0x15c>
    fd92:	3402      	adds	r4, #2
    fd94:	b2a4      	uxth	r4, r4
    fd96:	e7c8      	b.n	fd2a <IncludeMacCommandsResponse+0x12a>
    fd98:	003b      	movs	r3, r7
    fd9a:	22ff      	movs	r2, #255	; 0xff
    fd9c:	33e5      	adds	r3, #229	; 0xe5
    fd9e:	701a      	strb	r2, [r3, #0]
    fda0:	2300      	movs	r3, #0
    fda2:	37e6      	adds	r7, #230	; 0xe6
    fda4:	703b      	strb	r3, [r7, #0]
    fda6:	3afd      	subs	r2, #253	; 0xfd
    fda8:	1c63      	adds	r3, r4, #1
    fdaa:	e7dc      	b.n	fd66 <IncludeMacCommandsResponse+0x166>
    fdac:	1c62      	adds	r2, r4, #1
    fdae:	552b      	strb	r3, [r5, r4]
    fdb0:	b294      	uxth	r4, r2
    fdb2:	e7ba      	b.n	fd2a <IncludeMacCommandsResponse+0x12a>
    fdb4:	2201      	movs	r2, #1
    fdb6:	4252      	negs	r2, r2
    fdb8:	17d3      	asrs	r3, r2, #31
    fdba:	9204      	str	r2, [sp, #16]
    fdbc:	9305      	str	r3, [sp, #20]
    fdbe:	4b11      	ldr	r3, [pc, #68]	; (fe04 <IncludeMacCommandsResponse+0x204>)
    fdc0:	a904      	add	r1, sp, #16
    fdc2:	5cf8      	ldrb	r0, [r7, r3]
    fdc4:	4b10      	ldr	r3, [pc, #64]	; (fe08 <IncludeMacCommandsResponse+0x208>)
    fdc6:	4798      	blx	r3
    fdc8:	2301      	movs	r3, #1
    fdca:	228d      	movs	r2, #141	; 0x8d
    fdcc:	425b      	negs	r3, r3
    fdce:	0092      	lsls	r2, r2, #2
    fdd0:	50bb      	str	r3, [r7, r2]
    fdd2:	3204      	adds	r2, #4
    fdd4:	54bb      	strb	r3, [r7, r2]
    fdd6:	238c      	movs	r3, #140	; 0x8c
    fdd8:	2201      	movs	r2, #1
    fdda:	009b      	lsls	r3, r3, #2
    fddc:	54fa      	strb	r2, [r7, r3]
    fdde:	2303      	movs	r3, #3
    fde0:	4373      	muls	r3, r6
    fde2:	18ff      	adds	r7, r7, r3
    fde4:	3799      	adds	r7, #153	; 0x99
    fde6:	18a2      	adds	r2, r4, r2
    fde8:	783b      	ldrb	r3, [r7, #0]
    fdea:	e7e0      	b.n	fdae <IncludeMacCommandsResponse+0x1ae>
    fdec:	20003170 	.word	0x20003170
    fdf0:	00018b4f 	.word	0x00018b4f
    fdf4:	0001679d 	.word	0x0001679d
    fdf8:	20003393 	.word	0x20003393
    fdfc:	00000223 	.word	0x00000223
    fe00:	0000e209 	.word	0x0000e209
    fe04:	00000231 	.word	0x00000231
    fe08:	0000d5f1 	.word	0x0000d5f1

0000fe0c <UpdateJoinSuccessState>:
    fe0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe0e:	4c32      	ldr	r4, [pc, #200]	; (fed8 <UpdateJoinSuccessState+0xcc>)
    fe10:	2104      	movs	r1, #4
    fe12:	0022      	movs	r2, r4
    fe14:	3294      	adds	r2, #148	; 0x94
    fe16:	7813      	ldrb	r3, [r2, #0]
    fe18:	2001      	movs	r0, #1
    fe1a:	438b      	bics	r3, r1
    fe1c:	7013      	strb	r3, [r2, #0]
    fe1e:	0022      	movs	r2, r4
    fe20:	3284      	adds	r2, #132	; 0x84
    fe22:	7813      	ldrb	r3, [r2, #0]
    fe24:	b087      	sub	sp, #28
    fe26:	4303      	orrs	r3, r0
    fe28:	3107      	adds	r1, #7
    fe2a:	4f2c      	ldr	r7, [pc, #176]	; (fedc <UpdateJoinSuccessState+0xd0>)
    fe2c:	7013      	strb	r3, [r2, #0]
    fe2e:	2500      	movs	r5, #0
    fe30:	47b8      	blx	r7
    fe32:	0023      	movs	r3, r4
    fe34:	2115      	movs	r1, #21
    fe36:	3388      	adds	r3, #136	; 0x88
    fe38:	0028      	movs	r0, r5
    fe3a:	601d      	str	r5, [r3, #0]
    fe3c:	47b8      	blx	r7
    fe3e:	0023      	movs	r3, r4
    fe40:	2020      	movs	r0, #32
    fe42:	33ff      	adds	r3, #255	; 0xff
    fe44:	7f5b      	ldrb	r3, [r3, #29]
    fe46:	4e26      	ldr	r6, [pc, #152]	; (fee0 <UpdateJoinSuccessState+0xd4>)
    fe48:	4203      	tst	r3, r0
    fe4a:	d00c      	beq.n	fe66 <UpdateJoinSuccessState+0x5a>
    fe4c:	0023      	movs	r3, r4
    fe4e:	a904      	add	r1, sp, #16
    fe50:	3380      	adds	r3, #128	; 0x80
    fe52:	710d      	strb	r5, [r1, #4]
    fe54:	701d      	strb	r5, [r3, #0]
    fe56:	6765      	str	r5, [r4, #116]	; 0x74
    fe58:	67a5      	str	r5, [r4, #120]	; 0x78
    fe5a:	47b0      	blx	r6
    fe5c:	210f      	movs	r1, #15
    fe5e:	2021      	movs	r0, #33	; 0x21
    fe60:	4469      	add	r1, sp
    fe62:	700d      	strb	r5, [r1, #0]
    fe64:	47b0      	blx	r6
    fe66:	0023      	movs	r3, r4
    fe68:	2500      	movs	r5, #0
    fe6a:	338c      	adds	r3, #140	; 0x8c
    fe6c:	210a      	movs	r1, #10
    fe6e:	2001      	movs	r0, #1
    fe70:	601d      	str	r5, [r3, #0]
    fe72:	47b8      	blx	r7
    fe74:	0023      	movs	r3, r4
    fe76:	33ca      	adds	r3, #202	; 0xca
    fe78:	801d      	strh	r5, [r3, #0]
    fe7a:	0022      	movs	r2, r4
    fe7c:	0023      	movs	r3, r4
    fe7e:	210e      	movs	r1, #14
    fe80:	3284      	adds	r2, #132	; 0x84
    fe82:	33f6      	adds	r3, #246	; 0xf6
    fe84:	701d      	strb	r5, [r3, #0]
    fe86:	7813      	ldrb	r3, [r2, #0]
    fe88:	2039      	movs	r0, #57	; 0x39
    fe8a:	438b      	bics	r3, r1
    fe8c:	0029      	movs	r1, r5
    fe8e:	7013      	strb	r3, [r2, #0]
    fe90:	47b0      	blx	r6
    fe92:	0023      	movs	r3, r4
    fe94:	3385      	adds	r3, #133	; 0x85
    fe96:	781b      	ldrb	r3, [r3, #0]
    fe98:	079b      	lsls	r3, r3, #30
    fe9a:	d50c      	bpl.n	feb6 <UpdateJoinSuccessState+0xaa>
    fe9c:	0023      	movs	r3, r4
    fe9e:	21fa      	movs	r1, #250	; 0xfa
    fea0:	3390      	adds	r3, #144	; 0x90
    fea2:	681b      	ldr	r3, [r3, #0]
    fea4:	34f0      	adds	r4, #240	; 0xf0
    fea6:	0089      	lsls	r1, r1, #2
    fea8:	7820      	ldrb	r0, [r4, #0]
    feaa:	4359      	muls	r1, r3
    feac:	9500      	str	r5, [sp, #0]
    feae:	4b0d      	ldr	r3, [pc, #52]	; (fee4 <UpdateJoinSuccessState+0xd8>)
    feb0:	002a      	movs	r2, r5
    feb2:	4c0d      	ldr	r4, [pc, #52]	; (fee8 <UpdateJoinSuccessState+0xdc>)
    feb4:	47a0      	blx	r4
    feb6:	490d      	ldr	r1, [pc, #52]	; (feec <UpdateJoinSuccessState+0xe0>)
    feb8:	794a      	ldrb	r2, [r1, #5]
    feba:	790b      	ldrb	r3, [r1, #4]
    febc:	0212      	lsls	r2, r2, #8
    febe:	431a      	orrs	r2, r3
    fec0:	798b      	ldrb	r3, [r1, #6]
    fec2:	041b      	lsls	r3, r3, #16
    fec4:	431a      	orrs	r2, r3
    fec6:	79cb      	ldrb	r3, [r1, #7]
    fec8:	061b      	lsls	r3, r3, #24
    feca:	4313      	orrs	r3, r2
    fecc:	d001      	beq.n	fed2 <UpdateJoinSuccessState+0xc6>
    fece:	2008      	movs	r0, #8
    fed0:	4798      	blx	r3
    fed2:	b007      	add	sp, #28
    fed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fed6:	46c0      	nop			; (mov r8, r8)
    fed8:	20003170 	.word	0x20003170
    fedc:	000092e9 	.word	0x000092e9
    fee0:	0000cb59 	.word	0x0000cb59
    fee4:	0001002d 	.word	0x0001002d
    fee8:	0000d069 	.word	0x0000d069
    feec:	200034cc 	.word	0x200034cc

0000fef0 <PrepareSessionKeys>:
    fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fef2:	0004      	movs	r4, r0
    fef4:	2603      	movs	r6, #3
    fef6:	000d      	movs	r5, r1
    fef8:	0017      	movs	r7, r2
    fefa:	4b09      	ldr	r3, [pc, #36]	; (ff20 <PrepareSessionKeys+0x30>)
    fefc:	2210      	movs	r2, #16
    fefe:	2100      	movs	r1, #0
    ff00:	4798      	blx	r3
    ff02:	0032      	movs	r2, r6
    ff04:	0029      	movs	r1, r5
    ff06:	1c60      	adds	r0, r4, #1
    ff08:	4d06      	ldr	r5, [pc, #24]	; (ff24 <PrepareSessionKeys+0x34>)
    ff0a:	47a8      	blx	r5
    ff0c:	0032      	movs	r2, r6
    ff0e:	0039      	movs	r1, r7
    ff10:	1d20      	adds	r0, r4, #4
    ff12:	47a8      	blx	r5
    ff14:	1de0      	adds	r0, r4, #7
    ff16:	2202      	movs	r2, #2
    ff18:	4903      	ldr	r1, [pc, #12]	; (ff28 <PrepareSessionKeys+0x38>)
    ff1a:	47a8      	blx	r5
    ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff1e:	46c0      	nop			; (mov r8, r8)
    ff20:	0001679d 	.word	0x0001679d
    ff24:	0001678b 	.word	0x0001678b
    ff28:	2000323c 	.word	0x2000323c

0000ff2c <AssembleEncryptionBlock>:
    ff2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ff2e:	001e      	movs	r6, r3
    ff30:	4c0b      	ldr	r4, [pc, #44]	; (ff60 <AssembleEncryptionBlock+0x34>)
    ff32:	0017      	movs	r7, r2
    ff34:	4b0b      	ldr	r3, [pc, #44]	; (ff64 <AssembleEncryptionBlock+0x38>)
    ff36:	0005      	movs	r5, r0
    ff38:	9101      	str	r1, [sp, #4]
    ff3a:	2210      	movs	r2, #16
    ff3c:	2100      	movs	r1, #0
    ff3e:	0020      	movs	r0, r4
    ff40:	4798      	blx	r3
    ff42:	7026      	strb	r6, [r4, #0]
    ff44:	2604      	movs	r6, #4
    ff46:	7165      	strb	r5, [r4, #5]
    ff48:	0032      	movs	r2, r6
    ff4a:	4d07      	ldr	r5, [pc, #28]	; (ff68 <AssembleEncryptionBlock+0x3c>)
    ff4c:	a908      	add	r1, sp, #32
    ff4e:	1da0      	adds	r0, r4, #6
    ff50:	47a8      	blx	r5
    ff52:	0020      	movs	r0, r4
    ff54:	0032      	movs	r2, r6
    ff56:	a901      	add	r1, sp, #4
    ff58:	300a      	adds	r0, #10
    ff5a:	47a8      	blx	r5
    ff5c:	73e7      	strb	r7, [r4, #15]
    ff5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ff60:	20001eb5 	.word	0x20001eb5
    ff64:	0001679d 	.word	0x0001679d
    ff68:	0001678b 	.word	0x0001678b

0000ff6c <ConfigureRadio>:
    ff6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ff6e:	0001      	movs	r1, r0
    ff70:	0005      	movs	r5, r0
    ff72:	4c11      	ldr	r4, [pc, #68]	; (ffb8 <ConfigureRadio+0x4c>)
    ff74:	3109      	adds	r1, #9
    ff76:	2009      	movs	r0, #9
    ff78:	47a0      	blx	r4
    ff7a:	0029      	movs	r1, r5
    ff7c:	2001      	movs	r0, #1
    ff7e:	47a0      	blx	r4
    ff80:	1d29      	adds	r1, r5, #4
    ff82:	200a      	movs	r0, #10
    ff84:	47a0      	blx	r4
    ff86:	7a6b      	ldrb	r3, [r5, #9]
    ff88:	2b01      	cmp	r3, #1
    ff8a:	d10b      	bne.n	ffa4 <ConfigureRadio+0x38>
    ff8c:	0029      	movs	r1, r5
    ff8e:	2016      	movs	r0, #22
    ff90:	310b      	adds	r1, #11
    ff92:	47a0      	blx	r4
    ff94:	0029      	movs	r1, r5
    ff96:	2007      	movs	r0, #7
    ff98:	310a      	adds	r1, #10
    ff9a:	47a0      	blx	r4
    ff9c:	2000      	movs	r0, #0
    ff9e:	4907      	ldr	r1, [pc, #28]	; (ffbc <ConfigureRadio+0x50>)
    ffa0:	47a0      	blx	r4
    ffa2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ffa4:	466b      	mov	r3, sp
    ffa6:	1dd9      	adds	r1, r3, #7
    ffa8:	2303      	movs	r3, #3
    ffaa:	2013      	movs	r0, #19
    ffac:	700b      	strb	r3, [r1, #0]
    ffae:	47a0      	blx	r4
    ffb0:	4903      	ldr	r1, [pc, #12]	; (ffc0 <ConfigureRadio+0x54>)
    ffb2:	2012      	movs	r0, #18
    ffb4:	e7f4      	b.n	ffa0 <ConfigureRadio+0x34>
    ffb6:	46c0      	nop			; (mov r8, r8)
    ffb8:	0000e2f9 	.word	0x0000e2f9
    ffbc:	20003270 	.word	0x20003270
    ffc0:	00018b40 	.word	0x00018b40

0000ffc4 <StopReceiveWindow2Timer>:
    ffc4:	b510      	push	{r4, lr}
    ffc6:	4c0b      	ldr	r4, [pc, #44]	; (fff4 <StopReceiveWindow2Timer+0x30>)
    ffc8:	0022      	movs	r2, r4
    ffca:	32fd      	adds	r2, #253	; 0xfd
    ffcc:	7812      	ldrb	r2, [r2, #0]
    ffce:	2a01      	cmp	r2, #1
    ffd0:	d10e      	bne.n	fff0 <StopReceiveWindow2Timer+0x2c>
    ffd2:	0021      	movs	r1, r4
    ffd4:	200e      	movs	r0, #14
    ffd6:	3184      	adds	r1, #132	; 0x84
    ffd8:	780a      	ldrb	r2, [r1, #0]
    ffda:	34ee      	adds	r4, #238	; 0xee
    ffdc:	4382      	bics	r2, r0
    ffde:	700a      	strb	r2, [r1, #0]
    ffe0:	7820      	ldrb	r0, [r4, #0]
    ffe2:	4b05      	ldr	r3, [pc, #20]	; (fff8 <StopReceiveWindow2Timer+0x34>)
    ffe4:	4798      	blx	r3
    ffe6:	2800      	cmp	r0, #0
    ffe8:	d002      	beq.n	fff0 <StopReceiveWindow2Timer+0x2c>
    ffea:	7820      	ldrb	r0, [r4, #0]
    ffec:	4b03      	ldr	r3, [pc, #12]	; (fffc <StopReceiveWindow2Timer+0x38>)
    ffee:	4798      	blx	r3
    fff0:	bd10      	pop	{r4, pc}
    fff2:	46c0      	nop			; (mov r8, r8)
    fff4:	20003170 	.word	0x20003170
    fff8:	0000d201 	.word	0x0000d201
    fffc:	0000d381 	.word	0x0000d381

00010000 <LorawanLinkCheckCallback.part.1>:
   10000:	4b07      	ldr	r3, [pc, #28]	; (10020 <LorawanLinkCheckCallback.part.1+0x20>)
   10002:	b513      	push	{r0, r1, r4, lr}
   10004:	001a      	movs	r2, r3
   10006:	21fa      	movs	r1, #250	; 0xfa
   10008:	3290      	adds	r2, #144	; 0x90
   1000a:	6812      	ldr	r2, [r2, #0]
   1000c:	0089      	lsls	r1, r1, #2
   1000e:	4351      	muls	r1, r2
   10010:	2200      	movs	r2, #0
   10012:	33f0      	adds	r3, #240	; 0xf0
   10014:	7818      	ldrb	r0, [r3, #0]
   10016:	4c03      	ldr	r4, [pc, #12]	; (10024 <LorawanLinkCheckCallback.part.1+0x24>)
   10018:	9200      	str	r2, [sp, #0]
   1001a:	4b03      	ldr	r3, [pc, #12]	; (10028 <LorawanLinkCheckCallback.part.1+0x28>)
   1001c:	47a0      	blx	r4
   1001e:	bd13      	pop	{r0, r1, r4, pc}
   10020:	20003170 	.word	0x20003170
   10024:	0000d069 	.word	0x0000d069
   10028:	0001002d 	.word	0x0001002d

0001002c <LorawanLinkCheckCallback>:
   1002c:	4b17      	ldr	r3, [pc, #92]	; (1008c <LorawanLinkCheckCallback+0x60>)
   1002e:	20a0      	movs	r0, #160	; 0xa0
   10030:	001a      	movs	r2, r3
   10032:	2180      	movs	r1, #128	; 0x80
   10034:	b510      	push	{r4, lr}
   10036:	3284      	adds	r2, #132	; 0x84
   10038:	8812      	ldrh	r2, [r2, #0]
   1003a:	0080      	lsls	r0, r0, #2
   1003c:	0089      	lsls	r1, r1, #2
   1003e:	4002      	ands	r2, r0
   10040:	428a      	cmp	r2, r1
   10042:	d11c      	bne.n	1007e <LorawanLinkCheckCallback+0x52>
   10044:	001a      	movs	r2, r3
   10046:	32e0      	adds	r2, #224	; 0xe0
   10048:	7810      	ldrb	r0, [r2, #0]
   1004a:	2403      	movs	r4, #3
   1004c:	2200      	movs	r2, #0
   1004e:	b2d1      	uxtb	r1, r2
   10050:	4281      	cmp	r1, r0
   10052:	d30d      	bcc.n	10070 <LorawanLinkCheckCallback+0x44>
   10054:	d113      	bne.n	1007e <LorawanLinkCheckCallback+0x52>
   10056:	2203      	movs	r2, #3
   10058:	434a      	muls	r2, r1
   1005a:	2102      	movs	r1, #2
   1005c:	189a      	adds	r2, r3, r2
   1005e:	3299      	adds	r2, #153	; 0x99
   10060:	7011      	strb	r1, [r2, #0]
   10062:	280f      	cmp	r0, #15
   10064:	d80b      	bhi.n	1007e <LorawanLinkCheckCallback+0x52>
   10066:	001a      	movs	r2, r3
   10068:	3001      	adds	r0, #1
   1006a:	32e0      	adds	r2, #224	; 0xe0
   1006c:	7010      	strb	r0, [r2, #0]
   1006e:	e006      	b.n	1007e <LorawanLinkCheckCallback+0x52>
   10070:	0021      	movs	r1, r4
   10072:	3201      	adds	r2, #1
   10074:	4351      	muls	r1, r2
   10076:	3196      	adds	r1, #150	; 0x96
   10078:	5c59      	ldrb	r1, [r3, r1]
   1007a:	2902      	cmp	r1, #2
   1007c:	d1e7      	bne.n	1004e <LorawanLinkCheckCallback+0x22>
   1007e:	3385      	adds	r3, #133	; 0x85
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	079b      	lsls	r3, r3, #30
   10084:	d501      	bpl.n	1008a <LorawanLinkCheckCallback+0x5e>
   10086:	4b02      	ldr	r3, [pc, #8]	; (10090 <LorawanLinkCheckCallback+0x64>)
   10088:	4798      	blx	r3
   1008a:	bd10      	pop	{r4, pc}
   1008c:	20003170 	.word	0x20003170
   10090:	00010001 	.word	0x00010001

00010094 <LORAWAN_Send>:
   10094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10096:	4c37      	ldr	r4, [pc, #220]	; (10174 <LORAWAN_Send+0xe0>)
   10098:	0006      	movs	r6, r0
   1009a:	0023      	movs	r3, r4
   1009c:	3384      	adds	r3, #132	; 0x84
   1009e:	781b      	ldrb	r3, [r3, #0]
   100a0:	250f      	movs	r5, #15
   100a2:	b25a      	sxtb	r2, r3
   100a4:	2a00      	cmp	r2, #0
   100a6:	db0b      	blt.n	100c0 <LORAWAN_Send+0x2c>
   100a8:	3d03      	subs	r5, #3
   100aa:	065a      	lsls	r2, r3, #25
   100ac:	d408      	bmi.n	100c0 <LORAWAN_Send+0x2c>
   100ae:	3d03      	subs	r5, #3
   100b0:	07db      	lsls	r3, r3, #31
   100b2:	d505      	bpl.n	100c0 <LORAWAN_Send+0x2c>
   100b4:	2388      	movs	r3, #136	; 0x88
   100b6:	009b      	lsls	r3, r3, #2
   100b8:	5ce7      	ldrb	r7, [r4, r3]
   100ba:	2f00      	cmp	r7, #0
   100bc:	d102      	bne.n	100c4 <LORAWAN_Send+0x30>
   100be:	2511      	movs	r5, #17
   100c0:	0028      	movs	r0, r5
   100c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   100c4:	2800      	cmp	r0, #0
   100c6:	d10f      	bne.n	100e8 <LORAWAN_Send+0x54>
   100c8:	2700      	movs	r7, #0
   100ca:	0023      	movs	r3, r4
   100cc:	3388      	adds	r3, #136	; 0x88
   100ce:	681b      	ldr	r3, [r3, #0]
   100d0:	3301      	adds	r3, #1
   100d2:	d123      	bne.n	1011c <LORAWAN_Send+0x88>
   100d4:	2001      	movs	r0, #1
   100d6:	3484      	adds	r4, #132	; 0x84
   100d8:	78a3      	ldrb	r3, [r4, #2]
   100da:	210b      	movs	r1, #11
   100dc:	4303      	orrs	r3, r0
   100de:	70a3      	strb	r3, [r4, #2]
   100e0:	4b25      	ldr	r3, [pc, #148]	; (10178 <LORAWAN_Send+0xe4>)
   100e2:	4798      	blx	r3
   100e4:	250d      	movs	r5, #13
   100e6:	e7eb      	b.n	100c0 <LORAWAN_Send+0x2c>
   100e8:	7843      	ldrb	r3, [r0, #1]
   100ea:	7a02      	ldrb	r2, [r0, #8]
   100ec:	3b01      	subs	r3, #1
   100ee:	b2db      	uxtb	r3, r3
   100f0:	9201      	str	r2, [sp, #4]
   100f2:	2bdf      	cmp	r3, #223	; 0xdf
   100f4:	d902      	bls.n	100fc <LORAWAN_Send+0x68>
   100f6:	250a      	movs	r5, #10
   100f8:	2a00      	cmp	r2, #0
   100fa:	d1e1      	bne.n	100c0 <LORAWAN_Send+0x2c>
   100fc:	4b1f      	ldr	r3, [pc, #124]	; (1017c <LORAWAN_Send+0xe8>)
   100fe:	4798      	blx	r3
   10100:	4684      	mov	ip, r0
   10102:	9b01      	ldr	r3, [sp, #4]
   10104:	9000      	str	r0, [sp, #0]
   10106:	4463      	add	r3, ip
   10108:	001d      	movs	r5, r3
   1010a:	4b1d      	ldr	r3, [pc, #116]	; (10180 <LORAWAN_Send+0xec>)
   1010c:	4798      	blx	r3
   1010e:	4285      	cmp	r5, r0
   10110:	ddda      	ble.n	100c8 <LORAWAN_Send+0x34>
   10112:	9b00      	ldr	r3, [sp, #0]
   10114:	250e      	movs	r5, #14
   10116:	2b00      	cmp	r3, #0
   10118:	d0d2      	beq.n	100c0 <LORAWAN_Send+0x2c>
   1011a:	e7d6      	b.n	100ca <LORAWAN_Send+0x36>
   1011c:	0023      	movs	r3, r4
   1011e:	33fd      	adds	r3, #253	; 0xfd
   10120:	781b      	ldrb	r3, [r3, #0]
   10122:	2b04      	cmp	r3, #4
   10124:	d01d      	beq.n	10162 <LORAWAN_Send+0xce>
   10126:	0023      	movs	r3, r4
   10128:	33fd      	adds	r3, #253	; 0xfd
   1012a:	781b      	ldrb	r3, [r3, #0]
   1012c:	2b01      	cmp	r3, #1
   1012e:	d105      	bne.n	1013c <LORAWAN_Send+0xa8>
   10130:	0023      	movs	r3, r4
   10132:	3384      	adds	r3, #132	; 0x84
   10134:	781a      	ldrb	r2, [r3, #0]
   10136:	230e      	movs	r3, #14
   10138:	421a      	tst	r2, r3
   1013a:	d1c0      	bne.n	100be <LORAWAN_Send+0x2a>
   1013c:	0023      	movs	r3, r4
   1013e:	33fc      	adds	r3, #252	; 0xfc
   10140:	2f00      	cmp	r7, #0
   10142:	d113      	bne.n	1016c <LORAWAN_Send+0xd8>
   10144:	2508      	movs	r5, #8
   10146:	60de      	str	r6, [r3, #12]
   10148:	2388      	movs	r3, #136	; 0x88
   1014a:	2200      	movs	r2, #0
   1014c:	009b      	lsls	r3, r3, #2
   1014e:	54e2      	strb	r2, [r4, r3]
   10150:	2001      	movs	r0, #1
   10152:	4b0c      	ldr	r3, [pc, #48]	; (10184 <LORAWAN_Send+0xf0>)
   10154:	4798      	blx	r3
   10156:	2320      	movs	r3, #32
   10158:	3494      	adds	r4, #148	; 0x94
   1015a:	7822      	ldrb	r2, [r4, #0]
   1015c:	4313      	orrs	r3, r2
   1015e:	7023      	strb	r3, [r4, #0]
   10160:	e7ae      	b.n	100c0 <LORAWAN_Send+0x2c>
   10162:	4b09      	ldr	r3, [pc, #36]	; (10188 <LORAWAN_Send+0xf4>)
   10164:	4798      	blx	r3
   10166:	2808      	cmp	r0, #8
   10168:	d1a9      	bne.n	100be <LORAWAN_Send+0x2a>
   1016a:	e7dc      	b.n	10126 <LORAWAN_Send+0x92>
   1016c:	2200      	movs	r2, #0
   1016e:	2511      	movs	r5, #17
   10170:	60da      	str	r2, [r3, #12]
   10172:	e7e9      	b.n	10148 <LORAWAN_Send+0xb4>
   10174:	20003170 	.word	0x20003170
   10178:	000092e9 	.word	0x000092e9
   1017c:	0000fb61 	.word	0x0000fb61
   10180:	0000fba1 	.word	0x0000fba1
   10184:	0000e185 	.word	0x0000e185
   10188:	00012cd1 	.word	0x00012cd1

0001018c <AutomaticReplyCallback>:
   1018c:	b510      	push	{r4, lr}
   1018e:	4c0d      	ldr	r4, [pc, #52]	; (101c4 <AutomaticReplyCallback+0x38>)
   10190:	0023      	movs	r3, r4
   10192:	33fd      	adds	r3, #253	; 0xfd
   10194:	781b      	ldrb	r3, [r3, #0]
   10196:	2b01      	cmp	r3, #1
   10198:	d10e      	bne.n	101b8 <AutomaticReplyCallback+0x2c>
   1019a:	0022      	movs	r2, r4
   1019c:	210e      	movs	r1, #14
   1019e:	3284      	adds	r2, #132	; 0x84
   101a0:	7813      	ldrb	r3, [r2, #0]
   101a2:	438b      	bics	r3, r1
   101a4:	7013      	strb	r3, [r2, #0]
   101a6:	4b08      	ldr	r3, [pc, #32]	; (101c8 <AutomaticReplyCallback+0x3c>)
   101a8:	2000      	movs	r0, #0
   101aa:	4798      	blx	r3
   101ac:	2208      	movs	r2, #8
   101ae:	3494      	adds	r4, #148	; 0x94
   101b0:	7823      	ldrb	r3, [r4, #0]
   101b2:	4393      	bics	r3, r2
   101b4:	7023      	strb	r3, [r4, #0]
   101b6:	bd10      	pop	{r4, pc}
   101b8:	2b04      	cmp	r3, #4
   101ba:	d1f4      	bne.n	101a6 <AutomaticReplyCallback+0x1a>
   101bc:	4b03      	ldr	r3, [pc, #12]	; (101cc <AutomaticReplyCallback+0x40>)
   101be:	4798      	blx	r3
   101c0:	e7f1      	b.n	101a6 <AutomaticReplyCallback+0x1a>
   101c2:	46c0      	nop			; (mov r8, r8)
   101c4:	20003170 	.word	0x20003170
   101c8:	00010095 	.word	0x00010095
   101cc:	0000ec0d 	.word	0x0000ec0d

000101d0 <LorawanLinkCheckConfigure>:
   101d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101d2:	23fa      	movs	r3, #250	; 0xfa
   101d4:	4c21      	ldr	r4, [pc, #132]	; (1025c <LorawanLinkCheckConfigure+0x8c>)
   101d6:	009b      	lsls	r3, r3, #2
   101d8:	0022      	movs	r2, r4
   101da:	0025      	movs	r5, r4
   101dc:	4343      	muls	r3, r0
   101de:	3290      	adds	r2, #144	; 0x90
   101e0:	0006      	movs	r6, r0
   101e2:	2102      	movs	r1, #2
   101e4:	2000      	movs	r0, #0
   101e6:	4f1e      	ldr	r7, [pc, #120]	; (10260 <LorawanLinkCheckConfigure+0x90>)
   101e8:	6013      	str	r3, [r2, #0]
   101ea:	3584      	adds	r5, #132	; 0x84
   101ec:	47b8      	blx	r7
   101ee:	2e00      	cmp	r6, #0
   101f0:	d127      	bne.n	10242 <LorawanLinkCheckConfigure+0x72>
   101f2:	0023      	movs	r3, r4
   101f4:	33f0      	adds	r3, #240	; 0xf0
   101f6:	7818      	ldrb	r0, [r3, #0]
   101f8:	4b1a      	ldr	r3, [pc, #104]	; (10264 <LorawanLinkCheckConfigure+0x94>)
   101fa:	4798      	blx	r3
   101fc:	2202      	movs	r2, #2
   101fe:	786b      	ldrb	r3, [r5, #1]
   10200:	210b      	movs	r1, #11
   10202:	4393      	bics	r3, r2
   10204:	706b      	strb	r3, [r5, #1]
   10206:	2001      	movs	r0, #1
   10208:	47b8      	blx	r7
   1020a:	0023      	movs	r3, r4
   1020c:	2701      	movs	r7, #1
   1020e:	33e0      	adds	r3, #224	; 0xe0
   10210:	781b      	ldrb	r3, [r3, #0]
   10212:	0030      	movs	r0, r6
   10214:	0032      	movs	r2, r6
   10216:	36ff      	adds	r6, #255	; 0xff
   10218:	429a      	cmp	r2, r3
   1021a:	d304      	bcc.n	10226 <LorawanLinkCheckConfigure+0x56>
   1021c:	2800      	cmp	r0, #0
   1021e:	d001      	beq.n	10224 <LorawanLinkCheckConfigure+0x54>
   10220:	34e0      	adds	r4, #224	; 0xe0
   10222:	7023      	strb	r3, [r4, #0]
   10224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10226:	2103      	movs	r1, #3
   10228:	4351      	muls	r1, r2
   1022a:	1861      	adds	r1, r4, r1
   1022c:	3199      	adds	r1, #153	; 0x99
   1022e:	780d      	ldrb	r5, [r1, #0]
   10230:	2d02      	cmp	r5, #2
   10232:	d103      	bne.n	1023c <LorawanLinkCheckConfigure+0x6c>
   10234:	0038      	movs	r0, r7
   10236:	3b01      	subs	r3, #1
   10238:	700e      	strb	r6, [r1, #0]
   1023a:	b2db      	uxtb	r3, r3
   1023c:	3201      	adds	r2, #1
   1023e:	b2d2      	uxtb	r2, r2
   10240:	e7ea      	b.n	10218 <LorawanLinkCheckConfigure+0x48>
   10242:	2302      	movs	r3, #2
   10244:	786a      	ldrb	r2, [r5, #1]
   10246:	210b      	movs	r1, #11
   10248:	4313      	orrs	r3, r2
   1024a:	706b      	strb	r3, [r5, #1]
   1024c:	2001      	movs	r0, #1
   1024e:	47b8      	blx	r7
   10250:	782b      	ldrb	r3, [r5, #0]
   10252:	07db      	lsls	r3, r3, #31
   10254:	d5e6      	bpl.n	10224 <LorawanLinkCheckConfigure+0x54>
   10256:	4b04      	ldr	r3, [pc, #16]	; (10268 <LorawanLinkCheckConfigure+0x98>)
   10258:	4798      	blx	r3
   1025a:	e7e3      	b.n	10224 <LorawanLinkCheckConfigure+0x54>
   1025c:	20003170 	.word	0x20003170
   10260:	000092e9 	.word	0x000092e9
   10264:	0000d381 	.word	0x0000d381
   10268:	00010001 	.word	0x00010001

0001026c <EncodeDeviceTimeReq>:
   1026c:	4b08      	ldr	r3, [pc, #32]	; (10290 <EncodeDeviceTimeReq+0x24>)
   1026e:	b510      	push	{r4, lr}
   10270:	001c      	movs	r4, r3
   10272:	34e0      	adds	r4, #224	; 0xe0
   10274:	7822      	ldrb	r2, [r4, #0]
   10276:	2015      	movs	r0, #21
   10278:	2a0f      	cmp	r2, #15
   1027a:	d808      	bhi.n	1028e <EncodeDeviceTimeReq+0x22>
   1027c:	2103      	movs	r1, #3
   1027e:	4351      	muls	r1, r2
   10280:	185b      	adds	r3, r3, r1
   10282:	210d      	movs	r1, #13
   10284:	3399      	adds	r3, #153	; 0x99
   10286:	3201      	adds	r2, #1
   10288:	7019      	strb	r1, [r3, #0]
   1028a:	7022      	strb	r2, [r4, #0]
   1028c:	380d      	subs	r0, #13
   1028e:	bd10      	pop	{r4, pc}
   10290:	20003170 	.word	0x20003170

00010294 <EncodeLinkCheckReq>:
   10294:	4b08      	ldr	r3, [pc, #32]	; (102b8 <EncodeLinkCheckReq+0x24>)
   10296:	b510      	push	{r4, lr}
   10298:	001c      	movs	r4, r3
   1029a:	34e0      	adds	r4, #224	; 0xe0
   1029c:	7822      	ldrb	r2, [r4, #0]
   1029e:	2015      	movs	r0, #21
   102a0:	2a0f      	cmp	r2, #15
   102a2:	d808      	bhi.n	102b6 <EncodeLinkCheckReq+0x22>
   102a4:	2103      	movs	r1, #3
   102a6:	4351      	muls	r1, r2
   102a8:	185b      	adds	r3, r3, r1
   102aa:	2102      	movs	r1, #2
   102ac:	3399      	adds	r3, #153	; 0x99
   102ae:	3201      	adds	r2, #1
   102b0:	7019      	strb	r1, [r3, #0]
   102b2:	7022      	strb	r2, [r4, #0]
   102b4:	380d      	subs	r0, #13
   102b6:	bd10      	pop	{r4, pc}
   102b8:	20003170 	.word	0x20003170

000102bc <UpdateCurrentDataRate>:
   102bc:	b510      	push	{r4, lr}
   102be:	4b04      	ldr	r3, [pc, #16]	; (102d0 <UpdateCurrentDataRate+0x14>)
   102c0:	210c      	movs	r1, #12
   102c2:	33e7      	adds	r3, #231	; 0xe7
   102c4:	7018      	strb	r0, [r3, #0]
   102c6:	2001      	movs	r0, #1
   102c8:	4b02      	ldr	r3, [pc, #8]	; (102d4 <UpdateCurrentDataRate+0x18>)
   102ca:	4798      	blx	r3
   102cc:	bd10      	pop	{r4, pc}
   102ce:	46c0      	nop			; (mov r8, r8)
   102d0:	20003170 	.word	0x20003170
   102d4:	000092e9 	.word	0x000092e9

000102d8 <UpdateDLSettings>:
   102d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   102da:	466b      	mov	r3, sp
   102dc:	1dde      	adds	r6, r3, #7
   102de:	1d9c      	adds	r4, r3, #6
   102e0:	71d8      	strb	r0, [r3, #7]
   102e2:	7021      	strb	r1, [r4, #0]
   102e4:	2017      	movs	r0, #23
   102e6:	0031      	movs	r1, r6
   102e8:	4d0c      	ldr	r5, [pc, #48]	; (1031c <UpdateDLSettings+0x44>)
   102ea:	47a8      	blx	r5
   102ec:	2808      	cmp	r0, #8
   102ee:	d107      	bne.n	10300 <UpdateDLSettings+0x28>
   102f0:	4b0b      	ldr	r3, [pc, #44]	; (10320 <UpdateDLSettings+0x48>)
   102f2:	7832      	ldrb	r2, [r6, #0]
   102f4:	336e      	adds	r3, #110	; 0x6e
   102f6:	701a      	strb	r2, [r3, #0]
   102f8:	2100      	movs	r1, #0
   102fa:	3807      	subs	r0, #7
   102fc:	4b09      	ldr	r3, [pc, #36]	; (10324 <UpdateDLSettings+0x4c>)
   102fe:	4798      	blx	r3
   10300:	0021      	movs	r1, r4
   10302:	2018      	movs	r0, #24
   10304:	47a8      	blx	r5
   10306:	2808      	cmp	r0, #8
   10308:	d107      	bne.n	1031a <UpdateDLSettings+0x42>
   1030a:	2101      	movs	r1, #1
   1030c:	4b04      	ldr	r3, [pc, #16]	; (10320 <UpdateDLSettings+0x48>)
   1030e:	7822      	ldrb	r2, [r4, #0]
   10310:	33f7      	adds	r3, #247	; 0xf7
   10312:	701a      	strb	r2, [r3, #0]
   10314:	0008      	movs	r0, r1
   10316:	4b03      	ldr	r3, [pc, #12]	; (10324 <UpdateDLSettings+0x4c>)
   10318:	4798      	blx	r3
   1031a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1031c:	0000cb3d 	.word	0x0000cb3d
   10320:	20003170 	.word	0x20003170
   10324:	000092e9 	.word	0x000092e9

00010328 <UpdateTxPower>:
   10328:	b510      	push	{r4, lr}
   1032a:	4b04      	ldr	r3, [pc, #16]	; (1033c <UpdateTxPower+0x14>)
   1032c:	210a      	movs	r1, #10
   1032e:	33e9      	adds	r3, #233	; 0xe9
   10330:	7018      	strb	r0, [r3, #0]
   10332:	2000      	movs	r0, #0
   10334:	4b02      	ldr	r3, [pc, #8]	; (10340 <UpdateTxPower+0x18>)
   10336:	4798      	blx	r3
   10338:	bd10      	pop	{r4, pc}
   1033a:	46c0      	nop			; (mov r8, r8)
   1033c:	20003170 	.word	0x20003170
   10340:	000092e9 	.word	0x000092e9

00010344 <UpdateRetransmissionAckTimeoutState>:
   10344:	4b10      	ldr	r3, [pc, #64]	; (10388 <UpdateRetransmissionAckTimeoutState+0x44>)
   10346:	b513      	push	{r0, r1, r4, lr}
   10348:	001a      	movs	r2, r3
   1034a:	32fd      	adds	r2, #253	; 0xfd
   1034c:	7812      	ldrb	r2, [r2, #0]
   1034e:	2a01      	cmp	r2, #1
   10350:	d108      	bne.n	10364 <UpdateRetransmissionAckTimeoutState+0x20>
   10352:	0018      	movs	r0, r3
   10354:	210e      	movs	r1, #14
   10356:	3084      	adds	r0, #132	; 0x84
   10358:	7802      	ldrb	r2, [r0, #0]
   1035a:	438a      	bics	r2, r1
   1035c:	0011      	movs	r1, r2
   1035e:	220c      	movs	r2, #12
   10360:	430a      	orrs	r2, r1
   10362:	7002      	strb	r2, [r0, #0]
   10364:	001a      	movs	r2, r3
   10366:	32da      	adds	r2, #218	; 0xda
   10368:	8811      	ldrh	r1, [r2, #0]
   1036a:	4a08      	ldr	r2, [pc, #32]	; (1038c <UpdateRetransmissionAckTimeoutState+0x48>)
   1036c:	4c08      	ldr	r4, [pc, #32]	; (10390 <UpdateRetransmissionAckTimeoutState+0x4c>)
   1036e:	5c9a      	ldrb	r2, [r3, r2]
   10370:	33f1      	adds	r3, #241	; 0xf1
   10372:	1a8a      	subs	r2, r1, r2
   10374:	21fa      	movs	r1, #250	; 0xfa
   10376:	0089      	lsls	r1, r1, #2
   10378:	4351      	muls	r1, r2
   1037a:	2200      	movs	r2, #0
   1037c:	7818      	ldrb	r0, [r3, #0]
   1037e:	9200      	str	r2, [sp, #0]
   10380:	4b04      	ldr	r3, [pc, #16]	; (10394 <UpdateRetransmissionAckTimeoutState+0x50>)
   10382:	47a0      	blx	r4
   10384:	bd13      	pop	{r0, r1, r4, pc}
   10386:	46c0      	nop			; (mov r8, r8)
   10388:	20003170 	.word	0x20003170
   1038c:	0000022b 	.word	0x0000022b
   10390:	0000d069 	.word	0x0000d069
   10394:	000110d5 	.word	0x000110d5

00010398 <UpdateReceiveWindow2Parameters>:
   10398:	4b0f      	ldr	r3, [pc, #60]	; (103d8 <UpdateReceiveWindow2Parameters+0x40>)
   1039a:	b570      	push	{r4, r5, r6, lr}
   1039c:	001a      	movs	r2, r3
   1039e:	326e      	adds	r2, #110	; 0x6e
   103a0:	7011      	strb	r1, [r2, #0]
   103a2:	001a      	movs	r2, r3
   103a4:	0c04      	lsrs	r4, r0, #16
   103a6:	326a      	adds	r2, #106	; 0x6a
   103a8:	8010      	strh	r0, [r2, #0]
   103aa:	8054      	strh	r4, [r2, #2]
   103ac:	001a      	movs	r2, r3
   103ae:	25fd      	movs	r5, #253	; 0xfd
   103b0:	32fd      	adds	r2, #253	; 0xfd
   103b2:	7812      	ldrb	r2, [r2, #0]
   103b4:	3a02      	subs	r2, #2
   103b6:	422a      	tst	r2, r5
   103b8:	d109      	bne.n	103ce <UpdateReceiveWindow2Parameters+0x36>
   103ba:	001a      	movs	r2, r3
   103bc:	336f      	adds	r3, #111	; 0x6f
   103be:	3273      	adds	r2, #115	; 0x73
   103c0:	7011      	strb	r1, [r2, #0]
   103c2:	7018      	strb	r0, [r3, #0]
   103c4:	0a02      	lsrs	r2, r0, #8
   103c6:	0e00      	lsrs	r0, r0, #24
   103c8:	705a      	strb	r2, [r3, #1]
   103ca:	709c      	strb	r4, [r3, #2]
   103cc:	70d8      	strb	r0, [r3, #3]
   103ce:	2100      	movs	r1, #0
   103d0:	4b02      	ldr	r3, [pc, #8]	; (103dc <UpdateReceiveWindow2Parameters+0x44>)
   103d2:	2001      	movs	r0, #1
   103d4:	4798      	blx	r3
   103d6:	bd70      	pop	{r4, r5, r6, pc}
   103d8:	20003170 	.word	0x20003170
   103dc:	000092e9 	.word	0x000092e9

000103e0 <ResetParametersForConfirmedTransmission>:
   103e0:	4b0a      	ldr	r3, [pc, #40]	; (1040c <ResetParametersForConfirmedTransmission+0x2c>)
   103e2:	001a      	movs	r2, r3
   103e4:	32fd      	adds	r2, #253	; 0xfd
   103e6:	7812      	ldrb	r2, [r2, #0]
   103e8:	2a01      	cmp	r2, #1
   103ea:	d105      	bne.n	103f8 <ResetParametersForConfirmedTransmission+0x18>
   103ec:	0019      	movs	r1, r3
   103ee:	200e      	movs	r0, #14
   103f0:	3184      	adds	r1, #132	; 0x84
   103f2:	780a      	ldrb	r2, [r1, #0]
   103f4:	4382      	bics	r2, r0
   103f6:	700a      	strb	r2, [r1, #0]
   103f8:	001a      	movs	r2, r3
   103fa:	2100      	movs	r1, #0
   103fc:	3394      	adds	r3, #148	; 0x94
   103fe:	32e4      	adds	r2, #228	; 0xe4
   10400:	7011      	strb	r1, [r2, #0]
   10402:	781a      	ldrb	r2, [r3, #0]
   10404:	3101      	adds	r1, #1
   10406:	438a      	bics	r2, r1
   10408:	701a      	strb	r2, [r3, #0]
   1040a:	4770      	bx	lr
   1040c:	20003170 	.word	0x20003170

00010410 <ResetParametersForUnconfirmedTransmission>:
   10410:	4b07      	ldr	r3, [pc, #28]	; (10430 <ResetParametersForUnconfirmedTransmission+0x20>)
   10412:	001a      	movs	r2, r3
   10414:	32fd      	adds	r2, #253	; 0xfd
   10416:	7812      	ldrb	r2, [r2, #0]
   10418:	2a01      	cmp	r2, #1
   1041a:	d105      	bne.n	10428 <ResetParametersForUnconfirmedTransmission+0x18>
   1041c:	0019      	movs	r1, r3
   1041e:	200e      	movs	r0, #14
   10420:	3184      	adds	r1, #132	; 0x84
   10422:	780a      	ldrb	r2, [r1, #0]
   10424:	4382      	bics	r2, r0
   10426:	700a      	strb	r2, [r1, #0]
   10428:	2200      	movs	r2, #0
   1042a:	33e3      	adds	r3, #227	; 0xe3
   1042c:	701a      	strb	r2, [r3, #0]
   1042e:	4770      	bx	lr
   10430:	20003170 	.word	0x20003170

00010434 <SetJoinFailState>:
   10434:	b570      	push	{r4, r5, r6, lr}
   10436:	4c15      	ldr	r4, [pc, #84]	; (1048c <SetJoinFailState+0x58>)
   10438:	2604      	movs	r6, #4
   1043a:	0025      	movs	r5, r4
   1043c:	3594      	adds	r5, #148	; 0x94
   1043e:	782a      	ldrb	r2, [r5, #0]
   10440:	0021      	movs	r1, r4
   10442:	43b2      	bics	r2, r6
   10444:	702a      	strb	r2, [r5, #0]
   10446:	22f0      	movs	r2, #240	; 0xf0
   10448:	3184      	adds	r1, #132	; 0x84
   1044a:	780b      	ldrb	r3, [r1, #0]
   1044c:	4013      	ands	r3, r2
   1044e:	700b      	strb	r3, [r1, #0]
   10450:	0023      	movs	r3, r4
   10452:	33ff      	adds	r3, #255	; 0xff
   10454:	7f5b      	ldrb	r3, [r3, #29]
   10456:	069b      	lsls	r3, r3, #26
   10458:	d503      	bpl.n	10462 <SetJoinFailState+0x2e>
   1045a:	0023      	movs	r3, r4
   1045c:	2200      	movs	r2, #0
   1045e:	3380      	adds	r3, #128	; 0x80
   10460:	701a      	strb	r2, [r3, #0]
   10462:	490b      	ldr	r1, [pc, #44]	; (10490 <SetJoinFailState+0x5c>)
   10464:	794a      	ldrb	r2, [r1, #5]
   10466:	790b      	ldrb	r3, [r1, #4]
   10468:	0212      	lsls	r2, r2, #8
   1046a:	431a      	orrs	r2, r3
   1046c:	798b      	ldrb	r3, [r1, #6]
   1046e:	041b      	lsls	r3, r3, #16
   10470:	431a      	orrs	r2, r3
   10472:	79cb      	ldrb	r3, [r1, #7]
   10474:	061b      	lsls	r3, r3, #24
   10476:	4313      	orrs	r3, r2
   10478:	d000      	beq.n	1047c <SetJoinFailState+0x48>
   1047a:	4798      	blx	r3
   1047c:	2300      	movs	r3, #0
   1047e:	34f9      	adds	r4, #249	; 0xf9
   10480:	7023      	strb	r3, [r4, #0]
   10482:	210b      	movs	r1, #11
   10484:	4b03      	ldr	r3, [pc, #12]	; (10494 <SetJoinFailState+0x60>)
   10486:	2001      	movs	r0, #1
   10488:	4798      	blx	r3
   1048a:	bd70      	pop	{r4, r5, r6, pc}
   1048c:	20003170 	.word	0x20003170
   10490:	200034cc 	.word	0x200034cc
   10494:	000092e9 	.word	0x000092e9

00010498 <ExecuteRxParamSetupReq>:
   10498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1049a:	b085      	sub	sp, #20
   1049c:	7805      	ldrb	r5, [r0, #0]
   1049e:	0004      	movs	r4, r0
   104a0:	1c41      	adds	r1, r0, #1
   104a2:	2204      	movs	r2, #4
   104a4:	4b36      	ldr	r3, [pc, #216]	; (10580 <ExecuteRxParamSetupReq+0xe8>)
   104a6:	a803      	add	r0, sp, #12
   104a8:	4798      	blx	r3
   104aa:	2264      	movs	r2, #100	; 0x64
   104ac:	9b03      	ldr	r3, [sp, #12]
   104ae:	a903      	add	r1, sp, #12
   104b0:	021b      	lsls	r3, r3, #8
   104b2:	0a1b      	lsrs	r3, r3, #8
   104b4:	4353      	muls	r3, r2
   104b6:	9303      	str	r3, [sp, #12]
   104b8:	1d23      	adds	r3, r4, #4
   104ba:	9301      	str	r3, [sp, #4]
   104bc:	072b      	lsls	r3, r5, #28
   104be:	0f1b      	lsrs	r3, r3, #28
   104c0:	b2da      	uxtb	r2, r3
   104c2:	9200      	str	r2, [sp, #0]
   104c4:	aa02      	add	r2, sp, #8
   104c6:	1c96      	adds	r6, r2, #2
   104c8:	066d      	lsls	r5, r5, #25
   104ca:	7033      	strb	r3, [r6, #0]
   104cc:	1cd7      	adds	r7, r2, #3
   104ce:	0f6d      	lsrs	r5, r5, #29
   104d0:	2001      	movs	r0, #1
   104d2:	4b2c      	ldr	r3, [pc, #176]	; (10584 <ExecuteRxParamSetupReq+0xec>)
   104d4:	703d      	strb	r5, [r7, #0]
   104d6:	4798      	blx	r3
   104d8:	4c2b      	ldr	r4, [pc, #172]	; (10588 <ExecuteRxParamSetupReq+0xf0>)
   104da:	2808      	cmp	r0, #8
   104dc:	d109      	bne.n	104f2 <ExecuteRxParamSetupReq+0x5a>
   104de:	0023      	movs	r3, r4
   104e0:	33e0      	adds	r3, #224	; 0xe0
   104e2:	781a      	ldrb	r2, [r3, #0]
   104e4:	2303      	movs	r3, #3
   104e6:	4353      	muls	r3, r2
   104e8:	18e3      	adds	r3, r4, r3
   104ea:	3398      	adds	r3, #152	; 0x98
   104ec:	789a      	ldrb	r2, [r3, #2]
   104ee:	4310      	orrs	r0, r2
   104f0:	7098      	strb	r0, [r3, #2]
   104f2:	0031      	movs	r1, r6
   104f4:	200f      	movs	r0, #15
   104f6:	4e23      	ldr	r6, [pc, #140]	; (10584 <ExecuteRxParamSetupReq+0xec>)
   104f8:	47b0      	blx	r6
   104fa:	2808      	cmp	r0, #8
   104fc:	d10a      	bne.n	10514 <ExecuteRxParamSetupReq+0x7c>
   104fe:	0023      	movs	r3, r4
   10500:	33e0      	adds	r3, #224	; 0xe0
   10502:	781a      	ldrb	r2, [r3, #0]
   10504:	2303      	movs	r3, #3
   10506:	4353      	muls	r3, r2
   10508:	2210      	movs	r2, #16
   1050a:	18e3      	adds	r3, r4, r3
   1050c:	3398      	adds	r3, #152	; 0x98
   1050e:	7899      	ldrb	r1, [r3, #2]
   10510:	430a      	orrs	r2, r1
   10512:	709a      	strb	r2, [r3, #2]
   10514:	0039      	movs	r1, r7
   10516:	2018      	movs	r0, #24
   10518:	47b0      	blx	r6
   1051a:	2808      	cmp	r0, #8
   1051c:	d10a      	bne.n	10534 <ExecuteRxParamSetupReq+0x9c>
   1051e:	0023      	movs	r3, r4
   10520:	33e0      	adds	r3, #224	; 0xe0
   10522:	781a      	ldrb	r2, [r3, #0]
   10524:	2303      	movs	r3, #3
   10526:	4353      	muls	r3, r2
   10528:	2220      	movs	r2, #32
   1052a:	18e3      	adds	r3, r4, r3
   1052c:	3398      	adds	r3, #152	; 0x98
   1052e:	7899      	ldrb	r1, [r3, #2]
   10530:	430a      	orrs	r2, r1
   10532:	709a      	strb	r2, [r3, #2]
   10534:	0023      	movs	r3, r4
   10536:	33e0      	adds	r3, #224	; 0xe0
   10538:	781a      	ldrb	r2, [r3, #0]
   1053a:	2303      	movs	r3, #3
   1053c:	4353      	muls	r3, r2
   1053e:	18e3      	adds	r3, r4, r3
   10540:	3398      	adds	r3, #152	; 0x98
   10542:	789e      	ldrb	r6, [r3, #2]
   10544:	06f3      	lsls	r3, r6, #27
   10546:	d518      	bpl.n	1057a <ExecuteRxParamSetupReq+0xe2>
   10548:	0733      	lsls	r3, r6, #28
   1054a:	d516      	bpl.n	1057a <ExecuteRxParamSetupReq+0xe2>
   1054c:	06b6      	lsls	r6, r6, #26
   1054e:	0ff6      	lsrs	r6, r6, #31
   10550:	2e01      	cmp	r6, #1
   10552:	d112      	bne.n	1057a <ExecuteRxParamSetupReq+0xe2>
   10554:	0023      	movs	r3, r4
   10556:	33f7      	adds	r3, #247	; 0xf7
   10558:	701d      	strb	r5, [r3, #0]
   1055a:	0031      	movs	r1, r6
   1055c:	0030      	movs	r0, r6
   1055e:	4d0b      	ldr	r5, [pc, #44]	; (1058c <ExecuteRxParamSetupReq+0xf4>)
   10560:	47a8      	blx	r5
   10562:	9900      	ldr	r1, [sp, #0]
   10564:	9803      	ldr	r0, [sp, #12]
   10566:	4b0a      	ldr	r3, [pc, #40]	; (10590 <ExecuteRxParamSetupReq+0xf8>)
   10568:	4798      	blx	r3
   1056a:	2340      	movs	r3, #64	; 0x40
   1056c:	3484      	adds	r4, #132	; 0x84
   1056e:	7862      	ldrb	r2, [r4, #1]
   10570:	210b      	movs	r1, #11
   10572:	4313      	orrs	r3, r2
   10574:	7063      	strb	r3, [r4, #1]
   10576:	0030      	movs	r0, r6
   10578:	47a8      	blx	r5
   1057a:	9801      	ldr	r0, [sp, #4]
   1057c:	b005      	add	sp, #20
   1057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10580:	0001678b 	.word	0x0001678b
   10584:	0000cb3d 	.word	0x0000cb3d
   10588:	20003170 	.word	0x20003170
   1058c:	000092e9 	.word	0x000092e9
   10590:	00010399 	.word	0x00010399

00010594 <ExecuteDutyCycle>:
   10594:	b570      	push	{r4, r5, r6, lr}
   10596:	7803      	ldrb	r3, [r0, #0]
   10598:	1c46      	adds	r6, r0, #1
   1059a:	2b0f      	cmp	r3, #15
   1059c:	d80f      	bhi.n	105be <ExecuteDutyCycle+0x2a>
   1059e:	4c09      	ldr	r4, [pc, #36]	; (105c4 <ExecuteDutyCycle+0x30>)
   105a0:	210b      	movs	r1, #11
   105a2:	0022      	movs	r2, r4
   105a4:	2000      	movs	r0, #0
   105a6:	3298      	adds	r2, #152	; 0x98
   105a8:	4d07      	ldr	r5, [pc, #28]	; (105c8 <ExecuteDutyCycle+0x34>)
   105aa:	7013      	strb	r3, [r2, #0]
   105ac:	47a8      	blx	r5
   105ae:	2320      	movs	r3, #32
   105b0:	3484      	adds	r4, #132	; 0x84
   105b2:	7862      	ldrb	r2, [r4, #1]
   105b4:	210b      	movs	r1, #11
   105b6:	4313      	orrs	r3, r2
   105b8:	7063      	strb	r3, [r4, #1]
   105ba:	2001      	movs	r0, #1
   105bc:	47a8      	blx	r5
   105be:	0030      	movs	r0, r6
   105c0:	bd70      	pop	{r4, r5, r6, pc}
   105c2:	46c0      	nop			; (mov r8, r8)
   105c4:	20003170 	.word	0x20003170
   105c8:	000092e9 	.word	0x000092e9

000105cc <ExecuteDlChannel>:
   105cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ce:	b089      	sub	sp, #36	; 0x24
   105d0:	7805      	ldrb	r5, [r0, #0]
   105d2:	ab02      	add	r3, sp, #8
   105d4:	1c41      	adds	r1, r0, #1
   105d6:	0007      	movs	r7, r0
   105d8:	719d      	strb	r5, [r3, #6]
   105da:	1d9e      	adds	r6, r3, #6
   105dc:	2204      	movs	r2, #4
   105de:	4b23      	ldr	r3, [pc, #140]	; (1066c <ExecuteDlChannel+0xa0>)
   105e0:	a805      	add	r0, sp, #20
   105e2:	4798      	blx	r3
   105e4:	9b05      	ldr	r3, [sp, #20]
   105e6:	a904      	add	r1, sp, #16
   105e8:	021c      	lsls	r4, r3, #8
   105ea:	2364      	movs	r3, #100	; 0x64
   105ec:	0a24      	lsrs	r4, r4, #8
   105ee:	435c      	muls	r4, r3
   105f0:	1d3b      	adds	r3, r7, #4
   105f2:	9301      	str	r3, [sp, #4]
   105f4:	2301      	movs	r3, #1
   105f6:	2015      	movs	r0, #21
   105f8:	704b      	strb	r3, [r1, #1]
   105fa:	4b1d      	ldr	r3, [pc, #116]	; (10670 <ExecuteDlChannel+0xa4>)
   105fc:	9405      	str	r4, [sp, #20]
   105fe:	700d      	strb	r5, [r1, #0]
   10600:	4798      	blx	r3
   10602:	2808      	cmp	r0, #8
   10604:	d12f      	bne.n	10666 <ExecuteDlChannel+0x9a>
   10606:	ab02      	add	r3, sp, #8
   10608:	1ddd      	adds	r5, r3, #7
   1060a:	2300      	movs	r3, #0
   1060c:	702b      	strb	r3, [r5, #0]
   1060e:	7833      	ldrb	r3, [r6, #0]
   10610:	af06      	add	r7, sp, #24
   10612:	713b      	strb	r3, [r7, #4]
   10614:	002a      	movs	r2, r5
   10616:	0031      	movs	r1, r6
   10618:	300e      	adds	r0, #14
   1061a:	4b16      	ldr	r3, [pc, #88]	; (10674 <ExecuteDlChannel+0xa8>)
   1061c:	9406      	str	r4, [sp, #24]
   1061e:	4798      	blx	r3
   10620:	280a      	cmp	r0, #10
   10622:	d00d      	beq.n	10640 <ExecuteDlChannel+0x74>
   10624:	782a      	ldrb	r2, [r5, #0]
   10626:	2a01      	cmp	r2, #1
   10628:	d10a      	bne.n	10640 <ExecuteDlChannel+0x74>
   1062a:	4b13      	ldr	r3, [pc, #76]	; (10678 <ExecuteDlChannel+0xac>)
   1062c:	0019      	movs	r1, r3
   1062e:	31e0      	adds	r1, #224	; 0xe0
   10630:	7808      	ldrb	r0, [r1, #0]
   10632:	2103      	movs	r1, #3
   10634:	4341      	muls	r1, r0
   10636:	185b      	adds	r3, r3, r1
   10638:	3398      	adds	r3, #152	; 0x98
   1063a:	78d9      	ldrb	r1, [r3, #3]
   1063c:	430a      	orrs	r2, r1
   1063e:	70da      	strb	r2, [r3, #3]
   10640:	0039      	movs	r1, r7
   10642:	2033      	movs	r0, #51	; 0x33
   10644:	4b0d      	ldr	r3, [pc, #52]	; (1067c <ExecuteDlChannel+0xb0>)
   10646:	4798      	blx	r3
   10648:	2808      	cmp	r0, #8
   1064a:	d10c      	bne.n	10666 <ExecuteDlChannel+0x9a>
   1064c:	4b0a      	ldr	r3, [pc, #40]	; (10678 <ExecuteDlChannel+0xac>)
   1064e:	001a      	movs	r2, r3
   10650:	32e0      	adds	r2, #224	; 0xe0
   10652:	7811      	ldrb	r1, [r2, #0]
   10654:	2203      	movs	r2, #3
   10656:	434a      	muls	r2, r1
   10658:	189b      	adds	r3, r3, r2
   1065a:	2280      	movs	r2, #128	; 0x80
   1065c:	3398      	adds	r3, #152	; 0x98
   1065e:	7899      	ldrb	r1, [r3, #2]
   10660:	4252      	negs	r2, r2
   10662:	430a      	orrs	r2, r1
   10664:	709a      	strb	r2, [r3, #2]
   10666:	9801      	ldr	r0, [sp, #4]
   10668:	b009      	add	sp, #36	; 0x24
   1066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1066c:	0001678b 	.word	0x0001678b
   10670:	0000cb3d 	.word	0x0000cb3d
   10674:	0000cb21 	.word	0x0000cb21
   10678:	20003170 	.word	0x20003170
   1067c:	0000cb59 	.word	0x0000cb59

00010680 <ExecuteTxParamSetup>:
   10680:	220f      	movs	r2, #15
   10682:	b513      	push	{r0, r1, r4, lr}
   10684:	7803      	ldrb	r3, [r0, #0]
   10686:	4c0f      	ldr	r4, [pc, #60]	; (106c4 <ExecuteTxParamSetup+0x44>)
   10688:	401a      	ands	r2, r3
   1068a:	5ca2      	ldrb	r2, [r4, r2]
   1068c:	2401      	movs	r4, #1
   1068e:	a901      	add	r1, sp, #4
   10690:	700a      	strb	r2, [r1, #0]
   10692:	111a      	asrs	r2, r3, #4
   10694:	115b      	asrs	r3, r3, #5
   10696:	4023      	ands	r3, r4
   10698:	40a3      	lsls	r3, r4
   1069a:	4022      	ands	r2, r4
   1069c:	4313      	orrs	r3, r2
   1069e:	704b      	strb	r3, [r1, #1]
   106a0:	1904      	adds	r4, r0, r4
   106a2:	4b09      	ldr	r3, [pc, #36]	; (106c8 <ExecuteTxParamSetup+0x48>)
   106a4:	2034      	movs	r0, #52	; 0x34
   106a6:	4798      	blx	r3
   106a8:	2808      	cmp	r0, #8
   106aa:	d009      	beq.n	106c0 <ExecuteTxParamSetup+0x40>
   106ac:	4b07      	ldr	r3, [pc, #28]	; (106cc <ExecuteTxParamSetup+0x4c>)
   106ae:	001a      	movs	r2, r3
   106b0:	32e0      	adds	r2, #224	; 0xe0
   106b2:	7811      	ldrb	r1, [r2, #0]
   106b4:	2203      	movs	r2, #3
   106b6:	434a      	muls	r2, r1
   106b8:	189b      	adds	r3, r3, r2
   106ba:	22ff      	movs	r2, #255	; 0xff
   106bc:	3399      	adds	r3, #153	; 0x99
   106be:	701a      	strb	r2, [r3, #0]
   106c0:	0020      	movs	r0, r4
   106c2:	bd16      	pop	{r1, r2, r4, pc}
   106c4:	00018b61 	.word	0x00018b61
   106c8:	0000cb59 	.word	0x0000cb59
   106cc:	20003170 	.word	0x20003170

000106d0 <ExecuteLinkAdr>:
   106d0:	220f      	movs	r2, #15
   106d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   106d4:	0006      	movs	r6, r0
   106d6:	7803      	ldrb	r3, [r0, #0]
   106d8:	b089      	sub	sp, #36	; 0x24
   106da:	401a      	ands	r2, r3
   106dc:	a905      	add	r1, sp, #20
   106de:	700a      	strb	r2, [r1, #0]
   106e0:	aa04      	add	r2, sp, #16
   106e2:	1d97      	adds	r7, r2, #6
   106e4:	091b      	lsrs	r3, r3, #4
   106e6:	7153      	strb	r3, [r2, #5]
   106e8:	1c41      	adds	r1, r0, #1
   106ea:	2202      	movs	r2, #2
   106ec:	0038      	movs	r0, r7
   106ee:	4b3d      	ldr	r3, [pc, #244]	; (107e4 <ExecuteLinkAdr+0x114>)
   106f0:	4798      	blx	r3
   106f2:	2201      	movs	r2, #1
   106f4:	1d33      	adds	r3, r6, #4
   106f6:	9303      	str	r3, [sp, #12]
   106f8:	78f3      	ldrb	r3, [r6, #3]
   106fa:	4c3b      	ldr	r4, [pc, #236]	; (107e8 <ExecuteLinkAdr+0x118>)
   106fc:	4d3b      	ldr	r5, [pc, #236]	; (107ec <ExecuteLinkAdr+0x11c>)
   106fe:	065b      	lsls	r3, r3, #25
   10700:	0f5b      	lsrs	r3, r3, #29
   10702:	9300      	str	r3, [sp, #0]
   10704:	5d63      	ldrb	r3, [r4, r5]
   10706:	a906      	add	r1, sp, #24
   10708:	4393      	bics	r3, r2
   1070a:	1892      	adds	r2, r2, r2
   1070c:	4393      	bics	r3, r2
   1070e:	3202      	adds	r2, #2
   10710:	4393      	bics	r3, r2
   10712:	5563      	strb	r3, [r4, r5]
   10714:	883b      	ldrh	r3, [r7, #0]
   10716:	2037      	movs	r0, #55	; 0x37
   10718:	9302      	str	r3, [sp, #8]
   1071a:	466b      	mov	r3, sp
   1071c:	891b      	ldrh	r3, [r3, #8]
   1071e:	4f34      	ldr	r7, [pc, #208]	; (107f0 <ExecuteLinkAdr+0x120>)
   10720:	804b      	strh	r3, [r1, #2]
   10722:	466b      	mov	r3, sp
   10724:	781b      	ldrb	r3, [r3, #0]
   10726:	700b      	strb	r3, [r1, #0]
   10728:	47b8      	blx	r7
   1072a:	2808      	cmp	r0, #8
   1072c:	d117      	bne.n	1075e <ExecuteLinkAdr+0x8e>
   1072e:	466b      	mov	r3, sp
   10730:	891b      	ldrh	r3, [r3, #8]
   10732:	a907      	add	r1, sp, #28
   10734:	800b      	strh	r3, [r1, #0]
   10736:	466b      	mov	r3, sp
   10738:	781b      	ldrb	r3, [r3, #0]
   1073a:	3014      	adds	r0, #20
   1073c:	708b      	strb	r3, [r1, #2]
   1073e:	4b2d      	ldr	r3, [pc, #180]	; (107f4 <ExecuteLinkAdr+0x124>)
   10740:	4798      	blx	r3
   10742:	2201      	movs	r2, #1
   10744:	5d63      	ldrb	r3, [r4, r5]
   10746:	2010      	movs	r0, #16
   10748:	4313      	orrs	r3, r2
   1074a:	5563      	strb	r3, [r4, r5]
   1074c:	ab04      	add	r3, sp, #16
   1074e:	1d59      	adds	r1, r3, #5
   10750:	47b8      	blx	r7
   10752:	2808      	cmp	r0, #8
   10754:	d103      	bne.n	1075e <ExecuteLinkAdr+0x8e>
   10756:	2202      	movs	r2, #2
   10758:	5d63      	ldrb	r3, [r4, r5]
   1075a:	4313      	orrs	r3, r2
   1075c:	5563      	strb	r3, [r4, r5]
   1075e:	af05      	add	r7, sp, #20
   10760:	4b23      	ldr	r3, [pc, #140]	; (107f0 <ExecuteLinkAdr+0x120>)
   10762:	0039      	movs	r1, r7
   10764:	201d      	movs	r0, #29
   10766:	4798      	blx	r3
   10768:	4b1f      	ldr	r3, [pc, #124]	; (107e8 <ExecuteLinkAdr+0x118>)
   1076a:	2808      	cmp	r0, #8
   1076c:	d103      	bne.n	10776 <ExecuteLinkAdr+0xa6>
   1076e:	2204      	movs	r2, #4
   10770:	5d59      	ldrb	r1, [r3, r5]
   10772:	430a      	orrs	r2, r1
   10774:	555a      	strb	r2, [r3, r5]
   10776:	5d5a      	ldrb	r2, [r3, r5]
   10778:	43d2      	mvns	r2, r2
   1077a:	0752      	lsls	r2, r2, #29
   1077c:	d12a      	bne.n	107d4 <ExecuteLinkAdr+0x104>
   1077e:	4669      	mov	r1, sp
   10780:	4a1d      	ldr	r2, [pc, #116]	; (107f8 <ExecuteLinkAdr+0x128>)
   10782:	7a09      	ldrb	r1, [r1, #8]
   10784:	5499      	strb	r1, [r3, r2]
   10786:	9a02      	ldr	r2, [sp, #8]
   10788:	491b      	ldr	r1, [pc, #108]	; (107f8 <ExecuteLinkAdr+0x128>)
   1078a:	0a12      	lsrs	r2, r2, #8
   1078c:	1859      	adds	r1, r3, r1
   1078e:	704a      	strb	r2, [r1, #1]
   10790:	aa04      	add	r2, sp, #16
   10792:	3205      	adds	r2, #5
   10794:	7812      	ldrb	r2, [r2, #0]
   10796:	2a0f      	cmp	r2, #15
   10798:	d101      	bne.n	1079e <ExecuteLinkAdr+0xce>
   1079a:	33e7      	adds	r3, #231	; 0xe7
   1079c:	781a      	ldrb	r2, [r3, #0]
   1079e:	2389      	movs	r3, #137	; 0x89
   107a0:	2170      	movs	r1, #112	; 0x70
   107a2:	2070      	movs	r0, #112	; 0x70
   107a4:	009b      	lsls	r3, r3, #2
   107a6:	54e2      	strb	r2, [r4, r3]
   107a8:	78f3      	ldrb	r3, [r6, #3]
   107aa:	4a14      	ldr	r2, [pc, #80]	; (107fc <ExecuteLinkAdr+0x12c>)
   107ac:	4019      	ands	r1, r3
   107ae:	5ca3      	ldrb	r3, [r4, r2]
   107b0:	4383      	bics	r3, r0
   107b2:	430b      	orrs	r3, r1
   107b4:	54a3      	strb	r3, [r4, r2]
   107b6:	78f1      	ldrb	r1, [r6, #3]
   107b8:	3861      	subs	r0, #97	; 0x61
   107ba:	b2db      	uxtb	r3, r3
   107bc:	4001      	ands	r1, r0
   107be:	4383      	bics	r3, r0
   107c0:	430b      	orrs	r3, r1
   107c2:	54a3      	strb	r3, [r4, r2]
   107c4:	783b      	ldrb	r3, [r7, #0]
   107c6:	4283      	cmp	r3, r0
   107c8:	d101      	bne.n	107ce <ExecuteLinkAdr+0xfe>
   107ca:	34e9      	adds	r4, #233	; 0xe9
   107cc:	7823      	ldrb	r3, [r4, #0]
   107ce:	4a0c      	ldr	r2, [pc, #48]	; (10800 <ExecuteLinkAdr+0x130>)
   107d0:	4905      	ldr	r1, [pc, #20]	; (107e8 <ExecuteLinkAdr+0x118>)
   107d2:	548b      	strb	r3, [r1, r2]
   107d4:	4904      	ldr	r1, [pc, #16]	; (107e8 <ExecuteLinkAdr+0x118>)
   107d6:	4a0b      	ldr	r2, [pc, #44]	; (10804 <ExecuteLinkAdr+0x134>)
   107d8:	9803      	ldr	r0, [sp, #12]
   107da:	5c8b      	ldrb	r3, [r1, r2]
   107dc:	3301      	adds	r3, #1
   107de:	548b      	strb	r3, [r1, r2]
   107e0:	b009      	add	sp, #36	; 0x24
   107e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107e4:	0001678b 	.word	0x0001678b
   107e8:	20003170 	.word	0x20003170
   107ec:	00000223 	.word	0x00000223
   107f0:	0000cb3d 	.word	0x0000cb3d
   107f4:	0000cb59 	.word	0x0000cb59
   107f8:	00000227 	.word	0x00000227
   107fc:	00000229 	.word	0x00000229
   10800:	00000225 	.word	0x00000225
   10804:	00000226 	.word	0x00000226

00010808 <ExecuteDevTimeAns>:
   10808:	b510      	push	{r4, lr}
   1080a:	0001      	movs	r1, r0
   1080c:	0004      	movs	r4, r0
   1080e:	2204      	movs	r2, #4
   10810:	4b04      	ldr	r3, [pc, #16]	; (10824 <ExecuteDevTimeAns+0x1c>)
   10812:	4805      	ldr	r0, [pc, #20]	; (10828 <ExecuteDevTimeAns+0x20>)
   10814:	4798      	blx	r3
   10816:	238e      	movs	r3, #142	; 0x8e
   10818:	7921      	ldrb	r1, [r4, #4]
   1081a:	4a04      	ldr	r2, [pc, #16]	; (1082c <ExecuteDevTimeAns+0x24>)
   1081c:	009b      	lsls	r3, r3, #2
   1081e:	1d60      	adds	r0, r4, #5
   10820:	54d1      	strb	r1, [r2, r3]
   10822:	bd10      	pop	{r4, pc}
   10824:	0001678b 	.word	0x0001678b
   10828:	200033a4 	.word	0x200033a4
   1082c:	20003170 	.word	0x20003170

00010830 <PrepareJoinRequestFrame>:
   10830:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10832:	2210      	movs	r2, #16
   10834:	4d22      	ldr	r5, [pc, #136]	; (108c0 <PrepareJoinRequestFrame+0x90>)
   10836:	4b23      	ldr	r3, [pc, #140]	; (108c4 <PrepareJoinRequestFrame+0x94>)
   10838:	32ff      	adds	r2, #255	; 0xff
   1083a:	2100      	movs	r1, #0
   1083c:	0028      	movs	r0, r5
   1083e:	4798      	blx	r3
   10840:	2300      	movs	r3, #0
   10842:	4c21      	ldr	r4, [pc, #132]	; (108c8 <PrepareJoinRequestFrame+0x98>)
   10844:	702b      	strb	r3, [r5, #0]
   10846:	4b21      	ldr	r3, [pc, #132]	; (108cc <PrepareJoinRequestFrame+0x9c>)
   10848:	5ce3      	ldrb	r3, [r4, r3]
   1084a:	2b00      	cmp	r3, #0
   1084c:	d006      	beq.n	1085c <PrepareJoinRequestFrame+0x2c>
   1084e:	4920      	ldr	r1, [pc, #128]	; (108d0 <PrepareJoinRequestFrame+0xa0>)
   10850:	2006      	movs	r0, #6
   10852:	4e20      	ldr	r6, [pc, #128]	; (108d4 <PrepareJoinRequestFrame+0xa4>)
   10854:	47b0      	blx	r6
   10856:	4920      	ldr	r1, [pc, #128]	; (108d8 <PrepareJoinRequestFrame+0xa8>)
   10858:	2007      	movs	r0, #7
   1085a:	47b0      	blx	r6
   1085c:	2300      	movs	r3, #0
   1085e:	205c      	movs	r0, #92	; 0x5c
   10860:	1ac1      	subs	r1, r0, r3
   10862:	5c61      	ldrb	r1, [r4, r1]
   10864:	18ea      	adds	r2, r5, r3
   10866:	3301      	adds	r3, #1
   10868:	7051      	strb	r1, [r2, #1]
   1086a:	2b08      	cmp	r3, #8
   1086c:	d1f8      	bne.n	10860 <PrepareJoinRequestFrame+0x30>
   1086e:	2300      	movs	r3, #0
   10870:	2064      	movs	r0, #100	; 0x64
   10872:	1ac1      	subs	r1, r0, r3
   10874:	5c61      	ldrb	r1, [r4, r1]
   10876:	18ea      	adds	r2, r5, r3
   10878:	3301      	adds	r3, #1
   1087a:	7251      	strb	r1, [r2, #9]
   1087c:	2b08      	cmp	r3, #8
   1087e:	d1f8      	bne.n	10872 <PrepareJoinRequestFrame+0x42>
   10880:	4b16      	ldr	r3, [pc, #88]	; (108dc <PrepareJoinRequestFrame+0xac>)
   10882:	4798      	blx	r3
   10884:	4b16      	ldr	r3, [pc, #88]	; (108e0 <PrepareJoinRequestFrame+0xb0>)
   10886:	4917      	ldr	r1, [pc, #92]	; (108e4 <PrepareJoinRequestFrame+0xb4>)
   10888:	4798      	blx	r3
   1088a:	34cc      	adds	r4, #204	; 0xcc
   1088c:	8021      	strh	r1, [r4, #0]
   1088e:	2202      	movs	r2, #2
   10890:	0021      	movs	r1, r4
   10892:	4815      	ldr	r0, [pc, #84]	; (108e8 <PrepareJoinRequestFrame+0xb8>)
   10894:	4c15      	ldr	r4, [pc, #84]	; (108ec <PrepareJoinRequestFrame+0xbc>)
   10896:	47a0      	blx	r4
   10898:	2313      	movs	r3, #19
   1089a:	4e15      	ldr	r6, [pc, #84]	; (108f0 <PrepareJoinRequestFrame+0xc0>)
   1089c:	9300      	str	r3, [sp, #0]
   1089e:	0032      	movs	r2, r6
   108a0:	002b      	movs	r3, r5
   108a2:	2100      	movs	r1, #0
   108a4:	4d13      	ldr	r5, [pc, #76]	; (108f4 <PrepareJoinRequestFrame+0xc4>)
   108a6:	4814      	ldr	r0, [pc, #80]	; (108f8 <PrepareJoinRequestFrame+0xc8>)
   108a8:	47a8      	blx	r5
   108aa:	0031      	movs	r1, r6
   108ac:	2204      	movs	r2, #4
   108ae:	a803      	add	r0, sp, #12
   108b0:	47a0      	blx	r4
   108b2:	2204      	movs	r2, #4
   108b4:	a903      	add	r1, sp, #12
   108b6:	4811      	ldr	r0, [pc, #68]	; (108fc <PrepareJoinRequestFrame+0xcc>)
   108b8:	47a0      	blx	r4
   108ba:	2017      	movs	r0, #23
   108bc:	b004      	add	sp, #16
   108be:	bd70      	pop	{r4, r5, r6, pc}
   108c0:	200033b8 	.word	0x200033b8
   108c4:	0001679d 	.word	0x0001679d
   108c8:	20003170 	.word	0x20003170
   108cc:	0000022d 	.word	0x0000022d
   108d0:	200031c5 	.word	0x200031c5
   108d4:	00007255 	.word	0x00007255
   108d8:	200031cd 	.word	0x200031cd
   108dc:	00016ed1 	.word	0x00016ed1
   108e0:	00013809 	.word	0x00013809
   108e4:	0000ffff 	.word	0x0000ffff
   108e8:	200033c9 	.word	0x200033c9
   108ec:	0001678b 	.word	0x0001678b
   108f0:	20001eb5 	.word	0x20001eb5
   108f4:	00007259 	.word	0x00007259
   108f8:	200031b5 	.word	0x200031b5
   108fc:	200033cb 	.word	0x200033cb

00010900 <ConfigureRadioRx>:
   10900:	b5f0      	push	{r4, r5, r6, r7, lr}
   10902:	b087      	sub	sp, #28
   10904:	466b      	mov	r3, sp
   10906:	2600      	movs	r6, #0
   10908:	1ddc      	adds	r4, r3, #7
   1090a:	71d8      	strb	r0, [r3, #7]
   1090c:	729e      	strb	r6, [r3, #10]
   1090e:	466a      	mov	r2, sp
   10910:	2301      	movs	r3, #1
   10912:	72d3      	strb	r3, [r2, #11]
   10914:	2215      	movs	r2, #21
   10916:	ad03      	add	r5, sp, #12
   10918:	4f11      	ldr	r7, [pc, #68]	; (10960 <ConfigureRadioRx+0x60>)
   1091a:	9100      	str	r1, [sp, #0]
   1091c:	446a      	add	r2, sp
   1091e:	0021      	movs	r1, r4
   10920:	2023      	movs	r0, #35	; 0x23
   10922:	80ae      	strh	r6, [r5, #4]
   10924:	47b8      	blx	r7
   10926:	2216      	movs	r2, #22
   10928:	0021      	movs	r1, r4
   1092a:	446a      	add	r2, sp
   1092c:	2024      	movs	r0, #36	; 0x24
   1092e:	47b8      	blx	r7
   10930:	2217      	movs	r2, #23
   10932:	0021      	movs	r1, r4
   10934:	446a      	add	r2, sp
   10936:	2025      	movs	r0, #37	; 0x25
   10938:	47b8      	blx	r7
   1093a:	9b00      	ldr	r3, [sp, #0]
   1093c:	0028      	movs	r0, r5
   1093e:	9303      	str	r3, [sp, #12]
   10940:	4b08      	ldr	r3, [pc, #32]	; (10964 <ConfigureRadioRx+0x64>)
   10942:	80ae      	strh	r6, [r5, #4]
   10944:	4798      	blx	r3
   10946:	230a      	movs	r3, #10
   10948:	446b      	add	r3, sp
   1094a:	0019      	movs	r1, r3
   1094c:	4c06      	ldr	r4, [pc, #24]	; (10968 <ConfigureRadioRx+0x68>)
   1094e:	2014      	movs	r0, #20
   10950:	47a0      	blx	r4
   10952:	230b      	movs	r3, #11
   10954:	446b      	add	r3, sp
   10956:	0019      	movs	r1, r3
   10958:	2006      	movs	r0, #6
   1095a:	47a0      	blx	r4
   1095c:	b007      	add	sp, #28
   1095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10960:	0000cb21 	.word	0x0000cb21
   10964:	0000ff6d 	.word	0x0000ff6d
   10968:	0000e2f9 	.word	0x0000e2f9

0001096c <ConfigureRadioTx>:
   1096c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1096e:	2517      	movs	r5, #23
   10970:	2300      	movs	r3, #0
   10972:	2616      	movs	r6, #22
   10974:	2701      	movs	r7, #1
   10976:	b087      	sub	sp, #28
   10978:	ac01      	add	r4, sp, #4
   1097a:	446d      	add	r5, sp
   1097c:	9001      	str	r0, [sp, #4]
   1097e:	702b      	strb	r3, [r5, #0]
   10980:	0020      	movs	r0, r4
   10982:	4b10      	ldr	r3, [pc, #64]	; (109c4 <ConfigureRadioTx+0x58>)
   10984:	446e      	add	r6, sp
   10986:	9102      	str	r1, [sp, #8]
   10988:	9203      	str	r2, [sp, #12]
   1098a:	7037      	strb	r7, [r6, #0]
   1098c:	4798      	blx	r3
   1098e:	79e3      	ldrb	r3, [r4, #7]
   10990:	4c0d      	ldr	r4, [pc, #52]	; (109c8 <ConfigureRadioTx+0x5c>)
   10992:	2b00      	cmp	r3, #0
   10994:	d00a      	beq.n	109ac <ConfigureRadioTx+0x40>
   10996:	4b0d      	ldr	r3, [pc, #52]	; (109cc <ConfigureRadioTx+0x60>)
   10998:	4a0d      	ldr	r2, [pc, #52]	; (109d0 <ConfigureRadioTx+0x64>)
   1099a:	490e      	ldr	r1, [pc, #56]	; (109d4 <ConfigureRadioTx+0x68>)
   1099c:	54d7      	strb	r7, [r2, r3]
   1099e:	200b      	movs	r0, #11
   109a0:	4b0d      	ldr	r3, [pc, #52]	; (109d8 <ConfigureRadioTx+0x6c>)
   109a2:	4798      	blx	r3
   109a4:	210a      	movs	r1, #10
   109a6:	200b      	movs	r0, #11
   109a8:	4469      	add	r1, sp
   109aa:	47a0      	blx	r4
   109ac:	a903      	add	r1, sp, #12
   109ae:	2004      	movs	r0, #4
   109b0:	47a0      	blx	r4
   109b2:	0031      	movs	r1, r6
   109b4:	2014      	movs	r0, #20
   109b6:	47a0      	blx	r4
   109b8:	0029      	movs	r1, r5
   109ba:	2006      	movs	r0, #6
   109bc:	47a0      	blx	r4
   109be:	b007      	add	sp, #28
   109c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109c2:	46c0      	nop			; (mov r8, r8)
   109c4:	0000ff6d 	.word	0x0000ff6d
   109c8:	0000e2f9 	.word	0x0000e2f9
   109cc:	00000222 	.word	0x00000222
   109d0:	20003170 	.word	0x20003170
   109d4:	20003391 	.word	0x20003391
   109d8:	0000e209 	.word	0x0000e209

000109dc <LorawanGetChAndInitiateRadioTransmit>:
   109dc:	2301      	movs	r3, #1
   109de:	b530      	push	{r4, r5, lr}
   109e0:	4c46      	ldr	r4, [pc, #280]	; (10afc <LorawanGetChAndInitiateRadioTransmit+0x120>)
   109e2:	b089      	sub	sp, #36	; 0x24
   109e4:	a902      	add	r1, sp, #8
   109e6:	700b      	strb	r3, [r1, #0]
   109e8:	0023      	movs	r3, r4
   109ea:	33e9      	adds	r3, #233	; 0xe9
   109ec:	781b      	ldrb	r3, [r3, #0]
   109ee:	704b      	strb	r3, [r1, #1]
   109f0:	0023      	movs	r3, r4
   109f2:	33e7      	adds	r3, #231	; 0xe7
   109f4:	781b      	ldrb	r3, [r3, #0]
   109f6:	708b      	strb	r3, [r1, #2]
   109f8:	0023      	movs	r3, r4
   109fa:	33fd      	adds	r3, #253	; 0xfd
   109fc:	781b      	ldrb	r3, [r3, #0]
   109fe:	2b01      	cmp	r3, #1
   10a00:	d108      	bne.n	10a14 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10a02:	0020      	movs	r0, r4
   10a04:	220e      	movs	r2, #14
   10a06:	3084      	adds	r0, #132	; 0x84
   10a08:	7803      	ldrb	r3, [r0, #0]
   10a0a:	4393      	bics	r3, r2
   10a0c:	001a      	movs	r2, r3
   10a0e:	230c      	movs	r3, #12
   10a10:	4313      	orrs	r3, r2
   10a12:	7003      	strb	r3, [r0, #0]
   10a14:	aa05      	add	r2, sp, #20
   10a16:	202e      	movs	r0, #46	; 0x2e
   10a18:	4d39      	ldr	r5, [pc, #228]	; (10b00 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10a1a:	47a8      	blx	r5
   10a1c:	0023      	movs	r3, r4
   10a1e:	2808      	cmp	r0, #8
   10a20:	d135      	bne.n	10a8e <LorawanGetChAndInitiateRadioTransmit+0xb2>
   10a22:	33fd      	adds	r3, #253	; 0xfd
   10a24:	781b      	ldrb	r3, [r3, #0]
   10a26:	ad03      	add	r5, sp, #12
   10a28:	2b04      	cmp	r3, #4
   10a2a:	d108      	bne.n	10a3e <LorawanGetChAndInitiateRadioTransmit+0x62>
   10a2c:	2390      	movs	r3, #144	; 0x90
   10a2e:	2200      	movs	r2, #0
   10a30:	009b      	lsls	r3, r3, #2
   10a32:	54e2      	strb	r2, [r4, r3]
   10a34:	2301      	movs	r3, #1
   10a36:	0028      	movs	r0, r5
   10a38:	702b      	strb	r3, [r5, #0]
   10a3a:	4b32      	ldr	r3, [pc, #200]	; (10b04 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10a3c:	4798      	blx	r3
   10a3e:	9805      	ldr	r0, [sp, #20]
   10a40:	4b31      	ldr	r3, [pc, #196]	; (10b08 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10a42:	9906      	ldr	r1, [sp, #24]
   10a44:	9a07      	ldr	r2, [sp, #28]
   10a46:	4798      	blx	r3
   10a48:	0023      	movs	r3, r4
   10a4a:	33ce      	adds	r3, #206	; 0xce
   10a4c:	881b      	ldrh	r3, [r3, #0]
   10a4e:	0028      	movs	r0, r5
   10a50:	702b      	strb	r3, [r5, #0]
   10a52:	4b2e      	ldr	r3, [pc, #184]	; (10b0c <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10a54:	606b      	str	r3, [r5, #4]
   10a56:	4b2e      	ldr	r3, [pc, #184]	; (10b10 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10a58:	4798      	blx	r3
   10a5a:	2800      	cmp	r0, #0
   10a5c:	d109      	bne.n	10a72 <LorawanGetChAndInitiateRadioTransmit+0x96>
   10a5e:	220e      	movs	r2, #14
   10a60:	3484      	adds	r4, #132	; 0x84
   10a62:	7823      	ldrb	r3, [r4, #0]
   10a64:	4393      	bics	r3, r2
   10a66:	001a      	movs	r2, r3
   10a68:	2302      	movs	r3, #2
   10a6a:	4313      	orrs	r3, r2
   10a6c:	7023      	strb	r3, [r4, #0]
   10a6e:	b009      	add	sp, #36	; 0x24
   10a70:	bd30      	pop	{r4, r5, pc}
   10a72:	2200      	movs	r2, #0
   10a74:	4b27      	ldr	r3, [pc, #156]	; (10b14 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10a76:	4928      	ldr	r1, [pc, #160]	; (10b18 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10a78:	5ce3      	ldrb	r3, [r4, r3]
   10a7a:	34fc      	adds	r4, #252	; 0xfc
   10a7c:	4359      	muls	r1, r3
   10a7e:	4b27      	ldr	r3, [pc, #156]	; (10b1c <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10a80:	7820      	ldrb	r0, [r4, #0]
   10a82:	18c9      	adds	r1, r1, r3
   10a84:	4b26      	ldr	r3, [pc, #152]	; (10b20 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10a86:	9200      	str	r2, [sp, #0]
   10a88:	4c26      	ldr	r4, [pc, #152]	; (10b24 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10a8a:	47a0      	blx	r4
   10a8c:	e7ef      	b.n	10a6e <LorawanGetChAndInitiateRadioTransmit+0x92>
   10a8e:	33ff      	adds	r3, #255	; 0xff
   10a90:	7f5b      	ldrb	r3, [r3, #29]
   10a92:	079a      	lsls	r2, r3, #30
   10a94:	d515      	bpl.n	10ac2 <LorawanGetChAndInitiateRadioTransmit+0xe6>
   10a96:	aa03      	add	r2, sp, #12
   10a98:	4923      	ldr	r1, [pc, #140]	; (10b28 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10a9a:	2026      	movs	r0, #38	; 0x26
   10a9c:	47a8      	blx	r5
   10a9e:	9b03      	ldr	r3, [sp, #12]
   10aa0:	1c5a      	adds	r2, r3, #1
   10aa2:	d001      	beq.n	10aa8 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10aa4:	3314      	adds	r3, #20
   10aa6:	9303      	str	r3, [sp, #12]
   10aa8:	21fa      	movs	r1, #250	; 0xfa
   10aaa:	4b1a      	ldr	r3, [pc, #104]	; (10b14 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10aac:	9a03      	ldr	r2, [sp, #12]
   10aae:	5ce3      	ldrb	r3, [r4, r3]
   10ab0:	0089      	lsls	r1, r1, #2
   10ab2:	1ad3      	subs	r3, r2, r3
   10ab4:	2200      	movs	r2, #0
   10ab6:	4359      	muls	r1, r3
   10ab8:	34f2      	adds	r4, #242	; 0xf2
   10aba:	7820      	ldrb	r0, [r4, #0]
   10abc:	9200      	str	r2, [sp, #0]
   10abe:	4b1b      	ldr	r3, [pc, #108]	; (10b2c <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10ac0:	e7e2      	b.n	10a88 <LorawanGetChAndInitiateRadioTransmit+0xac>
   10ac2:	075b      	lsls	r3, r3, #29
   10ac4:	d508      	bpl.n	10ad8 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   10ac6:	aa03      	add	r2, sp, #12
   10ac8:	4917      	ldr	r1, [pc, #92]	; (10b28 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10aca:	2032      	movs	r0, #50	; 0x32
   10acc:	47a8      	blx	r5
   10ace:	9b03      	ldr	r3, [sp, #12]
   10ad0:	1c5a      	adds	r2, r3, #1
   10ad2:	d0e9      	beq.n	10aa8 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10ad4:	3301      	adds	r3, #1
   10ad6:	e7e6      	b.n	10aa6 <LorawanGetChAndInitiateRadioTransmit+0xca>
   10ad8:	0023      	movs	r3, r4
   10ada:	2201      	movs	r2, #1
   10adc:	3394      	adds	r3, #148	; 0x94
   10ade:	781b      	ldrb	r3, [r3, #0]
   10ae0:	401a      	ands	r2, r3
   10ae2:	d108      	bne.n	10af6 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10ae4:	4b0b      	ldr	r3, [pc, #44]	; (10b14 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10ae6:	490c      	ldr	r1, [pc, #48]	; (10b18 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10ae8:	5ce3      	ldrb	r3, [r4, r3]
   10aea:	34f2      	adds	r4, #242	; 0xf2
   10aec:	4359      	muls	r1, r3
   10aee:	4b0b      	ldr	r3, [pc, #44]	; (10b1c <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10af0:	7820      	ldrb	r0, [r4, #0]
   10af2:	18c9      	adds	r1, r1, r3
   10af4:	e7e2      	b.n	10abc <LorawanGetChAndInitiateRadioTransmit+0xe0>
   10af6:	4b0e      	ldr	r3, [pc, #56]	; (10b30 <LorawanGetChAndInitiateRadioTransmit+0x154>)
   10af8:	4798      	blx	r3
   10afa:	e7b8      	b.n	10a6e <LorawanGetChAndInitiateRadioTransmit+0x92>
   10afc:	20003170 	.word	0x20003170
   10b00:	0000cb21 	.word	0x0000cb21
   10b04:	0000f505 	.word	0x0000f505
   10b08:	0001096d 	.word	0x0001096d
   10b0c:	200033c8 	.word	0x200033c8
   10b10:	0000ec29 	.word	0x0000ec29
   10b14:	0000022b 	.word	0x0000022b
   10b18:	fffffc18 	.word	0xfffffc18
   10b1c:	001e8480 	.word	0x001e8480
   10b20:	00010b35 	.word	0x00010b35
   10b24:	0000d069 	.word	0x0000d069
   10b28:	20003257 	.word	0x20003257
   10b2c:	00010bed 	.word	0x00010bed
   10b30:	00010345 	.word	0x00010345

00010b34 <TransmissionErrorCallback>:
   10b34:	b530      	push	{r4, r5, lr}
   10b36:	4c22      	ldr	r4, [pc, #136]	; (10bc0 <TransmissionErrorCallback+0x8c>)
   10b38:	2501      	movs	r5, #1
   10b3a:	0023      	movs	r3, r4
   10b3c:	b08b      	sub	sp, #44	; 0x2c
   10b3e:	a903      	add	r1, sp, #12
   10b40:	700d      	strb	r5, [r1, #0]
   10b42:	33e9      	adds	r3, #233	; 0xe9
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	aa07      	add	r2, sp, #28
   10b48:	704b      	strb	r3, [r1, #1]
   10b4a:	0023      	movs	r3, r4
   10b4c:	33e7      	adds	r3, #231	; 0xe7
   10b4e:	781b      	ldrb	r3, [r3, #0]
   10b50:	202e      	movs	r0, #46	; 0x2e
   10b52:	708b      	strb	r3, [r1, #2]
   10b54:	4b1b      	ldr	r3, [pc, #108]	; (10bc4 <TransmissionErrorCallback+0x90>)
   10b56:	4798      	blx	r3
   10b58:	2808      	cmp	r0, #8
   10b5a:	d121      	bne.n	10ba0 <TransmissionErrorCallback+0x6c>
   10b5c:	a804      	add	r0, sp, #16
   10b5e:	4b1a      	ldr	r3, [pc, #104]	; (10bc8 <TransmissionErrorCallback+0x94>)
   10b60:	7005      	strb	r5, [r0, #0]
   10b62:	4798      	blx	r3
   10b64:	9807      	ldr	r0, [sp, #28]
   10b66:	4b19      	ldr	r3, [pc, #100]	; (10bcc <TransmissionErrorCallback+0x98>)
   10b68:	9908      	ldr	r1, [sp, #32]
   10b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b6c:	4798      	blx	r3
   10b6e:	0023      	movs	r3, r4
   10b70:	33ce      	adds	r3, #206	; 0xce
   10b72:	881b      	ldrh	r3, [r3, #0]
   10b74:	a805      	add	r0, sp, #20
   10b76:	7003      	strb	r3, [r0, #0]
   10b78:	4b15      	ldr	r3, [pc, #84]	; (10bd0 <TransmissionErrorCallback+0x9c>)
   10b7a:	6043      	str	r3, [r0, #4]
   10b7c:	4b15      	ldr	r3, [pc, #84]	; (10bd4 <TransmissionErrorCallback+0xa0>)
   10b7e:	4798      	blx	r3
   10b80:	2800      	cmp	r0, #0
   10b82:	d01a      	beq.n	10bba <TransmissionErrorCallback+0x86>
   10b84:	0023      	movs	r3, r4
   10b86:	33fd      	adds	r3, #253	; 0xfd
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	42ab      	cmp	r3, r5
   10b8c:	d108      	bne.n	10ba0 <TransmissionErrorCallback+0x6c>
   10b8e:	0021      	movs	r1, r4
   10b90:	220e      	movs	r2, #14
   10b92:	3184      	adds	r1, #132	; 0x84
   10b94:	780b      	ldrb	r3, [r1, #0]
   10b96:	4393      	bics	r3, r2
   10b98:	001a      	movs	r2, r3
   10b9a:	230c      	movs	r3, #12
   10b9c:	4313      	orrs	r3, r2
   10b9e:	700b      	strb	r3, [r1, #0]
   10ba0:	2200      	movs	r2, #0
   10ba2:	4b0d      	ldr	r3, [pc, #52]	; (10bd8 <TransmissionErrorCallback+0xa4>)
   10ba4:	490d      	ldr	r1, [pc, #52]	; (10bdc <TransmissionErrorCallback+0xa8>)
   10ba6:	5ce3      	ldrb	r3, [r4, r3]
   10ba8:	34fc      	adds	r4, #252	; 0xfc
   10baa:	4359      	muls	r1, r3
   10bac:	4b0c      	ldr	r3, [pc, #48]	; (10be0 <TransmissionErrorCallback+0xac>)
   10bae:	7820      	ldrb	r0, [r4, #0]
   10bb0:	18c9      	adds	r1, r1, r3
   10bb2:	9200      	str	r2, [sp, #0]
   10bb4:	4b0b      	ldr	r3, [pc, #44]	; (10be4 <TransmissionErrorCallback+0xb0>)
   10bb6:	4c0c      	ldr	r4, [pc, #48]	; (10be8 <TransmissionErrorCallback+0xb4>)
   10bb8:	47a0      	blx	r4
   10bba:	b00b      	add	sp, #44	; 0x2c
   10bbc:	bd30      	pop	{r4, r5, pc}
   10bbe:	46c0      	nop			; (mov r8, r8)
   10bc0:	20003170 	.word	0x20003170
   10bc4:	0000cb21 	.word	0x0000cb21
   10bc8:	0000f505 	.word	0x0000f505
   10bcc:	0001096d 	.word	0x0001096d
   10bd0:	200033c8 	.word	0x200033c8
   10bd4:	0000ec29 	.word	0x0000ec29
   10bd8:	0000022b 	.word	0x0000022b
   10bdc:	fffffc18 	.word	0xfffffc18
   10be0:	001e8480 	.word	0x001e8480
   10be4:	00010b35 	.word	0x00010b35
   10be8:	0000d069 	.word	0x0000d069

00010bec <UnconfirmedTransmissionCallback>:
   10bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bee:	4c3a      	ldr	r4, [pc, #232]	; (10cd8 <UnconfirmedTransmissionCallback+0xec>)
   10bf0:	b08b      	sub	sp, #44	; 0x2c
   10bf2:	0023      	movs	r3, r4
   10bf4:	33ce      	adds	r3, #206	; 0xce
   10bf6:	881b      	ldrh	r3, [r3, #0]
   10bf8:	af05      	add	r7, sp, #20
   10bfa:	703b      	strb	r3, [r7, #0]
   10bfc:	4b37      	ldr	r3, [pc, #220]	; (10cdc <UnconfirmedTransmissionCallback+0xf0>)
   10bfe:	a903      	add	r1, sp, #12
   10c00:	9306      	str	r3, [sp, #24]
   10c02:	2301      	movs	r3, #1
   10c04:	700b      	strb	r3, [r1, #0]
   10c06:	0023      	movs	r3, r4
   10c08:	0026      	movs	r6, r4
   10c0a:	33e9      	adds	r3, #233	; 0xe9
   10c0c:	781b      	ldrb	r3, [r3, #0]
   10c0e:	36e7      	adds	r6, #231	; 0xe7
   10c10:	704b      	strb	r3, [r1, #1]
   10c12:	7833      	ldrb	r3, [r6, #0]
   10c14:	aa07      	add	r2, sp, #28
   10c16:	202e      	movs	r0, #46	; 0x2e
   10c18:	4d31      	ldr	r5, [pc, #196]	; (10ce0 <UnconfirmedTransmissionCallback+0xf4>)
   10c1a:	708b      	strb	r3, [r1, #2]
   10c1c:	47a8      	blx	r5
   10c1e:	2808      	cmp	r0, #8
   10c20:	d12b      	bne.n	10c7a <UnconfirmedTransmissionCallback+0x8e>
   10c22:	2301      	movs	r3, #1
   10c24:	a804      	add	r0, sp, #16
   10c26:	7003      	strb	r3, [r0, #0]
   10c28:	4b2e      	ldr	r3, [pc, #184]	; (10ce4 <UnconfirmedTransmissionCallback+0xf8>)
   10c2a:	4798      	blx	r3
   10c2c:	9807      	ldr	r0, [sp, #28]
   10c2e:	4b2e      	ldr	r3, [pc, #184]	; (10ce8 <UnconfirmedTransmissionCallback+0xfc>)
   10c30:	9908      	ldr	r1, [sp, #32]
   10c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c34:	4798      	blx	r3
   10c36:	0038      	movs	r0, r7
   10c38:	4b2c      	ldr	r3, [pc, #176]	; (10cec <UnconfirmedTransmissionCallback+0x100>)
   10c3a:	4798      	blx	r3
   10c3c:	2800      	cmp	r0, #0
   10c3e:	d01a      	beq.n	10c76 <UnconfirmedTransmissionCallback+0x8a>
   10c40:	0023      	movs	r3, r4
   10c42:	33fd      	adds	r3, #253	; 0xfd
   10c44:	781b      	ldrb	r3, [r3, #0]
   10c46:	2b01      	cmp	r3, #1
   10c48:	d108      	bne.n	10c5c <UnconfirmedTransmissionCallback+0x70>
   10c4a:	0021      	movs	r1, r4
   10c4c:	220e      	movs	r2, #14
   10c4e:	3184      	adds	r1, #132	; 0x84
   10c50:	780b      	ldrb	r3, [r1, #0]
   10c52:	4393      	bics	r3, r2
   10c54:	001a      	movs	r2, r3
   10c56:	230c      	movs	r3, #12
   10c58:	4313      	orrs	r3, r2
   10c5a:	700b      	strb	r3, [r1, #0]
   10c5c:	2200      	movs	r2, #0
   10c5e:	4b24      	ldr	r3, [pc, #144]	; (10cf0 <UnconfirmedTransmissionCallback+0x104>)
   10c60:	4924      	ldr	r1, [pc, #144]	; (10cf4 <UnconfirmedTransmissionCallback+0x108>)
   10c62:	5ce3      	ldrb	r3, [r4, r3]
   10c64:	34fc      	adds	r4, #252	; 0xfc
   10c66:	4359      	muls	r1, r3
   10c68:	4b23      	ldr	r3, [pc, #140]	; (10cf8 <UnconfirmedTransmissionCallback+0x10c>)
   10c6a:	7820      	ldrb	r0, [r4, #0]
   10c6c:	18c9      	adds	r1, r1, r3
   10c6e:	4b23      	ldr	r3, [pc, #140]	; (10cfc <UnconfirmedTransmissionCallback+0x110>)
   10c70:	9200      	str	r2, [sp, #0]
   10c72:	4c23      	ldr	r4, [pc, #140]	; (10d00 <UnconfirmedTransmissionCallback+0x114>)
   10c74:	47a0      	blx	r4
   10c76:	b00b      	add	sp, #44	; 0x2c
   10c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c7a:	4b22      	ldr	r3, [pc, #136]	; (10d04 <UnconfirmedTransmissionCallback+0x118>)
   10c7c:	4798      	blx	r3
   10c7e:	4b22      	ldr	r3, [pc, #136]	; (10d08 <UnconfirmedTransmissionCallback+0x11c>)
   10c80:	4922      	ldr	r1, [pc, #136]	; (10d0c <UnconfirmedTransmissionCallback+0x120>)
   10c82:	4798      	blx	r3
   10c84:	23fa      	movs	r3, #250	; 0xfa
   10c86:	009b      	lsls	r3, r3, #2
   10c88:	18c9      	adds	r1, r1, r3
   10c8a:	0023      	movs	r3, r4
   10c8c:	9104      	str	r1, [sp, #16]
   10c8e:	33ff      	adds	r3, #255	; 0xff
   10c90:	7f5b      	ldrb	r3, [r3, #29]
   10c92:	079a      	lsls	r2, r3, #30
   10c94:	d515      	bpl.n	10cc2 <UnconfirmedTransmissionCallback+0xd6>
   10c96:	aa04      	add	r2, sp, #16
   10c98:	0031      	movs	r1, r6
   10c9a:	2026      	movs	r0, #38	; 0x26
   10c9c:	47a8      	blx	r5
   10c9e:	9b04      	ldr	r3, [sp, #16]
   10ca0:	1c5a      	adds	r2, r3, #1
   10ca2:	d001      	beq.n	10ca8 <UnconfirmedTransmissionCallback+0xbc>
   10ca4:	3314      	adds	r3, #20
   10ca6:	9304      	str	r3, [sp, #16]
   10ca8:	4b11      	ldr	r3, [pc, #68]	; (10cf0 <UnconfirmedTransmissionCallback+0x104>)
   10caa:	9a04      	ldr	r2, [sp, #16]
   10cac:	5ce3      	ldrb	r3, [r4, r3]
   10cae:	21fa      	movs	r1, #250	; 0xfa
   10cb0:	1ad3      	subs	r3, r2, r3
   10cb2:	2200      	movs	r2, #0
   10cb4:	0089      	lsls	r1, r1, #2
   10cb6:	34f2      	adds	r4, #242	; 0xf2
   10cb8:	4359      	muls	r1, r3
   10cba:	7820      	ldrb	r0, [r4, #0]
   10cbc:	4b14      	ldr	r3, [pc, #80]	; (10d10 <UnconfirmedTransmissionCallback+0x124>)
   10cbe:	9200      	str	r2, [sp, #0]
   10cc0:	e7d7      	b.n	10c72 <UnconfirmedTransmissionCallback+0x86>
   10cc2:	075b      	lsls	r3, r3, #29
   10cc4:	d5f0      	bpl.n	10ca8 <UnconfirmedTransmissionCallback+0xbc>
   10cc6:	aa04      	add	r2, sp, #16
   10cc8:	0031      	movs	r1, r6
   10cca:	2032      	movs	r0, #50	; 0x32
   10ccc:	47a8      	blx	r5
   10cce:	9b04      	ldr	r3, [sp, #16]
   10cd0:	1c5a      	adds	r2, r3, #1
   10cd2:	d0e9      	beq.n	10ca8 <UnconfirmedTransmissionCallback+0xbc>
   10cd4:	3301      	adds	r3, #1
   10cd6:	e7e6      	b.n	10ca6 <UnconfirmedTransmissionCallback+0xba>
   10cd8:	20003170 	.word	0x20003170
   10cdc:	200033c8 	.word	0x200033c8
   10ce0:	0000cb21 	.word	0x0000cb21
   10ce4:	0000f505 	.word	0x0000f505
   10ce8:	0001096d 	.word	0x0001096d
   10cec:	0000ec29 	.word	0x0000ec29
   10cf0:	0000022b 	.word	0x0000022b
   10cf4:	fffffc18 	.word	0xfffffc18
   10cf8:	001e8480 	.word	0x001e8480
   10cfc:	00010b35 	.word	0x00010b35
   10d00:	0000d069 	.word	0x0000d069
   10d04:	00016ed1 	.word	0x00016ed1
   10d08:	00013809 	.word	0x00013809
   10d0c:	000007d1 	.word	0x000007d1
   10d10:	00010bed 	.word	0x00010bed

00010d14 <EncryptFRMPayload>:
   10d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d16:	0007      	movs	r7, r0
   10d18:	2401      	movs	r4, #1
   10d1a:	b089      	sub	sp, #36	; 0x24
   10d1c:	9306      	str	r3, [sp, #24]
   10d1e:	ab10      	add	r3, sp, #64	; 0x40
   10d20:	881d      	ldrh	r5, [r3, #0]
   10d22:	090b      	lsrs	r3, r1, #4
   10d24:	9104      	str	r1, [sp, #16]
   10d26:	9205      	str	r2, [sp, #20]
   10d28:	9303      	str	r3, [sp, #12]
   10d2a:	9b03      	ldr	r3, [sp, #12]
   10d2c:	429c      	cmp	r4, r3
   10d2e:	d907      	bls.n	10d40 <EncryptFRMPayload+0x2c>
   10d30:	260f      	movs	r6, #15
   10d32:	9b04      	ldr	r3, [sp, #16]
   10d34:	4033      	ands	r3, r6
   10d36:	1e1e      	subs	r6, r3, #0
   10d38:	d126      	bne.n	10d88 <EncryptFRMPayload+0x74>
   10d3a:	2000      	movs	r0, #0
   10d3c:	b009      	add	sp, #36	; 0x24
   10d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10d42:	0022      	movs	r2, r4
   10d44:	9300      	str	r3, [sp, #0]
   10d46:	9906      	ldr	r1, [sp, #24]
   10d48:	2301      	movs	r3, #1
   10d4a:	9805      	ldr	r0, [sp, #20]
   10d4c:	4e1e      	ldr	r6, [pc, #120]	; (10dc8 <EncryptFRMPayload+0xb4>)
   10d4e:	47b0      	blx	r6
   10d50:	4e1e      	ldr	r6, [pc, #120]	; (10dcc <EncryptFRMPayload+0xb8>)
   10d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10d54:	2101      	movs	r1, #1
   10d56:	0030      	movs	r0, r6
   10d58:	4b1d      	ldr	r3, [pc, #116]	; (10dd0 <EncryptFRMPayload+0xbc>)
   10d5a:	4798      	blx	r3
   10d5c:	2800      	cmp	r0, #0
   10d5e:	d1ed      	bne.n	10d3c <EncryptFRMPayload+0x28>
   10d60:	1e63      	subs	r3, r4, #1
   10d62:	011b      	lsls	r3, r3, #4
   10d64:	18fb      	adds	r3, r7, r3
   10d66:	9307      	str	r3, [sp, #28]
   10d68:	9b07      	ldr	r3, [sp, #28]
   10d6a:	182a      	adds	r2, r5, r0
   10d6c:	5c19      	ldrb	r1, [r3, r0]
   10d6e:	5d83      	ldrb	r3, [r0, r6]
   10d70:	b292      	uxth	r2, r2
   10d72:	4059      	eors	r1, r3
   10d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10d76:	3001      	adds	r0, #1
   10d78:	5499      	strb	r1, [r3, r2]
   10d7a:	2810      	cmp	r0, #16
   10d7c:	d1f4      	bne.n	10d68 <EncryptFRMPayload+0x54>
   10d7e:	3510      	adds	r5, #16
   10d80:	3401      	adds	r4, #1
   10d82:	b2ad      	uxth	r5, r5
   10d84:	b2e4      	uxtb	r4, r4
   10d86:	e7d0      	b.n	10d2a <EncryptFRMPayload+0x16>
   10d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10d8a:	0022      	movs	r2, r4
   10d8c:	9300      	str	r3, [sp, #0]
   10d8e:	9906      	ldr	r1, [sp, #24]
   10d90:	2301      	movs	r3, #1
   10d92:	9805      	ldr	r0, [sp, #20]
   10d94:	4c0c      	ldr	r4, [pc, #48]	; (10dc8 <EncryptFRMPayload+0xb4>)
   10d96:	47a0      	blx	r4
   10d98:	4c0c      	ldr	r4, [pc, #48]	; (10dcc <EncryptFRMPayload+0xb8>)
   10d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10d9c:	2101      	movs	r1, #1
   10d9e:	0020      	movs	r0, r4
   10da0:	4b0b      	ldr	r3, [pc, #44]	; (10dd0 <EncryptFRMPayload+0xbc>)
   10da2:	4798      	blx	r3
   10da4:	2800      	cmp	r0, #0
   10da6:	d1c9      	bne.n	10d3c <EncryptFRMPayload+0x28>
   10da8:	9b03      	ldr	r3, [sp, #12]
   10daa:	011b      	lsls	r3, r3, #4
   10dac:	18fb      	adds	r3, r7, r3
   10dae:	5d07      	ldrb	r7, [r0, r4]
   10db0:	5c19      	ldrb	r1, [r3, r0]
   10db2:	182a      	adds	r2, r5, r0
   10db4:	4079      	eors	r1, r7
   10db6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10db8:	b292      	uxth	r2, r2
   10dba:	3001      	adds	r0, #1
   10dbc:	54b9      	strb	r1, [r7, r2]
   10dbe:	b2c2      	uxtb	r2, r0
   10dc0:	4296      	cmp	r6, r2
   10dc2:	d8f4      	bhi.n	10dae <EncryptFRMPayload+0x9a>
   10dc4:	e7b9      	b.n	10d3a <EncryptFRMPayload+0x26>
   10dc6:	46c0      	nop			; (mov r8, r8)
   10dc8:	0000ff2d 	.word	0x0000ff2d
   10dcc:	20001eb5 	.word	0x20001eb5
   10dd0:	00007221 	.word	0x00007221

00010dd4 <UpdateTransactionCompleteCbParams>:
   10dd4:	2388      	movs	r3, #136	; 0x88
   10dd6:	2201      	movs	r2, #1
   10dd8:	b570      	push	{r4, r5, r6, lr}
   10dda:	0001      	movs	r1, r0
   10ddc:	4c13      	ldr	r4, [pc, #76]	; (10e2c <UpdateTransactionCompleteCbParams+0x58>)
   10dde:	4814      	ldr	r0, [pc, #80]	; (10e30 <UpdateTransactionCompleteCbParams+0x5c>)
   10de0:	009b      	lsls	r3, r3, #2
   10de2:	54e2      	strb	r2, [r4, r3]
   10de4:	7842      	ldrb	r2, [r0, #1]
   10de6:	7803      	ldrb	r3, [r0, #0]
   10de8:	0212      	lsls	r2, r2, #8
   10dea:	431a      	orrs	r2, r3
   10dec:	7883      	ldrb	r3, [r0, #2]
   10dee:	041b      	lsls	r3, r3, #16
   10df0:	431a      	orrs	r2, r3
   10df2:	78c3      	ldrb	r3, [r0, #3]
   10df4:	061b      	lsls	r3, r3, #24
   10df6:	4313      	orrs	r3, r2
   10df8:	d00e      	beq.n	10e18 <UpdateTransactionCompleteCbParams+0x44>
   10dfa:	0022      	movs	r2, r4
   10dfc:	2504      	movs	r5, #4
   10dfe:	32fc      	adds	r2, #252	; 0xfc
   10e00:	6890      	ldr	r0, [r2, #8]
   10e02:	4228      	tst	r0, r5
   10e04:	d008      	beq.n	10e18 <UpdateTransactionCompleteCbParams+0x44>
   10e06:	68d0      	ldr	r0, [r2, #12]
   10e08:	2800      	cmp	r0, #0
   10e0a:	d005      	beq.n	10e18 <UpdateTransactionCompleteCbParams+0x44>
   10e0c:	0022      	movs	r2, r4
   10e0e:	32ff      	adds	r2, #255	; 0xff
   10e10:	7451      	strb	r1, [r2, #17]
   10e12:	7355      	strb	r5, [r2, #13]
   10e14:	4907      	ldr	r1, [pc, #28]	; (10e34 <UpdateTransactionCompleteCbParams+0x60>)
   10e16:	4798      	blx	r3
   10e18:	2388      	movs	r3, #136	; 0x88
   10e1a:	009b      	lsls	r3, r3, #2
   10e1c:	5ce3      	ldrb	r3, [r4, r3]
   10e1e:	2b00      	cmp	r3, #0
   10e20:	d002      	beq.n	10e28 <UpdateTransactionCompleteCbParams+0x54>
   10e22:	2300      	movs	r3, #0
   10e24:	34fc      	adds	r4, #252	; 0xfc
   10e26:	60e3      	str	r3, [r4, #12]
   10e28:	bd70      	pop	{r4, r5, r6, pc}
   10e2a:	46c0      	nop			; (mov r8, r8)
   10e2c:	20003170 	.word	0x20003170
   10e30:	200034cc 	.word	0x200034cc
   10e34:	2000327c 	.word	0x2000327c

00010e38 <UpdateRxDataAvailableCbParams>:
   10e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e3a:	4e0f      	ldr	r6, [pc, #60]	; (10e78 <UpdateRxDataAvailableCbParams+0x40>)
   10e3c:	469c      	mov	ip, r3
   10e3e:	7875      	ldrb	r5, [r6, #1]
   10e40:	7834      	ldrb	r4, [r6, #0]
   10e42:	022d      	lsls	r5, r5, #8
   10e44:	4325      	orrs	r5, r4
   10e46:	78b4      	ldrb	r4, [r6, #2]
   10e48:	0424      	lsls	r4, r4, #16
   10e4a:	4325      	orrs	r5, r4
   10e4c:	78f4      	ldrb	r4, [r6, #3]
   10e4e:	0624      	lsls	r4, r4, #24
   10e50:	432c      	orrs	r4, r5
   10e52:	d010      	beq.n	10e76 <UpdateRxDataAvailableCbParams+0x3e>
   10e54:	4d09      	ldr	r5, [pc, #36]	; (10e7c <UpdateRxDataAvailableCbParams+0x44>)
   10e56:	2702      	movs	r7, #2
   10e58:	002e      	movs	r6, r5
   10e5a:	36fc      	adds	r6, #252	; 0xfc
   10e5c:	68b3      	ldr	r3, [r6, #8]
   10e5e:	423b      	tst	r3, r7
   10e60:	d009      	beq.n	10e76 <UpdateRxDataAvailableCbParams+0x3e>
   10e62:	4663      	mov	r3, ip
   10e64:	35ff      	adds	r5, #255	; 0xff
   10e66:	6170      	str	r0, [r6, #20]
   10e68:	61b1      	str	r1, [r6, #24]
   10e6a:	736f      	strb	r7, [r5, #13]
   10e6c:	766a      	strb	r2, [r5, #25]
   10e6e:	76ab      	strb	r3, [r5, #26]
   10e70:	4903      	ldr	r1, [pc, #12]	; (10e80 <UpdateRxDataAvailableCbParams+0x48>)
   10e72:	68f0      	ldr	r0, [r6, #12]
   10e74:	47a0      	blx	r4
   10e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e78:	200034cc 	.word	0x200034cc
   10e7c:	20003170 	.word	0x20003170
   10e80:	2000327c 	.word	0x2000327c

00010e84 <LorawanNotifyAppOnRxdone>:
   10e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e86:	4c25      	ldr	r4, [pc, #148]	; (10f1c <LorawanNotifyAppOnRxdone+0x98>)
   10e88:	0007      	movs	r7, r0
   10e8a:	0023      	movs	r3, r4
   10e8c:	33fd      	adds	r3, #253	; 0xfd
   10e8e:	781b      	ldrb	r3, [r3, #0]
   10e90:	000d      	movs	r5, r1
   10e92:	0016      	movs	r6, r2
   10e94:	2b01      	cmp	r3, #1
   10e96:	d136      	bne.n	10f06 <LorawanNotifyAppOnRxdone+0x82>
   10e98:	0022      	movs	r2, r4
   10e9a:	210e      	movs	r1, #14
   10e9c:	3284      	adds	r2, #132	; 0x84
   10e9e:	7813      	ldrb	r3, [r2, #0]
   10ea0:	438b      	bics	r3, r1
   10ea2:	7013      	strb	r3, [r2, #0]
   10ea4:	491e      	ldr	r1, [pc, #120]	; (10f20 <LorawanNotifyAppOnRxdone+0x9c>)
   10ea6:	784a      	ldrb	r2, [r1, #1]
   10ea8:	780b      	ldrb	r3, [r1, #0]
   10eaa:	0212      	lsls	r2, r2, #8
   10eac:	431a      	orrs	r2, r3
   10eae:	788b      	ldrb	r3, [r1, #2]
   10eb0:	041b      	lsls	r3, r3, #16
   10eb2:	431a      	orrs	r2, r3
   10eb4:	78cb      	ldrb	r3, [r1, #3]
   10eb6:	061b      	lsls	r3, r3, #24
   10eb8:	4313      	orrs	r3, r2
   10eba:	d023      	beq.n	10f04 <LorawanNotifyAppOnRxdone+0x80>
   10ebc:	0022      	movs	r2, r4
   10ebe:	2120      	movs	r1, #32
   10ec0:	3294      	adds	r2, #148	; 0x94
   10ec2:	7813      	ldrb	r3, [r2, #0]
   10ec4:	438b      	bics	r3, r1
   10ec6:	7013      	strb	r3, [r2, #0]
   10ec8:	0023      	movs	r3, r4
   10eca:	33fd      	adds	r3, #253	; 0xfd
   10ecc:	781b      	ldrb	r3, [r3, #0]
   10ece:	7878      	ldrb	r0, [r7, #1]
   10ed0:	469c      	mov	ip, r3
   10ed2:	78fa      	ldrb	r2, [r7, #3]
   10ed4:	78b9      	ldrb	r1, [r7, #2]
   10ed6:	793b      	ldrb	r3, [r7, #4]
   10ed8:	4667      	mov	r7, ip
   10eda:	0209      	lsls	r1, r1, #8
   10edc:	4301      	orrs	r1, r0
   10ede:	0410      	lsls	r0, r2, #16
   10ee0:	4308      	orrs	r0, r1
   10ee2:	061b      	lsls	r3, r3, #24
   10ee4:	4318      	orrs	r0, r3
   10ee6:	0032      	movs	r2, r6
   10ee8:	2308      	movs	r3, #8
   10eea:	0029      	movs	r1, r5
   10eec:	2f04      	cmp	r7, #4
   10eee:	d112      	bne.n	10f16 <LorawanNotifyAppOnRxdone+0x92>
   10ef0:	4d0c      	ldr	r5, [pc, #48]	; (10f24 <LorawanNotifyAppOnRxdone+0xa0>)
   10ef2:	47a8      	blx	r5
   10ef4:	2388      	movs	r3, #136	; 0x88
   10ef6:	009b      	lsls	r3, r3, #2
   10ef8:	5ce3      	ldrb	r3, [r4, r3]
   10efa:	2b00      	cmp	r3, #0
   10efc:	d102      	bne.n	10f04 <LorawanNotifyAppOnRxdone+0x80>
   10efe:	2008      	movs	r0, #8
   10f00:	4b09      	ldr	r3, [pc, #36]	; (10f28 <LorawanNotifyAppOnRxdone+0xa4>)
   10f02:	4798      	blx	r3
   10f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f06:	2b04      	cmp	r3, #4
   10f08:	d1cc      	bne.n	10ea4 <LorawanNotifyAppOnRxdone+0x20>
   10f0a:	0023      	movs	r3, r4
   10f0c:	33f1      	adds	r3, #241	; 0xf1
   10f0e:	7818      	ldrb	r0, [r3, #0]
   10f10:	4b06      	ldr	r3, [pc, #24]	; (10f2c <LorawanNotifyAppOnRxdone+0xa8>)
   10f12:	4798      	blx	r3
   10f14:	e7c6      	b.n	10ea4 <LorawanNotifyAppOnRxdone+0x20>
   10f16:	4d06      	ldr	r5, [pc, #24]	; (10f30 <LorawanNotifyAppOnRxdone+0xac>)
   10f18:	47a8      	blx	r5
   10f1a:	e7eb      	b.n	10ef4 <LorawanNotifyAppOnRxdone+0x70>
   10f1c:	20003170 	.word	0x20003170
   10f20:	200034cc 	.word	0x200034cc
   10f24:	00012ddd 	.word	0x00012ddd
   10f28:	00010dd5 	.word	0x00010dd5
   10f2c:	0000d381 	.word	0x0000d381
   10f30:	00010e39 	.word	0x00010e39

00010f34 <LorawanSetReceiveWindow2Parameters>:
   10f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10f36:	466b      	mov	r3, sp
   10f38:	1cdd      	adds	r5, r3, #3
   10f3a:	9001      	str	r0, [sp, #4]
   10f3c:	7029      	strb	r1, [r5, #0]
   10f3e:	2001      	movs	r0, #1
   10f40:	a901      	add	r1, sp, #4
   10f42:	4c09      	ldr	r4, [pc, #36]	; (10f68 <LorawanSetReceiveWindow2Parameters+0x34>)
   10f44:	47a0      	blx	r4
   10f46:	2808      	cmp	r0, #8
   10f48:	d002      	beq.n	10f50 <LorawanSetReceiveWindow2Parameters+0x1c>
   10f4a:	240a      	movs	r4, #10
   10f4c:	0020      	movs	r0, r4
   10f4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10f50:	0029      	movs	r1, r5
   10f52:	200f      	movs	r0, #15
   10f54:	47a0      	blx	r4
   10f56:	0004      	movs	r4, r0
   10f58:	2808      	cmp	r0, #8
   10f5a:	d1f6      	bne.n	10f4a <LorawanSetReceiveWindow2Parameters+0x16>
   10f5c:	7829      	ldrb	r1, [r5, #0]
   10f5e:	9801      	ldr	r0, [sp, #4]
   10f60:	4b02      	ldr	r3, [pc, #8]	; (10f6c <LorawanSetReceiveWindow2Parameters+0x38>)
   10f62:	4798      	blx	r3
   10f64:	e7f2      	b.n	10f4c <LorawanSetReceiveWindow2Parameters+0x18>
   10f66:	46c0      	nop			; (mov r8, r8)
   10f68:	0000cb3d 	.word	0x0000cb3d
   10f6c:	00010399 	.word	0x00010399

00010f70 <LorawanSetReceiveWindowCParameters>:
   10f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10f72:	466b      	mov	r3, sp
   10f74:	1cdc      	adds	r4, r3, #3
   10f76:	9001      	str	r0, [sp, #4]
   10f78:	7021      	strb	r1, [r4, #0]
   10f7a:	2001      	movs	r0, #1
   10f7c:	a901      	add	r1, sp, #4
   10f7e:	4d0d      	ldr	r5, [pc, #52]	; (10fb4 <LorawanSetReceiveWindowCParameters+0x44>)
   10f80:	47a8      	blx	r5
   10f82:	2808      	cmp	r0, #8
   10f84:	d001      	beq.n	10f8a <LorawanSetReceiveWindowCParameters+0x1a>
   10f86:	200a      	movs	r0, #10
   10f88:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10f8a:	0021      	movs	r1, r4
   10f8c:	200f      	movs	r0, #15
   10f8e:	47a8      	blx	r5
   10f90:	2808      	cmp	r0, #8
   10f92:	d1f8      	bne.n	10f86 <LorawanSetReceiveWindowCParameters+0x16>
   10f94:	4b08      	ldr	r3, [pc, #32]	; (10fb8 <LorawanSetReceiveWindowCParameters+0x48>)
   10f96:	9a01      	ldr	r2, [sp, #4]
   10f98:	0019      	movs	r1, r3
   10f9a:	7824      	ldrb	r4, [r4, #0]
   10f9c:	3173      	adds	r1, #115	; 0x73
   10f9e:	336f      	adds	r3, #111	; 0x6f
   10fa0:	700c      	strb	r4, [r1, #0]
   10fa2:	0a11      	lsrs	r1, r2, #8
   10fa4:	701a      	strb	r2, [r3, #0]
   10fa6:	7059      	strb	r1, [r3, #1]
   10fa8:	0c11      	lsrs	r1, r2, #16
   10faa:	0e12      	lsrs	r2, r2, #24
   10fac:	7099      	strb	r1, [r3, #2]
   10fae:	70da      	strb	r2, [r3, #3]
   10fb0:	e7ea      	b.n	10f88 <LorawanSetReceiveWindowCParameters+0x18>
   10fb2:	46c0      	nop			; (mov r8, r8)
   10fb4:	0000cb3d 	.word	0x0000cb3d
   10fb8:	20003170 	.word	0x20003170

00010fbc <LorawanSetFrequency>:
   10fbc:	b507      	push	{r0, r1, r2, lr}
   10fbe:	466b      	mov	r3, sp
   10fc0:	9100      	str	r1, [sp, #0]
   10fc2:	7118      	strb	r0, [r3, #4]
   10fc4:	4669      	mov	r1, sp
   10fc6:	2000      	movs	r0, #0
   10fc8:	4b01      	ldr	r3, [pc, #4]	; (10fd0 <LorawanSetFrequency+0x14>)
   10fca:	4798      	blx	r3
   10fcc:	bd0e      	pop	{r1, r2, r3, pc}
   10fce:	46c0      	nop			; (mov r8, r8)
   10fd0:	0000cb59 	.word	0x0000cb59

00010fd4 <LorawanCheckAndDoRetryOnTimeout>:
   10fd4:	b513      	push	{r0, r1, r4, lr}
   10fd6:	4c33      	ldr	r4, [pc, #204]	; (110a4 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   10fd8:	0023      	movs	r3, r4
   10fda:	3394      	adds	r3, #148	; 0x94
   10fdc:	781b      	ldrb	r3, [r3, #0]
   10fde:	0022      	movs	r2, r4
   10fe0:	07db      	lsls	r3, r3, #31
   10fe2:	d54b      	bpl.n	1107c <LorawanCheckAndDoRetryOnTimeout+0xa8>
   10fe4:	0023      	movs	r3, r4
   10fe6:	32e4      	adds	r2, #228	; 0xe4
   10fe8:	33e2      	adds	r3, #226	; 0xe2
   10fea:	7812      	ldrb	r2, [r2, #0]
   10fec:	781b      	ldrb	r3, [r3, #0]
   10fee:	429a      	cmp	r2, r3
   10ff0:	d836      	bhi.n	11060 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10ff2:	4b2d      	ldr	r3, [pc, #180]	; (110a8 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10ff4:	5ce3      	ldrb	r3, [r4, r3]
   10ff6:	2b00      	cmp	r3, #0
   10ff8:	d032      	beq.n	11060 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10ffa:	0023      	movs	r3, r4
   10ffc:	33fd      	adds	r3, #253	; 0xfd
   10ffe:	781b      	ldrb	r3, [r3, #0]
   11000:	2b01      	cmp	r3, #1
   11002:	d119      	bne.n	11038 <LorawanCheckAndDoRetryOnTimeout+0x64>
   11004:	0021      	movs	r1, r4
   11006:	220e      	movs	r2, #14
   11008:	3184      	adds	r1, #132	; 0x84
   1100a:	780b      	ldrb	r3, [r1, #0]
   1100c:	4393      	bics	r3, r2
   1100e:	001a      	movs	r2, r3
   11010:	230c      	movs	r3, #12
   11012:	4313      	orrs	r3, r2
   11014:	700b      	strb	r3, [r1, #0]
   11016:	0023      	movs	r3, r4
   11018:	33da      	adds	r3, #218	; 0xda
   1101a:	8819      	ldrh	r1, [r3, #0]
   1101c:	4b23      	ldr	r3, [pc, #140]	; (110ac <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   1101e:	2200      	movs	r2, #0
   11020:	5ce3      	ldrb	r3, [r4, r3]
   11022:	34f1      	adds	r4, #241	; 0xf1
   11024:	1acb      	subs	r3, r1, r3
   11026:	21fa      	movs	r1, #250	; 0xfa
   11028:	0089      	lsls	r1, r1, #2
   1102a:	7820      	ldrb	r0, [r4, #0]
   1102c:	4359      	muls	r1, r3
   1102e:	9200      	str	r2, [sp, #0]
   11030:	4b1f      	ldr	r3, [pc, #124]	; (110b0 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   11032:	4c20      	ldr	r4, [pc, #128]	; (110b4 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   11034:	47a0      	blx	r4
   11036:	bd13      	pop	{r0, r1, r4, pc}
   11038:	2b04      	cmp	r3, #4
   1103a:	d1fc      	bne.n	11036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1103c:	4b1e      	ldr	r3, [pc, #120]	; (110b8 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   1103e:	4798      	blx	r3
   11040:	34ce      	adds	r4, #206	; 0xce
   11042:	300d      	adds	r0, #13
   11044:	8823      	ldrh	r3, [r4, #0]
   11046:	b280      	uxth	r0, r0
   11048:	4283      	cmp	r3, r0
   1104a:	d802      	bhi.n	11052 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   1104c:	4b1b      	ldr	r3, [pc, #108]	; (110bc <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1104e:	4798      	blx	r3
   11050:	e7f1      	b.n	11036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   11052:	200e      	movs	r0, #14
   11054:	4b1a      	ldr	r3, [pc, #104]	; (110c0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11056:	4798      	blx	r3
   11058:	4b1a      	ldr	r3, [pc, #104]	; (110c4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1105a:	4798      	blx	r3
   1105c:	4b1a      	ldr	r3, [pc, #104]	; (110c8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1105e:	e7f6      	b.n	1104e <LorawanCheckAndDoRetryOnTimeout+0x7a>
   11060:	2012      	movs	r0, #18
   11062:	4b17      	ldr	r3, [pc, #92]	; (110c0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11064:	4798      	blx	r3
   11066:	4b17      	ldr	r3, [pc, #92]	; (110c4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   11068:	4798      	blx	r3
   1106a:	34fd      	adds	r4, #253	; 0xfd
   1106c:	4b16      	ldr	r3, [pc, #88]	; (110c8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1106e:	4798      	blx	r3
   11070:	7823      	ldrb	r3, [r4, #0]
   11072:	2b04      	cmp	r3, #4
   11074:	d1df      	bne.n	11036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   11076:	4b15      	ldr	r3, [pc, #84]	; (110cc <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   11078:	4798      	blx	r3
   1107a:	e7dc      	b.n	11036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1107c:	0023      	movs	r3, r4
   1107e:	32e3      	adds	r2, #227	; 0xe3
   11080:	33e1      	adds	r3, #225	; 0xe1
   11082:	7812      	ldrb	r2, [r2, #0]
   11084:	781b      	ldrb	r3, [r3, #0]
   11086:	429a      	cmp	r2, r3
   11088:	d803      	bhi.n	11092 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   1108a:	4b07      	ldr	r3, [pc, #28]	; (110a8 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   1108c:	5ce3      	ldrb	r3, [r4, r3]
   1108e:	2b00      	cmp	r3, #0
   11090:	d1dc      	bne.n	1104c <LorawanCheckAndDoRetryOnTimeout+0x78>
   11092:	4b0f      	ldr	r3, [pc, #60]	; (110d0 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   11094:	4798      	blx	r3
   11096:	4b0c      	ldr	r3, [pc, #48]	; (110c8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   11098:	4798      	blx	r3
   1109a:	2008      	movs	r0, #8
   1109c:	4b08      	ldr	r3, [pc, #32]	; (110c0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1109e:	4798      	blx	r3
   110a0:	e7c9      	b.n	11036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   110a2:	46c0      	nop			; (mov r8, r8)
   110a4:	20003170 	.word	0x20003170
   110a8:	0000022a 	.word	0x0000022a
   110ac:	0000022b 	.word	0x0000022b
   110b0:	000110d5 	.word	0x000110d5
   110b4:	0000d069 	.word	0x0000d069
   110b8:	0000fba1 	.word	0x0000fba1
   110bc:	000109dd 	.word	0x000109dd
   110c0:	00010dd5 	.word	0x00010dd5
   110c4:	000103e1 	.word	0x000103e1
   110c8:	0000fb1d 	.word	0x0000fb1d
   110cc:	0000ec0d 	.word	0x0000ec0d
   110d0:	00010411 	.word	0x00010411

000110d4 <AckRetransmissionCallback>:
   110d4:	b510      	push	{r4, lr}
   110d6:	4c1c      	ldr	r4, [pc, #112]	; (11148 <AckRetransmissionCallback+0x74>)
   110d8:	0023      	movs	r3, r4
   110da:	3384      	adds	r3, #132	; 0x84
   110dc:	781b      	ldrb	r3, [r3, #0]
   110de:	2b7f      	cmp	r3, #127	; 0x7f
   110e0:	d82d      	bhi.n	1113e <AckRetransmissionCallback+0x6a>
   110e2:	0023      	movs	r3, r4
   110e4:	33fd      	adds	r3, #253	; 0xfd
   110e6:	781b      	ldrb	r3, [r3, #0]
   110e8:	2b04      	cmp	r3, #4
   110ea:	d102      	bne.n	110f2 <AckRetransmissionCallback+0x1e>
   110ec:	4b17      	ldr	r3, [pc, #92]	; (1114c <AckRetransmissionCallback+0x78>)
   110ee:	4798      	blx	r3
   110f0:	e01e      	b.n	11130 <AckRetransmissionCallback+0x5c>
   110f2:	2b01      	cmp	r3, #1
   110f4:	d11c      	bne.n	11130 <AckRetransmissionCallback+0x5c>
   110f6:	0022      	movs	r2, r4
   110f8:	0023      	movs	r3, r4
   110fa:	32e4      	adds	r2, #228	; 0xe4
   110fc:	33e2      	adds	r3, #226	; 0xe2
   110fe:	7812      	ldrb	r2, [r2, #0]
   11100:	781b      	ldrb	r3, [r3, #0]
   11102:	429a      	cmp	r2, r3
   11104:	d815      	bhi.n	11132 <AckRetransmissionCallback+0x5e>
   11106:	4b12      	ldr	r3, [pc, #72]	; (11150 <AckRetransmissionCallback+0x7c>)
   11108:	5ce3      	ldrb	r3, [r4, r3]
   1110a:	2b00      	cmp	r3, #0
   1110c:	d011      	beq.n	11132 <AckRetransmissionCallback+0x5e>
   1110e:	4b11      	ldr	r3, [pc, #68]	; (11154 <AckRetransmissionCallback+0x80>)
   11110:	4798      	blx	r3
   11112:	34ce      	adds	r4, #206	; 0xce
   11114:	300d      	adds	r0, #13
   11116:	8823      	ldrh	r3, [r4, #0]
   11118:	b280      	uxth	r0, r0
   1111a:	4283      	cmp	r3, r0
   1111c:	d801      	bhi.n	11122 <AckRetransmissionCallback+0x4e>
   1111e:	4b0e      	ldr	r3, [pc, #56]	; (11158 <AckRetransmissionCallback+0x84>)
   11120:	e7e5      	b.n	110ee <AckRetransmissionCallback+0x1a>
   11122:	4b0e      	ldr	r3, [pc, #56]	; (1115c <AckRetransmissionCallback+0x88>)
   11124:	4798      	blx	r3
   11126:	4b0e      	ldr	r3, [pc, #56]	; (11160 <AckRetransmissionCallback+0x8c>)
   11128:	4798      	blx	r3
   1112a:	200e      	movs	r0, #14
   1112c:	4b0d      	ldr	r3, [pc, #52]	; (11164 <AckRetransmissionCallback+0x90>)
   1112e:	4798      	blx	r3
   11130:	bd10      	pop	{r4, pc}
   11132:	4b0a      	ldr	r3, [pc, #40]	; (1115c <AckRetransmissionCallback+0x88>)
   11134:	4798      	blx	r3
   11136:	4b0a      	ldr	r3, [pc, #40]	; (11160 <AckRetransmissionCallback+0x8c>)
   11138:	4798      	blx	r3
   1113a:	2012      	movs	r0, #18
   1113c:	e7f6      	b.n	1112c <AckRetransmissionCallback+0x58>
   1113e:	4b07      	ldr	r3, [pc, #28]	; (1115c <AckRetransmissionCallback+0x88>)
   11140:	4798      	blx	r3
   11142:	4b07      	ldr	r3, [pc, #28]	; (11160 <AckRetransmissionCallback+0x8c>)
   11144:	e7d3      	b.n	110ee <AckRetransmissionCallback+0x1a>
   11146:	46c0      	nop			; (mov r8, r8)
   11148:	20003170 	.word	0x20003170
   1114c:	00010fd5 	.word	0x00010fd5
   11150:	0000022a 	.word	0x0000022a
   11154:	0000fba1 	.word	0x0000fba1
   11158:	000109dd 	.word	0x000109dd
   1115c:	000103e1 	.word	0x000103e1
   11160:	0000fb1d 	.word	0x0000fb1d
   11164:	00010dd5 	.word	0x00010dd5

00011168 <LORAWAN_RxTimeout>:
   11168:	4b24      	ldr	r3, [pc, #144]	; (111fc <LORAWAN_RxTimeout+0x94>)
   1116a:	b510      	push	{r4, lr}
   1116c:	001a      	movs	r2, r3
   1116e:	3284      	adds	r2, #132	; 0x84
   11170:	7812      	ldrb	r2, [r2, #0]
   11172:	b251      	sxtb	r1, r2
   11174:	2900      	cmp	r1, #0
   11176:	db27      	blt.n	111c8 <LORAWAN_RxTimeout+0x60>
   11178:	0019      	movs	r1, r3
   1117a:	31fd      	adds	r1, #253	; 0xfd
   1117c:	7809      	ldrb	r1, [r1, #0]
   1117e:	2904      	cmp	r1, #4
   11180:	d108      	bne.n	11194 <LORAWAN_RxTimeout+0x2c>
   11182:	3903      	subs	r1, #3
   11184:	420a      	tst	r2, r1
   11186:	d005      	beq.n	11194 <LORAWAN_RxTimeout+0x2c>
   11188:	2290      	movs	r2, #144	; 0x90
   1118a:	0092      	lsls	r2, r2, #2
   1118c:	5499      	strb	r1, [r3, r2]
   1118e:	4b1c      	ldr	r3, [pc, #112]	; (11200 <LORAWAN_RxTimeout+0x98>)
   11190:	4798      	blx	r3
   11192:	bd10      	pop	{r4, pc}
   11194:	210e      	movs	r1, #14
   11196:	0010      	movs	r0, r2
   11198:	4008      	ands	r0, r1
   1119a:	2806      	cmp	r0, #6
   1119c:	d107      	bne.n	111ae <LORAWAN_RxTimeout+0x46>
   1119e:	3384      	adds	r3, #132	; 0x84
   111a0:	781a      	ldrb	r2, [r3, #0]
   111a2:	438a      	bics	r2, r1
   111a4:	0011      	movs	r1, r2
   111a6:	2208      	movs	r2, #8
   111a8:	430a      	orrs	r2, r1
   111aa:	701a      	strb	r2, [r3, #0]
   111ac:	e7f1      	b.n	11192 <LORAWAN_RxTimeout+0x2a>
   111ae:	2004      	movs	r0, #4
   111b0:	3394      	adds	r3, #148	; 0x94
   111b2:	781b      	ldrb	r3, [r3, #0]
   111b4:	4203      	tst	r3, r0
   111b6:	d002      	beq.n	111be <LORAWAN_RxTimeout+0x56>
   111b8:	4b12      	ldr	r3, [pc, #72]	; (11204 <LORAWAN_RxTimeout+0x9c>)
   111ba:	4798      	blx	r3
   111bc:	e7e9      	b.n	11192 <LORAWAN_RxTimeout+0x2a>
   111be:	07d3      	lsls	r3, r2, #31
   111c0:	d5e7      	bpl.n	11192 <LORAWAN_RxTimeout+0x2a>
   111c2:	4b11      	ldr	r3, [pc, #68]	; (11208 <LORAWAN_RxTimeout+0xa0>)
   111c4:	4798      	blx	r3
   111c6:	e7e4      	b.n	11192 <LORAWAN_RxTimeout+0x2a>
   111c8:	4810      	ldr	r0, [pc, #64]	; (1120c <LORAWAN_RxTimeout+0xa4>)
   111ca:	7841      	ldrb	r1, [r0, #1]
   111cc:	7802      	ldrb	r2, [r0, #0]
   111ce:	0209      	lsls	r1, r1, #8
   111d0:	4311      	orrs	r1, r2
   111d2:	7882      	ldrb	r2, [r0, #2]
   111d4:	0412      	lsls	r2, r2, #16
   111d6:	4311      	orrs	r1, r2
   111d8:	78c2      	ldrb	r2, [r0, #3]
   111da:	0612      	lsls	r2, r2, #24
   111dc:	430a      	orrs	r2, r1
   111de:	d0d8      	beq.n	11192 <LORAWAN_RxTimeout+0x2a>
   111e0:	2188      	movs	r1, #136	; 0x88
   111e2:	2001      	movs	r0, #1
   111e4:	0089      	lsls	r1, r1, #2
   111e6:	5458      	strb	r0, [r3, r1]
   111e8:	0019      	movs	r1, r3
   111ea:	2404      	movs	r4, #4
   111ec:	31ff      	adds	r1, #255	; 0xff
   111ee:	33fc      	adds	r3, #252	; 0xfc
   111f0:	734c      	strb	r4, [r1, #13]
   111f2:	7448      	strb	r0, [r1, #17]
   111f4:	4906      	ldr	r1, [pc, #24]	; (11210 <LORAWAN_RxTimeout+0xa8>)
   111f6:	68d8      	ldr	r0, [r3, #12]
   111f8:	4790      	blx	r2
   111fa:	e7ca      	b.n	11192 <LORAWAN_RxTimeout+0x2a>
   111fc:	20003170 	.word	0x20003170
   11200:	00012da1 	.word	0x00012da1
   11204:	00010435 	.word	0x00010435
   11208:	00010fd5 	.word	0x00010fd5
   1120c:	200034cc 	.word	0x200034cc
   11210:	2000327c 	.word	0x2000327c

00011214 <LorawanConfigureRadioForRX2>:
   11214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11216:	466b      	mov	r3, sp
   11218:	1cdd      	adds	r5, r3, #3
   1121a:	2300      	movs	r3, #0
   1121c:	702b      	strb	r3, [r5, #0]
   1121e:	2390      	movs	r3, #144	; 0x90
   11220:	4c29      	ldr	r4, [pc, #164]	; (112c8 <LorawanConfigureRadioForRX2+0xb4>)
   11222:	009b      	lsls	r3, r3, #2
   11224:	5ce1      	ldrb	r1, [r4, r3]
   11226:	0006      	movs	r6, r0
   11228:	0023      	movs	r3, r4
   1122a:	2900      	cmp	r1, #0
   1122c:	d02f      	beq.n	1128e <LorawanConfigureRadioForRX2+0x7a>
   1122e:	3373      	adds	r3, #115	; 0x73
   11230:	781b      	ldrb	r3, [r3, #0]
   11232:	702b      	strb	r3, [r5, #0]
   11234:	0023      	movs	r3, r4
   11236:	6f22      	ldr	r2, [r4, #112]	; 0x70
   11238:	336f      	adds	r3, #111	; 0x6f
   1123a:	781b      	ldrb	r3, [r3, #0]
   1123c:	0211      	lsls	r1, r2, #8
   1123e:	4319      	orrs	r1, r3
   11240:	7828      	ldrb	r0, [r5, #0]
   11242:	4b22      	ldr	r3, [pc, #136]	; (112cc <LorawanConfigureRadioForRX2+0xb8>)
   11244:	4798      	blx	r3
   11246:	2300      	movs	r3, #0
   11248:	0022      	movs	r2, r4
   1124a:	af01      	add	r7, sp, #4
   1124c:	703b      	strb	r3, [r7, #0]
   1124e:	32fd      	adds	r2, #253	; 0xfd
   11250:	7812      	ldrb	r2, [r2, #0]
   11252:	2a04      	cmp	r2, #4
   11254:	d130      	bne.n	112b8 <LorawanConfigureRadioForRX2+0xa4>
   11256:	0022      	movs	r2, r4
   11258:	3284      	adds	r2, #132	; 0x84
   1125a:	7812      	ldrb	r2, [r2, #0]
   1125c:	07d2      	lsls	r2, r2, #31
   1125e:	d52b      	bpl.n	112b8 <LorawanConfigureRadioForRX2+0xa4>
   11260:	2290      	movs	r2, #144	; 0x90
   11262:	0092      	lsls	r2, r2, #2
   11264:	5ca2      	ldrb	r2, [r4, r2]
   11266:	429a      	cmp	r2, r3
   11268:	d026      	beq.n	112b8 <LorawanConfigureRadioForRX2+0xa4>
   1126a:	807b      	strh	r3, [r7, #2]
   1126c:	0038      	movs	r0, r7
   1126e:	4b18      	ldr	r3, [pc, #96]	; (112d0 <LorawanConfigureRadioForRX2+0xbc>)
   11270:	4798      	blx	r3
   11272:	1e04      	subs	r4, r0, #0
   11274:	d00a      	beq.n	1128c <LorawanConfigureRadioForRX2+0x78>
   11276:	4b17      	ldr	r3, [pc, #92]	; (112d4 <LorawanConfigureRadioForRX2+0xc0>)
   11278:	4798      	blx	r3
   1127a:	4b17      	ldr	r3, [pc, #92]	; (112d8 <LorawanConfigureRadioForRX2+0xc4>)
   1127c:	4798      	blx	r3
   1127e:	4b17      	ldr	r3, [pc, #92]	; (112dc <LorawanConfigureRadioForRX2+0xc8>)
   11280:	4798      	blx	r3
   11282:	2e00      	cmp	r6, #0
   11284:	d002      	beq.n	1128c <LorawanConfigureRadioForRX2+0x78>
   11286:	0020      	movs	r0, r4
   11288:	4b15      	ldr	r3, [pc, #84]	; (112e0 <LorawanConfigureRadioForRX2+0xcc>)
   1128a:	4798      	blx	r3
   1128c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1128e:	3394      	adds	r3, #148	; 0x94
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	075b      	lsls	r3, r3, #29
   11294:	d50b      	bpl.n	112ae <LorawanConfigureRadioForRX2+0x9a>
   11296:	002a      	movs	r2, r5
   11298:	2009      	movs	r0, #9
   1129a:	4b12      	ldr	r3, [pc, #72]	; (112e4 <LorawanConfigureRadioForRX2+0xd0>)
   1129c:	4798      	blx	r3
   1129e:	0022      	movs	r2, r4
   112a0:	0023      	movs	r3, r4
   112a2:	326c      	adds	r2, #108	; 0x6c
   112a4:	8811      	ldrh	r1, [r2, #0]
   112a6:	336a      	adds	r3, #106	; 0x6a
   112a8:	881b      	ldrh	r3, [r3, #0]
   112aa:	0409      	lsls	r1, r1, #16
   112ac:	e7c7      	b.n	1123e <LorawanConfigureRadioForRX2+0x2a>
   112ae:	0023      	movs	r3, r4
   112b0:	336e      	adds	r3, #110	; 0x6e
   112b2:	781b      	ldrb	r3, [r3, #0]
   112b4:	702b      	strb	r3, [r5, #0]
   112b6:	e7f2      	b.n	1129e <LorawanConfigureRadioForRX2+0x8a>
   112b8:	466b      	mov	r3, sp
   112ba:	0029      	movs	r1, r5
   112bc:	1d9a      	adds	r2, r3, #6
   112be:	2003      	movs	r0, #3
   112c0:	4b08      	ldr	r3, [pc, #32]	; (112e4 <LorawanConfigureRadioForRX2+0xd0>)
   112c2:	4798      	blx	r3
   112c4:	e7d2      	b.n	1126c <LorawanConfigureRadioForRX2+0x58>
   112c6:	46c0      	nop			; (mov r8, r8)
   112c8:	20003170 	.word	0x20003170
   112cc:	00010901 	.word	0x00010901
   112d0:	0000f505 	.word	0x0000f505
   112d4:	000103e1 	.word	0x000103e1
   112d8:	00010411 	.word	0x00010411
   112dc:	0000fb1d 	.word	0x0000fb1d
   112e0:	00010dd5 	.word	0x00010dd5
   112e4:	0000cb21 	.word	0x0000cb21

000112e8 <SetReceptionNotOkState>:
   112e8:	4a0c      	ldr	r2, [pc, #48]	; (1131c <SetReceptionNotOkState+0x34>)
   112ea:	b510      	push	{r4, lr}
   112ec:	0013      	movs	r3, r2
   112ee:	33fd      	adds	r3, #253	; 0xfd
   112f0:	7819      	ldrb	r1, [r3, #0]
   112f2:	0013      	movs	r3, r2
   112f4:	4c0a      	ldr	r4, [pc, #40]	; (11320 <SetReceptionNotOkState+0x38>)
   112f6:	3384      	adds	r3, #132	; 0x84
   112f8:	2904      	cmp	r1, #4
   112fa:	d105      	bne.n	11308 <SetReceptionNotOkState+0x20>
   112fc:	2088      	movs	r0, #136	; 0x88
   112fe:	3903      	subs	r1, #3
   11300:	0080      	lsls	r0, r0, #2
   11302:	5411      	strb	r1, [r2, r0]
   11304:	3020      	adds	r0, #32
   11306:	5411      	strb	r1, [r2, r0]
   11308:	210e      	movs	r1, #14
   1130a:	781a      	ldrb	r2, [r3, #0]
   1130c:	2000      	movs	r0, #0
   1130e:	438a      	bics	r2, r1
   11310:	0011      	movs	r1, r2
   11312:	220a      	movs	r2, #10
   11314:	430a      	orrs	r2, r1
   11316:	701a      	strb	r2, [r3, #0]
   11318:	47a0      	blx	r4
   1131a:	bd10      	pop	{r4, pc}
   1131c:	20003170 	.word	0x20003170
   11320:	00011215 	.word	0x00011215

00011324 <LorawanProcessFcntDown>:
   11324:	b570      	push	{r4, r5, r6, lr}
   11326:	79c3      	ldrb	r3, [r0, #7]
   11328:	7982      	ldrb	r2, [r0, #6]
   1132a:	4c1f      	ldr	r4, [pc, #124]	; (113a8 <LorawanProcessFcntDown+0x84>)
   1132c:	021b      	lsls	r3, r3, #8
   1132e:	4313      	orrs	r3, r2
   11330:	0022      	movs	r2, r4
   11332:	218b      	movs	r1, #139	; 0x8b
   11334:	328c      	adds	r2, #140	; 0x8c
   11336:	8810      	ldrh	r0, [r2, #0]
   11338:	0089      	lsls	r1, r1, #2
   1133a:	8013      	strh	r3, [r2, #0]
   1133c:	4298      	cmp	r0, r3
   1133e:	d80f      	bhi.n	11360 <LorawanProcessFcntDown+0x3c>
   11340:	5c61      	ldrb	r1, [r4, r1]
   11342:	2900      	cmp	r1, #0
   11344:	d007      	beq.n	11356 <LorawanProcessFcntDown+0x32>
   11346:	2301      	movs	r3, #1
   11348:	408b      	lsls	r3, r1
   1134a:	6812      	ldr	r2, [r2, #0]
   1134c:	3b01      	subs	r3, #1
   1134e:	421a      	tst	r2, r3
   11350:	d001      	beq.n	11356 <LorawanProcessFcntDown+0x32>
   11352:	2008      	movs	r0, #8
   11354:	bd70      	pop	{r4, r5, r6, pc}
   11356:	210a      	movs	r1, #10
   11358:	4b14      	ldr	r3, [pc, #80]	; (113ac <LorawanProcessFcntDown+0x88>)
   1135a:	2001      	movs	r0, #1
   1135c:	4798      	blx	r3
   1135e:	e7f8      	b.n	11352 <LorawanProcessFcntDown+0x2e>
   11360:	0020      	movs	r0, r4
   11362:	308e      	adds	r0, #142	; 0x8e
   11364:	8803      	ldrh	r3, [r0, #0]
   11366:	3301      	adds	r3, #1
   11368:	8003      	strh	r3, [r0, #0]
   1136a:	5c61      	ldrb	r1, [r4, r1]
   1136c:	2900      	cmp	r1, #0
   1136e:	d005      	beq.n	1137c <LorawanProcessFcntDown+0x58>
   11370:	2301      	movs	r3, #1
   11372:	408b      	lsls	r3, r1
   11374:	6812      	ldr	r2, [r2, #0]
   11376:	3b01      	subs	r3, #1
   11378:	421a      	tst	r2, r3
   1137a:	d103      	bne.n	11384 <LorawanProcessFcntDown+0x60>
   1137c:	210a      	movs	r1, #10
   1137e:	2001      	movs	r0, #1
   11380:	4b0a      	ldr	r3, [pc, #40]	; (113ac <LorawanProcessFcntDown+0x88>)
   11382:	4798      	blx	r3
   11384:	0023      	movs	r3, r4
   11386:	338c      	adds	r3, #140	; 0x8c
   11388:	681b      	ldr	r3, [r3, #0]
   1138a:	3301      	adds	r3, #1
   1138c:	d1e1      	bne.n	11352 <LorawanProcessFcntDown+0x2e>
   1138e:	2501      	movs	r5, #1
   11390:	3484      	adds	r4, #132	; 0x84
   11392:	78a3      	ldrb	r3, [r4, #2]
   11394:	432b      	orrs	r3, r5
   11396:	70a3      	strb	r3, [r4, #2]
   11398:	4b05      	ldr	r3, [pc, #20]	; (113b0 <LorawanProcessFcntDown+0x8c>)
   1139a:	4798      	blx	r3
   1139c:	210b      	movs	r1, #11
   1139e:	0028      	movs	r0, r5
   113a0:	4b02      	ldr	r3, [pc, #8]	; (113ac <LorawanProcessFcntDown+0x88>)
   113a2:	4798      	blx	r3
   113a4:	200d      	movs	r0, #13
   113a6:	e7d5      	b.n	11354 <LorawanProcessFcntDown+0x30>
   113a8:	20003170 	.word	0x20003170
   113ac:	000092e9 	.word	0x000092e9
   113b0:	000112e9 	.word	0x000112e9

000113b4 <UpdateCurrentDataRateAfterDataRangeChanges>:
   113b4:	4b09      	ldr	r3, [pc, #36]	; (113dc <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   113b6:	001a      	movs	r2, r3
   113b8:	32f4      	adds	r2, #244	; 0xf4
   113ba:	7811      	ldrb	r1, [r2, #0]
   113bc:	001a      	movs	r2, r3
   113be:	32e7      	adds	r2, #231	; 0xe7
   113c0:	7810      	ldrb	r0, [r2, #0]
   113c2:	4288      	cmp	r0, r1
   113c4:	d900      	bls.n	113c8 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   113c6:	7011      	strb	r1, [r2, #0]
   113c8:	001a      	movs	r2, r3
   113ca:	33e7      	adds	r3, #231	; 0xe7
   113cc:	32f3      	adds	r2, #243	; 0xf3
   113ce:	7812      	ldrb	r2, [r2, #0]
   113d0:	7819      	ldrb	r1, [r3, #0]
   113d2:	4291      	cmp	r1, r2
   113d4:	d200      	bcs.n	113d8 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   113d6:	701a      	strb	r2, [r3, #0]
   113d8:	4770      	bx	lr
   113da:	46c0      	nop			; (mov r8, r8)
   113dc:	20003170 	.word	0x20003170

000113e0 <ExecuteNewChannel>:
   113e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113e2:	b08d      	sub	sp, #52	; 0x34
   113e4:	7807      	ldrb	r7, [r0, #0]
   113e6:	ab02      	add	r3, sp, #8
   113e8:	0006      	movs	r6, r0
   113ea:	71df      	strb	r7, [r3, #7]
   113ec:	1c41      	adds	r1, r0, #1
   113ee:	4b59      	ldr	r3, [pc, #356]	; (11554 <ExecuteNewChannel+0x174>)
   113f0:	2204      	movs	r2, #4
   113f2:	a808      	add	r0, sp, #32
   113f4:	4798      	blx	r3
   113f6:	9b08      	ldr	r3, [sp, #32]
   113f8:	4c57      	ldr	r4, [pc, #348]	; (11558 <ExecuteNewChannel+0x178>)
   113fa:	021d      	lsls	r5, r3, #8
   113fc:	2364      	movs	r3, #100	; 0x64
   113fe:	0a2d      	lsrs	r5, r5, #8
   11400:	435d      	muls	r5, r3
   11402:	1d73      	adds	r3, r6, #5
   11404:	9301      	str	r3, [sp, #4]
   11406:	0023      	movs	r3, r4
   11408:	9508      	str	r5, [sp, #32]
   1140a:	33ff      	adds	r3, #255	; 0xff
   1140c:	781b      	ldrb	r3, [r3, #0]
   1140e:	3b02      	subs	r3, #2
   11410:	2b01      	cmp	r3, #1
   11412:	d800      	bhi.n	11416 <ExecuteNewChannel+0x36>
   11414:	e092      	b.n	1153c <ExecuteNewChannel+0x15c>
   11416:	7933      	ldrb	r3, [r6, #4]
   11418:	a904      	add	r1, sp, #16
   1141a:	9300      	str	r3, [sp, #0]
   1141c:	2300      	movs	r3, #0
   1141e:	2015      	movs	r0, #21
   11420:	4e4e      	ldr	r6, [pc, #312]	; (1155c <ExecuteNewChannel+0x17c>)
   11422:	700f      	strb	r7, [r1, #0]
   11424:	704b      	strb	r3, [r1, #1]
   11426:	47b0      	blx	r6
   11428:	2808      	cmp	r0, #8
   1142a:	d12b      	bne.n	11484 <ExecuteNewChannel+0xa4>
   1142c:	466a      	mov	r2, sp
   1142e:	ab02      	add	r3, sp, #8
   11430:	79db      	ldrb	r3, [r3, #7]
   11432:	7812      	ldrb	r2, [r2, #0]
   11434:	af06      	add	r7, sp, #24
   11436:	a90a      	add	r1, sp, #40	; 0x28
   11438:	3806      	subs	r0, #6
   1143a:	703b      	strb	r3, [r7, #0]
   1143c:	707a      	strb	r2, [r7, #1]
   1143e:	710b      	strb	r3, [r1, #4]
   11440:	950a      	str	r5, [sp, #40]	; 0x28
   11442:	47b0      	blx	r6
   11444:	2808      	cmp	r0, #8
   11446:	d001      	beq.n	1144c <ExecuteNewChannel+0x6c>
   11448:	2d00      	cmp	r5, #0
   1144a:	d10b      	bne.n	11464 <ExecuteNewChannel+0x84>
   1144c:	0023      	movs	r3, r4
   1144e:	33e0      	adds	r3, #224	; 0xe0
   11450:	781a      	ldrb	r2, [r3, #0]
   11452:	2303      	movs	r3, #3
   11454:	4353      	muls	r3, r2
   11456:	2280      	movs	r2, #128	; 0x80
   11458:	18e3      	adds	r3, r4, r3
   1145a:	3398      	adds	r3, #152	; 0x98
   1145c:	7899      	ldrb	r1, [r3, #2]
   1145e:	4252      	negs	r2, r2
   11460:	430a      	orrs	r2, r1
   11462:	709a      	strb	r2, [r3, #2]
   11464:	0039      	movs	r1, r7
   11466:	2012      	movs	r0, #18
   11468:	47b0      	blx	r6
   1146a:	2808      	cmp	r0, #8
   1146c:	d10a      	bne.n	11484 <ExecuteNewChannel+0xa4>
   1146e:	0023      	movs	r3, r4
   11470:	33e0      	adds	r3, #224	; 0xe0
   11472:	781a      	ldrb	r2, [r3, #0]
   11474:	2303      	movs	r3, #3
   11476:	4353      	muls	r3, r2
   11478:	2240      	movs	r2, #64	; 0x40
   1147a:	18e3      	adds	r3, r4, r3
   1147c:	3398      	adds	r3, #152	; 0x98
   1147e:	7899      	ldrb	r1, [r3, #2]
   11480:	430a      	orrs	r2, r1
   11482:	709a      	strb	r2, [r3, #2]
   11484:	0023      	movs	r3, r4
   11486:	33e0      	adds	r3, #224	; 0xe0
   11488:	781a      	ldrb	r2, [r3, #0]
   1148a:	2303      	movs	r3, #3
   1148c:	4353      	muls	r3, r2
   1148e:	18e3      	adds	r3, r4, r3
   11490:	3398      	adds	r3, #152	; 0x98
   11492:	789b      	ldrb	r3, [r3, #2]
   11494:	09da      	lsrs	r2, r3, #7
   11496:	2a01      	cmp	r2, #1
   11498:	d150      	bne.n	1153c <ExecuteNewChannel+0x15c>
   1149a:	065b      	lsls	r3, r3, #25
   1149c:	d54e      	bpl.n	1153c <ExecuteNewChannel+0x15c>
   1149e:	4e30      	ldr	r6, [pc, #192]	; (11560 <ExecuteNewChannel+0x180>)
   114a0:	2d00      	cmp	r5, #0
   114a2:	d04e      	beq.n	11542 <ExecuteNewChannel+0x162>
   114a4:	a906      	add	r1, sp, #24
   114a6:	2012      	movs	r0, #18
   114a8:	47b0      	blx	r6
   114aa:	ad07      	add	r5, sp, #28
   114ac:	a90a      	add	r1, sp, #40	; 0x28
   114ae:	2000      	movs	r0, #0
   114b0:	47b0      	blx	r6
   114b2:	002a      	movs	r2, r5
   114b4:	2100      	movs	r1, #0
   114b6:	2014      	movs	r0, #20
   114b8:	4f2a      	ldr	r7, [pc, #168]	; (11564 <ExecuteNewChannel+0x184>)
   114ba:	47b8      	blx	r7
   114bc:	0023      	movs	r3, r4
   114be:	782a      	ldrb	r2, [r5, #0]
   114c0:	33f3      	adds	r3, #243	; 0xf3
   114c2:	701a      	strb	r2, [r3, #0]
   114c4:	0023      	movs	r3, r4
   114c6:	786a      	ldrb	r2, [r5, #1]
   114c8:	33f4      	adds	r3, #244	; 0xf4
   114ca:	701a      	strb	r2, [r3, #0]
   114cc:	34ff      	adds	r4, #255	; 0xff
   114ce:	4b26      	ldr	r3, [pc, #152]	; (11568 <ExecuteNewChannel+0x188>)
   114d0:	4798      	blx	r3
   114d2:	7f63      	ldrb	r3, [r4, #29]
   114d4:	079b      	lsls	r3, r3, #30
   114d6:	d50e      	bpl.n	114f6 <ExecuteNewChannel+0x116>
   114d8:	2416      	movs	r4, #22
   114da:	ab02      	add	r3, sp, #8
   114dc:	18e4      	adds	r4, r4, r3
   114de:	1dd9      	adds	r1, r3, #7
   114e0:	0022      	movs	r2, r4
   114e2:	201e      	movs	r0, #30
   114e4:	47b8      	blx	r7
   114e6:	ab02      	add	r3, sp, #8
   114e8:	79db      	ldrb	r3, [r3, #7]
   114ea:	a909      	add	r1, sp, #36	; 0x24
   114ec:	708b      	strb	r3, [r1, #2]
   114ee:	8823      	ldrh	r3, [r4, #0]
   114f0:	201e      	movs	r0, #30
   114f2:	800b      	strh	r3, [r1, #0]
   114f4:	47b0      	blx	r6
   114f6:	ab02      	add	r3, sp, #8
   114f8:	79db      	ldrb	r3, [r3, #7]
   114fa:	a905      	add	r1, sp, #20
   114fc:	700b      	strb	r3, [r1, #0]
   114fe:	2301      	movs	r3, #1
   11500:	2016      	movs	r0, #22
   11502:	704b      	strb	r3, [r1, #1]
   11504:	4b16      	ldr	r3, [pc, #88]	; (11560 <ExecuteNewChannel+0x180>)
   11506:	4798      	blx	r3
   11508:	ad09      	add	r5, sp, #36	; 0x24
   1150a:	2100      	movs	r1, #0
   1150c:	002a      	movs	r2, r5
   1150e:	4b15      	ldr	r3, [pc, #84]	; (11564 <ExecuteNewChannel+0x184>)
   11510:	2014      	movs	r0, #20
   11512:	4798      	blx	r3
   11514:	4c10      	ldr	r4, [pc, #64]	; (11558 <ExecuteNewChannel+0x178>)
   11516:	782a      	ldrb	r2, [r5, #0]
   11518:	0023      	movs	r3, r4
   1151a:	33f3      	adds	r3, #243	; 0xf3
   1151c:	701a      	strb	r2, [r3, #0]
   1151e:	0023      	movs	r3, r4
   11520:	786a      	ldrb	r2, [r5, #1]
   11522:	33f4      	adds	r3, #244	; 0xf4
   11524:	701a      	strb	r2, [r3, #0]
   11526:	4b10      	ldr	r3, [pc, #64]	; (11568 <ExecuteNewChannel+0x188>)
   11528:	4798      	blx	r3
   1152a:	2304      	movs	r3, #4
   1152c:	3484      	adds	r4, #132	; 0x84
   1152e:	7862      	ldrb	r2, [r4, #1]
   11530:	210b      	movs	r1, #11
   11532:	4313      	orrs	r3, r2
   11534:	7063      	strb	r3, [r4, #1]
   11536:	2001      	movs	r0, #1
   11538:	4b0c      	ldr	r3, [pc, #48]	; (1156c <ExecuteNewChannel+0x18c>)
   1153a:	4798      	blx	r3
   1153c:	9801      	ldr	r0, [sp, #4]
   1153e:	b00d      	add	sp, #52	; 0x34
   11540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11542:	ab02      	add	r3, sp, #8
   11544:	79db      	ldrb	r3, [r3, #7]
   11546:	a905      	add	r1, sp, #20
   11548:	2016      	movs	r0, #22
   1154a:	700b      	strb	r3, [r1, #0]
   1154c:	704d      	strb	r5, [r1, #1]
   1154e:	47b0      	blx	r6
   11550:	e7da      	b.n	11508 <ExecuteNewChannel+0x128>
   11552:	46c0      	nop			; (mov r8, r8)
   11554:	0001678b 	.word	0x0001678b
   11558:	20003170 	.word	0x20003170
   1155c:	0000cb3d 	.word	0x0000cb3d
   11560:	0000cb59 	.word	0x0000cb59
   11564:	0000cb21 	.word	0x0000cb21
   11568:	000113b5 	.word	0x000113b5
   1156c:	000092e9 	.word	0x000092e9

00011570 <MacExecuteCommands>:
   11570:	b5f0      	push	{r4, r5, r6, r7, lr}
   11572:	1843      	adds	r3, r0, r1
   11574:	b087      	sub	sp, #28
   11576:	9301      	str	r3, [sp, #4]
   11578:	2300      	movs	r3, #0
   1157a:	0007      	movs	r7, r0
   1157c:	2501      	movs	r5, #1
   1157e:	9302      	str	r3, [sp, #8]
   11580:	9b01      	ldr	r3, [sp, #4]
   11582:	4e71      	ldr	r6, [pc, #452]	; (11748 <MacExecuteCommands+0x1d8>)
   11584:	429f      	cmp	r7, r3
   11586:	d362      	bcc.n	1164e <MacExecuteCommands+0xde>
   11588:	4b70      	ldr	r3, [pc, #448]	; (1174c <MacExecuteCommands+0x1dc>)
   1158a:	5cf3      	ldrb	r3, [r6, r3]
   1158c:	2b00      	cmp	r3, #0
   1158e:	d000      	beq.n	11592 <MacExecuteCommands+0x22>
   11590:	e08f      	b.n	116b2 <MacExecuteCommands+0x142>
   11592:	0038      	movs	r0, r7
   11594:	b007      	add	sp, #28
   11596:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11598:	0032      	movs	r2, r6
   1159a:	7879      	ldrb	r1, [r7, #1]
   1159c:	32e5      	adds	r2, #229	; 0xe5
   1159e:	7011      	strb	r1, [r2, #0]
   115a0:	0032      	movs	r2, r6
   115a2:	78b9      	ldrb	r1, [r7, #2]
   115a4:	32e6      	adds	r2, #230	; 0xe6
   115a6:	1cfc      	adds	r4, r7, #3
   115a8:	7011      	strb	r1, [r2, #0]
   115aa:	2203      	movs	r2, #3
   115ac:	4353      	muls	r3, r2
   115ae:	18f3      	adds	r3, r6, r3
   115b0:	3399      	adds	r3, #153	; 0x99
   115b2:	32fc      	adds	r2, #252	; 0xfc
   115b4:	701a      	strb	r2, [r3, #0]
   115b6:	e020      	b.n	115fa <MacExecuteCommands+0x8a>
   115b8:	0020      	movs	r0, r4
   115ba:	4b65      	ldr	r3, [pc, #404]	; (11750 <MacExecuteCommands+0x1e0>)
   115bc:	4798      	blx	r3
   115be:	0004      	movs	r4, r0
   115c0:	e01b      	b.n	115fa <MacExecuteCommands+0x8a>
   115c2:	0020      	movs	r0, r4
   115c4:	4b63      	ldr	r3, [pc, #396]	; (11754 <MacExecuteCommands+0x1e4>)
   115c6:	e7f9      	b.n	115bc <MacExecuteCommands+0x4c>
   115c8:	0020      	movs	r0, r4
   115ca:	4b63      	ldr	r3, [pc, #396]	; (11758 <MacExecuteCommands+0x1e8>)
   115cc:	e7f6      	b.n	115bc <MacExecuteCommands+0x4c>
   115ce:	0020      	movs	r0, r4
   115d0:	4b62      	ldr	r3, [pc, #392]	; (1175c <MacExecuteCommands+0x1ec>)
   115d2:	e7f3      	b.n	115bc <MacExecuteCommands+0x4c>
   115d4:	7878      	ldrb	r0, [r7, #1]
   115d6:	230f      	movs	r3, #15
   115d8:	0002      	movs	r2, r0
   115da:	1cbc      	adds	r4, r7, #2
   115dc:	439a      	bics	r2, r3
   115de:	d10c      	bne.n	115fa <MacExecuteCommands+0x8a>
   115e0:	4b5f      	ldr	r3, [pc, #380]	; (11760 <MacExecuteCommands+0x1f0>)
   115e2:	4798      	blx	r3
   115e4:	0032      	movs	r2, r6
   115e6:	2380      	movs	r3, #128	; 0x80
   115e8:	3284      	adds	r2, #132	; 0x84
   115ea:	7851      	ldrb	r1, [r2, #1]
   115ec:	425b      	negs	r3, r3
   115ee:	430b      	orrs	r3, r1
   115f0:	7053      	strb	r3, [r2, #1]
   115f2:	210b      	movs	r1, #11
   115f4:	0028      	movs	r0, r5
   115f6:	4b5b      	ldr	r3, [pc, #364]	; (11764 <MacExecuteCommands+0x1f4>)
   115f8:	4798      	blx	r3
   115fa:	0032      	movs	r2, r6
   115fc:	2103      	movs	r1, #3
   115fe:	32e0      	adds	r2, #224	; 0xe0
   11600:	7813      	ldrb	r3, [r2, #0]
   11602:	4359      	muls	r1, r3
   11604:	1876      	adds	r6, r6, r1
   11606:	3699      	adds	r6, #153	; 0x99
   11608:	7831      	ldrb	r1, [r6, #0]
   1160a:	29ff      	cmp	r1, #255	; 0xff
   1160c:	d003      	beq.n	11616 <MacExecuteCommands+0xa6>
   1160e:	2b0f      	cmp	r3, #15
   11610:	d801      	bhi.n	11616 <MacExecuteCommands+0xa6>
   11612:	3301      	adds	r3, #1
   11614:	7013      	strb	r3, [r2, #0]
   11616:	0027      	movs	r7, r4
   11618:	e7b2      	b.n	11580 <MacExecuteCommands+0x10>
   1161a:	0020      	movs	r0, r4
   1161c:	4b52      	ldr	r3, [pc, #328]	; (11768 <MacExecuteCommands+0x1f8>)
   1161e:	e7cd      	b.n	115bc <MacExecuteCommands+0x4c>
   11620:	0020      	movs	r0, r4
   11622:	4b52      	ldr	r3, [pc, #328]	; (1176c <MacExecuteCommands+0x1fc>)
   11624:	e7ca      	b.n	115bc <MacExecuteCommands+0x4c>
   11626:	0020      	movs	r0, r4
   11628:	4b51      	ldr	r3, [pc, #324]	; (11770 <MacExecuteCommands+0x200>)
   1162a:	4798      	blx	r3
   1162c:	0033      	movs	r3, r6
   1162e:	33e0      	adds	r3, #224	; 0xe0
   11630:	0004      	movs	r4, r0
   11632:	781b      	ldrb	r3, [r3, #0]
   11634:	e7b9      	b.n	115aa <MacExecuteCommands+0x3a>
   11636:	2203      	movs	r2, #3
   11638:	4353      	muls	r3, r2
   1163a:	18f3      	adds	r3, r6, r3
   1163c:	3399      	adds	r3, #153	; 0x99
   1163e:	32fc      	adds	r2, #252	; 0xfc
   11640:	701a      	strb	r2, [r3, #0]
   11642:	9c01      	ldr	r4, [sp, #4]
   11644:	9502      	str	r5, [sp, #8]
   11646:	e7d8      	b.n	115fa <MacExecuteCommands+0x8a>
   11648:	23ff      	movs	r3, #255	; 0xff
   1164a:	7013      	strb	r3, [r2, #0]
   1164c:	e7f9      	b.n	11642 <MacExecuteCommands+0xd2>
   1164e:	9b02      	ldr	r3, [sp, #8]
   11650:	2b00      	cmp	r3, #0
   11652:	d199      	bne.n	11588 <MacExecuteCommands+0x18>
   11654:	0033      	movs	r3, r6
   11656:	2203      	movs	r2, #3
   11658:	33e0      	adds	r3, #224	; 0xe0
   1165a:	781b      	ldrb	r3, [r3, #0]
   1165c:	2401      	movs	r4, #1
   1165e:	435a      	muls	r2, r3
   11660:	18b2      	adds	r2, r6, r2
   11662:	0010      	movs	r0, r2
   11664:	3098      	adds	r0, #152	; 0x98
   11666:	7881      	ldrb	r1, [r0, #2]
   11668:	3299      	adds	r2, #153	; 0x99
   1166a:	43a9      	bics	r1, r5
   1166c:	4021      	ands	r1, r4
   1166e:	7081      	strb	r1, [r0, #2]
   11670:	78c1      	ldrb	r1, [r0, #3]
   11672:	193c      	adds	r4, r7, r4
   11674:	43a9      	bics	r1, r5
   11676:	70c1      	strb	r1, [r0, #3]
   11678:	7839      	ldrb	r1, [r7, #0]
   1167a:	7011      	strb	r1, [r2, #0]
   1167c:	7838      	ldrb	r0, [r7, #0]
   1167e:	493d      	ldr	r1, [pc, #244]	; (11774 <MacExecuteCommands+0x204>)
   11680:	1809      	adds	r1, r1, r0
   11682:	3902      	subs	r1, #2
   11684:	7809      	ldrb	r1, [r1, #0]
   11686:	1861      	adds	r1, r4, r1
   11688:	468c      	mov	ip, r1
   1168a:	9901      	ldr	r1, [sp, #4]
   1168c:	4561      	cmp	r1, ip
   1168e:	d3db      	bcc.n	11648 <MacExecuteCommands+0xd8>
   11690:	3802      	subs	r0, #2
   11692:	280b      	cmp	r0, #11
   11694:	d8cf      	bhi.n	11636 <MacExecuteCommands+0xc6>
   11696:	f001 ff33 	bl	13500 <__gnu_thumb1_case_shi>
   1169a:	ff7f      	.short	0xff7f
   1169c:	ff94ff8f 	.word	0xff94ff8f
   116a0:	ffb0ff97 	.word	0xffb0ff97
   116a4:	ff9dff9a 	.word	0xff9dff9a
   116a8:	ffc3ffc0 	.word	0xffc3ffc0
   116ac:	ffceffce 	.word	0xffceffce
   116b0:	ffc6      	.short	0xffc6
   116b2:	4b31      	ldr	r3, [pc, #196]	; (11778 <MacExecuteCommands+0x208>)
   116b4:	5cf3      	ldrb	r3, [r6, r3]
   116b6:	43db      	mvns	r3, r3
   116b8:	075b      	lsls	r3, r3, #29
   116ba:	d000      	beq.n	116be <MacExecuteCommands+0x14e>
   116bc:	e769      	b.n	11592 <MacExecuteCommands+0x22>
   116be:	4b2f      	ldr	r3, [pc, #188]	; (1177c <MacExecuteCommands+0x20c>)
   116c0:	ad05      	add	r5, sp, #20
   116c2:	5cf4      	ldrb	r4, [r6, r3]
   116c4:	2100      	movs	r1, #0
   116c6:	0724      	lsls	r4, r4, #28
   116c8:	0f24      	lsrs	r4, r4, #28
   116ca:	b2e3      	uxtb	r3, r4
   116cc:	9301      	str	r3, [sp, #4]
   116ce:	4b2c      	ldr	r3, [pc, #176]	; (11780 <MacExecuteCommands+0x210>)
   116d0:	002a      	movs	r2, r5
   116d2:	5cf3      	ldrb	r3, [r6, r3]
   116d4:	2014      	movs	r0, #20
   116d6:	9302      	str	r3, [sp, #8]
   116d8:	2389      	movs	r3, #137	; 0x89
   116da:	009b      	lsls	r3, r3, #2
   116dc:	5cf3      	ldrb	r3, [r6, r3]
   116de:	9303      	str	r3, [sp, #12]
   116e0:	4b28      	ldr	r3, [pc, #160]	; (11784 <MacExecuteCommands+0x214>)
   116e2:	4798      	blx	r3
   116e4:	0033      	movs	r3, r6
   116e6:	782a      	ldrb	r2, [r5, #0]
   116e8:	33f3      	adds	r3, #243	; 0xf3
   116ea:	701a      	strb	r2, [r3, #0]
   116ec:	0033      	movs	r3, r6
   116ee:	786a      	ldrb	r2, [r5, #1]
   116f0:	33f4      	adds	r3, #244	; 0xf4
   116f2:	701a      	strb	r2, [r3, #0]
   116f4:	4b24      	ldr	r3, [pc, #144]	; (11788 <MacExecuteCommands+0x218>)
   116f6:	4798      	blx	r3
   116f8:	9802      	ldr	r0, [sp, #8]
   116fa:	4b24      	ldr	r3, [pc, #144]	; (1178c <MacExecuteCommands+0x21c>)
   116fc:	4798      	blx	r3
   116fe:	0032      	movs	r2, r6
   11700:	2308      	movs	r3, #8
   11702:	3284      	adds	r2, #132	; 0x84
   11704:	7851      	ldrb	r1, [r2, #1]
   11706:	430b      	orrs	r3, r1
   11708:	7053      	strb	r3, [r2, #1]
   1170a:	9803      	ldr	r0, [sp, #12]
   1170c:	4b20      	ldr	r3, [pc, #128]	; (11790 <MacExecuteCommands+0x220>)
   1170e:	4798      	blx	r3
   11710:	0033      	movs	r3, r6
   11712:	b2e2      	uxtb	r2, r4
   11714:	33e1      	adds	r3, #225	; 0xe1
   11716:	2a00      	cmp	r2, #0
   11718:	d10e      	bne.n	11738 <MacExecuteCommands+0x1c8>
   1171a:	701c      	strb	r4, [r3, #0]
   1171c:	2113      	movs	r1, #19
   1171e:	4c11      	ldr	r4, [pc, #68]	; (11764 <MacExecuteCommands+0x1f4>)
   11720:	2000      	movs	r0, #0
   11722:	47a0      	blx	r4
   11724:	2210      	movs	r2, #16
   11726:	4b08      	ldr	r3, [pc, #32]	; (11748 <MacExecuteCommands+0x1d8>)
   11728:	2001      	movs	r0, #1
   1172a:	3384      	adds	r3, #132	; 0x84
   1172c:	7859      	ldrb	r1, [r3, #1]
   1172e:	430a      	orrs	r2, r1
   11730:	705a      	strb	r2, [r3, #1]
   11732:	210b      	movs	r1, #11
   11734:	47a0      	blx	r4
   11736:	e72c      	b.n	11592 <MacExecuteCommands+0x22>
   11738:	9a01      	ldr	r2, [sp, #4]
   1173a:	3a01      	subs	r2, #1
   1173c:	b2d2      	uxtb	r2, r2
   1173e:	701a      	strb	r2, [r3, #0]
   11740:	0033      	movs	r3, r6
   11742:	33e2      	adds	r3, #226	; 0xe2
   11744:	701a      	strb	r2, [r3, #0]
   11746:	e7e9      	b.n	1171c <MacExecuteCommands+0x1ac>
   11748:	20003170 	.word	0x20003170
   1174c:	00000226 	.word	0x00000226
   11750:	000106d1 	.word	0x000106d1
   11754:	00010595 	.word	0x00010595
   11758:	00010499 	.word	0x00010499
   1175c:	000113e1 	.word	0x000113e1
   11760:	0000fbc5 	.word	0x0000fbc5
   11764:	000092e9 	.word	0x000092e9
   11768:	00010681 	.word	0x00010681
   1176c:	000105cd 	.word	0x000105cd
   11770:	00010809 	.word	0x00010809
   11774:	00018b43 	.word	0x00018b43
   11778:	00000223 	.word	0x00000223
   1177c:	00000229 	.word	0x00000229
   11780:	00000225 	.word	0x00000225
   11784:	0000cb21 	.word	0x0000cb21
   11788:	000113b5 	.word	0x000113b5
   1178c:	00010329 	.word	0x00010329
   11790:	000102bd 	.word	0x000102bd

00011794 <LorawanSetDataRange>:
   11794:	2201      	movs	r2, #1
   11796:	b530      	push	{r4, r5, lr}
   11798:	b085      	sub	sp, #20
   1179a:	ab01      	add	r3, sp, #4
   1179c:	ac02      	add	r4, sp, #8
   1179e:	7018      	strb	r0, [r3, #0]
   117a0:	7020      	strb	r0, [r4, #0]
   117a2:	7061      	strb	r1, [r4, #1]
   117a4:	2015      	movs	r0, #21
   117a6:	0019      	movs	r1, r3
   117a8:	4d11      	ldr	r5, [pc, #68]	; (117f0 <LorawanSetDataRange+0x5c>)
   117aa:	705a      	strb	r2, [r3, #1]
   117ac:	47a8      	blx	r5
   117ae:	2808      	cmp	r0, #8
   117b0:	d003      	beq.n	117ba <LorawanSetDataRange+0x26>
   117b2:	250a      	movs	r5, #10
   117b4:	0028      	movs	r0, r5
   117b6:	b005      	add	sp, #20
   117b8:	bd30      	pop	{r4, r5, pc}
   117ba:	0021      	movs	r1, r4
   117bc:	2012      	movs	r0, #18
   117be:	47a8      	blx	r5
   117c0:	0005      	movs	r5, r0
   117c2:	2808      	cmp	r0, #8
   117c4:	d1f5      	bne.n	117b2 <LorawanSetDataRange+0x1e>
   117c6:	0021      	movs	r1, r4
   117c8:	4b0a      	ldr	r3, [pc, #40]	; (117f4 <LorawanSetDataRange+0x60>)
   117ca:	ac03      	add	r4, sp, #12
   117cc:	2012      	movs	r0, #18
   117ce:	4798      	blx	r3
   117d0:	0022      	movs	r2, r4
   117d2:	2100      	movs	r1, #0
   117d4:	4b08      	ldr	r3, [pc, #32]	; (117f8 <LorawanSetDataRange+0x64>)
   117d6:	2014      	movs	r0, #20
   117d8:	4798      	blx	r3
   117da:	4b08      	ldr	r3, [pc, #32]	; (117fc <LorawanSetDataRange+0x68>)
   117dc:	7821      	ldrb	r1, [r4, #0]
   117de:	001a      	movs	r2, r3
   117e0:	32f3      	adds	r2, #243	; 0xf3
   117e2:	7011      	strb	r1, [r2, #0]
   117e4:	7862      	ldrb	r2, [r4, #1]
   117e6:	33f4      	adds	r3, #244	; 0xf4
   117e8:	701a      	strb	r2, [r3, #0]
   117ea:	4b05      	ldr	r3, [pc, #20]	; (11800 <LorawanSetDataRange+0x6c>)
   117ec:	4798      	blx	r3
   117ee:	e7e1      	b.n	117b4 <LorawanSetDataRange+0x20>
   117f0:	0000cb3d 	.word	0x0000cb3d
   117f4:	0000cb59 	.word	0x0000cb59
   117f8:	0000cb21 	.word	0x0000cb21
   117fc:	20003170 	.word	0x20003170
   11800:	000113b5 	.word	0x000113b5

00011804 <LorawanSetChannelIdStatus>:
   11804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11806:	466b      	mov	r3, sp
   11808:	7018      	strb	r0, [r3, #0]
   1180a:	7059      	strb	r1, [r3, #1]
   1180c:	2016      	movs	r0, #22
   1180e:	4669      	mov	r1, sp
   11810:	4b0c      	ldr	r3, [pc, #48]	; (11844 <LorawanSetChannelIdStatus+0x40>)
   11812:	4798      	blx	r3
   11814:	0004      	movs	r4, r0
   11816:	2808      	cmp	r0, #8
   11818:	d111      	bne.n	1183e <LorawanSetChannelIdStatus+0x3a>
   1181a:	ad01      	add	r5, sp, #4
   1181c:	002a      	movs	r2, r5
   1181e:	2100      	movs	r1, #0
   11820:	4b09      	ldr	r3, [pc, #36]	; (11848 <LorawanSetChannelIdStatus+0x44>)
   11822:	2014      	movs	r0, #20
   11824:	4798      	blx	r3
   11826:	4b09      	ldr	r3, [pc, #36]	; (1184c <LorawanSetChannelIdStatus+0x48>)
   11828:	7829      	ldrb	r1, [r5, #0]
   1182a:	001a      	movs	r2, r3
   1182c:	32f3      	adds	r2, #243	; 0xf3
   1182e:	7011      	strb	r1, [r2, #0]
   11830:	786a      	ldrb	r2, [r5, #1]
   11832:	33f4      	adds	r3, #244	; 0xf4
   11834:	701a      	strb	r2, [r3, #0]
   11836:	4b06      	ldr	r3, [pc, #24]	; (11850 <LorawanSetChannelIdStatus+0x4c>)
   11838:	4798      	blx	r3
   1183a:	0020      	movs	r0, r4
   1183c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1183e:	240a      	movs	r4, #10
   11840:	e7fb      	b.n	1183a <LorawanSetChannelIdStatus+0x36>
   11842:	46c0      	nop			; (mov r8, r8)
   11844:	0000cb59 	.word	0x0000cb59
   11848:	0000cb21 	.word	0x0000cb21
   1184c:	20003170 	.word	0x20003170
   11850:	000113b5 	.word	0x000113b5

00011854 <LORAWAN_RxDone>:
   11854:	b5f0      	push	{r4, r5, r6, r7, lr}
   11856:	4bc4      	ldr	r3, [pc, #784]	; (11b68 <LORAWAN_RxDone+0x314>)
   11858:	b093      	sub	sp, #76	; 0x4c
   1185a:	781b      	ldrb	r3, [r3, #0]
   1185c:	0007      	movs	r7, r0
   1185e:	b25a      	sxtb	r2, r3
   11860:	9106      	str	r1, [sp, #24]
   11862:	4cc2      	ldr	r4, [pc, #776]	; (11b6c <LORAWAN_RxDone+0x318>)
   11864:	2a00      	cmp	r2, #0
   11866:	da01      	bge.n	1186c <LORAWAN_RxDone+0x18>
   11868:	f000 fc86 	bl	12178 <LORAWAN_RxDone+0x924>
   1186c:	7801      	ldrb	r1, [r0, #0]
   1186e:	221f      	movs	r2, #31
   11870:	000e      	movs	r6, r1
   11872:	4396      	bics	r6, r2
   11874:	2e20      	cmp	r6, #32
   11876:	d000      	beq.n	1187a <LORAWAN_RxDone+0x26>
   11878:	e1ae      	b.n	11bd8 <LORAWAN_RxDone+0x384>
   1187a:	7822      	ldrb	r2, [r4, #0]
   1187c:	2a00      	cmp	r2, #0
   1187e:	d001      	beq.n	11884 <LORAWAN_RxDone+0x30>
   11880:	f000 fc66 	bl	12150 <LORAWAN_RxDone+0x8fc>
   11884:	0022      	movs	r2, r4
   11886:	3294      	adds	r2, #148	; 0x94
   11888:	7812      	ldrb	r2, [r2, #0]
   1188a:	0752      	lsls	r2, r2, #29
   1188c:	d401      	bmi.n	11892 <LORAWAN_RxDone+0x3e>
   1188e:	f000 fc5f 	bl	12150 <LORAWAN_RxDone+0x8fc>
   11892:	9b06      	ldr	r3, [sp, #24]
   11894:	3b01      	subs	r3, #1
   11896:	b2db      	uxtb	r3, r3
   11898:	9307      	str	r3, [sp, #28]
   1189a:	4bb5      	ldr	r3, [pc, #724]	; (11b70 <LORAWAN_RxDone+0x31c>)
   1189c:	469c      	mov	ip, r3
   1189e:	9b07      	ldr	r3, [sp, #28]
   118a0:	2b00      	cmp	r3, #0
   118a2:	d12c      	bne.n	118fe <LORAWAN_RxDone+0xaa>
   118a4:	9b06      	ldr	r3, [sp, #24]
   118a6:	4660      	mov	r0, ip
   118a8:	1f1d      	subs	r5, r3, #4
   118aa:	b2eb      	uxtb	r3, r5
   118ac:	9300      	str	r3, [sp, #0]
   118ae:	4ab1      	ldr	r2, [pc, #708]	; (11b74 <LORAWAN_RxDone+0x320>)
   118b0:	003b      	movs	r3, r7
   118b2:	9907      	ldr	r1, [sp, #28]
   118b4:	4eb0      	ldr	r6, [pc, #704]	; (11b78 <LORAWAN_RxDone+0x324>)
   118b6:	47b0      	blx	r6
   118b8:	2204      	movs	r2, #4
   118ba:	49ae      	ldr	r1, [pc, #696]	; (11b74 <LORAWAN_RxDone+0x320>)
   118bc:	4baf      	ldr	r3, [pc, #700]	; (11b7c <LORAWAN_RxDone+0x328>)
   118be:	a810      	add	r0, sp, #64	; 0x40
   118c0:	4798      	blx	r3
   118c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
   118c4:	1979      	adds	r1, r7, r5
   118c6:	2204      	movs	r2, #4
   118c8:	4bac      	ldr	r3, [pc, #688]	; (11b7c <LORAWAN_RxDone+0x328>)
   118ca:	a810      	add	r0, sp, #64	; 0x40
   118cc:	960d      	str	r6, [sp, #52]	; 0x34
   118ce:	4798      	blx	r3
   118d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   118d2:	4ba6      	ldr	r3, [pc, #664]	; (11b6c <LORAWAN_RxDone+0x318>)
   118d4:	210e      	movs	r1, #14
   118d6:	42b2      	cmp	r2, r6
   118d8:	d029      	beq.n	1192e <LORAWAN_RxDone+0xda>
   118da:	001a      	movs	r2, r3
   118dc:	3284      	adds	r2, #132	; 0x84
   118de:	7812      	ldrb	r2, [r2, #0]
   118e0:	400a      	ands	r2, r1
   118e2:	2a0a      	cmp	r2, #10
   118e4:	d005      	beq.n	118f2 <LORAWAN_RxDone+0x9e>
   118e6:	2a06      	cmp	r2, #6
   118e8:	d106      	bne.n	118f8 <LORAWAN_RxDone+0xa4>
   118ea:	33f9      	adds	r3, #249	; 0xf9
   118ec:	781b      	ldrb	r3, [r3, #0]
   118ee:	2b00      	cmp	r3, #0
   118f0:	d002      	beq.n	118f8 <LORAWAN_RxDone+0xa4>
   118f2:	2018      	movs	r0, #24
   118f4:	4ba2      	ldr	r3, [pc, #648]	; (11b80 <LORAWAN_RxDone+0x32c>)
   118f6:	4798      	blx	r3
   118f8:	4ba2      	ldr	r3, [pc, #648]	; (11b84 <LORAWAN_RxDone+0x330>)
   118fa:	4798      	blx	r3
   118fc:	e1d0      	b.n	11ca0 <LORAWAN_RxDone+0x44c>
   118fe:	9b06      	ldr	r3, [sp, #24]
   11900:	9a07      	ldr	r2, [sp, #28]
   11902:	2100      	movs	r1, #0
   11904:	1a98      	subs	r0, r3, r2
   11906:	1838      	adds	r0, r7, r0
   11908:	4662      	mov	r2, ip
   1190a:	4b9f      	ldr	r3, [pc, #636]	; (11b88 <LORAWAN_RxDone+0x334>)
   1190c:	4798      	blx	r3
   1190e:	2800      	cmp	r0, #0
   11910:	d006      	beq.n	11920 <LORAWAN_RxDone+0xcc>
   11912:	4b9b      	ldr	r3, [pc, #620]	; (11b80 <LORAWAN_RxDone+0x32c>)
   11914:	4798      	blx	r3
   11916:	4b9b      	ldr	r3, [pc, #620]	; (11b84 <LORAWAN_RxDone+0x330>)
   11918:	4798      	blx	r3
   1191a:	201f      	movs	r0, #31
   1191c:	b013      	add	sp, #76	; 0x4c
   1191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11920:	9b07      	ldr	r3, [sp, #28]
   11922:	2b10      	cmp	r3, #16
   11924:	d901      	bls.n	1192a <LORAWAN_RxDone+0xd6>
   11926:	3b10      	subs	r3, #16
   11928:	e7b5      	b.n	11896 <LORAWAN_RxDone+0x42>
   1192a:	9007      	str	r0, [sp, #28]
   1192c:	e7b5      	b.n	1189a <LORAWAN_RxDone+0x46>
   1192e:	001a      	movs	r2, r3
   11930:	3284      	adds	r2, #132	; 0x84
   11932:	7812      	ldrb	r2, [r2, #0]
   11934:	400a      	ands	r2, r1
   11936:	2a06      	cmp	r2, #6
   11938:	d103      	bne.n	11942 <LORAWAN_RxDone+0xee>
   1193a:	33ec      	adds	r3, #236	; 0xec
   1193c:	7818      	ldrb	r0, [r3, #0]
   1193e:	4b93      	ldr	r3, [pc, #588]	; (11b8c <LORAWAN_RxDone+0x338>)
   11940:	4798      	blx	r3
   11942:	7a3a      	ldrb	r2, [r7, #8]
   11944:	79fb      	ldrb	r3, [r7, #7]
   11946:	0212      	lsls	r2, r2, #8
   11948:	431a      	orrs	r2, r3
   1194a:	7a7b      	ldrb	r3, [r7, #9]
   1194c:	2001      	movs	r0, #1
   1194e:	041b      	lsls	r3, r3, #16
   11950:	431a      	orrs	r2, r3
   11952:	7abb      	ldrb	r3, [r7, #10]
   11954:	061b      	lsls	r3, r3, #24
   11956:	4313      	orrs	r3, r2
   11958:	0a19      	lsrs	r1, r3, #8
   1195a:	7063      	strb	r3, [r4, #1]
   1195c:	70a1      	strb	r1, [r4, #2]
   1195e:	0c19      	lsrs	r1, r3, #16
   11960:	0e1b      	lsrs	r3, r3, #24
   11962:	70e1      	strb	r1, [r4, #3]
   11964:	7123      	strb	r3, [r4, #4]
   11966:	240f      	movs	r4, #15
   11968:	2103      	movs	r1, #3
   1196a:	4b89      	ldr	r3, [pc, #548]	; (11b90 <LORAWAN_RxDone+0x33c>)
   1196c:	4798      	blx	r3
   1196e:	7b38      	ldrb	r0, [r7, #12]
   11970:	4b88      	ldr	r3, [pc, #544]	; (11b94 <LORAWAN_RxDone+0x340>)
   11972:	4020      	ands	r0, r4
   11974:	4798      	blx	r3
   11976:	7af8      	ldrb	r0, [r7, #11]
   11978:	4b87      	ldr	r3, [pc, #540]	; (11b98 <LORAWAN_RxDone+0x344>)
   1197a:	0641      	lsls	r1, r0, #25
   1197c:	0700      	lsls	r0, r0, #28
   1197e:	0f49      	lsrs	r1, r1, #29
   11980:	0f00      	lsrs	r0, r0, #28
   11982:	4798      	blx	r3
   11984:	4b85      	ldr	r3, [pc, #532]	; (11b9c <LORAWAN_RxDone+0x348>)
   11986:	2100      	movs	r1, #0
   11988:	203b      	movs	r0, #59	; 0x3b
   1198a:	4798      	blx	r3
   1198c:	9b06      	ldr	r3, [sp, #24]
   1198e:	2b21      	cmp	r3, #33	; 0x21
   11990:	d000      	beq.n	11994 <LORAWAN_RxDone+0x140>
   11992:	e08c      	b.n	11aae <LORAWAN_RxDone+0x25a>
   11994:	251a      	movs	r5, #26
   11996:	ab04      	add	r3, sp, #16
   11998:	18ed      	adds	r5, r5, r3
   1199a:	002a      	movs	r2, r5
   1199c:	4b80      	ldr	r3, [pc, #512]	; (11ba0 <LORAWAN_RxDone+0x34c>)
   1199e:	4981      	ldr	r1, [pc, #516]	; (11ba4 <LORAWAN_RxDone+0x350>)
   119a0:	2007      	movs	r0, #7
   119a2:	4798      	blx	r3
   119a4:	782b      	ldrb	r3, [r5, #0]
   119a6:	2bff      	cmp	r3, #255	; 0xff
   119a8:	d100      	bne.n	119ac <LORAWAN_RxDone+0x158>
   119aa:	e080      	b.n	11aae <LORAWAN_RxDone+0x25a>
   119ac:	2350      	movs	r3, #80	; 0x50
   119ae:	43a3      	bics	r3, r4
   119b0:	9308      	str	r3, [sp, #32]
   119b2:	003b      	movs	r3, r7
   119b4:	330d      	adds	r3, #13
   119b6:	9306      	str	r3, [sp, #24]
   119b8:	2600      	movs	r6, #0
   119ba:	2203      	movs	r2, #3
   119bc:	9906      	ldr	r1, [sp, #24]
   119be:	4b6f      	ldr	r3, [pc, #444]	; (11b7c <LORAWAN_RxDone+0x328>)
   119c0:	a80e      	add	r0, sp, #56	; 0x38
   119c2:	960e      	str	r6, [sp, #56]	; 0x38
   119c4:	4798      	blx	r3
   119c6:	2364      	movs	r3, #100	; 0x64
   119c8:	990e      	ldr	r1, [sp, #56]	; 0x38
   119ca:	aa04      	add	r2, sp, #16
   119cc:	4359      	muls	r1, r3
   119ce:	3b4a      	subs	r3, #74	; 0x4a
   119d0:	189b      	adds	r3, r3, r2
   119d2:	7818      	ldrb	r0, [r3, #0]
   119d4:	9b07      	ldr	r3, [sp, #28]
   119d6:	910e      	str	r1, [sp, #56]	; 0x38
   119d8:	1818      	adds	r0, r3, r0
   119da:	b2c0      	uxtb	r0, r0
   119dc:	76d0      	strb	r0, [r2, #27]
   119de:	42b1      	cmp	r1, r6
   119e0:	d100      	bne.n	119e4 <LORAWAN_RxDone+0x190>
   119e2:	e0a7      	b.n	11b34 <LORAWAN_RxDone+0x2e0>
   119e4:	466b      	mov	r3, sp
   119e6:	2220      	movs	r2, #32
   119e8:	189b      	adds	r3, r3, r2
   119ea:	781b      	ldrb	r3, [r3, #0]
   119ec:	ad10      	add	r5, sp, #64	; 0x40
   119ee:	ac0b      	add	r4, sp, #44	; 0x2c
   119f0:	7128      	strb	r0, [r5, #4]
   119f2:	9110      	str	r1, [sp, #64]	; 0x40
   119f4:	7020      	strb	r0, [r4, #0]
   119f6:	7063      	strb	r3, [r4, #1]
   119f8:	0029      	movs	r1, r5
   119fa:	2002      	movs	r0, #2
   119fc:	4b6a      	ldr	r3, [pc, #424]	; (11ba8 <LORAWAN_RxDone+0x354>)
   119fe:	4798      	blx	r3
   11a00:	2808      	cmp	r0, #8
   11a02:	d140      	bne.n	11a86 <LORAWAN_RxDone+0x232>
   11a04:	0029      	movs	r1, r5
   11a06:	0030      	movs	r0, r6
   11a08:	4b64      	ldr	r3, [pc, #400]	; (11b9c <LORAWAN_RxDone+0x348>)
   11a0a:	4798      	blx	r3
   11a0c:	ad0c      	add	r5, sp, #48	; 0x30
   11a0e:	0021      	movs	r1, r4
   11a10:	4b62      	ldr	r3, [pc, #392]	; (11b9c <LORAWAN_RxDone+0x348>)
   11a12:	2012      	movs	r0, #18
   11a14:	4798      	blx	r3
   11a16:	0031      	movs	r1, r6
   11a18:	002a      	movs	r2, r5
   11a1a:	4e61      	ldr	r6, [pc, #388]	; (11ba0 <LORAWAN_RxDone+0x34c>)
   11a1c:	2014      	movs	r0, #20
   11a1e:	47b0      	blx	r6
   11a20:	4c52      	ldr	r4, [pc, #328]	; (11b6c <LORAWAN_RxDone+0x318>)
   11a22:	782a      	ldrb	r2, [r5, #0]
   11a24:	0023      	movs	r3, r4
   11a26:	33f3      	adds	r3, #243	; 0xf3
   11a28:	701a      	strb	r2, [r3, #0]
   11a2a:	0023      	movs	r3, r4
   11a2c:	786a      	ldrb	r2, [r5, #1]
   11a2e:	2522      	movs	r5, #34	; 0x22
   11a30:	33f4      	adds	r3, #244	; 0xf4
   11a32:	701a      	strb	r2, [r3, #0]
   11a34:	4b5d      	ldr	r3, [pc, #372]	; (11bac <LORAWAN_RxDone+0x358>)
   11a36:	4798      	blx	r3
   11a38:	ab04      	add	r3, sp, #16
   11a3a:	18ed      	adds	r5, r5, r3
   11a3c:	231b      	movs	r3, #27
   11a3e:	a904      	add	r1, sp, #16
   11a40:	185b      	adds	r3, r3, r1
   11a42:	0019      	movs	r1, r3
   11a44:	002a      	movs	r2, r5
   11a46:	201e      	movs	r0, #30
   11a48:	47b0      	blx	r6
   11a4a:	0023      	movs	r3, r4
   11a4c:	33ff      	adds	r3, #255	; 0xff
   11a4e:	7f5b      	ldrb	r3, [r3, #29]
   11a50:	079b      	lsls	r3, r3, #30
   11a52:	d508      	bpl.n	11a66 <LORAWAN_RxDone+0x212>
   11a54:	ab04      	add	r3, sp, #16
   11a56:	7edb      	ldrb	r3, [r3, #27]
   11a58:	a90f      	add	r1, sp, #60	; 0x3c
   11a5a:	708b      	strb	r3, [r1, #2]
   11a5c:	882b      	ldrh	r3, [r5, #0]
   11a5e:	201e      	movs	r0, #30
   11a60:	800b      	strh	r3, [r1, #0]
   11a62:	4b4e      	ldr	r3, [pc, #312]	; (11b9c <LORAWAN_RxDone+0x348>)
   11a64:	4798      	blx	r3
   11a66:	231b      	movs	r3, #27
   11a68:	aa04      	add	r2, sp, #16
   11a6a:	189b      	adds	r3, r3, r2
   11a6c:	7818      	ldrb	r0, [r3, #0]
   11a6e:	2101      	movs	r1, #1
   11a70:	4b4f      	ldr	r3, [pc, #316]	; (11bb0 <LORAWAN_RxDone+0x35c>)
   11a72:	4798      	blx	r3
   11a74:	2204      	movs	r2, #4
   11a76:	3484      	adds	r4, #132	; 0x84
   11a78:	7863      	ldrb	r3, [r4, #1]
   11a7a:	210b      	movs	r1, #11
   11a7c:	4313      	orrs	r3, r2
   11a7e:	7063      	strb	r3, [r4, #1]
   11a80:	2001      	movs	r0, #1
   11a82:	4b43      	ldr	r3, [pc, #268]	; (11b90 <LORAWAN_RxDone+0x33c>)
   11a84:	4798      	blx	r3
   11a86:	9b07      	ldr	r3, [sp, #28]
   11a88:	3301      	adds	r3, #1
   11a8a:	b2db      	uxtb	r3, r3
   11a8c:	9307      	str	r3, [sp, #28]
   11a8e:	9b06      	ldr	r3, [sp, #24]
   11a90:	3303      	adds	r3, #3
   11a92:	9306      	str	r3, [sp, #24]
   11a94:	9b07      	ldr	r3, [sp, #28]
   11a96:	2b05      	cmp	r3, #5
   11a98:	d18e      	bne.n	119b8 <LORAWAN_RxDone+0x164>
   11a9a:	2204      	movs	r2, #4
   11a9c:	4b33      	ldr	r3, [pc, #204]	; (11b6c <LORAWAN_RxDone+0x318>)
   11a9e:	2001      	movs	r0, #1
   11aa0:	3384      	adds	r3, #132	; 0x84
   11aa2:	7859      	ldrb	r1, [r3, #1]
   11aa4:	430a      	orrs	r2, r1
   11aa6:	705a      	strb	r2, [r3, #1]
   11aa8:	210b      	movs	r1, #11
   11aaa:	4b39      	ldr	r3, [pc, #228]	; (11b90 <LORAWAN_RxDone+0x33c>)
   11aac:	4798      	blx	r3
   11aae:	4d41      	ldr	r5, [pc, #260]	; (11bb4 <LORAWAN_RxDone+0x360>)
   11ab0:	1c7e      	adds	r6, r7, #1
   11ab2:	3704      	adds	r7, #4
   11ab4:	0028      	movs	r0, r5
   11ab6:	003a      	movs	r2, r7
   11ab8:	0031      	movs	r1, r6
   11aba:	4b3f      	ldr	r3, [pc, #252]	; (11bb8 <LORAWAN_RxDone+0x364>)
   11abc:	4798      	blx	r3
   11abe:	2302      	movs	r3, #2
   11ac0:	4c2a      	ldr	r4, [pc, #168]	; (11b6c <LORAWAN_RxDone+0x318>)
   11ac2:	0028      	movs	r0, r5
   11ac4:	7563      	strb	r3, [r4, #21]
   11ac6:	4a2a      	ldr	r2, [pc, #168]	; (11b70 <LORAWAN_RxDone+0x31c>)
   11ac8:	3b01      	subs	r3, #1
   11aca:	2100      	movs	r1, #0
   11acc:	4d3b      	ldr	r5, [pc, #236]	; (11bbc <LORAWAN_RxDone+0x368>)
   11ace:	47a8      	blx	r5
   11ad0:	2800      	cmp	r0, #0
   11ad2:	d003      	beq.n	11adc <LORAWAN_RxDone+0x288>
   11ad4:	4b2a      	ldr	r3, [pc, #168]	; (11b80 <LORAWAN_RxDone+0x32c>)
   11ad6:	4798      	blx	r3
   11ad8:	4b2a      	ldr	r3, [pc, #168]	; (11b84 <LORAWAN_RxDone+0x330>)
   11ada:	4798      	blx	r3
   11adc:	2105      	movs	r1, #5
   11ade:	4b2c      	ldr	r3, [pc, #176]	; (11b90 <LORAWAN_RxDone+0x33c>)
   11ae0:	2001      	movs	r0, #1
   11ae2:	4798      	blx	r3
   11ae4:	4d36      	ldr	r5, [pc, #216]	; (11bc0 <LORAWAN_RxDone+0x36c>)
   11ae6:	003a      	movs	r2, r7
   11ae8:	0028      	movs	r0, r5
   11aea:	0031      	movs	r1, r6
   11aec:	4b32      	ldr	r3, [pc, #200]	; (11bb8 <LORAWAN_RxDone+0x364>)
   11aee:	4798      	blx	r3
   11af0:	2301      	movs	r3, #1
   11af2:	0028      	movs	r0, r5
   11af4:	7163      	strb	r3, [r4, #5]
   11af6:	4a1e      	ldr	r2, [pc, #120]	; (11b70 <LORAWAN_RxDone+0x31c>)
   11af8:	18db      	adds	r3, r3, r3
   11afa:	2100      	movs	r1, #0
   11afc:	4d2f      	ldr	r5, [pc, #188]	; (11bbc <LORAWAN_RxDone+0x368>)
   11afe:	47a8      	blx	r5
   11b00:	2800      	cmp	r0, #0
   11b02:	d003      	beq.n	11b0c <LORAWAN_RxDone+0x2b8>
   11b04:	4b1e      	ldr	r3, [pc, #120]	; (11b80 <LORAWAN_RxDone+0x32c>)
   11b06:	4798      	blx	r3
   11b08:	4b1e      	ldr	r3, [pc, #120]	; (11b84 <LORAWAN_RxDone+0x330>)
   11b0a:	4798      	blx	r3
   11b0c:	4b20      	ldr	r3, [pc, #128]	; (11b90 <LORAWAN_RxDone+0x33c>)
   11b0e:	2104      	movs	r1, #4
   11b10:	2001      	movs	r0, #1
   11b12:	4798      	blx	r3
   11b14:	4b2b      	ldr	r3, [pc, #172]	; (11bc4 <LORAWAN_RxDone+0x370>)
   11b16:	5ce3      	ldrb	r3, [r4, r3]
   11b18:	2b00      	cmp	r3, #0
   11b1a:	d017      	beq.n	11b4c <LORAWAN_RxDone+0x2f8>
   11b1c:	492a      	ldr	r1, [pc, #168]	; (11bc8 <LORAWAN_RxDone+0x374>)
   11b1e:	2002      	movs	r0, #2
   11b20:	4c2a      	ldr	r4, [pc, #168]	; (11bcc <LORAWAN_RxDone+0x378>)
   11b22:	47a0      	blx	r4
   11b24:	2800      	cmp	r0, #0
   11b26:	d008      	beq.n	11b3a <LORAWAN_RxDone+0x2e6>
   11b28:	4b15      	ldr	r3, [pc, #84]	; (11b80 <LORAWAN_RxDone+0x32c>)
   11b2a:	4798      	blx	r3
   11b2c:	4b15      	ldr	r3, [pc, #84]	; (11b84 <LORAWAN_RxDone+0x330>)
   11b2e:	4798      	blx	r3
   11b30:	2023      	movs	r0, #35	; 0x23
   11b32:	e6f3      	b.n	1191c <LORAWAN_RxDone+0xc8>
   11b34:	4b1e      	ldr	r3, [pc, #120]	; (11bb0 <LORAWAN_RxDone+0x35c>)
   11b36:	4798      	blx	r3
   11b38:	e7a5      	b.n	11a86 <LORAWAN_RxDone+0x232>
   11b3a:	4925      	ldr	r1, [pc, #148]	; (11bd0 <LORAWAN_RxDone+0x37c>)
   11b3c:	2001      	movs	r0, #1
   11b3e:	47a0      	blx	r4
   11b40:	2800      	cmp	r0, #0
   11b42:	d1f1      	bne.n	11b28 <LORAWAN_RxDone+0x2d4>
   11b44:	4b23      	ldr	r3, [pc, #140]	; (11bd4 <LORAWAN_RxDone+0x380>)
   11b46:	4798      	blx	r3
   11b48:	2008      	movs	r0, #8
   11b4a:	e6e7      	b.n	1191c <LORAWAN_RxDone+0xc8>
   11b4c:	0020      	movs	r0, r4
   11b4e:	0021      	movs	r1, r4
   11b50:	2210      	movs	r2, #16
   11b52:	3115      	adds	r1, #21
   11b54:	4d09      	ldr	r5, [pc, #36]	; (11b7c <LORAWAN_RxDone+0x328>)
   11b56:	3035      	adds	r0, #53	; 0x35
   11b58:	47a8      	blx	r5
   11b5a:	0020      	movs	r0, r4
   11b5c:	1d61      	adds	r1, r4, #5
   11b5e:	2210      	movs	r2, #16
   11b60:	3025      	adds	r0, #37	; 0x25
   11b62:	47a8      	blx	r5
   11b64:	e7ee      	b.n	11b44 <LORAWAN_RxDone+0x2f0>
   11b66:	46c0      	nop			; (mov r8, r8)
   11b68:	200031f4 	.word	0x200031f4
   11b6c:	20003170 	.word	0x20003170
   11b70:	200031b5 	.word	0x200031b5
   11b74:	20001eb5 	.word	0x20001eb5
   11b78:	00007259 	.word	0x00007259
   11b7c:	0001678b 	.word	0x0001678b
   11b80:	00010435 	.word	0x00010435
   11b84:	000112e9 	.word	0x000112e9
   11b88:	00007221 	.word	0x00007221
   11b8c:	0000d381 	.word	0x0000d381
   11b90:	000092e9 	.word	0x000092e9
   11b94:	0000fbc5 	.word	0x0000fbc5
   11b98:	000102d9 	.word	0x000102d9
   11b9c:	0000cb59 	.word	0x0000cb59
   11ba0:	0000cb21 	.word	0x0000cb21
   11ba4:	20003257 	.word	0x20003257
   11ba8:	0000cb3d 	.word	0x0000cb3d
   11bac:	000113b5 	.word	0x000113b5
   11bb0:	00011805 	.word	0x00011805
   11bb4:	20003185 	.word	0x20003185
   11bb8:	0000fef1 	.word	0x0000fef1
   11bbc:	00007249 	.word	0x00007249
   11bc0:	20003175 	.word	0x20003175
   11bc4:	0000022d 	.word	0x0000022d
   11bc8:	20003195 	.word	0x20003195
   11bcc:	00007255 	.word	0x00007255
   11bd0:	200031a5 	.word	0x200031a5
   11bd4:	0000fe0d 	.word	0x0000fe0d
   11bd8:	22bf      	movs	r2, #191	; 0xbf
   11bda:	3e60      	subs	r6, #96	; 0x60
   11bdc:	4016      	ands	r6, r2
   11bde:	d000      	beq.n	11be2 <LORAWAN_RxDone+0x38e>
   11be0:	e2b6      	b.n	12150 <LORAWAN_RxDone+0x8fc>
   11be2:	2501      	movs	r5, #1
   11be4:	422b      	tst	r3, r5
   11be6:	d100      	bne.n	11bea <LORAWAN_RxDone+0x396>
   11be8:	e2b2      	b.n	12150 <LORAWAN_RxDone+0x8fc>
   11bea:	7922      	ldrb	r2, [r4, #4]
   11bec:	6823      	ldr	r3, [r4, #0]
   11bee:	0612      	lsls	r2, r2, #24
   11bf0:	0a1b      	lsrs	r3, r3, #8
   11bf2:	431a      	orrs	r2, r3
   11bf4:	0023      	movs	r3, r4
   11bf6:	33e0      	adds	r3, #224	; 0xe0
   11bf8:	701e      	strb	r6, [r3, #0]
   11bfa:	9207      	str	r2, [sp, #28]
   11bfc:	7882      	ldrb	r2, [r0, #2]
   11bfe:	7843      	ldrb	r3, [r0, #1]
   11c00:	0212      	lsls	r2, r2, #8
   11c02:	431a      	orrs	r2, r3
   11c04:	78c3      	ldrb	r3, [r0, #3]
   11c06:	041b      	lsls	r3, r3, #16
   11c08:	431a      	orrs	r2, r3
   11c0a:	7903      	ldrb	r3, [r0, #4]
   11c0c:	061b      	lsls	r3, r3, #24
   11c0e:	4313      	orrs	r3, r2
   11c10:	9a07      	ldr	r2, [sp, #28]
   11c12:	429a      	cmp	r2, r3
   11c14:	d100      	bne.n	11c18 <LORAWAN_RxDone+0x3c4>
   11c16:	e2cc      	b.n	121b2 <LORAWAN_RxDone+0x95e>
   11c18:	ab04      	add	r3, sp, #16
   11c1a:	3521      	adds	r5, #33	; 0x21
   11c1c:	18ed      	adds	r5, r5, r3
   11c1e:	7a02      	ldrb	r2, [r0, #8]
   11c20:	0949      	lsrs	r1, r1, #5
   11c22:	002b      	movs	r3, r5
   11c24:	4eda      	ldr	r6, [pc, #872]	; (11f90 <LORAWAN_RxDone+0x73c>)
   11c26:	47b0      	blx	r6
   11c28:	2808      	cmp	r0, #8
   11c2a:	d131      	bne.n	11c90 <LORAWAN_RxDone+0x43c>
   11c2c:	233c      	movs	r3, #60	; 0x3c
   11c2e:	7829      	ldrb	r1, [r5, #0]
   11c30:	434b      	muls	r3, r1
   11c32:	001d      	movs	r5, r3
   11c34:	3535      	adds	r5, #53	; 0x35
   11c36:	35ff      	adds	r5, #255	; 0xff
   11c38:	192d      	adds	r5, r5, r4
   11c3a:	18e4      	adds	r4, r4, r3
   11c3c:	0023      	movs	r3, r4
   11c3e:	33fc      	adds	r3, #252	; 0xfc
   11c40:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11c44:	9308      	str	r3, [sp, #32]
   11c46:	79fb      	ldrb	r3, [r7, #7]
   11c48:	79ba      	ldrb	r2, [r7, #6]
   11c4a:	021b      	lsls	r3, r3, #8
   11c4c:	4313      	orrs	r3, r2
   11c4e:	0022      	movs	r2, r4
   11c50:	3255      	adds	r2, #85	; 0x55
   11c52:	32ff      	adds	r2, #255	; 0xff
   11c54:	8816      	ldrh	r6, [r2, #0]
   11c56:	429e      	cmp	r6, r3
   11c58:	d908      	bls.n	11c6c <LORAWAN_RxDone+0x418>
   11c5a:	3457      	adds	r4, #87	; 0x57
   11c5c:	34ff      	adds	r4, #255	; 0xff
   11c5e:	8823      	ldrh	r3, [r4, #0]
   11c60:	3301      	adds	r3, #1
   11c62:	8023      	strh	r3, [r4, #0]
   11c64:	79fb      	ldrb	r3, [r7, #7]
   11c66:	79bc      	ldrb	r4, [r7, #6]
   11c68:	021b      	lsls	r3, r3, #8
   11c6a:	4323      	orrs	r3, r4
   11c6c:	8013      	strh	r3, [r2, #0]
   11c6e:	9b06      	ldr	r3, [sp, #24]
   11c70:	9000      	str	r0, [sp, #0]
   11c72:	1f1a      	subs	r2, r3, #4
   11c74:	233c      	movs	r3, #60	; 0x3c
   11c76:	434b      	muls	r3, r1
   11c78:	49c6      	ldr	r1, [pc, #792]	; (11f94 <LORAWAN_RxDone+0x740>)
   11c7a:	b2d2      	uxtb	r2, r2
   11c7c:	18c9      	adds	r1, r1, r3
   11c7e:	31fc      	adds	r1, #252	; 0xfc
   11c80:	2349      	movs	r3, #73	; 0x49
   11c82:	6d89      	ldr	r1, [r1, #88]	; 0x58
   11c84:	2001      	movs	r0, #1
   11c86:	4cc4      	ldr	r4, [pc, #784]	; (11f98 <LORAWAN_RxDone+0x744>)
   11c88:	47a0      	blx	r4
   11c8a:	2301      	movs	r3, #1
   11c8c:	9307      	str	r3, [sp, #28]
   11c8e:	e2a6      	b.n	121de <LORAWAN_RxDone+0x98a>
   11c90:	220e      	movs	r2, #14
   11c92:	4bc2      	ldr	r3, [pc, #776]	; (11f9c <LORAWAN_RxDone+0x748>)
   11c94:	781b      	ldrb	r3, [r3, #0]
   11c96:	4013      	ands	r3, r2
   11c98:	2b0a      	cmp	r3, #10
   11c9a:	d008      	beq.n	11cae <LORAWAN_RxDone+0x45a>
   11c9c:	2b06      	cmp	r3, #6
   11c9e:	d001      	beq.n	11ca4 <LORAWAN_RxDone+0x450>
   11ca0:	200a      	movs	r0, #10
   11ca2:	e63b      	b.n	1191c <LORAWAN_RxDone+0xc8>
   11ca4:	0023      	movs	r3, r4
   11ca6:	33f9      	adds	r3, #249	; 0xf9
   11ca8:	781b      	ldrb	r3, [r3, #0]
   11caa:	2b00      	cmp	r3, #0
   11cac:	d0f8      	beq.n	11ca0 <LORAWAN_RxDone+0x44c>
   11cae:	2220      	movs	r2, #32
   11cb0:	201e      	movs	r0, #30
   11cb2:	3494      	adds	r4, #148	; 0x94
   11cb4:	7823      	ldrb	r3, [r4, #0]
   11cb6:	4393      	bics	r3, r2
   11cb8:	7023      	strb	r3, [r4, #0]
   11cba:	4bb9      	ldr	r3, [pc, #740]	; (11fa0 <LORAWAN_RxDone+0x74c>)
   11cbc:	e61b      	b.n	118f6 <LORAWAN_RxDone+0xa2>
   11cbe:	0022      	movs	r2, r4
   11cc0:	2102      	movs	r1, #2
   11cc2:	e2a6      	b.n	12212 <LORAWAN_RxDone+0x9be>
   11cc4:	9b08      	ldr	r3, [sp, #32]
   11cc6:	328c      	adds	r2, #140	; 0x8c
   11cc8:	6013      	str	r3, [r2, #0]
   11cca:	e2e3      	b.n	12294 <LORAWAN_RxDone+0xa40>
   11ccc:	9b07      	ldr	r3, [sp, #28]
   11cce:	4cb1      	ldr	r4, [pc, #708]	; (11f94 <LORAWAN_RxDone+0x740>)
   11cd0:	2b00      	cmp	r3, #0
   11cd2:	d000      	beq.n	11cd6 <LORAWAN_RxDone+0x482>
   11cd4:	e224      	b.n	12120 <LORAWAN_RxDone+0x8cc>
   11cd6:	466a      	mov	r2, sp
   11cd8:	0023      	movs	r3, r4
   11cda:	7f12      	ldrb	r2, [r2, #28]
   11cdc:	33e3      	adds	r3, #227	; 0xe3
   11cde:	701a      	strb	r2, [r3, #0]
   11ce0:	797b      	ldrb	r3, [r7, #5]
   11ce2:	2b7f      	cmp	r3, #127	; 0x7f
   11ce4:	d909      	bls.n	11cfa <LORAWAN_RxDone+0x4a6>
   11ce6:	0022      	movs	r2, r4
   11ce8:	2320      	movs	r3, #32
   11cea:	3284      	adds	r2, #132	; 0x84
   11cec:	7811      	ldrb	r1, [r2, #0]
   11cee:	2001      	movs	r0, #1
   11cf0:	430b      	orrs	r3, r1
   11cf2:	7013      	strb	r3, [r2, #0]
   11cf4:	210b      	movs	r1, #11
   11cf6:	4bab      	ldr	r3, [pc, #684]	; (11fa4 <LORAWAN_RxDone+0x750>)
   11cf8:	4798      	blx	r3
   11cfa:	797b      	ldrb	r3, [r7, #5]
   11cfc:	06db      	lsls	r3, r3, #27
   11cfe:	d505      	bpl.n	11d0c <LORAWAN_RxDone+0x4b8>
   11d00:	0022      	movs	r2, r4
   11d02:	2308      	movs	r3, #8
   11d04:	3294      	adds	r2, #148	; 0x94
   11d06:	7811      	ldrb	r1, [r2, #0]
   11d08:	430b      	orrs	r3, r1
   11d0a:	7013      	strb	r3, [r2, #0]
   11d0c:	797b      	ldrb	r3, [r7, #5]
   11d0e:	065b      	lsls	r3, r3, #25
   11d10:	d505      	bpl.n	11d1e <LORAWAN_RxDone+0x4ca>
   11d12:	0022      	movs	r2, r4
   11d14:	2310      	movs	r3, #16
   11d16:	3294      	adds	r2, #148	; 0x94
   11d18:	7811      	ldrb	r1, [r2, #0]
   11d1a:	430b      	orrs	r3, r1
   11d1c:	7013      	strb	r3, [r2, #0]
   11d1e:	221f      	movs	r2, #31
   11d20:	783b      	ldrb	r3, [r7, #0]
   11d22:	4393      	bics	r3, r2
   11d24:	2ba0      	cmp	r3, #160	; 0xa0
   11d26:	d105      	bne.n	11d34 <LORAWAN_RxDone+0x4e0>
   11d28:	0022      	movs	r2, r4
   11d2a:	3294      	adds	r2, #148	; 0x94
   11d2c:	7811      	ldrb	r1, [r2, #0]
   11d2e:	3b9e      	subs	r3, #158	; 0x9e
   11d30:	430b      	orrs	r3, r1
   11d32:	7013      	strb	r3, [r2, #0]
   11d34:	7979      	ldrb	r1, [r7, #5]
   11d36:	070b      	lsls	r3, r1, #28
   11d38:	d100      	bne.n	11d3c <LORAWAN_RxDone+0x4e8>
   11d3a:	e0d4      	b.n	11ee6 <LORAWAN_RxDone+0x692>
   11d3c:	0709      	lsls	r1, r1, #28
   11d3e:	0f09      	lsrs	r1, r1, #28
   11d40:	187b      	adds	r3, r7, r1
   11d42:	7a1b      	ldrb	r3, [r3, #8]
   11d44:	2b00      	cmp	r3, #0
   11d46:	d100      	bne.n	11d4a <LORAWAN_RxDone+0x4f6>
   11d48:	e0a9      	b.n	11e9e <LORAWAN_RxDone+0x64a>
   11d4a:	0038      	movs	r0, r7
   11d4c:	4b96      	ldr	r3, [pc, #600]	; (11fa8 <LORAWAN_RxDone+0x754>)
   11d4e:	3008      	adds	r0, #8
   11d50:	4798      	blx	r3
   11d52:	2301      	movs	r3, #1
   11d54:	0006      	movs	r6, r0
   11d56:	9307      	str	r3, [sp, #28]
   11d58:	7978      	ldrb	r0, [r7, #5]
   11d5a:	9906      	ldr	r1, [sp, #24]
   11d5c:	0703      	lsls	r3, r0, #28
   11d5e:	0f1b      	lsrs	r3, r3, #28
   11d60:	001a      	movs	r2, r3
   11d62:	320c      	adds	r2, #12
   11d64:	4291      	cmp	r1, r2
   11d66:	d100      	bne.n	11d6a <LORAWAN_RxDone+0x516>
   11d68:	e0f1      	b.n	11f4e <LORAWAN_RxDone+0x6fa>
   11d6a:	7832      	ldrb	r2, [r6, #0]
   11d6c:	1ac9      	subs	r1, r1, r3
   11d6e:	b2c9      	uxtb	r1, r1
   11d70:	9208      	str	r2, [sp, #32]
   11d72:	000a      	movs	r2, r1
   11d74:	3319      	adds	r3, #25
   11d76:	3a0c      	subs	r2, #12
   11d78:	469c      	mov	ip, r3
   11d7a:	9b08      	ldr	r3, [sp, #32]
   11d7c:	b2d2      	uxtb	r2, r2
   11d7e:	9206      	str	r2, [sp, #24]
   11d80:	1c75      	adds	r5, r6, #1
   11d82:	4a84      	ldr	r2, [pc, #528]	; (11f94 <LORAWAN_RxDone+0x740>)
   11d84:	2b00      	cmp	r3, #0
   11d86:	d100      	bne.n	11d8a <LORAWAN_RxDone+0x536>
   11d88:	e0b0      	b.n	11eec <LORAWAN_RxDone+0x698>
   11d8a:	6813      	ldr	r3, [r2, #0]
   11d8c:	0010      	movs	r0, r2
   11d8e:	7912      	ldrb	r2, [r2, #4]
   11d90:	0a1c      	lsrs	r4, r3, #8
   11d92:	0612      	lsls	r2, r2, #24
   11d94:	4322      	orrs	r2, r4
   11d96:	9204      	str	r2, [sp, #16]
   11d98:	4a84      	ldr	r2, [pc, #528]	; (11fac <LORAWAN_RxDone+0x758>)
   11d9a:	4663      	mov	r3, ip
   11d9c:	9203      	str	r2, [sp, #12]
   11d9e:	466a      	mov	r2, sp
   11da0:	8493      	strh	r3, [r2, #36]	; 0x24
   11da2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   11da4:	2201      	movs	r2, #1
   11da6:	9302      	str	r3, [sp, #8]
   11da8:	4b81      	ldr	r3, [pc, #516]	; (11fb0 <LORAWAN_RxDone+0x75c>)
   11daa:	308c      	adds	r0, #140	; 0x8c
   11dac:	390d      	subs	r1, #13
   11dae:	9201      	str	r2, [sp, #4]
   11db0:	9300      	str	r3, [sp, #0]
   11db2:	6803      	ldr	r3, [r0, #0]
   11db4:	b2c9      	uxtb	r1, r1
   11db6:	0028      	movs	r0, r5
   11db8:	4c7e      	ldr	r4, [pc, #504]	; (11fb4 <LORAWAN_RxDone+0x760>)
   11dba:	47a0      	blx	r4
   11dbc:	2800      	cmp	r0, #0
   11dbe:	d004      	beq.n	11dca <LORAWAN_RxDone+0x576>
   11dc0:	4b7d      	ldr	r3, [pc, #500]	; (11fb8 <LORAWAN_RxDone+0x764>)
   11dc2:	4798      	blx	r3
   11dc4:	201f      	movs	r0, #31
   11dc6:	4b76      	ldr	r3, [pc, #472]	; (11fa0 <LORAWAN_RxDone+0x74c>)
   11dc8:	4798      	blx	r3
   11dca:	4c72      	ldr	r4, [pc, #456]	; (11f94 <LORAWAN_RxDone+0x740>)
   11dcc:	2300      	movs	r3, #0
   11dce:	0022      	movs	r2, r4
   11dd0:	32ca      	adds	r2, #202	; 0xca
   11dd2:	8013      	strh	r3, [r2, #0]
   11dd4:	0022      	movs	r2, r4
   11dd6:	32f6      	adds	r2, #246	; 0xf6
   11dd8:	7013      	strb	r3, [r2, #0]
   11dda:	0022      	movs	r2, r4
   11ddc:	2110      	movs	r1, #16
   11dde:	3294      	adds	r2, #148	; 0x94
   11de0:	7813      	ldrb	r3, [r2, #0]
   11de2:	438b      	bics	r3, r1
   11de4:	7013      	strb	r3, [r2, #0]
   11de6:	0023      	movs	r3, r4
   11de8:	2201      	movs	r2, #1
   11dea:	3384      	adds	r3, #132	; 0x84
   11dec:	7859      	ldrb	r1, [r3, #1]
   11dee:	430a      	orrs	r2, r1
   11df0:	705a      	strb	r2, [r3, #1]
   11df2:	220e      	movs	r2, #14
   11df4:	781b      	ldrb	r3, [r3, #0]
   11df6:	4013      	ands	r3, r2
   11df8:	2b06      	cmp	r3, #6
   11dfa:	d104      	bne.n	11e06 <LORAWAN_RxDone+0x5b2>
   11dfc:	0023      	movs	r3, r4
   11dfe:	33ee      	adds	r3, #238	; 0xee
   11e00:	7818      	ldrb	r0, [r3, #0]
   11e02:	4b6e      	ldr	r3, [pc, #440]	; (11fbc <LORAWAN_RxDone+0x768>)
   11e04:	4798      	blx	r3
   11e06:	0025      	movs	r5, r4
   11e08:	2201      	movs	r2, #1
   11e0a:	3594      	adds	r5, #148	; 0x94
   11e0c:	782b      	ldrb	r3, [r5, #0]
   11e0e:	4213      	tst	r3, r2
   11e10:	d100      	bne.n	11e14 <LORAWAN_RxDone+0x5c0>
   11e12:	e107      	b.n	12024 <LORAWAN_RxDone+0x7d0>
   11e14:	797b      	ldrb	r3, [r7, #5]
   11e16:	321f      	adds	r2, #31
   11e18:	4213      	tst	r3, r2
   11e1a:	d100      	bne.n	11e1e <LORAWAN_RxDone+0x5ca>
   11e1c:	e0e8      	b.n	11ff0 <LORAWAN_RxDone+0x79c>
   11e1e:	4b68      	ldr	r3, [pc, #416]	; (11fc0 <LORAWAN_RxDone+0x76c>)
   11e20:	4798      	blx	r3
   11e22:	0023      	movs	r3, r4
   11e24:	2101      	movs	r1, #1
   11e26:	3384      	adds	r3, #132	; 0x84
   11e28:	785a      	ldrb	r2, [r3, #1]
   11e2a:	438a      	bics	r2, r1
   11e2c:	705a      	strb	r2, [r3, #1]
   11e2e:	9a08      	ldr	r2, [sp, #32]
   11e30:	2a00      	cmp	r2, #0
   11e32:	d100      	bne.n	11e36 <LORAWAN_RxDone+0x5e2>
   11e34:	e093      	b.n	11f5e <LORAWAN_RxDone+0x70a>
   11e36:	9a06      	ldr	r2, [sp, #24]
   11e38:	0031      	movs	r1, r6
   11e3a:	0038      	movs	r0, r7
   11e3c:	4b61      	ldr	r3, [pc, #388]	; (11fc4 <LORAWAN_RxDone+0x770>)
   11e3e:	4798      	blx	r3
   11e40:	4b56      	ldr	r3, [pc, #344]	; (11f9c <LORAWAN_RxDone+0x748>)
   11e42:	4d54      	ldr	r5, [pc, #336]	; (11f94 <LORAWAN_RxDone+0x740>)
   11e44:	781b      	ldrb	r3, [r3, #0]
   11e46:	06db      	lsls	r3, r3, #27
   11e48:	d400      	bmi.n	11e4c <LORAWAN_RxDone+0x5f8>
   11e4a:	e160      	b.n	1210e <LORAWAN_RxDone+0x8ba>
   11e4c:	2220      	movs	r2, #32
   11e4e:	4b5e      	ldr	r3, [pc, #376]	; (11fc8 <LORAWAN_RxDone+0x774>)
   11e50:	781b      	ldrb	r3, [r3, #0]
   11e52:	401a      	ands	r2, r3
   11e54:	9206      	str	r2, [sp, #24]
   11e56:	d000      	beq.n	11e5a <LORAWAN_RxDone+0x606>
   11e58:	e159      	b.n	1210e <LORAWAN_RxDone+0x8ba>
   11e5a:	320a      	adds	r2, #10
   11e5c:	4213      	tst	r3, r2
   11e5e:	d100      	bne.n	11e62 <LORAWAN_RxDone+0x60e>
   11e60:	e155      	b.n	1210e <LORAWAN_RxDone+0x8ba>
   11e62:	002b      	movs	r3, r5
   11e64:	33f5      	adds	r3, #245	; 0xf5
   11e66:	781b      	ldrb	r3, [r3, #0]
   11e68:	a90f      	add	r1, sp, #60	; 0x3c
   11e6a:	704b      	strb	r3, [r1, #1]
   11e6c:	002e      	movs	r6, r5
   11e6e:	2301      	movs	r3, #1
   11e70:	36e7      	adds	r6, #231	; 0xe7
   11e72:	700b      	strb	r3, [r1, #0]
   11e74:	7833      	ldrb	r3, [r6, #0]
   11e76:	aa0e      	add	r2, sp, #56	; 0x38
   11e78:	202f      	movs	r0, #47	; 0x2f
   11e7a:	4f54      	ldr	r7, [pc, #336]	; (11fcc <LORAWAN_RxDone+0x778>)
   11e7c:	708b      	strb	r3, [r1, #2]
   11e7e:	47b8      	blx	r7
   11e80:	9007      	str	r0, [sp, #28]
   11e82:	2808      	cmp	r0, #8
   11e84:	d000      	beq.n	11e88 <LORAWAN_RxDone+0x634>
   11e86:	e0fb      	b.n	12080 <LORAWAN_RxDone+0x82c>
   11e88:	4b51      	ldr	r3, [pc, #324]	; (11fd0 <LORAWAN_RxDone+0x77c>)
   11e8a:	9806      	ldr	r0, [sp, #24]
   11e8c:	4798      	blx	r3
   11e8e:	4b4e      	ldr	r3, [pc, #312]	; (11fc8 <LORAWAN_RxDone+0x774>)
   11e90:	9a07      	ldr	r2, [sp, #28]
   11e92:	781b      	ldrb	r3, [r3, #0]
   11e94:	4393      	bics	r3, r2
   11e96:	4a4c      	ldr	r2, [pc, #304]	; (11fc8 <LORAWAN_RxDone+0x774>)
   11e98:	7013      	strb	r3, [r2, #0]
   11e9a:	2001      	movs	r0, #1
   11e9c:	e53e      	b.n	1191c <LORAWAN_RxDone+0xc8>
   11e9e:	0023      	movs	r3, r4
   11ea0:	220e      	movs	r2, #14
   11ea2:	3384      	adds	r3, #132	; 0x84
   11ea4:	781b      	ldrb	r3, [r3, #0]
   11ea6:	4013      	ands	r3, r2
   11ea8:	2b06      	cmp	r3, #6
   11eaa:	d101      	bne.n	11eb0 <LORAWAN_RxDone+0x65c>
   11eac:	4b49      	ldr	r3, [pc, #292]	; (11fd4 <LORAWAN_RxDone+0x780>)
   11eae:	4798      	blx	r3
   11eb0:	4949      	ldr	r1, [pc, #292]	; (11fd8 <LORAWAN_RxDone+0x784>)
   11eb2:	784a      	ldrb	r2, [r1, #1]
   11eb4:	780b      	ldrb	r3, [r1, #0]
   11eb6:	0212      	lsls	r2, r2, #8
   11eb8:	431a      	orrs	r2, r3
   11eba:	788b      	ldrb	r3, [r1, #2]
   11ebc:	041b      	lsls	r3, r3, #16
   11ebe:	431a      	orrs	r2, r3
   11ec0:	78cb      	ldrb	r3, [r1, #3]
   11ec2:	061b      	lsls	r3, r3, #24
   11ec4:	4313      	orrs	r3, r2
   11ec6:	d008      	beq.n	11eda <LORAWAN_RxDone+0x686>
   11ec8:	0022      	movs	r2, r4
   11eca:	2120      	movs	r1, #32
   11ecc:	3294      	adds	r2, #148	; 0x94
   11ece:	7813      	ldrb	r3, [r2, #0]
   11ed0:	201e      	movs	r0, #30
   11ed2:	438b      	bics	r3, r1
   11ed4:	7013      	strb	r3, [r2, #0]
   11ed6:	4b32      	ldr	r3, [pc, #200]	; (11fa0 <LORAWAN_RxDone+0x74c>)
   11ed8:	4798      	blx	r3
   11eda:	2300      	movs	r3, #0
   11edc:	34e0      	adds	r4, #224	; 0xe0
   11ede:	7023      	strb	r3, [r4, #0]
   11ee0:	4b35      	ldr	r3, [pc, #212]	; (11fb8 <LORAWAN_RxDone+0x764>)
   11ee2:	4798      	blx	r3
   11ee4:	e7d9      	b.n	11e9a <LORAWAN_RxDone+0x646>
   11ee6:	003e      	movs	r6, r7
   11ee8:	3608      	adds	r6, #8
   11eea:	e735      	b.n	11d58 <LORAWAN_RxDone+0x504>
   11eec:	9b06      	ldr	r3, [sp, #24]
   11eee:	2b00      	cmp	r3, #0
   11ef0:	d031      	beq.n	11f56 <LORAWAN_RxDone+0x702>
   11ef2:	0703      	lsls	r3, r0, #28
   11ef4:	d1d3      	bne.n	11e9e <LORAWAN_RxDone+0x64a>
   11ef6:	390d      	subs	r1, #13
   11ef8:	6813      	ldr	r3, [r2, #0]
   11efa:	b2cc      	uxtb	r4, r1
   11efc:	0011      	movs	r1, r2
   11efe:	7912      	ldrb	r2, [r2, #4]
   11f00:	0a18      	lsrs	r0, r3, #8
   11f02:	0612      	lsls	r2, r2, #24
   11f04:	4302      	orrs	r2, r0
   11f06:	9204      	str	r2, [sp, #16]
   11f08:	4a28      	ldr	r2, [pc, #160]	; (11fac <LORAWAN_RxDone+0x758>)
   11f0a:	4663      	mov	r3, ip
   11f0c:	9203      	str	r2, [sp, #12]
   11f0e:	466a      	mov	r2, sp
   11f10:	8313      	strh	r3, [r2, #24]
   11f12:	8b13      	ldrh	r3, [r2, #24]
   11f14:	318c      	adds	r1, #140	; 0x8c
   11f16:	9302      	str	r3, [sp, #8]
   11f18:	2302      	movs	r3, #2
   11f1a:	9301      	str	r3, [sp, #4]
   11f1c:	4b2f      	ldr	r3, [pc, #188]	; (11fdc <LORAWAN_RxDone+0x788>)
   11f1e:	2201      	movs	r2, #1
   11f20:	9300      	str	r3, [sp, #0]
   11f22:	680b      	ldr	r3, [r1, #0]
   11f24:	0028      	movs	r0, r5
   11f26:	0021      	movs	r1, r4
   11f28:	4e22      	ldr	r6, [pc, #136]	; (11fb4 <LORAWAN_RxDone+0x760>)
   11f2a:	47b0      	blx	r6
   11f2c:	2800      	cmp	r0, #0
   11f2e:	d004      	beq.n	11f3a <LORAWAN_RxDone+0x6e6>
   11f30:	4b21      	ldr	r3, [pc, #132]	; (11fb8 <LORAWAN_RxDone+0x764>)
   11f32:	4798      	blx	r3
   11f34:	201f      	movs	r0, #31
   11f36:	4b1a      	ldr	r3, [pc, #104]	; (11fa0 <LORAWAN_RxDone+0x74c>)
   11f38:	4798      	blx	r3
   11f3a:	4b1b      	ldr	r3, [pc, #108]	; (11fa8 <LORAWAN_RxDone+0x754>)
   11f3c:	0021      	movs	r1, r4
   11f3e:	0028      	movs	r0, r5
   11f40:	4798      	blx	r3
   11f42:	2300      	movs	r3, #0
   11f44:	9306      	str	r3, [sp, #24]
   11f46:	3301      	adds	r3, #1
   11f48:	9307      	str	r3, [sp, #28]
   11f4a:	2600      	movs	r6, #0
   11f4c:	e73d      	b.n	11dca <LORAWAN_RxDone+0x576>
   11f4e:	2600      	movs	r6, #0
   11f50:	9608      	str	r6, [sp, #32]
   11f52:	9606      	str	r6, [sp, #24]
   11f54:	e739      	b.n	11dca <LORAWAN_RxDone+0x576>
   11f56:	9b06      	ldr	r3, [sp, #24]
   11f58:	9308      	str	r3, [sp, #32]
   11f5a:	001e      	movs	r6, r3
   11f5c:	e735      	b.n	11dca <LORAWAN_RxDone+0x576>
   11f5e:	2120      	movs	r1, #32
   11f60:	782a      	ldrb	r2, [r5, #0]
   11f62:	438a      	bics	r2, r1
   11f64:	702a      	strb	r2, [r5, #0]
   11f66:	0022      	movs	r2, r4
   11f68:	32fd      	adds	r2, #253	; 0xfd
   11f6a:	7812      	ldrb	r2, [r2, #0]
   11f6c:	2a01      	cmp	r2, #1
   11f6e:	d137      	bne.n	11fe0 <LORAWAN_RxDone+0x78c>
   11f70:	781a      	ldrb	r2, [r3, #0]
   11f72:	3912      	subs	r1, #18
   11f74:	438a      	bics	r2, r1
   11f76:	701a      	strb	r2, [r3, #0]
   11f78:	2388      	movs	r3, #136	; 0x88
   11f7a:	4a06      	ldr	r2, [pc, #24]	; (11f94 <LORAWAN_RxDone+0x740>)
   11f7c:	009b      	lsls	r3, r3, #2
   11f7e:	5cd3      	ldrb	r3, [r2, r3]
   11f80:	2b00      	cmp	r3, #0
   11f82:	d000      	beq.n	11f86 <LORAWAN_RxDone+0x732>
   11f84:	e75c      	b.n	11e40 <LORAWAN_RxDone+0x5ec>
   11f86:	2008      	movs	r0, #8
   11f88:	4b05      	ldr	r3, [pc, #20]	; (11fa0 <LORAWAN_RxDone+0x74c>)
   11f8a:	4798      	blx	r3
   11f8c:	e758      	b.n	11e40 <LORAWAN_RxDone+0x5ec>
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	00012e89 	.word	0x00012e89
   11f94:	20003170 	.word	0x20003170
   11f98:	0000ff2d 	.word	0x0000ff2d
   11f9c:	200031f4 	.word	0x200031f4
   11fa0:	00010dd5 	.word	0x00010dd5
   11fa4:	000092e9 	.word	0x000092e9
   11fa8:	00011571 	.word	0x00011571
   11fac:	20002f34 	.word	0x20002f34
   11fb0:	200031a5 	.word	0x200031a5
   11fb4:	00010d15 	.word	0x00010d15
   11fb8:	000112e9 	.word	0x000112e9
   11fbc:	0000d381 	.word	0x0000d381
   11fc0:	000103e1 	.word	0x000103e1
   11fc4:	00010e85 	.word	0x00010e85
   11fc8:	20003204 	.word	0x20003204
   11fcc:	0000cb21 	.word	0x0000cb21
   11fd0:	00010095 	.word	0x00010095
   11fd4:	0000ffc5 	.word	0x0000ffc5
   11fd8:	200034cc 	.word	0x200034cc
   11fdc:	20003195 	.word	0x20003195
   11fe0:	2a04      	cmp	r2, #4
   11fe2:	d1c9      	bne.n	11f78 <LORAWAN_RxDone+0x724>
   11fe4:	0023      	movs	r3, r4
   11fe6:	33f1      	adds	r3, #241	; 0xf1
   11fe8:	7818      	ldrb	r0, [r3, #0]
   11fea:	4bab      	ldr	r3, [pc, #684]	; (12298 <LORAWAN_RxDone+0xa44>)
   11fec:	4798      	blx	r3
   11fee:	e7c3      	b.n	11f78 <LORAWAN_RxDone+0x724>
   11ff0:	9b07      	ldr	r3, [sp, #28]
   11ff2:	2b00      	cmp	r3, #0
   11ff4:	d013      	beq.n	1201e <LORAWAN_RxDone+0x7ca>
   11ff6:	0023      	movs	r3, r4
   11ff8:	33fd      	adds	r3, #253	; 0xfd
   11ffa:	781e      	ldrb	r6, [r3, #0]
   11ffc:	2e01      	cmp	r6, #1
   11ffe:	d10e      	bne.n	1201e <LORAWAN_RxDone+0x7ca>
   12000:	4ba6      	ldr	r3, [pc, #664]	; (1229c <LORAWAN_RxDone+0xa48>)
   12002:	4798      	blx	r3
   12004:	0022      	movs	r2, r4
   12006:	3284      	adds	r2, #132	; 0x84
   12008:	7853      	ldrb	r3, [r2, #1]
   1200a:	43b3      	bics	r3, r6
   1200c:	7053      	strb	r3, [r2, #1]
   1200e:	2220      	movs	r2, #32
   12010:	782b      	ldrb	r3, [r5, #0]
   12012:	4393      	bics	r3, r2
   12014:	702b      	strb	r3, [r5, #0]
   12016:	2388      	movs	r3, #136	; 0x88
   12018:	009b      	lsls	r3, r3, #2
   1201a:	5ce3      	ldrb	r3, [r4, r3]
   1201c:	e7b0      	b.n	11f80 <LORAWAN_RxDone+0x72c>
   1201e:	4ba0      	ldr	r3, [pc, #640]	; (122a0 <LORAWAN_RxDone+0xa4c>)
   12020:	4798      	blx	r3
   12022:	e70d      	b.n	11e40 <LORAWAN_RxDone+0x5ec>
   12024:	9a08      	ldr	r2, [sp, #32]
   12026:	2a00      	cmp	r2, #0
   12028:	d00b      	beq.n	12042 <LORAWAN_RxDone+0x7ee>
   1202a:	9a06      	ldr	r2, [sp, #24]
   1202c:	0031      	movs	r1, r6
   1202e:	0038      	movs	r0, r7
   12030:	4b9c      	ldr	r3, [pc, #624]	; (122a4 <LORAWAN_RxDone+0xa50>)
   12032:	4798      	blx	r3
   12034:	0022      	movs	r2, r4
   12036:	2101      	movs	r1, #1
   12038:	3284      	adds	r2, #132	; 0x84
   1203a:	7853      	ldrb	r3, [r2, #1]
   1203c:	438b      	bics	r3, r1
   1203e:	7053      	strb	r3, [r2, #1]
   12040:	e6fe      	b.n	11e40 <LORAWAN_RxDone+0x5ec>
   12042:	2220      	movs	r2, #32
   12044:	4393      	bics	r3, r2
   12046:	702b      	strb	r3, [r5, #0]
   12048:	0023      	movs	r3, r4
   1204a:	33fd      	adds	r3, #253	; 0xfd
   1204c:	781b      	ldrb	r3, [r3, #0]
   1204e:	2b01      	cmp	r3, #1
   12050:	d10e      	bne.n	12070 <LORAWAN_RxDone+0x81c>
   12052:	0022      	movs	r2, r4
   12054:	210e      	movs	r1, #14
   12056:	3284      	adds	r2, #132	; 0x84
   12058:	7813      	ldrb	r3, [r2, #0]
   1205a:	438b      	bics	r3, r1
   1205c:	7013      	strb	r3, [r2, #0]
   1205e:	2388      	movs	r3, #136	; 0x88
   12060:	009b      	lsls	r3, r3, #2
   12062:	5ce3      	ldrb	r3, [r4, r3]
   12064:	2b00      	cmp	r3, #0
   12066:	d1e5      	bne.n	12034 <LORAWAN_RxDone+0x7e0>
   12068:	2008      	movs	r0, #8
   1206a:	4b8f      	ldr	r3, [pc, #572]	; (122a8 <LORAWAN_RxDone+0xa54>)
   1206c:	4798      	blx	r3
   1206e:	e7e1      	b.n	12034 <LORAWAN_RxDone+0x7e0>
   12070:	2b04      	cmp	r3, #4
   12072:	d1f4      	bne.n	1205e <LORAWAN_RxDone+0x80a>
   12074:	0023      	movs	r3, r4
   12076:	33f1      	adds	r3, #241	; 0xf1
   12078:	7818      	ldrb	r0, [r3, #0]
   1207a:	4b87      	ldr	r3, [pc, #540]	; (12298 <LORAWAN_RxDone+0xa44>)
   1207c:	4798      	blx	r3
   1207e:	e7ee      	b.n	1205e <LORAWAN_RxDone+0x80a>
   12080:	35ff      	adds	r5, #255	; 0xff
   12082:	7f6b      	ldrb	r3, [r5, #29]
   12084:	079a      	lsls	r2, r3, #30
   12086:	d520      	bpl.n	120ca <LORAWAN_RxDone+0x876>
   12088:	aa10      	add	r2, sp, #64	; 0x40
   1208a:	0031      	movs	r1, r6
   1208c:	2026      	movs	r0, #38	; 0x26
   1208e:	47b8      	blx	r7
   12090:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12092:	1c5a      	adds	r2, r3, #1
   12094:	d001      	beq.n	1209a <LORAWAN_RxDone+0x846>
   12096:	3314      	adds	r3, #20
   12098:	9310      	str	r3, [sp, #64]	; 0x40
   1209a:	0021      	movs	r1, r4
   1209c:	220e      	movs	r2, #14
   1209e:	3184      	adds	r1, #132	; 0x84
   120a0:	780b      	ldrb	r3, [r1, #0]
   120a2:	4393      	bics	r3, r2
   120a4:	001a      	movs	r2, r3
   120a6:	230c      	movs	r3, #12
   120a8:	4313      	orrs	r3, r2
   120aa:	700b      	strb	r3, [r1, #0]
   120ac:	4b7f      	ldr	r3, [pc, #508]	; (122ac <LORAWAN_RxDone+0xa58>)
   120ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   120b0:	5ce3      	ldrb	r3, [r4, r3]
   120b2:	21fa      	movs	r1, #250	; 0xfa
   120b4:	1ad3      	subs	r3, r2, r3
   120b6:	2200      	movs	r2, #0
   120b8:	0089      	lsls	r1, r1, #2
   120ba:	4359      	muls	r1, r3
   120bc:	34ef      	adds	r4, #239	; 0xef
   120be:	4b7c      	ldr	r3, [pc, #496]	; (122b0 <LORAWAN_RxDone+0xa5c>)
   120c0:	7820      	ldrb	r0, [r4, #0]
   120c2:	9200      	str	r2, [sp, #0]
   120c4:	4c7b      	ldr	r4, [pc, #492]	; (122b4 <LORAWAN_RxDone+0xa60>)
   120c6:	47a0      	blx	r4
   120c8:	e6e7      	b.n	11e9a <LORAWAN_RxDone+0x646>
   120ca:	075b      	lsls	r3, r3, #29
   120cc:	d400      	bmi.n	120d0 <LORAWAN_RxDone+0x87c>
   120ce:	e6e4      	b.n	11e9a <LORAWAN_RxDone+0x646>
   120d0:	aa10      	add	r2, sp, #64	; 0x40
   120d2:	0031      	movs	r1, r6
   120d4:	2032      	movs	r0, #50	; 0x32
   120d6:	47b8      	blx	r7
   120d8:	220e      	movs	r2, #14
   120da:	4b77      	ldr	r3, [pc, #476]	; (122b8 <LORAWAN_RxDone+0xa64>)
   120dc:	781b      	ldrb	r3, [r3, #0]
   120de:	4393      	bics	r3, r2
   120e0:	001a      	movs	r2, r3
   120e2:	230c      	movs	r3, #12
   120e4:	4313      	orrs	r3, r2
   120e6:	4a74      	ldr	r2, [pc, #464]	; (122b8 <LORAWAN_RxDone+0xa64>)
   120e8:	7013      	strb	r3, [r2, #0]
   120ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   120ec:	1c5a      	adds	r2, r3, #1
   120ee:	d001      	beq.n	120f4 <LORAWAN_RxDone+0x8a0>
   120f0:	3301      	adds	r3, #1
   120f2:	9310      	str	r3, [sp, #64]	; 0x40
   120f4:	4b6d      	ldr	r3, [pc, #436]	; (122ac <LORAWAN_RxDone+0xa58>)
   120f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   120f8:	5ce3      	ldrb	r3, [r4, r3]
   120fa:	21fa      	movs	r1, #250	; 0xfa
   120fc:	1ad3      	subs	r3, r2, r3
   120fe:	2200      	movs	r2, #0
   12100:	0089      	lsls	r1, r1, #2
   12102:	34f2      	adds	r4, #242	; 0xf2
   12104:	4359      	muls	r1, r3
   12106:	7820      	ldrb	r0, [r4, #0]
   12108:	4b6c      	ldr	r3, [pc, #432]	; (122bc <LORAWAN_RxDone+0xa68>)
   1210a:	9200      	str	r2, [sp, #0]
   1210c:	e7da      	b.n	120c4 <LORAWAN_RxDone+0x870>
   1210e:	35fd      	adds	r5, #253	; 0xfd
   12110:	782b      	ldrb	r3, [r5, #0]
   12112:	2b04      	cmp	r3, #4
   12114:	d000      	beq.n	12118 <LORAWAN_RxDone+0x8c4>
   12116:	e6c0      	b.n	11e9a <LORAWAN_RxDone+0x646>
   12118:	0038      	movs	r0, r7
   1211a:	4b69      	ldr	r3, [pc, #420]	; (122c0 <LORAWAN_RxDone+0xa6c>)
   1211c:	4798      	blx	r3
   1211e:	e6bc      	b.n	11e9a <LORAWAN_RxDone+0x646>
   12120:	2390      	movs	r3, #144	; 0x90
   12122:	009b      	lsls	r3, r3, #2
   12124:	5ce3      	ldrb	r3, [r4, r3]
   12126:	2b00      	cmp	r3, #0
   12128:	d009      	beq.n	1213e <LORAWAN_RxDone+0x8ea>
   1212a:	2322      	movs	r3, #34	; 0x22
   1212c:	aa04      	add	r2, sp, #16
   1212e:	189b      	adds	r3, r3, r2
   12130:	781b      	ldrb	r3, [r3, #0]
   12132:	003a      	movs	r2, r7
   12134:	9906      	ldr	r1, [sp, #24]
   12136:	0038      	movs	r0, r7
   12138:	4c62      	ldr	r4, [pc, #392]	; (122c4 <LORAWAN_RxDone+0xa70>)
   1213a:	47a0      	blx	r4
   1213c:	e6ad      	b.n	11e9a <LORAWAN_RxDone+0x646>
   1213e:	2220      	movs	r2, #32
   12140:	3494      	adds	r4, #148	; 0x94
   12142:	7823      	ldrb	r3, [r4, #0]
   12144:	201e      	movs	r0, #30
   12146:	4393      	bics	r3, r2
   12148:	7023      	strb	r3, [r4, #0]
   1214a:	4b57      	ldr	r3, [pc, #348]	; (122a8 <LORAWAN_RxDone+0xa54>)
   1214c:	4798      	blx	r3
   1214e:	e6c7      	b.n	11ee0 <LORAWAN_RxDone+0x68c>
   12150:	220e      	movs	r2, #14
   12152:	4013      	ands	r3, r2
   12154:	2b0a      	cmp	r3, #10
   12156:	d008      	beq.n	1216a <LORAWAN_RxDone+0x916>
   12158:	2b06      	cmp	r3, #6
   1215a:	d000      	beq.n	1215e <LORAWAN_RxDone+0x90a>
   1215c:	e5a0      	b.n	11ca0 <LORAWAN_RxDone+0x44c>
   1215e:	0023      	movs	r3, r4
   12160:	33f9      	adds	r3, #249	; 0xf9
   12162:	781b      	ldrb	r3, [r3, #0]
   12164:	2b00      	cmp	r3, #0
   12166:	d100      	bne.n	1216a <LORAWAN_RxDone+0x916>
   12168:	e59a      	b.n	11ca0 <LORAWAN_RxDone+0x44c>
   1216a:	2220      	movs	r2, #32
   1216c:	3494      	adds	r4, #148	; 0x94
   1216e:	7823      	ldrb	r3, [r4, #0]
   12170:	2019      	movs	r0, #25
   12172:	4393      	bics	r3, r2
   12174:	7023      	strb	r3, [r4, #0]
   12176:	e5a0      	b.n	11cba <LORAWAN_RxDone+0x466>
   12178:	4953      	ldr	r1, [pc, #332]	; (122c8 <LORAWAN_RxDone+0xa74>)
   1217a:	784a      	ldrb	r2, [r1, #1]
   1217c:	780b      	ldrb	r3, [r1, #0]
   1217e:	0212      	lsls	r2, r2, #8
   12180:	431a      	orrs	r2, r3
   12182:	788b      	ldrb	r3, [r1, #2]
   12184:	041b      	lsls	r3, r3, #16
   12186:	431a      	orrs	r2, r3
   12188:	78cb      	ldrb	r3, [r1, #3]
   1218a:	061b      	lsls	r3, r3, #24
   1218c:	4313      	orrs	r3, r2
   1218e:	d100      	bne.n	12192 <LORAWAN_RxDone+0x93e>
   12190:	e683      	b.n	11e9a <LORAWAN_RxDone+0x646>
   12192:	4b4e      	ldr	r3, [pc, #312]	; (122cc <LORAWAN_RxDone+0xa78>)
   12194:	4c4e      	ldr	r4, [pc, #312]	; (122d0 <LORAWAN_RxDone+0xa7c>)
   12196:	781b      	ldrb	r3, [r3, #0]
   12198:	2b10      	cmp	r3, #16
   1219a:	d105      	bne.n	121a8 <LORAWAN_RxDone+0x954>
   1219c:	0001      	movs	r1, r0
   1219e:	2000      	movs	r0, #0
   121a0:	9a06      	ldr	r2, [sp, #24]
   121a2:	3b0c      	subs	r3, #12
   121a4:	47a0      	blx	r4
   121a6:	e678      	b.n	11e9a <LORAWAN_RxDone+0x646>
   121a8:	2300      	movs	r3, #0
   121aa:	0001      	movs	r1, r0
   121ac:	9a06      	ldr	r2, [sp, #24]
   121ae:	0018      	movs	r0, r3
   121b0:	e7f8      	b.n	121a4 <LORAWAN_RxDone+0x950>
   121b2:	348c      	adds	r4, #140	; 0x8c
   121b4:	6823      	ldr	r3, [r4, #0]
   121b6:	0031      	movs	r1, r6
   121b8:	9308      	str	r3, [sp, #32]
   121ba:	4b46      	ldr	r3, [pc, #280]	; (122d4 <LORAWAN_RxDone+0xa80>)
   121bc:	4798      	blx	r3
   121be:	2808      	cmp	r0, #8
   121c0:	d001      	beq.n	121c6 <LORAWAN_RxDone+0x972>
   121c2:	f7ff fbab 	bl	1191c <LORAWAN_RxDone+0xc8>
   121c6:	9b06      	ldr	r3, [sp, #24]
   121c8:	0028      	movs	r0, r5
   121ca:	1f1a      	subs	r2, r3, #4
   121cc:	9b07      	ldr	r3, [sp, #28]
   121ce:	b2d2      	uxtb	r2, r2
   121d0:	9300      	str	r3, [sp, #0]
   121d2:	6821      	ldr	r1, [r4, #0]
   121d4:	2349      	movs	r3, #73	; 0x49
   121d6:	4c40      	ldr	r4, [pc, #256]	; (122d8 <LORAWAN_RxDone+0xa84>)
   121d8:	47a0      	blx	r4
   121da:	4d40      	ldr	r5, [pc, #256]	; (122dc <LORAWAN_RxDone+0xa88>)
   121dc:	9607      	str	r6, [sp, #28]
   121de:	4e40      	ldr	r6, [pc, #256]	; (122e0 <LORAWAN_RxDone+0xa8c>)
   121e0:	4c40      	ldr	r4, [pc, #256]	; (122e4 <LORAWAN_RxDone+0xa90>)
   121e2:	2210      	movs	r2, #16
   121e4:	0021      	movs	r1, r4
   121e6:	4b40      	ldr	r3, [pc, #256]	; (122e8 <LORAWAN_RxDone+0xa94>)
   121e8:	0030      	movs	r0, r6
   121ea:	4798      	blx	r3
   121ec:	9b06      	ldr	r3, [sp, #24]
   121ee:	0039      	movs	r1, r7
   121f0:	3b04      	subs	r3, #4
   121f2:	001a      	movs	r2, r3
   121f4:	9309      	str	r3, [sp, #36]	; 0x24
   121f6:	483d      	ldr	r0, [pc, #244]	; (122ec <LORAWAN_RxDone+0xa98>)
   121f8:	4b3b      	ldr	r3, [pc, #236]	; (122e8 <LORAWAN_RxDone+0xa94>)
   121fa:	4798      	blx	r3
   121fc:	9b06      	ldr	r3, [sp, #24]
   121fe:	9a07      	ldr	r2, [sp, #28]
   12200:	330c      	adds	r3, #12
   12202:	b29b      	uxth	r3, r3
   12204:	9300      	str	r3, [sp, #0]
   12206:	0033      	movs	r3, r6
   12208:	2a00      	cmp	r2, #0
   1220a:	d100      	bne.n	1220e <LORAWAN_RxDone+0x9ba>
   1220c:	e557      	b.n	11cbe <LORAWAN_RxDone+0x46a>
   1220e:	0022      	movs	r2, r4
   12210:	2104      	movs	r1, #4
   12212:	4c37      	ldr	r4, [pc, #220]	; (122f0 <LORAWAN_RxDone+0xa9c>)
   12214:	0028      	movs	r0, r5
   12216:	47a0      	blx	r4
   12218:	2204      	movs	r2, #4
   1221a:	4932      	ldr	r1, [pc, #200]	; (122e4 <LORAWAN_RxDone+0xa90>)
   1221c:	4c32      	ldr	r4, [pc, #200]	; (122e8 <LORAWAN_RxDone+0xa94>)
   1221e:	a80d      	add	r0, sp, #52	; 0x34
   12220:	47a0      	blx	r4
   12222:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12224:	2204      	movs	r2, #4
   12226:	18f9      	adds	r1, r7, r3
   12228:	a810      	add	r0, sp, #64	; 0x40
   1222a:	47a0      	blx	r4
   1222c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1222e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12230:	4293      	cmp	r3, r2
   12232:	d100      	bne.n	12236 <LORAWAN_RxDone+0x9e2>
   12234:	e54a      	b.n	11ccc <LORAWAN_RxDone+0x478>
   12236:	9b07      	ldr	r3, [sp, #28]
   12238:	2b00      	cmp	r3, #0
   1223a:	d108      	bne.n	1224e <LORAWAN_RxDone+0x9fa>
   1223c:	220e      	movs	r2, #14
   1223e:	4b2d      	ldr	r3, [pc, #180]	; (122f4 <LORAWAN_RxDone+0xaa0>)
   12240:	3384      	adds	r3, #132	; 0x84
   12242:	781b      	ldrb	r3, [r3, #0]
   12244:	4013      	ands	r3, r2
   12246:	2b06      	cmp	r3, #6
   12248:	d101      	bne.n	1224e <LORAWAN_RxDone+0x9fa>
   1224a:	4b2b      	ldr	r3, [pc, #172]	; (122f8 <LORAWAN_RxDone+0xaa4>)
   1224c:	4798      	blx	r3
   1224e:	491e      	ldr	r1, [pc, #120]	; (122c8 <LORAWAN_RxDone+0xa74>)
   12250:	784a      	ldrb	r2, [r1, #1]
   12252:	780b      	ldrb	r3, [r1, #0]
   12254:	0212      	lsls	r2, r2, #8
   12256:	431a      	orrs	r2, r3
   12258:	788b      	ldrb	r3, [r1, #2]
   1225a:	041b      	lsls	r3, r3, #16
   1225c:	431a      	orrs	r2, r3
   1225e:	78cb      	ldrb	r3, [r1, #3]
   12260:	061b      	lsls	r3, r3, #24
   12262:	4313      	orrs	r3, r2
   12264:	d101      	bne.n	1226a <LORAWAN_RxDone+0xa16>
   12266:	f7ff fb47 	bl	118f8 <LORAWAN_RxDone+0xa4>
   1226a:	4a22      	ldr	r2, [pc, #136]	; (122f4 <LORAWAN_RxDone+0xaa0>)
   1226c:	2020      	movs	r0, #32
   1226e:	0011      	movs	r1, r2
   12270:	3194      	adds	r1, #148	; 0x94
   12272:	780b      	ldrb	r3, [r1, #0]
   12274:	4383      	bics	r3, r0
   12276:	700b      	strb	r3, [r1, #0]
   12278:	9b07      	ldr	r3, [sp, #28]
   1227a:	2b00      	cmp	r3, #0
   1227c:	d100      	bne.n	12280 <LORAWAN_RxDone+0xa2c>
   1227e:	e521      	b.n	11cc4 <LORAWAN_RxDone+0x470>
   12280:	2322      	movs	r3, #34	; 0x22
   12282:	a904      	add	r1, sp, #16
   12284:	185b      	adds	r3, r3, r1
   12286:	7819      	ldrb	r1, [r3, #0]
   12288:	233c      	movs	r3, #60	; 0x3c
   1228a:	434b      	muls	r3, r1
   1228c:	18d3      	adds	r3, r2, r3
   1228e:	9a08      	ldr	r2, [sp, #32]
   12290:	33fc      	adds	r3, #252	; 0xfc
   12292:	659a      	str	r2, [r3, #88]	; 0x58
   12294:	2018      	movs	r0, #24
   12296:	e510      	b.n	11cba <LORAWAN_RxDone+0x466>
   12298:	0000d381 	.word	0x0000d381
   1229c:	000103e1 	.word	0x000103e1
   122a0:	00010345 	.word	0x00010345
   122a4:	00010e85 	.word	0x00010e85
   122a8:	00010dd5 	.word	0x00010dd5
   122ac:	0000022b 	.word	0x0000022b
   122b0:	0001018d 	.word	0x0001018d
   122b4:	0000d069 	.word	0x0000d069
   122b8:	200031f4 	.word	0x200031f4
   122bc:	00010bed 	.word	0x00010bed
   122c0:	00012d09 	.word	0x00012d09
   122c4:	00012efd 	.word	0x00012efd
   122c8:	200034cc 	.word	0x200034cc
   122cc:	2000224f 	.word	0x2000224f
   122d0:	00010e39 	.word	0x00010e39
   122d4:	00011325 	.word	0x00011325
   122d8:	0000ff2d 	.word	0x0000ff2d
   122dc:	20003195 	.word	0x20003195
   122e0:	20002f34 	.word	0x20002f34
   122e4:	20001eb5 	.word	0x20001eb5
   122e8:	0001678b 	.word	0x0001678b
   122ec:	20002f44 	.word	0x20002f44
   122f0:	00007259 	.word	0x00007259
   122f4:	20003170 	.word	0x20003170
   122f8:	0000ffc5 	.word	0x0000ffc5

000122fc <LorawanSetEdClass>:
   122fc:	2388      	movs	r3, #136	; 0x88
   122fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12300:	4d1a      	ldr	r5, [pc, #104]	; (1236c <LorawanSetEdClass+0x70>)
   12302:	009b      	lsls	r3, r3, #2
   12304:	5ceb      	ldrb	r3, [r5, r3]
   12306:	0004      	movs	r4, r0
   12308:	2011      	movs	r0, #17
   1230a:	2b00      	cmp	r3, #0
   1230c:	d013      	beq.n	12336 <LorawanSetEdClass+0x3a>
   1230e:	002b      	movs	r3, r5
   12310:	33fe      	adds	r3, #254	; 0xfe
   12312:	781b      	ldrb	r3, [r3, #0]
   12314:	3807      	subs	r0, #7
   12316:	4223      	tst	r3, r4
   12318:	d00d      	beq.n	12336 <LorawanSetEdClass+0x3a>
   1231a:	002b      	movs	r3, r5
   1231c:	33fd      	adds	r3, #253	; 0xfd
   1231e:	7819      	ldrb	r1, [r3, #0]
   12320:	428c      	cmp	r4, r1
   12322:	d007      	beq.n	12334 <LorawanSetEdClass+0x38>
   12324:	2901      	cmp	r1, #1
   12326:	d107      	bne.n	12338 <LorawanSetEdClass+0x3c>
   12328:	2c04      	cmp	r4, #4
   1232a:	d104      	bne.n	12336 <LorawanSetEdClass+0x3a>
   1232c:	701c      	strb	r4, [r3, #0]
   1232e:	2000      	movs	r0, #0
   12330:	4b0f      	ldr	r3, [pc, #60]	; (12370 <LorawanSetEdClass+0x74>)
   12332:	4798      	blx	r3
   12334:	2008      	movs	r0, #8
   12336:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12338:	2904      	cmp	r1, #4
   1233a:	d1fc      	bne.n	12336 <LorawanSetEdClass+0x3a>
   1233c:	2c01      	cmp	r4, #1
   1233e:	d1fa      	bne.n	12336 <LorawanSetEdClass+0x3a>
   12340:	701c      	strb	r4, [r3, #0]
   12342:	0021      	movs	r1, r4
   12344:	4b0a      	ldr	r3, [pc, #40]	; (12370 <LorawanSetEdClass+0x74>)
   12346:	2000      	movs	r0, #0
   12348:	4798      	blx	r3
   1234a:	002a      	movs	r2, r5
   1234c:	210e      	movs	r1, #14
   1234e:	3284      	adds	r2, #132	; 0x84
   12350:	7813      	ldrb	r3, [r2, #0]
   12352:	a801      	add	r0, sp, #4
   12354:	438b      	bics	r3, r1
   12356:	7013      	strb	r3, [r2, #0]
   12358:	4b06      	ldr	r3, [pc, #24]	; (12374 <LorawanSetEdClass+0x78>)
   1235a:	7004      	strb	r4, [r0, #0]
   1235c:	4798      	blx	r3
   1235e:	2394      	movs	r3, #148	; 0x94
   12360:	005b      	lsls	r3, r3, #1
   12362:	5ce8      	ldrb	r0, [r5, r3]
   12364:	4b04      	ldr	r3, [pc, #16]	; (12378 <LorawanSetEdClass+0x7c>)
   12366:	4798      	blx	r3
   12368:	e7e4      	b.n	12334 <LorawanSetEdClass+0x38>
   1236a:	46c0      	nop			; (mov r8, r8)
   1236c:	20003170 	.word	0x20003170
   12370:	000092e9 	.word	0x000092e9
   12374:	0000f505 	.word	0x0000f505
   12378:	0000d381 	.word	0x0000d381

0001237c <LORAWAN_SetAttr>:
   1237c:	2388      	movs	r3, #136	; 0x88
   1237e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12380:	4cbb      	ldr	r4, [pc, #748]	; (12670 <LORAWAN_SetAttr+0x2f4>)
   12382:	009b      	lsls	r3, r3, #2
   12384:	5ce3      	ldrb	r3, [r4, r3]
   12386:	000d      	movs	r5, r1
   12388:	2611      	movs	r6, #17
   1238a:	2b00      	cmp	r3, #0
   1238c:	d100      	bne.n	12390 <LORAWAN_SetAttr+0x14>
   1238e:	e11f      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12390:	2846      	cmp	r0, #70	; 0x46
   12392:	d878      	bhi.n	12486 <LORAWAN_SetAttr+0x10a>
   12394:	f001 f8be 	bl	13514 <__gnu_thumb1_case_uhi>
   12398:	00930047 	.word	0x00930047
   1239c:	00fc00b2 	.word	0x00fc00b2
   123a0:	00e600c5 	.word	0x00e600c5
   123a4:	0134011e 	.word	0x0134011e
   123a8:	01660154 	.word	0x01660154
   123ac:	01830178 	.word	0x01830178
   123b0:	01a6018d 	.word	0x01a6018d
   123b4:	007701ab 	.word	0x007701ab
   123b8:	01b501b0 	.word	0x01b501b0
   123bc:	01bf01ba 	.word	0x01bf01ba
   123c0:	01e601c4 	.word	0x01e601c4
   123c4:	01cb01eb 	.word	0x01cb01eb
   123c8:	01fc01c8 	.word	0x01fc01c8
   123cc:	01e101f8 	.word	0x01e101f8
   123d0:	01d701dd 	.word	0x01d701dd
   123d4:	00770077 	.word	0x00770077
   123d8:	0077019e 	.word	0x0077019e
   123dc:	00770077 	.word	0x00770077
   123e0:	00770077 	.word	0x00770077
   123e4:	02000077 	.word	0x02000077
   123e8:	02030066 	.word	0x02030066
   123ec:	020d0211 	.word	0x020d0211
   123f0:	00770208 	.word	0x00770208
   123f4:	02190215 	.word	0x02190215
   123f8:	0221021d 	.word	0x0221021d
   123fc:	02290225 	.word	0x02290225
   12400:	00770249 	.word	0x00770249
   12404:	00770077 	.word	0x00770077
   12408:	00770077 	.word	0x00770077
   1240c:	00770077 	.word	0x00770077
   12410:	00770077 	.word	0x00770077
   12414:	02600077 	.word	0x02600077
   12418:	026e026a 	.word	0x026e026a
   1241c:	00770077 	.word	0x00770077
   12420:	02730077 	.word	0x02730077
   12424:	0271      	.short	0x0271
   12426:	260a      	movs	r6, #10
   12428:	2900      	cmp	r1, #0
   1242a:	d100      	bne.n	1242e <LORAWAN_SetAttr+0xb2>
   1242c:	e0d0      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   1242e:	0020      	movs	r0, r4
   12430:	2208      	movs	r2, #8
   12432:	4b90      	ldr	r3, [pc, #576]	; (12674 <LORAWAN_SetAttr+0x2f8>)
   12434:	305d      	adds	r0, #93	; 0x5d
   12436:	4798      	blx	r3
   12438:	2108      	movs	r1, #8
   1243a:	4e8f      	ldr	r6, [pc, #572]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   1243c:	2001      	movs	r0, #1
   1243e:	47b0      	blx	r6
   12440:	0022      	movs	r2, r4
   12442:	2501      	movs	r5, #1
   12444:	32de      	adds	r2, #222	; 0xde
   12446:	7813      	ldrb	r3, [r2, #0]
   12448:	2109      	movs	r1, #9
   1244a:	432b      	orrs	r3, r5
   1244c:	3484      	adds	r4, #132	; 0x84
   1244e:	0028      	movs	r0, r5
   12450:	7013      	strb	r3, [r2, #0]
   12452:	47b0      	blx	r6
   12454:	7823      	ldrb	r3, [r4, #0]
   12456:	210b      	movs	r1, #11
   12458:	43ab      	bics	r3, r5
   1245a:	0028      	movs	r0, r5
   1245c:	7023      	strb	r3, [r4, #0]
   1245e:	47b0      	blx	r6
   12460:	2608      	movs	r6, #8
   12462:	e0b5      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12464:	0023      	movs	r3, r4
   12466:	33ff      	adds	r3, #255	; 0xff
   12468:	7f5b      	ldrb	r3, [r3, #29]
   1246a:	260a      	movs	r6, #10
   1246c:	075b      	lsls	r3, r3, #29
   1246e:	d400      	bmi.n	12472 <LORAWAN_SetAttr+0xf6>
   12470:	e0ae      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12472:	79ca      	ldrb	r2, [r1, #7]
   12474:	4b81      	ldr	r3, [pc, #516]	; (1267c <LORAWAN_SetAttr+0x300>)
   12476:	2a00      	cmp	r2, #0
   12478:	d10e      	bne.n	12498 <LORAWAN_SetAttr+0x11c>
   1247a:	4669      	mov	r1, sp
   1247c:	201d      	movs	r0, #29
   1247e:	714a      	strb	r2, [r1, #5]
   12480:	4798      	blx	r3
   12482:	2800      	cmp	r0, #0
   12484:	d001      	beq.n	1248a <LORAWAN_SetAttr+0x10e>
   12486:	260a      	movs	r6, #10
   12488:	e0a2      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   1248a:	2109      	movs	r1, #9
   1248c:	34fe      	adds	r4, #254	; 0xfe
   1248e:	8460      	strh	r0, [r4, #34]	; 0x22
   12490:	8420      	strh	r0, [r4, #32]
   12492:	4b79      	ldr	r3, [pc, #484]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   12494:	4798      	blx	r3
   12496:	e7e3      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12498:	2002      	movs	r0, #2
   1249a:	5e2a      	ldrsh	r2, [r5, r0]
   1249c:	88ae      	ldrh	r6, [r5, #4]
   1249e:	79a8      	ldrb	r0, [r5, #6]
   124a0:	466d      	mov	r5, sp
   124a2:	806a      	strh	r2, [r5, #2]
   124a4:	2201      	movs	r2, #1
   124a6:	8809      	ldrh	r1, [r1, #0]
   124a8:	7128      	strb	r0, [r5, #4]
   124aa:	8029      	strh	r1, [r5, #0]
   124ac:	201d      	movs	r0, #29
   124ae:	4669      	mov	r1, sp
   124b0:	716a      	strb	r2, [r5, #5]
   124b2:	4798      	blx	r3
   124b4:	2800      	cmp	r0, #0
   124b6:	d1e6      	bne.n	12486 <LORAWAN_SetAttr+0x10a>
   124b8:	34fe      	adds	r4, #254	; 0xfe
   124ba:	8466      	strh	r6, [r4, #34]	; 0x22
   124bc:	e7d0      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   124be:	260a      	movs	r6, #10
   124c0:	2900      	cmp	r1, #0
   124c2:	d100      	bne.n	124c6 <LORAWAN_SetAttr+0x14a>
   124c4:	e084      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   124c6:	0020      	movs	r0, r4
   124c8:	2208      	movs	r2, #8
   124ca:	4b6a      	ldr	r3, [pc, #424]	; (12674 <LORAWAN_SetAttr+0x2f8>)
   124cc:	3055      	adds	r0, #85	; 0x55
   124ce:	4798      	blx	r3
   124d0:	2107      	movs	r1, #7
   124d2:	4d69      	ldr	r5, [pc, #420]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   124d4:	2001      	movs	r0, #1
   124d6:	47a8      	blx	r5
   124d8:	0022      	movs	r2, r4
   124da:	2302      	movs	r3, #2
   124dc:	32de      	adds	r2, #222	; 0xde
   124de:	7811      	ldrb	r1, [r2, #0]
   124e0:	2001      	movs	r0, #1
   124e2:	430b      	orrs	r3, r1
   124e4:	2109      	movs	r1, #9
   124e6:	7013      	strb	r3, [r2, #0]
   124e8:	47a8      	blx	r5
   124ea:	2001      	movs	r0, #1
   124ec:	3484      	adds	r4, #132	; 0x84
   124ee:	7823      	ldrb	r3, [r4, #0]
   124f0:	210b      	movs	r1, #11
   124f2:	4383      	bics	r3, r0
   124f4:	7023      	strb	r3, [r4, #0]
   124f6:	47a8      	blx	r5
   124f8:	3e02      	subs	r6, #2
   124fa:	e069      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   124fc:	680b      	ldr	r3, [r1, #0]
   124fe:	2001      	movs	r0, #1
   12500:	0a19      	lsrs	r1, r3, #8
   12502:	70a1      	strb	r1, [r4, #2]
   12504:	0c19      	lsrs	r1, r3, #16
   12506:	7063      	strb	r3, [r4, #1]
   12508:	70e1      	strb	r1, [r4, #3]
   1250a:	0e1b      	lsrs	r3, r3, #24
   1250c:	2103      	movs	r1, #3
   1250e:	4d5a      	ldr	r5, [pc, #360]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   12510:	7123      	strb	r3, [r4, #4]
   12512:	47a8      	blx	r5
   12514:	0022      	movs	r2, r4
   12516:	2304      	movs	r3, #4
   12518:	32de      	adds	r2, #222	; 0xde
   1251a:	7811      	ldrb	r1, [r2, #0]
   1251c:	430b      	orrs	r3, r1
   1251e:	7013      	strb	r3, [r2, #0]
   12520:	e015      	b.n	1254e <LORAWAN_SetAttr+0x1d2>
   12522:	260a      	movs	r6, #10
   12524:	2900      	cmp	r1, #0
   12526:	d053      	beq.n	125d0 <LORAWAN_SetAttr+0x254>
   12528:	3606      	adds	r6, #6
   1252a:	0032      	movs	r2, r6
   1252c:	4f51      	ldr	r7, [pc, #324]	; (12674 <LORAWAN_SetAttr+0x2f8>)
   1252e:	1d60      	adds	r0, r4, #5
   12530:	47b8      	blx	r7
   12532:	0020      	movs	r0, r4
   12534:	0032      	movs	r2, r6
   12536:	0029      	movs	r1, r5
   12538:	3025      	adds	r0, #37	; 0x25
   1253a:	47b8      	blx	r7
   1253c:	2104      	movs	r1, #4
   1253e:	2001      	movs	r0, #1
   12540:	4d4d      	ldr	r5, [pc, #308]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   12542:	47a8      	blx	r5
   12544:	0023      	movs	r3, r4
   12546:	33de      	adds	r3, #222	; 0xde
   12548:	781a      	ldrb	r2, [r3, #0]
   1254a:	4316      	orrs	r6, r2
   1254c:	701e      	strb	r6, [r3, #0]
   1254e:	2109      	movs	r1, #9
   12550:	2001      	movs	r0, #1
   12552:	47a8      	blx	r5
   12554:	2001      	movs	r0, #1
   12556:	210b      	movs	r1, #11
   12558:	3484      	adds	r4, #132	; 0x84
   1255a:	7823      	ldrb	r3, [r4, #0]
   1255c:	4383      	bics	r3, r0
   1255e:	7023      	strb	r3, [r4, #0]
   12560:	47a8      	blx	r5
   12562:	e77d      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12564:	260a      	movs	r6, #10
   12566:	2900      	cmp	r1, #0
   12568:	d032      	beq.n	125d0 <LORAWAN_SetAttr+0x254>
   1256a:	0020      	movs	r0, r4
   1256c:	2210      	movs	r2, #16
   1256e:	4e41      	ldr	r6, [pc, #260]	; (12674 <LORAWAN_SetAttr+0x2f8>)
   12570:	3015      	adds	r0, #21
   12572:	47b0      	blx	r6
   12574:	0020      	movs	r0, r4
   12576:	2210      	movs	r2, #16
   12578:	0029      	movs	r1, r5
   1257a:	3035      	adds	r0, #53	; 0x35
   1257c:	47b0      	blx	r6
   1257e:	2105      	movs	r1, #5
   12580:	2001      	movs	r0, #1
   12582:	4d3d      	ldr	r5, [pc, #244]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   12584:	47a8      	blx	r5
   12586:	0022      	movs	r2, r4
   12588:	32de      	adds	r2, #222	; 0xde
   1258a:	7811      	ldrb	r1, [r2, #0]
   1258c:	2320      	movs	r3, #32
   1258e:	e7c5      	b.n	1251c <LORAWAN_SetAttr+0x1a0>
   12590:	260a      	movs	r6, #10
   12592:	2900      	cmp	r1, #0
   12594:	d01c      	beq.n	125d0 <LORAWAN_SetAttr+0x254>
   12596:	4b3a      	ldr	r3, [pc, #232]	; (12680 <LORAWAN_SetAttr+0x304>)
   12598:	3e02      	subs	r6, #2
   1259a:	5ce3      	ldrb	r3, [r4, r3]
   1259c:	2b00      	cmp	r3, #0
   1259e:	d117      	bne.n	125d0 <LORAWAN_SetAttr+0x254>
   125a0:	0020      	movs	r0, r4
   125a2:	2210      	movs	r2, #16
   125a4:	4b33      	ldr	r3, [pc, #204]	; (12674 <LORAWAN_SetAttr+0x2f8>)
   125a6:	3045      	adds	r0, #69	; 0x45
   125a8:	4798      	blx	r3
   125aa:	2106      	movs	r1, #6
   125ac:	4d32      	ldr	r5, [pc, #200]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   125ae:	2001      	movs	r0, #1
   125b0:	47a8      	blx	r5
   125b2:	0022      	movs	r2, r4
   125b4:	32de      	adds	r2, #222	; 0xde
   125b6:	7813      	ldrb	r3, [r2, #0]
   125b8:	2109      	movs	r1, #9
   125ba:	4333      	orrs	r3, r6
   125bc:	2001      	movs	r0, #1
   125be:	7013      	strb	r3, [r2, #0]
   125c0:	47a8      	blx	r5
   125c2:	2001      	movs	r0, #1
   125c4:	3484      	adds	r4, #132	; 0x84
   125c6:	7823      	ldrb	r3, [r4, #0]
   125c8:	210b      	movs	r1, #11
   125ca:	4383      	bics	r3, r0
   125cc:	7023      	strb	r3, [r4, #0]
   125ce:	47a8      	blx	r5
   125d0:	0030      	movs	r0, r6
   125d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   125d4:	780b      	ldrb	r3, [r1, #0]
   125d6:	2001      	movs	r0, #1
   125d8:	0021      	movs	r1, r4
   125da:	2520      	movs	r5, #32
   125dc:	3184      	adds	r1, #132	; 0x84
   125de:	4003      	ands	r3, r0
   125e0:	015a      	lsls	r2, r3, #5
   125e2:	780b      	ldrb	r3, [r1, #0]
   125e4:	43ab      	bics	r3, r5
   125e6:	4313      	orrs	r3, r2
   125e8:	700b      	strb	r3, [r1, #0]
   125ea:	0023      	movs	r3, r4
   125ec:	2200      	movs	r2, #0
   125ee:	33ca      	adds	r3, #202	; 0xca
   125f0:	3494      	adds	r4, #148	; 0x94
   125f2:	801a      	strh	r2, [r3, #0]
   125f4:	7823      	ldrb	r3, [r4, #0]
   125f6:	3210      	adds	r2, #16
   125f8:	4393      	bics	r3, r2
   125fa:	7023      	strb	r3, [r4, #0]
   125fc:	210b      	movs	r1, #11
   125fe:	e748      	b.n	12492 <LORAWAN_SetAttr+0x116>
   12600:	466a      	mov	r2, sp
   12602:	780b      	ldrb	r3, [r1, #0]
   12604:	7013      	strb	r3, [r2, #0]
   12606:	0022      	movs	r2, r4
   12608:	32f3      	adds	r2, #243	; 0xf3
   1260a:	7812      	ldrb	r2, [r2, #0]
   1260c:	429a      	cmp	r2, r3
   1260e:	d900      	bls.n	12612 <LORAWAN_SetAttr+0x296>
   12610:	e739      	b.n	12486 <LORAWAN_SetAttr+0x10a>
   12612:	0022      	movs	r2, r4
   12614:	32f4      	adds	r2, #244	; 0xf4
   12616:	7812      	ldrb	r2, [r2, #0]
   12618:	429a      	cmp	r2, r3
   1261a:	d200      	bcs.n	1261e <LORAWAN_SetAttr+0x2a2>
   1261c:	e733      	b.n	12486 <LORAWAN_SetAttr+0x10a>
   1261e:	4669      	mov	r1, sp
   12620:	2010      	movs	r0, #16
   12622:	4b18      	ldr	r3, [pc, #96]	; (12684 <LORAWAN_SetAttr+0x308>)
   12624:	4798      	blx	r3
   12626:	0006      	movs	r6, r0
   12628:	2808      	cmp	r0, #8
   1262a:	d000      	beq.n	1262e <LORAWAN_SetAttr+0x2b2>
   1262c:	e72b      	b.n	12486 <LORAWAN_SetAttr+0x10a>
   1262e:	466b      	mov	r3, sp
   12630:	210c      	movs	r1, #12
   12632:	2001      	movs	r0, #1
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	34e7      	adds	r4, #231	; 0xe7
   12638:	7023      	strb	r3, [r4, #0]
   1263a:	4b0f      	ldr	r3, [pc, #60]	; (12678 <LORAWAN_SetAttr+0x2fc>)
   1263c:	4798      	blx	r3
   1263e:	e7c7      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12640:	466a      	mov	r2, sp
   12642:	780b      	ldrb	r3, [r1, #0]
   12644:	201d      	movs	r0, #29
   12646:	7013      	strb	r3, [r2, #0]
   12648:	4669      	mov	r1, sp
   1264a:	4b0e      	ldr	r3, [pc, #56]	; (12684 <LORAWAN_SetAttr+0x308>)
   1264c:	4798      	blx	r3
   1264e:	0006      	movs	r6, r0
   12650:	2808      	cmp	r0, #8
   12652:	d000      	beq.n	12656 <LORAWAN_SetAttr+0x2da>
   12654:	e717      	b.n	12486 <LORAWAN_SetAttr+0x10a>
   12656:	466b      	mov	r3, sp
   12658:	781b      	ldrb	r3, [r3, #0]
   1265a:	34e9      	adds	r4, #233	; 0xe9
   1265c:	7023      	strb	r3, [r4, #0]
   1265e:	210a      	movs	r1, #10
   12660:	2000      	movs	r0, #0
   12662:	e7ea      	b.n	1263a <LORAWAN_SetAttr+0x2be>
   12664:	780b      	ldrb	r3, [r1, #0]
   12666:	2103      	movs	r1, #3
   12668:	34ff      	adds	r4, #255	; 0xff
   1266a:	7063      	strb	r3, [r4, #1]
   1266c:	2000      	movs	r0, #0
   1266e:	e710      	b.n	12492 <LORAWAN_SetAttr+0x116>
   12670:	20003170 	.word	0x20003170
   12674:	0001678b 	.word	0x0001678b
   12678:	000092e9 	.word	0x000092e9
   1267c:	0000e2f9 	.word	0x0000e2f9
   12680:	0000022d 	.word	0x0000022d
   12684:	0000cb3d 	.word	0x0000cb3d
   12688:	680b      	ldr	r3, [r1, #0]
   1268a:	260a      	movs	r6, #10
   1268c:	1c5a      	adds	r2, r3, #1
   1268e:	d09f      	beq.n	125d0 <LORAWAN_SetAttr+0x254>
   12690:	2115      	movs	r1, #21
   12692:	2000      	movs	r0, #0
   12694:	3488      	adds	r4, #136	; 0x88
   12696:	6023      	str	r3, [r4, #0]
   12698:	4b7f      	ldr	r3, [pc, #508]	; (12898 <LORAWAN_SetAttr+0x51c>)
   1269a:	4798      	blx	r3
   1269c:	e72c      	b.n	124f8 <LORAWAN_SetAttr+0x17c>
   1269e:	680b      	ldr	r3, [r1, #0]
   126a0:	260a      	movs	r6, #10
   126a2:	1c5a      	adds	r2, r3, #1
   126a4:	d100      	bne.n	126a8 <LORAWAN_SetAttr+0x32c>
   126a6:	e793      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   126a8:	0031      	movs	r1, r6
   126aa:	348c      	adds	r4, #140	; 0x8c
   126ac:	6023      	str	r3, [r4, #0]
   126ae:	2001      	movs	r0, #1
   126b0:	e7f2      	b.n	12698 <LORAWAN_SetAttr+0x31c>
   126b2:	0026      	movs	r6, r4
   126b4:	880b      	ldrh	r3, [r1, #0]
   126b6:	36d0      	adds	r6, #208	; 0xd0
   126b8:	210c      	movs	r1, #12
   126ba:	2000      	movs	r0, #0
   126bc:	4d76      	ldr	r5, [pc, #472]	; (12898 <LORAWAN_SetAttr+0x51c>)
   126be:	8033      	strh	r3, [r6, #0]
   126c0:	47a8      	blx	r5
   126c2:	22fa      	movs	r2, #250	; 0xfa
   126c4:	8833      	ldrh	r3, [r6, #0]
   126c6:	0092      	lsls	r2, r2, #2
   126c8:	189b      	adds	r3, r3, r2
   126ca:	34d2      	adds	r4, #210	; 0xd2
   126cc:	8023      	strh	r3, [r4, #0]
   126ce:	210d      	movs	r1, #13
   126d0:	2000      	movs	r0, #0
   126d2:	e745      	b.n	12560 <LORAWAN_SetAttr+0x1e4>
   126d4:	780b      	ldrb	r3, [r1, #0]
   126d6:	260a      	movs	r6, #10
   126d8:	2b0f      	cmp	r3, #15
   126da:	d900      	bls.n	126de <LORAWAN_SetAttr+0x362>
   126dc:	e778      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   126de:	3498      	adds	r4, #152	; 0x98
   126e0:	7023      	strb	r3, [r4, #0]
   126e2:	e709      	b.n	124f8 <LORAWAN_SetAttr+0x17c>
   126e4:	880b      	ldrh	r3, [r1, #0]
   126e6:	34d4      	adds	r4, #212	; 0xd4
   126e8:	8023      	strh	r3, [r4, #0]
   126ea:	210e      	movs	r1, #14
   126ec:	e7be      	b.n	1266c <LORAWAN_SetAttr+0x2f0>
   126ee:	880b      	ldrh	r3, [r1, #0]
   126f0:	34d6      	adds	r4, #214	; 0xd6
   126f2:	8023      	strh	r3, [r4, #0]
   126f4:	210f      	movs	r1, #15
   126f6:	e7b9      	b.n	1266c <LORAWAN_SetAttr+0x2f0>
   126f8:	780b      	ldrb	r3, [r1, #0]
   126fa:	34dc      	adds	r4, #220	; 0xdc
   126fc:	7023      	strb	r3, [r4, #0]
   126fe:	2111      	movs	r1, #17
   12700:	e7b4      	b.n	1266c <LORAWAN_SetAttr+0x2f0>
   12702:	780b      	ldrb	r3, [r1, #0]
   12704:	34dd      	adds	r4, #221	; 0xdd
   12706:	7023      	strb	r3, [r4, #0]
   12708:	2112      	movs	r1, #18
   1270a:	e7af      	b.n	1266c <LORAWAN_SetAttr+0x2f0>
   1270c:	880b      	ldrh	r3, [r1, #0]
   1270e:	34da      	adds	r4, #218	; 0xda
   12710:	8023      	strh	r3, [r4, #0]
   12712:	2110      	movs	r1, #16
   12714:	e7aa      	b.n	1266c <LORAWAN_SetAttr+0x2f0>
   12716:	780b      	ldrb	r3, [r1, #0]
   12718:	34e2      	adds	r4, #226	; 0xe2
   1271a:	7023      	strb	r3, [r4, #0]
   1271c:	2114      	movs	r1, #20
   1271e:	e7a5      	b.n	1266c <LORAWAN_SetAttr+0x2f0>
   12720:	780b      	ldrb	r3, [r1, #0]
   12722:	34e1      	adds	r4, #225	; 0xe1
   12724:	7023      	strb	r3, [r4, #0]
   12726:	e69b      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12728:	780b      	ldrb	r3, [r1, #0]
   1272a:	34e8      	adds	r4, #232	; 0xe8
   1272c:	e7fa      	b.n	12724 <LORAWAN_SetAttr+0x3a8>
   1272e:	2001      	movs	r0, #1
   12730:	780b      	ldrb	r3, [r1, #0]
   12732:	2110      	movs	r1, #16
   12734:	3484      	adds	r4, #132	; 0x84
   12736:	4003      	ands	r3, r0
   12738:	011a      	lsls	r2, r3, #4
   1273a:	7823      	ldrb	r3, [r4, #0]
   1273c:	438b      	bics	r3, r1
   1273e:	4313      	orrs	r3, r2
   12740:	7023      	strb	r3, [r4, #0]
   12742:	3905      	subs	r1, #5
   12744:	e6a5      	b.n	12492 <LORAWAN_SetAttr+0x116>
   12746:	7909      	ldrb	r1, [r1, #4]
   12748:	7828      	ldrb	r0, [r5, #0]
   1274a:	4b54      	ldr	r3, [pc, #336]	; (1289c <LORAWAN_SetAttr+0x520>)
   1274c:	4798      	blx	r3
   1274e:	0006      	movs	r6, r0
   12750:	e73e      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12752:	7909      	ldrb	r1, [r1, #4]
   12754:	7828      	ldrb	r0, [r5, #0]
   12756:	4b52      	ldr	r3, [pc, #328]	; (128a0 <LORAWAN_SetAttr+0x524>)
   12758:	e7f8      	b.n	1274c <LORAWAN_SetAttr+0x3d0>
   1275a:	7808      	ldrb	r0, [r1, #0]
   1275c:	4b51      	ldr	r3, [pc, #324]	; (128a4 <LORAWAN_SetAttr+0x528>)
   1275e:	6849      	ldr	r1, [r1, #4]
   12760:	4798      	blx	r3
   12762:	e7f4      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   12764:	7909      	ldrb	r1, [r1, #4]
   12766:	6828      	ldr	r0, [r5, #0]
   12768:	4b4f      	ldr	r3, [pc, #316]	; (128a8 <LORAWAN_SetAttr+0x52c>)
   1276a:	4798      	blx	r3
   1276c:	e7ef      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   1276e:	786b      	ldrb	r3, [r5, #1]
   12770:	7828      	ldrb	r0, [r5, #0]
   12772:	021b      	lsls	r3, r3, #8
   12774:	4303      	orrs	r3, r0
   12776:	78a8      	ldrb	r0, [r5, #2]
   12778:	7909      	ldrb	r1, [r1, #4]
   1277a:	0400      	lsls	r0, r0, #16
   1277c:	4303      	orrs	r3, r0
   1277e:	78e8      	ldrb	r0, [r5, #3]
   12780:	0600      	lsls	r0, r0, #24
   12782:	4318      	orrs	r0, r3
   12784:	4b49      	ldr	r3, [pc, #292]	; (128ac <LORAWAN_SetAttr+0x530>)
   12786:	e7f0      	b.n	1276a <LORAWAN_SetAttr+0x3ee>
   12788:	7808      	ldrb	r0, [r1, #0]
   1278a:	4b49      	ldr	r3, [pc, #292]	; (128b0 <LORAWAN_SetAttr+0x534>)
   1278c:	4798      	blx	r3
   1278e:	e7de      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   12790:	8808      	ldrh	r0, [r1, #0]
   12792:	4b48      	ldr	r3, [pc, #288]	; (128b4 <LORAWAN_SetAttr+0x538>)
   12794:	4798      	blx	r3
   12796:	e663      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12798:	4b47      	ldr	r3, [pc, #284]	; (128b8 <LORAWAN_SetAttr+0x53c>)
   1279a:	6019      	str	r1, [r3, #0]
   1279c:	e673      	b.n	12486 <LORAWAN_SetAttr+0x10a>
   1279e:	7809      	ldrb	r1, [r1, #0]
   127a0:	7868      	ldrb	r0, [r5, #1]
   127a2:	4b46      	ldr	r3, [pc, #280]	; (128bc <LORAWAN_SetAttr+0x540>)
   127a4:	4798      	blx	r3
   127a6:	e7d2      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   127a8:	7809      	ldrb	r1, [r1, #0]
   127aa:	4b45      	ldr	r3, [pc, #276]	; (128c0 <LORAWAN_SetAttr+0x544>)
   127ac:	1c68      	adds	r0, r5, #1
   127ae:	4798      	blx	r3
   127b0:	e7cd      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   127b2:	7809      	ldrb	r1, [r1, #0]
   127b4:	1c68      	adds	r0, r5, #1
   127b6:	4b43      	ldr	r3, [pc, #268]	; (128c4 <LORAWAN_SetAttr+0x548>)
   127b8:	e7f9      	b.n	127ae <LORAWAN_SetAttr+0x432>
   127ba:	7809      	ldrb	r1, [r1, #0]
   127bc:	6868      	ldr	r0, [r5, #4]
   127be:	4b42      	ldr	r3, [pc, #264]	; (128c8 <LORAWAN_SetAttr+0x54c>)
   127c0:	e7f5      	b.n	127ae <LORAWAN_SetAttr+0x432>
   127c2:	7809      	ldrb	r1, [r1, #0]
   127c4:	6868      	ldr	r0, [r5, #4]
   127c6:	4b41      	ldr	r3, [pc, #260]	; (128cc <LORAWAN_SetAttr+0x550>)
   127c8:	e7f1      	b.n	127ae <LORAWAN_SetAttr+0x432>
   127ca:	7809      	ldrb	r1, [r1, #0]
   127cc:	6868      	ldr	r0, [r5, #4]
   127ce:	4b40      	ldr	r3, [pc, #256]	; (128d0 <LORAWAN_SetAttr+0x554>)
   127d0:	e7ed      	b.n	127ae <LORAWAN_SetAttr+0x432>
   127d2:	7809      	ldrb	r1, [r1, #0]
   127d4:	6868      	ldr	r0, [r5, #4]
   127d6:	4b3f      	ldr	r3, [pc, #252]	; (128d4 <LORAWAN_SetAttr+0x558>)
   127d8:	e7e9      	b.n	127ae <LORAWAN_SetAttr+0x432>
   127da:	7809      	ldrb	r1, [r1, #0]
   127dc:	7868      	ldrb	r0, [r5, #1]
   127de:	4b3e      	ldr	r3, [pc, #248]	; (128d8 <LORAWAN_SetAttr+0x55c>)
   127e0:	e7e0      	b.n	127a4 <LORAWAN_SetAttr+0x428>
   127e2:	7809      	ldrb	r1, [r1, #0]
   127e4:	7868      	ldrb	r0, [r5, #1]
   127e6:	4b3d      	ldr	r3, [pc, #244]	; (128dc <LORAWAN_SetAttr+0x560>)
   127e8:	e7dc      	b.n	127a4 <LORAWAN_SetAttr+0x428>
   127ea:	2300      	movs	r3, #0
   127ec:	466a      	mov	r2, sp
   127ee:	7809      	ldrb	r1, [r1, #0]
   127f0:	7013      	strb	r3, [r2, #0]
   127f2:	4299      	cmp	r1, r3
   127f4:	d014      	beq.n	12820 <LORAWAN_SetAttr+0x4a4>
   127f6:	0022      	movs	r2, r4
   127f8:	2102      	movs	r1, #2
   127fa:	32ff      	adds	r2, #255	; 0xff
   127fc:	7f53      	ldrb	r3, [r2, #29]
   127fe:	420b      	tst	r3, r1
   12800:	d001      	beq.n	12806 <LORAWAN_SetAttr+0x48a>
   12802:	438b      	bics	r3, r1
   12804:	7753      	strb	r3, [r2, #29]
   12806:	2220      	movs	r2, #32
   12808:	34ff      	adds	r4, #255	; 0xff
   1280a:	7f63      	ldrb	r3, [r4, #29]
   1280c:	4213      	tst	r3, r2
   1280e:	d100      	bne.n	12812 <LORAWAN_SetAttr+0x496>
   12810:	e626      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12812:	4393      	bics	r3, r2
   12814:	7763      	strb	r3, [r4, #29]
   12816:	4669      	mov	r1, sp
   12818:	4b31      	ldr	r3, [pc, #196]	; (128e0 <LORAWAN_SetAttr+0x564>)
   1281a:	2038      	movs	r0, #56	; 0x38
   1281c:	4798      	blx	r3
   1281e:	e61f      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12820:	4a30      	ldr	r2, [pc, #192]	; (128e4 <LORAWAN_SetAttr+0x568>)
   12822:	4b31      	ldr	r3, [pc, #196]	; (128e8 <LORAWAN_SetAttr+0x56c>)
   12824:	200e      	movs	r0, #14
   12826:	4798      	blx	r3
   12828:	e61a      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   1282a:	466b      	mov	r3, sp
   1282c:	780a      	ldrb	r2, [r1, #0]
   1282e:	34ff      	adds	r4, #255	; 0xff
   12830:	701a      	strb	r2, [r3, #0]
   12832:	2320      	movs	r3, #32
   12834:	2a00      	cmp	r2, #0
   12836:	d007      	beq.n	12848 <LORAWAN_SetAttr+0x4cc>
   12838:	7f62      	ldrb	r2, [r4, #29]
   1283a:	4313      	orrs	r3, r2
   1283c:	7763      	strb	r3, [r4, #29]
   1283e:	4669      	mov	r1, sp
   12840:	4b27      	ldr	r3, [pc, #156]	; (128e0 <LORAWAN_SetAttr+0x564>)
   12842:	2038      	movs	r0, #56	; 0x38
   12844:	4798      	blx	r3
   12846:	e782      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   12848:	7f62      	ldrb	r2, [r4, #29]
   1284a:	260a      	movs	r6, #10
   1284c:	421a      	tst	r2, r3
   1284e:	d100      	bne.n	12852 <LORAWAN_SetAttr+0x4d6>
   12850:	e6be      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12852:	439a      	bics	r2, r3
   12854:	7762      	strb	r2, [r4, #29]
   12856:	e7f2      	b.n	1283e <LORAWAN_SetAttr+0x4c2>
   12858:	780b      	ldrb	r3, [r1, #0]
   1285a:	260a      	movs	r6, #10
   1285c:	2b08      	cmp	r3, #8
   1285e:	d900      	bls.n	12862 <LORAWAN_SetAttr+0x4e6>
   12860:	e6b6      	b.n	125d0 <LORAWAN_SetAttr+0x254>
   12862:	228b      	movs	r2, #139	; 0x8b
   12864:	0092      	lsls	r2, r2, #2
   12866:	54a3      	strb	r3, [r4, r2]
   12868:	210d      	movs	r1, #13
   1286a:	e720      	b.n	126ae <LORAWAN_SetAttr+0x332>
   1286c:	780a      	ldrb	r2, [r1, #0]
   1286e:	4b1f      	ldr	r3, [pc, #124]	; (128ec <LORAWAN_SetAttr+0x570>)
   12870:	54e2      	strb	r2, [r4, r3]
   12872:	e5f5      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12874:	4b1e      	ldr	r3, [pc, #120]	; (128f0 <LORAWAN_SetAttr+0x574>)
   12876:	4798      	blx	r3
   12878:	e769      	b.n	1274e <LORAWAN_SetAttr+0x3d2>
   1287a:	4b1e      	ldr	r3, [pc, #120]	; (128f4 <LORAWAN_SetAttr+0x578>)
   1287c:	e7fb      	b.n	12876 <LORAWAN_SetAttr+0x4fa>
   1287e:	780a      	ldrb	r2, [r1, #0]
   12880:	2302      	movs	r3, #2
   12882:	34ff      	adds	r4, #255	; 0xff
   12884:	2a00      	cmp	r2, #0
   12886:	d003      	beq.n	12890 <LORAWAN_SetAttr+0x514>
   12888:	7f62      	ldrb	r2, [r4, #29]
   1288a:	4313      	orrs	r3, r2
   1288c:	7763      	strb	r3, [r4, #29]
   1288e:	e5e7      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12890:	7f62      	ldrb	r2, [r4, #29]
   12892:	439a      	bics	r2, r3
   12894:	7762      	strb	r2, [r4, #29]
   12896:	e5e3      	b.n	12460 <LORAWAN_SetAttr+0xe4>
   12898:	000092e9 	.word	0x000092e9
   1289c:	00011805 	.word	0x00011805
   128a0:	00011795 	.word	0x00011795
   128a4:	00010fbd 	.word	0x00010fbd
   128a8:	00010f35 	.word	0x00010f35
   128ac:	00010f71 	.word	0x00010f71
   128b0:	000122fd 	.word	0x000122fd
   128b4:	000101d1 	.word	0x000101d1
   128b8:	200034c8 	.word	0x200034c8
   128bc:	00012e11 	.word	0x00012e11
   128c0:	00013071 	.word	0x00013071
   128c4:	000130bd 	.word	0x000130bd
   128c8:	00013029 	.word	0x00013029
   128cc:	00013109 	.word	0x00013109
   128d0:	00013129 	.word	0x00013129
   128d4:	00013145 	.word	0x00013145
   128d8:	00013189 	.word	0x00013189
   128dc:	000131c5 	.word	0x000131c5
   128e0:	0000cb59 	.word	0x0000cb59
   128e4:	2000328c 	.word	0x2000328c
   128e8:	0000cb21 	.word	0x0000cb21
   128ec:	0000022d 	.word	0x0000022d
   128f0:	0001026d 	.word	0x0001026d
   128f4:	00010295 	.word	0x00010295

000128f8 <AssemblePacket>:
   128f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   128fa:	2710      	movs	r7, #16
   128fc:	b08f      	sub	sp, #60	; 0x3c
   128fe:	9308      	str	r3, [sp, #32]
   12900:	ab0d      	add	r3, sp, #52	; 0x34
   12902:	801f      	strh	r7, [r3, #0]
   12904:	231e      	movs	r3, #30
   12906:	920a      	str	r2, [sp, #40]	; 0x28
   12908:	aa06      	add	r2, sp, #24
   1290a:	189b      	adds	r3, r3, r2
   1290c:	2500      	movs	r5, #0
   1290e:	2210      	movs	r2, #16
   12910:	ac0c      	add	r4, sp, #48	; 0x30
   12912:	9006      	str	r0, [sp, #24]
   12914:	910b      	str	r1, [sp, #44]	; 0x2c
   12916:	32ff      	adds	r2, #255	; 0xff
   12918:	0029      	movs	r1, r5
   1291a:	4ed1      	ldr	r6, [pc, #836]	; (12c60 <AssemblePacket+0x368>)
   1291c:	7025      	strb	r5, [r4, #0]
   1291e:	48d1      	ldr	r0, [pc, #836]	; (12c64 <AssemblePacket+0x36c>)
   12920:	801d      	strh	r5, [r3, #0]
   12922:	47b0      	blx	r6
   12924:	003a      	movs	r2, r7
   12926:	0029      	movs	r1, r5
   12928:	48cf      	ldr	r0, [pc, #828]	; (12c68 <AssemblePacket+0x370>)
   1292a:	47b0      	blx	r6
   1292c:	221f      	movs	r2, #31
   1292e:	7823      	ldrb	r3, [r4, #0]
   12930:	9906      	ldr	r1, [sp, #24]
   12932:	4013      	ands	r3, r2
   12934:	42a9      	cmp	r1, r5
   12936:	d100      	bne.n	1293a <AssemblePacket+0x42>
   12938:	e0dc      	b.n	12af4 <AssemblePacket+0x1fc>
   1293a:	3a9f      	subs	r2, #159	; 0x9f
   1293c:	4313      	orrs	r3, r2
   1293e:	7023      	strb	r3, [r4, #0]
   12940:	4bca      	ldr	r3, [pc, #808]	; (12c6c <AssemblePacket+0x374>)
   12942:	3281      	adds	r2, #129	; 0x81
   12944:	3394      	adds	r3, #148	; 0x94
   12946:	7819      	ldrb	r1, [r3, #0]
   12948:	430a      	orrs	r2, r1
   1294a:	701a      	strb	r2, [r3, #0]
   1294c:	22e0      	movs	r2, #224	; 0xe0
   1294e:	7823      	ldrb	r3, [r4, #0]
   12950:	48c4      	ldr	r0, [pc, #784]	; (12c64 <AssemblePacket+0x36c>)
   12952:	4013      	ands	r3, r2
   12954:	7023      	strb	r3, [r4, #0]
   12956:	4cc5      	ldr	r4, [pc, #788]	; (12c6c <AssemblePacket+0x374>)
   12958:	7403      	strb	r3, [r0, #16]
   1295a:	3adc      	subs	r2, #220	; 0xdc
   1295c:	4bc4      	ldr	r3, [pc, #784]	; (12c70 <AssemblePacket+0x378>)
   1295e:	3011      	adds	r0, #17
   12960:	1c61      	adds	r1, r4, #1
   12962:	4798      	blx	r3
   12964:	2215      	movs	r2, #21
   12966:	ab0d      	add	r3, sp, #52	; 0x34
   12968:	0025      	movs	r5, r4
   1296a:	801a      	strh	r2, [r3, #0]
   1296c:	2600      	movs	r6, #0
   1296e:	466b      	mov	r3, sp
   12970:	3584      	adds	r5, #132	; 0x84
   12972:	761e      	strb	r6, [r3, #24]
   12974:	782b      	ldrb	r3, [r5, #0]
   12976:	069b      	lsls	r3, r3, #26
   12978:	d400      	bmi.n	1297c <AssemblePacket+0x84>
   1297a:	e130      	b.n	12bde <AssemblePacket+0x2e6>
   1297c:	0027      	movs	r7, r4
   1297e:	4bbd      	ldr	r3, [pc, #756]	; (12c74 <AssemblePacket+0x37c>)
   12980:	37f3      	adds	r7, #243	; 0xf3
   12982:	781a      	ldrb	r2, [r3, #0]
   12984:	783b      	ldrb	r3, [r7, #0]
   12986:	429a      	cmp	r2, r3
   12988:	d31e      	bcc.n	129c8 <AssemblePacket+0xd0>
   1298a:	2180      	movs	r1, #128	; 0x80
   1298c:	466b      	mov	r3, sp
   1298e:	0022      	movs	r2, r4
   12990:	4249      	negs	r1, r1
   12992:	32ca      	adds	r2, #202	; 0xca
   12994:	7619      	strb	r1, [r3, #24]
   12996:	8813      	ldrh	r3, [r2, #0]
   12998:	3301      	adds	r3, #1
   1299a:	b29b      	uxth	r3, r3
   1299c:	8013      	strh	r3, [r2, #0]
   1299e:	0022      	movs	r2, r4
   129a0:	32dc      	adds	r2, #220	; 0xdc
   129a2:	7812      	ldrb	r2, [r2, #0]
   129a4:	4293      	cmp	r3, r2
   129a6:	d30f      	bcc.n	129c8 <AssemblePacket+0xd0>
   129a8:	2040      	movs	r0, #64	; 0x40
   129aa:	4308      	orrs	r0, r1
   129ac:	9006      	str	r0, [sp, #24]
   129ae:	0020      	movs	r0, r4
   129b0:	3094      	adds	r0, #148	; 0x94
   129b2:	7801      	ldrb	r1, [r0, #0]
   129b4:	4684      	mov	ip, r0
   129b6:	2010      	movs	r0, #16
   129b8:	4301      	orrs	r1, r0
   129ba:	4660      	mov	r0, ip
   129bc:	7001      	strb	r1, [r0, #0]
   129be:	4293      	cmp	r3, r2
   129c0:	d000      	beq.n	129c4 <AssemblePacket+0xcc>
   129c2:	e09b      	b.n	12afc <AssemblePacket+0x204>
   129c4:	34f6      	adds	r4, #246	; 0xf6
   129c6:	7026      	strb	r6, [r4, #0]
   129c8:	4da8      	ldr	r5, [pc, #672]	; (12c6c <AssemblePacket+0x374>)
   129ca:	2102      	movs	r1, #2
   129cc:	002a      	movs	r2, r5
   129ce:	3294      	adds	r2, #148	; 0x94
   129d0:	7813      	ldrb	r3, [r2, #0]
   129d2:	420b      	tst	r3, r1
   129d4:	d005      	beq.n	129e2 <AssemblePacket+0xea>
   129d6:	2020      	movs	r0, #32
   129d8:	9c06      	ldr	r4, [sp, #24]
   129da:	438b      	bics	r3, r1
   129dc:	4304      	orrs	r4, r0
   129de:	9406      	str	r4, [sp, #24]
   129e0:	7013      	strb	r3, [r2, #0]
   129e2:	2310      	movs	r3, #16
   129e4:	9c06      	ldr	r4, [sp, #24]
   129e6:	439c      	bics	r4, r3
   129e8:	002b      	movs	r3, r5
   129ea:	33e0      	adds	r3, #224	; 0xe0
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	9309      	str	r3, [sp, #36]	; 0x24
   129f0:	2b00      	cmp	r3, #0
   129f2:	d003      	beq.n	129fc <AssemblePacket+0x104>
   129f4:	9b08      	ldr	r3, [sp, #32]
   129f6:	2b00      	cmp	r3, #0
   129f8:	d000      	beq.n	129fc <AssemblePacket+0x104>
   129fa:	e0f6      	b.n	12bea <AssemblePacket+0x2f2>
   129fc:	230f      	movs	r3, #15
   129fe:	439c      	bics	r4, r3
   12a00:	466b      	mov	r3, sp
   12a02:	9406      	str	r4, [sp, #24]
   12a04:	ac0d      	add	r4, sp, #52	; 0x34
   12a06:	8826      	ldrh	r6, [r4, #0]
   12a08:	4f96      	ldr	r7, [pc, #600]	; (12c64 <AssemblePacket+0x36c>)
   12a0a:	7e1b      	ldrb	r3, [r3, #24]
   12a0c:	1c70      	adds	r0, r6, #1
   12a0e:	b280      	uxth	r0, r0
   12a10:	55bb      	strb	r3, [r7, r6]
   12a12:	19c0      	adds	r0, r0, r7
   12a14:	4b96      	ldr	r3, [pc, #600]	; (12c70 <AssemblePacket+0x378>)
   12a16:	2202      	movs	r2, #2
   12a18:	4997      	ldr	r1, [pc, #604]	; (12c78 <AssemblePacket+0x380>)
   12a1a:	4798      	blx	r3
   12a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a1e:	3603      	adds	r6, #3
   12a20:	8026      	strh	r6, [r4, #0]
   12a22:	2b00      	cmp	r3, #0
   12a24:	d100      	bne.n	12a28 <AssemblePacket+0x130>
   12a26:	e0e7      	b.n	12bf8 <AssemblePacket+0x300>
   12a28:	9b08      	ldr	r3, [sp, #32]
   12a2a:	2b00      	cmp	r3, #0
   12a2c:	d004      	beq.n	12a38 <AssemblePacket+0x140>
   12a2e:	2201      	movs	r2, #1
   12a30:	0021      	movs	r1, r4
   12a32:	0038      	movs	r0, r7
   12a34:	4b91      	ldr	r3, [pc, #580]	; (12c7c <AssemblePacket+0x384>)
   12a36:	4798      	blx	r3
   12a38:	466a      	mov	r2, sp
   12a3a:	212c      	movs	r1, #44	; 0x2c
   12a3c:	1852      	adds	r2, r2, r1
   12a3e:	8823      	ldrh	r3, [r4, #0]
   12a40:	7812      	ldrb	r2, [r2, #0]
   12a42:	1c5e      	adds	r6, r3, #1
   12a44:	54fa      	strb	r2, [r7, r3]
   12a46:	9b08      	ldr	r3, [sp, #32]
   12a48:	b2b6      	uxth	r6, r6
   12a4a:	8026      	strh	r6, [r4, #0]
   12a4c:	2b00      	cmp	r3, #0
   12a4e:	d100      	bne.n	12a52 <AssemblePacket+0x15a>
   12a50:	e0d6      	b.n	12c00 <AssemblePacket+0x308>
   12a52:	001a      	movs	r2, r3
   12a54:	990a      	ldr	r1, [sp, #40]	; 0x28
   12a56:	4b86      	ldr	r3, [pc, #536]	; (12c70 <AssemblePacket+0x378>)
   12a58:	19b8      	adds	r0, r7, r6
   12a5a:	4798      	blx	r3
   12a5c:	2120      	movs	r1, #32
   12a5e:	466b      	mov	r3, sp
   12a60:	185b      	adds	r3, r3, r1
   12a62:	7819      	ldrb	r1, [r3, #0]
   12a64:	682b      	ldr	r3, [r5, #0]
   12a66:	002a      	movs	r2, r5
   12a68:	0a18      	lsrs	r0, r3, #8
   12a6a:	792b      	ldrb	r3, [r5, #4]
   12a6c:	3288      	adds	r2, #136	; 0x88
   12a6e:	061b      	lsls	r3, r3, #24
   12a70:	4303      	orrs	r3, r0
   12a72:	9304      	str	r3, [sp, #16]
   12a74:	2301      	movs	r3, #1
   12a76:	9301      	str	r3, [sp, #4]
   12a78:	4b81      	ldr	r3, [pc, #516]	; (12c80 <AssemblePacket+0x388>)
   12a7a:	9703      	str	r7, [sp, #12]
   12a7c:	9602      	str	r6, [sp, #8]
   12a7e:	9300      	str	r3, [sp, #0]
   12a80:	6813      	ldr	r3, [r2, #0]
   12a82:	980a      	ldr	r0, [sp, #40]	; 0x28
   12a84:	2200      	movs	r2, #0
   12a86:	4c7f      	ldr	r4, [pc, #508]	; (12c84 <AssemblePacket+0x38c>)
   12a88:	47a0      	blx	r4
   12a8a:	2800      	cmp	r0, #0
   12a8c:	d002      	beq.n	12a94 <AssemblePacket+0x19c>
   12a8e:	2020      	movs	r0, #32
   12a90:	4b7d      	ldr	r3, [pc, #500]	; (12c88 <AssemblePacket+0x390>)
   12a92:	4798      	blx	r3
   12a94:	aa0d      	add	r2, sp, #52	; 0x34
   12a96:	8813      	ldrh	r3, [r2, #0]
   12a98:	9908      	ldr	r1, [sp, #32]
   12a9a:	18cb      	adds	r3, r1, r3
   12a9c:	8013      	strh	r3, [r2, #0]
   12a9e:	4c73      	ldr	r4, [pc, #460]	; (12c6c <AssemblePacket+0x374>)
   12aa0:	ae0d      	add	r6, sp, #52	; 0x34
   12aa2:	0021      	movs	r1, r4
   12aa4:	6823      	ldr	r3, [r4, #0]
   12aa6:	8832      	ldrh	r2, [r6, #0]
   12aa8:	0a18      	lsrs	r0, r3, #8
   12aaa:	7923      	ldrb	r3, [r4, #4]
   12aac:	3a10      	subs	r2, #16
   12aae:	061b      	lsls	r3, r3, #24
   12ab0:	4303      	orrs	r3, r0
   12ab2:	9300      	str	r3, [sp, #0]
   12ab4:	3188      	adds	r1, #136	; 0x88
   12ab6:	b2d2      	uxtb	r2, r2
   12ab8:	2349      	movs	r3, #73	; 0x49
   12aba:	6809      	ldr	r1, [r1, #0]
   12abc:	2000      	movs	r0, #0
   12abe:	4d73      	ldr	r5, [pc, #460]	; (12c8c <AssemblePacket+0x394>)
   12ac0:	47a8      	blx	r5
   12ac2:	4f68      	ldr	r7, [pc, #416]	; (12c64 <AssemblePacket+0x36c>)
   12ac4:	2210      	movs	r2, #16
   12ac6:	4968      	ldr	r1, [pc, #416]	; (12c68 <AssemblePacket+0x370>)
   12ac8:	0038      	movs	r0, r7
   12aca:	4b69      	ldr	r3, [pc, #420]	; (12c70 <AssemblePacket+0x378>)
   12acc:	4798      	blx	r3
   12ace:	8833      	ldrh	r3, [r6, #0]
   12ad0:	4a65      	ldr	r2, [pc, #404]	; (12c68 <AssemblePacket+0x370>)
   12ad2:	9300      	str	r3, [sp, #0]
   12ad4:	2102      	movs	r1, #2
   12ad6:	003b      	movs	r3, r7
   12ad8:	4d6d      	ldr	r5, [pc, #436]	; (12c90 <AssemblePacket+0x398>)
   12ada:	486e      	ldr	r0, [pc, #440]	; (12c94 <AssemblePacket+0x39c>)
   12adc:	47a8      	blx	r5
   12ade:	8836      	ldrh	r6, [r6, #0]
   12ae0:	2204      	movs	r2, #4
   12ae2:	19f0      	adds	r0, r6, r7
   12ae4:	4960      	ldr	r1, [pc, #384]	; (12c68 <AssemblePacket+0x370>)
   12ae6:	4b62      	ldr	r3, [pc, #392]	; (12c70 <AssemblePacket+0x378>)
   12ae8:	4798      	blx	r3
   12aea:	3e0c      	subs	r6, #12
   12aec:	34ce      	adds	r4, #206	; 0xce
   12aee:	8026      	strh	r6, [r4, #0]
   12af0:	b00f      	add	sp, #60	; 0x3c
   12af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12af4:	2240      	movs	r2, #64	; 0x40
   12af6:	4313      	orrs	r3, r2
   12af8:	7023      	strb	r3, [r4, #0]
   12afa:	e727      	b.n	1294c <AssemblePacket+0x54>
   12afc:	4293      	cmp	r3, r2
   12afe:	d800      	bhi.n	12b02 <AssemblePacket+0x20a>
   12b00:	e762      	b.n	129c8 <AssemblePacket+0xd0>
   12b02:	0022      	movs	r2, r4
   12b04:	0021      	movs	r1, r4
   12b06:	32f6      	adds	r2, #246	; 0xf6
   12b08:	7813      	ldrb	r3, [r2, #0]
   12b0a:	31dd      	adds	r1, #221	; 0xdd
   12b0c:	3301      	adds	r3, #1
   12b0e:	b2db      	uxtb	r3, r3
   12b10:	7013      	strb	r3, [r2, #0]
   12b12:	7809      	ldrb	r1, [r1, #0]
   12b14:	4299      	cmp	r1, r3
   12b16:	d900      	bls.n	12b1a <AssemblePacket+0x222>
   12b18:	e756      	b.n	129c8 <AssemblePacket+0xd0>
   12b1a:	231a      	movs	r3, #26
   12b1c:	7016      	strb	r6, [r2, #0]
   12b1e:	aa06      	add	r2, sp, #24
   12b20:	189b      	adds	r3, r3, r2
   12b22:	001a      	movs	r2, r3
   12b24:	0031      	movs	r1, r6
   12b26:	4b5c      	ldr	r3, [pc, #368]	; (12c98 <AssemblePacket+0x3a0>)
   12b28:	203c      	movs	r0, #60	; 0x3c
   12b2a:	4798      	blx	r3
   12b2c:	4b5b      	ldr	r3, [pc, #364]	; (12c9c <AssemblePacket+0x3a4>)
   12b2e:	781a      	ldrb	r2, [r3, #0]
   12b30:	ab06      	add	r3, sp, #24
   12b32:	7e9b      	ldrb	r3, [r3, #26]
   12b34:	429a      	cmp	r2, r3
   12b36:	d00d      	beq.n	12b54 <AssemblePacket+0x25c>
   12b38:	34ff      	adds	r4, #255	; 0xff
   12b3a:	7820      	ldrb	r0, [r4, #0]
   12b3c:	4b58      	ldr	r3, [pc, #352]	; (12ca0 <AssemblePacket+0x3a8>)
   12b3e:	4798      	blx	r3
   12b40:	0031      	movs	r1, r6
   12b42:	4a56      	ldr	r2, [pc, #344]	; (12c9c <AssemblePacket+0x3a4>)
   12b44:	4b54      	ldr	r3, [pc, #336]	; (12c98 <AssemblePacket+0x3a0>)
   12b46:	2035      	movs	r0, #53	; 0x35
   12b48:	4798      	blx	r3
   12b4a:	210a      	movs	r1, #10
   12b4c:	0030      	movs	r0, r6
   12b4e:	4b55      	ldr	r3, [pc, #340]	; (12ca4 <AssemblePacket+0x3ac>)
   12b50:	4798      	blx	r3
   12b52:	e739      	b.n	129c8 <AssemblePacket+0xd0>
   12b54:	4b47      	ldr	r3, [pc, #284]	; (12c74 <AssemblePacket+0x37c>)
   12b56:	783a      	ldrb	r2, [r7, #0]
   12b58:	781b      	ldrb	r3, [r3, #0]
   12b5a:	4293      	cmp	r3, r2
   12b5c:	d022      	beq.n	12ba4 <AssemblePacket+0x2ac>
   12b5e:	d800      	bhi.n	12b62 <AssemblePacket+0x26a>
   12b60:	e732      	b.n	129c8 <AssemblePacket+0xd0>
   12b62:	221b      	movs	r2, #27
   12b64:	003d      	movs	r5, r7
   12b66:	a906      	add	r1, sp, #24
   12b68:	3b01      	subs	r3, #1
   12b6a:	1852      	adds	r2, r2, r1
   12b6c:	7013      	strb	r3, [r2, #0]
   12b6e:	261b      	movs	r6, #27
   12b70:	ab06      	add	r3, sp, #24
   12b72:	18f6      	adds	r6, r6, r3
   12b74:	782a      	ldrb	r2, [r5, #0]
   12b76:	7833      	ldrb	r3, [r6, #0]
   12b78:	429a      	cmp	r2, r3
   12b7a:	d900      	bls.n	12b7e <AssemblePacket+0x286>
   12b7c:	e724      	b.n	129c8 <AssemblePacket+0xd0>
   12b7e:	0031      	movs	r1, r6
   12b80:	2010      	movs	r0, #16
   12b82:	4f49      	ldr	r7, [pc, #292]	; (12ca8 <AssemblePacket+0x3b0>)
   12b84:	47b8      	blx	r7
   12b86:	2808      	cmp	r0, #8
   12b88:	d000      	beq.n	12b8c <AssemblePacket+0x294>
   12b8a:	e71d      	b.n	129c8 <AssemblePacket+0xd0>
   12b8c:	0031      	movs	r1, r6
   12b8e:	3009      	adds	r0, #9
   12b90:	47b8      	blx	r7
   12b92:	7833      	ldrb	r3, [r6, #0]
   12b94:	2808      	cmp	r0, #8
   12b96:	d061      	beq.n	12c5c <AssemblePacket+0x364>
   12b98:	782a      	ldrb	r2, [r5, #0]
   12b9a:	429a      	cmp	r2, r3
   12b9c:	d2e7      	bcs.n	12b6e <AssemblePacket+0x276>
   12b9e:	3b01      	subs	r3, #1
   12ba0:	7033      	strb	r3, [r6, #0]
   12ba2:	e7e4      	b.n	12b6e <AssemblePacket+0x276>
   12ba4:	34ff      	adds	r4, #255	; 0xff
   12ba6:	7820      	ldrb	r0, [r4, #0]
   12ba8:	4b40      	ldr	r3, [pc, #256]	; (12cac <AssemblePacket+0x3b4>)
   12baa:	4798      	blx	r3
   12bac:	231b      	movs	r3, #27
   12bae:	aa06      	add	r2, sp, #24
   12bb0:	189b      	adds	r3, r3, r2
   12bb2:	0019      	movs	r1, r3
   12bb4:	4c3e      	ldr	r4, [pc, #248]	; (12cb0 <AssemblePacket+0x3b8>)
   12bb6:	2013      	movs	r0, #19
   12bb8:	47a0      	blx	r4
   12bba:	231b      	movs	r3, #27
   12bbc:	aa06      	add	r2, sp, #24
   12bbe:	189b      	adds	r3, r3, r2
   12bc0:	0019      	movs	r1, r3
   12bc2:	2014      	movs	r0, #20
   12bc4:	47a0      	blx	r4
   12bc6:	2113      	movs	r1, #19
   12bc8:	0030      	movs	r0, r6
   12bca:	4c36      	ldr	r4, [pc, #216]	; (12ca4 <AssemblePacket+0x3ac>)
   12bcc:	47a0      	blx	r4
   12bce:	2210      	movs	r2, #16
   12bd0:	786b      	ldrb	r3, [r5, #1]
   12bd2:	210b      	movs	r1, #11
   12bd4:	4313      	orrs	r3, r2
   12bd6:	706b      	strb	r3, [r5, #1]
   12bd8:	2001      	movs	r0, #1
   12bda:	47a0      	blx	r4
   12bdc:	e6f4      	b.n	129c8 <AssemblePacket+0xd0>
   12bde:	2210      	movs	r2, #16
   12be0:	3494      	adds	r4, #148	; 0x94
   12be2:	7823      	ldrb	r3, [r4, #0]
   12be4:	4393      	bics	r3, r2
   12be6:	7023      	strb	r3, [r4, #0]
   12be8:	e6ee      	b.n	129c8 <AssemblePacket+0xd0>
   12bea:	4b32      	ldr	r3, [pc, #200]	; (12cb4 <AssemblePacket+0x3bc>)
   12bec:	4798      	blx	r3
   12bee:	230f      	movs	r3, #15
   12bf0:	4018      	ands	r0, r3
   12bf2:	439c      	bics	r4, r3
   12bf4:	4304      	orrs	r4, r0
   12bf6:	e703      	b.n	12a00 <AssemblePacket+0x108>
   12bf8:	9b08      	ldr	r3, [sp, #32]
   12bfa:	2b00      	cmp	r3, #0
   12bfc:	d000      	beq.n	12c00 <AssemblePacket+0x308>
   12bfe:	e71b      	b.n	12a38 <AssemblePacket+0x140>
   12c00:	4d1a      	ldr	r5, [pc, #104]	; (12c6c <AssemblePacket+0x374>)
   12c02:	002b      	movs	r3, r5
   12c04:	33e0      	adds	r3, #224	; 0xe0
   12c06:	781b      	ldrb	r3, [r3, #0]
   12c08:	2b00      	cmp	r3, #0
   12c0a:	d100      	bne.n	12c0e <AssemblePacket+0x316>
   12c0c:	e747      	b.n	12a9e <AssemblePacket+0x1a6>
   12c0e:	261e      	movs	r6, #30
   12c10:	ab06      	add	r3, sp, #24
   12c12:	18f6      	adds	r6, r6, r3
   12c14:	2200      	movs	r2, #0
   12c16:	0031      	movs	r1, r6
   12c18:	4827      	ldr	r0, [pc, #156]	; (12cb8 <AssemblePacket+0x3c0>)
   12c1a:	4b18      	ldr	r3, [pc, #96]	; (12c7c <AssemblePacket+0x384>)
   12c1c:	4798      	blx	r3
   12c1e:	682b      	ldr	r3, [r5, #0]
   12c20:	7831      	ldrb	r1, [r6, #0]
   12c22:	0a18      	lsrs	r0, r3, #8
   12c24:	792b      	ldrb	r3, [r5, #4]
   12c26:	9703      	str	r7, [sp, #12]
   12c28:	061b      	lsls	r3, r3, #24
   12c2a:	4303      	orrs	r3, r0
   12c2c:	9304      	str	r3, [sp, #16]
   12c2e:	8823      	ldrh	r3, [r4, #0]
   12c30:	002a      	movs	r2, r5
   12c32:	9302      	str	r3, [sp, #8]
   12c34:	2302      	movs	r3, #2
   12c36:	9301      	str	r3, [sp, #4]
   12c38:	4b16      	ldr	r3, [pc, #88]	; (12c94 <AssemblePacket+0x39c>)
   12c3a:	3288      	adds	r2, #136	; 0x88
   12c3c:	9300      	str	r3, [sp, #0]
   12c3e:	6813      	ldr	r3, [r2, #0]
   12c40:	481d      	ldr	r0, [pc, #116]	; (12cb8 <AssemblePacket+0x3c0>)
   12c42:	2200      	movs	r2, #0
   12c44:	4d0f      	ldr	r5, [pc, #60]	; (12c84 <AssemblePacket+0x38c>)
   12c46:	47a8      	blx	r5
   12c48:	2800      	cmp	r0, #0
   12c4a:	d002      	beq.n	12c52 <AssemblePacket+0x35a>
   12c4c:	2020      	movs	r0, #32
   12c4e:	4b0e      	ldr	r3, [pc, #56]	; (12c88 <AssemblePacket+0x390>)
   12c50:	4798      	blx	r3
   12c52:	8823      	ldrh	r3, [r4, #0]
   12c54:	8832      	ldrh	r2, [r6, #0]
   12c56:	189b      	adds	r3, r3, r2
   12c58:	8023      	strh	r3, [r4, #0]
   12c5a:	e720      	b.n	12a9e <AssemblePacket+0x1a6>
   12c5c:	34e7      	adds	r4, #231	; 0xe7
   12c5e:	e7c2      	b.n	12be6 <AssemblePacket+0x2ee>
   12c60:	0001679d 	.word	0x0001679d
   12c64:	200033b8 	.word	0x200033b8
   12c68:	20001eb5 	.word	0x20001eb5
   12c6c:	20003170 	.word	0x20003170
   12c70:	0001678b 	.word	0x0001678b
   12c74:	20003257 	.word	0x20003257
   12c78:	200031f8 	.word	0x200031f8
   12c7c:	0000fc01 	.word	0x0000fc01
   12c80:	200031a5 	.word	0x200031a5
   12c84:	00010d15 	.word	0x00010d15
   12c88:	00010dd5 	.word	0x00010dd5
   12c8c:	0000ff2d 	.word	0x0000ff2d
   12c90:	00007259 	.word	0x00007259
   12c94:	20003195 	.word	0x20003195
   12c98:	0000cb21 	.word	0x0000cb21
   12c9c:	20003259 	.word	0x20003259
   12ca0:	0000cb75 	.word	0x0000cb75
   12ca4:	000092e9 	.word	0x000092e9
   12ca8:	0000cb3d 	.word	0x0000cb3d
   12cac:	0000cc01 	.word	0x0000cc01
   12cb0:	0001237d 	.word	0x0001237d
   12cb4:	0000fb61 	.word	0x0000fb61
   12cb8:	20002f34 	.word	0x20002f34

00012cbc <LorawanClasscUlAckTimerCallback>:
   12cbc:	2102      	movs	r1, #2
   12cbe:	4b03      	ldr	r3, [pc, #12]	; (12ccc <LorawanClasscUlAckTimerCallback+0x10>)
   12cc0:	3394      	adds	r3, #148	; 0x94
   12cc2:	781a      	ldrb	r2, [r3, #0]
   12cc4:	438a      	bics	r2, r1
   12cc6:	701a      	strb	r2, [r3, #0]
   12cc8:	4770      	bx	lr
   12cca:	46c0      	nop			; (mov r8, r8)
   12ccc:	20003170 	.word	0x20003170

00012cd0 <LorawanClasscValidateSend>:
   12cd0:	2388      	movs	r3, #136	; 0x88
   12cd2:	b510      	push	{r4, lr}
   12cd4:	4c0a      	ldr	r4, [pc, #40]	; (12d00 <LorawanClasscValidateSend+0x30>)
   12cd6:	009b      	lsls	r3, r3, #2
   12cd8:	5ce3      	ldrb	r3, [r4, r3]
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d008      	beq.n	12cf0 <LorawanClasscValidateSend+0x20>
   12cde:	220e      	movs	r2, #14
   12ce0:	3484      	adds	r4, #132	; 0x84
   12ce2:	7823      	ldrb	r3, [r4, #0]
   12ce4:	2008      	movs	r0, #8
   12ce6:	4013      	ands	r3, r2
   12ce8:	2b02      	cmp	r3, #2
   12cea:	d100      	bne.n	12cee <LorawanClasscValidateSend+0x1e>
   12cec:	2011      	movs	r0, #17
   12cee:	bd10      	pop	{r4, pc}
   12cf0:	2394      	movs	r3, #148	; 0x94
   12cf2:	005b      	lsls	r3, r3, #1
   12cf4:	5ce0      	ldrb	r0, [r4, r3]
   12cf6:	4b03      	ldr	r3, [pc, #12]	; (12d04 <LorawanClasscValidateSend+0x34>)
   12cf8:	4798      	blx	r3
   12cfa:	2800      	cmp	r0, #0
   12cfc:	d1ef      	bne.n	12cde <LorawanClasscValidateSend+0xe>
   12cfe:	e7f5      	b.n	12cec <LorawanClasscValidateSend+0x1c>
   12d00:	20003170 	.word	0x20003170
   12d04:	0000d201 	.word	0x0000d201

00012d08 <LorawanClasscRxDone>:
   12d08:	221f      	movs	r2, #31
   12d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12d0c:	7803      	ldrb	r3, [r0, #0]
   12d0e:	4c1c      	ldr	r4, [pc, #112]	; (12d80 <LorawanClasscRxDone+0x78>)
   12d10:	4393      	bics	r3, r2
   12d12:	2ba0      	cmp	r3, #160	; 0xa0
   12d14:	d10c      	bne.n	12d30 <LorawanClasscRxDone+0x28>
   12d16:	2694      	movs	r6, #148	; 0x94
   12d18:	0076      	lsls	r6, r6, #1
   12d1a:	5da0      	ldrb	r0, [r4, r6]
   12d1c:	4b19      	ldr	r3, [pc, #100]	; (12d84 <LorawanClasscRxDone+0x7c>)
   12d1e:	4798      	blx	r3
   12d20:	1e05      	subs	r5, r0, #0
   12d22:	d019      	beq.n	12d58 <LorawanClasscRxDone+0x50>
   12d24:	0022      	movs	r2, r4
   12d26:	2102      	movs	r1, #2
   12d28:	3294      	adds	r2, #148	; 0x94
   12d2a:	7813      	ldrb	r3, [r2, #0]
   12d2c:	438b      	bics	r3, r1
   12d2e:	7013      	strb	r3, [r2, #0]
   12d30:	0021      	movs	r1, r4
   12d32:	3184      	adds	r1, #132	; 0x84
   12d34:	780b      	ldrb	r3, [r1, #0]
   12d36:	220e      	movs	r2, #14
   12d38:	0018      	movs	r0, r3
   12d3a:	4010      	ands	r0, r2
   12d3c:	2806      	cmp	r0, #6
   12d3e:	d103      	bne.n	12d48 <LorawanClasscRxDone+0x40>
   12d40:	4393      	bics	r3, r2
   12d42:	3a04      	subs	r2, #4
   12d44:	4313      	orrs	r3, r2
   12d46:	700b      	strb	r3, [r1, #0]
   12d48:	2390      	movs	r3, #144	; 0x90
   12d4a:	2201      	movs	r2, #1
   12d4c:	009b      	lsls	r3, r3, #2
   12d4e:	54e2      	strb	r2, [r4, r3]
   12d50:	2000      	movs	r0, #0
   12d52:	4b0d      	ldr	r3, [pc, #52]	; (12d88 <LorawanClasscRxDone+0x80>)
   12d54:	4798      	blx	r3
   12d56:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12d58:	4b0c      	ldr	r3, [pc, #48]	; (12d8c <LorawanClasscRxDone+0x84>)
   12d5a:	5da6      	ldrb	r6, [r4, r6]
   12d5c:	4798      	blx	r3
   12d5e:	4b0c      	ldr	r3, [pc, #48]	; (12d90 <LorawanClasscRxDone+0x88>)
   12d60:	490c      	ldr	r1, [pc, #48]	; (12d94 <LorawanClasscRxDone+0x8c>)
   12d62:	4798      	blx	r3
   12d64:	23fa      	movs	r3, #250	; 0xfa
   12d66:	009b      	lsls	r3, r3, #2
   12d68:	18cb      	adds	r3, r1, r3
   12d6a:	21fa      	movs	r1, #250	; 0xfa
   12d6c:	0089      	lsls	r1, r1, #2
   12d6e:	4359      	muls	r1, r3
   12d70:	9500      	str	r5, [sp, #0]
   12d72:	002a      	movs	r2, r5
   12d74:	4b08      	ldr	r3, [pc, #32]	; (12d98 <LorawanClasscRxDone+0x90>)
   12d76:	0030      	movs	r0, r6
   12d78:	4d08      	ldr	r5, [pc, #32]	; (12d9c <LorawanClasscRxDone+0x94>)
   12d7a:	47a8      	blx	r5
   12d7c:	e7d8      	b.n	12d30 <LorawanClasscRxDone+0x28>
   12d7e:	46c0      	nop			; (mov r8, r8)
   12d80:	20003170 	.word	0x20003170
   12d84:	0000d201 	.word	0x0000d201
   12d88:	00011215 	.word	0x00011215
   12d8c:	00016ed1 	.word	0x00016ed1
   12d90:	00013809 	.word	0x00013809
   12d94:	000007d1 	.word	0x000007d1
   12d98:	00012cbd 	.word	0x00012cbd
   12d9c:	0000d069 	.word	0x0000d069

00012da0 <LorawanClasscRxTimeout>:
   12da0:	4a0c      	ldr	r2, [pc, #48]	; (12dd4 <LorawanClasscRxTimeout+0x34>)
   12da2:	b510      	push	{r4, lr}
   12da4:	0010      	movs	r0, r2
   12da6:	3084      	adds	r0, #132	; 0x84
   12da8:	7803      	ldrb	r3, [r0, #0]
   12daa:	240e      	movs	r4, #14
   12dac:	0019      	movs	r1, r3
   12dae:	4021      	ands	r1, r4
   12db0:	2906      	cmp	r1, #6
   12db2:	d107      	bne.n	12dc4 <LorawanClasscRxTimeout+0x24>
   12db4:	2208      	movs	r2, #8
   12db6:	43a3      	bics	r3, r4
   12db8:	4313      	orrs	r3, r2
   12dba:	7003      	strb	r3, [r0, #0]
   12dbc:	2000      	movs	r0, #0
   12dbe:	4b06      	ldr	r3, [pc, #24]	; (12dd8 <LorawanClasscRxTimeout+0x38>)
   12dc0:	4798      	blx	r3
   12dc2:	e006      	b.n	12dd2 <LorawanClasscRxTimeout+0x32>
   12dc4:	290a      	cmp	r1, #10
   12dc6:	d1f9      	bne.n	12dbc <LorawanClasscRxTimeout+0x1c>
   12dc8:	2388      	movs	r3, #136	; 0x88
   12dca:	009b      	lsls	r3, r3, #2
   12dcc:	5cd3      	ldrb	r3, [r2, r3]
   12dce:	2b00      	cmp	r3, #0
   12dd0:	d0f4      	beq.n	12dbc <LorawanClasscRxTimeout+0x1c>
   12dd2:	bd10      	pop	{r4, pc}
   12dd4:	20003170 	.word	0x20003170
   12dd8:	00011215 	.word	0x00011215

00012ddc <LorawanClasscNotifyAppOnReceive>:
   12ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dde:	001f      	movs	r7, r3
   12de0:	2394      	movs	r3, #148	; 0x94
   12de2:	0016      	movs	r6, r2
   12de4:	4a07      	ldr	r2, [pc, #28]	; (12e04 <LorawanClasscNotifyAppOnReceive+0x28>)
   12de6:	005b      	lsls	r3, r3, #1
   12de8:	0004      	movs	r4, r0
   12dea:	5cd0      	ldrb	r0, [r2, r3]
   12dec:	4b06      	ldr	r3, [pc, #24]	; (12e08 <LorawanClasscNotifyAppOnReceive+0x2c>)
   12dee:	000d      	movs	r5, r1
   12df0:	4798      	blx	r3
   12df2:	2800      	cmp	r0, #0
   12df4:	d105      	bne.n	12e02 <LorawanClasscNotifyAppOnReceive+0x26>
   12df6:	0020      	movs	r0, r4
   12df8:	003b      	movs	r3, r7
   12dfa:	0032      	movs	r2, r6
   12dfc:	0029      	movs	r1, r5
   12dfe:	4c03      	ldr	r4, [pc, #12]	; (12e0c <LorawanClasscNotifyAppOnReceive+0x30>)
   12e00:	47a0      	blx	r4
   12e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e04:	20003170 	.word	0x20003170
   12e08:	0000d201 	.word	0x0000d201
   12e0c:	00010e39 	.word	0x00010e39

00012e10 <LorawanMcastEnable>:
   12e10:	0002      	movs	r2, r0
   12e12:	b510      	push	{r4, lr}
   12e14:	200a      	movs	r0, #10
   12e16:	2903      	cmp	r1, #3
   12e18:	d822      	bhi.n	12e60 <LorawanMcastEnable+0x50>
   12e1a:	4b1a      	ldr	r3, [pc, #104]	; (12e84 <LorawanMcastEnable+0x74>)
   12e1c:	2a00      	cmp	r2, #0
   12e1e:	d020      	beq.n	12e62 <LorawanMcastEnable+0x52>
   12e20:	223c      	movs	r2, #60	; 0x3c
   12e22:	434a      	muls	r2, r1
   12e24:	189a      	adds	r2, r3, r2
   12e26:	3259      	adds	r2, #89	; 0x59
   12e28:	32ff      	adds	r2, #255	; 0xff
   12e2a:	7a12      	ldrb	r2, [r2, #8]
   12e2c:	0754      	lsls	r4, r2, #29
   12e2e:	d512      	bpl.n	12e56 <LorawanMcastEnable+0x46>
   12e30:	0794      	lsls	r4, r2, #30
   12e32:	d510      	bpl.n	12e56 <LorawanMcastEnable+0x46>
   12e34:	07d2      	lsls	r2, r2, #31
   12e36:	0fd2      	lsrs	r2, r2, #31
   12e38:	2a01      	cmp	r2, #1
   12e3a:	d10c      	bne.n	12e56 <LorawanMcastEnable+0x46>
   12e3c:	001c      	movs	r4, r3
   12e3e:	34fd      	adds	r4, #253	; 0xfd
   12e40:	7824      	ldrb	r4, [r4, #0]
   12e42:	0764      	lsls	r4, r4, #29
   12e44:	d007      	beq.n	12e56 <LorawanMcastEnable+0x46>
   12e46:	202e      	movs	r0, #46	; 0x2e
   12e48:	408a      	lsls	r2, r1
   12e4a:	30ff      	adds	r0, #255	; 0xff
   12e4c:	5c19      	ldrb	r1, [r3, r0]
   12e4e:	430a      	orrs	r2, r1
   12e50:	541a      	strb	r2, [r3, r0]
   12e52:	3826      	subs	r0, #38	; 0x26
   12e54:	38ff      	subs	r0, #255	; 0xff
   12e56:	2196      	movs	r1, #150	; 0x96
   12e58:	0049      	lsls	r1, r1, #1
   12e5a:	5c5a      	ldrb	r2, [r3, r1]
   12e5c:	3201      	adds	r2, #1
   12e5e:	545a      	strb	r2, [r3, r1]
   12e60:	bd10      	pop	{r4, pc}
   12e62:	2201      	movs	r2, #1
   12e64:	408a      	lsls	r2, r1
   12e66:	202e      	movs	r0, #46	; 0x2e
   12e68:	0011      	movs	r1, r2
   12e6a:	30ff      	adds	r0, #255	; 0xff
   12e6c:	5c1a      	ldrb	r2, [r3, r0]
   12e6e:	438a      	bics	r2, r1
   12e70:	2196      	movs	r1, #150	; 0x96
   12e72:	541a      	strb	r2, [r3, r0]
   12e74:	0049      	lsls	r1, r1, #1
   12e76:	5c5a      	ldrb	r2, [r3, r1]
   12e78:	3826      	subs	r0, #38	; 0x26
   12e7a:	3a01      	subs	r2, #1
   12e7c:	545a      	strb	r2, [r3, r1]
   12e7e:	38ff      	subs	r0, #255	; 0xff
   12e80:	e7ee      	b.n	12e60 <LorawanMcastEnable+0x50>
   12e82:	46c0      	nop			; (mov r8, r8)
   12e84:	20003170 	.word	0x20003170

00012e88 <LorawanMcastValidateHdr>:
   12e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e8a:	469c      	mov	ip, r3
   12e8c:	2400      	movs	r4, #0
   12e8e:	230a      	movs	r3, #10
   12e90:	4f18      	ldr	r7, [pc, #96]	; (12ef4 <LorawanMcastValidateHdr+0x6c>)
   12e92:	b2e5      	uxtb	r5, r4
   12e94:	9501      	str	r5, [sp, #4]
   12e96:	252e      	movs	r5, #46	; 0x2e
   12e98:	35ff      	adds	r5, #255	; 0xff
   12e9a:	5d7d      	ldrb	r5, [r7, r5]
   12e9c:	2601      	movs	r6, #1
   12e9e:	4125      	asrs	r5, r4
   12ea0:	4235      	tst	r5, r6
   12ea2:	d022      	beq.n	12eea <LorawanMcastValidateHdr+0x62>
   12ea4:	7886      	ldrb	r6, [r0, #2]
   12ea6:	7845      	ldrb	r5, [r0, #1]
   12ea8:	0236      	lsls	r6, r6, #8
   12eaa:	432e      	orrs	r6, r5
   12eac:	78c5      	ldrb	r5, [r0, #3]
   12eae:	042d      	lsls	r5, r5, #16
   12eb0:	432e      	orrs	r6, r5
   12eb2:	7905      	ldrb	r5, [r0, #4]
   12eb4:	062d      	lsls	r5, r5, #24
   12eb6:	4335      	orrs	r5, r6
   12eb8:	263c      	movs	r6, #60	; 0x3c
   12eba:	4366      	muls	r6, r4
   12ebc:	3631      	adds	r6, #49	; 0x31
   12ebe:	36ff      	adds	r6, #255	; 0xff
   12ec0:	59be      	ldr	r6, [r7, r6]
   12ec2:	42b5      	cmp	r5, r6
   12ec4:	d111      	bne.n	12eea <LorawanMcastValidateHdr+0x62>
   12ec6:	4d0c      	ldr	r5, [pc, #48]	; (12ef8 <LorawanMcastValidateHdr+0x70>)
   12ec8:	782e      	ldrb	r6, [r5, #0]
   12eca:	2506      	movs	r5, #6
   12ecc:	422e      	tst	r6, r5
   12ece:	d00c      	beq.n	12eea <LorawanMcastValidateHdr+0x62>
   12ed0:	2a00      	cmp	r2, #0
   12ed2:	d00a      	beq.n	12eea <LorawanMcastValidateHdr+0x62>
   12ed4:	7946      	ldrb	r6, [r0, #5]
   12ed6:	3569      	adds	r5, #105	; 0x69
   12ed8:	422e      	tst	r6, r5
   12eda:	d106      	bne.n	12eea <LorawanMcastValidateHdr+0x62>
   12edc:	2903      	cmp	r1, #3
   12ede:	d104      	bne.n	12eea <LorawanMcastValidateHdr+0x62>
   12ee0:	466d      	mov	r5, sp
   12ee2:	4663      	mov	r3, ip
   12ee4:	792d      	ldrb	r5, [r5, #4]
   12ee6:	701d      	strb	r5, [r3, #0]
   12ee8:	2308      	movs	r3, #8
   12eea:	3401      	adds	r4, #1
   12eec:	2c04      	cmp	r4, #4
   12eee:	d1d0      	bne.n	12e92 <LorawanMcastValidateHdr+0xa>
   12ef0:	0018      	movs	r0, r3
   12ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12ef4:	20003170 	.word	0x20003170
   12ef8:	2000326d 	.word	0x2000326d

00012efc <LorawanMcastProcessPkt>:
   12efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12efe:	0015      	movs	r5, r2
   12f00:	223c      	movs	r2, #60	; 0x3c
   12f02:	435a      	muls	r2, r3
   12f04:	b089      	sub	sp, #36	; 0x24
   12f06:	9107      	str	r1, [sp, #28]
   12f08:	493f      	ldr	r1, [pc, #252]	; (13008 <LorawanMcastProcessPkt+0x10c>)
   12f0a:	9006      	str	r0, [sp, #24]
   12f0c:	1889      	adds	r1, r1, r2
   12f0e:	31fc      	adds	r1, #252	; 0xfc
   12f10:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   12f12:	6e08      	ldr	r0, [r1, #96]	; 0x60
   12f14:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   12f16:	4284      	cmp	r4, r0
   12f18:	d224      	bcs.n	12f64 <LorawanMcastProcessPkt+0x68>
   12f1a:	2100      	movs	r1, #0
   12f1c:	4294      	cmp	r4, r2
   12f1e:	d802      	bhi.n	12f26 <LorawanMcastProcessPkt+0x2a>
   12f20:	4282      	cmp	r2, r0
   12f22:	4192      	sbcs	r2, r2
   12f24:	4251      	negs	r1, r2
   12f26:	270a      	movs	r7, #10
   12f28:	2900      	cmp	r1, #0
   12f2a:	d11d      	bne.n	12f68 <LorawanMcastProcessPkt+0x6c>
   12f2c:	4a36      	ldr	r2, [pc, #216]	; (13008 <LorawanMcastProcessPkt+0x10c>)
   12f2e:	210e      	movs	r1, #14
   12f30:	0010      	movs	r0, r2
   12f32:	3084      	adds	r0, #132	; 0x84
   12f34:	7803      	ldrb	r3, [r0, #0]
   12f36:	001c      	movs	r4, r3
   12f38:	400c      	ands	r4, r1
   12f3a:	2c06      	cmp	r4, #6
   12f3c:	d108      	bne.n	12f50 <LorawanMcastProcessPkt+0x54>
   12f3e:	0014      	movs	r4, r2
   12f40:	34fd      	adds	r4, #253	; 0xfd
   12f42:	7824      	ldrb	r4, [r4, #0]
   12f44:	2c04      	cmp	r4, #4
   12f46:	d103      	bne.n	12f50 <LorawanMcastProcessPkt+0x54>
   12f48:	438b      	bics	r3, r1
   12f4a:	3904      	subs	r1, #4
   12f4c:	430b      	orrs	r3, r1
   12f4e:	7003      	strb	r3, [r0, #0]
   12f50:	2390      	movs	r3, #144	; 0x90
   12f52:	2101      	movs	r1, #1
   12f54:	009b      	lsls	r3, r3, #2
   12f56:	54d1      	strb	r1, [r2, r3]
   12f58:	2000      	movs	r0, #0
   12f5a:	4b2c      	ldr	r3, [pc, #176]	; (1300c <LorawanMcastProcessPkt+0x110>)
   12f5c:	4798      	blx	r3
   12f5e:	0038      	movs	r0, r7
   12f60:	b009      	add	sp, #36	; 0x24
   12f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f64:	4294      	cmp	r4, r2
   12f66:	d8db      	bhi.n	12f20 <LorawanMcastProcessPkt+0x24>
   12f68:	243c      	movs	r4, #60	; 0x3c
   12f6a:	435c      	muls	r4, r3
   12f6c:	4e26      	ldr	r6, [pc, #152]	; (13008 <LorawanMcastProcessPkt+0x10c>)
   12f6e:	79ea      	ldrb	r2, [r5, #7]
   12f70:	1937      	adds	r7, r6, r4
   12f72:	003b      	movs	r3, r7
   12f74:	79a9      	ldrb	r1, [r5, #6]
   12f76:	0212      	lsls	r2, r2, #8
   12f78:	3355      	adds	r3, #85	; 0x55
   12f7a:	430a      	orrs	r2, r1
   12f7c:	33ff      	adds	r3, #255	; 0xff
   12f7e:	801a      	strh	r2, [r3, #0]
   12f80:	2105      	movs	r1, #5
   12f82:	4b23      	ldr	r3, [pc, #140]	; (13010 <LorawanMcastProcessPkt+0x114>)
   12f84:	37fc      	adds	r7, #252	; 0xfc
   12f86:	2000      	movs	r0, #0
   12f88:	4798      	blx	r3
   12f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f8c:	3445      	adds	r4, #69	; 0x45
   12f8e:	9304      	str	r3, [sp, #16]
   12f90:	4b20      	ldr	r3, [pc, #128]	; (13014 <LorawanMcastProcessPkt+0x118>)
   12f92:	9907      	ldr	r1, [sp, #28]
   12f94:	9303      	str	r3, [sp, #12]
   12f96:	2319      	movs	r3, #25
   12f98:	34ff      	adds	r4, #255	; 0xff
   12f9a:	9302      	str	r3, [sp, #8]
   12f9c:	19a4      	adds	r4, r4, r6
   12f9e:	3b16      	subs	r3, #22
   12fa0:	9806      	ldr	r0, [sp, #24]
   12fa2:	9400      	str	r4, [sp, #0]
   12fa4:	390d      	subs	r1, #13
   12fa6:	9301      	str	r3, [sp, #4]
   12fa8:	b2c9      	uxtb	r1, r1
   12faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12fac:	2201      	movs	r2, #1
   12fae:	3009      	adds	r0, #9
   12fb0:	4c19      	ldr	r4, [pc, #100]	; (13018 <LorawanMcastProcessPkt+0x11c>)
   12fb2:	47a0      	blx	r4
   12fb4:	2800      	cmp	r0, #0
   12fb6:	d002      	beq.n	12fbe <LorawanMcastProcessPkt+0xc2>
   12fb8:	201f      	movs	r0, #31
   12fba:	4b18      	ldr	r3, [pc, #96]	; (1301c <LorawanMcastProcessPkt+0x120>)
   12fbc:	4798      	blx	r3
   12fbe:	4918      	ldr	r1, [pc, #96]	; (13020 <LorawanMcastProcessPkt+0x124>)
   12fc0:	2708      	movs	r7, #8
   12fc2:	784a      	ldrb	r2, [r1, #1]
   12fc4:	780b      	ldrb	r3, [r1, #0]
   12fc6:	0212      	lsls	r2, r2, #8
   12fc8:	431a      	orrs	r2, r3
   12fca:	788b      	ldrb	r3, [r1, #2]
   12fcc:	041b      	lsls	r3, r3, #16
   12fce:	431a      	orrs	r2, r3
   12fd0:	78cb      	ldrb	r3, [r1, #3]
   12fd2:	061b      	lsls	r3, r3, #24
   12fd4:	4313      	orrs	r3, r2
   12fd6:	d0a9      	beq.n	12f2c <LorawanMcastProcessPkt+0x30>
   12fd8:	2220      	movs	r2, #32
   12fda:	3694      	adds	r6, #148	; 0x94
   12fdc:	7833      	ldrb	r3, [r6, #0]
   12fde:	9906      	ldr	r1, [sp, #24]
   12fe0:	4393      	bics	r3, r2
   12fe2:	7033      	strb	r3, [r6, #0]
   12fe4:	78ab      	ldrb	r3, [r5, #2]
   12fe6:	7868      	ldrb	r0, [r5, #1]
   12fe8:	40bb      	lsls	r3, r7
   12fea:	4303      	orrs	r3, r0
   12fec:	78e8      	ldrb	r0, [r5, #3]
   12fee:	9a07      	ldr	r2, [sp, #28]
   12ff0:	0400      	lsls	r0, r0, #16
   12ff2:	4303      	orrs	r3, r0
   12ff4:	7928      	ldrb	r0, [r5, #4]
   12ff6:	3a0c      	subs	r2, #12
   12ff8:	0600      	lsls	r0, r0, #24
   12ffa:	4318      	orrs	r0, r3
   12ffc:	b2d2      	uxtb	r2, r2
   12ffe:	19c9      	adds	r1, r1, r7
   13000:	003b      	movs	r3, r7
   13002:	4c08      	ldr	r4, [pc, #32]	; (13024 <LorawanMcastProcessPkt+0x128>)
   13004:	47a0      	blx	r4
   13006:	e791      	b.n	12f2c <LorawanMcastProcessPkt+0x30>
   13008:	20003170 	.word	0x20003170
   1300c:	00011215 	.word	0x00011215
   13010:	000092e9 	.word	0x000092e9
   13014:	20002f34 	.word	0x20002f34
   13018:	00010d15 	.word	0x00010d15
   1301c:	00010dd5 	.word	0x00010dd5
   13020:	200034cc 	.word	0x200034cc
   13024:	00010e39 	.word	0x00010e39

00013028 <LorawanAddMcastAddr>:
   13028:	b570      	push	{r4, r5, r6, lr}
   1302a:	260a      	movs	r6, #10
   1302c:	2903      	cmp	r1, #3
   1302e:	d818      	bhi.n	13062 <LorawanAddMcastAddr+0x3a>
   13030:	4b0d      	ldr	r3, [pc, #52]	; (13068 <LorawanAddMcastAddr+0x40>)
   13032:	681a      	ldr	r2, [r3, #0]
   13034:	0a15      	lsrs	r5, r2, #8
   13036:	791a      	ldrb	r2, [r3, #4]
   13038:	0612      	lsls	r2, r2, #24
   1303a:	432a      	orrs	r2, r5
   1303c:	4282      	cmp	r2, r0
   1303e:	d010      	beq.n	13062 <LorawanAddMcastAddr+0x3a>
   13040:	243c      	movs	r4, #60	; 0x3c
   13042:	434c      	muls	r4, r1
   13044:	191c      	adds	r4, r3, r4
   13046:	0023      	movs	r3, r4
   13048:	33fc      	adds	r3, #252	; 0xfc
   1304a:	6358      	str	r0, [r3, #52]	; 0x34
   1304c:	2106      	movs	r1, #6
   1304e:	2000      	movs	r0, #0
   13050:	4b06      	ldr	r3, [pc, #24]	; (1306c <LorawanAddMcastAddr+0x44>)
   13052:	4798      	blx	r3
   13054:	2201      	movs	r2, #1
   13056:	3459      	adds	r4, #89	; 0x59
   13058:	34ff      	adds	r4, #255	; 0xff
   1305a:	7a21      	ldrb	r1, [r4, #8]
   1305c:	3e02      	subs	r6, #2
   1305e:	430a      	orrs	r2, r1
   13060:	7222      	strb	r2, [r4, #8]
   13062:	0030      	movs	r0, r6
   13064:	bd70      	pop	{r4, r5, r6, pc}
   13066:	46c0      	nop			; (mov r8, r8)
   13068:	20003170 	.word	0x20003170
   1306c:	000092e9 	.word	0x000092e9

00013070 <LorawanAddMcastAppskey>:
   13070:	b570      	push	{r4, r5, r6, lr}
   13072:	0006      	movs	r6, r0
   13074:	200a      	movs	r0, #10
   13076:	2903      	cmp	r1, #3
   13078:	d818      	bhi.n	130ac <LorawanAddMcastAppskey+0x3c>
   1307a:	2e00      	cmp	r6, #0
   1307c:	d016      	beq.n	130ac <LorawanAddMcastAppskey+0x3c>
   1307e:	253c      	movs	r5, #60	; 0x3c
   13080:	434d      	muls	r5, r1
   13082:	0028      	movs	r0, r5
   13084:	4c0a      	ldr	r4, [pc, #40]	; (130b0 <LorawanAddMcastAppskey+0x40>)
   13086:	3045      	adds	r0, #69	; 0x45
   13088:	30ff      	adds	r0, #255	; 0xff
   1308a:	2210      	movs	r2, #16
   1308c:	1900      	adds	r0, r0, r4
   1308e:	0031      	movs	r1, r6
   13090:	4b08      	ldr	r3, [pc, #32]	; (130b4 <LorawanAddMcastAppskey+0x44>)
   13092:	4798      	blx	r3
   13094:	4b08      	ldr	r3, [pc, #32]	; (130b8 <LorawanAddMcastAppskey+0x48>)
   13096:	2107      	movs	r1, #7
   13098:	2000      	movs	r0, #0
   1309a:	4798      	blx	r3
   1309c:	2304      	movs	r3, #4
   1309e:	2008      	movs	r0, #8
   130a0:	1964      	adds	r4, r4, r5
   130a2:	3459      	adds	r4, #89	; 0x59
   130a4:	34ff      	adds	r4, #255	; 0xff
   130a6:	7a22      	ldrb	r2, [r4, #8]
   130a8:	4313      	orrs	r3, r2
   130aa:	7223      	strb	r3, [r4, #8]
   130ac:	bd70      	pop	{r4, r5, r6, pc}
   130ae:	46c0      	nop			; (mov r8, r8)
   130b0:	20003170 	.word	0x20003170
   130b4:	0001678b 	.word	0x0001678b
   130b8:	000092e9 	.word	0x000092e9

000130bc <LorawanAddMcastNwkskey>:
   130bc:	b570      	push	{r4, r5, r6, lr}
   130be:	0006      	movs	r6, r0
   130c0:	200a      	movs	r0, #10
   130c2:	2903      	cmp	r1, #3
   130c4:	d818      	bhi.n	130f8 <LorawanAddMcastNwkskey+0x3c>
   130c6:	2e00      	cmp	r6, #0
   130c8:	d016      	beq.n	130f8 <LorawanAddMcastNwkskey+0x3c>
   130ca:	253c      	movs	r5, #60	; 0x3c
   130cc:	434d      	muls	r5, r1
   130ce:	0028      	movs	r0, r5
   130d0:	4c0a      	ldr	r4, [pc, #40]	; (130fc <LorawanAddMcastNwkskey+0x40>)
   130d2:	3035      	adds	r0, #53	; 0x35
   130d4:	30ff      	adds	r0, #255	; 0xff
   130d6:	2210      	movs	r2, #16
   130d8:	1900      	adds	r0, r0, r4
   130da:	0031      	movs	r1, r6
   130dc:	4b08      	ldr	r3, [pc, #32]	; (13100 <LorawanAddMcastNwkskey+0x44>)
   130de:	4798      	blx	r3
   130e0:	4b08      	ldr	r3, [pc, #32]	; (13104 <LorawanAddMcastNwkskey+0x48>)
   130e2:	2108      	movs	r1, #8
   130e4:	2000      	movs	r0, #0
   130e6:	4798      	blx	r3
   130e8:	2302      	movs	r3, #2
   130ea:	2008      	movs	r0, #8
   130ec:	1964      	adds	r4, r4, r5
   130ee:	3459      	adds	r4, #89	; 0x59
   130f0:	34ff      	adds	r4, #255	; 0xff
   130f2:	7a22      	ldrb	r2, [r4, #8]
   130f4:	4313      	orrs	r3, r2
   130f6:	7223      	strb	r3, [r4, #8]
   130f8:	bd70      	pop	{r4, r5, r6, pc}
   130fa:	46c0      	nop			; (mov r8, r8)
   130fc:	20003170 	.word	0x20003170
   13100:	0001678b 	.word	0x0001678b
   13104:	000092e9 	.word	0x000092e9

00013108 <LorawanAddMcastFcntMin>:
   13108:	220a      	movs	r2, #10
   1310a:	2903      	cmp	r1, #3
   1310c:	d807      	bhi.n	1311e <LorawanAddMcastFcntMin+0x16>
   1310e:	233c      	movs	r3, #60	; 0x3c
   13110:	434b      	muls	r3, r1
   13112:	4904      	ldr	r1, [pc, #16]	; (13124 <LorawanAddMcastFcntMin+0x1c>)
   13114:	3a02      	subs	r2, #2
   13116:	18c9      	adds	r1, r1, r3
   13118:	31fc      	adds	r1, #252	; 0xfc
   1311a:	65c8      	str	r0, [r1, #92]	; 0x5c
   1311c:	6588      	str	r0, [r1, #88]	; 0x58
   1311e:	0010      	movs	r0, r2
   13120:	4770      	bx	lr
   13122:	46c0      	nop			; (mov r8, r8)
   13124:	20003170 	.word	0x20003170

00013128 <LorawanAddMcastFcntMax>:
   13128:	220a      	movs	r2, #10
   1312a:	2903      	cmp	r1, #3
   1312c:	d806      	bhi.n	1313c <LorawanAddMcastFcntMax+0x14>
   1312e:	233c      	movs	r3, #60	; 0x3c
   13130:	434b      	muls	r3, r1
   13132:	4903      	ldr	r1, [pc, #12]	; (13140 <LorawanAddMcastFcntMax+0x18>)
   13134:	3a02      	subs	r2, #2
   13136:	18c9      	adds	r1, r1, r3
   13138:	31fc      	adds	r1, #252	; 0xfc
   1313a:	6608      	str	r0, [r1, #96]	; 0x60
   1313c:	0010      	movs	r0, r2
   1313e:	4770      	bx	lr
   13140:	20003170 	.word	0x20003170

00013144 <LorawanAddMcastDlFrequency>:
   13144:	b513      	push	{r0, r1, r4, lr}
   13146:	000c      	movs	r4, r1
   13148:	9001      	str	r0, [sp, #4]
   1314a:	2903      	cmp	r1, #3
   1314c:	d901      	bls.n	13152 <LorawanAddMcastDlFrequency+0xe>
   1314e:	200a      	movs	r0, #10
   13150:	bd16      	pop	{r1, r2, r4, pc}
   13152:	a901      	add	r1, sp, #4
   13154:	2001      	movs	r0, #1
   13156:	4b0a      	ldr	r3, [pc, #40]	; (13180 <LorawanAddMcastDlFrequency+0x3c>)
   13158:	4798      	blx	r3
   1315a:	2808      	cmp	r0, #8
   1315c:	d1f7      	bne.n	1314e <LorawanAddMcastDlFrequency+0xa>
   1315e:	213c      	movs	r1, #60	; 0x3c
   13160:	4361      	muls	r1, r4
   13162:	4b08      	ldr	r3, [pc, #32]	; (13184 <LorawanAddMcastDlFrequency+0x40>)
   13164:	9a01      	ldr	r2, [sp, #4]
   13166:	1859      	adds	r1, r3, r1
   13168:	31fc      	adds	r1, #252	; 0xfc
   1316a:	336f      	adds	r3, #111	; 0x6f
   1316c:	668a      	str	r2, [r1, #104]	; 0x68
   1316e:	0a11      	lsrs	r1, r2, #8
   13170:	701a      	strb	r2, [r3, #0]
   13172:	7059      	strb	r1, [r3, #1]
   13174:	0c11      	lsrs	r1, r2, #16
   13176:	0e12      	lsrs	r2, r2, #24
   13178:	7099      	strb	r1, [r3, #2]
   1317a:	70da      	strb	r2, [r3, #3]
   1317c:	e7e8      	b.n	13150 <LorawanAddMcastDlFrequency+0xc>
   1317e:	46c0      	nop			; (mov r8, r8)
   13180:	0000cb3d 	.word	0x0000cb3d
   13184:	20003170 	.word	0x20003170

00013188 <LorawanAddMcastDatarate>:
   13188:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1318a:	466b      	mov	r3, sp
   1318c:	1ddd      	adds	r5, r3, #7
   1318e:	000c      	movs	r4, r1
   13190:	7028      	strb	r0, [r5, #0]
   13192:	2903      	cmp	r1, #3
   13194:	d901      	bls.n	1319a <LorawanAddMcastDatarate+0x12>
   13196:	200a      	movs	r0, #10
   13198:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1319a:	0029      	movs	r1, r5
   1319c:	200f      	movs	r0, #15
   1319e:	4b07      	ldr	r3, [pc, #28]	; (131bc <LorawanAddMcastDatarate+0x34>)
   131a0:	4798      	blx	r3
   131a2:	2808      	cmp	r0, #8
   131a4:	d1f7      	bne.n	13196 <LorawanAddMcastDatarate+0xe>
   131a6:	213c      	movs	r1, #60	; 0x3c
   131a8:	4361      	muls	r1, r4
   131aa:	4b05      	ldr	r3, [pc, #20]	; (131c0 <LorawanAddMcastDatarate+0x38>)
   131ac:	782a      	ldrb	r2, [r5, #0]
   131ae:	1859      	adds	r1, r3, r1
   131b0:	3169      	adds	r1, #105	; 0x69
   131b2:	31ff      	adds	r1, #255	; 0xff
   131b4:	3373      	adds	r3, #115	; 0x73
   131b6:	700a      	strb	r2, [r1, #0]
   131b8:	701a      	strb	r2, [r3, #0]
   131ba:	e7ed      	b.n	13198 <LorawanAddMcastDatarate+0x10>
   131bc:	0000cb3d 	.word	0x0000cb3d
   131c0:	20003170 	.word	0x20003170

000131c4 <LorawanAddMcastPeriodicity>:
   131c4:	220a      	movs	r2, #10
   131c6:	2903      	cmp	r1, #3
   131c8:	d809      	bhi.n	131de <LorawanAddMcastPeriodicity+0x1a>
   131ca:	2807      	cmp	r0, #7
   131cc:	d807      	bhi.n	131de <LorawanAddMcastPeriodicity+0x1a>
   131ce:	233c      	movs	r3, #60	; 0x3c
   131d0:	434b      	muls	r3, r1
   131d2:	4904      	ldr	r1, [pc, #16]	; (131e4 <LorawanAddMcastPeriodicity+0x20>)
   131d4:	3a02      	subs	r2, #2
   131d6:	18c9      	adds	r1, r1, r3
   131d8:	316a      	adds	r1, #106	; 0x6a
   131da:	31ff      	adds	r1, #255	; 0xff
   131dc:	7008      	strb	r0, [r1, #0]
   131de:	0010      	movs	r0, r2
   131e0:	4770      	bx	lr
   131e2:	46c0      	nop			; (mov r8, r8)
   131e4:	20003170 	.word	0x20003170

000131e8 <Radio_LBTScanTimeout>:
   131e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   131ea:	4c1c      	ldr	r4, [pc, #112]	; (1325c <Radio_LBTScanTimeout+0x74>)
   131ec:	0025      	movs	r5, r4
   131ee:	0023      	movs	r3, r4
   131f0:	354f      	adds	r5, #79	; 0x4f
   131f2:	7829      	ldrb	r1, [r5, #0]
   131f4:	3340      	adds	r3, #64	; 0x40
   131f6:	3101      	adds	r1, #1
   131f8:	b2c9      	uxtb	r1, r1
   131fa:	7029      	strb	r1, [r5, #0]
   131fc:	781b      	ldrb	r3, [r3, #0]
   131fe:	428b      	cmp	r3, r1
   13200:	d315      	bcc.n	1322e <Radio_LBTScanTimeout+0x46>
   13202:	260e      	movs	r6, #14
   13204:	446e      	add	r6, sp
   13206:	4b16      	ldr	r3, [pc, #88]	; (13260 <Radio_LBTScanTimeout+0x78>)
   13208:	0030      	movs	r0, r6
   1320a:	4798      	blx	r3
   1320c:	2300      	movs	r3, #0
   1320e:	5ef2      	ldrsh	r2, [r6, r3]
   13210:	782b      	ldrb	r3, [r5, #0]
   13212:	4353      	muls	r3, r2
   13214:	6c62      	ldr	r2, [r4, #68]	; 0x44
   13216:	189b      	adds	r3, r3, r2
   13218:	6463      	str	r3, [r4, #68]	; 0x44
   1321a:	0023      	movs	r3, r4
   1321c:	2200      	movs	r2, #0
   1321e:	3350      	adds	r3, #80	; 0x50
   13220:	7818      	ldrb	r0, [r3, #0]
   13222:	9200      	str	r2, [sp, #0]
   13224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   13226:	4b0f      	ldr	r3, [pc, #60]	; (13264 <Radio_LBTScanTimeout+0x7c>)
   13228:	4c0f      	ldr	r4, [pc, #60]	; (13268 <Radio_LBTScanTimeout+0x80>)
   1322a:	47a0      	blx	r4
   1322c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1322e:	2380      	movs	r3, #128	; 0x80
   13230:	4a0e      	ldr	r2, [pc, #56]	; (1326c <Radio_LBTScanTimeout+0x84>)
   13232:	009b      	lsls	r3, r3, #2
   13234:	8810      	ldrh	r0, [r2, #0]
   13236:	4303      	orrs	r3, r0
   13238:	8013      	strh	r3, [r2, #0]
   1323a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1323c:	0058      	lsls	r0, r3, #1
   1323e:	1e4b      	subs	r3, r1, #1
   13240:	4359      	muls	r1, r3
   13242:	4b0b      	ldr	r3, [pc, #44]	; (13270 <Radio_LBTScanTimeout+0x88>)
   13244:	b289      	uxth	r1, r1
   13246:	4798      	blx	r3
   13248:	0023      	movs	r3, r4
   1324a:	334c      	adds	r3, #76	; 0x4c
   1324c:	8018      	strh	r0, [r3, #0]
   1324e:	2300      	movs	r3, #0
   13250:	2001      	movs	r0, #1
   13252:	702b      	strb	r3, [r5, #0]
   13254:	6463      	str	r3, [r4, #68]	; 0x44
   13256:	4b07      	ldr	r3, [pc, #28]	; (13274 <Radio_LBTScanTimeout+0x8c>)
   13258:	4798      	blx	r3
   1325a:	e7e7      	b.n	1322c <Radio_LBTScanTimeout+0x44>
   1325c:	20002d78 	.word	0x20002d78
   13260:	0000d8c1 	.word	0x0000d8c1
   13264:	000131e9 	.word	0x000131e9
   13268:	0000d069 	.word	0x0000d069
   1326c:	20003044 	.word	0x20003044
   13270:	0001363d 	.word	0x0001363d
   13274:	0000eb55 	.word	0x0000eb55

00013278 <RADIO_ScanHandler>:
   13278:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1327a:	4b12      	ldr	r3, [pc, #72]	; (132c4 <RADIO_ScanHandler+0x4c>)
   1327c:	4798      	blx	r3
   1327e:	2000      	movs	r0, #0
   13280:	4b11      	ldr	r3, [pc, #68]	; (132c8 <RADIO_ScanHandler+0x50>)
   13282:	4798      	blx	r3
   13284:	4d11      	ldr	r5, [pc, #68]	; (132cc <RADIO_ScanHandler+0x54>)
   13286:	4b12      	ldr	r3, [pc, #72]	; (132d0 <RADIO_ScanHandler+0x58>)
   13288:	6828      	ldr	r0, [r5, #0]
   1328a:	2400      	movs	r4, #0
   1328c:	4798      	blx	r3
   1328e:	002b      	movs	r3, r5
   13290:	4e10      	ldr	r6, [pc, #64]	; (132d4 <RADIO_ScanHandler+0x5c>)
   13292:	334c      	adds	r3, #76	; 0x4c
   13294:	2201      	movs	r2, #1
   13296:	0021      	movs	r1, r4
   13298:	0020      	movs	r0, r4
   1329a:	801c      	strh	r4, [r3, #0]
   1329c:	47b0      	blx	r6
   1329e:	4b0e      	ldr	r3, [pc, #56]	; (132d8 <RADIO_ScanHandler+0x60>)
   132a0:	2109      	movs	r1, #9
   132a2:	2012      	movs	r0, #18
   132a4:	4798      	blx	r3
   132a6:	3550      	adds	r5, #80	; 0x50
   132a8:	0022      	movs	r2, r4
   132aa:	0021      	movs	r1, r4
   132ac:	2005      	movs	r0, #5
   132ae:	47b0      	blx	r6
   132b0:	7828      	ldrb	r0, [r5, #0]
   132b2:	4b0a      	ldr	r3, [pc, #40]	; (132dc <RADIO_ScanHandler+0x64>)
   132b4:	4d0a      	ldr	r5, [pc, #40]	; (132e0 <RADIO_ScanHandler+0x68>)
   132b6:	9400      	str	r4, [sp, #0]
   132b8:	0022      	movs	r2, r4
   132ba:	490a      	ldr	r1, [pc, #40]	; (132e4 <RADIO_ScanHandler+0x6c>)
   132bc:	47a8      	blx	r5
   132be:	0020      	movs	r0, r4
   132c0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   132c2:	46c0      	nop			; (mov r8, r8)
   132c4:	0000f1c5 	.word	0x0000f1c5
   132c8:	0000ee09 	.word	0x0000ee09
   132cc:	20002d78 	.word	0x20002d78
   132d0:	0000e54d 	.word	0x0000e54d
   132d4:	0000d6a5 	.word	0x0000d6a5
   132d8:	0000c47d 	.word	0x0000c47d
   132dc:	000131e9 	.word	0x000131e9
   132e0:	0000d069 	.word	0x0000d069
   132e4:	00002328 	.word	0x00002328

000132e8 <radioScanDoneHandler>:
   132e8:	b530      	push	{r4, r5, lr}
   132ea:	4a18      	ldr	r2, [pc, #96]	; (1334c <radioScanDoneHandler+0x64>)
   132ec:	4918      	ldr	r1, [pc, #96]	; (13350 <radioScanDoneHandler+0x68>)
   132ee:	8813      	ldrh	r3, [r2, #0]
   132f0:	b085      	sub	sp, #20
   132f2:	400b      	ands	r3, r1
   132f4:	8013      	strh	r3, [r2, #0]
   132f6:	2200      	movs	r2, #0
   132f8:	4b16      	ldr	r3, [pc, #88]	; (13354 <radioScanDoneHandler+0x6c>)
   132fa:	0011      	movs	r1, r2
   132fc:	0010      	movs	r0, r2
   132fe:	4798      	blx	r3
   13300:	2000      	movs	r0, #0
   13302:	4b15      	ldr	r3, [pc, #84]	; (13358 <radioScanDoneHandler+0x70>)
   13304:	4798      	blx	r3
   13306:	4b15      	ldr	r3, [pc, #84]	; (1335c <radioScanDoneHandler+0x74>)
   13308:	4798      	blx	r3
   1330a:	4c15      	ldr	r4, [pc, #84]	; (13360 <radioScanDoneHandler+0x78>)
   1330c:	0023      	movs	r3, r4
   1330e:	334c      	adds	r3, #76	; 0x4c
   13310:	2100      	movs	r1, #0
   13312:	5e59      	ldrsh	r1, [r3, r1]
   13314:	233e      	movs	r3, #62	; 0x3e
   13316:	5ee2      	ldrsh	r2, [r4, r3]
   13318:	4b12      	ldr	r3, [pc, #72]	; (13364 <radioScanDoneHandler+0x7c>)
   1331a:	4291      	cmp	r1, r2
   1331c:	da06      	bge.n	1332c <radioScanDoneHandler+0x44>
   1331e:	2002      	movs	r0, #2
   13320:	4798      	blx	r3
   13322:	4b11      	ldr	r3, [pc, #68]	; (13368 <radioScanDoneHandler+0x80>)
   13324:	4798      	blx	r3
   13326:	2000      	movs	r0, #0
   13328:	b005      	add	sp, #20
   1332a:	bd30      	pop	{r4, r5, pc}
   1332c:	2207      	movs	r2, #7
   1332e:	ad01      	add	r5, sp, #4
   13330:	2001      	movs	r0, #1
   13332:	702a      	strb	r2, [r5, #0]
   13334:	4798      	blx	r3
   13336:	4b0d      	ldr	r3, [pc, #52]	; (1336c <radioScanDoneHandler+0x84>)
   13338:	781b      	ldrb	r3, [r3, #0]
   1333a:	079b      	lsls	r3, r3, #30
   1333c:	d5f3      	bpl.n	13326 <radioScanDoneHandler+0x3e>
   1333e:	6923      	ldr	r3, [r4, #16]
   13340:	2b00      	cmp	r3, #0
   13342:	d0f0      	beq.n	13326 <radioScanDoneHandler+0x3e>
   13344:	0029      	movs	r1, r5
   13346:	2002      	movs	r0, #2
   13348:	4798      	blx	r3
   1334a:	e7ec      	b.n	13326 <radioScanDoneHandler+0x3e>
   1334c:	20003044 	.word	0x20003044
   13350:	fffffdff 	.word	0xfffffdff
   13354:	0000d6a5 	.word	0x0000d6a5
   13358:	0000ee3d 	.word	0x0000ee3d
   1335c:	0000f2f5 	.word	0x0000f2f5
   13360:	20002d78 	.word	0x20002d78
   13364:	0000ec01 	.word	0x0000ec01
   13368:	0000f5c1 	.word	0x0000f5c1
   1336c:	20003046 	.word	0x20003046

00013370 <common_tc_read_count>:
   13370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13372:	4b0d      	ldr	r3, [pc, #52]	; (133a8 <common_tc_read_count+0x38>)
   13374:	4798      	blx	r3
   13376:	4b0d      	ldr	r3, [pc, #52]	; (133ac <common_tc_read_count+0x3c>)
   13378:	781b      	ldrb	r3, [r3, #0]
   1337a:	2b00      	cmp	r3, #0
   1337c:	d00e      	beq.n	1339c <common_tc_read_count+0x2c>
   1337e:	4b0c      	ldr	r3, [pc, #48]	; (133b0 <common_tc_read_count+0x40>)
   13380:	781d      	ldrb	r5, [r3, #0]
   13382:	4b0a      	ldr	r3, [pc, #40]	; (133ac <common_tc_read_count+0x3c>)
   13384:	781f      	ldrb	r7, [r3, #0]
   13386:	4c0b      	ldr	r4, [pc, #44]	; (133b4 <common_tc_read_count+0x44>)
   13388:	1c29      	adds	r1, r5, #0
   1338a:	47a0      	blx	r4
   1338c:	1c06      	adds	r6, r0, #0
   1338e:	480a      	ldr	r0, [pc, #40]	; (133b8 <common_tc_read_count+0x48>)
   13390:	1c29      	adds	r1, r5, #0
   13392:	47a0      	blx	r4
   13394:	4378      	muls	r0, r7
   13396:	1830      	adds	r0, r6, r0
   13398:	b280      	uxth	r0, r0
   1339a:	e004      	b.n	133a6 <common_tc_read_count+0x36>
   1339c:	4b04      	ldr	r3, [pc, #16]	; (133b0 <common_tc_read_count+0x40>)
   1339e:	7819      	ldrb	r1, [r3, #0]
   133a0:	4b04      	ldr	r3, [pc, #16]	; (133b4 <common_tc_read_count+0x44>)
   133a2:	4798      	blx	r3
   133a4:	b280      	uxth	r0, r0
   133a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133a8:	0000d8f5 	.word	0x0000d8f5
   133ac:	20001ec8 	.word	0x20001ec8
   133b0:	200034d4 	.word	0x200034d4
   133b4:	0001363d 	.word	0x0001363d
   133b8:	0000ffff 	.word	0x0000ffff

000133bc <common_tc_compare_stop>:
   133bc:	b508      	push	{r3, lr}
   133be:	4b05      	ldr	r3, [pc, #20]	; (133d4 <common_tc_compare_stop+0x18>)
   133c0:	4798      	blx	r3
   133c2:	4b05      	ldr	r3, [pc, #20]	; (133d8 <common_tc_compare_stop+0x1c>)
   133c4:	4798      	blx	r3
   133c6:	4b05      	ldr	r3, [pc, #20]	; (133dc <common_tc_compare_stop+0x20>)
   133c8:	2200      	movs	r2, #0
   133ca:	605a      	str	r2, [r3, #4]
   133cc:	811a      	strh	r2, [r3, #8]
   133ce:	4b04      	ldr	r3, [pc, #16]	; (133e0 <common_tc_compare_stop+0x24>)
   133d0:	4798      	blx	r3
   133d2:	bd08      	pop	{r3, pc}
   133d4:	0000d909 	.word	0x0000d909
   133d8:	0000d9c1 	.word	0x0000d9c1
   133dc:	20001ec8 	.word	0x20001ec8
   133e0:	0000d9e5 	.word	0x0000d9e5

000133e4 <common_tc_delay>:
   133e4:	b510      	push	{r4, lr}
   133e6:	1c04      	adds	r4, r0, #0
   133e8:	4b13      	ldr	r3, [pc, #76]	; (13438 <common_tc_delay+0x54>)
   133ea:	4798      	blx	r3
   133ec:	4b13      	ldr	r3, [pc, #76]	; (1343c <common_tc_delay+0x58>)
   133ee:	781a      	ldrb	r2, [r3, #0]
   133f0:	4362      	muls	r2, r4
   133f2:	1881      	adds	r1, r0, r2
   133f4:	4b12      	ldr	r3, [pc, #72]	; (13440 <common_tc_delay+0x5c>)
   133f6:	6059      	str	r1, [r3, #4]
   133f8:	6859      	ldr	r1, [r3, #4]
   133fa:	0c09      	lsrs	r1, r1, #16
   133fc:	6059      	str	r1, [r3, #4]
   133fe:	685b      	ldr	r3, [r3, #4]
   13400:	2b00      	cmp	r3, #0
   13402:	d007      	beq.n	13414 <common_tc_delay+0x30>
   13404:	4b0e      	ldr	r3, [pc, #56]	; (13440 <common_tc_delay+0x5c>)
   13406:	6859      	ldr	r1, [r3, #4]
   13408:	3201      	adds	r2, #1
   1340a:	1880      	adds	r0, r0, r2
   1340c:	8118      	strh	r0, [r3, #8]
   1340e:	4b0d      	ldr	r3, [pc, #52]	; (13444 <common_tc_delay+0x60>)
   13410:	4798      	blx	r3
   13412:	e004      	b.n	1341e <common_tc_delay+0x3a>
   13414:	1882      	adds	r2, r0, r2
   13416:	4b0a      	ldr	r3, [pc, #40]	; (13440 <common_tc_delay+0x5c>)
   13418:	811a      	strh	r2, [r3, #8]
   1341a:	4b0b      	ldr	r3, [pc, #44]	; (13448 <common_tc_delay+0x64>)
   1341c:	4798      	blx	r3
   1341e:	4b08      	ldr	r3, [pc, #32]	; (13440 <common_tc_delay+0x5c>)
   13420:	891b      	ldrh	r3, [r3, #8]
   13422:	2b63      	cmp	r3, #99	; 0x63
   13424:	d802      	bhi.n	1342c <common_tc_delay+0x48>
   13426:	3364      	adds	r3, #100	; 0x64
   13428:	4a05      	ldr	r2, [pc, #20]	; (13440 <common_tc_delay+0x5c>)
   1342a:	8113      	strh	r3, [r2, #8]
   1342c:	4b04      	ldr	r3, [pc, #16]	; (13440 <common_tc_delay+0x5c>)
   1342e:	8918      	ldrh	r0, [r3, #8]
   13430:	4b06      	ldr	r3, [pc, #24]	; (1344c <common_tc_delay+0x68>)
   13432:	4798      	blx	r3
   13434:	bd10      	pop	{r4, pc}
   13436:	46c0      	nop			; (mov r8, r8)
   13438:	0000d8f5 	.word	0x0000d8f5
   1343c:	200034d4 	.word	0x200034d4
   13440:	20001ec8 	.word	0x20001ec8
   13444:	0000d909 	.word	0x0000d909
   13448:	0000d91d 	.word	0x0000d91d
   1344c:	0000d9a9 	.word	0x0000d9a9

00013450 <common_tc_init>:
   13450:	b508      	push	{r3, lr}
   13452:	2200      	movs	r2, #0
   13454:	4b03      	ldr	r3, [pc, #12]	; (13464 <common_tc_init+0x14>)
   13456:	701a      	strb	r2, [r3, #0]
   13458:	4b03      	ldr	r3, [pc, #12]	; (13468 <common_tc_init+0x18>)
   1345a:	4798      	blx	r3
   1345c:	4b03      	ldr	r3, [pc, #12]	; (1346c <common_tc_init+0x1c>)
   1345e:	7018      	strb	r0, [r3, #0]
   13460:	bd08      	pop	{r3, pc}
   13462:	46c0      	nop			; (mov r8, r8)
   13464:	20001ec8 	.word	0x20001ec8
   13468:	0000d9fd 	.word	0x0000d9fd
   1346c:	200034d4 	.word	0x200034d4

00013470 <tmr_ovf_callback>:
   13470:	b508      	push	{r3, lr}
   13472:	4b0e      	ldr	r3, [pc, #56]	; (134ac <tmr_ovf_callback+0x3c>)
   13474:	685b      	ldr	r3, [r3, #4]
   13476:	2b00      	cmp	r3, #0
   13478:	d007      	beq.n	1348a <tmr_ovf_callback+0x1a>
   1347a:	4a0c      	ldr	r2, [pc, #48]	; (134ac <tmr_ovf_callback+0x3c>)
   1347c:	6853      	ldr	r3, [r2, #4]
   1347e:	3b01      	subs	r3, #1
   13480:	6053      	str	r3, [r2, #4]
   13482:	2b00      	cmp	r3, #0
   13484:	d101      	bne.n	1348a <tmr_ovf_callback+0x1a>
   13486:	4b0a      	ldr	r3, [pc, #40]	; (134b0 <tmr_ovf_callback+0x40>)
   13488:	4798      	blx	r3
   1348a:	4a08      	ldr	r2, [pc, #32]	; (134ac <tmr_ovf_callback+0x3c>)
   1348c:	7813      	ldrb	r3, [r2, #0]
   1348e:	3301      	adds	r3, #1
   13490:	b2db      	uxtb	r3, r3
   13492:	7013      	strb	r3, [r2, #0]
   13494:	4a07      	ldr	r2, [pc, #28]	; (134b4 <tmr_ovf_callback+0x44>)
   13496:	7812      	ldrb	r2, [r2, #0]
   13498:	429a      	cmp	r2, r3
   1349a:	d806      	bhi.n	134aa <tmr_ovf_callback+0x3a>
   1349c:	4b03      	ldr	r3, [pc, #12]	; (134ac <tmr_ovf_callback+0x3c>)
   1349e:	2200      	movs	r2, #0
   134a0:	701a      	strb	r2, [r3, #0]
   134a2:	68db      	ldr	r3, [r3, #12]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d000      	beq.n	134aa <tmr_ovf_callback+0x3a>
   134a8:	4798      	blx	r3
   134aa:	bd08      	pop	{r3, pc}
   134ac:	20001ec8 	.word	0x20001ec8
   134b0:	0000d91d 	.word	0x0000d91d
   134b4:	200034d4 	.word	0x200034d4

000134b8 <tmr_cca_callback>:
   134b8:	b508      	push	{r3, lr}
   134ba:	4b04      	ldr	r3, [pc, #16]	; (134cc <tmr_cca_callback+0x14>)
   134bc:	4798      	blx	r3
   134be:	4b04      	ldr	r3, [pc, #16]	; (134d0 <tmr_cca_callback+0x18>)
   134c0:	691b      	ldr	r3, [r3, #16]
   134c2:	2b00      	cmp	r3, #0
   134c4:	d000      	beq.n	134c8 <tmr_cca_callback+0x10>
   134c6:	4798      	blx	r3
   134c8:	bd08      	pop	{r3, pc}
   134ca:	46c0      	nop			; (mov r8, r8)
   134cc:	0000d909 	.word	0x0000d909
   134d0:	20001ec8 	.word	0x20001ec8

000134d4 <set_common_tc_overflow_callback>:
   134d4:	4b01      	ldr	r3, [pc, #4]	; (134dc <set_common_tc_overflow_callback+0x8>)
   134d6:	60d8      	str	r0, [r3, #12]
   134d8:	4770      	bx	lr
   134da:	46c0      	nop			; (mov r8, r8)
   134dc:	20001ec8 	.word	0x20001ec8

000134e0 <set_common_tc_expiry_callback>:
   134e0:	4b01      	ldr	r3, [pc, #4]	; (134e8 <set_common_tc_expiry_callback+0x8>)
   134e2:	6118      	str	r0, [r3, #16]
   134e4:	4770      	bx	lr
   134e6:	46c0      	nop			; (mov r8, r8)
   134e8:	20001ec8 	.word	0x20001ec8

000134ec <__gnu_thumb1_case_uqi>:
   134ec:	b402      	push	{r1}
   134ee:	4671      	mov	r1, lr
   134f0:	0849      	lsrs	r1, r1, #1
   134f2:	0049      	lsls	r1, r1, #1
   134f4:	5c09      	ldrb	r1, [r1, r0]
   134f6:	0049      	lsls	r1, r1, #1
   134f8:	448e      	add	lr, r1
   134fa:	bc02      	pop	{r1}
   134fc:	4770      	bx	lr
   134fe:	46c0      	nop			; (mov r8, r8)

00013500 <__gnu_thumb1_case_shi>:
   13500:	b403      	push	{r0, r1}
   13502:	4671      	mov	r1, lr
   13504:	0849      	lsrs	r1, r1, #1
   13506:	0040      	lsls	r0, r0, #1
   13508:	0049      	lsls	r1, r1, #1
   1350a:	5e09      	ldrsh	r1, [r1, r0]
   1350c:	0049      	lsls	r1, r1, #1
   1350e:	448e      	add	lr, r1
   13510:	bc03      	pop	{r0, r1}
   13512:	4770      	bx	lr

00013514 <__gnu_thumb1_case_uhi>:
   13514:	b403      	push	{r0, r1}
   13516:	4671      	mov	r1, lr
   13518:	0849      	lsrs	r1, r1, #1
   1351a:	0040      	lsls	r0, r0, #1
   1351c:	0049      	lsls	r1, r1, #1
   1351e:	5a09      	ldrh	r1, [r1, r0]
   13520:	0049      	lsls	r1, r1, #1
   13522:	448e      	add	lr, r1
   13524:	bc03      	pop	{r0, r1}
   13526:	4770      	bx	lr

00013528 <__udivsi3>:
   13528:	2200      	movs	r2, #0
   1352a:	0843      	lsrs	r3, r0, #1
   1352c:	428b      	cmp	r3, r1
   1352e:	d374      	bcc.n	1361a <__udivsi3+0xf2>
   13530:	0903      	lsrs	r3, r0, #4
   13532:	428b      	cmp	r3, r1
   13534:	d35f      	bcc.n	135f6 <__udivsi3+0xce>
   13536:	0a03      	lsrs	r3, r0, #8
   13538:	428b      	cmp	r3, r1
   1353a:	d344      	bcc.n	135c6 <__udivsi3+0x9e>
   1353c:	0b03      	lsrs	r3, r0, #12
   1353e:	428b      	cmp	r3, r1
   13540:	d328      	bcc.n	13594 <__udivsi3+0x6c>
   13542:	0c03      	lsrs	r3, r0, #16
   13544:	428b      	cmp	r3, r1
   13546:	d30d      	bcc.n	13564 <__udivsi3+0x3c>
   13548:	22ff      	movs	r2, #255	; 0xff
   1354a:	0209      	lsls	r1, r1, #8
   1354c:	ba12      	rev	r2, r2
   1354e:	0c03      	lsrs	r3, r0, #16
   13550:	428b      	cmp	r3, r1
   13552:	d302      	bcc.n	1355a <__udivsi3+0x32>
   13554:	1212      	asrs	r2, r2, #8
   13556:	0209      	lsls	r1, r1, #8
   13558:	d065      	beq.n	13626 <__udivsi3+0xfe>
   1355a:	0b03      	lsrs	r3, r0, #12
   1355c:	428b      	cmp	r3, r1
   1355e:	d319      	bcc.n	13594 <__udivsi3+0x6c>
   13560:	e000      	b.n	13564 <__udivsi3+0x3c>
   13562:	0a09      	lsrs	r1, r1, #8
   13564:	0bc3      	lsrs	r3, r0, #15
   13566:	428b      	cmp	r3, r1
   13568:	d301      	bcc.n	1356e <__udivsi3+0x46>
   1356a:	03cb      	lsls	r3, r1, #15
   1356c:	1ac0      	subs	r0, r0, r3
   1356e:	4152      	adcs	r2, r2
   13570:	0b83      	lsrs	r3, r0, #14
   13572:	428b      	cmp	r3, r1
   13574:	d301      	bcc.n	1357a <__udivsi3+0x52>
   13576:	038b      	lsls	r3, r1, #14
   13578:	1ac0      	subs	r0, r0, r3
   1357a:	4152      	adcs	r2, r2
   1357c:	0b43      	lsrs	r3, r0, #13
   1357e:	428b      	cmp	r3, r1
   13580:	d301      	bcc.n	13586 <__udivsi3+0x5e>
   13582:	034b      	lsls	r3, r1, #13
   13584:	1ac0      	subs	r0, r0, r3
   13586:	4152      	adcs	r2, r2
   13588:	0b03      	lsrs	r3, r0, #12
   1358a:	428b      	cmp	r3, r1
   1358c:	d301      	bcc.n	13592 <__udivsi3+0x6a>
   1358e:	030b      	lsls	r3, r1, #12
   13590:	1ac0      	subs	r0, r0, r3
   13592:	4152      	adcs	r2, r2
   13594:	0ac3      	lsrs	r3, r0, #11
   13596:	428b      	cmp	r3, r1
   13598:	d301      	bcc.n	1359e <__udivsi3+0x76>
   1359a:	02cb      	lsls	r3, r1, #11
   1359c:	1ac0      	subs	r0, r0, r3
   1359e:	4152      	adcs	r2, r2
   135a0:	0a83      	lsrs	r3, r0, #10
   135a2:	428b      	cmp	r3, r1
   135a4:	d301      	bcc.n	135aa <__udivsi3+0x82>
   135a6:	028b      	lsls	r3, r1, #10
   135a8:	1ac0      	subs	r0, r0, r3
   135aa:	4152      	adcs	r2, r2
   135ac:	0a43      	lsrs	r3, r0, #9
   135ae:	428b      	cmp	r3, r1
   135b0:	d301      	bcc.n	135b6 <__udivsi3+0x8e>
   135b2:	024b      	lsls	r3, r1, #9
   135b4:	1ac0      	subs	r0, r0, r3
   135b6:	4152      	adcs	r2, r2
   135b8:	0a03      	lsrs	r3, r0, #8
   135ba:	428b      	cmp	r3, r1
   135bc:	d301      	bcc.n	135c2 <__udivsi3+0x9a>
   135be:	020b      	lsls	r3, r1, #8
   135c0:	1ac0      	subs	r0, r0, r3
   135c2:	4152      	adcs	r2, r2
   135c4:	d2cd      	bcs.n	13562 <__udivsi3+0x3a>
   135c6:	09c3      	lsrs	r3, r0, #7
   135c8:	428b      	cmp	r3, r1
   135ca:	d301      	bcc.n	135d0 <__udivsi3+0xa8>
   135cc:	01cb      	lsls	r3, r1, #7
   135ce:	1ac0      	subs	r0, r0, r3
   135d0:	4152      	adcs	r2, r2
   135d2:	0983      	lsrs	r3, r0, #6
   135d4:	428b      	cmp	r3, r1
   135d6:	d301      	bcc.n	135dc <__udivsi3+0xb4>
   135d8:	018b      	lsls	r3, r1, #6
   135da:	1ac0      	subs	r0, r0, r3
   135dc:	4152      	adcs	r2, r2
   135de:	0943      	lsrs	r3, r0, #5
   135e0:	428b      	cmp	r3, r1
   135e2:	d301      	bcc.n	135e8 <__udivsi3+0xc0>
   135e4:	014b      	lsls	r3, r1, #5
   135e6:	1ac0      	subs	r0, r0, r3
   135e8:	4152      	adcs	r2, r2
   135ea:	0903      	lsrs	r3, r0, #4
   135ec:	428b      	cmp	r3, r1
   135ee:	d301      	bcc.n	135f4 <__udivsi3+0xcc>
   135f0:	010b      	lsls	r3, r1, #4
   135f2:	1ac0      	subs	r0, r0, r3
   135f4:	4152      	adcs	r2, r2
   135f6:	08c3      	lsrs	r3, r0, #3
   135f8:	428b      	cmp	r3, r1
   135fa:	d301      	bcc.n	13600 <__udivsi3+0xd8>
   135fc:	00cb      	lsls	r3, r1, #3
   135fe:	1ac0      	subs	r0, r0, r3
   13600:	4152      	adcs	r2, r2
   13602:	0883      	lsrs	r3, r0, #2
   13604:	428b      	cmp	r3, r1
   13606:	d301      	bcc.n	1360c <__udivsi3+0xe4>
   13608:	008b      	lsls	r3, r1, #2
   1360a:	1ac0      	subs	r0, r0, r3
   1360c:	4152      	adcs	r2, r2
   1360e:	0843      	lsrs	r3, r0, #1
   13610:	428b      	cmp	r3, r1
   13612:	d301      	bcc.n	13618 <__udivsi3+0xf0>
   13614:	004b      	lsls	r3, r1, #1
   13616:	1ac0      	subs	r0, r0, r3
   13618:	4152      	adcs	r2, r2
   1361a:	1a41      	subs	r1, r0, r1
   1361c:	d200      	bcs.n	13620 <__udivsi3+0xf8>
   1361e:	4601      	mov	r1, r0
   13620:	4152      	adcs	r2, r2
   13622:	4610      	mov	r0, r2
   13624:	4770      	bx	lr
   13626:	e7ff      	b.n	13628 <__udivsi3+0x100>
   13628:	b501      	push	{r0, lr}
   1362a:	2000      	movs	r0, #0
   1362c:	f000 f8f0 	bl	13810 <__aeabi_idiv0>
   13630:	bd02      	pop	{r1, pc}
   13632:	46c0      	nop			; (mov r8, r8)

00013634 <__aeabi_uidivmod>:
   13634:	2900      	cmp	r1, #0
   13636:	d0f7      	beq.n	13628 <__udivsi3+0x100>
   13638:	e776      	b.n	13528 <__udivsi3>
   1363a:	4770      	bx	lr

0001363c <__divsi3>:
   1363c:	4603      	mov	r3, r0
   1363e:	430b      	orrs	r3, r1
   13640:	d47f      	bmi.n	13742 <__divsi3+0x106>
   13642:	2200      	movs	r2, #0
   13644:	0843      	lsrs	r3, r0, #1
   13646:	428b      	cmp	r3, r1
   13648:	d374      	bcc.n	13734 <__divsi3+0xf8>
   1364a:	0903      	lsrs	r3, r0, #4
   1364c:	428b      	cmp	r3, r1
   1364e:	d35f      	bcc.n	13710 <__divsi3+0xd4>
   13650:	0a03      	lsrs	r3, r0, #8
   13652:	428b      	cmp	r3, r1
   13654:	d344      	bcc.n	136e0 <__divsi3+0xa4>
   13656:	0b03      	lsrs	r3, r0, #12
   13658:	428b      	cmp	r3, r1
   1365a:	d328      	bcc.n	136ae <__divsi3+0x72>
   1365c:	0c03      	lsrs	r3, r0, #16
   1365e:	428b      	cmp	r3, r1
   13660:	d30d      	bcc.n	1367e <__divsi3+0x42>
   13662:	22ff      	movs	r2, #255	; 0xff
   13664:	0209      	lsls	r1, r1, #8
   13666:	ba12      	rev	r2, r2
   13668:	0c03      	lsrs	r3, r0, #16
   1366a:	428b      	cmp	r3, r1
   1366c:	d302      	bcc.n	13674 <__divsi3+0x38>
   1366e:	1212      	asrs	r2, r2, #8
   13670:	0209      	lsls	r1, r1, #8
   13672:	d065      	beq.n	13740 <__divsi3+0x104>
   13674:	0b03      	lsrs	r3, r0, #12
   13676:	428b      	cmp	r3, r1
   13678:	d319      	bcc.n	136ae <__divsi3+0x72>
   1367a:	e000      	b.n	1367e <__divsi3+0x42>
   1367c:	0a09      	lsrs	r1, r1, #8
   1367e:	0bc3      	lsrs	r3, r0, #15
   13680:	428b      	cmp	r3, r1
   13682:	d301      	bcc.n	13688 <__divsi3+0x4c>
   13684:	03cb      	lsls	r3, r1, #15
   13686:	1ac0      	subs	r0, r0, r3
   13688:	4152      	adcs	r2, r2
   1368a:	0b83      	lsrs	r3, r0, #14
   1368c:	428b      	cmp	r3, r1
   1368e:	d301      	bcc.n	13694 <__divsi3+0x58>
   13690:	038b      	lsls	r3, r1, #14
   13692:	1ac0      	subs	r0, r0, r3
   13694:	4152      	adcs	r2, r2
   13696:	0b43      	lsrs	r3, r0, #13
   13698:	428b      	cmp	r3, r1
   1369a:	d301      	bcc.n	136a0 <__divsi3+0x64>
   1369c:	034b      	lsls	r3, r1, #13
   1369e:	1ac0      	subs	r0, r0, r3
   136a0:	4152      	adcs	r2, r2
   136a2:	0b03      	lsrs	r3, r0, #12
   136a4:	428b      	cmp	r3, r1
   136a6:	d301      	bcc.n	136ac <__divsi3+0x70>
   136a8:	030b      	lsls	r3, r1, #12
   136aa:	1ac0      	subs	r0, r0, r3
   136ac:	4152      	adcs	r2, r2
   136ae:	0ac3      	lsrs	r3, r0, #11
   136b0:	428b      	cmp	r3, r1
   136b2:	d301      	bcc.n	136b8 <__divsi3+0x7c>
   136b4:	02cb      	lsls	r3, r1, #11
   136b6:	1ac0      	subs	r0, r0, r3
   136b8:	4152      	adcs	r2, r2
   136ba:	0a83      	lsrs	r3, r0, #10
   136bc:	428b      	cmp	r3, r1
   136be:	d301      	bcc.n	136c4 <__divsi3+0x88>
   136c0:	028b      	lsls	r3, r1, #10
   136c2:	1ac0      	subs	r0, r0, r3
   136c4:	4152      	adcs	r2, r2
   136c6:	0a43      	lsrs	r3, r0, #9
   136c8:	428b      	cmp	r3, r1
   136ca:	d301      	bcc.n	136d0 <__divsi3+0x94>
   136cc:	024b      	lsls	r3, r1, #9
   136ce:	1ac0      	subs	r0, r0, r3
   136d0:	4152      	adcs	r2, r2
   136d2:	0a03      	lsrs	r3, r0, #8
   136d4:	428b      	cmp	r3, r1
   136d6:	d301      	bcc.n	136dc <__divsi3+0xa0>
   136d8:	020b      	lsls	r3, r1, #8
   136da:	1ac0      	subs	r0, r0, r3
   136dc:	4152      	adcs	r2, r2
   136de:	d2cd      	bcs.n	1367c <__divsi3+0x40>
   136e0:	09c3      	lsrs	r3, r0, #7
   136e2:	428b      	cmp	r3, r1
   136e4:	d301      	bcc.n	136ea <__divsi3+0xae>
   136e6:	01cb      	lsls	r3, r1, #7
   136e8:	1ac0      	subs	r0, r0, r3
   136ea:	4152      	adcs	r2, r2
   136ec:	0983      	lsrs	r3, r0, #6
   136ee:	428b      	cmp	r3, r1
   136f0:	d301      	bcc.n	136f6 <__divsi3+0xba>
   136f2:	018b      	lsls	r3, r1, #6
   136f4:	1ac0      	subs	r0, r0, r3
   136f6:	4152      	adcs	r2, r2
   136f8:	0943      	lsrs	r3, r0, #5
   136fa:	428b      	cmp	r3, r1
   136fc:	d301      	bcc.n	13702 <__divsi3+0xc6>
   136fe:	014b      	lsls	r3, r1, #5
   13700:	1ac0      	subs	r0, r0, r3
   13702:	4152      	adcs	r2, r2
   13704:	0903      	lsrs	r3, r0, #4
   13706:	428b      	cmp	r3, r1
   13708:	d301      	bcc.n	1370e <__divsi3+0xd2>
   1370a:	010b      	lsls	r3, r1, #4
   1370c:	1ac0      	subs	r0, r0, r3
   1370e:	4152      	adcs	r2, r2
   13710:	08c3      	lsrs	r3, r0, #3
   13712:	428b      	cmp	r3, r1
   13714:	d301      	bcc.n	1371a <__divsi3+0xde>
   13716:	00cb      	lsls	r3, r1, #3
   13718:	1ac0      	subs	r0, r0, r3
   1371a:	4152      	adcs	r2, r2
   1371c:	0883      	lsrs	r3, r0, #2
   1371e:	428b      	cmp	r3, r1
   13720:	d301      	bcc.n	13726 <__divsi3+0xea>
   13722:	008b      	lsls	r3, r1, #2
   13724:	1ac0      	subs	r0, r0, r3
   13726:	4152      	adcs	r2, r2
   13728:	0843      	lsrs	r3, r0, #1
   1372a:	428b      	cmp	r3, r1
   1372c:	d301      	bcc.n	13732 <__divsi3+0xf6>
   1372e:	004b      	lsls	r3, r1, #1
   13730:	1ac0      	subs	r0, r0, r3
   13732:	4152      	adcs	r2, r2
   13734:	1a41      	subs	r1, r0, r1
   13736:	d200      	bcs.n	1373a <__divsi3+0xfe>
   13738:	4601      	mov	r1, r0
   1373a:	4152      	adcs	r2, r2
   1373c:	4610      	mov	r0, r2
   1373e:	4770      	bx	lr
   13740:	e05d      	b.n	137fe <__divsi3+0x1c2>
   13742:	0fca      	lsrs	r2, r1, #31
   13744:	d000      	beq.n	13748 <__divsi3+0x10c>
   13746:	4249      	negs	r1, r1
   13748:	1003      	asrs	r3, r0, #32
   1374a:	d300      	bcc.n	1374e <__divsi3+0x112>
   1374c:	4240      	negs	r0, r0
   1374e:	4053      	eors	r3, r2
   13750:	2200      	movs	r2, #0
   13752:	469c      	mov	ip, r3
   13754:	0903      	lsrs	r3, r0, #4
   13756:	428b      	cmp	r3, r1
   13758:	d32d      	bcc.n	137b6 <__divsi3+0x17a>
   1375a:	0a03      	lsrs	r3, r0, #8
   1375c:	428b      	cmp	r3, r1
   1375e:	d312      	bcc.n	13786 <__divsi3+0x14a>
   13760:	22fc      	movs	r2, #252	; 0xfc
   13762:	0189      	lsls	r1, r1, #6
   13764:	ba12      	rev	r2, r2
   13766:	0a03      	lsrs	r3, r0, #8
   13768:	428b      	cmp	r3, r1
   1376a:	d30c      	bcc.n	13786 <__divsi3+0x14a>
   1376c:	0189      	lsls	r1, r1, #6
   1376e:	1192      	asrs	r2, r2, #6
   13770:	428b      	cmp	r3, r1
   13772:	d308      	bcc.n	13786 <__divsi3+0x14a>
   13774:	0189      	lsls	r1, r1, #6
   13776:	1192      	asrs	r2, r2, #6
   13778:	428b      	cmp	r3, r1
   1377a:	d304      	bcc.n	13786 <__divsi3+0x14a>
   1377c:	0189      	lsls	r1, r1, #6
   1377e:	d03a      	beq.n	137f6 <__divsi3+0x1ba>
   13780:	1192      	asrs	r2, r2, #6
   13782:	e000      	b.n	13786 <__divsi3+0x14a>
   13784:	0989      	lsrs	r1, r1, #6
   13786:	09c3      	lsrs	r3, r0, #7
   13788:	428b      	cmp	r3, r1
   1378a:	d301      	bcc.n	13790 <__divsi3+0x154>
   1378c:	01cb      	lsls	r3, r1, #7
   1378e:	1ac0      	subs	r0, r0, r3
   13790:	4152      	adcs	r2, r2
   13792:	0983      	lsrs	r3, r0, #6
   13794:	428b      	cmp	r3, r1
   13796:	d301      	bcc.n	1379c <__divsi3+0x160>
   13798:	018b      	lsls	r3, r1, #6
   1379a:	1ac0      	subs	r0, r0, r3
   1379c:	4152      	adcs	r2, r2
   1379e:	0943      	lsrs	r3, r0, #5
   137a0:	428b      	cmp	r3, r1
   137a2:	d301      	bcc.n	137a8 <__divsi3+0x16c>
   137a4:	014b      	lsls	r3, r1, #5
   137a6:	1ac0      	subs	r0, r0, r3
   137a8:	4152      	adcs	r2, r2
   137aa:	0903      	lsrs	r3, r0, #4
   137ac:	428b      	cmp	r3, r1
   137ae:	d301      	bcc.n	137b4 <__divsi3+0x178>
   137b0:	010b      	lsls	r3, r1, #4
   137b2:	1ac0      	subs	r0, r0, r3
   137b4:	4152      	adcs	r2, r2
   137b6:	08c3      	lsrs	r3, r0, #3
   137b8:	428b      	cmp	r3, r1
   137ba:	d301      	bcc.n	137c0 <__divsi3+0x184>
   137bc:	00cb      	lsls	r3, r1, #3
   137be:	1ac0      	subs	r0, r0, r3
   137c0:	4152      	adcs	r2, r2
   137c2:	0883      	lsrs	r3, r0, #2
   137c4:	428b      	cmp	r3, r1
   137c6:	d301      	bcc.n	137cc <__divsi3+0x190>
   137c8:	008b      	lsls	r3, r1, #2
   137ca:	1ac0      	subs	r0, r0, r3
   137cc:	4152      	adcs	r2, r2
   137ce:	d2d9      	bcs.n	13784 <__divsi3+0x148>
   137d0:	0843      	lsrs	r3, r0, #1
   137d2:	428b      	cmp	r3, r1
   137d4:	d301      	bcc.n	137da <__divsi3+0x19e>
   137d6:	004b      	lsls	r3, r1, #1
   137d8:	1ac0      	subs	r0, r0, r3
   137da:	4152      	adcs	r2, r2
   137dc:	1a41      	subs	r1, r0, r1
   137de:	d200      	bcs.n	137e2 <__divsi3+0x1a6>
   137e0:	4601      	mov	r1, r0
   137e2:	4663      	mov	r3, ip
   137e4:	4152      	adcs	r2, r2
   137e6:	105b      	asrs	r3, r3, #1
   137e8:	4610      	mov	r0, r2
   137ea:	d301      	bcc.n	137f0 <__divsi3+0x1b4>
   137ec:	4240      	negs	r0, r0
   137ee:	2b00      	cmp	r3, #0
   137f0:	d500      	bpl.n	137f4 <__divsi3+0x1b8>
   137f2:	4249      	negs	r1, r1
   137f4:	4770      	bx	lr
   137f6:	4663      	mov	r3, ip
   137f8:	105b      	asrs	r3, r3, #1
   137fa:	d300      	bcc.n	137fe <__divsi3+0x1c2>
   137fc:	4240      	negs	r0, r0
   137fe:	b501      	push	{r0, lr}
   13800:	2000      	movs	r0, #0
   13802:	f000 f805 	bl	13810 <__aeabi_idiv0>
   13806:	bd02      	pop	{r1, pc}

00013808 <__aeabi_idivmod>:
   13808:	2900      	cmp	r1, #0
   1380a:	d0f8      	beq.n	137fe <__divsi3+0x1c2>
   1380c:	e716      	b.n	1363c <__divsi3>
   1380e:	4770      	bx	lr

00013810 <__aeabi_idiv0>:
   13810:	4770      	bx	lr
   13812:	46c0      	nop			; (mov r8, r8)

00013814 <__aeabi_cdrcmple>:
   13814:	4684      	mov	ip, r0
   13816:	1c10      	adds	r0, r2, #0
   13818:	4662      	mov	r2, ip
   1381a:	468c      	mov	ip, r1
   1381c:	1c19      	adds	r1, r3, #0
   1381e:	4663      	mov	r3, ip
   13820:	e000      	b.n	13824 <__aeabi_cdcmpeq>
   13822:	46c0      	nop			; (mov r8, r8)

00013824 <__aeabi_cdcmpeq>:
   13824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13826:	f001 ffa3 	bl	15770 <__ledf2>
   1382a:	2800      	cmp	r0, #0
   1382c:	d401      	bmi.n	13832 <__aeabi_cdcmpeq+0xe>
   1382e:	2100      	movs	r1, #0
   13830:	42c8      	cmn	r0, r1
   13832:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013834 <__aeabi_dcmpeq>:
   13834:	b510      	push	{r4, lr}
   13836:	f001 fefd 	bl	15634 <__eqdf2>
   1383a:	4240      	negs	r0, r0
   1383c:	3001      	adds	r0, #1
   1383e:	bd10      	pop	{r4, pc}

00013840 <__aeabi_dcmplt>:
   13840:	b510      	push	{r4, lr}
   13842:	f001 ff95 	bl	15770 <__ledf2>
   13846:	2800      	cmp	r0, #0
   13848:	db01      	blt.n	1384e <__aeabi_dcmplt+0xe>
   1384a:	2000      	movs	r0, #0
   1384c:	bd10      	pop	{r4, pc}
   1384e:	2001      	movs	r0, #1
   13850:	bd10      	pop	{r4, pc}
   13852:	46c0      	nop			; (mov r8, r8)

00013854 <__aeabi_dcmple>:
   13854:	b510      	push	{r4, lr}
   13856:	f001 ff8b 	bl	15770 <__ledf2>
   1385a:	2800      	cmp	r0, #0
   1385c:	dd01      	ble.n	13862 <__aeabi_dcmple+0xe>
   1385e:	2000      	movs	r0, #0
   13860:	bd10      	pop	{r4, pc}
   13862:	2001      	movs	r0, #1
   13864:	bd10      	pop	{r4, pc}
   13866:	46c0      	nop			; (mov r8, r8)

00013868 <__aeabi_dcmpgt>:
   13868:	b510      	push	{r4, lr}
   1386a:	f001 ff1d 	bl	156a8 <__gedf2>
   1386e:	2800      	cmp	r0, #0
   13870:	dc01      	bgt.n	13876 <__aeabi_dcmpgt+0xe>
   13872:	2000      	movs	r0, #0
   13874:	bd10      	pop	{r4, pc}
   13876:	2001      	movs	r0, #1
   13878:	bd10      	pop	{r4, pc}
   1387a:	46c0      	nop			; (mov r8, r8)

0001387c <__aeabi_dcmpge>:
   1387c:	b510      	push	{r4, lr}
   1387e:	f001 ff13 	bl	156a8 <__gedf2>
   13882:	2800      	cmp	r0, #0
   13884:	da01      	bge.n	1388a <__aeabi_dcmpge+0xe>
   13886:	2000      	movs	r0, #0
   13888:	bd10      	pop	{r4, pc}
   1388a:	2001      	movs	r0, #1
   1388c:	bd10      	pop	{r4, pc}
   1388e:	46c0      	nop			; (mov r8, r8)

00013890 <__aeabi_cfrcmple>:
   13890:	4684      	mov	ip, r0
   13892:	1c08      	adds	r0, r1, #0
   13894:	4661      	mov	r1, ip
   13896:	e7ff      	b.n	13898 <__aeabi_cfcmpeq>

00013898 <__aeabi_cfcmpeq>:
   13898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1389a:	f000 fcd3 	bl	14244 <__lesf2>
   1389e:	2800      	cmp	r0, #0
   138a0:	d401      	bmi.n	138a6 <__aeabi_cfcmpeq+0xe>
   138a2:	2100      	movs	r1, #0
   138a4:	42c8      	cmn	r0, r1
   138a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000138a8 <__aeabi_fcmpeq>:
   138a8:	b510      	push	{r4, lr}
   138aa:	f000 fc65 	bl	14178 <__eqsf2>
   138ae:	4240      	negs	r0, r0
   138b0:	3001      	adds	r0, #1
   138b2:	bd10      	pop	{r4, pc}

000138b4 <__aeabi_fcmplt>:
   138b4:	b510      	push	{r4, lr}
   138b6:	f000 fcc5 	bl	14244 <__lesf2>
   138ba:	2800      	cmp	r0, #0
   138bc:	db01      	blt.n	138c2 <__aeabi_fcmplt+0xe>
   138be:	2000      	movs	r0, #0
   138c0:	bd10      	pop	{r4, pc}
   138c2:	2001      	movs	r0, #1
   138c4:	bd10      	pop	{r4, pc}
   138c6:	46c0      	nop			; (mov r8, r8)

000138c8 <__aeabi_fcmple>:
   138c8:	b510      	push	{r4, lr}
   138ca:	f000 fcbb 	bl	14244 <__lesf2>
   138ce:	2800      	cmp	r0, #0
   138d0:	dd01      	ble.n	138d6 <__aeabi_fcmple+0xe>
   138d2:	2000      	movs	r0, #0
   138d4:	bd10      	pop	{r4, pc}
   138d6:	2001      	movs	r0, #1
   138d8:	bd10      	pop	{r4, pc}
   138da:	46c0      	nop			; (mov r8, r8)

000138dc <__aeabi_fcmpgt>:
   138dc:	b510      	push	{r4, lr}
   138de:	f000 fc71 	bl	141c4 <__gesf2>
   138e2:	2800      	cmp	r0, #0
   138e4:	dc01      	bgt.n	138ea <__aeabi_fcmpgt+0xe>
   138e6:	2000      	movs	r0, #0
   138e8:	bd10      	pop	{r4, pc}
   138ea:	2001      	movs	r0, #1
   138ec:	bd10      	pop	{r4, pc}
   138ee:	46c0      	nop			; (mov r8, r8)

000138f0 <__aeabi_fcmpge>:
   138f0:	b510      	push	{r4, lr}
   138f2:	f000 fc67 	bl	141c4 <__gesf2>
   138f6:	2800      	cmp	r0, #0
   138f8:	da01      	bge.n	138fe <__aeabi_fcmpge+0xe>
   138fa:	2000      	movs	r0, #0
>>>>>>> Stashed changes
   138fc:	bd10      	pop	{r4, pc}
   138fe:	46c0      	nop			; (mov r8, r8)

<<<<<<< Updated upstream
00013900 <__aeabi_dcmple>:
   13900:	b510      	push	{r4, lr}
   13902:	f001 ff8b 	bl	1581c <__ledf2>
   13906:	2800      	cmp	r0, #0
   13908:	dd01      	ble.n	1390e <__aeabi_dcmple+0xe>
   1390a:	2000      	movs	r0, #0
   1390c:	bd10      	pop	{r4, pc}
   1390e:	2001      	movs	r0, #1
   13910:	bd10      	pop	{r4, pc}
   13912:	46c0      	nop			; (mov r8, r8)

00013914 <__aeabi_dcmpgt>:
   13914:	b510      	push	{r4, lr}
   13916:	f001 ff1d 	bl	15754 <__gedf2>
   1391a:	2800      	cmp	r0, #0
   1391c:	dc01      	bgt.n	13922 <__aeabi_dcmpgt+0xe>
   1391e:	2000      	movs	r0, #0
   13920:	bd10      	pop	{r4, pc}
   13922:	2001      	movs	r0, #1
   13924:	bd10      	pop	{r4, pc}
   13926:	46c0      	nop			; (mov r8, r8)

00013928 <__aeabi_dcmpge>:
   13928:	b510      	push	{r4, lr}
   1392a:	f001 ff13 	bl	15754 <__gedf2>
   1392e:	2800      	cmp	r0, #0
   13930:	da01      	bge.n	13936 <__aeabi_dcmpge+0xe>
   13932:	2000      	movs	r0, #0
   13934:	bd10      	pop	{r4, pc}
   13936:	2001      	movs	r0, #1
   13938:	bd10      	pop	{r4, pc}
   1393a:	46c0      	nop			; (mov r8, r8)

0001393c <__aeabi_cfrcmple>:
   1393c:	4684      	mov	ip, r0
   1393e:	1c08      	adds	r0, r1, #0
   13940:	4661      	mov	r1, ip
   13942:	e7ff      	b.n	13944 <__aeabi_cfcmpeq>

00013944 <__aeabi_cfcmpeq>:
   13944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13946:	f000 fcd3 	bl	142f0 <__lesf2>
   1394a:	2800      	cmp	r0, #0
   1394c:	d401      	bmi.n	13952 <__aeabi_cfcmpeq+0xe>
   1394e:	2100      	movs	r1, #0
   13950:	42c8      	cmn	r0, r1
   13952:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013954 <__aeabi_fcmpeq>:
   13954:	b510      	push	{r4, lr}
   13956:	f000 fc65 	bl	14224 <__eqsf2>
   1395a:	4240      	negs	r0, r0
   1395c:	3001      	adds	r0, #1
   1395e:	bd10      	pop	{r4, pc}

00013960 <__aeabi_fcmplt>:
   13960:	b510      	push	{r4, lr}
   13962:	f000 fcc5 	bl	142f0 <__lesf2>
   13966:	2800      	cmp	r0, #0
   13968:	db01      	blt.n	1396e <__aeabi_fcmplt+0xe>
   1396a:	2000      	movs	r0, #0
   1396c:	bd10      	pop	{r4, pc}
   1396e:	2001      	movs	r0, #1
   13970:	bd10      	pop	{r4, pc}
   13972:	46c0      	nop			; (mov r8, r8)

00013974 <__aeabi_fcmple>:
   13974:	b510      	push	{r4, lr}
   13976:	f000 fcbb 	bl	142f0 <__lesf2>
   1397a:	2800      	cmp	r0, #0
   1397c:	dd01      	ble.n	13982 <__aeabi_fcmple+0xe>
   1397e:	2000      	movs	r0, #0
   13980:	bd10      	pop	{r4, pc}
   13982:	2001      	movs	r0, #1
   13984:	bd10      	pop	{r4, pc}
   13986:	46c0      	nop			; (mov r8, r8)

00013988 <__aeabi_fcmpgt>:
   13988:	b510      	push	{r4, lr}
   1398a:	f000 fc71 	bl	14270 <__gesf2>
   1398e:	2800      	cmp	r0, #0
   13990:	dc01      	bgt.n	13996 <__aeabi_fcmpgt+0xe>
   13992:	2000      	movs	r0, #0
   13994:	bd10      	pop	{r4, pc}
   13996:	2001      	movs	r0, #1
   13998:	bd10      	pop	{r4, pc}
   1399a:	46c0      	nop			; (mov r8, r8)

0001399c <__aeabi_fcmpge>:
   1399c:	b510      	push	{r4, lr}
   1399e:	f000 fc67 	bl	14270 <__gesf2>
   139a2:	2800      	cmp	r0, #0
   139a4:	da01      	bge.n	139aa <__aeabi_fcmpge+0xe>
   139a6:	2000      	movs	r0, #0
   139a8:	bd10      	pop	{r4, pc}
   139aa:	2001      	movs	r0, #1
   139ac:	bd10      	pop	{r4, pc}
   139ae:	46c0      	nop			; (mov r8, r8)

000139b0 <__aeabi_uldivmod>:
   139b0:	2b00      	cmp	r3, #0
   139b2:	d111      	bne.n	139d8 <__aeabi_uldivmod+0x28>
   139b4:	2a00      	cmp	r2, #0
   139b6:	d10f      	bne.n	139d8 <__aeabi_uldivmod+0x28>
   139b8:	2900      	cmp	r1, #0
   139ba:	d100      	bne.n	139be <__aeabi_uldivmod+0xe>
   139bc:	2800      	cmp	r0, #0
   139be:	d002      	beq.n	139c6 <__aeabi_uldivmod+0x16>
   139c0:	2100      	movs	r1, #0
   139c2:	43c9      	mvns	r1, r1
   139c4:	1c08      	adds	r0, r1, #0
   139c6:	b407      	push	{r0, r1, r2}
   139c8:	4802      	ldr	r0, [pc, #8]	; (139d4 <__aeabi_uldivmod+0x24>)
   139ca:	a102      	add	r1, pc, #8	; (adr r1, 139d4 <__aeabi_uldivmod+0x24>)
   139cc:	1840      	adds	r0, r0, r1
   139ce:	9002      	str	r0, [sp, #8]
   139d0:	bd03      	pop	{r0, r1, pc}
   139d2:	46c0      	nop			; (mov r8, r8)
   139d4:	fffffee9 	.word	0xfffffee9
   139d8:	b403      	push	{r0, r1}
   139da:	4668      	mov	r0, sp
   139dc:	b501      	push	{r0, lr}
   139de:	9802      	ldr	r0, [sp, #8]
   139e0:	f000 f886 	bl	13af0 <__udivmoddi4>
   139e4:	9b01      	ldr	r3, [sp, #4]
   139e6:	469e      	mov	lr, r3
   139e8:	b002      	add	sp, #8
   139ea:	bc0c      	pop	{r2, r3}
   139ec:	4770      	bx	lr
   139ee:	46c0      	nop			; (mov r8, r8)

000139f0 <__aeabi_lmul>:
   139f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139f2:	46ce      	mov	lr, r9
   139f4:	4647      	mov	r7, r8
   139f6:	0415      	lsls	r5, r2, #16
   139f8:	0c2d      	lsrs	r5, r5, #16
   139fa:	002e      	movs	r6, r5
   139fc:	b580      	push	{r7, lr}
   139fe:	0407      	lsls	r7, r0, #16
   13a00:	0c14      	lsrs	r4, r2, #16
   13a02:	0c3f      	lsrs	r7, r7, #16
   13a04:	4699      	mov	r9, r3
   13a06:	0c03      	lsrs	r3, r0, #16
   13a08:	437e      	muls	r6, r7
   13a0a:	435d      	muls	r5, r3
   13a0c:	4367      	muls	r7, r4
   13a0e:	4363      	muls	r3, r4
   13a10:	197f      	adds	r7, r7, r5
   13a12:	0c34      	lsrs	r4, r6, #16
   13a14:	19e4      	adds	r4, r4, r7
   13a16:	469c      	mov	ip, r3
   13a18:	42a5      	cmp	r5, r4
   13a1a:	d903      	bls.n	13a24 <__aeabi_lmul+0x34>
   13a1c:	2380      	movs	r3, #128	; 0x80
   13a1e:	025b      	lsls	r3, r3, #9
   13a20:	4698      	mov	r8, r3
   13a22:	44c4      	add	ip, r8
   13a24:	464b      	mov	r3, r9
   13a26:	4351      	muls	r1, r2
   13a28:	4343      	muls	r3, r0
   13a2a:	0436      	lsls	r6, r6, #16
   13a2c:	0c36      	lsrs	r6, r6, #16
   13a2e:	0c25      	lsrs	r5, r4, #16
   13a30:	0424      	lsls	r4, r4, #16
   13a32:	4465      	add	r5, ip
   13a34:	19a4      	adds	r4, r4, r6
   13a36:	1859      	adds	r1, r3, r1
   13a38:	1949      	adds	r1, r1, r5
   13a3a:	0020      	movs	r0, r4
   13a3c:	bc0c      	pop	{r2, r3}
   13a3e:	4690      	mov	r8, r2
   13a40:	4699      	mov	r9, r3
   13a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013a44 <__aeabi_f2uiz>:
   13a44:	219e      	movs	r1, #158	; 0x9e
   13a46:	b510      	push	{r4, lr}
   13a48:	05c9      	lsls	r1, r1, #23
   13a4a:	1c04      	adds	r4, r0, #0
   13a4c:	f7ff ffa6 	bl	1399c <__aeabi_fcmpge>
   13a50:	2800      	cmp	r0, #0
   13a52:	d103      	bne.n	13a5c <__aeabi_f2uiz+0x18>
   13a54:	1c20      	adds	r0, r4, #0
   13a56:	f000 ff49 	bl	148ec <__aeabi_f2iz>
   13a5a:	bd10      	pop	{r4, pc}
   13a5c:	219e      	movs	r1, #158	; 0x9e
   13a5e:	1c20      	adds	r0, r4, #0
   13a60:	05c9      	lsls	r1, r1, #23
   13a62:	f000 fda7 	bl	145b4 <__aeabi_fsub>
   13a66:	f000 ff41 	bl	148ec <__aeabi_f2iz>
   13a6a:	2380      	movs	r3, #128	; 0x80
   13a6c:	061b      	lsls	r3, r3, #24
   13a6e:	469c      	mov	ip, r3
   13a70:	4460      	add	r0, ip
   13a72:	e7f2      	b.n	13a5a <__aeabi_f2uiz+0x16>

00013a74 <__aeabi_d2uiz>:
   13a74:	b570      	push	{r4, r5, r6, lr}
   13a76:	2200      	movs	r2, #0
   13a78:	4b0c      	ldr	r3, [pc, #48]	; (13aac <__aeabi_d2uiz+0x38>)
   13a7a:	0004      	movs	r4, r0
   13a7c:	000d      	movs	r5, r1
   13a7e:	f7ff ff53 	bl	13928 <__aeabi_dcmpge>
   13a82:	2800      	cmp	r0, #0
   13a84:	d104      	bne.n	13a90 <__aeabi_d2uiz+0x1c>
   13a86:	0020      	movs	r0, r4
   13a88:	0029      	movs	r1, r5
   13a8a:	f002 fcbf 	bl	1640c <__aeabi_d2iz>
   13a8e:	bd70      	pop	{r4, r5, r6, pc}
   13a90:	4b06      	ldr	r3, [pc, #24]	; (13aac <__aeabi_d2uiz+0x38>)
   13a92:	2200      	movs	r2, #0
   13a94:	0020      	movs	r0, r4
   13a96:	0029      	movs	r1, r5
   13a98:	f002 f9a2 	bl	15de0 <__aeabi_dsub>
   13a9c:	f002 fcb6 	bl	1640c <__aeabi_d2iz>
   13aa0:	2380      	movs	r3, #128	; 0x80
   13aa2:	061b      	lsls	r3, r3, #24
   13aa4:	469c      	mov	ip, r3
   13aa6:	4460      	add	r0, ip
   13aa8:	e7f1      	b.n	13a8e <__aeabi_d2uiz+0x1a>
   13aaa:	46c0      	nop			; (mov r8, r8)
   13aac:	41e00000 	.word	0x41e00000

00013ab0 <__aeabi_f2ulz>:
   13ab0:	b570      	push	{r4, r5, r6, lr}
   13ab2:	f002 fd59 	bl	16568 <__aeabi_f2d>
   13ab6:	2200      	movs	r2, #0
   13ab8:	4b0b      	ldr	r3, [pc, #44]	; (13ae8 <__aeabi_f2ulz+0x38>)
   13aba:	000d      	movs	r5, r1
   13abc:	0004      	movs	r4, r0
   13abe:	f001 ff0f 	bl	158e0 <__aeabi_dmul>
   13ac2:	f7ff ffd7 	bl	13a74 <__aeabi_d2uiz>
   13ac6:	0006      	movs	r6, r0
   13ac8:	f002 fd16 	bl	164f8 <__aeabi_ui2d>
   13acc:	2200      	movs	r2, #0
   13ace:	4b07      	ldr	r3, [pc, #28]	; (13aec <__aeabi_f2ulz+0x3c>)
   13ad0:	f001 ff06 	bl	158e0 <__aeabi_dmul>
   13ad4:	0002      	movs	r2, r0
   13ad6:	000b      	movs	r3, r1
   13ad8:	0020      	movs	r0, r4
   13ada:	0029      	movs	r1, r5
   13adc:	f002 f980 	bl	15de0 <__aeabi_dsub>
   13ae0:	f7ff ffc8 	bl	13a74 <__aeabi_d2uiz>
   13ae4:	0031      	movs	r1, r6
   13ae6:	bd70      	pop	{r4, r5, r6, pc}
   13ae8:	3df00000 	.word	0x3df00000
   13aec:	41f00000 	.word	0x41f00000

00013af0 <__udivmoddi4>:
   13af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13af2:	4657      	mov	r7, sl
   13af4:	464e      	mov	r6, r9
   13af6:	4645      	mov	r5, r8
   13af8:	46de      	mov	lr, fp
   13afa:	b5e0      	push	{r5, r6, r7, lr}
   13afc:	0004      	movs	r4, r0
   13afe:	b083      	sub	sp, #12
   13b00:	000d      	movs	r5, r1
   13b02:	4692      	mov	sl, r2
   13b04:	4699      	mov	r9, r3
   13b06:	428b      	cmp	r3, r1
   13b08:	d82f      	bhi.n	13b6a <__udivmoddi4+0x7a>
   13b0a:	d02c      	beq.n	13b66 <__udivmoddi4+0x76>
   13b0c:	4649      	mov	r1, r9
   13b0e:	4650      	mov	r0, sl
   13b10:	f002 fe24 	bl	1675c <__clzdi2>
   13b14:	0029      	movs	r1, r5
   13b16:	0006      	movs	r6, r0
   13b18:	0020      	movs	r0, r4
   13b1a:	f002 fe1f 	bl	1675c <__clzdi2>
   13b1e:	1a33      	subs	r3, r6, r0
   13b20:	4698      	mov	r8, r3
   13b22:	3b20      	subs	r3, #32
   13b24:	469b      	mov	fp, r3
   13b26:	d500      	bpl.n	13b2a <__udivmoddi4+0x3a>
   13b28:	e074      	b.n	13c14 <__udivmoddi4+0x124>
   13b2a:	4653      	mov	r3, sl
   13b2c:	465a      	mov	r2, fp
   13b2e:	4093      	lsls	r3, r2
   13b30:	001f      	movs	r7, r3
   13b32:	4653      	mov	r3, sl
   13b34:	4642      	mov	r2, r8
   13b36:	4093      	lsls	r3, r2
   13b38:	001e      	movs	r6, r3
   13b3a:	42af      	cmp	r7, r5
   13b3c:	d829      	bhi.n	13b92 <__udivmoddi4+0xa2>
   13b3e:	d026      	beq.n	13b8e <__udivmoddi4+0x9e>
   13b40:	465b      	mov	r3, fp
   13b42:	1ba4      	subs	r4, r4, r6
   13b44:	41bd      	sbcs	r5, r7
   13b46:	2b00      	cmp	r3, #0
   13b48:	da00      	bge.n	13b4c <__udivmoddi4+0x5c>
   13b4a:	e079      	b.n	13c40 <__udivmoddi4+0x150>
   13b4c:	2200      	movs	r2, #0
   13b4e:	2300      	movs	r3, #0
   13b50:	9200      	str	r2, [sp, #0]
   13b52:	9301      	str	r3, [sp, #4]
   13b54:	2301      	movs	r3, #1
   13b56:	465a      	mov	r2, fp
   13b58:	4093      	lsls	r3, r2
   13b5a:	9301      	str	r3, [sp, #4]
   13b5c:	2301      	movs	r3, #1
   13b5e:	4642      	mov	r2, r8
   13b60:	4093      	lsls	r3, r2
   13b62:	9300      	str	r3, [sp, #0]
   13b64:	e019      	b.n	13b9a <__udivmoddi4+0xaa>
   13b66:	4282      	cmp	r2, r0
   13b68:	d9d0      	bls.n	13b0c <__udivmoddi4+0x1c>
   13b6a:	2200      	movs	r2, #0
   13b6c:	2300      	movs	r3, #0
   13b6e:	9200      	str	r2, [sp, #0]
   13b70:	9301      	str	r3, [sp, #4]
   13b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13b74:	2b00      	cmp	r3, #0
   13b76:	d001      	beq.n	13b7c <__udivmoddi4+0x8c>
   13b78:	601c      	str	r4, [r3, #0]
   13b7a:	605d      	str	r5, [r3, #4]
   13b7c:	9800      	ldr	r0, [sp, #0]
   13b7e:	9901      	ldr	r1, [sp, #4]
   13b80:	b003      	add	sp, #12
   13b82:	bc3c      	pop	{r2, r3, r4, r5}
   13b84:	4690      	mov	r8, r2
   13b86:	4699      	mov	r9, r3
   13b88:	46a2      	mov	sl, r4
   13b8a:	46ab      	mov	fp, r5
   13b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b8e:	42a3      	cmp	r3, r4
   13b90:	d9d6      	bls.n	13b40 <__udivmoddi4+0x50>
   13b92:	2200      	movs	r2, #0
   13b94:	2300      	movs	r3, #0
   13b96:	9200      	str	r2, [sp, #0]
   13b98:	9301      	str	r3, [sp, #4]
   13b9a:	4643      	mov	r3, r8
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	d0e8      	beq.n	13b72 <__udivmoddi4+0x82>
   13ba0:	07fb      	lsls	r3, r7, #31
   13ba2:	0872      	lsrs	r2, r6, #1
   13ba4:	431a      	orrs	r2, r3
   13ba6:	4646      	mov	r6, r8
   13ba8:	087b      	lsrs	r3, r7, #1
   13baa:	e00e      	b.n	13bca <__udivmoddi4+0xda>
   13bac:	42ab      	cmp	r3, r5
   13bae:	d101      	bne.n	13bb4 <__udivmoddi4+0xc4>
   13bb0:	42a2      	cmp	r2, r4
   13bb2:	d80c      	bhi.n	13bce <__udivmoddi4+0xde>
   13bb4:	1aa4      	subs	r4, r4, r2
   13bb6:	419d      	sbcs	r5, r3
   13bb8:	2001      	movs	r0, #1
   13bba:	1924      	adds	r4, r4, r4
   13bbc:	416d      	adcs	r5, r5
   13bbe:	2100      	movs	r1, #0
   13bc0:	3e01      	subs	r6, #1
   13bc2:	1824      	adds	r4, r4, r0
   13bc4:	414d      	adcs	r5, r1
   13bc6:	2e00      	cmp	r6, #0
   13bc8:	d006      	beq.n	13bd8 <__udivmoddi4+0xe8>
   13bca:	42ab      	cmp	r3, r5
   13bcc:	d9ee      	bls.n	13bac <__udivmoddi4+0xbc>
   13bce:	3e01      	subs	r6, #1
   13bd0:	1924      	adds	r4, r4, r4
   13bd2:	416d      	adcs	r5, r5
   13bd4:	2e00      	cmp	r6, #0
   13bd6:	d1f8      	bne.n	13bca <__udivmoddi4+0xda>
   13bd8:	465b      	mov	r3, fp
   13bda:	9800      	ldr	r0, [sp, #0]
   13bdc:	9901      	ldr	r1, [sp, #4]
   13bde:	1900      	adds	r0, r0, r4
   13be0:	4169      	adcs	r1, r5
   13be2:	2b00      	cmp	r3, #0
   13be4:	db22      	blt.n	13c2c <__udivmoddi4+0x13c>
   13be6:	002b      	movs	r3, r5
   13be8:	465a      	mov	r2, fp
   13bea:	40d3      	lsrs	r3, r2
   13bec:	002a      	movs	r2, r5
   13bee:	4644      	mov	r4, r8
   13bf0:	40e2      	lsrs	r2, r4
   13bf2:	001c      	movs	r4, r3
   13bf4:	465b      	mov	r3, fp
   13bf6:	0015      	movs	r5, r2
   13bf8:	2b00      	cmp	r3, #0
   13bfa:	db2c      	blt.n	13c56 <__udivmoddi4+0x166>
   13bfc:	0026      	movs	r6, r4
   13bfe:	409e      	lsls	r6, r3
   13c00:	0033      	movs	r3, r6
   13c02:	0026      	movs	r6, r4
   13c04:	4647      	mov	r7, r8
   13c06:	40be      	lsls	r6, r7
   13c08:	0032      	movs	r2, r6
   13c0a:	1a80      	subs	r0, r0, r2
   13c0c:	4199      	sbcs	r1, r3
   13c0e:	9000      	str	r0, [sp, #0]
   13c10:	9101      	str	r1, [sp, #4]
   13c12:	e7ae      	b.n	13b72 <__udivmoddi4+0x82>
   13c14:	4642      	mov	r2, r8
   13c16:	2320      	movs	r3, #32
   13c18:	1a9b      	subs	r3, r3, r2
   13c1a:	4652      	mov	r2, sl
   13c1c:	40da      	lsrs	r2, r3
   13c1e:	4641      	mov	r1, r8
   13c20:	0013      	movs	r3, r2
   13c22:	464a      	mov	r2, r9
   13c24:	408a      	lsls	r2, r1
   13c26:	0017      	movs	r7, r2
   13c28:	431f      	orrs	r7, r3
   13c2a:	e782      	b.n	13b32 <__udivmoddi4+0x42>
   13c2c:	4642      	mov	r2, r8
   13c2e:	2320      	movs	r3, #32
   13c30:	1a9b      	subs	r3, r3, r2
   13c32:	002a      	movs	r2, r5
   13c34:	4646      	mov	r6, r8
   13c36:	409a      	lsls	r2, r3
   13c38:	0023      	movs	r3, r4
   13c3a:	40f3      	lsrs	r3, r6
   13c3c:	4313      	orrs	r3, r2
   13c3e:	e7d5      	b.n	13bec <__udivmoddi4+0xfc>
   13c40:	4642      	mov	r2, r8
   13c42:	2320      	movs	r3, #32
   13c44:	2100      	movs	r1, #0
   13c46:	1a9b      	subs	r3, r3, r2
   13c48:	2200      	movs	r2, #0
   13c4a:	9100      	str	r1, [sp, #0]
   13c4c:	9201      	str	r2, [sp, #4]
   13c4e:	2201      	movs	r2, #1
   13c50:	40da      	lsrs	r2, r3
   13c52:	9201      	str	r2, [sp, #4]
   13c54:	e782      	b.n	13b5c <__udivmoddi4+0x6c>
   13c56:	4642      	mov	r2, r8
   13c58:	2320      	movs	r3, #32
   13c5a:	0026      	movs	r6, r4
   13c5c:	1a9b      	subs	r3, r3, r2
   13c5e:	40de      	lsrs	r6, r3
   13c60:	002f      	movs	r7, r5
   13c62:	46b4      	mov	ip, r6
   13c64:	4097      	lsls	r7, r2
   13c66:	4666      	mov	r6, ip
   13c68:	003b      	movs	r3, r7
   13c6a:	4333      	orrs	r3, r6
   13c6c:	e7c9      	b.n	13c02 <__udivmoddi4+0x112>
   13c6e:	46c0      	nop			; (mov r8, r8)

00013c70 <__aeabi_fadd>:
   13c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c72:	46c6      	mov	lr, r8
   13c74:	024e      	lsls	r6, r1, #9
   13c76:	0247      	lsls	r7, r0, #9
   13c78:	0a76      	lsrs	r6, r6, #9
   13c7a:	0a7b      	lsrs	r3, r7, #9
   13c7c:	0044      	lsls	r4, r0, #1
   13c7e:	0fc5      	lsrs	r5, r0, #31
   13c80:	00f7      	lsls	r7, r6, #3
   13c82:	0048      	lsls	r0, r1, #1
   13c84:	4698      	mov	r8, r3
   13c86:	b500      	push	{lr}
   13c88:	0e24      	lsrs	r4, r4, #24
   13c8a:	002a      	movs	r2, r5
   13c8c:	00db      	lsls	r3, r3, #3
   13c8e:	0e00      	lsrs	r0, r0, #24
   13c90:	0fc9      	lsrs	r1, r1, #31
   13c92:	46bc      	mov	ip, r7
   13c94:	428d      	cmp	r5, r1
   13c96:	d067      	beq.n	13d68 <__aeabi_fadd+0xf8>
   13c98:	1a22      	subs	r2, r4, r0
   13c9a:	2a00      	cmp	r2, #0
   13c9c:	dc00      	bgt.n	13ca0 <__aeabi_fadd+0x30>
   13c9e:	e0a5      	b.n	13dec <__aeabi_fadd+0x17c>
   13ca0:	2800      	cmp	r0, #0
   13ca2:	d13a      	bne.n	13d1a <__aeabi_fadd+0xaa>
   13ca4:	2f00      	cmp	r7, #0
   13ca6:	d100      	bne.n	13caa <__aeabi_fadd+0x3a>
   13ca8:	e093      	b.n	13dd2 <__aeabi_fadd+0x162>
   13caa:	1e51      	subs	r1, r2, #1
   13cac:	2900      	cmp	r1, #0
   13cae:	d000      	beq.n	13cb2 <__aeabi_fadd+0x42>
   13cb0:	e0bc      	b.n	13e2c <__aeabi_fadd+0x1bc>
   13cb2:	2401      	movs	r4, #1
   13cb4:	1bdb      	subs	r3, r3, r7
   13cb6:	015a      	lsls	r2, r3, #5
   13cb8:	d546      	bpl.n	13d48 <__aeabi_fadd+0xd8>
   13cba:	019b      	lsls	r3, r3, #6
   13cbc:	099e      	lsrs	r6, r3, #6
   13cbe:	0030      	movs	r0, r6
   13cc0:	f002 fd2e 	bl	16720 <__clzsi2>
   13cc4:	3805      	subs	r0, #5
   13cc6:	4086      	lsls	r6, r0
   13cc8:	4284      	cmp	r4, r0
   13cca:	dd00      	ble.n	13cce <__aeabi_fadd+0x5e>
   13ccc:	e09d      	b.n	13e0a <__aeabi_fadd+0x19a>
   13cce:	1b04      	subs	r4, r0, r4
   13cd0:	0032      	movs	r2, r6
   13cd2:	2020      	movs	r0, #32
   13cd4:	3401      	adds	r4, #1
   13cd6:	40e2      	lsrs	r2, r4
   13cd8:	1b04      	subs	r4, r0, r4
   13cda:	40a6      	lsls	r6, r4
   13cdc:	0033      	movs	r3, r6
   13cde:	1e5e      	subs	r6, r3, #1
   13ce0:	41b3      	sbcs	r3, r6
   13ce2:	2400      	movs	r4, #0
   13ce4:	4313      	orrs	r3, r2
   13ce6:	075a      	lsls	r2, r3, #29
   13ce8:	d004      	beq.n	13cf4 <__aeabi_fadd+0x84>
   13cea:	220f      	movs	r2, #15
   13cec:	401a      	ands	r2, r3
   13cee:	2a04      	cmp	r2, #4
   13cf0:	d000      	beq.n	13cf4 <__aeabi_fadd+0x84>
   13cf2:	3304      	adds	r3, #4
   13cf4:	015a      	lsls	r2, r3, #5
   13cf6:	d529      	bpl.n	13d4c <__aeabi_fadd+0xdc>
   13cf8:	3401      	adds	r4, #1
   13cfa:	2cff      	cmp	r4, #255	; 0xff
   13cfc:	d100      	bne.n	13d00 <__aeabi_fadd+0x90>
   13cfe:	e081      	b.n	13e04 <__aeabi_fadd+0x194>
   13d00:	002a      	movs	r2, r5
   13d02:	019b      	lsls	r3, r3, #6
   13d04:	0a5b      	lsrs	r3, r3, #9
   13d06:	b2e4      	uxtb	r4, r4
   13d08:	025b      	lsls	r3, r3, #9
   13d0a:	05e4      	lsls	r4, r4, #23
   13d0c:	0a58      	lsrs	r0, r3, #9
   13d0e:	07d2      	lsls	r2, r2, #31
   13d10:	4320      	orrs	r0, r4
   13d12:	4310      	orrs	r0, r2
   13d14:	bc04      	pop	{r2}
   13d16:	4690      	mov	r8, r2
   13d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d1a:	2cff      	cmp	r4, #255	; 0xff
   13d1c:	d0e3      	beq.n	13ce6 <__aeabi_fadd+0x76>
   13d1e:	2180      	movs	r1, #128	; 0x80
   13d20:	0038      	movs	r0, r7
   13d22:	04c9      	lsls	r1, r1, #19
   13d24:	4308      	orrs	r0, r1
   13d26:	4684      	mov	ip, r0
   13d28:	2a1b      	cmp	r2, #27
   13d2a:	dd00      	ble.n	13d2e <__aeabi_fadd+0xbe>
   13d2c:	e082      	b.n	13e34 <__aeabi_fadd+0x1c4>
   13d2e:	2020      	movs	r0, #32
   13d30:	4661      	mov	r1, ip
   13d32:	40d1      	lsrs	r1, r2
   13d34:	1a82      	subs	r2, r0, r2
   13d36:	4660      	mov	r0, ip
   13d38:	4090      	lsls	r0, r2
   13d3a:	0002      	movs	r2, r0
   13d3c:	1e50      	subs	r0, r2, #1
   13d3e:	4182      	sbcs	r2, r0
   13d40:	430a      	orrs	r2, r1
   13d42:	1a9b      	subs	r3, r3, r2
   13d44:	015a      	lsls	r2, r3, #5
   13d46:	d4b8      	bmi.n	13cba <__aeabi_fadd+0x4a>
   13d48:	075a      	lsls	r2, r3, #29
   13d4a:	d1ce      	bne.n	13cea <__aeabi_fadd+0x7a>
   13d4c:	08de      	lsrs	r6, r3, #3
   13d4e:	002a      	movs	r2, r5
   13d50:	2cff      	cmp	r4, #255	; 0xff
   13d52:	d13a      	bne.n	13dca <__aeabi_fadd+0x15a>
   13d54:	2e00      	cmp	r6, #0
   13d56:	d100      	bne.n	13d5a <__aeabi_fadd+0xea>
   13d58:	e0ae      	b.n	13eb8 <__aeabi_fadd+0x248>
   13d5a:	2380      	movs	r3, #128	; 0x80
   13d5c:	03db      	lsls	r3, r3, #15
   13d5e:	4333      	orrs	r3, r6
   13d60:	025b      	lsls	r3, r3, #9
   13d62:	0a5b      	lsrs	r3, r3, #9
   13d64:	24ff      	movs	r4, #255	; 0xff
   13d66:	e7cf      	b.n	13d08 <__aeabi_fadd+0x98>
   13d68:	1a21      	subs	r1, r4, r0
   13d6a:	2900      	cmp	r1, #0
   13d6c:	dd52      	ble.n	13e14 <__aeabi_fadd+0x1a4>
   13d6e:	2800      	cmp	r0, #0
   13d70:	d031      	beq.n	13dd6 <__aeabi_fadd+0x166>
   13d72:	2cff      	cmp	r4, #255	; 0xff
   13d74:	d0b7      	beq.n	13ce6 <__aeabi_fadd+0x76>
   13d76:	2080      	movs	r0, #128	; 0x80
   13d78:	003e      	movs	r6, r7
   13d7a:	04c0      	lsls	r0, r0, #19
   13d7c:	4306      	orrs	r6, r0
   13d7e:	46b4      	mov	ip, r6
   13d80:	291b      	cmp	r1, #27
   13d82:	dd00      	ble.n	13d86 <__aeabi_fadd+0x116>
   13d84:	e0aa      	b.n	13edc <__aeabi_fadd+0x26c>
   13d86:	2620      	movs	r6, #32
   13d88:	4660      	mov	r0, ip
   13d8a:	40c8      	lsrs	r0, r1
   13d8c:	1a71      	subs	r1, r6, r1
   13d8e:	4666      	mov	r6, ip
   13d90:	408e      	lsls	r6, r1
   13d92:	0031      	movs	r1, r6
   13d94:	1e4e      	subs	r6, r1, #1
   13d96:	41b1      	sbcs	r1, r6
   13d98:	4301      	orrs	r1, r0
   13d9a:	185b      	adds	r3, r3, r1
   13d9c:	0159      	lsls	r1, r3, #5
   13d9e:	d5d3      	bpl.n	13d48 <__aeabi_fadd+0xd8>
   13da0:	3401      	adds	r4, #1
   13da2:	2cff      	cmp	r4, #255	; 0xff
   13da4:	d100      	bne.n	13da8 <__aeabi_fadd+0x138>
   13da6:	e087      	b.n	13eb8 <__aeabi_fadd+0x248>
   13da8:	2201      	movs	r2, #1
   13daa:	4978      	ldr	r1, [pc, #480]	; (13f8c <__aeabi_fadd+0x31c>)
   13dac:	401a      	ands	r2, r3
   13dae:	085b      	lsrs	r3, r3, #1
   13db0:	400b      	ands	r3, r1
   13db2:	4313      	orrs	r3, r2
   13db4:	e797      	b.n	13ce6 <__aeabi_fadd+0x76>
   13db6:	2c00      	cmp	r4, #0
   13db8:	d000      	beq.n	13dbc <__aeabi_fadd+0x14c>
   13dba:	e0a7      	b.n	13f0c <__aeabi_fadd+0x29c>
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d000      	beq.n	13dc2 <__aeabi_fadd+0x152>
   13dc0:	e0b6      	b.n	13f30 <__aeabi_fadd+0x2c0>
   13dc2:	1e3b      	subs	r3, r7, #0
   13dc4:	d162      	bne.n	13e8c <__aeabi_fadd+0x21c>
   13dc6:	2600      	movs	r6, #0
   13dc8:	2200      	movs	r2, #0
   13dca:	0273      	lsls	r3, r6, #9
   13dcc:	0a5b      	lsrs	r3, r3, #9
   13dce:	b2e4      	uxtb	r4, r4
   13dd0:	e79a      	b.n	13d08 <__aeabi_fadd+0x98>
   13dd2:	0014      	movs	r4, r2
   13dd4:	e787      	b.n	13ce6 <__aeabi_fadd+0x76>
   13dd6:	2f00      	cmp	r7, #0
   13dd8:	d04d      	beq.n	13e76 <__aeabi_fadd+0x206>
   13dda:	1e48      	subs	r0, r1, #1
   13ddc:	2800      	cmp	r0, #0
   13dde:	d157      	bne.n	13e90 <__aeabi_fadd+0x220>
   13de0:	4463      	add	r3, ip
   13de2:	2401      	movs	r4, #1
   13de4:	015a      	lsls	r2, r3, #5
   13de6:	d5af      	bpl.n	13d48 <__aeabi_fadd+0xd8>
   13de8:	2402      	movs	r4, #2
   13dea:	e7dd      	b.n	13da8 <__aeabi_fadd+0x138>
   13dec:	2a00      	cmp	r2, #0
   13dee:	d124      	bne.n	13e3a <__aeabi_fadd+0x1ca>
   13df0:	1c62      	adds	r2, r4, #1
   13df2:	b2d2      	uxtb	r2, r2
   13df4:	2a01      	cmp	r2, #1
   13df6:	ddde      	ble.n	13db6 <__aeabi_fadd+0x146>
   13df8:	1bde      	subs	r6, r3, r7
   13dfa:	0172      	lsls	r2, r6, #5
   13dfc:	d535      	bpl.n	13e6a <__aeabi_fadd+0x1fa>
   13dfe:	1afe      	subs	r6, r7, r3
   13e00:	000d      	movs	r5, r1
   13e02:	e75c      	b.n	13cbe <__aeabi_fadd+0x4e>
   13e04:	002a      	movs	r2, r5
   13e06:	2300      	movs	r3, #0
   13e08:	e77e      	b.n	13d08 <__aeabi_fadd+0x98>
   13e0a:	0033      	movs	r3, r6
   13e0c:	4a60      	ldr	r2, [pc, #384]	; (13f90 <__aeabi_fadd+0x320>)
   13e0e:	1a24      	subs	r4, r4, r0
   13e10:	4013      	ands	r3, r2
   13e12:	e768      	b.n	13ce6 <__aeabi_fadd+0x76>
   13e14:	2900      	cmp	r1, #0
   13e16:	d163      	bne.n	13ee0 <__aeabi_fadd+0x270>
   13e18:	1c61      	adds	r1, r4, #1
   13e1a:	b2c8      	uxtb	r0, r1
   13e1c:	2801      	cmp	r0, #1
   13e1e:	dd4e      	ble.n	13ebe <__aeabi_fadd+0x24e>
   13e20:	29ff      	cmp	r1, #255	; 0xff
   13e22:	d049      	beq.n	13eb8 <__aeabi_fadd+0x248>
   13e24:	4463      	add	r3, ip
   13e26:	085b      	lsrs	r3, r3, #1
   13e28:	000c      	movs	r4, r1
   13e2a:	e75c      	b.n	13ce6 <__aeabi_fadd+0x76>
   13e2c:	2aff      	cmp	r2, #255	; 0xff
   13e2e:	d041      	beq.n	13eb4 <__aeabi_fadd+0x244>
   13e30:	000a      	movs	r2, r1
   13e32:	e779      	b.n	13d28 <__aeabi_fadd+0xb8>
   13e34:	2201      	movs	r2, #1
   13e36:	1a9b      	subs	r3, r3, r2
   13e38:	e784      	b.n	13d44 <__aeabi_fadd+0xd4>
   13e3a:	2c00      	cmp	r4, #0
   13e3c:	d01d      	beq.n	13e7a <__aeabi_fadd+0x20a>
   13e3e:	28ff      	cmp	r0, #255	; 0xff
   13e40:	d022      	beq.n	13e88 <__aeabi_fadd+0x218>
   13e42:	2480      	movs	r4, #128	; 0x80
   13e44:	04e4      	lsls	r4, r4, #19
   13e46:	4252      	negs	r2, r2
   13e48:	4323      	orrs	r3, r4
   13e4a:	2a1b      	cmp	r2, #27
   13e4c:	dd00      	ble.n	13e50 <__aeabi_fadd+0x1e0>
   13e4e:	e08a      	b.n	13f66 <__aeabi_fadd+0x2f6>
   13e50:	001c      	movs	r4, r3
   13e52:	2520      	movs	r5, #32
   13e54:	40d4      	lsrs	r4, r2
   13e56:	1aaa      	subs	r2, r5, r2
   13e58:	4093      	lsls	r3, r2
   13e5a:	1e5a      	subs	r2, r3, #1
   13e5c:	4193      	sbcs	r3, r2
   13e5e:	4323      	orrs	r3, r4
   13e60:	4662      	mov	r2, ip
   13e62:	0004      	movs	r4, r0
   13e64:	1ad3      	subs	r3, r2, r3
   13e66:	000d      	movs	r5, r1
   13e68:	e725      	b.n	13cb6 <__aeabi_fadd+0x46>
   13e6a:	2e00      	cmp	r6, #0
   13e6c:	d000      	beq.n	13e70 <__aeabi_fadd+0x200>
   13e6e:	e726      	b.n	13cbe <__aeabi_fadd+0x4e>
   13e70:	2200      	movs	r2, #0
   13e72:	2400      	movs	r4, #0
   13e74:	e7a9      	b.n	13dca <__aeabi_fadd+0x15a>
   13e76:	000c      	movs	r4, r1
   13e78:	e735      	b.n	13ce6 <__aeabi_fadd+0x76>
   13e7a:	2b00      	cmp	r3, #0
   13e7c:	d04d      	beq.n	13f1a <__aeabi_fadd+0x2aa>
   13e7e:	43d2      	mvns	r2, r2
   13e80:	2a00      	cmp	r2, #0
   13e82:	d0ed      	beq.n	13e60 <__aeabi_fadd+0x1f0>
   13e84:	28ff      	cmp	r0, #255	; 0xff
   13e86:	d1e0      	bne.n	13e4a <__aeabi_fadd+0x1da>
   13e88:	4663      	mov	r3, ip
   13e8a:	24ff      	movs	r4, #255	; 0xff
   13e8c:	000d      	movs	r5, r1
   13e8e:	e72a      	b.n	13ce6 <__aeabi_fadd+0x76>
   13e90:	29ff      	cmp	r1, #255	; 0xff
   13e92:	d00f      	beq.n	13eb4 <__aeabi_fadd+0x244>
   13e94:	0001      	movs	r1, r0
   13e96:	e773      	b.n	13d80 <__aeabi_fadd+0x110>
   13e98:	2b00      	cmp	r3, #0
   13e9a:	d061      	beq.n	13f60 <__aeabi_fadd+0x2f0>
   13e9c:	24ff      	movs	r4, #255	; 0xff
   13e9e:	2f00      	cmp	r7, #0
   13ea0:	d100      	bne.n	13ea4 <__aeabi_fadd+0x234>
   13ea2:	e720      	b.n	13ce6 <__aeabi_fadd+0x76>
   13ea4:	2280      	movs	r2, #128	; 0x80
   13ea6:	4641      	mov	r1, r8
   13ea8:	03d2      	lsls	r2, r2, #15
   13eaa:	4211      	tst	r1, r2
   13eac:	d002      	beq.n	13eb4 <__aeabi_fadd+0x244>
   13eae:	4216      	tst	r6, r2
   13eb0:	d100      	bne.n	13eb4 <__aeabi_fadd+0x244>
   13eb2:	003b      	movs	r3, r7
   13eb4:	24ff      	movs	r4, #255	; 0xff
   13eb6:	e716      	b.n	13ce6 <__aeabi_fadd+0x76>
   13eb8:	24ff      	movs	r4, #255	; 0xff
   13eba:	2300      	movs	r3, #0
   13ebc:	e724      	b.n	13d08 <__aeabi_fadd+0x98>
   13ebe:	2c00      	cmp	r4, #0
   13ec0:	d1ea      	bne.n	13e98 <__aeabi_fadd+0x228>
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d058      	beq.n	13f78 <__aeabi_fadd+0x308>
   13ec6:	2f00      	cmp	r7, #0
   13ec8:	d100      	bne.n	13ecc <__aeabi_fadd+0x25c>
   13eca:	e70c      	b.n	13ce6 <__aeabi_fadd+0x76>
   13ecc:	4463      	add	r3, ip
   13ece:	015a      	lsls	r2, r3, #5
   13ed0:	d400      	bmi.n	13ed4 <__aeabi_fadd+0x264>
   13ed2:	e739      	b.n	13d48 <__aeabi_fadd+0xd8>
   13ed4:	4a2e      	ldr	r2, [pc, #184]	; (13f90 <__aeabi_fadd+0x320>)
   13ed6:	000c      	movs	r4, r1
   13ed8:	4013      	ands	r3, r2
   13eda:	e704      	b.n	13ce6 <__aeabi_fadd+0x76>
   13edc:	2101      	movs	r1, #1
   13ede:	e75c      	b.n	13d9a <__aeabi_fadd+0x12a>
   13ee0:	2c00      	cmp	r4, #0
   13ee2:	d11e      	bne.n	13f22 <__aeabi_fadd+0x2b2>
   13ee4:	2b00      	cmp	r3, #0
   13ee6:	d040      	beq.n	13f6a <__aeabi_fadd+0x2fa>
   13ee8:	43c9      	mvns	r1, r1
   13eea:	2900      	cmp	r1, #0
   13eec:	d00b      	beq.n	13f06 <__aeabi_fadd+0x296>
   13eee:	28ff      	cmp	r0, #255	; 0xff
   13ef0:	d036      	beq.n	13f60 <__aeabi_fadd+0x2f0>
   13ef2:	291b      	cmp	r1, #27
   13ef4:	dc47      	bgt.n	13f86 <__aeabi_fadd+0x316>
   13ef6:	001c      	movs	r4, r3
   13ef8:	2620      	movs	r6, #32
   13efa:	40cc      	lsrs	r4, r1
   13efc:	1a71      	subs	r1, r6, r1
   13efe:	408b      	lsls	r3, r1
   13f00:	1e59      	subs	r1, r3, #1
   13f02:	418b      	sbcs	r3, r1
   13f04:	4323      	orrs	r3, r4
   13f06:	4463      	add	r3, ip
   13f08:	0004      	movs	r4, r0
   13f0a:	e747      	b.n	13d9c <__aeabi_fadd+0x12c>
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	d118      	bne.n	13f42 <__aeabi_fadd+0x2d2>
   13f10:	1e3b      	subs	r3, r7, #0
   13f12:	d02d      	beq.n	13f70 <__aeabi_fadd+0x300>
   13f14:	000d      	movs	r5, r1
   13f16:	24ff      	movs	r4, #255	; 0xff
   13f18:	e6e5      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f1a:	003b      	movs	r3, r7
   13f1c:	0004      	movs	r4, r0
   13f1e:	000d      	movs	r5, r1
   13f20:	e6e1      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f22:	28ff      	cmp	r0, #255	; 0xff
   13f24:	d01c      	beq.n	13f60 <__aeabi_fadd+0x2f0>
   13f26:	2480      	movs	r4, #128	; 0x80
   13f28:	04e4      	lsls	r4, r4, #19
   13f2a:	4249      	negs	r1, r1
   13f2c:	4323      	orrs	r3, r4
   13f2e:	e7e0      	b.n	13ef2 <__aeabi_fadd+0x282>
   13f30:	2f00      	cmp	r7, #0
   13f32:	d100      	bne.n	13f36 <__aeabi_fadd+0x2c6>
   13f34:	e6d7      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f36:	1bde      	subs	r6, r3, r7
   13f38:	0172      	lsls	r2, r6, #5
   13f3a:	d51f      	bpl.n	13f7c <__aeabi_fadd+0x30c>
   13f3c:	1afb      	subs	r3, r7, r3
   13f3e:	000d      	movs	r5, r1
   13f40:	e6d1      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f42:	24ff      	movs	r4, #255	; 0xff
   13f44:	2f00      	cmp	r7, #0
   13f46:	d100      	bne.n	13f4a <__aeabi_fadd+0x2da>
   13f48:	e6cd      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f4a:	2280      	movs	r2, #128	; 0x80
   13f4c:	4640      	mov	r0, r8
   13f4e:	03d2      	lsls	r2, r2, #15
   13f50:	4210      	tst	r0, r2
   13f52:	d0af      	beq.n	13eb4 <__aeabi_fadd+0x244>
   13f54:	4216      	tst	r6, r2
   13f56:	d1ad      	bne.n	13eb4 <__aeabi_fadd+0x244>
   13f58:	003b      	movs	r3, r7
   13f5a:	000d      	movs	r5, r1
   13f5c:	24ff      	movs	r4, #255	; 0xff
   13f5e:	e6c2      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f60:	4663      	mov	r3, ip
   13f62:	24ff      	movs	r4, #255	; 0xff
   13f64:	e6bf      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f66:	2301      	movs	r3, #1
   13f68:	e77a      	b.n	13e60 <__aeabi_fadd+0x1f0>
   13f6a:	003b      	movs	r3, r7
   13f6c:	0004      	movs	r4, r0
   13f6e:	e6ba      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f70:	2680      	movs	r6, #128	; 0x80
   13f72:	2200      	movs	r2, #0
   13f74:	03f6      	lsls	r6, r6, #15
   13f76:	e6f0      	b.n	13d5a <__aeabi_fadd+0xea>
   13f78:	003b      	movs	r3, r7
   13f7a:	e6b4      	b.n	13ce6 <__aeabi_fadd+0x76>
   13f7c:	1e33      	subs	r3, r6, #0
   13f7e:	d000      	beq.n	13f82 <__aeabi_fadd+0x312>
   13f80:	e6e2      	b.n	13d48 <__aeabi_fadd+0xd8>
   13f82:	2200      	movs	r2, #0
   13f84:	e721      	b.n	13dca <__aeabi_fadd+0x15a>
   13f86:	2301      	movs	r3, #1
   13f88:	e7bd      	b.n	13f06 <__aeabi_fadd+0x296>
   13f8a:	46c0      	nop			; (mov r8, r8)
   13f8c:	7dffffff 	.word	0x7dffffff
   13f90:	fbffffff 	.word	0xfbffffff

00013f94 <__aeabi_fdiv>:
   13f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f96:	4657      	mov	r7, sl
   13f98:	464e      	mov	r6, r9
   13f9a:	46de      	mov	lr, fp
   13f9c:	4645      	mov	r5, r8
   13f9e:	b5e0      	push	{r5, r6, r7, lr}
   13fa0:	0244      	lsls	r4, r0, #9
   13fa2:	0043      	lsls	r3, r0, #1
   13fa4:	0fc6      	lsrs	r6, r0, #31
   13fa6:	b083      	sub	sp, #12
   13fa8:	1c0f      	adds	r7, r1, #0
   13faa:	0a64      	lsrs	r4, r4, #9
   13fac:	0e1b      	lsrs	r3, r3, #24
   13fae:	46b2      	mov	sl, r6
   13fb0:	d053      	beq.n	1405a <__aeabi_fdiv+0xc6>
   13fb2:	2bff      	cmp	r3, #255	; 0xff
   13fb4:	d027      	beq.n	14006 <__aeabi_fdiv+0x72>
   13fb6:	2280      	movs	r2, #128	; 0x80
   13fb8:	00e4      	lsls	r4, r4, #3
   13fba:	04d2      	lsls	r2, r2, #19
   13fbc:	4314      	orrs	r4, r2
   13fbe:	227f      	movs	r2, #127	; 0x7f
   13fc0:	4252      	negs	r2, r2
   13fc2:	4690      	mov	r8, r2
   13fc4:	4498      	add	r8, r3
   13fc6:	2300      	movs	r3, #0
   13fc8:	4699      	mov	r9, r3
   13fca:	469b      	mov	fp, r3
   13fcc:	027d      	lsls	r5, r7, #9
   13fce:	0078      	lsls	r0, r7, #1
   13fd0:	0ffb      	lsrs	r3, r7, #31
   13fd2:	0a6d      	lsrs	r5, r5, #9
   13fd4:	0e00      	lsrs	r0, r0, #24
   13fd6:	9300      	str	r3, [sp, #0]
   13fd8:	d024      	beq.n	14024 <__aeabi_fdiv+0x90>
   13fda:	28ff      	cmp	r0, #255	; 0xff
   13fdc:	d046      	beq.n	1406c <__aeabi_fdiv+0xd8>
   13fde:	2380      	movs	r3, #128	; 0x80
   13fe0:	2100      	movs	r1, #0
   13fe2:	00ed      	lsls	r5, r5, #3
   13fe4:	04db      	lsls	r3, r3, #19
   13fe6:	431d      	orrs	r5, r3
   13fe8:	387f      	subs	r0, #127	; 0x7f
   13fea:	4647      	mov	r7, r8
   13fec:	1a38      	subs	r0, r7, r0
   13fee:	464f      	mov	r7, r9
   13ff0:	430f      	orrs	r7, r1
   13ff2:	00bf      	lsls	r7, r7, #2
   13ff4:	46b9      	mov	r9, r7
   13ff6:	0033      	movs	r3, r6
   13ff8:	9a00      	ldr	r2, [sp, #0]
   13ffa:	4f87      	ldr	r7, [pc, #540]	; (14218 <__aeabi_fdiv+0x284>)
   13ffc:	4053      	eors	r3, r2
   13ffe:	464a      	mov	r2, r9
   14000:	58ba      	ldr	r2, [r7, r2]
   14002:	9301      	str	r3, [sp, #4]
   14004:	4697      	mov	pc, r2
   14006:	2c00      	cmp	r4, #0
   14008:	d14e      	bne.n	140a8 <__aeabi_fdiv+0x114>
   1400a:	2308      	movs	r3, #8
   1400c:	4699      	mov	r9, r3
   1400e:	33f7      	adds	r3, #247	; 0xf7
   14010:	4698      	mov	r8, r3
   14012:	3bfd      	subs	r3, #253	; 0xfd
   14014:	469b      	mov	fp, r3
   14016:	027d      	lsls	r5, r7, #9
   14018:	0078      	lsls	r0, r7, #1
   1401a:	0ffb      	lsrs	r3, r7, #31
   1401c:	0a6d      	lsrs	r5, r5, #9
   1401e:	0e00      	lsrs	r0, r0, #24
   14020:	9300      	str	r3, [sp, #0]
   14022:	d1da      	bne.n	13fda <__aeabi_fdiv+0x46>
   14024:	2d00      	cmp	r5, #0
   14026:	d126      	bne.n	14076 <__aeabi_fdiv+0xe2>
   14028:	2000      	movs	r0, #0
   1402a:	2101      	movs	r1, #1
   1402c:	0033      	movs	r3, r6
   1402e:	9a00      	ldr	r2, [sp, #0]
   14030:	4f7a      	ldr	r7, [pc, #488]	; (1421c <__aeabi_fdiv+0x288>)
   14032:	4053      	eors	r3, r2
   14034:	4642      	mov	r2, r8
   14036:	1a10      	subs	r0, r2, r0
   14038:	464a      	mov	r2, r9
   1403a:	430a      	orrs	r2, r1
   1403c:	0092      	lsls	r2, r2, #2
   1403e:	58ba      	ldr	r2, [r7, r2]
   14040:	001d      	movs	r5, r3
   14042:	4697      	mov	pc, r2
   14044:	9b00      	ldr	r3, [sp, #0]
   14046:	002c      	movs	r4, r5
   14048:	469a      	mov	sl, r3
   1404a:	468b      	mov	fp, r1
   1404c:	465b      	mov	r3, fp
   1404e:	2b02      	cmp	r3, #2
   14050:	d131      	bne.n	140b6 <__aeabi_fdiv+0x122>
   14052:	4653      	mov	r3, sl
   14054:	21ff      	movs	r1, #255	; 0xff
   14056:	2400      	movs	r4, #0
   14058:	e038      	b.n	140cc <__aeabi_fdiv+0x138>
   1405a:	2c00      	cmp	r4, #0
   1405c:	d117      	bne.n	1408e <__aeabi_fdiv+0xfa>
   1405e:	2304      	movs	r3, #4
   14060:	4699      	mov	r9, r3
   14062:	2300      	movs	r3, #0
   14064:	4698      	mov	r8, r3
   14066:	3301      	adds	r3, #1
   14068:	469b      	mov	fp, r3
   1406a:	e7af      	b.n	13fcc <__aeabi_fdiv+0x38>
   1406c:	20ff      	movs	r0, #255	; 0xff
   1406e:	2d00      	cmp	r5, #0
   14070:	d10b      	bne.n	1408a <__aeabi_fdiv+0xf6>
   14072:	2102      	movs	r1, #2
   14074:	e7da      	b.n	1402c <__aeabi_fdiv+0x98>
   14076:	0028      	movs	r0, r5
   14078:	f002 fb52 	bl	16720 <__clzsi2>
   1407c:	1f43      	subs	r3, r0, #5
   1407e:	409d      	lsls	r5, r3
   14080:	2376      	movs	r3, #118	; 0x76
   14082:	425b      	negs	r3, r3
   14084:	1a18      	subs	r0, r3, r0
   14086:	2100      	movs	r1, #0
   14088:	e7af      	b.n	13fea <__aeabi_fdiv+0x56>
   1408a:	2103      	movs	r1, #3
   1408c:	e7ad      	b.n	13fea <__aeabi_fdiv+0x56>
   1408e:	0020      	movs	r0, r4
   14090:	f002 fb46 	bl	16720 <__clzsi2>
   14094:	1f43      	subs	r3, r0, #5
   14096:	409c      	lsls	r4, r3
   14098:	2376      	movs	r3, #118	; 0x76
   1409a:	425b      	negs	r3, r3
   1409c:	1a1b      	subs	r3, r3, r0
   1409e:	4698      	mov	r8, r3
   140a0:	2300      	movs	r3, #0
   140a2:	4699      	mov	r9, r3
   140a4:	469b      	mov	fp, r3
   140a6:	e791      	b.n	13fcc <__aeabi_fdiv+0x38>
   140a8:	230c      	movs	r3, #12
   140aa:	4699      	mov	r9, r3
   140ac:	33f3      	adds	r3, #243	; 0xf3
   140ae:	4698      	mov	r8, r3
   140b0:	3bfc      	subs	r3, #252	; 0xfc
   140b2:	469b      	mov	fp, r3
   140b4:	e78a      	b.n	13fcc <__aeabi_fdiv+0x38>
   140b6:	2b03      	cmp	r3, #3
   140b8:	d100      	bne.n	140bc <__aeabi_fdiv+0x128>
   140ba:	e0a5      	b.n	14208 <__aeabi_fdiv+0x274>
   140bc:	4655      	mov	r5, sl
   140be:	2b01      	cmp	r3, #1
   140c0:	d000      	beq.n	140c4 <__aeabi_fdiv+0x130>
   140c2:	e081      	b.n	141c8 <__aeabi_fdiv+0x234>
   140c4:	2301      	movs	r3, #1
   140c6:	2100      	movs	r1, #0
   140c8:	2400      	movs	r4, #0
   140ca:	402b      	ands	r3, r5
   140cc:	0264      	lsls	r4, r4, #9
   140ce:	05c9      	lsls	r1, r1, #23
   140d0:	0a60      	lsrs	r0, r4, #9
   140d2:	07db      	lsls	r3, r3, #31
   140d4:	4308      	orrs	r0, r1
   140d6:	4318      	orrs	r0, r3
   140d8:	b003      	add	sp, #12
   140da:	bc3c      	pop	{r2, r3, r4, r5}
   140dc:	4690      	mov	r8, r2
   140de:	4699      	mov	r9, r3
   140e0:	46a2      	mov	sl, r4
   140e2:	46ab      	mov	fp, r5
   140e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140e6:	2480      	movs	r4, #128	; 0x80
   140e8:	2300      	movs	r3, #0
   140ea:	03e4      	lsls	r4, r4, #15
   140ec:	21ff      	movs	r1, #255	; 0xff
   140ee:	e7ed      	b.n	140cc <__aeabi_fdiv+0x138>
   140f0:	21ff      	movs	r1, #255	; 0xff
   140f2:	2400      	movs	r4, #0
   140f4:	e7ea      	b.n	140cc <__aeabi_fdiv+0x138>
   140f6:	2301      	movs	r3, #1
   140f8:	1a59      	subs	r1, r3, r1
   140fa:	291b      	cmp	r1, #27
   140fc:	dd66      	ble.n	141cc <__aeabi_fdiv+0x238>
   140fe:	9a01      	ldr	r2, [sp, #4]
   14100:	4013      	ands	r3, r2
   14102:	2100      	movs	r1, #0
   14104:	2400      	movs	r4, #0
   14106:	e7e1      	b.n	140cc <__aeabi_fdiv+0x138>
   14108:	2380      	movs	r3, #128	; 0x80
   1410a:	03db      	lsls	r3, r3, #15
   1410c:	421c      	tst	r4, r3
   1410e:	d038      	beq.n	14182 <__aeabi_fdiv+0x1ee>
   14110:	421d      	tst	r5, r3
   14112:	d051      	beq.n	141b8 <__aeabi_fdiv+0x224>
   14114:	431c      	orrs	r4, r3
   14116:	0264      	lsls	r4, r4, #9
   14118:	0a64      	lsrs	r4, r4, #9
   1411a:	0033      	movs	r3, r6
   1411c:	21ff      	movs	r1, #255	; 0xff
   1411e:	e7d5      	b.n	140cc <__aeabi_fdiv+0x138>
   14120:	0163      	lsls	r3, r4, #5
   14122:	016c      	lsls	r4, r5, #5
   14124:	42a3      	cmp	r3, r4
   14126:	d23b      	bcs.n	141a0 <__aeabi_fdiv+0x20c>
   14128:	261b      	movs	r6, #27
   1412a:	2100      	movs	r1, #0
   1412c:	3801      	subs	r0, #1
   1412e:	2501      	movs	r5, #1
   14130:	001f      	movs	r7, r3
   14132:	0049      	lsls	r1, r1, #1
   14134:	005b      	lsls	r3, r3, #1
   14136:	2f00      	cmp	r7, #0
   14138:	db01      	blt.n	1413e <__aeabi_fdiv+0x1aa>
   1413a:	429c      	cmp	r4, r3
   1413c:	d801      	bhi.n	14142 <__aeabi_fdiv+0x1ae>
   1413e:	1b1b      	subs	r3, r3, r4
   14140:	4329      	orrs	r1, r5
   14142:	3e01      	subs	r6, #1
   14144:	2e00      	cmp	r6, #0
   14146:	d1f3      	bne.n	14130 <__aeabi_fdiv+0x19c>
   14148:	001c      	movs	r4, r3
   1414a:	1e63      	subs	r3, r4, #1
   1414c:	419c      	sbcs	r4, r3
   1414e:	430c      	orrs	r4, r1
   14150:	0001      	movs	r1, r0
   14152:	317f      	adds	r1, #127	; 0x7f
   14154:	2900      	cmp	r1, #0
   14156:	ddce      	ble.n	140f6 <__aeabi_fdiv+0x162>
   14158:	0763      	lsls	r3, r4, #29
   1415a:	d004      	beq.n	14166 <__aeabi_fdiv+0x1d2>
   1415c:	230f      	movs	r3, #15
   1415e:	4023      	ands	r3, r4
   14160:	2b04      	cmp	r3, #4
   14162:	d000      	beq.n	14166 <__aeabi_fdiv+0x1d2>
   14164:	3404      	adds	r4, #4
   14166:	0123      	lsls	r3, r4, #4
   14168:	d503      	bpl.n	14172 <__aeabi_fdiv+0x1de>
   1416a:	0001      	movs	r1, r0
   1416c:	4b2c      	ldr	r3, [pc, #176]	; (14220 <__aeabi_fdiv+0x28c>)
   1416e:	3180      	adds	r1, #128	; 0x80
   14170:	401c      	ands	r4, r3
   14172:	29fe      	cmp	r1, #254	; 0xfe
   14174:	dd0d      	ble.n	14192 <__aeabi_fdiv+0x1fe>
   14176:	2301      	movs	r3, #1
   14178:	9a01      	ldr	r2, [sp, #4]
   1417a:	21ff      	movs	r1, #255	; 0xff
   1417c:	4013      	ands	r3, r2
   1417e:	2400      	movs	r4, #0
   14180:	e7a4      	b.n	140cc <__aeabi_fdiv+0x138>
   14182:	2380      	movs	r3, #128	; 0x80
   14184:	03db      	lsls	r3, r3, #15
   14186:	431c      	orrs	r4, r3
   14188:	0264      	lsls	r4, r4, #9
   1418a:	0a64      	lsrs	r4, r4, #9
   1418c:	0033      	movs	r3, r6
   1418e:	21ff      	movs	r1, #255	; 0xff
   14190:	e79c      	b.n	140cc <__aeabi_fdiv+0x138>
   14192:	2301      	movs	r3, #1
   14194:	9a01      	ldr	r2, [sp, #4]
   14196:	01a4      	lsls	r4, r4, #6
   14198:	0a64      	lsrs	r4, r4, #9
   1419a:	b2c9      	uxtb	r1, r1
   1419c:	4013      	ands	r3, r2
   1419e:	e795      	b.n	140cc <__aeabi_fdiv+0x138>
   141a0:	1b1b      	subs	r3, r3, r4
   141a2:	261a      	movs	r6, #26
   141a4:	2101      	movs	r1, #1
   141a6:	e7c2      	b.n	1412e <__aeabi_fdiv+0x19a>
   141a8:	9b00      	ldr	r3, [sp, #0]
   141aa:	468b      	mov	fp, r1
   141ac:	469a      	mov	sl, r3
   141ae:	2400      	movs	r4, #0
   141b0:	e74c      	b.n	1404c <__aeabi_fdiv+0xb8>
   141b2:	0263      	lsls	r3, r4, #9
   141b4:	d5e5      	bpl.n	14182 <__aeabi_fdiv+0x1ee>
   141b6:	2500      	movs	r5, #0
   141b8:	2480      	movs	r4, #128	; 0x80
   141ba:	03e4      	lsls	r4, r4, #15
   141bc:	432c      	orrs	r4, r5
   141be:	0264      	lsls	r4, r4, #9
   141c0:	0a64      	lsrs	r4, r4, #9
   141c2:	9b00      	ldr	r3, [sp, #0]
   141c4:	21ff      	movs	r1, #255	; 0xff
   141c6:	e781      	b.n	140cc <__aeabi_fdiv+0x138>
   141c8:	9501      	str	r5, [sp, #4]
   141ca:	e7c1      	b.n	14150 <__aeabi_fdiv+0x1bc>
   141cc:	0023      	movs	r3, r4
   141ce:	2020      	movs	r0, #32
   141d0:	40cb      	lsrs	r3, r1
   141d2:	1a41      	subs	r1, r0, r1
   141d4:	408c      	lsls	r4, r1
   141d6:	1e61      	subs	r1, r4, #1
   141d8:	418c      	sbcs	r4, r1
   141da:	431c      	orrs	r4, r3
   141dc:	0763      	lsls	r3, r4, #29
   141de:	d004      	beq.n	141ea <__aeabi_fdiv+0x256>
   141e0:	230f      	movs	r3, #15
   141e2:	4023      	ands	r3, r4
   141e4:	2b04      	cmp	r3, #4
   141e6:	d000      	beq.n	141ea <__aeabi_fdiv+0x256>
   141e8:	3404      	adds	r4, #4
   141ea:	0163      	lsls	r3, r4, #5
   141ec:	d505      	bpl.n	141fa <__aeabi_fdiv+0x266>
   141ee:	2301      	movs	r3, #1
   141f0:	9a01      	ldr	r2, [sp, #4]
   141f2:	2101      	movs	r1, #1
   141f4:	4013      	ands	r3, r2
   141f6:	2400      	movs	r4, #0
   141f8:	e768      	b.n	140cc <__aeabi_fdiv+0x138>
   141fa:	2301      	movs	r3, #1
   141fc:	9a01      	ldr	r2, [sp, #4]
   141fe:	01a4      	lsls	r4, r4, #6
   14200:	0a64      	lsrs	r4, r4, #9
   14202:	4013      	ands	r3, r2
   14204:	2100      	movs	r1, #0
   14206:	e761      	b.n	140cc <__aeabi_fdiv+0x138>
   14208:	2380      	movs	r3, #128	; 0x80
   1420a:	03db      	lsls	r3, r3, #15
   1420c:	431c      	orrs	r4, r3
   1420e:	0264      	lsls	r4, r4, #9
   14210:	0a64      	lsrs	r4, r4, #9
   14212:	4653      	mov	r3, sl
   14214:	21ff      	movs	r1, #255	; 0xff
   14216:	e759      	b.n	140cc <__aeabi_fdiv+0x138>
   14218:	00018d74 	.word	0x00018d74
   1421c:	00018db4 	.word	0x00018db4
   14220:	f7ffffff 	.word	0xf7ffffff

00014224 <__eqsf2>:
   14224:	b570      	push	{r4, r5, r6, lr}
   14226:	0042      	lsls	r2, r0, #1
   14228:	0245      	lsls	r5, r0, #9
   1422a:	024e      	lsls	r6, r1, #9
   1422c:	004c      	lsls	r4, r1, #1
   1422e:	0fc3      	lsrs	r3, r0, #31
   14230:	0a6d      	lsrs	r5, r5, #9
   14232:	0e12      	lsrs	r2, r2, #24
   14234:	0a76      	lsrs	r6, r6, #9
   14236:	0e24      	lsrs	r4, r4, #24
   14238:	0fc9      	lsrs	r1, r1, #31
   1423a:	2001      	movs	r0, #1
   1423c:	2aff      	cmp	r2, #255	; 0xff
   1423e:	d006      	beq.n	1424e <__eqsf2+0x2a>
   14240:	2cff      	cmp	r4, #255	; 0xff
   14242:	d003      	beq.n	1424c <__eqsf2+0x28>
   14244:	42a2      	cmp	r2, r4
   14246:	d101      	bne.n	1424c <__eqsf2+0x28>
   14248:	42b5      	cmp	r5, r6
   1424a:	d006      	beq.n	1425a <__eqsf2+0x36>
   1424c:	bd70      	pop	{r4, r5, r6, pc}
   1424e:	2d00      	cmp	r5, #0
   14250:	d1fc      	bne.n	1424c <__eqsf2+0x28>
   14252:	2cff      	cmp	r4, #255	; 0xff
   14254:	d1fa      	bne.n	1424c <__eqsf2+0x28>
   14256:	2e00      	cmp	r6, #0
   14258:	d1f8      	bne.n	1424c <__eqsf2+0x28>
   1425a:	428b      	cmp	r3, r1
   1425c:	d006      	beq.n	1426c <__eqsf2+0x48>
   1425e:	2001      	movs	r0, #1
   14260:	2a00      	cmp	r2, #0
   14262:	d1f3      	bne.n	1424c <__eqsf2+0x28>
   14264:	0028      	movs	r0, r5
   14266:	1e45      	subs	r5, r0, #1
   14268:	41a8      	sbcs	r0, r5
   1426a:	e7ef      	b.n	1424c <__eqsf2+0x28>
   1426c:	2000      	movs	r0, #0
   1426e:	e7ed      	b.n	1424c <__eqsf2+0x28>

00014270 <__gesf2>:
   14270:	b5f0      	push	{r4, r5, r6, r7, lr}
   14272:	0042      	lsls	r2, r0, #1
   14274:	0245      	lsls	r5, r0, #9
   14276:	024c      	lsls	r4, r1, #9
   14278:	0fc3      	lsrs	r3, r0, #31
   1427a:	0048      	lsls	r0, r1, #1
   1427c:	0a6d      	lsrs	r5, r5, #9
   1427e:	0e12      	lsrs	r2, r2, #24
   14280:	0a64      	lsrs	r4, r4, #9
   14282:	0e00      	lsrs	r0, r0, #24
   14284:	0fc9      	lsrs	r1, r1, #31
   14286:	2aff      	cmp	r2, #255	; 0xff
   14288:	d01e      	beq.n	142c8 <__gesf2+0x58>
   1428a:	28ff      	cmp	r0, #255	; 0xff
   1428c:	d021      	beq.n	142d2 <__gesf2+0x62>
   1428e:	2a00      	cmp	r2, #0
   14290:	d10a      	bne.n	142a8 <__gesf2+0x38>
   14292:	426e      	negs	r6, r5
   14294:	416e      	adcs	r6, r5
   14296:	b2f6      	uxtb	r6, r6
   14298:	2800      	cmp	r0, #0
   1429a:	d10f      	bne.n	142bc <__gesf2+0x4c>
   1429c:	2c00      	cmp	r4, #0
   1429e:	d10d      	bne.n	142bc <__gesf2+0x4c>
   142a0:	2000      	movs	r0, #0
   142a2:	2d00      	cmp	r5, #0
   142a4:	d009      	beq.n	142ba <__gesf2+0x4a>
   142a6:	e005      	b.n	142b4 <__gesf2+0x44>
   142a8:	2800      	cmp	r0, #0
   142aa:	d101      	bne.n	142b0 <__gesf2+0x40>
   142ac:	2c00      	cmp	r4, #0
   142ae:	d001      	beq.n	142b4 <__gesf2+0x44>
   142b0:	428b      	cmp	r3, r1
   142b2:	d011      	beq.n	142d8 <__gesf2+0x68>
   142b4:	2101      	movs	r1, #1
   142b6:	4258      	negs	r0, r3
   142b8:	4308      	orrs	r0, r1
   142ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142bc:	2e00      	cmp	r6, #0
   142be:	d0f7      	beq.n	142b0 <__gesf2+0x40>
   142c0:	2001      	movs	r0, #1
   142c2:	3901      	subs	r1, #1
   142c4:	4308      	orrs	r0, r1
   142c6:	e7f8      	b.n	142ba <__gesf2+0x4a>
   142c8:	2d00      	cmp	r5, #0
   142ca:	d0de      	beq.n	1428a <__gesf2+0x1a>
   142cc:	2002      	movs	r0, #2
   142ce:	4240      	negs	r0, r0
   142d0:	e7f3      	b.n	142ba <__gesf2+0x4a>
   142d2:	2c00      	cmp	r4, #0
   142d4:	d0db      	beq.n	1428e <__gesf2+0x1e>
   142d6:	e7f9      	b.n	142cc <__gesf2+0x5c>
   142d8:	4282      	cmp	r2, r0
   142da:	dceb      	bgt.n	142b4 <__gesf2+0x44>
   142dc:	db04      	blt.n	142e8 <__gesf2+0x78>
   142de:	42a5      	cmp	r5, r4
   142e0:	d8e8      	bhi.n	142b4 <__gesf2+0x44>
   142e2:	2000      	movs	r0, #0
   142e4:	42a5      	cmp	r5, r4
   142e6:	d2e8      	bcs.n	142ba <__gesf2+0x4a>
   142e8:	2101      	movs	r1, #1
   142ea:	1e58      	subs	r0, r3, #1
   142ec:	4308      	orrs	r0, r1
   142ee:	e7e4      	b.n	142ba <__gesf2+0x4a>

000142f0 <__lesf2>:
   142f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   142f2:	0042      	lsls	r2, r0, #1
   142f4:	024d      	lsls	r5, r1, #9
   142f6:	004c      	lsls	r4, r1, #1
   142f8:	0246      	lsls	r6, r0, #9
   142fa:	0a76      	lsrs	r6, r6, #9
   142fc:	0e12      	lsrs	r2, r2, #24
   142fe:	0fc3      	lsrs	r3, r0, #31
   14300:	0a6d      	lsrs	r5, r5, #9
   14302:	0e24      	lsrs	r4, r4, #24
   14304:	0fc9      	lsrs	r1, r1, #31
   14306:	2aff      	cmp	r2, #255	; 0xff
   14308:	d016      	beq.n	14338 <__lesf2+0x48>
   1430a:	2cff      	cmp	r4, #255	; 0xff
   1430c:	d018      	beq.n	14340 <__lesf2+0x50>
   1430e:	2a00      	cmp	r2, #0
   14310:	d10a      	bne.n	14328 <__lesf2+0x38>
   14312:	4270      	negs	r0, r6
   14314:	4170      	adcs	r0, r6
   14316:	b2c0      	uxtb	r0, r0
   14318:	2c00      	cmp	r4, #0
   1431a:	d015      	beq.n	14348 <__lesf2+0x58>
   1431c:	2800      	cmp	r0, #0
   1431e:	d005      	beq.n	1432c <__lesf2+0x3c>
   14320:	2001      	movs	r0, #1
   14322:	3901      	subs	r1, #1
   14324:	4308      	orrs	r0, r1
   14326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14328:	2c00      	cmp	r4, #0
   1432a:	d013      	beq.n	14354 <__lesf2+0x64>
   1432c:	4299      	cmp	r1, r3
   1432e:	d014      	beq.n	1435a <__lesf2+0x6a>
   14330:	2001      	movs	r0, #1
   14332:	425b      	negs	r3, r3
   14334:	4318      	orrs	r0, r3
   14336:	e7f6      	b.n	14326 <__lesf2+0x36>
   14338:	2002      	movs	r0, #2
   1433a:	2e00      	cmp	r6, #0
   1433c:	d1f3      	bne.n	14326 <__lesf2+0x36>
   1433e:	e7e4      	b.n	1430a <__lesf2+0x1a>
   14340:	2002      	movs	r0, #2
   14342:	2d00      	cmp	r5, #0
   14344:	d1ef      	bne.n	14326 <__lesf2+0x36>
   14346:	e7e2      	b.n	1430e <__lesf2+0x1e>
   14348:	2d00      	cmp	r5, #0
   1434a:	d1e7      	bne.n	1431c <__lesf2+0x2c>
   1434c:	2000      	movs	r0, #0
   1434e:	2e00      	cmp	r6, #0
   14350:	d0e9      	beq.n	14326 <__lesf2+0x36>
   14352:	e7ed      	b.n	14330 <__lesf2+0x40>
   14354:	2d00      	cmp	r5, #0
   14356:	d1e9      	bne.n	1432c <__lesf2+0x3c>
   14358:	e7ea      	b.n	14330 <__lesf2+0x40>
   1435a:	42a2      	cmp	r2, r4
   1435c:	dc06      	bgt.n	1436c <__lesf2+0x7c>
   1435e:	dbdf      	blt.n	14320 <__lesf2+0x30>
   14360:	42ae      	cmp	r6, r5
   14362:	d803      	bhi.n	1436c <__lesf2+0x7c>
   14364:	2000      	movs	r0, #0
   14366:	42ae      	cmp	r6, r5
   14368:	d3da      	bcc.n	14320 <__lesf2+0x30>
   1436a:	e7dc      	b.n	14326 <__lesf2+0x36>
   1436c:	2001      	movs	r0, #1
   1436e:	4249      	negs	r1, r1
   14370:	4308      	orrs	r0, r1
   14372:	e7d8      	b.n	14326 <__lesf2+0x36>

00014374 <__aeabi_fmul>:
   14374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14376:	4657      	mov	r7, sl
   14378:	464e      	mov	r6, r9
   1437a:	4645      	mov	r5, r8
   1437c:	46de      	mov	lr, fp
   1437e:	b5e0      	push	{r5, r6, r7, lr}
   14380:	0247      	lsls	r7, r0, #9
   14382:	0046      	lsls	r6, r0, #1
   14384:	4688      	mov	r8, r1
   14386:	0a7f      	lsrs	r7, r7, #9
   14388:	0e36      	lsrs	r6, r6, #24
   1438a:	0fc4      	lsrs	r4, r0, #31
   1438c:	2e00      	cmp	r6, #0
   1438e:	d047      	beq.n	14420 <__aeabi_fmul+0xac>
   14390:	2eff      	cmp	r6, #255	; 0xff
   14392:	d024      	beq.n	143de <__aeabi_fmul+0x6a>
   14394:	00fb      	lsls	r3, r7, #3
   14396:	2780      	movs	r7, #128	; 0x80
   14398:	04ff      	lsls	r7, r7, #19
   1439a:	431f      	orrs	r7, r3
   1439c:	2300      	movs	r3, #0
   1439e:	4699      	mov	r9, r3
   143a0:	469a      	mov	sl, r3
   143a2:	3e7f      	subs	r6, #127	; 0x7f
   143a4:	4643      	mov	r3, r8
   143a6:	025d      	lsls	r5, r3, #9
   143a8:	0058      	lsls	r0, r3, #1
   143aa:	0fdb      	lsrs	r3, r3, #31
   143ac:	0a6d      	lsrs	r5, r5, #9
   143ae:	0e00      	lsrs	r0, r0, #24
   143b0:	4698      	mov	r8, r3
   143b2:	d043      	beq.n	1443c <__aeabi_fmul+0xc8>
   143b4:	28ff      	cmp	r0, #255	; 0xff
   143b6:	d03b      	beq.n	14430 <__aeabi_fmul+0xbc>
   143b8:	00eb      	lsls	r3, r5, #3
   143ba:	2580      	movs	r5, #128	; 0x80
   143bc:	2200      	movs	r2, #0
   143be:	04ed      	lsls	r5, r5, #19
   143c0:	431d      	orrs	r5, r3
   143c2:	387f      	subs	r0, #127	; 0x7f
   143c4:	1836      	adds	r6, r6, r0
   143c6:	1c73      	adds	r3, r6, #1
   143c8:	4641      	mov	r1, r8
   143ca:	469b      	mov	fp, r3
   143cc:	464b      	mov	r3, r9
   143ce:	4061      	eors	r1, r4
   143d0:	4313      	orrs	r3, r2
   143d2:	2b0f      	cmp	r3, #15
   143d4:	d864      	bhi.n	144a0 <__aeabi_fmul+0x12c>
   143d6:	4875      	ldr	r0, [pc, #468]	; (145ac <__aeabi_fmul+0x238>)
   143d8:	009b      	lsls	r3, r3, #2
   143da:	58c3      	ldr	r3, [r0, r3]
   143dc:	469f      	mov	pc, r3
   143de:	2f00      	cmp	r7, #0
   143e0:	d142      	bne.n	14468 <__aeabi_fmul+0xf4>
   143e2:	2308      	movs	r3, #8
   143e4:	4699      	mov	r9, r3
   143e6:	3b06      	subs	r3, #6
   143e8:	26ff      	movs	r6, #255	; 0xff
   143ea:	469a      	mov	sl, r3
   143ec:	e7da      	b.n	143a4 <__aeabi_fmul+0x30>
   143ee:	4641      	mov	r1, r8
   143f0:	2a02      	cmp	r2, #2
   143f2:	d028      	beq.n	14446 <__aeabi_fmul+0xd2>
   143f4:	2a03      	cmp	r2, #3
   143f6:	d100      	bne.n	143fa <__aeabi_fmul+0x86>
   143f8:	e0ce      	b.n	14598 <__aeabi_fmul+0x224>
   143fa:	2a01      	cmp	r2, #1
   143fc:	d000      	beq.n	14400 <__aeabi_fmul+0x8c>
   143fe:	e0ac      	b.n	1455a <__aeabi_fmul+0x1e6>
   14400:	4011      	ands	r1, r2
   14402:	2000      	movs	r0, #0
   14404:	2200      	movs	r2, #0
   14406:	b2cc      	uxtb	r4, r1
   14408:	0240      	lsls	r0, r0, #9
   1440a:	05d2      	lsls	r2, r2, #23
   1440c:	0a40      	lsrs	r0, r0, #9
   1440e:	07e4      	lsls	r4, r4, #31
   14410:	4310      	orrs	r0, r2
   14412:	4320      	orrs	r0, r4
   14414:	bc3c      	pop	{r2, r3, r4, r5}
   14416:	4690      	mov	r8, r2
   14418:	4699      	mov	r9, r3
   1441a:	46a2      	mov	sl, r4
   1441c:	46ab      	mov	fp, r5
   1441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14420:	2f00      	cmp	r7, #0
   14422:	d115      	bne.n	14450 <__aeabi_fmul+0xdc>
   14424:	2304      	movs	r3, #4
   14426:	4699      	mov	r9, r3
   14428:	3b03      	subs	r3, #3
   1442a:	2600      	movs	r6, #0
   1442c:	469a      	mov	sl, r3
   1442e:	e7b9      	b.n	143a4 <__aeabi_fmul+0x30>
   14430:	20ff      	movs	r0, #255	; 0xff
   14432:	2202      	movs	r2, #2
   14434:	2d00      	cmp	r5, #0
   14436:	d0c5      	beq.n	143c4 <__aeabi_fmul+0x50>
   14438:	2203      	movs	r2, #3
   1443a:	e7c3      	b.n	143c4 <__aeabi_fmul+0x50>
   1443c:	2d00      	cmp	r5, #0
   1443e:	d119      	bne.n	14474 <__aeabi_fmul+0x100>
   14440:	2000      	movs	r0, #0
   14442:	2201      	movs	r2, #1
   14444:	e7be      	b.n	143c4 <__aeabi_fmul+0x50>
   14446:	2401      	movs	r4, #1
   14448:	22ff      	movs	r2, #255	; 0xff
   1444a:	400c      	ands	r4, r1
   1444c:	2000      	movs	r0, #0
   1444e:	e7db      	b.n	14408 <__aeabi_fmul+0x94>
   14450:	0038      	movs	r0, r7
   14452:	f002 f965 	bl	16720 <__clzsi2>
   14456:	2676      	movs	r6, #118	; 0x76
   14458:	1f43      	subs	r3, r0, #5
   1445a:	409f      	lsls	r7, r3
   1445c:	2300      	movs	r3, #0
   1445e:	4276      	negs	r6, r6
   14460:	1a36      	subs	r6, r6, r0
   14462:	4699      	mov	r9, r3
   14464:	469a      	mov	sl, r3
   14466:	e79d      	b.n	143a4 <__aeabi_fmul+0x30>
   14468:	230c      	movs	r3, #12
   1446a:	4699      	mov	r9, r3
   1446c:	3b09      	subs	r3, #9
   1446e:	26ff      	movs	r6, #255	; 0xff
   14470:	469a      	mov	sl, r3
   14472:	e797      	b.n	143a4 <__aeabi_fmul+0x30>
   14474:	0028      	movs	r0, r5
   14476:	f002 f953 	bl	16720 <__clzsi2>
   1447a:	1f43      	subs	r3, r0, #5
   1447c:	409d      	lsls	r5, r3
   1447e:	2376      	movs	r3, #118	; 0x76
   14480:	425b      	negs	r3, r3
   14482:	1a18      	subs	r0, r3, r0
   14484:	2200      	movs	r2, #0
   14486:	e79d      	b.n	143c4 <__aeabi_fmul+0x50>
   14488:	2080      	movs	r0, #128	; 0x80
   1448a:	2400      	movs	r4, #0
   1448c:	03c0      	lsls	r0, r0, #15
   1448e:	22ff      	movs	r2, #255	; 0xff
   14490:	e7ba      	b.n	14408 <__aeabi_fmul+0x94>
   14492:	003d      	movs	r5, r7
   14494:	4652      	mov	r2, sl
   14496:	e7ab      	b.n	143f0 <__aeabi_fmul+0x7c>
   14498:	003d      	movs	r5, r7
   1449a:	0021      	movs	r1, r4
   1449c:	4652      	mov	r2, sl
   1449e:	e7a7      	b.n	143f0 <__aeabi_fmul+0x7c>
   144a0:	0c3b      	lsrs	r3, r7, #16
   144a2:	469c      	mov	ip, r3
   144a4:	042a      	lsls	r2, r5, #16
   144a6:	0c12      	lsrs	r2, r2, #16
   144a8:	0c2b      	lsrs	r3, r5, #16
   144aa:	0014      	movs	r4, r2
   144ac:	4660      	mov	r0, ip
   144ae:	4665      	mov	r5, ip
   144b0:	043f      	lsls	r7, r7, #16
   144b2:	0c3f      	lsrs	r7, r7, #16
   144b4:	437c      	muls	r4, r7
   144b6:	4342      	muls	r2, r0
   144b8:	435d      	muls	r5, r3
   144ba:	437b      	muls	r3, r7
   144bc:	0c27      	lsrs	r7, r4, #16
   144be:	189b      	adds	r3, r3, r2
   144c0:	18ff      	adds	r7, r7, r3
   144c2:	42ba      	cmp	r2, r7
   144c4:	d903      	bls.n	144ce <__aeabi_fmul+0x15a>
   144c6:	2380      	movs	r3, #128	; 0x80
   144c8:	025b      	lsls	r3, r3, #9
   144ca:	469c      	mov	ip, r3
   144cc:	4465      	add	r5, ip
   144ce:	0424      	lsls	r4, r4, #16
   144d0:	043a      	lsls	r2, r7, #16
   144d2:	0c24      	lsrs	r4, r4, #16
   144d4:	1912      	adds	r2, r2, r4
   144d6:	0193      	lsls	r3, r2, #6
   144d8:	1e5c      	subs	r4, r3, #1
   144da:	41a3      	sbcs	r3, r4
   144dc:	0c3f      	lsrs	r7, r7, #16
   144de:	0e92      	lsrs	r2, r2, #26
   144e0:	197d      	adds	r5, r7, r5
   144e2:	431a      	orrs	r2, r3
   144e4:	01ad      	lsls	r5, r5, #6
   144e6:	4315      	orrs	r5, r2
   144e8:	012b      	lsls	r3, r5, #4
   144ea:	d504      	bpl.n	144f6 <__aeabi_fmul+0x182>
   144ec:	2301      	movs	r3, #1
   144ee:	465e      	mov	r6, fp
   144f0:	086a      	lsrs	r2, r5, #1
   144f2:	401d      	ands	r5, r3
   144f4:	4315      	orrs	r5, r2
   144f6:	0032      	movs	r2, r6
   144f8:	327f      	adds	r2, #127	; 0x7f
   144fa:	2a00      	cmp	r2, #0
   144fc:	dd25      	ble.n	1454a <__aeabi_fmul+0x1d6>
   144fe:	076b      	lsls	r3, r5, #29
   14500:	d004      	beq.n	1450c <__aeabi_fmul+0x198>
   14502:	230f      	movs	r3, #15
   14504:	402b      	ands	r3, r5
   14506:	2b04      	cmp	r3, #4
   14508:	d000      	beq.n	1450c <__aeabi_fmul+0x198>
   1450a:	3504      	adds	r5, #4
   1450c:	012b      	lsls	r3, r5, #4
   1450e:	d503      	bpl.n	14518 <__aeabi_fmul+0x1a4>
   14510:	0032      	movs	r2, r6
   14512:	4b27      	ldr	r3, [pc, #156]	; (145b0 <__aeabi_fmul+0x23c>)
   14514:	3280      	adds	r2, #128	; 0x80
   14516:	401d      	ands	r5, r3
   14518:	2afe      	cmp	r2, #254	; 0xfe
   1451a:	dc94      	bgt.n	14446 <__aeabi_fmul+0xd2>
   1451c:	2401      	movs	r4, #1
   1451e:	01a8      	lsls	r0, r5, #6
   14520:	0a40      	lsrs	r0, r0, #9
   14522:	b2d2      	uxtb	r2, r2
   14524:	400c      	ands	r4, r1
   14526:	e76f      	b.n	14408 <__aeabi_fmul+0x94>
   14528:	2080      	movs	r0, #128	; 0x80
   1452a:	03c0      	lsls	r0, r0, #15
   1452c:	4207      	tst	r7, r0
   1452e:	d007      	beq.n	14540 <__aeabi_fmul+0x1cc>
   14530:	4205      	tst	r5, r0
   14532:	d105      	bne.n	14540 <__aeabi_fmul+0x1cc>
   14534:	4328      	orrs	r0, r5
   14536:	0240      	lsls	r0, r0, #9
   14538:	0a40      	lsrs	r0, r0, #9
   1453a:	4644      	mov	r4, r8
   1453c:	22ff      	movs	r2, #255	; 0xff
   1453e:	e763      	b.n	14408 <__aeabi_fmul+0x94>
   14540:	4338      	orrs	r0, r7
   14542:	0240      	lsls	r0, r0, #9
   14544:	0a40      	lsrs	r0, r0, #9
   14546:	22ff      	movs	r2, #255	; 0xff
   14548:	e75e      	b.n	14408 <__aeabi_fmul+0x94>
   1454a:	2401      	movs	r4, #1
   1454c:	1aa3      	subs	r3, r4, r2
   1454e:	2b1b      	cmp	r3, #27
   14550:	dd05      	ble.n	1455e <__aeabi_fmul+0x1ea>
   14552:	400c      	ands	r4, r1
   14554:	2200      	movs	r2, #0
   14556:	2000      	movs	r0, #0
   14558:	e756      	b.n	14408 <__aeabi_fmul+0x94>
   1455a:	465e      	mov	r6, fp
   1455c:	e7cb      	b.n	144f6 <__aeabi_fmul+0x182>
   1455e:	002a      	movs	r2, r5
   14560:	2020      	movs	r0, #32
   14562:	40da      	lsrs	r2, r3
   14564:	1ac3      	subs	r3, r0, r3
   14566:	409d      	lsls	r5, r3
   14568:	002b      	movs	r3, r5
   1456a:	1e5d      	subs	r5, r3, #1
   1456c:	41ab      	sbcs	r3, r5
   1456e:	4313      	orrs	r3, r2
   14570:	075a      	lsls	r2, r3, #29
   14572:	d004      	beq.n	1457e <__aeabi_fmul+0x20a>
   14574:	220f      	movs	r2, #15
   14576:	401a      	ands	r2, r3
   14578:	2a04      	cmp	r2, #4
   1457a:	d000      	beq.n	1457e <__aeabi_fmul+0x20a>
   1457c:	3304      	adds	r3, #4
   1457e:	015a      	lsls	r2, r3, #5
   14580:	d504      	bpl.n	1458c <__aeabi_fmul+0x218>
   14582:	2401      	movs	r4, #1
   14584:	2201      	movs	r2, #1
   14586:	400c      	ands	r4, r1
   14588:	2000      	movs	r0, #0
   1458a:	e73d      	b.n	14408 <__aeabi_fmul+0x94>
   1458c:	2401      	movs	r4, #1
   1458e:	019b      	lsls	r3, r3, #6
   14590:	0a58      	lsrs	r0, r3, #9
   14592:	400c      	ands	r4, r1
   14594:	2200      	movs	r2, #0
   14596:	e737      	b.n	14408 <__aeabi_fmul+0x94>
   14598:	2080      	movs	r0, #128	; 0x80
   1459a:	2401      	movs	r4, #1
   1459c:	03c0      	lsls	r0, r0, #15
   1459e:	4328      	orrs	r0, r5
   145a0:	0240      	lsls	r0, r0, #9
   145a2:	0a40      	lsrs	r0, r0, #9
   145a4:	400c      	ands	r4, r1
   145a6:	22ff      	movs	r2, #255	; 0xff
   145a8:	e72e      	b.n	14408 <__aeabi_fmul+0x94>
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	00018df4 	.word	0x00018df4
   145b0:	f7ffffff 	.word	0xf7ffffff

000145b4 <__aeabi_fsub>:
   145b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   145b6:	464f      	mov	r7, r9
   145b8:	46d6      	mov	lr, sl
   145ba:	4646      	mov	r6, r8
   145bc:	0044      	lsls	r4, r0, #1
   145be:	b5c0      	push	{r6, r7, lr}
   145c0:	0fc2      	lsrs	r2, r0, #31
   145c2:	0247      	lsls	r7, r0, #9
   145c4:	0248      	lsls	r0, r1, #9
   145c6:	0a40      	lsrs	r0, r0, #9
   145c8:	4684      	mov	ip, r0
   145ca:	4666      	mov	r6, ip
   145cc:	0a7b      	lsrs	r3, r7, #9
   145ce:	0048      	lsls	r0, r1, #1
   145d0:	0fc9      	lsrs	r1, r1, #31
   145d2:	469a      	mov	sl, r3
   145d4:	0e24      	lsrs	r4, r4, #24
   145d6:	0015      	movs	r5, r2
   145d8:	00db      	lsls	r3, r3, #3
   145da:	0e00      	lsrs	r0, r0, #24
   145dc:	4689      	mov	r9, r1
   145de:	00f6      	lsls	r6, r6, #3
   145e0:	28ff      	cmp	r0, #255	; 0xff
   145e2:	d100      	bne.n	145e6 <__aeabi_fsub+0x32>
   145e4:	e08f      	b.n	14706 <__aeabi_fsub+0x152>
   145e6:	2101      	movs	r1, #1
   145e8:	464f      	mov	r7, r9
   145ea:	404f      	eors	r7, r1
   145ec:	0039      	movs	r1, r7
   145ee:	4291      	cmp	r1, r2
   145f0:	d066      	beq.n	146c0 <__aeabi_fsub+0x10c>
   145f2:	1a22      	subs	r2, r4, r0
   145f4:	2a00      	cmp	r2, #0
   145f6:	dc00      	bgt.n	145fa <__aeabi_fsub+0x46>
   145f8:	e09d      	b.n	14736 <__aeabi_fsub+0x182>
   145fa:	2800      	cmp	r0, #0
   145fc:	d13d      	bne.n	1467a <__aeabi_fsub+0xc6>
   145fe:	2e00      	cmp	r6, #0
   14600:	d100      	bne.n	14604 <__aeabi_fsub+0x50>
   14602:	e08b      	b.n	1471c <__aeabi_fsub+0x168>
   14604:	1e51      	subs	r1, r2, #1
   14606:	2900      	cmp	r1, #0
   14608:	d000      	beq.n	1460c <__aeabi_fsub+0x58>
   1460a:	e0b5      	b.n	14778 <__aeabi_fsub+0x1c4>
   1460c:	2401      	movs	r4, #1
   1460e:	1b9b      	subs	r3, r3, r6
   14610:	015a      	lsls	r2, r3, #5
   14612:	d544      	bpl.n	1469e <__aeabi_fsub+0xea>
   14614:	019b      	lsls	r3, r3, #6
   14616:	099f      	lsrs	r7, r3, #6
   14618:	0038      	movs	r0, r7
   1461a:	f002 f881 	bl	16720 <__clzsi2>
   1461e:	3805      	subs	r0, #5
   14620:	4087      	lsls	r7, r0
   14622:	4284      	cmp	r4, r0
   14624:	dd00      	ble.n	14628 <__aeabi_fsub+0x74>
   14626:	e096      	b.n	14756 <__aeabi_fsub+0x1a2>
   14628:	1b04      	subs	r4, r0, r4
   1462a:	003a      	movs	r2, r7
   1462c:	2020      	movs	r0, #32
   1462e:	3401      	adds	r4, #1
   14630:	40e2      	lsrs	r2, r4
   14632:	1b04      	subs	r4, r0, r4
   14634:	40a7      	lsls	r7, r4
   14636:	003b      	movs	r3, r7
   14638:	1e5f      	subs	r7, r3, #1
   1463a:	41bb      	sbcs	r3, r7
   1463c:	2400      	movs	r4, #0
   1463e:	4313      	orrs	r3, r2
   14640:	075a      	lsls	r2, r3, #29
   14642:	d004      	beq.n	1464e <__aeabi_fsub+0x9a>
   14644:	220f      	movs	r2, #15
   14646:	401a      	ands	r2, r3
   14648:	2a04      	cmp	r2, #4
   1464a:	d000      	beq.n	1464e <__aeabi_fsub+0x9a>
   1464c:	3304      	adds	r3, #4
   1464e:	015a      	lsls	r2, r3, #5
   14650:	d527      	bpl.n	146a2 <__aeabi_fsub+0xee>
   14652:	3401      	adds	r4, #1
   14654:	2cff      	cmp	r4, #255	; 0xff
   14656:	d100      	bne.n	1465a <__aeabi_fsub+0xa6>
   14658:	e079      	b.n	1474e <__aeabi_fsub+0x19a>
   1465a:	2201      	movs	r2, #1
   1465c:	019b      	lsls	r3, r3, #6
   1465e:	0a5b      	lsrs	r3, r3, #9
   14660:	b2e4      	uxtb	r4, r4
   14662:	402a      	ands	r2, r5
   14664:	025b      	lsls	r3, r3, #9
   14666:	05e4      	lsls	r4, r4, #23
   14668:	0a58      	lsrs	r0, r3, #9
   1466a:	07d2      	lsls	r2, r2, #31
   1466c:	4320      	orrs	r0, r4
   1466e:	4310      	orrs	r0, r2
   14670:	bc1c      	pop	{r2, r3, r4}
   14672:	4690      	mov	r8, r2
   14674:	4699      	mov	r9, r3
   14676:	46a2      	mov	sl, r4
   14678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1467a:	2cff      	cmp	r4, #255	; 0xff
   1467c:	d0e0      	beq.n	14640 <__aeabi_fsub+0x8c>
   1467e:	2180      	movs	r1, #128	; 0x80
   14680:	04c9      	lsls	r1, r1, #19
   14682:	430e      	orrs	r6, r1
   14684:	2a1b      	cmp	r2, #27
   14686:	dc7b      	bgt.n	14780 <__aeabi_fsub+0x1cc>
   14688:	0031      	movs	r1, r6
   1468a:	2020      	movs	r0, #32
   1468c:	40d1      	lsrs	r1, r2
   1468e:	1a82      	subs	r2, r0, r2
   14690:	4096      	lsls	r6, r2
   14692:	1e72      	subs	r2, r6, #1
   14694:	4196      	sbcs	r6, r2
   14696:	430e      	orrs	r6, r1
   14698:	1b9b      	subs	r3, r3, r6
   1469a:	015a      	lsls	r2, r3, #5
   1469c:	d4ba      	bmi.n	14614 <__aeabi_fsub+0x60>
   1469e:	075a      	lsls	r2, r3, #29
   146a0:	d1d0      	bne.n	14644 <__aeabi_fsub+0x90>
   146a2:	2201      	movs	r2, #1
   146a4:	08df      	lsrs	r7, r3, #3
   146a6:	402a      	ands	r2, r5
   146a8:	2cff      	cmp	r4, #255	; 0xff
   146aa:	d133      	bne.n	14714 <__aeabi_fsub+0x160>
   146ac:	2f00      	cmp	r7, #0
   146ae:	d100      	bne.n	146b2 <__aeabi_fsub+0xfe>
   146b0:	e0a8      	b.n	14804 <__aeabi_fsub+0x250>
   146b2:	2380      	movs	r3, #128	; 0x80
   146b4:	03db      	lsls	r3, r3, #15
   146b6:	433b      	orrs	r3, r7
   146b8:	025b      	lsls	r3, r3, #9
   146ba:	0a5b      	lsrs	r3, r3, #9
   146bc:	24ff      	movs	r4, #255	; 0xff
   146be:	e7d1      	b.n	14664 <__aeabi_fsub+0xb0>
   146c0:	1a21      	subs	r1, r4, r0
   146c2:	2900      	cmp	r1, #0
   146c4:	dd4c      	ble.n	14760 <__aeabi_fsub+0x1ac>
   146c6:	2800      	cmp	r0, #0
   146c8:	d02a      	beq.n	14720 <__aeabi_fsub+0x16c>
   146ca:	2cff      	cmp	r4, #255	; 0xff
   146cc:	d0b8      	beq.n	14640 <__aeabi_fsub+0x8c>
   146ce:	2080      	movs	r0, #128	; 0x80
   146d0:	04c0      	lsls	r0, r0, #19
   146d2:	4306      	orrs	r6, r0
   146d4:	291b      	cmp	r1, #27
   146d6:	dd00      	ble.n	146da <__aeabi_fsub+0x126>
   146d8:	e0af      	b.n	1483a <__aeabi_fsub+0x286>
   146da:	0030      	movs	r0, r6
   146dc:	2720      	movs	r7, #32
   146de:	40c8      	lsrs	r0, r1
   146e0:	1a79      	subs	r1, r7, r1
   146e2:	408e      	lsls	r6, r1
   146e4:	1e71      	subs	r1, r6, #1
   146e6:	418e      	sbcs	r6, r1
   146e8:	4306      	orrs	r6, r0
   146ea:	199b      	adds	r3, r3, r6
   146ec:	0159      	lsls	r1, r3, #5
   146ee:	d5d6      	bpl.n	1469e <__aeabi_fsub+0xea>
   146f0:	3401      	adds	r4, #1
   146f2:	2cff      	cmp	r4, #255	; 0xff
   146f4:	d100      	bne.n	146f8 <__aeabi_fsub+0x144>
   146f6:	e085      	b.n	14804 <__aeabi_fsub+0x250>
   146f8:	2201      	movs	r2, #1
   146fa:	497a      	ldr	r1, [pc, #488]	; (148e4 <__aeabi_fsub+0x330>)
   146fc:	401a      	ands	r2, r3
   146fe:	085b      	lsrs	r3, r3, #1
   14700:	400b      	ands	r3, r1
   14702:	4313      	orrs	r3, r2
   14704:	e79c      	b.n	14640 <__aeabi_fsub+0x8c>
   14706:	2e00      	cmp	r6, #0
   14708:	d000      	beq.n	1470c <__aeabi_fsub+0x158>
   1470a:	e770      	b.n	145ee <__aeabi_fsub+0x3a>
   1470c:	e76b      	b.n	145e6 <__aeabi_fsub+0x32>
   1470e:	1e3b      	subs	r3, r7, #0
   14710:	d1c5      	bne.n	1469e <__aeabi_fsub+0xea>
   14712:	2200      	movs	r2, #0
   14714:	027b      	lsls	r3, r7, #9
   14716:	0a5b      	lsrs	r3, r3, #9
   14718:	b2e4      	uxtb	r4, r4
   1471a:	e7a3      	b.n	14664 <__aeabi_fsub+0xb0>
   1471c:	0014      	movs	r4, r2
   1471e:	e78f      	b.n	14640 <__aeabi_fsub+0x8c>
   14720:	2e00      	cmp	r6, #0
   14722:	d04d      	beq.n	147c0 <__aeabi_fsub+0x20c>
   14724:	1e48      	subs	r0, r1, #1
   14726:	2800      	cmp	r0, #0
   14728:	d157      	bne.n	147da <__aeabi_fsub+0x226>
   1472a:	199b      	adds	r3, r3, r6
   1472c:	2401      	movs	r4, #1
   1472e:	015a      	lsls	r2, r3, #5
   14730:	d5b5      	bpl.n	1469e <__aeabi_fsub+0xea>
   14732:	2402      	movs	r4, #2
   14734:	e7e0      	b.n	146f8 <__aeabi_fsub+0x144>
   14736:	2a00      	cmp	r2, #0
   14738:	d125      	bne.n	14786 <__aeabi_fsub+0x1d2>
   1473a:	1c62      	adds	r2, r4, #1
   1473c:	b2d2      	uxtb	r2, r2
   1473e:	2a01      	cmp	r2, #1
   14740:	dd72      	ble.n	14828 <__aeabi_fsub+0x274>
   14742:	1b9f      	subs	r7, r3, r6
   14744:	017a      	lsls	r2, r7, #5
   14746:	d535      	bpl.n	147b4 <__aeabi_fsub+0x200>
   14748:	1af7      	subs	r7, r6, r3
   1474a:	000d      	movs	r5, r1
   1474c:	e764      	b.n	14618 <__aeabi_fsub+0x64>
   1474e:	2201      	movs	r2, #1
   14750:	2300      	movs	r3, #0
   14752:	402a      	ands	r2, r5
   14754:	e786      	b.n	14664 <__aeabi_fsub+0xb0>
   14756:	003b      	movs	r3, r7
   14758:	4a63      	ldr	r2, [pc, #396]	; (148e8 <__aeabi_fsub+0x334>)
   1475a:	1a24      	subs	r4, r4, r0
   1475c:	4013      	ands	r3, r2
   1475e:	e76f      	b.n	14640 <__aeabi_fsub+0x8c>
   14760:	2900      	cmp	r1, #0
   14762:	d16c      	bne.n	1483e <__aeabi_fsub+0x28a>
   14764:	1c61      	adds	r1, r4, #1
   14766:	b2c8      	uxtb	r0, r1
   14768:	2801      	cmp	r0, #1
   1476a:	dd4e      	ble.n	1480a <__aeabi_fsub+0x256>
   1476c:	29ff      	cmp	r1, #255	; 0xff
   1476e:	d049      	beq.n	14804 <__aeabi_fsub+0x250>
   14770:	199b      	adds	r3, r3, r6
   14772:	085b      	lsrs	r3, r3, #1
   14774:	000c      	movs	r4, r1
   14776:	e763      	b.n	14640 <__aeabi_fsub+0x8c>
   14778:	2aff      	cmp	r2, #255	; 0xff
   1477a:	d041      	beq.n	14800 <__aeabi_fsub+0x24c>
   1477c:	000a      	movs	r2, r1
   1477e:	e781      	b.n	14684 <__aeabi_fsub+0xd0>
   14780:	2601      	movs	r6, #1
   14782:	1b9b      	subs	r3, r3, r6
   14784:	e789      	b.n	1469a <__aeabi_fsub+0xe6>
   14786:	2c00      	cmp	r4, #0
   14788:	d01c      	beq.n	147c4 <__aeabi_fsub+0x210>
   1478a:	28ff      	cmp	r0, #255	; 0xff
   1478c:	d021      	beq.n	147d2 <__aeabi_fsub+0x21e>
   1478e:	2480      	movs	r4, #128	; 0x80
   14790:	04e4      	lsls	r4, r4, #19
   14792:	4252      	negs	r2, r2
   14794:	4323      	orrs	r3, r4
   14796:	2a1b      	cmp	r2, #27
   14798:	dd00      	ble.n	1479c <__aeabi_fsub+0x1e8>
   1479a:	e096      	b.n	148ca <__aeabi_fsub+0x316>
   1479c:	001c      	movs	r4, r3
   1479e:	2520      	movs	r5, #32
   147a0:	40d4      	lsrs	r4, r2
   147a2:	1aaa      	subs	r2, r5, r2
   147a4:	4093      	lsls	r3, r2
   147a6:	1e5a      	subs	r2, r3, #1
   147a8:	4193      	sbcs	r3, r2
   147aa:	4323      	orrs	r3, r4
   147ac:	1af3      	subs	r3, r6, r3
   147ae:	0004      	movs	r4, r0
   147b0:	000d      	movs	r5, r1
   147b2:	e72d      	b.n	14610 <__aeabi_fsub+0x5c>
   147b4:	2f00      	cmp	r7, #0
   147b6:	d000      	beq.n	147ba <__aeabi_fsub+0x206>
   147b8:	e72e      	b.n	14618 <__aeabi_fsub+0x64>
   147ba:	2200      	movs	r2, #0
   147bc:	2400      	movs	r4, #0
   147be:	e7a9      	b.n	14714 <__aeabi_fsub+0x160>
   147c0:	000c      	movs	r4, r1
   147c2:	e73d      	b.n	14640 <__aeabi_fsub+0x8c>
   147c4:	2b00      	cmp	r3, #0
   147c6:	d058      	beq.n	1487a <__aeabi_fsub+0x2c6>
   147c8:	43d2      	mvns	r2, r2
   147ca:	2a00      	cmp	r2, #0
   147cc:	d0ee      	beq.n	147ac <__aeabi_fsub+0x1f8>
   147ce:	28ff      	cmp	r0, #255	; 0xff
   147d0:	d1e1      	bne.n	14796 <__aeabi_fsub+0x1e2>
   147d2:	0033      	movs	r3, r6
   147d4:	24ff      	movs	r4, #255	; 0xff
   147d6:	000d      	movs	r5, r1
   147d8:	e732      	b.n	14640 <__aeabi_fsub+0x8c>
   147da:	29ff      	cmp	r1, #255	; 0xff
   147dc:	d010      	beq.n	14800 <__aeabi_fsub+0x24c>
   147de:	0001      	movs	r1, r0
   147e0:	e778      	b.n	146d4 <__aeabi_fsub+0x120>
   147e2:	2b00      	cmp	r3, #0
   147e4:	d06e      	beq.n	148c4 <__aeabi_fsub+0x310>
   147e6:	24ff      	movs	r4, #255	; 0xff
   147e8:	2e00      	cmp	r6, #0
   147ea:	d100      	bne.n	147ee <__aeabi_fsub+0x23a>
   147ec:	e728      	b.n	14640 <__aeabi_fsub+0x8c>
   147ee:	2280      	movs	r2, #128	; 0x80
   147f0:	4651      	mov	r1, sl
   147f2:	03d2      	lsls	r2, r2, #15
   147f4:	4211      	tst	r1, r2
   147f6:	d003      	beq.n	14800 <__aeabi_fsub+0x24c>
   147f8:	4661      	mov	r1, ip
   147fa:	4211      	tst	r1, r2
   147fc:	d100      	bne.n	14800 <__aeabi_fsub+0x24c>
   147fe:	0033      	movs	r3, r6
   14800:	24ff      	movs	r4, #255	; 0xff
   14802:	e71d      	b.n	14640 <__aeabi_fsub+0x8c>
   14804:	24ff      	movs	r4, #255	; 0xff
   14806:	2300      	movs	r3, #0
   14808:	e72c      	b.n	14664 <__aeabi_fsub+0xb0>
   1480a:	2c00      	cmp	r4, #0
   1480c:	d1e9      	bne.n	147e2 <__aeabi_fsub+0x22e>
   1480e:	2b00      	cmp	r3, #0
   14810:	d063      	beq.n	148da <__aeabi_fsub+0x326>
   14812:	2e00      	cmp	r6, #0
   14814:	d100      	bne.n	14818 <__aeabi_fsub+0x264>
   14816:	e713      	b.n	14640 <__aeabi_fsub+0x8c>
   14818:	199b      	adds	r3, r3, r6
   1481a:	015a      	lsls	r2, r3, #5
   1481c:	d400      	bmi.n	14820 <__aeabi_fsub+0x26c>
   1481e:	e73e      	b.n	1469e <__aeabi_fsub+0xea>
   14820:	4a31      	ldr	r2, [pc, #196]	; (148e8 <__aeabi_fsub+0x334>)
   14822:	000c      	movs	r4, r1
   14824:	4013      	ands	r3, r2
   14826:	e70b      	b.n	14640 <__aeabi_fsub+0x8c>
   14828:	2c00      	cmp	r4, #0
   1482a:	d11e      	bne.n	1486a <__aeabi_fsub+0x2b6>
   1482c:	2b00      	cmp	r3, #0
   1482e:	d12f      	bne.n	14890 <__aeabi_fsub+0x2dc>
   14830:	2e00      	cmp	r6, #0
   14832:	d04f      	beq.n	148d4 <__aeabi_fsub+0x320>
   14834:	0033      	movs	r3, r6
   14836:	000d      	movs	r5, r1
   14838:	e702      	b.n	14640 <__aeabi_fsub+0x8c>
   1483a:	2601      	movs	r6, #1
   1483c:	e755      	b.n	146ea <__aeabi_fsub+0x136>
   1483e:	2c00      	cmp	r4, #0
   14840:	d11f      	bne.n	14882 <__aeabi_fsub+0x2ce>
   14842:	2b00      	cmp	r3, #0
   14844:	d043      	beq.n	148ce <__aeabi_fsub+0x31a>
   14846:	43c9      	mvns	r1, r1
   14848:	2900      	cmp	r1, #0
   1484a:	d00b      	beq.n	14864 <__aeabi_fsub+0x2b0>
   1484c:	28ff      	cmp	r0, #255	; 0xff
   1484e:	d039      	beq.n	148c4 <__aeabi_fsub+0x310>
   14850:	291b      	cmp	r1, #27
   14852:	dc44      	bgt.n	148de <__aeabi_fsub+0x32a>
   14854:	001c      	movs	r4, r3
   14856:	2720      	movs	r7, #32
   14858:	40cc      	lsrs	r4, r1
   1485a:	1a79      	subs	r1, r7, r1
   1485c:	408b      	lsls	r3, r1
   1485e:	1e59      	subs	r1, r3, #1
   14860:	418b      	sbcs	r3, r1
   14862:	4323      	orrs	r3, r4
   14864:	199b      	adds	r3, r3, r6
   14866:	0004      	movs	r4, r0
   14868:	e740      	b.n	146ec <__aeabi_fsub+0x138>
   1486a:	2b00      	cmp	r3, #0
   1486c:	d11a      	bne.n	148a4 <__aeabi_fsub+0x2f0>
   1486e:	2e00      	cmp	r6, #0
   14870:	d124      	bne.n	148bc <__aeabi_fsub+0x308>
   14872:	2780      	movs	r7, #128	; 0x80
   14874:	2200      	movs	r2, #0
   14876:	03ff      	lsls	r7, r7, #15
   14878:	e71b      	b.n	146b2 <__aeabi_fsub+0xfe>
   1487a:	0033      	movs	r3, r6
   1487c:	0004      	movs	r4, r0
   1487e:	000d      	movs	r5, r1
   14880:	e6de      	b.n	14640 <__aeabi_fsub+0x8c>
   14882:	28ff      	cmp	r0, #255	; 0xff
   14884:	d01e      	beq.n	148c4 <__aeabi_fsub+0x310>
   14886:	2480      	movs	r4, #128	; 0x80
   14888:	04e4      	lsls	r4, r4, #19
   1488a:	4249      	negs	r1, r1
   1488c:	4323      	orrs	r3, r4
   1488e:	e7df      	b.n	14850 <__aeabi_fsub+0x29c>
   14890:	2e00      	cmp	r6, #0
   14892:	d100      	bne.n	14896 <__aeabi_fsub+0x2e2>
   14894:	e6d4      	b.n	14640 <__aeabi_fsub+0x8c>
   14896:	1b9f      	subs	r7, r3, r6
   14898:	017a      	lsls	r2, r7, #5
   1489a:	d400      	bmi.n	1489e <__aeabi_fsub+0x2ea>
   1489c:	e737      	b.n	1470e <__aeabi_fsub+0x15a>
   1489e:	1af3      	subs	r3, r6, r3
   148a0:	000d      	movs	r5, r1
   148a2:	e6cd      	b.n	14640 <__aeabi_fsub+0x8c>
   148a4:	24ff      	movs	r4, #255	; 0xff
   148a6:	2e00      	cmp	r6, #0
   148a8:	d100      	bne.n	148ac <__aeabi_fsub+0x2f8>
   148aa:	e6c9      	b.n	14640 <__aeabi_fsub+0x8c>
   148ac:	2280      	movs	r2, #128	; 0x80
   148ae:	4650      	mov	r0, sl
   148b0:	03d2      	lsls	r2, r2, #15
   148b2:	4210      	tst	r0, r2
   148b4:	d0a4      	beq.n	14800 <__aeabi_fsub+0x24c>
   148b6:	4660      	mov	r0, ip
   148b8:	4210      	tst	r0, r2
   148ba:	d1a1      	bne.n	14800 <__aeabi_fsub+0x24c>
   148bc:	0033      	movs	r3, r6
   148be:	000d      	movs	r5, r1
   148c0:	24ff      	movs	r4, #255	; 0xff
   148c2:	e6bd      	b.n	14640 <__aeabi_fsub+0x8c>
   148c4:	0033      	movs	r3, r6
   148c6:	24ff      	movs	r4, #255	; 0xff
   148c8:	e6ba      	b.n	14640 <__aeabi_fsub+0x8c>
   148ca:	2301      	movs	r3, #1
   148cc:	e76e      	b.n	147ac <__aeabi_fsub+0x1f8>
   148ce:	0033      	movs	r3, r6
   148d0:	0004      	movs	r4, r0
   148d2:	e6b5      	b.n	14640 <__aeabi_fsub+0x8c>
   148d4:	2700      	movs	r7, #0
   148d6:	2200      	movs	r2, #0
   148d8:	e71c      	b.n	14714 <__aeabi_fsub+0x160>
   148da:	0033      	movs	r3, r6
   148dc:	e6b0      	b.n	14640 <__aeabi_fsub+0x8c>
   148de:	2301      	movs	r3, #1
   148e0:	e7c0      	b.n	14864 <__aeabi_fsub+0x2b0>
   148e2:	46c0      	nop			; (mov r8, r8)
   148e4:	7dffffff 	.word	0x7dffffff
   148e8:	fbffffff 	.word	0xfbffffff

000148ec <__aeabi_f2iz>:
   148ec:	0241      	lsls	r1, r0, #9
   148ee:	0043      	lsls	r3, r0, #1
   148f0:	0fc2      	lsrs	r2, r0, #31
   148f2:	0a49      	lsrs	r1, r1, #9
   148f4:	0e1b      	lsrs	r3, r3, #24
   148f6:	2000      	movs	r0, #0
   148f8:	2b7e      	cmp	r3, #126	; 0x7e
   148fa:	dd0d      	ble.n	14918 <__aeabi_f2iz+0x2c>
   148fc:	2b9d      	cmp	r3, #157	; 0x9d
   148fe:	dc0c      	bgt.n	1491a <__aeabi_f2iz+0x2e>
   14900:	2080      	movs	r0, #128	; 0x80
   14902:	0400      	lsls	r0, r0, #16
   14904:	4301      	orrs	r1, r0
   14906:	2b95      	cmp	r3, #149	; 0x95
   14908:	dc0a      	bgt.n	14920 <__aeabi_f2iz+0x34>
   1490a:	2096      	movs	r0, #150	; 0x96
   1490c:	1ac3      	subs	r3, r0, r3
   1490e:	40d9      	lsrs	r1, r3
   14910:	4248      	negs	r0, r1
   14912:	2a00      	cmp	r2, #0
   14914:	d100      	bne.n	14918 <__aeabi_f2iz+0x2c>
   14916:	0008      	movs	r0, r1
   14918:	4770      	bx	lr
   1491a:	4b03      	ldr	r3, [pc, #12]	; (14928 <__aeabi_f2iz+0x3c>)
   1491c:	18d0      	adds	r0, r2, r3
   1491e:	e7fb      	b.n	14918 <__aeabi_f2iz+0x2c>
   14920:	3b96      	subs	r3, #150	; 0x96
   14922:	4099      	lsls	r1, r3
   14924:	e7f4      	b.n	14910 <__aeabi_f2iz+0x24>
   14926:	46c0      	nop			; (mov r8, r8)
   14928:	7fffffff 	.word	0x7fffffff

0001492c <__aeabi_i2f>:
   1492c:	b570      	push	{r4, r5, r6, lr}
   1492e:	2800      	cmp	r0, #0
   14930:	d030      	beq.n	14994 <__aeabi_i2f+0x68>
   14932:	17c3      	asrs	r3, r0, #31
   14934:	18c4      	adds	r4, r0, r3
   14936:	405c      	eors	r4, r3
   14938:	0fc5      	lsrs	r5, r0, #31
   1493a:	0020      	movs	r0, r4
   1493c:	f001 fef0 	bl	16720 <__clzsi2>
   14940:	239e      	movs	r3, #158	; 0x9e
   14942:	1a1b      	subs	r3, r3, r0
   14944:	2b96      	cmp	r3, #150	; 0x96
   14946:	dc0d      	bgt.n	14964 <__aeabi_i2f+0x38>
   14948:	2296      	movs	r2, #150	; 0x96
   1494a:	1ad2      	subs	r2, r2, r3
   1494c:	4094      	lsls	r4, r2
   1494e:	002a      	movs	r2, r5
   14950:	0264      	lsls	r4, r4, #9
   14952:	0a64      	lsrs	r4, r4, #9
   14954:	b2db      	uxtb	r3, r3
   14956:	0264      	lsls	r4, r4, #9
   14958:	05db      	lsls	r3, r3, #23
   1495a:	0a60      	lsrs	r0, r4, #9
   1495c:	07d2      	lsls	r2, r2, #31
   1495e:	4318      	orrs	r0, r3
   14960:	4310      	orrs	r0, r2
   14962:	bd70      	pop	{r4, r5, r6, pc}
   14964:	2b99      	cmp	r3, #153	; 0x99
   14966:	dc19      	bgt.n	1499c <__aeabi_i2f+0x70>
   14968:	2299      	movs	r2, #153	; 0x99
   1496a:	1ad2      	subs	r2, r2, r3
   1496c:	2a00      	cmp	r2, #0
   1496e:	dd29      	ble.n	149c4 <__aeabi_i2f+0x98>
   14970:	4094      	lsls	r4, r2
   14972:	0022      	movs	r2, r4
   14974:	4c14      	ldr	r4, [pc, #80]	; (149c8 <__aeabi_i2f+0x9c>)
   14976:	4014      	ands	r4, r2
   14978:	0751      	lsls	r1, r2, #29
   1497a:	d004      	beq.n	14986 <__aeabi_i2f+0x5a>
   1497c:	210f      	movs	r1, #15
   1497e:	400a      	ands	r2, r1
   14980:	2a04      	cmp	r2, #4
   14982:	d000      	beq.n	14986 <__aeabi_i2f+0x5a>
   14984:	3404      	adds	r4, #4
   14986:	0162      	lsls	r2, r4, #5
   14988:	d413      	bmi.n	149b2 <__aeabi_i2f+0x86>
   1498a:	01a4      	lsls	r4, r4, #6
   1498c:	0a64      	lsrs	r4, r4, #9
   1498e:	b2db      	uxtb	r3, r3
   14990:	002a      	movs	r2, r5
   14992:	e7e0      	b.n	14956 <__aeabi_i2f+0x2a>
   14994:	2200      	movs	r2, #0
   14996:	2300      	movs	r3, #0
   14998:	2400      	movs	r4, #0
   1499a:	e7dc      	b.n	14956 <__aeabi_i2f+0x2a>
   1499c:	2205      	movs	r2, #5
   1499e:	0021      	movs	r1, r4
   149a0:	1a12      	subs	r2, r2, r0
   149a2:	40d1      	lsrs	r1, r2
   149a4:	22b9      	movs	r2, #185	; 0xb9
   149a6:	1ad2      	subs	r2, r2, r3
   149a8:	4094      	lsls	r4, r2
   149aa:	1e62      	subs	r2, r4, #1
   149ac:	4194      	sbcs	r4, r2
   149ae:	430c      	orrs	r4, r1
   149b0:	e7da      	b.n	14968 <__aeabi_i2f+0x3c>
   149b2:	4b05      	ldr	r3, [pc, #20]	; (149c8 <__aeabi_i2f+0x9c>)
   149b4:	002a      	movs	r2, r5
   149b6:	401c      	ands	r4, r3
   149b8:	239f      	movs	r3, #159	; 0x9f
   149ba:	01a4      	lsls	r4, r4, #6
   149bc:	1a1b      	subs	r3, r3, r0
   149be:	0a64      	lsrs	r4, r4, #9
   149c0:	b2db      	uxtb	r3, r3
   149c2:	e7c8      	b.n	14956 <__aeabi_i2f+0x2a>
   149c4:	0022      	movs	r2, r4
   149c6:	e7d5      	b.n	14974 <__aeabi_i2f+0x48>
   149c8:	fbffffff 	.word	0xfbffffff

000149cc <__aeabi_ui2f>:
   149cc:	b510      	push	{r4, lr}
   149ce:	1e04      	subs	r4, r0, #0
   149d0:	d027      	beq.n	14a22 <__aeabi_ui2f+0x56>
   149d2:	f001 fea5 	bl	16720 <__clzsi2>
   149d6:	239e      	movs	r3, #158	; 0x9e
   149d8:	1a1b      	subs	r3, r3, r0
   149da:	2b96      	cmp	r3, #150	; 0x96
   149dc:	dc0a      	bgt.n	149f4 <__aeabi_ui2f+0x28>
   149de:	2296      	movs	r2, #150	; 0x96
   149e0:	1ad2      	subs	r2, r2, r3
   149e2:	4094      	lsls	r4, r2
   149e4:	0264      	lsls	r4, r4, #9
   149e6:	0a64      	lsrs	r4, r4, #9
   149e8:	b2db      	uxtb	r3, r3
   149ea:	0264      	lsls	r4, r4, #9
   149ec:	05db      	lsls	r3, r3, #23
   149ee:	0a60      	lsrs	r0, r4, #9
   149f0:	4318      	orrs	r0, r3
   149f2:	bd10      	pop	{r4, pc}
   149f4:	2b99      	cmp	r3, #153	; 0x99
   149f6:	dc17      	bgt.n	14a28 <__aeabi_ui2f+0x5c>
   149f8:	2299      	movs	r2, #153	; 0x99
   149fa:	1ad2      	subs	r2, r2, r3
   149fc:	2a00      	cmp	r2, #0
   149fe:	dd27      	ble.n	14a50 <__aeabi_ui2f+0x84>
   14a00:	4094      	lsls	r4, r2
   14a02:	0022      	movs	r2, r4
   14a04:	4c13      	ldr	r4, [pc, #76]	; (14a54 <__aeabi_ui2f+0x88>)
   14a06:	4014      	ands	r4, r2
   14a08:	0751      	lsls	r1, r2, #29
   14a0a:	d004      	beq.n	14a16 <__aeabi_ui2f+0x4a>
   14a0c:	210f      	movs	r1, #15
   14a0e:	400a      	ands	r2, r1
   14a10:	2a04      	cmp	r2, #4
   14a12:	d000      	beq.n	14a16 <__aeabi_ui2f+0x4a>
   14a14:	3404      	adds	r4, #4
   14a16:	0162      	lsls	r2, r4, #5
   14a18:	d412      	bmi.n	14a40 <__aeabi_ui2f+0x74>
   14a1a:	01a4      	lsls	r4, r4, #6
   14a1c:	0a64      	lsrs	r4, r4, #9
   14a1e:	b2db      	uxtb	r3, r3
   14a20:	e7e3      	b.n	149ea <__aeabi_ui2f+0x1e>
   14a22:	2300      	movs	r3, #0
   14a24:	2400      	movs	r4, #0
   14a26:	e7e0      	b.n	149ea <__aeabi_ui2f+0x1e>
   14a28:	22b9      	movs	r2, #185	; 0xb9
   14a2a:	0021      	movs	r1, r4
   14a2c:	1ad2      	subs	r2, r2, r3
   14a2e:	4091      	lsls	r1, r2
   14a30:	000a      	movs	r2, r1
   14a32:	1e51      	subs	r1, r2, #1
   14a34:	418a      	sbcs	r2, r1
   14a36:	2105      	movs	r1, #5
   14a38:	1a09      	subs	r1, r1, r0
   14a3a:	40cc      	lsrs	r4, r1
   14a3c:	4314      	orrs	r4, r2
   14a3e:	e7db      	b.n	149f8 <__aeabi_ui2f+0x2c>
   14a40:	4b04      	ldr	r3, [pc, #16]	; (14a54 <__aeabi_ui2f+0x88>)
   14a42:	401c      	ands	r4, r3
   14a44:	239f      	movs	r3, #159	; 0x9f
   14a46:	01a4      	lsls	r4, r4, #6
   14a48:	1a1b      	subs	r3, r3, r0
   14a4a:	0a64      	lsrs	r4, r4, #9
   14a4c:	b2db      	uxtb	r3, r3
   14a4e:	e7cc      	b.n	149ea <__aeabi_ui2f+0x1e>
   14a50:	0022      	movs	r2, r4
   14a52:	e7d7      	b.n	14a04 <__aeabi_ui2f+0x38>
   14a54:	fbffffff 	.word	0xfbffffff

00014a58 <__aeabi_dadd>:
   14a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a5a:	4645      	mov	r5, r8
   14a5c:	46de      	mov	lr, fp
   14a5e:	4657      	mov	r7, sl
   14a60:	464e      	mov	r6, r9
   14a62:	030c      	lsls	r4, r1, #12
   14a64:	b5e0      	push	{r5, r6, r7, lr}
   14a66:	004e      	lsls	r6, r1, #1
   14a68:	0fc9      	lsrs	r1, r1, #31
   14a6a:	4688      	mov	r8, r1
   14a6c:	000d      	movs	r5, r1
   14a6e:	0a61      	lsrs	r1, r4, #9
   14a70:	0f44      	lsrs	r4, r0, #29
   14a72:	430c      	orrs	r4, r1
   14a74:	00c7      	lsls	r7, r0, #3
   14a76:	0319      	lsls	r1, r3, #12
   14a78:	0058      	lsls	r0, r3, #1
   14a7a:	0fdb      	lsrs	r3, r3, #31
   14a7c:	469b      	mov	fp, r3
   14a7e:	0a4b      	lsrs	r3, r1, #9
   14a80:	0f51      	lsrs	r1, r2, #29
   14a82:	430b      	orrs	r3, r1
   14a84:	0d76      	lsrs	r6, r6, #21
   14a86:	0d40      	lsrs	r0, r0, #21
   14a88:	0019      	movs	r1, r3
   14a8a:	00d2      	lsls	r2, r2, #3
   14a8c:	45d8      	cmp	r8, fp
   14a8e:	d100      	bne.n	14a92 <__aeabi_dadd+0x3a>
   14a90:	e0ae      	b.n	14bf0 <__aeabi_dadd+0x198>
   14a92:	1a35      	subs	r5, r6, r0
   14a94:	2d00      	cmp	r5, #0
   14a96:	dc00      	bgt.n	14a9a <__aeabi_dadd+0x42>
   14a98:	e0f6      	b.n	14c88 <__aeabi_dadd+0x230>
   14a9a:	2800      	cmp	r0, #0
   14a9c:	d10f      	bne.n	14abe <__aeabi_dadd+0x66>
   14a9e:	4313      	orrs	r3, r2
   14aa0:	d100      	bne.n	14aa4 <__aeabi_dadd+0x4c>
   14aa2:	e0db      	b.n	14c5c <__aeabi_dadd+0x204>
   14aa4:	1e6b      	subs	r3, r5, #1
   14aa6:	2b00      	cmp	r3, #0
   14aa8:	d000      	beq.n	14aac <__aeabi_dadd+0x54>
   14aaa:	e137      	b.n	14d1c <__aeabi_dadd+0x2c4>
   14aac:	1aba      	subs	r2, r7, r2
   14aae:	4297      	cmp	r7, r2
   14ab0:	41bf      	sbcs	r7, r7
   14ab2:	1a64      	subs	r4, r4, r1
   14ab4:	427f      	negs	r7, r7
   14ab6:	1be4      	subs	r4, r4, r7
   14ab8:	2601      	movs	r6, #1
   14aba:	0017      	movs	r7, r2
   14abc:	e024      	b.n	14b08 <__aeabi_dadd+0xb0>
   14abe:	4bc6      	ldr	r3, [pc, #792]	; (14dd8 <__aeabi_dadd+0x380>)
   14ac0:	429e      	cmp	r6, r3
   14ac2:	d04d      	beq.n	14b60 <__aeabi_dadd+0x108>
   14ac4:	2380      	movs	r3, #128	; 0x80
   14ac6:	041b      	lsls	r3, r3, #16
   14ac8:	4319      	orrs	r1, r3
   14aca:	2d38      	cmp	r5, #56	; 0x38
   14acc:	dd00      	ble.n	14ad0 <__aeabi_dadd+0x78>
   14ace:	e107      	b.n	14ce0 <__aeabi_dadd+0x288>
   14ad0:	2d1f      	cmp	r5, #31
   14ad2:	dd00      	ble.n	14ad6 <__aeabi_dadd+0x7e>
   14ad4:	e138      	b.n	14d48 <__aeabi_dadd+0x2f0>
   14ad6:	2020      	movs	r0, #32
   14ad8:	1b43      	subs	r3, r0, r5
   14ada:	469a      	mov	sl, r3
   14adc:	000b      	movs	r3, r1
   14ade:	4650      	mov	r0, sl
   14ae0:	4083      	lsls	r3, r0
   14ae2:	4699      	mov	r9, r3
   14ae4:	0013      	movs	r3, r2
   14ae6:	4648      	mov	r0, r9
   14ae8:	40eb      	lsrs	r3, r5
   14aea:	4318      	orrs	r0, r3
   14aec:	0003      	movs	r3, r0
   14aee:	4650      	mov	r0, sl
   14af0:	4082      	lsls	r2, r0
   14af2:	1e50      	subs	r0, r2, #1
   14af4:	4182      	sbcs	r2, r0
   14af6:	40e9      	lsrs	r1, r5
   14af8:	431a      	orrs	r2, r3
   14afa:	1aba      	subs	r2, r7, r2
   14afc:	1a61      	subs	r1, r4, r1
   14afe:	4297      	cmp	r7, r2
   14b00:	41a4      	sbcs	r4, r4
   14b02:	0017      	movs	r7, r2
   14b04:	4264      	negs	r4, r4
   14b06:	1b0c      	subs	r4, r1, r4
   14b08:	0223      	lsls	r3, r4, #8
   14b0a:	d562      	bpl.n	14bd2 <__aeabi_dadd+0x17a>
   14b0c:	0264      	lsls	r4, r4, #9
   14b0e:	0a65      	lsrs	r5, r4, #9
   14b10:	2d00      	cmp	r5, #0
   14b12:	d100      	bne.n	14b16 <__aeabi_dadd+0xbe>
   14b14:	e0df      	b.n	14cd6 <__aeabi_dadd+0x27e>
   14b16:	0028      	movs	r0, r5
   14b18:	f001 fe02 	bl	16720 <__clzsi2>
   14b1c:	0003      	movs	r3, r0
   14b1e:	3b08      	subs	r3, #8
   14b20:	2b1f      	cmp	r3, #31
   14b22:	dd00      	ble.n	14b26 <__aeabi_dadd+0xce>
   14b24:	e0d2      	b.n	14ccc <__aeabi_dadd+0x274>
   14b26:	2220      	movs	r2, #32
   14b28:	003c      	movs	r4, r7
   14b2a:	1ad2      	subs	r2, r2, r3
   14b2c:	409d      	lsls	r5, r3
   14b2e:	40d4      	lsrs	r4, r2
   14b30:	409f      	lsls	r7, r3
   14b32:	4325      	orrs	r5, r4
   14b34:	429e      	cmp	r6, r3
   14b36:	dd00      	ble.n	14b3a <__aeabi_dadd+0xe2>
   14b38:	e0c4      	b.n	14cc4 <__aeabi_dadd+0x26c>
   14b3a:	1b9e      	subs	r6, r3, r6
   14b3c:	1c73      	adds	r3, r6, #1
   14b3e:	2b1f      	cmp	r3, #31
   14b40:	dd00      	ble.n	14b44 <__aeabi_dadd+0xec>
   14b42:	e0f1      	b.n	14d28 <__aeabi_dadd+0x2d0>
   14b44:	2220      	movs	r2, #32
   14b46:	0038      	movs	r0, r7
   14b48:	0029      	movs	r1, r5
   14b4a:	1ad2      	subs	r2, r2, r3
   14b4c:	40d8      	lsrs	r0, r3
   14b4e:	4091      	lsls	r1, r2
   14b50:	4097      	lsls	r7, r2
   14b52:	002c      	movs	r4, r5
   14b54:	4301      	orrs	r1, r0
   14b56:	1e78      	subs	r0, r7, #1
   14b58:	4187      	sbcs	r7, r0
   14b5a:	40dc      	lsrs	r4, r3
   14b5c:	2600      	movs	r6, #0
   14b5e:	430f      	orrs	r7, r1
   14b60:	077b      	lsls	r3, r7, #29
   14b62:	d009      	beq.n	14b78 <__aeabi_dadd+0x120>
   14b64:	230f      	movs	r3, #15
   14b66:	403b      	ands	r3, r7
   14b68:	2b04      	cmp	r3, #4
   14b6a:	d005      	beq.n	14b78 <__aeabi_dadd+0x120>
   14b6c:	1d3b      	adds	r3, r7, #4
   14b6e:	42bb      	cmp	r3, r7
   14b70:	41bf      	sbcs	r7, r7
   14b72:	427f      	negs	r7, r7
   14b74:	19e4      	adds	r4, r4, r7
   14b76:	001f      	movs	r7, r3
   14b78:	0223      	lsls	r3, r4, #8
   14b7a:	d52c      	bpl.n	14bd6 <__aeabi_dadd+0x17e>
   14b7c:	4b96      	ldr	r3, [pc, #600]	; (14dd8 <__aeabi_dadd+0x380>)
   14b7e:	3601      	adds	r6, #1
   14b80:	429e      	cmp	r6, r3
   14b82:	d100      	bne.n	14b86 <__aeabi_dadd+0x12e>
   14b84:	e09a      	b.n	14cbc <__aeabi_dadd+0x264>
   14b86:	4645      	mov	r5, r8
   14b88:	4b94      	ldr	r3, [pc, #592]	; (14ddc <__aeabi_dadd+0x384>)
   14b8a:	08ff      	lsrs	r7, r7, #3
   14b8c:	401c      	ands	r4, r3
   14b8e:	0760      	lsls	r0, r4, #29
   14b90:	0576      	lsls	r6, r6, #21
   14b92:	0264      	lsls	r4, r4, #9
   14b94:	4307      	orrs	r7, r0
   14b96:	0b24      	lsrs	r4, r4, #12
   14b98:	0d76      	lsrs	r6, r6, #21
   14b9a:	2100      	movs	r1, #0
   14b9c:	0324      	lsls	r4, r4, #12
   14b9e:	0b23      	lsrs	r3, r4, #12
   14ba0:	0d0c      	lsrs	r4, r1, #20
   14ba2:	4a8f      	ldr	r2, [pc, #572]	; (14de0 <__aeabi_dadd+0x388>)
   14ba4:	0524      	lsls	r4, r4, #20
   14ba6:	431c      	orrs	r4, r3
   14ba8:	4014      	ands	r4, r2
   14baa:	0533      	lsls	r3, r6, #20
   14bac:	4323      	orrs	r3, r4
   14bae:	005b      	lsls	r3, r3, #1
   14bb0:	07ed      	lsls	r5, r5, #31
   14bb2:	085b      	lsrs	r3, r3, #1
   14bb4:	432b      	orrs	r3, r5
   14bb6:	0038      	movs	r0, r7
   14bb8:	0019      	movs	r1, r3
   14bba:	bc3c      	pop	{r2, r3, r4, r5}
   14bbc:	4690      	mov	r8, r2
   14bbe:	4699      	mov	r9, r3
   14bc0:	46a2      	mov	sl, r4
   14bc2:	46ab      	mov	fp, r5
   14bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14bc6:	4664      	mov	r4, ip
   14bc8:	4304      	orrs	r4, r0
   14bca:	d100      	bne.n	14bce <__aeabi_dadd+0x176>
   14bcc:	e211      	b.n	14ff2 <__aeabi_dadd+0x59a>
   14bce:	0004      	movs	r4, r0
   14bd0:	4667      	mov	r7, ip
   14bd2:	077b      	lsls	r3, r7, #29
   14bd4:	d1c6      	bne.n	14b64 <__aeabi_dadd+0x10c>
   14bd6:	4645      	mov	r5, r8
   14bd8:	0760      	lsls	r0, r4, #29
   14bda:	08ff      	lsrs	r7, r7, #3
   14bdc:	4307      	orrs	r7, r0
   14bde:	08e4      	lsrs	r4, r4, #3
   14be0:	4b7d      	ldr	r3, [pc, #500]	; (14dd8 <__aeabi_dadd+0x380>)
   14be2:	429e      	cmp	r6, r3
   14be4:	d030      	beq.n	14c48 <__aeabi_dadd+0x1f0>
   14be6:	0324      	lsls	r4, r4, #12
   14be8:	0576      	lsls	r6, r6, #21
   14bea:	0b24      	lsrs	r4, r4, #12
   14bec:	0d76      	lsrs	r6, r6, #21
   14bee:	e7d4      	b.n	14b9a <__aeabi_dadd+0x142>
   14bf0:	1a33      	subs	r3, r6, r0
   14bf2:	469a      	mov	sl, r3
   14bf4:	2b00      	cmp	r3, #0
   14bf6:	dd78      	ble.n	14cea <__aeabi_dadd+0x292>
   14bf8:	2800      	cmp	r0, #0
   14bfa:	d031      	beq.n	14c60 <__aeabi_dadd+0x208>
   14bfc:	4876      	ldr	r0, [pc, #472]	; (14dd8 <__aeabi_dadd+0x380>)
   14bfe:	4286      	cmp	r6, r0
   14c00:	d0ae      	beq.n	14b60 <__aeabi_dadd+0x108>
   14c02:	2080      	movs	r0, #128	; 0x80
   14c04:	0400      	lsls	r0, r0, #16
   14c06:	4301      	orrs	r1, r0
   14c08:	4653      	mov	r3, sl
   14c0a:	2b38      	cmp	r3, #56	; 0x38
   14c0c:	dc00      	bgt.n	14c10 <__aeabi_dadd+0x1b8>
   14c0e:	e0e9      	b.n	14de4 <__aeabi_dadd+0x38c>
   14c10:	430a      	orrs	r2, r1
   14c12:	1e51      	subs	r1, r2, #1
   14c14:	418a      	sbcs	r2, r1
   14c16:	2100      	movs	r1, #0
   14c18:	19d2      	adds	r2, r2, r7
   14c1a:	42ba      	cmp	r2, r7
   14c1c:	41bf      	sbcs	r7, r7
   14c1e:	1909      	adds	r1, r1, r4
   14c20:	427c      	negs	r4, r7
   14c22:	0017      	movs	r7, r2
   14c24:	190c      	adds	r4, r1, r4
   14c26:	0223      	lsls	r3, r4, #8
   14c28:	d5d3      	bpl.n	14bd2 <__aeabi_dadd+0x17a>
   14c2a:	4b6b      	ldr	r3, [pc, #428]	; (14dd8 <__aeabi_dadd+0x380>)
   14c2c:	3601      	adds	r6, #1
   14c2e:	429e      	cmp	r6, r3
   14c30:	d100      	bne.n	14c34 <__aeabi_dadd+0x1dc>
   14c32:	e13a      	b.n	14eaa <__aeabi_dadd+0x452>
   14c34:	2001      	movs	r0, #1
   14c36:	4b69      	ldr	r3, [pc, #420]	; (14ddc <__aeabi_dadd+0x384>)
   14c38:	401c      	ands	r4, r3
   14c3a:	087b      	lsrs	r3, r7, #1
   14c3c:	4007      	ands	r7, r0
   14c3e:	431f      	orrs	r7, r3
   14c40:	07e0      	lsls	r0, r4, #31
   14c42:	4307      	orrs	r7, r0
   14c44:	0864      	lsrs	r4, r4, #1
   14c46:	e78b      	b.n	14b60 <__aeabi_dadd+0x108>
   14c48:	0023      	movs	r3, r4
   14c4a:	433b      	orrs	r3, r7
   14c4c:	d100      	bne.n	14c50 <__aeabi_dadd+0x1f8>
   14c4e:	e1cb      	b.n	14fe8 <__aeabi_dadd+0x590>
   14c50:	2280      	movs	r2, #128	; 0x80
   14c52:	0312      	lsls	r2, r2, #12
   14c54:	4314      	orrs	r4, r2
   14c56:	0324      	lsls	r4, r4, #12
   14c58:	0b24      	lsrs	r4, r4, #12
   14c5a:	e79e      	b.n	14b9a <__aeabi_dadd+0x142>
   14c5c:	002e      	movs	r6, r5
   14c5e:	e77f      	b.n	14b60 <__aeabi_dadd+0x108>
   14c60:	0008      	movs	r0, r1
   14c62:	4310      	orrs	r0, r2
   14c64:	d100      	bne.n	14c68 <__aeabi_dadd+0x210>
   14c66:	e0b4      	b.n	14dd2 <__aeabi_dadd+0x37a>
   14c68:	1e58      	subs	r0, r3, #1
   14c6a:	2800      	cmp	r0, #0
   14c6c:	d000      	beq.n	14c70 <__aeabi_dadd+0x218>
   14c6e:	e0de      	b.n	14e2e <__aeabi_dadd+0x3d6>
   14c70:	18ba      	adds	r2, r7, r2
   14c72:	42ba      	cmp	r2, r7
   14c74:	419b      	sbcs	r3, r3
   14c76:	1864      	adds	r4, r4, r1
   14c78:	425b      	negs	r3, r3
   14c7a:	18e4      	adds	r4, r4, r3
   14c7c:	0017      	movs	r7, r2
   14c7e:	2601      	movs	r6, #1
   14c80:	0223      	lsls	r3, r4, #8
   14c82:	d5a6      	bpl.n	14bd2 <__aeabi_dadd+0x17a>
   14c84:	2602      	movs	r6, #2
   14c86:	e7d5      	b.n	14c34 <__aeabi_dadd+0x1dc>
   14c88:	2d00      	cmp	r5, #0
   14c8a:	d16e      	bne.n	14d6a <__aeabi_dadd+0x312>
   14c8c:	1c70      	adds	r0, r6, #1
   14c8e:	0540      	lsls	r0, r0, #21
   14c90:	0d40      	lsrs	r0, r0, #21
   14c92:	2801      	cmp	r0, #1
   14c94:	dc00      	bgt.n	14c98 <__aeabi_dadd+0x240>
   14c96:	e0f9      	b.n	14e8c <__aeabi_dadd+0x434>
   14c98:	1ab8      	subs	r0, r7, r2
   14c9a:	4684      	mov	ip, r0
   14c9c:	4287      	cmp	r7, r0
   14c9e:	4180      	sbcs	r0, r0
   14ca0:	1ae5      	subs	r5, r4, r3
   14ca2:	4240      	negs	r0, r0
   14ca4:	1a2d      	subs	r5, r5, r0
   14ca6:	0228      	lsls	r0, r5, #8
   14ca8:	d400      	bmi.n	14cac <__aeabi_dadd+0x254>
   14caa:	e089      	b.n	14dc0 <__aeabi_dadd+0x368>
   14cac:	1bd7      	subs	r7, r2, r7
   14cae:	42ba      	cmp	r2, r7
   14cb0:	4192      	sbcs	r2, r2
   14cb2:	1b1c      	subs	r4, r3, r4
   14cb4:	4252      	negs	r2, r2
   14cb6:	1aa5      	subs	r5, r4, r2
   14cb8:	46d8      	mov	r8, fp
   14cba:	e729      	b.n	14b10 <__aeabi_dadd+0xb8>
   14cbc:	4645      	mov	r5, r8
   14cbe:	2400      	movs	r4, #0
   14cc0:	2700      	movs	r7, #0
   14cc2:	e76a      	b.n	14b9a <__aeabi_dadd+0x142>
   14cc4:	4c45      	ldr	r4, [pc, #276]	; (14ddc <__aeabi_dadd+0x384>)
   14cc6:	1af6      	subs	r6, r6, r3
   14cc8:	402c      	ands	r4, r5
   14cca:	e749      	b.n	14b60 <__aeabi_dadd+0x108>
   14ccc:	003d      	movs	r5, r7
   14cce:	3828      	subs	r0, #40	; 0x28
   14cd0:	4085      	lsls	r5, r0
   14cd2:	2700      	movs	r7, #0
   14cd4:	e72e      	b.n	14b34 <__aeabi_dadd+0xdc>
   14cd6:	0038      	movs	r0, r7
   14cd8:	f001 fd22 	bl	16720 <__clzsi2>
   14cdc:	3020      	adds	r0, #32
   14cde:	e71d      	b.n	14b1c <__aeabi_dadd+0xc4>
   14ce0:	430a      	orrs	r2, r1
   14ce2:	1e51      	subs	r1, r2, #1
   14ce4:	418a      	sbcs	r2, r1
   14ce6:	2100      	movs	r1, #0
   14ce8:	e707      	b.n	14afa <__aeabi_dadd+0xa2>
   14cea:	2b00      	cmp	r3, #0
   14cec:	d000      	beq.n	14cf0 <__aeabi_dadd+0x298>
   14cee:	e0f3      	b.n	14ed8 <__aeabi_dadd+0x480>
   14cf0:	1c70      	adds	r0, r6, #1
   14cf2:	0543      	lsls	r3, r0, #21
   14cf4:	0d5b      	lsrs	r3, r3, #21
   14cf6:	2b01      	cmp	r3, #1
   14cf8:	dc00      	bgt.n	14cfc <__aeabi_dadd+0x2a4>
   14cfa:	e0ad      	b.n	14e58 <__aeabi_dadd+0x400>
   14cfc:	4b36      	ldr	r3, [pc, #216]	; (14dd8 <__aeabi_dadd+0x380>)
   14cfe:	4298      	cmp	r0, r3
   14d00:	d100      	bne.n	14d04 <__aeabi_dadd+0x2ac>
   14d02:	e0d1      	b.n	14ea8 <__aeabi_dadd+0x450>
   14d04:	18ba      	adds	r2, r7, r2
   14d06:	42ba      	cmp	r2, r7
   14d08:	41bf      	sbcs	r7, r7
   14d0a:	1864      	adds	r4, r4, r1
   14d0c:	427f      	negs	r7, r7
   14d0e:	19e4      	adds	r4, r4, r7
   14d10:	07e7      	lsls	r7, r4, #31
   14d12:	0852      	lsrs	r2, r2, #1
   14d14:	4317      	orrs	r7, r2
   14d16:	0864      	lsrs	r4, r4, #1
   14d18:	0006      	movs	r6, r0
   14d1a:	e721      	b.n	14b60 <__aeabi_dadd+0x108>
   14d1c:	482e      	ldr	r0, [pc, #184]	; (14dd8 <__aeabi_dadd+0x380>)
   14d1e:	4285      	cmp	r5, r0
   14d20:	d100      	bne.n	14d24 <__aeabi_dadd+0x2cc>
   14d22:	e093      	b.n	14e4c <__aeabi_dadd+0x3f4>
   14d24:	001d      	movs	r5, r3
   14d26:	e6d0      	b.n	14aca <__aeabi_dadd+0x72>
   14d28:	0029      	movs	r1, r5
   14d2a:	3e1f      	subs	r6, #31
   14d2c:	40f1      	lsrs	r1, r6
   14d2e:	2b20      	cmp	r3, #32
   14d30:	d100      	bne.n	14d34 <__aeabi_dadd+0x2dc>
   14d32:	e08d      	b.n	14e50 <__aeabi_dadd+0x3f8>
   14d34:	2240      	movs	r2, #64	; 0x40
   14d36:	1ad3      	subs	r3, r2, r3
   14d38:	409d      	lsls	r5, r3
   14d3a:	432f      	orrs	r7, r5
   14d3c:	1e7d      	subs	r5, r7, #1
   14d3e:	41af      	sbcs	r7, r5
   14d40:	2400      	movs	r4, #0
   14d42:	430f      	orrs	r7, r1
   14d44:	2600      	movs	r6, #0
   14d46:	e744      	b.n	14bd2 <__aeabi_dadd+0x17a>
   14d48:	002b      	movs	r3, r5
   14d4a:	0008      	movs	r0, r1
   14d4c:	3b20      	subs	r3, #32
   14d4e:	40d8      	lsrs	r0, r3
   14d50:	0003      	movs	r3, r0
   14d52:	2d20      	cmp	r5, #32
   14d54:	d100      	bne.n	14d58 <__aeabi_dadd+0x300>
   14d56:	e07d      	b.n	14e54 <__aeabi_dadd+0x3fc>
   14d58:	2040      	movs	r0, #64	; 0x40
   14d5a:	1b45      	subs	r5, r0, r5
   14d5c:	40a9      	lsls	r1, r5
   14d5e:	430a      	orrs	r2, r1
   14d60:	1e51      	subs	r1, r2, #1
   14d62:	418a      	sbcs	r2, r1
   14d64:	2100      	movs	r1, #0
   14d66:	431a      	orrs	r2, r3
   14d68:	e6c7      	b.n	14afa <__aeabi_dadd+0xa2>
   14d6a:	2e00      	cmp	r6, #0
   14d6c:	d050      	beq.n	14e10 <__aeabi_dadd+0x3b8>
   14d6e:	4e1a      	ldr	r6, [pc, #104]	; (14dd8 <__aeabi_dadd+0x380>)
   14d70:	42b0      	cmp	r0, r6
   14d72:	d057      	beq.n	14e24 <__aeabi_dadd+0x3cc>
   14d74:	2680      	movs	r6, #128	; 0x80
   14d76:	426b      	negs	r3, r5
   14d78:	4699      	mov	r9, r3
   14d7a:	0436      	lsls	r6, r6, #16
   14d7c:	4334      	orrs	r4, r6
   14d7e:	464b      	mov	r3, r9
   14d80:	2b38      	cmp	r3, #56	; 0x38
   14d82:	dd00      	ble.n	14d86 <__aeabi_dadd+0x32e>
   14d84:	e0d6      	b.n	14f34 <__aeabi_dadd+0x4dc>
   14d86:	2b1f      	cmp	r3, #31
   14d88:	dd00      	ble.n	14d8c <__aeabi_dadd+0x334>
   14d8a:	e135      	b.n	14ff8 <__aeabi_dadd+0x5a0>
   14d8c:	2620      	movs	r6, #32
   14d8e:	1af5      	subs	r5, r6, r3
   14d90:	0026      	movs	r6, r4
   14d92:	40ae      	lsls	r6, r5
   14d94:	46b2      	mov	sl, r6
   14d96:	003e      	movs	r6, r7
   14d98:	40de      	lsrs	r6, r3
   14d9a:	46ac      	mov	ip, r5
   14d9c:	0035      	movs	r5, r6
   14d9e:	4656      	mov	r6, sl
   14da0:	432e      	orrs	r6, r5
   14da2:	4665      	mov	r5, ip
   14da4:	40af      	lsls	r7, r5
   14da6:	1e7d      	subs	r5, r7, #1
   14da8:	41af      	sbcs	r7, r5
   14daa:	40dc      	lsrs	r4, r3
   14dac:	4337      	orrs	r7, r6
   14dae:	1bd7      	subs	r7, r2, r7
   14db0:	42ba      	cmp	r2, r7
   14db2:	4192      	sbcs	r2, r2
   14db4:	1b0c      	subs	r4, r1, r4
   14db6:	4252      	negs	r2, r2
   14db8:	1aa4      	subs	r4, r4, r2
   14dba:	0006      	movs	r6, r0
   14dbc:	46d8      	mov	r8, fp
   14dbe:	e6a3      	b.n	14b08 <__aeabi_dadd+0xb0>
   14dc0:	4664      	mov	r4, ip
   14dc2:	4667      	mov	r7, ip
   14dc4:	432c      	orrs	r4, r5
   14dc6:	d000      	beq.n	14dca <__aeabi_dadd+0x372>
   14dc8:	e6a2      	b.n	14b10 <__aeabi_dadd+0xb8>
   14dca:	2500      	movs	r5, #0
   14dcc:	2600      	movs	r6, #0
   14dce:	2700      	movs	r7, #0
   14dd0:	e706      	b.n	14be0 <__aeabi_dadd+0x188>
   14dd2:	001e      	movs	r6, r3
   14dd4:	e6c4      	b.n	14b60 <__aeabi_dadd+0x108>
   14dd6:	46c0      	nop			; (mov r8, r8)
   14dd8:	000007ff 	.word	0x000007ff
   14ddc:	ff7fffff 	.word	0xff7fffff
   14de0:	800fffff 	.word	0x800fffff
   14de4:	2b1f      	cmp	r3, #31
   14de6:	dc63      	bgt.n	14eb0 <__aeabi_dadd+0x458>
   14de8:	2020      	movs	r0, #32
   14dea:	1ac3      	subs	r3, r0, r3
   14dec:	0008      	movs	r0, r1
   14dee:	4098      	lsls	r0, r3
   14df0:	469c      	mov	ip, r3
   14df2:	4683      	mov	fp, r0
   14df4:	4653      	mov	r3, sl
   14df6:	0010      	movs	r0, r2
   14df8:	40d8      	lsrs	r0, r3
   14dfa:	0003      	movs	r3, r0
   14dfc:	4658      	mov	r0, fp
   14dfe:	4318      	orrs	r0, r3
   14e00:	4663      	mov	r3, ip
   14e02:	409a      	lsls	r2, r3
   14e04:	1e53      	subs	r3, r2, #1
   14e06:	419a      	sbcs	r2, r3
   14e08:	4653      	mov	r3, sl
   14e0a:	4302      	orrs	r2, r0
   14e0c:	40d9      	lsrs	r1, r3
   14e0e:	e703      	b.n	14c18 <__aeabi_dadd+0x1c0>
   14e10:	0026      	movs	r6, r4
   14e12:	433e      	orrs	r6, r7
   14e14:	d006      	beq.n	14e24 <__aeabi_dadd+0x3cc>
   14e16:	43eb      	mvns	r3, r5
   14e18:	4699      	mov	r9, r3
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d0c7      	beq.n	14dae <__aeabi_dadd+0x356>
   14e1e:	4e94      	ldr	r6, [pc, #592]	; (15070 <__aeabi_dadd+0x618>)
   14e20:	42b0      	cmp	r0, r6
   14e22:	d1ac      	bne.n	14d7e <__aeabi_dadd+0x326>
   14e24:	000c      	movs	r4, r1
   14e26:	0017      	movs	r7, r2
   14e28:	0006      	movs	r6, r0
   14e2a:	46d8      	mov	r8, fp
   14e2c:	e698      	b.n	14b60 <__aeabi_dadd+0x108>
   14e2e:	4b90      	ldr	r3, [pc, #576]	; (15070 <__aeabi_dadd+0x618>)
   14e30:	459a      	cmp	sl, r3
   14e32:	d00b      	beq.n	14e4c <__aeabi_dadd+0x3f4>
   14e34:	4682      	mov	sl, r0
   14e36:	e6e7      	b.n	14c08 <__aeabi_dadd+0x1b0>
   14e38:	2800      	cmp	r0, #0
   14e3a:	d000      	beq.n	14e3e <__aeabi_dadd+0x3e6>
   14e3c:	e09e      	b.n	14f7c <__aeabi_dadd+0x524>
   14e3e:	0018      	movs	r0, r3
   14e40:	4310      	orrs	r0, r2
   14e42:	d100      	bne.n	14e46 <__aeabi_dadd+0x3ee>
   14e44:	e0e9      	b.n	1501a <__aeabi_dadd+0x5c2>
   14e46:	001c      	movs	r4, r3
   14e48:	0017      	movs	r7, r2
   14e4a:	46d8      	mov	r8, fp
   14e4c:	4e88      	ldr	r6, [pc, #544]	; (15070 <__aeabi_dadd+0x618>)
   14e4e:	e687      	b.n	14b60 <__aeabi_dadd+0x108>
   14e50:	2500      	movs	r5, #0
   14e52:	e772      	b.n	14d3a <__aeabi_dadd+0x2e2>
   14e54:	2100      	movs	r1, #0
   14e56:	e782      	b.n	14d5e <__aeabi_dadd+0x306>
   14e58:	0023      	movs	r3, r4
   14e5a:	433b      	orrs	r3, r7
   14e5c:	2e00      	cmp	r6, #0
   14e5e:	d000      	beq.n	14e62 <__aeabi_dadd+0x40a>
   14e60:	e0ab      	b.n	14fba <__aeabi_dadd+0x562>
   14e62:	2b00      	cmp	r3, #0
   14e64:	d100      	bne.n	14e68 <__aeabi_dadd+0x410>
   14e66:	e0e7      	b.n	15038 <__aeabi_dadd+0x5e0>
   14e68:	000b      	movs	r3, r1
   14e6a:	4313      	orrs	r3, r2
   14e6c:	d100      	bne.n	14e70 <__aeabi_dadd+0x418>
   14e6e:	e677      	b.n	14b60 <__aeabi_dadd+0x108>
   14e70:	18ba      	adds	r2, r7, r2
   14e72:	42ba      	cmp	r2, r7
   14e74:	41bf      	sbcs	r7, r7
   14e76:	1864      	adds	r4, r4, r1
   14e78:	427f      	negs	r7, r7
   14e7a:	19e4      	adds	r4, r4, r7
   14e7c:	0223      	lsls	r3, r4, #8
   14e7e:	d400      	bmi.n	14e82 <__aeabi_dadd+0x42a>
   14e80:	e0f2      	b.n	15068 <__aeabi_dadd+0x610>
   14e82:	4b7c      	ldr	r3, [pc, #496]	; (15074 <__aeabi_dadd+0x61c>)
   14e84:	0017      	movs	r7, r2
   14e86:	401c      	ands	r4, r3
   14e88:	0006      	movs	r6, r0
   14e8a:	e669      	b.n	14b60 <__aeabi_dadd+0x108>
   14e8c:	0020      	movs	r0, r4
   14e8e:	4338      	orrs	r0, r7
   14e90:	2e00      	cmp	r6, #0
   14e92:	d1d1      	bne.n	14e38 <__aeabi_dadd+0x3e0>
   14e94:	2800      	cmp	r0, #0
   14e96:	d15b      	bne.n	14f50 <__aeabi_dadd+0x4f8>
   14e98:	001c      	movs	r4, r3
   14e9a:	4314      	orrs	r4, r2
   14e9c:	d100      	bne.n	14ea0 <__aeabi_dadd+0x448>
   14e9e:	e0a8      	b.n	14ff2 <__aeabi_dadd+0x59a>
   14ea0:	001c      	movs	r4, r3
   14ea2:	0017      	movs	r7, r2
   14ea4:	46d8      	mov	r8, fp
   14ea6:	e65b      	b.n	14b60 <__aeabi_dadd+0x108>
   14ea8:	0006      	movs	r6, r0
   14eaa:	2400      	movs	r4, #0
   14eac:	2700      	movs	r7, #0
   14eae:	e697      	b.n	14be0 <__aeabi_dadd+0x188>
   14eb0:	4650      	mov	r0, sl
   14eb2:	000b      	movs	r3, r1
   14eb4:	3820      	subs	r0, #32
   14eb6:	40c3      	lsrs	r3, r0
   14eb8:	4699      	mov	r9, r3
   14eba:	4653      	mov	r3, sl
   14ebc:	2b20      	cmp	r3, #32
   14ebe:	d100      	bne.n	14ec2 <__aeabi_dadd+0x46a>
   14ec0:	e095      	b.n	14fee <__aeabi_dadd+0x596>
   14ec2:	2340      	movs	r3, #64	; 0x40
   14ec4:	4650      	mov	r0, sl
   14ec6:	1a1b      	subs	r3, r3, r0
   14ec8:	4099      	lsls	r1, r3
   14eca:	430a      	orrs	r2, r1
   14ecc:	1e51      	subs	r1, r2, #1
   14ece:	418a      	sbcs	r2, r1
   14ed0:	464b      	mov	r3, r9
   14ed2:	2100      	movs	r1, #0
   14ed4:	431a      	orrs	r2, r3
   14ed6:	e69f      	b.n	14c18 <__aeabi_dadd+0x1c0>
   14ed8:	2e00      	cmp	r6, #0
   14eda:	d130      	bne.n	14f3e <__aeabi_dadd+0x4e6>
   14edc:	0026      	movs	r6, r4
   14ede:	433e      	orrs	r6, r7
   14ee0:	d067      	beq.n	14fb2 <__aeabi_dadd+0x55a>
   14ee2:	43db      	mvns	r3, r3
   14ee4:	469a      	mov	sl, r3
   14ee6:	2b00      	cmp	r3, #0
   14ee8:	d01c      	beq.n	14f24 <__aeabi_dadd+0x4cc>
   14eea:	4e61      	ldr	r6, [pc, #388]	; (15070 <__aeabi_dadd+0x618>)
   14eec:	42b0      	cmp	r0, r6
   14eee:	d060      	beq.n	14fb2 <__aeabi_dadd+0x55a>
   14ef0:	4653      	mov	r3, sl
   14ef2:	2b38      	cmp	r3, #56	; 0x38
   14ef4:	dd00      	ble.n	14ef8 <__aeabi_dadd+0x4a0>
   14ef6:	e096      	b.n	15026 <__aeabi_dadd+0x5ce>
   14ef8:	2b1f      	cmp	r3, #31
   14efa:	dd00      	ble.n	14efe <__aeabi_dadd+0x4a6>
   14efc:	e09f      	b.n	1503e <__aeabi_dadd+0x5e6>
   14efe:	2620      	movs	r6, #32
   14f00:	1af3      	subs	r3, r6, r3
   14f02:	0026      	movs	r6, r4
   14f04:	409e      	lsls	r6, r3
   14f06:	469c      	mov	ip, r3
   14f08:	46b3      	mov	fp, r6
   14f0a:	4653      	mov	r3, sl
   14f0c:	003e      	movs	r6, r7
   14f0e:	40de      	lsrs	r6, r3
   14f10:	0033      	movs	r3, r6
   14f12:	465e      	mov	r6, fp
   14f14:	431e      	orrs	r6, r3
   14f16:	4663      	mov	r3, ip
   14f18:	409f      	lsls	r7, r3
   14f1a:	1e7b      	subs	r3, r7, #1
   14f1c:	419f      	sbcs	r7, r3
   14f1e:	4653      	mov	r3, sl
   14f20:	40dc      	lsrs	r4, r3
   14f22:	4337      	orrs	r7, r6
   14f24:	18bf      	adds	r7, r7, r2
   14f26:	4297      	cmp	r7, r2
   14f28:	4192      	sbcs	r2, r2
   14f2a:	1864      	adds	r4, r4, r1
   14f2c:	4252      	negs	r2, r2
   14f2e:	18a4      	adds	r4, r4, r2
   14f30:	0006      	movs	r6, r0
   14f32:	e678      	b.n	14c26 <__aeabi_dadd+0x1ce>
   14f34:	4327      	orrs	r7, r4
   14f36:	1e7c      	subs	r4, r7, #1
   14f38:	41a7      	sbcs	r7, r4
   14f3a:	2400      	movs	r4, #0
   14f3c:	e737      	b.n	14dae <__aeabi_dadd+0x356>
   14f3e:	4e4c      	ldr	r6, [pc, #304]	; (15070 <__aeabi_dadd+0x618>)
   14f40:	42b0      	cmp	r0, r6
   14f42:	d036      	beq.n	14fb2 <__aeabi_dadd+0x55a>
   14f44:	2680      	movs	r6, #128	; 0x80
   14f46:	425b      	negs	r3, r3
   14f48:	0436      	lsls	r6, r6, #16
   14f4a:	469a      	mov	sl, r3
   14f4c:	4334      	orrs	r4, r6
   14f4e:	e7cf      	b.n	14ef0 <__aeabi_dadd+0x498>
   14f50:	0018      	movs	r0, r3
   14f52:	4310      	orrs	r0, r2
   14f54:	d100      	bne.n	14f58 <__aeabi_dadd+0x500>
   14f56:	e603      	b.n	14b60 <__aeabi_dadd+0x108>
   14f58:	1ab8      	subs	r0, r7, r2
   14f5a:	4684      	mov	ip, r0
   14f5c:	4567      	cmp	r7, ip
   14f5e:	41ad      	sbcs	r5, r5
   14f60:	1ae0      	subs	r0, r4, r3
   14f62:	426d      	negs	r5, r5
   14f64:	1b40      	subs	r0, r0, r5
   14f66:	0205      	lsls	r5, r0, #8
   14f68:	d400      	bmi.n	14f6c <__aeabi_dadd+0x514>
   14f6a:	e62c      	b.n	14bc6 <__aeabi_dadd+0x16e>
   14f6c:	1bd7      	subs	r7, r2, r7
   14f6e:	42ba      	cmp	r2, r7
   14f70:	4192      	sbcs	r2, r2
   14f72:	1b1c      	subs	r4, r3, r4
   14f74:	4252      	negs	r2, r2
   14f76:	1aa4      	subs	r4, r4, r2
   14f78:	46d8      	mov	r8, fp
   14f7a:	e5f1      	b.n	14b60 <__aeabi_dadd+0x108>
   14f7c:	0018      	movs	r0, r3
   14f7e:	4310      	orrs	r0, r2
   14f80:	d100      	bne.n	14f84 <__aeabi_dadd+0x52c>
   14f82:	e763      	b.n	14e4c <__aeabi_dadd+0x3f4>
   14f84:	08f8      	lsrs	r0, r7, #3
   14f86:	0767      	lsls	r7, r4, #29
   14f88:	4307      	orrs	r7, r0
   14f8a:	2080      	movs	r0, #128	; 0x80
   14f8c:	08e4      	lsrs	r4, r4, #3
   14f8e:	0300      	lsls	r0, r0, #12
   14f90:	4204      	tst	r4, r0
   14f92:	d008      	beq.n	14fa6 <__aeabi_dadd+0x54e>
   14f94:	08dd      	lsrs	r5, r3, #3
   14f96:	4205      	tst	r5, r0
   14f98:	d105      	bne.n	14fa6 <__aeabi_dadd+0x54e>
   14f9a:	08d2      	lsrs	r2, r2, #3
   14f9c:	0759      	lsls	r1, r3, #29
   14f9e:	4311      	orrs	r1, r2
   14fa0:	000f      	movs	r7, r1
   14fa2:	002c      	movs	r4, r5
   14fa4:	46d8      	mov	r8, fp
   14fa6:	0f7b      	lsrs	r3, r7, #29
   14fa8:	00e4      	lsls	r4, r4, #3
   14faa:	431c      	orrs	r4, r3
   14fac:	00ff      	lsls	r7, r7, #3
   14fae:	4e30      	ldr	r6, [pc, #192]	; (15070 <__aeabi_dadd+0x618>)
   14fb0:	e5d6      	b.n	14b60 <__aeabi_dadd+0x108>
   14fb2:	000c      	movs	r4, r1
   14fb4:	0017      	movs	r7, r2
   14fb6:	0006      	movs	r6, r0
   14fb8:	e5d2      	b.n	14b60 <__aeabi_dadd+0x108>
   14fba:	2b00      	cmp	r3, #0
   14fbc:	d038      	beq.n	15030 <__aeabi_dadd+0x5d8>
   14fbe:	000b      	movs	r3, r1
   14fc0:	4313      	orrs	r3, r2
   14fc2:	d100      	bne.n	14fc6 <__aeabi_dadd+0x56e>
   14fc4:	e742      	b.n	14e4c <__aeabi_dadd+0x3f4>
   14fc6:	08f8      	lsrs	r0, r7, #3
   14fc8:	0767      	lsls	r7, r4, #29
   14fca:	4307      	orrs	r7, r0
   14fcc:	2080      	movs	r0, #128	; 0x80
   14fce:	08e4      	lsrs	r4, r4, #3
   14fd0:	0300      	lsls	r0, r0, #12
   14fd2:	4204      	tst	r4, r0
   14fd4:	d0e7      	beq.n	14fa6 <__aeabi_dadd+0x54e>
   14fd6:	08cb      	lsrs	r3, r1, #3
   14fd8:	4203      	tst	r3, r0
   14fda:	d1e4      	bne.n	14fa6 <__aeabi_dadd+0x54e>
   14fdc:	08d2      	lsrs	r2, r2, #3
   14fde:	0749      	lsls	r1, r1, #29
   14fe0:	4311      	orrs	r1, r2
   14fe2:	000f      	movs	r7, r1
   14fe4:	001c      	movs	r4, r3
   14fe6:	e7de      	b.n	14fa6 <__aeabi_dadd+0x54e>
   14fe8:	2700      	movs	r7, #0
   14fea:	2400      	movs	r4, #0
   14fec:	e5d5      	b.n	14b9a <__aeabi_dadd+0x142>
   14fee:	2100      	movs	r1, #0
   14ff0:	e76b      	b.n	14eca <__aeabi_dadd+0x472>
   14ff2:	2500      	movs	r5, #0
   14ff4:	2700      	movs	r7, #0
   14ff6:	e5f3      	b.n	14be0 <__aeabi_dadd+0x188>
   14ff8:	464e      	mov	r6, r9
   14ffa:	0025      	movs	r5, r4
   14ffc:	3e20      	subs	r6, #32
   14ffe:	40f5      	lsrs	r5, r6
   15000:	464b      	mov	r3, r9
   15002:	002e      	movs	r6, r5
   15004:	2b20      	cmp	r3, #32
   15006:	d02d      	beq.n	15064 <__aeabi_dadd+0x60c>
   15008:	2540      	movs	r5, #64	; 0x40
   1500a:	1aed      	subs	r5, r5, r3
   1500c:	40ac      	lsls	r4, r5
   1500e:	4327      	orrs	r7, r4
   15010:	1e7c      	subs	r4, r7, #1
   15012:	41a7      	sbcs	r7, r4
   15014:	2400      	movs	r4, #0
   15016:	4337      	orrs	r7, r6
   15018:	e6c9      	b.n	14dae <__aeabi_dadd+0x356>
   1501a:	2480      	movs	r4, #128	; 0x80
   1501c:	2500      	movs	r5, #0
   1501e:	0324      	lsls	r4, r4, #12
   15020:	4e13      	ldr	r6, [pc, #76]	; (15070 <__aeabi_dadd+0x618>)
   15022:	2700      	movs	r7, #0
   15024:	e5dc      	b.n	14be0 <__aeabi_dadd+0x188>
   15026:	4327      	orrs	r7, r4
   15028:	1e7c      	subs	r4, r7, #1
   1502a:	41a7      	sbcs	r7, r4
   1502c:	2400      	movs	r4, #0
   1502e:	e779      	b.n	14f24 <__aeabi_dadd+0x4cc>
   15030:	000c      	movs	r4, r1
   15032:	0017      	movs	r7, r2
   15034:	4e0e      	ldr	r6, [pc, #56]	; (15070 <__aeabi_dadd+0x618>)
   15036:	e593      	b.n	14b60 <__aeabi_dadd+0x108>
   15038:	000c      	movs	r4, r1
   1503a:	0017      	movs	r7, r2
   1503c:	e590      	b.n	14b60 <__aeabi_dadd+0x108>
   1503e:	4656      	mov	r6, sl
   15040:	0023      	movs	r3, r4
   15042:	3e20      	subs	r6, #32
   15044:	40f3      	lsrs	r3, r6
   15046:	4699      	mov	r9, r3
   15048:	4653      	mov	r3, sl
   1504a:	2b20      	cmp	r3, #32
   1504c:	d00e      	beq.n	1506c <__aeabi_dadd+0x614>
   1504e:	2340      	movs	r3, #64	; 0x40
   15050:	4656      	mov	r6, sl
   15052:	1b9b      	subs	r3, r3, r6
   15054:	409c      	lsls	r4, r3
   15056:	4327      	orrs	r7, r4
   15058:	1e7c      	subs	r4, r7, #1
   1505a:	41a7      	sbcs	r7, r4
   1505c:	464b      	mov	r3, r9
   1505e:	2400      	movs	r4, #0
   15060:	431f      	orrs	r7, r3
   15062:	e75f      	b.n	14f24 <__aeabi_dadd+0x4cc>
   15064:	2400      	movs	r4, #0
   15066:	e7d2      	b.n	1500e <__aeabi_dadd+0x5b6>
   15068:	0017      	movs	r7, r2
   1506a:	e5b2      	b.n	14bd2 <__aeabi_dadd+0x17a>
   1506c:	2400      	movs	r4, #0
   1506e:	e7f2      	b.n	15056 <__aeabi_dadd+0x5fe>
   15070:	000007ff 	.word	0x000007ff
   15074:	ff7fffff 	.word	0xff7fffff

00015078 <__aeabi_ddiv>:
   15078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1507a:	4657      	mov	r7, sl
   1507c:	4645      	mov	r5, r8
   1507e:	46de      	mov	lr, fp
   15080:	464e      	mov	r6, r9
   15082:	b5e0      	push	{r5, r6, r7, lr}
   15084:	004c      	lsls	r4, r1, #1
   15086:	030e      	lsls	r6, r1, #12
   15088:	b087      	sub	sp, #28
   1508a:	4683      	mov	fp, r0
   1508c:	4692      	mov	sl, r2
   1508e:	001d      	movs	r5, r3
   15090:	4680      	mov	r8, r0
   15092:	0b36      	lsrs	r6, r6, #12
   15094:	0d64      	lsrs	r4, r4, #21
   15096:	0fcf      	lsrs	r7, r1, #31
   15098:	2c00      	cmp	r4, #0
   1509a:	d04f      	beq.n	1513c <__aeabi_ddiv+0xc4>
   1509c:	4b6f      	ldr	r3, [pc, #444]	; (1525c <__aeabi_ddiv+0x1e4>)
   1509e:	429c      	cmp	r4, r3
   150a0:	d035      	beq.n	1510e <__aeabi_ddiv+0x96>
   150a2:	2380      	movs	r3, #128	; 0x80
   150a4:	0f42      	lsrs	r2, r0, #29
   150a6:	041b      	lsls	r3, r3, #16
   150a8:	00f6      	lsls	r6, r6, #3
   150aa:	4313      	orrs	r3, r2
   150ac:	4333      	orrs	r3, r6
   150ae:	4699      	mov	r9, r3
   150b0:	00c3      	lsls	r3, r0, #3
   150b2:	4698      	mov	r8, r3
   150b4:	4b6a      	ldr	r3, [pc, #424]	; (15260 <__aeabi_ddiv+0x1e8>)
   150b6:	2600      	movs	r6, #0
   150b8:	469c      	mov	ip, r3
   150ba:	2300      	movs	r3, #0
   150bc:	4464      	add	r4, ip
   150be:	9303      	str	r3, [sp, #12]
   150c0:	032b      	lsls	r3, r5, #12
   150c2:	0b1b      	lsrs	r3, r3, #12
   150c4:	469b      	mov	fp, r3
   150c6:	006b      	lsls	r3, r5, #1
   150c8:	0fed      	lsrs	r5, r5, #31
   150ca:	4650      	mov	r0, sl
   150cc:	0d5b      	lsrs	r3, r3, #21
   150ce:	9501      	str	r5, [sp, #4]
   150d0:	d05e      	beq.n	15190 <__aeabi_ddiv+0x118>
   150d2:	4a62      	ldr	r2, [pc, #392]	; (1525c <__aeabi_ddiv+0x1e4>)
   150d4:	4293      	cmp	r3, r2
   150d6:	d053      	beq.n	15180 <__aeabi_ddiv+0x108>
   150d8:	465a      	mov	r2, fp
   150da:	00d1      	lsls	r1, r2, #3
   150dc:	2280      	movs	r2, #128	; 0x80
   150de:	0f40      	lsrs	r0, r0, #29
   150e0:	0412      	lsls	r2, r2, #16
   150e2:	4302      	orrs	r2, r0
   150e4:	430a      	orrs	r2, r1
   150e6:	4693      	mov	fp, r2
   150e8:	4652      	mov	r2, sl
   150ea:	00d1      	lsls	r1, r2, #3
   150ec:	4a5c      	ldr	r2, [pc, #368]	; (15260 <__aeabi_ddiv+0x1e8>)
   150ee:	4694      	mov	ip, r2
   150f0:	2200      	movs	r2, #0
   150f2:	4463      	add	r3, ip
   150f4:	0038      	movs	r0, r7
   150f6:	4068      	eors	r0, r5
   150f8:	4684      	mov	ip, r0
   150fa:	9002      	str	r0, [sp, #8]
   150fc:	1ae4      	subs	r4, r4, r3
   150fe:	4316      	orrs	r6, r2
   15100:	2e0f      	cmp	r6, #15
   15102:	d900      	bls.n	15106 <__aeabi_ddiv+0x8e>
   15104:	e0b4      	b.n	15270 <__aeabi_ddiv+0x1f8>
   15106:	4b57      	ldr	r3, [pc, #348]	; (15264 <__aeabi_ddiv+0x1ec>)
   15108:	00b6      	lsls	r6, r6, #2
   1510a:	599b      	ldr	r3, [r3, r6]
   1510c:	469f      	mov	pc, r3
   1510e:	0003      	movs	r3, r0
   15110:	4333      	orrs	r3, r6
   15112:	4699      	mov	r9, r3
   15114:	d16c      	bne.n	151f0 <__aeabi_ddiv+0x178>
   15116:	2300      	movs	r3, #0
   15118:	4698      	mov	r8, r3
   1511a:	3302      	adds	r3, #2
   1511c:	2608      	movs	r6, #8
   1511e:	9303      	str	r3, [sp, #12]
   15120:	e7ce      	b.n	150c0 <__aeabi_ddiv+0x48>
   15122:	46cb      	mov	fp, r9
   15124:	4641      	mov	r1, r8
   15126:	9a03      	ldr	r2, [sp, #12]
   15128:	9701      	str	r7, [sp, #4]
   1512a:	2a02      	cmp	r2, #2
   1512c:	d165      	bne.n	151fa <__aeabi_ddiv+0x182>
   1512e:	9b01      	ldr	r3, [sp, #4]
   15130:	4c4a      	ldr	r4, [pc, #296]	; (1525c <__aeabi_ddiv+0x1e4>)
   15132:	469c      	mov	ip, r3
   15134:	2300      	movs	r3, #0
   15136:	2200      	movs	r2, #0
   15138:	4698      	mov	r8, r3
   1513a:	e06b      	b.n	15214 <__aeabi_ddiv+0x19c>
   1513c:	0003      	movs	r3, r0
   1513e:	4333      	orrs	r3, r6
   15140:	4699      	mov	r9, r3
   15142:	d04e      	beq.n	151e2 <__aeabi_ddiv+0x16a>
   15144:	2e00      	cmp	r6, #0
   15146:	d100      	bne.n	1514a <__aeabi_ddiv+0xd2>
   15148:	e1bc      	b.n	154c4 <__aeabi_ddiv+0x44c>
   1514a:	0030      	movs	r0, r6
   1514c:	f001 fae8 	bl	16720 <__clzsi2>
   15150:	0003      	movs	r3, r0
   15152:	3b0b      	subs	r3, #11
   15154:	2b1c      	cmp	r3, #28
   15156:	dd00      	ble.n	1515a <__aeabi_ddiv+0xe2>
   15158:	e1ac      	b.n	154b4 <__aeabi_ddiv+0x43c>
   1515a:	221d      	movs	r2, #29
   1515c:	1ad3      	subs	r3, r2, r3
   1515e:	465a      	mov	r2, fp
   15160:	0001      	movs	r1, r0
   15162:	40da      	lsrs	r2, r3
   15164:	3908      	subs	r1, #8
   15166:	408e      	lsls	r6, r1
   15168:	0013      	movs	r3, r2
   1516a:	4333      	orrs	r3, r6
   1516c:	4699      	mov	r9, r3
   1516e:	465b      	mov	r3, fp
   15170:	408b      	lsls	r3, r1
   15172:	4698      	mov	r8, r3
   15174:	2300      	movs	r3, #0
   15176:	4c3c      	ldr	r4, [pc, #240]	; (15268 <__aeabi_ddiv+0x1f0>)
   15178:	2600      	movs	r6, #0
   1517a:	1a24      	subs	r4, r4, r0
   1517c:	9303      	str	r3, [sp, #12]
   1517e:	e79f      	b.n	150c0 <__aeabi_ddiv+0x48>
   15180:	4651      	mov	r1, sl
   15182:	465a      	mov	r2, fp
   15184:	4311      	orrs	r1, r2
   15186:	d129      	bne.n	151dc <__aeabi_ddiv+0x164>
   15188:	2200      	movs	r2, #0
   1518a:	4693      	mov	fp, r2
   1518c:	3202      	adds	r2, #2
   1518e:	e7b1      	b.n	150f4 <__aeabi_ddiv+0x7c>
   15190:	4659      	mov	r1, fp
   15192:	4301      	orrs	r1, r0
   15194:	d01e      	beq.n	151d4 <__aeabi_ddiv+0x15c>
   15196:	465b      	mov	r3, fp
   15198:	2b00      	cmp	r3, #0
   1519a:	d100      	bne.n	1519e <__aeabi_ddiv+0x126>
   1519c:	e19e      	b.n	154dc <__aeabi_ddiv+0x464>
   1519e:	4658      	mov	r0, fp
   151a0:	f001 fabe 	bl	16720 <__clzsi2>
   151a4:	0003      	movs	r3, r0
   151a6:	3b0b      	subs	r3, #11
   151a8:	2b1c      	cmp	r3, #28
   151aa:	dd00      	ble.n	151ae <__aeabi_ddiv+0x136>
   151ac:	e18f      	b.n	154ce <__aeabi_ddiv+0x456>
   151ae:	0002      	movs	r2, r0
   151b0:	4659      	mov	r1, fp
   151b2:	3a08      	subs	r2, #8
   151b4:	4091      	lsls	r1, r2
   151b6:	468b      	mov	fp, r1
   151b8:	211d      	movs	r1, #29
   151ba:	1acb      	subs	r3, r1, r3
   151bc:	4651      	mov	r1, sl
   151be:	40d9      	lsrs	r1, r3
   151c0:	000b      	movs	r3, r1
   151c2:	4659      	mov	r1, fp
   151c4:	430b      	orrs	r3, r1
   151c6:	4651      	mov	r1, sl
   151c8:	469b      	mov	fp, r3
   151ca:	4091      	lsls	r1, r2
   151cc:	4b26      	ldr	r3, [pc, #152]	; (15268 <__aeabi_ddiv+0x1f0>)
   151ce:	2200      	movs	r2, #0
   151d0:	1a1b      	subs	r3, r3, r0
   151d2:	e78f      	b.n	150f4 <__aeabi_ddiv+0x7c>
   151d4:	2300      	movs	r3, #0
   151d6:	2201      	movs	r2, #1
   151d8:	469b      	mov	fp, r3
   151da:	e78b      	b.n	150f4 <__aeabi_ddiv+0x7c>
   151dc:	4651      	mov	r1, sl
   151de:	2203      	movs	r2, #3
   151e0:	e788      	b.n	150f4 <__aeabi_ddiv+0x7c>
   151e2:	2300      	movs	r3, #0
   151e4:	4698      	mov	r8, r3
   151e6:	3301      	adds	r3, #1
   151e8:	2604      	movs	r6, #4
   151ea:	2400      	movs	r4, #0
   151ec:	9303      	str	r3, [sp, #12]
   151ee:	e767      	b.n	150c0 <__aeabi_ddiv+0x48>
   151f0:	2303      	movs	r3, #3
   151f2:	46b1      	mov	r9, r6
   151f4:	9303      	str	r3, [sp, #12]
   151f6:	260c      	movs	r6, #12
   151f8:	e762      	b.n	150c0 <__aeabi_ddiv+0x48>
   151fa:	2a03      	cmp	r2, #3
   151fc:	d100      	bne.n	15200 <__aeabi_ddiv+0x188>
   151fe:	e25c      	b.n	156ba <__aeabi_ddiv+0x642>
   15200:	9b01      	ldr	r3, [sp, #4]
   15202:	2a01      	cmp	r2, #1
   15204:	d000      	beq.n	15208 <__aeabi_ddiv+0x190>
   15206:	e1e4      	b.n	155d2 <__aeabi_ddiv+0x55a>
   15208:	4013      	ands	r3, r2
   1520a:	469c      	mov	ip, r3
   1520c:	2300      	movs	r3, #0
   1520e:	2400      	movs	r4, #0
   15210:	2200      	movs	r2, #0
   15212:	4698      	mov	r8, r3
   15214:	2100      	movs	r1, #0
   15216:	0312      	lsls	r2, r2, #12
   15218:	0b13      	lsrs	r3, r2, #12
   1521a:	0d0a      	lsrs	r2, r1, #20
   1521c:	0512      	lsls	r2, r2, #20
   1521e:	431a      	orrs	r2, r3
   15220:	0523      	lsls	r3, r4, #20
   15222:	4c12      	ldr	r4, [pc, #72]	; (1526c <__aeabi_ddiv+0x1f4>)
   15224:	4640      	mov	r0, r8
   15226:	4022      	ands	r2, r4
   15228:	4313      	orrs	r3, r2
   1522a:	4662      	mov	r2, ip
   1522c:	005b      	lsls	r3, r3, #1
   1522e:	07d2      	lsls	r2, r2, #31
   15230:	085b      	lsrs	r3, r3, #1
   15232:	4313      	orrs	r3, r2
   15234:	0019      	movs	r1, r3
   15236:	b007      	add	sp, #28
   15238:	bc3c      	pop	{r2, r3, r4, r5}
   1523a:	4690      	mov	r8, r2
   1523c:	4699      	mov	r9, r3
   1523e:	46a2      	mov	sl, r4
   15240:	46ab      	mov	fp, r5
   15242:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15244:	2300      	movs	r3, #0
   15246:	2280      	movs	r2, #128	; 0x80
   15248:	469c      	mov	ip, r3
   1524a:	0312      	lsls	r2, r2, #12
   1524c:	4698      	mov	r8, r3
   1524e:	4c03      	ldr	r4, [pc, #12]	; (1525c <__aeabi_ddiv+0x1e4>)
   15250:	e7e0      	b.n	15214 <__aeabi_ddiv+0x19c>
   15252:	2300      	movs	r3, #0
   15254:	4c01      	ldr	r4, [pc, #4]	; (1525c <__aeabi_ddiv+0x1e4>)
   15256:	2200      	movs	r2, #0
   15258:	4698      	mov	r8, r3
   1525a:	e7db      	b.n	15214 <__aeabi_ddiv+0x19c>
   1525c:	000007ff 	.word	0x000007ff
   15260:	fffffc01 	.word	0xfffffc01
   15264:	00018e34 	.word	0x00018e34
   15268:	fffffc0d 	.word	0xfffffc0d
   1526c:	800fffff 	.word	0x800fffff
   15270:	45d9      	cmp	r9, fp
   15272:	d900      	bls.n	15276 <__aeabi_ddiv+0x1fe>
   15274:	e139      	b.n	154ea <__aeabi_ddiv+0x472>
   15276:	d100      	bne.n	1527a <__aeabi_ddiv+0x202>
   15278:	e134      	b.n	154e4 <__aeabi_ddiv+0x46c>
   1527a:	2300      	movs	r3, #0
   1527c:	4646      	mov	r6, r8
   1527e:	464d      	mov	r5, r9
   15280:	469a      	mov	sl, r3
   15282:	3c01      	subs	r4, #1
   15284:	465b      	mov	r3, fp
   15286:	0e0a      	lsrs	r2, r1, #24
   15288:	021b      	lsls	r3, r3, #8
   1528a:	431a      	orrs	r2, r3
   1528c:	020b      	lsls	r3, r1, #8
   1528e:	0c17      	lsrs	r7, r2, #16
   15290:	9303      	str	r3, [sp, #12]
   15292:	0413      	lsls	r3, r2, #16
   15294:	0c1b      	lsrs	r3, r3, #16
   15296:	0039      	movs	r1, r7
   15298:	0028      	movs	r0, r5
   1529a:	4690      	mov	r8, r2
   1529c:	9301      	str	r3, [sp, #4]
   1529e:	f7fe f999 	bl	135d4 <__udivsi3>
   152a2:	0002      	movs	r2, r0
   152a4:	9b01      	ldr	r3, [sp, #4]
   152a6:	4683      	mov	fp, r0
   152a8:	435a      	muls	r2, r3
   152aa:	0028      	movs	r0, r5
   152ac:	0039      	movs	r1, r7
   152ae:	4691      	mov	r9, r2
   152b0:	f7fe fa16 	bl	136e0 <__aeabi_uidivmod>
   152b4:	0c35      	lsrs	r5, r6, #16
   152b6:	0409      	lsls	r1, r1, #16
   152b8:	430d      	orrs	r5, r1
   152ba:	45a9      	cmp	r9, r5
   152bc:	d90d      	bls.n	152da <__aeabi_ddiv+0x262>
   152be:	465b      	mov	r3, fp
   152c0:	4445      	add	r5, r8
   152c2:	3b01      	subs	r3, #1
   152c4:	45a8      	cmp	r8, r5
   152c6:	d900      	bls.n	152ca <__aeabi_ddiv+0x252>
   152c8:	e13a      	b.n	15540 <__aeabi_ddiv+0x4c8>
   152ca:	45a9      	cmp	r9, r5
   152cc:	d800      	bhi.n	152d0 <__aeabi_ddiv+0x258>
   152ce:	e137      	b.n	15540 <__aeabi_ddiv+0x4c8>
   152d0:	2302      	movs	r3, #2
   152d2:	425b      	negs	r3, r3
   152d4:	469c      	mov	ip, r3
   152d6:	4445      	add	r5, r8
   152d8:	44e3      	add	fp, ip
   152da:	464b      	mov	r3, r9
   152dc:	1aeb      	subs	r3, r5, r3
   152de:	0039      	movs	r1, r7
   152e0:	0018      	movs	r0, r3
   152e2:	9304      	str	r3, [sp, #16]
   152e4:	f7fe f976 	bl	135d4 <__udivsi3>
   152e8:	9b01      	ldr	r3, [sp, #4]
   152ea:	0005      	movs	r5, r0
   152ec:	4343      	muls	r3, r0
   152ee:	0039      	movs	r1, r7
   152f0:	9804      	ldr	r0, [sp, #16]
   152f2:	4699      	mov	r9, r3
   152f4:	f7fe f9f4 	bl	136e0 <__aeabi_uidivmod>
   152f8:	0433      	lsls	r3, r6, #16
   152fa:	0409      	lsls	r1, r1, #16
   152fc:	0c1b      	lsrs	r3, r3, #16
   152fe:	430b      	orrs	r3, r1
   15300:	4599      	cmp	r9, r3
   15302:	d909      	bls.n	15318 <__aeabi_ddiv+0x2a0>
   15304:	4443      	add	r3, r8
   15306:	1e6a      	subs	r2, r5, #1
   15308:	4598      	cmp	r8, r3
   1530a:	d900      	bls.n	1530e <__aeabi_ddiv+0x296>
   1530c:	e11a      	b.n	15544 <__aeabi_ddiv+0x4cc>
   1530e:	4599      	cmp	r9, r3
   15310:	d800      	bhi.n	15314 <__aeabi_ddiv+0x29c>
   15312:	e117      	b.n	15544 <__aeabi_ddiv+0x4cc>
   15314:	3d02      	subs	r5, #2
   15316:	4443      	add	r3, r8
   15318:	464a      	mov	r2, r9
   1531a:	1a9b      	subs	r3, r3, r2
   1531c:	465a      	mov	r2, fp
   1531e:	0412      	lsls	r2, r2, #16
   15320:	432a      	orrs	r2, r5
   15322:	9903      	ldr	r1, [sp, #12]
   15324:	4693      	mov	fp, r2
   15326:	0c10      	lsrs	r0, r2, #16
   15328:	0c0a      	lsrs	r2, r1, #16
   1532a:	4691      	mov	r9, r2
   1532c:	0409      	lsls	r1, r1, #16
   1532e:	465a      	mov	r2, fp
   15330:	0c09      	lsrs	r1, r1, #16
   15332:	464e      	mov	r6, r9
   15334:	000d      	movs	r5, r1
   15336:	0412      	lsls	r2, r2, #16
   15338:	0c12      	lsrs	r2, r2, #16
   1533a:	4345      	muls	r5, r0
   1533c:	9105      	str	r1, [sp, #20]
   1533e:	4351      	muls	r1, r2
   15340:	4372      	muls	r2, r6
   15342:	4370      	muls	r0, r6
   15344:	1952      	adds	r2, r2, r5
   15346:	0c0e      	lsrs	r6, r1, #16
   15348:	18b2      	adds	r2, r6, r2
   1534a:	4295      	cmp	r5, r2
   1534c:	d903      	bls.n	15356 <__aeabi_ddiv+0x2de>
   1534e:	2580      	movs	r5, #128	; 0x80
   15350:	026d      	lsls	r5, r5, #9
   15352:	46ac      	mov	ip, r5
   15354:	4460      	add	r0, ip
   15356:	0c15      	lsrs	r5, r2, #16
   15358:	0409      	lsls	r1, r1, #16
   1535a:	0412      	lsls	r2, r2, #16
   1535c:	0c09      	lsrs	r1, r1, #16
   1535e:	1828      	adds	r0, r5, r0
   15360:	1852      	adds	r2, r2, r1
   15362:	4283      	cmp	r3, r0
   15364:	d200      	bcs.n	15368 <__aeabi_ddiv+0x2f0>
   15366:	e0ce      	b.n	15506 <__aeabi_ddiv+0x48e>
   15368:	d100      	bne.n	1536c <__aeabi_ddiv+0x2f4>
   1536a:	e0c8      	b.n	154fe <__aeabi_ddiv+0x486>
   1536c:	1a1d      	subs	r5, r3, r0
   1536e:	4653      	mov	r3, sl
   15370:	1a9e      	subs	r6, r3, r2
   15372:	45b2      	cmp	sl, r6
   15374:	4192      	sbcs	r2, r2
   15376:	4252      	negs	r2, r2
   15378:	1aab      	subs	r3, r5, r2
   1537a:	469a      	mov	sl, r3
   1537c:	4598      	cmp	r8, r3
   1537e:	d100      	bne.n	15382 <__aeabi_ddiv+0x30a>
   15380:	e117      	b.n	155b2 <__aeabi_ddiv+0x53a>
   15382:	0039      	movs	r1, r7
   15384:	0018      	movs	r0, r3
   15386:	f7fe f925 	bl	135d4 <__udivsi3>
   1538a:	9b01      	ldr	r3, [sp, #4]
   1538c:	0005      	movs	r5, r0
   1538e:	4343      	muls	r3, r0
   15390:	0039      	movs	r1, r7
   15392:	4650      	mov	r0, sl
   15394:	9304      	str	r3, [sp, #16]
   15396:	f7fe f9a3 	bl	136e0 <__aeabi_uidivmod>
   1539a:	9804      	ldr	r0, [sp, #16]
   1539c:	040b      	lsls	r3, r1, #16
   1539e:	0c31      	lsrs	r1, r6, #16
   153a0:	4319      	orrs	r1, r3
   153a2:	4288      	cmp	r0, r1
   153a4:	d909      	bls.n	153ba <__aeabi_ddiv+0x342>
   153a6:	4441      	add	r1, r8
   153a8:	1e6b      	subs	r3, r5, #1
   153aa:	4588      	cmp	r8, r1
   153ac:	d900      	bls.n	153b0 <__aeabi_ddiv+0x338>
   153ae:	e107      	b.n	155c0 <__aeabi_ddiv+0x548>
   153b0:	4288      	cmp	r0, r1
   153b2:	d800      	bhi.n	153b6 <__aeabi_ddiv+0x33e>
   153b4:	e104      	b.n	155c0 <__aeabi_ddiv+0x548>
   153b6:	3d02      	subs	r5, #2
   153b8:	4441      	add	r1, r8
   153ba:	9b04      	ldr	r3, [sp, #16]
   153bc:	1acb      	subs	r3, r1, r3
   153be:	0018      	movs	r0, r3
   153c0:	0039      	movs	r1, r7
   153c2:	9304      	str	r3, [sp, #16]
   153c4:	f7fe f906 	bl	135d4 <__udivsi3>
   153c8:	9b01      	ldr	r3, [sp, #4]
   153ca:	4682      	mov	sl, r0
   153cc:	4343      	muls	r3, r0
   153ce:	0039      	movs	r1, r7
   153d0:	9804      	ldr	r0, [sp, #16]
   153d2:	9301      	str	r3, [sp, #4]
   153d4:	f7fe f984 	bl	136e0 <__aeabi_uidivmod>
   153d8:	9801      	ldr	r0, [sp, #4]
   153da:	040b      	lsls	r3, r1, #16
   153dc:	0431      	lsls	r1, r6, #16
   153de:	0c09      	lsrs	r1, r1, #16
   153e0:	4319      	orrs	r1, r3
   153e2:	4288      	cmp	r0, r1
   153e4:	d90d      	bls.n	15402 <__aeabi_ddiv+0x38a>
   153e6:	4653      	mov	r3, sl
   153e8:	4441      	add	r1, r8
   153ea:	3b01      	subs	r3, #1
   153ec:	4588      	cmp	r8, r1
   153ee:	d900      	bls.n	153f2 <__aeabi_ddiv+0x37a>
   153f0:	e0e8      	b.n	155c4 <__aeabi_ddiv+0x54c>
   153f2:	4288      	cmp	r0, r1
   153f4:	d800      	bhi.n	153f8 <__aeabi_ddiv+0x380>
   153f6:	e0e5      	b.n	155c4 <__aeabi_ddiv+0x54c>
   153f8:	2302      	movs	r3, #2
   153fa:	425b      	negs	r3, r3
   153fc:	469c      	mov	ip, r3
   153fe:	4441      	add	r1, r8
   15400:	44e2      	add	sl, ip
   15402:	9b01      	ldr	r3, [sp, #4]
   15404:	042d      	lsls	r5, r5, #16
   15406:	1ace      	subs	r6, r1, r3
   15408:	4651      	mov	r1, sl
   1540a:	4329      	orrs	r1, r5
   1540c:	9d05      	ldr	r5, [sp, #20]
   1540e:	464f      	mov	r7, r9
   15410:	002a      	movs	r2, r5
   15412:	040b      	lsls	r3, r1, #16
   15414:	0c08      	lsrs	r0, r1, #16
   15416:	0c1b      	lsrs	r3, r3, #16
   15418:	435a      	muls	r2, r3
   1541a:	4345      	muls	r5, r0
   1541c:	437b      	muls	r3, r7
   1541e:	4378      	muls	r0, r7
   15420:	195b      	adds	r3, r3, r5
   15422:	0c17      	lsrs	r7, r2, #16
   15424:	18fb      	adds	r3, r7, r3
   15426:	429d      	cmp	r5, r3
   15428:	d903      	bls.n	15432 <__aeabi_ddiv+0x3ba>
   1542a:	2580      	movs	r5, #128	; 0x80
   1542c:	026d      	lsls	r5, r5, #9
   1542e:	46ac      	mov	ip, r5
   15430:	4460      	add	r0, ip
   15432:	0c1d      	lsrs	r5, r3, #16
   15434:	0412      	lsls	r2, r2, #16
   15436:	041b      	lsls	r3, r3, #16
   15438:	0c12      	lsrs	r2, r2, #16
   1543a:	1828      	adds	r0, r5, r0
   1543c:	189b      	adds	r3, r3, r2
   1543e:	4286      	cmp	r6, r0
   15440:	d200      	bcs.n	15444 <__aeabi_ddiv+0x3cc>
   15442:	e093      	b.n	1556c <__aeabi_ddiv+0x4f4>
   15444:	d100      	bne.n	15448 <__aeabi_ddiv+0x3d0>
   15446:	e08e      	b.n	15566 <__aeabi_ddiv+0x4ee>
   15448:	2301      	movs	r3, #1
   1544a:	4319      	orrs	r1, r3
   1544c:	4ba0      	ldr	r3, [pc, #640]	; (156d0 <__aeabi_ddiv+0x658>)
   1544e:	18e3      	adds	r3, r4, r3
   15450:	2b00      	cmp	r3, #0
   15452:	dc00      	bgt.n	15456 <__aeabi_ddiv+0x3de>
   15454:	e099      	b.n	1558a <__aeabi_ddiv+0x512>
   15456:	074a      	lsls	r2, r1, #29
   15458:	d000      	beq.n	1545c <__aeabi_ddiv+0x3e4>
   1545a:	e09e      	b.n	1559a <__aeabi_ddiv+0x522>
   1545c:	465a      	mov	r2, fp
   1545e:	01d2      	lsls	r2, r2, #7
   15460:	d506      	bpl.n	15470 <__aeabi_ddiv+0x3f8>
   15462:	465a      	mov	r2, fp
   15464:	4b9b      	ldr	r3, [pc, #620]	; (156d4 <__aeabi_ddiv+0x65c>)
   15466:	401a      	ands	r2, r3
   15468:	2380      	movs	r3, #128	; 0x80
   1546a:	4693      	mov	fp, r2
   1546c:	00db      	lsls	r3, r3, #3
   1546e:	18e3      	adds	r3, r4, r3
   15470:	4a99      	ldr	r2, [pc, #612]	; (156d8 <__aeabi_ddiv+0x660>)
   15472:	4293      	cmp	r3, r2
   15474:	dd68      	ble.n	15548 <__aeabi_ddiv+0x4d0>
   15476:	2301      	movs	r3, #1
   15478:	9a02      	ldr	r2, [sp, #8]
   1547a:	4c98      	ldr	r4, [pc, #608]	; (156dc <__aeabi_ddiv+0x664>)
   1547c:	401a      	ands	r2, r3
   1547e:	2300      	movs	r3, #0
   15480:	4694      	mov	ip, r2
   15482:	4698      	mov	r8, r3
   15484:	2200      	movs	r2, #0
   15486:	e6c5      	b.n	15214 <__aeabi_ddiv+0x19c>
   15488:	2280      	movs	r2, #128	; 0x80
   1548a:	464b      	mov	r3, r9
   1548c:	0312      	lsls	r2, r2, #12
   1548e:	4213      	tst	r3, r2
   15490:	d00a      	beq.n	154a8 <__aeabi_ddiv+0x430>
   15492:	465b      	mov	r3, fp
   15494:	4213      	tst	r3, r2
   15496:	d106      	bne.n	154a6 <__aeabi_ddiv+0x42e>
   15498:	431a      	orrs	r2, r3
   1549a:	0312      	lsls	r2, r2, #12
   1549c:	0b12      	lsrs	r2, r2, #12
   1549e:	46ac      	mov	ip, r5
   154a0:	4688      	mov	r8, r1
   154a2:	4c8e      	ldr	r4, [pc, #568]	; (156dc <__aeabi_ddiv+0x664>)
   154a4:	e6b6      	b.n	15214 <__aeabi_ddiv+0x19c>
   154a6:	464b      	mov	r3, r9
   154a8:	431a      	orrs	r2, r3
   154aa:	0312      	lsls	r2, r2, #12
   154ac:	0b12      	lsrs	r2, r2, #12
   154ae:	46bc      	mov	ip, r7
   154b0:	4c8a      	ldr	r4, [pc, #552]	; (156dc <__aeabi_ddiv+0x664>)
   154b2:	e6af      	b.n	15214 <__aeabi_ddiv+0x19c>
   154b4:	0003      	movs	r3, r0
   154b6:	465a      	mov	r2, fp
   154b8:	3b28      	subs	r3, #40	; 0x28
   154ba:	409a      	lsls	r2, r3
   154bc:	2300      	movs	r3, #0
   154be:	4691      	mov	r9, r2
   154c0:	4698      	mov	r8, r3
   154c2:	e657      	b.n	15174 <__aeabi_ddiv+0xfc>
   154c4:	4658      	mov	r0, fp
   154c6:	f001 f92b 	bl	16720 <__clzsi2>
   154ca:	3020      	adds	r0, #32
   154cc:	e640      	b.n	15150 <__aeabi_ddiv+0xd8>
   154ce:	0003      	movs	r3, r0
   154d0:	4652      	mov	r2, sl
   154d2:	3b28      	subs	r3, #40	; 0x28
   154d4:	409a      	lsls	r2, r3
   154d6:	2100      	movs	r1, #0
   154d8:	4693      	mov	fp, r2
   154da:	e677      	b.n	151cc <__aeabi_ddiv+0x154>
   154dc:	f001 f920 	bl	16720 <__clzsi2>
   154e0:	3020      	adds	r0, #32
   154e2:	e65f      	b.n	151a4 <__aeabi_ddiv+0x12c>
   154e4:	4588      	cmp	r8, r1
   154e6:	d200      	bcs.n	154ea <__aeabi_ddiv+0x472>
   154e8:	e6c7      	b.n	1527a <__aeabi_ddiv+0x202>
   154ea:	464b      	mov	r3, r9
   154ec:	07de      	lsls	r6, r3, #31
   154ee:	085d      	lsrs	r5, r3, #1
   154f0:	4643      	mov	r3, r8
   154f2:	085b      	lsrs	r3, r3, #1
   154f4:	431e      	orrs	r6, r3
   154f6:	4643      	mov	r3, r8
   154f8:	07db      	lsls	r3, r3, #31
   154fa:	469a      	mov	sl, r3
   154fc:	e6c2      	b.n	15284 <__aeabi_ddiv+0x20c>
   154fe:	2500      	movs	r5, #0
   15500:	4592      	cmp	sl, r2
   15502:	d300      	bcc.n	15506 <__aeabi_ddiv+0x48e>
   15504:	e733      	b.n	1536e <__aeabi_ddiv+0x2f6>
   15506:	9e03      	ldr	r6, [sp, #12]
   15508:	4659      	mov	r1, fp
   1550a:	46b4      	mov	ip, r6
   1550c:	44e2      	add	sl, ip
   1550e:	45b2      	cmp	sl, r6
   15510:	41ad      	sbcs	r5, r5
   15512:	426d      	negs	r5, r5
   15514:	4445      	add	r5, r8
   15516:	18eb      	adds	r3, r5, r3
   15518:	3901      	subs	r1, #1
   1551a:	4598      	cmp	r8, r3
   1551c:	d207      	bcs.n	1552e <__aeabi_ddiv+0x4b6>
   1551e:	4298      	cmp	r0, r3
   15520:	d900      	bls.n	15524 <__aeabi_ddiv+0x4ac>
   15522:	e07f      	b.n	15624 <__aeabi_ddiv+0x5ac>
   15524:	d100      	bne.n	15528 <__aeabi_ddiv+0x4b0>
   15526:	e0bc      	b.n	156a2 <__aeabi_ddiv+0x62a>
   15528:	1a1d      	subs	r5, r3, r0
   1552a:	468b      	mov	fp, r1
   1552c:	e71f      	b.n	1536e <__aeabi_ddiv+0x2f6>
   1552e:	4598      	cmp	r8, r3
   15530:	d1fa      	bne.n	15528 <__aeabi_ddiv+0x4b0>
   15532:	9d03      	ldr	r5, [sp, #12]
   15534:	4555      	cmp	r5, sl
   15536:	d9f2      	bls.n	1551e <__aeabi_ddiv+0x4a6>
   15538:	4643      	mov	r3, r8
   1553a:	468b      	mov	fp, r1
   1553c:	1a1d      	subs	r5, r3, r0
   1553e:	e716      	b.n	1536e <__aeabi_ddiv+0x2f6>
   15540:	469b      	mov	fp, r3
   15542:	e6ca      	b.n	152da <__aeabi_ddiv+0x262>
   15544:	0015      	movs	r5, r2
   15546:	e6e7      	b.n	15318 <__aeabi_ddiv+0x2a0>
   15548:	465a      	mov	r2, fp
   1554a:	08c9      	lsrs	r1, r1, #3
   1554c:	0752      	lsls	r2, r2, #29
   1554e:	430a      	orrs	r2, r1
   15550:	055b      	lsls	r3, r3, #21
   15552:	4690      	mov	r8, r2
   15554:	0d5c      	lsrs	r4, r3, #21
   15556:	465a      	mov	r2, fp
   15558:	2301      	movs	r3, #1
   1555a:	9902      	ldr	r1, [sp, #8]
   1555c:	0252      	lsls	r2, r2, #9
   1555e:	4019      	ands	r1, r3
   15560:	0b12      	lsrs	r2, r2, #12
   15562:	468c      	mov	ip, r1
   15564:	e656      	b.n	15214 <__aeabi_ddiv+0x19c>
   15566:	2b00      	cmp	r3, #0
   15568:	d100      	bne.n	1556c <__aeabi_ddiv+0x4f4>
   1556a:	e76f      	b.n	1544c <__aeabi_ddiv+0x3d4>
   1556c:	4446      	add	r6, r8
   1556e:	1e4a      	subs	r2, r1, #1
   15570:	45b0      	cmp	r8, r6
   15572:	d929      	bls.n	155c8 <__aeabi_ddiv+0x550>
   15574:	0011      	movs	r1, r2
   15576:	4286      	cmp	r6, r0
   15578:	d000      	beq.n	1557c <__aeabi_ddiv+0x504>
   1557a:	e765      	b.n	15448 <__aeabi_ddiv+0x3d0>
   1557c:	9a03      	ldr	r2, [sp, #12]
   1557e:	4293      	cmp	r3, r2
   15580:	d000      	beq.n	15584 <__aeabi_ddiv+0x50c>
   15582:	e761      	b.n	15448 <__aeabi_ddiv+0x3d0>
   15584:	e762      	b.n	1544c <__aeabi_ddiv+0x3d4>
   15586:	2101      	movs	r1, #1
   15588:	4249      	negs	r1, r1
   1558a:	2001      	movs	r0, #1
   1558c:	1ac2      	subs	r2, r0, r3
   1558e:	2a38      	cmp	r2, #56	; 0x38
   15590:	dd21      	ble.n	155d6 <__aeabi_ddiv+0x55e>
   15592:	9b02      	ldr	r3, [sp, #8]
   15594:	4003      	ands	r3, r0
   15596:	469c      	mov	ip, r3
   15598:	e638      	b.n	1520c <__aeabi_ddiv+0x194>
   1559a:	220f      	movs	r2, #15
   1559c:	400a      	ands	r2, r1
   1559e:	2a04      	cmp	r2, #4
   155a0:	d100      	bne.n	155a4 <__aeabi_ddiv+0x52c>
   155a2:	e75b      	b.n	1545c <__aeabi_ddiv+0x3e4>
   155a4:	000a      	movs	r2, r1
   155a6:	1d11      	adds	r1, r2, #4
   155a8:	4291      	cmp	r1, r2
   155aa:	4192      	sbcs	r2, r2
   155ac:	4252      	negs	r2, r2
   155ae:	4493      	add	fp, r2
   155b0:	e754      	b.n	1545c <__aeabi_ddiv+0x3e4>
   155b2:	4b47      	ldr	r3, [pc, #284]	; (156d0 <__aeabi_ddiv+0x658>)
   155b4:	18e3      	adds	r3, r4, r3
   155b6:	2b00      	cmp	r3, #0
   155b8:	dde5      	ble.n	15586 <__aeabi_ddiv+0x50e>
   155ba:	2201      	movs	r2, #1
   155bc:	4252      	negs	r2, r2
   155be:	e7f2      	b.n	155a6 <__aeabi_ddiv+0x52e>
   155c0:	001d      	movs	r5, r3
   155c2:	e6fa      	b.n	153ba <__aeabi_ddiv+0x342>
   155c4:	469a      	mov	sl, r3
   155c6:	e71c      	b.n	15402 <__aeabi_ddiv+0x38a>
   155c8:	42b0      	cmp	r0, r6
   155ca:	d839      	bhi.n	15640 <__aeabi_ddiv+0x5c8>
   155cc:	d06e      	beq.n	156ac <__aeabi_ddiv+0x634>
   155ce:	0011      	movs	r1, r2
   155d0:	e73a      	b.n	15448 <__aeabi_ddiv+0x3d0>
   155d2:	9302      	str	r3, [sp, #8]
   155d4:	e73a      	b.n	1544c <__aeabi_ddiv+0x3d4>
   155d6:	2a1f      	cmp	r2, #31
   155d8:	dc3c      	bgt.n	15654 <__aeabi_ddiv+0x5dc>
   155da:	2320      	movs	r3, #32
   155dc:	1a9b      	subs	r3, r3, r2
   155de:	000c      	movs	r4, r1
   155e0:	4658      	mov	r0, fp
   155e2:	4099      	lsls	r1, r3
   155e4:	4098      	lsls	r0, r3
   155e6:	1e4b      	subs	r3, r1, #1
   155e8:	4199      	sbcs	r1, r3
   155ea:	465b      	mov	r3, fp
   155ec:	40d4      	lsrs	r4, r2
   155ee:	40d3      	lsrs	r3, r2
   155f0:	4320      	orrs	r0, r4
   155f2:	4308      	orrs	r0, r1
   155f4:	001a      	movs	r2, r3
   155f6:	0743      	lsls	r3, r0, #29
   155f8:	d009      	beq.n	1560e <__aeabi_ddiv+0x596>
   155fa:	230f      	movs	r3, #15
   155fc:	4003      	ands	r3, r0
   155fe:	2b04      	cmp	r3, #4
   15600:	d005      	beq.n	1560e <__aeabi_ddiv+0x596>
   15602:	0001      	movs	r1, r0
   15604:	1d08      	adds	r0, r1, #4
   15606:	4288      	cmp	r0, r1
   15608:	419b      	sbcs	r3, r3
   1560a:	425b      	negs	r3, r3
   1560c:	18d2      	adds	r2, r2, r3
   1560e:	0213      	lsls	r3, r2, #8
   15610:	d53a      	bpl.n	15688 <__aeabi_ddiv+0x610>
   15612:	2301      	movs	r3, #1
   15614:	9a02      	ldr	r2, [sp, #8]
   15616:	2401      	movs	r4, #1
   15618:	401a      	ands	r2, r3
   1561a:	2300      	movs	r3, #0
   1561c:	4694      	mov	ip, r2
   1561e:	4698      	mov	r8, r3
   15620:	2200      	movs	r2, #0
   15622:	e5f7      	b.n	15214 <__aeabi_ddiv+0x19c>
   15624:	2102      	movs	r1, #2
   15626:	4249      	negs	r1, r1
   15628:	468c      	mov	ip, r1
   1562a:	9d03      	ldr	r5, [sp, #12]
   1562c:	44e3      	add	fp, ip
   1562e:	46ac      	mov	ip, r5
   15630:	44e2      	add	sl, ip
   15632:	45aa      	cmp	sl, r5
   15634:	41ad      	sbcs	r5, r5
   15636:	426d      	negs	r5, r5
   15638:	4445      	add	r5, r8
   1563a:	18ed      	adds	r5, r5, r3
   1563c:	1a2d      	subs	r5, r5, r0
   1563e:	e696      	b.n	1536e <__aeabi_ddiv+0x2f6>
   15640:	1e8a      	subs	r2, r1, #2
   15642:	9903      	ldr	r1, [sp, #12]
   15644:	004d      	lsls	r5, r1, #1
   15646:	428d      	cmp	r5, r1
   15648:	4189      	sbcs	r1, r1
   1564a:	4249      	negs	r1, r1
   1564c:	4441      	add	r1, r8
   1564e:	1876      	adds	r6, r6, r1
   15650:	9503      	str	r5, [sp, #12]
   15652:	e78f      	b.n	15574 <__aeabi_ddiv+0x4fc>
   15654:	201f      	movs	r0, #31
   15656:	4240      	negs	r0, r0
   15658:	1ac3      	subs	r3, r0, r3
   1565a:	4658      	mov	r0, fp
   1565c:	40d8      	lsrs	r0, r3
   1565e:	0003      	movs	r3, r0
   15660:	2a20      	cmp	r2, #32
   15662:	d028      	beq.n	156b6 <__aeabi_ddiv+0x63e>
   15664:	2040      	movs	r0, #64	; 0x40
   15666:	465d      	mov	r5, fp
   15668:	1a82      	subs	r2, r0, r2
   1566a:	4095      	lsls	r5, r2
   1566c:	4329      	orrs	r1, r5
   1566e:	1e4a      	subs	r2, r1, #1
   15670:	4191      	sbcs	r1, r2
   15672:	4319      	orrs	r1, r3
   15674:	2307      	movs	r3, #7
   15676:	2200      	movs	r2, #0
   15678:	400b      	ands	r3, r1
   1567a:	d009      	beq.n	15690 <__aeabi_ddiv+0x618>
   1567c:	230f      	movs	r3, #15
   1567e:	2200      	movs	r2, #0
   15680:	400b      	ands	r3, r1
   15682:	0008      	movs	r0, r1
   15684:	2b04      	cmp	r3, #4
   15686:	d1bd      	bne.n	15604 <__aeabi_ddiv+0x58c>
   15688:	0001      	movs	r1, r0
   1568a:	0753      	lsls	r3, r2, #29
   1568c:	0252      	lsls	r2, r2, #9
   1568e:	0b12      	lsrs	r2, r2, #12
   15690:	08c9      	lsrs	r1, r1, #3
   15692:	4319      	orrs	r1, r3
   15694:	2301      	movs	r3, #1
   15696:	4688      	mov	r8, r1
   15698:	9902      	ldr	r1, [sp, #8]
   1569a:	2400      	movs	r4, #0
   1569c:	4019      	ands	r1, r3
   1569e:	468c      	mov	ip, r1
   156a0:	e5b8      	b.n	15214 <__aeabi_ddiv+0x19c>
   156a2:	4552      	cmp	r2, sl
   156a4:	d8be      	bhi.n	15624 <__aeabi_ddiv+0x5ac>
   156a6:	468b      	mov	fp, r1
   156a8:	2500      	movs	r5, #0
   156aa:	e660      	b.n	1536e <__aeabi_ddiv+0x2f6>
   156ac:	9d03      	ldr	r5, [sp, #12]
   156ae:	429d      	cmp	r5, r3
   156b0:	d3c6      	bcc.n	15640 <__aeabi_ddiv+0x5c8>
   156b2:	0011      	movs	r1, r2
   156b4:	e762      	b.n	1557c <__aeabi_ddiv+0x504>
   156b6:	2500      	movs	r5, #0
   156b8:	e7d8      	b.n	1566c <__aeabi_ddiv+0x5f4>
   156ba:	2280      	movs	r2, #128	; 0x80
   156bc:	465b      	mov	r3, fp
   156be:	0312      	lsls	r2, r2, #12
   156c0:	431a      	orrs	r2, r3
   156c2:	9b01      	ldr	r3, [sp, #4]
   156c4:	0312      	lsls	r2, r2, #12
   156c6:	0b12      	lsrs	r2, r2, #12
   156c8:	469c      	mov	ip, r3
   156ca:	4688      	mov	r8, r1
   156cc:	4c03      	ldr	r4, [pc, #12]	; (156dc <__aeabi_ddiv+0x664>)
   156ce:	e5a1      	b.n	15214 <__aeabi_ddiv+0x19c>
   156d0:	000003ff 	.word	0x000003ff
   156d4:	feffffff 	.word	0xfeffffff
   156d8:	000007fe 	.word	0x000007fe
   156dc:	000007ff 	.word	0x000007ff

000156e0 <__eqdf2>:
   156e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   156e2:	464f      	mov	r7, r9
   156e4:	4646      	mov	r6, r8
   156e6:	46d6      	mov	lr, sl
   156e8:	005c      	lsls	r4, r3, #1
   156ea:	b5c0      	push	{r6, r7, lr}
   156ec:	031f      	lsls	r7, r3, #12
   156ee:	0fdb      	lsrs	r3, r3, #31
   156f0:	469a      	mov	sl, r3
   156f2:	4b17      	ldr	r3, [pc, #92]	; (15750 <__eqdf2+0x70>)
   156f4:	030e      	lsls	r6, r1, #12
   156f6:	004d      	lsls	r5, r1, #1
   156f8:	4684      	mov	ip, r0
   156fa:	4680      	mov	r8, r0
   156fc:	0b36      	lsrs	r6, r6, #12
   156fe:	0d6d      	lsrs	r5, r5, #21
   15700:	0fc9      	lsrs	r1, r1, #31
   15702:	4691      	mov	r9, r2
   15704:	0b3f      	lsrs	r7, r7, #12
   15706:	0d64      	lsrs	r4, r4, #21
   15708:	2001      	movs	r0, #1
   1570a:	429d      	cmp	r5, r3
   1570c:	d008      	beq.n	15720 <__eqdf2+0x40>
   1570e:	429c      	cmp	r4, r3
   15710:	d001      	beq.n	15716 <__eqdf2+0x36>
   15712:	42a5      	cmp	r5, r4
   15714:	d00b      	beq.n	1572e <__eqdf2+0x4e>
   15716:	bc1c      	pop	{r2, r3, r4}
   15718:	4690      	mov	r8, r2
   1571a:	4699      	mov	r9, r3
   1571c:	46a2      	mov	sl, r4
   1571e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15720:	4663      	mov	r3, ip
   15722:	4333      	orrs	r3, r6
   15724:	d1f7      	bne.n	15716 <__eqdf2+0x36>
   15726:	42ac      	cmp	r4, r5
   15728:	d1f5      	bne.n	15716 <__eqdf2+0x36>
   1572a:	433a      	orrs	r2, r7
   1572c:	d1f3      	bne.n	15716 <__eqdf2+0x36>
   1572e:	2001      	movs	r0, #1
   15730:	42be      	cmp	r6, r7
   15732:	d1f0      	bne.n	15716 <__eqdf2+0x36>
   15734:	45c8      	cmp	r8, r9
   15736:	d1ee      	bne.n	15716 <__eqdf2+0x36>
   15738:	4551      	cmp	r1, sl
   1573a:	d007      	beq.n	1574c <__eqdf2+0x6c>
   1573c:	2d00      	cmp	r5, #0
   1573e:	d1ea      	bne.n	15716 <__eqdf2+0x36>
   15740:	4663      	mov	r3, ip
   15742:	431e      	orrs	r6, r3
   15744:	0030      	movs	r0, r6
   15746:	1e46      	subs	r6, r0, #1
   15748:	41b0      	sbcs	r0, r6
   1574a:	e7e4      	b.n	15716 <__eqdf2+0x36>
   1574c:	2000      	movs	r0, #0
   1574e:	e7e2      	b.n	15716 <__eqdf2+0x36>
   15750:	000007ff 	.word	0x000007ff

00015754 <__gedf2>:
   15754:	b5f0      	push	{r4, r5, r6, r7, lr}
   15756:	4645      	mov	r5, r8
   15758:	46de      	mov	lr, fp
   1575a:	4657      	mov	r7, sl
   1575c:	464e      	mov	r6, r9
   1575e:	b5e0      	push	{r5, r6, r7, lr}
   15760:	031f      	lsls	r7, r3, #12
   15762:	0b3d      	lsrs	r5, r7, #12
   15764:	4f2c      	ldr	r7, [pc, #176]	; (15818 <__gedf2+0xc4>)
   15766:	030e      	lsls	r6, r1, #12
   15768:	004c      	lsls	r4, r1, #1
   1576a:	46ab      	mov	fp, r5
   1576c:	005d      	lsls	r5, r3, #1
   1576e:	4684      	mov	ip, r0
   15770:	0b36      	lsrs	r6, r6, #12
   15772:	0d64      	lsrs	r4, r4, #21
   15774:	0fc9      	lsrs	r1, r1, #31
   15776:	4690      	mov	r8, r2
   15778:	0d6d      	lsrs	r5, r5, #21
   1577a:	0fdb      	lsrs	r3, r3, #31
   1577c:	42bc      	cmp	r4, r7
   1577e:	d02a      	beq.n	157d6 <__gedf2+0x82>
   15780:	4f25      	ldr	r7, [pc, #148]	; (15818 <__gedf2+0xc4>)
   15782:	42bd      	cmp	r5, r7
   15784:	d02d      	beq.n	157e2 <__gedf2+0x8e>
   15786:	2c00      	cmp	r4, #0
   15788:	d10f      	bne.n	157aa <__gedf2+0x56>
   1578a:	4330      	orrs	r0, r6
   1578c:	0007      	movs	r7, r0
   1578e:	4681      	mov	r9, r0
   15790:	4278      	negs	r0, r7
   15792:	4178      	adcs	r0, r7
   15794:	b2c0      	uxtb	r0, r0
   15796:	2d00      	cmp	r5, #0
   15798:	d117      	bne.n	157ca <__gedf2+0x76>
   1579a:	465f      	mov	r7, fp
   1579c:	433a      	orrs	r2, r7
   1579e:	d114      	bne.n	157ca <__gedf2+0x76>
   157a0:	464b      	mov	r3, r9
   157a2:	2000      	movs	r0, #0
   157a4:	2b00      	cmp	r3, #0
   157a6:	d00a      	beq.n	157be <__gedf2+0x6a>
   157a8:	e006      	b.n	157b8 <__gedf2+0x64>
   157aa:	2d00      	cmp	r5, #0
   157ac:	d102      	bne.n	157b4 <__gedf2+0x60>
   157ae:	4658      	mov	r0, fp
   157b0:	4302      	orrs	r2, r0
   157b2:	d001      	beq.n	157b8 <__gedf2+0x64>
   157b4:	4299      	cmp	r1, r3
   157b6:	d018      	beq.n	157ea <__gedf2+0x96>
   157b8:	4248      	negs	r0, r1
   157ba:	2101      	movs	r1, #1
   157bc:	4308      	orrs	r0, r1
   157be:	bc3c      	pop	{r2, r3, r4, r5}
   157c0:	4690      	mov	r8, r2
   157c2:	4699      	mov	r9, r3
   157c4:	46a2      	mov	sl, r4
   157c6:	46ab      	mov	fp, r5
   157c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157ca:	2800      	cmp	r0, #0
   157cc:	d0f2      	beq.n	157b4 <__gedf2+0x60>
   157ce:	2001      	movs	r0, #1
   157d0:	3b01      	subs	r3, #1
   157d2:	4318      	orrs	r0, r3
   157d4:	e7f3      	b.n	157be <__gedf2+0x6a>
   157d6:	0037      	movs	r7, r6
   157d8:	4307      	orrs	r7, r0
   157da:	d0d1      	beq.n	15780 <__gedf2+0x2c>
   157dc:	2002      	movs	r0, #2
   157de:	4240      	negs	r0, r0
   157e0:	e7ed      	b.n	157be <__gedf2+0x6a>
   157e2:	465f      	mov	r7, fp
   157e4:	4317      	orrs	r7, r2
   157e6:	d0ce      	beq.n	15786 <__gedf2+0x32>
   157e8:	e7f8      	b.n	157dc <__gedf2+0x88>
   157ea:	42ac      	cmp	r4, r5
   157ec:	dce4      	bgt.n	157b8 <__gedf2+0x64>
   157ee:	da03      	bge.n	157f8 <__gedf2+0xa4>
   157f0:	1e48      	subs	r0, r1, #1
   157f2:	2101      	movs	r1, #1
   157f4:	4308      	orrs	r0, r1
   157f6:	e7e2      	b.n	157be <__gedf2+0x6a>
   157f8:	455e      	cmp	r6, fp
   157fa:	d8dd      	bhi.n	157b8 <__gedf2+0x64>
   157fc:	d006      	beq.n	1580c <__gedf2+0xb8>
   157fe:	2000      	movs	r0, #0
   15800:	455e      	cmp	r6, fp
   15802:	d2dc      	bcs.n	157be <__gedf2+0x6a>
   15804:	2301      	movs	r3, #1
   15806:	1e48      	subs	r0, r1, #1
   15808:	4318      	orrs	r0, r3
   1580a:	e7d8      	b.n	157be <__gedf2+0x6a>
   1580c:	45c4      	cmp	ip, r8
   1580e:	d8d3      	bhi.n	157b8 <__gedf2+0x64>
   15810:	2000      	movs	r0, #0
   15812:	45c4      	cmp	ip, r8
   15814:	d3f6      	bcc.n	15804 <__gedf2+0xb0>
   15816:	e7d2      	b.n	157be <__gedf2+0x6a>
   15818:	000007ff 	.word	0x000007ff

0001581c <__ledf2>:
   1581c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1581e:	464e      	mov	r6, r9
   15820:	4645      	mov	r5, r8
   15822:	46de      	mov	lr, fp
   15824:	4657      	mov	r7, sl
   15826:	005c      	lsls	r4, r3, #1
   15828:	b5e0      	push	{r5, r6, r7, lr}
   1582a:	031f      	lsls	r7, r3, #12
   1582c:	0fdb      	lsrs	r3, r3, #31
   1582e:	4699      	mov	r9, r3
   15830:	4b2a      	ldr	r3, [pc, #168]	; (158dc <__ledf2+0xc0>)
   15832:	030e      	lsls	r6, r1, #12
   15834:	004d      	lsls	r5, r1, #1
   15836:	0fc9      	lsrs	r1, r1, #31
   15838:	4684      	mov	ip, r0
   1583a:	0b36      	lsrs	r6, r6, #12
   1583c:	0d6d      	lsrs	r5, r5, #21
   1583e:	468b      	mov	fp, r1
   15840:	4690      	mov	r8, r2
   15842:	0b3f      	lsrs	r7, r7, #12
   15844:	0d64      	lsrs	r4, r4, #21
   15846:	429d      	cmp	r5, r3
   15848:	d020      	beq.n	1588c <__ledf2+0x70>
   1584a:	4b24      	ldr	r3, [pc, #144]	; (158dc <__ledf2+0xc0>)
   1584c:	429c      	cmp	r4, r3
   1584e:	d022      	beq.n	15896 <__ledf2+0x7a>
   15850:	2d00      	cmp	r5, #0
   15852:	d112      	bne.n	1587a <__ledf2+0x5e>
   15854:	4330      	orrs	r0, r6
   15856:	4243      	negs	r3, r0
   15858:	4143      	adcs	r3, r0
   1585a:	b2db      	uxtb	r3, r3
   1585c:	2c00      	cmp	r4, #0
   1585e:	d01f      	beq.n	158a0 <__ledf2+0x84>
   15860:	2b00      	cmp	r3, #0
   15862:	d00c      	beq.n	1587e <__ledf2+0x62>
   15864:	464b      	mov	r3, r9
   15866:	2001      	movs	r0, #1
   15868:	3b01      	subs	r3, #1
   1586a:	4303      	orrs	r3, r0
   1586c:	0018      	movs	r0, r3
   1586e:	bc3c      	pop	{r2, r3, r4, r5}
   15870:	4690      	mov	r8, r2
   15872:	4699      	mov	r9, r3
   15874:	46a2      	mov	sl, r4
   15876:	46ab      	mov	fp, r5
   15878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1587a:	2c00      	cmp	r4, #0
   1587c:	d016      	beq.n	158ac <__ledf2+0x90>
   1587e:	45cb      	cmp	fp, r9
   15880:	d017      	beq.n	158b2 <__ledf2+0x96>
   15882:	465b      	mov	r3, fp
   15884:	4259      	negs	r1, r3
   15886:	2301      	movs	r3, #1
   15888:	430b      	orrs	r3, r1
   1588a:	e7ef      	b.n	1586c <__ledf2+0x50>
   1588c:	0031      	movs	r1, r6
   1588e:	2302      	movs	r3, #2
   15890:	4301      	orrs	r1, r0
   15892:	d1eb      	bne.n	1586c <__ledf2+0x50>
   15894:	e7d9      	b.n	1584a <__ledf2+0x2e>
   15896:	0039      	movs	r1, r7
   15898:	2302      	movs	r3, #2
   1589a:	4311      	orrs	r1, r2
   1589c:	d1e6      	bne.n	1586c <__ledf2+0x50>
   1589e:	e7d7      	b.n	15850 <__ledf2+0x34>
   158a0:	433a      	orrs	r2, r7
   158a2:	d1dd      	bne.n	15860 <__ledf2+0x44>
   158a4:	2300      	movs	r3, #0
   158a6:	2800      	cmp	r0, #0
   158a8:	d0e0      	beq.n	1586c <__ledf2+0x50>
   158aa:	e7ea      	b.n	15882 <__ledf2+0x66>
   158ac:	433a      	orrs	r2, r7
   158ae:	d1e6      	bne.n	1587e <__ledf2+0x62>
   158b0:	e7e7      	b.n	15882 <__ledf2+0x66>
   158b2:	42a5      	cmp	r5, r4
   158b4:	dce5      	bgt.n	15882 <__ledf2+0x66>
   158b6:	db05      	blt.n	158c4 <__ledf2+0xa8>
   158b8:	42be      	cmp	r6, r7
   158ba:	d8e2      	bhi.n	15882 <__ledf2+0x66>
   158bc:	d007      	beq.n	158ce <__ledf2+0xb2>
   158be:	2300      	movs	r3, #0
   158c0:	42be      	cmp	r6, r7
   158c2:	d2d3      	bcs.n	1586c <__ledf2+0x50>
   158c4:	4659      	mov	r1, fp
   158c6:	2301      	movs	r3, #1
   158c8:	3901      	subs	r1, #1
   158ca:	430b      	orrs	r3, r1
   158cc:	e7ce      	b.n	1586c <__ledf2+0x50>
   158ce:	45c4      	cmp	ip, r8
   158d0:	d8d7      	bhi.n	15882 <__ledf2+0x66>
   158d2:	2300      	movs	r3, #0
   158d4:	45c4      	cmp	ip, r8
   158d6:	d3f5      	bcc.n	158c4 <__ledf2+0xa8>
   158d8:	e7c8      	b.n	1586c <__ledf2+0x50>
   158da:	46c0      	nop			; (mov r8, r8)
   158dc:	000007ff 	.word	0x000007ff

000158e0 <__aeabi_dmul>:
   158e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   158e2:	4657      	mov	r7, sl
   158e4:	4645      	mov	r5, r8
   158e6:	46de      	mov	lr, fp
   158e8:	464e      	mov	r6, r9
   158ea:	b5e0      	push	{r5, r6, r7, lr}
   158ec:	030c      	lsls	r4, r1, #12
   158ee:	4698      	mov	r8, r3
   158f0:	004e      	lsls	r6, r1, #1
   158f2:	0b23      	lsrs	r3, r4, #12
   158f4:	b087      	sub	sp, #28
   158f6:	0007      	movs	r7, r0
   158f8:	4692      	mov	sl, r2
   158fa:	469b      	mov	fp, r3
   158fc:	0d76      	lsrs	r6, r6, #21
   158fe:	0fcd      	lsrs	r5, r1, #31
   15900:	2e00      	cmp	r6, #0
   15902:	d06b      	beq.n	159dc <__aeabi_dmul+0xfc>
   15904:	4b6d      	ldr	r3, [pc, #436]	; (15abc <__aeabi_dmul+0x1dc>)
   15906:	429e      	cmp	r6, r3
   15908:	d035      	beq.n	15976 <__aeabi_dmul+0x96>
   1590a:	2480      	movs	r4, #128	; 0x80
   1590c:	465b      	mov	r3, fp
   1590e:	0f42      	lsrs	r2, r0, #29
   15910:	0424      	lsls	r4, r4, #16
   15912:	00db      	lsls	r3, r3, #3
   15914:	4314      	orrs	r4, r2
   15916:	431c      	orrs	r4, r3
   15918:	00c3      	lsls	r3, r0, #3
   1591a:	4699      	mov	r9, r3
   1591c:	4b68      	ldr	r3, [pc, #416]	; (15ac0 <__aeabi_dmul+0x1e0>)
   1591e:	46a3      	mov	fp, r4
   15920:	469c      	mov	ip, r3
   15922:	2300      	movs	r3, #0
   15924:	2700      	movs	r7, #0
   15926:	4466      	add	r6, ip
   15928:	9302      	str	r3, [sp, #8]
   1592a:	4643      	mov	r3, r8
   1592c:	031c      	lsls	r4, r3, #12
   1592e:	005a      	lsls	r2, r3, #1
   15930:	0fdb      	lsrs	r3, r3, #31
   15932:	4650      	mov	r0, sl
   15934:	0b24      	lsrs	r4, r4, #12
   15936:	0d52      	lsrs	r2, r2, #21
   15938:	4698      	mov	r8, r3
   1593a:	d100      	bne.n	1593e <__aeabi_dmul+0x5e>
   1593c:	e076      	b.n	15a2c <__aeabi_dmul+0x14c>
   1593e:	4b5f      	ldr	r3, [pc, #380]	; (15abc <__aeabi_dmul+0x1dc>)
   15940:	429a      	cmp	r2, r3
   15942:	d06d      	beq.n	15a20 <__aeabi_dmul+0x140>
   15944:	2380      	movs	r3, #128	; 0x80
   15946:	0f41      	lsrs	r1, r0, #29
   15948:	041b      	lsls	r3, r3, #16
   1594a:	430b      	orrs	r3, r1
   1594c:	495c      	ldr	r1, [pc, #368]	; (15ac0 <__aeabi_dmul+0x1e0>)
   1594e:	00e4      	lsls	r4, r4, #3
   15950:	468c      	mov	ip, r1
   15952:	431c      	orrs	r4, r3
   15954:	00c3      	lsls	r3, r0, #3
   15956:	2000      	movs	r0, #0
   15958:	4462      	add	r2, ip
   1595a:	4641      	mov	r1, r8
   1595c:	18b6      	adds	r6, r6, r2
   1595e:	4069      	eors	r1, r5
   15960:	1c72      	adds	r2, r6, #1
   15962:	9101      	str	r1, [sp, #4]
   15964:	4694      	mov	ip, r2
   15966:	4307      	orrs	r7, r0
   15968:	2f0f      	cmp	r7, #15
   1596a:	d900      	bls.n	1596e <__aeabi_dmul+0x8e>
   1596c:	e0b0      	b.n	15ad0 <__aeabi_dmul+0x1f0>
   1596e:	4a55      	ldr	r2, [pc, #340]	; (15ac4 <__aeabi_dmul+0x1e4>)
   15970:	00bf      	lsls	r7, r7, #2
   15972:	59d2      	ldr	r2, [r2, r7]
   15974:	4697      	mov	pc, r2
   15976:	465b      	mov	r3, fp
   15978:	4303      	orrs	r3, r0
   1597a:	4699      	mov	r9, r3
   1597c:	d000      	beq.n	15980 <__aeabi_dmul+0xa0>
   1597e:	e087      	b.n	15a90 <__aeabi_dmul+0x1b0>
   15980:	2300      	movs	r3, #0
   15982:	469b      	mov	fp, r3
   15984:	3302      	adds	r3, #2
   15986:	2708      	movs	r7, #8
   15988:	9302      	str	r3, [sp, #8]
   1598a:	e7ce      	b.n	1592a <__aeabi_dmul+0x4a>
   1598c:	4642      	mov	r2, r8
   1598e:	9201      	str	r2, [sp, #4]
   15990:	2802      	cmp	r0, #2
   15992:	d067      	beq.n	15a64 <__aeabi_dmul+0x184>
   15994:	2803      	cmp	r0, #3
   15996:	d100      	bne.n	1599a <__aeabi_dmul+0xba>
   15998:	e20e      	b.n	15db8 <__aeabi_dmul+0x4d8>
   1599a:	2801      	cmp	r0, #1
   1599c:	d000      	beq.n	159a0 <__aeabi_dmul+0xc0>
   1599e:	e162      	b.n	15c66 <__aeabi_dmul+0x386>
   159a0:	2300      	movs	r3, #0
   159a2:	2400      	movs	r4, #0
   159a4:	2200      	movs	r2, #0
   159a6:	4699      	mov	r9, r3
   159a8:	9901      	ldr	r1, [sp, #4]
   159aa:	4001      	ands	r1, r0
   159ac:	b2cd      	uxtb	r5, r1
   159ae:	2100      	movs	r1, #0
   159b0:	0312      	lsls	r2, r2, #12
   159b2:	0d0b      	lsrs	r3, r1, #20
   159b4:	0b12      	lsrs	r2, r2, #12
   159b6:	051b      	lsls	r3, r3, #20
   159b8:	4313      	orrs	r3, r2
   159ba:	4a43      	ldr	r2, [pc, #268]	; (15ac8 <__aeabi_dmul+0x1e8>)
   159bc:	0524      	lsls	r4, r4, #20
   159be:	4013      	ands	r3, r2
   159c0:	431c      	orrs	r4, r3
   159c2:	0064      	lsls	r4, r4, #1
   159c4:	07ed      	lsls	r5, r5, #31
   159c6:	0864      	lsrs	r4, r4, #1
   159c8:	432c      	orrs	r4, r5
   159ca:	4648      	mov	r0, r9
   159cc:	0021      	movs	r1, r4
   159ce:	b007      	add	sp, #28
   159d0:	bc3c      	pop	{r2, r3, r4, r5}
   159d2:	4690      	mov	r8, r2
   159d4:	4699      	mov	r9, r3
   159d6:	46a2      	mov	sl, r4
   159d8:	46ab      	mov	fp, r5
   159da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159dc:	4303      	orrs	r3, r0
   159de:	4699      	mov	r9, r3
   159e0:	d04f      	beq.n	15a82 <__aeabi_dmul+0x1a2>
   159e2:	465b      	mov	r3, fp
   159e4:	2b00      	cmp	r3, #0
   159e6:	d100      	bne.n	159ea <__aeabi_dmul+0x10a>
   159e8:	e189      	b.n	15cfe <__aeabi_dmul+0x41e>
   159ea:	4658      	mov	r0, fp
   159ec:	f000 fe98 	bl	16720 <__clzsi2>
   159f0:	0003      	movs	r3, r0
   159f2:	3b0b      	subs	r3, #11
   159f4:	2b1c      	cmp	r3, #28
   159f6:	dd00      	ble.n	159fa <__aeabi_dmul+0x11a>
   159f8:	e17a      	b.n	15cf0 <__aeabi_dmul+0x410>
   159fa:	221d      	movs	r2, #29
   159fc:	1ad3      	subs	r3, r2, r3
   159fe:	003a      	movs	r2, r7
   15a00:	0001      	movs	r1, r0
   15a02:	465c      	mov	r4, fp
   15a04:	40da      	lsrs	r2, r3
   15a06:	3908      	subs	r1, #8
   15a08:	408c      	lsls	r4, r1
   15a0a:	0013      	movs	r3, r2
   15a0c:	408f      	lsls	r7, r1
   15a0e:	4323      	orrs	r3, r4
   15a10:	469b      	mov	fp, r3
   15a12:	46b9      	mov	r9, r7
   15a14:	2300      	movs	r3, #0
   15a16:	4e2d      	ldr	r6, [pc, #180]	; (15acc <__aeabi_dmul+0x1ec>)
   15a18:	2700      	movs	r7, #0
   15a1a:	1a36      	subs	r6, r6, r0
   15a1c:	9302      	str	r3, [sp, #8]
   15a1e:	e784      	b.n	1592a <__aeabi_dmul+0x4a>
   15a20:	4653      	mov	r3, sl
   15a22:	4323      	orrs	r3, r4
   15a24:	d12a      	bne.n	15a7c <__aeabi_dmul+0x19c>
   15a26:	2400      	movs	r4, #0
   15a28:	2002      	movs	r0, #2
   15a2a:	e796      	b.n	1595a <__aeabi_dmul+0x7a>
   15a2c:	4653      	mov	r3, sl
   15a2e:	4323      	orrs	r3, r4
   15a30:	d020      	beq.n	15a74 <__aeabi_dmul+0x194>
   15a32:	2c00      	cmp	r4, #0
   15a34:	d100      	bne.n	15a38 <__aeabi_dmul+0x158>
   15a36:	e157      	b.n	15ce8 <__aeabi_dmul+0x408>
   15a38:	0020      	movs	r0, r4
   15a3a:	f000 fe71 	bl	16720 <__clzsi2>
   15a3e:	0003      	movs	r3, r0
   15a40:	3b0b      	subs	r3, #11
   15a42:	2b1c      	cmp	r3, #28
   15a44:	dd00      	ble.n	15a48 <__aeabi_dmul+0x168>
   15a46:	e149      	b.n	15cdc <__aeabi_dmul+0x3fc>
   15a48:	211d      	movs	r1, #29
   15a4a:	1acb      	subs	r3, r1, r3
   15a4c:	4651      	mov	r1, sl
   15a4e:	0002      	movs	r2, r0
   15a50:	40d9      	lsrs	r1, r3
   15a52:	4653      	mov	r3, sl
   15a54:	3a08      	subs	r2, #8
   15a56:	4094      	lsls	r4, r2
   15a58:	4093      	lsls	r3, r2
   15a5a:	430c      	orrs	r4, r1
   15a5c:	4a1b      	ldr	r2, [pc, #108]	; (15acc <__aeabi_dmul+0x1ec>)
   15a5e:	1a12      	subs	r2, r2, r0
   15a60:	2000      	movs	r0, #0
   15a62:	e77a      	b.n	1595a <__aeabi_dmul+0x7a>
   15a64:	2501      	movs	r5, #1
   15a66:	9b01      	ldr	r3, [sp, #4]
   15a68:	4c14      	ldr	r4, [pc, #80]	; (15abc <__aeabi_dmul+0x1dc>)
   15a6a:	401d      	ands	r5, r3
   15a6c:	2300      	movs	r3, #0
   15a6e:	2200      	movs	r2, #0
   15a70:	4699      	mov	r9, r3
   15a72:	e79c      	b.n	159ae <__aeabi_dmul+0xce>
   15a74:	2400      	movs	r4, #0
   15a76:	2200      	movs	r2, #0
   15a78:	2001      	movs	r0, #1
   15a7a:	e76e      	b.n	1595a <__aeabi_dmul+0x7a>
   15a7c:	4653      	mov	r3, sl
   15a7e:	2003      	movs	r0, #3
   15a80:	e76b      	b.n	1595a <__aeabi_dmul+0x7a>
   15a82:	2300      	movs	r3, #0
   15a84:	469b      	mov	fp, r3
   15a86:	3301      	adds	r3, #1
   15a88:	2704      	movs	r7, #4
   15a8a:	2600      	movs	r6, #0
   15a8c:	9302      	str	r3, [sp, #8]
   15a8e:	e74c      	b.n	1592a <__aeabi_dmul+0x4a>
   15a90:	2303      	movs	r3, #3
   15a92:	4681      	mov	r9, r0
   15a94:	270c      	movs	r7, #12
   15a96:	9302      	str	r3, [sp, #8]
   15a98:	e747      	b.n	1592a <__aeabi_dmul+0x4a>
   15a9a:	2280      	movs	r2, #128	; 0x80
   15a9c:	2300      	movs	r3, #0
   15a9e:	2500      	movs	r5, #0
   15aa0:	0312      	lsls	r2, r2, #12
   15aa2:	4699      	mov	r9, r3
   15aa4:	4c05      	ldr	r4, [pc, #20]	; (15abc <__aeabi_dmul+0x1dc>)
   15aa6:	e782      	b.n	159ae <__aeabi_dmul+0xce>
   15aa8:	465c      	mov	r4, fp
   15aaa:	464b      	mov	r3, r9
   15aac:	9802      	ldr	r0, [sp, #8]
   15aae:	e76f      	b.n	15990 <__aeabi_dmul+0xb0>
   15ab0:	465c      	mov	r4, fp
   15ab2:	464b      	mov	r3, r9
   15ab4:	9501      	str	r5, [sp, #4]
   15ab6:	9802      	ldr	r0, [sp, #8]
   15ab8:	e76a      	b.n	15990 <__aeabi_dmul+0xb0>
   15aba:	46c0      	nop			; (mov r8, r8)
   15abc:	000007ff 	.word	0x000007ff
   15ac0:	fffffc01 	.word	0xfffffc01
   15ac4:	00018e74 	.word	0x00018e74
   15ac8:	800fffff 	.word	0x800fffff
   15acc:	fffffc0d 	.word	0xfffffc0d
   15ad0:	464a      	mov	r2, r9
   15ad2:	4649      	mov	r1, r9
   15ad4:	0c17      	lsrs	r7, r2, #16
   15ad6:	0c1a      	lsrs	r2, r3, #16
   15ad8:	041b      	lsls	r3, r3, #16
   15ada:	0c1b      	lsrs	r3, r3, #16
   15adc:	0408      	lsls	r0, r1, #16
   15ade:	0019      	movs	r1, r3
   15ae0:	0c00      	lsrs	r0, r0, #16
   15ae2:	4341      	muls	r1, r0
   15ae4:	0015      	movs	r5, r2
   15ae6:	4688      	mov	r8, r1
   15ae8:	0019      	movs	r1, r3
   15aea:	437d      	muls	r5, r7
   15aec:	4379      	muls	r1, r7
   15aee:	9503      	str	r5, [sp, #12]
   15af0:	4689      	mov	r9, r1
   15af2:	0029      	movs	r1, r5
   15af4:	0015      	movs	r5, r2
   15af6:	4345      	muls	r5, r0
   15af8:	444d      	add	r5, r9
   15afa:	9502      	str	r5, [sp, #8]
   15afc:	4645      	mov	r5, r8
   15afe:	0c2d      	lsrs	r5, r5, #16
   15b00:	46aa      	mov	sl, r5
   15b02:	9d02      	ldr	r5, [sp, #8]
   15b04:	4455      	add	r5, sl
   15b06:	45a9      	cmp	r9, r5
   15b08:	d906      	bls.n	15b18 <__aeabi_dmul+0x238>
   15b0a:	468a      	mov	sl, r1
   15b0c:	2180      	movs	r1, #128	; 0x80
   15b0e:	0249      	lsls	r1, r1, #9
   15b10:	4689      	mov	r9, r1
   15b12:	44ca      	add	sl, r9
   15b14:	4651      	mov	r1, sl
   15b16:	9103      	str	r1, [sp, #12]
   15b18:	0c29      	lsrs	r1, r5, #16
   15b1a:	9104      	str	r1, [sp, #16]
   15b1c:	4641      	mov	r1, r8
   15b1e:	0409      	lsls	r1, r1, #16
   15b20:	042d      	lsls	r5, r5, #16
   15b22:	0c09      	lsrs	r1, r1, #16
   15b24:	4688      	mov	r8, r1
   15b26:	0029      	movs	r1, r5
   15b28:	0c25      	lsrs	r5, r4, #16
   15b2a:	0424      	lsls	r4, r4, #16
   15b2c:	4441      	add	r1, r8
   15b2e:	0c24      	lsrs	r4, r4, #16
   15b30:	9105      	str	r1, [sp, #20]
   15b32:	0021      	movs	r1, r4
   15b34:	4341      	muls	r1, r0
   15b36:	4688      	mov	r8, r1
   15b38:	0021      	movs	r1, r4
   15b3a:	4379      	muls	r1, r7
   15b3c:	468a      	mov	sl, r1
   15b3e:	4368      	muls	r0, r5
   15b40:	4641      	mov	r1, r8
   15b42:	4450      	add	r0, sl
   15b44:	4681      	mov	r9, r0
   15b46:	0c08      	lsrs	r0, r1, #16
   15b48:	4448      	add	r0, r9
   15b4a:	436f      	muls	r7, r5
   15b4c:	4582      	cmp	sl, r0
   15b4e:	d903      	bls.n	15b58 <__aeabi_dmul+0x278>
   15b50:	2180      	movs	r1, #128	; 0x80
   15b52:	0249      	lsls	r1, r1, #9
   15b54:	4689      	mov	r9, r1
   15b56:	444f      	add	r7, r9
   15b58:	0c01      	lsrs	r1, r0, #16
   15b5a:	4689      	mov	r9, r1
   15b5c:	0039      	movs	r1, r7
   15b5e:	4449      	add	r1, r9
   15b60:	9102      	str	r1, [sp, #8]
   15b62:	4641      	mov	r1, r8
   15b64:	040f      	lsls	r7, r1, #16
   15b66:	9904      	ldr	r1, [sp, #16]
   15b68:	0c3f      	lsrs	r7, r7, #16
   15b6a:	4688      	mov	r8, r1
   15b6c:	0400      	lsls	r0, r0, #16
   15b6e:	19c0      	adds	r0, r0, r7
   15b70:	4480      	add	r8, r0
   15b72:	4641      	mov	r1, r8
   15b74:	9104      	str	r1, [sp, #16]
   15b76:	4659      	mov	r1, fp
   15b78:	0c0f      	lsrs	r7, r1, #16
   15b7a:	0409      	lsls	r1, r1, #16
   15b7c:	0c09      	lsrs	r1, r1, #16
   15b7e:	4688      	mov	r8, r1
   15b80:	4359      	muls	r1, r3
   15b82:	468a      	mov	sl, r1
   15b84:	0039      	movs	r1, r7
   15b86:	4351      	muls	r1, r2
   15b88:	4689      	mov	r9, r1
   15b8a:	4641      	mov	r1, r8
   15b8c:	434a      	muls	r2, r1
   15b8e:	4651      	mov	r1, sl
   15b90:	0c09      	lsrs	r1, r1, #16
   15b92:	468b      	mov	fp, r1
   15b94:	437b      	muls	r3, r7
   15b96:	18d2      	adds	r2, r2, r3
   15b98:	445a      	add	r2, fp
   15b9a:	4293      	cmp	r3, r2
   15b9c:	d903      	bls.n	15ba6 <__aeabi_dmul+0x2c6>
   15b9e:	2380      	movs	r3, #128	; 0x80
   15ba0:	025b      	lsls	r3, r3, #9
   15ba2:	469b      	mov	fp, r3
   15ba4:	44d9      	add	r9, fp
   15ba6:	4651      	mov	r1, sl
   15ba8:	0409      	lsls	r1, r1, #16
   15baa:	0c09      	lsrs	r1, r1, #16
   15bac:	468a      	mov	sl, r1
   15bae:	4641      	mov	r1, r8
   15bb0:	4361      	muls	r1, r4
   15bb2:	437c      	muls	r4, r7
   15bb4:	0c13      	lsrs	r3, r2, #16
   15bb6:	0412      	lsls	r2, r2, #16
   15bb8:	444b      	add	r3, r9
   15bba:	4452      	add	r2, sl
   15bbc:	46a1      	mov	r9, r4
   15bbe:	468a      	mov	sl, r1
   15bc0:	003c      	movs	r4, r7
   15bc2:	4641      	mov	r1, r8
   15bc4:	436c      	muls	r4, r5
   15bc6:	434d      	muls	r5, r1
   15bc8:	4651      	mov	r1, sl
   15bca:	444d      	add	r5, r9
   15bcc:	0c0f      	lsrs	r7, r1, #16
   15bce:	197d      	adds	r5, r7, r5
   15bd0:	45a9      	cmp	r9, r5
   15bd2:	d903      	bls.n	15bdc <__aeabi_dmul+0x2fc>
   15bd4:	2180      	movs	r1, #128	; 0x80
   15bd6:	0249      	lsls	r1, r1, #9
   15bd8:	4688      	mov	r8, r1
   15bda:	4444      	add	r4, r8
   15bdc:	9f04      	ldr	r7, [sp, #16]
   15bde:	9903      	ldr	r1, [sp, #12]
   15be0:	46b8      	mov	r8, r7
   15be2:	4441      	add	r1, r8
   15be4:	468b      	mov	fp, r1
   15be6:	4583      	cmp	fp, r0
   15be8:	4180      	sbcs	r0, r0
   15bea:	4241      	negs	r1, r0
   15bec:	4688      	mov	r8, r1
   15bee:	4651      	mov	r1, sl
   15bf0:	0408      	lsls	r0, r1, #16
   15bf2:	042f      	lsls	r7, r5, #16
   15bf4:	0c00      	lsrs	r0, r0, #16
   15bf6:	183f      	adds	r7, r7, r0
   15bf8:	4658      	mov	r0, fp
   15bfa:	9902      	ldr	r1, [sp, #8]
   15bfc:	1810      	adds	r0, r2, r0
   15bfe:	4689      	mov	r9, r1
   15c00:	4290      	cmp	r0, r2
   15c02:	4192      	sbcs	r2, r2
   15c04:	444f      	add	r7, r9
   15c06:	46ba      	mov	sl, r7
   15c08:	4252      	negs	r2, r2
   15c0a:	4699      	mov	r9, r3
   15c0c:	4693      	mov	fp, r2
   15c0e:	44c2      	add	sl, r8
   15c10:	44d1      	add	r9, sl
   15c12:	44cb      	add	fp, r9
   15c14:	428f      	cmp	r7, r1
   15c16:	41bf      	sbcs	r7, r7
   15c18:	45c2      	cmp	sl, r8
   15c1a:	4189      	sbcs	r1, r1
   15c1c:	4599      	cmp	r9, r3
   15c1e:	419b      	sbcs	r3, r3
   15c20:	4593      	cmp	fp, r2
   15c22:	4192      	sbcs	r2, r2
   15c24:	427f      	negs	r7, r7
   15c26:	4249      	negs	r1, r1
   15c28:	0c2d      	lsrs	r5, r5, #16
   15c2a:	4252      	negs	r2, r2
   15c2c:	430f      	orrs	r7, r1
   15c2e:	425b      	negs	r3, r3
   15c30:	4313      	orrs	r3, r2
   15c32:	197f      	adds	r7, r7, r5
   15c34:	18ff      	adds	r7, r7, r3
   15c36:	465b      	mov	r3, fp
   15c38:	193c      	adds	r4, r7, r4
   15c3a:	0ddb      	lsrs	r3, r3, #23
   15c3c:	9a05      	ldr	r2, [sp, #20]
   15c3e:	0264      	lsls	r4, r4, #9
   15c40:	431c      	orrs	r4, r3
   15c42:	0243      	lsls	r3, r0, #9
   15c44:	4313      	orrs	r3, r2
   15c46:	1e5d      	subs	r5, r3, #1
   15c48:	41ab      	sbcs	r3, r5
   15c4a:	465a      	mov	r2, fp
   15c4c:	0dc0      	lsrs	r0, r0, #23
   15c4e:	4303      	orrs	r3, r0
   15c50:	0252      	lsls	r2, r2, #9
   15c52:	4313      	orrs	r3, r2
   15c54:	01e2      	lsls	r2, r4, #7
   15c56:	d556      	bpl.n	15d06 <__aeabi_dmul+0x426>
   15c58:	2001      	movs	r0, #1
   15c5a:	085a      	lsrs	r2, r3, #1
   15c5c:	4003      	ands	r3, r0
   15c5e:	4313      	orrs	r3, r2
   15c60:	07e2      	lsls	r2, r4, #31
   15c62:	4313      	orrs	r3, r2
   15c64:	0864      	lsrs	r4, r4, #1
   15c66:	485a      	ldr	r0, [pc, #360]	; (15dd0 <__aeabi_dmul+0x4f0>)
   15c68:	4460      	add	r0, ip
   15c6a:	2800      	cmp	r0, #0
   15c6c:	dd4d      	ble.n	15d0a <__aeabi_dmul+0x42a>
   15c6e:	075a      	lsls	r2, r3, #29
   15c70:	d009      	beq.n	15c86 <__aeabi_dmul+0x3a6>
   15c72:	220f      	movs	r2, #15
   15c74:	401a      	ands	r2, r3
   15c76:	2a04      	cmp	r2, #4
   15c78:	d005      	beq.n	15c86 <__aeabi_dmul+0x3a6>
   15c7a:	1d1a      	adds	r2, r3, #4
   15c7c:	429a      	cmp	r2, r3
   15c7e:	419b      	sbcs	r3, r3
   15c80:	425b      	negs	r3, r3
   15c82:	18e4      	adds	r4, r4, r3
   15c84:	0013      	movs	r3, r2
   15c86:	01e2      	lsls	r2, r4, #7
   15c88:	d504      	bpl.n	15c94 <__aeabi_dmul+0x3b4>
   15c8a:	2080      	movs	r0, #128	; 0x80
   15c8c:	4a51      	ldr	r2, [pc, #324]	; (15dd4 <__aeabi_dmul+0x4f4>)
   15c8e:	00c0      	lsls	r0, r0, #3
   15c90:	4014      	ands	r4, r2
   15c92:	4460      	add	r0, ip
   15c94:	4a50      	ldr	r2, [pc, #320]	; (15dd8 <__aeabi_dmul+0x4f8>)
   15c96:	4290      	cmp	r0, r2
   15c98:	dd00      	ble.n	15c9c <__aeabi_dmul+0x3bc>
   15c9a:	e6e3      	b.n	15a64 <__aeabi_dmul+0x184>
   15c9c:	2501      	movs	r5, #1
   15c9e:	08db      	lsrs	r3, r3, #3
   15ca0:	0762      	lsls	r2, r4, #29
   15ca2:	431a      	orrs	r2, r3
   15ca4:	0264      	lsls	r4, r4, #9
   15ca6:	9b01      	ldr	r3, [sp, #4]
   15ca8:	4691      	mov	r9, r2
   15caa:	0b22      	lsrs	r2, r4, #12
   15cac:	0544      	lsls	r4, r0, #21
   15cae:	0d64      	lsrs	r4, r4, #21
   15cb0:	401d      	ands	r5, r3
   15cb2:	e67c      	b.n	159ae <__aeabi_dmul+0xce>
   15cb4:	2280      	movs	r2, #128	; 0x80
   15cb6:	4659      	mov	r1, fp
   15cb8:	0312      	lsls	r2, r2, #12
   15cba:	4211      	tst	r1, r2
   15cbc:	d008      	beq.n	15cd0 <__aeabi_dmul+0x3f0>
   15cbe:	4214      	tst	r4, r2
   15cc0:	d106      	bne.n	15cd0 <__aeabi_dmul+0x3f0>
   15cc2:	4322      	orrs	r2, r4
   15cc4:	0312      	lsls	r2, r2, #12
   15cc6:	0b12      	lsrs	r2, r2, #12
   15cc8:	4645      	mov	r5, r8
   15cca:	4699      	mov	r9, r3
   15ccc:	4c43      	ldr	r4, [pc, #268]	; (15ddc <__aeabi_dmul+0x4fc>)
   15cce:	e66e      	b.n	159ae <__aeabi_dmul+0xce>
   15cd0:	465b      	mov	r3, fp
   15cd2:	431a      	orrs	r2, r3
   15cd4:	0312      	lsls	r2, r2, #12
   15cd6:	0b12      	lsrs	r2, r2, #12
   15cd8:	4c40      	ldr	r4, [pc, #256]	; (15ddc <__aeabi_dmul+0x4fc>)
   15cda:	e668      	b.n	159ae <__aeabi_dmul+0xce>
   15cdc:	0003      	movs	r3, r0
   15cde:	4654      	mov	r4, sl
   15ce0:	3b28      	subs	r3, #40	; 0x28
   15ce2:	409c      	lsls	r4, r3
   15ce4:	2300      	movs	r3, #0
   15ce6:	e6b9      	b.n	15a5c <__aeabi_dmul+0x17c>
   15ce8:	f000 fd1a 	bl	16720 <__clzsi2>
   15cec:	3020      	adds	r0, #32
   15cee:	e6a6      	b.n	15a3e <__aeabi_dmul+0x15e>
   15cf0:	0003      	movs	r3, r0
   15cf2:	3b28      	subs	r3, #40	; 0x28
   15cf4:	409f      	lsls	r7, r3
   15cf6:	2300      	movs	r3, #0
   15cf8:	46bb      	mov	fp, r7
   15cfa:	4699      	mov	r9, r3
   15cfc:	e68a      	b.n	15a14 <__aeabi_dmul+0x134>
   15cfe:	f000 fd0f 	bl	16720 <__clzsi2>
   15d02:	3020      	adds	r0, #32
   15d04:	e674      	b.n	159f0 <__aeabi_dmul+0x110>
   15d06:	46b4      	mov	ip, r6
   15d08:	e7ad      	b.n	15c66 <__aeabi_dmul+0x386>
   15d0a:	2501      	movs	r5, #1
   15d0c:	1a2a      	subs	r2, r5, r0
   15d0e:	2a38      	cmp	r2, #56	; 0x38
   15d10:	dd06      	ble.n	15d20 <__aeabi_dmul+0x440>
   15d12:	9b01      	ldr	r3, [sp, #4]
   15d14:	2400      	movs	r4, #0
   15d16:	401d      	ands	r5, r3
   15d18:	2300      	movs	r3, #0
   15d1a:	2200      	movs	r2, #0
   15d1c:	4699      	mov	r9, r3
   15d1e:	e646      	b.n	159ae <__aeabi_dmul+0xce>
   15d20:	2a1f      	cmp	r2, #31
   15d22:	dc21      	bgt.n	15d68 <__aeabi_dmul+0x488>
   15d24:	2520      	movs	r5, #32
   15d26:	0020      	movs	r0, r4
   15d28:	1aad      	subs	r5, r5, r2
   15d2a:	001e      	movs	r6, r3
   15d2c:	40ab      	lsls	r3, r5
   15d2e:	40a8      	lsls	r0, r5
   15d30:	40d6      	lsrs	r6, r2
   15d32:	1e5d      	subs	r5, r3, #1
   15d34:	41ab      	sbcs	r3, r5
   15d36:	4330      	orrs	r0, r6
   15d38:	4318      	orrs	r0, r3
   15d3a:	40d4      	lsrs	r4, r2
   15d3c:	0743      	lsls	r3, r0, #29
   15d3e:	d009      	beq.n	15d54 <__aeabi_dmul+0x474>
   15d40:	230f      	movs	r3, #15
   15d42:	4003      	ands	r3, r0
   15d44:	2b04      	cmp	r3, #4
   15d46:	d005      	beq.n	15d54 <__aeabi_dmul+0x474>
   15d48:	0003      	movs	r3, r0
   15d4a:	1d18      	adds	r0, r3, #4
   15d4c:	4298      	cmp	r0, r3
   15d4e:	419b      	sbcs	r3, r3
   15d50:	425b      	negs	r3, r3
   15d52:	18e4      	adds	r4, r4, r3
   15d54:	0223      	lsls	r3, r4, #8
   15d56:	d521      	bpl.n	15d9c <__aeabi_dmul+0x4bc>
   15d58:	2501      	movs	r5, #1
   15d5a:	9b01      	ldr	r3, [sp, #4]
   15d5c:	2401      	movs	r4, #1
   15d5e:	401d      	ands	r5, r3
   15d60:	2300      	movs	r3, #0
   15d62:	2200      	movs	r2, #0
   15d64:	4699      	mov	r9, r3
   15d66:	e622      	b.n	159ae <__aeabi_dmul+0xce>
   15d68:	251f      	movs	r5, #31
   15d6a:	0021      	movs	r1, r4
   15d6c:	426d      	negs	r5, r5
   15d6e:	1a28      	subs	r0, r5, r0
   15d70:	40c1      	lsrs	r1, r0
   15d72:	0008      	movs	r0, r1
   15d74:	2a20      	cmp	r2, #32
   15d76:	d01d      	beq.n	15db4 <__aeabi_dmul+0x4d4>
   15d78:	355f      	adds	r5, #95	; 0x5f
   15d7a:	1aaa      	subs	r2, r5, r2
   15d7c:	4094      	lsls	r4, r2
   15d7e:	4323      	orrs	r3, r4
   15d80:	1e5c      	subs	r4, r3, #1
   15d82:	41a3      	sbcs	r3, r4
   15d84:	2507      	movs	r5, #7
   15d86:	4303      	orrs	r3, r0
   15d88:	401d      	ands	r5, r3
   15d8a:	2200      	movs	r2, #0
   15d8c:	2d00      	cmp	r5, #0
   15d8e:	d009      	beq.n	15da4 <__aeabi_dmul+0x4c4>
   15d90:	220f      	movs	r2, #15
   15d92:	2400      	movs	r4, #0
   15d94:	401a      	ands	r2, r3
   15d96:	0018      	movs	r0, r3
   15d98:	2a04      	cmp	r2, #4
   15d9a:	d1d6      	bne.n	15d4a <__aeabi_dmul+0x46a>
   15d9c:	0003      	movs	r3, r0
   15d9e:	0765      	lsls	r5, r4, #29
   15da0:	0264      	lsls	r4, r4, #9
   15da2:	0b22      	lsrs	r2, r4, #12
   15da4:	08db      	lsrs	r3, r3, #3
   15da6:	432b      	orrs	r3, r5
   15da8:	2501      	movs	r5, #1
   15daa:	4699      	mov	r9, r3
   15dac:	9b01      	ldr	r3, [sp, #4]
   15dae:	2400      	movs	r4, #0
   15db0:	401d      	ands	r5, r3
   15db2:	e5fc      	b.n	159ae <__aeabi_dmul+0xce>
   15db4:	2400      	movs	r4, #0
   15db6:	e7e2      	b.n	15d7e <__aeabi_dmul+0x49e>
   15db8:	2280      	movs	r2, #128	; 0x80
   15dba:	2501      	movs	r5, #1
   15dbc:	0312      	lsls	r2, r2, #12
   15dbe:	4322      	orrs	r2, r4
   15dc0:	9901      	ldr	r1, [sp, #4]
   15dc2:	0312      	lsls	r2, r2, #12
   15dc4:	0b12      	lsrs	r2, r2, #12
   15dc6:	400d      	ands	r5, r1
   15dc8:	4699      	mov	r9, r3
   15dca:	4c04      	ldr	r4, [pc, #16]	; (15ddc <__aeabi_dmul+0x4fc>)
   15dcc:	e5ef      	b.n	159ae <__aeabi_dmul+0xce>
   15dce:	46c0      	nop			; (mov r8, r8)
   15dd0:	000003ff 	.word	0x000003ff
   15dd4:	feffffff 	.word	0xfeffffff
   15dd8:	000007fe 	.word	0x000007fe
   15ddc:	000007ff 	.word	0x000007ff

00015de0 <__aeabi_dsub>:
   15de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15de2:	4646      	mov	r6, r8
   15de4:	46d6      	mov	lr, sl
   15de6:	464f      	mov	r7, r9
   15de8:	030c      	lsls	r4, r1, #12
   15dea:	b5c0      	push	{r6, r7, lr}
   15dec:	0fcd      	lsrs	r5, r1, #31
   15dee:	004e      	lsls	r6, r1, #1
   15df0:	0a61      	lsrs	r1, r4, #9
   15df2:	0f44      	lsrs	r4, r0, #29
   15df4:	430c      	orrs	r4, r1
   15df6:	00c1      	lsls	r1, r0, #3
   15df8:	0058      	lsls	r0, r3, #1
   15dfa:	0d40      	lsrs	r0, r0, #21
   15dfc:	4684      	mov	ip, r0
   15dfe:	468a      	mov	sl, r1
   15e00:	000f      	movs	r7, r1
   15e02:	0319      	lsls	r1, r3, #12
   15e04:	0f50      	lsrs	r0, r2, #29
   15e06:	0a49      	lsrs	r1, r1, #9
   15e08:	4301      	orrs	r1, r0
   15e0a:	48c6      	ldr	r0, [pc, #792]	; (16124 <__aeabi_dsub+0x344>)
   15e0c:	0d76      	lsrs	r6, r6, #21
   15e0e:	46a8      	mov	r8, r5
   15e10:	0fdb      	lsrs	r3, r3, #31
   15e12:	00d2      	lsls	r2, r2, #3
   15e14:	4584      	cmp	ip, r0
   15e16:	d100      	bne.n	15e1a <__aeabi_dsub+0x3a>
   15e18:	e0d8      	b.n	15fcc <__aeabi_dsub+0x1ec>
   15e1a:	2001      	movs	r0, #1
   15e1c:	4043      	eors	r3, r0
   15e1e:	42ab      	cmp	r3, r5
   15e20:	d100      	bne.n	15e24 <__aeabi_dsub+0x44>
   15e22:	e0a6      	b.n	15f72 <__aeabi_dsub+0x192>
   15e24:	4660      	mov	r0, ip
   15e26:	1a35      	subs	r5, r6, r0
   15e28:	2d00      	cmp	r5, #0
   15e2a:	dc00      	bgt.n	15e2e <__aeabi_dsub+0x4e>
   15e2c:	e105      	b.n	1603a <__aeabi_dsub+0x25a>
   15e2e:	2800      	cmp	r0, #0
   15e30:	d110      	bne.n	15e54 <__aeabi_dsub+0x74>
   15e32:	000b      	movs	r3, r1
   15e34:	4313      	orrs	r3, r2
   15e36:	d100      	bne.n	15e3a <__aeabi_dsub+0x5a>
   15e38:	e0d7      	b.n	15fea <__aeabi_dsub+0x20a>
   15e3a:	1e6b      	subs	r3, r5, #1
   15e3c:	2b00      	cmp	r3, #0
   15e3e:	d000      	beq.n	15e42 <__aeabi_dsub+0x62>
   15e40:	e14b      	b.n	160da <__aeabi_dsub+0x2fa>
   15e42:	4653      	mov	r3, sl
   15e44:	1a9f      	subs	r7, r3, r2
   15e46:	45ba      	cmp	sl, r7
   15e48:	4180      	sbcs	r0, r0
   15e4a:	1a64      	subs	r4, r4, r1
   15e4c:	4240      	negs	r0, r0
   15e4e:	1a24      	subs	r4, r4, r0
   15e50:	2601      	movs	r6, #1
   15e52:	e01e      	b.n	15e92 <__aeabi_dsub+0xb2>
   15e54:	4bb3      	ldr	r3, [pc, #716]	; (16124 <__aeabi_dsub+0x344>)
   15e56:	429e      	cmp	r6, r3
   15e58:	d048      	beq.n	15eec <__aeabi_dsub+0x10c>
   15e5a:	2380      	movs	r3, #128	; 0x80
   15e5c:	041b      	lsls	r3, r3, #16
   15e5e:	4319      	orrs	r1, r3
   15e60:	2d38      	cmp	r5, #56	; 0x38
   15e62:	dd00      	ble.n	15e66 <__aeabi_dsub+0x86>
   15e64:	e119      	b.n	1609a <__aeabi_dsub+0x2ba>
   15e66:	2d1f      	cmp	r5, #31
   15e68:	dd00      	ble.n	15e6c <__aeabi_dsub+0x8c>
   15e6a:	e14c      	b.n	16106 <__aeabi_dsub+0x326>
   15e6c:	2320      	movs	r3, #32
   15e6e:	000f      	movs	r7, r1
   15e70:	1b5b      	subs	r3, r3, r5
   15e72:	0010      	movs	r0, r2
   15e74:	409a      	lsls	r2, r3
   15e76:	409f      	lsls	r7, r3
   15e78:	40e8      	lsrs	r0, r5
   15e7a:	1e53      	subs	r3, r2, #1
   15e7c:	419a      	sbcs	r2, r3
   15e7e:	40e9      	lsrs	r1, r5
   15e80:	4307      	orrs	r7, r0
   15e82:	4317      	orrs	r7, r2
   15e84:	4653      	mov	r3, sl
   15e86:	1bdf      	subs	r7, r3, r7
   15e88:	1a61      	subs	r1, r4, r1
   15e8a:	45ba      	cmp	sl, r7
   15e8c:	41a4      	sbcs	r4, r4
   15e8e:	4264      	negs	r4, r4
   15e90:	1b0c      	subs	r4, r1, r4
   15e92:	0223      	lsls	r3, r4, #8
   15e94:	d400      	bmi.n	15e98 <__aeabi_dsub+0xb8>
   15e96:	e0c5      	b.n	16024 <__aeabi_dsub+0x244>
   15e98:	0264      	lsls	r4, r4, #9
   15e9a:	0a65      	lsrs	r5, r4, #9
   15e9c:	2d00      	cmp	r5, #0
   15e9e:	d100      	bne.n	15ea2 <__aeabi_dsub+0xc2>
   15ea0:	e0f6      	b.n	16090 <__aeabi_dsub+0x2b0>
   15ea2:	0028      	movs	r0, r5
   15ea4:	f000 fc3c 	bl	16720 <__clzsi2>
   15ea8:	0003      	movs	r3, r0
   15eaa:	3b08      	subs	r3, #8
   15eac:	2b1f      	cmp	r3, #31
   15eae:	dd00      	ble.n	15eb2 <__aeabi_dsub+0xd2>
   15eb0:	e0e9      	b.n	16086 <__aeabi_dsub+0x2a6>
   15eb2:	2220      	movs	r2, #32
   15eb4:	003c      	movs	r4, r7
   15eb6:	1ad2      	subs	r2, r2, r3
   15eb8:	409d      	lsls	r5, r3
   15eba:	40d4      	lsrs	r4, r2
   15ebc:	409f      	lsls	r7, r3
   15ebe:	4325      	orrs	r5, r4
   15ec0:	429e      	cmp	r6, r3
   15ec2:	dd00      	ble.n	15ec6 <__aeabi_dsub+0xe6>
   15ec4:	e0db      	b.n	1607e <__aeabi_dsub+0x29e>
   15ec6:	1b9e      	subs	r6, r3, r6
   15ec8:	1c73      	adds	r3, r6, #1
   15eca:	2b1f      	cmp	r3, #31
   15ecc:	dd00      	ble.n	15ed0 <__aeabi_dsub+0xf0>
   15ece:	e10a      	b.n	160e6 <__aeabi_dsub+0x306>
   15ed0:	2220      	movs	r2, #32
   15ed2:	0038      	movs	r0, r7
   15ed4:	1ad2      	subs	r2, r2, r3
   15ed6:	0029      	movs	r1, r5
   15ed8:	4097      	lsls	r7, r2
   15eda:	002c      	movs	r4, r5
   15edc:	4091      	lsls	r1, r2
   15ede:	40d8      	lsrs	r0, r3
   15ee0:	1e7a      	subs	r2, r7, #1
   15ee2:	4197      	sbcs	r7, r2
   15ee4:	40dc      	lsrs	r4, r3
   15ee6:	2600      	movs	r6, #0
   15ee8:	4301      	orrs	r1, r0
   15eea:	430f      	orrs	r7, r1
   15eec:	077b      	lsls	r3, r7, #29
   15eee:	d009      	beq.n	15f04 <__aeabi_dsub+0x124>
   15ef0:	230f      	movs	r3, #15
   15ef2:	403b      	ands	r3, r7
   15ef4:	2b04      	cmp	r3, #4
   15ef6:	d005      	beq.n	15f04 <__aeabi_dsub+0x124>
   15ef8:	1d3b      	adds	r3, r7, #4
   15efa:	42bb      	cmp	r3, r7
   15efc:	41bf      	sbcs	r7, r7
   15efe:	427f      	negs	r7, r7
   15f00:	19e4      	adds	r4, r4, r7
   15f02:	001f      	movs	r7, r3
   15f04:	0223      	lsls	r3, r4, #8
   15f06:	d525      	bpl.n	15f54 <__aeabi_dsub+0x174>
   15f08:	4b86      	ldr	r3, [pc, #536]	; (16124 <__aeabi_dsub+0x344>)
   15f0a:	3601      	adds	r6, #1
   15f0c:	429e      	cmp	r6, r3
   15f0e:	d100      	bne.n	15f12 <__aeabi_dsub+0x132>
   15f10:	e0af      	b.n	16072 <__aeabi_dsub+0x292>
   15f12:	4b85      	ldr	r3, [pc, #532]	; (16128 <__aeabi_dsub+0x348>)
   15f14:	2501      	movs	r5, #1
   15f16:	401c      	ands	r4, r3
   15f18:	4643      	mov	r3, r8
   15f1a:	0762      	lsls	r2, r4, #29
   15f1c:	08ff      	lsrs	r7, r7, #3
   15f1e:	0264      	lsls	r4, r4, #9
   15f20:	0576      	lsls	r6, r6, #21
   15f22:	4317      	orrs	r7, r2
   15f24:	0b24      	lsrs	r4, r4, #12
   15f26:	0d76      	lsrs	r6, r6, #21
   15f28:	401d      	ands	r5, r3
   15f2a:	2100      	movs	r1, #0
   15f2c:	0324      	lsls	r4, r4, #12
   15f2e:	0b23      	lsrs	r3, r4, #12
   15f30:	0d0c      	lsrs	r4, r1, #20
   15f32:	4a7e      	ldr	r2, [pc, #504]	; (1612c <__aeabi_dsub+0x34c>)
   15f34:	0524      	lsls	r4, r4, #20
   15f36:	431c      	orrs	r4, r3
   15f38:	4014      	ands	r4, r2
   15f3a:	0533      	lsls	r3, r6, #20
   15f3c:	4323      	orrs	r3, r4
   15f3e:	005b      	lsls	r3, r3, #1
   15f40:	07ed      	lsls	r5, r5, #31
   15f42:	085b      	lsrs	r3, r3, #1
   15f44:	432b      	orrs	r3, r5
   15f46:	0038      	movs	r0, r7
   15f48:	0019      	movs	r1, r3
   15f4a:	bc1c      	pop	{r2, r3, r4}
   15f4c:	4690      	mov	r8, r2
   15f4e:	4699      	mov	r9, r3
   15f50:	46a2      	mov	sl, r4
   15f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f54:	2501      	movs	r5, #1
   15f56:	4643      	mov	r3, r8
   15f58:	0762      	lsls	r2, r4, #29
   15f5a:	08ff      	lsrs	r7, r7, #3
   15f5c:	4317      	orrs	r7, r2
   15f5e:	08e4      	lsrs	r4, r4, #3
   15f60:	401d      	ands	r5, r3
   15f62:	4b70      	ldr	r3, [pc, #448]	; (16124 <__aeabi_dsub+0x344>)
   15f64:	429e      	cmp	r6, r3
   15f66:	d036      	beq.n	15fd6 <__aeabi_dsub+0x1f6>
   15f68:	0324      	lsls	r4, r4, #12
   15f6a:	0576      	lsls	r6, r6, #21
   15f6c:	0b24      	lsrs	r4, r4, #12
   15f6e:	0d76      	lsrs	r6, r6, #21
   15f70:	e7db      	b.n	15f2a <__aeabi_dsub+0x14a>
   15f72:	4663      	mov	r3, ip
   15f74:	1af3      	subs	r3, r6, r3
   15f76:	2b00      	cmp	r3, #0
   15f78:	dc00      	bgt.n	15f7c <__aeabi_dsub+0x19c>
   15f7a:	e094      	b.n	160a6 <__aeabi_dsub+0x2c6>
   15f7c:	4660      	mov	r0, ip
   15f7e:	2800      	cmp	r0, #0
   15f80:	d035      	beq.n	15fee <__aeabi_dsub+0x20e>
   15f82:	4868      	ldr	r0, [pc, #416]	; (16124 <__aeabi_dsub+0x344>)
   15f84:	4286      	cmp	r6, r0
   15f86:	d0b1      	beq.n	15eec <__aeabi_dsub+0x10c>
   15f88:	2780      	movs	r7, #128	; 0x80
   15f8a:	043f      	lsls	r7, r7, #16
   15f8c:	4339      	orrs	r1, r7
   15f8e:	2b38      	cmp	r3, #56	; 0x38
   15f90:	dc00      	bgt.n	15f94 <__aeabi_dsub+0x1b4>
   15f92:	e0fd      	b.n	16190 <__aeabi_dsub+0x3b0>
   15f94:	430a      	orrs	r2, r1
   15f96:	0017      	movs	r7, r2
   15f98:	2100      	movs	r1, #0
   15f9a:	1e7a      	subs	r2, r7, #1
   15f9c:	4197      	sbcs	r7, r2
   15f9e:	4457      	add	r7, sl
   15fa0:	4557      	cmp	r7, sl
   15fa2:	4180      	sbcs	r0, r0
   15fa4:	1909      	adds	r1, r1, r4
   15fa6:	4244      	negs	r4, r0
   15fa8:	190c      	adds	r4, r1, r4
   15faa:	0223      	lsls	r3, r4, #8
   15fac:	d53a      	bpl.n	16024 <__aeabi_dsub+0x244>
   15fae:	4b5d      	ldr	r3, [pc, #372]	; (16124 <__aeabi_dsub+0x344>)
   15fb0:	3601      	adds	r6, #1
   15fb2:	429e      	cmp	r6, r3
   15fb4:	d100      	bne.n	15fb8 <__aeabi_dsub+0x1d8>
   15fb6:	e14b      	b.n	16250 <__aeabi_dsub+0x470>
   15fb8:	2201      	movs	r2, #1
   15fba:	4b5b      	ldr	r3, [pc, #364]	; (16128 <__aeabi_dsub+0x348>)
   15fbc:	401c      	ands	r4, r3
   15fbe:	087b      	lsrs	r3, r7, #1
   15fc0:	4017      	ands	r7, r2
   15fc2:	431f      	orrs	r7, r3
   15fc4:	07e2      	lsls	r2, r4, #31
   15fc6:	4317      	orrs	r7, r2
   15fc8:	0864      	lsrs	r4, r4, #1
   15fca:	e78f      	b.n	15eec <__aeabi_dsub+0x10c>
   15fcc:	0008      	movs	r0, r1
   15fce:	4310      	orrs	r0, r2
   15fd0:	d000      	beq.n	15fd4 <__aeabi_dsub+0x1f4>
   15fd2:	e724      	b.n	15e1e <__aeabi_dsub+0x3e>
   15fd4:	e721      	b.n	15e1a <__aeabi_dsub+0x3a>
   15fd6:	0023      	movs	r3, r4
   15fd8:	433b      	orrs	r3, r7
   15fda:	d100      	bne.n	15fde <__aeabi_dsub+0x1fe>
   15fdc:	e1b9      	b.n	16352 <__aeabi_dsub+0x572>
   15fde:	2280      	movs	r2, #128	; 0x80
   15fe0:	0312      	lsls	r2, r2, #12
   15fe2:	4314      	orrs	r4, r2
   15fe4:	0324      	lsls	r4, r4, #12
   15fe6:	0b24      	lsrs	r4, r4, #12
   15fe8:	e79f      	b.n	15f2a <__aeabi_dsub+0x14a>
   15fea:	002e      	movs	r6, r5
   15fec:	e77e      	b.n	15eec <__aeabi_dsub+0x10c>
   15fee:	0008      	movs	r0, r1
   15ff0:	4310      	orrs	r0, r2
   15ff2:	d100      	bne.n	15ff6 <__aeabi_dsub+0x216>
   15ff4:	e0ca      	b.n	1618c <__aeabi_dsub+0x3ac>
   15ff6:	1e58      	subs	r0, r3, #1
   15ff8:	4684      	mov	ip, r0
   15ffa:	2800      	cmp	r0, #0
   15ffc:	d000      	beq.n	16000 <__aeabi_dsub+0x220>
   15ffe:	e0e7      	b.n	161d0 <__aeabi_dsub+0x3f0>
   16000:	4452      	add	r2, sl
   16002:	4552      	cmp	r2, sl
   16004:	4180      	sbcs	r0, r0
   16006:	1864      	adds	r4, r4, r1
   16008:	4240      	negs	r0, r0
   1600a:	1824      	adds	r4, r4, r0
   1600c:	0017      	movs	r7, r2
   1600e:	2601      	movs	r6, #1
   16010:	0223      	lsls	r3, r4, #8
   16012:	d507      	bpl.n	16024 <__aeabi_dsub+0x244>
   16014:	2602      	movs	r6, #2
   16016:	e7cf      	b.n	15fb8 <__aeabi_dsub+0x1d8>
   16018:	4664      	mov	r4, ip
   1601a:	432c      	orrs	r4, r5
   1601c:	d100      	bne.n	16020 <__aeabi_dsub+0x240>
   1601e:	e1b3      	b.n	16388 <__aeabi_dsub+0x5a8>
   16020:	002c      	movs	r4, r5
   16022:	4667      	mov	r7, ip
   16024:	077b      	lsls	r3, r7, #29
   16026:	d000      	beq.n	1602a <__aeabi_dsub+0x24a>
   16028:	e762      	b.n	15ef0 <__aeabi_dsub+0x110>
   1602a:	0763      	lsls	r3, r4, #29
   1602c:	08ff      	lsrs	r7, r7, #3
   1602e:	431f      	orrs	r7, r3
   16030:	2501      	movs	r5, #1
   16032:	4643      	mov	r3, r8
   16034:	08e4      	lsrs	r4, r4, #3
   16036:	401d      	ands	r5, r3
   16038:	e793      	b.n	15f62 <__aeabi_dsub+0x182>
   1603a:	2d00      	cmp	r5, #0
   1603c:	d178      	bne.n	16130 <__aeabi_dsub+0x350>
   1603e:	1c75      	adds	r5, r6, #1
   16040:	056d      	lsls	r5, r5, #21
   16042:	0d6d      	lsrs	r5, r5, #21
   16044:	2d01      	cmp	r5, #1
   16046:	dc00      	bgt.n	1604a <__aeabi_dsub+0x26a>
   16048:	e0f2      	b.n	16230 <__aeabi_dsub+0x450>
   1604a:	4650      	mov	r0, sl
   1604c:	1a80      	subs	r0, r0, r2
   1604e:	4582      	cmp	sl, r0
   16050:	41bf      	sbcs	r7, r7
   16052:	1a65      	subs	r5, r4, r1
   16054:	427f      	negs	r7, r7
   16056:	1bed      	subs	r5, r5, r7
   16058:	4684      	mov	ip, r0
   1605a:	0228      	lsls	r0, r5, #8
   1605c:	d400      	bmi.n	16060 <__aeabi_dsub+0x280>
   1605e:	e08c      	b.n	1617a <__aeabi_dsub+0x39a>
   16060:	4650      	mov	r0, sl
   16062:	1a17      	subs	r7, r2, r0
   16064:	42ba      	cmp	r2, r7
   16066:	4192      	sbcs	r2, r2
   16068:	1b0c      	subs	r4, r1, r4
   1606a:	4255      	negs	r5, r2
   1606c:	1b65      	subs	r5, r4, r5
   1606e:	4698      	mov	r8, r3
   16070:	e714      	b.n	15e9c <__aeabi_dsub+0xbc>
   16072:	2501      	movs	r5, #1
   16074:	4643      	mov	r3, r8
   16076:	2400      	movs	r4, #0
   16078:	401d      	ands	r5, r3
   1607a:	2700      	movs	r7, #0
   1607c:	e755      	b.n	15f2a <__aeabi_dsub+0x14a>
   1607e:	4c2a      	ldr	r4, [pc, #168]	; (16128 <__aeabi_dsub+0x348>)
   16080:	1af6      	subs	r6, r6, r3
   16082:	402c      	ands	r4, r5
   16084:	e732      	b.n	15eec <__aeabi_dsub+0x10c>
   16086:	003d      	movs	r5, r7
   16088:	3828      	subs	r0, #40	; 0x28
   1608a:	4085      	lsls	r5, r0
   1608c:	2700      	movs	r7, #0
   1608e:	e717      	b.n	15ec0 <__aeabi_dsub+0xe0>
   16090:	0038      	movs	r0, r7
   16092:	f000 fb45 	bl	16720 <__clzsi2>
   16096:	3020      	adds	r0, #32
   16098:	e706      	b.n	15ea8 <__aeabi_dsub+0xc8>
   1609a:	430a      	orrs	r2, r1
   1609c:	0017      	movs	r7, r2
   1609e:	2100      	movs	r1, #0
   160a0:	1e7a      	subs	r2, r7, #1
   160a2:	4197      	sbcs	r7, r2
   160a4:	e6ee      	b.n	15e84 <__aeabi_dsub+0xa4>
   160a6:	2b00      	cmp	r3, #0
   160a8:	d000      	beq.n	160ac <__aeabi_dsub+0x2cc>
   160aa:	e0e5      	b.n	16278 <__aeabi_dsub+0x498>
   160ac:	1c73      	adds	r3, r6, #1
   160ae:	469c      	mov	ip, r3
   160b0:	055b      	lsls	r3, r3, #21
   160b2:	0d5b      	lsrs	r3, r3, #21
   160b4:	2b01      	cmp	r3, #1
   160b6:	dc00      	bgt.n	160ba <__aeabi_dsub+0x2da>
   160b8:	e09f      	b.n	161fa <__aeabi_dsub+0x41a>
   160ba:	4b1a      	ldr	r3, [pc, #104]	; (16124 <__aeabi_dsub+0x344>)
   160bc:	459c      	cmp	ip, r3
   160be:	d100      	bne.n	160c2 <__aeabi_dsub+0x2e2>
   160c0:	e0c5      	b.n	1624e <__aeabi_dsub+0x46e>
   160c2:	4452      	add	r2, sl
   160c4:	4552      	cmp	r2, sl
   160c6:	4180      	sbcs	r0, r0
   160c8:	1864      	adds	r4, r4, r1
   160ca:	4240      	negs	r0, r0
   160cc:	1824      	adds	r4, r4, r0
   160ce:	07e7      	lsls	r7, r4, #31
   160d0:	0852      	lsrs	r2, r2, #1
   160d2:	4317      	orrs	r7, r2
   160d4:	0864      	lsrs	r4, r4, #1
   160d6:	4666      	mov	r6, ip
   160d8:	e708      	b.n	15eec <__aeabi_dsub+0x10c>
   160da:	4812      	ldr	r0, [pc, #72]	; (16124 <__aeabi_dsub+0x344>)
   160dc:	4285      	cmp	r5, r0
   160de:	d100      	bne.n	160e2 <__aeabi_dsub+0x302>
   160e0:	e085      	b.n	161ee <__aeabi_dsub+0x40e>
   160e2:	001d      	movs	r5, r3
   160e4:	e6bc      	b.n	15e60 <__aeabi_dsub+0x80>
   160e6:	0029      	movs	r1, r5
   160e8:	3e1f      	subs	r6, #31
   160ea:	40f1      	lsrs	r1, r6
   160ec:	2b20      	cmp	r3, #32
   160ee:	d100      	bne.n	160f2 <__aeabi_dsub+0x312>
   160f0:	e07f      	b.n	161f2 <__aeabi_dsub+0x412>
   160f2:	2240      	movs	r2, #64	; 0x40
   160f4:	1ad3      	subs	r3, r2, r3
   160f6:	409d      	lsls	r5, r3
   160f8:	432f      	orrs	r7, r5
   160fa:	1e7d      	subs	r5, r7, #1
   160fc:	41af      	sbcs	r7, r5
   160fe:	2400      	movs	r4, #0
   16100:	430f      	orrs	r7, r1
   16102:	2600      	movs	r6, #0
   16104:	e78e      	b.n	16024 <__aeabi_dsub+0x244>
   16106:	002b      	movs	r3, r5
   16108:	000f      	movs	r7, r1
   1610a:	3b20      	subs	r3, #32
   1610c:	40df      	lsrs	r7, r3
   1610e:	2d20      	cmp	r5, #32
   16110:	d071      	beq.n	161f6 <__aeabi_dsub+0x416>
   16112:	2340      	movs	r3, #64	; 0x40
   16114:	1b5d      	subs	r5, r3, r5
   16116:	40a9      	lsls	r1, r5
   16118:	430a      	orrs	r2, r1
   1611a:	1e51      	subs	r1, r2, #1
   1611c:	418a      	sbcs	r2, r1
   1611e:	2100      	movs	r1, #0
   16120:	4317      	orrs	r7, r2
   16122:	e6af      	b.n	15e84 <__aeabi_dsub+0xa4>
   16124:	000007ff 	.word	0x000007ff
   16128:	ff7fffff 	.word	0xff7fffff
   1612c:	800fffff 	.word	0x800fffff
   16130:	2e00      	cmp	r6, #0
   16132:	d03e      	beq.n	161b2 <__aeabi_dsub+0x3d2>
   16134:	4eb3      	ldr	r6, [pc, #716]	; (16404 <__aeabi_dsub+0x624>)
   16136:	45b4      	cmp	ip, r6
   16138:	d045      	beq.n	161c6 <__aeabi_dsub+0x3e6>
   1613a:	2680      	movs	r6, #128	; 0x80
   1613c:	0436      	lsls	r6, r6, #16
   1613e:	426d      	negs	r5, r5
   16140:	4334      	orrs	r4, r6
   16142:	2d38      	cmp	r5, #56	; 0x38
   16144:	dd00      	ble.n	16148 <__aeabi_dsub+0x368>
   16146:	e0a8      	b.n	1629a <__aeabi_dsub+0x4ba>
   16148:	2d1f      	cmp	r5, #31
   1614a:	dd00      	ble.n	1614e <__aeabi_dsub+0x36e>
   1614c:	e11f      	b.n	1638e <__aeabi_dsub+0x5ae>
   1614e:	2620      	movs	r6, #32
   16150:	0027      	movs	r7, r4
   16152:	4650      	mov	r0, sl
   16154:	1b76      	subs	r6, r6, r5
   16156:	40b7      	lsls	r7, r6
   16158:	40e8      	lsrs	r0, r5
   1615a:	4307      	orrs	r7, r0
   1615c:	4650      	mov	r0, sl
   1615e:	40b0      	lsls	r0, r6
   16160:	1e46      	subs	r6, r0, #1
   16162:	41b0      	sbcs	r0, r6
   16164:	40ec      	lsrs	r4, r5
   16166:	4338      	orrs	r0, r7
   16168:	1a17      	subs	r7, r2, r0
   1616a:	42ba      	cmp	r2, r7
   1616c:	4192      	sbcs	r2, r2
   1616e:	1b0c      	subs	r4, r1, r4
   16170:	4252      	negs	r2, r2
   16172:	1aa4      	subs	r4, r4, r2
   16174:	4666      	mov	r6, ip
   16176:	4698      	mov	r8, r3
   16178:	e68b      	b.n	15e92 <__aeabi_dsub+0xb2>
   1617a:	4664      	mov	r4, ip
   1617c:	4667      	mov	r7, ip
   1617e:	432c      	orrs	r4, r5
   16180:	d000      	beq.n	16184 <__aeabi_dsub+0x3a4>
   16182:	e68b      	b.n	15e9c <__aeabi_dsub+0xbc>
   16184:	2500      	movs	r5, #0
   16186:	2600      	movs	r6, #0
   16188:	2700      	movs	r7, #0
   1618a:	e6ea      	b.n	15f62 <__aeabi_dsub+0x182>
   1618c:	001e      	movs	r6, r3
   1618e:	e6ad      	b.n	15eec <__aeabi_dsub+0x10c>
   16190:	2b1f      	cmp	r3, #31
   16192:	dc60      	bgt.n	16256 <__aeabi_dsub+0x476>
   16194:	2720      	movs	r7, #32
   16196:	1af8      	subs	r0, r7, r3
   16198:	000f      	movs	r7, r1
   1619a:	4684      	mov	ip, r0
   1619c:	4087      	lsls	r7, r0
   1619e:	0010      	movs	r0, r2
   161a0:	40d8      	lsrs	r0, r3
   161a2:	4307      	orrs	r7, r0
   161a4:	4660      	mov	r0, ip
   161a6:	4082      	lsls	r2, r0
   161a8:	1e50      	subs	r0, r2, #1
   161aa:	4182      	sbcs	r2, r0
   161ac:	40d9      	lsrs	r1, r3
   161ae:	4317      	orrs	r7, r2
   161b0:	e6f5      	b.n	15f9e <__aeabi_dsub+0x1be>
   161b2:	0026      	movs	r6, r4
   161b4:	4650      	mov	r0, sl
   161b6:	4306      	orrs	r6, r0
   161b8:	d005      	beq.n	161c6 <__aeabi_dsub+0x3e6>
   161ba:	43ed      	mvns	r5, r5
   161bc:	2d00      	cmp	r5, #0
   161be:	d0d3      	beq.n	16168 <__aeabi_dsub+0x388>
   161c0:	4e90      	ldr	r6, [pc, #576]	; (16404 <__aeabi_dsub+0x624>)
   161c2:	45b4      	cmp	ip, r6
   161c4:	d1bd      	bne.n	16142 <__aeabi_dsub+0x362>
   161c6:	000c      	movs	r4, r1
   161c8:	0017      	movs	r7, r2
   161ca:	4666      	mov	r6, ip
   161cc:	4698      	mov	r8, r3
   161ce:	e68d      	b.n	15eec <__aeabi_dsub+0x10c>
   161d0:	488c      	ldr	r0, [pc, #560]	; (16404 <__aeabi_dsub+0x624>)
   161d2:	4283      	cmp	r3, r0
   161d4:	d00b      	beq.n	161ee <__aeabi_dsub+0x40e>
   161d6:	4663      	mov	r3, ip
   161d8:	e6d9      	b.n	15f8e <__aeabi_dsub+0x1ae>
   161da:	2d00      	cmp	r5, #0
   161dc:	d000      	beq.n	161e0 <__aeabi_dsub+0x400>
   161de:	e096      	b.n	1630e <__aeabi_dsub+0x52e>
   161e0:	0008      	movs	r0, r1
   161e2:	4310      	orrs	r0, r2
   161e4:	d100      	bne.n	161e8 <__aeabi_dsub+0x408>
   161e6:	e0e2      	b.n	163ae <__aeabi_dsub+0x5ce>
   161e8:	000c      	movs	r4, r1
   161ea:	0017      	movs	r7, r2
   161ec:	4698      	mov	r8, r3
   161ee:	4e85      	ldr	r6, [pc, #532]	; (16404 <__aeabi_dsub+0x624>)
   161f0:	e67c      	b.n	15eec <__aeabi_dsub+0x10c>
   161f2:	2500      	movs	r5, #0
   161f4:	e780      	b.n	160f8 <__aeabi_dsub+0x318>
   161f6:	2100      	movs	r1, #0
   161f8:	e78e      	b.n	16118 <__aeabi_dsub+0x338>
   161fa:	0023      	movs	r3, r4
   161fc:	4650      	mov	r0, sl
   161fe:	4303      	orrs	r3, r0
   16200:	2e00      	cmp	r6, #0
   16202:	d000      	beq.n	16206 <__aeabi_dsub+0x426>
   16204:	e0a8      	b.n	16358 <__aeabi_dsub+0x578>
   16206:	2b00      	cmp	r3, #0
   16208:	d100      	bne.n	1620c <__aeabi_dsub+0x42c>
   1620a:	e0de      	b.n	163ca <__aeabi_dsub+0x5ea>
   1620c:	000b      	movs	r3, r1
   1620e:	4313      	orrs	r3, r2
   16210:	d100      	bne.n	16214 <__aeabi_dsub+0x434>
   16212:	e66b      	b.n	15eec <__aeabi_dsub+0x10c>
   16214:	4452      	add	r2, sl
   16216:	4552      	cmp	r2, sl
   16218:	4180      	sbcs	r0, r0
   1621a:	1864      	adds	r4, r4, r1
   1621c:	4240      	negs	r0, r0
   1621e:	1824      	adds	r4, r4, r0
   16220:	0017      	movs	r7, r2
   16222:	0223      	lsls	r3, r4, #8
   16224:	d400      	bmi.n	16228 <__aeabi_dsub+0x448>
   16226:	e6fd      	b.n	16024 <__aeabi_dsub+0x244>
   16228:	4b77      	ldr	r3, [pc, #476]	; (16408 <__aeabi_dsub+0x628>)
   1622a:	4666      	mov	r6, ip
   1622c:	401c      	ands	r4, r3
   1622e:	e65d      	b.n	15eec <__aeabi_dsub+0x10c>
   16230:	0025      	movs	r5, r4
   16232:	4650      	mov	r0, sl
   16234:	4305      	orrs	r5, r0
   16236:	2e00      	cmp	r6, #0
   16238:	d1cf      	bne.n	161da <__aeabi_dsub+0x3fa>
   1623a:	2d00      	cmp	r5, #0
   1623c:	d14f      	bne.n	162de <__aeabi_dsub+0x4fe>
   1623e:	000c      	movs	r4, r1
   16240:	4314      	orrs	r4, r2
   16242:	d100      	bne.n	16246 <__aeabi_dsub+0x466>
   16244:	e0a0      	b.n	16388 <__aeabi_dsub+0x5a8>
   16246:	000c      	movs	r4, r1
   16248:	0017      	movs	r7, r2
   1624a:	4698      	mov	r8, r3
   1624c:	e64e      	b.n	15eec <__aeabi_dsub+0x10c>
   1624e:	4666      	mov	r6, ip
   16250:	2400      	movs	r4, #0
   16252:	2700      	movs	r7, #0
   16254:	e685      	b.n	15f62 <__aeabi_dsub+0x182>
   16256:	001f      	movs	r7, r3
   16258:	0008      	movs	r0, r1
   1625a:	3f20      	subs	r7, #32
   1625c:	40f8      	lsrs	r0, r7
   1625e:	0007      	movs	r7, r0
   16260:	2b20      	cmp	r3, #32
   16262:	d100      	bne.n	16266 <__aeabi_dsub+0x486>
   16264:	e08e      	b.n	16384 <__aeabi_dsub+0x5a4>
   16266:	2040      	movs	r0, #64	; 0x40
   16268:	1ac3      	subs	r3, r0, r3
   1626a:	4099      	lsls	r1, r3
   1626c:	430a      	orrs	r2, r1
   1626e:	1e51      	subs	r1, r2, #1
   16270:	418a      	sbcs	r2, r1
   16272:	2100      	movs	r1, #0
   16274:	4317      	orrs	r7, r2
   16276:	e692      	b.n	15f9e <__aeabi_dsub+0x1be>
   16278:	2e00      	cmp	r6, #0
   1627a:	d114      	bne.n	162a6 <__aeabi_dsub+0x4c6>
   1627c:	0026      	movs	r6, r4
   1627e:	4650      	mov	r0, sl
   16280:	4306      	orrs	r6, r0
   16282:	d062      	beq.n	1634a <__aeabi_dsub+0x56a>
   16284:	43db      	mvns	r3, r3
   16286:	2b00      	cmp	r3, #0
   16288:	d15c      	bne.n	16344 <__aeabi_dsub+0x564>
   1628a:	1887      	adds	r7, r0, r2
   1628c:	4297      	cmp	r7, r2
   1628e:	4192      	sbcs	r2, r2
   16290:	1864      	adds	r4, r4, r1
   16292:	4252      	negs	r2, r2
   16294:	18a4      	adds	r4, r4, r2
   16296:	4666      	mov	r6, ip
   16298:	e687      	b.n	15faa <__aeabi_dsub+0x1ca>
   1629a:	4650      	mov	r0, sl
   1629c:	4320      	orrs	r0, r4
   1629e:	1e44      	subs	r4, r0, #1
   162a0:	41a0      	sbcs	r0, r4
   162a2:	2400      	movs	r4, #0
   162a4:	e760      	b.n	16168 <__aeabi_dsub+0x388>
   162a6:	4e57      	ldr	r6, [pc, #348]	; (16404 <__aeabi_dsub+0x624>)
   162a8:	45b4      	cmp	ip, r6
   162aa:	d04e      	beq.n	1634a <__aeabi_dsub+0x56a>
   162ac:	2680      	movs	r6, #128	; 0x80
   162ae:	0436      	lsls	r6, r6, #16
   162b0:	425b      	negs	r3, r3
   162b2:	4334      	orrs	r4, r6
   162b4:	2b38      	cmp	r3, #56	; 0x38
   162b6:	dd00      	ble.n	162ba <__aeabi_dsub+0x4da>
   162b8:	e07f      	b.n	163ba <__aeabi_dsub+0x5da>
   162ba:	2b1f      	cmp	r3, #31
   162bc:	dd00      	ble.n	162c0 <__aeabi_dsub+0x4e0>
   162be:	e08b      	b.n	163d8 <__aeabi_dsub+0x5f8>
   162c0:	2620      	movs	r6, #32
   162c2:	0027      	movs	r7, r4
   162c4:	4650      	mov	r0, sl
   162c6:	1af6      	subs	r6, r6, r3
   162c8:	40b7      	lsls	r7, r6
   162ca:	40d8      	lsrs	r0, r3
   162cc:	4307      	orrs	r7, r0
   162ce:	4650      	mov	r0, sl
   162d0:	40b0      	lsls	r0, r6
   162d2:	1e46      	subs	r6, r0, #1
   162d4:	41b0      	sbcs	r0, r6
   162d6:	4307      	orrs	r7, r0
   162d8:	40dc      	lsrs	r4, r3
   162da:	18bf      	adds	r7, r7, r2
   162dc:	e7d6      	b.n	1628c <__aeabi_dsub+0x4ac>
   162de:	000d      	movs	r5, r1
   162e0:	4315      	orrs	r5, r2
   162e2:	d100      	bne.n	162e6 <__aeabi_dsub+0x506>
   162e4:	e602      	b.n	15eec <__aeabi_dsub+0x10c>
   162e6:	4650      	mov	r0, sl
   162e8:	1a80      	subs	r0, r0, r2
   162ea:	4582      	cmp	sl, r0
   162ec:	41bf      	sbcs	r7, r7
   162ee:	1a65      	subs	r5, r4, r1
   162f0:	427f      	negs	r7, r7
   162f2:	1bed      	subs	r5, r5, r7
   162f4:	4684      	mov	ip, r0
   162f6:	0228      	lsls	r0, r5, #8
   162f8:	d400      	bmi.n	162fc <__aeabi_dsub+0x51c>
   162fa:	e68d      	b.n	16018 <__aeabi_dsub+0x238>
   162fc:	4650      	mov	r0, sl
   162fe:	1a17      	subs	r7, r2, r0
   16300:	42ba      	cmp	r2, r7
   16302:	4192      	sbcs	r2, r2
   16304:	1b0c      	subs	r4, r1, r4
   16306:	4252      	negs	r2, r2
   16308:	1aa4      	subs	r4, r4, r2
   1630a:	4698      	mov	r8, r3
   1630c:	e5ee      	b.n	15eec <__aeabi_dsub+0x10c>
   1630e:	000d      	movs	r5, r1
   16310:	4315      	orrs	r5, r2
   16312:	d100      	bne.n	16316 <__aeabi_dsub+0x536>
   16314:	e76b      	b.n	161ee <__aeabi_dsub+0x40e>
   16316:	4650      	mov	r0, sl
   16318:	0767      	lsls	r7, r4, #29
   1631a:	08c0      	lsrs	r0, r0, #3
   1631c:	4307      	orrs	r7, r0
   1631e:	2080      	movs	r0, #128	; 0x80
   16320:	08e4      	lsrs	r4, r4, #3
   16322:	0300      	lsls	r0, r0, #12
   16324:	4204      	tst	r4, r0
   16326:	d007      	beq.n	16338 <__aeabi_dsub+0x558>
   16328:	08cd      	lsrs	r5, r1, #3
   1632a:	4205      	tst	r5, r0
   1632c:	d104      	bne.n	16338 <__aeabi_dsub+0x558>
   1632e:	002c      	movs	r4, r5
   16330:	4698      	mov	r8, r3
   16332:	08d7      	lsrs	r7, r2, #3
   16334:	0749      	lsls	r1, r1, #29
   16336:	430f      	orrs	r7, r1
   16338:	0f7b      	lsrs	r3, r7, #29
   1633a:	00e4      	lsls	r4, r4, #3
   1633c:	431c      	orrs	r4, r3
   1633e:	00ff      	lsls	r7, r7, #3
   16340:	4e30      	ldr	r6, [pc, #192]	; (16404 <__aeabi_dsub+0x624>)
   16342:	e5d3      	b.n	15eec <__aeabi_dsub+0x10c>
   16344:	4e2f      	ldr	r6, [pc, #188]	; (16404 <__aeabi_dsub+0x624>)
   16346:	45b4      	cmp	ip, r6
   16348:	d1b4      	bne.n	162b4 <__aeabi_dsub+0x4d4>
   1634a:	000c      	movs	r4, r1
   1634c:	0017      	movs	r7, r2
   1634e:	4666      	mov	r6, ip
   16350:	e5cc      	b.n	15eec <__aeabi_dsub+0x10c>
   16352:	2700      	movs	r7, #0
   16354:	2400      	movs	r4, #0
   16356:	e5e8      	b.n	15f2a <__aeabi_dsub+0x14a>
   16358:	2b00      	cmp	r3, #0
   1635a:	d039      	beq.n	163d0 <__aeabi_dsub+0x5f0>
   1635c:	000b      	movs	r3, r1
   1635e:	4313      	orrs	r3, r2
   16360:	d100      	bne.n	16364 <__aeabi_dsub+0x584>
   16362:	e744      	b.n	161ee <__aeabi_dsub+0x40e>
   16364:	08c0      	lsrs	r0, r0, #3
   16366:	0767      	lsls	r7, r4, #29
   16368:	4307      	orrs	r7, r0
   1636a:	2080      	movs	r0, #128	; 0x80
   1636c:	08e4      	lsrs	r4, r4, #3
   1636e:	0300      	lsls	r0, r0, #12
   16370:	4204      	tst	r4, r0
   16372:	d0e1      	beq.n	16338 <__aeabi_dsub+0x558>
   16374:	08cb      	lsrs	r3, r1, #3
   16376:	4203      	tst	r3, r0
   16378:	d1de      	bne.n	16338 <__aeabi_dsub+0x558>
   1637a:	08d7      	lsrs	r7, r2, #3
   1637c:	0749      	lsls	r1, r1, #29
   1637e:	430f      	orrs	r7, r1
   16380:	001c      	movs	r4, r3
   16382:	e7d9      	b.n	16338 <__aeabi_dsub+0x558>
   16384:	2100      	movs	r1, #0
   16386:	e771      	b.n	1626c <__aeabi_dsub+0x48c>
   16388:	2500      	movs	r5, #0
   1638a:	2700      	movs	r7, #0
   1638c:	e5e9      	b.n	15f62 <__aeabi_dsub+0x182>
   1638e:	002e      	movs	r6, r5
   16390:	0027      	movs	r7, r4
   16392:	3e20      	subs	r6, #32
   16394:	40f7      	lsrs	r7, r6
   16396:	2d20      	cmp	r5, #32
   16398:	d02f      	beq.n	163fa <__aeabi_dsub+0x61a>
   1639a:	2640      	movs	r6, #64	; 0x40
   1639c:	1b75      	subs	r5, r6, r5
   1639e:	40ac      	lsls	r4, r5
   163a0:	4650      	mov	r0, sl
   163a2:	4320      	orrs	r0, r4
   163a4:	1e44      	subs	r4, r0, #1
   163a6:	41a0      	sbcs	r0, r4
   163a8:	2400      	movs	r4, #0
   163aa:	4338      	orrs	r0, r7
   163ac:	e6dc      	b.n	16168 <__aeabi_dsub+0x388>
   163ae:	2480      	movs	r4, #128	; 0x80
   163b0:	2500      	movs	r5, #0
   163b2:	0324      	lsls	r4, r4, #12
   163b4:	4e13      	ldr	r6, [pc, #76]	; (16404 <__aeabi_dsub+0x624>)
   163b6:	2700      	movs	r7, #0
   163b8:	e5d3      	b.n	15f62 <__aeabi_dsub+0x182>
   163ba:	4650      	mov	r0, sl
   163bc:	4320      	orrs	r0, r4
   163be:	0007      	movs	r7, r0
   163c0:	1e78      	subs	r0, r7, #1
   163c2:	4187      	sbcs	r7, r0
   163c4:	2400      	movs	r4, #0
   163c6:	18bf      	adds	r7, r7, r2
   163c8:	e760      	b.n	1628c <__aeabi_dsub+0x4ac>
   163ca:	000c      	movs	r4, r1
   163cc:	0017      	movs	r7, r2
   163ce:	e58d      	b.n	15eec <__aeabi_dsub+0x10c>
   163d0:	000c      	movs	r4, r1
   163d2:	0017      	movs	r7, r2
   163d4:	4e0b      	ldr	r6, [pc, #44]	; (16404 <__aeabi_dsub+0x624>)
   163d6:	e589      	b.n	15eec <__aeabi_dsub+0x10c>
   163d8:	001e      	movs	r6, r3
   163da:	0027      	movs	r7, r4
   163dc:	3e20      	subs	r6, #32
   163de:	40f7      	lsrs	r7, r6
   163e0:	2b20      	cmp	r3, #32
   163e2:	d00c      	beq.n	163fe <__aeabi_dsub+0x61e>
   163e4:	2640      	movs	r6, #64	; 0x40
   163e6:	1af3      	subs	r3, r6, r3
   163e8:	409c      	lsls	r4, r3
   163ea:	4650      	mov	r0, sl
   163ec:	4320      	orrs	r0, r4
   163ee:	1e44      	subs	r4, r0, #1
   163f0:	41a0      	sbcs	r0, r4
   163f2:	4307      	orrs	r7, r0
   163f4:	2400      	movs	r4, #0
   163f6:	18bf      	adds	r7, r7, r2
   163f8:	e748      	b.n	1628c <__aeabi_dsub+0x4ac>
   163fa:	2400      	movs	r4, #0
   163fc:	e7d0      	b.n	163a0 <__aeabi_dsub+0x5c0>
   163fe:	2400      	movs	r4, #0
   16400:	e7f3      	b.n	163ea <__aeabi_dsub+0x60a>
   16402:	46c0      	nop			; (mov r8, r8)
   16404:	000007ff 	.word	0x000007ff
   16408:	ff7fffff 	.word	0xff7fffff

0001640c <__aeabi_d2iz>:
   1640c:	b530      	push	{r4, r5, lr}
   1640e:	4d13      	ldr	r5, [pc, #76]	; (1645c <__aeabi_d2iz+0x50>)
   16410:	030a      	lsls	r2, r1, #12
   16412:	004b      	lsls	r3, r1, #1
   16414:	0b12      	lsrs	r2, r2, #12
   16416:	0d5b      	lsrs	r3, r3, #21
   16418:	0fc9      	lsrs	r1, r1, #31
   1641a:	2400      	movs	r4, #0
   1641c:	42ab      	cmp	r3, r5
   1641e:	dd10      	ble.n	16442 <__aeabi_d2iz+0x36>
   16420:	4c0f      	ldr	r4, [pc, #60]	; (16460 <__aeabi_d2iz+0x54>)
   16422:	42a3      	cmp	r3, r4
   16424:	dc0f      	bgt.n	16446 <__aeabi_d2iz+0x3a>
   16426:	2480      	movs	r4, #128	; 0x80
   16428:	4d0e      	ldr	r5, [pc, #56]	; (16464 <__aeabi_d2iz+0x58>)
   1642a:	0364      	lsls	r4, r4, #13
   1642c:	4322      	orrs	r2, r4
   1642e:	1aed      	subs	r5, r5, r3
   16430:	2d1f      	cmp	r5, #31
   16432:	dd0b      	ble.n	1644c <__aeabi_d2iz+0x40>
   16434:	480c      	ldr	r0, [pc, #48]	; (16468 <__aeabi_d2iz+0x5c>)
   16436:	1ac3      	subs	r3, r0, r3
   16438:	40da      	lsrs	r2, r3
   1643a:	4254      	negs	r4, r2
   1643c:	2900      	cmp	r1, #0
   1643e:	d100      	bne.n	16442 <__aeabi_d2iz+0x36>
   16440:	0014      	movs	r4, r2
   16442:	0020      	movs	r0, r4
   16444:	bd30      	pop	{r4, r5, pc}
   16446:	4b09      	ldr	r3, [pc, #36]	; (1646c <__aeabi_d2iz+0x60>)
   16448:	18cc      	adds	r4, r1, r3
   1644a:	e7fa      	b.n	16442 <__aeabi_d2iz+0x36>
   1644c:	4c08      	ldr	r4, [pc, #32]	; (16470 <__aeabi_d2iz+0x64>)
   1644e:	40e8      	lsrs	r0, r5
   16450:	46a4      	mov	ip, r4
   16452:	4463      	add	r3, ip
   16454:	409a      	lsls	r2, r3
   16456:	4302      	orrs	r2, r0
   16458:	e7ef      	b.n	1643a <__aeabi_d2iz+0x2e>
   1645a:	46c0      	nop			; (mov r8, r8)
   1645c:	000003fe 	.word	0x000003fe
   16460:	0000041d 	.word	0x0000041d
   16464:	00000433 	.word	0x00000433
   16468:	00000413 	.word	0x00000413
   1646c:	7fffffff 	.word	0x7fffffff
   16470:	fffffbed 	.word	0xfffffbed

00016474 <__aeabi_i2d>:
   16474:	b570      	push	{r4, r5, r6, lr}
   16476:	2800      	cmp	r0, #0
   16478:	d030      	beq.n	164dc <__aeabi_i2d+0x68>
   1647a:	17c3      	asrs	r3, r0, #31
   1647c:	18c4      	adds	r4, r0, r3
   1647e:	405c      	eors	r4, r3
   16480:	0fc5      	lsrs	r5, r0, #31
   16482:	0020      	movs	r0, r4
   16484:	f000 f94c 	bl	16720 <__clzsi2>
   16488:	4b17      	ldr	r3, [pc, #92]	; (164e8 <__aeabi_i2d+0x74>)
   1648a:	4a18      	ldr	r2, [pc, #96]	; (164ec <__aeabi_i2d+0x78>)
   1648c:	1a1b      	subs	r3, r3, r0
   1648e:	1ad2      	subs	r2, r2, r3
   16490:	2a1f      	cmp	r2, #31
   16492:	dd18      	ble.n	164c6 <__aeabi_i2d+0x52>
   16494:	4a16      	ldr	r2, [pc, #88]	; (164f0 <__aeabi_i2d+0x7c>)
   16496:	1ad2      	subs	r2, r2, r3
   16498:	4094      	lsls	r4, r2
   1649a:	2200      	movs	r2, #0
   1649c:	0324      	lsls	r4, r4, #12
   1649e:	055b      	lsls	r3, r3, #21
   164a0:	0b24      	lsrs	r4, r4, #12
   164a2:	0d5b      	lsrs	r3, r3, #21
   164a4:	2100      	movs	r1, #0
   164a6:	0010      	movs	r0, r2
   164a8:	0324      	lsls	r4, r4, #12
   164aa:	0d0a      	lsrs	r2, r1, #20
   164ac:	0b24      	lsrs	r4, r4, #12
   164ae:	0512      	lsls	r2, r2, #20
   164b0:	4322      	orrs	r2, r4
   164b2:	4c10      	ldr	r4, [pc, #64]	; (164f4 <__aeabi_i2d+0x80>)
   164b4:	051b      	lsls	r3, r3, #20
   164b6:	4022      	ands	r2, r4
   164b8:	4313      	orrs	r3, r2
   164ba:	005b      	lsls	r3, r3, #1
   164bc:	07ed      	lsls	r5, r5, #31
   164be:	085b      	lsrs	r3, r3, #1
   164c0:	432b      	orrs	r3, r5
   164c2:	0019      	movs	r1, r3
   164c4:	bd70      	pop	{r4, r5, r6, pc}
   164c6:	0021      	movs	r1, r4
   164c8:	4091      	lsls	r1, r2
   164ca:	000a      	movs	r2, r1
   164cc:	210b      	movs	r1, #11
   164ce:	1a08      	subs	r0, r1, r0
   164d0:	40c4      	lsrs	r4, r0
   164d2:	055b      	lsls	r3, r3, #21
   164d4:	0324      	lsls	r4, r4, #12
   164d6:	0b24      	lsrs	r4, r4, #12
   164d8:	0d5b      	lsrs	r3, r3, #21
   164da:	e7e3      	b.n	164a4 <__aeabi_i2d+0x30>
   164dc:	2500      	movs	r5, #0
   164de:	2300      	movs	r3, #0
   164e0:	2400      	movs	r4, #0
   164e2:	2200      	movs	r2, #0
   164e4:	e7de      	b.n	164a4 <__aeabi_i2d+0x30>
   164e6:	46c0      	nop			; (mov r8, r8)
   164e8:	0000041e 	.word	0x0000041e
   164ec:	00000433 	.word	0x00000433
   164f0:	00000413 	.word	0x00000413
   164f4:	800fffff 	.word	0x800fffff

000164f8 <__aeabi_ui2d>:
   164f8:	b510      	push	{r4, lr}
   164fa:	1e04      	subs	r4, r0, #0
   164fc:	d028      	beq.n	16550 <__aeabi_ui2d+0x58>
   164fe:	f000 f90f 	bl	16720 <__clzsi2>
   16502:	4b15      	ldr	r3, [pc, #84]	; (16558 <__aeabi_ui2d+0x60>)
   16504:	4a15      	ldr	r2, [pc, #84]	; (1655c <__aeabi_ui2d+0x64>)
   16506:	1a1b      	subs	r3, r3, r0
   16508:	1ad2      	subs	r2, r2, r3
   1650a:	2a1f      	cmp	r2, #31
   1650c:	dd15      	ble.n	1653a <__aeabi_ui2d+0x42>
   1650e:	4a14      	ldr	r2, [pc, #80]	; (16560 <__aeabi_ui2d+0x68>)
   16510:	1ad2      	subs	r2, r2, r3
   16512:	4094      	lsls	r4, r2
   16514:	2200      	movs	r2, #0
   16516:	0324      	lsls	r4, r4, #12
   16518:	055b      	lsls	r3, r3, #21
   1651a:	0b24      	lsrs	r4, r4, #12
   1651c:	0d5b      	lsrs	r3, r3, #21
   1651e:	2100      	movs	r1, #0
   16520:	0010      	movs	r0, r2
   16522:	0324      	lsls	r4, r4, #12
   16524:	0d0a      	lsrs	r2, r1, #20
   16526:	0b24      	lsrs	r4, r4, #12
   16528:	0512      	lsls	r2, r2, #20
   1652a:	4322      	orrs	r2, r4
   1652c:	4c0d      	ldr	r4, [pc, #52]	; (16564 <__aeabi_ui2d+0x6c>)
   1652e:	051b      	lsls	r3, r3, #20
   16530:	4022      	ands	r2, r4
   16532:	4313      	orrs	r3, r2
   16534:	005b      	lsls	r3, r3, #1
   16536:	0859      	lsrs	r1, r3, #1
   16538:	bd10      	pop	{r4, pc}
   1653a:	0021      	movs	r1, r4
   1653c:	4091      	lsls	r1, r2
   1653e:	000a      	movs	r2, r1
   16540:	210b      	movs	r1, #11
   16542:	1a08      	subs	r0, r1, r0
   16544:	40c4      	lsrs	r4, r0
   16546:	055b      	lsls	r3, r3, #21
   16548:	0324      	lsls	r4, r4, #12
   1654a:	0b24      	lsrs	r4, r4, #12
   1654c:	0d5b      	lsrs	r3, r3, #21
   1654e:	e7e6      	b.n	1651e <__aeabi_ui2d+0x26>
   16550:	2300      	movs	r3, #0
   16552:	2400      	movs	r4, #0
   16554:	2200      	movs	r2, #0
   16556:	e7e2      	b.n	1651e <__aeabi_ui2d+0x26>
   16558:	0000041e 	.word	0x0000041e
   1655c:	00000433 	.word	0x00000433
   16560:	00000413 	.word	0x00000413
   16564:	800fffff 	.word	0x800fffff

00016568 <__aeabi_f2d>:
   16568:	0041      	lsls	r1, r0, #1
   1656a:	0e09      	lsrs	r1, r1, #24
   1656c:	1c4b      	adds	r3, r1, #1
   1656e:	b570      	push	{r4, r5, r6, lr}
   16570:	b2db      	uxtb	r3, r3
   16572:	0246      	lsls	r6, r0, #9
   16574:	0a75      	lsrs	r5, r6, #9
   16576:	0fc4      	lsrs	r4, r0, #31
   16578:	2b01      	cmp	r3, #1
   1657a:	dd14      	ble.n	165a6 <__aeabi_f2d+0x3e>
   1657c:	23e0      	movs	r3, #224	; 0xe0
   1657e:	009b      	lsls	r3, r3, #2
   16580:	076d      	lsls	r5, r5, #29
   16582:	0b36      	lsrs	r6, r6, #12
   16584:	18cb      	adds	r3, r1, r3
   16586:	2100      	movs	r1, #0
   16588:	0d0a      	lsrs	r2, r1, #20
   1658a:	0028      	movs	r0, r5
   1658c:	0512      	lsls	r2, r2, #20
   1658e:	4d1c      	ldr	r5, [pc, #112]	; (16600 <__aeabi_f2d+0x98>)
   16590:	4332      	orrs	r2, r6
   16592:	055b      	lsls	r3, r3, #21
   16594:	402a      	ands	r2, r5
   16596:	085b      	lsrs	r3, r3, #1
   16598:	4313      	orrs	r3, r2
   1659a:	005b      	lsls	r3, r3, #1
   1659c:	07e4      	lsls	r4, r4, #31
   1659e:	085b      	lsrs	r3, r3, #1
   165a0:	4323      	orrs	r3, r4
   165a2:	0019      	movs	r1, r3
   165a4:	bd70      	pop	{r4, r5, r6, pc}
   165a6:	2900      	cmp	r1, #0
   165a8:	d114      	bne.n	165d4 <__aeabi_f2d+0x6c>
   165aa:	2d00      	cmp	r5, #0
   165ac:	d01e      	beq.n	165ec <__aeabi_f2d+0x84>
   165ae:	0028      	movs	r0, r5
   165b0:	f000 f8b6 	bl	16720 <__clzsi2>
   165b4:	280a      	cmp	r0, #10
   165b6:	dc1c      	bgt.n	165f2 <__aeabi_f2d+0x8a>
   165b8:	230b      	movs	r3, #11
   165ba:	002a      	movs	r2, r5
   165bc:	1a1b      	subs	r3, r3, r0
   165be:	40da      	lsrs	r2, r3
   165c0:	0003      	movs	r3, r0
   165c2:	3315      	adds	r3, #21
   165c4:	409d      	lsls	r5, r3
   165c6:	4b0f      	ldr	r3, [pc, #60]	; (16604 <__aeabi_f2d+0x9c>)
   165c8:	0312      	lsls	r2, r2, #12
   165ca:	1a1b      	subs	r3, r3, r0
   165cc:	055b      	lsls	r3, r3, #21
   165ce:	0b16      	lsrs	r6, r2, #12
   165d0:	0d5b      	lsrs	r3, r3, #21
   165d2:	e7d8      	b.n	16586 <__aeabi_f2d+0x1e>
   165d4:	2d00      	cmp	r5, #0
   165d6:	d006      	beq.n	165e6 <__aeabi_f2d+0x7e>
   165d8:	0b32      	lsrs	r2, r6, #12
   165da:	2680      	movs	r6, #128	; 0x80
   165dc:	0336      	lsls	r6, r6, #12
   165de:	076d      	lsls	r5, r5, #29
   165e0:	4316      	orrs	r6, r2
   165e2:	4b09      	ldr	r3, [pc, #36]	; (16608 <__aeabi_f2d+0xa0>)
   165e4:	e7cf      	b.n	16586 <__aeabi_f2d+0x1e>
   165e6:	4b08      	ldr	r3, [pc, #32]	; (16608 <__aeabi_f2d+0xa0>)
   165e8:	2600      	movs	r6, #0
   165ea:	e7cc      	b.n	16586 <__aeabi_f2d+0x1e>
   165ec:	2300      	movs	r3, #0
   165ee:	2600      	movs	r6, #0
   165f0:	e7c9      	b.n	16586 <__aeabi_f2d+0x1e>
   165f2:	0003      	movs	r3, r0
   165f4:	002a      	movs	r2, r5
   165f6:	3b0b      	subs	r3, #11
   165f8:	409a      	lsls	r2, r3
   165fa:	2500      	movs	r5, #0
   165fc:	e7e3      	b.n	165c6 <__aeabi_f2d+0x5e>
   165fe:	46c0      	nop			; (mov r8, r8)
   16600:	800fffff 	.word	0x800fffff
   16604:	00000389 	.word	0x00000389
   16608:	000007ff 	.word	0x000007ff

0001660c <__aeabi_d2f>:
   1660c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1660e:	004c      	lsls	r4, r1, #1
   16610:	0d64      	lsrs	r4, r4, #21
   16612:	030b      	lsls	r3, r1, #12
   16614:	1c62      	adds	r2, r4, #1
   16616:	0f45      	lsrs	r5, r0, #29
   16618:	0a5b      	lsrs	r3, r3, #9
   1661a:	0552      	lsls	r2, r2, #21
   1661c:	432b      	orrs	r3, r5
   1661e:	0fc9      	lsrs	r1, r1, #31
   16620:	00c5      	lsls	r5, r0, #3
   16622:	0d52      	lsrs	r2, r2, #21
   16624:	2a01      	cmp	r2, #1
   16626:	dd28      	ble.n	1667a <__aeabi_d2f+0x6e>
   16628:	4a3a      	ldr	r2, [pc, #232]	; (16714 <__aeabi_d2f+0x108>)
   1662a:	18a6      	adds	r6, r4, r2
   1662c:	2efe      	cmp	r6, #254	; 0xfe
   1662e:	dc1b      	bgt.n	16668 <__aeabi_d2f+0x5c>
   16630:	2e00      	cmp	r6, #0
   16632:	dd3e      	ble.n	166b2 <__aeabi_d2f+0xa6>
   16634:	0180      	lsls	r0, r0, #6
   16636:	0002      	movs	r2, r0
   16638:	1e50      	subs	r0, r2, #1
   1663a:	4182      	sbcs	r2, r0
   1663c:	0f6d      	lsrs	r5, r5, #29
   1663e:	432a      	orrs	r2, r5
   16640:	00db      	lsls	r3, r3, #3
   16642:	4313      	orrs	r3, r2
   16644:	075a      	lsls	r2, r3, #29
   16646:	d004      	beq.n	16652 <__aeabi_d2f+0x46>
   16648:	220f      	movs	r2, #15
   1664a:	401a      	ands	r2, r3
   1664c:	2a04      	cmp	r2, #4
   1664e:	d000      	beq.n	16652 <__aeabi_d2f+0x46>
   16650:	3304      	adds	r3, #4
   16652:	2280      	movs	r2, #128	; 0x80
   16654:	04d2      	lsls	r2, r2, #19
   16656:	401a      	ands	r2, r3
   16658:	d05a      	beq.n	16710 <__aeabi_d2f+0x104>
   1665a:	3601      	adds	r6, #1
   1665c:	2eff      	cmp	r6, #255	; 0xff
   1665e:	d003      	beq.n	16668 <__aeabi_d2f+0x5c>
   16660:	019b      	lsls	r3, r3, #6
   16662:	0a5b      	lsrs	r3, r3, #9
   16664:	b2f4      	uxtb	r4, r6
   16666:	e001      	b.n	1666c <__aeabi_d2f+0x60>
   16668:	24ff      	movs	r4, #255	; 0xff
   1666a:	2300      	movs	r3, #0
   1666c:	0258      	lsls	r0, r3, #9
   1666e:	05e4      	lsls	r4, r4, #23
   16670:	0a40      	lsrs	r0, r0, #9
   16672:	07c9      	lsls	r1, r1, #31
   16674:	4320      	orrs	r0, r4
   16676:	4308      	orrs	r0, r1
   16678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1667a:	2c00      	cmp	r4, #0
   1667c:	d007      	beq.n	1668e <__aeabi_d2f+0x82>
   1667e:	431d      	orrs	r5, r3
   16680:	d0f2      	beq.n	16668 <__aeabi_d2f+0x5c>
   16682:	2080      	movs	r0, #128	; 0x80
   16684:	00db      	lsls	r3, r3, #3
   16686:	0480      	lsls	r0, r0, #18
   16688:	4303      	orrs	r3, r0
   1668a:	26ff      	movs	r6, #255	; 0xff
   1668c:	e7da      	b.n	16644 <__aeabi_d2f+0x38>
   1668e:	432b      	orrs	r3, r5
   16690:	d003      	beq.n	1669a <__aeabi_d2f+0x8e>
   16692:	2305      	movs	r3, #5
   16694:	08db      	lsrs	r3, r3, #3
   16696:	2cff      	cmp	r4, #255	; 0xff
   16698:	d003      	beq.n	166a2 <__aeabi_d2f+0x96>
   1669a:	025b      	lsls	r3, r3, #9
   1669c:	0a5b      	lsrs	r3, r3, #9
   1669e:	b2e4      	uxtb	r4, r4
   166a0:	e7e4      	b.n	1666c <__aeabi_d2f+0x60>
   166a2:	2b00      	cmp	r3, #0
   166a4:	d032      	beq.n	1670c <__aeabi_d2f+0x100>
   166a6:	2080      	movs	r0, #128	; 0x80
   166a8:	03c0      	lsls	r0, r0, #15
   166aa:	4303      	orrs	r3, r0
   166ac:	025b      	lsls	r3, r3, #9
   166ae:	0a5b      	lsrs	r3, r3, #9
   166b0:	e7dc      	b.n	1666c <__aeabi_d2f+0x60>
   166b2:	0032      	movs	r2, r6
   166b4:	3217      	adds	r2, #23
   166b6:	db14      	blt.n	166e2 <__aeabi_d2f+0xd6>
   166b8:	2280      	movs	r2, #128	; 0x80
   166ba:	271e      	movs	r7, #30
   166bc:	0412      	lsls	r2, r2, #16
   166be:	4313      	orrs	r3, r2
   166c0:	1bbf      	subs	r7, r7, r6
   166c2:	2f1f      	cmp	r7, #31
   166c4:	dc0f      	bgt.n	166e6 <__aeabi_d2f+0xda>
   166c6:	4a14      	ldr	r2, [pc, #80]	; (16718 <__aeabi_d2f+0x10c>)
   166c8:	4694      	mov	ip, r2
   166ca:	4464      	add	r4, ip
   166cc:	002a      	movs	r2, r5
   166ce:	40a5      	lsls	r5, r4
   166d0:	002e      	movs	r6, r5
   166d2:	40a3      	lsls	r3, r4
   166d4:	1e75      	subs	r5, r6, #1
   166d6:	41ae      	sbcs	r6, r5
   166d8:	40fa      	lsrs	r2, r7
   166da:	4333      	orrs	r3, r6
   166dc:	4313      	orrs	r3, r2
   166de:	2600      	movs	r6, #0
   166e0:	e7b0      	b.n	16644 <__aeabi_d2f+0x38>
   166e2:	2400      	movs	r4, #0
   166e4:	e7d5      	b.n	16692 <__aeabi_d2f+0x86>
   166e6:	2202      	movs	r2, #2
   166e8:	4252      	negs	r2, r2
   166ea:	1b96      	subs	r6, r2, r6
   166ec:	001a      	movs	r2, r3
   166ee:	40f2      	lsrs	r2, r6
   166f0:	2f20      	cmp	r7, #32
   166f2:	d009      	beq.n	16708 <__aeabi_d2f+0xfc>
   166f4:	4809      	ldr	r0, [pc, #36]	; (1671c <__aeabi_d2f+0x110>)
   166f6:	4684      	mov	ip, r0
   166f8:	4464      	add	r4, ip
   166fa:	40a3      	lsls	r3, r4
   166fc:	432b      	orrs	r3, r5
   166fe:	1e5d      	subs	r5, r3, #1
   16700:	41ab      	sbcs	r3, r5
   16702:	2600      	movs	r6, #0
   16704:	4313      	orrs	r3, r2
   16706:	e79d      	b.n	16644 <__aeabi_d2f+0x38>
   16708:	2300      	movs	r3, #0
   1670a:	e7f7      	b.n	166fc <__aeabi_d2f+0xf0>
   1670c:	2300      	movs	r3, #0
   1670e:	e7ad      	b.n	1666c <__aeabi_d2f+0x60>
   16710:	0034      	movs	r4, r6
   16712:	e7bf      	b.n	16694 <__aeabi_d2f+0x88>
   16714:	fffffc80 	.word	0xfffffc80
   16718:	fffffc82 	.word	0xfffffc82
   1671c:	fffffca2 	.word	0xfffffca2

00016720 <__clzsi2>:
   16720:	211c      	movs	r1, #28
   16722:	2301      	movs	r3, #1
   16724:	041b      	lsls	r3, r3, #16
   16726:	4298      	cmp	r0, r3
   16728:	d301      	bcc.n	1672e <__clzsi2+0xe>
   1672a:	0c00      	lsrs	r0, r0, #16
   1672c:	3910      	subs	r1, #16
   1672e:	0a1b      	lsrs	r3, r3, #8
   16730:	4298      	cmp	r0, r3
   16732:	d301      	bcc.n	16738 <__clzsi2+0x18>
   16734:	0a00      	lsrs	r0, r0, #8
   16736:	3908      	subs	r1, #8
   16738:	091b      	lsrs	r3, r3, #4
   1673a:	4298      	cmp	r0, r3
   1673c:	d301      	bcc.n	16742 <__clzsi2+0x22>
   1673e:	0900      	lsrs	r0, r0, #4
   16740:	3904      	subs	r1, #4
   16742:	a202      	add	r2, pc, #8	; (adr r2, 1674c <__clzsi2+0x2c>)
   16744:	5c10      	ldrb	r0, [r2, r0]
   16746:	1840      	adds	r0, r0, r1
   16748:	4770      	bx	lr
   1674a:	46c0      	nop			; (mov r8, r8)
   1674c:	02020304 	.word	0x02020304
   16750:	01010101 	.word	0x01010101
	...

0001675c <__clzdi2>:
   1675c:	b510      	push	{r4, lr}
   1675e:	2900      	cmp	r1, #0
   16760:	d103      	bne.n	1676a <__clzdi2+0xe>
   16762:	f7ff ffdd 	bl	16720 <__clzsi2>
   16766:	3020      	adds	r0, #32
   16768:	e002      	b.n	16770 <__clzdi2+0x14>
   1676a:	1c08      	adds	r0, r1, #0
   1676c:	f7ff ffd8 	bl	16720 <__clzsi2>
   16770:	bd10      	pop	{r4, pc}
   16772:	46c0      	nop			; (mov r8, r8)

00016774 <__assert_func>:
   16774:	b530      	push	{r4, r5, lr}
   16776:	001c      	movs	r4, r3
   16778:	4b09      	ldr	r3, [pc, #36]	; (167a0 <__assert_func+0x2c>)
   1677a:	0005      	movs	r5, r0
   1677c:	681b      	ldr	r3, [r3, #0]
   1677e:	b085      	sub	sp, #20
   16780:	68d8      	ldr	r0, [r3, #12]
   16782:	4b08      	ldr	r3, [pc, #32]	; (167a4 <__assert_func+0x30>)
   16784:	2a00      	cmp	r2, #0
   16786:	d101      	bne.n	1678c <__assert_func+0x18>
   16788:	4b07      	ldr	r3, [pc, #28]	; (167a8 <__assert_func+0x34>)
   1678a:	001a      	movs	r2, r3
   1678c:	9202      	str	r2, [sp, #8]
   1678e:	9301      	str	r3, [sp, #4]
   16790:	9100      	str	r1, [sp, #0]
   16792:	002b      	movs	r3, r5
   16794:	0022      	movs	r2, r4
   16796:	4905      	ldr	r1, [pc, #20]	; (167ac <__assert_func+0x38>)
   16798:	f000 f80a 	bl	167b0 <fiprintf>
   1679c:	f000 fdac 	bl	172f8 <abort>
   167a0:	20000028 	.word	0x20000028
   167a4:	00018eb4 	.word	0x00018eb4
   167a8:	00018eef 	.word	0x00018eef
   167ac:	00018ec1 	.word	0x00018ec1

000167b0 <fiprintf>:
   167b0:	b40e      	push	{r1, r2, r3}
   167b2:	b503      	push	{r0, r1, lr}
   167b4:	0001      	movs	r1, r0
   167b6:	ab03      	add	r3, sp, #12
   167b8:	4804      	ldr	r0, [pc, #16]	; (167cc <fiprintf+0x1c>)
   167ba:	cb04      	ldmia	r3!, {r2}
   167bc:	6800      	ldr	r0, [r0, #0]
   167be:	9301      	str	r3, [sp, #4]
   167c0:	f000 f872 	bl	168a8 <_vfiprintf_r>
   167c4:	b002      	add	sp, #8
   167c6:	bc08      	pop	{r3}
   167c8:	b003      	add	sp, #12
   167ca:	4718      	bx	r3
   167cc:	20000028 	.word	0x20000028

000167d0 <__libc_init_array>:
   167d0:	b570      	push	{r4, r5, r6, lr}
   167d2:	2600      	movs	r6, #0
   167d4:	4d0c      	ldr	r5, [pc, #48]	; (16808 <__libc_init_array+0x38>)
   167d6:	4c0d      	ldr	r4, [pc, #52]	; (1680c <__libc_init_array+0x3c>)
   167d8:	1b64      	subs	r4, r4, r5
   167da:	10a4      	asrs	r4, r4, #2
   167dc:	42a6      	cmp	r6, r4
   167de:	d109      	bne.n	167f4 <__libc_init_array+0x24>
   167e0:	2600      	movs	r6, #0
   167e2:	f002 fbd1 	bl	18f88 <_init>
   167e6:	4d0a      	ldr	r5, [pc, #40]	; (16810 <__libc_init_array+0x40>)
   167e8:	4c0a      	ldr	r4, [pc, #40]	; (16814 <__libc_init_array+0x44>)
   167ea:	1b64      	subs	r4, r4, r5
   167ec:	10a4      	asrs	r4, r4, #2
   167ee:	42a6      	cmp	r6, r4
   167f0:	d105      	bne.n	167fe <__libc_init_array+0x2e>
   167f2:	bd70      	pop	{r4, r5, r6, pc}
   167f4:	00b3      	lsls	r3, r6, #2
   167f6:	58eb      	ldr	r3, [r5, r3]
   167f8:	4798      	blx	r3
   167fa:	3601      	adds	r6, #1
   167fc:	e7ee      	b.n	167dc <__libc_init_array+0xc>
   167fe:	00b3      	lsls	r3, r6, #2
   16800:	58eb      	ldr	r3, [r5, r3]
   16802:	4798      	blx	r3
   16804:	3601      	adds	r6, #1
   16806:	e7f2      	b.n	167ee <__libc_init_array+0x1e>
   16808:	00018f94 	.word	0x00018f94
   1680c:	00018f94 	.word	0x00018f94
   16810:	00018f94 	.word	0x00018f94
   16814:	00018f98 	.word	0x00018f98

00016818 <memcmp>:
   16818:	b530      	push	{r4, r5, lr}
   1681a:	2400      	movs	r4, #0
   1681c:	42a2      	cmp	r2, r4
   1681e:	d101      	bne.n	16824 <memcmp+0xc>
   16820:	2000      	movs	r0, #0
   16822:	e005      	b.n	16830 <memcmp+0x18>
   16824:	5d03      	ldrb	r3, [r0, r4]
   16826:	1c65      	adds	r5, r4, #1
   16828:	5d0c      	ldrb	r4, [r1, r4]
   1682a:	42a3      	cmp	r3, r4
   1682c:	d001      	beq.n	16832 <memcmp+0x1a>
   1682e:	1b18      	subs	r0, r3, r4
   16830:	bd30      	pop	{r4, r5, pc}
   16832:	002c      	movs	r4, r5
   16834:	e7f2      	b.n	1681c <memcmp+0x4>

00016836 <memcpy>:
   16836:	2300      	movs	r3, #0
   16838:	b510      	push	{r4, lr}
   1683a:	429a      	cmp	r2, r3
   1683c:	d100      	bne.n	16840 <memcpy+0xa>
   1683e:	bd10      	pop	{r4, pc}
   16840:	5ccc      	ldrb	r4, [r1, r3]
   16842:	54c4      	strb	r4, [r0, r3]
   16844:	3301      	adds	r3, #1
   16846:	e7f8      	b.n	1683a <memcpy+0x4>

00016848 <memset>:
   16848:	0003      	movs	r3, r0
   1684a:	1882      	adds	r2, r0, r2
   1684c:	4293      	cmp	r3, r2
   1684e:	d100      	bne.n	16852 <memset+0xa>
   16850:	4770      	bx	lr
   16852:	7019      	strb	r1, [r3, #0]
   16854:	3301      	adds	r3, #1
   16856:	e7f9      	b.n	1684c <memset+0x4>

00016858 <__sfputc_r>:
   16858:	6893      	ldr	r3, [r2, #8]
   1685a:	b510      	push	{r4, lr}
   1685c:	3b01      	subs	r3, #1
   1685e:	6093      	str	r3, [r2, #8]
   16860:	2b00      	cmp	r3, #0
   16862:	da05      	bge.n	16870 <__sfputc_r+0x18>
   16864:	6994      	ldr	r4, [r2, #24]
   16866:	42a3      	cmp	r3, r4
   16868:	db08      	blt.n	1687c <__sfputc_r+0x24>
   1686a:	b2cb      	uxtb	r3, r1
   1686c:	2b0a      	cmp	r3, #10
   1686e:	d005      	beq.n	1687c <__sfputc_r+0x24>
   16870:	6813      	ldr	r3, [r2, #0]
   16872:	1c58      	adds	r0, r3, #1
   16874:	6010      	str	r0, [r2, #0]
   16876:	7019      	strb	r1, [r3, #0]
   16878:	b2c8      	uxtb	r0, r1
   1687a:	bd10      	pop	{r4, pc}
   1687c:	f000 fc70 	bl	17160 <__swbuf_r>
   16880:	e7fb      	b.n	1687a <__sfputc_r+0x22>

00016882 <__sfputs_r>:
   16882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16884:	0006      	movs	r6, r0
   16886:	000f      	movs	r7, r1
   16888:	0014      	movs	r4, r2
   1688a:	18d5      	adds	r5, r2, r3
   1688c:	42ac      	cmp	r4, r5
   1688e:	d101      	bne.n	16894 <__sfputs_r+0x12>
   16890:	2000      	movs	r0, #0
   16892:	e007      	b.n	168a4 <__sfputs_r+0x22>
   16894:	7821      	ldrb	r1, [r4, #0]
   16896:	003a      	movs	r2, r7
   16898:	0030      	movs	r0, r6
   1689a:	f7ff ffdd 	bl	16858 <__sfputc_r>
   1689e:	3401      	adds	r4, #1
   168a0:	1c43      	adds	r3, r0, #1
   168a2:	d1f3      	bne.n	1688c <__sfputs_r+0xa>
   168a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168a6:	Address 0x000168a6 is out of bounds.


000168a8 <_vfiprintf_r>:
   168a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   168aa:	b09f      	sub	sp, #124	; 0x7c
   168ac:	0006      	movs	r6, r0
   168ae:	000f      	movs	r7, r1
   168b0:	0014      	movs	r4, r2
   168b2:	9305      	str	r3, [sp, #20]
   168b4:	2800      	cmp	r0, #0
   168b6:	d004      	beq.n	168c2 <_vfiprintf_r+0x1a>
   168b8:	6983      	ldr	r3, [r0, #24]
   168ba:	2b00      	cmp	r3, #0
   168bc:	d101      	bne.n	168c2 <_vfiprintf_r+0x1a>
   168be:	f000 fe1b 	bl	174f8 <__sinit>
   168c2:	4b7f      	ldr	r3, [pc, #508]	; (16ac0 <_vfiprintf_r+0x218>)
   168c4:	429f      	cmp	r7, r3
   168c6:	d15c      	bne.n	16982 <_vfiprintf_r+0xda>
   168c8:	6877      	ldr	r7, [r6, #4]
   168ca:	89bb      	ldrh	r3, [r7, #12]
   168cc:	071b      	lsls	r3, r3, #28
   168ce:	d562      	bpl.n	16996 <_vfiprintf_r+0xee>
   168d0:	693b      	ldr	r3, [r7, #16]
   168d2:	2b00      	cmp	r3, #0
   168d4:	d05f      	beq.n	16996 <_vfiprintf_r+0xee>
   168d6:	2300      	movs	r3, #0
   168d8:	ad06      	add	r5, sp, #24
   168da:	616b      	str	r3, [r5, #20]
   168dc:	3320      	adds	r3, #32
   168de:	766b      	strb	r3, [r5, #25]
   168e0:	3310      	adds	r3, #16
   168e2:	76ab      	strb	r3, [r5, #26]
   168e4:	9402      	str	r4, [sp, #8]
   168e6:	9c02      	ldr	r4, [sp, #8]
   168e8:	7823      	ldrb	r3, [r4, #0]
   168ea:	2b00      	cmp	r3, #0
   168ec:	d15d      	bne.n	169aa <_vfiprintf_r+0x102>
   168ee:	9b02      	ldr	r3, [sp, #8]
   168f0:	1ae3      	subs	r3, r4, r3
   168f2:	9304      	str	r3, [sp, #16]
   168f4:	d00d      	beq.n	16912 <_vfiprintf_r+0x6a>
   168f6:	9b04      	ldr	r3, [sp, #16]
   168f8:	9a02      	ldr	r2, [sp, #8]
   168fa:	0039      	movs	r1, r7
   168fc:	0030      	movs	r0, r6
   168fe:	f7ff ffc0 	bl	16882 <__sfputs_r>
   16902:	1c43      	adds	r3, r0, #1
   16904:	d100      	bne.n	16908 <_vfiprintf_r+0x60>
   16906:	e0cc      	b.n	16aa2 <_vfiprintf_r+0x1fa>
   16908:	696a      	ldr	r2, [r5, #20]
   1690a:	9b04      	ldr	r3, [sp, #16]
   1690c:	4694      	mov	ip, r2
   1690e:	4463      	add	r3, ip
   16910:	616b      	str	r3, [r5, #20]
   16912:	7823      	ldrb	r3, [r4, #0]
   16914:	2b00      	cmp	r3, #0
   16916:	d100      	bne.n	1691a <_vfiprintf_r+0x72>
   16918:	e0c3      	b.n	16aa2 <_vfiprintf_r+0x1fa>
   1691a:	2201      	movs	r2, #1
   1691c:	2300      	movs	r3, #0
   1691e:	4252      	negs	r2, r2
   16920:	606a      	str	r2, [r5, #4]
   16922:	a902      	add	r1, sp, #8
   16924:	3254      	adds	r2, #84	; 0x54
   16926:	1852      	adds	r2, r2, r1
   16928:	3401      	adds	r4, #1
   1692a:	602b      	str	r3, [r5, #0]
   1692c:	60eb      	str	r3, [r5, #12]
   1692e:	60ab      	str	r3, [r5, #8]
   16930:	7013      	strb	r3, [r2, #0]
   16932:	65ab      	str	r3, [r5, #88]	; 0x58
   16934:	7821      	ldrb	r1, [r4, #0]
   16936:	2205      	movs	r2, #5
   16938:	4862      	ldr	r0, [pc, #392]	; (16ac4 <_vfiprintf_r+0x21c>)
   1693a:	f000 fee9 	bl	17710 <memchr>
   1693e:	1c63      	adds	r3, r4, #1
   16940:	469c      	mov	ip, r3
   16942:	2800      	cmp	r0, #0
   16944:	d135      	bne.n	169b2 <_vfiprintf_r+0x10a>
   16946:	6829      	ldr	r1, [r5, #0]
   16948:	06cb      	lsls	r3, r1, #27
   1694a:	d504      	bpl.n	16956 <_vfiprintf_r+0xae>
   1694c:	2353      	movs	r3, #83	; 0x53
   1694e:	aa02      	add	r2, sp, #8
   16950:	3020      	adds	r0, #32
   16952:	189b      	adds	r3, r3, r2
   16954:	7018      	strb	r0, [r3, #0]
   16956:	070b      	lsls	r3, r1, #28
   16958:	d504      	bpl.n	16964 <_vfiprintf_r+0xbc>
   1695a:	2353      	movs	r3, #83	; 0x53
   1695c:	202b      	movs	r0, #43	; 0x2b
   1695e:	aa02      	add	r2, sp, #8
   16960:	189b      	adds	r3, r3, r2
   16962:	7018      	strb	r0, [r3, #0]
   16964:	7823      	ldrb	r3, [r4, #0]
   16966:	2b2a      	cmp	r3, #42	; 0x2a
   16968:	d02c      	beq.n	169c4 <_vfiprintf_r+0x11c>
   1696a:	2000      	movs	r0, #0
   1696c:	210a      	movs	r1, #10
   1696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16970:	7822      	ldrb	r2, [r4, #0]
   16972:	3a30      	subs	r2, #48	; 0x30
   16974:	2a09      	cmp	r2, #9
   16976:	d800      	bhi.n	1697a <_vfiprintf_r+0xd2>
   16978:	e06b      	b.n	16a52 <_vfiprintf_r+0x1aa>
   1697a:	2800      	cmp	r0, #0
   1697c:	d02a      	beq.n	169d4 <_vfiprintf_r+0x12c>
   1697e:	9309      	str	r3, [sp, #36]	; 0x24
   16980:	e028      	b.n	169d4 <_vfiprintf_r+0x12c>
   16982:	4b51      	ldr	r3, [pc, #324]	; (16ac8 <_vfiprintf_r+0x220>)
   16984:	429f      	cmp	r7, r3
   16986:	d101      	bne.n	1698c <_vfiprintf_r+0xe4>
   16988:	68b7      	ldr	r7, [r6, #8]
   1698a:	e79e      	b.n	168ca <_vfiprintf_r+0x22>
   1698c:	4b4f      	ldr	r3, [pc, #316]	; (16acc <_vfiprintf_r+0x224>)
   1698e:	429f      	cmp	r7, r3
   16990:	d19b      	bne.n	168ca <_vfiprintf_r+0x22>
   16992:	68f7      	ldr	r7, [r6, #12]
   16994:	e799      	b.n	168ca <_vfiprintf_r+0x22>
   16996:	0039      	movs	r1, r7
   16998:	0030      	movs	r0, r6
   1699a:	f000 fc37 	bl	1720c <__swsetup_r>
   1699e:	2800      	cmp	r0, #0
   169a0:	d099      	beq.n	168d6 <_vfiprintf_r+0x2e>
   169a2:	2001      	movs	r0, #1
   169a4:	4240      	negs	r0, r0
   169a6:	b01f      	add	sp, #124	; 0x7c
   169a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169aa:	2b25      	cmp	r3, #37	; 0x25
   169ac:	d09f      	beq.n	168ee <_vfiprintf_r+0x46>
   169ae:	3401      	adds	r4, #1
   169b0:	e79a      	b.n	168e8 <_vfiprintf_r+0x40>
   169b2:	4b44      	ldr	r3, [pc, #272]	; (16ac4 <_vfiprintf_r+0x21c>)
   169b4:	6829      	ldr	r1, [r5, #0]
   169b6:	1ac0      	subs	r0, r0, r3
   169b8:	2301      	movs	r3, #1
   169ba:	4083      	lsls	r3, r0
   169bc:	430b      	orrs	r3, r1
   169be:	602b      	str	r3, [r5, #0]
   169c0:	4664      	mov	r4, ip
   169c2:	e7b7      	b.n	16934 <_vfiprintf_r+0x8c>
   169c4:	9b05      	ldr	r3, [sp, #20]
   169c6:	1d18      	adds	r0, r3, #4
   169c8:	681b      	ldr	r3, [r3, #0]
   169ca:	9005      	str	r0, [sp, #20]
   169cc:	2b00      	cmp	r3, #0
   169ce:	db3a      	blt.n	16a46 <_vfiprintf_r+0x19e>
   169d0:	9309      	str	r3, [sp, #36]	; 0x24
   169d2:	4664      	mov	r4, ip
   169d4:	7823      	ldrb	r3, [r4, #0]
   169d6:	2b2e      	cmp	r3, #46	; 0x2e
   169d8:	d10b      	bne.n	169f2 <_vfiprintf_r+0x14a>
   169da:	7863      	ldrb	r3, [r4, #1]
   169dc:	1c62      	adds	r2, r4, #1
   169de:	2b2a      	cmp	r3, #42	; 0x2a
   169e0:	d13f      	bne.n	16a62 <_vfiprintf_r+0x1ba>
   169e2:	9b05      	ldr	r3, [sp, #20]
   169e4:	3402      	adds	r4, #2
   169e6:	1d1a      	adds	r2, r3, #4
   169e8:	681b      	ldr	r3, [r3, #0]
   169ea:	9205      	str	r2, [sp, #20]
   169ec:	2b00      	cmp	r3, #0
   169ee:	db35      	blt.n	16a5c <_vfiprintf_r+0x1b4>
   169f0:	9307      	str	r3, [sp, #28]
   169f2:	7821      	ldrb	r1, [r4, #0]
   169f4:	2203      	movs	r2, #3
   169f6:	4836      	ldr	r0, [pc, #216]	; (16ad0 <_vfiprintf_r+0x228>)
   169f8:	f000 fe8a 	bl	17710 <memchr>
   169fc:	2800      	cmp	r0, #0
   169fe:	d007      	beq.n	16a10 <_vfiprintf_r+0x168>
   16a00:	4b33      	ldr	r3, [pc, #204]	; (16ad0 <_vfiprintf_r+0x228>)
   16a02:	682a      	ldr	r2, [r5, #0]
   16a04:	1ac0      	subs	r0, r0, r3
   16a06:	2340      	movs	r3, #64	; 0x40
   16a08:	4083      	lsls	r3, r0
   16a0a:	4313      	orrs	r3, r2
   16a0c:	602b      	str	r3, [r5, #0]
   16a0e:	3401      	adds	r4, #1
   16a10:	7821      	ldrb	r1, [r4, #0]
   16a12:	1c63      	adds	r3, r4, #1
   16a14:	2206      	movs	r2, #6
   16a16:	482f      	ldr	r0, [pc, #188]	; (16ad4 <_vfiprintf_r+0x22c>)
   16a18:	9302      	str	r3, [sp, #8]
   16a1a:	7629      	strb	r1, [r5, #24]
   16a1c:	f000 fe78 	bl	17710 <memchr>
   16a20:	2800      	cmp	r0, #0
   16a22:	d044      	beq.n	16aae <_vfiprintf_r+0x206>
   16a24:	4b2c      	ldr	r3, [pc, #176]	; (16ad8 <_vfiprintf_r+0x230>)
   16a26:	2b00      	cmp	r3, #0
   16a28:	d12f      	bne.n	16a8a <_vfiprintf_r+0x1e2>
   16a2a:	6829      	ldr	r1, [r5, #0]
   16a2c:	9b05      	ldr	r3, [sp, #20]
   16a2e:	2207      	movs	r2, #7
   16a30:	05c9      	lsls	r1, r1, #23
   16a32:	d528      	bpl.n	16a86 <_vfiprintf_r+0x1de>
   16a34:	189b      	adds	r3, r3, r2
   16a36:	4393      	bics	r3, r2
   16a38:	3308      	adds	r3, #8
   16a3a:	9305      	str	r3, [sp, #20]
   16a3c:	696b      	ldr	r3, [r5, #20]
   16a3e:	9a03      	ldr	r2, [sp, #12]
   16a40:	189b      	adds	r3, r3, r2
   16a42:	616b      	str	r3, [r5, #20]
   16a44:	e74f      	b.n	168e6 <_vfiprintf_r+0x3e>
   16a46:	425b      	negs	r3, r3
   16a48:	60eb      	str	r3, [r5, #12]
   16a4a:	2302      	movs	r3, #2
   16a4c:	430b      	orrs	r3, r1
   16a4e:	602b      	str	r3, [r5, #0]
   16a50:	e7bf      	b.n	169d2 <_vfiprintf_r+0x12a>
   16a52:	434b      	muls	r3, r1
   16a54:	3401      	adds	r4, #1
   16a56:	189b      	adds	r3, r3, r2
   16a58:	2001      	movs	r0, #1
   16a5a:	e789      	b.n	16970 <_vfiprintf_r+0xc8>
   16a5c:	2301      	movs	r3, #1
   16a5e:	425b      	negs	r3, r3
   16a60:	e7c6      	b.n	169f0 <_vfiprintf_r+0x148>
   16a62:	2300      	movs	r3, #0
   16a64:	0014      	movs	r4, r2
   16a66:	200a      	movs	r0, #10
   16a68:	001a      	movs	r2, r3
   16a6a:	606b      	str	r3, [r5, #4]
   16a6c:	7821      	ldrb	r1, [r4, #0]
   16a6e:	3930      	subs	r1, #48	; 0x30
   16a70:	2909      	cmp	r1, #9
   16a72:	d903      	bls.n	16a7c <_vfiprintf_r+0x1d4>
   16a74:	2b00      	cmp	r3, #0
   16a76:	d0bc      	beq.n	169f2 <_vfiprintf_r+0x14a>
   16a78:	9207      	str	r2, [sp, #28]
   16a7a:	e7ba      	b.n	169f2 <_vfiprintf_r+0x14a>
   16a7c:	4342      	muls	r2, r0
   16a7e:	3401      	adds	r4, #1
   16a80:	1852      	adds	r2, r2, r1
   16a82:	2301      	movs	r3, #1
   16a84:	e7f2      	b.n	16a6c <_vfiprintf_r+0x1c4>
   16a86:	3307      	adds	r3, #7
   16a88:	e7d5      	b.n	16a36 <_vfiprintf_r+0x18e>
   16a8a:	ab05      	add	r3, sp, #20
   16a8c:	9300      	str	r3, [sp, #0]
   16a8e:	003a      	movs	r2, r7
   16a90:	4b12      	ldr	r3, [pc, #72]	; (16adc <_vfiprintf_r+0x234>)
   16a92:	0029      	movs	r1, r5
   16a94:	0030      	movs	r0, r6
   16a96:	e000      	b.n	16a9a <_vfiprintf_r+0x1f2>
   16a98:	bf00      	nop
   16a9a:	9003      	str	r0, [sp, #12]
   16a9c:	9b03      	ldr	r3, [sp, #12]
   16a9e:	3301      	adds	r3, #1
   16aa0:	d1cc      	bne.n	16a3c <_vfiprintf_r+0x194>
   16aa2:	89bb      	ldrh	r3, [r7, #12]
   16aa4:	065b      	lsls	r3, r3, #25
   16aa6:	d500      	bpl.n	16aaa <_vfiprintf_r+0x202>
   16aa8:	e77b      	b.n	169a2 <_vfiprintf_r+0xfa>
   16aaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16aac:	e77b      	b.n	169a6 <_vfiprintf_r+0xfe>
   16aae:	ab05      	add	r3, sp, #20
   16ab0:	9300      	str	r3, [sp, #0]
   16ab2:	003a      	movs	r2, r7
   16ab4:	4b09      	ldr	r3, [pc, #36]	; (16adc <_vfiprintf_r+0x234>)
   16ab6:	0029      	movs	r1, r5
   16ab8:	0030      	movs	r0, r6
   16aba:	f000 f87f 	bl	16bbc <_printf_i>
   16abe:	e7ec      	b.n	16a9a <_vfiprintf_r+0x1f2>
   16ac0:	00018f48 	.word	0x00018f48
   16ac4:	00018ef4 	.word	0x00018ef4
   16ac8:	00018f68 	.word	0x00018f68
   16acc:	00018f28 	.word	0x00018f28
   16ad0:	00018efa 	.word	0x00018efa
   16ad4:	00018efe 	.word	0x00018efe
   16ad8:	00000000 	.word	0x00000000
   16adc:	00016883 	.word	0x00016883

00016ae0 <_printf_common>:
   16ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16ae2:	0015      	movs	r5, r2
   16ae4:	9301      	str	r3, [sp, #4]
   16ae6:	688a      	ldr	r2, [r1, #8]
   16ae8:	690b      	ldr	r3, [r1, #16]
   16aea:	9000      	str	r0, [sp, #0]
   16aec:	000c      	movs	r4, r1
   16aee:	4293      	cmp	r3, r2
   16af0:	da00      	bge.n	16af4 <_printf_common+0x14>
   16af2:	0013      	movs	r3, r2
   16af4:	0022      	movs	r2, r4
   16af6:	602b      	str	r3, [r5, #0]
   16af8:	3243      	adds	r2, #67	; 0x43
   16afa:	7812      	ldrb	r2, [r2, #0]
   16afc:	2a00      	cmp	r2, #0
   16afe:	d001      	beq.n	16b04 <_printf_common+0x24>
   16b00:	3301      	adds	r3, #1
   16b02:	602b      	str	r3, [r5, #0]
   16b04:	6823      	ldr	r3, [r4, #0]
   16b06:	069b      	lsls	r3, r3, #26
   16b08:	d502      	bpl.n	16b10 <_printf_common+0x30>
   16b0a:	682b      	ldr	r3, [r5, #0]
   16b0c:	3302      	adds	r3, #2
   16b0e:	602b      	str	r3, [r5, #0]
   16b10:	2706      	movs	r7, #6
   16b12:	6823      	ldr	r3, [r4, #0]
   16b14:	401f      	ands	r7, r3
   16b16:	d027      	beq.n	16b68 <_printf_common+0x88>
   16b18:	0023      	movs	r3, r4
   16b1a:	3343      	adds	r3, #67	; 0x43
   16b1c:	781b      	ldrb	r3, [r3, #0]
   16b1e:	1e5a      	subs	r2, r3, #1
   16b20:	4193      	sbcs	r3, r2
   16b22:	6822      	ldr	r2, [r4, #0]
   16b24:	0692      	lsls	r2, r2, #26
   16b26:	d430      	bmi.n	16b8a <_printf_common+0xaa>
   16b28:	0022      	movs	r2, r4
   16b2a:	9901      	ldr	r1, [sp, #4]
   16b2c:	3243      	adds	r2, #67	; 0x43
   16b2e:	9800      	ldr	r0, [sp, #0]
   16b30:	9e08      	ldr	r6, [sp, #32]
   16b32:	47b0      	blx	r6
   16b34:	1c43      	adds	r3, r0, #1
   16b36:	d025      	beq.n	16b84 <_printf_common+0xa4>
   16b38:	2306      	movs	r3, #6
   16b3a:	6820      	ldr	r0, [r4, #0]
   16b3c:	682a      	ldr	r2, [r5, #0]
   16b3e:	68e1      	ldr	r1, [r4, #12]
   16b40:	4003      	ands	r3, r0
   16b42:	2500      	movs	r5, #0
   16b44:	2b04      	cmp	r3, #4
   16b46:	d103      	bne.n	16b50 <_printf_common+0x70>
   16b48:	1a8d      	subs	r5, r1, r2
   16b4a:	43eb      	mvns	r3, r5
   16b4c:	17db      	asrs	r3, r3, #31
   16b4e:	401d      	ands	r5, r3
   16b50:	68a3      	ldr	r3, [r4, #8]
   16b52:	6922      	ldr	r2, [r4, #16]
   16b54:	4293      	cmp	r3, r2
   16b56:	dd01      	ble.n	16b5c <_printf_common+0x7c>
   16b58:	1a9b      	subs	r3, r3, r2
   16b5a:	18ed      	adds	r5, r5, r3
   16b5c:	2700      	movs	r7, #0
   16b5e:	42bd      	cmp	r5, r7
   16b60:	d120      	bne.n	16ba4 <_printf_common+0xc4>
   16b62:	2000      	movs	r0, #0
   16b64:	e010      	b.n	16b88 <_printf_common+0xa8>
   16b66:	3701      	adds	r7, #1
   16b68:	68e3      	ldr	r3, [r4, #12]
   16b6a:	682a      	ldr	r2, [r5, #0]
   16b6c:	1a9b      	subs	r3, r3, r2
   16b6e:	429f      	cmp	r7, r3
   16b70:	dad2      	bge.n	16b18 <_printf_common+0x38>
   16b72:	0022      	movs	r2, r4
   16b74:	2301      	movs	r3, #1
   16b76:	3219      	adds	r2, #25
   16b78:	9901      	ldr	r1, [sp, #4]
   16b7a:	9800      	ldr	r0, [sp, #0]
   16b7c:	9e08      	ldr	r6, [sp, #32]
   16b7e:	47b0      	blx	r6
   16b80:	1c43      	adds	r3, r0, #1
   16b82:	d1f0      	bne.n	16b66 <_printf_common+0x86>
   16b84:	2001      	movs	r0, #1
   16b86:	4240      	negs	r0, r0
   16b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16b8a:	2030      	movs	r0, #48	; 0x30
   16b8c:	18e1      	adds	r1, r4, r3
   16b8e:	3143      	adds	r1, #67	; 0x43
   16b90:	7008      	strb	r0, [r1, #0]
   16b92:	0021      	movs	r1, r4
   16b94:	1c5a      	adds	r2, r3, #1
   16b96:	3145      	adds	r1, #69	; 0x45
   16b98:	7809      	ldrb	r1, [r1, #0]
   16b9a:	18a2      	adds	r2, r4, r2
   16b9c:	3243      	adds	r2, #67	; 0x43
   16b9e:	3302      	adds	r3, #2
   16ba0:	7011      	strb	r1, [r2, #0]
   16ba2:	e7c1      	b.n	16b28 <_printf_common+0x48>
   16ba4:	0022      	movs	r2, r4
   16ba6:	2301      	movs	r3, #1
   16ba8:	321a      	adds	r2, #26
   16baa:	9901      	ldr	r1, [sp, #4]
   16bac:	9800      	ldr	r0, [sp, #0]
   16bae:	9e08      	ldr	r6, [sp, #32]
   16bb0:	47b0      	blx	r6
   16bb2:	1c43      	adds	r3, r0, #1
   16bb4:	d0e6      	beq.n	16b84 <_printf_common+0xa4>
   16bb6:	3701      	adds	r7, #1
   16bb8:	e7d1      	b.n	16b5e <_printf_common+0x7e>
   16bba:	Address 0x00016bba is out of bounds.


00016bbc <_printf_i>:
   16bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bbe:	b08b      	sub	sp, #44	; 0x2c
   16bc0:	9206      	str	r2, [sp, #24]
   16bc2:	000a      	movs	r2, r1
   16bc4:	3243      	adds	r2, #67	; 0x43
   16bc6:	9307      	str	r3, [sp, #28]
   16bc8:	9005      	str	r0, [sp, #20]
   16bca:	9204      	str	r2, [sp, #16]
   16bcc:	7e0a      	ldrb	r2, [r1, #24]
   16bce:	000c      	movs	r4, r1
   16bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16bd2:	2a6e      	cmp	r2, #110	; 0x6e
   16bd4:	d100      	bne.n	16bd8 <_printf_i+0x1c>
   16bd6:	e08f      	b.n	16cf8 <_printf_i+0x13c>
   16bd8:	d817      	bhi.n	16c0a <_printf_i+0x4e>
   16bda:	2a63      	cmp	r2, #99	; 0x63
   16bdc:	d02c      	beq.n	16c38 <_printf_i+0x7c>
   16bde:	d808      	bhi.n	16bf2 <_printf_i+0x36>
   16be0:	2a00      	cmp	r2, #0
   16be2:	d100      	bne.n	16be6 <_printf_i+0x2a>
   16be4:	e099      	b.n	16d1a <_printf_i+0x15e>
   16be6:	2a58      	cmp	r2, #88	; 0x58
   16be8:	d054      	beq.n	16c94 <_printf_i+0xd8>
   16bea:	0026      	movs	r6, r4
   16bec:	3642      	adds	r6, #66	; 0x42
   16bee:	7032      	strb	r2, [r6, #0]
   16bf0:	e029      	b.n	16c46 <_printf_i+0x8a>
   16bf2:	2a64      	cmp	r2, #100	; 0x64
   16bf4:	d001      	beq.n	16bfa <_printf_i+0x3e>
   16bf6:	2a69      	cmp	r2, #105	; 0x69
   16bf8:	d1f7      	bne.n	16bea <_printf_i+0x2e>
   16bfa:	6821      	ldr	r1, [r4, #0]
   16bfc:	681a      	ldr	r2, [r3, #0]
   16bfe:	0608      	lsls	r0, r1, #24
   16c00:	d523      	bpl.n	16c4a <_printf_i+0x8e>
   16c02:	1d11      	adds	r1, r2, #4
   16c04:	6019      	str	r1, [r3, #0]
   16c06:	6815      	ldr	r5, [r2, #0]
   16c08:	e025      	b.n	16c56 <_printf_i+0x9a>
   16c0a:	2a73      	cmp	r2, #115	; 0x73
   16c0c:	d100      	bne.n	16c10 <_printf_i+0x54>
   16c0e:	e088      	b.n	16d22 <_printf_i+0x166>
   16c10:	d808      	bhi.n	16c24 <_printf_i+0x68>
   16c12:	2a6f      	cmp	r2, #111	; 0x6f
   16c14:	d029      	beq.n	16c6a <_printf_i+0xae>
   16c16:	2a70      	cmp	r2, #112	; 0x70
   16c18:	d1e7      	bne.n	16bea <_printf_i+0x2e>
   16c1a:	2220      	movs	r2, #32
   16c1c:	6809      	ldr	r1, [r1, #0]
   16c1e:	430a      	orrs	r2, r1
   16c20:	6022      	str	r2, [r4, #0]
   16c22:	e003      	b.n	16c2c <_printf_i+0x70>
   16c24:	2a75      	cmp	r2, #117	; 0x75
   16c26:	d020      	beq.n	16c6a <_printf_i+0xae>
   16c28:	2a78      	cmp	r2, #120	; 0x78
   16c2a:	d1de      	bne.n	16bea <_printf_i+0x2e>
   16c2c:	0022      	movs	r2, r4
   16c2e:	2178      	movs	r1, #120	; 0x78
   16c30:	3245      	adds	r2, #69	; 0x45
   16c32:	7011      	strb	r1, [r2, #0]
   16c34:	4a6c      	ldr	r2, [pc, #432]	; (16de8 <_printf_i+0x22c>)
   16c36:	e030      	b.n	16c9a <_printf_i+0xde>
   16c38:	000e      	movs	r6, r1
   16c3a:	681a      	ldr	r2, [r3, #0]
   16c3c:	3642      	adds	r6, #66	; 0x42
   16c3e:	1d11      	adds	r1, r2, #4
   16c40:	6019      	str	r1, [r3, #0]
   16c42:	6813      	ldr	r3, [r2, #0]
   16c44:	7033      	strb	r3, [r6, #0]
   16c46:	2301      	movs	r3, #1
   16c48:	e079      	b.n	16d3e <_printf_i+0x182>
   16c4a:	0649      	lsls	r1, r1, #25
   16c4c:	d5d9      	bpl.n	16c02 <_printf_i+0x46>
   16c4e:	1d11      	adds	r1, r2, #4
   16c50:	6019      	str	r1, [r3, #0]
   16c52:	2300      	movs	r3, #0
   16c54:	5ed5      	ldrsh	r5, [r2, r3]
   16c56:	2d00      	cmp	r5, #0
   16c58:	da03      	bge.n	16c62 <_printf_i+0xa6>
   16c5a:	232d      	movs	r3, #45	; 0x2d
   16c5c:	9a04      	ldr	r2, [sp, #16]
   16c5e:	426d      	negs	r5, r5
   16c60:	7013      	strb	r3, [r2, #0]
   16c62:	4b62      	ldr	r3, [pc, #392]	; (16dec <_printf_i+0x230>)
   16c64:	270a      	movs	r7, #10
   16c66:	9303      	str	r3, [sp, #12]
   16c68:	e02f      	b.n	16cca <_printf_i+0x10e>
   16c6a:	6820      	ldr	r0, [r4, #0]
   16c6c:	6819      	ldr	r1, [r3, #0]
   16c6e:	0605      	lsls	r5, r0, #24
   16c70:	d503      	bpl.n	16c7a <_printf_i+0xbe>
   16c72:	1d08      	adds	r0, r1, #4
   16c74:	6018      	str	r0, [r3, #0]
   16c76:	680d      	ldr	r5, [r1, #0]
   16c78:	e005      	b.n	16c86 <_printf_i+0xca>
   16c7a:	0640      	lsls	r0, r0, #25
   16c7c:	d5f9      	bpl.n	16c72 <_printf_i+0xb6>
   16c7e:	680d      	ldr	r5, [r1, #0]
   16c80:	1d08      	adds	r0, r1, #4
   16c82:	6018      	str	r0, [r3, #0]
   16c84:	b2ad      	uxth	r5, r5
   16c86:	4b59      	ldr	r3, [pc, #356]	; (16dec <_printf_i+0x230>)
   16c88:	2708      	movs	r7, #8
   16c8a:	9303      	str	r3, [sp, #12]
   16c8c:	2a6f      	cmp	r2, #111	; 0x6f
   16c8e:	d018      	beq.n	16cc2 <_printf_i+0x106>
   16c90:	270a      	movs	r7, #10
   16c92:	e016      	b.n	16cc2 <_printf_i+0x106>
   16c94:	3145      	adds	r1, #69	; 0x45
   16c96:	700a      	strb	r2, [r1, #0]
   16c98:	4a54      	ldr	r2, [pc, #336]	; (16dec <_printf_i+0x230>)
   16c9a:	9203      	str	r2, [sp, #12]
   16c9c:	681a      	ldr	r2, [r3, #0]
   16c9e:	6821      	ldr	r1, [r4, #0]
   16ca0:	1d10      	adds	r0, r2, #4
   16ca2:	6018      	str	r0, [r3, #0]
   16ca4:	6815      	ldr	r5, [r2, #0]
   16ca6:	0608      	lsls	r0, r1, #24
   16ca8:	d522      	bpl.n	16cf0 <_printf_i+0x134>
   16caa:	07cb      	lsls	r3, r1, #31
   16cac:	d502      	bpl.n	16cb4 <_printf_i+0xf8>
   16cae:	2320      	movs	r3, #32
   16cb0:	4319      	orrs	r1, r3
   16cb2:	6021      	str	r1, [r4, #0]
   16cb4:	2710      	movs	r7, #16
   16cb6:	2d00      	cmp	r5, #0
   16cb8:	d103      	bne.n	16cc2 <_printf_i+0x106>
   16cba:	2320      	movs	r3, #32
   16cbc:	6822      	ldr	r2, [r4, #0]
   16cbe:	439a      	bics	r2, r3
   16cc0:	6022      	str	r2, [r4, #0]
   16cc2:	0023      	movs	r3, r4
   16cc4:	2200      	movs	r2, #0
   16cc6:	3343      	adds	r3, #67	; 0x43
   16cc8:	701a      	strb	r2, [r3, #0]
   16cca:	6863      	ldr	r3, [r4, #4]
   16ccc:	60a3      	str	r3, [r4, #8]
   16cce:	2b00      	cmp	r3, #0
   16cd0:	db5c      	blt.n	16d8c <_printf_i+0x1d0>
   16cd2:	2204      	movs	r2, #4
   16cd4:	6821      	ldr	r1, [r4, #0]
   16cd6:	4391      	bics	r1, r2
   16cd8:	6021      	str	r1, [r4, #0]
   16cda:	2d00      	cmp	r5, #0
   16cdc:	d158      	bne.n	16d90 <_printf_i+0x1d4>
   16cde:	9e04      	ldr	r6, [sp, #16]
   16ce0:	2b00      	cmp	r3, #0
   16ce2:	d064      	beq.n	16dae <_printf_i+0x1f2>
   16ce4:	0026      	movs	r6, r4
   16ce6:	9b03      	ldr	r3, [sp, #12]
   16ce8:	3642      	adds	r6, #66	; 0x42
   16cea:	781b      	ldrb	r3, [r3, #0]
   16cec:	7033      	strb	r3, [r6, #0]
   16cee:	e05e      	b.n	16dae <_printf_i+0x1f2>
   16cf0:	0648      	lsls	r0, r1, #25
   16cf2:	d5da      	bpl.n	16caa <_printf_i+0xee>
   16cf4:	b2ad      	uxth	r5, r5
   16cf6:	e7d8      	b.n	16caa <_printf_i+0xee>
   16cf8:	6809      	ldr	r1, [r1, #0]
   16cfa:	681a      	ldr	r2, [r3, #0]
   16cfc:	0608      	lsls	r0, r1, #24
   16cfe:	d505      	bpl.n	16d0c <_printf_i+0x150>
   16d00:	1d11      	adds	r1, r2, #4
   16d02:	6019      	str	r1, [r3, #0]
   16d04:	6813      	ldr	r3, [r2, #0]
   16d06:	6962      	ldr	r2, [r4, #20]
   16d08:	601a      	str	r2, [r3, #0]
   16d0a:	e006      	b.n	16d1a <_printf_i+0x15e>
   16d0c:	0649      	lsls	r1, r1, #25
   16d0e:	d5f7      	bpl.n	16d00 <_printf_i+0x144>
   16d10:	1d11      	adds	r1, r2, #4
   16d12:	6019      	str	r1, [r3, #0]
   16d14:	6813      	ldr	r3, [r2, #0]
   16d16:	8aa2      	ldrh	r2, [r4, #20]
   16d18:	801a      	strh	r2, [r3, #0]
   16d1a:	2300      	movs	r3, #0
   16d1c:	9e04      	ldr	r6, [sp, #16]
   16d1e:	6123      	str	r3, [r4, #16]
   16d20:	e054      	b.n	16dcc <_printf_i+0x210>
   16d22:	681a      	ldr	r2, [r3, #0]
   16d24:	1d11      	adds	r1, r2, #4
   16d26:	6019      	str	r1, [r3, #0]
   16d28:	6816      	ldr	r6, [r2, #0]
   16d2a:	2100      	movs	r1, #0
   16d2c:	6862      	ldr	r2, [r4, #4]
   16d2e:	0030      	movs	r0, r6
   16d30:	f000 fcee 	bl	17710 <memchr>
   16d34:	2800      	cmp	r0, #0
   16d36:	d001      	beq.n	16d3c <_printf_i+0x180>
   16d38:	1b80      	subs	r0, r0, r6
   16d3a:	6060      	str	r0, [r4, #4]
   16d3c:	6863      	ldr	r3, [r4, #4]
   16d3e:	6123      	str	r3, [r4, #16]
   16d40:	2300      	movs	r3, #0
   16d42:	9a04      	ldr	r2, [sp, #16]
   16d44:	7013      	strb	r3, [r2, #0]
   16d46:	e041      	b.n	16dcc <_printf_i+0x210>
   16d48:	6923      	ldr	r3, [r4, #16]
   16d4a:	0032      	movs	r2, r6
   16d4c:	9906      	ldr	r1, [sp, #24]
   16d4e:	9805      	ldr	r0, [sp, #20]
   16d50:	9d07      	ldr	r5, [sp, #28]
   16d52:	47a8      	blx	r5
   16d54:	1c43      	adds	r3, r0, #1
   16d56:	d043      	beq.n	16de0 <_printf_i+0x224>
   16d58:	6823      	ldr	r3, [r4, #0]
   16d5a:	2500      	movs	r5, #0
   16d5c:	079b      	lsls	r3, r3, #30
   16d5e:	d40f      	bmi.n	16d80 <_printf_i+0x1c4>
   16d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16d62:	68e0      	ldr	r0, [r4, #12]
   16d64:	4298      	cmp	r0, r3
   16d66:	da3d      	bge.n	16de4 <_printf_i+0x228>
   16d68:	0018      	movs	r0, r3
   16d6a:	e03b      	b.n	16de4 <_printf_i+0x228>
   16d6c:	0022      	movs	r2, r4
   16d6e:	2301      	movs	r3, #1
   16d70:	3219      	adds	r2, #25
   16d72:	9906      	ldr	r1, [sp, #24]
   16d74:	9805      	ldr	r0, [sp, #20]
   16d76:	9e07      	ldr	r6, [sp, #28]
   16d78:	47b0      	blx	r6
   16d7a:	1c43      	adds	r3, r0, #1
   16d7c:	d030      	beq.n	16de0 <_printf_i+0x224>
   16d7e:	3501      	adds	r5, #1
   16d80:	68e3      	ldr	r3, [r4, #12]
   16d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16d84:	1a9b      	subs	r3, r3, r2
   16d86:	429d      	cmp	r5, r3
   16d88:	dbf0      	blt.n	16d6c <_printf_i+0x1b0>
   16d8a:	e7e9      	b.n	16d60 <_printf_i+0x1a4>
   16d8c:	2d00      	cmp	r5, #0
   16d8e:	d0a9      	beq.n	16ce4 <_printf_i+0x128>
   16d90:	9e04      	ldr	r6, [sp, #16]
   16d92:	0028      	movs	r0, r5
   16d94:	0039      	movs	r1, r7
   16d96:	f7fc fca3 	bl	136e0 <__aeabi_uidivmod>
   16d9a:	9b03      	ldr	r3, [sp, #12]
   16d9c:	3e01      	subs	r6, #1
   16d9e:	5c5b      	ldrb	r3, [r3, r1]
   16da0:	0028      	movs	r0, r5
   16da2:	7033      	strb	r3, [r6, #0]
   16da4:	0039      	movs	r1, r7
   16da6:	f7fc fc15 	bl	135d4 <__udivsi3>
   16daa:	1e05      	subs	r5, r0, #0
   16dac:	d1f1      	bne.n	16d92 <_printf_i+0x1d6>
   16dae:	2f08      	cmp	r7, #8
   16db0:	d109      	bne.n	16dc6 <_printf_i+0x20a>
   16db2:	6823      	ldr	r3, [r4, #0]
   16db4:	07db      	lsls	r3, r3, #31
   16db6:	d506      	bpl.n	16dc6 <_printf_i+0x20a>
   16db8:	6863      	ldr	r3, [r4, #4]
   16dba:	6922      	ldr	r2, [r4, #16]
   16dbc:	4293      	cmp	r3, r2
   16dbe:	dc02      	bgt.n	16dc6 <_printf_i+0x20a>
   16dc0:	2330      	movs	r3, #48	; 0x30
   16dc2:	3e01      	subs	r6, #1
   16dc4:	7033      	strb	r3, [r6, #0]
   16dc6:	9b04      	ldr	r3, [sp, #16]
   16dc8:	1b9b      	subs	r3, r3, r6
   16dca:	6123      	str	r3, [r4, #16]
   16dcc:	9b07      	ldr	r3, [sp, #28]
   16dce:	aa09      	add	r2, sp, #36	; 0x24
   16dd0:	9300      	str	r3, [sp, #0]
   16dd2:	0021      	movs	r1, r4
   16dd4:	9b06      	ldr	r3, [sp, #24]
   16dd6:	9805      	ldr	r0, [sp, #20]
   16dd8:	f7ff fe82 	bl	16ae0 <_printf_common>
   16ddc:	1c43      	adds	r3, r0, #1
   16dde:	d1b3      	bne.n	16d48 <_printf_i+0x18c>
   16de0:	2001      	movs	r0, #1
   16de2:	4240      	negs	r0, r0
   16de4:	b00b      	add	sp, #44	; 0x2c
   16de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16de8:	00018f16 	.word	0x00018f16
   16dec:	00018f05 	.word	0x00018f05

00016df0 <iprintf>:
   16df0:	b40f      	push	{r0, r1, r2, r3}
   16df2:	4b0b      	ldr	r3, [pc, #44]	; (16e20 <iprintf+0x30>)
   16df4:	b513      	push	{r0, r1, r4, lr}
   16df6:	681c      	ldr	r4, [r3, #0]
   16df8:	2c00      	cmp	r4, #0
   16dfa:	d005      	beq.n	16e08 <iprintf+0x18>
   16dfc:	69a3      	ldr	r3, [r4, #24]
   16dfe:	2b00      	cmp	r3, #0
   16e00:	d102      	bne.n	16e08 <iprintf+0x18>
   16e02:	0020      	movs	r0, r4
   16e04:	f000 fb78 	bl	174f8 <__sinit>
   16e08:	ab05      	add	r3, sp, #20
   16e0a:	9a04      	ldr	r2, [sp, #16]
   16e0c:	68a1      	ldr	r1, [r4, #8]
   16e0e:	0020      	movs	r0, r4
   16e10:	9301      	str	r3, [sp, #4]
   16e12:	f7ff fd49 	bl	168a8 <_vfiprintf_r>
   16e16:	bc16      	pop	{r1, r2, r4}
   16e18:	bc08      	pop	{r3}
   16e1a:	b004      	add	sp, #16
   16e1c:	4718      	bx	r3
   16e1e:	46c0      	nop			; (mov r8, r8)
   16e20:	20000028 	.word	0x20000028

00016e24 <putchar>:
   16e24:	4b08      	ldr	r3, [pc, #32]	; (16e48 <putchar+0x24>)
   16e26:	b570      	push	{r4, r5, r6, lr}
   16e28:	681c      	ldr	r4, [r3, #0]
   16e2a:	0005      	movs	r5, r0
   16e2c:	2c00      	cmp	r4, #0
   16e2e:	d005      	beq.n	16e3c <putchar+0x18>
   16e30:	69a3      	ldr	r3, [r4, #24]
   16e32:	2b00      	cmp	r3, #0
   16e34:	d102      	bne.n	16e3c <putchar+0x18>
   16e36:	0020      	movs	r0, r4
   16e38:	f000 fb5e 	bl	174f8 <__sinit>
   16e3c:	0029      	movs	r1, r5
   16e3e:	68a2      	ldr	r2, [r4, #8]
   16e40:	0020      	movs	r0, r4
   16e42:	f000 fd19 	bl	17878 <_putc_r>
   16e46:	bd70      	pop	{r4, r5, r6, pc}
   16e48:	20000028 	.word	0x20000028

00016e4c <_puts_r>:
   16e4c:	b570      	push	{r4, r5, r6, lr}
   16e4e:	0005      	movs	r5, r0
   16e50:	000e      	movs	r6, r1
   16e52:	2800      	cmp	r0, #0
   16e54:	d004      	beq.n	16e60 <_puts_r+0x14>
   16e56:	6983      	ldr	r3, [r0, #24]
   16e58:	2b00      	cmp	r3, #0
   16e5a:	d101      	bne.n	16e60 <_puts_r+0x14>
   16e5c:	f000 fb4c 	bl	174f8 <__sinit>
   16e60:	69ab      	ldr	r3, [r5, #24]
   16e62:	68ac      	ldr	r4, [r5, #8]
   16e64:	2b00      	cmp	r3, #0
   16e66:	d102      	bne.n	16e6e <_puts_r+0x22>
   16e68:	0028      	movs	r0, r5
   16e6a:	f000 fb45 	bl	174f8 <__sinit>
   16e6e:	4b24      	ldr	r3, [pc, #144]	; (16f00 <_puts_r+0xb4>)
   16e70:	429c      	cmp	r4, r3
   16e72:	d10f      	bne.n	16e94 <_puts_r+0x48>
   16e74:	686c      	ldr	r4, [r5, #4]
   16e76:	89a3      	ldrh	r3, [r4, #12]
   16e78:	071b      	lsls	r3, r3, #28
   16e7a:	d502      	bpl.n	16e82 <_puts_r+0x36>
   16e7c:	6923      	ldr	r3, [r4, #16]
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d120      	bne.n	16ec4 <_puts_r+0x78>
   16e82:	0021      	movs	r1, r4
   16e84:	0028      	movs	r0, r5
   16e86:	f000 f9c1 	bl	1720c <__swsetup_r>
   16e8a:	2800      	cmp	r0, #0
   16e8c:	d01a      	beq.n	16ec4 <_puts_r+0x78>
   16e8e:	2001      	movs	r0, #1
   16e90:	4240      	negs	r0, r0
   16e92:	bd70      	pop	{r4, r5, r6, pc}
   16e94:	4b1b      	ldr	r3, [pc, #108]	; (16f04 <_puts_r+0xb8>)
   16e96:	429c      	cmp	r4, r3
   16e98:	d101      	bne.n	16e9e <_puts_r+0x52>
   16e9a:	68ac      	ldr	r4, [r5, #8]
   16e9c:	e7eb      	b.n	16e76 <_puts_r+0x2a>
   16e9e:	4b1a      	ldr	r3, [pc, #104]	; (16f08 <_puts_r+0xbc>)
   16ea0:	429c      	cmp	r4, r3
   16ea2:	d1e8      	bne.n	16e76 <_puts_r+0x2a>
   16ea4:	68ec      	ldr	r4, [r5, #12]
   16ea6:	e7e6      	b.n	16e76 <_puts_r+0x2a>
   16ea8:	3b01      	subs	r3, #1
   16eaa:	3601      	adds	r6, #1
   16eac:	60a3      	str	r3, [r4, #8]
   16eae:	2b00      	cmp	r3, #0
   16eb0:	da04      	bge.n	16ebc <_puts_r+0x70>
   16eb2:	69a2      	ldr	r2, [r4, #24]
   16eb4:	4293      	cmp	r3, r2
   16eb6:	db16      	blt.n	16ee6 <_puts_r+0x9a>
   16eb8:	290a      	cmp	r1, #10
   16eba:	d014      	beq.n	16ee6 <_puts_r+0x9a>
   16ebc:	6823      	ldr	r3, [r4, #0]
   16ebe:	1c5a      	adds	r2, r3, #1
   16ec0:	6022      	str	r2, [r4, #0]
   16ec2:	7019      	strb	r1, [r3, #0]
   16ec4:	7831      	ldrb	r1, [r6, #0]
   16ec6:	68a3      	ldr	r3, [r4, #8]
   16ec8:	2900      	cmp	r1, #0
   16eca:	d1ed      	bne.n	16ea8 <_puts_r+0x5c>
   16ecc:	3b01      	subs	r3, #1
   16ece:	60a3      	str	r3, [r4, #8]
   16ed0:	2b00      	cmp	r3, #0
   16ed2:	da0f      	bge.n	16ef4 <_puts_r+0xa8>
   16ed4:	0022      	movs	r2, r4
   16ed6:	310a      	adds	r1, #10
   16ed8:	0028      	movs	r0, r5
   16eda:	f000 f941 	bl	17160 <__swbuf_r>
   16ede:	1c43      	adds	r3, r0, #1
   16ee0:	d0d5      	beq.n	16e8e <_puts_r+0x42>
   16ee2:	200a      	movs	r0, #10
   16ee4:	e7d5      	b.n	16e92 <_puts_r+0x46>
   16ee6:	0022      	movs	r2, r4
   16ee8:	0028      	movs	r0, r5
   16eea:	f000 f939 	bl	17160 <__swbuf_r>
   16eee:	1c43      	adds	r3, r0, #1
   16ef0:	d1e8      	bne.n	16ec4 <_puts_r+0x78>
   16ef2:	e7cc      	b.n	16e8e <_puts_r+0x42>
   16ef4:	200a      	movs	r0, #10
   16ef6:	6823      	ldr	r3, [r4, #0]
   16ef8:	1c5a      	adds	r2, r3, #1
   16efa:	6022      	str	r2, [r4, #0]
   16efc:	7018      	strb	r0, [r3, #0]
   16efe:	e7c8      	b.n	16e92 <_puts_r+0x46>
   16f00:	00018f48 	.word	0x00018f48
   16f04:	00018f68 	.word	0x00018f68
   16f08:	00018f28 	.word	0x00018f28

00016f0c <puts>:
   16f0c:	b510      	push	{r4, lr}
   16f0e:	4b03      	ldr	r3, [pc, #12]	; (16f1c <puts+0x10>)
   16f10:	0001      	movs	r1, r0
   16f12:	6818      	ldr	r0, [r3, #0]
   16f14:	f7ff ff9a 	bl	16e4c <_puts_r>
   16f18:	bd10      	pop	{r4, pc}
   16f1a:	46c0      	nop			; (mov r8, r8)
   16f1c:	20000028 	.word	0x20000028

00016f20 <srand>:
   16f20:	4b10      	ldr	r3, [pc, #64]	; (16f64 <srand+0x44>)
   16f22:	b570      	push	{r4, r5, r6, lr}
   16f24:	681c      	ldr	r4, [r3, #0]
   16f26:	0005      	movs	r5, r0
   16f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16f2a:	2b00      	cmp	r3, #0
   16f2c:	d115      	bne.n	16f5a <srand+0x3a>
   16f2e:	2018      	movs	r0, #24
   16f30:	f000 fbe4 	bl	176fc <malloc>
   16f34:	4b0c      	ldr	r3, [pc, #48]	; (16f68 <srand+0x48>)
   16f36:	63a0      	str	r0, [r4, #56]	; 0x38
   16f38:	8003      	strh	r3, [r0, #0]
   16f3a:	4b0c      	ldr	r3, [pc, #48]	; (16f6c <srand+0x4c>)
   16f3c:	2201      	movs	r2, #1
   16f3e:	8043      	strh	r3, [r0, #2]
   16f40:	4b0b      	ldr	r3, [pc, #44]	; (16f70 <srand+0x50>)
   16f42:	8083      	strh	r3, [r0, #4]
   16f44:	4b0b      	ldr	r3, [pc, #44]	; (16f74 <srand+0x54>)
   16f46:	80c3      	strh	r3, [r0, #6]
   16f48:	4b0b      	ldr	r3, [pc, #44]	; (16f78 <srand+0x58>)
   16f4a:	8103      	strh	r3, [r0, #8]
   16f4c:	2305      	movs	r3, #5
   16f4e:	8143      	strh	r3, [r0, #10]
   16f50:	3306      	adds	r3, #6
   16f52:	8183      	strh	r3, [r0, #12]
   16f54:	2300      	movs	r3, #0
   16f56:	6102      	str	r2, [r0, #16]
   16f58:	6143      	str	r3, [r0, #20]
   16f5a:	2200      	movs	r2, #0
   16f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16f5e:	611d      	str	r5, [r3, #16]
   16f60:	615a      	str	r2, [r3, #20]
   16f62:	bd70      	pop	{r4, r5, r6, pc}
   16f64:	20000028 	.word	0x20000028
   16f68:	0000330e 	.word	0x0000330e
   16f6c:	ffffabcd 	.word	0xffffabcd
   16f70:	00001234 	.word	0x00001234
   16f74:	ffffe66d 	.word	0xffffe66d
   16f78:	ffffdeec 	.word	0xffffdeec

00016f7c <rand>:
   16f7c:	4b15      	ldr	r3, [pc, #84]	; (16fd4 <rand+0x58>)
   16f7e:	b510      	push	{r4, lr}
   16f80:	681c      	ldr	r4, [r3, #0]
   16f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16f84:	2b00      	cmp	r3, #0
   16f86:	d115      	bne.n	16fb4 <rand+0x38>
   16f88:	2018      	movs	r0, #24
   16f8a:	f000 fbb7 	bl	176fc <malloc>
   16f8e:	4b12      	ldr	r3, [pc, #72]	; (16fd8 <rand+0x5c>)
   16f90:	63a0      	str	r0, [r4, #56]	; 0x38
   16f92:	8003      	strh	r3, [r0, #0]
   16f94:	4b11      	ldr	r3, [pc, #68]	; (16fdc <rand+0x60>)
   16f96:	2201      	movs	r2, #1
   16f98:	8043      	strh	r3, [r0, #2]
   16f9a:	4b11      	ldr	r3, [pc, #68]	; (16fe0 <rand+0x64>)
   16f9c:	8083      	strh	r3, [r0, #4]
   16f9e:	4b11      	ldr	r3, [pc, #68]	; (16fe4 <rand+0x68>)
   16fa0:	80c3      	strh	r3, [r0, #6]
   16fa2:	4b11      	ldr	r3, [pc, #68]	; (16fe8 <rand+0x6c>)
   16fa4:	8103      	strh	r3, [r0, #8]
   16fa6:	2305      	movs	r3, #5
   16fa8:	8143      	strh	r3, [r0, #10]
   16faa:	3306      	adds	r3, #6
   16fac:	8183      	strh	r3, [r0, #12]
   16fae:	2300      	movs	r3, #0
   16fb0:	6102      	str	r2, [r0, #16]
   16fb2:	6143      	str	r3, [r0, #20]
   16fb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   16fb6:	4a0d      	ldr	r2, [pc, #52]	; (16fec <rand+0x70>)
   16fb8:	6920      	ldr	r0, [r4, #16]
   16fba:	6961      	ldr	r1, [r4, #20]
   16fbc:	4b0c      	ldr	r3, [pc, #48]	; (16ff0 <rand+0x74>)
   16fbe:	f7fc fd17 	bl	139f0 <__aeabi_lmul>
   16fc2:	2201      	movs	r2, #1
   16fc4:	2300      	movs	r3, #0
   16fc6:	1880      	adds	r0, r0, r2
   16fc8:	4159      	adcs	r1, r3
   16fca:	6120      	str	r0, [r4, #16]
   16fcc:	6161      	str	r1, [r4, #20]
   16fce:	0048      	lsls	r0, r1, #1
   16fd0:	0840      	lsrs	r0, r0, #1
   16fd2:	bd10      	pop	{r4, pc}
   16fd4:	20000028 	.word	0x20000028
   16fd8:	0000330e 	.word	0x0000330e
   16fdc:	ffffabcd 	.word	0xffffabcd
   16fe0:	00001234 	.word	0x00001234
   16fe4:	ffffe66d 	.word	0xffffe66d
   16fe8:	ffffdeec 	.word	0xffffdeec
   16fec:	4c957f2d 	.word	0x4c957f2d
   16ff0:	5851f42d 	.word	0x5851f42d

00016ff4 <setbuf>:
   16ff4:	424a      	negs	r2, r1
   16ff6:	414a      	adcs	r2, r1
   16ff8:	2380      	movs	r3, #128	; 0x80
   16ffa:	b510      	push	{r4, lr}
   16ffc:	0052      	lsls	r2, r2, #1
   16ffe:	00db      	lsls	r3, r3, #3
   17000:	f000 f802 	bl	17008 <setvbuf>
   17004:	bd10      	pop	{r4, pc}
   17006:	Address 0x00017006 is out of bounds.


00017008 <setvbuf>:
   17008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1700a:	001d      	movs	r5, r3
   1700c:	4b4f      	ldr	r3, [pc, #316]	; (1714c <setvbuf+0x144>)
   1700e:	b085      	sub	sp, #20
   17010:	681e      	ldr	r6, [r3, #0]
   17012:	0004      	movs	r4, r0
   17014:	000f      	movs	r7, r1
   17016:	9200      	str	r2, [sp, #0]
   17018:	2e00      	cmp	r6, #0
   1701a:	d005      	beq.n	17028 <setvbuf+0x20>
   1701c:	69b3      	ldr	r3, [r6, #24]
   1701e:	2b00      	cmp	r3, #0
   17020:	d102      	bne.n	17028 <setvbuf+0x20>
   17022:	0030      	movs	r0, r6
   17024:	f000 fa68 	bl	174f8 <__sinit>
   17028:	4b49      	ldr	r3, [pc, #292]	; (17150 <setvbuf+0x148>)
   1702a:	429c      	cmp	r4, r3
   1702c:	d150      	bne.n	170d0 <setvbuf+0xc8>
   1702e:	6874      	ldr	r4, [r6, #4]
   17030:	9b00      	ldr	r3, [sp, #0]
   17032:	2b02      	cmp	r3, #2
   17034:	d005      	beq.n	17042 <setvbuf+0x3a>
   17036:	2b01      	cmp	r3, #1
   17038:	d900      	bls.n	1703c <setvbuf+0x34>
   1703a:	e084      	b.n	17146 <setvbuf+0x13e>
   1703c:	2d00      	cmp	r5, #0
   1703e:	da00      	bge.n	17042 <setvbuf+0x3a>
   17040:	e081      	b.n	17146 <setvbuf+0x13e>
   17042:	0021      	movs	r1, r4
   17044:	0030      	movs	r0, r6
   17046:	f000 f9e9 	bl	1741c <_fflush_r>
   1704a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1704c:	2900      	cmp	r1, #0
   1704e:	d008      	beq.n	17062 <setvbuf+0x5a>
   17050:	0023      	movs	r3, r4
   17052:	3344      	adds	r3, #68	; 0x44
   17054:	4299      	cmp	r1, r3
   17056:	d002      	beq.n	1705e <setvbuf+0x56>
   17058:	0030      	movs	r0, r6
   1705a:	f000 fb65 	bl	17728 <_free_r>
   1705e:	2300      	movs	r3, #0
   17060:	6363      	str	r3, [r4, #52]	; 0x34
   17062:	2300      	movs	r3, #0
   17064:	61a3      	str	r3, [r4, #24]
   17066:	6063      	str	r3, [r4, #4]
   17068:	89a3      	ldrh	r3, [r4, #12]
   1706a:	061b      	lsls	r3, r3, #24
   1706c:	d503      	bpl.n	17076 <setvbuf+0x6e>
   1706e:	6921      	ldr	r1, [r4, #16]
   17070:	0030      	movs	r0, r6
   17072:	f000 fb59 	bl	17728 <_free_r>
   17076:	89a3      	ldrh	r3, [r4, #12]
   17078:	4a36      	ldr	r2, [pc, #216]	; (17154 <setvbuf+0x14c>)
   1707a:	4013      	ands	r3, r2
   1707c:	81a3      	strh	r3, [r4, #12]
   1707e:	9b00      	ldr	r3, [sp, #0]
   17080:	2b02      	cmp	r3, #2
   17082:	d05a      	beq.n	1713a <setvbuf+0x132>
   17084:	ab03      	add	r3, sp, #12
   17086:	aa02      	add	r2, sp, #8
   17088:	0021      	movs	r1, r4
   1708a:	0030      	movs	r0, r6
   1708c:	f000 faca 	bl	17624 <__swhatbuf_r>
   17090:	89a3      	ldrh	r3, [r4, #12]
   17092:	4318      	orrs	r0, r3
   17094:	81a0      	strh	r0, [r4, #12]
   17096:	2d00      	cmp	r5, #0
   17098:	d124      	bne.n	170e4 <setvbuf+0xdc>
   1709a:	9d02      	ldr	r5, [sp, #8]
   1709c:	0028      	movs	r0, r5
   1709e:	f000 fb2d 	bl	176fc <malloc>
   170a2:	9501      	str	r5, [sp, #4]
   170a4:	1e07      	subs	r7, r0, #0
   170a6:	d142      	bne.n	1712e <setvbuf+0x126>
   170a8:	9b02      	ldr	r3, [sp, #8]
   170aa:	9301      	str	r3, [sp, #4]
   170ac:	42ab      	cmp	r3, r5
   170ae:	d139      	bne.n	17124 <setvbuf+0x11c>
   170b0:	2001      	movs	r0, #1
   170b2:	4240      	negs	r0, r0
   170b4:	2302      	movs	r3, #2
   170b6:	89a2      	ldrh	r2, [r4, #12]
   170b8:	4313      	orrs	r3, r2
   170ba:	81a3      	strh	r3, [r4, #12]
   170bc:	2300      	movs	r3, #0
   170be:	60a3      	str	r3, [r4, #8]
   170c0:	0023      	movs	r3, r4
   170c2:	3347      	adds	r3, #71	; 0x47
   170c4:	6023      	str	r3, [r4, #0]
   170c6:	6123      	str	r3, [r4, #16]
   170c8:	2301      	movs	r3, #1
   170ca:	6163      	str	r3, [r4, #20]
   170cc:	b005      	add	sp, #20
   170ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170d0:	4b21      	ldr	r3, [pc, #132]	; (17158 <setvbuf+0x150>)
   170d2:	429c      	cmp	r4, r3
   170d4:	d101      	bne.n	170da <setvbuf+0xd2>
   170d6:	68b4      	ldr	r4, [r6, #8]
   170d8:	e7aa      	b.n	17030 <setvbuf+0x28>
   170da:	4b20      	ldr	r3, [pc, #128]	; (1715c <setvbuf+0x154>)
   170dc:	429c      	cmp	r4, r3
   170de:	d1a7      	bne.n	17030 <setvbuf+0x28>
   170e0:	68f4      	ldr	r4, [r6, #12]
   170e2:	e7a5      	b.n	17030 <setvbuf+0x28>
   170e4:	2f00      	cmp	r7, #0
   170e6:	d0d9      	beq.n	1709c <setvbuf+0x94>
   170e8:	69b3      	ldr	r3, [r6, #24]
   170ea:	2b00      	cmp	r3, #0
   170ec:	d102      	bne.n	170f4 <setvbuf+0xec>
   170ee:	0030      	movs	r0, r6
   170f0:	f000 fa02 	bl	174f8 <__sinit>
   170f4:	9b00      	ldr	r3, [sp, #0]
   170f6:	2b01      	cmp	r3, #1
   170f8:	d103      	bne.n	17102 <setvbuf+0xfa>
   170fa:	89a3      	ldrh	r3, [r4, #12]
   170fc:	9a00      	ldr	r2, [sp, #0]
   170fe:	431a      	orrs	r2, r3
   17100:	81a2      	strh	r2, [r4, #12]
   17102:	2008      	movs	r0, #8
   17104:	89a3      	ldrh	r3, [r4, #12]
   17106:	6027      	str	r7, [r4, #0]
   17108:	6127      	str	r7, [r4, #16]
   1710a:	6165      	str	r5, [r4, #20]
   1710c:	4018      	ands	r0, r3
   1710e:	d018      	beq.n	17142 <setvbuf+0x13a>
   17110:	2001      	movs	r0, #1
   17112:	4018      	ands	r0, r3
   17114:	2300      	movs	r3, #0
   17116:	4298      	cmp	r0, r3
   17118:	d011      	beq.n	1713e <setvbuf+0x136>
   1711a:	426d      	negs	r5, r5
   1711c:	60a3      	str	r3, [r4, #8]
   1711e:	61a5      	str	r5, [r4, #24]
   17120:	0018      	movs	r0, r3
   17122:	e7d3      	b.n	170cc <setvbuf+0xc4>
   17124:	9801      	ldr	r0, [sp, #4]
   17126:	f000 fae9 	bl	176fc <malloc>
   1712a:	1e07      	subs	r7, r0, #0
   1712c:	d0c0      	beq.n	170b0 <setvbuf+0xa8>
   1712e:	2380      	movs	r3, #128	; 0x80
   17130:	89a2      	ldrh	r2, [r4, #12]
   17132:	9d01      	ldr	r5, [sp, #4]
   17134:	4313      	orrs	r3, r2
   17136:	81a3      	strh	r3, [r4, #12]
   17138:	e7d6      	b.n	170e8 <setvbuf+0xe0>
   1713a:	2000      	movs	r0, #0
   1713c:	e7ba      	b.n	170b4 <setvbuf+0xac>
   1713e:	60a5      	str	r5, [r4, #8]
   17140:	e7c4      	b.n	170cc <setvbuf+0xc4>
   17142:	60a0      	str	r0, [r4, #8]
   17144:	e7c2      	b.n	170cc <setvbuf+0xc4>
   17146:	2001      	movs	r0, #1
   17148:	4240      	negs	r0, r0
   1714a:	e7bf      	b.n	170cc <setvbuf+0xc4>
   1714c:	20000028 	.word	0x20000028
   17150:	00018f48 	.word	0x00018f48
   17154:	fffff35c 	.word	0xfffff35c
   17158:	00018f68 	.word	0x00018f68
   1715c:	00018f28 	.word	0x00018f28

00017160 <__swbuf_r>:
   17160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17162:	0005      	movs	r5, r0
   17164:	000e      	movs	r6, r1
   17166:	0014      	movs	r4, r2
   17168:	2800      	cmp	r0, #0
   1716a:	d004      	beq.n	17176 <__swbuf_r+0x16>
   1716c:	6983      	ldr	r3, [r0, #24]
   1716e:	2b00      	cmp	r3, #0
   17170:	d101      	bne.n	17176 <__swbuf_r+0x16>
   17172:	f000 f9c1 	bl	174f8 <__sinit>
   17176:	4b22      	ldr	r3, [pc, #136]	; (17200 <__swbuf_r+0xa0>)
   17178:	429c      	cmp	r4, r3
   1717a:	d12d      	bne.n	171d8 <__swbuf_r+0x78>
   1717c:	686c      	ldr	r4, [r5, #4]
   1717e:	69a3      	ldr	r3, [r4, #24]
   17180:	60a3      	str	r3, [r4, #8]
   17182:	89a3      	ldrh	r3, [r4, #12]
   17184:	071b      	lsls	r3, r3, #28
   17186:	d531      	bpl.n	171ec <__swbuf_r+0x8c>
   17188:	6923      	ldr	r3, [r4, #16]
   1718a:	2b00      	cmp	r3, #0
   1718c:	d02e      	beq.n	171ec <__swbuf_r+0x8c>
   1718e:	6823      	ldr	r3, [r4, #0]
   17190:	6922      	ldr	r2, [r4, #16]
   17192:	b2f7      	uxtb	r7, r6
   17194:	1a98      	subs	r0, r3, r2
   17196:	6963      	ldr	r3, [r4, #20]
   17198:	b2f6      	uxtb	r6, r6
   1719a:	4298      	cmp	r0, r3
   1719c:	db05      	blt.n	171aa <__swbuf_r+0x4a>
   1719e:	0021      	movs	r1, r4
   171a0:	0028      	movs	r0, r5
   171a2:	f000 f93b 	bl	1741c <_fflush_r>
   171a6:	2800      	cmp	r0, #0
   171a8:	d126      	bne.n	171f8 <__swbuf_r+0x98>
   171aa:	68a3      	ldr	r3, [r4, #8]
   171ac:	3001      	adds	r0, #1
   171ae:	3b01      	subs	r3, #1
   171b0:	60a3      	str	r3, [r4, #8]
   171b2:	6823      	ldr	r3, [r4, #0]
   171b4:	1c5a      	adds	r2, r3, #1
   171b6:	6022      	str	r2, [r4, #0]
   171b8:	701f      	strb	r7, [r3, #0]
   171ba:	6963      	ldr	r3, [r4, #20]
   171bc:	4298      	cmp	r0, r3
   171be:	d004      	beq.n	171ca <__swbuf_r+0x6a>
   171c0:	89a3      	ldrh	r3, [r4, #12]
   171c2:	07db      	lsls	r3, r3, #31
   171c4:	d51a      	bpl.n	171fc <__swbuf_r+0x9c>
   171c6:	2e0a      	cmp	r6, #10
   171c8:	d118      	bne.n	171fc <__swbuf_r+0x9c>
   171ca:	0021      	movs	r1, r4
   171cc:	0028      	movs	r0, r5
   171ce:	f000 f925 	bl	1741c <_fflush_r>
   171d2:	2800      	cmp	r0, #0
   171d4:	d012      	beq.n	171fc <__swbuf_r+0x9c>
   171d6:	e00f      	b.n	171f8 <__swbuf_r+0x98>
   171d8:	4b0a      	ldr	r3, [pc, #40]	; (17204 <__swbuf_r+0xa4>)
   171da:	429c      	cmp	r4, r3
   171dc:	d101      	bne.n	171e2 <__swbuf_r+0x82>
   171de:	68ac      	ldr	r4, [r5, #8]
   171e0:	e7cd      	b.n	1717e <__swbuf_r+0x1e>
   171e2:	4b09      	ldr	r3, [pc, #36]	; (17208 <__swbuf_r+0xa8>)
   171e4:	429c      	cmp	r4, r3
   171e6:	d1ca      	bne.n	1717e <__swbuf_r+0x1e>
   171e8:	68ec      	ldr	r4, [r5, #12]
   171ea:	e7c8      	b.n	1717e <__swbuf_r+0x1e>
   171ec:	0021      	movs	r1, r4
   171ee:	0028      	movs	r0, r5
   171f0:	f000 f80c 	bl	1720c <__swsetup_r>
   171f4:	2800      	cmp	r0, #0
   171f6:	d0ca      	beq.n	1718e <__swbuf_r+0x2e>
   171f8:	2601      	movs	r6, #1
   171fa:	4276      	negs	r6, r6
   171fc:	0030      	movs	r0, r6
   171fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17200:	00018f48 	.word	0x00018f48
   17204:	00018f68 	.word	0x00018f68
   17208:	00018f28 	.word	0x00018f28

0001720c <__swsetup_r>:
   1720c:	4b36      	ldr	r3, [pc, #216]	; (172e8 <__swsetup_r+0xdc>)
   1720e:	b570      	push	{r4, r5, r6, lr}
   17210:	681d      	ldr	r5, [r3, #0]
   17212:	0006      	movs	r6, r0
   17214:	000c      	movs	r4, r1
   17216:	2d00      	cmp	r5, #0
   17218:	d005      	beq.n	17226 <__swsetup_r+0x1a>
   1721a:	69ab      	ldr	r3, [r5, #24]
   1721c:	2b00      	cmp	r3, #0
   1721e:	d102      	bne.n	17226 <__swsetup_r+0x1a>
   17220:	0028      	movs	r0, r5
   17222:	f000 f969 	bl	174f8 <__sinit>
   17226:	4b31      	ldr	r3, [pc, #196]	; (172ec <__swsetup_r+0xe0>)
   17228:	429c      	cmp	r4, r3
   1722a:	d10f      	bne.n	1724c <__swsetup_r+0x40>
   1722c:	686c      	ldr	r4, [r5, #4]
   1722e:	230c      	movs	r3, #12
   17230:	5ee2      	ldrsh	r2, [r4, r3]
   17232:	b293      	uxth	r3, r2
   17234:	0719      	lsls	r1, r3, #28
   17236:	d42d      	bmi.n	17294 <__swsetup_r+0x88>
   17238:	06d9      	lsls	r1, r3, #27
   1723a:	d411      	bmi.n	17260 <__swsetup_r+0x54>
   1723c:	2309      	movs	r3, #9
   1723e:	2001      	movs	r0, #1
   17240:	6033      	str	r3, [r6, #0]
   17242:	3337      	adds	r3, #55	; 0x37
   17244:	4313      	orrs	r3, r2
   17246:	81a3      	strh	r3, [r4, #12]
   17248:	4240      	negs	r0, r0
   1724a:	bd70      	pop	{r4, r5, r6, pc}
   1724c:	4b28      	ldr	r3, [pc, #160]	; (172f0 <__swsetup_r+0xe4>)
   1724e:	429c      	cmp	r4, r3
   17250:	d101      	bne.n	17256 <__swsetup_r+0x4a>
   17252:	68ac      	ldr	r4, [r5, #8]
   17254:	e7eb      	b.n	1722e <__swsetup_r+0x22>
   17256:	4b27      	ldr	r3, [pc, #156]	; (172f4 <__swsetup_r+0xe8>)
   17258:	429c      	cmp	r4, r3
   1725a:	d1e8      	bne.n	1722e <__swsetup_r+0x22>
   1725c:	68ec      	ldr	r4, [r5, #12]
   1725e:	e7e6      	b.n	1722e <__swsetup_r+0x22>
   17260:	075b      	lsls	r3, r3, #29
   17262:	d513      	bpl.n	1728c <__swsetup_r+0x80>
   17264:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17266:	2900      	cmp	r1, #0
   17268:	d008      	beq.n	1727c <__swsetup_r+0x70>
   1726a:	0023      	movs	r3, r4
   1726c:	3344      	adds	r3, #68	; 0x44
   1726e:	4299      	cmp	r1, r3
   17270:	d002      	beq.n	17278 <__swsetup_r+0x6c>
   17272:	0030      	movs	r0, r6
   17274:	f000 fa58 	bl	17728 <_free_r>
   17278:	2300      	movs	r3, #0
   1727a:	6363      	str	r3, [r4, #52]	; 0x34
   1727c:	2224      	movs	r2, #36	; 0x24
   1727e:	89a3      	ldrh	r3, [r4, #12]
   17280:	4393      	bics	r3, r2
   17282:	81a3      	strh	r3, [r4, #12]
   17284:	2300      	movs	r3, #0
   17286:	6063      	str	r3, [r4, #4]
   17288:	6923      	ldr	r3, [r4, #16]
   1728a:	6023      	str	r3, [r4, #0]
   1728c:	2308      	movs	r3, #8
   1728e:	89a2      	ldrh	r2, [r4, #12]
   17290:	4313      	orrs	r3, r2
   17292:	81a3      	strh	r3, [r4, #12]
   17294:	6923      	ldr	r3, [r4, #16]
   17296:	2b00      	cmp	r3, #0
   17298:	d10b      	bne.n	172b2 <__swsetup_r+0xa6>
   1729a:	21a0      	movs	r1, #160	; 0xa0
   1729c:	2280      	movs	r2, #128	; 0x80
   1729e:	89a3      	ldrh	r3, [r4, #12]
   172a0:	0089      	lsls	r1, r1, #2
   172a2:	0092      	lsls	r2, r2, #2
   172a4:	400b      	ands	r3, r1
   172a6:	4293      	cmp	r3, r2
   172a8:	d003      	beq.n	172b2 <__swsetup_r+0xa6>
   172aa:	0021      	movs	r1, r4
   172ac:	0030      	movs	r0, r6
   172ae:	f000 f9e1 	bl	17674 <__smakebuf_r>
   172b2:	2301      	movs	r3, #1
   172b4:	89a2      	ldrh	r2, [r4, #12]
   172b6:	4013      	ands	r3, r2
   172b8:	d011      	beq.n	172de <__swsetup_r+0xd2>
   172ba:	2300      	movs	r3, #0
   172bc:	60a3      	str	r3, [r4, #8]
   172be:	6963      	ldr	r3, [r4, #20]
   172c0:	425b      	negs	r3, r3
   172c2:	61a3      	str	r3, [r4, #24]
   172c4:	2000      	movs	r0, #0
   172c6:	6923      	ldr	r3, [r4, #16]
   172c8:	4283      	cmp	r3, r0
   172ca:	d1be      	bne.n	1724a <__swsetup_r+0x3e>
   172cc:	230c      	movs	r3, #12
   172ce:	5ee2      	ldrsh	r2, [r4, r3]
   172d0:	0613      	lsls	r3, r2, #24
   172d2:	d5ba      	bpl.n	1724a <__swsetup_r+0x3e>
   172d4:	2340      	movs	r3, #64	; 0x40
   172d6:	4313      	orrs	r3, r2
   172d8:	81a3      	strh	r3, [r4, #12]
   172da:	3801      	subs	r0, #1
   172dc:	e7b5      	b.n	1724a <__swsetup_r+0x3e>
   172de:	0792      	lsls	r2, r2, #30
   172e0:	d400      	bmi.n	172e4 <__swsetup_r+0xd8>
   172e2:	6963      	ldr	r3, [r4, #20]
   172e4:	60a3      	str	r3, [r4, #8]
   172e6:	e7ed      	b.n	172c4 <__swsetup_r+0xb8>
   172e8:	20000028 	.word	0x20000028
   172ec:	00018f48 	.word	0x00018f48
   172f0:	00018f68 	.word	0x00018f68
   172f4:	00018f28 	.word	0x00018f28

000172f8 <abort>:
   172f8:	b510      	push	{r4, lr}
   172fa:	2006      	movs	r0, #6
   172fc:	f000 fb2e 	bl	1795c <raise>
   17300:	2001      	movs	r0, #1
   17302:	f7ef ff75 	bl	71f0 <_exit>
   17306:	Address 0x00017306 is out of bounds.
=======
00013904 <__aeabi_uldivmod>:
   13904:	2b00      	cmp	r3, #0
   13906:	d111      	bne.n	1392c <__aeabi_uldivmod+0x28>
   13908:	2a00      	cmp	r2, #0
   1390a:	d10f      	bne.n	1392c <__aeabi_uldivmod+0x28>
   1390c:	2900      	cmp	r1, #0
   1390e:	d100      	bne.n	13912 <__aeabi_uldivmod+0xe>
   13910:	2800      	cmp	r0, #0
   13912:	d002      	beq.n	1391a <__aeabi_uldivmod+0x16>
   13914:	2100      	movs	r1, #0
   13916:	43c9      	mvns	r1, r1
   13918:	1c08      	adds	r0, r1, #0
   1391a:	b407      	push	{r0, r1, r2}
   1391c:	4802      	ldr	r0, [pc, #8]	; (13928 <__aeabi_uldivmod+0x24>)
   1391e:	a102      	add	r1, pc, #8	; (adr r1, 13928 <__aeabi_uldivmod+0x24>)
   13920:	1840      	adds	r0, r0, r1
   13922:	9002      	str	r0, [sp, #8]
   13924:	bd03      	pop	{r0, r1, pc}
   13926:	46c0      	nop			; (mov r8, r8)
   13928:	fffffee9 	.word	0xfffffee9
   1392c:	b403      	push	{r0, r1}
   1392e:	4668      	mov	r0, sp
   13930:	b501      	push	{r0, lr}
   13932:	9802      	ldr	r0, [sp, #8]
   13934:	f000 f886 	bl	13a44 <__udivmoddi4>
   13938:	9b01      	ldr	r3, [sp, #4]
   1393a:	469e      	mov	lr, r3
   1393c:	b002      	add	sp, #8
   1393e:	bc0c      	pop	{r2, r3}
   13940:	4770      	bx	lr
   13942:	46c0      	nop			; (mov r8, r8)

00013944 <__aeabi_lmul>:
   13944:	b5f0      	push	{r4, r5, r6, r7, lr}
   13946:	46ce      	mov	lr, r9
   13948:	4647      	mov	r7, r8
   1394a:	0415      	lsls	r5, r2, #16
   1394c:	0c2d      	lsrs	r5, r5, #16
   1394e:	002e      	movs	r6, r5
   13950:	b580      	push	{r7, lr}
   13952:	0407      	lsls	r7, r0, #16
   13954:	0c14      	lsrs	r4, r2, #16
   13956:	0c3f      	lsrs	r7, r7, #16
   13958:	4699      	mov	r9, r3
   1395a:	0c03      	lsrs	r3, r0, #16
   1395c:	437e      	muls	r6, r7
   1395e:	435d      	muls	r5, r3
   13960:	4367      	muls	r7, r4
   13962:	4363      	muls	r3, r4
   13964:	197f      	adds	r7, r7, r5
   13966:	0c34      	lsrs	r4, r6, #16
   13968:	19e4      	adds	r4, r4, r7
   1396a:	469c      	mov	ip, r3
   1396c:	42a5      	cmp	r5, r4
   1396e:	d903      	bls.n	13978 <__aeabi_lmul+0x34>
   13970:	2380      	movs	r3, #128	; 0x80
   13972:	025b      	lsls	r3, r3, #9
   13974:	4698      	mov	r8, r3
   13976:	44c4      	add	ip, r8
   13978:	464b      	mov	r3, r9
   1397a:	4351      	muls	r1, r2
   1397c:	4343      	muls	r3, r0
   1397e:	0436      	lsls	r6, r6, #16
   13980:	0c36      	lsrs	r6, r6, #16
   13982:	0c25      	lsrs	r5, r4, #16
   13984:	0424      	lsls	r4, r4, #16
   13986:	4465      	add	r5, ip
   13988:	19a4      	adds	r4, r4, r6
   1398a:	1859      	adds	r1, r3, r1
   1398c:	1949      	adds	r1, r1, r5
   1398e:	0020      	movs	r0, r4
   13990:	bc0c      	pop	{r2, r3}
   13992:	4690      	mov	r8, r2
   13994:	4699      	mov	r9, r3
   13996:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013998 <__aeabi_f2uiz>:
   13998:	219e      	movs	r1, #158	; 0x9e
   1399a:	b510      	push	{r4, lr}
   1399c:	05c9      	lsls	r1, r1, #23
   1399e:	1c04      	adds	r4, r0, #0
   139a0:	f7ff ffa6 	bl	138f0 <__aeabi_fcmpge>
   139a4:	2800      	cmp	r0, #0
   139a6:	d103      	bne.n	139b0 <__aeabi_f2uiz+0x18>
   139a8:	1c20      	adds	r0, r4, #0
   139aa:	f000 ff49 	bl	14840 <__aeabi_f2iz>
   139ae:	bd10      	pop	{r4, pc}
   139b0:	219e      	movs	r1, #158	; 0x9e
   139b2:	1c20      	adds	r0, r4, #0
   139b4:	05c9      	lsls	r1, r1, #23
   139b6:	f000 fda7 	bl	14508 <__aeabi_fsub>
   139ba:	f000 ff41 	bl	14840 <__aeabi_f2iz>
   139be:	2380      	movs	r3, #128	; 0x80
   139c0:	061b      	lsls	r3, r3, #24
   139c2:	469c      	mov	ip, r3
   139c4:	4460      	add	r0, ip
   139c6:	e7f2      	b.n	139ae <__aeabi_f2uiz+0x16>

000139c8 <__aeabi_d2uiz>:
   139c8:	b570      	push	{r4, r5, r6, lr}
   139ca:	2200      	movs	r2, #0
   139cc:	4b0c      	ldr	r3, [pc, #48]	; (13a00 <__aeabi_d2uiz+0x38>)
   139ce:	0004      	movs	r4, r0
   139d0:	000d      	movs	r5, r1
   139d2:	f7ff ff53 	bl	1387c <__aeabi_dcmpge>
   139d6:	2800      	cmp	r0, #0
   139d8:	d104      	bne.n	139e4 <__aeabi_d2uiz+0x1c>
   139da:	0020      	movs	r0, r4
   139dc:	0029      	movs	r1, r5
   139de:	f002 fcbf 	bl	16360 <__aeabi_d2iz>
   139e2:	bd70      	pop	{r4, r5, r6, pc}
   139e4:	4b06      	ldr	r3, [pc, #24]	; (13a00 <__aeabi_d2uiz+0x38>)
   139e6:	2200      	movs	r2, #0
   139e8:	0020      	movs	r0, r4
   139ea:	0029      	movs	r1, r5
   139ec:	f002 f9a2 	bl	15d34 <__aeabi_dsub>
   139f0:	f002 fcb6 	bl	16360 <__aeabi_d2iz>
   139f4:	2380      	movs	r3, #128	; 0x80
   139f6:	061b      	lsls	r3, r3, #24
   139f8:	469c      	mov	ip, r3
   139fa:	4460      	add	r0, ip
   139fc:	e7f1      	b.n	139e2 <__aeabi_d2uiz+0x1a>
   139fe:	46c0      	nop			; (mov r8, r8)
   13a00:	41e00000 	.word	0x41e00000

00013a04 <__aeabi_f2ulz>:
   13a04:	b570      	push	{r4, r5, r6, lr}
   13a06:	f002 fd59 	bl	164bc <__aeabi_f2d>
   13a0a:	2200      	movs	r2, #0
   13a0c:	4b0b      	ldr	r3, [pc, #44]	; (13a3c <__aeabi_f2ulz+0x38>)
   13a0e:	000d      	movs	r5, r1
   13a10:	0004      	movs	r4, r0
   13a12:	f001 ff0f 	bl	15834 <__aeabi_dmul>
   13a16:	f7ff ffd7 	bl	139c8 <__aeabi_d2uiz>
   13a1a:	0006      	movs	r6, r0
   13a1c:	f002 fd16 	bl	1644c <__aeabi_ui2d>
   13a20:	2200      	movs	r2, #0
   13a22:	4b07      	ldr	r3, [pc, #28]	; (13a40 <__aeabi_f2ulz+0x3c>)
   13a24:	f001 ff06 	bl	15834 <__aeabi_dmul>
   13a28:	0002      	movs	r2, r0
   13a2a:	000b      	movs	r3, r1
   13a2c:	0020      	movs	r0, r4
   13a2e:	0029      	movs	r1, r5
   13a30:	f002 f980 	bl	15d34 <__aeabi_dsub>
   13a34:	f7ff ffc8 	bl	139c8 <__aeabi_d2uiz>
   13a38:	0031      	movs	r1, r6
   13a3a:	bd70      	pop	{r4, r5, r6, pc}
   13a3c:	3df00000 	.word	0x3df00000
   13a40:	41f00000 	.word	0x41f00000

00013a44 <__udivmoddi4>:
   13a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a46:	4657      	mov	r7, sl
   13a48:	464e      	mov	r6, r9
   13a4a:	4645      	mov	r5, r8
   13a4c:	46de      	mov	lr, fp
   13a4e:	b5e0      	push	{r5, r6, r7, lr}
   13a50:	0004      	movs	r4, r0
   13a52:	b083      	sub	sp, #12
   13a54:	000d      	movs	r5, r1
   13a56:	4692      	mov	sl, r2
   13a58:	4699      	mov	r9, r3
   13a5a:	428b      	cmp	r3, r1
   13a5c:	d82f      	bhi.n	13abe <__udivmoddi4+0x7a>
   13a5e:	d02c      	beq.n	13aba <__udivmoddi4+0x76>
   13a60:	4649      	mov	r1, r9
   13a62:	4650      	mov	r0, sl
   13a64:	f002 fe24 	bl	166b0 <__clzdi2>
   13a68:	0029      	movs	r1, r5
   13a6a:	0006      	movs	r6, r0
   13a6c:	0020      	movs	r0, r4
   13a6e:	f002 fe1f 	bl	166b0 <__clzdi2>
   13a72:	1a33      	subs	r3, r6, r0
   13a74:	4698      	mov	r8, r3
   13a76:	3b20      	subs	r3, #32
   13a78:	469b      	mov	fp, r3
   13a7a:	d500      	bpl.n	13a7e <__udivmoddi4+0x3a>
   13a7c:	e074      	b.n	13b68 <__udivmoddi4+0x124>
   13a7e:	4653      	mov	r3, sl
   13a80:	465a      	mov	r2, fp
   13a82:	4093      	lsls	r3, r2
   13a84:	001f      	movs	r7, r3
   13a86:	4653      	mov	r3, sl
   13a88:	4642      	mov	r2, r8
   13a8a:	4093      	lsls	r3, r2
   13a8c:	001e      	movs	r6, r3
   13a8e:	42af      	cmp	r7, r5
   13a90:	d829      	bhi.n	13ae6 <__udivmoddi4+0xa2>
   13a92:	d026      	beq.n	13ae2 <__udivmoddi4+0x9e>
   13a94:	465b      	mov	r3, fp
   13a96:	1ba4      	subs	r4, r4, r6
   13a98:	41bd      	sbcs	r5, r7
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	da00      	bge.n	13aa0 <__udivmoddi4+0x5c>
   13a9e:	e079      	b.n	13b94 <__udivmoddi4+0x150>
   13aa0:	2200      	movs	r2, #0
   13aa2:	2300      	movs	r3, #0
   13aa4:	9200      	str	r2, [sp, #0]
   13aa6:	9301      	str	r3, [sp, #4]
   13aa8:	2301      	movs	r3, #1
   13aaa:	465a      	mov	r2, fp
   13aac:	4093      	lsls	r3, r2
   13aae:	9301      	str	r3, [sp, #4]
   13ab0:	2301      	movs	r3, #1
   13ab2:	4642      	mov	r2, r8
   13ab4:	4093      	lsls	r3, r2
   13ab6:	9300      	str	r3, [sp, #0]
   13ab8:	e019      	b.n	13aee <__udivmoddi4+0xaa>
   13aba:	4282      	cmp	r2, r0
   13abc:	d9d0      	bls.n	13a60 <__udivmoddi4+0x1c>
   13abe:	2200      	movs	r2, #0
   13ac0:	2300      	movs	r3, #0
   13ac2:	9200      	str	r2, [sp, #0]
   13ac4:	9301      	str	r3, [sp, #4]
   13ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13ac8:	2b00      	cmp	r3, #0
   13aca:	d001      	beq.n	13ad0 <__udivmoddi4+0x8c>
   13acc:	601c      	str	r4, [r3, #0]
   13ace:	605d      	str	r5, [r3, #4]
   13ad0:	9800      	ldr	r0, [sp, #0]
   13ad2:	9901      	ldr	r1, [sp, #4]
   13ad4:	b003      	add	sp, #12
   13ad6:	bc3c      	pop	{r2, r3, r4, r5}
   13ad8:	4690      	mov	r8, r2
   13ada:	4699      	mov	r9, r3
   13adc:	46a2      	mov	sl, r4
   13ade:	46ab      	mov	fp, r5
   13ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ae2:	42a3      	cmp	r3, r4
   13ae4:	d9d6      	bls.n	13a94 <__udivmoddi4+0x50>
   13ae6:	2200      	movs	r2, #0
   13ae8:	2300      	movs	r3, #0
   13aea:	9200      	str	r2, [sp, #0]
   13aec:	9301      	str	r3, [sp, #4]
   13aee:	4643      	mov	r3, r8
   13af0:	2b00      	cmp	r3, #0
   13af2:	d0e8      	beq.n	13ac6 <__udivmoddi4+0x82>
   13af4:	07fb      	lsls	r3, r7, #31
   13af6:	0872      	lsrs	r2, r6, #1
   13af8:	431a      	orrs	r2, r3
   13afa:	4646      	mov	r6, r8
   13afc:	087b      	lsrs	r3, r7, #1
   13afe:	e00e      	b.n	13b1e <__udivmoddi4+0xda>
   13b00:	42ab      	cmp	r3, r5
   13b02:	d101      	bne.n	13b08 <__udivmoddi4+0xc4>
   13b04:	42a2      	cmp	r2, r4
   13b06:	d80c      	bhi.n	13b22 <__udivmoddi4+0xde>
   13b08:	1aa4      	subs	r4, r4, r2
   13b0a:	419d      	sbcs	r5, r3
   13b0c:	2001      	movs	r0, #1
   13b0e:	1924      	adds	r4, r4, r4
   13b10:	416d      	adcs	r5, r5
   13b12:	2100      	movs	r1, #0
   13b14:	3e01      	subs	r6, #1
   13b16:	1824      	adds	r4, r4, r0
   13b18:	414d      	adcs	r5, r1
   13b1a:	2e00      	cmp	r6, #0
   13b1c:	d006      	beq.n	13b2c <__udivmoddi4+0xe8>
   13b1e:	42ab      	cmp	r3, r5
   13b20:	d9ee      	bls.n	13b00 <__udivmoddi4+0xbc>
   13b22:	3e01      	subs	r6, #1
   13b24:	1924      	adds	r4, r4, r4
   13b26:	416d      	adcs	r5, r5
   13b28:	2e00      	cmp	r6, #0
   13b2a:	d1f8      	bne.n	13b1e <__udivmoddi4+0xda>
   13b2c:	465b      	mov	r3, fp
   13b2e:	9800      	ldr	r0, [sp, #0]
   13b30:	9901      	ldr	r1, [sp, #4]
   13b32:	1900      	adds	r0, r0, r4
   13b34:	4169      	adcs	r1, r5
   13b36:	2b00      	cmp	r3, #0
   13b38:	db22      	blt.n	13b80 <__udivmoddi4+0x13c>
   13b3a:	002b      	movs	r3, r5
   13b3c:	465a      	mov	r2, fp
   13b3e:	40d3      	lsrs	r3, r2
   13b40:	002a      	movs	r2, r5
   13b42:	4644      	mov	r4, r8
   13b44:	40e2      	lsrs	r2, r4
   13b46:	001c      	movs	r4, r3
   13b48:	465b      	mov	r3, fp
   13b4a:	0015      	movs	r5, r2
   13b4c:	2b00      	cmp	r3, #0
   13b4e:	db2c      	blt.n	13baa <__udivmoddi4+0x166>
   13b50:	0026      	movs	r6, r4
   13b52:	409e      	lsls	r6, r3
   13b54:	0033      	movs	r3, r6
   13b56:	0026      	movs	r6, r4
   13b58:	4647      	mov	r7, r8
   13b5a:	40be      	lsls	r6, r7
   13b5c:	0032      	movs	r2, r6
   13b5e:	1a80      	subs	r0, r0, r2
   13b60:	4199      	sbcs	r1, r3
   13b62:	9000      	str	r0, [sp, #0]
   13b64:	9101      	str	r1, [sp, #4]
   13b66:	e7ae      	b.n	13ac6 <__udivmoddi4+0x82>
   13b68:	4642      	mov	r2, r8
   13b6a:	2320      	movs	r3, #32
   13b6c:	1a9b      	subs	r3, r3, r2
   13b6e:	4652      	mov	r2, sl
   13b70:	40da      	lsrs	r2, r3
   13b72:	4641      	mov	r1, r8
   13b74:	0013      	movs	r3, r2
   13b76:	464a      	mov	r2, r9
   13b78:	408a      	lsls	r2, r1
   13b7a:	0017      	movs	r7, r2
   13b7c:	431f      	orrs	r7, r3
   13b7e:	e782      	b.n	13a86 <__udivmoddi4+0x42>
   13b80:	4642      	mov	r2, r8
   13b82:	2320      	movs	r3, #32
   13b84:	1a9b      	subs	r3, r3, r2
   13b86:	002a      	movs	r2, r5
   13b88:	4646      	mov	r6, r8
   13b8a:	409a      	lsls	r2, r3
   13b8c:	0023      	movs	r3, r4
   13b8e:	40f3      	lsrs	r3, r6
   13b90:	4313      	orrs	r3, r2
   13b92:	e7d5      	b.n	13b40 <__udivmoddi4+0xfc>
   13b94:	4642      	mov	r2, r8
   13b96:	2320      	movs	r3, #32
   13b98:	2100      	movs	r1, #0
   13b9a:	1a9b      	subs	r3, r3, r2
   13b9c:	2200      	movs	r2, #0
   13b9e:	9100      	str	r1, [sp, #0]
   13ba0:	9201      	str	r2, [sp, #4]
   13ba2:	2201      	movs	r2, #1
   13ba4:	40da      	lsrs	r2, r3
   13ba6:	9201      	str	r2, [sp, #4]
   13ba8:	e782      	b.n	13ab0 <__udivmoddi4+0x6c>
   13baa:	4642      	mov	r2, r8
   13bac:	2320      	movs	r3, #32
   13bae:	0026      	movs	r6, r4
   13bb0:	1a9b      	subs	r3, r3, r2
   13bb2:	40de      	lsrs	r6, r3
   13bb4:	002f      	movs	r7, r5
   13bb6:	46b4      	mov	ip, r6
   13bb8:	4097      	lsls	r7, r2
   13bba:	4666      	mov	r6, ip
   13bbc:	003b      	movs	r3, r7
   13bbe:	4333      	orrs	r3, r6
   13bc0:	e7c9      	b.n	13b56 <__udivmoddi4+0x112>
   13bc2:	46c0      	nop			; (mov r8, r8)

00013bc4 <__aeabi_fadd>:
   13bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bc6:	46c6      	mov	lr, r8
   13bc8:	024e      	lsls	r6, r1, #9
   13bca:	0247      	lsls	r7, r0, #9
   13bcc:	0a76      	lsrs	r6, r6, #9
   13bce:	0a7b      	lsrs	r3, r7, #9
   13bd0:	0044      	lsls	r4, r0, #1
   13bd2:	0fc5      	lsrs	r5, r0, #31
   13bd4:	00f7      	lsls	r7, r6, #3
   13bd6:	0048      	lsls	r0, r1, #1
   13bd8:	4698      	mov	r8, r3
   13bda:	b500      	push	{lr}
   13bdc:	0e24      	lsrs	r4, r4, #24
   13bde:	002a      	movs	r2, r5
   13be0:	00db      	lsls	r3, r3, #3
   13be2:	0e00      	lsrs	r0, r0, #24
   13be4:	0fc9      	lsrs	r1, r1, #31
   13be6:	46bc      	mov	ip, r7
   13be8:	428d      	cmp	r5, r1
   13bea:	d067      	beq.n	13cbc <__aeabi_fadd+0xf8>
   13bec:	1a22      	subs	r2, r4, r0
   13bee:	2a00      	cmp	r2, #0
   13bf0:	dc00      	bgt.n	13bf4 <__aeabi_fadd+0x30>
   13bf2:	e0a5      	b.n	13d40 <__aeabi_fadd+0x17c>
   13bf4:	2800      	cmp	r0, #0
   13bf6:	d13a      	bne.n	13c6e <__aeabi_fadd+0xaa>
   13bf8:	2f00      	cmp	r7, #0
   13bfa:	d100      	bne.n	13bfe <__aeabi_fadd+0x3a>
   13bfc:	e093      	b.n	13d26 <__aeabi_fadd+0x162>
   13bfe:	1e51      	subs	r1, r2, #1
   13c00:	2900      	cmp	r1, #0
   13c02:	d000      	beq.n	13c06 <__aeabi_fadd+0x42>
   13c04:	e0bc      	b.n	13d80 <__aeabi_fadd+0x1bc>
   13c06:	2401      	movs	r4, #1
   13c08:	1bdb      	subs	r3, r3, r7
   13c0a:	015a      	lsls	r2, r3, #5
   13c0c:	d546      	bpl.n	13c9c <__aeabi_fadd+0xd8>
   13c0e:	019b      	lsls	r3, r3, #6
   13c10:	099e      	lsrs	r6, r3, #6
   13c12:	0030      	movs	r0, r6
   13c14:	f002 fd2e 	bl	16674 <__clzsi2>
   13c18:	3805      	subs	r0, #5
   13c1a:	4086      	lsls	r6, r0
   13c1c:	4284      	cmp	r4, r0
   13c1e:	dd00      	ble.n	13c22 <__aeabi_fadd+0x5e>
   13c20:	e09d      	b.n	13d5e <__aeabi_fadd+0x19a>
   13c22:	1b04      	subs	r4, r0, r4
   13c24:	0032      	movs	r2, r6
   13c26:	2020      	movs	r0, #32
   13c28:	3401      	adds	r4, #1
   13c2a:	40e2      	lsrs	r2, r4
   13c2c:	1b04      	subs	r4, r0, r4
   13c2e:	40a6      	lsls	r6, r4
   13c30:	0033      	movs	r3, r6
   13c32:	1e5e      	subs	r6, r3, #1
   13c34:	41b3      	sbcs	r3, r6
   13c36:	2400      	movs	r4, #0
   13c38:	4313      	orrs	r3, r2
   13c3a:	075a      	lsls	r2, r3, #29
   13c3c:	d004      	beq.n	13c48 <__aeabi_fadd+0x84>
   13c3e:	220f      	movs	r2, #15
   13c40:	401a      	ands	r2, r3
   13c42:	2a04      	cmp	r2, #4
   13c44:	d000      	beq.n	13c48 <__aeabi_fadd+0x84>
   13c46:	3304      	adds	r3, #4
   13c48:	015a      	lsls	r2, r3, #5
   13c4a:	d529      	bpl.n	13ca0 <__aeabi_fadd+0xdc>
   13c4c:	3401      	adds	r4, #1
   13c4e:	2cff      	cmp	r4, #255	; 0xff
   13c50:	d100      	bne.n	13c54 <__aeabi_fadd+0x90>
   13c52:	e081      	b.n	13d58 <__aeabi_fadd+0x194>
   13c54:	002a      	movs	r2, r5
   13c56:	019b      	lsls	r3, r3, #6
   13c58:	0a5b      	lsrs	r3, r3, #9
   13c5a:	b2e4      	uxtb	r4, r4
   13c5c:	025b      	lsls	r3, r3, #9
   13c5e:	05e4      	lsls	r4, r4, #23
   13c60:	0a58      	lsrs	r0, r3, #9
   13c62:	07d2      	lsls	r2, r2, #31
   13c64:	4320      	orrs	r0, r4
   13c66:	4310      	orrs	r0, r2
   13c68:	bc04      	pop	{r2}
   13c6a:	4690      	mov	r8, r2
   13c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c6e:	2cff      	cmp	r4, #255	; 0xff
   13c70:	d0e3      	beq.n	13c3a <__aeabi_fadd+0x76>
   13c72:	2180      	movs	r1, #128	; 0x80
   13c74:	0038      	movs	r0, r7
   13c76:	04c9      	lsls	r1, r1, #19
   13c78:	4308      	orrs	r0, r1
   13c7a:	4684      	mov	ip, r0
   13c7c:	2a1b      	cmp	r2, #27
   13c7e:	dd00      	ble.n	13c82 <__aeabi_fadd+0xbe>
   13c80:	e082      	b.n	13d88 <__aeabi_fadd+0x1c4>
   13c82:	2020      	movs	r0, #32
   13c84:	4661      	mov	r1, ip
   13c86:	40d1      	lsrs	r1, r2
   13c88:	1a82      	subs	r2, r0, r2
   13c8a:	4660      	mov	r0, ip
   13c8c:	4090      	lsls	r0, r2
   13c8e:	0002      	movs	r2, r0
   13c90:	1e50      	subs	r0, r2, #1
   13c92:	4182      	sbcs	r2, r0
   13c94:	430a      	orrs	r2, r1
   13c96:	1a9b      	subs	r3, r3, r2
   13c98:	015a      	lsls	r2, r3, #5
   13c9a:	d4b8      	bmi.n	13c0e <__aeabi_fadd+0x4a>
   13c9c:	075a      	lsls	r2, r3, #29
   13c9e:	d1ce      	bne.n	13c3e <__aeabi_fadd+0x7a>
   13ca0:	08de      	lsrs	r6, r3, #3
   13ca2:	002a      	movs	r2, r5
   13ca4:	2cff      	cmp	r4, #255	; 0xff
   13ca6:	d13a      	bne.n	13d1e <__aeabi_fadd+0x15a>
   13ca8:	2e00      	cmp	r6, #0
   13caa:	d100      	bne.n	13cae <__aeabi_fadd+0xea>
   13cac:	e0ae      	b.n	13e0c <__aeabi_fadd+0x248>
   13cae:	2380      	movs	r3, #128	; 0x80
   13cb0:	03db      	lsls	r3, r3, #15
   13cb2:	4333      	orrs	r3, r6
   13cb4:	025b      	lsls	r3, r3, #9
   13cb6:	0a5b      	lsrs	r3, r3, #9
   13cb8:	24ff      	movs	r4, #255	; 0xff
   13cba:	e7cf      	b.n	13c5c <__aeabi_fadd+0x98>
   13cbc:	1a21      	subs	r1, r4, r0
   13cbe:	2900      	cmp	r1, #0
   13cc0:	dd52      	ble.n	13d68 <__aeabi_fadd+0x1a4>
   13cc2:	2800      	cmp	r0, #0
   13cc4:	d031      	beq.n	13d2a <__aeabi_fadd+0x166>
   13cc6:	2cff      	cmp	r4, #255	; 0xff
   13cc8:	d0b7      	beq.n	13c3a <__aeabi_fadd+0x76>
   13cca:	2080      	movs	r0, #128	; 0x80
   13ccc:	003e      	movs	r6, r7
   13cce:	04c0      	lsls	r0, r0, #19
   13cd0:	4306      	orrs	r6, r0
   13cd2:	46b4      	mov	ip, r6
   13cd4:	291b      	cmp	r1, #27
   13cd6:	dd00      	ble.n	13cda <__aeabi_fadd+0x116>
   13cd8:	e0aa      	b.n	13e30 <__aeabi_fadd+0x26c>
   13cda:	2620      	movs	r6, #32
   13cdc:	4660      	mov	r0, ip
   13cde:	40c8      	lsrs	r0, r1
   13ce0:	1a71      	subs	r1, r6, r1
   13ce2:	4666      	mov	r6, ip
   13ce4:	408e      	lsls	r6, r1
   13ce6:	0031      	movs	r1, r6
   13ce8:	1e4e      	subs	r6, r1, #1
   13cea:	41b1      	sbcs	r1, r6
   13cec:	4301      	orrs	r1, r0
   13cee:	185b      	adds	r3, r3, r1
   13cf0:	0159      	lsls	r1, r3, #5
   13cf2:	d5d3      	bpl.n	13c9c <__aeabi_fadd+0xd8>
   13cf4:	3401      	adds	r4, #1
   13cf6:	2cff      	cmp	r4, #255	; 0xff
   13cf8:	d100      	bne.n	13cfc <__aeabi_fadd+0x138>
   13cfa:	e087      	b.n	13e0c <__aeabi_fadd+0x248>
   13cfc:	2201      	movs	r2, #1
   13cfe:	4978      	ldr	r1, [pc, #480]	; (13ee0 <__aeabi_fadd+0x31c>)
   13d00:	401a      	ands	r2, r3
   13d02:	085b      	lsrs	r3, r3, #1
   13d04:	400b      	ands	r3, r1
   13d06:	4313      	orrs	r3, r2
   13d08:	e797      	b.n	13c3a <__aeabi_fadd+0x76>
   13d0a:	2c00      	cmp	r4, #0
   13d0c:	d000      	beq.n	13d10 <__aeabi_fadd+0x14c>
   13d0e:	e0a7      	b.n	13e60 <__aeabi_fadd+0x29c>
   13d10:	2b00      	cmp	r3, #0
   13d12:	d000      	beq.n	13d16 <__aeabi_fadd+0x152>
   13d14:	e0b6      	b.n	13e84 <__aeabi_fadd+0x2c0>
   13d16:	1e3b      	subs	r3, r7, #0
   13d18:	d162      	bne.n	13de0 <__aeabi_fadd+0x21c>
   13d1a:	2600      	movs	r6, #0
   13d1c:	2200      	movs	r2, #0
   13d1e:	0273      	lsls	r3, r6, #9
   13d20:	0a5b      	lsrs	r3, r3, #9
   13d22:	b2e4      	uxtb	r4, r4
   13d24:	e79a      	b.n	13c5c <__aeabi_fadd+0x98>
   13d26:	0014      	movs	r4, r2
   13d28:	e787      	b.n	13c3a <__aeabi_fadd+0x76>
   13d2a:	2f00      	cmp	r7, #0
   13d2c:	d04d      	beq.n	13dca <__aeabi_fadd+0x206>
   13d2e:	1e48      	subs	r0, r1, #1
   13d30:	2800      	cmp	r0, #0
   13d32:	d157      	bne.n	13de4 <__aeabi_fadd+0x220>
   13d34:	4463      	add	r3, ip
   13d36:	2401      	movs	r4, #1
   13d38:	015a      	lsls	r2, r3, #5
   13d3a:	d5af      	bpl.n	13c9c <__aeabi_fadd+0xd8>
   13d3c:	2402      	movs	r4, #2
   13d3e:	e7dd      	b.n	13cfc <__aeabi_fadd+0x138>
   13d40:	2a00      	cmp	r2, #0
   13d42:	d124      	bne.n	13d8e <__aeabi_fadd+0x1ca>
   13d44:	1c62      	adds	r2, r4, #1
   13d46:	b2d2      	uxtb	r2, r2
   13d48:	2a01      	cmp	r2, #1
   13d4a:	ddde      	ble.n	13d0a <__aeabi_fadd+0x146>
   13d4c:	1bde      	subs	r6, r3, r7
   13d4e:	0172      	lsls	r2, r6, #5
   13d50:	d535      	bpl.n	13dbe <__aeabi_fadd+0x1fa>
   13d52:	1afe      	subs	r6, r7, r3
   13d54:	000d      	movs	r5, r1
   13d56:	e75c      	b.n	13c12 <__aeabi_fadd+0x4e>
   13d58:	002a      	movs	r2, r5
   13d5a:	2300      	movs	r3, #0
   13d5c:	e77e      	b.n	13c5c <__aeabi_fadd+0x98>
   13d5e:	0033      	movs	r3, r6
   13d60:	4a60      	ldr	r2, [pc, #384]	; (13ee4 <__aeabi_fadd+0x320>)
   13d62:	1a24      	subs	r4, r4, r0
   13d64:	4013      	ands	r3, r2
   13d66:	e768      	b.n	13c3a <__aeabi_fadd+0x76>
   13d68:	2900      	cmp	r1, #0
   13d6a:	d163      	bne.n	13e34 <__aeabi_fadd+0x270>
   13d6c:	1c61      	adds	r1, r4, #1
   13d6e:	b2c8      	uxtb	r0, r1
   13d70:	2801      	cmp	r0, #1
   13d72:	dd4e      	ble.n	13e12 <__aeabi_fadd+0x24e>
   13d74:	29ff      	cmp	r1, #255	; 0xff
   13d76:	d049      	beq.n	13e0c <__aeabi_fadd+0x248>
   13d78:	4463      	add	r3, ip
   13d7a:	085b      	lsrs	r3, r3, #1
   13d7c:	000c      	movs	r4, r1
   13d7e:	e75c      	b.n	13c3a <__aeabi_fadd+0x76>
   13d80:	2aff      	cmp	r2, #255	; 0xff
   13d82:	d041      	beq.n	13e08 <__aeabi_fadd+0x244>
   13d84:	000a      	movs	r2, r1
   13d86:	e779      	b.n	13c7c <__aeabi_fadd+0xb8>
   13d88:	2201      	movs	r2, #1
   13d8a:	1a9b      	subs	r3, r3, r2
   13d8c:	e784      	b.n	13c98 <__aeabi_fadd+0xd4>
   13d8e:	2c00      	cmp	r4, #0
   13d90:	d01d      	beq.n	13dce <__aeabi_fadd+0x20a>
   13d92:	28ff      	cmp	r0, #255	; 0xff
   13d94:	d022      	beq.n	13ddc <__aeabi_fadd+0x218>
   13d96:	2480      	movs	r4, #128	; 0x80
   13d98:	04e4      	lsls	r4, r4, #19
   13d9a:	4252      	negs	r2, r2
   13d9c:	4323      	orrs	r3, r4
   13d9e:	2a1b      	cmp	r2, #27
   13da0:	dd00      	ble.n	13da4 <__aeabi_fadd+0x1e0>
   13da2:	e08a      	b.n	13eba <__aeabi_fadd+0x2f6>
   13da4:	001c      	movs	r4, r3
   13da6:	2520      	movs	r5, #32
   13da8:	40d4      	lsrs	r4, r2
   13daa:	1aaa      	subs	r2, r5, r2
   13dac:	4093      	lsls	r3, r2
   13dae:	1e5a      	subs	r2, r3, #1
   13db0:	4193      	sbcs	r3, r2
   13db2:	4323      	orrs	r3, r4
   13db4:	4662      	mov	r2, ip
   13db6:	0004      	movs	r4, r0
   13db8:	1ad3      	subs	r3, r2, r3
   13dba:	000d      	movs	r5, r1
   13dbc:	e725      	b.n	13c0a <__aeabi_fadd+0x46>
   13dbe:	2e00      	cmp	r6, #0
   13dc0:	d000      	beq.n	13dc4 <__aeabi_fadd+0x200>
   13dc2:	e726      	b.n	13c12 <__aeabi_fadd+0x4e>
   13dc4:	2200      	movs	r2, #0
   13dc6:	2400      	movs	r4, #0
   13dc8:	e7a9      	b.n	13d1e <__aeabi_fadd+0x15a>
   13dca:	000c      	movs	r4, r1
   13dcc:	e735      	b.n	13c3a <__aeabi_fadd+0x76>
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d04d      	beq.n	13e6e <__aeabi_fadd+0x2aa>
   13dd2:	43d2      	mvns	r2, r2
   13dd4:	2a00      	cmp	r2, #0
   13dd6:	d0ed      	beq.n	13db4 <__aeabi_fadd+0x1f0>
   13dd8:	28ff      	cmp	r0, #255	; 0xff
   13dda:	d1e0      	bne.n	13d9e <__aeabi_fadd+0x1da>
   13ddc:	4663      	mov	r3, ip
   13dde:	24ff      	movs	r4, #255	; 0xff
   13de0:	000d      	movs	r5, r1
   13de2:	e72a      	b.n	13c3a <__aeabi_fadd+0x76>
   13de4:	29ff      	cmp	r1, #255	; 0xff
   13de6:	d00f      	beq.n	13e08 <__aeabi_fadd+0x244>
   13de8:	0001      	movs	r1, r0
   13dea:	e773      	b.n	13cd4 <__aeabi_fadd+0x110>
   13dec:	2b00      	cmp	r3, #0
   13dee:	d061      	beq.n	13eb4 <__aeabi_fadd+0x2f0>
   13df0:	24ff      	movs	r4, #255	; 0xff
   13df2:	2f00      	cmp	r7, #0
   13df4:	d100      	bne.n	13df8 <__aeabi_fadd+0x234>
   13df6:	e720      	b.n	13c3a <__aeabi_fadd+0x76>
   13df8:	2280      	movs	r2, #128	; 0x80
   13dfa:	4641      	mov	r1, r8
   13dfc:	03d2      	lsls	r2, r2, #15
   13dfe:	4211      	tst	r1, r2
   13e00:	d002      	beq.n	13e08 <__aeabi_fadd+0x244>
   13e02:	4216      	tst	r6, r2
   13e04:	d100      	bne.n	13e08 <__aeabi_fadd+0x244>
   13e06:	003b      	movs	r3, r7
   13e08:	24ff      	movs	r4, #255	; 0xff
   13e0a:	e716      	b.n	13c3a <__aeabi_fadd+0x76>
   13e0c:	24ff      	movs	r4, #255	; 0xff
   13e0e:	2300      	movs	r3, #0
   13e10:	e724      	b.n	13c5c <__aeabi_fadd+0x98>
   13e12:	2c00      	cmp	r4, #0
   13e14:	d1ea      	bne.n	13dec <__aeabi_fadd+0x228>
   13e16:	2b00      	cmp	r3, #0
   13e18:	d058      	beq.n	13ecc <__aeabi_fadd+0x308>
   13e1a:	2f00      	cmp	r7, #0
   13e1c:	d100      	bne.n	13e20 <__aeabi_fadd+0x25c>
   13e1e:	e70c      	b.n	13c3a <__aeabi_fadd+0x76>
   13e20:	4463      	add	r3, ip
   13e22:	015a      	lsls	r2, r3, #5
   13e24:	d400      	bmi.n	13e28 <__aeabi_fadd+0x264>
   13e26:	e739      	b.n	13c9c <__aeabi_fadd+0xd8>
   13e28:	4a2e      	ldr	r2, [pc, #184]	; (13ee4 <__aeabi_fadd+0x320>)
   13e2a:	000c      	movs	r4, r1
   13e2c:	4013      	ands	r3, r2
   13e2e:	e704      	b.n	13c3a <__aeabi_fadd+0x76>
   13e30:	2101      	movs	r1, #1
   13e32:	e75c      	b.n	13cee <__aeabi_fadd+0x12a>
   13e34:	2c00      	cmp	r4, #0
   13e36:	d11e      	bne.n	13e76 <__aeabi_fadd+0x2b2>
   13e38:	2b00      	cmp	r3, #0
   13e3a:	d040      	beq.n	13ebe <__aeabi_fadd+0x2fa>
   13e3c:	43c9      	mvns	r1, r1
   13e3e:	2900      	cmp	r1, #0
   13e40:	d00b      	beq.n	13e5a <__aeabi_fadd+0x296>
   13e42:	28ff      	cmp	r0, #255	; 0xff
   13e44:	d036      	beq.n	13eb4 <__aeabi_fadd+0x2f0>
   13e46:	291b      	cmp	r1, #27
   13e48:	dc47      	bgt.n	13eda <__aeabi_fadd+0x316>
   13e4a:	001c      	movs	r4, r3
   13e4c:	2620      	movs	r6, #32
   13e4e:	40cc      	lsrs	r4, r1
   13e50:	1a71      	subs	r1, r6, r1
   13e52:	408b      	lsls	r3, r1
   13e54:	1e59      	subs	r1, r3, #1
   13e56:	418b      	sbcs	r3, r1
   13e58:	4323      	orrs	r3, r4
   13e5a:	4463      	add	r3, ip
   13e5c:	0004      	movs	r4, r0
   13e5e:	e747      	b.n	13cf0 <__aeabi_fadd+0x12c>
   13e60:	2b00      	cmp	r3, #0
   13e62:	d118      	bne.n	13e96 <__aeabi_fadd+0x2d2>
   13e64:	1e3b      	subs	r3, r7, #0
   13e66:	d02d      	beq.n	13ec4 <__aeabi_fadd+0x300>
   13e68:	000d      	movs	r5, r1
   13e6a:	24ff      	movs	r4, #255	; 0xff
   13e6c:	e6e5      	b.n	13c3a <__aeabi_fadd+0x76>
   13e6e:	003b      	movs	r3, r7
   13e70:	0004      	movs	r4, r0
   13e72:	000d      	movs	r5, r1
   13e74:	e6e1      	b.n	13c3a <__aeabi_fadd+0x76>
   13e76:	28ff      	cmp	r0, #255	; 0xff
   13e78:	d01c      	beq.n	13eb4 <__aeabi_fadd+0x2f0>
   13e7a:	2480      	movs	r4, #128	; 0x80
   13e7c:	04e4      	lsls	r4, r4, #19
   13e7e:	4249      	negs	r1, r1
   13e80:	4323      	orrs	r3, r4
   13e82:	e7e0      	b.n	13e46 <__aeabi_fadd+0x282>
   13e84:	2f00      	cmp	r7, #0
   13e86:	d100      	bne.n	13e8a <__aeabi_fadd+0x2c6>
   13e88:	e6d7      	b.n	13c3a <__aeabi_fadd+0x76>
   13e8a:	1bde      	subs	r6, r3, r7
   13e8c:	0172      	lsls	r2, r6, #5
   13e8e:	d51f      	bpl.n	13ed0 <__aeabi_fadd+0x30c>
   13e90:	1afb      	subs	r3, r7, r3
   13e92:	000d      	movs	r5, r1
   13e94:	e6d1      	b.n	13c3a <__aeabi_fadd+0x76>
   13e96:	24ff      	movs	r4, #255	; 0xff
   13e98:	2f00      	cmp	r7, #0
   13e9a:	d100      	bne.n	13e9e <__aeabi_fadd+0x2da>
   13e9c:	e6cd      	b.n	13c3a <__aeabi_fadd+0x76>
   13e9e:	2280      	movs	r2, #128	; 0x80
   13ea0:	4640      	mov	r0, r8
   13ea2:	03d2      	lsls	r2, r2, #15
   13ea4:	4210      	tst	r0, r2
   13ea6:	d0af      	beq.n	13e08 <__aeabi_fadd+0x244>
   13ea8:	4216      	tst	r6, r2
   13eaa:	d1ad      	bne.n	13e08 <__aeabi_fadd+0x244>
   13eac:	003b      	movs	r3, r7
   13eae:	000d      	movs	r5, r1
   13eb0:	24ff      	movs	r4, #255	; 0xff
   13eb2:	e6c2      	b.n	13c3a <__aeabi_fadd+0x76>
   13eb4:	4663      	mov	r3, ip
   13eb6:	24ff      	movs	r4, #255	; 0xff
   13eb8:	e6bf      	b.n	13c3a <__aeabi_fadd+0x76>
   13eba:	2301      	movs	r3, #1
   13ebc:	e77a      	b.n	13db4 <__aeabi_fadd+0x1f0>
   13ebe:	003b      	movs	r3, r7
   13ec0:	0004      	movs	r4, r0
   13ec2:	e6ba      	b.n	13c3a <__aeabi_fadd+0x76>
   13ec4:	2680      	movs	r6, #128	; 0x80
   13ec6:	2200      	movs	r2, #0
   13ec8:	03f6      	lsls	r6, r6, #15
   13eca:	e6f0      	b.n	13cae <__aeabi_fadd+0xea>
   13ecc:	003b      	movs	r3, r7
   13ece:	e6b4      	b.n	13c3a <__aeabi_fadd+0x76>
   13ed0:	1e33      	subs	r3, r6, #0
   13ed2:	d000      	beq.n	13ed6 <__aeabi_fadd+0x312>
   13ed4:	e6e2      	b.n	13c9c <__aeabi_fadd+0xd8>
   13ed6:	2200      	movs	r2, #0
   13ed8:	e721      	b.n	13d1e <__aeabi_fadd+0x15a>
   13eda:	2301      	movs	r3, #1
   13edc:	e7bd      	b.n	13e5a <__aeabi_fadd+0x296>
   13ede:	46c0      	nop			; (mov r8, r8)
   13ee0:	7dffffff 	.word	0x7dffffff
   13ee4:	fbffffff 	.word	0xfbffffff

00013ee8 <__aeabi_fdiv>:
   13ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13eea:	4657      	mov	r7, sl
   13eec:	464e      	mov	r6, r9
   13eee:	46de      	mov	lr, fp
   13ef0:	4645      	mov	r5, r8
   13ef2:	b5e0      	push	{r5, r6, r7, lr}
   13ef4:	0244      	lsls	r4, r0, #9
   13ef6:	0043      	lsls	r3, r0, #1
   13ef8:	0fc6      	lsrs	r6, r0, #31
   13efa:	b083      	sub	sp, #12
   13efc:	1c0f      	adds	r7, r1, #0
   13efe:	0a64      	lsrs	r4, r4, #9
   13f00:	0e1b      	lsrs	r3, r3, #24
   13f02:	46b2      	mov	sl, r6
   13f04:	d053      	beq.n	13fae <__aeabi_fdiv+0xc6>
   13f06:	2bff      	cmp	r3, #255	; 0xff
   13f08:	d027      	beq.n	13f5a <__aeabi_fdiv+0x72>
   13f0a:	2280      	movs	r2, #128	; 0x80
   13f0c:	00e4      	lsls	r4, r4, #3
   13f0e:	04d2      	lsls	r2, r2, #19
   13f10:	4314      	orrs	r4, r2
   13f12:	227f      	movs	r2, #127	; 0x7f
   13f14:	4252      	negs	r2, r2
   13f16:	4690      	mov	r8, r2
   13f18:	4498      	add	r8, r3
   13f1a:	2300      	movs	r3, #0
   13f1c:	4699      	mov	r9, r3
   13f1e:	469b      	mov	fp, r3
   13f20:	027d      	lsls	r5, r7, #9
   13f22:	0078      	lsls	r0, r7, #1
   13f24:	0ffb      	lsrs	r3, r7, #31
   13f26:	0a6d      	lsrs	r5, r5, #9
   13f28:	0e00      	lsrs	r0, r0, #24
   13f2a:	9300      	str	r3, [sp, #0]
   13f2c:	d024      	beq.n	13f78 <__aeabi_fdiv+0x90>
   13f2e:	28ff      	cmp	r0, #255	; 0xff
   13f30:	d046      	beq.n	13fc0 <__aeabi_fdiv+0xd8>
   13f32:	2380      	movs	r3, #128	; 0x80
   13f34:	2100      	movs	r1, #0
   13f36:	00ed      	lsls	r5, r5, #3
   13f38:	04db      	lsls	r3, r3, #19
   13f3a:	431d      	orrs	r5, r3
   13f3c:	387f      	subs	r0, #127	; 0x7f
   13f3e:	4647      	mov	r7, r8
   13f40:	1a38      	subs	r0, r7, r0
   13f42:	464f      	mov	r7, r9
   13f44:	430f      	orrs	r7, r1
   13f46:	00bf      	lsls	r7, r7, #2
   13f48:	46b9      	mov	r9, r7
   13f4a:	0033      	movs	r3, r6
   13f4c:	9a00      	ldr	r2, [sp, #0]
   13f4e:	4f87      	ldr	r7, [pc, #540]	; (1416c <__aeabi_fdiv+0x284>)
   13f50:	4053      	eors	r3, r2
   13f52:	464a      	mov	r2, r9
   13f54:	58ba      	ldr	r2, [r7, r2]
   13f56:	9301      	str	r3, [sp, #4]
   13f58:	4697      	mov	pc, r2
   13f5a:	2c00      	cmp	r4, #0
   13f5c:	d14e      	bne.n	13ffc <__aeabi_fdiv+0x114>
   13f5e:	2308      	movs	r3, #8
   13f60:	4699      	mov	r9, r3
   13f62:	33f7      	adds	r3, #247	; 0xf7
   13f64:	4698      	mov	r8, r3
   13f66:	3bfd      	subs	r3, #253	; 0xfd
   13f68:	469b      	mov	fp, r3
   13f6a:	027d      	lsls	r5, r7, #9
   13f6c:	0078      	lsls	r0, r7, #1
   13f6e:	0ffb      	lsrs	r3, r7, #31
   13f70:	0a6d      	lsrs	r5, r5, #9
   13f72:	0e00      	lsrs	r0, r0, #24
   13f74:	9300      	str	r3, [sp, #0]
   13f76:	d1da      	bne.n	13f2e <__aeabi_fdiv+0x46>
   13f78:	2d00      	cmp	r5, #0
   13f7a:	d126      	bne.n	13fca <__aeabi_fdiv+0xe2>
   13f7c:	2000      	movs	r0, #0
   13f7e:	2101      	movs	r1, #1
   13f80:	0033      	movs	r3, r6
   13f82:	9a00      	ldr	r2, [sp, #0]
   13f84:	4f7a      	ldr	r7, [pc, #488]	; (14170 <__aeabi_fdiv+0x288>)
   13f86:	4053      	eors	r3, r2
   13f88:	4642      	mov	r2, r8
   13f8a:	1a10      	subs	r0, r2, r0
   13f8c:	464a      	mov	r2, r9
   13f8e:	430a      	orrs	r2, r1
   13f90:	0092      	lsls	r2, r2, #2
   13f92:	58ba      	ldr	r2, [r7, r2]
   13f94:	001d      	movs	r5, r3
   13f96:	4697      	mov	pc, r2
   13f98:	9b00      	ldr	r3, [sp, #0]
   13f9a:	002c      	movs	r4, r5
   13f9c:	469a      	mov	sl, r3
   13f9e:	468b      	mov	fp, r1
   13fa0:	465b      	mov	r3, fp
   13fa2:	2b02      	cmp	r3, #2
   13fa4:	d131      	bne.n	1400a <__aeabi_fdiv+0x122>
   13fa6:	4653      	mov	r3, sl
   13fa8:	21ff      	movs	r1, #255	; 0xff
   13faa:	2400      	movs	r4, #0
   13fac:	e038      	b.n	14020 <__aeabi_fdiv+0x138>
   13fae:	2c00      	cmp	r4, #0
   13fb0:	d117      	bne.n	13fe2 <__aeabi_fdiv+0xfa>
   13fb2:	2304      	movs	r3, #4
   13fb4:	4699      	mov	r9, r3
   13fb6:	2300      	movs	r3, #0
   13fb8:	4698      	mov	r8, r3
   13fba:	3301      	adds	r3, #1
   13fbc:	469b      	mov	fp, r3
   13fbe:	e7af      	b.n	13f20 <__aeabi_fdiv+0x38>
   13fc0:	20ff      	movs	r0, #255	; 0xff
   13fc2:	2d00      	cmp	r5, #0
   13fc4:	d10b      	bne.n	13fde <__aeabi_fdiv+0xf6>
   13fc6:	2102      	movs	r1, #2
   13fc8:	e7da      	b.n	13f80 <__aeabi_fdiv+0x98>
   13fca:	0028      	movs	r0, r5
   13fcc:	f002 fb52 	bl	16674 <__clzsi2>
   13fd0:	1f43      	subs	r3, r0, #5
   13fd2:	409d      	lsls	r5, r3
   13fd4:	2376      	movs	r3, #118	; 0x76
   13fd6:	425b      	negs	r3, r3
   13fd8:	1a18      	subs	r0, r3, r0
   13fda:	2100      	movs	r1, #0
   13fdc:	e7af      	b.n	13f3e <__aeabi_fdiv+0x56>
   13fde:	2103      	movs	r1, #3
   13fe0:	e7ad      	b.n	13f3e <__aeabi_fdiv+0x56>
   13fe2:	0020      	movs	r0, r4
   13fe4:	f002 fb46 	bl	16674 <__clzsi2>
   13fe8:	1f43      	subs	r3, r0, #5
   13fea:	409c      	lsls	r4, r3
   13fec:	2376      	movs	r3, #118	; 0x76
   13fee:	425b      	negs	r3, r3
   13ff0:	1a1b      	subs	r3, r3, r0
   13ff2:	4698      	mov	r8, r3
   13ff4:	2300      	movs	r3, #0
   13ff6:	4699      	mov	r9, r3
   13ff8:	469b      	mov	fp, r3
   13ffa:	e791      	b.n	13f20 <__aeabi_fdiv+0x38>
   13ffc:	230c      	movs	r3, #12
   13ffe:	4699      	mov	r9, r3
   14000:	33f3      	adds	r3, #243	; 0xf3
   14002:	4698      	mov	r8, r3
   14004:	3bfc      	subs	r3, #252	; 0xfc
   14006:	469b      	mov	fp, r3
   14008:	e78a      	b.n	13f20 <__aeabi_fdiv+0x38>
   1400a:	2b03      	cmp	r3, #3
   1400c:	d100      	bne.n	14010 <__aeabi_fdiv+0x128>
   1400e:	e0a5      	b.n	1415c <__aeabi_fdiv+0x274>
   14010:	4655      	mov	r5, sl
   14012:	2b01      	cmp	r3, #1
   14014:	d000      	beq.n	14018 <__aeabi_fdiv+0x130>
   14016:	e081      	b.n	1411c <__aeabi_fdiv+0x234>
   14018:	2301      	movs	r3, #1
   1401a:	2100      	movs	r1, #0
   1401c:	2400      	movs	r4, #0
   1401e:	402b      	ands	r3, r5
   14020:	0264      	lsls	r4, r4, #9
   14022:	05c9      	lsls	r1, r1, #23
   14024:	0a60      	lsrs	r0, r4, #9
   14026:	07db      	lsls	r3, r3, #31
   14028:	4308      	orrs	r0, r1
   1402a:	4318      	orrs	r0, r3
   1402c:	b003      	add	sp, #12
   1402e:	bc3c      	pop	{r2, r3, r4, r5}
   14030:	4690      	mov	r8, r2
   14032:	4699      	mov	r9, r3
   14034:	46a2      	mov	sl, r4
   14036:	46ab      	mov	fp, r5
   14038:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1403a:	2480      	movs	r4, #128	; 0x80
   1403c:	2300      	movs	r3, #0
   1403e:	03e4      	lsls	r4, r4, #15
   14040:	21ff      	movs	r1, #255	; 0xff
   14042:	e7ed      	b.n	14020 <__aeabi_fdiv+0x138>
   14044:	21ff      	movs	r1, #255	; 0xff
   14046:	2400      	movs	r4, #0
   14048:	e7ea      	b.n	14020 <__aeabi_fdiv+0x138>
   1404a:	2301      	movs	r3, #1
   1404c:	1a59      	subs	r1, r3, r1
   1404e:	291b      	cmp	r1, #27
   14050:	dd66      	ble.n	14120 <__aeabi_fdiv+0x238>
   14052:	9a01      	ldr	r2, [sp, #4]
   14054:	4013      	ands	r3, r2
   14056:	2100      	movs	r1, #0
   14058:	2400      	movs	r4, #0
   1405a:	e7e1      	b.n	14020 <__aeabi_fdiv+0x138>
   1405c:	2380      	movs	r3, #128	; 0x80
   1405e:	03db      	lsls	r3, r3, #15
   14060:	421c      	tst	r4, r3
   14062:	d038      	beq.n	140d6 <__aeabi_fdiv+0x1ee>
   14064:	421d      	tst	r5, r3
   14066:	d051      	beq.n	1410c <__aeabi_fdiv+0x224>
   14068:	431c      	orrs	r4, r3
   1406a:	0264      	lsls	r4, r4, #9
   1406c:	0a64      	lsrs	r4, r4, #9
   1406e:	0033      	movs	r3, r6
   14070:	21ff      	movs	r1, #255	; 0xff
   14072:	e7d5      	b.n	14020 <__aeabi_fdiv+0x138>
   14074:	0163      	lsls	r3, r4, #5
   14076:	016c      	lsls	r4, r5, #5
   14078:	42a3      	cmp	r3, r4
   1407a:	d23b      	bcs.n	140f4 <__aeabi_fdiv+0x20c>
   1407c:	261b      	movs	r6, #27
   1407e:	2100      	movs	r1, #0
   14080:	3801      	subs	r0, #1
   14082:	2501      	movs	r5, #1
   14084:	001f      	movs	r7, r3
   14086:	0049      	lsls	r1, r1, #1
   14088:	005b      	lsls	r3, r3, #1
   1408a:	2f00      	cmp	r7, #0
   1408c:	db01      	blt.n	14092 <__aeabi_fdiv+0x1aa>
   1408e:	429c      	cmp	r4, r3
   14090:	d801      	bhi.n	14096 <__aeabi_fdiv+0x1ae>
   14092:	1b1b      	subs	r3, r3, r4
   14094:	4329      	orrs	r1, r5
   14096:	3e01      	subs	r6, #1
   14098:	2e00      	cmp	r6, #0
   1409a:	d1f3      	bne.n	14084 <__aeabi_fdiv+0x19c>
   1409c:	001c      	movs	r4, r3
   1409e:	1e63      	subs	r3, r4, #1
   140a0:	419c      	sbcs	r4, r3
   140a2:	430c      	orrs	r4, r1
   140a4:	0001      	movs	r1, r0
   140a6:	317f      	adds	r1, #127	; 0x7f
   140a8:	2900      	cmp	r1, #0
   140aa:	ddce      	ble.n	1404a <__aeabi_fdiv+0x162>
   140ac:	0763      	lsls	r3, r4, #29
   140ae:	d004      	beq.n	140ba <__aeabi_fdiv+0x1d2>
   140b0:	230f      	movs	r3, #15
   140b2:	4023      	ands	r3, r4
   140b4:	2b04      	cmp	r3, #4
   140b6:	d000      	beq.n	140ba <__aeabi_fdiv+0x1d2>
   140b8:	3404      	adds	r4, #4
   140ba:	0123      	lsls	r3, r4, #4
   140bc:	d503      	bpl.n	140c6 <__aeabi_fdiv+0x1de>
   140be:	0001      	movs	r1, r0
   140c0:	4b2c      	ldr	r3, [pc, #176]	; (14174 <__aeabi_fdiv+0x28c>)
   140c2:	3180      	adds	r1, #128	; 0x80
   140c4:	401c      	ands	r4, r3
   140c6:	29fe      	cmp	r1, #254	; 0xfe
   140c8:	dd0d      	ble.n	140e6 <__aeabi_fdiv+0x1fe>
   140ca:	2301      	movs	r3, #1
   140cc:	9a01      	ldr	r2, [sp, #4]
   140ce:	21ff      	movs	r1, #255	; 0xff
   140d0:	4013      	ands	r3, r2
   140d2:	2400      	movs	r4, #0
   140d4:	e7a4      	b.n	14020 <__aeabi_fdiv+0x138>
   140d6:	2380      	movs	r3, #128	; 0x80
   140d8:	03db      	lsls	r3, r3, #15
   140da:	431c      	orrs	r4, r3
   140dc:	0264      	lsls	r4, r4, #9
   140de:	0a64      	lsrs	r4, r4, #9
   140e0:	0033      	movs	r3, r6
   140e2:	21ff      	movs	r1, #255	; 0xff
   140e4:	e79c      	b.n	14020 <__aeabi_fdiv+0x138>
   140e6:	2301      	movs	r3, #1
   140e8:	9a01      	ldr	r2, [sp, #4]
   140ea:	01a4      	lsls	r4, r4, #6
   140ec:	0a64      	lsrs	r4, r4, #9
   140ee:	b2c9      	uxtb	r1, r1
   140f0:	4013      	ands	r3, r2
   140f2:	e795      	b.n	14020 <__aeabi_fdiv+0x138>
   140f4:	1b1b      	subs	r3, r3, r4
   140f6:	261a      	movs	r6, #26
   140f8:	2101      	movs	r1, #1
   140fa:	e7c2      	b.n	14082 <__aeabi_fdiv+0x19a>
   140fc:	9b00      	ldr	r3, [sp, #0]
   140fe:	468b      	mov	fp, r1
   14100:	469a      	mov	sl, r3
   14102:	2400      	movs	r4, #0
   14104:	e74c      	b.n	13fa0 <__aeabi_fdiv+0xb8>
   14106:	0263      	lsls	r3, r4, #9
   14108:	d5e5      	bpl.n	140d6 <__aeabi_fdiv+0x1ee>
   1410a:	2500      	movs	r5, #0
   1410c:	2480      	movs	r4, #128	; 0x80
   1410e:	03e4      	lsls	r4, r4, #15
   14110:	432c      	orrs	r4, r5
   14112:	0264      	lsls	r4, r4, #9
   14114:	0a64      	lsrs	r4, r4, #9
   14116:	9b00      	ldr	r3, [sp, #0]
   14118:	21ff      	movs	r1, #255	; 0xff
   1411a:	e781      	b.n	14020 <__aeabi_fdiv+0x138>
   1411c:	9501      	str	r5, [sp, #4]
   1411e:	e7c1      	b.n	140a4 <__aeabi_fdiv+0x1bc>
   14120:	0023      	movs	r3, r4
   14122:	2020      	movs	r0, #32
   14124:	40cb      	lsrs	r3, r1
   14126:	1a41      	subs	r1, r0, r1
   14128:	408c      	lsls	r4, r1
   1412a:	1e61      	subs	r1, r4, #1
   1412c:	418c      	sbcs	r4, r1
   1412e:	431c      	orrs	r4, r3
   14130:	0763      	lsls	r3, r4, #29
   14132:	d004      	beq.n	1413e <__aeabi_fdiv+0x256>
   14134:	230f      	movs	r3, #15
   14136:	4023      	ands	r3, r4
   14138:	2b04      	cmp	r3, #4
   1413a:	d000      	beq.n	1413e <__aeabi_fdiv+0x256>
   1413c:	3404      	adds	r4, #4
   1413e:	0163      	lsls	r3, r4, #5
   14140:	d505      	bpl.n	1414e <__aeabi_fdiv+0x266>
   14142:	2301      	movs	r3, #1
   14144:	9a01      	ldr	r2, [sp, #4]
   14146:	2101      	movs	r1, #1
   14148:	4013      	ands	r3, r2
   1414a:	2400      	movs	r4, #0
   1414c:	e768      	b.n	14020 <__aeabi_fdiv+0x138>
   1414e:	2301      	movs	r3, #1
   14150:	9a01      	ldr	r2, [sp, #4]
   14152:	01a4      	lsls	r4, r4, #6
   14154:	0a64      	lsrs	r4, r4, #9
   14156:	4013      	ands	r3, r2
   14158:	2100      	movs	r1, #0
   1415a:	e761      	b.n	14020 <__aeabi_fdiv+0x138>
   1415c:	2380      	movs	r3, #128	; 0x80
   1415e:	03db      	lsls	r3, r3, #15
   14160:	431c      	orrs	r4, r3
   14162:	0264      	lsls	r4, r4, #9
   14164:	0a64      	lsrs	r4, r4, #9
   14166:	4653      	mov	r3, sl
   14168:	21ff      	movs	r1, #255	; 0xff
   1416a:	e759      	b.n	14020 <__aeabi_fdiv+0x138>
   1416c:	00018b74 	.word	0x00018b74
   14170:	00018bb4 	.word	0x00018bb4
   14174:	f7ffffff 	.word	0xf7ffffff

00014178 <__eqsf2>:
   14178:	b570      	push	{r4, r5, r6, lr}
   1417a:	0042      	lsls	r2, r0, #1
   1417c:	0245      	lsls	r5, r0, #9
   1417e:	024e      	lsls	r6, r1, #9
   14180:	004c      	lsls	r4, r1, #1
   14182:	0fc3      	lsrs	r3, r0, #31
   14184:	0a6d      	lsrs	r5, r5, #9
   14186:	0e12      	lsrs	r2, r2, #24
   14188:	0a76      	lsrs	r6, r6, #9
   1418a:	0e24      	lsrs	r4, r4, #24
   1418c:	0fc9      	lsrs	r1, r1, #31
   1418e:	2001      	movs	r0, #1
   14190:	2aff      	cmp	r2, #255	; 0xff
   14192:	d006      	beq.n	141a2 <__eqsf2+0x2a>
   14194:	2cff      	cmp	r4, #255	; 0xff
   14196:	d003      	beq.n	141a0 <__eqsf2+0x28>
   14198:	42a2      	cmp	r2, r4
   1419a:	d101      	bne.n	141a0 <__eqsf2+0x28>
   1419c:	42b5      	cmp	r5, r6
   1419e:	d006      	beq.n	141ae <__eqsf2+0x36>
   141a0:	bd70      	pop	{r4, r5, r6, pc}
   141a2:	2d00      	cmp	r5, #0
   141a4:	d1fc      	bne.n	141a0 <__eqsf2+0x28>
   141a6:	2cff      	cmp	r4, #255	; 0xff
   141a8:	d1fa      	bne.n	141a0 <__eqsf2+0x28>
   141aa:	2e00      	cmp	r6, #0
   141ac:	d1f8      	bne.n	141a0 <__eqsf2+0x28>
   141ae:	428b      	cmp	r3, r1
   141b0:	d006      	beq.n	141c0 <__eqsf2+0x48>
   141b2:	2001      	movs	r0, #1
   141b4:	2a00      	cmp	r2, #0
   141b6:	d1f3      	bne.n	141a0 <__eqsf2+0x28>
   141b8:	0028      	movs	r0, r5
   141ba:	1e45      	subs	r5, r0, #1
   141bc:	41a8      	sbcs	r0, r5
   141be:	e7ef      	b.n	141a0 <__eqsf2+0x28>
   141c0:	2000      	movs	r0, #0
   141c2:	e7ed      	b.n	141a0 <__eqsf2+0x28>

000141c4 <__gesf2>:
   141c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141c6:	0042      	lsls	r2, r0, #1
   141c8:	0245      	lsls	r5, r0, #9
   141ca:	024c      	lsls	r4, r1, #9
   141cc:	0fc3      	lsrs	r3, r0, #31
   141ce:	0048      	lsls	r0, r1, #1
   141d0:	0a6d      	lsrs	r5, r5, #9
   141d2:	0e12      	lsrs	r2, r2, #24
   141d4:	0a64      	lsrs	r4, r4, #9
   141d6:	0e00      	lsrs	r0, r0, #24
   141d8:	0fc9      	lsrs	r1, r1, #31
   141da:	2aff      	cmp	r2, #255	; 0xff
   141dc:	d01e      	beq.n	1421c <__gesf2+0x58>
   141de:	28ff      	cmp	r0, #255	; 0xff
   141e0:	d021      	beq.n	14226 <__gesf2+0x62>
   141e2:	2a00      	cmp	r2, #0
   141e4:	d10a      	bne.n	141fc <__gesf2+0x38>
   141e6:	426e      	negs	r6, r5
   141e8:	416e      	adcs	r6, r5
   141ea:	b2f6      	uxtb	r6, r6
   141ec:	2800      	cmp	r0, #0
   141ee:	d10f      	bne.n	14210 <__gesf2+0x4c>
   141f0:	2c00      	cmp	r4, #0
   141f2:	d10d      	bne.n	14210 <__gesf2+0x4c>
   141f4:	2000      	movs	r0, #0
   141f6:	2d00      	cmp	r5, #0
   141f8:	d009      	beq.n	1420e <__gesf2+0x4a>
   141fa:	e005      	b.n	14208 <__gesf2+0x44>
   141fc:	2800      	cmp	r0, #0
   141fe:	d101      	bne.n	14204 <__gesf2+0x40>
   14200:	2c00      	cmp	r4, #0
   14202:	d001      	beq.n	14208 <__gesf2+0x44>
   14204:	428b      	cmp	r3, r1
   14206:	d011      	beq.n	1422c <__gesf2+0x68>
   14208:	2101      	movs	r1, #1
   1420a:	4258      	negs	r0, r3
   1420c:	4308      	orrs	r0, r1
   1420e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14210:	2e00      	cmp	r6, #0
   14212:	d0f7      	beq.n	14204 <__gesf2+0x40>
   14214:	2001      	movs	r0, #1
   14216:	3901      	subs	r1, #1
   14218:	4308      	orrs	r0, r1
   1421a:	e7f8      	b.n	1420e <__gesf2+0x4a>
   1421c:	2d00      	cmp	r5, #0
   1421e:	d0de      	beq.n	141de <__gesf2+0x1a>
   14220:	2002      	movs	r0, #2
   14222:	4240      	negs	r0, r0
   14224:	e7f3      	b.n	1420e <__gesf2+0x4a>
   14226:	2c00      	cmp	r4, #0
   14228:	d0db      	beq.n	141e2 <__gesf2+0x1e>
   1422a:	e7f9      	b.n	14220 <__gesf2+0x5c>
   1422c:	4282      	cmp	r2, r0
   1422e:	dceb      	bgt.n	14208 <__gesf2+0x44>
   14230:	db04      	blt.n	1423c <__gesf2+0x78>
   14232:	42a5      	cmp	r5, r4
   14234:	d8e8      	bhi.n	14208 <__gesf2+0x44>
   14236:	2000      	movs	r0, #0
   14238:	42a5      	cmp	r5, r4
   1423a:	d2e8      	bcs.n	1420e <__gesf2+0x4a>
   1423c:	2101      	movs	r1, #1
   1423e:	1e58      	subs	r0, r3, #1
   14240:	4308      	orrs	r0, r1
   14242:	e7e4      	b.n	1420e <__gesf2+0x4a>

00014244 <__lesf2>:
   14244:	b5f0      	push	{r4, r5, r6, r7, lr}
   14246:	0042      	lsls	r2, r0, #1
   14248:	024d      	lsls	r5, r1, #9
   1424a:	004c      	lsls	r4, r1, #1
   1424c:	0246      	lsls	r6, r0, #9
   1424e:	0a76      	lsrs	r6, r6, #9
   14250:	0e12      	lsrs	r2, r2, #24
   14252:	0fc3      	lsrs	r3, r0, #31
   14254:	0a6d      	lsrs	r5, r5, #9
   14256:	0e24      	lsrs	r4, r4, #24
   14258:	0fc9      	lsrs	r1, r1, #31
   1425a:	2aff      	cmp	r2, #255	; 0xff
   1425c:	d016      	beq.n	1428c <__lesf2+0x48>
   1425e:	2cff      	cmp	r4, #255	; 0xff
   14260:	d018      	beq.n	14294 <__lesf2+0x50>
   14262:	2a00      	cmp	r2, #0
   14264:	d10a      	bne.n	1427c <__lesf2+0x38>
   14266:	4270      	negs	r0, r6
   14268:	4170      	adcs	r0, r6
   1426a:	b2c0      	uxtb	r0, r0
   1426c:	2c00      	cmp	r4, #0
   1426e:	d015      	beq.n	1429c <__lesf2+0x58>
   14270:	2800      	cmp	r0, #0
   14272:	d005      	beq.n	14280 <__lesf2+0x3c>
   14274:	2001      	movs	r0, #1
   14276:	3901      	subs	r1, #1
   14278:	4308      	orrs	r0, r1
   1427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1427c:	2c00      	cmp	r4, #0
   1427e:	d013      	beq.n	142a8 <__lesf2+0x64>
   14280:	4299      	cmp	r1, r3
   14282:	d014      	beq.n	142ae <__lesf2+0x6a>
   14284:	2001      	movs	r0, #1
   14286:	425b      	negs	r3, r3
   14288:	4318      	orrs	r0, r3
   1428a:	e7f6      	b.n	1427a <__lesf2+0x36>
   1428c:	2002      	movs	r0, #2
   1428e:	2e00      	cmp	r6, #0
   14290:	d1f3      	bne.n	1427a <__lesf2+0x36>
   14292:	e7e4      	b.n	1425e <__lesf2+0x1a>
   14294:	2002      	movs	r0, #2
   14296:	2d00      	cmp	r5, #0
   14298:	d1ef      	bne.n	1427a <__lesf2+0x36>
   1429a:	e7e2      	b.n	14262 <__lesf2+0x1e>
   1429c:	2d00      	cmp	r5, #0
   1429e:	d1e7      	bne.n	14270 <__lesf2+0x2c>
   142a0:	2000      	movs	r0, #0
   142a2:	2e00      	cmp	r6, #0
   142a4:	d0e9      	beq.n	1427a <__lesf2+0x36>
   142a6:	e7ed      	b.n	14284 <__lesf2+0x40>
   142a8:	2d00      	cmp	r5, #0
   142aa:	d1e9      	bne.n	14280 <__lesf2+0x3c>
   142ac:	e7ea      	b.n	14284 <__lesf2+0x40>
   142ae:	42a2      	cmp	r2, r4
   142b0:	dc06      	bgt.n	142c0 <__lesf2+0x7c>
   142b2:	dbdf      	blt.n	14274 <__lesf2+0x30>
   142b4:	42ae      	cmp	r6, r5
   142b6:	d803      	bhi.n	142c0 <__lesf2+0x7c>
   142b8:	2000      	movs	r0, #0
   142ba:	42ae      	cmp	r6, r5
   142bc:	d3da      	bcc.n	14274 <__lesf2+0x30>
   142be:	e7dc      	b.n	1427a <__lesf2+0x36>
   142c0:	2001      	movs	r0, #1
   142c2:	4249      	negs	r1, r1
   142c4:	4308      	orrs	r0, r1
   142c6:	e7d8      	b.n	1427a <__lesf2+0x36>

000142c8 <__aeabi_fmul>:
   142c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142ca:	4657      	mov	r7, sl
   142cc:	464e      	mov	r6, r9
   142ce:	4645      	mov	r5, r8
   142d0:	46de      	mov	lr, fp
   142d2:	b5e0      	push	{r5, r6, r7, lr}
   142d4:	0247      	lsls	r7, r0, #9
   142d6:	0046      	lsls	r6, r0, #1
   142d8:	4688      	mov	r8, r1
   142da:	0a7f      	lsrs	r7, r7, #9
   142dc:	0e36      	lsrs	r6, r6, #24
   142de:	0fc4      	lsrs	r4, r0, #31
   142e0:	2e00      	cmp	r6, #0
   142e2:	d047      	beq.n	14374 <__aeabi_fmul+0xac>
   142e4:	2eff      	cmp	r6, #255	; 0xff
   142e6:	d024      	beq.n	14332 <__aeabi_fmul+0x6a>
   142e8:	00fb      	lsls	r3, r7, #3
   142ea:	2780      	movs	r7, #128	; 0x80
   142ec:	04ff      	lsls	r7, r7, #19
   142ee:	431f      	orrs	r7, r3
   142f0:	2300      	movs	r3, #0
   142f2:	4699      	mov	r9, r3
   142f4:	469a      	mov	sl, r3
   142f6:	3e7f      	subs	r6, #127	; 0x7f
   142f8:	4643      	mov	r3, r8
   142fa:	025d      	lsls	r5, r3, #9
   142fc:	0058      	lsls	r0, r3, #1
   142fe:	0fdb      	lsrs	r3, r3, #31
   14300:	0a6d      	lsrs	r5, r5, #9
   14302:	0e00      	lsrs	r0, r0, #24
   14304:	4698      	mov	r8, r3
   14306:	d043      	beq.n	14390 <__aeabi_fmul+0xc8>
   14308:	28ff      	cmp	r0, #255	; 0xff
   1430a:	d03b      	beq.n	14384 <__aeabi_fmul+0xbc>
   1430c:	00eb      	lsls	r3, r5, #3
   1430e:	2580      	movs	r5, #128	; 0x80
   14310:	2200      	movs	r2, #0
   14312:	04ed      	lsls	r5, r5, #19
   14314:	431d      	orrs	r5, r3
   14316:	387f      	subs	r0, #127	; 0x7f
   14318:	1836      	adds	r6, r6, r0
   1431a:	1c73      	adds	r3, r6, #1
   1431c:	4641      	mov	r1, r8
   1431e:	469b      	mov	fp, r3
   14320:	464b      	mov	r3, r9
   14322:	4061      	eors	r1, r4
   14324:	4313      	orrs	r3, r2
   14326:	2b0f      	cmp	r3, #15
   14328:	d864      	bhi.n	143f4 <__aeabi_fmul+0x12c>
   1432a:	4875      	ldr	r0, [pc, #468]	; (14500 <__aeabi_fmul+0x238>)
   1432c:	009b      	lsls	r3, r3, #2
   1432e:	58c3      	ldr	r3, [r0, r3]
   14330:	469f      	mov	pc, r3
   14332:	2f00      	cmp	r7, #0
   14334:	d142      	bne.n	143bc <__aeabi_fmul+0xf4>
   14336:	2308      	movs	r3, #8
   14338:	4699      	mov	r9, r3
   1433a:	3b06      	subs	r3, #6
   1433c:	26ff      	movs	r6, #255	; 0xff
   1433e:	469a      	mov	sl, r3
   14340:	e7da      	b.n	142f8 <__aeabi_fmul+0x30>
   14342:	4641      	mov	r1, r8
   14344:	2a02      	cmp	r2, #2
   14346:	d028      	beq.n	1439a <__aeabi_fmul+0xd2>
   14348:	2a03      	cmp	r2, #3
   1434a:	d100      	bne.n	1434e <__aeabi_fmul+0x86>
   1434c:	e0ce      	b.n	144ec <__aeabi_fmul+0x224>
   1434e:	2a01      	cmp	r2, #1
   14350:	d000      	beq.n	14354 <__aeabi_fmul+0x8c>
   14352:	e0ac      	b.n	144ae <__aeabi_fmul+0x1e6>
   14354:	4011      	ands	r1, r2
   14356:	2000      	movs	r0, #0
   14358:	2200      	movs	r2, #0
   1435a:	b2cc      	uxtb	r4, r1
   1435c:	0240      	lsls	r0, r0, #9
   1435e:	05d2      	lsls	r2, r2, #23
   14360:	0a40      	lsrs	r0, r0, #9
   14362:	07e4      	lsls	r4, r4, #31
   14364:	4310      	orrs	r0, r2
   14366:	4320      	orrs	r0, r4
   14368:	bc3c      	pop	{r2, r3, r4, r5}
   1436a:	4690      	mov	r8, r2
   1436c:	4699      	mov	r9, r3
   1436e:	46a2      	mov	sl, r4
   14370:	46ab      	mov	fp, r5
   14372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14374:	2f00      	cmp	r7, #0
   14376:	d115      	bne.n	143a4 <__aeabi_fmul+0xdc>
   14378:	2304      	movs	r3, #4
   1437a:	4699      	mov	r9, r3
   1437c:	3b03      	subs	r3, #3
   1437e:	2600      	movs	r6, #0
   14380:	469a      	mov	sl, r3
   14382:	e7b9      	b.n	142f8 <__aeabi_fmul+0x30>
   14384:	20ff      	movs	r0, #255	; 0xff
   14386:	2202      	movs	r2, #2
   14388:	2d00      	cmp	r5, #0
   1438a:	d0c5      	beq.n	14318 <__aeabi_fmul+0x50>
   1438c:	2203      	movs	r2, #3
   1438e:	e7c3      	b.n	14318 <__aeabi_fmul+0x50>
   14390:	2d00      	cmp	r5, #0
   14392:	d119      	bne.n	143c8 <__aeabi_fmul+0x100>
   14394:	2000      	movs	r0, #0
   14396:	2201      	movs	r2, #1
   14398:	e7be      	b.n	14318 <__aeabi_fmul+0x50>
   1439a:	2401      	movs	r4, #1
   1439c:	22ff      	movs	r2, #255	; 0xff
   1439e:	400c      	ands	r4, r1
   143a0:	2000      	movs	r0, #0
   143a2:	e7db      	b.n	1435c <__aeabi_fmul+0x94>
   143a4:	0038      	movs	r0, r7
   143a6:	f002 f965 	bl	16674 <__clzsi2>
   143aa:	2676      	movs	r6, #118	; 0x76
   143ac:	1f43      	subs	r3, r0, #5
   143ae:	409f      	lsls	r7, r3
   143b0:	2300      	movs	r3, #0
   143b2:	4276      	negs	r6, r6
   143b4:	1a36      	subs	r6, r6, r0
   143b6:	4699      	mov	r9, r3
   143b8:	469a      	mov	sl, r3
   143ba:	e79d      	b.n	142f8 <__aeabi_fmul+0x30>
   143bc:	230c      	movs	r3, #12
   143be:	4699      	mov	r9, r3
   143c0:	3b09      	subs	r3, #9
   143c2:	26ff      	movs	r6, #255	; 0xff
   143c4:	469a      	mov	sl, r3
   143c6:	e797      	b.n	142f8 <__aeabi_fmul+0x30>
   143c8:	0028      	movs	r0, r5
   143ca:	f002 f953 	bl	16674 <__clzsi2>
   143ce:	1f43      	subs	r3, r0, #5
   143d0:	409d      	lsls	r5, r3
   143d2:	2376      	movs	r3, #118	; 0x76
   143d4:	425b      	negs	r3, r3
   143d6:	1a18      	subs	r0, r3, r0
   143d8:	2200      	movs	r2, #0
   143da:	e79d      	b.n	14318 <__aeabi_fmul+0x50>
   143dc:	2080      	movs	r0, #128	; 0x80
   143de:	2400      	movs	r4, #0
   143e0:	03c0      	lsls	r0, r0, #15
   143e2:	22ff      	movs	r2, #255	; 0xff
   143e4:	e7ba      	b.n	1435c <__aeabi_fmul+0x94>
   143e6:	003d      	movs	r5, r7
   143e8:	4652      	mov	r2, sl
   143ea:	e7ab      	b.n	14344 <__aeabi_fmul+0x7c>
   143ec:	003d      	movs	r5, r7
   143ee:	0021      	movs	r1, r4
   143f0:	4652      	mov	r2, sl
   143f2:	e7a7      	b.n	14344 <__aeabi_fmul+0x7c>
   143f4:	0c3b      	lsrs	r3, r7, #16
   143f6:	469c      	mov	ip, r3
   143f8:	042a      	lsls	r2, r5, #16
   143fa:	0c12      	lsrs	r2, r2, #16
   143fc:	0c2b      	lsrs	r3, r5, #16
   143fe:	0014      	movs	r4, r2
   14400:	4660      	mov	r0, ip
   14402:	4665      	mov	r5, ip
   14404:	043f      	lsls	r7, r7, #16
   14406:	0c3f      	lsrs	r7, r7, #16
   14408:	437c      	muls	r4, r7
   1440a:	4342      	muls	r2, r0
   1440c:	435d      	muls	r5, r3
   1440e:	437b      	muls	r3, r7
   14410:	0c27      	lsrs	r7, r4, #16
   14412:	189b      	adds	r3, r3, r2
   14414:	18ff      	adds	r7, r7, r3
   14416:	42ba      	cmp	r2, r7
   14418:	d903      	bls.n	14422 <__aeabi_fmul+0x15a>
   1441a:	2380      	movs	r3, #128	; 0x80
   1441c:	025b      	lsls	r3, r3, #9
   1441e:	469c      	mov	ip, r3
   14420:	4465      	add	r5, ip
   14422:	0424      	lsls	r4, r4, #16
   14424:	043a      	lsls	r2, r7, #16
   14426:	0c24      	lsrs	r4, r4, #16
   14428:	1912      	adds	r2, r2, r4
   1442a:	0193      	lsls	r3, r2, #6
   1442c:	1e5c      	subs	r4, r3, #1
   1442e:	41a3      	sbcs	r3, r4
   14430:	0c3f      	lsrs	r7, r7, #16
   14432:	0e92      	lsrs	r2, r2, #26
   14434:	197d      	adds	r5, r7, r5
   14436:	431a      	orrs	r2, r3
   14438:	01ad      	lsls	r5, r5, #6
   1443a:	4315      	orrs	r5, r2
   1443c:	012b      	lsls	r3, r5, #4
   1443e:	d504      	bpl.n	1444a <__aeabi_fmul+0x182>
   14440:	2301      	movs	r3, #1
   14442:	465e      	mov	r6, fp
   14444:	086a      	lsrs	r2, r5, #1
   14446:	401d      	ands	r5, r3
   14448:	4315      	orrs	r5, r2
   1444a:	0032      	movs	r2, r6
   1444c:	327f      	adds	r2, #127	; 0x7f
   1444e:	2a00      	cmp	r2, #0
   14450:	dd25      	ble.n	1449e <__aeabi_fmul+0x1d6>
   14452:	076b      	lsls	r3, r5, #29
   14454:	d004      	beq.n	14460 <__aeabi_fmul+0x198>
   14456:	230f      	movs	r3, #15
   14458:	402b      	ands	r3, r5
   1445a:	2b04      	cmp	r3, #4
   1445c:	d000      	beq.n	14460 <__aeabi_fmul+0x198>
   1445e:	3504      	adds	r5, #4
   14460:	012b      	lsls	r3, r5, #4
   14462:	d503      	bpl.n	1446c <__aeabi_fmul+0x1a4>
   14464:	0032      	movs	r2, r6
   14466:	4b27      	ldr	r3, [pc, #156]	; (14504 <__aeabi_fmul+0x23c>)
   14468:	3280      	adds	r2, #128	; 0x80
   1446a:	401d      	ands	r5, r3
   1446c:	2afe      	cmp	r2, #254	; 0xfe
   1446e:	dc94      	bgt.n	1439a <__aeabi_fmul+0xd2>
   14470:	2401      	movs	r4, #1
   14472:	01a8      	lsls	r0, r5, #6
   14474:	0a40      	lsrs	r0, r0, #9
   14476:	b2d2      	uxtb	r2, r2
   14478:	400c      	ands	r4, r1
   1447a:	e76f      	b.n	1435c <__aeabi_fmul+0x94>
   1447c:	2080      	movs	r0, #128	; 0x80
   1447e:	03c0      	lsls	r0, r0, #15
   14480:	4207      	tst	r7, r0
   14482:	d007      	beq.n	14494 <__aeabi_fmul+0x1cc>
   14484:	4205      	tst	r5, r0
   14486:	d105      	bne.n	14494 <__aeabi_fmul+0x1cc>
   14488:	4328      	orrs	r0, r5
   1448a:	0240      	lsls	r0, r0, #9
   1448c:	0a40      	lsrs	r0, r0, #9
   1448e:	4644      	mov	r4, r8
   14490:	22ff      	movs	r2, #255	; 0xff
   14492:	e763      	b.n	1435c <__aeabi_fmul+0x94>
   14494:	4338      	orrs	r0, r7
   14496:	0240      	lsls	r0, r0, #9
   14498:	0a40      	lsrs	r0, r0, #9
   1449a:	22ff      	movs	r2, #255	; 0xff
   1449c:	e75e      	b.n	1435c <__aeabi_fmul+0x94>
   1449e:	2401      	movs	r4, #1
   144a0:	1aa3      	subs	r3, r4, r2
   144a2:	2b1b      	cmp	r3, #27
   144a4:	dd05      	ble.n	144b2 <__aeabi_fmul+0x1ea>
   144a6:	400c      	ands	r4, r1
   144a8:	2200      	movs	r2, #0
   144aa:	2000      	movs	r0, #0
   144ac:	e756      	b.n	1435c <__aeabi_fmul+0x94>
   144ae:	465e      	mov	r6, fp
   144b0:	e7cb      	b.n	1444a <__aeabi_fmul+0x182>
   144b2:	002a      	movs	r2, r5
   144b4:	2020      	movs	r0, #32
   144b6:	40da      	lsrs	r2, r3
   144b8:	1ac3      	subs	r3, r0, r3
   144ba:	409d      	lsls	r5, r3
   144bc:	002b      	movs	r3, r5
   144be:	1e5d      	subs	r5, r3, #1
   144c0:	41ab      	sbcs	r3, r5
   144c2:	4313      	orrs	r3, r2
   144c4:	075a      	lsls	r2, r3, #29
   144c6:	d004      	beq.n	144d2 <__aeabi_fmul+0x20a>
   144c8:	220f      	movs	r2, #15
   144ca:	401a      	ands	r2, r3
   144cc:	2a04      	cmp	r2, #4
   144ce:	d000      	beq.n	144d2 <__aeabi_fmul+0x20a>
   144d0:	3304      	adds	r3, #4
   144d2:	015a      	lsls	r2, r3, #5
   144d4:	d504      	bpl.n	144e0 <__aeabi_fmul+0x218>
   144d6:	2401      	movs	r4, #1
   144d8:	2201      	movs	r2, #1
   144da:	400c      	ands	r4, r1
   144dc:	2000      	movs	r0, #0
   144de:	e73d      	b.n	1435c <__aeabi_fmul+0x94>
   144e0:	2401      	movs	r4, #1
   144e2:	019b      	lsls	r3, r3, #6
   144e4:	0a58      	lsrs	r0, r3, #9
   144e6:	400c      	ands	r4, r1
   144e8:	2200      	movs	r2, #0
   144ea:	e737      	b.n	1435c <__aeabi_fmul+0x94>
   144ec:	2080      	movs	r0, #128	; 0x80
   144ee:	2401      	movs	r4, #1
   144f0:	03c0      	lsls	r0, r0, #15
   144f2:	4328      	orrs	r0, r5
   144f4:	0240      	lsls	r0, r0, #9
   144f6:	0a40      	lsrs	r0, r0, #9
   144f8:	400c      	ands	r4, r1
   144fa:	22ff      	movs	r2, #255	; 0xff
   144fc:	e72e      	b.n	1435c <__aeabi_fmul+0x94>
   144fe:	46c0      	nop			; (mov r8, r8)
   14500:	00018bf4 	.word	0x00018bf4
   14504:	f7ffffff 	.word	0xf7ffffff

00014508 <__aeabi_fsub>:
   14508:	b5f0      	push	{r4, r5, r6, r7, lr}
   1450a:	464f      	mov	r7, r9
   1450c:	46d6      	mov	lr, sl
   1450e:	4646      	mov	r6, r8
   14510:	0044      	lsls	r4, r0, #1
   14512:	b5c0      	push	{r6, r7, lr}
   14514:	0fc2      	lsrs	r2, r0, #31
   14516:	0247      	lsls	r7, r0, #9
   14518:	0248      	lsls	r0, r1, #9
   1451a:	0a40      	lsrs	r0, r0, #9
   1451c:	4684      	mov	ip, r0
   1451e:	4666      	mov	r6, ip
   14520:	0a7b      	lsrs	r3, r7, #9
   14522:	0048      	lsls	r0, r1, #1
   14524:	0fc9      	lsrs	r1, r1, #31
   14526:	469a      	mov	sl, r3
   14528:	0e24      	lsrs	r4, r4, #24
   1452a:	0015      	movs	r5, r2
   1452c:	00db      	lsls	r3, r3, #3
   1452e:	0e00      	lsrs	r0, r0, #24
   14530:	4689      	mov	r9, r1
   14532:	00f6      	lsls	r6, r6, #3
   14534:	28ff      	cmp	r0, #255	; 0xff
   14536:	d100      	bne.n	1453a <__aeabi_fsub+0x32>
   14538:	e08f      	b.n	1465a <__aeabi_fsub+0x152>
   1453a:	2101      	movs	r1, #1
   1453c:	464f      	mov	r7, r9
   1453e:	404f      	eors	r7, r1
   14540:	0039      	movs	r1, r7
   14542:	4291      	cmp	r1, r2
   14544:	d066      	beq.n	14614 <__aeabi_fsub+0x10c>
   14546:	1a22      	subs	r2, r4, r0
   14548:	2a00      	cmp	r2, #0
   1454a:	dc00      	bgt.n	1454e <__aeabi_fsub+0x46>
   1454c:	e09d      	b.n	1468a <__aeabi_fsub+0x182>
   1454e:	2800      	cmp	r0, #0
   14550:	d13d      	bne.n	145ce <__aeabi_fsub+0xc6>
   14552:	2e00      	cmp	r6, #0
   14554:	d100      	bne.n	14558 <__aeabi_fsub+0x50>
   14556:	e08b      	b.n	14670 <__aeabi_fsub+0x168>
   14558:	1e51      	subs	r1, r2, #1
   1455a:	2900      	cmp	r1, #0
   1455c:	d000      	beq.n	14560 <__aeabi_fsub+0x58>
   1455e:	e0b5      	b.n	146cc <__aeabi_fsub+0x1c4>
   14560:	2401      	movs	r4, #1
   14562:	1b9b      	subs	r3, r3, r6
   14564:	015a      	lsls	r2, r3, #5
   14566:	d544      	bpl.n	145f2 <__aeabi_fsub+0xea>
   14568:	019b      	lsls	r3, r3, #6
   1456a:	099f      	lsrs	r7, r3, #6
   1456c:	0038      	movs	r0, r7
   1456e:	f002 f881 	bl	16674 <__clzsi2>
   14572:	3805      	subs	r0, #5
   14574:	4087      	lsls	r7, r0
   14576:	4284      	cmp	r4, r0
   14578:	dd00      	ble.n	1457c <__aeabi_fsub+0x74>
   1457a:	e096      	b.n	146aa <__aeabi_fsub+0x1a2>
   1457c:	1b04      	subs	r4, r0, r4
   1457e:	003a      	movs	r2, r7
   14580:	2020      	movs	r0, #32
   14582:	3401      	adds	r4, #1
   14584:	40e2      	lsrs	r2, r4
   14586:	1b04      	subs	r4, r0, r4
   14588:	40a7      	lsls	r7, r4
   1458a:	003b      	movs	r3, r7
   1458c:	1e5f      	subs	r7, r3, #1
   1458e:	41bb      	sbcs	r3, r7
   14590:	2400      	movs	r4, #0
   14592:	4313      	orrs	r3, r2
   14594:	075a      	lsls	r2, r3, #29
   14596:	d004      	beq.n	145a2 <__aeabi_fsub+0x9a>
   14598:	220f      	movs	r2, #15
   1459a:	401a      	ands	r2, r3
   1459c:	2a04      	cmp	r2, #4
   1459e:	d000      	beq.n	145a2 <__aeabi_fsub+0x9a>
   145a0:	3304      	adds	r3, #4
   145a2:	015a      	lsls	r2, r3, #5
   145a4:	d527      	bpl.n	145f6 <__aeabi_fsub+0xee>
   145a6:	3401      	adds	r4, #1
   145a8:	2cff      	cmp	r4, #255	; 0xff
   145aa:	d100      	bne.n	145ae <__aeabi_fsub+0xa6>
   145ac:	e079      	b.n	146a2 <__aeabi_fsub+0x19a>
   145ae:	2201      	movs	r2, #1
   145b0:	019b      	lsls	r3, r3, #6
   145b2:	0a5b      	lsrs	r3, r3, #9
   145b4:	b2e4      	uxtb	r4, r4
   145b6:	402a      	ands	r2, r5
   145b8:	025b      	lsls	r3, r3, #9
   145ba:	05e4      	lsls	r4, r4, #23
   145bc:	0a58      	lsrs	r0, r3, #9
   145be:	07d2      	lsls	r2, r2, #31
   145c0:	4320      	orrs	r0, r4
   145c2:	4310      	orrs	r0, r2
   145c4:	bc1c      	pop	{r2, r3, r4}
   145c6:	4690      	mov	r8, r2
   145c8:	4699      	mov	r9, r3
   145ca:	46a2      	mov	sl, r4
   145cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145ce:	2cff      	cmp	r4, #255	; 0xff
   145d0:	d0e0      	beq.n	14594 <__aeabi_fsub+0x8c>
   145d2:	2180      	movs	r1, #128	; 0x80
   145d4:	04c9      	lsls	r1, r1, #19
   145d6:	430e      	orrs	r6, r1
   145d8:	2a1b      	cmp	r2, #27
   145da:	dc7b      	bgt.n	146d4 <__aeabi_fsub+0x1cc>
   145dc:	0031      	movs	r1, r6
   145de:	2020      	movs	r0, #32
   145e0:	40d1      	lsrs	r1, r2
   145e2:	1a82      	subs	r2, r0, r2
   145e4:	4096      	lsls	r6, r2
   145e6:	1e72      	subs	r2, r6, #1
   145e8:	4196      	sbcs	r6, r2
   145ea:	430e      	orrs	r6, r1
   145ec:	1b9b      	subs	r3, r3, r6
   145ee:	015a      	lsls	r2, r3, #5
   145f0:	d4ba      	bmi.n	14568 <__aeabi_fsub+0x60>
   145f2:	075a      	lsls	r2, r3, #29
   145f4:	d1d0      	bne.n	14598 <__aeabi_fsub+0x90>
   145f6:	2201      	movs	r2, #1
   145f8:	08df      	lsrs	r7, r3, #3
   145fa:	402a      	ands	r2, r5
   145fc:	2cff      	cmp	r4, #255	; 0xff
   145fe:	d133      	bne.n	14668 <__aeabi_fsub+0x160>
   14600:	2f00      	cmp	r7, #0
   14602:	d100      	bne.n	14606 <__aeabi_fsub+0xfe>
   14604:	e0a8      	b.n	14758 <__aeabi_fsub+0x250>
   14606:	2380      	movs	r3, #128	; 0x80
   14608:	03db      	lsls	r3, r3, #15
   1460a:	433b      	orrs	r3, r7
   1460c:	025b      	lsls	r3, r3, #9
   1460e:	0a5b      	lsrs	r3, r3, #9
   14610:	24ff      	movs	r4, #255	; 0xff
   14612:	e7d1      	b.n	145b8 <__aeabi_fsub+0xb0>
   14614:	1a21      	subs	r1, r4, r0
   14616:	2900      	cmp	r1, #0
   14618:	dd4c      	ble.n	146b4 <__aeabi_fsub+0x1ac>
   1461a:	2800      	cmp	r0, #0
   1461c:	d02a      	beq.n	14674 <__aeabi_fsub+0x16c>
   1461e:	2cff      	cmp	r4, #255	; 0xff
   14620:	d0b8      	beq.n	14594 <__aeabi_fsub+0x8c>
   14622:	2080      	movs	r0, #128	; 0x80
   14624:	04c0      	lsls	r0, r0, #19
   14626:	4306      	orrs	r6, r0
   14628:	291b      	cmp	r1, #27
   1462a:	dd00      	ble.n	1462e <__aeabi_fsub+0x126>
   1462c:	e0af      	b.n	1478e <__aeabi_fsub+0x286>
   1462e:	0030      	movs	r0, r6
   14630:	2720      	movs	r7, #32
   14632:	40c8      	lsrs	r0, r1
   14634:	1a79      	subs	r1, r7, r1
   14636:	408e      	lsls	r6, r1
   14638:	1e71      	subs	r1, r6, #1
   1463a:	418e      	sbcs	r6, r1
   1463c:	4306      	orrs	r6, r0
   1463e:	199b      	adds	r3, r3, r6
   14640:	0159      	lsls	r1, r3, #5
   14642:	d5d6      	bpl.n	145f2 <__aeabi_fsub+0xea>
   14644:	3401      	adds	r4, #1
   14646:	2cff      	cmp	r4, #255	; 0xff
   14648:	d100      	bne.n	1464c <__aeabi_fsub+0x144>
   1464a:	e085      	b.n	14758 <__aeabi_fsub+0x250>
   1464c:	2201      	movs	r2, #1
   1464e:	497a      	ldr	r1, [pc, #488]	; (14838 <__aeabi_fsub+0x330>)
   14650:	401a      	ands	r2, r3
   14652:	085b      	lsrs	r3, r3, #1
   14654:	400b      	ands	r3, r1
   14656:	4313      	orrs	r3, r2
   14658:	e79c      	b.n	14594 <__aeabi_fsub+0x8c>
   1465a:	2e00      	cmp	r6, #0
   1465c:	d000      	beq.n	14660 <__aeabi_fsub+0x158>
   1465e:	e770      	b.n	14542 <__aeabi_fsub+0x3a>
   14660:	e76b      	b.n	1453a <__aeabi_fsub+0x32>
   14662:	1e3b      	subs	r3, r7, #0
   14664:	d1c5      	bne.n	145f2 <__aeabi_fsub+0xea>
   14666:	2200      	movs	r2, #0
   14668:	027b      	lsls	r3, r7, #9
   1466a:	0a5b      	lsrs	r3, r3, #9
   1466c:	b2e4      	uxtb	r4, r4
   1466e:	e7a3      	b.n	145b8 <__aeabi_fsub+0xb0>
   14670:	0014      	movs	r4, r2
   14672:	e78f      	b.n	14594 <__aeabi_fsub+0x8c>
   14674:	2e00      	cmp	r6, #0
   14676:	d04d      	beq.n	14714 <__aeabi_fsub+0x20c>
   14678:	1e48      	subs	r0, r1, #1
   1467a:	2800      	cmp	r0, #0
   1467c:	d157      	bne.n	1472e <__aeabi_fsub+0x226>
   1467e:	199b      	adds	r3, r3, r6
   14680:	2401      	movs	r4, #1
   14682:	015a      	lsls	r2, r3, #5
   14684:	d5b5      	bpl.n	145f2 <__aeabi_fsub+0xea>
   14686:	2402      	movs	r4, #2
   14688:	e7e0      	b.n	1464c <__aeabi_fsub+0x144>
   1468a:	2a00      	cmp	r2, #0
   1468c:	d125      	bne.n	146da <__aeabi_fsub+0x1d2>
   1468e:	1c62      	adds	r2, r4, #1
   14690:	b2d2      	uxtb	r2, r2
   14692:	2a01      	cmp	r2, #1
   14694:	dd72      	ble.n	1477c <__aeabi_fsub+0x274>
   14696:	1b9f      	subs	r7, r3, r6
   14698:	017a      	lsls	r2, r7, #5
   1469a:	d535      	bpl.n	14708 <__aeabi_fsub+0x200>
   1469c:	1af7      	subs	r7, r6, r3
   1469e:	000d      	movs	r5, r1
   146a0:	e764      	b.n	1456c <__aeabi_fsub+0x64>
   146a2:	2201      	movs	r2, #1
   146a4:	2300      	movs	r3, #0
   146a6:	402a      	ands	r2, r5
   146a8:	e786      	b.n	145b8 <__aeabi_fsub+0xb0>
   146aa:	003b      	movs	r3, r7
   146ac:	4a63      	ldr	r2, [pc, #396]	; (1483c <__aeabi_fsub+0x334>)
   146ae:	1a24      	subs	r4, r4, r0
   146b0:	4013      	ands	r3, r2
   146b2:	e76f      	b.n	14594 <__aeabi_fsub+0x8c>
   146b4:	2900      	cmp	r1, #0
   146b6:	d16c      	bne.n	14792 <__aeabi_fsub+0x28a>
   146b8:	1c61      	adds	r1, r4, #1
   146ba:	b2c8      	uxtb	r0, r1
   146bc:	2801      	cmp	r0, #1
   146be:	dd4e      	ble.n	1475e <__aeabi_fsub+0x256>
   146c0:	29ff      	cmp	r1, #255	; 0xff
   146c2:	d049      	beq.n	14758 <__aeabi_fsub+0x250>
   146c4:	199b      	adds	r3, r3, r6
   146c6:	085b      	lsrs	r3, r3, #1
   146c8:	000c      	movs	r4, r1
   146ca:	e763      	b.n	14594 <__aeabi_fsub+0x8c>
   146cc:	2aff      	cmp	r2, #255	; 0xff
   146ce:	d041      	beq.n	14754 <__aeabi_fsub+0x24c>
   146d0:	000a      	movs	r2, r1
   146d2:	e781      	b.n	145d8 <__aeabi_fsub+0xd0>
   146d4:	2601      	movs	r6, #1
   146d6:	1b9b      	subs	r3, r3, r6
   146d8:	e789      	b.n	145ee <__aeabi_fsub+0xe6>
   146da:	2c00      	cmp	r4, #0
   146dc:	d01c      	beq.n	14718 <__aeabi_fsub+0x210>
   146de:	28ff      	cmp	r0, #255	; 0xff
   146e0:	d021      	beq.n	14726 <__aeabi_fsub+0x21e>
   146e2:	2480      	movs	r4, #128	; 0x80
   146e4:	04e4      	lsls	r4, r4, #19
   146e6:	4252      	negs	r2, r2
   146e8:	4323      	orrs	r3, r4
   146ea:	2a1b      	cmp	r2, #27
   146ec:	dd00      	ble.n	146f0 <__aeabi_fsub+0x1e8>
   146ee:	e096      	b.n	1481e <__aeabi_fsub+0x316>
   146f0:	001c      	movs	r4, r3
   146f2:	2520      	movs	r5, #32
   146f4:	40d4      	lsrs	r4, r2
   146f6:	1aaa      	subs	r2, r5, r2
   146f8:	4093      	lsls	r3, r2
   146fa:	1e5a      	subs	r2, r3, #1
   146fc:	4193      	sbcs	r3, r2
   146fe:	4323      	orrs	r3, r4
   14700:	1af3      	subs	r3, r6, r3
   14702:	0004      	movs	r4, r0
   14704:	000d      	movs	r5, r1
   14706:	e72d      	b.n	14564 <__aeabi_fsub+0x5c>
   14708:	2f00      	cmp	r7, #0
   1470a:	d000      	beq.n	1470e <__aeabi_fsub+0x206>
   1470c:	e72e      	b.n	1456c <__aeabi_fsub+0x64>
   1470e:	2200      	movs	r2, #0
   14710:	2400      	movs	r4, #0
   14712:	e7a9      	b.n	14668 <__aeabi_fsub+0x160>
   14714:	000c      	movs	r4, r1
   14716:	e73d      	b.n	14594 <__aeabi_fsub+0x8c>
   14718:	2b00      	cmp	r3, #0
   1471a:	d058      	beq.n	147ce <__aeabi_fsub+0x2c6>
   1471c:	43d2      	mvns	r2, r2
   1471e:	2a00      	cmp	r2, #0
   14720:	d0ee      	beq.n	14700 <__aeabi_fsub+0x1f8>
   14722:	28ff      	cmp	r0, #255	; 0xff
   14724:	d1e1      	bne.n	146ea <__aeabi_fsub+0x1e2>
   14726:	0033      	movs	r3, r6
   14728:	24ff      	movs	r4, #255	; 0xff
   1472a:	000d      	movs	r5, r1
   1472c:	e732      	b.n	14594 <__aeabi_fsub+0x8c>
   1472e:	29ff      	cmp	r1, #255	; 0xff
   14730:	d010      	beq.n	14754 <__aeabi_fsub+0x24c>
   14732:	0001      	movs	r1, r0
   14734:	e778      	b.n	14628 <__aeabi_fsub+0x120>
   14736:	2b00      	cmp	r3, #0
   14738:	d06e      	beq.n	14818 <__aeabi_fsub+0x310>
   1473a:	24ff      	movs	r4, #255	; 0xff
   1473c:	2e00      	cmp	r6, #0
   1473e:	d100      	bne.n	14742 <__aeabi_fsub+0x23a>
   14740:	e728      	b.n	14594 <__aeabi_fsub+0x8c>
   14742:	2280      	movs	r2, #128	; 0x80
   14744:	4651      	mov	r1, sl
   14746:	03d2      	lsls	r2, r2, #15
   14748:	4211      	tst	r1, r2
   1474a:	d003      	beq.n	14754 <__aeabi_fsub+0x24c>
   1474c:	4661      	mov	r1, ip
   1474e:	4211      	tst	r1, r2
   14750:	d100      	bne.n	14754 <__aeabi_fsub+0x24c>
   14752:	0033      	movs	r3, r6
   14754:	24ff      	movs	r4, #255	; 0xff
   14756:	e71d      	b.n	14594 <__aeabi_fsub+0x8c>
   14758:	24ff      	movs	r4, #255	; 0xff
   1475a:	2300      	movs	r3, #0
   1475c:	e72c      	b.n	145b8 <__aeabi_fsub+0xb0>
   1475e:	2c00      	cmp	r4, #0
   14760:	d1e9      	bne.n	14736 <__aeabi_fsub+0x22e>
   14762:	2b00      	cmp	r3, #0
   14764:	d063      	beq.n	1482e <__aeabi_fsub+0x326>
   14766:	2e00      	cmp	r6, #0
   14768:	d100      	bne.n	1476c <__aeabi_fsub+0x264>
   1476a:	e713      	b.n	14594 <__aeabi_fsub+0x8c>
   1476c:	199b      	adds	r3, r3, r6
   1476e:	015a      	lsls	r2, r3, #5
   14770:	d400      	bmi.n	14774 <__aeabi_fsub+0x26c>
   14772:	e73e      	b.n	145f2 <__aeabi_fsub+0xea>
   14774:	4a31      	ldr	r2, [pc, #196]	; (1483c <__aeabi_fsub+0x334>)
   14776:	000c      	movs	r4, r1
   14778:	4013      	ands	r3, r2
   1477a:	e70b      	b.n	14594 <__aeabi_fsub+0x8c>
   1477c:	2c00      	cmp	r4, #0
   1477e:	d11e      	bne.n	147be <__aeabi_fsub+0x2b6>
   14780:	2b00      	cmp	r3, #0
   14782:	d12f      	bne.n	147e4 <__aeabi_fsub+0x2dc>
   14784:	2e00      	cmp	r6, #0
   14786:	d04f      	beq.n	14828 <__aeabi_fsub+0x320>
   14788:	0033      	movs	r3, r6
   1478a:	000d      	movs	r5, r1
   1478c:	e702      	b.n	14594 <__aeabi_fsub+0x8c>
   1478e:	2601      	movs	r6, #1
   14790:	e755      	b.n	1463e <__aeabi_fsub+0x136>
   14792:	2c00      	cmp	r4, #0
   14794:	d11f      	bne.n	147d6 <__aeabi_fsub+0x2ce>
   14796:	2b00      	cmp	r3, #0
   14798:	d043      	beq.n	14822 <__aeabi_fsub+0x31a>
   1479a:	43c9      	mvns	r1, r1
   1479c:	2900      	cmp	r1, #0
   1479e:	d00b      	beq.n	147b8 <__aeabi_fsub+0x2b0>
   147a0:	28ff      	cmp	r0, #255	; 0xff
   147a2:	d039      	beq.n	14818 <__aeabi_fsub+0x310>
   147a4:	291b      	cmp	r1, #27
   147a6:	dc44      	bgt.n	14832 <__aeabi_fsub+0x32a>
   147a8:	001c      	movs	r4, r3
   147aa:	2720      	movs	r7, #32
   147ac:	40cc      	lsrs	r4, r1
   147ae:	1a79      	subs	r1, r7, r1
   147b0:	408b      	lsls	r3, r1
   147b2:	1e59      	subs	r1, r3, #1
   147b4:	418b      	sbcs	r3, r1
   147b6:	4323      	orrs	r3, r4
   147b8:	199b      	adds	r3, r3, r6
   147ba:	0004      	movs	r4, r0
   147bc:	e740      	b.n	14640 <__aeabi_fsub+0x138>
   147be:	2b00      	cmp	r3, #0
   147c0:	d11a      	bne.n	147f8 <__aeabi_fsub+0x2f0>
   147c2:	2e00      	cmp	r6, #0
   147c4:	d124      	bne.n	14810 <__aeabi_fsub+0x308>
   147c6:	2780      	movs	r7, #128	; 0x80
   147c8:	2200      	movs	r2, #0
   147ca:	03ff      	lsls	r7, r7, #15
   147cc:	e71b      	b.n	14606 <__aeabi_fsub+0xfe>
   147ce:	0033      	movs	r3, r6
   147d0:	0004      	movs	r4, r0
   147d2:	000d      	movs	r5, r1
   147d4:	e6de      	b.n	14594 <__aeabi_fsub+0x8c>
   147d6:	28ff      	cmp	r0, #255	; 0xff
   147d8:	d01e      	beq.n	14818 <__aeabi_fsub+0x310>
   147da:	2480      	movs	r4, #128	; 0x80
   147dc:	04e4      	lsls	r4, r4, #19
   147de:	4249      	negs	r1, r1
   147e0:	4323      	orrs	r3, r4
   147e2:	e7df      	b.n	147a4 <__aeabi_fsub+0x29c>
   147e4:	2e00      	cmp	r6, #0
   147e6:	d100      	bne.n	147ea <__aeabi_fsub+0x2e2>
   147e8:	e6d4      	b.n	14594 <__aeabi_fsub+0x8c>
   147ea:	1b9f      	subs	r7, r3, r6
   147ec:	017a      	lsls	r2, r7, #5
   147ee:	d400      	bmi.n	147f2 <__aeabi_fsub+0x2ea>
   147f0:	e737      	b.n	14662 <__aeabi_fsub+0x15a>
   147f2:	1af3      	subs	r3, r6, r3
   147f4:	000d      	movs	r5, r1
   147f6:	e6cd      	b.n	14594 <__aeabi_fsub+0x8c>
   147f8:	24ff      	movs	r4, #255	; 0xff
   147fa:	2e00      	cmp	r6, #0
   147fc:	d100      	bne.n	14800 <__aeabi_fsub+0x2f8>
   147fe:	e6c9      	b.n	14594 <__aeabi_fsub+0x8c>
   14800:	2280      	movs	r2, #128	; 0x80
   14802:	4650      	mov	r0, sl
   14804:	03d2      	lsls	r2, r2, #15
   14806:	4210      	tst	r0, r2
   14808:	d0a4      	beq.n	14754 <__aeabi_fsub+0x24c>
   1480a:	4660      	mov	r0, ip
   1480c:	4210      	tst	r0, r2
   1480e:	d1a1      	bne.n	14754 <__aeabi_fsub+0x24c>
   14810:	0033      	movs	r3, r6
   14812:	000d      	movs	r5, r1
   14814:	24ff      	movs	r4, #255	; 0xff
   14816:	e6bd      	b.n	14594 <__aeabi_fsub+0x8c>
   14818:	0033      	movs	r3, r6
   1481a:	24ff      	movs	r4, #255	; 0xff
   1481c:	e6ba      	b.n	14594 <__aeabi_fsub+0x8c>
   1481e:	2301      	movs	r3, #1
   14820:	e76e      	b.n	14700 <__aeabi_fsub+0x1f8>
   14822:	0033      	movs	r3, r6
   14824:	0004      	movs	r4, r0
   14826:	e6b5      	b.n	14594 <__aeabi_fsub+0x8c>
   14828:	2700      	movs	r7, #0
   1482a:	2200      	movs	r2, #0
   1482c:	e71c      	b.n	14668 <__aeabi_fsub+0x160>
   1482e:	0033      	movs	r3, r6
   14830:	e6b0      	b.n	14594 <__aeabi_fsub+0x8c>
   14832:	2301      	movs	r3, #1
   14834:	e7c0      	b.n	147b8 <__aeabi_fsub+0x2b0>
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	7dffffff 	.word	0x7dffffff
   1483c:	fbffffff 	.word	0xfbffffff

00014840 <__aeabi_f2iz>:
   14840:	0241      	lsls	r1, r0, #9
   14842:	0043      	lsls	r3, r0, #1
   14844:	0fc2      	lsrs	r2, r0, #31
   14846:	0a49      	lsrs	r1, r1, #9
   14848:	0e1b      	lsrs	r3, r3, #24
   1484a:	2000      	movs	r0, #0
   1484c:	2b7e      	cmp	r3, #126	; 0x7e
   1484e:	dd0d      	ble.n	1486c <__aeabi_f2iz+0x2c>
   14850:	2b9d      	cmp	r3, #157	; 0x9d
   14852:	dc0c      	bgt.n	1486e <__aeabi_f2iz+0x2e>
   14854:	2080      	movs	r0, #128	; 0x80
   14856:	0400      	lsls	r0, r0, #16
   14858:	4301      	orrs	r1, r0
   1485a:	2b95      	cmp	r3, #149	; 0x95
   1485c:	dc0a      	bgt.n	14874 <__aeabi_f2iz+0x34>
   1485e:	2096      	movs	r0, #150	; 0x96
   14860:	1ac3      	subs	r3, r0, r3
   14862:	40d9      	lsrs	r1, r3
   14864:	4248      	negs	r0, r1
   14866:	2a00      	cmp	r2, #0
   14868:	d100      	bne.n	1486c <__aeabi_f2iz+0x2c>
   1486a:	0008      	movs	r0, r1
   1486c:	4770      	bx	lr
   1486e:	4b03      	ldr	r3, [pc, #12]	; (1487c <__aeabi_f2iz+0x3c>)
   14870:	18d0      	adds	r0, r2, r3
   14872:	e7fb      	b.n	1486c <__aeabi_f2iz+0x2c>
   14874:	3b96      	subs	r3, #150	; 0x96
   14876:	4099      	lsls	r1, r3
   14878:	e7f4      	b.n	14864 <__aeabi_f2iz+0x24>
   1487a:	46c0      	nop			; (mov r8, r8)
   1487c:	7fffffff 	.word	0x7fffffff

00014880 <__aeabi_i2f>:
   14880:	b570      	push	{r4, r5, r6, lr}
   14882:	2800      	cmp	r0, #0
   14884:	d030      	beq.n	148e8 <__aeabi_i2f+0x68>
   14886:	17c3      	asrs	r3, r0, #31
   14888:	18c4      	adds	r4, r0, r3
   1488a:	405c      	eors	r4, r3
   1488c:	0fc5      	lsrs	r5, r0, #31
   1488e:	0020      	movs	r0, r4
   14890:	f001 fef0 	bl	16674 <__clzsi2>
   14894:	239e      	movs	r3, #158	; 0x9e
   14896:	1a1b      	subs	r3, r3, r0
   14898:	2b96      	cmp	r3, #150	; 0x96
   1489a:	dc0d      	bgt.n	148b8 <__aeabi_i2f+0x38>
   1489c:	2296      	movs	r2, #150	; 0x96
   1489e:	1ad2      	subs	r2, r2, r3
   148a0:	4094      	lsls	r4, r2
   148a2:	002a      	movs	r2, r5
   148a4:	0264      	lsls	r4, r4, #9
   148a6:	0a64      	lsrs	r4, r4, #9
   148a8:	b2db      	uxtb	r3, r3
   148aa:	0264      	lsls	r4, r4, #9
   148ac:	05db      	lsls	r3, r3, #23
   148ae:	0a60      	lsrs	r0, r4, #9
   148b0:	07d2      	lsls	r2, r2, #31
   148b2:	4318      	orrs	r0, r3
   148b4:	4310      	orrs	r0, r2
   148b6:	bd70      	pop	{r4, r5, r6, pc}
   148b8:	2b99      	cmp	r3, #153	; 0x99
   148ba:	dc19      	bgt.n	148f0 <__aeabi_i2f+0x70>
   148bc:	2299      	movs	r2, #153	; 0x99
   148be:	1ad2      	subs	r2, r2, r3
   148c0:	2a00      	cmp	r2, #0
   148c2:	dd29      	ble.n	14918 <__aeabi_i2f+0x98>
   148c4:	4094      	lsls	r4, r2
   148c6:	0022      	movs	r2, r4
   148c8:	4c14      	ldr	r4, [pc, #80]	; (1491c <__aeabi_i2f+0x9c>)
   148ca:	4014      	ands	r4, r2
   148cc:	0751      	lsls	r1, r2, #29
   148ce:	d004      	beq.n	148da <__aeabi_i2f+0x5a>
   148d0:	210f      	movs	r1, #15
   148d2:	400a      	ands	r2, r1
   148d4:	2a04      	cmp	r2, #4
   148d6:	d000      	beq.n	148da <__aeabi_i2f+0x5a>
   148d8:	3404      	adds	r4, #4
   148da:	0162      	lsls	r2, r4, #5
   148dc:	d413      	bmi.n	14906 <__aeabi_i2f+0x86>
   148de:	01a4      	lsls	r4, r4, #6
   148e0:	0a64      	lsrs	r4, r4, #9
   148e2:	b2db      	uxtb	r3, r3
   148e4:	002a      	movs	r2, r5
   148e6:	e7e0      	b.n	148aa <__aeabi_i2f+0x2a>
   148e8:	2200      	movs	r2, #0
   148ea:	2300      	movs	r3, #0
   148ec:	2400      	movs	r4, #0
   148ee:	e7dc      	b.n	148aa <__aeabi_i2f+0x2a>
   148f0:	2205      	movs	r2, #5
   148f2:	0021      	movs	r1, r4
   148f4:	1a12      	subs	r2, r2, r0
   148f6:	40d1      	lsrs	r1, r2
   148f8:	22b9      	movs	r2, #185	; 0xb9
   148fa:	1ad2      	subs	r2, r2, r3
   148fc:	4094      	lsls	r4, r2
   148fe:	1e62      	subs	r2, r4, #1
   14900:	4194      	sbcs	r4, r2
   14902:	430c      	orrs	r4, r1
   14904:	e7da      	b.n	148bc <__aeabi_i2f+0x3c>
   14906:	4b05      	ldr	r3, [pc, #20]	; (1491c <__aeabi_i2f+0x9c>)
   14908:	002a      	movs	r2, r5
   1490a:	401c      	ands	r4, r3
   1490c:	239f      	movs	r3, #159	; 0x9f
   1490e:	01a4      	lsls	r4, r4, #6
   14910:	1a1b      	subs	r3, r3, r0
   14912:	0a64      	lsrs	r4, r4, #9
   14914:	b2db      	uxtb	r3, r3
   14916:	e7c8      	b.n	148aa <__aeabi_i2f+0x2a>
   14918:	0022      	movs	r2, r4
   1491a:	e7d5      	b.n	148c8 <__aeabi_i2f+0x48>
   1491c:	fbffffff 	.word	0xfbffffff

00014920 <__aeabi_ui2f>:
   14920:	b510      	push	{r4, lr}
   14922:	1e04      	subs	r4, r0, #0
   14924:	d027      	beq.n	14976 <__aeabi_ui2f+0x56>
   14926:	f001 fea5 	bl	16674 <__clzsi2>
   1492a:	239e      	movs	r3, #158	; 0x9e
   1492c:	1a1b      	subs	r3, r3, r0
   1492e:	2b96      	cmp	r3, #150	; 0x96
   14930:	dc0a      	bgt.n	14948 <__aeabi_ui2f+0x28>
   14932:	2296      	movs	r2, #150	; 0x96
   14934:	1ad2      	subs	r2, r2, r3
   14936:	4094      	lsls	r4, r2
   14938:	0264      	lsls	r4, r4, #9
   1493a:	0a64      	lsrs	r4, r4, #9
   1493c:	b2db      	uxtb	r3, r3
   1493e:	0264      	lsls	r4, r4, #9
   14940:	05db      	lsls	r3, r3, #23
   14942:	0a60      	lsrs	r0, r4, #9
   14944:	4318      	orrs	r0, r3
   14946:	bd10      	pop	{r4, pc}
   14948:	2b99      	cmp	r3, #153	; 0x99
   1494a:	dc17      	bgt.n	1497c <__aeabi_ui2f+0x5c>
   1494c:	2299      	movs	r2, #153	; 0x99
   1494e:	1ad2      	subs	r2, r2, r3
   14950:	2a00      	cmp	r2, #0
   14952:	dd27      	ble.n	149a4 <__aeabi_ui2f+0x84>
   14954:	4094      	lsls	r4, r2
   14956:	0022      	movs	r2, r4
   14958:	4c13      	ldr	r4, [pc, #76]	; (149a8 <__aeabi_ui2f+0x88>)
   1495a:	4014      	ands	r4, r2
   1495c:	0751      	lsls	r1, r2, #29
   1495e:	d004      	beq.n	1496a <__aeabi_ui2f+0x4a>
   14960:	210f      	movs	r1, #15
   14962:	400a      	ands	r2, r1
   14964:	2a04      	cmp	r2, #4
   14966:	d000      	beq.n	1496a <__aeabi_ui2f+0x4a>
   14968:	3404      	adds	r4, #4
   1496a:	0162      	lsls	r2, r4, #5
   1496c:	d412      	bmi.n	14994 <__aeabi_ui2f+0x74>
   1496e:	01a4      	lsls	r4, r4, #6
   14970:	0a64      	lsrs	r4, r4, #9
   14972:	b2db      	uxtb	r3, r3
   14974:	e7e3      	b.n	1493e <__aeabi_ui2f+0x1e>
   14976:	2300      	movs	r3, #0
   14978:	2400      	movs	r4, #0
   1497a:	e7e0      	b.n	1493e <__aeabi_ui2f+0x1e>
   1497c:	22b9      	movs	r2, #185	; 0xb9
   1497e:	0021      	movs	r1, r4
   14980:	1ad2      	subs	r2, r2, r3
   14982:	4091      	lsls	r1, r2
   14984:	000a      	movs	r2, r1
   14986:	1e51      	subs	r1, r2, #1
   14988:	418a      	sbcs	r2, r1
   1498a:	2105      	movs	r1, #5
   1498c:	1a09      	subs	r1, r1, r0
   1498e:	40cc      	lsrs	r4, r1
   14990:	4314      	orrs	r4, r2
   14992:	e7db      	b.n	1494c <__aeabi_ui2f+0x2c>
   14994:	4b04      	ldr	r3, [pc, #16]	; (149a8 <__aeabi_ui2f+0x88>)
   14996:	401c      	ands	r4, r3
   14998:	239f      	movs	r3, #159	; 0x9f
   1499a:	01a4      	lsls	r4, r4, #6
   1499c:	1a1b      	subs	r3, r3, r0
   1499e:	0a64      	lsrs	r4, r4, #9
   149a0:	b2db      	uxtb	r3, r3
   149a2:	e7cc      	b.n	1493e <__aeabi_ui2f+0x1e>
   149a4:	0022      	movs	r2, r4
   149a6:	e7d7      	b.n	14958 <__aeabi_ui2f+0x38>
   149a8:	fbffffff 	.word	0xfbffffff

000149ac <__aeabi_dadd>:
   149ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149ae:	4645      	mov	r5, r8
   149b0:	46de      	mov	lr, fp
   149b2:	4657      	mov	r7, sl
   149b4:	464e      	mov	r6, r9
   149b6:	030c      	lsls	r4, r1, #12
   149b8:	b5e0      	push	{r5, r6, r7, lr}
   149ba:	004e      	lsls	r6, r1, #1
   149bc:	0fc9      	lsrs	r1, r1, #31
   149be:	4688      	mov	r8, r1
   149c0:	000d      	movs	r5, r1
   149c2:	0a61      	lsrs	r1, r4, #9
   149c4:	0f44      	lsrs	r4, r0, #29
   149c6:	430c      	orrs	r4, r1
   149c8:	00c7      	lsls	r7, r0, #3
   149ca:	0319      	lsls	r1, r3, #12
   149cc:	0058      	lsls	r0, r3, #1
   149ce:	0fdb      	lsrs	r3, r3, #31
   149d0:	469b      	mov	fp, r3
   149d2:	0a4b      	lsrs	r3, r1, #9
   149d4:	0f51      	lsrs	r1, r2, #29
   149d6:	430b      	orrs	r3, r1
   149d8:	0d76      	lsrs	r6, r6, #21
   149da:	0d40      	lsrs	r0, r0, #21
   149dc:	0019      	movs	r1, r3
   149de:	00d2      	lsls	r2, r2, #3
   149e0:	45d8      	cmp	r8, fp
   149e2:	d100      	bne.n	149e6 <__aeabi_dadd+0x3a>
   149e4:	e0ae      	b.n	14b44 <__aeabi_dadd+0x198>
   149e6:	1a35      	subs	r5, r6, r0
   149e8:	2d00      	cmp	r5, #0
   149ea:	dc00      	bgt.n	149ee <__aeabi_dadd+0x42>
   149ec:	e0f6      	b.n	14bdc <__aeabi_dadd+0x230>
   149ee:	2800      	cmp	r0, #0
   149f0:	d10f      	bne.n	14a12 <__aeabi_dadd+0x66>
   149f2:	4313      	orrs	r3, r2
   149f4:	d100      	bne.n	149f8 <__aeabi_dadd+0x4c>
   149f6:	e0db      	b.n	14bb0 <__aeabi_dadd+0x204>
   149f8:	1e6b      	subs	r3, r5, #1
   149fa:	2b00      	cmp	r3, #0
   149fc:	d000      	beq.n	14a00 <__aeabi_dadd+0x54>
   149fe:	e137      	b.n	14c70 <__aeabi_dadd+0x2c4>
   14a00:	1aba      	subs	r2, r7, r2
   14a02:	4297      	cmp	r7, r2
   14a04:	41bf      	sbcs	r7, r7
   14a06:	1a64      	subs	r4, r4, r1
   14a08:	427f      	negs	r7, r7
   14a0a:	1be4      	subs	r4, r4, r7
   14a0c:	2601      	movs	r6, #1
   14a0e:	0017      	movs	r7, r2
   14a10:	e024      	b.n	14a5c <__aeabi_dadd+0xb0>
   14a12:	4bc6      	ldr	r3, [pc, #792]	; (14d2c <__aeabi_dadd+0x380>)
   14a14:	429e      	cmp	r6, r3
   14a16:	d04d      	beq.n	14ab4 <__aeabi_dadd+0x108>
   14a18:	2380      	movs	r3, #128	; 0x80
   14a1a:	041b      	lsls	r3, r3, #16
   14a1c:	4319      	orrs	r1, r3
   14a1e:	2d38      	cmp	r5, #56	; 0x38
   14a20:	dd00      	ble.n	14a24 <__aeabi_dadd+0x78>
   14a22:	e107      	b.n	14c34 <__aeabi_dadd+0x288>
   14a24:	2d1f      	cmp	r5, #31
   14a26:	dd00      	ble.n	14a2a <__aeabi_dadd+0x7e>
   14a28:	e138      	b.n	14c9c <__aeabi_dadd+0x2f0>
   14a2a:	2020      	movs	r0, #32
   14a2c:	1b43      	subs	r3, r0, r5
   14a2e:	469a      	mov	sl, r3
   14a30:	000b      	movs	r3, r1
   14a32:	4650      	mov	r0, sl
   14a34:	4083      	lsls	r3, r0
   14a36:	4699      	mov	r9, r3
   14a38:	0013      	movs	r3, r2
   14a3a:	4648      	mov	r0, r9
   14a3c:	40eb      	lsrs	r3, r5
   14a3e:	4318      	orrs	r0, r3
   14a40:	0003      	movs	r3, r0
   14a42:	4650      	mov	r0, sl
   14a44:	4082      	lsls	r2, r0
   14a46:	1e50      	subs	r0, r2, #1
   14a48:	4182      	sbcs	r2, r0
   14a4a:	40e9      	lsrs	r1, r5
   14a4c:	431a      	orrs	r2, r3
   14a4e:	1aba      	subs	r2, r7, r2
   14a50:	1a61      	subs	r1, r4, r1
   14a52:	4297      	cmp	r7, r2
   14a54:	41a4      	sbcs	r4, r4
   14a56:	0017      	movs	r7, r2
   14a58:	4264      	negs	r4, r4
   14a5a:	1b0c      	subs	r4, r1, r4
   14a5c:	0223      	lsls	r3, r4, #8
   14a5e:	d562      	bpl.n	14b26 <__aeabi_dadd+0x17a>
   14a60:	0264      	lsls	r4, r4, #9
   14a62:	0a65      	lsrs	r5, r4, #9
   14a64:	2d00      	cmp	r5, #0
   14a66:	d100      	bne.n	14a6a <__aeabi_dadd+0xbe>
   14a68:	e0df      	b.n	14c2a <__aeabi_dadd+0x27e>
   14a6a:	0028      	movs	r0, r5
   14a6c:	f001 fe02 	bl	16674 <__clzsi2>
   14a70:	0003      	movs	r3, r0
   14a72:	3b08      	subs	r3, #8
   14a74:	2b1f      	cmp	r3, #31
   14a76:	dd00      	ble.n	14a7a <__aeabi_dadd+0xce>
   14a78:	e0d2      	b.n	14c20 <__aeabi_dadd+0x274>
   14a7a:	2220      	movs	r2, #32
   14a7c:	003c      	movs	r4, r7
   14a7e:	1ad2      	subs	r2, r2, r3
   14a80:	409d      	lsls	r5, r3
   14a82:	40d4      	lsrs	r4, r2
   14a84:	409f      	lsls	r7, r3
   14a86:	4325      	orrs	r5, r4
   14a88:	429e      	cmp	r6, r3
   14a8a:	dd00      	ble.n	14a8e <__aeabi_dadd+0xe2>
   14a8c:	e0c4      	b.n	14c18 <__aeabi_dadd+0x26c>
   14a8e:	1b9e      	subs	r6, r3, r6
   14a90:	1c73      	adds	r3, r6, #1
   14a92:	2b1f      	cmp	r3, #31
   14a94:	dd00      	ble.n	14a98 <__aeabi_dadd+0xec>
   14a96:	e0f1      	b.n	14c7c <__aeabi_dadd+0x2d0>
   14a98:	2220      	movs	r2, #32
   14a9a:	0038      	movs	r0, r7
   14a9c:	0029      	movs	r1, r5
   14a9e:	1ad2      	subs	r2, r2, r3
   14aa0:	40d8      	lsrs	r0, r3
   14aa2:	4091      	lsls	r1, r2
   14aa4:	4097      	lsls	r7, r2
   14aa6:	002c      	movs	r4, r5
   14aa8:	4301      	orrs	r1, r0
   14aaa:	1e78      	subs	r0, r7, #1
   14aac:	4187      	sbcs	r7, r0
   14aae:	40dc      	lsrs	r4, r3
   14ab0:	2600      	movs	r6, #0
   14ab2:	430f      	orrs	r7, r1
   14ab4:	077b      	lsls	r3, r7, #29
   14ab6:	d009      	beq.n	14acc <__aeabi_dadd+0x120>
   14ab8:	230f      	movs	r3, #15
   14aba:	403b      	ands	r3, r7
   14abc:	2b04      	cmp	r3, #4
   14abe:	d005      	beq.n	14acc <__aeabi_dadd+0x120>
   14ac0:	1d3b      	adds	r3, r7, #4
   14ac2:	42bb      	cmp	r3, r7
   14ac4:	41bf      	sbcs	r7, r7
   14ac6:	427f      	negs	r7, r7
   14ac8:	19e4      	adds	r4, r4, r7
   14aca:	001f      	movs	r7, r3
   14acc:	0223      	lsls	r3, r4, #8
   14ace:	d52c      	bpl.n	14b2a <__aeabi_dadd+0x17e>
   14ad0:	4b96      	ldr	r3, [pc, #600]	; (14d2c <__aeabi_dadd+0x380>)
   14ad2:	3601      	adds	r6, #1
   14ad4:	429e      	cmp	r6, r3
   14ad6:	d100      	bne.n	14ada <__aeabi_dadd+0x12e>
   14ad8:	e09a      	b.n	14c10 <__aeabi_dadd+0x264>
   14ada:	4645      	mov	r5, r8
   14adc:	4b94      	ldr	r3, [pc, #592]	; (14d30 <__aeabi_dadd+0x384>)
   14ade:	08ff      	lsrs	r7, r7, #3
   14ae0:	401c      	ands	r4, r3
   14ae2:	0760      	lsls	r0, r4, #29
   14ae4:	0576      	lsls	r6, r6, #21
   14ae6:	0264      	lsls	r4, r4, #9
   14ae8:	4307      	orrs	r7, r0
   14aea:	0b24      	lsrs	r4, r4, #12
   14aec:	0d76      	lsrs	r6, r6, #21
   14aee:	2100      	movs	r1, #0
   14af0:	0324      	lsls	r4, r4, #12
   14af2:	0b23      	lsrs	r3, r4, #12
   14af4:	0d0c      	lsrs	r4, r1, #20
   14af6:	4a8f      	ldr	r2, [pc, #572]	; (14d34 <__aeabi_dadd+0x388>)
   14af8:	0524      	lsls	r4, r4, #20
   14afa:	431c      	orrs	r4, r3
   14afc:	4014      	ands	r4, r2
   14afe:	0533      	lsls	r3, r6, #20
   14b00:	4323      	orrs	r3, r4
   14b02:	005b      	lsls	r3, r3, #1
   14b04:	07ed      	lsls	r5, r5, #31
   14b06:	085b      	lsrs	r3, r3, #1
   14b08:	432b      	orrs	r3, r5
   14b0a:	0038      	movs	r0, r7
   14b0c:	0019      	movs	r1, r3
   14b0e:	bc3c      	pop	{r2, r3, r4, r5}
   14b10:	4690      	mov	r8, r2
   14b12:	4699      	mov	r9, r3
   14b14:	46a2      	mov	sl, r4
   14b16:	46ab      	mov	fp, r5
   14b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b1a:	4664      	mov	r4, ip
   14b1c:	4304      	orrs	r4, r0
   14b1e:	d100      	bne.n	14b22 <__aeabi_dadd+0x176>
   14b20:	e211      	b.n	14f46 <__aeabi_dadd+0x59a>
   14b22:	0004      	movs	r4, r0
   14b24:	4667      	mov	r7, ip
   14b26:	077b      	lsls	r3, r7, #29
   14b28:	d1c6      	bne.n	14ab8 <__aeabi_dadd+0x10c>
   14b2a:	4645      	mov	r5, r8
   14b2c:	0760      	lsls	r0, r4, #29
   14b2e:	08ff      	lsrs	r7, r7, #3
   14b30:	4307      	orrs	r7, r0
   14b32:	08e4      	lsrs	r4, r4, #3
   14b34:	4b7d      	ldr	r3, [pc, #500]	; (14d2c <__aeabi_dadd+0x380>)
   14b36:	429e      	cmp	r6, r3
   14b38:	d030      	beq.n	14b9c <__aeabi_dadd+0x1f0>
   14b3a:	0324      	lsls	r4, r4, #12
   14b3c:	0576      	lsls	r6, r6, #21
   14b3e:	0b24      	lsrs	r4, r4, #12
   14b40:	0d76      	lsrs	r6, r6, #21
   14b42:	e7d4      	b.n	14aee <__aeabi_dadd+0x142>
   14b44:	1a33      	subs	r3, r6, r0
   14b46:	469a      	mov	sl, r3
   14b48:	2b00      	cmp	r3, #0
   14b4a:	dd78      	ble.n	14c3e <__aeabi_dadd+0x292>
   14b4c:	2800      	cmp	r0, #0
   14b4e:	d031      	beq.n	14bb4 <__aeabi_dadd+0x208>
   14b50:	4876      	ldr	r0, [pc, #472]	; (14d2c <__aeabi_dadd+0x380>)
   14b52:	4286      	cmp	r6, r0
   14b54:	d0ae      	beq.n	14ab4 <__aeabi_dadd+0x108>
   14b56:	2080      	movs	r0, #128	; 0x80
   14b58:	0400      	lsls	r0, r0, #16
   14b5a:	4301      	orrs	r1, r0
   14b5c:	4653      	mov	r3, sl
   14b5e:	2b38      	cmp	r3, #56	; 0x38
   14b60:	dc00      	bgt.n	14b64 <__aeabi_dadd+0x1b8>
   14b62:	e0e9      	b.n	14d38 <__aeabi_dadd+0x38c>
   14b64:	430a      	orrs	r2, r1
   14b66:	1e51      	subs	r1, r2, #1
   14b68:	418a      	sbcs	r2, r1
   14b6a:	2100      	movs	r1, #0
   14b6c:	19d2      	adds	r2, r2, r7
   14b6e:	42ba      	cmp	r2, r7
   14b70:	41bf      	sbcs	r7, r7
   14b72:	1909      	adds	r1, r1, r4
   14b74:	427c      	negs	r4, r7
   14b76:	0017      	movs	r7, r2
   14b78:	190c      	adds	r4, r1, r4
   14b7a:	0223      	lsls	r3, r4, #8
   14b7c:	d5d3      	bpl.n	14b26 <__aeabi_dadd+0x17a>
   14b7e:	4b6b      	ldr	r3, [pc, #428]	; (14d2c <__aeabi_dadd+0x380>)
   14b80:	3601      	adds	r6, #1
   14b82:	429e      	cmp	r6, r3
   14b84:	d100      	bne.n	14b88 <__aeabi_dadd+0x1dc>
   14b86:	e13a      	b.n	14dfe <__aeabi_dadd+0x452>
   14b88:	2001      	movs	r0, #1
   14b8a:	4b69      	ldr	r3, [pc, #420]	; (14d30 <__aeabi_dadd+0x384>)
   14b8c:	401c      	ands	r4, r3
   14b8e:	087b      	lsrs	r3, r7, #1
   14b90:	4007      	ands	r7, r0
   14b92:	431f      	orrs	r7, r3
   14b94:	07e0      	lsls	r0, r4, #31
   14b96:	4307      	orrs	r7, r0
   14b98:	0864      	lsrs	r4, r4, #1
   14b9a:	e78b      	b.n	14ab4 <__aeabi_dadd+0x108>
   14b9c:	0023      	movs	r3, r4
   14b9e:	433b      	orrs	r3, r7
   14ba0:	d100      	bne.n	14ba4 <__aeabi_dadd+0x1f8>
   14ba2:	e1cb      	b.n	14f3c <__aeabi_dadd+0x590>
   14ba4:	2280      	movs	r2, #128	; 0x80
   14ba6:	0312      	lsls	r2, r2, #12
   14ba8:	4314      	orrs	r4, r2
   14baa:	0324      	lsls	r4, r4, #12
   14bac:	0b24      	lsrs	r4, r4, #12
   14bae:	e79e      	b.n	14aee <__aeabi_dadd+0x142>
   14bb0:	002e      	movs	r6, r5
   14bb2:	e77f      	b.n	14ab4 <__aeabi_dadd+0x108>
   14bb4:	0008      	movs	r0, r1
   14bb6:	4310      	orrs	r0, r2
   14bb8:	d100      	bne.n	14bbc <__aeabi_dadd+0x210>
   14bba:	e0b4      	b.n	14d26 <__aeabi_dadd+0x37a>
   14bbc:	1e58      	subs	r0, r3, #1
   14bbe:	2800      	cmp	r0, #0
   14bc0:	d000      	beq.n	14bc4 <__aeabi_dadd+0x218>
   14bc2:	e0de      	b.n	14d82 <__aeabi_dadd+0x3d6>
   14bc4:	18ba      	adds	r2, r7, r2
   14bc6:	42ba      	cmp	r2, r7
   14bc8:	419b      	sbcs	r3, r3
   14bca:	1864      	adds	r4, r4, r1
   14bcc:	425b      	negs	r3, r3
   14bce:	18e4      	adds	r4, r4, r3
   14bd0:	0017      	movs	r7, r2
   14bd2:	2601      	movs	r6, #1
   14bd4:	0223      	lsls	r3, r4, #8
   14bd6:	d5a6      	bpl.n	14b26 <__aeabi_dadd+0x17a>
   14bd8:	2602      	movs	r6, #2
   14bda:	e7d5      	b.n	14b88 <__aeabi_dadd+0x1dc>
   14bdc:	2d00      	cmp	r5, #0
   14bde:	d16e      	bne.n	14cbe <__aeabi_dadd+0x312>
   14be0:	1c70      	adds	r0, r6, #1
   14be2:	0540      	lsls	r0, r0, #21
   14be4:	0d40      	lsrs	r0, r0, #21
   14be6:	2801      	cmp	r0, #1
   14be8:	dc00      	bgt.n	14bec <__aeabi_dadd+0x240>
   14bea:	e0f9      	b.n	14de0 <__aeabi_dadd+0x434>
   14bec:	1ab8      	subs	r0, r7, r2
   14bee:	4684      	mov	ip, r0
   14bf0:	4287      	cmp	r7, r0
   14bf2:	4180      	sbcs	r0, r0
   14bf4:	1ae5      	subs	r5, r4, r3
   14bf6:	4240      	negs	r0, r0
   14bf8:	1a2d      	subs	r5, r5, r0
   14bfa:	0228      	lsls	r0, r5, #8
   14bfc:	d400      	bmi.n	14c00 <__aeabi_dadd+0x254>
   14bfe:	e089      	b.n	14d14 <__aeabi_dadd+0x368>
   14c00:	1bd7      	subs	r7, r2, r7
   14c02:	42ba      	cmp	r2, r7
   14c04:	4192      	sbcs	r2, r2
   14c06:	1b1c      	subs	r4, r3, r4
   14c08:	4252      	negs	r2, r2
   14c0a:	1aa5      	subs	r5, r4, r2
   14c0c:	46d8      	mov	r8, fp
   14c0e:	e729      	b.n	14a64 <__aeabi_dadd+0xb8>
   14c10:	4645      	mov	r5, r8
   14c12:	2400      	movs	r4, #0
   14c14:	2700      	movs	r7, #0
   14c16:	e76a      	b.n	14aee <__aeabi_dadd+0x142>
   14c18:	4c45      	ldr	r4, [pc, #276]	; (14d30 <__aeabi_dadd+0x384>)
   14c1a:	1af6      	subs	r6, r6, r3
   14c1c:	402c      	ands	r4, r5
   14c1e:	e749      	b.n	14ab4 <__aeabi_dadd+0x108>
   14c20:	003d      	movs	r5, r7
   14c22:	3828      	subs	r0, #40	; 0x28
   14c24:	4085      	lsls	r5, r0
   14c26:	2700      	movs	r7, #0
   14c28:	e72e      	b.n	14a88 <__aeabi_dadd+0xdc>
   14c2a:	0038      	movs	r0, r7
   14c2c:	f001 fd22 	bl	16674 <__clzsi2>
   14c30:	3020      	adds	r0, #32
   14c32:	e71d      	b.n	14a70 <__aeabi_dadd+0xc4>
   14c34:	430a      	orrs	r2, r1
   14c36:	1e51      	subs	r1, r2, #1
   14c38:	418a      	sbcs	r2, r1
   14c3a:	2100      	movs	r1, #0
   14c3c:	e707      	b.n	14a4e <__aeabi_dadd+0xa2>
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d000      	beq.n	14c44 <__aeabi_dadd+0x298>
   14c42:	e0f3      	b.n	14e2c <__aeabi_dadd+0x480>
   14c44:	1c70      	adds	r0, r6, #1
   14c46:	0543      	lsls	r3, r0, #21
   14c48:	0d5b      	lsrs	r3, r3, #21
   14c4a:	2b01      	cmp	r3, #1
   14c4c:	dc00      	bgt.n	14c50 <__aeabi_dadd+0x2a4>
   14c4e:	e0ad      	b.n	14dac <__aeabi_dadd+0x400>
   14c50:	4b36      	ldr	r3, [pc, #216]	; (14d2c <__aeabi_dadd+0x380>)
   14c52:	4298      	cmp	r0, r3
   14c54:	d100      	bne.n	14c58 <__aeabi_dadd+0x2ac>
   14c56:	e0d1      	b.n	14dfc <__aeabi_dadd+0x450>
   14c58:	18ba      	adds	r2, r7, r2
   14c5a:	42ba      	cmp	r2, r7
   14c5c:	41bf      	sbcs	r7, r7
   14c5e:	1864      	adds	r4, r4, r1
   14c60:	427f      	negs	r7, r7
   14c62:	19e4      	adds	r4, r4, r7
   14c64:	07e7      	lsls	r7, r4, #31
   14c66:	0852      	lsrs	r2, r2, #1
   14c68:	4317      	orrs	r7, r2
   14c6a:	0864      	lsrs	r4, r4, #1
   14c6c:	0006      	movs	r6, r0
   14c6e:	e721      	b.n	14ab4 <__aeabi_dadd+0x108>
   14c70:	482e      	ldr	r0, [pc, #184]	; (14d2c <__aeabi_dadd+0x380>)
   14c72:	4285      	cmp	r5, r0
   14c74:	d100      	bne.n	14c78 <__aeabi_dadd+0x2cc>
   14c76:	e093      	b.n	14da0 <__aeabi_dadd+0x3f4>
   14c78:	001d      	movs	r5, r3
   14c7a:	e6d0      	b.n	14a1e <__aeabi_dadd+0x72>
   14c7c:	0029      	movs	r1, r5
   14c7e:	3e1f      	subs	r6, #31
   14c80:	40f1      	lsrs	r1, r6
   14c82:	2b20      	cmp	r3, #32
   14c84:	d100      	bne.n	14c88 <__aeabi_dadd+0x2dc>
   14c86:	e08d      	b.n	14da4 <__aeabi_dadd+0x3f8>
   14c88:	2240      	movs	r2, #64	; 0x40
   14c8a:	1ad3      	subs	r3, r2, r3
   14c8c:	409d      	lsls	r5, r3
   14c8e:	432f      	orrs	r7, r5
   14c90:	1e7d      	subs	r5, r7, #1
   14c92:	41af      	sbcs	r7, r5
   14c94:	2400      	movs	r4, #0
   14c96:	430f      	orrs	r7, r1
   14c98:	2600      	movs	r6, #0
   14c9a:	e744      	b.n	14b26 <__aeabi_dadd+0x17a>
   14c9c:	002b      	movs	r3, r5
   14c9e:	0008      	movs	r0, r1
   14ca0:	3b20      	subs	r3, #32
   14ca2:	40d8      	lsrs	r0, r3
   14ca4:	0003      	movs	r3, r0
   14ca6:	2d20      	cmp	r5, #32
   14ca8:	d100      	bne.n	14cac <__aeabi_dadd+0x300>
   14caa:	e07d      	b.n	14da8 <__aeabi_dadd+0x3fc>
   14cac:	2040      	movs	r0, #64	; 0x40
   14cae:	1b45      	subs	r5, r0, r5
   14cb0:	40a9      	lsls	r1, r5
   14cb2:	430a      	orrs	r2, r1
   14cb4:	1e51      	subs	r1, r2, #1
   14cb6:	418a      	sbcs	r2, r1
   14cb8:	2100      	movs	r1, #0
   14cba:	431a      	orrs	r2, r3
   14cbc:	e6c7      	b.n	14a4e <__aeabi_dadd+0xa2>
   14cbe:	2e00      	cmp	r6, #0
   14cc0:	d050      	beq.n	14d64 <__aeabi_dadd+0x3b8>
   14cc2:	4e1a      	ldr	r6, [pc, #104]	; (14d2c <__aeabi_dadd+0x380>)
   14cc4:	42b0      	cmp	r0, r6
   14cc6:	d057      	beq.n	14d78 <__aeabi_dadd+0x3cc>
   14cc8:	2680      	movs	r6, #128	; 0x80
   14cca:	426b      	negs	r3, r5
   14ccc:	4699      	mov	r9, r3
   14cce:	0436      	lsls	r6, r6, #16
   14cd0:	4334      	orrs	r4, r6
   14cd2:	464b      	mov	r3, r9
   14cd4:	2b38      	cmp	r3, #56	; 0x38
   14cd6:	dd00      	ble.n	14cda <__aeabi_dadd+0x32e>
   14cd8:	e0d6      	b.n	14e88 <__aeabi_dadd+0x4dc>
   14cda:	2b1f      	cmp	r3, #31
   14cdc:	dd00      	ble.n	14ce0 <__aeabi_dadd+0x334>
   14cde:	e135      	b.n	14f4c <__aeabi_dadd+0x5a0>
   14ce0:	2620      	movs	r6, #32
   14ce2:	1af5      	subs	r5, r6, r3
   14ce4:	0026      	movs	r6, r4
   14ce6:	40ae      	lsls	r6, r5
   14ce8:	46b2      	mov	sl, r6
   14cea:	003e      	movs	r6, r7
   14cec:	40de      	lsrs	r6, r3
   14cee:	46ac      	mov	ip, r5
   14cf0:	0035      	movs	r5, r6
   14cf2:	4656      	mov	r6, sl
   14cf4:	432e      	orrs	r6, r5
   14cf6:	4665      	mov	r5, ip
   14cf8:	40af      	lsls	r7, r5
   14cfa:	1e7d      	subs	r5, r7, #1
   14cfc:	41af      	sbcs	r7, r5
   14cfe:	40dc      	lsrs	r4, r3
   14d00:	4337      	orrs	r7, r6
   14d02:	1bd7      	subs	r7, r2, r7
   14d04:	42ba      	cmp	r2, r7
   14d06:	4192      	sbcs	r2, r2
   14d08:	1b0c      	subs	r4, r1, r4
   14d0a:	4252      	negs	r2, r2
   14d0c:	1aa4      	subs	r4, r4, r2
   14d0e:	0006      	movs	r6, r0
   14d10:	46d8      	mov	r8, fp
   14d12:	e6a3      	b.n	14a5c <__aeabi_dadd+0xb0>
   14d14:	4664      	mov	r4, ip
   14d16:	4667      	mov	r7, ip
   14d18:	432c      	orrs	r4, r5
   14d1a:	d000      	beq.n	14d1e <__aeabi_dadd+0x372>
   14d1c:	e6a2      	b.n	14a64 <__aeabi_dadd+0xb8>
   14d1e:	2500      	movs	r5, #0
   14d20:	2600      	movs	r6, #0
   14d22:	2700      	movs	r7, #0
   14d24:	e706      	b.n	14b34 <__aeabi_dadd+0x188>
   14d26:	001e      	movs	r6, r3
   14d28:	e6c4      	b.n	14ab4 <__aeabi_dadd+0x108>
   14d2a:	46c0      	nop			; (mov r8, r8)
   14d2c:	000007ff 	.word	0x000007ff
   14d30:	ff7fffff 	.word	0xff7fffff
   14d34:	800fffff 	.word	0x800fffff
   14d38:	2b1f      	cmp	r3, #31
   14d3a:	dc63      	bgt.n	14e04 <__aeabi_dadd+0x458>
   14d3c:	2020      	movs	r0, #32
   14d3e:	1ac3      	subs	r3, r0, r3
   14d40:	0008      	movs	r0, r1
   14d42:	4098      	lsls	r0, r3
   14d44:	469c      	mov	ip, r3
   14d46:	4683      	mov	fp, r0
   14d48:	4653      	mov	r3, sl
   14d4a:	0010      	movs	r0, r2
   14d4c:	40d8      	lsrs	r0, r3
   14d4e:	0003      	movs	r3, r0
   14d50:	4658      	mov	r0, fp
   14d52:	4318      	orrs	r0, r3
   14d54:	4663      	mov	r3, ip
   14d56:	409a      	lsls	r2, r3
   14d58:	1e53      	subs	r3, r2, #1
   14d5a:	419a      	sbcs	r2, r3
   14d5c:	4653      	mov	r3, sl
   14d5e:	4302      	orrs	r2, r0
   14d60:	40d9      	lsrs	r1, r3
   14d62:	e703      	b.n	14b6c <__aeabi_dadd+0x1c0>
   14d64:	0026      	movs	r6, r4
   14d66:	433e      	orrs	r6, r7
   14d68:	d006      	beq.n	14d78 <__aeabi_dadd+0x3cc>
   14d6a:	43eb      	mvns	r3, r5
   14d6c:	4699      	mov	r9, r3
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d0c7      	beq.n	14d02 <__aeabi_dadd+0x356>
   14d72:	4e94      	ldr	r6, [pc, #592]	; (14fc4 <__aeabi_dadd+0x618>)
   14d74:	42b0      	cmp	r0, r6
   14d76:	d1ac      	bne.n	14cd2 <__aeabi_dadd+0x326>
   14d78:	000c      	movs	r4, r1
   14d7a:	0017      	movs	r7, r2
   14d7c:	0006      	movs	r6, r0
   14d7e:	46d8      	mov	r8, fp
   14d80:	e698      	b.n	14ab4 <__aeabi_dadd+0x108>
   14d82:	4b90      	ldr	r3, [pc, #576]	; (14fc4 <__aeabi_dadd+0x618>)
   14d84:	459a      	cmp	sl, r3
   14d86:	d00b      	beq.n	14da0 <__aeabi_dadd+0x3f4>
   14d88:	4682      	mov	sl, r0
   14d8a:	e6e7      	b.n	14b5c <__aeabi_dadd+0x1b0>
   14d8c:	2800      	cmp	r0, #0
   14d8e:	d000      	beq.n	14d92 <__aeabi_dadd+0x3e6>
   14d90:	e09e      	b.n	14ed0 <__aeabi_dadd+0x524>
   14d92:	0018      	movs	r0, r3
   14d94:	4310      	orrs	r0, r2
   14d96:	d100      	bne.n	14d9a <__aeabi_dadd+0x3ee>
   14d98:	e0e9      	b.n	14f6e <__aeabi_dadd+0x5c2>
   14d9a:	001c      	movs	r4, r3
   14d9c:	0017      	movs	r7, r2
   14d9e:	46d8      	mov	r8, fp
   14da0:	4e88      	ldr	r6, [pc, #544]	; (14fc4 <__aeabi_dadd+0x618>)
   14da2:	e687      	b.n	14ab4 <__aeabi_dadd+0x108>
   14da4:	2500      	movs	r5, #0
   14da6:	e772      	b.n	14c8e <__aeabi_dadd+0x2e2>
   14da8:	2100      	movs	r1, #0
   14daa:	e782      	b.n	14cb2 <__aeabi_dadd+0x306>
   14dac:	0023      	movs	r3, r4
   14dae:	433b      	orrs	r3, r7
   14db0:	2e00      	cmp	r6, #0
   14db2:	d000      	beq.n	14db6 <__aeabi_dadd+0x40a>
   14db4:	e0ab      	b.n	14f0e <__aeabi_dadd+0x562>
   14db6:	2b00      	cmp	r3, #0
   14db8:	d100      	bne.n	14dbc <__aeabi_dadd+0x410>
   14dba:	e0e7      	b.n	14f8c <__aeabi_dadd+0x5e0>
   14dbc:	000b      	movs	r3, r1
   14dbe:	4313      	orrs	r3, r2
   14dc0:	d100      	bne.n	14dc4 <__aeabi_dadd+0x418>
   14dc2:	e677      	b.n	14ab4 <__aeabi_dadd+0x108>
   14dc4:	18ba      	adds	r2, r7, r2
   14dc6:	42ba      	cmp	r2, r7
   14dc8:	41bf      	sbcs	r7, r7
   14dca:	1864      	adds	r4, r4, r1
   14dcc:	427f      	negs	r7, r7
   14dce:	19e4      	adds	r4, r4, r7
   14dd0:	0223      	lsls	r3, r4, #8
   14dd2:	d400      	bmi.n	14dd6 <__aeabi_dadd+0x42a>
   14dd4:	e0f2      	b.n	14fbc <__aeabi_dadd+0x610>
   14dd6:	4b7c      	ldr	r3, [pc, #496]	; (14fc8 <__aeabi_dadd+0x61c>)
   14dd8:	0017      	movs	r7, r2
   14dda:	401c      	ands	r4, r3
   14ddc:	0006      	movs	r6, r0
   14dde:	e669      	b.n	14ab4 <__aeabi_dadd+0x108>
   14de0:	0020      	movs	r0, r4
   14de2:	4338      	orrs	r0, r7
   14de4:	2e00      	cmp	r6, #0
   14de6:	d1d1      	bne.n	14d8c <__aeabi_dadd+0x3e0>
   14de8:	2800      	cmp	r0, #0
   14dea:	d15b      	bne.n	14ea4 <__aeabi_dadd+0x4f8>
   14dec:	001c      	movs	r4, r3
   14dee:	4314      	orrs	r4, r2
   14df0:	d100      	bne.n	14df4 <__aeabi_dadd+0x448>
   14df2:	e0a8      	b.n	14f46 <__aeabi_dadd+0x59a>
   14df4:	001c      	movs	r4, r3
   14df6:	0017      	movs	r7, r2
   14df8:	46d8      	mov	r8, fp
   14dfa:	e65b      	b.n	14ab4 <__aeabi_dadd+0x108>
   14dfc:	0006      	movs	r6, r0
   14dfe:	2400      	movs	r4, #0
   14e00:	2700      	movs	r7, #0
   14e02:	e697      	b.n	14b34 <__aeabi_dadd+0x188>
   14e04:	4650      	mov	r0, sl
   14e06:	000b      	movs	r3, r1
   14e08:	3820      	subs	r0, #32
   14e0a:	40c3      	lsrs	r3, r0
   14e0c:	4699      	mov	r9, r3
   14e0e:	4653      	mov	r3, sl
   14e10:	2b20      	cmp	r3, #32
   14e12:	d100      	bne.n	14e16 <__aeabi_dadd+0x46a>
   14e14:	e095      	b.n	14f42 <__aeabi_dadd+0x596>
   14e16:	2340      	movs	r3, #64	; 0x40
   14e18:	4650      	mov	r0, sl
   14e1a:	1a1b      	subs	r3, r3, r0
   14e1c:	4099      	lsls	r1, r3
   14e1e:	430a      	orrs	r2, r1
   14e20:	1e51      	subs	r1, r2, #1
   14e22:	418a      	sbcs	r2, r1
   14e24:	464b      	mov	r3, r9
   14e26:	2100      	movs	r1, #0
   14e28:	431a      	orrs	r2, r3
   14e2a:	e69f      	b.n	14b6c <__aeabi_dadd+0x1c0>
   14e2c:	2e00      	cmp	r6, #0
   14e2e:	d130      	bne.n	14e92 <__aeabi_dadd+0x4e6>
   14e30:	0026      	movs	r6, r4
   14e32:	433e      	orrs	r6, r7
   14e34:	d067      	beq.n	14f06 <__aeabi_dadd+0x55a>
   14e36:	43db      	mvns	r3, r3
   14e38:	469a      	mov	sl, r3
   14e3a:	2b00      	cmp	r3, #0
   14e3c:	d01c      	beq.n	14e78 <__aeabi_dadd+0x4cc>
   14e3e:	4e61      	ldr	r6, [pc, #388]	; (14fc4 <__aeabi_dadd+0x618>)
   14e40:	42b0      	cmp	r0, r6
   14e42:	d060      	beq.n	14f06 <__aeabi_dadd+0x55a>
   14e44:	4653      	mov	r3, sl
   14e46:	2b38      	cmp	r3, #56	; 0x38
   14e48:	dd00      	ble.n	14e4c <__aeabi_dadd+0x4a0>
   14e4a:	e096      	b.n	14f7a <__aeabi_dadd+0x5ce>
   14e4c:	2b1f      	cmp	r3, #31
   14e4e:	dd00      	ble.n	14e52 <__aeabi_dadd+0x4a6>
   14e50:	e09f      	b.n	14f92 <__aeabi_dadd+0x5e6>
   14e52:	2620      	movs	r6, #32
   14e54:	1af3      	subs	r3, r6, r3
   14e56:	0026      	movs	r6, r4
   14e58:	409e      	lsls	r6, r3
   14e5a:	469c      	mov	ip, r3
   14e5c:	46b3      	mov	fp, r6
   14e5e:	4653      	mov	r3, sl
   14e60:	003e      	movs	r6, r7
   14e62:	40de      	lsrs	r6, r3
   14e64:	0033      	movs	r3, r6
   14e66:	465e      	mov	r6, fp
   14e68:	431e      	orrs	r6, r3
   14e6a:	4663      	mov	r3, ip
   14e6c:	409f      	lsls	r7, r3
   14e6e:	1e7b      	subs	r3, r7, #1
   14e70:	419f      	sbcs	r7, r3
   14e72:	4653      	mov	r3, sl
   14e74:	40dc      	lsrs	r4, r3
   14e76:	4337      	orrs	r7, r6
   14e78:	18bf      	adds	r7, r7, r2
   14e7a:	4297      	cmp	r7, r2
   14e7c:	4192      	sbcs	r2, r2
   14e7e:	1864      	adds	r4, r4, r1
   14e80:	4252      	negs	r2, r2
   14e82:	18a4      	adds	r4, r4, r2
   14e84:	0006      	movs	r6, r0
   14e86:	e678      	b.n	14b7a <__aeabi_dadd+0x1ce>
   14e88:	4327      	orrs	r7, r4
   14e8a:	1e7c      	subs	r4, r7, #1
   14e8c:	41a7      	sbcs	r7, r4
   14e8e:	2400      	movs	r4, #0
   14e90:	e737      	b.n	14d02 <__aeabi_dadd+0x356>
   14e92:	4e4c      	ldr	r6, [pc, #304]	; (14fc4 <__aeabi_dadd+0x618>)
   14e94:	42b0      	cmp	r0, r6
   14e96:	d036      	beq.n	14f06 <__aeabi_dadd+0x55a>
   14e98:	2680      	movs	r6, #128	; 0x80
   14e9a:	425b      	negs	r3, r3
   14e9c:	0436      	lsls	r6, r6, #16
   14e9e:	469a      	mov	sl, r3
   14ea0:	4334      	orrs	r4, r6
   14ea2:	e7cf      	b.n	14e44 <__aeabi_dadd+0x498>
   14ea4:	0018      	movs	r0, r3
   14ea6:	4310      	orrs	r0, r2
   14ea8:	d100      	bne.n	14eac <__aeabi_dadd+0x500>
   14eaa:	e603      	b.n	14ab4 <__aeabi_dadd+0x108>
   14eac:	1ab8      	subs	r0, r7, r2
   14eae:	4684      	mov	ip, r0
   14eb0:	4567      	cmp	r7, ip
   14eb2:	41ad      	sbcs	r5, r5
   14eb4:	1ae0      	subs	r0, r4, r3
   14eb6:	426d      	negs	r5, r5
   14eb8:	1b40      	subs	r0, r0, r5
   14eba:	0205      	lsls	r5, r0, #8
   14ebc:	d400      	bmi.n	14ec0 <__aeabi_dadd+0x514>
   14ebe:	e62c      	b.n	14b1a <__aeabi_dadd+0x16e>
   14ec0:	1bd7      	subs	r7, r2, r7
   14ec2:	42ba      	cmp	r2, r7
   14ec4:	4192      	sbcs	r2, r2
   14ec6:	1b1c      	subs	r4, r3, r4
   14ec8:	4252      	negs	r2, r2
   14eca:	1aa4      	subs	r4, r4, r2
   14ecc:	46d8      	mov	r8, fp
   14ece:	e5f1      	b.n	14ab4 <__aeabi_dadd+0x108>
   14ed0:	0018      	movs	r0, r3
   14ed2:	4310      	orrs	r0, r2
   14ed4:	d100      	bne.n	14ed8 <__aeabi_dadd+0x52c>
   14ed6:	e763      	b.n	14da0 <__aeabi_dadd+0x3f4>
   14ed8:	08f8      	lsrs	r0, r7, #3
   14eda:	0767      	lsls	r7, r4, #29
   14edc:	4307      	orrs	r7, r0
   14ede:	2080      	movs	r0, #128	; 0x80
   14ee0:	08e4      	lsrs	r4, r4, #3
   14ee2:	0300      	lsls	r0, r0, #12
   14ee4:	4204      	tst	r4, r0
   14ee6:	d008      	beq.n	14efa <__aeabi_dadd+0x54e>
   14ee8:	08dd      	lsrs	r5, r3, #3
   14eea:	4205      	tst	r5, r0
   14eec:	d105      	bne.n	14efa <__aeabi_dadd+0x54e>
   14eee:	08d2      	lsrs	r2, r2, #3
   14ef0:	0759      	lsls	r1, r3, #29
   14ef2:	4311      	orrs	r1, r2
   14ef4:	000f      	movs	r7, r1
   14ef6:	002c      	movs	r4, r5
   14ef8:	46d8      	mov	r8, fp
   14efa:	0f7b      	lsrs	r3, r7, #29
   14efc:	00e4      	lsls	r4, r4, #3
   14efe:	431c      	orrs	r4, r3
   14f00:	00ff      	lsls	r7, r7, #3
   14f02:	4e30      	ldr	r6, [pc, #192]	; (14fc4 <__aeabi_dadd+0x618>)
   14f04:	e5d6      	b.n	14ab4 <__aeabi_dadd+0x108>
   14f06:	000c      	movs	r4, r1
   14f08:	0017      	movs	r7, r2
   14f0a:	0006      	movs	r6, r0
   14f0c:	e5d2      	b.n	14ab4 <__aeabi_dadd+0x108>
   14f0e:	2b00      	cmp	r3, #0
   14f10:	d038      	beq.n	14f84 <__aeabi_dadd+0x5d8>
   14f12:	000b      	movs	r3, r1
   14f14:	4313      	orrs	r3, r2
   14f16:	d100      	bne.n	14f1a <__aeabi_dadd+0x56e>
   14f18:	e742      	b.n	14da0 <__aeabi_dadd+0x3f4>
   14f1a:	08f8      	lsrs	r0, r7, #3
   14f1c:	0767      	lsls	r7, r4, #29
   14f1e:	4307      	orrs	r7, r0
   14f20:	2080      	movs	r0, #128	; 0x80
   14f22:	08e4      	lsrs	r4, r4, #3
   14f24:	0300      	lsls	r0, r0, #12
   14f26:	4204      	tst	r4, r0
   14f28:	d0e7      	beq.n	14efa <__aeabi_dadd+0x54e>
   14f2a:	08cb      	lsrs	r3, r1, #3
   14f2c:	4203      	tst	r3, r0
   14f2e:	d1e4      	bne.n	14efa <__aeabi_dadd+0x54e>
   14f30:	08d2      	lsrs	r2, r2, #3
   14f32:	0749      	lsls	r1, r1, #29
   14f34:	4311      	orrs	r1, r2
   14f36:	000f      	movs	r7, r1
   14f38:	001c      	movs	r4, r3
   14f3a:	e7de      	b.n	14efa <__aeabi_dadd+0x54e>
   14f3c:	2700      	movs	r7, #0
   14f3e:	2400      	movs	r4, #0
   14f40:	e5d5      	b.n	14aee <__aeabi_dadd+0x142>
   14f42:	2100      	movs	r1, #0
   14f44:	e76b      	b.n	14e1e <__aeabi_dadd+0x472>
   14f46:	2500      	movs	r5, #0
   14f48:	2700      	movs	r7, #0
   14f4a:	e5f3      	b.n	14b34 <__aeabi_dadd+0x188>
   14f4c:	464e      	mov	r6, r9
   14f4e:	0025      	movs	r5, r4
   14f50:	3e20      	subs	r6, #32
   14f52:	40f5      	lsrs	r5, r6
   14f54:	464b      	mov	r3, r9
   14f56:	002e      	movs	r6, r5
   14f58:	2b20      	cmp	r3, #32
   14f5a:	d02d      	beq.n	14fb8 <__aeabi_dadd+0x60c>
   14f5c:	2540      	movs	r5, #64	; 0x40
   14f5e:	1aed      	subs	r5, r5, r3
   14f60:	40ac      	lsls	r4, r5
   14f62:	4327      	orrs	r7, r4
   14f64:	1e7c      	subs	r4, r7, #1
   14f66:	41a7      	sbcs	r7, r4
   14f68:	2400      	movs	r4, #0
   14f6a:	4337      	orrs	r7, r6
   14f6c:	e6c9      	b.n	14d02 <__aeabi_dadd+0x356>
   14f6e:	2480      	movs	r4, #128	; 0x80
   14f70:	2500      	movs	r5, #0
   14f72:	0324      	lsls	r4, r4, #12
   14f74:	4e13      	ldr	r6, [pc, #76]	; (14fc4 <__aeabi_dadd+0x618>)
   14f76:	2700      	movs	r7, #0
   14f78:	e5dc      	b.n	14b34 <__aeabi_dadd+0x188>
   14f7a:	4327      	orrs	r7, r4
   14f7c:	1e7c      	subs	r4, r7, #1
   14f7e:	41a7      	sbcs	r7, r4
   14f80:	2400      	movs	r4, #0
   14f82:	e779      	b.n	14e78 <__aeabi_dadd+0x4cc>
   14f84:	000c      	movs	r4, r1
   14f86:	0017      	movs	r7, r2
   14f88:	4e0e      	ldr	r6, [pc, #56]	; (14fc4 <__aeabi_dadd+0x618>)
   14f8a:	e593      	b.n	14ab4 <__aeabi_dadd+0x108>
   14f8c:	000c      	movs	r4, r1
   14f8e:	0017      	movs	r7, r2
   14f90:	e590      	b.n	14ab4 <__aeabi_dadd+0x108>
   14f92:	4656      	mov	r6, sl
   14f94:	0023      	movs	r3, r4
   14f96:	3e20      	subs	r6, #32
   14f98:	40f3      	lsrs	r3, r6
   14f9a:	4699      	mov	r9, r3
   14f9c:	4653      	mov	r3, sl
   14f9e:	2b20      	cmp	r3, #32
   14fa0:	d00e      	beq.n	14fc0 <__aeabi_dadd+0x614>
   14fa2:	2340      	movs	r3, #64	; 0x40
   14fa4:	4656      	mov	r6, sl
   14fa6:	1b9b      	subs	r3, r3, r6
   14fa8:	409c      	lsls	r4, r3
   14faa:	4327      	orrs	r7, r4
   14fac:	1e7c      	subs	r4, r7, #1
   14fae:	41a7      	sbcs	r7, r4
   14fb0:	464b      	mov	r3, r9
   14fb2:	2400      	movs	r4, #0
   14fb4:	431f      	orrs	r7, r3
   14fb6:	e75f      	b.n	14e78 <__aeabi_dadd+0x4cc>
   14fb8:	2400      	movs	r4, #0
   14fba:	e7d2      	b.n	14f62 <__aeabi_dadd+0x5b6>
   14fbc:	0017      	movs	r7, r2
   14fbe:	e5b2      	b.n	14b26 <__aeabi_dadd+0x17a>
   14fc0:	2400      	movs	r4, #0
   14fc2:	e7f2      	b.n	14faa <__aeabi_dadd+0x5fe>
   14fc4:	000007ff 	.word	0x000007ff
   14fc8:	ff7fffff 	.word	0xff7fffff

00014fcc <__aeabi_ddiv>:
   14fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fce:	4657      	mov	r7, sl
   14fd0:	4645      	mov	r5, r8
   14fd2:	46de      	mov	lr, fp
   14fd4:	464e      	mov	r6, r9
   14fd6:	b5e0      	push	{r5, r6, r7, lr}
   14fd8:	004c      	lsls	r4, r1, #1
   14fda:	030e      	lsls	r6, r1, #12
   14fdc:	b087      	sub	sp, #28
   14fde:	4683      	mov	fp, r0
   14fe0:	4692      	mov	sl, r2
   14fe2:	001d      	movs	r5, r3
   14fe4:	4680      	mov	r8, r0
   14fe6:	0b36      	lsrs	r6, r6, #12
   14fe8:	0d64      	lsrs	r4, r4, #21
   14fea:	0fcf      	lsrs	r7, r1, #31
   14fec:	2c00      	cmp	r4, #0
   14fee:	d04f      	beq.n	15090 <__aeabi_ddiv+0xc4>
   14ff0:	4b6f      	ldr	r3, [pc, #444]	; (151b0 <__aeabi_ddiv+0x1e4>)
   14ff2:	429c      	cmp	r4, r3
   14ff4:	d035      	beq.n	15062 <__aeabi_ddiv+0x96>
   14ff6:	2380      	movs	r3, #128	; 0x80
   14ff8:	0f42      	lsrs	r2, r0, #29
   14ffa:	041b      	lsls	r3, r3, #16
   14ffc:	00f6      	lsls	r6, r6, #3
   14ffe:	4313      	orrs	r3, r2
   15000:	4333      	orrs	r3, r6
   15002:	4699      	mov	r9, r3
   15004:	00c3      	lsls	r3, r0, #3
   15006:	4698      	mov	r8, r3
   15008:	4b6a      	ldr	r3, [pc, #424]	; (151b4 <__aeabi_ddiv+0x1e8>)
   1500a:	2600      	movs	r6, #0
   1500c:	469c      	mov	ip, r3
   1500e:	2300      	movs	r3, #0
   15010:	4464      	add	r4, ip
   15012:	9303      	str	r3, [sp, #12]
   15014:	032b      	lsls	r3, r5, #12
   15016:	0b1b      	lsrs	r3, r3, #12
   15018:	469b      	mov	fp, r3
   1501a:	006b      	lsls	r3, r5, #1
   1501c:	0fed      	lsrs	r5, r5, #31
   1501e:	4650      	mov	r0, sl
   15020:	0d5b      	lsrs	r3, r3, #21
   15022:	9501      	str	r5, [sp, #4]
   15024:	d05e      	beq.n	150e4 <__aeabi_ddiv+0x118>
   15026:	4a62      	ldr	r2, [pc, #392]	; (151b0 <__aeabi_ddiv+0x1e4>)
   15028:	4293      	cmp	r3, r2
   1502a:	d053      	beq.n	150d4 <__aeabi_ddiv+0x108>
   1502c:	465a      	mov	r2, fp
   1502e:	00d1      	lsls	r1, r2, #3
   15030:	2280      	movs	r2, #128	; 0x80
   15032:	0f40      	lsrs	r0, r0, #29
   15034:	0412      	lsls	r2, r2, #16
   15036:	4302      	orrs	r2, r0
   15038:	430a      	orrs	r2, r1
   1503a:	4693      	mov	fp, r2
   1503c:	4652      	mov	r2, sl
   1503e:	00d1      	lsls	r1, r2, #3
   15040:	4a5c      	ldr	r2, [pc, #368]	; (151b4 <__aeabi_ddiv+0x1e8>)
   15042:	4694      	mov	ip, r2
   15044:	2200      	movs	r2, #0
   15046:	4463      	add	r3, ip
   15048:	0038      	movs	r0, r7
   1504a:	4068      	eors	r0, r5
   1504c:	4684      	mov	ip, r0
   1504e:	9002      	str	r0, [sp, #8]
   15050:	1ae4      	subs	r4, r4, r3
   15052:	4316      	orrs	r6, r2
   15054:	2e0f      	cmp	r6, #15
   15056:	d900      	bls.n	1505a <__aeabi_ddiv+0x8e>
   15058:	e0b4      	b.n	151c4 <__aeabi_ddiv+0x1f8>
   1505a:	4b57      	ldr	r3, [pc, #348]	; (151b8 <__aeabi_ddiv+0x1ec>)
   1505c:	00b6      	lsls	r6, r6, #2
   1505e:	599b      	ldr	r3, [r3, r6]
   15060:	469f      	mov	pc, r3
   15062:	0003      	movs	r3, r0
   15064:	4333      	orrs	r3, r6
   15066:	4699      	mov	r9, r3
   15068:	d16c      	bne.n	15144 <__aeabi_ddiv+0x178>
   1506a:	2300      	movs	r3, #0
   1506c:	4698      	mov	r8, r3
   1506e:	3302      	adds	r3, #2
   15070:	2608      	movs	r6, #8
   15072:	9303      	str	r3, [sp, #12]
   15074:	e7ce      	b.n	15014 <__aeabi_ddiv+0x48>
   15076:	46cb      	mov	fp, r9
   15078:	4641      	mov	r1, r8
   1507a:	9a03      	ldr	r2, [sp, #12]
   1507c:	9701      	str	r7, [sp, #4]
   1507e:	2a02      	cmp	r2, #2
   15080:	d165      	bne.n	1514e <__aeabi_ddiv+0x182>
   15082:	9b01      	ldr	r3, [sp, #4]
   15084:	4c4a      	ldr	r4, [pc, #296]	; (151b0 <__aeabi_ddiv+0x1e4>)
   15086:	469c      	mov	ip, r3
   15088:	2300      	movs	r3, #0
   1508a:	2200      	movs	r2, #0
   1508c:	4698      	mov	r8, r3
   1508e:	e06b      	b.n	15168 <__aeabi_ddiv+0x19c>
   15090:	0003      	movs	r3, r0
   15092:	4333      	orrs	r3, r6
   15094:	4699      	mov	r9, r3
   15096:	d04e      	beq.n	15136 <__aeabi_ddiv+0x16a>
   15098:	2e00      	cmp	r6, #0
   1509a:	d100      	bne.n	1509e <__aeabi_ddiv+0xd2>
   1509c:	e1bc      	b.n	15418 <__aeabi_ddiv+0x44c>
   1509e:	0030      	movs	r0, r6
   150a0:	f001 fae8 	bl	16674 <__clzsi2>
   150a4:	0003      	movs	r3, r0
   150a6:	3b0b      	subs	r3, #11
   150a8:	2b1c      	cmp	r3, #28
   150aa:	dd00      	ble.n	150ae <__aeabi_ddiv+0xe2>
   150ac:	e1ac      	b.n	15408 <__aeabi_ddiv+0x43c>
   150ae:	221d      	movs	r2, #29
   150b0:	1ad3      	subs	r3, r2, r3
   150b2:	465a      	mov	r2, fp
   150b4:	0001      	movs	r1, r0
   150b6:	40da      	lsrs	r2, r3
   150b8:	3908      	subs	r1, #8
   150ba:	408e      	lsls	r6, r1
   150bc:	0013      	movs	r3, r2
   150be:	4333      	orrs	r3, r6
   150c0:	4699      	mov	r9, r3
   150c2:	465b      	mov	r3, fp
   150c4:	408b      	lsls	r3, r1
   150c6:	4698      	mov	r8, r3
   150c8:	2300      	movs	r3, #0
   150ca:	4c3c      	ldr	r4, [pc, #240]	; (151bc <__aeabi_ddiv+0x1f0>)
   150cc:	2600      	movs	r6, #0
   150ce:	1a24      	subs	r4, r4, r0
   150d0:	9303      	str	r3, [sp, #12]
   150d2:	e79f      	b.n	15014 <__aeabi_ddiv+0x48>
   150d4:	4651      	mov	r1, sl
   150d6:	465a      	mov	r2, fp
   150d8:	4311      	orrs	r1, r2
   150da:	d129      	bne.n	15130 <__aeabi_ddiv+0x164>
   150dc:	2200      	movs	r2, #0
   150de:	4693      	mov	fp, r2
   150e0:	3202      	adds	r2, #2
   150e2:	e7b1      	b.n	15048 <__aeabi_ddiv+0x7c>
   150e4:	4659      	mov	r1, fp
   150e6:	4301      	orrs	r1, r0
   150e8:	d01e      	beq.n	15128 <__aeabi_ddiv+0x15c>
   150ea:	465b      	mov	r3, fp
   150ec:	2b00      	cmp	r3, #0
   150ee:	d100      	bne.n	150f2 <__aeabi_ddiv+0x126>
   150f0:	e19e      	b.n	15430 <__aeabi_ddiv+0x464>
   150f2:	4658      	mov	r0, fp
   150f4:	f001 fabe 	bl	16674 <__clzsi2>
   150f8:	0003      	movs	r3, r0
   150fa:	3b0b      	subs	r3, #11
   150fc:	2b1c      	cmp	r3, #28
   150fe:	dd00      	ble.n	15102 <__aeabi_ddiv+0x136>
   15100:	e18f      	b.n	15422 <__aeabi_ddiv+0x456>
   15102:	0002      	movs	r2, r0
   15104:	4659      	mov	r1, fp
   15106:	3a08      	subs	r2, #8
   15108:	4091      	lsls	r1, r2
   1510a:	468b      	mov	fp, r1
   1510c:	211d      	movs	r1, #29
   1510e:	1acb      	subs	r3, r1, r3
   15110:	4651      	mov	r1, sl
   15112:	40d9      	lsrs	r1, r3
   15114:	000b      	movs	r3, r1
   15116:	4659      	mov	r1, fp
   15118:	430b      	orrs	r3, r1
   1511a:	4651      	mov	r1, sl
   1511c:	469b      	mov	fp, r3
   1511e:	4091      	lsls	r1, r2
   15120:	4b26      	ldr	r3, [pc, #152]	; (151bc <__aeabi_ddiv+0x1f0>)
   15122:	2200      	movs	r2, #0
   15124:	1a1b      	subs	r3, r3, r0
   15126:	e78f      	b.n	15048 <__aeabi_ddiv+0x7c>
   15128:	2300      	movs	r3, #0
   1512a:	2201      	movs	r2, #1
   1512c:	469b      	mov	fp, r3
   1512e:	e78b      	b.n	15048 <__aeabi_ddiv+0x7c>
   15130:	4651      	mov	r1, sl
   15132:	2203      	movs	r2, #3
   15134:	e788      	b.n	15048 <__aeabi_ddiv+0x7c>
   15136:	2300      	movs	r3, #0
   15138:	4698      	mov	r8, r3
   1513a:	3301      	adds	r3, #1
   1513c:	2604      	movs	r6, #4
   1513e:	2400      	movs	r4, #0
   15140:	9303      	str	r3, [sp, #12]
   15142:	e767      	b.n	15014 <__aeabi_ddiv+0x48>
   15144:	2303      	movs	r3, #3
   15146:	46b1      	mov	r9, r6
   15148:	9303      	str	r3, [sp, #12]
   1514a:	260c      	movs	r6, #12
   1514c:	e762      	b.n	15014 <__aeabi_ddiv+0x48>
   1514e:	2a03      	cmp	r2, #3
   15150:	d100      	bne.n	15154 <__aeabi_ddiv+0x188>
   15152:	e25c      	b.n	1560e <__aeabi_ddiv+0x642>
   15154:	9b01      	ldr	r3, [sp, #4]
   15156:	2a01      	cmp	r2, #1
   15158:	d000      	beq.n	1515c <__aeabi_ddiv+0x190>
   1515a:	e1e4      	b.n	15526 <__aeabi_ddiv+0x55a>
   1515c:	4013      	ands	r3, r2
   1515e:	469c      	mov	ip, r3
   15160:	2300      	movs	r3, #0
   15162:	2400      	movs	r4, #0
   15164:	2200      	movs	r2, #0
   15166:	4698      	mov	r8, r3
   15168:	2100      	movs	r1, #0
   1516a:	0312      	lsls	r2, r2, #12
   1516c:	0b13      	lsrs	r3, r2, #12
   1516e:	0d0a      	lsrs	r2, r1, #20
   15170:	0512      	lsls	r2, r2, #20
   15172:	431a      	orrs	r2, r3
   15174:	0523      	lsls	r3, r4, #20
   15176:	4c12      	ldr	r4, [pc, #72]	; (151c0 <__aeabi_ddiv+0x1f4>)
   15178:	4640      	mov	r0, r8
   1517a:	4022      	ands	r2, r4
   1517c:	4313      	orrs	r3, r2
   1517e:	4662      	mov	r2, ip
   15180:	005b      	lsls	r3, r3, #1
   15182:	07d2      	lsls	r2, r2, #31
   15184:	085b      	lsrs	r3, r3, #1
   15186:	4313      	orrs	r3, r2
   15188:	0019      	movs	r1, r3
   1518a:	b007      	add	sp, #28
   1518c:	bc3c      	pop	{r2, r3, r4, r5}
   1518e:	4690      	mov	r8, r2
   15190:	4699      	mov	r9, r3
   15192:	46a2      	mov	sl, r4
   15194:	46ab      	mov	fp, r5
   15196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15198:	2300      	movs	r3, #0
   1519a:	2280      	movs	r2, #128	; 0x80
   1519c:	469c      	mov	ip, r3
   1519e:	0312      	lsls	r2, r2, #12
   151a0:	4698      	mov	r8, r3
   151a2:	4c03      	ldr	r4, [pc, #12]	; (151b0 <__aeabi_ddiv+0x1e4>)
   151a4:	e7e0      	b.n	15168 <__aeabi_ddiv+0x19c>
   151a6:	2300      	movs	r3, #0
   151a8:	4c01      	ldr	r4, [pc, #4]	; (151b0 <__aeabi_ddiv+0x1e4>)
   151aa:	2200      	movs	r2, #0
   151ac:	4698      	mov	r8, r3
   151ae:	e7db      	b.n	15168 <__aeabi_ddiv+0x19c>
   151b0:	000007ff 	.word	0x000007ff
   151b4:	fffffc01 	.word	0xfffffc01
   151b8:	00018c34 	.word	0x00018c34
   151bc:	fffffc0d 	.word	0xfffffc0d
   151c0:	800fffff 	.word	0x800fffff
   151c4:	45d9      	cmp	r9, fp
   151c6:	d900      	bls.n	151ca <__aeabi_ddiv+0x1fe>
   151c8:	e139      	b.n	1543e <__aeabi_ddiv+0x472>
   151ca:	d100      	bne.n	151ce <__aeabi_ddiv+0x202>
   151cc:	e134      	b.n	15438 <__aeabi_ddiv+0x46c>
   151ce:	2300      	movs	r3, #0
   151d0:	4646      	mov	r6, r8
   151d2:	464d      	mov	r5, r9
   151d4:	469a      	mov	sl, r3
   151d6:	3c01      	subs	r4, #1
   151d8:	465b      	mov	r3, fp
   151da:	0e0a      	lsrs	r2, r1, #24
   151dc:	021b      	lsls	r3, r3, #8
   151de:	431a      	orrs	r2, r3
   151e0:	020b      	lsls	r3, r1, #8
   151e2:	0c17      	lsrs	r7, r2, #16
   151e4:	9303      	str	r3, [sp, #12]
   151e6:	0413      	lsls	r3, r2, #16
   151e8:	0c1b      	lsrs	r3, r3, #16
   151ea:	0039      	movs	r1, r7
   151ec:	0028      	movs	r0, r5
   151ee:	4690      	mov	r8, r2
   151f0:	9301      	str	r3, [sp, #4]
   151f2:	f7fe f999 	bl	13528 <__udivsi3>
   151f6:	0002      	movs	r2, r0
   151f8:	9b01      	ldr	r3, [sp, #4]
   151fa:	4683      	mov	fp, r0
   151fc:	435a      	muls	r2, r3
   151fe:	0028      	movs	r0, r5
   15200:	0039      	movs	r1, r7
   15202:	4691      	mov	r9, r2
   15204:	f7fe fa16 	bl	13634 <__aeabi_uidivmod>
   15208:	0c35      	lsrs	r5, r6, #16
   1520a:	0409      	lsls	r1, r1, #16
   1520c:	430d      	orrs	r5, r1
   1520e:	45a9      	cmp	r9, r5
   15210:	d90d      	bls.n	1522e <__aeabi_ddiv+0x262>
   15212:	465b      	mov	r3, fp
   15214:	4445      	add	r5, r8
   15216:	3b01      	subs	r3, #1
   15218:	45a8      	cmp	r8, r5
   1521a:	d900      	bls.n	1521e <__aeabi_ddiv+0x252>
   1521c:	e13a      	b.n	15494 <__aeabi_ddiv+0x4c8>
   1521e:	45a9      	cmp	r9, r5
   15220:	d800      	bhi.n	15224 <__aeabi_ddiv+0x258>
   15222:	e137      	b.n	15494 <__aeabi_ddiv+0x4c8>
   15224:	2302      	movs	r3, #2
   15226:	425b      	negs	r3, r3
   15228:	469c      	mov	ip, r3
   1522a:	4445      	add	r5, r8
   1522c:	44e3      	add	fp, ip
   1522e:	464b      	mov	r3, r9
   15230:	1aeb      	subs	r3, r5, r3
   15232:	0039      	movs	r1, r7
   15234:	0018      	movs	r0, r3
   15236:	9304      	str	r3, [sp, #16]
   15238:	f7fe f976 	bl	13528 <__udivsi3>
   1523c:	9b01      	ldr	r3, [sp, #4]
   1523e:	0005      	movs	r5, r0
   15240:	4343      	muls	r3, r0
   15242:	0039      	movs	r1, r7
   15244:	9804      	ldr	r0, [sp, #16]
   15246:	4699      	mov	r9, r3
   15248:	f7fe f9f4 	bl	13634 <__aeabi_uidivmod>
   1524c:	0433      	lsls	r3, r6, #16
   1524e:	0409      	lsls	r1, r1, #16
   15250:	0c1b      	lsrs	r3, r3, #16
   15252:	430b      	orrs	r3, r1
   15254:	4599      	cmp	r9, r3
   15256:	d909      	bls.n	1526c <__aeabi_ddiv+0x2a0>
   15258:	4443      	add	r3, r8
   1525a:	1e6a      	subs	r2, r5, #1
   1525c:	4598      	cmp	r8, r3
   1525e:	d900      	bls.n	15262 <__aeabi_ddiv+0x296>
   15260:	e11a      	b.n	15498 <__aeabi_ddiv+0x4cc>
   15262:	4599      	cmp	r9, r3
   15264:	d800      	bhi.n	15268 <__aeabi_ddiv+0x29c>
   15266:	e117      	b.n	15498 <__aeabi_ddiv+0x4cc>
   15268:	3d02      	subs	r5, #2
   1526a:	4443      	add	r3, r8
   1526c:	464a      	mov	r2, r9
   1526e:	1a9b      	subs	r3, r3, r2
   15270:	465a      	mov	r2, fp
   15272:	0412      	lsls	r2, r2, #16
   15274:	432a      	orrs	r2, r5
   15276:	9903      	ldr	r1, [sp, #12]
   15278:	4693      	mov	fp, r2
   1527a:	0c10      	lsrs	r0, r2, #16
   1527c:	0c0a      	lsrs	r2, r1, #16
   1527e:	4691      	mov	r9, r2
   15280:	0409      	lsls	r1, r1, #16
   15282:	465a      	mov	r2, fp
   15284:	0c09      	lsrs	r1, r1, #16
   15286:	464e      	mov	r6, r9
   15288:	000d      	movs	r5, r1
   1528a:	0412      	lsls	r2, r2, #16
   1528c:	0c12      	lsrs	r2, r2, #16
   1528e:	4345      	muls	r5, r0
   15290:	9105      	str	r1, [sp, #20]
   15292:	4351      	muls	r1, r2
   15294:	4372      	muls	r2, r6
   15296:	4370      	muls	r0, r6
   15298:	1952      	adds	r2, r2, r5
   1529a:	0c0e      	lsrs	r6, r1, #16
   1529c:	18b2      	adds	r2, r6, r2
   1529e:	4295      	cmp	r5, r2
   152a0:	d903      	bls.n	152aa <__aeabi_ddiv+0x2de>
   152a2:	2580      	movs	r5, #128	; 0x80
   152a4:	026d      	lsls	r5, r5, #9
   152a6:	46ac      	mov	ip, r5
   152a8:	4460      	add	r0, ip
   152aa:	0c15      	lsrs	r5, r2, #16
   152ac:	0409      	lsls	r1, r1, #16
   152ae:	0412      	lsls	r2, r2, #16
   152b0:	0c09      	lsrs	r1, r1, #16
   152b2:	1828      	adds	r0, r5, r0
   152b4:	1852      	adds	r2, r2, r1
   152b6:	4283      	cmp	r3, r0
   152b8:	d200      	bcs.n	152bc <__aeabi_ddiv+0x2f0>
   152ba:	e0ce      	b.n	1545a <__aeabi_ddiv+0x48e>
   152bc:	d100      	bne.n	152c0 <__aeabi_ddiv+0x2f4>
   152be:	e0c8      	b.n	15452 <__aeabi_ddiv+0x486>
   152c0:	1a1d      	subs	r5, r3, r0
   152c2:	4653      	mov	r3, sl
   152c4:	1a9e      	subs	r6, r3, r2
   152c6:	45b2      	cmp	sl, r6
   152c8:	4192      	sbcs	r2, r2
   152ca:	4252      	negs	r2, r2
   152cc:	1aab      	subs	r3, r5, r2
   152ce:	469a      	mov	sl, r3
   152d0:	4598      	cmp	r8, r3
   152d2:	d100      	bne.n	152d6 <__aeabi_ddiv+0x30a>
   152d4:	e117      	b.n	15506 <__aeabi_ddiv+0x53a>
   152d6:	0039      	movs	r1, r7
   152d8:	0018      	movs	r0, r3
   152da:	f7fe f925 	bl	13528 <__udivsi3>
   152de:	9b01      	ldr	r3, [sp, #4]
   152e0:	0005      	movs	r5, r0
   152e2:	4343      	muls	r3, r0
   152e4:	0039      	movs	r1, r7
   152e6:	4650      	mov	r0, sl
   152e8:	9304      	str	r3, [sp, #16]
   152ea:	f7fe f9a3 	bl	13634 <__aeabi_uidivmod>
   152ee:	9804      	ldr	r0, [sp, #16]
   152f0:	040b      	lsls	r3, r1, #16
   152f2:	0c31      	lsrs	r1, r6, #16
   152f4:	4319      	orrs	r1, r3
   152f6:	4288      	cmp	r0, r1
   152f8:	d909      	bls.n	1530e <__aeabi_ddiv+0x342>
   152fa:	4441      	add	r1, r8
   152fc:	1e6b      	subs	r3, r5, #1
   152fe:	4588      	cmp	r8, r1
   15300:	d900      	bls.n	15304 <__aeabi_ddiv+0x338>
   15302:	e107      	b.n	15514 <__aeabi_ddiv+0x548>
   15304:	4288      	cmp	r0, r1
   15306:	d800      	bhi.n	1530a <__aeabi_ddiv+0x33e>
   15308:	e104      	b.n	15514 <__aeabi_ddiv+0x548>
   1530a:	3d02      	subs	r5, #2
   1530c:	4441      	add	r1, r8
   1530e:	9b04      	ldr	r3, [sp, #16]
   15310:	1acb      	subs	r3, r1, r3
   15312:	0018      	movs	r0, r3
   15314:	0039      	movs	r1, r7
   15316:	9304      	str	r3, [sp, #16]
   15318:	f7fe f906 	bl	13528 <__udivsi3>
   1531c:	9b01      	ldr	r3, [sp, #4]
   1531e:	4682      	mov	sl, r0
   15320:	4343      	muls	r3, r0
   15322:	0039      	movs	r1, r7
   15324:	9804      	ldr	r0, [sp, #16]
   15326:	9301      	str	r3, [sp, #4]
   15328:	f7fe f984 	bl	13634 <__aeabi_uidivmod>
   1532c:	9801      	ldr	r0, [sp, #4]
   1532e:	040b      	lsls	r3, r1, #16
   15330:	0431      	lsls	r1, r6, #16
   15332:	0c09      	lsrs	r1, r1, #16
   15334:	4319      	orrs	r1, r3
   15336:	4288      	cmp	r0, r1
   15338:	d90d      	bls.n	15356 <__aeabi_ddiv+0x38a>
   1533a:	4653      	mov	r3, sl
   1533c:	4441      	add	r1, r8
   1533e:	3b01      	subs	r3, #1
   15340:	4588      	cmp	r8, r1
   15342:	d900      	bls.n	15346 <__aeabi_ddiv+0x37a>
   15344:	e0e8      	b.n	15518 <__aeabi_ddiv+0x54c>
   15346:	4288      	cmp	r0, r1
   15348:	d800      	bhi.n	1534c <__aeabi_ddiv+0x380>
   1534a:	e0e5      	b.n	15518 <__aeabi_ddiv+0x54c>
   1534c:	2302      	movs	r3, #2
   1534e:	425b      	negs	r3, r3
   15350:	469c      	mov	ip, r3
   15352:	4441      	add	r1, r8
   15354:	44e2      	add	sl, ip
   15356:	9b01      	ldr	r3, [sp, #4]
   15358:	042d      	lsls	r5, r5, #16
   1535a:	1ace      	subs	r6, r1, r3
   1535c:	4651      	mov	r1, sl
   1535e:	4329      	orrs	r1, r5
   15360:	9d05      	ldr	r5, [sp, #20]
   15362:	464f      	mov	r7, r9
   15364:	002a      	movs	r2, r5
   15366:	040b      	lsls	r3, r1, #16
   15368:	0c08      	lsrs	r0, r1, #16
   1536a:	0c1b      	lsrs	r3, r3, #16
   1536c:	435a      	muls	r2, r3
   1536e:	4345      	muls	r5, r0
   15370:	437b      	muls	r3, r7
   15372:	4378      	muls	r0, r7
   15374:	195b      	adds	r3, r3, r5
   15376:	0c17      	lsrs	r7, r2, #16
   15378:	18fb      	adds	r3, r7, r3
   1537a:	429d      	cmp	r5, r3
   1537c:	d903      	bls.n	15386 <__aeabi_ddiv+0x3ba>
   1537e:	2580      	movs	r5, #128	; 0x80
   15380:	026d      	lsls	r5, r5, #9
   15382:	46ac      	mov	ip, r5
   15384:	4460      	add	r0, ip
   15386:	0c1d      	lsrs	r5, r3, #16
   15388:	0412      	lsls	r2, r2, #16
   1538a:	041b      	lsls	r3, r3, #16
   1538c:	0c12      	lsrs	r2, r2, #16
   1538e:	1828      	adds	r0, r5, r0
   15390:	189b      	adds	r3, r3, r2
   15392:	4286      	cmp	r6, r0
   15394:	d200      	bcs.n	15398 <__aeabi_ddiv+0x3cc>
   15396:	e093      	b.n	154c0 <__aeabi_ddiv+0x4f4>
   15398:	d100      	bne.n	1539c <__aeabi_ddiv+0x3d0>
   1539a:	e08e      	b.n	154ba <__aeabi_ddiv+0x4ee>
   1539c:	2301      	movs	r3, #1
   1539e:	4319      	orrs	r1, r3
   153a0:	4ba0      	ldr	r3, [pc, #640]	; (15624 <__aeabi_ddiv+0x658>)
   153a2:	18e3      	adds	r3, r4, r3
   153a4:	2b00      	cmp	r3, #0
   153a6:	dc00      	bgt.n	153aa <__aeabi_ddiv+0x3de>
   153a8:	e099      	b.n	154de <__aeabi_ddiv+0x512>
   153aa:	074a      	lsls	r2, r1, #29
   153ac:	d000      	beq.n	153b0 <__aeabi_ddiv+0x3e4>
   153ae:	e09e      	b.n	154ee <__aeabi_ddiv+0x522>
   153b0:	465a      	mov	r2, fp
   153b2:	01d2      	lsls	r2, r2, #7
   153b4:	d506      	bpl.n	153c4 <__aeabi_ddiv+0x3f8>
   153b6:	465a      	mov	r2, fp
   153b8:	4b9b      	ldr	r3, [pc, #620]	; (15628 <__aeabi_ddiv+0x65c>)
   153ba:	401a      	ands	r2, r3
   153bc:	2380      	movs	r3, #128	; 0x80
   153be:	4693      	mov	fp, r2
   153c0:	00db      	lsls	r3, r3, #3
   153c2:	18e3      	adds	r3, r4, r3
   153c4:	4a99      	ldr	r2, [pc, #612]	; (1562c <__aeabi_ddiv+0x660>)
   153c6:	4293      	cmp	r3, r2
   153c8:	dd68      	ble.n	1549c <__aeabi_ddiv+0x4d0>
   153ca:	2301      	movs	r3, #1
   153cc:	9a02      	ldr	r2, [sp, #8]
   153ce:	4c98      	ldr	r4, [pc, #608]	; (15630 <__aeabi_ddiv+0x664>)
   153d0:	401a      	ands	r2, r3
   153d2:	2300      	movs	r3, #0
   153d4:	4694      	mov	ip, r2
   153d6:	4698      	mov	r8, r3
   153d8:	2200      	movs	r2, #0
   153da:	e6c5      	b.n	15168 <__aeabi_ddiv+0x19c>
   153dc:	2280      	movs	r2, #128	; 0x80
   153de:	464b      	mov	r3, r9
   153e0:	0312      	lsls	r2, r2, #12
   153e2:	4213      	tst	r3, r2
   153e4:	d00a      	beq.n	153fc <__aeabi_ddiv+0x430>
   153e6:	465b      	mov	r3, fp
   153e8:	4213      	tst	r3, r2
   153ea:	d106      	bne.n	153fa <__aeabi_ddiv+0x42e>
   153ec:	431a      	orrs	r2, r3
   153ee:	0312      	lsls	r2, r2, #12
   153f0:	0b12      	lsrs	r2, r2, #12
   153f2:	46ac      	mov	ip, r5
   153f4:	4688      	mov	r8, r1
   153f6:	4c8e      	ldr	r4, [pc, #568]	; (15630 <__aeabi_ddiv+0x664>)
   153f8:	e6b6      	b.n	15168 <__aeabi_ddiv+0x19c>
   153fa:	464b      	mov	r3, r9
   153fc:	431a      	orrs	r2, r3
   153fe:	0312      	lsls	r2, r2, #12
   15400:	0b12      	lsrs	r2, r2, #12
   15402:	46bc      	mov	ip, r7
   15404:	4c8a      	ldr	r4, [pc, #552]	; (15630 <__aeabi_ddiv+0x664>)
   15406:	e6af      	b.n	15168 <__aeabi_ddiv+0x19c>
   15408:	0003      	movs	r3, r0
   1540a:	465a      	mov	r2, fp
   1540c:	3b28      	subs	r3, #40	; 0x28
   1540e:	409a      	lsls	r2, r3
   15410:	2300      	movs	r3, #0
   15412:	4691      	mov	r9, r2
   15414:	4698      	mov	r8, r3
   15416:	e657      	b.n	150c8 <__aeabi_ddiv+0xfc>
   15418:	4658      	mov	r0, fp
   1541a:	f001 f92b 	bl	16674 <__clzsi2>
   1541e:	3020      	adds	r0, #32
   15420:	e640      	b.n	150a4 <__aeabi_ddiv+0xd8>
   15422:	0003      	movs	r3, r0
   15424:	4652      	mov	r2, sl
   15426:	3b28      	subs	r3, #40	; 0x28
   15428:	409a      	lsls	r2, r3
   1542a:	2100      	movs	r1, #0
   1542c:	4693      	mov	fp, r2
   1542e:	e677      	b.n	15120 <__aeabi_ddiv+0x154>
   15430:	f001 f920 	bl	16674 <__clzsi2>
   15434:	3020      	adds	r0, #32
   15436:	e65f      	b.n	150f8 <__aeabi_ddiv+0x12c>
   15438:	4588      	cmp	r8, r1
   1543a:	d200      	bcs.n	1543e <__aeabi_ddiv+0x472>
   1543c:	e6c7      	b.n	151ce <__aeabi_ddiv+0x202>
   1543e:	464b      	mov	r3, r9
   15440:	07de      	lsls	r6, r3, #31
   15442:	085d      	lsrs	r5, r3, #1
   15444:	4643      	mov	r3, r8
   15446:	085b      	lsrs	r3, r3, #1
   15448:	431e      	orrs	r6, r3
   1544a:	4643      	mov	r3, r8
   1544c:	07db      	lsls	r3, r3, #31
   1544e:	469a      	mov	sl, r3
   15450:	e6c2      	b.n	151d8 <__aeabi_ddiv+0x20c>
   15452:	2500      	movs	r5, #0
   15454:	4592      	cmp	sl, r2
   15456:	d300      	bcc.n	1545a <__aeabi_ddiv+0x48e>
   15458:	e733      	b.n	152c2 <__aeabi_ddiv+0x2f6>
   1545a:	9e03      	ldr	r6, [sp, #12]
   1545c:	4659      	mov	r1, fp
   1545e:	46b4      	mov	ip, r6
   15460:	44e2      	add	sl, ip
   15462:	45b2      	cmp	sl, r6
   15464:	41ad      	sbcs	r5, r5
   15466:	426d      	negs	r5, r5
   15468:	4445      	add	r5, r8
   1546a:	18eb      	adds	r3, r5, r3
   1546c:	3901      	subs	r1, #1
   1546e:	4598      	cmp	r8, r3
   15470:	d207      	bcs.n	15482 <__aeabi_ddiv+0x4b6>
   15472:	4298      	cmp	r0, r3
   15474:	d900      	bls.n	15478 <__aeabi_ddiv+0x4ac>
   15476:	e07f      	b.n	15578 <__aeabi_ddiv+0x5ac>
   15478:	d100      	bne.n	1547c <__aeabi_ddiv+0x4b0>
   1547a:	e0bc      	b.n	155f6 <__aeabi_ddiv+0x62a>
   1547c:	1a1d      	subs	r5, r3, r0
   1547e:	468b      	mov	fp, r1
   15480:	e71f      	b.n	152c2 <__aeabi_ddiv+0x2f6>
   15482:	4598      	cmp	r8, r3
   15484:	d1fa      	bne.n	1547c <__aeabi_ddiv+0x4b0>
   15486:	9d03      	ldr	r5, [sp, #12]
   15488:	4555      	cmp	r5, sl
   1548a:	d9f2      	bls.n	15472 <__aeabi_ddiv+0x4a6>
   1548c:	4643      	mov	r3, r8
   1548e:	468b      	mov	fp, r1
   15490:	1a1d      	subs	r5, r3, r0
   15492:	e716      	b.n	152c2 <__aeabi_ddiv+0x2f6>
   15494:	469b      	mov	fp, r3
   15496:	e6ca      	b.n	1522e <__aeabi_ddiv+0x262>
   15498:	0015      	movs	r5, r2
   1549a:	e6e7      	b.n	1526c <__aeabi_ddiv+0x2a0>
   1549c:	465a      	mov	r2, fp
   1549e:	08c9      	lsrs	r1, r1, #3
   154a0:	0752      	lsls	r2, r2, #29
   154a2:	430a      	orrs	r2, r1
   154a4:	055b      	lsls	r3, r3, #21
   154a6:	4690      	mov	r8, r2
   154a8:	0d5c      	lsrs	r4, r3, #21
   154aa:	465a      	mov	r2, fp
   154ac:	2301      	movs	r3, #1
   154ae:	9902      	ldr	r1, [sp, #8]
   154b0:	0252      	lsls	r2, r2, #9
   154b2:	4019      	ands	r1, r3
   154b4:	0b12      	lsrs	r2, r2, #12
   154b6:	468c      	mov	ip, r1
   154b8:	e656      	b.n	15168 <__aeabi_ddiv+0x19c>
   154ba:	2b00      	cmp	r3, #0
   154bc:	d100      	bne.n	154c0 <__aeabi_ddiv+0x4f4>
   154be:	e76f      	b.n	153a0 <__aeabi_ddiv+0x3d4>
   154c0:	4446      	add	r6, r8
   154c2:	1e4a      	subs	r2, r1, #1
   154c4:	45b0      	cmp	r8, r6
   154c6:	d929      	bls.n	1551c <__aeabi_ddiv+0x550>
   154c8:	0011      	movs	r1, r2
   154ca:	4286      	cmp	r6, r0
   154cc:	d000      	beq.n	154d0 <__aeabi_ddiv+0x504>
   154ce:	e765      	b.n	1539c <__aeabi_ddiv+0x3d0>
   154d0:	9a03      	ldr	r2, [sp, #12]
   154d2:	4293      	cmp	r3, r2
   154d4:	d000      	beq.n	154d8 <__aeabi_ddiv+0x50c>
   154d6:	e761      	b.n	1539c <__aeabi_ddiv+0x3d0>
   154d8:	e762      	b.n	153a0 <__aeabi_ddiv+0x3d4>
   154da:	2101      	movs	r1, #1
   154dc:	4249      	negs	r1, r1
   154de:	2001      	movs	r0, #1
   154e0:	1ac2      	subs	r2, r0, r3
   154e2:	2a38      	cmp	r2, #56	; 0x38
   154e4:	dd21      	ble.n	1552a <__aeabi_ddiv+0x55e>
   154e6:	9b02      	ldr	r3, [sp, #8]
   154e8:	4003      	ands	r3, r0
   154ea:	469c      	mov	ip, r3
   154ec:	e638      	b.n	15160 <__aeabi_ddiv+0x194>
   154ee:	220f      	movs	r2, #15
   154f0:	400a      	ands	r2, r1
   154f2:	2a04      	cmp	r2, #4
   154f4:	d100      	bne.n	154f8 <__aeabi_ddiv+0x52c>
   154f6:	e75b      	b.n	153b0 <__aeabi_ddiv+0x3e4>
   154f8:	000a      	movs	r2, r1
   154fa:	1d11      	adds	r1, r2, #4
   154fc:	4291      	cmp	r1, r2
   154fe:	4192      	sbcs	r2, r2
   15500:	4252      	negs	r2, r2
   15502:	4493      	add	fp, r2
   15504:	e754      	b.n	153b0 <__aeabi_ddiv+0x3e4>
   15506:	4b47      	ldr	r3, [pc, #284]	; (15624 <__aeabi_ddiv+0x658>)
   15508:	18e3      	adds	r3, r4, r3
   1550a:	2b00      	cmp	r3, #0
   1550c:	dde5      	ble.n	154da <__aeabi_ddiv+0x50e>
   1550e:	2201      	movs	r2, #1
   15510:	4252      	negs	r2, r2
   15512:	e7f2      	b.n	154fa <__aeabi_ddiv+0x52e>
   15514:	001d      	movs	r5, r3
   15516:	e6fa      	b.n	1530e <__aeabi_ddiv+0x342>
   15518:	469a      	mov	sl, r3
   1551a:	e71c      	b.n	15356 <__aeabi_ddiv+0x38a>
   1551c:	42b0      	cmp	r0, r6
   1551e:	d839      	bhi.n	15594 <__aeabi_ddiv+0x5c8>
   15520:	d06e      	beq.n	15600 <__aeabi_ddiv+0x634>
   15522:	0011      	movs	r1, r2
   15524:	e73a      	b.n	1539c <__aeabi_ddiv+0x3d0>
   15526:	9302      	str	r3, [sp, #8]
   15528:	e73a      	b.n	153a0 <__aeabi_ddiv+0x3d4>
   1552a:	2a1f      	cmp	r2, #31
   1552c:	dc3c      	bgt.n	155a8 <__aeabi_ddiv+0x5dc>
   1552e:	2320      	movs	r3, #32
   15530:	1a9b      	subs	r3, r3, r2
   15532:	000c      	movs	r4, r1
   15534:	4658      	mov	r0, fp
   15536:	4099      	lsls	r1, r3
   15538:	4098      	lsls	r0, r3
   1553a:	1e4b      	subs	r3, r1, #1
   1553c:	4199      	sbcs	r1, r3
   1553e:	465b      	mov	r3, fp
   15540:	40d4      	lsrs	r4, r2
   15542:	40d3      	lsrs	r3, r2
   15544:	4320      	orrs	r0, r4
   15546:	4308      	orrs	r0, r1
   15548:	001a      	movs	r2, r3
   1554a:	0743      	lsls	r3, r0, #29
   1554c:	d009      	beq.n	15562 <__aeabi_ddiv+0x596>
   1554e:	230f      	movs	r3, #15
   15550:	4003      	ands	r3, r0
   15552:	2b04      	cmp	r3, #4
   15554:	d005      	beq.n	15562 <__aeabi_ddiv+0x596>
   15556:	0001      	movs	r1, r0
   15558:	1d08      	adds	r0, r1, #4
   1555a:	4288      	cmp	r0, r1
   1555c:	419b      	sbcs	r3, r3
   1555e:	425b      	negs	r3, r3
   15560:	18d2      	adds	r2, r2, r3
   15562:	0213      	lsls	r3, r2, #8
   15564:	d53a      	bpl.n	155dc <__aeabi_ddiv+0x610>
   15566:	2301      	movs	r3, #1
   15568:	9a02      	ldr	r2, [sp, #8]
   1556a:	2401      	movs	r4, #1
   1556c:	401a      	ands	r2, r3
   1556e:	2300      	movs	r3, #0
   15570:	4694      	mov	ip, r2
   15572:	4698      	mov	r8, r3
   15574:	2200      	movs	r2, #0
   15576:	e5f7      	b.n	15168 <__aeabi_ddiv+0x19c>
   15578:	2102      	movs	r1, #2
   1557a:	4249      	negs	r1, r1
   1557c:	468c      	mov	ip, r1
   1557e:	9d03      	ldr	r5, [sp, #12]
   15580:	44e3      	add	fp, ip
   15582:	46ac      	mov	ip, r5
   15584:	44e2      	add	sl, ip
   15586:	45aa      	cmp	sl, r5
   15588:	41ad      	sbcs	r5, r5
   1558a:	426d      	negs	r5, r5
   1558c:	4445      	add	r5, r8
   1558e:	18ed      	adds	r5, r5, r3
   15590:	1a2d      	subs	r5, r5, r0
   15592:	e696      	b.n	152c2 <__aeabi_ddiv+0x2f6>
   15594:	1e8a      	subs	r2, r1, #2
   15596:	9903      	ldr	r1, [sp, #12]
   15598:	004d      	lsls	r5, r1, #1
   1559a:	428d      	cmp	r5, r1
   1559c:	4189      	sbcs	r1, r1
   1559e:	4249      	negs	r1, r1
   155a0:	4441      	add	r1, r8
   155a2:	1876      	adds	r6, r6, r1
   155a4:	9503      	str	r5, [sp, #12]
   155a6:	e78f      	b.n	154c8 <__aeabi_ddiv+0x4fc>
   155a8:	201f      	movs	r0, #31
   155aa:	4240      	negs	r0, r0
   155ac:	1ac3      	subs	r3, r0, r3
   155ae:	4658      	mov	r0, fp
   155b0:	40d8      	lsrs	r0, r3
   155b2:	0003      	movs	r3, r0
   155b4:	2a20      	cmp	r2, #32
   155b6:	d028      	beq.n	1560a <__aeabi_ddiv+0x63e>
   155b8:	2040      	movs	r0, #64	; 0x40
   155ba:	465d      	mov	r5, fp
   155bc:	1a82      	subs	r2, r0, r2
   155be:	4095      	lsls	r5, r2
   155c0:	4329      	orrs	r1, r5
   155c2:	1e4a      	subs	r2, r1, #1
   155c4:	4191      	sbcs	r1, r2
   155c6:	4319      	orrs	r1, r3
   155c8:	2307      	movs	r3, #7
   155ca:	2200      	movs	r2, #0
   155cc:	400b      	ands	r3, r1
   155ce:	d009      	beq.n	155e4 <__aeabi_ddiv+0x618>
   155d0:	230f      	movs	r3, #15
   155d2:	2200      	movs	r2, #0
   155d4:	400b      	ands	r3, r1
   155d6:	0008      	movs	r0, r1
   155d8:	2b04      	cmp	r3, #4
   155da:	d1bd      	bne.n	15558 <__aeabi_ddiv+0x58c>
   155dc:	0001      	movs	r1, r0
   155de:	0753      	lsls	r3, r2, #29
   155e0:	0252      	lsls	r2, r2, #9
   155e2:	0b12      	lsrs	r2, r2, #12
   155e4:	08c9      	lsrs	r1, r1, #3
   155e6:	4319      	orrs	r1, r3
   155e8:	2301      	movs	r3, #1
   155ea:	4688      	mov	r8, r1
   155ec:	9902      	ldr	r1, [sp, #8]
   155ee:	2400      	movs	r4, #0
   155f0:	4019      	ands	r1, r3
   155f2:	468c      	mov	ip, r1
   155f4:	e5b8      	b.n	15168 <__aeabi_ddiv+0x19c>
   155f6:	4552      	cmp	r2, sl
   155f8:	d8be      	bhi.n	15578 <__aeabi_ddiv+0x5ac>
   155fa:	468b      	mov	fp, r1
   155fc:	2500      	movs	r5, #0
   155fe:	e660      	b.n	152c2 <__aeabi_ddiv+0x2f6>
   15600:	9d03      	ldr	r5, [sp, #12]
   15602:	429d      	cmp	r5, r3
   15604:	d3c6      	bcc.n	15594 <__aeabi_ddiv+0x5c8>
   15606:	0011      	movs	r1, r2
   15608:	e762      	b.n	154d0 <__aeabi_ddiv+0x504>
   1560a:	2500      	movs	r5, #0
   1560c:	e7d8      	b.n	155c0 <__aeabi_ddiv+0x5f4>
   1560e:	2280      	movs	r2, #128	; 0x80
   15610:	465b      	mov	r3, fp
   15612:	0312      	lsls	r2, r2, #12
   15614:	431a      	orrs	r2, r3
   15616:	9b01      	ldr	r3, [sp, #4]
   15618:	0312      	lsls	r2, r2, #12
   1561a:	0b12      	lsrs	r2, r2, #12
   1561c:	469c      	mov	ip, r3
   1561e:	4688      	mov	r8, r1
   15620:	4c03      	ldr	r4, [pc, #12]	; (15630 <__aeabi_ddiv+0x664>)
   15622:	e5a1      	b.n	15168 <__aeabi_ddiv+0x19c>
   15624:	000003ff 	.word	0x000003ff
   15628:	feffffff 	.word	0xfeffffff
   1562c:	000007fe 	.word	0x000007fe
   15630:	000007ff 	.word	0x000007ff

00015634 <__eqdf2>:
   15634:	b5f0      	push	{r4, r5, r6, r7, lr}
   15636:	464f      	mov	r7, r9
   15638:	4646      	mov	r6, r8
   1563a:	46d6      	mov	lr, sl
   1563c:	005c      	lsls	r4, r3, #1
   1563e:	b5c0      	push	{r6, r7, lr}
   15640:	031f      	lsls	r7, r3, #12
   15642:	0fdb      	lsrs	r3, r3, #31
   15644:	469a      	mov	sl, r3
   15646:	4b17      	ldr	r3, [pc, #92]	; (156a4 <__eqdf2+0x70>)
   15648:	030e      	lsls	r6, r1, #12
   1564a:	004d      	lsls	r5, r1, #1
   1564c:	4684      	mov	ip, r0
   1564e:	4680      	mov	r8, r0
   15650:	0b36      	lsrs	r6, r6, #12
   15652:	0d6d      	lsrs	r5, r5, #21
   15654:	0fc9      	lsrs	r1, r1, #31
   15656:	4691      	mov	r9, r2
   15658:	0b3f      	lsrs	r7, r7, #12
   1565a:	0d64      	lsrs	r4, r4, #21
   1565c:	2001      	movs	r0, #1
   1565e:	429d      	cmp	r5, r3
   15660:	d008      	beq.n	15674 <__eqdf2+0x40>
   15662:	429c      	cmp	r4, r3
   15664:	d001      	beq.n	1566a <__eqdf2+0x36>
   15666:	42a5      	cmp	r5, r4
   15668:	d00b      	beq.n	15682 <__eqdf2+0x4e>
   1566a:	bc1c      	pop	{r2, r3, r4}
   1566c:	4690      	mov	r8, r2
   1566e:	4699      	mov	r9, r3
   15670:	46a2      	mov	sl, r4
   15672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15674:	4663      	mov	r3, ip
   15676:	4333      	orrs	r3, r6
   15678:	d1f7      	bne.n	1566a <__eqdf2+0x36>
   1567a:	42ac      	cmp	r4, r5
   1567c:	d1f5      	bne.n	1566a <__eqdf2+0x36>
   1567e:	433a      	orrs	r2, r7
   15680:	d1f3      	bne.n	1566a <__eqdf2+0x36>
   15682:	2001      	movs	r0, #1
   15684:	42be      	cmp	r6, r7
   15686:	d1f0      	bne.n	1566a <__eqdf2+0x36>
   15688:	45c8      	cmp	r8, r9
   1568a:	d1ee      	bne.n	1566a <__eqdf2+0x36>
   1568c:	4551      	cmp	r1, sl
   1568e:	d007      	beq.n	156a0 <__eqdf2+0x6c>
   15690:	2d00      	cmp	r5, #0
   15692:	d1ea      	bne.n	1566a <__eqdf2+0x36>
   15694:	4663      	mov	r3, ip
   15696:	431e      	orrs	r6, r3
   15698:	0030      	movs	r0, r6
   1569a:	1e46      	subs	r6, r0, #1
   1569c:	41b0      	sbcs	r0, r6
   1569e:	e7e4      	b.n	1566a <__eqdf2+0x36>
   156a0:	2000      	movs	r0, #0
   156a2:	e7e2      	b.n	1566a <__eqdf2+0x36>
   156a4:	000007ff 	.word	0x000007ff

000156a8 <__gedf2>:
   156a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   156aa:	4645      	mov	r5, r8
   156ac:	46de      	mov	lr, fp
   156ae:	4657      	mov	r7, sl
   156b0:	464e      	mov	r6, r9
   156b2:	b5e0      	push	{r5, r6, r7, lr}
   156b4:	031f      	lsls	r7, r3, #12
   156b6:	0b3d      	lsrs	r5, r7, #12
   156b8:	4f2c      	ldr	r7, [pc, #176]	; (1576c <__gedf2+0xc4>)
   156ba:	030e      	lsls	r6, r1, #12
   156bc:	004c      	lsls	r4, r1, #1
   156be:	46ab      	mov	fp, r5
   156c0:	005d      	lsls	r5, r3, #1
   156c2:	4684      	mov	ip, r0
   156c4:	0b36      	lsrs	r6, r6, #12
   156c6:	0d64      	lsrs	r4, r4, #21
   156c8:	0fc9      	lsrs	r1, r1, #31
   156ca:	4690      	mov	r8, r2
   156cc:	0d6d      	lsrs	r5, r5, #21
   156ce:	0fdb      	lsrs	r3, r3, #31
   156d0:	42bc      	cmp	r4, r7
   156d2:	d02a      	beq.n	1572a <__gedf2+0x82>
   156d4:	4f25      	ldr	r7, [pc, #148]	; (1576c <__gedf2+0xc4>)
   156d6:	42bd      	cmp	r5, r7
   156d8:	d02d      	beq.n	15736 <__gedf2+0x8e>
   156da:	2c00      	cmp	r4, #0
   156dc:	d10f      	bne.n	156fe <__gedf2+0x56>
   156de:	4330      	orrs	r0, r6
   156e0:	0007      	movs	r7, r0
   156e2:	4681      	mov	r9, r0
   156e4:	4278      	negs	r0, r7
   156e6:	4178      	adcs	r0, r7
   156e8:	b2c0      	uxtb	r0, r0
   156ea:	2d00      	cmp	r5, #0
   156ec:	d117      	bne.n	1571e <__gedf2+0x76>
   156ee:	465f      	mov	r7, fp
   156f0:	433a      	orrs	r2, r7
   156f2:	d114      	bne.n	1571e <__gedf2+0x76>
   156f4:	464b      	mov	r3, r9
   156f6:	2000      	movs	r0, #0
   156f8:	2b00      	cmp	r3, #0
   156fa:	d00a      	beq.n	15712 <__gedf2+0x6a>
   156fc:	e006      	b.n	1570c <__gedf2+0x64>
   156fe:	2d00      	cmp	r5, #0
   15700:	d102      	bne.n	15708 <__gedf2+0x60>
   15702:	4658      	mov	r0, fp
   15704:	4302      	orrs	r2, r0
   15706:	d001      	beq.n	1570c <__gedf2+0x64>
   15708:	4299      	cmp	r1, r3
   1570a:	d018      	beq.n	1573e <__gedf2+0x96>
   1570c:	4248      	negs	r0, r1
   1570e:	2101      	movs	r1, #1
   15710:	4308      	orrs	r0, r1
   15712:	bc3c      	pop	{r2, r3, r4, r5}
   15714:	4690      	mov	r8, r2
   15716:	4699      	mov	r9, r3
   15718:	46a2      	mov	sl, r4
   1571a:	46ab      	mov	fp, r5
   1571c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1571e:	2800      	cmp	r0, #0
   15720:	d0f2      	beq.n	15708 <__gedf2+0x60>
   15722:	2001      	movs	r0, #1
   15724:	3b01      	subs	r3, #1
   15726:	4318      	orrs	r0, r3
   15728:	e7f3      	b.n	15712 <__gedf2+0x6a>
   1572a:	0037      	movs	r7, r6
   1572c:	4307      	orrs	r7, r0
   1572e:	d0d1      	beq.n	156d4 <__gedf2+0x2c>
   15730:	2002      	movs	r0, #2
   15732:	4240      	negs	r0, r0
   15734:	e7ed      	b.n	15712 <__gedf2+0x6a>
   15736:	465f      	mov	r7, fp
   15738:	4317      	orrs	r7, r2
   1573a:	d0ce      	beq.n	156da <__gedf2+0x32>
   1573c:	e7f8      	b.n	15730 <__gedf2+0x88>
   1573e:	42ac      	cmp	r4, r5
   15740:	dce4      	bgt.n	1570c <__gedf2+0x64>
   15742:	da03      	bge.n	1574c <__gedf2+0xa4>
   15744:	1e48      	subs	r0, r1, #1
   15746:	2101      	movs	r1, #1
   15748:	4308      	orrs	r0, r1
   1574a:	e7e2      	b.n	15712 <__gedf2+0x6a>
   1574c:	455e      	cmp	r6, fp
   1574e:	d8dd      	bhi.n	1570c <__gedf2+0x64>
   15750:	d006      	beq.n	15760 <__gedf2+0xb8>
   15752:	2000      	movs	r0, #0
   15754:	455e      	cmp	r6, fp
   15756:	d2dc      	bcs.n	15712 <__gedf2+0x6a>
   15758:	2301      	movs	r3, #1
   1575a:	1e48      	subs	r0, r1, #1
   1575c:	4318      	orrs	r0, r3
   1575e:	e7d8      	b.n	15712 <__gedf2+0x6a>
   15760:	45c4      	cmp	ip, r8
   15762:	d8d3      	bhi.n	1570c <__gedf2+0x64>
   15764:	2000      	movs	r0, #0
   15766:	45c4      	cmp	ip, r8
   15768:	d3f6      	bcc.n	15758 <__gedf2+0xb0>
   1576a:	e7d2      	b.n	15712 <__gedf2+0x6a>
   1576c:	000007ff 	.word	0x000007ff

00015770 <__ledf2>:
   15770:	b5f0      	push	{r4, r5, r6, r7, lr}
   15772:	464e      	mov	r6, r9
   15774:	4645      	mov	r5, r8
   15776:	46de      	mov	lr, fp
   15778:	4657      	mov	r7, sl
   1577a:	005c      	lsls	r4, r3, #1
   1577c:	b5e0      	push	{r5, r6, r7, lr}
   1577e:	031f      	lsls	r7, r3, #12
   15780:	0fdb      	lsrs	r3, r3, #31
   15782:	4699      	mov	r9, r3
   15784:	4b2a      	ldr	r3, [pc, #168]	; (15830 <__ledf2+0xc0>)
   15786:	030e      	lsls	r6, r1, #12
   15788:	004d      	lsls	r5, r1, #1
   1578a:	0fc9      	lsrs	r1, r1, #31
   1578c:	4684      	mov	ip, r0
   1578e:	0b36      	lsrs	r6, r6, #12
   15790:	0d6d      	lsrs	r5, r5, #21
   15792:	468b      	mov	fp, r1
   15794:	4690      	mov	r8, r2
   15796:	0b3f      	lsrs	r7, r7, #12
   15798:	0d64      	lsrs	r4, r4, #21
   1579a:	429d      	cmp	r5, r3
   1579c:	d020      	beq.n	157e0 <__ledf2+0x70>
   1579e:	4b24      	ldr	r3, [pc, #144]	; (15830 <__ledf2+0xc0>)
   157a0:	429c      	cmp	r4, r3
   157a2:	d022      	beq.n	157ea <__ledf2+0x7a>
   157a4:	2d00      	cmp	r5, #0
   157a6:	d112      	bne.n	157ce <__ledf2+0x5e>
   157a8:	4330      	orrs	r0, r6
   157aa:	4243      	negs	r3, r0
   157ac:	4143      	adcs	r3, r0
   157ae:	b2db      	uxtb	r3, r3
   157b0:	2c00      	cmp	r4, #0
   157b2:	d01f      	beq.n	157f4 <__ledf2+0x84>
   157b4:	2b00      	cmp	r3, #0
   157b6:	d00c      	beq.n	157d2 <__ledf2+0x62>
   157b8:	464b      	mov	r3, r9
   157ba:	2001      	movs	r0, #1
   157bc:	3b01      	subs	r3, #1
   157be:	4303      	orrs	r3, r0
   157c0:	0018      	movs	r0, r3
   157c2:	bc3c      	pop	{r2, r3, r4, r5}
   157c4:	4690      	mov	r8, r2
   157c6:	4699      	mov	r9, r3
   157c8:	46a2      	mov	sl, r4
   157ca:	46ab      	mov	fp, r5
   157cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157ce:	2c00      	cmp	r4, #0
   157d0:	d016      	beq.n	15800 <__ledf2+0x90>
   157d2:	45cb      	cmp	fp, r9
   157d4:	d017      	beq.n	15806 <__ledf2+0x96>
   157d6:	465b      	mov	r3, fp
   157d8:	4259      	negs	r1, r3
   157da:	2301      	movs	r3, #1
   157dc:	430b      	orrs	r3, r1
   157de:	e7ef      	b.n	157c0 <__ledf2+0x50>
   157e0:	0031      	movs	r1, r6
   157e2:	2302      	movs	r3, #2
   157e4:	4301      	orrs	r1, r0
   157e6:	d1eb      	bne.n	157c0 <__ledf2+0x50>
   157e8:	e7d9      	b.n	1579e <__ledf2+0x2e>
   157ea:	0039      	movs	r1, r7
   157ec:	2302      	movs	r3, #2
   157ee:	4311      	orrs	r1, r2
   157f0:	d1e6      	bne.n	157c0 <__ledf2+0x50>
   157f2:	e7d7      	b.n	157a4 <__ledf2+0x34>
   157f4:	433a      	orrs	r2, r7
   157f6:	d1dd      	bne.n	157b4 <__ledf2+0x44>
   157f8:	2300      	movs	r3, #0
   157fa:	2800      	cmp	r0, #0
   157fc:	d0e0      	beq.n	157c0 <__ledf2+0x50>
   157fe:	e7ea      	b.n	157d6 <__ledf2+0x66>
   15800:	433a      	orrs	r2, r7
   15802:	d1e6      	bne.n	157d2 <__ledf2+0x62>
   15804:	e7e7      	b.n	157d6 <__ledf2+0x66>
   15806:	42a5      	cmp	r5, r4
   15808:	dce5      	bgt.n	157d6 <__ledf2+0x66>
   1580a:	db05      	blt.n	15818 <__ledf2+0xa8>
   1580c:	42be      	cmp	r6, r7
   1580e:	d8e2      	bhi.n	157d6 <__ledf2+0x66>
   15810:	d007      	beq.n	15822 <__ledf2+0xb2>
   15812:	2300      	movs	r3, #0
   15814:	42be      	cmp	r6, r7
   15816:	d2d3      	bcs.n	157c0 <__ledf2+0x50>
   15818:	4659      	mov	r1, fp
   1581a:	2301      	movs	r3, #1
   1581c:	3901      	subs	r1, #1
   1581e:	430b      	orrs	r3, r1
   15820:	e7ce      	b.n	157c0 <__ledf2+0x50>
   15822:	45c4      	cmp	ip, r8
   15824:	d8d7      	bhi.n	157d6 <__ledf2+0x66>
   15826:	2300      	movs	r3, #0
   15828:	45c4      	cmp	ip, r8
   1582a:	d3f5      	bcc.n	15818 <__ledf2+0xa8>
   1582c:	e7c8      	b.n	157c0 <__ledf2+0x50>
   1582e:	46c0      	nop			; (mov r8, r8)
   15830:	000007ff 	.word	0x000007ff

00015834 <__aeabi_dmul>:
   15834:	b5f0      	push	{r4, r5, r6, r7, lr}
   15836:	4657      	mov	r7, sl
   15838:	4645      	mov	r5, r8
   1583a:	46de      	mov	lr, fp
   1583c:	464e      	mov	r6, r9
   1583e:	b5e0      	push	{r5, r6, r7, lr}
   15840:	030c      	lsls	r4, r1, #12
   15842:	4698      	mov	r8, r3
   15844:	004e      	lsls	r6, r1, #1
   15846:	0b23      	lsrs	r3, r4, #12
   15848:	b087      	sub	sp, #28
   1584a:	0007      	movs	r7, r0
   1584c:	4692      	mov	sl, r2
   1584e:	469b      	mov	fp, r3
   15850:	0d76      	lsrs	r6, r6, #21
   15852:	0fcd      	lsrs	r5, r1, #31
   15854:	2e00      	cmp	r6, #0
   15856:	d06b      	beq.n	15930 <__aeabi_dmul+0xfc>
   15858:	4b6d      	ldr	r3, [pc, #436]	; (15a10 <__aeabi_dmul+0x1dc>)
   1585a:	429e      	cmp	r6, r3
   1585c:	d035      	beq.n	158ca <__aeabi_dmul+0x96>
   1585e:	2480      	movs	r4, #128	; 0x80
   15860:	465b      	mov	r3, fp
   15862:	0f42      	lsrs	r2, r0, #29
   15864:	0424      	lsls	r4, r4, #16
   15866:	00db      	lsls	r3, r3, #3
   15868:	4314      	orrs	r4, r2
   1586a:	431c      	orrs	r4, r3
   1586c:	00c3      	lsls	r3, r0, #3
   1586e:	4699      	mov	r9, r3
   15870:	4b68      	ldr	r3, [pc, #416]	; (15a14 <__aeabi_dmul+0x1e0>)
   15872:	46a3      	mov	fp, r4
   15874:	469c      	mov	ip, r3
   15876:	2300      	movs	r3, #0
   15878:	2700      	movs	r7, #0
   1587a:	4466      	add	r6, ip
   1587c:	9302      	str	r3, [sp, #8]
   1587e:	4643      	mov	r3, r8
   15880:	031c      	lsls	r4, r3, #12
   15882:	005a      	lsls	r2, r3, #1
   15884:	0fdb      	lsrs	r3, r3, #31
   15886:	4650      	mov	r0, sl
   15888:	0b24      	lsrs	r4, r4, #12
   1588a:	0d52      	lsrs	r2, r2, #21
   1588c:	4698      	mov	r8, r3
   1588e:	d100      	bne.n	15892 <__aeabi_dmul+0x5e>
   15890:	e076      	b.n	15980 <__aeabi_dmul+0x14c>
   15892:	4b5f      	ldr	r3, [pc, #380]	; (15a10 <__aeabi_dmul+0x1dc>)
   15894:	429a      	cmp	r2, r3
   15896:	d06d      	beq.n	15974 <__aeabi_dmul+0x140>
   15898:	2380      	movs	r3, #128	; 0x80
   1589a:	0f41      	lsrs	r1, r0, #29
   1589c:	041b      	lsls	r3, r3, #16
   1589e:	430b      	orrs	r3, r1
   158a0:	495c      	ldr	r1, [pc, #368]	; (15a14 <__aeabi_dmul+0x1e0>)
   158a2:	00e4      	lsls	r4, r4, #3
   158a4:	468c      	mov	ip, r1
   158a6:	431c      	orrs	r4, r3
   158a8:	00c3      	lsls	r3, r0, #3
   158aa:	2000      	movs	r0, #0
   158ac:	4462      	add	r2, ip
   158ae:	4641      	mov	r1, r8
   158b0:	18b6      	adds	r6, r6, r2
   158b2:	4069      	eors	r1, r5
   158b4:	1c72      	adds	r2, r6, #1
   158b6:	9101      	str	r1, [sp, #4]
   158b8:	4694      	mov	ip, r2
   158ba:	4307      	orrs	r7, r0
   158bc:	2f0f      	cmp	r7, #15
   158be:	d900      	bls.n	158c2 <__aeabi_dmul+0x8e>
   158c0:	e0b0      	b.n	15a24 <__aeabi_dmul+0x1f0>
   158c2:	4a55      	ldr	r2, [pc, #340]	; (15a18 <__aeabi_dmul+0x1e4>)
   158c4:	00bf      	lsls	r7, r7, #2
   158c6:	59d2      	ldr	r2, [r2, r7]
   158c8:	4697      	mov	pc, r2
   158ca:	465b      	mov	r3, fp
   158cc:	4303      	orrs	r3, r0
   158ce:	4699      	mov	r9, r3
   158d0:	d000      	beq.n	158d4 <__aeabi_dmul+0xa0>
   158d2:	e087      	b.n	159e4 <__aeabi_dmul+0x1b0>
   158d4:	2300      	movs	r3, #0
   158d6:	469b      	mov	fp, r3
   158d8:	3302      	adds	r3, #2
   158da:	2708      	movs	r7, #8
   158dc:	9302      	str	r3, [sp, #8]
   158de:	e7ce      	b.n	1587e <__aeabi_dmul+0x4a>
   158e0:	4642      	mov	r2, r8
   158e2:	9201      	str	r2, [sp, #4]
   158e4:	2802      	cmp	r0, #2
   158e6:	d067      	beq.n	159b8 <__aeabi_dmul+0x184>
   158e8:	2803      	cmp	r0, #3
   158ea:	d100      	bne.n	158ee <__aeabi_dmul+0xba>
   158ec:	e20e      	b.n	15d0c <__aeabi_dmul+0x4d8>
   158ee:	2801      	cmp	r0, #1
   158f0:	d000      	beq.n	158f4 <__aeabi_dmul+0xc0>
   158f2:	e162      	b.n	15bba <__aeabi_dmul+0x386>
   158f4:	2300      	movs	r3, #0
   158f6:	2400      	movs	r4, #0
   158f8:	2200      	movs	r2, #0
   158fa:	4699      	mov	r9, r3
   158fc:	9901      	ldr	r1, [sp, #4]
   158fe:	4001      	ands	r1, r0
   15900:	b2cd      	uxtb	r5, r1
   15902:	2100      	movs	r1, #0
   15904:	0312      	lsls	r2, r2, #12
   15906:	0d0b      	lsrs	r3, r1, #20
   15908:	0b12      	lsrs	r2, r2, #12
   1590a:	051b      	lsls	r3, r3, #20
   1590c:	4313      	orrs	r3, r2
   1590e:	4a43      	ldr	r2, [pc, #268]	; (15a1c <__aeabi_dmul+0x1e8>)
   15910:	0524      	lsls	r4, r4, #20
   15912:	4013      	ands	r3, r2
   15914:	431c      	orrs	r4, r3
   15916:	0064      	lsls	r4, r4, #1
   15918:	07ed      	lsls	r5, r5, #31
   1591a:	0864      	lsrs	r4, r4, #1
   1591c:	432c      	orrs	r4, r5
   1591e:	4648      	mov	r0, r9
   15920:	0021      	movs	r1, r4
   15922:	b007      	add	sp, #28
   15924:	bc3c      	pop	{r2, r3, r4, r5}
   15926:	4690      	mov	r8, r2
   15928:	4699      	mov	r9, r3
   1592a:	46a2      	mov	sl, r4
   1592c:	46ab      	mov	fp, r5
   1592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15930:	4303      	orrs	r3, r0
   15932:	4699      	mov	r9, r3
   15934:	d04f      	beq.n	159d6 <__aeabi_dmul+0x1a2>
   15936:	465b      	mov	r3, fp
   15938:	2b00      	cmp	r3, #0
   1593a:	d100      	bne.n	1593e <__aeabi_dmul+0x10a>
   1593c:	e189      	b.n	15c52 <__aeabi_dmul+0x41e>
   1593e:	4658      	mov	r0, fp
   15940:	f000 fe98 	bl	16674 <__clzsi2>
   15944:	0003      	movs	r3, r0
   15946:	3b0b      	subs	r3, #11
   15948:	2b1c      	cmp	r3, #28
   1594a:	dd00      	ble.n	1594e <__aeabi_dmul+0x11a>
   1594c:	e17a      	b.n	15c44 <__aeabi_dmul+0x410>
   1594e:	221d      	movs	r2, #29
   15950:	1ad3      	subs	r3, r2, r3
   15952:	003a      	movs	r2, r7
   15954:	0001      	movs	r1, r0
   15956:	465c      	mov	r4, fp
   15958:	40da      	lsrs	r2, r3
   1595a:	3908      	subs	r1, #8
   1595c:	408c      	lsls	r4, r1
   1595e:	0013      	movs	r3, r2
   15960:	408f      	lsls	r7, r1
   15962:	4323      	orrs	r3, r4
   15964:	469b      	mov	fp, r3
   15966:	46b9      	mov	r9, r7
   15968:	2300      	movs	r3, #0
   1596a:	4e2d      	ldr	r6, [pc, #180]	; (15a20 <__aeabi_dmul+0x1ec>)
   1596c:	2700      	movs	r7, #0
   1596e:	1a36      	subs	r6, r6, r0
   15970:	9302      	str	r3, [sp, #8]
   15972:	e784      	b.n	1587e <__aeabi_dmul+0x4a>
   15974:	4653      	mov	r3, sl
   15976:	4323      	orrs	r3, r4
   15978:	d12a      	bne.n	159d0 <__aeabi_dmul+0x19c>
   1597a:	2400      	movs	r4, #0
   1597c:	2002      	movs	r0, #2
   1597e:	e796      	b.n	158ae <__aeabi_dmul+0x7a>
   15980:	4653      	mov	r3, sl
   15982:	4323      	orrs	r3, r4
   15984:	d020      	beq.n	159c8 <__aeabi_dmul+0x194>
   15986:	2c00      	cmp	r4, #0
   15988:	d100      	bne.n	1598c <__aeabi_dmul+0x158>
   1598a:	e157      	b.n	15c3c <__aeabi_dmul+0x408>
   1598c:	0020      	movs	r0, r4
   1598e:	f000 fe71 	bl	16674 <__clzsi2>
   15992:	0003      	movs	r3, r0
   15994:	3b0b      	subs	r3, #11
   15996:	2b1c      	cmp	r3, #28
   15998:	dd00      	ble.n	1599c <__aeabi_dmul+0x168>
   1599a:	e149      	b.n	15c30 <__aeabi_dmul+0x3fc>
   1599c:	211d      	movs	r1, #29
   1599e:	1acb      	subs	r3, r1, r3
   159a0:	4651      	mov	r1, sl
   159a2:	0002      	movs	r2, r0
   159a4:	40d9      	lsrs	r1, r3
   159a6:	4653      	mov	r3, sl
   159a8:	3a08      	subs	r2, #8
   159aa:	4094      	lsls	r4, r2
   159ac:	4093      	lsls	r3, r2
   159ae:	430c      	orrs	r4, r1
   159b0:	4a1b      	ldr	r2, [pc, #108]	; (15a20 <__aeabi_dmul+0x1ec>)
   159b2:	1a12      	subs	r2, r2, r0
   159b4:	2000      	movs	r0, #0
   159b6:	e77a      	b.n	158ae <__aeabi_dmul+0x7a>
   159b8:	2501      	movs	r5, #1
   159ba:	9b01      	ldr	r3, [sp, #4]
   159bc:	4c14      	ldr	r4, [pc, #80]	; (15a10 <__aeabi_dmul+0x1dc>)
   159be:	401d      	ands	r5, r3
   159c0:	2300      	movs	r3, #0
   159c2:	2200      	movs	r2, #0
   159c4:	4699      	mov	r9, r3
   159c6:	e79c      	b.n	15902 <__aeabi_dmul+0xce>
   159c8:	2400      	movs	r4, #0
   159ca:	2200      	movs	r2, #0
   159cc:	2001      	movs	r0, #1
   159ce:	e76e      	b.n	158ae <__aeabi_dmul+0x7a>
   159d0:	4653      	mov	r3, sl
   159d2:	2003      	movs	r0, #3
   159d4:	e76b      	b.n	158ae <__aeabi_dmul+0x7a>
   159d6:	2300      	movs	r3, #0
   159d8:	469b      	mov	fp, r3
   159da:	3301      	adds	r3, #1
   159dc:	2704      	movs	r7, #4
   159de:	2600      	movs	r6, #0
   159e0:	9302      	str	r3, [sp, #8]
   159e2:	e74c      	b.n	1587e <__aeabi_dmul+0x4a>
   159e4:	2303      	movs	r3, #3
   159e6:	4681      	mov	r9, r0
   159e8:	270c      	movs	r7, #12
   159ea:	9302      	str	r3, [sp, #8]
   159ec:	e747      	b.n	1587e <__aeabi_dmul+0x4a>
   159ee:	2280      	movs	r2, #128	; 0x80
   159f0:	2300      	movs	r3, #0
   159f2:	2500      	movs	r5, #0
   159f4:	0312      	lsls	r2, r2, #12
   159f6:	4699      	mov	r9, r3
   159f8:	4c05      	ldr	r4, [pc, #20]	; (15a10 <__aeabi_dmul+0x1dc>)
   159fa:	e782      	b.n	15902 <__aeabi_dmul+0xce>
   159fc:	465c      	mov	r4, fp
   159fe:	464b      	mov	r3, r9
   15a00:	9802      	ldr	r0, [sp, #8]
   15a02:	e76f      	b.n	158e4 <__aeabi_dmul+0xb0>
   15a04:	465c      	mov	r4, fp
   15a06:	464b      	mov	r3, r9
   15a08:	9501      	str	r5, [sp, #4]
   15a0a:	9802      	ldr	r0, [sp, #8]
   15a0c:	e76a      	b.n	158e4 <__aeabi_dmul+0xb0>
   15a0e:	46c0      	nop			; (mov r8, r8)
   15a10:	000007ff 	.word	0x000007ff
   15a14:	fffffc01 	.word	0xfffffc01
   15a18:	00018c74 	.word	0x00018c74
   15a1c:	800fffff 	.word	0x800fffff
   15a20:	fffffc0d 	.word	0xfffffc0d
   15a24:	464a      	mov	r2, r9
   15a26:	4649      	mov	r1, r9
   15a28:	0c17      	lsrs	r7, r2, #16
   15a2a:	0c1a      	lsrs	r2, r3, #16
   15a2c:	041b      	lsls	r3, r3, #16
   15a2e:	0c1b      	lsrs	r3, r3, #16
   15a30:	0408      	lsls	r0, r1, #16
   15a32:	0019      	movs	r1, r3
   15a34:	0c00      	lsrs	r0, r0, #16
   15a36:	4341      	muls	r1, r0
   15a38:	0015      	movs	r5, r2
   15a3a:	4688      	mov	r8, r1
   15a3c:	0019      	movs	r1, r3
   15a3e:	437d      	muls	r5, r7
   15a40:	4379      	muls	r1, r7
   15a42:	9503      	str	r5, [sp, #12]
   15a44:	4689      	mov	r9, r1
   15a46:	0029      	movs	r1, r5
   15a48:	0015      	movs	r5, r2
   15a4a:	4345      	muls	r5, r0
   15a4c:	444d      	add	r5, r9
   15a4e:	9502      	str	r5, [sp, #8]
   15a50:	4645      	mov	r5, r8
   15a52:	0c2d      	lsrs	r5, r5, #16
   15a54:	46aa      	mov	sl, r5
   15a56:	9d02      	ldr	r5, [sp, #8]
   15a58:	4455      	add	r5, sl
   15a5a:	45a9      	cmp	r9, r5
   15a5c:	d906      	bls.n	15a6c <__aeabi_dmul+0x238>
   15a5e:	468a      	mov	sl, r1
   15a60:	2180      	movs	r1, #128	; 0x80
   15a62:	0249      	lsls	r1, r1, #9
   15a64:	4689      	mov	r9, r1
   15a66:	44ca      	add	sl, r9
   15a68:	4651      	mov	r1, sl
   15a6a:	9103      	str	r1, [sp, #12]
   15a6c:	0c29      	lsrs	r1, r5, #16
   15a6e:	9104      	str	r1, [sp, #16]
   15a70:	4641      	mov	r1, r8
   15a72:	0409      	lsls	r1, r1, #16
   15a74:	042d      	lsls	r5, r5, #16
   15a76:	0c09      	lsrs	r1, r1, #16
   15a78:	4688      	mov	r8, r1
   15a7a:	0029      	movs	r1, r5
   15a7c:	0c25      	lsrs	r5, r4, #16
   15a7e:	0424      	lsls	r4, r4, #16
   15a80:	4441      	add	r1, r8
   15a82:	0c24      	lsrs	r4, r4, #16
   15a84:	9105      	str	r1, [sp, #20]
   15a86:	0021      	movs	r1, r4
   15a88:	4341      	muls	r1, r0
   15a8a:	4688      	mov	r8, r1
   15a8c:	0021      	movs	r1, r4
   15a8e:	4379      	muls	r1, r7
   15a90:	468a      	mov	sl, r1
   15a92:	4368      	muls	r0, r5
   15a94:	4641      	mov	r1, r8
   15a96:	4450      	add	r0, sl
   15a98:	4681      	mov	r9, r0
   15a9a:	0c08      	lsrs	r0, r1, #16
   15a9c:	4448      	add	r0, r9
   15a9e:	436f      	muls	r7, r5
   15aa0:	4582      	cmp	sl, r0
   15aa2:	d903      	bls.n	15aac <__aeabi_dmul+0x278>
   15aa4:	2180      	movs	r1, #128	; 0x80
   15aa6:	0249      	lsls	r1, r1, #9
   15aa8:	4689      	mov	r9, r1
   15aaa:	444f      	add	r7, r9
   15aac:	0c01      	lsrs	r1, r0, #16
   15aae:	4689      	mov	r9, r1
   15ab0:	0039      	movs	r1, r7
   15ab2:	4449      	add	r1, r9
   15ab4:	9102      	str	r1, [sp, #8]
   15ab6:	4641      	mov	r1, r8
   15ab8:	040f      	lsls	r7, r1, #16
   15aba:	9904      	ldr	r1, [sp, #16]
   15abc:	0c3f      	lsrs	r7, r7, #16
   15abe:	4688      	mov	r8, r1
   15ac0:	0400      	lsls	r0, r0, #16
   15ac2:	19c0      	adds	r0, r0, r7
   15ac4:	4480      	add	r8, r0
   15ac6:	4641      	mov	r1, r8
   15ac8:	9104      	str	r1, [sp, #16]
   15aca:	4659      	mov	r1, fp
   15acc:	0c0f      	lsrs	r7, r1, #16
   15ace:	0409      	lsls	r1, r1, #16
   15ad0:	0c09      	lsrs	r1, r1, #16
   15ad2:	4688      	mov	r8, r1
   15ad4:	4359      	muls	r1, r3
   15ad6:	468a      	mov	sl, r1
   15ad8:	0039      	movs	r1, r7
   15ada:	4351      	muls	r1, r2
   15adc:	4689      	mov	r9, r1
   15ade:	4641      	mov	r1, r8
   15ae0:	434a      	muls	r2, r1
   15ae2:	4651      	mov	r1, sl
   15ae4:	0c09      	lsrs	r1, r1, #16
   15ae6:	468b      	mov	fp, r1
   15ae8:	437b      	muls	r3, r7
   15aea:	18d2      	adds	r2, r2, r3
   15aec:	445a      	add	r2, fp
   15aee:	4293      	cmp	r3, r2
   15af0:	d903      	bls.n	15afa <__aeabi_dmul+0x2c6>
   15af2:	2380      	movs	r3, #128	; 0x80
   15af4:	025b      	lsls	r3, r3, #9
   15af6:	469b      	mov	fp, r3
   15af8:	44d9      	add	r9, fp
   15afa:	4651      	mov	r1, sl
   15afc:	0409      	lsls	r1, r1, #16
   15afe:	0c09      	lsrs	r1, r1, #16
   15b00:	468a      	mov	sl, r1
   15b02:	4641      	mov	r1, r8
   15b04:	4361      	muls	r1, r4
   15b06:	437c      	muls	r4, r7
   15b08:	0c13      	lsrs	r3, r2, #16
   15b0a:	0412      	lsls	r2, r2, #16
   15b0c:	444b      	add	r3, r9
   15b0e:	4452      	add	r2, sl
   15b10:	46a1      	mov	r9, r4
   15b12:	468a      	mov	sl, r1
   15b14:	003c      	movs	r4, r7
   15b16:	4641      	mov	r1, r8
   15b18:	436c      	muls	r4, r5
   15b1a:	434d      	muls	r5, r1
   15b1c:	4651      	mov	r1, sl
   15b1e:	444d      	add	r5, r9
   15b20:	0c0f      	lsrs	r7, r1, #16
   15b22:	197d      	adds	r5, r7, r5
   15b24:	45a9      	cmp	r9, r5
   15b26:	d903      	bls.n	15b30 <__aeabi_dmul+0x2fc>
   15b28:	2180      	movs	r1, #128	; 0x80
   15b2a:	0249      	lsls	r1, r1, #9
   15b2c:	4688      	mov	r8, r1
   15b2e:	4444      	add	r4, r8
   15b30:	9f04      	ldr	r7, [sp, #16]
   15b32:	9903      	ldr	r1, [sp, #12]
   15b34:	46b8      	mov	r8, r7
   15b36:	4441      	add	r1, r8
   15b38:	468b      	mov	fp, r1
   15b3a:	4583      	cmp	fp, r0
   15b3c:	4180      	sbcs	r0, r0
   15b3e:	4241      	negs	r1, r0
   15b40:	4688      	mov	r8, r1
   15b42:	4651      	mov	r1, sl
   15b44:	0408      	lsls	r0, r1, #16
   15b46:	042f      	lsls	r7, r5, #16
   15b48:	0c00      	lsrs	r0, r0, #16
   15b4a:	183f      	adds	r7, r7, r0
   15b4c:	4658      	mov	r0, fp
   15b4e:	9902      	ldr	r1, [sp, #8]
   15b50:	1810      	adds	r0, r2, r0
   15b52:	4689      	mov	r9, r1
   15b54:	4290      	cmp	r0, r2
   15b56:	4192      	sbcs	r2, r2
   15b58:	444f      	add	r7, r9
   15b5a:	46ba      	mov	sl, r7
   15b5c:	4252      	negs	r2, r2
   15b5e:	4699      	mov	r9, r3
   15b60:	4693      	mov	fp, r2
   15b62:	44c2      	add	sl, r8
   15b64:	44d1      	add	r9, sl
   15b66:	44cb      	add	fp, r9
   15b68:	428f      	cmp	r7, r1
   15b6a:	41bf      	sbcs	r7, r7
   15b6c:	45c2      	cmp	sl, r8
   15b6e:	4189      	sbcs	r1, r1
   15b70:	4599      	cmp	r9, r3
   15b72:	419b      	sbcs	r3, r3
   15b74:	4593      	cmp	fp, r2
   15b76:	4192      	sbcs	r2, r2
   15b78:	427f      	negs	r7, r7
   15b7a:	4249      	negs	r1, r1
   15b7c:	0c2d      	lsrs	r5, r5, #16
   15b7e:	4252      	negs	r2, r2
   15b80:	430f      	orrs	r7, r1
   15b82:	425b      	negs	r3, r3
   15b84:	4313      	orrs	r3, r2
   15b86:	197f      	adds	r7, r7, r5
   15b88:	18ff      	adds	r7, r7, r3
   15b8a:	465b      	mov	r3, fp
   15b8c:	193c      	adds	r4, r7, r4
   15b8e:	0ddb      	lsrs	r3, r3, #23
   15b90:	9a05      	ldr	r2, [sp, #20]
   15b92:	0264      	lsls	r4, r4, #9
   15b94:	431c      	orrs	r4, r3
   15b96:	0243      	lsls	r3, r0, #9
   15b98:	4313      	orrs	r3, r2
   15b9a:	1e5d      	subs	r5, r3, #1
   15b9c:	41ab      	sbcs	r3, r5
   15b9e:	465a      	mov	r2, fp
   15ba0:	0dc0      	lsrs	r0, r0, #23
   15ba2:	4303      	orrs	r3, r0
   15ba4:	0252      	lsls	r2, r2, #9
   15ba6:	4313      	orrs	r3, r2
   15ba8:	01e2      	lsls	r2, r4, #7
   15baa:	d556      	bpl.n	15c5a <__aeabi_dmul+0x426>
   15bac:	2001      	movs	r0, #1
   15bae:	085a      	lsrs	r2, r3, #1
   15bb0:	4003      	ands	r3, r0
   15bb2:	4313      	orrs	r3, r2
   15bb4:	07e2      	lsls	r2, r4, #31
   15bb6:	4313      	orrs	r3, r2
   15bb8:	0864      	lsrs	r4, r4, #1
   15bba:	485a      	ldr	r0, [pc, #360]	; (15d24 <__aeabi_dmul+0x4f0>)
   15bbc:	4460      	add	r0, ip
   15bbe:	2800      	cmp	r0, #0
   15bc0:	dd4d      	ble.n	15c5e <__aeabi_dmul+0x42a>
   15bc2:	075a      	lsls	r2, r3, #29
   15bc4:	d009      	beq.n	15bda <__aeabi_dmul+0x3a6>
   15bc6:	220f      	movs	r2, #15
   15bc8:	401a      	ands	r2, r3
   15bca:	2a04      	cmp	r2, #4
   15bcc:	d005      	beq.n	15bda <__aeabi_dmul+0x3a6>
   15bce:	1d1a      	adds	r2, r3, #4
   15bd0:	429a      	cmp	r2, r3
   15bd2:	419b      	sbcs	r3, r3
   15bd4:	425b      	negs	r3, r3
   15bd6:	18e4      	adds	r4, r4, r3
   15bd8:	0013      	movs	r3, r2
   15bda:	01e2      	lsls	r2, r4, #7
   15bdc:	d504      	bpl.n	15be8 <__aeabi_dmul+0x3b4>
   15bde:	2080      	movs	r0, #128	; 0x80
   15be0:	4a51      	ldr	r2, [pc, #324]	; (15d28 <__aeabi_dmul+0x4f4>)
   15be2:	00c0      	lsls	r0, r0, #3
   15be4:	4014      	ands	r4, r2
   15be6:	4460      	add	r0, ip
   15be8:	4a50      	ldr	r2, [pc, #320]	; (15d2c <__aeabi_dmul+0x4f8>)
   15bea:	4290      	cmp	r0, r2
   15bec:	dd00      	ble.n	15bf0 <__aeabi_dmul+0x3bc>
   15bee:	e6e3      	b.n	159b8 <__aeabi_dmul+0x184>
   15bf0:	2501      	movs	r5, #1
   15bf2:	08db      	lsrs	r3, r3, #3
   15bf4:	0762      	lsls	r2, r4, #29
   15bf6:	431a      	orrs	r2, r3
   15bf8:	0264      	lsls	r4, r4, #9
   15bfa:	9b01      	ldr	r3, [sp, #4]
   15bfc:	4691      	mov	r9, r2
   15bfe:	0b22      	lsrs	r2, r4, #12
   15c00:	0544      	lsls	r4, r0, #21
   15c02:	0d64      	lsrs	r4, r4, #21
   15c04:	401d      	ands	r5, r3
   15c06:	e67c      	b.n	15902 <__aeabi_dmul+0xce>
   15c08:	2280      	movs	r2, #128	; 0x80
   15c0a:	4659      	mov	r1, fp
   15c0c:	0312      	lsls	r2, r2, #12
   15c0e:	4211      	tst	r1, r2
   15c10:	d008      	beq.n	15c24 <__aeabi_dmul+0x3f0>
   15c12:	4214      	tst	r4, r2
   15c14:	d106      	bne.n	15c24 <__aeabi_dmul+0x3f0>
   15c16:	4322      	orrs	r2, r4
   15c18:	0312      	lsls	r2, r2, #12
   15c1a:	0b12      	lsrs	r2, r2, #12
   15c1c:	4645      	mov	r5, r8
   15c1e:	4699      	mov	r9, r3
   15c20:	4c43      	ldr	r4, [pc, #268]	; (15d30 <__aeabi_dmul+0x4fc>)
   15c22:	e66e      	b.n	15902 <__aeabi_dmul+0xce>
   15c24:	465b      	mov	r3, fp
   15c26:	431a      	orrs	r2, r3
   15c28:	0312      	lsls	r2, r2, #12
   15c2a:	0b12      	lsrs	r2, r2, #12
   15c2c:	4c40      	ldr	r4, [pc, #256]	; (15d30 <__aeabi_dmul+0x4fc>)
   15c2e:	e668      	b.n	15902 <__aeabi_dmul+0xce>
   15c30:	0003      	movs	r3, r0
   15c32:	4654      	mov	r4, sl
   15c34:	3b28      	subs	r3, #40	; 0x28
   15c36:	409c      	lsls	r4, r3
   15c38:	2300      	movs	r3, #0
   15c3a:	e6b9      	b.n	159b0 <__aeabi_dmul+0x17c>
   15c3c:	f000 fd1a 	bl	16674 <__clzsi2>
   15c40:	3020      	adds	r0, #32
   15c42:	e6a6      	b.n	15992 <__aeabi_dmul+0x15e>
   15c44:	0003      	movs	r3, r0
   15c46:	3b28      	subs	r3, #40	; 0x28
   15c48:	409f      	lsls	r7, r3
   15c4a:	2300      	movs	r3, #0
   15c4c:	46bb      	mov	fp, r7
   15c4e:	4699      	mov	r9, r3
   15c50:	e68a      	b.n	15968 <__aeabi_dmul+0x134>
   15c52:	f000 fd0f 	bl	16674 <__clzsi2>
   15c56:	3020      	adds	r0, #32
   15c58:	e674      	b.n	15944 <__aeabi_dmul+0x110>
   15c5a:	46b4      	mov	ip, r6
   15c5c:	e7ad      	b.n	15bba <__aeabi_dmul+0x386>
   15c5e:	2501      	movs	r5, #1
   15c60:	1a2a      	subs	r2, r5, r0
   15c62:	2a38      	cmp	r2, #56	; 0x38
   15c64:	dd06      	ble.n	15c74 <__aeabi_dmul+0x440>
   15c66:	9b01      	ldr	r3, [sp, #4]
   15c68:	2400      	movs	r4, #0
   15c6a:	401d      	ands	r5, r3
   15c6c:	2300      	movs	r3, #0
   15c6e:	2200      	movs	r2, #0
   15c70:	4699      	mov	r9, r3
   15c72:	e646      	b.n	15902 <__aeabi_dmul+0xce>
   15c74:	2a1f      	cmp	r2, #31
   15c76:	dc21      	bgt.n	15cbc <__aeabi_dmul+0x488>
   15c78:	2520      	movs	r5, #32
   15c7a:	0020      	movs	r0, r4
   15c7c:	1aad      	subs	r5, r5, r2
   15c7e:	001e      	movs	r6, r3
   15c80:	40ab      	lsls	r3, r5
   15c82:	40a8      	lsls	r0, r5
   15c84:	40d6      	lsrs	r6, r2
   15c86:	1e5d      	subs	r5, r3, #1
   15c88:	41ab      	sbcs	r3, r5
   15c8a:	4330      	orrs	r0, r6
   15c8c:	4318      	orrs	r0, r3
   15c8e:	40d4      	lsrs	r4, r2
   15c90:	0743      	lsls	r3, r0, #29
   15c92:	d009      	beq.n	15ca8 <__aeabi_dmul+0x474>
   15c94:	230f      	movs	r3, #15
   15c96:	4003      	ands	r3, r0
   15c98:	2b04      	cmp	r3, #4
   15c9a:	d005      	beq.n	15ca8 <__aeabi_dmul+0x474>
   15c9c:	0003      	movs	r3, r0
   15c9e:	1d18      	adds	r0, r3, #4
   15ca0:	4298      	cmp	r0, r3
   15ca2:	419b      	sbcs	r3, r3
   15ca4:	425b      	negs	r3, r3
   15ca6:	18e4      	adds	r4, r4, r3
   15ca8:	0223      	lsls	r3, r4, #8
   15caa:	d521      	bpl.n	15cf0 <__aeabi_dmul+0x4bc>
   15cac:	2501      	movs	r5, #1
   15cae:	9b01      	ldr	r3, [sp, #4]
   15cb0:	2401      	movs	r4, #1
   15cb2:	401d      	ands	r5, r3
   15cb4:	2300      	movs	r3, #0
   15cb6:	2200      	movs	r2, #0
   15cb8:	4699      	mov	r9, r3
   15cba:	e622      	b.n	15902 <__aeabi_dmul+0xce>
   15cbc:	251f      	movs	r5, #31
   15cbe:	0021      	movs	r1, r4
   15cc0:	426d      	negs	r5, r5
   15cc2:	1a28      	subs	r0, r5, r0
   15cc4:	40c1      	lsrs	r1, r0
   15cc6:	0008      	movs	r0, r1
   15cc8:	2a20      	cmp	r2, #32
   15cca:	d01d      	beq.n	15d08 <__aeabi_dmul+0x4d4>
   15ccc:	355f      	adds	r5, #95	; 0x5f
   15cce:	1aaa      	subs	r2, r5, r2
   15cd0:	4094      	lsls	r4, r2
   15cd2:	4323      	orrs	r3, r4
   15cd4:	1e5c      	subs	r4, r3, #1
   15cd6:	41a3      	sbcs	r3, r4
   15cd8:	2507      	movs	r5, #7
   15cda:	4303      	orrs	r3, r0
   15cdc:	401d      	ands	r5, r3
   15cde:	2200      	movs	r2, #0
   15ce0:	2d00      	cmp	r5, #0
   15ce2:	d009      	beq.n	15cf8 <__aeabi_dmul+0x4c4>
   15ce4:	220f      	movs	r2, #15
   15ce6:	2400      	movs	r4, #0
   15ce8:	401a      	ands	r2, r3
   15cea:	0018      	movs	r0, r3
   15cec:	2a04      	cmp	r2, #4
   15cee:	d1d6      	bne.n	15c9e <__aeabi_dmul+0x46a>
   15cf0:	0003      	movs	r3, r0
   15cf2:	0765      	lsls	r5, r4, #29
   15cf4:	0264      	lsls	r4, r4, #9
   15cf6:	0b22      	lsrs	r2, r4, #12
   15cf8:	08db      	lsrs	r3, r3, #3
   15cfa:	432b      	orrs	r3, r5
   15cfc:	2501      	movs	r5, #1
   15cfe:	4699      	mov	r9, r3
   15d00:	9b01      	ldr	r3, [sp, #4]
   15d02:	2400      	movs	r4, #0
   15d04:	401d      	ands	r5, r3
   15d06:	e5fc      	b.n	15902 <__aeabi_dmul+0xce>
   15d08:	2400      	movs	r4, #0
   15d0a:	e7e2      	b.n	15cd2 <__aeabi_dmul+0x49e>
   15d0c:	2280      	movs	r2, #128	; 0x80
   15d0e:	2501      	movs	r5, #1
   15d10:	0312      	lsls	r2, r2, #12
   15d12:	4322      	orrs	r2, r4
   15d14:	9901      	ldr	r1, [sp, #4]
   15d16:	0312      	lsls	r2, r2, #12
   15d18:	0b12      	lsrs	r2, r2, #12
   15d1a:	400d      	ands	r5, r1
   15d1c:	4699      	mov	r9, r3
   15d1e:	4c04      	ldr	r4, [pc, #16]	; (15d30 <__aeabi_dmul+0x4fc>)
   15d20:	e5ef      	b.n	15902 <__aeabi_dmul+0xce>
   15d22:	46c0      	nop			; (mov r8, r8)
   15d24:	000003ff 	.word	0x000003ff
   15d28:	feffffff 	.word	0xfeffffff
   15d2c:	000007fe 	.word	0x000007fe
   15d30:	000007ff 	.word	0x000007ff

00015d34 <__aeabi_dsub>:
   15d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d36:	4646      	mov	r6, r8
   15d38:	46d6      	mov	lr, sl
   15d3a:	464f      	mov	r7, r9
   15d3c:	030c      	lsls	r4, r1, #12
   15d3e:	b5c0      	push	{r6, r7, lr}
   15d40:	0fcd      	lsrs	r5, r1, #31
   15d42:	004e      	lsls	r6, r1, #1
   15d44:	0a61      	lsrs	r1, r4, #9
   15d46:	0f44      	lsrs	r4, r0, #29
   15d48:	430c      	orrs	r4, r1
   15d4a:	00c1      	lsls	r1, r0, #3
   15d4c:	0058      	lsls	r0, r3, #1
   15d4e:	0d40      	lsrs	r0, r0, #21
   15d50:	4684      	mov	ip, r0
   15d52:	468a      	mov	sl, r1
   15d54:	000f      	movs	r7, r1
   15d56:	0319      	lsls	r1, r3, #12
   15d58:	0f50      	lsrs	r0, r2, #29
   15d5a:	0a49      	lsrs	r1, r1, #9
   15d5c:	4301      	orrs	r1, r0
   15d5e:	48c6      	ldr	r0, [pc, #792]	; (16078 <__aeabi_dsub+0x344>)
   15d60:	0d76      	lsrs	r6, r6, #21
   15d62:	46a8      	mov	r8, r5
   15d64:	0fdb      	lsrs	r3, r3, #31
   15d66:	00d2      	lsls	r2, r2, #3
   15d68:	4584      	cmp	ip, r0
   15d6a:	d100      	bne.n	15d6e <__aeabi_dsub+0x3a>
   15d6c:	e0d8      	b.n	15f20 <__aeabi_dsub+0x1ec>
   15d6e:	2001      	movs	r0, #1
   15d70:	4043      	eors	r3, r0
   15d72:	42ab      	cmp	r3, r5
   15d74:	d100      	bne.n	15d78 <__aeabi_dsub+0x44>
   15d76:	e0a6      	b.n	15ec6 <__aeabi_dsub+0x192>
   15d78:	4660      	mov	r0, ip
   15d7a:	1a35      	subs	r5, r6, r0
   15d7c:	2d00      	cmp	r5, #0
   15d7e:	dc00      	bgt.n	15d82 <__aeabi_dsub+0x4e>
   15d80:	e105      	b.n	15f8e <__aeabi_dsub+0x25a>
   15d82:	2800      	cmp	r0, #0
   15d84:	d110      	bne.n	15da8 <__aeabi_dsub+0x74>
   15d86:	000b      	movs	r3, r1
   15d88:	4313      	orrs	r3, r2
   15d8a:	d100      	bne.n	15d8e <__aeabi_dsub+0x5a>
   15d8c:	e0d7      	b.n	15f3e <__aeabi_dsub+0x20a>
   15d8e:	1e6b      	subs	r3, r5, #1
   15d90:	2b00      	cmp	r3, #0
   15d92:	d000      	beq.n	15d96 <__aeabi_dsub+0x62>
   15d94:	e14b      	b.n	1602e <__aeabi_dsub+0x2fa>
   15d96:	4653      	mov	r3, sl
   15d98:	1a9f      	subs	r7, r3, r2
   15d9a:	45ba      	cmp	sl, r7
   15d9c:	4180      	sbcs	r0, r0
   15d9e:	1a64      	subs	r4, r4, r1
   15da0:	4240      	negs	r0, r0
   15da2:	1a24      	subs	r4, r4, r0
   15da4:	2601      	movs	r6, #1
   15da6:	e01e      	b.n	15de6 <__aeabi_dsub+0xb2>
   15da8:	4bb3      	ldr	r3, [pc, #716]	; (16078 <__aeabi_dsub+0x344>)
   15daa:	429e      	cmp	r6, r3
   15dac:	d048      	beq.n	15e40 <__aeabi_dsub+0x10c>
   15dae:	2380      	movs	r3, #128	; 0x80
   15db0:	041b      	lsls	r3, r3, #16
   15db2:	4319      	orrs	r1, r3
   15db4:	2d38      	cmp	r5, #56	; 0x38
   15db6:	dd00      	ble.n	15dba <__aeabi_dsub+0x86>
   15db8:	e119      	b.n	15fee <__aeabi_dsub+0x2ba>
   15dba:	2d1f      	cmp	r5, #31
   15dbc:	dd00      	ble.n	15dc0 <__aeabi_dsub+0x8c>
   15dbe:	e14c      	b.n	1605a <__aeabi_dsub+0x326>
   15dc0:	2320      	movs	r3, #32
   15dc2:	000f      	movs	r7, r1
   15dc4:	1b5b      	subs	r3, r3, r5
   15dc6:	0010      	movs	r0, r2
   15dc8:	409a      	lsls	r2, r3
   15dca:	409f      	lsls	r7, r3
   15dcc:	40e8      	lsrs	r0, r5
   15dce:	1e53      	subs	r3, r2, #1
   15dd0:	419a      	sbcs	r2, r3
   15dd2:	40e9      	lsrs	r1, r5
   15dd4:	4307      	orrs	r7, r0
   15dd6:	4317      	orrs	r7, r2
   15dd8:	4653      	mov	r3, sl
   15dda:	1bdf      	subs	r7, r3, r7
   15ddc:	1a61      	subs	r1, r4, r1
   15dde:	45ba      	cmp	sl, r7
   15de0:	41a4      	sbcs	r4, r4
   15de2:	4264      	negs	r4, r4
   15de4:	1b0c      	subs	r4, r1, r4
   15de6:	0223      	lsls	r3, r4, #8
   15de8:	d400      	bmi.n	15dec <__aeabi_dsub+0xb8>
   15dea:	e0c5      	b.n	15f78 <__aeabi_dsub+0x244>
   15dec:	0264      	lsls	r4, r4, #9
   15dee:	0a65      	lsrs	r5, r4, #9
   15df0:	2d00      	cmp	r5, #0
   15df2:	d100      	bne.n	15df6 <__aeabi_dsub+0xc2>
   15df4:	e0f6      	b.n	15fe4 <__aeabi_dsub+0x2b0>
   15df6:	0028      	movs	r0, r5
   15df8:	f000 fc3c 	bl	16674 <__clzsi2>
   15dfc:	0003      	movs	r3, r0
   15dfe:	3b08      	subs	r3, #8
   15e00:	2b1f      	cmp	r3, #31
   15e02:	dd00      	ble.n	15e06 <__aeabi_dsub+0xd2>
   15e04:	e0e9      	b.n	15fda <__aeabi_dsub+0x2a6>
   15e06:	2220      	movs	r2, #32
   15e08:	003c      	movs	r4, r7
   15e0a:	1ad2      	subs	r2, r2, r3
   15e0c:	409d      	lsls	r5, r3
   15e0e:	40d4      	lsrs	r4, r2
   15e10:	409f      	lsls	r7, r3
   15e12:	4325      	orrs	r5, r4
   15e14:	429e      	cmp	r6, r3
   15e16:	dd00      	ble.n	15e1a <__aeabi_dsub+0xe6>
   15e18:	e0db      	b.n	15fd2 <__aeabi_dsub+0x29e>
   15e1a:	1b9e      	subs	r6, r3, r6
   15e1c:	1c73      	adds	r3, r6, #1
   15e1e:	2b1f      	cmp	r3, #31
   15e20:	dd00      	ble.n	15e24 <__aeabi_dsub+0xf0>
   15e22:	e10a      	b.n	1603a <__aeabi_dsub+0x306>
   15e24:	2220      	movs	r2, #32
   15e26:	0038      	movs	r0, r7
   15e28:	1ad2      	subs	r2, r2, r3
   15e2a:	0029      	movs	r1, r5
   15e2c:	4097      	lsls	r7, r2
   15e2e:	002c      	movs	r4, r5
   15e30:	4091      	lsls	r1, r2
   15e32:	40d8      	lsrs	r0, r3
   15e34:	1e7a      	subs	r2, r7, #1
   15e36:	4197      	sbcs	r7, r2
   15e38:	40dc      	lsrs	r4, r3
   15e3a:	2600      	movs	r6, #0
   15e3c:	4301      	orrs	r1, r0
   15e3e:	430f      	orrs	r7, r1
   15e40:	077b      	lsls	r3, r7, #29
   15e42:	d009      	beq.n	15e58 <__aeabi_dsub+0x124>
   15e44:	230f      	movs	r3, #15
   15e46:	403b      	ands	r3, r7
   15e48:	2b04      	cmp	r3, #4
   15e4a:	d005      	beq.n	15e58 <__aeabi_dsub+0x124>
   15e4c:	1d3b      	adds	r3, r7, #4
   15e4e:	42bb      	cmp	r3, r7
   15e50:	41bf      	sbcs	r7, r7
   15e52:	427f      	negs	r7, r7
   15e54:	19e4      	adds	r4, r4, r7
   15e56:	001f      	movs	r7, r3
   15e58:	0223      	lsls	r3, r4, #8
   15e5a:	d525      	bpl.n	15ea8 <__aeabi_dsub+0x174>
   15e5c:	4b86      	ldr	r3, [pc, #536]	; (16078 <__aeabi_dsub+0x344>)
   15e5e:	3601      	adds	r6, #1
   15e60:	429e      	cmp	r6, r3
   15e62:	d100      	bne.n	15e66 <__aeabi_dsub+0x132>
   15e64:	e0af      	b.n	15fc6 <__aeabi_dsub+0x292>
   15e66:	4b85      	ldr	r3, [pc, #532]	; (1607c <__aeabi_dsub+0x348>)
   15e68:	2501      	movs	r5, #1
   15e6a:	401c      	ands	r4, r3
   15e6c:	4643      	mov	r3, r8
   15e6e:	0762      	lsls	r2, r4, #29
   15e70:	08ff      	lsrs	r7, r7, #3
   15e72:	0264      	lsls	r4, r4, #9
   15e74:	0576      	lsls	r6, r6, #21
   15e76:	4317      	orrs	r7, r2
   15e78:	0b24      	lsrs	r4, r4, #12
   15e7a:	0d76      	lsrs	r6, r6, #21
   15e7c:	401d      	ands	r5, r3
   15e7e:	2100      	movs	r1, #0
   15e80:	0324      	lsls	r4, r4, #12
   15e82:	0b23      	lsrs	r3, r4, #12
   15e84:	0d0c      	lsrs	r4, r1, #20
   15e86:	4a7e      	ldr	r2, [pc, #504]	; (16080 <__aeabi_dsub+0x34c>)
   15e88:	0524      	lsls	r4, r4, #20
   15e8a:	431c      	orrs	r4, r3
   15e8c:	4014      	ands	r4, r2
   15e8e:	0533      	lsls	r3, r6, #20
   15e90:	4323      	orrs	r3, r4
   15e92:	005b      	lsls	r3, r3, #1
   15e94:	07ed      	lsls	r5, r5, #31
   15e96:	085b      	lsrs	r3, r3, #1
   15e98:	432b      	orrs	r3, r5
   15e9a:	0038      	movs	r0, r7
   15e9c:	0019      	movs	r1, r3
   15e9e:	bc1c      	pop	{r2, r3, r4}
   15ea0:	4690      	mov	r8, r2
   15ea2:	4699      	mov	r9, r3
   15ea4:	46a2      	mov	sl, r4
   15ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ea8:	2501      	movs	r5, #1
   15eaa:	4643      	mov	r3, r8
   15eac:	0762      	lsls	r2, r4, #29
   15eae:	08ff      	lsrs	r7, r7, #3
   15eb0:	4317      	orrs	r7, r2
   15eb2:	08e4      	lsrs	r4, r4, #3
   15eb4:	401d      	ands	r5, r3
   15eb6:	4b70      	ldr	r3, [pc, #448]	; (16078 <__aeabi_dsub+0x344>)
   15eb8:	429e      	cmp	r6, r3
   15eba:	d036      	beq.n	15f2a <__aeabi_dsub+0x1f6>
   15ebc:	0324      	lsls	r4, r4, #12
   15ebe:	0576      	lsls	r6, r6, #21
   15ec0:	0b24      	lsrs	r4, r4, #12
   15ec2:	0d76      	lsrs	r6, r6, #21
   15ec4:	e7db      	b.n	15e7e <__aeabi_dsub+0x14a>
   15ec6:	4663      	mov	r3, ip
   15ec8:	1af3      	subs	r3, r6, r3
   15eca:	2b00      	cmp	r3, #0
   15ecc:	dc00      	bgt.n	15ed0 <__aeabi_dsub+0x19c>
   15ece:	e094      	b.n	15ffa <__aeabi_dsub+0x2c6>
   15ed0:	4660      	mov	r0, ip
   15ed2:	2800      	cmp	r0, #0
   15ed4:	d035      	beq.n	15f42 <__aeabi_dsub+0x20e>
   15ed6:	4868      	ldr	r0, [pc, #416]	; (16078 <__aeabi_dsub+0x344>)
   15ed8:	4286      	cmp	r6, r0
   15eda:	d0b1      	beq.n	15e40 <__aeabi_dsub+0x10c>
   15edc:	2780      	movs	r7, #128	; 0x80
   15ede:	043f      	lsls	r7, r7, #16
   15ee0:	4339      	orrs	r1, r7
   15ee2:	2b38      	cmp	r3, #56	; 0x38
   15ee4:	dc00      	bgt.n	15ee8 <__aeabi_dsub+0x1b4>
   15ee6:	e0fd      	b.n	160e4 <__aeabi_dsub+0x3b0>
   15ee8:	430a      	orrs	r2, r1
   15eea:	0017      	movs	r7, r2
   15eec:	2100      	movs	r1, #0
   15eee:	1e7a      	subs	r2, r7, #1
   15ef0:	4197      	sbcs	r7, r2
   15ef2:	4457      	add	r7, sl
   15ef4:	4557      	cmp	r7, sl
   15ef6:	4180      	sbcs	r0, r0
   15ef8:	1909      	adds	r1, r1, r4
   15efa:	4244      	negs	r4, r0
   15efc:	190c      	adds	r4, r1, r4
   15efe:	0223      	lsls	r3, r4, #8
   15f00:	d53a      	bpl.n	15f78 <__aeabi_dsub+0x244>
   15f02:	4b5d      	ldr	r3, [pc, #372]	; (16078 <__aeabi_dsub+0x344>)
   15f04:	3601      	adds	r6, #1
   15f06:	429e      	cmp	r6, r3
   15f08:	d100      	bne.n	15f0c <__aeabi_dsub+0x1d8>
   15f0a:	e14b      	b.n	161a4 <__aeabi_dsub+0x470>
   15f0c:	2201      	movs	r2, #1
   15f0e:	4b5b      	ldr	r3, [pc, #364]	; (1607c <__aeabi_dsub+0x348>)
   15f10:	401c      	ands	r4, r3
   15f12:	087b      	lsrs	r3, r7, #1
   15f14:	4017      	ands	r7, r2
   15f16:	431f      	orrs	r7, r3
   15f18:	07e2      	lsls	r2, r4, #31
   15f1a:	4317      	orrs	r7, r2
   15f1c:	0864      	lsrs	r4, r4, #1
   15f1e:	e78f      	b.n	15e40 <__aeabi_dsub+0x10c>
   15f20:	0008      	movs	r0, r1
   15f22:	4310      	orrs	r0, r2
   15f24:	d000      	beq.n	15f28 <__aeabi_dsub+0x1f4>
   15f26:	e724      	b.n	15d72 <__aeabi_dsub+0x3e>
   15f28:	e721      	b.n	15d6e <__aeabi_dsub+0x3a>
   15f2a:	0023      	movs	r3, r4
   15f2c:	433b      	orrs	r3, r7
   15f2e:	d100      	bne.n	15f32 <__aeabi_dsub+0x1fe>
   15f30:	e1b9      	b.n	162a6 <__aeabi_dsub+0x572>
   15f32:	2280      	movs	r2, #128	; 0x80
   15f34:	0312      	lsls	r2, r2, #12
   15f36:	4314      	orrs	r4, r2
   15f38:	0324      	lsls	r4, r4, #12
   15f3a:	0b24      	lsrs	r4, r4, #12
   15f3c:	e79f      	b.n	15e7e <__aeabi_dsub+0x14a>
   15f3e:	002e      	movs	r6, r5
   15f40:	e77e      	b.n	15e40 <__aeabi_dsub+0x10c>
   15f42:	0008      	movs	r0, r1
   15f44:	4310      	orrs	r0, r2
   15f46:	d100      	bne.n	15f4a <__aeabi_dsub+0x216>
   15f48:	e0ca      	b.n	160e0 <__aeabi_dsub+0x3ac>
   15f4a:	1e58      	subs	r0, r3, #1
   15f4c:	4684      	mov	ip, r0
   15f4e:	2800      	cmp	r0, #0
   15f50:	d000      	beq.n	15f54 <__aeabi_dsub+0x220>
   15f52:	e0e7      	b.n	16124 <__aeabi_dsub+0x3f0>
   15f54:	4452      	add	r2, sl
   15f56:	4552      	cmp	r2, sl
   15f58:	4180      	sbcs	r0, r0
   15f5a:	1864      	adds	r4, r4, r1
   15f5c:	4240      	negs	r0, r0
   15f5e:	1824      	adds	r4, r4, r0
   15f60:	0017      	movs	r7, r2
   15f62:	2601      	movs	r6, #1
   15f64:	0223      	lsls	r3, r4, #8
   15f66:	d507      	bpl.n	15f78 <__aeabi_dsub+0x244>
   15f68:	2602      	movs	r6, #2
   15f6a:	e7cf      	b.n	15f0c <__aeabi_dsub+0x1d8>
   15f6c:	4664      	mov	r4, ip
   15f6e:	432c      	orrs	r4, r5
   15f70:	d100      	bne.n	15f74 <__aeabi_dsub+0x240>
   15f72:	e1b3      	b.n	162dc <__aeabi_dsub+0x5a8>
   15f74:	002c      	movs	r4, r5
   15f76:	4667      	mov	r7, ip
   15f78:	077b      	lsls	r3, r7, #29
   15f7a:	d000      	beq.n	15f7e <__aeabi_dsub+0x24a>
   15f7c:	e762      	b.n	15e44 <__aeabi_dsub+0x110>
   15f7e:	0763      	lsls	r3, r4, #29
   15f80:	08ff      	lsrs	r7, r7, #3
   15f82:	431f      	orrs	r7, r3
   15f84:	2501      	movs	r5, #1
   15f86:	4643      	mov	r3, r8
   15f88:	08e4      	lsrs	r4, r4, #3
   15f8a:	401d      	ands	r5, r3
   15f8c:	e793      	b.n	15eb6 <__aeabi_dsub+0x182>
   15f8e:	2d00      	cmp	r5, #0
   15f90:	d178      	bne.n	16084 <__aeabi_dsub+0x350>
   15f92:	1c75      	adds	r5, r6, #1
   15f94:	056d      	lsls	r5, r5, #21
   15f96:	0d6d      	lsrs	r5, r5, #21
   15f98:	2d01      	cmp	r5, #1
   15f9a:	dc00      	bgt.n	15f9e <__aeabi_dsub+0x26a>
   15f9c:	e0f2      	b.n	16184 <__aeabi_dsub+0x450>
   15f9e:	4650      	mov	r0, sl
   15fa0:	1a80      	subs	r0, r0, r2
   15fa2:	4582      	cmp	sl, r0
   15fa4:	41bf      	sbcs	r7, r7
   15fa6:	1a65      	subs	r5, r4, r1
   15fa8:	427f      	negs	r7, r7
   15faa:	1bed      	subs	r5, r5, r7
   15fac:	4684      	mov	ip, r0
   15fae:	0228      	lsls	r0, r5, #8
   15fb0:	d400      	bmi.n	15fb4 <__aeabi_dsub+0x280>
   15fb2:	e08c      	b.n	160ce <__aeabi_dsub+0x39a>
   15fb4:	4650      	mov	r0, sl
   15fb6:	1a17      	subs	r7, r2, r0
   15fb8:	42ba      	cmp	r2, r7
   15fba:	4192      	sbcs	r2, r2
   15fbc:	1b0c      	subs	r4, r1, r4
   15fbe:	4255      	negs	r5, r2
   15fc0:	1b65      	subs	r5, r4, r5
   15fc2:	4698      	mov	r8, r3
   15fc4:	e714      	b.n	15df0 <__aeabi_dsub+0xbc>
   15fc6:	2501      	movs	r5, #1
   15fc8:	4643      	mov	r3, r8
   15fca:	2400      	movs	r4, #0
   15fcc:	401d      	ands	r5, r3
   15fce:	2700      	movs	r7, #0
   15fd0:	e755      	b.n	15e7e <__aeabi_dsub+0x14a>
   15fd2:	4c2a      	ldr	r4, [pc, #168]	; (1607c <__aeabi_dsub+0x348>)
   15fd4:	1af6      	subs	r6, r6, r3
   15fd6:	402c      	ands	r4, r5
   15fd8:	e732      	b.n	15e40 <__aeabi_dsub+0x10c>
   15fda:	003d      	movs	r5, r7
   15fdc:	3828      	subs	r0, #40	; 0x28
   15fde:	4085      	lsls	r5, r0
   15fe0:	2700      	movs	r7, #0
   15fe2:	e717      	b.n	15e14 <__aeabi_dsub+0xe0>
   15fe4:	0038      	movs	r0, r7
   15fe6:	f000 fb45 	bl	16674 <__clzsi2>
   15fea:	3020      	adds	r0, #32
   15fec:	e706      	b.n	15dfc <__aeabi_dsub+0xc8>
   15fee:	430a      	orrs	r2, r1
   15ff0:	0017      	movs	r7, r2
   15ff2:	2100      	movs	r1, #0
   15ff4:	1e7a      	subs	r2, r7, #1
   15ff6:	4197      	sbcs	r7, r2
   15ff8:	e6ee      	b.n	15dd8 <__aeabi_dsub+0xa4>
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	d000      	beq.n	16000 <__aeabi_dsub+0x2cc>
   15ffe:	e0e5      	b.n	161cc <__aeabi_dsub+0x498>
   16000:	1c73      	adds	r3, r6, #1
   16002:	469c      	mov	ip, r3
   16004:	055b      	lsls	r3, r3, #21
   16006:	0d5b      	lsrs	r3, r3, #21
   16008:	2b01      	cmp	r3, #1
   1600a:	dc00      	bgt.n	1600e <__aeabi_dsub+0x2da>
   1600c:	e09f      	b.n	1614e <__aeabi_dsub+0x41a>
   1600e:	4b1a      	ldr	r3, [pc, #104]	; (16078 <__aeabi_dsub+0x344>)
   16010:	459c      	cmp	ip, r3
   16012:	d100      	bne.n	16016 <__aeabi_dsub+0x2e2>
   16014:	e0c5      	b.n	161a2 <__aeabi_dsub+0x46e>
   16016:	4452      	add	r2, sl
   16018:	4552      	cmp	r2, sl
   1601a:	4180      	sbcs	r0, r0
   1601c:	1864      	adds	r4, r4, r1
   1601e:	4240      	negs	r0, r0
   16020:	1824      	adds	r4, r4, r0
   16022:	07e7      	lsls	r7, r4, #31
   16024:	0852      	lsrs	r2, r2, #1
   16026:	4317      	orrs	r7, r2
   16028:	0864      	lsrs	r4, r4, #1
   1602a:	4666      	mov	r6, ip
   1602c:	e708      	b.n	15e40 <__aeabi_dsub+0x10c>
   1602e:	4812      	ldr	r0, [pc, #72]	; (16078 <__aeabi_dsub+0x344>)
   16030:	4285      	cmp	r5, r0
   16032:	d100      	bne.n	16036 <__aeabi_dsub+0x302>
   16034:	e085      	b.n	16142 <__aeabi_dsub+0x40e>
   16036:	001d      	movs	r5, r3
   16038:	e6bc      	b.n	15db4 <__aeabi_dsub+0x80>
   1603a:	0029      	movs	r1, r5
   1603c:	3e1f      	subs	r6, #31
   1603e:	40f1      	lsrs	r1, r6
   16040:	2b20      	cmp	r3, #32
   16042:	d100      	bne.n	16046 <__aeabi_dsub+0x312>
   16044:	e07f      	b.n	16146 <__aeabi_dsub+0x412>
   16046:	2240      	movs	r2, #64	; 0x40
   16048:	1ad3      	subs	r3, r2, r3
   1604a:	409d      	lsls	r5, r3
   1604c:	432f      	orrs	r7, r5
   1604e:	1e7d      	subs	r5, r7, #1
   16050:	41af      	sbcs	r7, r5
   16052:	2400      	movs	r4, #0
   16054:	430f      	orrs	r7, r1
   16056:	2600      	movs	r6, #0
   16058:	e78e      	b.n	15f78 <__aeabi_dsub+0x244>
   1605a:	002b      	movs	r3, r5
   1605c:	000f      	movs	r7, r1
   1605e:	3b20      	subs	r3, #32
   16060:	40df      	lsrs	r7, r3
   16062:	2d20      	cmp	r5, #32
   16064:	d071      	beq.n	1614a <__aeabi_dsub+0x416>
   16066:	2340      	movs	r3, #64	; 0x40
   16068:	1b5d      	subs	r5, r3, r5
   1606a:	40a9      	lsls	r1, r5
   1606c:	430a      	orrs	r2, r1
   1606e:	1e51      	subs	r1, r2, #1
   16070:	418a      	sbcs	r2, r1
   16072:	2100      	movs	r1, #0
   16074:	4317      	orrs	r7, r2
   16076:	e6af      	b.n	15dd8 <__aeabi_dsub+0xa4>
   16078:	000007ff 	.word	0x000007ff
   1607c:	ff7fffff 	.word	0xff7fffff
   16080:	800fffff 	.word	0x800fffff
   16084:	2e00      	cmp	r6, #0
   16086:	d03e      	beq.n	16106 <__aeabi_dsub+0x3d2>
   16088:	4eb3      	ldr	r6, [pc, #716]	; (16358 <__aeabi_dsub+0x624>)
   1608a:	45b4      	cmp	ip, r6
   1608c:	d045      	beq.n	1611a <__aeabi_dsub+0x3e6>
   1608e:	2680      	movs	r6, #128	; 0x80
   16090:	0436      	lsls	r6, r6, #16
   16092:	426d      	negs	r5, r5
   16094:	4334      	orrs	r4, r6
   16096:	2d38      	cmp	r5, #56	; 0x38
   16098:	dd00      	ble.n	1609c <__aeabi_dsub+0x368>
   1609a:	e0a8      	b.n	161ee <__aeabi_dsub+0x4ba>
   1609c:	2d1f      	cmp	r5, #31
   1609e:	dd00      	ble.n	160a2 <__aeabi_dsub+0x36e>
   160a0:	e11f      	b.n	162e2 <__aeabi_dsub+0x5ae>
   160a2:	2620      	movs	r6, #32
   160a4:	0027      	movs	r7, r4
   160a6:	4650      	mov	r0, sl
   160a8:	1b76      	subs	r6, r6, r5
   160aa:	40b7      	lsls	r7, r6
   160ac:	40e8      	lsrs	r0, r5
   160ae:	4307      	orrs	r7, r0
   160b0:	4650      	mov	r0, sl
   160b2:	40b0      	lsls	r0, r6
   160b4:	1e46      	subs	r6, r0, #1
   160b6:	41b0      	sbcs	r0, r6
   160b8:	40ec      	lsrs	r4, r5
   160ba:	4338      	orrs	r0, r7
   160bc:	1a17      	subs	r7, r2, r0
   160be:	42ba      	cmp	r2, r7
   160c0:	4192      	sbcs	r2, r2
   160c2:	1b0c      	subs	r4, r1, r4
   160c4:	4252      	negs	r2, r2
   160c6:	1aa4      	subs	r4, r4, r2
   160c8:	4666      	mov	r6, ip
   160ca:	4698      	mov	r8, r3
   160cc:	e68b      	b.n	15de6 <__aeabi_dsub+0xb2>
   160ce:	4664      	mov	r4, ip
   160d0:	4667      	mov	r7, ip
   160d2:	432c      	orrs	r4, r5
   160d4:	d000      	beq.n	160d8 <__aeabi_dsub+0x3a4>
   160d6:	e68b      	b.n	15df0 <__aeabi_dsub+0xbc>
   160d8:	2500      	movs	r5, #0
   160da:	2600      	movs	r6, #0
   160dc:	2700      	movs	r7, #0
   160de:	e6ea      	b.n	15eb6 <__aeabi_dsub+0x182>
   160e0:	001e      	movs	r6, r3
   160e2:	e6ad      	b.n	15e40 <__aeabi_dsub+0x10c>
   160e4:	2b1f      	cmp	r3, #31
   160e6:	dc60      	bgt.n	161aa <__aeabi_dsub+0x476>
   160e8:	2720      	movs	r7, #32
   160ea:	1af8      	subs	r0, r7, r3
   160ec:	000f      	movs	r7, r1
   160ee:	4684      	mov	ip, r0
   160f0:	4087      	lsls	r7, r0
   160f2:	0010      	movs	r0, r2
   160f4:	40d8      	lsrs	r0, r3
   160f6:	4307      	orrs	r7, r0
   160f8:	4660      	mov	r0, ip
   160fa:	4082      	lsls	r2, r0
   160fc:	1e50      	subs	r0, r2, #1
   160fe:	4182      	sbcs	r2, r0
   16100:	40d9      	lsrs	r1, r3
   16102:	4317      	orrs	r7, r2
   16104:	e6f5      	b.n	15ef2 <__aeabi_dsub+0x1be>
   16106:	0026      	movs	r6, r4
   16108:	4650      	mov	r0, sl
   1610a:	4306      	orrs	r6, r0
   1610c:	d005      	beq.n	1611a <__aeabi_dsub+0x3e6>
   1610e:	43ed      	mvns	r5, r5
   16110:	2d00      	cmp	r5, #0
   16112:	d0d3      	beq.n	160bc <__aeabi_dsub+0x388>
   16114:	4e90      	ldr	r6, [pc, #576]	; (16358 <__aeabi_dsub+0x624>)
   16116:	45b4      	cmp	ip, r6
   16118:	d1bd      	bne.n	16096 <__aeabi_dsub+0x362>
   1611a:	000c      	movs	r4, r1
   1611c:	0017      	movs	r7, r2
   1611e:	4666      	mov	r6, ip
   16120:	4698      	mov	r8, r3
   16122:	e68d      	b.n	15e40 <__aeabi_dsub+0x10c>
   16124:	488c      	ldr	r0, [pc, #560]	; (16358 <__aeabi_dsub+0x624>)
   16126:	4283      	cmp	r3, r0
   16128:	d00b      	beq.n	16142 <__aeabi_dsub+0x40e>
   1612a:	4663      	mov	r3, ip
   1612c:	e6d9      	b.n	15ee2 <__aeabi_dsub+0x1ae>
   1612e:	2d00      	cmp	r5, #0
   16130:	d000      	beq.n	16134 <__aeabi_dsub+0x400>
   16132:	e096      	b.n	16262 <__aeabi_dsub+0x52e>
   16134:	0008      	movs	r0, r1
   16136:	4310      	orrs	r0, r2
   16138:	d100      	bne.n	1613c <__aeabi_dsub+0x408>
   1613a:	e0e2      	b.n	16302 <__aeabi_dsub+0x5ce>
   1613c:	000c      	movs	r4, r1
   1613e:	0017      	movs	r7, r2
   16140:	4698      	mov	r8, r3
   16142:	4e85      	ldr	r6, [pc, #532]	; (16358 <__aeabi_dsub+0x624>)
   16144:	e67c      	b.n	15e40 <__aeabi_dsub+0x10c>
   16146:	2500      	movs	r5, #0
   16148:	e780      	b.n	1604c <__aeabi_dsub+0x318>
   1614a:	2100      	movs	r1, #0
   1614c:	e78e      	b.n	1606c <__aeabi_dsub+0x338>
   1614e:	0023      	movs	r3, r4
   16150:	4650      	mov	r0, sl
   16152:	4303      	orrs	r3, r0
   16154:	2e00      	cmp	r6, #0
   16156:	d000      	beq.n	1615a <__aeabi_dsub+0x426>
   16158:	e0a8      	b.n	162ac <__aeabi_dsub+0x578>
   1615a:	2b00      	cmp	r3, #0
   1615c:	d100      	bne.n	16160 <__aeabi_dsub+0x42c>
   1615e:	e0de      	b.n	1631e <__aeabi_dsub+0x5ea>
   16160:	000b      	movs	r3, r1
   16162:	4313      	orrs	r3, r2
   16164:	d100      	bne.n	16168 <__aeabi_dsub+0x434>
   16166:	e66b      	b.n	15e40 <__aeabi_dsub+0x10c>
   16168:	4452      	add	r2, sl
   1616a:	4552      	cmp	r2, sl
   1616c:	4180      	sbcs	r0, r0
   1616e:	1864      	adds	r4, r4, r1
   16170:	4240      	negs	r0, r0
   16172:	1824      	adds	r4, r4, r0
   16174:	0017      	movs	r7, r2
   16176:	0223      	lsls	r3, r4, #8
   16178:	d400      	bmi.n	1617c <__aeabi_dsub+0x448>
   1617a:	e6fd      	b.n	15f78 <__aeabi_dsub+0x244>
   1617c:	4b77      	ldr	r3, [pc, #476]	; (1635c <__aeabi_dsub+0x628>)
   1617e:	4666      	mov	r6, ip
   16180:	401c      	ands	r4, r3
   16182:	e65d      	b.n	15e40 <__aeabi_dsub+0x10c>
   16184:	0025      	movs	r5, r4
   16186:	4650      	mov	r0, sl
   16188:	4305      	orrs	r5, r0
   1618a:	2e00      	cmp	r6, #0
   1618c:	d1cf      	bne.n	1612e <__aeabi_dsub+0x3fa>
   1618e:	2d00      	cmp	r5, #0
   16190:	d14f      	bne.n	16232 <__aeabi_dsub+0x4fe>
   16192:	000c      	movs	r4, r1
   16194:	4314      	orrs	r4, r2
   16196:	d100      	bne.n	1619a <__aeabi_dsub+0x466>
   16198:	e0a0      	b.n	162dc <__aeabi_dsub+0x5a8>
   1619a:	000c      	movs	r4, r1
   1619c:	0017      	movs	r7, r2
   1619e:	4698      	mov	r8, r3
   161a0:	e64e      	b.n	15e40 <__aeabi_dsub+0x10c>
   161a2:	4666      	mov	r6, ip
   161a4:	2400      	movs	r4, #0
   161a6:	2700      	movs	r7, #0
   161a8:	e685      	b.n	15eb6 <__aeabi_dsub+0x182>
   161aa:	001f      	movs	r7, r3
   161ac:	0008      	movs	r0, r1
   161ae:	3f20      	subs	r7, #32
   161b0:	40f8      	lsrs	r0, r7
   161b2:	0007      	movs	r7, r0
   161b4:	2b20      	cmp	r3, #32
   161b6:	d100      	bne.n	161ba <__aeabi_dsub+0x486>
   161b8:	e08e      	b.n	162d8 <__aeabi_dsub+0x5a4>
   161ba:	2040      	movs	r0, #64	; 0x40
   161bc:	1ac3      	subs	r3, r0, r3
   161be:	4099      	lsls	r1, r3
   161c0:	430a      	orrs	r2, r1
   161c2:	1e51      	subs	r1, r2, #1
   161c4:	418a      	sbcs	r2, r1
   161c6:	2100      	movs	r1, #0
   161c8:	4317      	orrs	r7, r2
   161ca:	e692      	b.n	15ef2 <__aeabi_dsub+0x1be>
   161cc:	2e00      	cmp	r6, #0
   161ce:	d114      	bne.n	161fa <__aeabi_dsub+0x4c6>
   161d0:	0026      	movs	r6, r4
   161d2:	4650      	mov	r0, sl
   161d4:	4306      	orrs	r6, r0
   161d6:	d062      	beq.n	1629e <__aeabi_dsub+0x56a>
   161d8:	43db      	mvns	r3, r3
   161da:	2b00      	cmp	r3, #0
   161dc:	d15c      	bne.n	16298 <__aeabi_dsub+0x564>
   161de:	1887      	adds	r7, r0, r2
   161e0:	4297      	cmp	r7, r2
   161e2:	4192      	sbcs	r2, r2
   161e4:	1864      	adds	r4, r4, r1
   161e6:	4252      	negs	r2, r2
   161e8:	18a4      	adds	r4, r4, r2
   161ea:	4666      	mov	r6, ip
   161ec:	e687      	b.n	15efe <__aeabi_dsub+0x1ca>
   161ee:	4650      	mov	r0, sl
   161f0:	4320      	orrs	r0, r4
   161f2:	1e44      	subs	r4, r0, #1
   161f4:	41a0      	sbcs	r0, r4
   161f6:	2400      	movs	r4, #0
   161f8:	e760      	b.n	160bc <__aeabi_dsub+0x388>
   161fa:	4e57      	ldr	r6, [pc, #348]	; (16358 <__aeabi_dsub+0x624>)
   161fc:	45b4      	cmp	ip, r6
   161fe:	d04e      	beq.n	1629e <__aeabi_dsub+0x56a>
   16200:	2680      	movs	r6, #128	; 0x80
   16202:	0436      	lsls	r6, r6, #16
   16204:	425b      	negs	r3, r3
   16206:	4334      	orrs	r4, r6
   16208:	2b38      	cmp	r3, #56	; 0x38
   1620a:	dd00      	ble.n	1620e <__aeabi_dsub+0x4da>
   1620c:	e07f      	b.n	1630e <__aeabi_dsub+0x5da>
   1620e:	2b1f      	cmp	r3, #31
   16210:	dd00      	ble.n	16214 <__aeabi_dsub+0x4e0>
   16212:	e08b      	b.n	1632c <__aeabi_dsub+0x5f8>
   16214:	2620      	movs	r6, #32
   16216:	0027      	movs	r7, r4
   16218:	4650      	mov	r0, sl
   1621a:	1af6      	subs	r6, r6, r3
   1621c:	40b7      	lsls	r7, r6
   1621e:	40d8      	lsrs	r0, r3
   16220:	4307      	orrs	r7, r0
   16222:	4650      	mov	r0, sl
   16224:	40b0      	lsls	r0, r6
   16226:	1e46      	subs	r6, r0, #1
   16228:	41b0      	sbcs	r0, r6
   1622a:	4307      	orrs	r7, r0
   1622c:	40dc      	lsrs	r4, r3
   1622e:	18bf      	adds	r7, r7, r2
   16230:	e7d6      	b.n	161e0 <__aeabi_dsub+0x4ac>
   16232:	000d      	movs	r5, r1
   16234:	4315      	orrs	r5, r2
   16236:	d100      	bne.n	1623a <__aeabi_dsub+0x506>
   16238:	e602      	b.n	15e40 <__aeabi_dsub+0x10c>
   1623a:	4650      	mov	r0, sl
   1623c:	1a80      	subs	r0, r0, r2
   1623e:	4582      	cmp	sl, r0
   16240:	41bf      	sbcs	r7, r7
   16242:	1a65      	subs	r5, r4, r1
   16244:	427f      	negs	r7, r7
   16246:	1bed      	subs	r5, r5, r7
   16248:	4684      	mov	ip, r0
   1624a:	0228      	lsls	r0, r5, #8
   1624c:	d400      	bmi.n	16250 <__aeabi_dsub+0x51c>
   1624e:	e68d      	b.n	15f6c <__aeabi_dsub+0x238>
   16250:	4650      	mov	r0, sl
   16252:	1a17      	subs	r7, r2, r0
   16254:	42ba      	cmp	r2, r7
   16256:	4192      	sbcs	r2, r2
   16258:	1b0c      	subs	r4, r1, r4
   1625a:	4252      	negs	r2, r2
   1625c:	1aa4      	subs	r4, r4, r2
   1625e:	4698      	mov	r8, r3
   16260:	e5ee      	b.n	15e40 <__aeabi_dsub+0x10c>
   16262:	000d      	movs	r5, r1
   16264:	4315      	orrs	r5, r2
   16266:	d100      	bne.n	1626a <__aeabi_dsub+0x536>
   16268:	e76b      	b.n	16142 <__aeabi_dsub+0x40e>
   1626a:	4650      	mov	r0, sl
   1626c:	0767      	lsls	r7, r4, #29
   1626e:	08c0      	lsrs	r0, r0, #3
   16270:	4307      	orrs	r7, r0
   16272:	2080      	movs	r0, #128	; 0x80
   16274:	08e4      	lsrs	r4, r4, #3
   16276:	0300      	lsls	r0, r0, #12
   16278:	4204      	tst	r4, r0
   1627a:	d007      	beq.n	1628c <__aeabi_dsub+0x558>
   1627c:	08cd      	lsrs	r5, r1, #3
   1627e:	4205      	tst	r5, r0
   16280:	d104      	bne.n	1628c <__aeabi_dsub+0x558>
   16282:	002c      	movs	r4, r5
   16284:	4698      	mov	r8, r3
   16286:	08d7      	lsrs	r7, r2, #3
   16288:	0749      	lsls	r1, r1, #29
   1628a:	430f      	orrs	r7, r1
   1628c:	0f7b      	lsrs	r3, r7, #29
   1628e:	00e4      	lsls	r4, r4, #3
   16290:	431c      	orrs	r4, r3
   16292:	00ff      	lsls	r7, r7, #3
   16294:	4e30      	ldr	r6, [pc, #192]	; (16358 <__aeabi_dsub+0x624>)
   16296:	e5d3      	b.n	15e40 <__aeabi_dsub+0x10c>
   16298:	4e2f      	ldr	r6, [pc, #188]	; (16358 <__aeabi_dsub+0x624>)
   1629a:	45b4      	cmp	ip, r6
   1629c:	d1b4      	bne.n	16208 <__aeabi_dsub+0x4d4>
   1629e:	000c      	movs	r4, r1
   162a0:	0017      	movs	r7, r2
   162a2:	4666      	mov	r6, ip
   162a4:	e5cc      	b.n	15e40 <__aeabi_dsub+0x10c>
   162a6:	2700      	movs	r7, #0
   162a8:	2400      	movs	r4, #0
   162aa:	e5e8      	b.n	15e7e <__aeabi_dsub+0x14a>
   162ac:	2b00      	cmp	r3, #0
   162ae:	d039      	beq.n	16324 <__aeabi_dsub+0x5f0>
   162b0:	000b      	movs	r3, r1
   162b2:	4313      	orrs	r3, r2
   162b4:	d100      	bne.n	162b8 <__aeabi_dsub+0x584>
   162b6:	e744      	b.n	16142 <__aeabi_dsub+0x40e>
   162b8:	08c0      	lsrs	r0, r0, #3
   162ba:	0767      	lsls	r7, r4, #29
   162bc:	4307      	orrs	r7, r0
   162be:	2080      	movs	r0, #128	; 0x80
   162c0:	08e4      	lsrs	r4, r4, #3
   162c2:	0300      	lsls	r0, r0, #12
   162c4:	4204      	tst	r4, r0
   162c6:	d0e1      	beq.n	1628c <__aeabi_dsub+0x558>
   162c8:	08cb      	lsrs	r3, r1, #3
   162ca:	4203      	tst	r3, r0
   162cc:	d1de      	bne.n	1628c <__aeabi_dsub+0x558>
   162ce:	08d7      	lsrs	r7, r2, #3
   162d0:	0749      	lsls	r1, r1, #29
   162d2:	430f      	orrs	r7, r1
   162d4:	001c      	movs	r4, r3
   162d6:	e7d9      	b.n	1628c <__aeabi_dsub+0x558>
   162d8:	2100      	movs	r1, #0
   162da:	e771      	b.n	161c0 <__aeabi_dsub+0x48c>
   162dc:	2500      	movs	r5, #0
   162de:	2700      	movs	r7, #0
   162e0:	e5e9      	b.n	15eb6 <__aeabi_dsub+0x182>
   162e2:	002e      	movs	r6, r5
   162e4:	0027      	movs	r7, r4
   162e6:	3e20      	subs	r6, #32
   162e8:	40f7      	lsrs	r7, r6
   162ea:	2d20      	cmp	r5, #32
   162ec:	d02f      	beq.n	1634e <__aeabi_dsub+0x61a>
   162ee:	2640      	movs	r6, #64	; 0x40
   162f0:	1b75      	subs	r5, r6, r5
   162f2:	40ac      	lsls	r4, r5
   162f4:	4650      	mov	r0, sl
   162f6:	4320      	orrs	r0, r4
   162f8:	1e44      	subs	r4, r0, #1
   162fa:	41a0      	sbcs	r0, r4
   162fc:	2400      	movs	r4, #0
   162fe:	4338      	orrs	r0, r7
   16300:	e6dc      	b.n	160bc <__aeabi_dsub+0x388>
   16302:	2480      	movs	r4, #128	; 0x80
   16304:	2500      	movs	r5, #0
   16306:	0324      	lsls	r4, r4, #12
   16308:	4e13      	ldr	r6, [pc, #76]	; (16358 <__aeabi_dsub+0x624>)
   1630a:	2700      	movs	r7, #0
   1630c:	e5d3      	b.n	15eb6 <__aeabi_dsub+0x182>
   1630e:	4650      	mov	r0, sl
   16310:	4320      	orrs	r0, r4
   16312:	0007      	movs	r7, r0
   16314:	1e78      	subs	r0, r7, #1
   16316:	4187      	sbcs	r7, r0
   16318:	2400      	movs	r4, #0
   1631a:	18bf      	adds	r7, r7, r2
   1631c:	e760      	b.n	161e0 <__aeabi_dsub+0x4ac>
   1631e:	000c      	movs	r4, r1
   16320:	0017      	movs	r7, r2
   16322:	e58d      	b.n	15e40 <__aeabi_dsub+0x10c>
   16324:	000c      	movs	r4, r1
   16326:	0017      	movs	r7, r2
   16328:	4e0b      	ldr	r6, [pc, #44]	; (16358 <__aeabi_dsub+0x624>)
   1632a:	e589      	b.n	15e40 <__aeabi_dsub+0x10c>
   1632c:	001e      	movs	r6, r3
   1632e:	0027      	movs	r7, r4
   16330:	3e20      	subs	r6, #32
   16332:	40f7      	lsrs	r7, r6
   16334:	2b20      	cmp	r3, #32
   16336:	d00c      	beq.n	16352 <__aeabi_dsub+0x61e>
   16338:	2640      	movs	r6, #64	; 0x40
   1633a:	1af3      	subs	r3, r6, r3
   1633c:	409c      	lsls	r4, r3
   1633e:	4650      	mov	r0, sl
   16340:	4320      	orrs	r0, r4
   16342:	1e44      	subs	r4, r0, #1
   16344:	41a0      	sbcs	r0, r4
   16346:	4307      	orrs	r7, r0
   16348:	2400      	movs	r4, #0
   1634a:	18bf      	adds	r7, r7, r2
   1634c:	e748      	b.n	161e0 <__aeabi_dsub+0x4ac>
   1634e:	2400      	movs	r4, #0
   16350:	e7d0      	b.n	162f4 <__aeabi_dsub+0x5c0>
   16352:	2400      	movs	r4, #0
   16354:	e7f3      	b.n	1633e <__aeabi_dsub+0x60a>
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	000007ff 	.word	0x000007ff
   1635c:	ff7fffff 	.word	0xff7fffff

00016360 <__aeabi_d2iz>:
   16360:	b530      	push	{r4, r5, lr}
   16362:	4d13      	ldr	r5, [pc, #76]	; (163b0 <__aeabi_d2iz+0x50>)
   16364:	030a      	lsls	r2, r1, #12
   16366:	004b      	lsls	r3, r1, #1
   16368:	0b12      	lsrs	r2, r2, #12
   1636a:	0d5b      	lsrs	r3, r3, #21
   1636c:	0fc9      	lsrs	r1, r1, #31
   1636e:	2400      	movs	r4, #0
   16370:	42ab      	cmp	r3, r5
   16372:	dd10      	ble.n	16396 <__aeabi_d2iz+0x36>
   16374:	4c0f      	ldr	r4, [pc, #60]	; (163b4 <__aeabi_d2iz+0x54>)
   16376:	42a3      	cmp	r3, r4
   16378:	dc0f      	bgt.n	1639a <__aeabi_d2iz+0x3a>
   1637a:	2480      	movs	r4, #128	; 0x80
   1637c:	4d0e      	ldr	r5, [pc, #56]	; (163b8 <__aeabi_d2iz+0x58>)
   1637e:	0364      	lsls	r4, r4, #13
   16380:	4322      	orrs	r2, r4
   16382:	1aed      	subs	r5, r5, r3
   16384:	2d1f      	cmp	r5, #31
   16386:	dd0b      	ble.n	163a0 <__aeabi_d2iz+0x40>
   16388:	480c      	ldr	r0, [pc, #48]	; (163bc <__aeabi_d2iz+0x5c>)
   1638a:	1ac3      	subs	r3, r0, r3
   1638c:	40da      	lsrs	r2, r3
   1638e:	4254      	negs	r4, r2
   16390:	2900      	cmp	r1, #0
   16392:	d100      	bne.n	16396 <__aeabi_d2iz+0x36>
   16394:	0014      	movs	r4, r2
   16396:	0020      	movs	r0, r4
   16398:	bd30      	pop	{r4, r5, pc}
   1639a:	4b09      	ldr	r3, [pc, #36]	; (163c0 <__aeabi_d2iz+0x60>)
   1639c:	18cc      	adds	r4, r1, r3
   1639e:	e7fa      	b.n	16396 <__aeabi_d2iz+0x36>
   163a0:	4c08      	ldr	r4, [pc, #32]	; (163c4 <__aeabi_d2iz+0x64>)
   163a2:	40e8      	lsrs	r0, r5
   163a4:	46a4      	mov	ip, r4
   163a6:	4463      	add	r3, ip
   163a8:	409a      	lsls	r2, r3
   163aa:	4302      	orrs	r2, r0
   163ac:	e7ef      	b.n	1638e <__aeabi_d2iz+0x2e>
   163ae:	46c0      	nop			; (mov r8, r8)
   163b0:	000003fe 	.word	0x000003fe
   163b4:	0000041d 	.word	0x0000041d
   163b8:	00000433 	.word	0x00000433
   163bc:	00000413 	.word	0x00000413
   163c0:	7fffffff 	.word	0x7fffffff
   163c4:	fffffbed 	.word	0xfffffbed

000163c8 <__aeabi_i2d>:
   163c8:	b570      	push	{r4, r5, r6, lr}
   163ca:	2800      	cmp	r0, #0
   163cc:	d030      	beq.n	16430 <__aeabi_i2d+0x68>
   163ce:	17c3      	asrs	r3, r0, #31
   163d0:	18c4      	adds	r4, r0, r3
   163d2:	405c      	eors	r4, r3
   163d4:	0fc5      	lsrs	r5, r0, #31
   163d6:	0020      	movs	r0, r4
   163d8:	f000 f94c 	bl	16674 <__clzsi2>
   163dc:	4b17      	ldr	r3, [pc, #92]	; (1643c <__aeabi_i2d+0x74>)
   163de:	4a18      	ldr	r2, [pc, #96]	; (16440 <__aeabi_i2d+0x78>)
   163e0:	1a1b      	subs	r3, r3, r0
   163e2:	1ad2      	subs	r2, r2, r3
   163e4:	2a1f      	cmp	r2, #31
   163e6:	dd18      	ble.n	1641a <__aeabi_i2d+0x52>
   163e8:	4a16      	ldr	r2, [pc, #88]	; (16444 <__aeabi_i2d+0x7c>)
   163ea:	1ad2      	subs	r2, r2, r3
   163ec:	4094      	lsls	r4, r2
   163ee:	2200      	movs	r2, #0
   163f0:	0324      	lsls	r4, r4, #12
   163f2:	055b      	lsls	r3, r3, #21
   163f4:	0b24      	lsrs	r4, r4, #12
   163f6:	0d5b      	lsrs	r3, r3, #21
   163f8:	2100      	movs	r1, #0
   163fa:	0010      	movs	r0, r2
   163fc:	0324      	lsls	r4, r4, #12
   163fe:	0d0a      	lsrs	r2, r1, #20
   16400:	0b24      	lsrs	r4, r4, #12
   16402:	0512      	lsls	r2, r2, #20
   16404:	4322      	orrs	r2, r4
   16406:	4c10      	ldr	r4, [pc, #64]	; (16448 <__aeabi_i2d+0x80>)
   16408:	051b      	lsls	r3, r3, #20
   1640a:	4022      	ands	r2, r4
   1640c:	4313      	orrs	r3, r2
   1640e:	005b      	lsls	r3, r3, #1
   16410:	07ed      	lsls	r5, r5, #31
   16412:	085b      	lsrs	r3, r3, #1
   16414:	432b      	orrs	r3, r5
   16416:	0019      	movs	r1, r3
   16418:	bd70      	pop	{r4, r5, r6, pc}
   1641a:	0021      	movs	r1, r4
   1641c:	4091      	lsls	r1, r2
   1641e:	000a      	movs	r2, r1
   16420:	210b      	movs	r1, #11
   16422:	1a08      	subs	r0, r1, r0
   16424:	40c4      	lsrs	r4, r0
   16426:	055b      	lsls	r3, r3, #21
   16428:	0324      	lsls	r4, r4, #12
   1642a:	0b24      	lsrs	r4, r4, #12
   1642c:	0d5b      	lsrs	r3, r3, #21
   1642e:	e7e3      	b.n	163f8 <__aeabi_i2d+0x30>
   16430:	2500      	movs	r5, #0
   16432:	2300      	movs	r3, #0
   16434:	2400      	movs	r4, #0
   16436:	2200      	movs	r2, #0
   16438:	e7de      	b.n	163f8 <__aeabi_i2d+0x30>
   1643a:	46c0      	nop			; (mov r8, r8)
   1643c:	0000041e 	.word	0x0000041e
   16440:	00000433 	.word	0x00000433
   16444:	00000413 	.word	0x00000413
   16448:	800fffff 	.word	0x800fffff

0001644c <__aeabi_ui2d>:
   1644c:	b510      	push	{r4, lr}
   1644e:	1e04      	subs	r4, r0, #0
   16450:	d028      	beq.n	164a4 <__aeabi_ui2d+0x58>
   16452:	f000 f90f 	bl	16674 <__clzsi2>
   16456:	4b15      	ldr	r3, [pc, #84]	; (164ac <__aeabi_ui2d+0x60>)
   16458:	4a15      	ldr	r2, [pc, #84]	; (164b0 <__aeabi_ui2d+0x64>)
   1645a:	1a1b      	subs	r3, r3, r0
   1645c:	1ad2      	subs	r2, r2, r3
   1645e:	2a1f      	cmp	r2, #31
   16460:	dd15      	ble.n	1648e <__aeabi_ui2d+0x42>
   16462:	4a14      	ldr	r2, [pc, #80]	; (164b4 <__aeabi_ui2d+0x68>)
   16464:	1ad2      	subs	r2, r2, r3
   16466:	4094      	lsls	r4, r2
   16468:	2200      	movs	r2, #0
   1646a:	0324      	lsls	r4, r4, #12
   1646c:	055b      	lsls	r3, r3, #21
   1646e:	0b24      	lsrs	r4, r4, #12
   16470:	0d5b      	lsrs	r3, r3, #21
   16472:	2100      	movs	r1, #0
   16474:	0010      	movs	r0, r2
   16476:	0324      	lsls	r4, r4, #12
   16478:	0d0a      	lsrs	r2, r1, #20
   1647a:	0b24      	lsrs	r4, r4, #12
   1647c:	0512      	lsls	r2, r2, #20
   1647e:	4322      	orrs	r2, r4
   16480:	4c0d      	ldr	r4, [pc, #52]	; (164b8 <__aeabi_ui2d+0x6c>)
   16482:	051b      	lsls	r3, r3, #20
   16484:	4022      	ands	r2, r4
   16486:	4313      	orrs	r3, r2
   16488:	005b      	lsls	r3, r3, #1
   1648a:	0859      	lsrs	r1, r3, #1
   1648c:	bd10      	pop	{r4, pc}
   1648e:	0021      	movs	r1, r4
   16490:	4091      	lsls	r1, r2
   16492:	000a      	movs	r2, r1
   16494:	210b      	movs	r1, #11
   16496:	1a08      	subs	r0, r1, r0
   16498:	40c4      	lsrs	r4, r0
   1649a:	055b      	lsls	r3, r3, #21
   1649c:	0324      	lsls	r4, r4, #12
   1649e:	0b24      	lsrs	r4, r4, #12
   164a0:	0d5b      	lsrs	r3, r3, #21
   164a2:	e7e6      	b.n	16472 <__aeabi_ui2d+0x26>
   164a4:	2300      	movs	r3, #0
   164a6:	2400      	movs	r4, #0
   164a8:	2200      	movs	r2, #0
   164aa:	e7e2      	b.n	16472 <__aeabi_ui2d+0x26>
   164ac:	0000041e 	.word	0x0000041e
   164b0:	00000433 	.word	0x00000433
   164b4:	00000413 	.word	0x00000413
   164b8:	800fffff 	.word	0x800fffff

000164bc <__aeabi_f2d>:
   164bc:	0041      	lsls	r1, r0, #1
   164be:	0e09      	lsrs	r1, r1, #24
   164c0:	1c4b      	adds	r3, r1, #1
   164c2:	b570      	push	{r4, r5, r6, lr}
   164c4:	b2db      	uxtb	r3, r3
   164c6:	0246      	lsls	r6, r0, #9
   164c8:	0a75      	lsrs	r5, r6, #9
   164ca:	0fc4      	lsrs	r4, r0, #31
   164cc:	2b01      	cmp	r3, #1
   164ce:	dd14      	ble.n	164fa <__aeabi_f2d+0x3e>
   164d0:	23e0      	movs	r3, #224	; 0xe0
   164d2:	009b      	lsls	r3, r3, #2
   164d4:	076d      	lsls	r5, r5, #29
   164d6:	0b36      	lsrs	r6, r6, #12
   164d8:	18cb      	adds	r3, r1, r3
   164da:	2100      	movs	r1, #0
   164dc:	0d0a      	lsrs	r2, r1, #20
   164de:	0028      	movs	r0, r5
   164e0:	0512      	lsls	r2, r2, #20
   164e2:	4d1c      	ldr	r5, [pc, #112]	; (16554 <__aeabi_f2d+0x98>)
   164e4:	4332      	orrs	r2, r6
   164e6:	055b      	lsls	r3, r3, #21
   164e8:	402a      	ands	r2, r5
   164ea:	085b      	lsrs	r3, r3, #1
   164ec:	4313      	orrs	r3, r2
   164ee:	005b      	lsls	r3, r3, #1
   164f0:	07e4      	lsls	r4, r4, #31
   164f2:	085b      	lsrs	r3, r3, #1
   164f4:	4323      	orrs	r3, r4
   164f6:	0019      	movs	r1, r3
   164f8:	bd70      	pop	{r4, r5, r6, pc}
   164fa:	2900      	cmp	r1, #0
   164fc:	d114      	bne.n	16528 <__aeabi_f2d+0x6c>
   164fe:	2d00      	cmp	r5, #0
   16500:	d01e      	beq.n	16540 <__aeabi_f2d+0x84>
   16502:	0028      	movs	r0, r5
   16504:	f000 f8b6 	bl	16674 <__clzsi2>
   16508:	280a      	cmp	r0, #10
   1650a:	dc1c      	bgt.n	16546 <__aeabi_f2d+0x8a>
   1650c:	230b      	movs	r3, #11
   1650e:	002a      	movs	r2, r5
   16510:	1a1b      	subs	r3, r3, r0
   16512:	40da      	lsrs	r2, r3
   16514:	0003      	movs	r3, r0
   16516:	3315      	adds	r3, #21
   16518:	409d      	lsls	r5, r3
   1651a:	4b0f      	ldr	r3, [pc, #60]	; (16558 <__aeabi_f2d+0x9c>)
   1651c:	0312      	lsls	r2, r2, #12
   1651e:	1a1b      	subs	r3, r3, r0
   16520:	055b      	lsls	r3, r3, #21
   16522:	0b16      	lsrs	r6, r2, #12
   16524:	0d5b      	lsrs	r3, r3, #21
   16526:	e7d8      	b.n	164da <__aeabi_f2d+0x1e>
   16528:	2d00      	cmp	r5, #0
   1652a:	d006      	beq.n	1653a <__aeabi_f2d+0x7e>
   1652c:	0b32      	lsrs	r2, r6, #12
   1652e:	2680      	movs	r6, #128	; 0x80
   16530:	0336      	lsls	r6, r6, #12
   16532:	076d      	lsls	r5, r5, #29
   16534:	4316      	orrs	r6, r2
   16536:	4b09      	ldr	r3, [pc, #36]	; (1655c <__aeabi_f2d+0xa0>)
   16538:	e7cf      	b.n	164da <__aeabi_f2d+0x1e>
   1653a:	4b08      	ldr	r3, [pc, #32]	; (1655c <__aeabi_f2d+0xa0>)
   1653c:	2600      	movs	r6, #0
   1653e:	e7cc      	b.n	164da <__aeabi_f2d+0x1e>
   16540:	2300      	movs	r3, #0
   16542:	2600      	movs	r6, #0
   16544:	e7c9      	b.n	164da <__aeabi_f2d+0x1e>
   16546:	0003      	movs	r3, r0
   16548:	002a      	movs	r2, r5
   1654a:	3b0b      	subs	r3, #11
   1654c:	409a      	lsls	r2, r3
   1654e:	2500      	movs	r5, #0
   16550:	e7e3      	b.n	1651a <__aeabi_f2d+0x5e>
   16552:	46c0      	nop			; (mov r8, r8)
   16554:	800fffff 	.word	0x800fffff
   16558:	00000389 	.word	0x00000389
   1655c:	000007ff 	.word	0x000007ff

00016560 <__aeabi_d2f>:
   16560:	b5f0      	push	{r4, r5, r6, r7, lr}
   16562:	004c      	lsls	r4, r1, #1
   16564:	0d64      	lsrs	r4, r4, #21
   16566:	030b      	lsls	r3, r1, #12
   16568:	1c62      	adds	r2, r4, #1
   1656a:	0f45      	lsrs	r5, r0, #29
   1656c:	0a5b      	lsrs	r3, r3, #9
   1656e:	0552      	lsls	r2, r2, #21
   16570:	432b      	orrs	r3, r5
   16572:	0fc9      	lsrs	r1, r1, #31
   16574:	00c5      	lsls	r5, r0, #3
   16576:	0d52      	lsrs	r2, r2, #21
   16578:	2a01      	cmp	r2, #1
   1657a:	dd28      	ble.n	165ce <__aeabi_d2f+0x6e>
   1657c:	4a3a      	ldr	r2, [pc, #232]	; (16668 <__aeabi_d2f+0x108>)
   1657e:	18a6      	adds	r6, r4, r2
   16580:	2efe      	cmp	r6, #254	; 0xfe
   16582:	dc1b      	bgt.n	165bc <__aeabi_d2f+0x5c>
   16584:	2e00      	cmp	r6, #0
   16586:	dd3e      	ble.n	16606 <__aeabi_d2f+0xa6>
   16588:	0180      	lsls	r0, r0, #6
   1658a:	0002      	movs	r2, r0
   1658c:	1e50      	subs	r0, r2, #1
   1658e:	4182      	sbcs	r2, r0
   16590:	0f6d      	lsrs	r5, r5, #29
   16592:	432a      	orrs	r2, r5
   16594:	00db      	lsls	r3, r3, #3
   16596:	4313      	orrs	r3, r2
   16598:	075a      	lsls	r2, r3, #29
   1659a:	d004      	beq.n	165a6 <__aeabi_d2f+0x46>
   1659c:	220f      	movs	r2, #15
   1659e:	401a      	ands	r2, r3
   165a0:	2a04      	cmp	r2, #4
   165a2:	d000      	beq.n	165a6 <__aeabi_d2f+0x46>
   165a4:	3304      	adds	r3, #4
   165a6:	2280      	movs	r2, #128	; 0x80
   165a8:	04d2      	lsls	r2, r2, #19
   165aa:	401a      	ands	r2, r3
   165ac:	d05a      	beq.n	16664 <__aeabi_d2f+0x104>
   165ae:	3601      	adds	r6, #1
   165b0:	2eff      	cmp	r6, #255	; 0xff
   165b2:	d003      	beq.n	165bc <__aeabi_d2f+0x5c>
   165b4:	019b      	lsls	r3, r3, #6
   165b6:	0a5b      	lsrs	r3, r3, #9
   165b8:	b2f4      	uxtb	r4, r6
   165ba:	e001      	b.n	165c0 <__aeabi_d2f+0x60>
   165bc:	24ff      	movs	r4, #255	; 0xff
   165be:	2300      	movs	r3, #0
   165c0:	0258      	lsls	r0, r3, #9
   165c2:	05e4      	lsls	r4, r4, #23
   165c4:	0a40      	lsrs	r0, r0, #9
   165c6:	07c9      	lsls	r1, r1, #31
   165c8:	4320      	orrs	r0, r4
   165ca:	4308      	orrs	r0, r1
   165cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   165ce:	2c00      	cmp	r4, #0
   165d0:	d007      	beq.n	165e2 <__aeabi_d2f+0x82>
   165d2:	431d      	orrs	r5, r3
   165d4:	d0f2      	beq.n	165bc <__aeabi_d2f+0x5c>
   165d6:	2080      	movs	r0, #128	; 0x80
   165d8:	00db      	lsls	r3, r3, #3
   165da:	0480      	lsls	r0, r0, #18
   165dc:	4303      	orrs	r3, r0
   165de:	26ff      	movs	r6, #255	; 0xff
   165e0:	e7da      	b.n	16598 <__aeabi_d2f+0x38>
   165e2:	432b      	orrs	r3, r5
   165e4:	d003      	beq.n	165ee <__aeabi_d2f+0x8e>
   165e6:	2305      	movs	r3, #5
   165e8:	08db      	lsrs	r3, r3, #3
   165ea:	2cff      	cmp	r4, #255	; 0xff
   165ec:	d003      	beq.n	165f6 <__aeabi_d2f+0x96>
   165ee:	025b      	lsls	r3, r3, #9
   165f0:	0a5b      	lsrs	r3, r3, #9
   165f2:	b2e4      	uxtb	r4, r4
   165f4:	e7e4      	b.n	165c0 <__aeabi_d2f+0x60>
   165f6:	2b00      	cmp	r3, #0
   165f8:	d032      	beq.n	16660 <__aeabi_d2f+0x100>
   165fa:	2080      	movs	r0, #128	; 0x80
   165fc:	03c0      	lsls	r0, r0, #15
   165fe:	4303      	orrs	r3, r0
   16600:	025b      	lsls	r3, r3, #9
   16602:	0a5b      	lsrs	r3, r3, #9
   16604:	e7dc      	b.n	165c0 <__aeabi_d2f+0x60>
   16606:	0032      	movs	r2, r6
   16608:	3217      	adds	r2, #23
   1660a:	db14      	blt.n	16636 <__aeabi_d2f+0xd6>
   1660c:	2280      	movs	r2, #128	; 0x80
   1660e:	271e      	movs	r7, #30
   16610:	0412      	lsls	r2, r2, #16
   16612:	4313      	orrs	r3, r2
   16614:	1bbf      	subs	r7, r7, r6
   16616:	2f1f      	cmp	r7, #31
   16618:	dc0f      	bgt.n	1663a <__aeabi_d2f+0xda>
   1661a:	4a14      	ldr	r2, [pc, #80]	; (1666c <__aeabi_d2f+0x10c>)
   1661c:	4694      	mov	ip, r2
   1661e:	4464      	add	r4, ip
   16620:	002a      	movs	r2, r5
   16622:	40a5      	lsls	r5, r4
   16624:	002e      	movs	r6, r5
   16626:	40a3      	lsls	r3, r4
   16628:	1e75      	subs	r5, r6, #1
   1662a:	41ae      	sbcs	r6, r5
   1662c:	40fa      	lsrs	r2, r7
   1662e:	4333      	orrs	r3, r6
   16630:	4313      	orrs	r3, r2
   16632:	2600      	movs	r6, #0
   16634:	e7b0      	b.n	16598 <__aeabi_d2f+0x38>
   16636:	2400      	movs	r4, #0
   16638:	e7d5      	b.n	165e6 <__aeabi_d2f+0x86>
   1663a:	2202      	movs	r2, #2
   1663c:	4252      	negs	r2, r2
   1663e:	1b96      	subs	r6, r2, r6
   16640:	001a      	movs	r2, r3
   16642:	40f2      	lsrs	r2, r6
   16644:	2f20      	cmp	r7, #32
   16646:	d009      	beq.n	1665c <__aeabi_d2f+0xfc>
   16648:	4809      	ldr	r0, [pc, #36]	; (16670 <__aeabi_d2f+0x110>)
   1664a:	4684      	mov	ip, r0
   1664c:	4464      	add	r4, ip
   1664e:	40a3      	lsls	r3, r4
   16650:	432b      	orrs	r3, r5
   16652:	1e5d      	subs	r5, r3, #1
   16654:	41ab      	sbcs	r3, r5
   16656:	2600      	movs	r6, #0
   16658:	4313      	orrs	r3, r2
   1665a:	e79d      	b.n	16598 <__aeabi_d2f+0x38>
   1665c:	2300      	movs	r3, #0
   1665e:	e7f7      	b.n	16650 <__aeabi_d2f+0xf0>
   16660:	2300      	movs	r3, #0
   16662:	e7ad      	b.n	165c0 <__aeabi_d2f+0x60>
   16664:	0034      	movs	r4, r6
   16666:	e7bf      	b.n	165e8 <__aeabi_d2f+0x88>
   16668:	fffffc80 	.word	0xfffffc80
   1666c:	fffffc82 	.word	0xfffffc82
   16670:	fffffca2 	.word	0xfffffca2

00016674 <__clzsi2>:
   16674:	211c      	movs	r1, #28
   16676:	2301      	movs	r3, #1
   16678:	041b      	lsls	r3, r3, #16
   1667a:	4298      	cmp	r0, r3
   1667c:	d301      	bcc.n	16682 <__clzsi2+0xe>
   1667e:	0c00      	lsrs	r0, r0, #16
   16680:	3910      	subs	r1, #16
   16682:	0a1b      	lsrs	r3, r3, #8
   16684:	4298      	cmp	r0, r3
   16686:	d301      	bcc.n	1668c <__clzsi2+0x18>
   16688:	0a00      	lsrs	r0, r0, #8
   1668a:	3908      	subs	r1, #8
   1668c:	091b      	lsrs	r3, r3, #4
   1668e:	4298      	cmp	r0, r3
   16690:	d301      	bcc.n	16696 <__clzsi2+0x22>
   16692:	0900      	lsrs	r0, r0, #4
   16694:	3904      	subs	r1, #4
   16696:	a202      	add	r2, pc, #8	; (adr r2, 166a0 <__clzsi2+0x2c>)
   16698:	5c10      	ldrb	r0, [r2, r0]
   1669a:	1840      	adds	r0, r0, r1
   1669c:	4770      	bx	lr
   1669e:	46c0      	nop			; (mov r8, r8)
   166a0:	02020304 	.word	0x02020304
   166a4:	01010101 	.word	0x01010101
	...

000166b0 <__clzdi2>:
   166b0:	b510      	push	{r4, lr}
   166b2:	2900      	cmp	r1, #0
   166b4:	d103      	bne.n	166be <__clzdi2+0xe>
   166b6:	f7ff ffdd 	bl	16674 <__clzsi2>
   166ba:	3020      	adds	r0, #32
   166bc:	e002      	b.n	166c4 <__clzdi2+0x14>
   166be:	1c08      	adds	r0, r1, #0
   166c0:	f7ff ffd8 	bl	16674 <__clzsi2>
   166c4:	bd10      	pop	{r4, pc}
   166c6:	46c0      	nop			; (mov r8, r8)

000166c8 <__assert_func>:
   166c8:	b530      	push	{r4, r5, lr}
   166ca:	001c      	movs	r4, r3
   166cc:	4b09      	ldr	r3, [pc, #36]	; (166f4 <__assert_func+0x2c>)
   166ce:	0005      	movs	r5, r0
   166d0:	681b      	ldr	r3, [r3, #0]
   166d2:	b085      	sub	sp, #20
   166d4:	68d8      	ldr	r0, [r3, #12]
   166d6:	4b08      	ldr	r3, [pc, #32]	; (166f8 <__assert_func+0x30>)
   166d8:	2a00      	cmp	r2, #0
   166da:	d101      	bne.n	166e0 <__assert_func+0x18>
   166dc:	4b07      	ldr	r3, [pc, #28]	; (166fc <__assert_func+0x34>)
   166de:	001a      	movs	r2, r3
   166e0:	9202      	str	r2, [sp, #8]
   166e2:	9301      	str	r3, [sp, #4]
   166e4:	9100      	str	r1, [sp, #0]
   166e6:	002b      	movs	r3, r5
   166e8:	0022      	movs	r2, r4
   166ea:	4905      	ldr	r1, [pc, #20]	; (16700 <__assert_func+0x38>)
   166ec:	f000 f80a 	bl	16704 <fiprintf>
   166f0:	f000 fdac 	bl	1724c <abort>
   166f4:	20000028 	.word	0x20000028
   166f8:	00018cb4 	.word	0x00018cb4
   166fc:	00018cef 	.word	0x00018cef
   16700:	00018cc1 	.word	0x00018cc1

00016704 <fiprintf>:
   16704:	b40e      	push	{r1, r2, r3}
   16706:	b503      	push	{r0, r1, lr}
   16708:	0001      	movs	r1, r0
   1670a:	ab03      	add	r3, sp, #12
   1670c:	4804      	ldr	r0, [pc, #16]	; (16720 <fiprintf+0x1c>)
   1670e:	cb04      	ldmia	r3!, {r2}
   16710:	6800      	ldr	r0, [r0, #0]
   16712:	9301      	str	r3, [sp, #4]
   16714:	f000 f872 	bl	167fc <_vfiprintf_r>
   16718:	b002      	add	sp, #8
   1671a:	bc08      	pop	{r3}
   1671c:	b003      	add	sp, #12
   1671e:	4718      	bx	r3
   16720:	20000028 	.word	0x20000028

00016724 <__libc_init_array>:
   16724:	b570      	push	{r4, r5, r6, lr}
   16726:	2600      	movs	r6, #0
   16728:	4d0c      	ldr	r5, [pc, #48]	; (1675c <__libc_init_array+0x38>)
   1672a:	4c0d      	ldr	r4, [pc, #52]	; (16760 <__libc_init_array+0x3c>)
   1672c:	1b64      	subs	r4, r4, r5
   1672e:	10a4      	asrs	r4, r4, #2
   16730:	42a6      	cmp	r6, r4
   16732:	d109      	bne.n	16748 <__libc_init_array+0x24>
   16734:	2600      	movs	r6, #0
   16736:	f002 fb27 	bl	18d88 <_init>
   1673a:	4d0a      	ldr	r5, [pc, #40]	; (16764 <__libc_init_array+0x40>)
   1673c:	4c0a      	ldr	r4, [pc, #40]	; (16768 <__libc_init_array+0x44>)
   1673e:	1b64      	subs	r4, r4, r5
   16740:	10a4      	asrs	r4, r4, #2
   16742:	42a6      	cmp	r6, r4
   16744:	d105      	bne.n	16752 <__libc_init_array+0x2e>
   16746:	bd70      	pop	{r4, r5, r6, pc}
   16748:	00b3      	lsls	r3, r6, #2
   1674a:	58eb      	ldr	r3, [r5, r3]
   1674c:	4798      	blx	r3
   1674e:	3601      	adds	r6, #1
   16750:	e7ee      	b.n	16730 <__libc_init_array+0xc>
   16752:	00b3      	lsls	r3, r6, #2
   16754:	58eb      	ldr	r3, [r5, r3]
   16756:	4798      	blx	r3
   16758:	3601      	adds	r6, #1
   1675a:	e7f2      	b.n	16742 <__libc_init_array+0x1e>
   1675c:	00018d94 	.word	0x00018d94
   16760:	00018d94 	.word	0x00018d94
   16764:	00018d94 	.word	0x00018d94
   16768:	00018d98 	.word	0x00018d98

0001676c <memcmp>:
   1676c:	b530      	push	{r4, r5, lr}
   1676e:	2400      	movs	r4, #0
   16770:	42a2      	cmp	r2, r4
   16772:	d101      	bne.n	16778 <memcmp+0xc>
   16774:	2000      	movs	r0, #0
   16776:	e005      	b.n	16784 <memcmp+0x18>
   16778:	5d03      	ldrb	r3, [r0, r4]
   1677a:	1c65      	adds	r5, r4, #1
   1677c:	5d0c      	ldrb	r4, [r1, r4]
   1677e:	42a3      	cmp	r3, r4
   16780:	d001      	beq.n	16786 <memcmp+0x1a>
   16782:	1b18      	subs	r0, r3, r4
   16784:	bd30      	pop	{r4, r5, pc}
   16786:	002c      	movs	r4, r5
   16788:	e7f2      	b.n	16770 <memcmp+0x4>

0001678a <memcpy>:
   1678a:	2300      	movs	r3, #0
   1678c:	b510      	push	{r4, lr}
   1678e:	429a      	cmp	r2, r3
   16790:	d100      	bne.n	16794 <memcpy+0xa>
   16792:	bd10      	pop	{r4, pc}
   16794:	5ccc      	ldrb	r4, [r1, r3]
   16796:	54c4      	strb	r4, [r0, r3]
   16798:	3301      	adds	r3, #1
   1679a:	e7f8      	b.n	1678e <memcpy+0x4>

0001679c <memset>:
   1679c:	0003      	movs	r3, r0
   1679e:	1882      	adds	r2, r0, r2
   167a0:	4293      	cmp	r3, r2
   167a2:	d100      	bne.n	167a6 <memset+0xa>
   167a4:	4770      	bx	lr
   167a6:	7019      	strb	r1, [r3, #0]
   167a8:	3301      	adds	r3, #1
   167aa:	e7f9      	b.n	167a0 <memset+0x4>

000167ac <__sfputc_r>:
   167ac:	6893      	ldr	r3, [r2, #8]
   167ae:	b510      	push	{r4, lr}
   167b0:	3b01      	subs	r3, #1
   167b2:	6093      	str	r3, [r2, #8]
   167b4:	2b00      	cmp	r3, #0
   167b6:	da05      	bge.n	167c4 <__sfputc_r+0x18>
   167b8:	6994      	ldr	r4, [r2, #24]
   167ba:	42a3      	cmp	r3, r4
   167bc:	db08      	blt.n	167d0 <__sfputc_r+0x24>
   167be:	b2cb      	uxtb	r3, r1
   167c0:	2b0a      	cmp	r3, #10
   167c2:	d005      	beq.n	167d0 <__sfputc_r+0x24>
   167c4:	6813      	ldr	r3, [r2, #0]
   167c6:	1c58      	adds	r0, r3, #1
   167c8:	6010      	str	r0, [r2, #0]
   167ca:	7019      	strb	r1, [r3, #0]
   167cc:	b2c8      	uxtb	r0, r1
   167ce:	bd10      	pop	{r4, pc}
   167d0:	f000 fc70 	bl	170b4 <__swbuf_r>
   167d4:	e7fb      	b.n	167ce <__sfputc_r+0x22>

000167d6 <__sfputs_r>:
   167d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167d8:	0006      	movs	r6, r0
   167da:	000f      	movs	r7, r1
   167dc:	0014      	movs	r4, r2
   167de:	18d5      	adds	r5, r2, r3
   167e0:	42ac      	cmp	r4, r5
   167e2:	d101      	bne.n	167e8 <__sfputs_r+0x12>
   167e4:	2000      	movs	r0, #0
   167e6:	e007      	b.n	167f8 <__sfputs_r+0x22>
   167e8:	7821      	ldrb	r1, [r4, #0]
   167ea:	003a      	movs	r2, r7
   167ec:	0030      	movs	r0, r6
   167ee:	f7ff ffdd 	bl	167ac <__sfputc_r>
   167f2:	3401      	adds	r4, #1
   167f4:	1c43      	adds	r3, r0, #1
   167f6:	d1f3      	bne.n	167e0 <__sfputs_r+0xa>
   167f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167fa:	Address 0x000167fa is out of bounds.


000167fc <_vfiprintf_r>:
   167fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   167fe:	b09f      	sub	sp, #124	; 0x7c
   16800:	0006      	movs	r6, r0
   16802:	000f      	movs	r7, r1
   16804:	0014      	movs	r4, r2
   16806:	9305      	str	r3, [sp, #20]
   16808:	2800      	cmp	r0, #0
   1680a:	d004      	beq.n	16816 <_vfiprintf_r+0x1a>
   1680c:	6983      	ldr	r3, [r0, #24]
   1680e:	2b00      	cmp	r3, #0
   16810:	d101      	bne.n	16816 <_vfiprintf_r+0x1a>
   16812:	f000 fe1b 	bl	1744c <__sinit>
   16816:	4b7f      	ldr	r3, [pc, #508]	; (16a14 <_vfiprintf_r+0x218>)
   16818:	429f      	cmp	r7, r3
   1681a:	d15c      	bne.n	168d6 <_vfiprintf_r+0xda>
   1681c:	6877      	ldr	r7, [r6, #4]
   1681e:	89bb      	ldrh	r3, [r7, #12]
   16820:	071b      	lsls	r3, r3, #28
   16822:	d562      	bpl.n	168ea <_vfiprintf_r+0xee>
   16824:	693b      	ldr	r3, [r7, #16]
   16826:	2b00      	cmp	r3, #0
   16828:	d05f      	beq.n	168ea <_vfiprintf_r+0xee>
   1682a:	2300      	movs	r3, #0
   1682c:	ad06      	add	r5, sp, #24
   1682e:	616b      	str	r3, [r5, #20]
   16830:	3320      	adds	r3, #32
   16832:	766b      	strb	r3, [r5, #25]
   16834:	3310      	adds	r3, #16
   16836:	76ab      	strb	r3, [r5, #26]
   16838:	9402      	str	r4, [sp, #8]
   1683a:	9c02      	ldr	r4, [sp, #8]
   1683c:	7823      	ldrb	r3, [r4, #0]
   1683e:	2b00      	cmp	r3, #0
   16840:	d15d      	bne.n	168fe <_vfiprintf_r+0x102>
   16842:	9b02      	ldr	r3, [sp, #8]
   16844:	1ae3      	subs	r3, r4, r3
   16846:	9304      	str	r3, [sp, #16]
   16848:	d00d      	beq.n	16866 <_vfiprintf_r+0x6a>
   1684a:	9b04      	ldr	r3, [sp, #16]
   1684c:	9a02      	ldr	r2, [sp, #8]
   1684e:	0039      	movs	r1, r7
   16850:	0030      	movs	r0, r6
   16852:	f7ff ffc0 	bl	167d6 <__sfputs_r>
   16856:	1c43      	adds	r3, r0, #1
   16858:	d100      	bne.n	1685c <_vfiprintf_r+0x60>
   1685a:	e0cc      	b.n	169f6 <_vfiprintf_r+0x1fa>
   1685c:	696a      	ldr	r2, [r5, #20]
   1685e:	9b04      	ldr	r3, [sp, #16]
   16860:	4694      	mov	ip, r2
   16862:	4463      	add	r3, ip
   16864:	616b      	str	r3, [r5, #20]
   16866:	7823      	ldrb	r3, [r4, #0]
   16868:	2b00      	cmp	r3, #0
   1686a:	d100      	bne.n	1686e <_vfiprintf_r+0x72>
   1686c:	e0c3      	b.n	169f6 <_vfiprintf_r+0x1fa>
   1686e:	2201      	movs	r2, #1
   16870:	2300      	movs	r3, #0
   16872:	4252      	negs	r2, r2
   16874:	606a      	str	r2, [r5, #4]
   16876:	a902      	add	r1, sp, #8
   16878:	3254      	adds	r2, #84	; 0x54
   1687a:	1852      	adds	r2, r2, r1
   1687c:	3401      	adds	r4, #1
   1687e:	602b      	str	r3, [r5, #0]
   16880:	60eb      	str	r3, [r5, #12]
   16882:	60ab      	str	r3, [r5, #8]
   16884:	7013      	strb	r3, [r2, #0]
   16886:	65ab      	str	r3, [r5, #88]	; 0x58
   16888:	7821      	ldrb	r1, [r4, #0]
   1688a:	2205      	movs	r2, #5
   1688c:	4862      	ldr	r0, [pc, #392]	; (16a18 <_vfiprintf_r+0x21c>)
   1688e:	f000 fee9 	bl	17664 <memchr>
   16892:	1c63      	adds	r3, r4, #1
   16894:	469c      	mov	ip, r3
   16896:	2800      	cmp	r0, #0
   16898:	d135      	bne.n	16906 <_vfiprintf_r+0x10a>
   1689a:	6829      	ldr	r1, [r5, #0]
   1689c:	06cb      	lsls	r3, r1, #27
   1689e:	d504      	bpl.n	168aa <_vfiprintf_r+0xae>
   168a0:	2353      	movs	r3, #83	; 0x53
   168a2:	aa02      	add	r2, sp, #8
   168a4:	3020      	adds	r0, #32
   168a6:	189b      	adds	r3, r3, r2
   168a8:	7018      	strb	r0, [r3, #0]
   168aa:	070b      	lsls	r3, r1, #28
   168ac:	d504      	bpl.n	168b8 <_vfiprintf_r+0xbc>
   168ae:	2353      	movs	r3, #83	; 0x53
   168b0:	202b      	movs	r0, #43	; 0x2b
   168b2:	aa02      	add	r2, sp, #8
   168b4:	189b      	adds	r3, r3, r2
   168b6:	7018      	strb	r0, [r3, #0]
   168b8:	7823      	ldrb	r3, [r4, #0]
   168ba:	2b2a      	cmp	r3, #42	; 0x2a
   168bc:	d02c      	beq.n	16918 <_vfiprintf_r+0x11c>
   168be:	2000      	movs	r0, #0
   168c0:	210a      	movs	r1, #10
   168c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   168c4:	7822      	ldrb	r2, [r4, #0]
   168c6:	3a30      	subs	r2, #48	; 0x30
   168c8:	2a09      	cmp	r2, #9
   168ca:	d800      	bhi.n	168ce <_vfiprintf_r+0xd2>
   168cc:	e06b      	b.n	169a6 <_vfiprintf_r+0x1aa>
   168ce:	2800      	cmp	r0, #0
   168d0:	d02a      	beq.n	16928 <_vfiprintf_r+0x12c>
   168d2:	9309      	str	r3, [sp, #36]	; 0x24
   168d4:	e028      	b.n	16928 <_vfiprintf_r+0x12c>
   168d6:	4b51      	ldr	r3, [pc, #324]	; (16a1c <_vfiprintf_r+0x220>)
   168d8:	429f      	cmp	r7, r3
   168da:	d101      	bne.n	168e0 <_vfiprintf_r+0xe4>
   168dc:	68b7      	ldr	r7, [r6, #8]
   168de:	e79e      	b.n	1681e <_vfiprintf_r+0x22>
   168e0:	4b4f      	ldr	r3, [pc, #316]	; (16a20 <_vfiprintf_r+0x224>)
   168e2:	429f      	cmp	r7, r3
   168e4:	d19b      	bne.n	1681e <_vfiprintf_r+0x22>
   168e6:	68f7      	ldr	r7, [r6, #12]
   168e8:	e799      	b.n	1681e <_vfiprintf_r+0x22>
   168ea:	0039      	movs	r1, r7
   168ec:	0030      	movs	r0, r6
   168ee:	f000 fc37 	bl	17160 <__swsetup_r>
   168f2:	2800      	cmp	r0, #0
   168f4:	d099      	beq.n	1682a <_vfiprintf_r+0x2e>
   168f6:	2001      	movs	r0, #1
   168f8:	4240      	negs	r0, r0
   168fa:	b01f      	add	sp, #124	; 0x7c
   168fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   168fe:	2b25      	cmp	r3, #37	; 0x25
   16900:	d09f      	beq.n	16842 <_vfiprintf_r+0x46>
   16902:	3401      	adds	r4, #1
   16904:	e79a      	b.n	1683c <_vfiprintf_r+0x40>
   16906:	4b44      	ldr	r3, [pc, #272]	; (16a18 <_vfiprintf_r+0x21c>)
   16908:	6829      	ldr	r1, [r5, #0]
   1690a:	1ac0      	subs	r0, r0, r3
   1690c:	2301      	movs	r3, #1
   1690e:	4083      	lsls	r3, r0
   16910:	430b      	orrs	r3, r1
   16912:	602b      	str	r3, [r5, #0]
   16914:	4664      	mov	r4, ip
   16916:	e7b7      	b.n	16888 <_vfiprintf_r+0x8c>
   16918:	9b05      	ldr	r3, [sp, #20]
   1691a:	1d18      	adds	r0, r3, #4
   1691c:	681b      	ldr	r3, [r3, #0]
   1691e:	9005      	str	r0, [sp, #20]
   16920:	2b00      	cmp	r3, #0
   16922:	db3a      	blt.n	1699a <_vfiprintf_r+0x19e>
   16924:	9309      	str	r3, [sp, #36]	; 0x24
   16926:	4664      	mov	r4, ip
   16928:	7823      	ldrb	r3, [r4, #0]
   1692a:	2b2e      	cmp	r3, #46	; 0x2e
   1692c:	d10b      	bne.n	16946 <_vfiprintf_r+0x14a>
   1692e:	7863      	ldrb	r3, [r4, #1]
   16930:	1c62      	adds	r2, r4, #1
   16932:	2b2a      	cmp	r3, #42	; 0x2a
   16934:	d13f      	bne.n	169b6 <_vfiprintf_r+0x1ba>
   16936:	9b05      	ldr	r3, [sp, #20]
   16938:	3402      	adds	r4, #2
   1693a:	1d1a      	adds	r2, r3, #4
   1693c:	681b      	ldr	r3, [r3, #0]
   1693e:	9205      	str	r2, [sp, #20]
   16940:	2b00      	cmp	r3, #0
   16942:	db35      	blt.n	169b0 <_vfiprintf_r+0x1b4>
   16944:	9307      	str	r3, [sp, #28]
   16946:	7821      	ldrb	r1, [r4, #0]
   16948:	2203      	movs	r2, #3
   1694a:	4836      	ldr	r0, [pc, #216]	; (16a24 <_vfiprintf_r+0x228>)
   1694c:	f000 fe8a 	bl	17664 <memchr>
   16950:	2800      	cmp	r0, #0
   16952:	d007      	beq.n	16964 <_vfiprintf_r+0x168>
   16954:	4b33      	ldr	r3, [pc, #204]	; (16a24 <_vfiprintf_r+0x228>)
   16956:	682a      	ldr	r2, [r5, #0]
   16958:	1ac0      	subs	r0, r0, r3
   1695a:	2340      	movs	r3, #64	; 0x40
   1695c:	4083      	lsls	r3, r0
   1695e:	4313      	orrs	r3, r2
   16960:	602b      	str	r3, [r5, #0]
   16962:	3401      	adds	r4, #1
   16964:	7821      	ldrb	r1, [r4, #0]
   16966:	1c63      	adds	r3, r4, #1
   16968:	2206      	movs	r2, #6
   1696a:	482f      	ldr	r0, [pc, #188]	; (16a28 <_vfiprintf_r+0x22c>)
   1696c:	9302      	str	r3, [sp, #8]
   1696e:	7629      	strb	r1, [r5, #24]
   16970:	f000 fe78 	bl	17664 <memchr>
   16974:	2800      	cmp	r0, #0
   16976:	d044      	beq.n	16a02 <_vfiprintf_r+0x206>
   16978:	4b2c      	ldr	r3, [pc, #176]	; (16a2c <_vfiprintf_r+0x230>)
   1697a:	2b00      	cmp	r3, #0
   1697c:	d12f      	bne.n	169de <_vfiprintf_r+0x1e2>
   1697e:	6829      	ldr	r1, [r5, #0]
   16980:	9b05      	ldr	r3, [sp, #20]
   16982:	2207      	movs	r2, #7
   16984:	05c9      	lsls	r1, r1, #23
   16986:	d528      	bpl.n	169da <_vfiprintf_r+0x1de>
   16988:	189b      	adds	r3, r3, r2
   1698a:	4393      	bics	r3, r2
   1698c:	3308      	adds	r3, #8
   1698e:	9305      	str	r3, [sp, #20]
   16990:	696b      	ldr	r3, [r5, #20]
   16992:	9a03      	ldr	r2, [sp, #12]
   16994:	189b      	adds	r3, r3, r2
   16996:	616b      	str	r3, [r5, #20]
   16998:	e74f      	b.n	1683a <_vfiprintf_r+0x3e>
   1699a:	425b      	negs	r3, r3
   1699c:	60eb      	str	r3, [r5, #12]
   1699e:	2302      	movs	r3, #2
   169a0:	430b      	orrs	r3, r1
   169a2:	602b      	str	r3, [r5, #0]
   169a4:	e7bf      	b.n	16926 <_vfiprintf_r+0x12a>
   169a6:	434b      	muls	r3, r1
   169a8:	3401      	adds	r4, #1
   169aa:	189b      	adds	r3, r3, r2
   169ac:	2001      	movs	r0, #1
   169ae:	e789      	b.n	168c4 <_vfiprintf_r+0xc8>
   169b0:	2301      	movs	r3, #1
   169b2:	425b      	negs	r3, r3
   169b4:	e7c6      	b.n	16944 <_vfiprintf_r+0x148>
   169b6:	2300      	movs	r3, #0
   169b8:	0014      	movs	r4, r2
   169ba:	200a      	movs	r0, #10
   169bc:	001a      	movs	r2, r3
   169be:	606b      	str	r3, [r5, #4]
   169c0:	7821      	ldrb	r1, [r4, #0]
   169c2:	3930      	subs	r1, #48	; 0x30
   169c4:	2909      	cmp	r1, #9
   169c6:	d903      	bls.n	169d0 <_vfiprintf_r+0x1d4>
   169c8:	2b00      	cmp	r3, #0
   169ca:	d0bc      	beq.n	16946 <_vfiprintf_r+0x14a>
   169cc:	9207      	str	r2, [sp, #28]
   169ce:	e7ba      	b.n	16946 <_vfiprintf_r+0x14a>
   169d0:	4342      	muls	r2, r0
   169d2:	3401      	adds	r4, #1
   169d4:	1852      	adds	r2, r2, r1
   169d6:	2301      	movs	r3, #1
   169d8:	e7f2      	b.n	169c0 <_vfiprintf_r+0x1c4>
   169da:	3307      	adds	r3, #7
   169dc:	e7d5      	b.n	1698a <_vfiprintf_r+0x18e>
   169de:	ab05      	add	r3, sp, #20
   169e0:	9300      	str	r3, [sp, #0]
   169e2:	003a      	movs	r2, r7
   169e4:	4b12      	ldr	r3, [pc, #72]	; (16a30 <_vfiprintf_r+0x234>)
   169e6:	0029      	movs	r1, r5
   169e8:	0030      	movs	r0, r6
   169ea:	e000      	b.n	169ee <_vfiprintf_r+0x1f2>
   169ec:	bf00      	nop
   169ee:	9003      	str	r0, [sp, #12]
   169f0:	9b03      	ldr	r3, [sp, #12]
   169f2:	3301      	adds	r3, #1
   169f4:	d1cc      	bne.n	16990 <_vfiprintf_r+0x194>
   169f6:	89bb      	ldrh	r3, [r7, #12]
   169f8:	065b      	lsls	r3, r3, #25
   169fa:	d500      	bpl.n	169fe <_vfiprintf_r+0x202>
   169fc:	e77b      	b.n	168f6 <_vfiprintf_r+0xfa>
   169fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16a00:	e77b      	b.n	168fa <_vfiprintf_r+0xfe>
   16a02:	ab05      	add	r3, sp, #20
   16a04:	9300      	str	r3, [sp, #0]
   16a06:	003a      	movs	r2, r7
   16a08:	4b09      	ldr	r3, [pc, #36]	; (16a30 <_vfiprintf_r+0x234>)
   16a0a:	0029      	movs	r1, r5
   16a0c:	0030      	movs	r0, r6
   16a0e:	f000 f87f 	bl	16b10 <_printf_i>
   16a12:	e7ec      	b.n	169ee <_vfiprintf_r+0x1f2>
   16a14:	00018d48 	.word	0x00018d48
   16a18:	00018cf4 	.word	0x00018cf4
   16a1c:	00018d68 	.word	0x00018d68
   16a20:	00018d28 	.word	0x00018d28
   16a24:	00018cfa 	.word	0x00018cfa
   16a28:	00018cfe 	.word	0x00018cfe
   16a2c:	00000000 	.word	0x00000000
   16a30:	000167d7 	.word	0x000167d7

00016a34 <_printf_common>:
   16a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16a36:	0015      	movs	r5, r2
   16a38:	9301      	str	r3, [sp, #4]
   16a3a:	688a      	ldr	r2, [r1, #8]
   16a3c:	690b      	ldr	r3, [r1, #16]
   16a3e:	9000      	str	r0, [sp, #0]
   16a40:	000c      	movs	r4, r1
   16a42:	4293      	cmp	r3, r2
   16a44:	da00      	bge.n	16a48 <_printf_common+0x14>
   16a46:	0013      	movs	r3, r2
   16a48:	0022      	movs	r2, r4
   16a4a:	602b      	str	r3, [r5, #0]
   16a4c:	3243      	adds	r2, #67	; 0x43
   16a4e:	7812      	ldrb	r2, [r2, #0]
   16a50:	2a00      	cmp	r2, #0
   16a52:	d001      	beq.n	16a58 <_printf_common+0x24>
   16a54:	3301      	adds	r3, #1
   16a56:	602b      	str	r3, [r5, #0]
   16a58:	6823      	ldr	r3, [r4, #0]
   16a5a:	069b      	lsls	r3, r3, #26
   16a5c:	d502      	bpl.n	16a64 <_printf_common+0x30>
   16a5e:	682b      	ldr	r3, [r5, #0]
   16a60:	3302      	adds	r3, #2
   16a62:	602b      	str	r3, [r5, #0]
   16a64:	2706      	movs	r7, #6
   16a66:	6823      	ldr	r3, [r4, #0]
   16a68:	401f      	ands	r7, r3
   16a6a:	d027      	beq.n	16abc <_printf_common+0x88>
   16a6c:	0023      	movs	r3, r4
   16a6e:	3343      	adds	r3, #67	; 0x43
   16a70:	781b      	ldrb	r3, [r3, #0]
   16a72:	1e5a      	subs	r2, r3, #1
   16a74:	4193      	sbcs	r3, r2
   16a76:	6822      	ldr	r2, [r4, #0]
   16a78:	0692      	lsls	r2, r2, #26
   16a7a:	d430      	bmi.n	16ade <_printf_common+0xaa>
   16a7c:	0022      	movs	r2, r4
   16a7e:	9901      	ldr	r1, [sp, #4]
   16a80:	3243      	adds	r2, #67	; 0x43
   16a82:	9800      	ldr	r0, [sp, #0]
   16a84:	9e08      	ldr	r6, [sp, #32]
   16a86:	47b0      	blx	r6
   16a88:	1c43      	adds	r3, r0, #1
   16a8a:	d025      	beq.n	16ad8 <_printf_common+0xa4>
   16a8c:	2306      	movs	r3, #6
   16a8e:	6820      	ldr	r0, [r4, #0]
   16a90:	682a      	ldr	r2, [r5, #0]
   16a92:	68e1      	ldr	r1, [r4, #12]
   16a94:	4003      	ands	r3, r0
   16a96:	2500      	movs	r5, #0
   16a98:	2b04      	cmp	r3, #4
   16a9a:	d103      	bne.n	16aa4 <_printf_common+0x70>
   16a9c:	1a8d      	subs	r5, r1, r2
   16a9e:	43eb      	mvns	r3, r5
   16aa0:	17db      	asrs	r3, r3, #31
   16aa2:	401d      	ands	r5, r3
   16aa4:	68a3      	ldr	r3, [r4, #8]
   16aa6:	6922      	ldr	r2, [r4, #16]
   16aa8:	4293      	cmp	r3, r2
   16aaa:	dd01      	ble.n	16ab0 <_printf_common+0x7c>
   16aac:	1a9b      	subs	r3, r3, r2
   16aae:	18ed      	adds	r5, r5, r3
   16ab0:	2700      	movs	r7, #0
   16ab2:	42bd      	cmp	r5, r7
   16ab4:	d120      	bne.n	16af8 <_printf_common+0xc4>
   16ab6:	2000      	movs	r0, #0
   16ab8:	e010      	b.n	16adc <_printf_common+0xa8>
   16aba:	3701      	adds	r7, #1
   16abc:	68e3      	ldr	r3, [r4, #12]
   16abe:	682a      	ldr	r2, [r5, #0]
   16ac0:	1a9b      	subs	r3, r3, r2
   16ac2:	429f      	cmp	r7, r3
   16ac4:	dad2      	bge.n	16a6c <_printf_common+0x38>
   16ac6:	0022      	movs	r2, r4
   16ac8:	2301      	movs	r3, #1
   16aca:	3219      	adds	r2, #25
   16acc:	9901      	ldr	r1, [sp, #4]
   16ace:	9800      	ldr	r0, [sp, #0]
   16ad0:	9e08      	ldr	r6, [sp, #32]
   16ad2:	47b0      	blx	r6
   16ad4:	1c43      	adds	r3, r0, #1
   16ad6:	d1f0      	bne.n	16aba <_printf_common+0x86>
   16ad8:	2001      	movs	r0, #1
   16ada:	4240      	negs	r0, r0
   16adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16ade:	2030      	movs	r0, #48	; 0x30
   16ae0:	18e1      	adds	r1, r4, r3
   16ae2:	3143      	adds	r1, #67	; 0x43
   16ae4:	7008      	strb	r0, [r1, #0]
   16ae6:	0021      	movs	r1, r4
   16ae8:	1c5a      	adds	r2, r3, #1
   16aea:	3145      	adds	r1, #69	; 0x45
   16aec:	7809      	ldrb	r1, [r1, #0]
   16aee:	18a2      	adds	r2, r4, r2
   16af0:	3243      	adds	r2, #67	; 0x43
   16af2:	3302      	adds	r3, #2
   16af4:	7011      	strb	r1, [r2, #0]
   16af6:	e7c1      	b.n	16a7c <_printf_common+0x48>
   16af8:	0022      	movs	r2, r4
   16afa:	2301      	movs	r3, #1
   16afc:	321a      	adds	r2, #26
   16afe:	9901      	ldr	r1, [sp, #4]
   16b00:	9800      	ldr	r0, [sp, #0]
   16b02:	9e08      	ldr	r6, [sp, #32]
   16b04:	47b0      	blx	r6
   16b06:	1c43      	adds	r3, r0, #1
   16b08:	d0e6      	beq.n	16ad8 <_printf_common+0xa4>
   16b0a:	3701      	adds	r7, #1
   16b0c:	e7d1      	b.n	16ab2 <_printf_common+0x7e>
   16b0e:	Address 0x00016b0e is out of bounds.


00016b10 <_printf_i>:
   16b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b12:	b08b      	sub	sp, #44	; 0x2c
   16b14:	9206      	str	r2, [sp, #24]
   16b16:	000a      	movs	r2, r1
   16b18:	3243      	adds	r2, #67	; 0x43
   16b1a:	9307      	str	r3, [sp, #28]
   16b1c:	9005      	str	r0, [sp, #20]
   16b1e:	9204      	str	r2, [sp, #16]
   16b20:	7e0a      	ldrb	r2, [r1, #24]
   16b22:	000c      	movs	r4, r1
   16b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16b26:	2a6e      	cmp	r2, #110	; 0x6e
   16b28:	d100      	bne.n	16b2c <_printf_i+0x1c>
   16b2a:	e08f      	b.n	16c4c <_printf_i+0x13c>
   16b2c:	d817      	bhi.n	16b5e <_printf_i+0x4e>
   16b2e:	2a63      	cmp	r2, #99	; 0x63
   16b30:	d02c      	beq.n	16b8c <_printf_i+0x7c>
   16b32:	d808      	bhi.n	16b46 <_printf_i+0x36>
   16b34:	2a00      	cmp	r2, #0
   16b36:	d100      	bne.n	16b3a <_printf_i+0x2a>
   16b38:	e099      	b.n	16c6e <_printf_i+0x15e>
   16b3a:	2a58      	cmp	r2, #88	; 0x58
   16b3c:	d054      	beq.n	16be8 <_printf_i+0xd8>
   16b3e:	0026      	movs	r6, r4
   16b40:	3642      	adds	r6, #66	; 0x42
   16b42:	7032      	strb	r2, [r6, #0]
   16b44:	e029      	b.n	16b9a <_printf_i+0x8a>
   16b46:	2a64      	cmp	r2, #100	; 0x64
   16b48:	d001      	beq.n	16b4e <_printf_i+0x3e>
   16b4a:	2a69      	cmp	r2, #105	; 0x69
   16b4c:	d1f7      	bne.n	16b3e <_printf_i+0x2e>
   16b4e:	6821      	ldr	r1, [r4, #0]
   16b50:	681a      	ldr	r2, [r3, #0]
   16b52:	0608      	lsls	r0, r1, #24
   16b54:	d523      	bpl.n	16b9e <_printf_i+0x8e>
   16b56:	1d11      	adds	r1, r2, #4
   16b58:	6019      	str	r1, [r3, #0]
   16b5a:	6815      	ldr	r5, [r2, #0]
   16b5c:	e025      	b.n	16baa <_printf_i+0x9a>
   16b5e:	2a73      	cmp	r2, #115	; 0x73
   16b60:	d100      	bne.n	16b64 <_printf_i+0x54>
   16b62:	e088      	b.n	16c76 <_printf_i+0x166>
   16b64:	d808      	bhi.n	16b78 <_printf_i+0x68>
   16b66:	2a6f      	cmp	r2, #111	; 0x6f
   16b68:	d029      	beq.n	16bbe <_printf_i+0xae>
   16b6a:	2a70      	cmp	r2, #112	; 0x70
   16b6c:	d1e7      	bne.n	16b3e <_printf_i+0x2e>
   16b6e:	2220      	movs	r2, #32
   16b70:	6809      	ldr	r1, [r1, #0]
   16b72:	430a      	orrs	r2, r1
   16b74:	6022      	str	r2, [r4, #0]
   16b76:	e003      	b.n	16b80 <_printf_i+0x70>
   16b78:	2a75      	cmp	r2, #117	; 0x75
   16b7a:	d020      	beq.n	16bbe <_printf_i+0xae>
   16b7c:	2a78      	cmp	r2, #120	; 0x78
   16b7e:	d1de      	bne.n	16b3e <_printf_i+0x2e>
   16b80:	0022      	movs	r2, r4
   16b82:	2178      	movs	r1, #120	; 0x78
   16b84:	3245      	adds	r2, #69	; 0x45
   16b86:	7011      	strb	r1, [r2, #0]
   16b88:	4a6c      	ldr	r2, [pc, #432]	; (16d3c <_printf_i+0x22c>)
   16b8a:	e030      	b.n	16bee <_printf_i+0xde>
   16b8c:	000e      	movs	r6, r1
   16b8e:	681a      	ldr	r2, [r3, #0]
   16b90:	3642      	adds	r6, #66	; 0x42
   16b92:	1d11      	adds	r1, r2, #4
   16b94:	6019      	str	r1, [r3, #0]
   16b96:	6813      	ldr	r3, [r2, #0]
   16b98:	7033      	strb	r3, [r6, #0]
   16b9a:	2301      	movs	r3, #1
   16b9c:	e079      	b.n	16c92 <_printf_i+0x182>
   16b9e:	0649      	lsls	r1, r1, #25
   16ba0:	d5d9      	bpl.n	16b56 <_printf_i+0x46>
   16ba2:	1d11      	adds	r1, r2, #4
   16ba4:	6019      	str	r1, [r3, #0]
   16ba6:	2300      	movs	r3, #0
   16ba8:	5ed5      	ldrsh	r5, [r2, r3]
   16baa:	2d00      	cmp	r5, #0
   16bac:	da03      	bge.n	16bb6 <_printf_i+0xa6>
   16bae:	232d      	movs	r3, #45	; 0x2d
   16bb0:	9a04      	ldr	r2, [sp, #16]
   16bb2:	426d      	negs	r5, r5
   16bb4:	7013      	strb	r3, [r2, #0]
   16bb6:	4b62      	ldr	r3, [pc, #392]	; (16d40 <_printf_i+0x230>)
   16bb8:	270a      	movs	r7, #10
   16bba:	9303      	str	r3, [sp, #12]
   16bbc:	e02f      	b.n	16c1e <_printf_i+0x10e>
   16bbe:	6820      	ldr	r0, [r4, #0]
   16bc0:	6819      	ldr	r1, [r3, #0]
   16bc2:	0605      	lsls	r5, r0, #24
   16bc4:	d503      	bpl.n	16bce <_printf_i+0xbe>
   16bc6:	1d08      	adds	r0, r1, #4
   16bc8:	6018      	str	r0, [r3, #0]
   16bca:	680d      	ldr	r5, [r1, #0]
   16bcc:	e005      	b.n	16bda <_printf_i+0xca>
   16bce:	0640      	lsls	r0, r0, #25
   16bd0:	d5f9      	bpl.n	16bc6 <_printf_i+0xb6>
   16bd2:	680d      	ldr	r5, [r1, #0]
   16bd4:	1d08      	adds	r0, r1, #4
   16bd6:	6018      	str	r0, [r3, #0]
   16bd8:	b2ad      	uxth	r5, r5
   16bda:	4b59      	ldr	r3, [pc, #356]	; (16d40 <_printf_i+0x230>)
   16bdc:	2708      	movs	r7, #8
   16bde:	9303      	str	r3, [sp, #12]
   16be0:	2a6f      	cmp	r2, #111	; 0x6f
   16be2:	d018      	beq.n	16c16 <_printf_i+0x106>
   16be4:	270a      	movs	r7, #10
   16be6:	e016      	b.n	16c16 <_printf_i+0x106>
   16be8:	3145      	adds	r1, #69	; 0x45
   16bea:	700a      	strb	r2, [r1, #0]
   16bec:	4a54      	ldr	r2, [pc, #336]	; (16d40 <_printf_i+0x230>)
   16bee:	9203      	str	r2, [sp, #12]
   16bf0:	681a      	ldr	r2, [r3, #0]
   16bf2:	6821      	ldr	r1, [r4, #0]
   16bf4:	1d10      	adds	r0, r2, #4
   16bf6:	6018      	str	r0, [r3, #0]
   16bf8:	6815      	ldr	r5, [r2, #0]
   16bfa:	0608      	lsls	r0, r1, #24
   16bfc:	d522      	bpl.n	16c44 <_printf_i+0x134>
   16bfe:	07cb      	lsls	r3, r1, #31
   16c00:	d502      	bpl.n	16c08 <_printf_i+0xf8>
   16c02:	2320      	movs	r3, #32
   16c04:	4319      	orrs	r1, r3
   16c06:	6021      	str	r1, [r4, #0]
   16c08:	2710      	movs	r7, #16
   16c0a:	2d00      	cmp	r5, #0
   16c0c:	d103      	bne.n	16c16 <_printf_i+0x106>
   16c0e:	2320      	movs	r3, #32
   16c10:	6822      	ldr	r2, [r4, #0]
   16c12:	439a      	bics	r2, r3
   16c14:	6022      	str	r2, [r4, #0]
   16c16:	0023      	movs	r3, r4
   16c18:	2200      	movs	r2, #0
   16c1a:	3343      	adds	r3, #67	; 0x43
   16c1c:	701a      	strb	r2, [r3, #0]
   16c1e:	6863      	ldr	r3, [r4, #4]
   16c20:	60a3      	str	r3, [r4, #8]
   16c22:	2b00      	cmp	r3, #0
   16c24:	db5c      	blt.n	16ce0 <_printf_i+0x1d0>
   16c26:	2204      	movs	r2, #4
   16c28:	6821      	ldr	r1, [r4, #0]
   16c2a:	4391      	bics	r1, r2
   16c2c:	6021      	str	r1, [r4, #0]
   16c2e:	2d00      	cmp	r5, #0
   16c30:	d158      	bne.n	16ce4 <_printf_i+0x1d4>
   16c32:	9e04      	ldr	r6, [sp, #16]
   16c34:	2b00      	cmp	r3, #0
   16c36:	d064      	beq.n	16d02 <_printf_i+0x1f2>
   16c38:	0026      	movs	r6, r4
   16c3a:	9b03      	ldr	r3, [sp, #12]
   16c3c:	3642      	adds	r6, #66	; 0x42
   16c3e:	781b      	ldrb	r3, [r3, #0]
   16c40:	7033      	strb	r3, [r6, #0]
   16c42:	e05e      	b.n	16d02 <_printf_i+0x1f2>
   16c44:	0648      	lsls	r0, r1, #25
   16c46:	d5da      	bpl.n	16bfe <_printf_i+0xee>
   16c48:	b2ad      	uxth	r5, r5
   16c4a:	e7d8      	b.n	16bfe <_printf_i+0xee>
   16c4c:	6809      	ldr	r1, [r1, #0]
   16c4e:	681a      	ldr	r2, [r3, #0]
   16c50:	0608      	lsls	r0, r1, #24
   16c52:	d505      	bpl.n	16c60 <_printf_i+0x150>
   16c54:	1d11      	adds	r1, r2, #4
   16c56:	6019      	str	r1, [r3, #0]
   16c58:	6813      	ldr	r3, [r2, #0]
   16c5a:	6962      	ldr	r2, [r4, #20]
   16c5c:	601a      	str	r2, [r3, #0]
   16c5e:	e006      	b.n	16c6e <_printf_i+0x15e>
   16c60:	0649      	lsls	r1, r1, #25
   16c62:	d5f7      	bpl.n	16c54 <_printf_i+0x144>
   16c64:	1d11      	adds	r1, r2, #4
   16c66:	6019      	str	r1, [r3, #0]
   16c68:	6813      	ldr	r3, [r2, #0]
   16c6a:	8aa2      	ldrh	r2, [r4, #20]
   16c6c:	801a      	strh	r2, [r3, #0]
   16c6e:	2300      	movs	r3, #0
   16c70:	9e04      	ldr	r6, [sp, #16]
   16c72:	6123      	str	r3, [r4, #16]
   16c74:	e054      	b.n	16d20 <_printf_i+0x210>
   16c76:	681a      	ldr	r2, [r3, #0]
   16c78:	1d11      	adds	r1, r2, #4
   16c7a:	6019      	str	r1, [r3, #0]
   16c7c:	6816      	ldr	r6, [r2, #0]
   16c7e:	2100      	movs	r1, #0
   16c80:	6862      	ldr	r2, [r4, #4]
   16c82:	0030      	movs	r0, r6
   16c84:	f000 fcee 	bl	17664 <memchr>
   16c88:	2800      	cmp	r0, #0
   16c8a:	d001      	beq.n	16c90 <_printf_i+0x180>
   16c8c:	1b80      	subs	r0, r0, r6
   16c8e:	6060      	str	r0, [r4, #4]
   16c90:	6863      	ldr	r3, [r4, #4]
   16c92:	6123      	str	r3, [r4, #16]
   16c94:	2300      	movs	r3, #0
   16c96:	9a04      	ldr	r2, [sp, #16]
   16c98:	7013      	strb	r3, [r2, #0]
   16c9a:	e041      	b.n	16d20 <_printf_i+0x210>
   16c9c:	6923      	ldr	r3, [r4, #16]
   16c9e:	0032      	movs	r2, r6
   16ca0:	9906      	ldr	r1, [sp, #24]
   16ca2:	9805      	ldr	r0, [sp, #20]
   16ca4:	9d07      	ldr	r5, [sp, #28]
   16ca6:	47a8      	blx	r5
   16ca8:	1c43      	adds	r3, r0, #1
   16caa:	d043      	beq.n	16d34 <_printf_i+0x224>
   16cac:	6823      	ldr	r3, [r4, #0]
   16cae:	2500      	movs	r5, #0
   16cb0:	079b      	lsls	r3, r3, #30
   16cb2:	d40f      	bmi.n	16cd4 <_printf_i+0x1c4>
   16cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16cb6:	68e0      	ldr	r0, [r4, #12]
   16cb8:	4298      	cmp	r0, r3
   16cba:	da3d      	bge.n	16d38 <_printf_i+0x228>
   16cbc:	0018      	movs	r0, r3
   16cbe:	e03b      	b.n	16d38 <_printf_i+0x228>
   16cc0:	0022      	movs	r2, r4
   16cc2:	2301      	movs	r3, #1
   16cc4:	3219      	adds	r2, #25
   16cc6:	9906      	ldr	r1, [sp, #24]
   16cc8:	9805      	ldr	r0, [sp, #20]
   16cca:	9e07      	ldr	r6, [sp, #28]
   16ccc:	47b0      	blx	r6
   16cce:	1c43      	adds	r3, r0, #1
   16cd0:	d030      	beq.n	16d34 <_printf_i+0x224>
   16cd2:	3501      	adds	r5, #1
   16cd4:	68e3      	ldr	r3, [r4, #12]
   16cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16cd8:	1a9b      	subs	r3, r3, r2
   16cda:	429d      	cmp	r5, r3
   16cdc:	dbf0      	blt.n	16cc0 <_printf_i+0x1b0>
   16cde:	e7e9      	b.n	16cb4 <_printf_i+0x1a4>
   16ce0:	2d00      	cmp	r5, #0
   16ce2:	d0a9      	beq.n	16c38 <_printf_i+0x128>
   16ce4:	9e04      	ldr	r6, [sp, #16]
   16ce6:	0028      	movs	r0, r5
   16ce8:	0039      	movs	r1, r7
   16cea:	f7fc fca3 	bl	13634 <__aeabi_uidivmod>
   16cee:	9b03      	ldr	r3, [sp, #12]
   16cf0:	3e01      	subs	r6, #1
   16cf2:	5c5b      	ldrb	r3, [r3, r1]
   16cf4:	0028      	movs	r0, r5
   16cf6:	7033      	strb	r3, [r6, #0]
   16cf8:	0039      	movs	r1, r7
   16cfa:	f7fc fc15 	bl	13528 <__udivsi3>
   16cfe:	1e05      	subs	r5, r0, #0
   16d00:	d1f1      	bne.n	16ce6 <_printf_i+0x1d6>
   16d02:	2f08      	cmp	r7, #8
   16d04:	d109      	bne.n	16d1a <_printf_i+0x20a>
   16d06:	6823      	ldr	r3, [r4, #0]
   16d08:	07db      	lsls	r3, r3, #31
   16d0a:	d506      	bpl.n	16d1a <_printf_i+0x20a>
   16d0c:	6863      	ldr	r3, [r4, #4]
   16d0e:	6922      	ldr	r2, [r4, #16]
   16d10:	4293      	cmp	r3, r2
   16d12:	dc02      	bgt.n	16d1a <_printf_i+0x20a>
   16d14:	2330      	movs	r3, #48	; 0x30
   16d16:	3e01      	subs	r6, #1
   16d18:	7033      	strb	r3, [r6, #0]
   16d1a:	9b04      	ldr	r3, [sp, #16]
   16d1c:	1b9b      	subs	r3, r3, r6
   16d1e:	6123      	str	r3, [r4, #16]
   16d20:	9b07      	ldr	r3, [sp, #28]
   16d22:	aa09      	add	r2, sp, #36	; 0x24
   16d24:	9300      	str	r3, [sp, #0]
   16d26:	0021      	movs	r1, r4
   16d28:	9b06      	ldr	r3, [sp, #24]
   16d2a:	9805      	ldr	r0, [sp, #20]
   16d2c:	f7ff fe82 	bl	16a34 <_printf_common>
   16d30:	1c43      	adds	r3, r0, #1
   16d32:	d1b3      	bne.n	16c9c <_printf_i+0x18c>
   16d34:	2001      	movs	r0, #1
   16d36:	4240      	negs	r0, r0
   16d38:	b00b      	add	sp, #44	; 0x2c
   16d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d3c:	00018d16 	.word	0x00018d16
   16d40:	00018d05 	.word	0x00018d05

00016d44 <iprintf>:
   16d44:	b40f      	push	{r0, r1, r2, r3}
   16d46:	4b0b      	ldr	r3, [pc, #44]	; (16d74 <iprintf+0x30>)
   16d48:	b513      	push	{r0, r1, r4, lr}
   16d4a:	681c      	ldr	r4, [r3, #0]
   16d4c:	2c00      	cmp	r4, #0
   16d4e:	d005      	beq.n	16d5c <iprintf+0x18>
   16d50:	69a3      	ldr	r3, [r4, #24]
   16d52:	2b00      	cmp	r3, #0
   16d54:	d102      	bne.n	16d5c <iprintf+0x18>
   16d56:	0020      	movs	r0, r4
   16d58:	f000 fb78 	bl	1744c <__sinit>
   16d5c:	ab05      	add	r3, sp, #20
   16d5e:	9a04      	ldr	r2, [sp, #16]
   16d60:	68a1      	ldr	r1, [r4, #8]
   16d62:	0020      	movs	r0, r4
   16d64:	9301      	str	r3, [sp, #4]
   16d66:	f7ff fd49 	bl	167fc <_vfiprintf_r>
   16d6a:	bc16      	pop	{r1, r2, r4}
   16d6c:	bc08      	pop	{r3}
   16d6e:	b004      	add	sp, #16
   16d70:	4718      	bx	r3
   16d72:	46c0      	nop			; (mov r8, r8)
   16d74:	20000028 	.word	0x20000028

00016d78 <putchar>:
   16d78:	4b08      	ldr	r3, [pc, #32]	; (16d9c <putchar+0x24>)
   16d7a:	b570      	push	{r4, r5, r6, lr}
   16d7c:	681c      	ldr	r4, [r3, #0]
   16d7e:	0005      	movs	r5, r0
   16d80:	2c00      	cmp	r4, #0
   16d82:	d005      	beq.n	16d90 <putchar+0x18>
   16d84:	69a3      	ldr	r3, [r4, #24]
   16d86:	2b00      	cmp	r3, #0
   16d88:	d102      	bne.n	16d90 <putchar+0x18>
   16d8a:	0020      	movs	r0, r4
   16d8c:	f000 fb5e 	bl	1744c <__sinit>
   16d90:	0029      	movs	r1, r5
   16d92:	68a2      	ldr	r2, [r4, #8]
   16d94:	0020      	movs	r0, r4
   16d96:	f000 fd19 	bl	177cc <_putc_r>
   16d9a:	bd70      	pop	{r4, r5, r6, pc}
   16d9c:	20000028 	.word	0x20000028

00016da0 <_puts_r>:
   16da0:	b570      	push	{r4, r5, r6, lr}
   16da2:	0005      	movs	r5, r0
   16da4:	000e      	movs	r6, r1
   16da6:	2800      	cmp	r0, #0
   16da8:	d004      	beq.n	16db4 <_puts_r+0x14>
   16daa:	6983      	ldr	r3, [r0, #24]
   16dac:	2b00      	cmp	r3, #0
   16dae:	d101      	bne.n	16db4 <_puts_r+0x14>
   16db0:	f000 fb4c 	bl	1744c <__sinit>
   16db4:	69ab      	ldr	r3, [r5, #24]
   16db6:	68ac      	ldr	r4, [r5, #8]
   16db8:	2b00      	cmp	r3, #0
   16dba:	d102      	bne.n	16dc2 <_puts_r+0x22>
   16dbc:	0028      	movs	r0, r5
   16dbe:	f000 fb45 	bl	1744c <__sinit>
   16dc2:	4b24      	ldr	r3, [pc, #144]	; (16e54 <_puts_r+0xb4>)
   16dc4:	429c      	cmp	r4, r3
   16dc6:	d10f      	bne.n	16de8 <_puts_r+0x48>
   16dc8:	686c      	ldr	r4, [r5, #4]
   16dca:	89a3      	ldrh	r3, [r4, #12]
   16dcc:	071b      	lsls	r3, r3, #28
   16dce:	d502      	bpl.n	16dd6 <_puts_r+0x36>
   16dd0:	6923      	ldr	r3, [r4, #16]
   16dd2:	2b00      	cmp	r3, #0
   16dd4:	d120      	bne.n	16e18 <_puts_r+0x78>
   16dd6:	0021      	movs	r1, r4
   16dd8:	0028      	movs	r0, r5
   16dda:	f000 f9c1 	bl	17160 <__swsetup_r>
   16dde:	2800      	cmp	r0, #0
   16de0:	d01a      	beq.n	16e18 <_puts_r+0x78>
   16de2:	2001      	movs	r0, #1
   16de4:	4240      	negs	r0, r0
   16de6:	bd70      	pop	{r4, r5, r6, pc}
   16de8:	4b1b      	ldr	r3, [pc, #108]	; (16e58 <_puts_r+0xb8>)
   16dea:	429c      	cmp	r4, r3
   16dec:	d101      	bne.n	16df2 <_puts_r+0x52>
   16dee:	68ac      	ldr	r4, [r5, #8]
   16df0:	e7eb      	b.n	16dca <_puts_r+0x2a>
   16df2:	4b1a      	ldr	r3, [pc, #104]	; (16e5c <_puts_r+0xbc>)
   16df4:	429c      	cmp	r4, r3
   16df6:	d1e8      	bne.n	16dca <_puts_r+0x2a>
   16df8:	68ec      	ldr	r4, [r5, #12]
   16dfa:	e7e6      	b.n	16dca <_puts_r+0x2a>
   16dfc:	3b01      	subs	r3, #1
   16dfe:	3601      	adds	r6, #1
   16e00:	60a3      	str	r3, [r4, #8]
   16e02:	2b00      	cmp	r3, #0
   16e04:	da04      	bge.n	16e10 <_puts_r+0x70>
   16e06:	69a2      	ldr	r2, [r4, #24]
   16e08:	4293      	cmp	r3, r2
   16e0a:	db16      	blt.n	16e3a <_puts_r+0x9a>
   16e0c:	290a      	cmp	r1, #10
   16e0e:	d014      	beq.n	16e3a <_puts_r+0x9a>
   16e10:	6823      	ldr	r3, [r4, #0]
   16e12:	1c5a      	adds	r2, r3, #1
   16e14:	6022      	str	r2, [r4, #0]
   16e16:	7019      	strb	r1, [r3, #0]
   16e18:	7831      	ldrb	r1, [r6, #0]
   16e1a:	68a3      	ldr	r3, [r4, #8]
   16e1c:	2900      	cmp	r1, #0
   16e1e:	d1ed      	bne.n	16dfc <_puts_r+0x5c>
   16e20:	3b01      	subs	r3, #1
   16e22:	60a3      	str	r3, [r4, #8]
   16e24:	2b00      	cmp	r3, #0
   16e26:	da0f      	bge.n	16e48 <_puts_r+0xa8>
   16e28:	0022      	movs	r2, r4
   16e2a:	310a      	adds	r1, #10
   16e2c:	0028      	movs	r0, r5
   16e2e:	f000 f941 	bl	170b4 <__swbuf_r>
   16e32:	1c43      	adds	r3, r0, #1
   16e34:	d0d5      	beq.n	16de2 <_puts_r+0x42>
   16e36:	200a      	movs	r0, #10
   16e38:	e7d5      	b.n	16de6 <_puts_r+0x46>
   16e3a:	0022      	movs	r2, r4
   16e3c:	0028      	movs	r0, r5
   16e3e:	f000 f939 	bl	170b4 <__swbuf_r>
   16e42:	1c43      	adds	r3, r0, #1
   16e44:	d1e8      	bne.n	16e18 <_puts_r+0x78>
   16e46:	e7cc      	b.n	16de2 <_puts_r+0x42>
   16e48:	200a      	movs	r0, #10
   16e4a:	6823      	ldr	r3, [r4, #0]
   16e4c:	1c5a      	adds	r2, r3, #1
   16e4e:	6022      	str	r2, [r4, #0]
   16e50:	7018      	strb	r0, [r3, #0]
   16e52:	e7c8      	b.n	16de6 <_puts_r+0x46>
   16e54:	00018d48 	.word	0x00018d48
   16e58:	00018d68 	.word	0x00018d68
   16e5c:	00018d28 	.word	0x00018d28

00016e60 <puts>:
   16e60:	b510      	push	{r4, lr}
   16e62:	4b03      	ldr	r3, [pc, #12]	; (16e70 <puts+0x10>)
   16e64:	0001      	movs	r1, r0
   16e66:	6818      	ldr	r0, [r3, #0]
   16e68:	f7ff ff9a 	bl	16da0 <_puts_r>
   16e6c:	bd10      	pop	{r4, pc}
   16e6e:	46c0      	nop			; (mov r8, r8)
   16e70:	20000028 	.word	0x20000028

00016e74 <srand>:
   16e74:	4b10      	ldr	r3, [pc, #64]	; (16eb8 <srand+0x44>)
   16e76:	b570      	push	{r4, r5, r6, lr}
   16e78:	681c      	ldr	r4, [r3, #0]
   16e7a:	0005      	movs	r5, r0
   16e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d115      	bne.n	16eae <srand+0x3a>
   16e82:	2018      	movs	r0, #24
   16e84:	f000 fbe4 	bl	17650 <malloc>
   16e88:	4b0c      	ldr	r3, [pc, #48]	; (16ebc <srand+0x48>)
   16e8a:	63a0      	str	r0, [r4, #56]	; 0x38
   16e8c:	8003      	strh	r3, [r0, #0]
   16e8e:	4b0c      	ldr	r3, [pc, #48]	; (16ec0 <srand+0x4c>)
   16e90:	2201      	movs	r2, #1
   16e92:	8043      	strh	r3, [r0, #2]
   16e94:	4b0b      	ldr	r3, [pc, #44]	; (16ec4 <srand+0x50>)
   16e96:	8083      	strh	r3, [r0, #4]
   16e98:	4b0b      	ldr	r3, [pc, #44]	; (16ec8 <srand+0x54>)
   16e9a:	80c3      	strh	r3, [r0, #6]
   16e9c:	4b0b      	ldr	r3, [pc, #44]	; (16ecc <srand+0x58>)
   16e9e:	8103      	strh	r3, [r0, #8]
   16ea0:	2305      	movs	r3, #5
   16ea2:	8143      	strh	r3, [r0, #10]
   16ea4:	3306      	adds	r3, #6
   16ea6:	8183      	strh	r3, [r0, #12]
   16ea8:	2300      	movs	r3, #0
   16eaa:	6102      	str	r2, [r0, #16]
   16eac:	6143      	str	r3, [r0, #20]
   16eae:	2200      	movs	r2, #0
   16eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16eb2:	611d      	str	r5, [r3, #16]
   16eb4:	615a      	str	r2, [r3, #20]
   16eb6:	bd70      	pop	{r4, r5, r6, pc}
   16eb8:	20000028 	.word	0x20000028
   16ebc:	0000330e 	.word	0x0000330e
   16ec0:	ffffabcd 	.word	0xffffabcd
   16ec4:	00001234 	.word	0x00001234
   16ec8:	ffffe66d 	.word	0xffffe66d
   16ecc:	ffffdeec 	.word	0xffffdeec

00016ed0 <rand>:
   16ed0:	4b15      	ldr	r3, [pc, #84]	; (16f28 <rand+0x58>)
   16ed2:	b510      	push	{r4, lr}
   16ed4:	681c      	ldr	r4, [r3, #0]
   16ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16ed8:	2b00      	cmp	r3, #0
   16eda:	d115      	bne.n	16f08 <rand+0x38>
   16edc:	2018      	movs	r0, #24
   16ede:	f000 fbb7 	bl	17650 <malloc>
   16ee2:	4b12      	ldr	r3, [pc, #72]	; (16f2c <rand+0x5c>)
   16ee4:	63a0      	str	r0, [r4, #56]	; 0x38
   16ee6:	8003      	strh	r3, [r0, #0]
   16ee8:	4b11      	ldr	r3, [pc, #68]	; (16f30 <rand+0x60>)
   16eea:	2201      	movs	r2, #1
   16eec:	8043      	strh	r3, [r0, #2]
   16eee:	4b11      	ldr	r3, [pc, #68]	; (16f34 <rand+0x64>)
   16ef0:	8083      	strh	r3, [r0, #4]
   16ef2:	4b11      	ldr	r3, [pc, #68]	; (16f38 <rand+0x68>)
   16ef4:	80c3      	strh	r3, [r0, #6]
   16ef6:	4b11      	ldr	r3, [pc, #68]	; (16f3c <rand+0x6c>)
   16ef8:	8103      	strh	r3, [r0, #8]
   16efa:	2305      	movs	r3, #5
   16efc:	8143      	strh	r3, [r0, #10]
   16efe:	3306      	adds	r3, #6
   16f00:	8183      	strh	r3, [r0, #12]
   16f02:	2300      	movs	r3, #0
   16f04:	6102      	str	r2, [r0, #16]
   16f06:	6143      	str	r3, [r0, #20]
   16f08:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   16f0a:	4a0d      	ldr	r2, [pc, #52]	; (16f40 <rand+0x70>)
   16f0c:	6920      	ldr	r0, [r4, #16]
   16f0e:	6961      	ldr	r1, [r4, #20]
   16f10:	4b0c      	ldr	r3, [pc, #48]	; (16f44 <rand+0x74>)
   16f12:	f7fc fd17 	bl	13944 <__aeabi_lmul>
   16f16:	2201      	movs	r2, #1
   16f18:	2300      	movs	r3, #0
   16f1a:	1880      	adds	r0, r0, r2
   16f1c:	4159      	adcs	r1, r3
   16f1e:	6120      	str	r0, [r4, #16]
   16f20:	6161      	str	r1, [r4, #20]
   16f22:	0048      	lsls	r0, r1, #1
   16f24:	0840      	lsrs	r0, r0, #1
   16f26:	bd10      	pop	{r4, pc}
   16f28:	20000028 	.word	0x20000028
   16f2c:	0000330e 	.word	0x0000330e
   16f30:	ffffabcd 	.word	0xffffabcd
   16f34:	00001234 	.word	0x00001234
   16f38:	ffffe66d 	.word	0xffffe66d
   16f3c:	ffffdeec 	.word	0xffffdeec
   16f40:	4c957f2d 	.word	0x4c957f2d
   16f44:	5851f42d 	.word	0x5851f42d

00016f48 <setbuf>:
   16f48:	424a      	negs	r2, r1
   16f4a:	414a      	adcs	r2, r1
   16f4c:	2380      	movs	r3, #128	; 0x80
   16f4e:	b510      	push	{r4, lr}
   16f50:	0052      	lsls	r2, r2, #1
   16f52:	00db      	lsls	r3, r3, #3
   16f54:	f000 f802 	bl	16f5c <setvbuf>
   16f58:	bd10      	pop	{r4, pc}
   16f5a:	Address 0x00016f5a is out of bounds.


00016f5c <setvbuf>:
   16f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f5e:	001d      	movs	r5, r3
   16f60:	4b4f      	ldr	r3, [pc, #316]	; (170a0 <setvbuf+0x144>)
   16f62:	b085      	sub	sp, #20
   16f64:	681e      	ldr	r6, [r3, #0]
   16f66:	0004      	movs	r4, r0
   16f68:	000f      	movs	r7, r1
   16f6a:	9200      	str	r2, [sp, #0]
   16f6c:	2e00      	cmp	r6, #0
   16f6e:	d005      	beq.n	16f7c <setvbuf+0x20>
   16f70:	69b3      	ldr	r3, [r6, #24]
   16f72:	2b00      	cmp	r3, #0
   16f74:	d102      	bne.n	16f7c <setvbuf+0x20>
   16f76:	0030      	movs	r0, r6
   16f78:	f000 fa68 	bl	1744c <__sinit>
   16f7c:	4b49      	ldr	r3, [pc, #292]	; (170a4 <setvbuf+0x148>)
   16f7e:	429c      	cmp	r4, r3
   16f80:	d150      	bne.n	17024 <setvbuf+0xc8>
   16f82:	6874      	ldr	r4, [r6, #4]
   16f84:	9b00      	ldr	r3, [sp, #0]
   16f86:	2b02      	cmp	r3, #2
   16f88:	d005      	beq.n	16f96 <setvbuf+0x3a>
   16f8a:	2b01      	cmp	r3, #1
   16f8c:	d900      	bls.n	16f90 <setvbuf+0x34>
   16f8e:	e084      	b.n	1709a <setvbuf+0x13e>
   16f90:	2d00      	cmp	r5, #0
   16f92:	da00      	bge.n	16f96 <setvbuf+0x3a>
   16f94:	e081      	b.n	1709a <setvbuf+0x13e>
   16f96:	0021      	movs	r1, r4
   16f98:	0030      	movs	r0, r6
   16f9a:	f000 f9e9 	bl	17370 <_fflush_r>
   16f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16fa0:	2900      	cmp	r1, #0
   16fa2:	d008      	beq.n	16fb6 <setvbuf+0x5a>
   16fa4:	0023      	movs	r3, r4
   16fa6:	3344      	adds	r3, #68	; 0x44
   16fa8:	4299      	cmp	r1, r3
   16faa:	d002      	beq.n	16fb2 <setvbuf+0x56>
   16fac:	0030      	movs	r0, r6
   16fae:	f000 fb65 	bl	1767c <_free_r>
   16fb2:	2300      	movs	r3, #0
   16fb4:	6363      	str	r3, [r4, #52]	; 0x34
   16fb6:	2300      	movs	r3, #0
   16fb8:	61a3      	str	r3, [r4, #24]
   16fba:	6063      	str	r3, [r4, #4]
   16fbc:	89a3      	ldrh	r3, [r4, #12]
   16fbe:	061b      	lsls	r3, r3, #24
   16fc0:	d503      	bpl.n	16fca <setvbuf+0x6e>
   16fc2:	6921      	ldr	r1, [r4, #16]
   16fc4:	0030      	movs	r0, r6
   16fc6:	f000 fb59 	bl	1767c <_free_r>
   16fca:	89a3      	ldrh	r3, [r4, #12]
   16fcc:	4a36      	ldr	r2, [pc, #216]	; (170a8 <setvbuf+0x14c>)
   16fce:	4013      	ands	r3, r2
   16fd0:	81a3      	strh	r3, [r4, #12]
   16fd2:	9b00      	ldr	r3, [sp, #0]
   16fd4:	2b02      	cmp	r3, #2
   16fd6:	d05a      	beq.n	1708e <setvbuf+0x132>
   16fd8:	ab03      	add	r3, sp, #12
   16fda:	aa02      	add	r2, sp, #8
   16fdc:	0021      	movs	r1, r4
   16fde:	0030      	movs	r0, r6
   16fe0:	f000 faca 	bl	17578 <__swhatbuf_r>
   16fe4:	89a3      	ldrh	r3, [r4, #12]
   16fe6:	4318      	orrs	r0, r3
   16fe8:	81a0      	strh	r0, [r4, #12]
   16fea:	2d00      	cmp	r5, #0
   16fec:	d124      	bne.n	17038 <setvbuf+0xdc>
   16fee:	9d02      	ldr	r5, [sp, #8]
   16ff0:	0028      	movs	r0, r5
   16ff2:	f000 fb2d 	bl	17650 <malloc>
   16ff6:	9501      	str	r5, [sp, #4]
   16ff8:	1e07      	subs	r7, r0, #0
   16ffa:	d142      	bne.n	17082 <setvbuf+0x126>
   16ffc:	9b02      	ldr	r3, [sp, #8]
   16ffe:	9301      	str	r3, [sp, #4]
   17000:	42ab      	cmp	r3, r5
   17002:	d139      	bne.n	17078 <setvbuf+0x11c>
   17004:	2001      	movs	r0, #1
   17006:	4240      	negs	r0, r0
   17008:	2302      	movs	r3, #2
   1700a:	89a2      	ldrh	r2, [r4, #12]
   1700c:	4313      	orrs	r3, r2
   1700e:	81a3      	strh	r3, [r4, #12]
   17010:	2300      	movs	r3, #0
   17012:	60a3      	str	r3, [r4, #8]
   17014:	0023      	movs	r3, r4
   17016:	3347      	adds	r3, #71	; 0x47
   17018:	6023      	str	r3, [r4, #0]
   1701a:	6123      	str	r3, [r4, #16]
   1701c:	2301      	movs	r3, #1
   1701e:	6163      	str	r3, [r4, #20]
   17020:	b005      	add	sp, #20
   17022:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17024:	4b21      	ldr	r3, [pc, #132]	; (170ac <setvbuf+0x150>)
   17026:	429c      	cmp	r4, r3
   17028:	d101      	bne.n	1702e <setvbuf+0xd2>
   1702a:	68b4      	ldr	r4, [r6, #8]
   1702c:	e7aa      	b.n	16f84 <setvbuf+0x28>
   1702e:	4b20      	ldr	r3, [pc, #128]	; (170b0 <setvbuf+0x154>)
   17030:	429c      	cmp	r4, r3
   17032:	d1a7      	bne.n	16f84 <setvbuf+0x28>
   17034:	68f4      	ldr	r4, [r6, #12]
   17036:	e7a5      	b.n	16f84 <setvbuf+0x28>
   17038:	2f00      	cmp	r7, #0
   1703a:	d0d9      	beq.n	16ff0 <setvbuf+0x94>
   1703c:	69b3      	ldr	r3, [r6, #24]
   1703e:	2b00      	cmp	r3, #0
   17040:	d102      	bne.n	17048 <setvbuf+0xec>
   17042:	0030      	movs	r0, r6
   17044:	f000 fa02 	bl	1744c <__sinit>
   17048:	9b00      	ldr	r3, [sp, #0]
   1704a:	2b01      	cmp	r3, #1
   1704c:	d103      	bne.n	17056 <setvbuf+0xfa>
   1704e:	89a3      	ldrh	r3, [r4, #12]
   17050:	9a00      	ldr	r2, [sp, #0]
   17052:	431a      	orrs	r2, r3
   17054:	81a2      	strh	r2, [r4, #12]
   17056:	2008      	movs	r0, #8
   17058:	89a3      	ldrh	r3, [r4, #12]
   1705a:	6027      	str	r7, [r4, #0]
   1705c:	6127      	str	r7, [r4, #16]
   1705e:	6165      	str	r5, [r4, #20]
   17060:	4018      	ands	r0, r3
   17062:	d018      	beq.n	17096 <setvbuf+0x13a>
   17064:	2001      	movs	r0, #1
   17066:	4018      	ands	r0, r3
   17068:	2300      	movs	r3, #0
   1706a:	4298      	cmp	r0, r3
   1706c:	d011      	beq.n	17092 <setvbuf+0x136>
   1706e:	426d      	negs	r5, r5
   17070:	60a3      	str	r3, [r4, #8]
   17072:	61a5      	str	r5, [r4, #24]
   17074:	0018      	movs	r0, r3
   17076:	e7d3      	b.n	17020 <setvbuf+0xc4>
   17078:	9801      	ldr	r0, [sp, #4]
   1707a:	f000 fae9 	bl	17650 <malloc>
   1707e:	1e07      	subs	r7, r0, #0
   17080:	d0c0      	beq.n	17004 <setvbuf+0xa8>
   17082:	2380      	movs	r3, #128	; 0x80
   17084:	89a2      	ldrh	r2, [r4, #12]
   17086:	9d01      	ldr	r5, [sp, #4]
   17088:	4313      	orrs	r3, r2
   1708a:	81a3      	strh	r3, [r4, #12]
   1708c:	e7d6      	b.n	1703c <setvbuf+0xe0>
   1708e:	2000      	movs	r0, #0
   17090:	e7ba      	b.n	17008 <setvbuf+0xac>
   17092:	60a5      	str	r5, [r4, #8]
   17094:	e7c4      	b.n	17020 <setvbuf+0xc4>
   17096:	60a0      	str	r0, [r4, #8]
   17098:	e7c2      	b.n	17020 <setvbuf+0xc4>
   1709a:	2001      	movs	r0, #1
   1709c:	4240      	negs	r0, r0
   1709e:	e7bf      	b.n	17020 <setvbuf+0xc4>
   170a0:	20000028 	.word	0x20000028
   170a4:	00018d48 	.word	0x00018d48
   170a8:	fffff35c 	.word	0xfffff35c
   170ac:	00018d68 	.word	0x00018d68
   170b0:	00018d28 	.word	0x00018d28

000170b4 <__swbuf_r>:
   170b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170b6:	0005      	movs	r5, r0
   170b8:	000e      	movs	r6, r1
   170ba:	0014      	movs	r4, r2
   170bc:	2800      	cmp	r0, #0
   170be:	d004      	beq.n	170ca <__swbuf_r+0x16>
   170c0:	6983      	ldr	r3, [r0, #24]
   170c2:	2b00      	cmp	r3, #0
   170c4:	d101      	bne.n	170ca <__swbuf_r+0x16>
   170c6:	f000 f9c1 	bl	1744c <__sinit>
   170ca:	4b22      	ldr	r3, [pc, #136]	; (17154 <__swbuf_r+0xa0>)
   170cc:	429c      	cmp	r4, r3
   170ce:	d12d      	bne.n	1712c <__swbuf_r+0x78>
   170d0:	686c      	ldr	r4, [r5, #4]
   170d2:	69a3      	ldr	r3, [r4, #24]
   170d4:	60a3      	str	r3, [r4, #8]
   170d6:	89a3      	ldrh	r3, [r4, #12]
   170d8:	071b      	lsls	r3, r3, #28
   170da:	d531      	bpl.n	17140 <__swbuf_r+0x8c>
   170dc:	6923      	ldr	r3, [r4, #16]
   170de:	2b00      	cmp	r3, #0
   170e0:	d02e      	beq.n	17140 <__swbuf_r+0x8c>
   170e2:	6823      	ldr	r3, [r4, #0]
   170e4:	6922      	ldr	r2, [r4, #16]
   170e6:	b2f7      	uxtb	r7, r6
   170e8:	1a98      	subs	r0, r3, r2
   170ea:	6963      	ldr	r3, [r4, #20]
   170ec:	b2f6      	uxtb	r6, r6
   170ee:	4298      	cmp	r0, r3
   170f0:	db05      	blt.n	170fe <__swbuf_r+0x4a>
   170f2:	0021      	movs	r1, r4
   170f4:	0028      	movs	r0, r5
   170f6:	f000 f93b 	bl	17370 <_fflush_r>
   170fa:	2800      	cmp	r0, #0
   170fc:	d126      	bne.n	1714c <__swbuf_r+0x98>
   170fe:	68a3      	ldr	r3, [r4, #8]
   17100:	3001      	adds	r0, #1
   17102:	3b01      	subs	r3, #1
   17104:	60a3      	str	r3, [r4, #8]
   17106:	6823      	ldr	r3, [r4, #0]
   17108:	1c5a      	adds	r2, r3, #1
   1710a:	6022      	str	r2, [r4, #0]
   1710c:	701f      	strb	r7, [r3, #0]
   1710e:	6963      	ldr	r3, [r4, #20]
   17110:	4298      	cmp	r0, r3
   17112:	d004      	beq.n	1711e <__swbuf_r+0x6a>
   17114:	89a3      	ldrh	r3, [r4, #12]
   17116:	07db      	lsls	r3, r3, #31
   17118:	d51a      	bpl.n	17150 <__swbuf_r+0x9c>
   1711a:	2e0a      	cmp	r6, #10
   1711c:	d118      	bne.n	17150 <__swbuf_r+0x9c>
   1711e:	0021      	movs	r1, r4
   17120:	0028      	movs	r0, r5
   17122:	f000 f925 	bl	17370 <_fflush_r>
   17126:	2800      	cmp	r0, #0
   17128:	d012      	beq.n	17150 <__swbuf_r+0x9c>
   1712a:	e00f      	b.n	1714c <__swbuf_r+0x98>
   1712c:	4b0a      	ldr	r3, [pc, #40]	; (17158 <__swbuf_r+0xa4>)
   1712e:	429c      	cmp	r4, r3
   17130:	d101      	bne.n	17136 <__swbuf_r+0x82>
   17132:	68ac      	ldr	r4, [r5, #8]
   17134:	e7cd      	b.n	170d2 <__swbuf_r+0x1e>
   17136:	4b09      	ldr	r3, [pc, #36]	; (1715c <__swbuf_r+0xa8>)
   17138:	429c      	cmp	r4, r3
   1713a:	d1ca      	bne.n	170d2 <__swbuf_r+0x1e>
   1713c:	68ec      	ldr	r4, [r5, #12]
   1713e:	e7c8      	b.n	170d2 <__swbuf_r+0x1e>
   17140:	0021      	movs	r1, r4
   17142:	0028      	movs	r0, r5
   17144:	f000 f80c 	bl	17160 <__swsetup_r>
   17148:	2800      	cmp	r0, #0
   1714a:	d0ca      	beq.n	170e2 <__swbuf_r+0x2e>
   1714c:	2601      	movs	r6, #1
   1714e:	4276      	negs	r6, r6
   17150:	0030      	movs	r0, r6
   17152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17154:	00018d48 	.word	0x00018d48
   17158:	00018d68 	.word	0x00018d68
   1715c:	00018d28 	.word	0x00018d28

00017160 <__swsetup_r>:
   17160:	4b36      	ldr	r3, [pc, #216]	; (1723c <__swsetup_r+0xdc>)
   17162:	b570      	push	{r4, r5, r6, lr}
   17164:	681d      	ldr	r5, [r3, #0]
   17166:	0006      	movs	r6, r0
   17168:	000c      	movs	r4, r1
   1716a:	2d00      	cmp	r5, #0
   1716c:	d005      	beq.n	1717a <__swsetup_r+0x1a>
   1716e:	69ab      	ldr	r3, [r5, #24]
   17170:	2b00      	cmp	r3, #0
   17172:	d102      	bne.n	1717a <__swsetup_r+0x1a>
   17174:	0028      	movs	r0, r5
   17176:	f000 f969 	bl	1744c <__sinit>
   1717a:	4b31      	ldr	r3, [pc, #196]	; (17240 <__swsetup_r+0xe0>)
   1717c:	429c      	cmp	r4, r3
   1717e:	d10f      	bne.n	171a0 <__swsetup_r+0x40>
   17180:	686c      	ldr	r4, [r5, #4]
   17182:	230c      	movs	r3, #12
   17184:	5ee2      	ldrsh	r2, [r4, r3]
   17186:	b293      	uxth	r3, r2
   17188:	0719      	lsls	r1, r3, #28
   1718a:	d42d      	bmi.n	171e8 <__swsetup_r+0x88>
   1718c:	06d9      	lsls	r1, r3, #27
   1718e:	d411      	bmi.n	171b4 <__swsetup_r+0x54>
   17190:	2309      	movs	r3, #9
   17192:	2001      	movs	r0, #1
   17194:	6033      	str	r3, [r6, #0]
   17196:	3337      	adds	r3, #55	; 0x37
   17198:	4313      	orrs	r3, r2
   1719a:	81a3      	strh	r3, [r4, #12]
   1719c:	4240      	negs	r0, r0
   1719e:	bd70      	pop	{r4, r5, r6, pc}
   171a0:	4b28      	ldr	r3, [pc, #160]	; (17244 <__swsetup_r+0xe4>)
   171a2:	429c      	cmp	r4, r3
   171a4:	d101      	bne.n	171aa <__swsetup_r+0x4a>
   171a6:	68ac      	ldr	r4, [r5, #8]
   171a8:	e7eb      	b.n	17182 <__swsetup_r+0x22>
   171aa:	4b27      	ldr	r3, [pc, #156]	; (17248 <__swsetup_r+0xe8>)
   171ac:	429c      	cmp	r4, r3
   171ae:	d1e8      	bne.n	17182 <__swsetup_r+0x22>
   171b0:	68ec      	ldr	r4, [r5, #12]
   171b2:	e7e6      	b.n	17182 <__swsetup_r+0x22>
   171b4:	075b      	lsls	r3, r3, #29
   171b6:	d513      	bpl.n	171e0 <__swsetup_r+0x80>
   171b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   171ba:	2900      	cmp	r1, #0
   171bc:	d008      	beq.n	171d0 <__swsetup_r+0x70>
   171be:	0023      	movs	r3, r4
   171c0:	3344      	adds	r3, #68	; 0x44
   171c2:	4299      	cmp	r1, r3
   171c4:	d002      	beq.n	171cc <__swsetup_r+0x6c>
   171c6:	0030      	movs	r0, r6
   171c8:	f000 fa58 	bl	1767c <_free_r>
   171cc:	2300      	movs	r3, #0
   171ce:	6363      	str	r3, [r4, #52]	; 0x34
   171d0:	2224      	movs	r2, #36	; 0x24
   171d2:	89a3      	ldrh	r3, [r4, #12]
   171d4:	4393      	bics	r3, r2
   171d6:	81a3      	strh	r3, [r4, #12]
   171d8:	2300      	movs	r3, #0
   171da:	6063      	str	r3, [r4, #4]
   171dc:	6923      	ldr	r3, [r4, #16]
   171de:	6023      	str	r3, [r4, #0]
   171e0:	2308      	movs	r3, #8
   171e2:	89a2      	ldrh	r2, [r4, #12]
   171e4:	4313      	orrs	r3, r2
   171e6:	81a3      	strh	r3, [r4, #12]
   171e8:	6923      	ldr	r3, [r4, #16]
   171ea:	2b00      	cmp	r3, #0
   171ec:	d10b      	bne.n	17206 <__swsetup_r+0xa6>
   171ee:	21a0      	movs	r1, #160	; 0xa0
   171f0:	2280      	movs	r2, #128	; 0x80
   171f2:	89a3      	ldrh	r3, [r4, #12]
   171f4:	0089      	lsls	r1, r1, #2
   171f6:	0092      	lsls	r2, r2, #2
   171f8:	400b      	ands	r3, r1
   171fa:	4293      	cmp	r3, r2
   171fc:	d003      	beq.n	17206 <__swsetup_r+0xa6>
   171fe:	0021      	movs	r1, r4
   17200:	0030      	movs	r0, r6
   17202:	f000 f9e1 	bl	175c8 <__smakebuf_r>
   17206:	2301      	movs	r3, #1
   17208:	89a2      	ldrh	r2, [r4, #12]
   1720a:	4013      	ands	r3, r2
   1720c:	d011      	beq.n	17232 <__swsetup_r+0xd2>
   1720e:	2300      	movs	r3, #0
   17210:	60a3      	str	r3, [r4, #8]
   17212:	6963      	ldr	r3, [r4, #20]
   17214:	425b      	negs	r3, r3
   17216:	61a3      	str	r3, [r4, #24]
   17218:	2000      	movs	r0, #0
   1721a:	6923      	ldr	r3, [r4, #16]
   1721c:	4283      	cmp	r3, r0
   1721e:	d1be      	bne.n	1719e <__swsetup_r+0x3e>
   17220:	230c      	movs	r3, #12
   17222:	5ee2      	ldrsh	r2, [r4, r3]
   17224:	0613      	lsls	r3, r2, #24
   17226:	d5ba      	bpl.n	1719e <__swsetup_r+0x3e>
   17228:	2340      	movs	r3, #64	; 0x40
   1722a:	4313      	orrs	r3, r2
   1722c:	81a3      	strh	r3, [r4, #12]
   1722e:	3801      	subs	r0, #1
   17230:	e7b5      	b.n	1719e <__swsetup_r+0x3e>
   17232:	0792      	lsls	r2, r2, #30
   17234:	d400      	bmi.n	17238 <__swsetup_r+0xd8>
   17236:	6963      	ldr	r3, [r4, #20]
   17238:	60a3      	str	r3, [r4, #8]
   1723a:	e7ed      	b.n	17218 <__swsetup_r+0xb8>
   1723c:	20000028 	.word	0x20000028
   17240:	00018d48 	.word	0x00018d48
   17244:	00018d68 	.word	0x00018d68
   17248:	00018d28 	.word	0x00018d28

0001724c <abort>:
   1724c:	b510      	push	{r4, lr}
   1724e:	2006      	movs	r0, #6
   17250:	f000 fb2e 	bl	178b0 <raise>
   17254:	2001      	movs	r0, #1
   17256:	f7ef ffcb 	bl	71f0 <_exit>
   1725a:	Address 0x0001725a is out of bounds.


0001725c <__sflush_r>:
   1725c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1725e:	898a      	ldrh	r2, [r1, #12]
   17260:	0005      	movs	r5, r0
   17262:	000c      	movs	r4, r1
   17264:	0713      	lsls	r3, r2, #28
   17266:	d460      	bmi.n	1732a <__sflush_r+0xce>
   17268:	684b      	ldr	r3, [r1, #4]
   1726a:	2b00      	cmp	r3, #0
   1726c:	dc04      	bgt.n	17278 <__sflush_r+0x1c>
   1726e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   17270:	2b00      	cmp	r3, #0
   17272:	dc01      	bgt.n	17278 <__sflush_r+0x1c>
   17274:	2000      	movs	r0, #0
   17276:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17278:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1727a:	2f00      	cmp	r7, #0
   1727c:	d0fa      	beq.n	17274 <__sflush_r+0x18>
   1727e:	2300      	movs	r3, #0
   17280:	682e      	ldr	r6, [r5, #0]
   17282:	602b      	str	r3, [r5, #0]
   17284:	2380      	movs	r3, #128	; 0x80
   17286:	015b      	lsls	r3, r3, #5
   17288:	401a      	ands	r2, r3
   1728a:	d034      	beq.n	172f6 <__sflush_r+0x9a>
   1728c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1728e:	89a3      	ldrh	r3, [r4, #12]
   17290:	075b      	lsls	r3, r3, #29
   17292:	d506      	bpl.n	172a2 <__sflush_r+0x46>
   17294:	6863      	ldr	r3, [r4, #4]
   17296:	1ac0      	subs	r0, r0, r3
   17298:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1729a:	2b00      	cmp	r3, #0
   1729c:	d001      	beq.n	172a2 <__sflush_r+0x46>
   1729e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   172a0:	1ac0      	subs	r0, r0, r3
   172a2:	0002      	movs	r2, r0
   172a4:	6a21      	ldr	r1, [r4, #32]
   172a6:	2300      	movs	r3, #0
   172a8:	0028      	movs	r0, r5
   172aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   172ac:	47b8      	blx	r7
   172ae:	89a1      	ldrh	r1, [r4, #12]
   172b0:	1c43      	adds	r3, r0, #1
   172b2:	d106      	bne.n	172c2 <__sflush_r+0x66>
   172b4:	682b      	ldr	r3, [r5, #0]
   172b6:	2b1d      	cmp	r3, #29
   172b8:	d831      	bhi.n	1731e <__sflush_r+0xc2>
   172ba:	4a2c      	ldr	r2, [pc, #176]	; (1736c <__sflush_r+0x110>)
   172bc:	40da      	lsrs	r2, r3
   172be:	07d3      	lsls	r3, r2, #31
   172c0:	d52d      	bpl.n	1731e <__sflush_r+0xc2>
   172c2:	2300      	movs	r3, #0
   172c4:	6063      	str	r3, [r4, #4]
   172c6:	6923      	ldr	r3, [r4, #16]
   172c8:	6023      	str	r3, [r4, #0]
   172ca:	04cb      	lsls	r3, r1, #19
   172cc:	d505      	bpl.n	172da <__sflush_r+0x7e>
   172ce:	1c43      	adds	r3, r0, #1
   172d0:	d102      	bne.n	172d8 <__sflush_r+0x7c>
   172d2:	682b      	ldr	r3, [r5, #0]
   172d4:	2b00      	cmp	r3, #0
   172d6:	d100      	bne.n	172da <__sflush_r+0x7e>
   172d8:	6560      	str	r0, [r4, #84]	; 0x54
   172da:	6b61      	ldr	r1, [r4, #52]	; 0x34
   172dc:	602e      	str	r6, [r5, #0]
   172de:	2900      	cmp	r1, #0
   172e0:	d0c8      	beq.n	17274 <__sflush_r+0x18>
   172e2:	0023      	movs	r3, r4
   172e4:	3344      	adds	r3, #68	; 0x44
   172e6:	4299      	cmp	r1, r3
   172e8:	d002      	beq.n	172f0 <__sflush_r+0x94>
   172ea:	0028      	movs	r0, r5
   172ec:	f000 f9c6 	bl	1767c <_free_r>
   172f0:	2000      	movs	r0, #0
   172f2:	6360      	str	r0, [r4, #52]	; 0x34
   172f4:	e7bf      	b.n	17276 <__sflush_r+0x1a>
   172f6:	2301      	movs	r3, #1
   172f8:	6a21      	ldr	r1, [r4, #32]
   172fa:	0028      	movs	r0, r5
   172fc:	47b8      	blx	r7
   172fe:	1c43      	adds	r3, r0, #1
   17300:	d1c5      	bne.n	1728e <__sflush_r+0x32>
   17302:	682b      	ldr	r3, [r5, #0]
   17304:	2b00      	cmp	r3, #0
   17306:	d0c2      	beq.n	1728e <__sflush_r+0x32>
   17308:	2b1d      	cmp	r3, #29
   1730a:	d001      	beq.n	17310 <__sflush_r+0xb4>
   1730c:	2b16      	cmp	r3, #22
   1730e:	d101      	bne.n	17314 <__sflush_r+0xb8>
   17310:	602e      	str	r6, [r5, #0]
   17312:	e7af      	b.n	17274 <__sflush_r+0x18>
   17314:	2340      	movs	r3, #64	; 0x40
   17316:	89a2      	ldrh	r2, [r4, #12]
   17318:	4313      	orrs	r3, r2
   1731a:	81a3      	strh	r3, [r4, #12]
   1731c:	e7ab      	b.n	17276 <__sflush_r+0x1a>
   1731e:	2340      	movs	r3, #64	; 0x40
   17320:	430b      	orrs	r3, r1
   17322:	2001      	movs	r0, #1
   17324:	81a3      	strh	r3, [r4, #12]
   17326:	4240      	negs	r0, r0
   17328:	e7a5      	b.n	17276 <__sflush_r+0x1a>
   1732a:	690f      	ldr	r7, [r1, #16]
   1732c:	2f00      	cmp	r7, #0
   1732e:	d0a1      	beq.n	17274 <__sflush_r+0x18>
   17330:	680b      	ldr	r3, [r1, #0]
   17332:	600f      	str	r7, [r1, #0]
   17334:	1bdb      	subs	r3, r3, r7
   17336:	9301      	str	r3, [sp, #4]
   17338:	2300      	movs	r3, #0
   1733a:	0792      	lsls	r2, r2, #30
   1733c:	d100      	bne.n	17340 <__sflush_r+0xe4>
   1733e:	694b      	ldr	r3, [r1, #20]
   17340:	60a3      	str	r3, [r4, #8]
   17342:	9b01      	ldr	r3, [sp, #4]
   17344:	2b00      	cmp	r3, #0
   17346:	dc00      	bgt.n	1734a <__sflush_r+0xee>
   17348:	e794      	b.n	17274 <__sflush_r+0x18>
   1734a:	9b01      	ldr	r3, [sp, #4]
   1734c:	003a      	movs	r2, r7
   1734e:	6a21      	ldr	r1, [r4, #32]
   17350:	0028      	movs	r0, r5
   17352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17354:	47b0      	blx	r6
   17356:	2800      	cmp	r0, #0
   17358:	dc03      	bgt.n	17362 <__sflush_r+0x106>
   1735a:	2340      	movs	r3, #64	; 0x40
   1735c:	89a2      	ldrh	r2, [r4, #12]
   1735e:	4313      	orrs	r3, r2
   17360:	e7df      	b.n	17322 <__sflush_r+0xc6>
   17362:	9b01      	ldr	r3, [sp, #4]
   17364:	183f      	adds	r7, r7, r0
   17366:	1a1b      	subs	r3, r3, r0
   17368:	9301      	str	r3, [sp, #4]
   1736a:	e7ea      	b.n	17342 <__sflush_r+0xe6>
   1736c:	20400001 	.word	0x20400001

00017370 <_fflush_r>:
   17370:	690b      	ldr	r3, [r1, #16]
   17372:	b570      	push	{r4, r5, r6, lr}
   17374:	0005      	movs	r5, r0
   17376:	000c      	movs	r4, r1
   17378:	2b00      	cmp	r3, #0
   1737a:	d101      	bne.n	17380 <_fflush_r+0x10>
   1737c:	2000      	movs	r0, #0
   1737e:	bd70      	pop	{r4, r5, r6, pc}
   17380:	2800      	cmp	r0, #0
   17382:	d004      	beq.n	1738e <_fflush_r+0x1e>
   17384:	6983      	ldr	r3, [r0, #24]
   17386:	2b00      	cmp	r3, #0
   17388:	d101      	bne.n	1738e <_fflush_r+0x1e>
   1738a:	f000 f85f 	bl	1744c <__sinit>
   1738e:	4b0b      	ldr	r3, [pc, #44]	; (173bc <_fflush_r+0x4c>)
   17390:	429c      	cmp	r4, r3
   17392:	d109      	bne.n	173a8 <_fflush_r+0x38>
   17394:	686c      	ldr	r4, [r5, #4]
   17396:	220c      	movs	r2, #12
   17398:	5ea3      	ldrsh	r3, [r4, r2]
   1739a:	2b00      	cmp	r3, #0
   1739c:	d0ee      	beq.n	1737c <_fflush_r+0xc>
   1739e:	0021      	movs	r1, r4
   173a0:	0028      	movs	r0, r5
   173a2:	f7ff ff5b 	bl	1725c <__sflush_r>
   173a6:	e7ea      	b.n	1737e <_fflush_r+0xe>
   173a8:	4b05      	ldr	r3, [pc, #20]	; (173c0 <_fflush_r+0x50>)
   173aa:	429c      	cmp	r4, r3
   173ac:	d101      	bne.n	173b2 <_fflush_r+0x42>
   173ae:	68ac      	ldr	r4, [r5, #8]
   173b0:	e7f1      	b.n	17396 <_fflush_r+0x26>
   173b2:	4b04      	ldr	r3, [pc, #16]	; (173c4 <_fflush_r+0x54>)
   173b4:	429c      	cmp	r4, r3
   173b6:	d1ee      	bne.n	17396 <_fflush_r+0x26>
   173b8:	68ec      	ldr	r4, [r5, #12]
   173ba:	e7ec      	b.n	17396 <_fflush_r+0x26>
   173bc:	00018d48 	.word	0x00018d48
   173c0:	00018d68 	.word	0x00018d68
   173c4:	00018d28 	.word	0x00018d28
>>>>>>> Stashed changes

000173c8 <_cleanup_r>:
   173c8:	b510      	push	{r4, lr}
   173ca:	4902      	ldr	r1, [pc, #8]	; (173d4 <_cleanup_r+0xc>)
   173cc:	f000 f8b2 	bl	17534 <_fwalk_reent>
   173d0:	bd10      	pop	{r4, pc}
   173d2:	46c0      	nop			; (mov r8, r8)
   173d4:	00017371 	.word	0x00017371

<<<<<<< Updated upstream
00017308 <__sflush_r>:
   17308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1730a:	898a      	ldrh	r2, [r1, #12]
   1730c:	0005      	movs	r5, r0
   1730e:	000c      	movs	r4, r1
   17310:	0713      	lsls	r3, r2, #28
   17312:	d460      	bmi.n	173d6 <__sflush_r+0xce>
   17314:	684b      	ldr	r3, [r1, #4]
   17316:	2b00      	cmp	r3, #0
   17318:	dc04      	bgt.n	17324 <__sflush_r+0x1c>
   1731a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1731c:	2b00      	cmp	r3, #0
   1731e:	dc01      	bgt.n	17324 <__sflush_r+0x1c>
   17320:	2000      	movs	r0, #0
   17322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17324:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17326:	2f00      	cmp	r7, #0
   17328:	d0fa      	beq.n	17320 <__sflush_r+0x18>
   1732a:	2300      	movs	r3, #0
   1732c:	682e      	ldr	r6, [r5, #0]
   1732e:	602b      	str	r3, [r5, #0]
   17330:	2380      	movs	r3, #128	; 0x80
   17332:	015b      	lsls	r3, r3, #5
   17334:	401a      	ands	r2, r3
   17336:	d034      	beq.n	173a2 <__sflush_r+0x9a>
   17338:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1733a:	89a3      	ldrh	r3, [r4, #12]
   1733c:	075b      	lsls	r3, r3, #29
   1733e:	d506      	bpl.n	1734e <__sflush_r+0x46>
   17340:	6863      	ldr	r3, [r4, #4]
   17342:	1ac0      	subs	r0, r0, r3
   17344:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17346:	2b00      	cmp	r3, #0
   17348:	d001      	beq.n	1734e <__sflush_r+0x46>
   1734a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1734c:	1ac0      	subs	r0, r0, r3
   1734e:	0002      	movs	r2, r0
   17350:	6a21      	ldr	r1, [r4, #32]
   17352:	2300      	movs	r3, #0
   17354:	0028      	movs	r0, r5
   17356:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17358:	47b8      	blx	r7
   1735a:	89a1      	ldrh	r1, [r4, #12]
   1735c:	1c43      	adds	r3, r0, #1
   1735e:	d106      	bne.n	1736e <__sflush_r+0x66>
   17360:	682b      	ldr	r3, [r5, #0]
   17362:	2b1d      	cmp	r3, #29
   17364:	d831      	bhi.n	173ca <__sflush_r+0xc2>
   17366:	4a2c      	ldr	r2, [pc, #176]	; (17418 <__sflush_r+0x110>)
   17368:	40da      	lsrs	r2, r3
   1736a:	07d3      	lsls	r3, r2, #31
   1736c:	d52d      	bpl.n	173ca <__sflush_r+0xc2>
   1736e:	2300      	movs	r3, #0
   17370:	6063      	str	r3, [r4, #4]
   17372:	6923      	ldr	r3, [r4, #16]
   17374:	6023      	str	r3, [r4, #0]
   17376:	04cb      	lsls	r3, r1, #19
   17378:	d505      	bpl.n	17386 <__sflush_r+0x7e>
   1737a:	1c43      	adds	r3, r0, #1
   1737c:	d102      	bne.n	17384 <__sflush_r+0x7c>
   1737e:	682b      	ldr	r3, [r5, #0]
   17380:	2b00      	cmp	r3, #0
   17382:	d100      	bne.n	17386 <__sflush_r+0x7e>
   17384:	6560      	str	r0, [r4, #84]	; 0x54
   17386:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17388:	602e      	str	r6, [r5, #0]
   1738a:	2900      	cmp	r1, #0
   1738c:	d0c8      	beq.n	17320 <__sflush_r+0x18>
   1738e:	0023      	movs	r3, r4
   17390:	3344      	adds	r3, #68	; 0x44
   17392:	4299      	cmp	r1, r3
   17394:	d002      	beq.n	1739c <__sflush_r+0x94>
   17396:	0028      	movs	r0, r5
   17398:	f000 f9c6 	bl	17728 <_free_r>
   1739c:	2000      	movs	r0, #0
   1739e:	6360      	str	r0, [r4, #52]	; 0x34
   173a0:	e7bf      	b.n	17322 <__sflush_r+0x1a>
   173a2:	2301      	movs	r3, #1
   173a4:	6a21      	ldr	r1, [r4, #32]
   173a6:	0028      	movs	r0, r5
   173a8:	47b8      	blx	r7
   173aa:	1c43      	adds	r3, r0, #1
   173ac:	d1c5      	bne.n	1733a <__sflush_r+0x32>
   173ae:	682b      	ldr	r3, [r5, #0]
   173b0:	2b00      	cmp	r3, #0
   173b2:	d0c2      	beq.n	1733a <__sflush_r+0x32>
   173b4:	2b1d      	cmp	r3, #29
   173b6:	d001      	beq.n	173bc <__sflush_r+0xb4>
   173b8:	2b16      	cmp	r3, #22
   173ba:	d101      	bne.n	173c0 <__sflush_r+0xb8>
   173bc:	602e      	str	r6, [r5, #0]
   173be:	e7af      	b.n	17320 <__sflush_r+0x18>
   173c0:	2340      	movs	r3, #64	; 0x40
   173c2:	89a2      	ldrh	r2, [r4, #12]
   173c4:	4313      	orrs	r3, r2
   173c6:	81a3      	strh	r3, [r4, #12]
   173c8:	e7ab      	b.n	17322 <__sflush_r+0x1a>
   173ca:	2340      	movs	r3, #64	; 0x40
   173cc:	430b      	orrs	r3, r1
   173ce:	2001      	movs	r0, #1
   173d0:	81a3      	strh	r3, [r4, #12]
   173d2:	4240      	negs	r0, r0
   173d4:	e7a5      	b.n	17322 <__sflush_r+0x1a>
   173d6:	690f      	ldr	r7, [r1, #16]
   173d8:	2f00      	cmp	r7, #0
   173da:	d0a1      	beq.n	17320 <__sflush_r+0x18>
   173dc:	680b      	ldr	r3, [r1, #0]
   173de:	600f      	str	r7, [r1, #0]
   173e0:	1bdb      	subs	r3, r3, r7
   173e2:	9301      	str	r3, [sp, #4]
   173e4:	2300      	movs	r3, #0
   173e6:	0792      	lsls	r2, r2, #30
   173e8:	d100      	bne.n	173ec <__sflush_r+0xe4>
   173ea:	694b      	ldr	r3, [r1, #20]
   173ec:	60a3      	str	r3, [r4, #8]
   173ee:	9b01      	ldr	r3, [sp, #4]
   173f0:	2b00      	cmp	r3, #0
   173f2:	dc00      	bgt.n	173f6 <__sflush_r+0xee>
   173f4:	e794      	b.n	17320 <__sflush_r+0x18>
   173f6:	9b01      	ldr	r3, [sp, #4]
   173f8:	003a      	movs	r2, r7
   173fa:	6a21      	ldr	r1, [r4, #32]
   173fc:	0028      	movs	r0, r5
   173fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17400:	47b0      	blx	r6
   17402:	2800      	cmp	r0, #0
   17404:	dc03      	bgt.n	1740e <__sflush_r+0x106>
   17406:	2340      	movs	r3, #64	; 0x40
   17408:	89a2      	ldrh	r2, [r4, #12]
   1740a:	4313      	orrs	r3, r2
   1740c:	e7df      	b.n	173ce <__sflush_r+0xc6>
   1740e:	9b01      	ldr	r3, [sp, #4]
   17410:	183f      	adds	r7, r7, r0
   17412:	1a1b      	subs	r3, r3, r0
   17414:	9301      	str	r3, [sp, #4]
   17416:	e7ea      	b.n	173ee <__sflush_r+0xe6>
   17418:	20400001 	.word	0x20400001

0001741c <_fflush_r>:
   1741c:	690b      	ldr	r3, [r1, #16]
   1741e:	b570      	push	{r4, r5, r6, lr}
   17420:	0005      	movs	r5, r0
   17422:	000c      	movs	r4, r1
   17424:	2b00      	cmp	r3, #0
   17426:	d101      	bne.n	1742c <_fflush_r+0x10>
   17428:	2000      	movs	r0, #0
   1742a:	bd70      	pop	{r4, r5, r6, pc}
   1742c:	2800      	cmp	r0, #0
   1742e:	d004      	beq.n	1743a <_fflush_r+0x1e>
   17430:	6983      	ldr	r3, [r0, #24]
   17432:	2b00      	cmp	r3, #0
   17434:	d101      	bne.n	1743a <_fflush_r+0x1e>
   17436:	f000 f85f 	bl	174f8 <__sinit>
   1743a:	4b0b      	ldr	r3, [pc, #44]	; (17468 <_fflush_r+0x4c>)
   1743c:	429c      	cmp	r4, r3
   1743e:	d109      	bne.n	17454 <_fflush_r+0x38>
   17440:	686c      	ldr	r4, [r5, #4]
   17442:	220c      	movs	r2, #12
   17444:	5ea3      	ldrsh	r3, [r4, r2]
   17446:	2b00      	cmp	r3, #0
   17448:	d0ee      	beq.n	17428 <_fflush_r+0xc>
   1744a:	0021      	movs	r1, r4
   1744c:	0028      	movs	r0, r5
   1744e:	f7ff ff5b 	bl	17308 <__sflush_r>
   17452:	e7ea      	b.n	1742a <_fflush_r+0xe>
   17454:	4b05      	ldr	r3, [pc, #20]	; (1746c <_fflush_r+0x50>)
   17456:	429c      	cmp	r4, r3
   17458:	d101      	bne.n	1745e <_fflush_r+0x42>
   1745a:	68ac      	ldr	r4, [r5, #8]
   1745c:	e7f1      	b.n	17442 <_fflush_r+0x26>
   1745e:	4b04      	ldr	r3, [pc, #16]	; (17470 <_fflush_r+0x54>)
   17460:	429c      	cmp	r4, r3
   17462:	d1ee      	bne.n	17442 <_fflush_r+0x26>
   17464:	68ec      	ldr	r4, [r5, #12]
   17466:	e7ec      	b.n	17442 <_fflush_r+0x26>
   17468:	00018f48 	.word	0x00018f48
   1746c:	00018f68 	.word	0x00018f68
   17470:	00018f28 	.word	0x00018f28

00017474 <_cleanup_r>:
   17474:	b510      	push	{r4, lr}
   17476:	4902      	ldr	r1, [pc, #8]	; (17480 <_cleanup_r+0xc>)
   17478:	f000 f8b2 	bl	175e0 <_fwalk_reent>
   1747c:	bd10      	pop	{r4, pc}
   1747e:	46c0      	nop			; (mov r8, r8)
   17480:	0001741d 	.word	0x0001741d

00017484 <std.isra.0>:
   17484:	2300      	movs	r3, #0
   17486:	b510      	push	{r4, lr}
   17488:	0004      	movs	r4, r0
   1748a:	6003      	str	r3, [r0, #0]
   1748c:	6043      	str	r3, [r0, #4]
   1748e:	6083      	str	r3, [r0, #8]
   17490:	8181      	strh	r1, [r0, #12]
   17492:	6643      	str	r3, [r0, #100]	; 0x64
   17494:	81c2      	strh	r2, [r0, #14]
   17496:	6103      	str	r3, [r0, #16]
   17498:	6143      	str	r3, [r0, #20]
   1749a:	6183      	str	r3, [r0, #24]
   1749c:	0019      	movs	r1, r3
   1749e:	2208      	movs	r2, #8
   174a0:	305c      	adds	r0, #92	; 0x5c
   174a2:	f7ff f9d1 	bl	16848 <memset>
   174a6:	4b05      	ldr	r3, [pc, #20]	; (174bc <std.isra.0+0x38>)
   174a8:	6224      	str	r4, [r4, #32]
   174aa:	6263      	str	r3, [r4, #36]	; 0x24
   174ac:	4b04      	ldr	r3, [pc, #16]	; (174c0 <std.isra.0+0x3c>)
   174ae:	62a3      	str	r3, [r4, #40]	; 0x28
   174b0:	4b04      	ldr	r3, [pc, #16]	; (174c4 <std.isra.0+0x40>)
   174b2:	62e3      	str	r3, [r4, #44]	; 0x2c
   174b4:	4b04      	ldr	r3, [pc, #16]	; (174c8 <std.isra.0+0x44>)
   174b6:	6323      	str	r3, [r4, #48]	; 0x30
   174b8:	bd10      	pop	{r4, pc}
   174ba:	46c0      	nop			; (mov r8, r8)
   174bc:	0001799d 	.word	0x0001799d
   174c0:	000179c5 	.word	0x000179c5
   174c4:	000179fd 	.word	0x000179fd
   174c8:	00017a29 	.word	0x00017a29

000174cc <__sfmoreglue>:
   174cc:	b570      	push	{r4, r5, r6, lr}
   174ce:	2568      	movs	r5, #104	; 0x68
   174d0:	1e4a      	subs	r2, r1, #1
   174d2:	4355      	muls	r5, r2
   174d4:	000e      	movs	r6, r1
   174d6:	0029      	movs	r1, r5
   174d8:	3174      	adds	r1, #116	; 0x74
   174da:	f000 f96f 	bl	177bc <_malloc_r>
   174de:	1e04      	subs	r4, r0, #0
   174e0:	d008      	beq.n	174f4 <__sfmoreglue+0x28>
   174e2:	2100      	movs	r1, #0
   174e4:	002a      	movs	r2, r5
   174e6:	6001      	str	r1, [r0, #0]
   174e8:	6046      	str	r6, [r0, #4]
   174ea:	300c      	adds	r0, #12
   174ec:	60a0      	str	r0, [r4, #8]
   174ee:	3268      	adds	r2, #104	; 0x68
   174f0:	f7ff f9aa 	bl	16848 <memset>
   174f4:	0020      	movs	r0, r4
   174f6:	bd70      	pop	{r4, r5, r6, pc}

000174f8 <__sinit>:
   174f8:	6983      	ldr	r3, [r0, #24]
   174fa:	b513      	push	{r0, r1, r4, lr}
   174fc:	0004      	movs	r4, r0
   174fe:	2b00      	cmp	r3, #0
   17500:	d128      	bne.n	17554 <__sinit+0x5c>
   17502:	6483      	str	r3, [r0, #72]	; 0x48
   17504:	64c3      	str	r3, [r0, #76]	; 0x4c
   17506:	6503      	str	r3, [r0, #80]	; 0x50
   17508:	4b13      	ldr	r3, [pc, #76]	; (17558 <__sinit+0x60>)
   1750a:	4a14      	ldr	r2, [pc, #80]	; (1755c <__sinit+0x64>)
   1750c:	681b      	ldr	r3, [r3, #0]
   1750e:	6282      	str	r2, [r0, #40]	; 0x28
   17510:	9301      	str	r3, [sp, #4]
   17512:	4298      	cmp	r0, r3
   17514:	d101      	bne.n	1751a <__sinit+0x22>
   17516:	2301      	movs	r3, #1
   17518:	6183      	str	r3, [r0, #24]
   1751a:	0020      	movs	r0, r4
   1751c:	f000 f820 	bl	17560 <__sfp>
   17520:	6060      	str	r0, [r4, #4]
   17522:	0020      	movs	r0, r4
   17524:	f000 f81c 	bl	17560 <__sfp>
   17528:	60a0      	str	r0, [r4, #8]
   1752a:	0020      	movs	r0, r4
   1752c:	f000 f818 	bl	17560 <__sfp>
   17530:	2200      	movs	r2, #0
   17532:	60e0      	str	r0, [r4, #12]
   17534:	2104      	movs	r1, #4
   17536:	6860      	ldr	r0, [r4, #4]
   17538:	f7ff ffa4 	bl	17484 <std.isra.0>
   1753c:	2201      	movs	r2, #1
   1753e:	2109      	movs	r1, #9
   17540:	68a0      	ldr	r0, [r4, #8]
   17542:	f7ff ff9f 	bl	17484 <std.isra.0>
   17546:	2202      	movs	r2, #2
   17548:	2112      	movs	r1, #18
   1754a:	68e0      	ldr	r0, [r4, #12]
   1754c:	f7ff ff9a 	bl	17484 <std.isra.0>
   17550:	2301      	movs	r3, #1
   17552:	61a3      	str	r3, [r4, #24]
   17554:	bd13      	pop	{r0, r1, r4, pc}
   17556:	46c0      	nop			; (mov r8, r8)
   17558:	00018ef0 	.word	0x00018ef0
   1755c:	00017475 	.word	0x00017475

00017560 <__sfp>:
   17560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17562:	4b1e      	ldr	r3, [pc, #120]	; (175dc <__sfp+0x7c>)
   17564:	0007      	movs	r7, r0
   17566:	681e      	ldr	r6, [r3, #0]
   17568:	69b3      	ldr	r3, [r6, #24]
   1756a:	2b00      	cmp	r3, #0
   1756c:	d102      	bne.n	17574 <__sfp+0x14>
   1756e:	0030      	movs	r0, r6
   17570:	f7ff ffc2 	bl	174f8 <__sinit>
   17574:	3648      	adds	r6, #72	; 0x48
   17576:	68b4      	ldr	r4, [r6, #8]
   17578:	6873      	ldr	r3, [r6, #4]
   1757a:	3b01      	subs	r3, #1
   1757c:	d504      	bpl.n	17588 <__sfp+0x28>
   1757e:	6833      	ldr	r3, [r6, #0]
   17580:	2b00      	cmp	r3, #0
   17582:	d007      	beq.n	17594 <__sfp+0x34>
   17584:	6836      	ldr	r6, [r6, #0]
   17586:	e7f6      	b.n	17576 <__sfp+0x16>
   17588:	220c      	movs	r2, #12
   1758a:	5ea5      	ldrsh	r5, [r4, r2]
   1758c:	2d00      	cmp	r5, #0
   1758e:	d00d      	beq.n	175ac <__sfp+0x4c>
   17590:	3468      	adds	r4, #104	; 0x68
   17592:	e7f2      	b.n	1757a <__sfp+0x1a>
   17594:	2104      	movs	r1, #4
   17596:	0038      	movs	r0, r7
   17598:	f7ff ff98 	bl	174cc <__sfmoreglue>
   1759c:	6030      	str	r0, [r6, #0]
   1759e:	2800      	cmp	r0, #0
   175a0:	d1f0      	bne.n	17584 <__sfp+0x24>
   175a2:	230c      	movs	r3, #12
   175a4:	0004      	movs	r4, r0
   175a6:	603b      	str	r3, [r7, #0]
   175a8:	0020      	movs	r0, r4
   175aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175ac:	2301      	movs	r3, #1
   175ae:	0020      	movs	r0, r4
   175b0:	425b      	negs	r3, r3
   175b2:	81e3      	strh	r3, [r4, #14]
   175b4:	3302      	adds	r3, #2
   175b6:	81a3      	strh	r3, [r4, #12]
   175b8:	6665      	str	r5, [r4, #100]	; 0x64
   175ba:	6025      	str	r5, [r4, #0]
   175bc:	60a5      	str	r5, [r4, #8]
   175be:	6065      	str	r5, [r4, #4]
   175c0:	6125      	str	r5, [r4, #16]
   175c2:	6165      	str	r5, [r4, #20]
   175c4:	61a5      	str	r5, [r4, #24]
   175c6:	2208      	movs	r2, #8
   175c8:	0029      	movs	r1, r5
   175ca:	305c      	adds	r0, #92	; 0x5c
   175cc:	f7ff f93c 	bl	16848 <memset>
   175d0:	6365      	str	r5, [r4, #52]	; 0x34
   175d2:	63a5      	str	r5, [r4, #56]	; 0x38
   175d4:	64a5      	str	r5, [r4, #72]	; 0x48
   175d6:	64e5      	str	r5, [r4, #76]	; 0x4c
   175d8:	e7e6      	b.n	175a8 <__sfp+0x48>
   175da:	46c0      	nop			; (mov r8, r8)
   175dc:	00018ef0 	.word	0x00018ef0

000175e0 <_fwalk_reent>:
   175e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   175e2:	0004      	movs	r4, r0
   175e4:	0007      	movs	r7, r0
   175e6:	2600      	movs	r6, #0
   175e8:	9101      	str	r1, [sp, #4]
   175ea:	3448      	adds	r4, #72	; 0x48
   175ec:	2c00      	cmp	r4, #0
   175ee:	d101      	bne.n	175f4 <_fwalk_reent+0x14>
   175f0:	0030      	movs	r0, r6
   175f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   175f4:	6863      	ldr	r3, [r4, #4]
   175f6:	68a5      	ldr	r5, [r4, #8]
   175f8:	9300      	str	r3, [sp, #0]
   175fa:	9b00      	ldr	r3, [sp, #0]
   175fc:	3b01      	subs	r3, #1
   175fe:	9300      	str	r3, [sp, #0]
   17600:	d501      	bpl.n	17606 <_fwalk_reent+0x26>
   17602:	6824      	ldr	r4, [r4, #0]
   17604:	e7f2      	b.n	175ec <_fwalk_reent+0xc>
   17606:	89ab      	ldrh	r3, [r5, #12]
   17608:	2b01      	cmp	r3, #1
   1760a:	d908      	bls.n	1761e <_fwalk_reent+0x3e>
   1760c:	220e      	movs	r2, #14
   1760e:	5eab      	ldrsh	r3, [r5, r2]
   17610:	3301      	adds	r3, #1
   17612:	d004      	beq.n	1761e <_fwalk_reent+0x3e>
   17614:	0029      	movs	r1, r5
   17616:	0038      	movs	r0, r7
   17618:	9b01      	ldr	r3, [sp, #4]
   1761a:	4798      	blx	r3
   1761c:	4306      	orrs	r6, r0
   1761e:	3568      	adds	r5, #104	; 0x68
   17620:	e7eb      	b.n	175fa <_fwalk_reent+0x1a>
   17622:	Address 0x00017622 is out of bounds.


00017624 <__swhatbuf_r>:
   17624:	b570      	push	{r4, r5, r6, lr}
   17626:	000e      	movs	r6, r1
   17628:	001d      	movs	r5, r3
   1762a:	230e      	movs	r3, #14
   1762c:	5ec9      	ldrsh	r1, [r1, r3]
   1762e:	b090      	sub	sp, #64	; 0x40
   17630:	0014      	movs	r4, r2
   17632:	2900      	cmp	r1, #0
   17634:	da07      	bge.n	17646 <__swhatbuf_r+0x22>
   17636:	2300      	movs	r3, #0
   17638:	602b      	str	r3, [r5, #0]
   1763a:	89b3      	ldrh	r3, [r6, #12]
   1763c:	061b      	lsls	r3, r3, #24
   1763e:	d411      	bmi.n	17664 <__swhatbuf_r+0x40>
   17640:	2380      	movs	r3, #128	; 0x80
   17642:	00db      	lsls	r3, r3, #3
   17644:	e00f      	b.n	17666 <__swhatbuf_r+0x42>
   17646:	aa01      	add	r2, sp, #4
   17648:	f000 fa1a 	bl	17a80 <_fstat_r>
   1764c:	2800      	cmp	r0, #0
   1764e:	dbf2      	blt.n	17636 <__swhatbuf_r+0x12>
   17650:	22f0      	movs	r2, #240	; 0xf0
   17652:	9b02      	ldr	r3, [sp, #8]
   17654:	0212      	lsls	r2, r2, #8
   17656:	4013      	ands	r3, r2
   17658:	4a05      	ldr	r2, [pc, #20]	; (17670 <__swhatbuf_r+0x4c>)
   1765a:	189b      	adds	r3, r3, r2
   1765c:	425a      	negs	r2, r3
   1765e:	4153      	adcs	r3, r2
   17660:	602b      	str	r3, [r5, #0]
   17662:	e7ed      	b.n	17640 <__swhatbuf_r+0x1c>
   17664:	2340      	movs	r3, #64	; 0x40
   17666:	2000      	movs	r0, #0
   17668:	6023      	str	r3, [r4, #0]
   1766a:	b010      	add	sp, #64	; 0x40
   1766c:	bd70      	pop	{r4, r5, r6, pc}
   1766e:	46c0      	nop			; (mov r8, r8)
   17670:	ffffe000 	.word	0xffffe000

00017674 <__smakebuf_r>:
   17674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17676:	2602      	movs	r6, #2
   17678:	898b      	ldrh	r3, [r1, #12]
   1767a:	0005      	movs	r5, r0
   1767c:	000c      	movs	r4, r1
   1767e:	4233      	tst	r3, r6
   17680:	d006      	beq.n	17690 <__smakebuf_r+0x1c>
   17682:	0023      	movs	r3, r4
   17684:	3347      	adds	r3, #71	; 0x47
   17686:	6023      	str	r3, [r4, #0]
   17688:	6123      	str	r3, [r4, #16]
   1768a:	2301      	movs	r3, #1
   1768c:	6163      	str	r3, [r4, #20]
   1768e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17690:	ab01      	add	r3, sp, #4
   17692:	466a      	mov	r2, sp
   17694:	f7ff ffc6 	bl	17624 <__swhatbuf_r>
   17698:	9900      	ldr	r1, [sp, #0]
   1769a:	0007      	movs	r7, r0
   1769c:	0028      	movs	r0, r5
   1769e:	f000 f88d 	bl	177bc <_malloc_r>
   176a2:	2800      	cmp	r0, #0
   176a4:	d108      	bne.n	176b8 <__smakebuf_r+0x44>
   176a6:	220c      	movs	r2, #12
   176a8:	5ea3      	ldrsh	r3, [r4, r2]
   176aa:	059a      	lsls	r2, r3, #22
   176ac:	d4ef      	bmi.n	1768e <__smakebuf_r+0x1a>
   176ae:	2203      	movs	r2, #3
   176b0:	4393      	bics	r3, r2
   176b2:	431e      	orrs	r6, r3
   176b4:	81a6      	strh	r6, [r4, #12]
   176b6:	e7e4      	b.n	17682 <__smakebuf_r+0xe>
   176b8:	4b0f      	ldr	r3, [pc, #60]	; (176f8 <__smakebuf_r+0x84>)
   176ba:	62ab      	str	r3, [r5, #40]	; 0x28
   176bc:	2380      	movs	r3, #128	; 0x80
   176be:	89a2      	ldrh	r2, [r4, #12]
   176c0:	6020      	str	r0, [r4, #0]
   176c2:	4313      	orrs	r3, r2
   176c4:	81a3      	strh	r3, [r4, #12]
   176c6:	9b00      	ldr	r3, [sp, #0]
   176c8:	6120      	str	r0, [r4, #16]
   176ca:	6163      	str	r3, [r4, #20]
   176cc:	9b01      	ldr	r3, [sp, #4]
   176ce:	2b00      	cmp	r3, #0
   176d0:	d00d      	beq.n	176ee <__smakebuf_r+0x7a>
   176d2:	230e      	movs	r3, #14
   176d4:	5ee1      	ldrsh	r1, [r4, r3]
   176d6:	0028      	movs	r0, r5
   176d8:	f000 f9e4 	bl	17aa4 <_isatty_r>
   176dc:	2800      	cmp	r0, #0
   176de:	d006      	beq.n	176ee <__smakebuf_r+0x7a>
   176e0:	2203      	movs	r2, #3
   176e2:	89a3      	ldrh	r3, [r4, #12]
   176e4:	4393      	bics	r3, r2
   176e6:	001a      	movs	r2, r3
   176e8:	2301      	movs	r3, #1
   176ea:	4313      	orrs	r3, r2
   176ec:	81a3      	strh	r3, [r4, #12]
   176ee:	89a0      	ldrh	r0, [r4, #12]
   176f0:	4338      	orrs	r0, r7
   176f2:	81a0      	strh	r0, [r4, #12]
   176f4:	e7cb      	b.n	1768e <__smakebuf_r+0x1a>
   176f6:	46c0      	nop			; (mov r8, r8)
   176f8:	00017475 	.word	0x00017475

000176fc <malloc>:
   176fc:	b510      	push	{r4, lr}
   176fe:	4b03      	ldr	r3, [pc, #12]	; (1770c <malloc+0x10>)
   17700:	0001      	movs	r1, r0
   17702:	6818      	ldr	r0, [r3, #0]
   17704:	f000 f85a 	bl	177bc <_malloc_r>
   17708:	bd10      	pop	{r4, pc}
   1770a:	46c0      	nop			; (mov r8, r8)
   1770c:	20000028 	.word	0x20000028

00017710 <memchr>:
   17710:	b2c9      	uxtb	r1, r1
   17712:	1882      	adds	r2, r0, r2
   17714:	4290      	cmp	r0, r2
   17716:	d101      	bne.n	1771c <memchr+0xc>
   17718:	2000      	movs	r0, #0
   1771a:	4770      	bx	lr
   1771c:	7803      	ldrb	r3, [r0, #0]
   1771e:	428b      	cmp	r3, r1
   17720:	d0fb      	beq.n	1771a <memchr+0xa>
   17722:	3001      	adds	r0, #1
   17724:	e7f6      	b.n	17714 <memchr+0x4>
   17726:	Address 0x00017726 is out of bounds.


00017728 <_free_r>:
   17728:	b570      	push	{r4, r5, r6, lr}
   1772a:	0005      	movs	r5, r0
   1772c:	2900      	cmp	r1, #0
   1772e:	d010      	beq.n	17752 <_free_r+0x2a>
   17730:	1f0c      	subs	r4, r1, #4
   17732:	6823      	ldr	r3, [r4, #0]
   17734:	2b00      	cmp	r3, #0
   17736:	da00      	bge.n	1773a <_free_r+0x12>
   17738:	18e4      	adds	r4, r4, r3
   1773a:	0028      	movs	r0, r5
   1773c:	f000 f9d8 	bl	17af0 <__malloc_lock>
   17740:	4a1d      	ldr	r2, [pc, #116]	; (177b8 <_free_r+0x90>)
   17742:	6813      	ldr	r3, [r2, #0]
   17744:	2b00      	cmp	r3, #0
   17746:	d105      	bne.n	17754 <_free_r+0x2c>
   17748:	6063      	str	r3, [r4, #4]
   1774a:	6014      	str	r4, [r2, #0]
   1774c:	0028      	movs	r0, r5
   1774e:	f000 f9d0 	bl	17af2 <__malloc_unlock>
   17752:	bd70      	pop	{r4, r5, r6, pc}
   17754:	42a3      	cmp	r3, r4
   17756:	d909      	bls.n	1776c <_free_r+0x44>
   17758:	6821      	ldr	r1, [r4, #0]
   1775a:	1860      	adds	r0, r4, r1
   1775c:	4283      	cmp	r3, r0
   1775e:	d1f3      	bne.n	17748 <_free_r+0x20>
   17760:	6818      	ldr	r0, [r3, #0]
   17762:	685b      	ldr	r3, [r3, #4]
   17764:	1841      	adds	r1, r0, r1
   17766:	6021      	str	r1, [r4, #0]
   17768:	e7ee      	b.n	17748 <_free_r+0x20>
   1776a:	0013      	movs	r3, r2
   1776c:	685a      	ldr	r2, [r3, #4]
   1776e:	2a00      	cmp	r2, #0
   17770:	d001      	beq.n	17776 <_free_r+0x4e>
   17772:	42a2      	cmp	r2, r4
   17774:	d9f9      	bls.n	1776a <_free_r+0x42>
   17776:	6819      	ldr	r1, [r3, #0]
   17778:	1858      	adds	r0, r3, r1
   1777a:	42a0      	cmp	r0, r4
   1777c:	d10b      	bne.n	17796 <_free_r+0x6e>
   1777e:	6820      	ldr	r0, [r4, #0]
   17780:	1809      	adds	r1, r1, r0
   17782:	1858      	adds	r0, r3, r1
   17784:	6019      	str	r1, [r3, #0]
   17786:	4282      	cmp	r2, r0
   17788:	d1e0      	bne.n	1774c <_free_r+0x24>
   1778a:	6810      	ldr	r0, [r2, #0]
   1778c:	6852      	ldr	r2, [r2, #4]
   1778e:	1841      	adds	r1, r0, r1
   17790:	6019      	str	r1, [r3, #0]
   17792:	605a      	str	r2, [r3, #4]
   17794:	e7da      	b.n	1774c <_free_r+0x24>
   17796:	42a0      	cmp	r0, r4
   17798:	d902      	bls.n	177a0 <_free_r+0x78>
   1779a:	230c      	movs	r3, #12
   1779c:	602b      	str	r3, [r5, #0]
   1779e:	e7d5      	b.n	1774c <_free_r+0x24>
   177a0:	6821      	ldr	r1, [r4, #0]
   177a2:	1860      	adds	r0, r4, r1
   177a4:	4282      	cmp	r2, r0
   177a6:	d103      	bne.n	177b0 <_free_r+0x88>
   177a8:	6810      	ldr	r0, [r2, #0]
   177aa:	6852      	ldr	r2, [r2, #4]
   177ac:	1841      	adds	r1, r0, r1
   177ae:	6021      	str	r1, [r4, #0]
   177b0:	6062      	str	r2, [r4, #4]
   177b2:	605c      	str	r4, [r3, #4]
   177b4:	e7ca      	b.n	1774c <_free_r+0x24>
   177b6:	46c0      	nop			; (mov r8, r8)
   177b8:	20001edc 	.word	0x20001edc

000177bc <_malloc_r>:
   177bc:	2303      	movs	r3, #3
   177be:	b570      	push	{r4, r5, r6, lr}
   177c0:	1ccd      	adds	r5, r1, #3
   177c2:	439d      	bics	r5, r3
   177c4:	3508      	adds	r5, #8
   177c6:	0006      	movs	r6, r0
   177c8:	2d0c      	cmp	r5, #12
   177ca:	d21e      	bcs.n	1780a <_malloc_r+0x4e>
   177cc:	250c      	movs	r5, #12
   177ce:	42a9      	cmp	r1, r5
   177d0:	d81d      	bhi.n	1780e <_malloc_r+0x52>
   177d2:	0030      	movs	r0, r6
   177d4:	f000 f98c 	bl	17af0 <__malloc_lock>
   177d8:	4a25      	ldr	r2, [pc, #148]	; (17870 <_malloc_r+0xb4>)
   177da:	6814      	ldr	r4, [r2, #0]
   177dc:	0021      	movs	r1, r4
   177de:	2900      	cmp	r1, #0
   177e0:	d119      	bne.n	17816 <_malloc_r+0x5a>
   177e2:	4c24      	ldr	r4, [pc, #144]	; (17874 <_malloc_r+0xb8>)
   177e4:	6823      	ldr	r3, [r4, #0]
   177e6:	2b00      	cmp	r3, #0
   177e8:	d103      	bne.n	177f2 <_malloc_r+0x36>
   177ea:	0030      	movs	r0, r6
   177ec:	f000 f87a 	bl	178e4 <_sbrk_r>
   177f0:	6020      	str	r0, [r4, #0]
   177f2:	0029      	movs	r1, r5
   177f4:	0030      	movs	r0, r6
   177f6:	f000 f875 	bl	178e4 <_sbrk_r>
   177fa:	1c43      	adds	r3, r0, #1
   177fc:	d12c      	bne.n	17858 <_malloc_r+0x9c>
   177fe:	230c      	movs	r3, #12
   17800:	0030      	movs	r0, r6
   17802:	6033      	str	r3, [r6, #0]
   17804:	f000 f975 	bl	17af2 <__malloc_unlock>
   17808:	e003      	b.n	17812 <_malloc_r+0x56>
   1780a:	2d00      	cmp	r5, #0
   1780c:	dadf      	bge.n	177ce <_malloc_r+0x12>
   1780e:	230c      	movs	r3, #12
   17810:	6033      	str	r3, [r6, #0]
   17812:	2000      	movs	r0, #0
   17814:	bd70      	pop	{r4, r5, r6, pc}
   17816:	680b      	ldr	r3, [r1, #0]
   17818:	1b5b      	subs	r3, r3, r5
   1781a:	d41a      	bmi.n	17852 <_malloc_r+0x96>
   1781c:	2b0b      	cmp	r3, #11
   1781e:	d903      	bls.n	17828 <_malloc_r+0x6c>
   17820:	600b      	str	r3, [r1, #0]
   17822:	18cc      	adds	r4, r1, r3
   17824:	6025      	str	r5, [r4, #0]
   17826:	e003      	b.n	17830 <_malloc_r+0x74>
   17828:	428c      	cmp	r4, r1
   1782a:	d10e      	bne.n	1784a <_malloc_r+0x8e>
   1782c:	6863      	ldr	r3, [r4, #4]
   1782e:	6013      	str	r3, [r2, #0]
   17830:	0030      	movs	r0, r6
   17832:	f000 f95e 	bl	17af2 <__malloc_unlock>
   17836:	0020      	movs	r0, r4
   17838:	2207      	movs	r2, #7
   1783a:	300b      	adds	r0, #11
   1783c:	1d23      	adds	r3, r4, #4
   1783e:	4390      	bics	r0, r2
   17840:	1ac3      	subs	r3, r0, r3
   17842:	d0e7      	beq.n	17814 <_malloc_r+0x58>
   17844:	425a      	negs	r2, r3
   17846:	50e2      	str	r2, [r4, r3]
   17848:	e7e4      	b.n	17814 <_malloc_r+0x58>
   1784a:	684b      	ldr	r3, [r1, #4]
   1784c:	6063      	str	r3, [r4, #4]
   1784e:	000c      	movs	r4, r1
   17850:	e7ee      	b.n	17830 <_malloc_r+0x74>
   17852:	000c      	movs	r4, r1
   17854:	6849      	ldr	r1, [r1, #4]
   17856:	e7c2      	b.n	177de <_malloc_r+0x22>
   17858:	2303      	movs	r3, #3
   1785a:	1cc4      	adds	r4, r0, #3
   1785c:	439c      	bics	r4, r3
   1785e:	42a0      	cmp	r0, r4
   17860:	d0e0      	beq.n	17824 <_malloc_r+0x68>
   17862:	1a21      	subs	r1, r4, r0
   17864:	0030      	movs	r0, r6
   17866:	f000 f83d 	bl	178e4 <_sbrk_r>
   1786a:	1c43      	adds	r3, r0, #1
   1786c:	d1da      	bne.n	17824 <_malloc_r+0x68>
   1786e:	e7c6      	b.n	177fe <_malloc_r+0x42>
   17870:	20001edc 	.word	0x20001edc
   17874:	20001ee0 	.word	0x20001ee0

00017878 <_putc_r>:
   17878:	b570      	push	{r4, r5, r6, lr}
   1787a:	0006      	movs	r6, r0
   1787c:	000d      	movs	r5, r1
   1787e:	0014      	movs	r4, r2
   17880:	2800      	cmp	r0, #0
   17882:	d004      	beq.n	1788e <_putc_r+0x16>
   17884:	6983      	ldr	r3, [r0, #24]
   17886:	2b00      	cmp	r3, #0
   17888:	d101      	bne.n	1788e <_putc_r+0x16>
   1788a:	f7ff fe35 	bl	174f8 <__sinit>
   1788e:	4b12      	ldr	r3, [pc, #72]	; (178d8 <_putc_r+0x60>)
   17890:	429c      	cmp	r4, r3
   17892:	d111      	bne.n	178b8 <_putc_r+0x40>
   17894:	6874      	ldr	r4, [r6, #4]
   17896:	68a3      	ldr	r3, [r4, #8]
   17898:	3b01      	subs	r3, #1
   1789a:	60a3      	str	r3, [r4, #8]
   1789c:	2b00      	cmp	r3, #0
   1789e:	da05      	bge.n	178ac <_putc_r+0x34>
   178a0:	69a2      	ldr	r2, [r4, #24]
   178a2:	4293      	cmp	r3, r2
   178a4:	db12      	blt.n	178cc <_putc_r+0x54>
   178a6:	b2eb      	uxtb	r3, r5
   178a8:	2b0a      	cmp	r3, #10
   178aa:	d00f      	beq.n	178cc <_putc_r+0x54>
   178ac:	6823      	ldr	r3, [r4, #0]
   178ae:	b2e8      	uxtb	r0, r5
   178b0:	1c5a      	adds	r2, r3, #1
   178b2:	6022      	str	r2, [r4, #0]
   178b4:	701d      	strb	r5, [r3, #0]
   178b6:	bd70      	pop	{r4, r5, r6, pc}
   178b8:	4b08      	ldr	r3, [pc, #32]	; (178dc <_putc_r+0x64>)
   178ba:	429c      	cmp	r4, r3
   178bc:	d101      	bne.n	178c2 <_putc_r+0x4a>
   178be:	68b4      	ldr	r4, [r6, #8]
   178c0:	e7e9      	b.n	17896 <_putc_r+0x1e>
   178c2:	4b07      	ldr	r3, [pc, #28]	; (178e0 <_putc_r+0x68>)
   178c4:	429c      	cmp	r4, r3
   178c6:	d1e6      	bne.n	17896 <_putc_r+0x1e>
   178c8:	68f4      	ldr	r4, [r6, #12]
   178ca:	e7e4      	b.n	17896 <_putc_r+0x1e>
   178cc:	0022      	movs	r2, r4
   178ce:	0029      	movs	r1, r5
   178d0:	0030      	movs	r0, r6
   178d2:	f7ff fc45 	bl	17160 <__swbuf_r>
   178d6:	e7ee      	b.n	178b6 <_putc_r+0x3e>
   178d8:	00018f48 	.word	0x00018f48
   178dc:	00018f68 	.word	0x00018f68
   178e0:	00018f28 	.word	0x00018f28

000178e4 <_sbrk_r>:
   178e4:	2300      	movs	r3, #0
   178e6:	b570      	push	{r4, r5, r6, lr}
   178e8:	4c06      	ldr	r4, [pc, #24]	; (17904 <_sbrk_r+0x20>)
   178ea:	0005      	movs	r5, r0
   178ec:	0008      	movs	r0, r1
   178ee:	6023      	str	r3, [r4, #0]
   178f0:	f7ef fc60 	bl	71b4 <_sbrk>
   178f4:	1c43      	adds	r3, r0, #1
   178f6:	d103      	bne.n	17900 <_sbrk_r+0x1c>
   178f8:	6823      	ldr	r3, [r4, #0]
   178fa:	2b00      	cmp	r3, #0
   178fc:	d000      	beq.n	17900 <_sbrk_r+0x1c>
   178fe:	602b      	str	r3, [r5, #0]
   17900:	bd70      	pop	{r4, r5, r6, pc}
   17902:	46c0      	nop			; (mov r8, r8)
   17904:	200034d8 	.word	0x200034d8

00017908 <_raise_r>:
   17908:	b570      	push	{r4, r5, r6, lr}
   1790a:	0004      	movs	r4, r0
   1790c:	000d      	movs	r5, r1
   1790e:	291f      	cmp	r1, #31
   17910:	d904      	bls.n	1791c <_raise_r+0x14>
   17912:	2316      	movs	r3, #22
   17914:	6003      	str	r3, [r0, #0]
   17916:	2001      	movs	r0, #1
   17918:	4240      	negs	r0, r0
   1791a:	bd70      	pop	{r4, r5, r6, pc}
   1791c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1791e:	2b00      	cmp	r3, #0
   17920:	d004      	beq.n	1792c <_raise_r+0x24>
   17922:	008a      	lsls	r2, r1, #2
   17924:	189b      	adds	r3, r3, r2
   17926:	681a      	ldr	r2, [r3, #0]
   17928:	2a00      	cmp	r2, #0
   1792a:	d108      	bne.n	1793e <_raise_r+0x36>
   1792c:	0020      	movs	r0, r4
   1792e:	f000 f831 	bl	17994 <_getpid_r>
   17932:	002a      	movs	r2, r5
   17934:	0001      	movs	r1, r0
   17936:	0020      	movs	r0, r4
   17938:	f000 f81a 	bl	17970 <_kill_r>
   1793c:	e7ed      	b.n	1791a <_raise_r+0x12>
   1793e:	2000      	movs	r0, #0
   17940:	2a01      	cmp	r2, #1
   17942:	d0ea      	beq.n	1791a <_raise_r+0x12>
   17944:	1c51      	adds	r1, r2, #1
   17946:	d103      	bne.n	17950 <_raise_r+0x48>
   17948:	2316      	movs	r3, #22
   1794a:	3001      	adds	r0, #1
   1794c:	6023      	str	r3, [r4, #0]
   1794e:	e7e4      	b.n	1791a <_raise_r+0x12>
   17950:	2400      	movs	r4, #0
   17952:	0028      	movs	r0, r5
   17954:	601c      	str	r4, [r3, #0]
   17956:	4790      	blx	r2
   17958:	0020      	movs	r0, r4
   1795a:	e7de      	b.n	1791a <_raise_r+0x12>

0001795c <raise>:
   1795c:	b510      	push	{r4, lr}
   1795e:	4b03      	ldr	r3, [pc, #12]	; (1796c <raise+0x10>)
   17960:	0001      	movs	r1, r0
   17962:	6818      	ldr	r0, [r3, #0]
   17964:	f7ff ffd0 	bl	17908 <_raise_r>
   17968:	bd10      	pop	{r4, pc}
   1796a:	46c0      	nop			; (mov r8, r8)
   1796c:	20000028 	.word	0x20000028

00017970 <_kill_r>:
   17970:	2300      	movs	r3, #0
   17972:	b570      	push	{r4, r5, r6, lr}
   17974:	4c06      	ldr	r4, [pc, #24]	; (17990 <_kill_r+0x20>)
   17976:	0005      	movs	r5, r0
   17978:	0008      	movs	r0, r1
   1797a:	0011      	movs	r1, r2
   1797c:	6023      	str	r3, [r4, #0]
   1797e:	f7ef fc39 	bl	71f4 <_kill>
   17982:	1c43      	adds	r3, r0, #1
   17984:	d103      	bne.n	1798e <_kill_r+0x1e>
   17986:	6823      	ldr	r3, [r4, #0]
   17988:	2b00      	cmp	r3, #0
   1798a:	d000      	beq.n	1798e <_kill_r+0x1e>
   1798c:	602b      	str	r3, [r5, #0]
   1798e:	bd70      	pop	{r4, r5, r6, pc}
   17990:	200034d8 	.word	0x200034d8

00017994 <_getpid_r>:
   17994:	b510      	push	{r4, lr}
   17996:	f7ef fc2e 	bl	71f6 <_getpid>
   1799a:	bd10      	pop	{r4, pc}

0001799c <__sread>:
   1799c:	b570      	push	{r4, r5, r6, lr}
   1799e:	000c      	movs	r4, r1
   179a0:	250e      	movs	r5, #14
   179a2:	5f49      	ldrsh	r1, [r1, r5]
   179a4:	f000 f8a6 	bl	17af4 <_read_r>
   179a8:	2800      	cmp	r0, #0
   179aa:	db03      	blt.n	179b4 <__sread+0x18>
   179ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
   179ae:	181b      	adds	r3, r3, r0
   179b0:	6563      	str	r3, [r4, #84]	; 0x54
   179b2:	bd70      	pop	{r4, r5, r6, pc}
   179b4:	89a3      	ldrh	r3, [r4, #12]
   179b6:	4a02      	ldr	r2, [pc, #8]	; (179c0 <__sread+0x24>)
   179b8:	4013      	ands	r3, r2
   179ba:	81a3      	strh	r3, [r4, #12]
   179bc:	e7f9      	b.n	179b2 <__sread+0x16>
   179be:	46c0      	nop			; (mov r8, r8)
   179c0:	ffffefff 	.word	0xffffefff

000179c4 <__swrite>:
   179c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   179c6:	001f      	movs	r7, r3
   179c8:	898b      	ldrh	r3, [r1, #12]
   179ca:	0005      	movs	r5, r0
   179cc:	000c      	movs	r4, r1
   179ce:	0016      	movs	r6, r2
   179d0:	05db      	lsls	r3, r3, #23
   179d2:	d505      	bpl.n	179e0 <__swrite+0x1c>
   179d4:	230e      	movs	r3, #14
   179d6:	5ec9      	ldrsh	r1, [r1, r3]
   179d8:	2200      	movs	r2, #0
   179da:	2302      	movs	r3, #2
   179dc:	f000 f874 	bl	17ac8 <_lseek_r>
   179e0:	89a3      	ldrh	r3, [r4, #12]
   179e2:	4a05      	ldr	r2, [pc, #20]	; (179f8 <__swrite+0x34>)
   179e4:	0028      	movs	r0, r5
   179e6:	4013      	ands	r3, r2
   179e8:	81a3      	strh	r3, [r4, #12]
   179ea:	0032      	movs	r2, r6
   179ec:	230e      	movs	r3, #14
   179ee:	5ee1      	ldrsh	r1, [r4, r3]
   179f0:	003b      	movs	r3, r7
   179f2:	f000 f81f 	bl	17a34 <_write_r>
   179f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179f8:	ffffefff 	.word	0xffffefff

000179fc <__sseek>:
   179fc:	b570      	push	{r4, r5, r6, lr}
   179fe:	000c      	movs	r4, r1
   17a00:	250e      	movs	r5, #14
   17a02:	5f49      	ldrsh	r1, [r1, r5]
   17a04:	f000 f860 	bl	17ac8 <_lseek_r>
   17a08:	89a3      	ldrh	r3, [r4, #12]
   17a0a:	1c42      	adds	r2, r0, #1
   17a0c:	d103      	bne.n	17a16 <__sseek+0x1a>
   17a0e:	4a05      	ldr	r2, [pc, #20]	; (17a24 <__sseek+0x28>)
   17a10:	4013      	ands	r3, r2
   17a12:	81a3      	strh	r3, [r4, #12]
   17a14:	bd70      	pop	{r4, r5, r6, pc}
   17a16:	2280      	movs	r2, #128	; 0x80
   17a18:	0152      	lsls	r2, r2, #5
   17a1a:	4313      	orrs	r3, r2
   17a1c:	81a3      	strh	r3, [r4, #12]
   17a1e:	6560      	str	r0, [r4, #84]	; 0x54
   17a20:	e7f8      	b.n	17a14 <__sseek+0x18>
   17a22:	46c0      	nop			; (mov r8, r8)
   17a24:	ffffefff 	.word	0xffffefff

00017a28 <__sclose>:
   17a28:	b510      	push	{r4, lr}
   17a2a:	230e      	movs	r3, #14
   17a2c:	5ec9      	ldrsh	r1, [r1, r3]
   17a2e:	f000 f815 	bl	17a5c <_close_r>
   17a32:	bd10      	pop	{r4, pc}

00017a34 <_write_r>:
   17a34:	b570      	push	{r4, r5, r6, lr}
   17a36:	0005      	movs	r5, r0
   17a38:	0008      	movs	r0, r1
   17a3a:	0011      	movs	r1, r2
   17a3c:	2200      	movs	r2, #0
   17a3e:	4c06      	ldr	r4, [pc, #24]	; (17a58 <_write_r+0x24>)
   17a40:	6022      	str	r2, [r4, #0]
   17a42:	001a      	movs	r2, r3
   17a44:	f7ef fb8e 	bl	7164 <_write>
   17a48:	1c43      	adds	r3, r0, #1
   17a4a:	d103      	bne.n	17a54 <_write_r+0x20>
   17a4c:	6823      	ldr	r3, [r4, #0]
   17a4e:	2b00      	cmp	r3, #0
   17a50:	d000      	beq.n	17a54 <_write_r+0x20>
   17a52:	602b      	str	r3, [r5, #0]
   17a54:	bd70      	pop	{r4, r5, r6, pc}
   17a56:	46c0      	nop			; (mov r8, r8)
   17a58:	200034d8 	.word	0x200034d8

00017a5c <_close_r>:
   17a5c:	2300      	movs	r3, #0
   17a5e:	b570      	push	{r4, r5, r6, lr}
   17a60:	4c06      	ldr	r4, [pc, #24]	; (17a7c <_close_r+0x20>)
   17a62:	0005      	movs	r5, r0
   17a64:	0008      	movs	r0, r1
   17a66:	6023      	str	r3, [r4, #0]
   17a68:	f7ef fbb6 	bl	71d8 <_close>
   17a6c:	1c43      	adds	r3, r0, #1
   17a6e:	d103      	bne.n	17a78 <_close_r+0x1c>
   17a70:	6823      	ldr	r3, [r4, #0]
   17a72:	2b00      	cmp	r3, #0
   17a74:	d000      	beq.n	17a78 <_close_r+0x1c>
   17a76:	602b      	str	r3, [r5, #0]
   17a78:	bd70      	pop	{r4, r5, r6, pc}
   17a7a:	46c0      	nop			; (mov r8, r8)
   17a7c:	200034d8 	.word	0x200034d8

00017a80 <_fstat_r>:
   17a80:	2300      	movs	r3, #0
   17a82:	b570      	push	{r4, r5, r6, lr}
   17a84:	4c06      	ldr	r4, [pc, #24]	; (17aa0 <_fstat_r+0x20>)
   17a86:	0005      	movs	r5, r0
   17a88:	0008      	movs	r0, r1
   17a8a:	0011      	movs	r1, r2
   17a8c:	6023      	str	r3, [r4, #0]
   17a8e:	f7ef fba6 	bl	71de <_fstat>
   17a92:	1c43      	adds	r3, r0, #1
   17a94:	d103      	bne.n	17a9e <_fstat_r+0x1e>
   17a96:	6823      	ldr	r3, [r4, #0]
   17a98:	2b00      	cmp	r3, #0
   17a9a:	d000      	beq.n	17a9e <_fstat_r+0x1e>
   17a9c:	602b      	str	r3, [r5, #0]
   17a9e:	bd70      	pop	{r4, r5, r6, pc}
   17aa0:	200034d8 	.word	0x200034d8

00017aa4 <_isatty_r>:
   17aa4:	2300      	movs	r3, #0
   17aa6:	b570      	push	{r4, r5, r6, lr}
   17aa8:	4c06      	ldr	r4, [pc, #24]	; (17ac4 <_isatty_r+0x20>)
   17aaa:	0005      	movs	r5, r0
   17aac:	0008      	movs	r0, r1
   17aae:	6023      	str	r3, [r4, #0]
   17ab0:	f7ef fb9a 	bl	71e8 <_isatty>
   17ab4:	1c43      	adds	r3, r0, #1
   17ab6:	d103      	bne.n	17ac0 <_isatty_r+0x1c>
   17ab8:	6823      	ldr	r3, [r4, #0]
   17aba:	2b00      	cmp	r3, #0
   17abc:	d000      	beq.n	17ac0 <_isatty_r+0x1c>
   17abe:	602b      	str	r3, [r5, #0]
   17ac0:	bd70      	pop	{r4, r5, r6, pc}
   17ac2:	46c0      	nop			; (mov r8, r8)
   17ac4:	200034d8 	.word	0x200034d8

00017ac8 <_lseek_r>:
   17ac8:	b570      	push	{r4, r5, r6, lr}
   17aca:	0005      	movs	r5, r0
   17acc:	0008      	movs	r0, r1
   17ace:	0011      	movs	r1, r2
   17ad0:	2200      	movs	r2, #0
   17ad2:	4c06      	ldr	r4, [pc, #24]	; (17aec <_lseek_r+0x24>)
   17ad4:	6022      	str	r2, [r4, #0]
   17ad6:	001a      	movs	r2, r3
   17ad8:	f7ef fb88 	bl	71ec <_lseek>
   17adc:	1c43      	adds	r3, r0, #1
   17ade:	d103      	bne.n	17ae8 <_lseek_r+0x20>
   17ae0:	6823      	ldr	r3, [r4, #0]
   17ae2:	2b00      	cmp	r3, #0
   17ae4:	d000      	beq.n	17ae8 <_lseek_r+0x20>
   17ae6:	602b      	str	r3, [r5, #0]
   17ae8:	bd70      	pop	{r4, r5, r6, pc}
   17aea:	46c0      	nop			; (mov r8, r8)
   17aec:	200034d8 	.word	0x200034d8

00017af0 <__malloc_lock>:
   17af0:	4770      	bx	lr

00017af2 <__malloc_unlock>:
   17af2:	4770      	bx	lr

00017af4 <_read_r>:
   17af4:	b570      	push	{r4, r5, r6, lr}
   17af6:	0005      	movs	r5, r0
   17af8:	0008      	movs	r0, r1
   17afa:	0011      	movs	r1, r2
   17afc:	2200      	movs	r2, #0
   17afe:	4c06      	ldr	r4, [pc, #24]	; (17b18 <_read_r+0x24>)
   17b00:	6022      	str	r2, [r4, #0]
   17b02:	001a      	movs	r2, r3
   17b04:	f7ef fb0c 	bl	7120 <_read>
   17b08:	1c43      	adds	r3, r0, #1
   17b0a:	d103      	bne.n	17b14 <_read_r+0x20>
   17b0c:	6823      	ldr	r3, [r4, #0]
   17b0e:	2b00      	cmp	r3, #0
   17b10:	d000      	beq.n	17b14 <_read_r+0x20>
   17b12:	602b      	str	r3, [r5, #0]
   17b14:	bd70      	pop	{r4, r5, r6, pc}
   17b16:	46c0      	nop			; (mov r8, r8)
   17b18:	200034d8 	.word	0x200034d8
   17b1c:	00004b1e 	.word	0x00004b1e
   17b20:	00004b1e 	.word	0x00004b1e
   17b24:	00004afa 	.word	0x00004afa
=======
000173d8 <std.isra.0>:
   173d8:	2300      	movs	r3, #0
   173da:	b510      	push	{r4, lr}
   173dc:	0004      	movs	r4, r0
   173de:	6003      	str	r3, [r0, #0]
   173e0:	6043      	str	r3, [r0, #4]
   173e2:	6083      	str	r3, [r0, #8]
   173e4:	8181      	strh	r1, [r0, #12]
   173e6:	6643      	str	r3, [r0, #100]	; 0x64
   173e8:	81c2      	strh	r2, [r0, #14]
   173ea:	6103      	str	r3, [r0, #16]
   173ec:	6143      	str	r3, [r0, #20]
   173ee:	6183      	str	r3, [r0, #24]
   173f0:	0019      	movs	r1, r3
   173f2:	2208      	movs	r2, #8
   173f4:	305c      	adds	r0, #92	; 0x5c
   173f6:	f7ff f9d1 	bl	1679c <memset>
   173fa:	4b05      	ldr	r3, [pc, #20]	; (17410 <std.isra.0+0x38>)
   173fc:	6224      	str	r4, [r4, #32]
   173fe:	6263      	str	r3, [r4, #36]	; 0x24
   17400:	4b04      	ldr	r3, [pc, #16]	; (17414 <std.isra.0+0x3c>)
   17402:	62a3      	str	r3, [r4, #40]	; 0x28
   17404:	4b04      	ldr	r3, [pc, #16]	; (17418 <std.isra.0+0x40>)
   17406:	62e3      	str	r3, [r4, #44]	; 0x2c
   17408:	4b04      	ldr	r3, [pc, #16]	; (1741c <std.isra.0+0x44>)
   1740a:	6323      	str	r3, [r4, #48]	; 0x30
   1740c:	bd10      	pop	{r4, pc}
   1740e:	46c0      	nop			; (mov r8, r8)
   17410:	000178f1 	.word	0x000178f1
   17414:	00017919 	.word	0x00017919
   17418:	00017951 	.word	0x00017951
   1741c:	0001797d 	.word	0x0001797d

00017420 <__sfmoreglue>:
   17420:	b570      	push	{r4, r5, r6, lr}
   17422:	2568      	movs	r5, #104	; 0x68
   17424:	1e4a      	subs	r2, r1, #1
   17426:	4355      	muls	r5, r2
   17428:	000e      	movs	r6, r1
   1742a:	0029      	movs	r1, r5
   1742c:	3174      	adds	r1, #116	; 0x74
   1742e:	f000 f96f 	bl	17710 <_malloc_r>
   17432:	1e04      	subs	r4, r0, #0
   17434:	d008      	beq.n	17448 <__sfmoreglue+0x28>
   17436:	2100      	movs	r1, #0
   17438:	002a      	movs	r2, r5
   1743a:	6001      	str	r1, [r0, #0]
   1743c:	6046      	str	r6, [r0, #4]
   1743e:	300c      	adds	r0, #12
   17440:	60a0      	str	r0, [r4, #8]
   17442:	3268      	adds	r2, #104	; 0x68
   17444:	f7ff f9aa 	bl	1679c <memset>
   17448:	0020      	movs	r0, r4
   1744a:	bd70      	pop	{r4, r5, r6, pc}

0001744c <__sinit>:
   1744c:	6983      	ldr	r3, [r0, #24]
   1744e:	b513      	push	{r0, r1, r4, lr}
   17450:	0004      	movs	r4, r0
   17452:	2b00      	cmp	r3, #0
   17454:	d128      	bne.n	174a8 <__sinit+0x5c>
   17456:	6483      	str	r3, [r0, #72]	; 0x48
   17458:	64c3      	str	r3, [r0, #76]	; 0x4c
   1745a:	6503      	str	r3, [r0, #80]	; 0x50
   1745c:	4b13      	ldr	r3, [pc, #76]	; (174ac <__sinit+0x60>)
   1745e:	4a14      	ldr	r2, [pc, #80]	; (174b0 <__sinit+0x64>)
   17460:	681b      	ldr	r3, [r3, #0]
   17462:	6282      	str	r2, [r0, #40]	; 0x28
   17464:	9301      	str	r3, [sp, #4]
   17466:	4298      	cmp	r0, r3
   17468:	d101      	bne.n	1746e <__sinit+0x22>
   1746a:	2301      	movs	r3, #1
   1746c:	6183      	str	r3, [r0, #24]
   1746e:	0020      	movs	r0, r4
   17470:	f000 f820 	bl	174b4 <__sfp>
   17474:	6060      	str	r0, [r4, #4]
   17476:	0020      	movs	r0, r4
   17478:	f000 f81c 	bl	174b4 <__sfp>
   1747c:	60a0      	str	r0, [r4, #8]
   1747e:	0020      	movs	r0, r4
   17480:	f000 f818 	bl	174b4 <__sfp>
   17484:	2200      	movs	r2, #0
   17486:	60e0      	str	r0, [r4, #12]
   17488:	2104      	movs	r1, #4
   1748a:	6860      	ldr	r0, [r4, #4]
   1748c:	f7ff ffa4 	bl	173d8 <std.isra.0>
   17490:	2201      	movs	r2, #1
   17492:	2109      	movs	r1, #9
   17494:	68a0      	ldr	r0, [r4, #8]
   17496:	f7ff ff9f 	bl	173d8 <std.isra.0>
   1749a:	2202      	movs	r2, #2
   1749c:	2112      	movs	r1, #18
   1749e:	68e0      	ldr	r0, [r4, #12]
   174a0:	f7ff ff9a 	bl	173d8 <std.isra.0>
   174a4:	2301      	movs	r3, #1
   174a6:	61a3      	str	r3, [r4, #24]
   174a8:	bd13      	pop	{r0, r1, r4, pc}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	00018cf0 	.word	0x00018cf0
   174b0:	000173c9 	.word	0x000173c9

000174b4 <__sfp>:
   174b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   174b6:	4b1e      	ldr	r3, [pc, #120]	; (17530 <__sfp+0x7c>)
   174b8:	0007      	movs	r7, r0
   174ba:	681e      	ldr	r6, [r3, #0]
   174bc:	69b3      	ldr	r3, [r6, #24]
   174be:	2b00      	cmp	r3, #0
   174c0:	d102      	bne.n	174c8 <__sfp+0x14>
   174c2:	0030      	movs	r0, r6
   174c4:	f7ff ffc2 	bl	1744c <__sinit>
   174c8:	3648      	adds	r6, #72	; 0x48
   174ca:	68b4      	ldr	r4, [r6, #8]
   174cc:	6873      	ldr	r3, [r6, #4]
   174ce:	3b01      	subs	r3, #1
   174d0:	d504      	bpl.n	174dc <__sfp+0x28>
   174d2:	6833      	ldr	r3, [r6, #0]
   174d4:	2b00      	cmp	r3, #0
   174d6:	d007      	beq.n	174e8 <__sfp+0x34>
   174d8:	6836      	ldr	r6, [r6, #0]
   174da:	e7f6      	b.n	174ca <__sfp+0x16>
   174dc:	220c      	movs	r2, #12
   174de:	5ea5      	ldrsh	r5, [r4, r2]
   174e0:	2d00      	cmp	r5, #0
   174e2:	d00d      	beq.n	17500 <__sfp+0x4c>
   174e4:	3468      	adds	r4, #104	; 0x68
   174e6:	e7f2      	b.n	174ce <__sfp+0x1a>
   174e8:	2104      	movs	r1, #4
   174ea:	0038      	movs	r0, r7
   174ec:	f7ff ff98 	bl	17420 <__sfmoreglue>
   174f0:	6030      	str	r0, [r6, #0]
   174f2:	2800      	cmp	r0, #0
   174f4:	d1f0      	bne.n	174d8 <__sfp+0x24>
   174f6:	230c      	movs	r3, #12
   174f8:	0004      	movs	r4, r0
   174fa:	603b      	str	r3, [r7, #0]
   174fc:	0020      	movs	r0, r4
   174fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17500:	2301      	movs	r3, #1
   17502:	0020      	movs	r0, r4
   17504:	425b      	negs	r3, r3
   17506:	81e3      	strh	r3, [r4, #14]
   17508:	3302      	adds	r3, #2
   1750a:	81a3      	strh	r3, [r4, #12]
   1750c:	6665      	str	r5, [r4, #100]	; 0x64
   1750e:	6025      	str	r5, [r4, #0]
   17510:	60a5      	str	r5, [r4, #8]
   17512:	6065      	str	r5, [r4, #4]
   17514:	6125      	str	r5, [r4, #16]
   17516:	6165      	str	r5, [r4, #20]
   17518:	61a5      	str	r5, [r4, #24]
   1751a:	2208      	movs	r2, #8
   1751c:	0029      	movs	r1, r5
   1751e:	305c      	adds	r0, #92	; 0x5c
   17520:	f7ff f93c 	bl	1679c <memset>
   17524:	6365      	str	r5, [r4, #52]	; 0x34
   17526:	63a5      	str	r5, [r4, #56]	; 0x38
   17528:	64a5      	str	r5, [r4, #72]	; 0x48
   1752a:	64e5      	str	r5, [r4, #76]	; 0x4c
   1752c:	e7e6      	b.n	174fc <__sfp+0x48>
   1752e:	46c0      	nop			; (mov r8, r8)
   17530:	00018cf0 	.word	0x00018cf0

00017534 <_fwalk_reent>:
   17534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17536:	0004      	movs	r4, r0
   17538:	0007      	movs	r7, r0
   1753a:	2600      	movs	r6, #0
   1753c:	9101      	str	r1, [sp, #4]
   1753e:	3448      	adds	r4, #72	; 0x48
   17540:	2c00      	cmp	r4, #0
   17542:	d101      	bne.n	17548 <_fwalk_reent+0x14>
   17544:	0030      	movs	r0, r6
   17546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17548:	6863      	ldr	r3, [r4, #4]
   1754a:	68a5      	ldr	r5, [r4, #8]
   1754c:	9300      	str	r3, [sp, #0]
   1754e:	9b00      	ldr	r3, [sp, #0]
   17550:	3b01      	subs	r3, #1
   17552:	9300      	str	r3, [sp, #0]
   17554:	d501      	bpl.n	1755a <_fwalk_reent+0x26>
   17556:	6824      	ldr	r4, [r4, #0]
   17558:	e7f2      	b.n	17540 <_fwalk_reent+0xc>
   1755a:	89ab      	ldrh	r3, [r5, #12]
   1755c:	2b01      	cmp	r3, #1
   1755e:	d908      	bls.n	17572 <_fwalk_reent+0x3e>
   17560:	220e      	movs	r2, #14
   17562:	5eab      	ldrsh	r3, [r5, r2]
   17564:	3301      	adds	r3, #1
   17566:	d004      	beq.n	17572 <_fwalk_reent+0x3e>
   17568:	0029      	movs	r1, r5
   1756a:	0038      	movs	r0, r7
   1756c:	9b01      	ldr	r3, [sp, #4]
   1756e:	4798      	blx	r3
   17570:	4306      	orrs	r6, r0
   17572:	3568      	adds	r5, #104	; 0x68
   17574:	e7eb      	b.n	1754e <_fwalk_reent+0x1a>
   17576:	Address 0x00017576 is out of bounds.


00017578 <__swhatbuf_r>:
   17578:	b570      	push	{r4, r5, r6, lr}
   1757a:	000e      	movs	r6, r1
   1757c:	001d      	movs	r5, r3
   1757e:	230e      	movs	r3, #14
   17580:	5ec9      	ldrsh	r1, [r1, r3]
   17582:	b090      	sub	sp, #64	; 0x40
   17584:	0014      	movs	r4, r2
   17586:	2900      	cmp	r1, #0
   17588:	da07      	bge.n	1759a <__swhatbuf_r+0x22>
   1758a:	2300      	movs	r3, #0
   1758c:	602b      	str	r3, [r5, #0]
   1758e:	89b3      	ldrh	r3, [r6, #12]
   17590:	061b      	lsls	r3, r3, #24
   17592:	d411      	bmi.n	175b8 <__swhatbuf_r+0x40>
   17594:	2380      	movs	r3, #128	; 0x80
   17596:	00db      	lsls	r3, r3, #3
   17598:	e00f      	b.n	175ba <__swhatbuf_r+0x42>
   1759a:	aa01      	add	r2, sp, #4
   1759c:	f000 fa1a 	bl	179d4 <_fstat_r>
   175a0:	2800      	cmp	r0, #0
   175a2:	dbf2      	blt.n	1758a <__swhatbuf_r+0x12>
   175a4:	22f0      	movs	r2, #240	; 0xf0
   175a6:	9b02      	ldr	r3, [sp, #8]
   175a8:	0212      	lsls	r2, r2, #8
   175aa:	4013      	ands	r3, r2
   175ac:	4a05      	ldr	r2, [pc, #20]	; (175c4 <__swhatbuf_r+0x4c>)
   175ae:	189b      	adds	r3, r3, r2
   175b0:	425a      	negs	r2, r3
   175b2:	4153      	adcs	r3, r2
   175b4:	602b      	str	r3, [r5, #0]
   175b6:	e7ed      	b.n	17594 <__swhatbuf_r+0x1c>
   175b8:	2340      	movs	r3, #64	; 0x40
   175ba:	2000      	movs	r0, #0
   175bc:	6023      	str	r3, [r4, #0]
   175be:	b010      	add	sp, #64	; 0x40
   175c0:	bd70      	pop	{r4, r5, r6, pc}
   175c2:	46c0      	nop			; (mov r8, r8)
   175c4:	ffffe000 	.word	0xffffe000

000175c8 <__smakebuf_r>:
   175c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   175ca:	2602      	movs	r6, #2
   175cc:	898b      	ldrh	r3, [r1, #12]
   175ce:	0005      	movs	r5, r0
   175d0:	000c      	movs	r4, r1
   175d2:	4233      	tst	r3, r6
   175d4:	d006      	beq.n	175e4 <__smakebuf_r+0x1c>
   175d6:	0023      	movs	r3, r4
   175d8:	3347      	adds	r3, #71	; 0x47
   175da:	6023      	str	r3, [r4, #0]
   175dc:	6123      	str	r3, [r4, #16]
   175de:	2301      	movs	r3, #1
   175e0:	6163      	str	r3, [r4, #20]
   175e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   175e4:	ab01      	add	r3, sp, #4
   175e6:	466a      	mov	r2, sp
   175e8:	f7ff ffc6 	bl	17578 <__swhatbuf_r>
   175ec:	9900      	ldr	r1, [sp, #0]
   175ee:	0007      	movs	r7, r0
   175f0:	0028      	movs	r0, r5
   175f2:	f000 f88d 	bl	17710 <_malloc_r>
   175f6:	2800      	cmp	r0, #0
   175f8:	d108      	bne.n	1760c <__smakebuf_r+0x44>
   175fa:	220c      	movs	r2, #12
   175fc:	5ea3      	ldrsh	r3, [r4, r2]
   175fe:	059a      	lsls	r2, r3, #22
   17600:	d4ef      	bmi.n	175e2 <__smakebuf_r+0x1a>
   17602:	2203      	movs	r2, #3
   17604:	4393      	bics	r3, r2
   17606:	431e      	orrs	r6, r3
   17608:	81a6      	strh	r6, [r4, #12]
   1760a:	e7e4      	b.n	175d6 <__smakebuf_r+0xe>
   1760c:	4b0f      	ldr	r3, [pc, #60]	; (1764c <__smakebuf_r+0x84>)
   1760e:	62ab      	str	r3, [r5, #40]	; 0x28
   17610:	2380      	movs	r3, #128	; 0x80
   17612:	89a2      	ldrh	r2, [r4, #12]
   17614:	6020      	str	r0, [r4, #0]
   17616:	4313      	orrs	r3, r2
   17618:	81a3      	strh	r3, [r4, #12]
   1761a:	9b00      	ldr	r3, [sp, #0]
   1761c:	6120      	str	r0, [r4, #16]
   1761e:	6163      	str	r3, [r4, #20]
   17620:	9b01      	ldr	r3, [sp, #4]
   17622:	2b00      	cmp	r3, #0
   17624:	d00d      	beq.n	17642 <__smakebuf_r+0x7a>
   17626:	230e      	movs	r3, #14
   17628:	5ee1      	ldrsh	r1, [r4, r3]
   1762a:	0028      	movs	r0, r5
   1762c:	f000 f9e4 	bl	179f8 <_isatty_r>
   17630:	2800      	cmp	r0, #0
   17632:	d006      	beq.n	17642 <__smakebuf_r+0x7a>
   17634:	2203      	movs	r2, #3
   17636:	89a3      	ldrh	r3, [r4, #12]
   17638:	4393      	bics	r3, r2
   1763a:	001a      	movs	r2, r3
   1763c:	2301      	movs	r3, #1
   1763e:	4313      	orrs	r3, r2
   17640:	81a3      	strh	r3, [r4, #12]
   17642:	89a0      	ldrh	r0, [r4, #12]
   17644:	4338      	orrs	r0, r7
   17646:	81a0      	strh	r0, [r4, #12]
   17648:	e7cb      	b.n	175e2 <__smakebuf_r+0x1a>
   1764a:	46c0      	nop			; (mov r8, r8)
   1764c:	000173c9 	.word	0x000173c9

00017650 <malloc>:
   17650:	b510      	push	{r4, lr}
   17652:	4b03      	ldr	r3, [pc, #12]	; (17660 <malloc+0x10>)
   17654:	0001      	movs	r1, r0
   17656:	6818      	ldr	r0, [r3, #0]
   17658:	f000 f85a 	bl	17710 <_malloc_r>
   1765c:	bd10      	pop	{r4, pc}
   1765e:	46c0      	nop			; (mov r8, r8)
   17660:	20000028 	.word	0x20000028

00017664 <memchr>:
   17664:	b2c9      	uxtb	r1, r1
   17666:	1882      	adds	r2, r0, r2
   17668:	4290      	cmp	r0, r2
   1766a:	d101      	bne.n	17670 <memchr+0xc>
   1766c:	2000      	movs	r0, #0
   1766e:	4770      	bx	lr
   17670:	7803      	ldrb	r3, [r0, #0]
   17672:	428b      	cmp	r3, r1
   17674:	d0fb      	beq.n	1766e <memchr+0xa>
   17676:	3001      	adds	r0, #1
   17678:	e7f6      	b.n	17668 <memchr+0x4>
   1767a:	Address 0x0001767a is out of bounds.


0001767c <_free_r>:
   1767c:	b570      	push	{r4, r5, r6, lr}
   1767e:	0005      	movs	r5, r0
   17680:	2900      	cmp	r1, #0
   17682:	d010      	beq.n	176a6 <_free_r+0x2a>
   17684:	1f0c      	subs	r4, r1, #4
   17686:	6823      	ldr	r3, [r4, #0]
   17688:	2b00      	cmp	r3, #0
   1768a:	da00      	bge.n	1768e <_free_r+0x12>
   1768c:	18e4      	adds	r4, r4, r3
   1768e:	0028      	movs	r0, r5
   17690:	f000 f9d8 	bl	17a44 <__malloc_lock>
   17694:	4a1d      	ldr	r2, [pc, #116]	; (1770c <_free_r+0x90>)
   17696:	6813      	ldr	r3, [r2, #0]
   17698:	2b00      	cmp	r3, #0
   1769a:	d105      	bne.n	176a8 <_free_r+0x2c>
   1769c:	6063      	str	r3, [r4, #4]
   1769e:	6014      	str	r4, [r2, #0]
   176a0:	0028      	movs	r0, r5
   176a2:	f000 f9d0 	bl	17a46 <__malloc_unlock>
   176a6:	bd70      	pop	{r4, r5, r6, pc}
   176a8:	42a3      	cmp	r3, r4
   176aa:	d909      	bls.n	176c0 <_free_r+0x44>
   176ac:	6821      	ldr	r1, [r4, #0]
   176ae:	1860      	adds	r0, r4, r1
   176b0:	4283      	cmp	r3, r0
   176b2:	d1f3      	bne.n	1769c <_free_r+0x20>
   176b4:	6818      	ldr	r0, [r3, #0]
   176b6:	685b      	ldr	r3, [r3, #4]
   176b8:	1841      	adds	r1, r0, r1
   176ba:	6021      	str	r1, [r4, #0]
   176bc:	e7ee      	b.n	1769c <_free_r+0x20>
   176be:	0013      	movs	r3, r2
   176c0:	685a      	ldr	r2, [r3, #4]
   176c2:	2a00      	cmp	r2, #0
   176c4:	d001      	beq.n	176ca <_free_r+0x4e>
   176c6:	42a2      	cmp	r2, r4
   176c8:	d9f9      	bls.n	176be <_free_r+0x42>
   176ca:	6819      	ldr	r1, [r3, #0]
   176cc:	1858      	adds	r0, r3, r1
   176ce:	42a0      	cmp	r0, r4
   176d0:	d10b      	bne.n	176ea <_free_r+0x6e>
   176d2:	6820      	ldr	r0, [r4, #0]
   176d4:	1809      	adds	r1, r1, r0
   176d6:	1858      	adds	r0, r3, r1
   176d8:	6019      	str	r1, [r3, #0]
   176da:	4282      	cmp	r2, r0
   176dc:	d1e0      	bne.n	176a0 <_free_r+0x24>
   176de:	6810      	ldr	r0, [r2, #0]
   176e0:	6852      	ldr	r2, [r2, #4]
   176e2:	1841      	adds	r1, r0, r1
   176e4:	6019      	str	r1, [r3, #0]
   176e6:	605a      	str	r2, [r3, #4]
   176e8:	e7da      	b.n	176a0 <_free_r+0x24>
   176ea:	42a0      	cmp	r0, r4
   176ec:	d902      	bls.n	176f4 <_free_r+0x78>
   176ee:	230c      	movs	r3, #12
   176f0:	602b      	str	r3, [r5, #0]
   176f2:	e7d5      	b.n	176a0 <_free_r+0x24>
   176f4:	6821      	ldr	r1, [r4, #0]
   176f6:	1860      	adds	r0, r4, r1
   176f8:	4282      	cmp	r2, r0
   176fa:	d103      	bne.n	17704 <_free_r+0x88>
   176fc:	6810      	ldr	r0, [r2, #0]
   176fe:	6852      	ldr	r2, [r2, #4]
   17700:	1841      	adds	r1, r0, r1
   17702:	6021      	str	r1, [r4, #0]
   17704:	6062      	str	r2, [r4, #4]
   17706:	605c      	str	r4, [r3, #4]
   17708:	e7ca      	b.n	176a0 <_free_r+0x24>
   1770a:	46c0      	nop			; (mov r8, r8)
   1770c:	20001edc 	.word	0x20001edc

00017710 <_malloc_r>:
   17710:	2303      	movs	r3, #3
   17712:	b570      	push	{r4, r5, r6, lr}
   17714:	1ccd      	adds	r5, r1, #3
   17716:	439d      	bics	r5, r3
   17718:	3508      	adds	r5, #8
   1771a:	0006      	movs	r6, r0
   1771c:	2d0c      	cmp	r5, #12
   1771e:	d21e      	bcs.n	1775e <_malloc_r+0x4e>
   17720:	250c      	movs	r5, #12
   17722:	42a9      	cmp	r1, r5
   17724:	d81d      	bhi.n	17762 <_malloc_r+0x52>
   17726:	0030      	movs	r0, r6
   17728:	f000 f98c 	bl	17a44 <__malloc_lock>
   1772c:	4a25      	ldr	r2, [pc, #148]	; (177c4 <_malloc_r+0xb4>)
   1772e:	6814      	ldr	r4, [r2, #0]
   17730:	0021      	movs	r1, r4
   17732:	2900      	cmp	r1, #0
   17734:	d119      	bne.n	1776a <_malloc_r+0x5a>
   17736:	4c24      	ldr	r4, [pc, #144]	; (177c8 <_malloc_r+0xb8>)
   17738:	6823      	ldr	r3, [r4, #0]
   1773a:	2b00      	cmp	r3, #0
   1773c:	d103      	bne.n	17746 <_malloc_r+0x36>
   1773e:	0030      	movs	r0, r6
   17740:	f000 f87a 	bl	17838 <_sbrk_r>
   17744:	6020      	str	r0, [r4, #0]
   17746:	0029      	movs	r1, r5
   17748:	0030      	movs	r0, r6
   1774a:	f000 f875 	bl	17838 <_sbrk_r>
   1774e:	1c43      	adds	r3, r0, #1
   17750:	d12c      	bne.n	177ac <_malloc_r+0x9c>
   17752:	230c      	movs	r3, #12
   17754:	0030      	movs	r0, r6
   17756:	6033      	str	r3, [r6, #0]
   17758:	f000 f975 	bl	17a46 <__malloc_unlock>
   1775c:	e003      	b.n	17766 <_malloc_r+0x56>
   1775e:	2d00      	cmp	r5, #0
   17760:	dadf      	bge.n	17722 <_malloc_r+0x12>
   17762:	230c      	movs	r3, #12
   17764:	6033      	str	r3, [r6, #0]
   17766:	2000      	movs	r0, #0
   17768:	bd70      	pop	{r4, r5, r6, pc}
   1776a:	680b      	ldr	r3, [r1, #0]
   1776c:	1b5b      	subs	r3, r3, r5
   1776e:	d41a      	bmi.n	177a6 <_malloc_r+0x96>
   17770:	2b0b      	cmp	r3, #11
   17772:	d903      	bls.n	1777c <_malloc_r+0x6c>
   17774:	600b      	str	r3, [r1, #0]
   17776:	18cc      	adds	r4, r1, r3
   17778:	6025      	str	r5, [r4, #0]
   1777a:	e003      	b.n	17784 <_malloc_r+0x74>
   1777c:	428c      	cmp	r4, r1
   1777e:	d10e      	bne.n	1779e <_malloc_r+0x8e>
   17780:	6863      	ldr	r3, [r4, #4]
   17782:	6013      	str	r3, [r2, #0]
   17784:	0030      	movs	r0, r6
   17786:	f000 f95e 	bl	17a46 <__malloc_unlock>
   1778a:	0020      	movs	r0, r4
   1778c:	2207      	movs	r2, #7
   1778e:	300b      	adds	r0, #11
   17790:	1d23      	adds	r3, r4, #4
   17792:	4390      	bics	r0, r2
   17794:	1ac3      	subs	r3, r0, r3
   17796:	d0e7      	beq.n	17768 <_malloc_r+0x58>
   17798:	425a      	negs	r2, r3
   1779a:	50e2      	str	r2, [r4, r3]
   1779c:	e7e4      	b.n	17768 <_malloc_r+0x58>
   1779e:	684b      	ldr	r3, [r1, #4]
   177a0:	6063      	str	r3, [r4, #4]
   177a2:	000c      	movs	r4, r1
   177a4:	e7ee      	b.n	17784 <_malloc_r+0x74>
   177a6:	000c      	movs	r4, r1
   177a8:	6849      	ldr	r1, [r1, #4]
   177aa:	e7c2      	b.n	17732 <_malloc_r+0x22>
   177ac:	2303      	movs	r3, #3
   177ae:	1cc4      	adds	r4, r0, #3
   177b0:	439c      	bics	r4, r3
   177b2:	42a0      	cmp	r0, r4
   177b4:	d0e0      	beq.n	17778 <_malloc_r+0x68>
   177b6:	1a21      	subs	r1, r4, r0
   177b8:	0030      	movs	r0, r6
   177ba:	f000 f83d 	bl	17838 <_sbrk_r>
   177be:	1c43      	adds	r3, r0, #1
   177c0:	d1da      	bne.n	17778 <_malloc_r+0x68>
   177c2:	e7c6      	b.n	17752 <_malloc_r+0x42>
   177c4:	20001edc 	.word	0x20001edc
   177c8:	20001ee0 	.word	0x20001ee0

000177cc <_putc_r>:
   177cc:	b570      	push	{r4, r5, r6, lr}
   177ce:	0006      	movs	r6, r0
   177d0:	000d      	movs	r5, r1
   177d2:	0014      	movs	r4, r2
   177d4:	2800      	cmp	r0, #0
   177d6:	d004      	beq.n	177e2 <_putc_r+0x16>
   177d8:	6983      	ldr	r3, [r0, #24]
   177da:	2b00      	cmp	r3, #0
   177dc:	d101      	bne.n	177e2 <_putc_r+0x16>
   177de:	f7ff fe35 	bl	1744c <__sinit>
   177e2:	4b12      	ldr	r3, [pc, #72]	; (1782c <_putc_r+0x60>)
   177e4:	429c      	cmp	r4, r3
   177e6:	d111      	bne.n	1780c <_putc_r+0x40>
   177e8:	6874      	ldr	r4, [r6, #4]
   177ea:	68a3      	ldr	r3, [r4, #8]
   177ec:	3b01      	subs	r3, #1
   177ee:	60a3      	str	r3, [r4, #8]
   177f0:	2b00      	cmp	r3, #0
   177f2:	da05      	bge.n	17800 <_putc_r+0x34>
   177f4:	69a2      	ldr	r2, [r4, #24]
   177f6:	4293      	cmp	r3, r2
   177f8:	db12      	blt.n	17820 <_putc_r+0x54>
   177fa:	b2eb      	uxtb	r3, r5
   177fc:	2b0a      	cmp	r3, #10
   177fe:	d00f      	beq.n	17820 <_putc_r+0x54>
   17800:	6823      	ldr	r3, [r4, #0]
   17802:	b2e8      	uxtb	r0, r5
   17804:	1c5a      	adds	r2, r3, #1
   17806:	6022      	str	r2, [r4, #0]
   17808:	701d      	strb	r5, [r3, #0]
   1780a:	bd70      	pop	{r4, r5, r6, pc}
   1780c:	4b08      	ldr	r3, [pc, #32]	; (17830 <_putc_r+0x64>)
   1780e:	429c      	cmp	r4, r3
   17810:	d101      	bne.n	17816 <_putc_r+0x4a>
   17812:	68b4      	ldr	r4, [r6, #8]
   17814:	e7e9      	b.n	177ea <_putc_r+0x1e>
   17816:	4b07      	ldr	r3, [pc, #28]	; (17834 <_putc_r+0x68>)
   17818:	429c      	cmp	r4, r3
   1781a:	d1e6      	bne.n	177ea <_putc_r+0x1e>
   1781c:	68f4      	ldr	r4, [r6, #12]
   1781e:	e7e4      	b.n	177ea <_putc_r+0x1e>
   17820:	0022      	movs	r2, r4
   17822:	0029      	movs	r1, r5
   17824:	0030      	movs	r0, r6
   17826:	f7ff fc45 	bl	170b4 <__swbuf_r>
   1782a:	e7ee      	b.n	1780a <_putc_r+0x3e>
   1782c:	00018d48 	.word	0x00018d48
   17830:	00018d68 	.word	0x00018d68
   17834:	00018d28 	.word	0x00018d28

00017838 <_sbrk_r>:
   17838:	2300      	movs	r3, #0
   1783a:	b570      	push	{r4, r5, r6, lr}
   1783c:	4c06      	ldr	r4, [pc, #24]	; (17858 <_sbrk_r+0x20>)
   1783e:	0005      	movs	r5, r0
   17840:	0008      	movs	r0, r1
   17842:	6023      	str	r3, [r4, #0]
   17844:	f7ef fcb6 	bl	71b4 <_sbrk>
   17848:	1c43      	adds	r3, r0, #1
   1784a:	d103      	bne.n	17854 <_sbrk_r+0x1c>
   1784c:	6823      	ldr	r3, [r4, #0]
   1784e:	2b00      	cmp	r3, #0
   17850:	d000      	beq.n	17854 <_sbrk_r+0x1c>
   17852:	602b      	str	r3, [r5, #0]
   17854:	bd70      	pop	{r4, r5, r6, pc}
   17856:	46c0      	nop			; (mov r8, r8)
   17858:	200034d8 	.word	0x200034d8

0001785c <_raise_r>:
   1785c:	b570      	push	{r4, r5, r6, lr}
   1785e:	0004      	movs	r4, r0
   17860:	000d      	movs	r5, r1
   17862:	291f      	cmp	r1, #31
   17864:	d904      	bls.n	17870 <_raise_r+0x14>
   17866:	2316      	movs	r3, #22
   17868:	6003      	str	r3, [r0, #0]
   1786a:	2001      	movs	r0, #1
   1786c:	4240      	negs	r0, r0
   1786e:	bd70      	pop	{r4, r5, r6, pc}
   17870:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17872:	2b00      	cmp	r3, #0
   17874:	d004      	beq.n	17880 <_raise_r+0x24>
   17876:	008a      	lsls	r2, r1, #2
   17878:	189b      	adds	r3, r3, r2
   1787a:	681a      	ldr	r2, [r3, #0]
   1787c:	2a00      	cmp	r2, #0
   1787e:	d108      	bne.n	17892 <_raise_r+0x36>
   17880:	0020      	movs	r0, r4
   17882:	f000 f831 	bl	178e8 <_getpid_r>
   17886:	002a      	movs	r2, r5
   17888:	0001      	movs	r1, r0
   1788a:	0020      	movs	r0, r4
   1788c:	f000 f81a 	bl	178c4 <_kill_r>
   17890:	e7ed      	b.n	1786e <_raise_r+0x12>
   17892:	2000      	movs	r0, #0
   17894:	2a01      	cmp	r2, #1
   17896:	d0ea      	beq.n	1786e <_raise_r+0x12>
   17898:	1c51      	adds	r1, r2, #1
   1789a:	d103      	bne.n	178a4 <_raise_r+0x48>
   1789c:	2316      	movs	r3, #22
   1789e:	3001      	adds	r0, #1
   178a0:	6023      	str	r3, [r4, #0]
   178a2:	e7e4      	b.n	1786e <_raise_r+0x12>
   178a4:	2400      	movs	r4, #0
   178a6:	0028      	movs	r0, r5
   178a8:	601c      	str	r4, [r3, #0]
   178aa:	4790      	blx	r2
   178ac:	0020      	movs	r0, r4
   178ae:	e7de      	b.n	1786e <_raise_r+0x12>

000178b0 <raise>:
   178b0:	b510      	push	{r4, lr}
   178b2:	4b03      	ldr	r3, [pc, #12]	; (178c0 <raise+0x10>)
   178b4:	0001      	movs	r1, r0
   178b6:	6818      	ldr	r0, [r3, #0]
   178b8:	f7ff ffd0 	bl	1785c <_raise_r>
   178bc:	bd10      	pop	{r4, pc}
   178be:	46c0      	nop			; (mov r8, r8)
   178c0:	20000028 	.word	0x20000028

000178c4 <_kill_r>:
   178c4:	2300      	movs	r3, #0
   178c6:	b570      	push	{r4, r5, r6, lr}
   178c8:	4c06      	ldr	r4, [pc, #24]	; (178e4 <_kill_r+0x20>)
   178ca:	0005      	movs	r5, r0
   178cc:	0008      	movs	r0, r1
   178ce:	0011      	movs	r1, r2
   178d0:	6023      	str	r3, [r4, #0]
   178d2:	f7ef fc8f 	bl	71f4 <_kill>
   178d6:	1c43      	adds	r3, r0, #1
   178d8:	d103      	bne.n	178e2 <_kill_r+0x1e>
   178da:	6823      	ldr	r3, [r4, #0]
   178dc:	2b00      	cmp	r3, #0
   178de:	d000      	beq.n	178e2 <_kill_r+0x1e>
   178e0:	602b      	str	r3, [r5, #0]
   178e2:	bd70      	pop	{r4, r5, r6, pc}
   178e4:	200034d8 	.word	0x200034d8

000178e8 <_getpid_r>:
   178e8:	b510      	push	{r4, lr}
   178ea:	f7ef fc84 	bl	71f6 <_getpid>
   178ee:	bd10      	pop	{r4, pc}

000178f0 <__sread>:
   178f0:	b570      	push	{r4, r5, r6, lr}
   178f2:	000c      	movs	r4, r1
   178f4:	250e      	movs	r5, #14
   178f6:	5f49      	ldrsh	r1, [r1, r5]
   178f8:	f000 f8a6 	bl	17a48 <_read_r>
   178fc:	2800      	cmp	r0, #0
   178fe:	db03      	blt.n	17908 <__sread+0x18>
   17900:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17902:	181b      	adds	r3, r3, r0
   17904:	6563      	str	r3, [r4, #84]	; 0x54
   17906:	bd70      	pop	{r4, r5, r6, pc}
   17908:	89a3      	ldrh	r3, [r4, #12]
   1790a:	4a02      	ldr	r2, [pc, #8]	; (17914 <__sread+0x24>)
   1790c:	4013      	ands	r3, r2
   1790e:	81a3      	strh	r3, [r4, #12]
   17910:	e7f9      	b.n	17906 <__sread+0x16>
   17912:	46c0      	nop			; (mov r8, r8)
   17914:	ffffefff 	.word	0xffffefff

00017918 <__swrite>:
   17918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1791a:	001f      	movs	r7, r3
   1791c:	898b      	ldrh	r3, [r1, #12]
   1791e:	0005      	movs	r5, r0
   17920:	000c      	movs	r4, r1
   17922:	0016      	movs	r6, r2
   17924:	05db      	lsls	r3, r3, #23
   17926:	d505      	bpl.n	17934 <__swrite+0x1c>
   17928:	230e      	movs	r3, #14
   1792a:	5ec9      	ldrsh	r1, [r1, r3]
   1792c:	2200      	movs	r2, #0
   1792e:	2302      	movs	r3, #2
   17930:	f000 f874 	bl	17a1c <_lseek_r>
   17934:	89a3      	ldrh	r3, [r4, #12]
   17936:	4a05      	ldr	r2, [pc, #20]	; (1794c <__swrite+0x34>)
   17938:	0028      	movs	r0, r5
   1793a:	4013      	ands	r3, r2
   1793c:	81a3      	strh	r3, [r4, #12]
   1793e:	0032      	movs	r2, r6
   17940:	230e      	movs	r3, #14
   17942:	5ee1      	ldrsh	r1, [r4, r3]
   17944:	003b      	movs	r3, r7
   17946:	f000 f81f 	bl	17988 <_write_r>
   1794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1794c:	ffffefff 	.word	0xffffefff

00017950 <__sseek>:
   17950:	b570      	push	{r4, r5, r6, lr}
   17952:	000c      	movs	r4, r1
   17954:	250e      	movs	r5, #14
   17956:	5f49      	ldrsh	r1, [r1, r5]
   17958:	f000 f860 	bl	17a1c <_lseek_r>
   1795c:	89a3      	ldrh	r3, [r4, #12]
   1795e:	1c42      	adds	r2, r0, #1
   17960:	d103      	bne.n	1796a <__sseek+0x1a>
   17962:	4a05      	ldr	r2, [pc, #20]	; (17978 <__sseek+0x28>)
   17964:	4013      	ands	r3, r2
   17966:	81a3      	strh	r3, [r4, #12]
   17968:	bd70      	pop	{r4, r5, r6, pc}
   1796a:	2280      	movs	r2, #128	; 0x80
   1796c:	0152      	lsls	r2, r2, #5
   1796e:	4313      	orrs	r3, r2
   17970:	81a3      	strh	r3, [r4, #12]
   17972:	6560      	str	r0, [r4, #84]	; 0x54
   17974:	e7f8      	b.n	17968 <__sseek+0x18>
   17976:	46c0      	nop			; (mov r8, r8)
   17978:	ffffefff 	.word	0xffffefff

0001797c <__sclose>:
   1797c:	b510      	push	{r4, lr}
   1797e:	230e      	movs	r3, #14
   17980:	5ec9      	ldrsh	r1, [r1, r3]
   17982:	f000 f815 	bl	179b0 <_close_r>
   17986:	bd10      	pop	{r4, pc}

00017988 <_write_r>:
   17988:	b570      	push	{r4, r5, r6, lr}
   1798a:	0005      	movs	r5, r0
   1798c:	0008      	movs	r0, r1
   1798e:	0011      	movs	r1, r2
   17990:	2200      	movs	r2, #0
   17992:	4c06      	ldr	r4, [pc, #24]	; (179ac <_write_r+0x24>)
   17994:	6022      	str	r2, [r4, #0]
   17996:	001a      	movs	r2, r3
   17998:	f7ef fbe4 	bl	7164 <_write>
   1799c:	1c43      	adds	r3, r0, #1
   1799e:	d103      	bne.n	179a8 <_write_r+0x20>
   179a0:	6823      	ldr	r3, [r4, #0]
   179a2:	2b00      	cmp	r3, #0
   179a4:	d000      	beq.n	179a8 <_write_r+0x20>
   179a6:	602b      	str	r3, [r5, #0]
   179a8:	bd70      	pop	{r4, r5, r6, pc}
   179aa:	46c0      	nop			; (mov r8, r8)
   179ac:	200034d8 	.word	0x200034d8

000179b0 <_close_r>:
   179b0:	2300      	movs	r3, #0
   179b2:	b570      	push	{r4, r5, r6, lr}
   179b4:	4c06      	ldr	r4, [pc, #24]	; (179d0 <_close_r+0x20>)
   179b6:	0005      	movs	r5, r0
   179b8:	0008      	movs	r0, r1
   179ba:	6023      	str	r3, [r4, #0]
   179bc:	f7ef fc0c 	bl	71d8 <_close>
   179c0:	1c43      	adds	r3, r0, #1
   179c2:	d103      	bne.n	179cc <_close_r+0x1c>
   179c4:	6823      	ldr	r3, [r4, #0]
   179c6:	2b00      	cmp	r3, #0
   179c8:	d000      	beq.n	179cc <_close_r+0x1c>
   179ca:	602b      	str	r3, [r5, #0]
   179cc:	bd70      	pop	{r4, r5, r6, pc}
   179ce:	46c0      	nop			; (mov r8, r8)
   179d0:	200034d8 	.word	0x200034d8

000179d4 <_fstat_r>:
   179d4:	2300      	movs	r3, #0
   179d6:	b570      	push	{r4, r5, r6, lr}
   179d8:	4c06      	ldr	r4, [pc, #24]	; (179f4 <_fstat_r+0x20>)
   179da:	0005      	movs	r5, r0
   179dc:	0008      	movs	r0, r1
   179de:	0011      	movs	r1, r2
   179e0:	6023      	str	r3, [r4, #0]
   179e2:	f7ef fbfc 	bl	71de <_fstat>
   179e6:	1c43      	adds	r3, r0, #1
   179e8:	d103      	bne.n	179f2 <_fstat_r+0x1e>
   179ea:	6823      	ldr	r3, [r4, #0]
   179ec:	2b00      	cmp	r3, #0
   179ee:	d000      	beq.n	179f2 <_fstat_r+0x1e>
   179f0:	602b      	str	r3, [r5, #0]
   179f2:	bd70      	pop	{r4, r5, r6, pc}
   179f4:	200034d8 	.word	0x200034d8

000179f8 <_isatty_r>:
   179f8:	2300      	movs	r3, #0
   179fa:	b570      	push	{r4, r5, r6, lr}
   179fc:	4c06      	ldr	r4, [pc, #24]	; (17a18 <_isatty_r+0x20>)
   179fe:	0005      	movs	r5, r0
   17a00:	0008      	movs	r0, r1
   17a02:	6023      	str	r3, [r4, #0]
   17a04:	f7ef fbf0 	bl	71e8 <_isatty>
   17a08:	1c43      	adds	r3, r0, #1
   17a0a:	d103      	bne.n	17a14 <_isatty_r+0x1c>
   17a0c:	6823      	ldr	r3, [r4, #0]
   17a0e:	2b00      	cmp	r3, #0
   17a10:	d000      	beq.n	17a14 <_isatty_r+0x1c>
   17a12:	602b      	str	r3, [r5, #0]
   17a14:	bd70      	pop	{r4, r5, r6, pc}
   17a16:	46c0      	nop			; (mov r8, r8)
   17a18:	200034d8 	.word	0x200034d8

00017a1c <_lseek_r>:
   17a1c:	b570      	push	{r4, r5, r6, lr}
   17a1e:	0005      	movs	r5, r0
   17a20:	0008      	movs	r0, r1
   17a22:	0011      	movs	r1, r2
   17a24:	2200      	movs	r2, #0
   17a26:	4c06      	ldr	r4, [pc, #24]	; (17a40 <_lseek_r+0x24>)
   17a28:	6022      	str	r2, [r4, #0]
   17a2a:	001a      	movs	r2, r3
   17a2c:	f7ef fbde 	bl	71ec <_lseek>
   17a30:	1c43      	adds	r3, r0, #1
   17a32:	d103      	bne.n	17a3c <_lseek_r+0x20>
   17a34:	6823      	ldr	r3, [r4, #0]
   17a36:	2b00      	cmp	r3, #0
   17a38:	d000      	beq.n	17a3c <_lseek_r+0x20>
   17a3a:	602b      	str	r3, [r5, #0]
   17a3c:	bd70      	pop	{r4, r5, r6, pc}
   17a3e:	46c0      	nop			; (mov r8, r8)
   17a40:	200034d8 	.word	0x200034d8

00017a44 <__malloc_lock>:
   17a44:	4770      	bx	lr

00017a46 <__malloc_unlock>:
   17a46:	4770      	bx	lr

00017a48 <_read_r>:
   17a48:	b570      	push	{r4, r5, r6, lr}
   17a4a:	0005      	movs	r5, r0
   17a4c:	0008      	movs	r0, r1
   17a4e:	0011      	movs	r1, r2
   17a50:	2200      	movs	r2, #0
   17a52:	4c06      	ldr	r4, [pc, #24]	; (17a6c <_read_r+0x24>)
   17a54:	6022      	str	r2, [r4, #0]
   17a56:	001a      	movs	r2, r3
   17a58:	f7ef fb62 	bl	7120 <_read>
   17a5c:	1c43      	adds	r3, r0, #1
   17a5e:	d103      	bne.n	17a68 <_read_r+0x20>
   17a60:	6823      	ldr	r3, [r4, #0]
   17a62:	2b00      	cmp	r3, #0
   17a64:	d000      	beq.n	17a68 <_read_r+0x20>
   17a66:	602b      	str	r3, [r5, #0]
   17a68:	bd70      	pop	{r4, r5, r6, pc}
   17a6a:	46c0      	nop			; (mov r8, r8)
   17a6c:	200034d8 	.word	0x200034d8
   17a70:	00004b1e 	.word	0x00004b1e
   17a74:	00004b1e 	.word	0x00004b1e
   17a78:	00004afa 	.word	0x00004afa
   17a7c:	00004b1e 	.word	0x00004b1e
   17a80:	00004afa 	.word	0x00004afa
   17a84:	00004ae0 	.word	0x00004ae0
   17a88:	00004ae0 	.word	0x00004ae0
   17a8c:	00004b1e 	.word	0x00004b1e
   17a90:	00004b1e 	.word	0x00004b1e
   17a94:	00004b1e 	.word	0x00004b1e
   17a98:	00004b1e 	.word	0x00004b1e
   17a9c:	00004b1e 	.word	0x00004b1e
   17aa0:	00004b1e 	.word	0x00004b1e
   17aa4:	00004b1e 	.word	0x00004b1e
   17aa8:	00004b1e 	.word	0x00004b1e
   17aac:	00004b1e 	.word	0x00004b1e
   17ab0:	00004b1e 	.word	0x00004b1e
   17ab4:	00004b1e 	.word	0x00004b1e
   17ab8:	00004b1e 	.word	0x00004b1e
   17abc:	00004b1e 	.word	0x00004b1e
   17ac0:	00004b1e 	.word	0x00004b1e
   17ac4:	00004b1e 	.word	0x00004b1e
   17ac8:	00004b1e 	.word	0x00004b1e
   17acc:	00004b1e 	.word	0x00004b1e
   17ad0:	00004b1e 	.word	0x00004b1e
   17ad4:	00004b1e 	.word	0x00004b1e
   17ad8:	00004afa 	.word	0x00004afa
   17adc:	00004b1e 	.word	0x00004b1e
   17ae0:	00004afa 	.word	0x00004afa
   17ae4:	00004b1e 	.word	0x00004b1e
   17ae8:	00004b1e 	.word	0x00004b1e
   17aec:	00004b1e 	.word	0x00004b1e
   17af0:	00004b1e 	.word	0x00004b1e
   17af4:	00004b1e 	.word	0x00004b1e
   17af8:	00004b1e 	.word	0x00004b1e
   17afc:	00004b1e 	.word	0x00004b1e
   17b00:	00004b1e 	.word	0x00004b1e
   17b04:	00004b1e 	.word	0x00004b1e
   17b08:	00004b1e 	.word	0x00004b1e
   17b0c:	00004b1e 	.word	0x00004b1e
   17b10:	00004b1e 	.word	0x00004b1e
   17b14:	00004b1e 	.word	0x00004b1e
   17b18:	00004b1e 	.word	0x00004b1e
   17b1c:	00004b1e 	.word	0x00004b1e
   17b20:	00004b1e 	.word	0x00004b1e
   17b24:	00004b1e 	.word	0x00004b1e
>>>>>>> Stashed changes
   17b28:	00004b1e 	.word	0x00004b1e
   17b2c:	00004afa 	.word	0x00004afa
   17b30:	00004ae0 	.word	0x00004ae0
   17b34:	00004ae0 	.word	0x00004ae0
   17b38:	00004b1e 	.word	0x00004b1e
   17b3c:	00004b1e 	.word	0x00004b1e
   17b40:	00004b1e 	.word	0x00004b1e
   17b44:	00004b1e 	.word	0x00004b1e
   17b48:	00004b1e 	.word	0x00004b1e
   17b4c:	00004b1e 	.word	0x00004b1e
   17b50:	00004b1e 	.word	0x00004b1e
   17b54:	00004b1e 	.word	0x00004b1e
   17b58:	00004b1e 	.word	0x00004b1e
   17b5c:	00004b1e 	.word	0x00004b1e
   17b60:	00004b1e 	.word	0x00004b1e
   17b64:	00004b1e 	.word	0x00004b1e
   17b68:	00004b1e 	.word	0x00004b1e
   17b6c:	00004b1e 	.word	0x00004b1e
<<<<<<< Updated upstream
   17b70:	00004b1e 	.word	0x00004b1e
   17b74:	00004b1e 	.word	0x00004b1e
   17b78:	00004b1e 	.word	0x00004b1e
   17b7c:	00004b1e 	.word	0x00004b1e
   17b80:	00004b1e 	.word	0x00004b1e
   17b84:	00004afa 	.word	0x00004afa
   17b88:	00004b1e 	.word	0x00004b1e
   17b8c:	00004afa 	.word	0x00004afa
   17b90:	00004b1e 	.word	0x00004b1e
   17b94:	00004b1e 	.word	0x00004b1e
   17b98:	00004b1e 	.word	0x00004b1e
   17b9c:	00004b1e 	.word	0x00004b1e
   17ba0:	00004b1e 	.word	0x00004b1e
   17ba4:	00004b1e 	.word	0x00004b1e
   17ba8:	00004b1e 	.word	0x00004b1e
   17bac:	00004b1e 	.word	0x00004b1e
   17bb0:	00004b1e 	.word	0x00004b1e
   17bb4:	00004b1e 	.word	0x00004b1e
   17bb8:	00004b1e 	.word	0x00004b1e
   17bbc:	00004b1e 	.word	0x00004b1e
   17bc0:	00004b1e 	.word	0x00004b1e
   17bc4:	00004b1e 	.word	0x00004b1e
   17bc8:	00004b1e 	.word	0x00004b1e
   17bcc:	00004b1e 	.word	0x00004b1e
   17bd0:	00004b1e 	.word	0x00004b1e
   17bd4:	00004b1e 	.word	0x00004b1e
   17bd8:	00004b1e 	.word	0x00004b1e
   17bdc:	00004b1e 	.word	0x00004b1e
   17be0:	00004b1e 	.word	0x00004b1e
   17be4:	00004b1e 	.word	0x00004b1e
   17be8:	00004b1e 	.word	0x00004b1e
   17bec:	00004b1e 	.word	0x00004b1e
   17bf0:	00004b1e 	.word	0x00004b1e
   17bf4:	00004b1e 	.word	0x00004b1e
   17bf8:	00004b1e 	.word	0x00004b1e
   17bfc:	00004b1e 	.word	0x00004b1e
   17c00:	00004b1e 	.word	0x00004b1e
   17c04:	00004b1e 	.word	0x00004b1e
   17c08:	00004b1e 	.word	0x00004b1e
   17c0c:	00004b1e 	.word	0x00004b1e
   17c10:	00004b1e 	.word	0x00004b1e
   17c14:	00004b1e 	.word	0x00004b1e
   17c18:	00004b1e 	.word	0x00004b1e
   17c1c:	00004afa 	.word	0x00004afa
   17c20:	00004afa 	.word	0x00004afa
   17c24:	00004b02 	.word	0x00004b02
   17c28:	00004b02 	.word	0x00004b02
   17c2c:	00004b02 	.word	0x00004b02
   17c30:	00004b02 	.word	0x00004b02
   17c34:	42000000 	.word	0x42000000
   17c38:	42000400 	.word	0x42000400
   17c3c:	42000800 	.word	0x42000800
   17c40:	42000c00 	.word	0x42000c00
   17c44:	42001000 	.word	0x42001000
   17c48:	43000400 	.word	0x43000400
   17c4c:	00006442 	.word	0x00006442
   17c50:	0000643e 	.word	0x0000643e
   17c54:	0000643e 	.word	0x0000643e
   17c58:	000064a4 	.word	0x000064a4
   17c5c:	000064a4 	.word	0x000064a4
   17c60:	00006458 	.word	0x00006458
   17c64:	00006448 	.word	0x00006448
   17c68:	0000645e 	.word	0x0000645e
   17c6c:	00006492 	.word	0x00006492
   17c70:	000065c0 	.word	0x000065c0
   17c74:	000065a0 	.word	0x000065a0
   17c78:	000065a0 	.word	0x000065a0
   17c7c:	0000663a 	.word	0x0000663a
   17c80:	000065b2 	.word	0x000065b2
   17c84:	000065ce 	.word	0x000065ce
   17c88:	000065a4 	.word	0x000065a4
   17c8c:	000065dc 	.word	0x000065dc
   17c90:	0000661e 	.word	0x0000661e
   17c94:	00006678 	.word	0x00006678
   17c98:	000066ba 	.word	0x000066ba
   17c9c:	000066ba 	.word	0x000066ba
   17ca0:	000066ba 	.word	0x000066ba
   17ca4:	0000666a 	.word	0x0000666a
   17ca8:	00006686 	.word	0x00006686
   17cac:	0000665c 	.word	0x0000665c
   17cb0:	00006694 	.word	0x00006694
   17cb4:	000066aa 	.word	0x000066aa
   17cb8:	00006db6 	.word	0x00006db6
   17cbc:	00006eac 	.word	0x00006eac
   17cc0:	00006eb6 	.word	0x00006eb6
   17cc4:	00006ec0 	.word	0x00006ec0
   17cc8:	00006eca 	.word	0x00006eca
   17ccc:	00006efc 	.word	0x00006efc
   17cd0:	00006f06 	.word	0x00006f06
   17cd4:	00006f10 	.word	0x00006f10
   17cd8:	00006f1a 	.word	0x00006f1a
   17cdc:	00006f24 	.word	0x00006f24
   17ce0:	42002000 	.word	0x42002000
   17ce4:	42002400 	.word	0x42002400
   17ce8:	42002800 	.word	0x42002800
   17cec:	42002c00 	.word	0x42002c00
   17cf0:	43000800 	.word	0x43000800
   17cf4:	00000002 	.word	0x00000002
   17cf8:	00000100 	.word	0x00000100
   17cfc:	00000002 	.word	0x00000002
   17d00:	00000200 	.word	0x00000200
   17d04:	00000002 	.word	0x00000002
   17d08:	00000400 	.word	0x00000400
   17d0c:	00000002 	.word	0x00000002
   17d10:	00000800 	.word	0x00000800
   17d14:	00000003 	.word	0x00000003
   17d18:	00000004 	.word	0x00000004
   17d1c:	72420a0d 	.word	0x72420a0d
   17d20:	6364616f 	.word	0x6364616f
   17d24:	20747361 	.word	0x20747361
   17d28:	6c696146 	.word	0x6c696146
   17d2c:	000d6465 	.word	0x000d6465
   17d30:	6f430a0d 	.word	0x6f430a0d
   17d34:	63656e6e 	.word	0x63656e6e
   17d38:	676e6974 	.word	0x676e6974
   17d3c:	65655020 	.word	0x65655020
   17d40:	6e6f2072 	.word	0x6e6f2072
   17d44:	61684320 	.word	0x61684320
   17d48:	6c656e6e 	.word	0x6c656e6e
   17d4c:	00000020 	.word	0x00000020
   17d50:	00006425 	.word	0x00006425
   17d54:	6f430a0d 	.word	0x6f430a0d
   17d58:	63656e6e 	.word	0x63656e6e
   17d5c:	20646574 	.word	0x20646574
   17d60:	72656550 	.word	0x72656550
   17d64:	206e6f20 	.word	0x206e6f20
   17d68:	6e616843 	.word	0x6e616843
   17d6c:	206c656e 	.word	0x206c656e
   17d70:	ffffff00 	.word	0xffffff00
   17d74:	65530a0d 	.word	0x65530a0d
   17d78:	7463656c 	.word	0x7463656c
   17d7c:	206e6f69 	.word	0x206e6f69
   17d80:	6320666f 	.word	0x6320666f
   17d84:	6e6e6168 	.word	0x6e6e6168
   17d88:	00206c65 	.word	0x00206c65
   17d8c:	20736920 	.word	0x20736920
   17d90:	20746f6e 	.word	0x20746f6e
   17d94:	70707573 	.word	0x70707573
   17d98:	6574726f 	.word	0x6574726f
   17d9c:	6e692064 	.word	0x6e692064
   17da0:	72756320 	.word	0x72756320
   17da4:	746e6572 	.word	0x746e6572
   17da8:	6e6f6320 	.word	0x6e6f6320
   17dac:	75676966 	.word	0x75676966
   17db0:	69746172 	.word	0x69746172
   17db4:	0d2e6e6f 	.word	0x0d2e6e6f
   17db8:	ffffff00 	.word	0xffffff00
   17dbc:	2d2d0d0a 	.word	0x2d2d0d0a
   17dc0:	2d2d2d2d 	.word	0x2d2d2d2d
   17dc4:	2d2d2d2d 	.word	0x2d2d2d2d
   17dc8:	2d2d2d2d 	.word	0x2d2d2d2d
   17dcc:	2d2d2d2d 	.word	0x2d2d2d2d
   17dd0:	2d2d2d2d 	.word	0x2d2d2d2d
   17dd4:	2d2d2d2d 	.word	0x2d2d2d2d
   17dd8:	2d2d2d2d 	.word	0x2d2d2d2d
   17ddc:	2d2d2d2d 	.word	0x2d2d2d2d
   17de0:	2d2d2d2d 	.word	0x2d2d2d2d
   17de4:	2d2d2d2d 	.word	0x2d2d2d2d
   17de8:	2d2d2d2d 	.word	0x2d2d2d2d
   17dec:	2d2d2d2d 	.word	0x2d2d2d2d
   17df0:	0a2d2d2d 	.word	0x0a2d2d2d
   17df4:	2d2d2d0d 	.word	0x2d2d2d0d
   17df8:	2d2d2d2d 	.word	0x2d2d2d2d
   17dfc:	2d2d2d2d 	.word	0x2d2d2d2d
   17e00:	2d2d2d2d 	.word	0x2d2d2d2d
   17e04:	2d2d2d2d 	.word	0x2d2d2d2d
   17e08:	2d2d2d2d 	.word	0x2d2d2d2d
   17e0c:	2d2d2d2d 	.word	0x2d2d2d2d
   17e10:	2d2d2d2d 	.word	0x2d2d2d2d
   17e14:	2d2d2d2d 	.word	0x2d2d2d2d
   17e18:	2d2d2d2d 	.word	0x2d2d2d2d
   17e1c:	2d2d2d2d 	.word	0x2d2d2d2d
   17e20:	2d2d2d2d 	.word	0x2d2d2d2d
   17e24:	2d2d2d2d 	.word	0x2d2d2d2d
   17e28:	00002d2d 	.word	0x00002d2d
   17e2c:	74530a0d 	.word	0x74530a0d
   17e30:	69747261 	.word	0x69747261
   17e34:	4e20676e 	.word	0x4e20676e
   17e38:	2065646f 	.word	0x2065646f
   17e3c:	666f2031 	.word	0x666f2031
   17e40:	6d695320 	.word	0x6d695320
   17e44:	20656c70 	.word	0x20656c70
   17e48:	6f6d6544 	.word	0x6f6d6544
   17e4c:	726f6620 	.word	0x726f6620
   17e50:	526f4c20 	.word	0x526f4c20
   17e54:	32502061 	.word	0x32502061
   17e58:	74532050 	.word	0x74532050
   17e5c:	206b6361 	.word	0x206b6361
   17e60:	002e2e2e 	.word	0x002e2e2e
   17e64:	75460a0d 	.word	0x75460a0d
   17e68:	46206c6c 	.word	0x46206c6c
   17e6c:	74636e75 	.word	0x74636e75
   17e70:	206e6f69 	.word	0x206e6f69
   17e74:	69766544 	.word	0x69766544
   17e78:	28206563 	.word	0x28206563
   17e7c:	29444646 	.word	0x29444646
   17e80:	65706f20 	.word	0x65706f20
   17e84:	69746172 	.word	0x69746172
   17e88:	00736e6f 	.word	0x00736e6f
   17e8c:	20200a0d 	.word	0x20200a0d
   17e90:	52202020 	.word	0x52202020
   17e94:	72542046 	.word	0x72542046
   17e98:	63736e61 	.word	0x63736e61
   17e9c:	65766965 	.word	0x65766965
   17ea0:	53203a72 	.word	0x53203a72
   17ea4:	32315f58 	.word	0x32315f58
   17ea8:	00003637 	.word	0x00003637
   17eac:	20200a0d 	.word	0x20200a0d
   17eb0:	44202020 	.word	0x44202020
   17eb4:	206f6d65 	.word	0x206f6d65
   17eb8:	74736e49 	.word	0x74736e49
   17ebc:	74637572 	.word	0x74637572
   17ec0:	3a6e6f69 	.word	0x3a6e6f69
   17ec4:	00000000 	.word	0x00000000
   17ec8:	20200a0d 	.word	0x20200a0d
   17ecc:	20202020 	.word	0x20202020
   17ed0:	20202020 	.word	0x20202020
   17ed4:	20202020 	.word	0x20202020
   17ed8:	20202020 	.word	0x20202020
   17edc:	50202020 	.word	0x50202020
   17ee0:	7265776f 	.word	0x7265776f
   17ee4:	206e6f20 	.word	0x206e6f20
   17ee8:	20656874 	.word	0x20656874
   17eec:	72616f62 	.word	0x72616f62
   17ef0:	6e752064 	.word	0x6e752064
   17ef4:	206c6974 	.word	0x206c6974
   17ef8:	2044454c 	.word	0x2044454c
   17efc:	696c2031 	.word	0x696c2031
   17f00:	73746867 	.word	0x73746867
   17f04:	00707520 	.word	0x00707520
   17f08:	20200a0d 	.word	0x20200a0d
   17f0c:	20202020 	.word	0x20202020
   17f10:	20202020 	.word	0x20202020
   17f14:	20202020 	.word	0x20202020
   17f18:	20202020 	.word	0x20202020
   17f1c:	74202020 	.word	0x74202020
   17f20:	6e69206f 	.word	0x6e69206f
   17f24:	61636964 	.word	0x61636964
   17f28:	63206574 	.word	0x63206574
   17f2c:	656e6e6f 	.word	0x656e6e6f
   17f30:	6e697463 	.word	0x6e697463
   17f34:	69772067 	.word	0x69772067
   17f38:	70206874 	.word	0x70206874
   17f3c:	2e726565 	.word	0x2e726565
   17f40:	00000000 	.word	0x00000000
   17f44:	20200a0d 	.word	0x20200a0d
   17f48:	20202020 	.word	0x20202020
   17f4c:	20202020 	.word	0x20202020
   17f50:	20202020 	.word	0x20202020
   17f54:	20202020 	.word	0x20202020
   17f58:	50202020 	.word	0x50202020
   17f5c:	20687375 	.word	0x20687375
   17f60:	74747542 	.word	0x74747542
   17f64:	31206e6f 	.word	0x31206e6f
   17f68:	206f7420 	.word	0x206f7420
   17f6c:	616f7262 	.word	0x616f7262
   17f70:	73616364 	.word	0x73616364
   17f74:	656d2074 	.word	0x656d2074
   17f78:	67617373 	.word	0x67617373
   17f7c:	00002e65 	.word	0x00002e65
   17f80:	20200a0d 	.word	0x20200a0d
   17f84:	20202020 	.word	0x20202020
   17f88:	20202020 	.word	0x20202020
   17f8c:	20202020 	.word	0x20202020
   17f90:	20202020 	.word	0x20202020
   17f94:	4c202020 	.word	0x4c202020
   17f98:	31204445 	.word	0x31204445
   17f9c:	6c697720 	.word	0x6c697720
   17fa0:	6562206c 	.word	0x6562206c
   17fa4:	676f7420 	.word	0x676f7420
   17fa8:	64656c67 	.word	0x64656c67
   17fac:	6f707520 	.word	0x6f707520
   17fb0:	6572206e 	.word	0x6572206e
   17fb4:	76696563 	.word	0x76696563
   17fb8:	20676e69 	.word	0x20676e69
   17fbc:	7373656d 	.word	0x7373656d
   17fc0:	73656761 	.word	0x73656761
   17fc4:	0000202e 	.word	0x0000202e
   17fc8:	000d0a0d 	.word	0x000d0a0d
   17fcc:	69726550 	.word	0x69726550
   17fd0:	6369646f 	.word	0x6369646f
   17fd4:	61725420 	.word	0x61725420
   17fd8:	696d736e 	.word	0x696d736e
   17fdc:	6f697373 	.word	0x6f697373
   17fe0:	203d206e 	.word	0x203d206e
   17fe4:	61736944 	.word	0x61736944
   17fe8:	0d656c62 	.word	0x0d656c62
   17fec:	00000000 	.word	0x00000000
   17ff0:	79747544 	.word	0x79747544
   17ff4:	63794320 	.word	0x63794320
   17ff8:	676e696c 	.word	0x676e696c
   17ffc:	70757320 	.word	0x70757320
   18000:	74726f70 	.word	0x74726f70
   18004:	44203d20 	.word	0x44203d20
   18008:	62617369 	.word	0x62617369
   1800c:	000d656c 	.word	0x000d656c
   18010:	2054424c 	.word	0x2054424c
   18014:	70707573 	.word	0x70707573
   18018:	2074726f 	.word	0x2074726f
   1801c:	6944203d 	.word	0x6944203d
   18020:	6c626173 	.word	0x6c626173
   18024:	ff000d65 	.word	0xff000d65
   18028:	75636553 	.word	0x75636553
   1802c:	20646572 	.word	0x20646572
   18030:	00000000 	.word	0x00000000
   18034:	616f7242 	.word	0x616f7242
   18038:	73616364 	.word	0x73616364
   1803c:	61502074 	.word	0x61502074
   18040:	74656b63 	.word	0x74656b63
   18044:	74697720 	.word	0x74697720
   18048:	53522068 	.word	0x53522068
   1804c:	00204953 	.word	0x00204953
   18050:	63696e55 	.word	0x63696e55
   18054:	20747361 	.word	0x20747361
   18058:	6b636150 	.word	0x6b636150
   1805c:	77207465 	.word	0x77207465
   18060:	20687469 	.word	0x20687469
   18064:	49535352 	.word	0x49535352
   18068:	00000020 	.word	0x00000020
   1806c:	78323025 	.word	0x78323025
   18070:	00000000 	.word	0x00000000
   18074:	6f726620 	.word	0x6f726620
   18078:	0000206d 	.word	0x0000206d
   1807c:	00007825 	.word	0x00007825
   18080:	ff00203a 	.word	0xff00203a
   18084:	00007718 	.word	0x00007718
   18088:	00007718 	.word	0x00007718
   1808c:	0000770c 	.word	0x0000770c
   18090:	00007722 	.word	0x00007722
   18094:	00007718 	.word	0x00007718
   18098:	00007770 	.word	0x00007770
   1809c:	00007718 	.word	0x00007718
   180a0:	00007718 	.word	0x00007718
   180a4:	00007718 	.word	0x00007718
   180a8:	00007718 	.word	0x00007718
   180ac:	00007718 	.word	0x00007718
   180b0:	00007740 	.word	0x00007740
   180b4:	00007750 	.word	0x00007750
   180b8:	00007718 	.word	0x00007718
   180bc:	00007718 	.word	0x00007718
   180c0:	00007718 	.word	0x00007718
   180c4:	00007770 	.word	0x00007770
   180c8:	00007770 	.word	0x00007770
   180cc:	00007770 	.word	0x00007770
   180d0:	00007770 	.word	0x00007770
   180d4:	00007770 	.word	0x00007770
   180d8:	00007770 	.word	0x00007770
   180dc:	00007770 	.word	0x00007770
   180e0:	00007770 	.word	0x00007770
   180e4:	00007770 	.word	0x00007770
   180e8:	00007770 	.word	0x00007770
   180ec:	00007770 	.word	0x00007770
   180f0:	00007770 	.word	0x00007770
   180f4:	00007770 	.word	0x00007770
   180f8:	00007770 	.word	0x00007770
   180fc:	00007770 	.word	0x00007770
   18100:	00007770 	.word	0x00007770
   18104:	00007770 	.word	0x00007770
   18108:	00007770 	.word	0x00007770
   1810c:	00007770 	.word	0x00007770
   18110:	00007770 	.word	0x00007770
   18114:	00007770 	.word	0x00007770
   18118:	00007770 	.word	0x00007770
   1811c:	00007770 	.word	0x00007770
   18120:	00007770 	.word	0x00007770
   18124:	00007770 	.word	0x00007770
   18128:	00007770 	.word	0x00007770
   1812c:	00007770 	.word	0x00007770
   18130:	00007770 	.word	0x00007770
   18134:	00007770 	.word	0x00007770
   18138:	00007770 	.word	0x00007770
   1813c:	00007770 	.word	0x00007770
   18140:	00007770 	.word	0x00007770
   18144:	00007770 	.word	0x00007770
   18148:	00007770 	.word	0x00007770
   1814c:	00007770 	.word	0x00007770
   18150:	00007770 	.word	0x00007770
   18154:	00007770 	.word	0x00007770
   18158:	00007770 	.word	0x00007770
   1815c:	00007770 	.word	0x00007770
   18160:	00007770 	.word	0x00007770
   18164:	00007770 	.word	0x00007770
   18168:	00007770 	.word	0x00007770
   1816c:	00007770 	.word	0x00007770
   18170:	00007770 	.word	0x00007770
   18174:	00007770 	.word	0x00007770
   18178:	00007770 	.word	0x00007770
   1817c:	00007770 	.word	0x00007770
   18180:	00007770 	.word	0x00007770
   18184:	00007718 	.word	0x00007718
   18188:	00007718 	.word	0x00007718
   1818c:	0000772a 	.word	0x0000772a
   18190:	00007738 	.word	0x00007738
   18194:	00007718 	.word	0x00007718
   18198:	00007770 	.word	0x00007770
   1819c:	00007718 	.word	0x00007718
   181a0:	00007718 	.word	0x00007718
   181a4:	00007718 	.word	0x00007718
   181a8:	00007718 	.word	0x00007718
   181ac:	00007718 	.word	0x00007718
   181b0:	00007758 	.word	0x00007758
   181b4:	00007768 	.word	0x00007768
   181b8:	00007718 	.word	0x00007718
   181bc:	00007718 	.word	0x00007718
   181c0:	00007718 	.word	0x00007718
   181c4:	52200d0a 	.word	0x52200d0a
   181c8:	69656365 	.word	0x69656365
   181cc:	20646576 	.word	0x20646576
   181d0:	7373656d 	.word	0x7373656d
   181d4:	20656761 	.word	0x20656761
   181d8:	0a207825 	.word	0x0a207825
   181dc:	00000000 	.word	0x00000000
   181e0:	6552200a 	.word	0x6552200a
   181e4:	76696563 	.word	0x76696563
   181e8:	6f206465 	.word	0x6f206465
   181ec:	72656472 	.word	0x72656472
   181f0:	6f726620 	.word	0x6f726620
   181f4:	6574206d 	.word	0x6574206d
   181f8:	6e696d72 	.word	0x6e696d72
   181fc:	41206c61 	.word	0x41206c61
   18200:	000d0a20 	.word	0x000d0a20
   18204:	6552200a 	.word	0x6552200a
   18208:	76696563 	.word	0x76696563
   1820c:	6f206465 	.word	0x6f206465
   18210:	72656472 	.word	0x72656472
   18214:	6f726620 	.word	0x6f726620
   18218:	6574206d 	.word	0x6574206d
   1821c:	6e696d72 	.word	0x6e696d72
   18220:	42206c61 	.word	0x42206c61
   18224:	000d0a20 	.word	0x000d0a20
   18228:	6553200a 	.word	0x6553200a
   1822c:	6d20646e 	.word	0x6d20646e
   18230:	61737365 	.word	0x61737365
   18234:	61206567 	.word	0x61206567
   18238:	6e696167 	.word	0x6e696167
   1823c:	000d0a20 	.word	0x000d0a20
   18240:	53200d0a 	.word	0x53200d0a
   18244:	20646e65 	.word	0x20646e65
   18248:	54524155 	.word	0x54524155
   1824c:	73656d20 	.word	0x73656d20
   18250:	65676173 	.word	0x65676173
   18254:	20782520 	.word	0x20782520
   18258:	0000000a 	.word	0x0000000a
   1825c:	704f200a 	.word	0x704f200a
   18260:	67206e65 	.word	0x67206e65
   18264:	20657461 	.word	0x20657461
   18268:	74207461 	.word	0x74207461
   1826c:	696d7265 	.word	0x696d7265
   18270:	206c616e 	.word	0x206c616e
   18274:	72662041 	.word	0x72662041
   18278:	49206d6f 	.word	0x49206d6f
   1827c:	0d0a204f 	.word	0x0d0a204f
   18280:	00000000 	.word	0x00000000
   18284:	6c43200a 	.word	0x6c43200a
   18288:	2065736f 	.word	0x2065736f
   1828c:	65746167 	.word	0x65746167
   18290:	20746120 	.word	0x20746120
   18294:	6d726574 	.word	0x6d726574
   18298:	6c616e69 	.word	0x6c616e69
   1829c:	66204120 	.word	0x66204120
   182a0:	206d6f72 	.word	0x206d6f72
   182a4:	0a204f49 	.word	0x0a204f49
   182a8:	0000000d 	.word	0x0000000d
   182ac:	704f200a 	.word	0x704f200a
   182b0:	67206e65 	.word	0x67206e65
   182b4:	20657461 	.word	0x20657461
   182b8:	74207461 	.word	0x74207461
   182bc:	696d7265 	.word	0x696d7265
   182c0:	206c616e 	.word	0x206c616e
   182c4:	72662042 	.word	0x72662042
   182c8:	49206d6f 	.word	0x49206d6f
   182cc:	0d0a204f 	.word	0x0d0a204f
   182d0:	00000000 	.word	0x00000000
   182d4:	6c43200a 	.word	0x6c43200a
   182d8:	2065736f 	.word	0x2065736f
   182dc:	65746167 	.word	0x65746167
   182e0:	20746120 	.word	0x20746120
   182e4:	6d726574 	.word	0x6d726574
   182e8:	6c616e69 	.word	0x6c616e69
   182ec:	66204220 	.word	0x66204220
   182f0:	206d6f72 	.word	0x206d6f72
   182f4:	0a204f49 	.word	0x0a204f49
   182f8:	ffff000d 	.word	0xffff000d
   182fc:	6b636150 	.word	0x6b636150
   18300:	72207465 	.word	0x72207465
   18304:	69656365 	.word	0x69656365
   18308:	20646576 	.word	0x20646576
   1830c:	6d6f7266 	.word	0x6d6f7266
   18310:	68746f20 	.word	0x68746f20
   18314:	53207265 	.word	0x53207265
   18318:	6372756f 	.word	0x6372756f
   1831c:	41502065 	.word	0x41502065
   18320:	4449204e 	.word	0x4449204e
   18324:	30203a20 	.word	0x30203a20
   18328:	25782578 	.word	0x25782578
   1832c:	000a0d78 	.word	0x000a0d78
   18330:	7461440a 	.word	0x7461440a
   18334:	6f432061 	.word	0x6f432061
   18338:	7269666e 	.word	0x7269666e
   1833c:	48203a6d 	.word	0x48203a6d
   18340:	6c646e61 	.word	0x6c646e61
   18344:	25203a65 	.word	0x25203a65
   18348:	74732064 	.word	0x74732064
   1834c:	73757461 	.word	0x73757461
   18350:	2064253a 	.word	0x2064253a
   18354:	ff000a0d 	.word	0xff000a0d
   18358:	6f430a0d 	.word	0x6f430a0d
   1835c:	63656e6e 	.word	0x63656e6e
   18360:	704f2074 	.word	0x704f2074
   18364:	74617265 	.word	0x74617265
   18368:	206e6f69 	.word	0x206e6f69
   1836c:	74617453 	.word	0x74617453
   18370:	203a7375 	.word	0x203a7375
   18374:	000a6425 	.word	0x000a6425
   18378:	74530a0d 	.word	0x74530a0d
   1837c:	65747261 	.word	0x65747261
   18380:	69572064 	.word	0x69572064
   18384:	656c6572 	.word	0x656c6572
   18388:	43207373 	.word	0x43207373
   1838c:	756d6d6f 	.word	0x756d6d6f
   18390:	6163696e 	.word	0x6163696e
   18394:	6e6f6974 	.word	0x6e6f6974
   18398:	206e6f20 	.word	0x206e6f20
   1839c:	6e616843 	.word	0x6e616843
   183a0:	206c656e 	.word	0x206c656e
   183a4:	0a0d7525 	.word	0x0a0d7525
   183a8:	ffffff00 	.word	0xffffff00
   183ac:	7275430a 	.word	0x7275430a
   183b0:	746e6572 	.word	0x746e6572
   183b4:	20785420 	.word	0x20785420
   183b8:	7074756f 	.word	0x7074756f
   183bc:	70207475 	.word	0x70207475
   183c0:	7265776f 	.word	0x7265776f
   183c4:	6425203a 	.word	0x6425203a
   183c8:	00000a0d 	.word	0x00000a0d
   183cc:	42204150 	.word	0x42204150
   183d0:	54534f4f 	.word	0x54534f4f
   183d4:	61747320 	.word	0x61747320
   183d8:	3a737574 	.word	0x3a737574
   183dc:	0d642520 	.word	0x0d642520
   183e0:	0000000a 	.word	0x0000000a
   183e4:	72727543 	.word	0x72727543
   183e8:	20746e65 	.word	0x20746e65
   183ec:	203a4653 	.word	0x203a4653
   183f0:	64254653 	.word	0x64254653
   183f4:	00000a0d 	.word	0x00000a0d
   183f8:	72727543 	.word	0x72727543
   183fc:	20746e65 	.word	0x20746e65
   18400:	28205742 	.word	0x28205742
   18404:	6b353231 	.word	0x6b353231
   18408:	373d7a48 	.word	0x373d7a48
   1840c:	3532202c 	.word	0x3532202c
   18410:	7a486b30 	.word	0x7a486b30
   18414:	202c383d 	.word	0x202c383d
   18418:	6b303035 	.word	0x6b303035
   1841c:	393d7a48 	.word	0x393d7a48
   18420:	25203a29 	.word	0x25203a29
   18424:	000a0d64 	.word	0x000a0d64
   18428:	6153200a 	.word	0x6153200a
   1842c:	6f207474 	.word	0x6f207474
   18430:	6e207070 	.word	0x6e207070
   18434:	76747465 	.word	0x76747465
   18438:	206b7265 	.word	0x206b7265
   1843c:	0000000d 	.word	0x0000000d
   18440:	6a4b200a 	.word	0x6a4b200a
   18444:	2074726f 	.word	0x2074726f
   18448:	65657266 	.word	0x65657266
   1844c:	2072657a 	.word	0x2072657a
   18450:	ffff000d 	.word	0xffff000d
   18454:	626d756e 	.word	0x626d756e
   18458:	664f7265 	.word	0x664f7265
   1845c:	65747942 	.word	0x65747942
   18460:	00000073 	.word	0x00000073
   18464:	732f2e2e 	.word	0x732f2e2e
   18468:	412f6372 	.word	0x412f6372
   1846c:	742f4653 	.word	0x742f4653
   18470:	64726968 	.word	0x64726968
   18474:	74726170 	.word	0x74726170
   18478:	69772f79 	.word	0x69772f79
   1847c:	656c6572 	.word	0x656c6572
   18480:	4c2f7373 	.word	0x4c2f7373
   18484:	5f61526f 	.word	0x5f61526f
   18488:	2f503250 	.word	0x2f503250
   1848c:	76726573 	.word	0x76726573
   18490:	73656369 	.word	0x73656369
   18494:	7364702f 	.word	0x7364702f
   18498:	6372732f 	.word	0x6372732f
   1849c:	2f766e2f 	.word	0x2f766e2f
   184a0:	764e5f44 	.word	0x764e5f44
   184a4:	0000632e 	.word	0x0000632e
   184a8:	72646461 	.word	0x72646461
   184ac:	20737365 	.word	0x20737365
   184b0:	44203d3c 	.word	0x44203d3c
   184b4:	5f564e5f 	.word	0x5f564e5f
   184b8:	4f4d454d 	.word	0x4f4d454d
   184bc:	455f5952 	.word	0x455f5952
   184c0:	0000444e 	.word	0x0000444e
   184c4:	64646128 	.word	0x64646128
   184c8:	73736572 	.word	0x73736572
   184cc:	6e202b20 	.word	0x6e202b20
   184d0:	65626d75 	.word	0x65626d75
   184d4:	42664f72 	.word	0x42664f72
   184d8:	73657479 	.word	0x73657479
   184dc:	3d3c2029 	.word	0x3d3c2029
   184e0:	5f442820 	.word	0x5f442820
   184e4:	4d5f564e 	.word	0x4d5f564e
   184e8:	524f4d45 	.word	0x524f4d45
   184ec:	4e455f59 	.word	0x4e455f59
   184f0:	202b2044 	.word	0x202b2044
   184f4:	00295531 	.word	0x00295531
   184f8:	66666f28 	.word	0x66666f28
   184fc:	20746573 	.word	0x20746573
   18500:	756e202b 	.word	0x756e202b
   18504:	7265626d 	.word	0x7265626d
   18508:	7942664f 	.word	0x7942664f
   1850c:	29736574 	.word	0x29736574
   18510:	203d3c20 	.word	0x203d3c20
   18514:	564e5f44 	.word	0x564e5f44
   18518:	4345535f 	.word	0x4345535f
   1851c:	5f524f54 	.word	0x5f524f54
   18520:	455a4953 	.word	0x455a4953
   18524:	ffffff00 	.word	0xffffff00
   18528:	4e5f4428 	.word	0x4e5f4428
   1852c:	454d5f56 	.word	0x454d5f56
   18530:	59524f4d 	.word	0x59524f4d
   18534:	4154535f 	.word	0x4154535f
   18538:	25205452 	.word	0x25205452
   1853c:	4d564e20 	.word	0x4d564e20
   18540:	4c525443 	.word	0x4c525443
   18544:	574f525f 	.word	0x574f525f
   18548:	5a49535f 	.word	0x5a49535f
   1854c:	3d202945 	.word	0x3d202945
   18550:	5530203d 	.word	0x5530203d
   18554:	00000000 	.word	0x00000000
   18558:	4e5f4428 	.word	0x4e5f4428
   1855c:	454d5f56 	.word	0x454d5f56
   18560:	59524f4d 	.word	0x59524f4d
   18564:	444e455f 	.word	0x444e455f
   18568:	44202d20 	.word	0x44202d20
   1856c:	5f564e5f 	.word	0x5f564e5f
   18570:	4f4d454d 	.word	0x4f4d454d
   18574:	535f5952 	.word	0x535f5952
   18578:	54524154 	.word	0x54524154
   1857c:	31202b20 	.word	0x31202b20
   18580:	3d202955 	.word	0x3d202955
   18584:	5f44203d 	.word	0x5f44203d
   18588:	4d5f564e 	.word	0x4d5f564e
   1858c:	524f4d45 	.word	0x524f4d45
   18590:	49535f59 	.word	0x49535f59
   18594:	ff00455a 	.word	0xff00455a

00018598 <__func__.13263>:
   18598:	764e5f44 696e495f ffff0074              D_Nv_Init...

000185a4 <__func__.13275>:
   185a4:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

000185b4 <__func__.13288>:
   185b4:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

000185c4 <__func__.13300>:
   185c4:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   185d4:	706d495f ffff006c                       _Impl...

000185dc <__func__.13313>:
   185dc:	706d6f43 44657261 00617461 68636163     CompareData.cach
   185ec:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   185fc:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   1860c:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   1861c:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   1862c:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   1863c:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   1864c:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   1865c:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   1866c:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   1867c:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   1868c:	656c6572 4c2f7373 5f61526f 2f503250     reless/LoRa_P2P/
   1869c:	76726573 73656369 7364702f 6372732f     services/pds/src
   186ac:	2f766e2f 764e5f53 6d61532d 2e313252     /nv/S_Nv-SamR21.
   186bc:	ffff0063 20646928 30203d21 26202975     c...(id != 0u) &
   186cc:	69282026 203c2064 30467830 29753030     & (id < 0xF000u)
   186dc:	20262620 65746928 6e654c6d 20687467      && (itemLength 
   186ec:	4d203d3c 495f5841 5f4d4554 474e454c     <= MAX_ITEM_LENG
   186fc:	00294854 21206469 7530203d ffffff00     TH).id != 0u....
   1870c:	20646928 30203d21 26202975 70282026     (id != 0u) && (p
   1871c:	61746144 203d2120 4c4c554e ffff0029     Data != NULL)...

0001872c <__func__.13290>:
   1872c:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   1873c:	69467265 00646572                       erFired.

00018744 <__func__.13326>:
   18744:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00018754 <__func__.13333>:
   18754:	61657243 74496574 61436d65 00656863     CreateItemCache.

00018764 <__func__.13338>:
   18764:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00018774 <__func__.13431>:
   18774:	64616f4c 74636553 ff00726f              LoadSector..

00018780 <__func__.13453>:
   18780:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00018790 <__func__.13473>:
   18790:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   187a0:	65646565 ffff0064                       eeded...

000187a8 <__func__.13480>:
   187a8:	706d6f43 49746361 006d6574              CompactItem.

000187b4 <__func__.13504>:
   187b4:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

000187c4 <__func__.13514>:
   187c4:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   187d4:	ff006c70                                pl..

000187d8 <__func__.13527>:
   187d8:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

000187e8 <__func__.13538>:
   187e8:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

000187f8 <__func__.13543>:
   187f8:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   18808:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   18818:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   18828:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   18838:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   18848:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   18858:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   18868:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   18878:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   18888:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   18898:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   188a8:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   188b8:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   188c8:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   188d8:	3d3d206b 74657220 ffff0029              k == ret)...

000188e4 <__func__.13203>:
   188e4:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   188f4:	646e6148 0072656c                       Handler.

000188fc <__func__.13223>:
   188fc:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

0001890c <__func__.13230>:
   1890c:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   1891c:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   1892c:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00018938 <__func__.13397>:
   18938:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   18948:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   18958:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   18968:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   18978:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   18988:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   18998:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   189a8:	6372732f 2f6c772f 64506c77 70795473     /src/wl/wlPdsTyp
   189b8:	6f437365 7265766e 2e726574 ffff0063     esConverter.c...

000189c8 <mySecurityKey>:
   189c8:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   189d8:	0000a688 0000a698 0000a69e 0000a6a4     ................
   189e8:	0000a6aa 0000a6b0 0000a6b6 0000a6bc     ................
   189f8:	0000a6c2 0000a6c8 0000a6ce 0000a6d4     ................
   18a08:	0000a6da 0000a6e0 0000a6e6 0000a6ec     ................
   18a18:	0000a6f2 0000a6f8 0000a6fe 0000a704     ................
   18a28:	0000a70a 0000a710 0000a716 0000a71c     ................
   18a38:	0000a722 0000a728 0000a86c 0000a7cc     "...(...l.......
   18a48:	0000a84c 0000a86c 0000a84c 0000a86c     L...l...L...l...
   18a58:	0000a86c 0000a86c 0000a7cc 0000a86c     l...l.......l...
   18a68:	0000a86c 0000a86c 0000a86c 0000a86c     l...l...l...l...
   18a78:	0000a86c 0000a86c 0000a894 0a0d0a0d     l...l...........
   18a88:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   18a98:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   18aa8:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   18ab8:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   18ac8:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   18ad8:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   18ae8:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   18af8:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   18b08:	41676e6f 65726464 20207373 50202020     ongAddress     P
   18b18:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   18b28:	000d7375 20202020 20202020 20202020     us..            
   18b38:	00000020 20202020 ffffff00 41500a0d      ...    ......PA
   18b48:	3a44494e 00000000 61684320 6c656e6e     NID:.... Channel
   18b58:	ffff003a 61530a0d 43206576 656e6e6f     :.....Save Conne
   18b68:	6f697463 00000d6e 41200a0d 54206b63     ction..... Ack T
   18b78:	6f656d69 000d7475                       imeout..

00018b80 <AdvChannels433>:
   18b80:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   18b90:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   18ba0:	ff0c0101                                ....

00018ba4 <AdvChannels868>:
   18ba4:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   18bb4:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   18bc4:	ff100101                                ....

00018bc8 <DefaultChannels433>:
   18bc8:	50015001 ffff5001                       .P.P.P..

00018bd0 <DefaultChannels868>:
   18bd0:	50015001 ffff5001                       .P.P.P..

00018bd8 <SubBandDutyCycle868>:
   18bd8:	006403e8 03e80064 0064000a              ..d.d.....d.

00018be4 <SubBandParams433>:
   18be4:	19cf0e40 19ea8580 00000000              @...........

00018bf0 <SubBandParams868>:
   18bf0:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   18c00:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   18c10:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   18c20:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   18c30:	33db2580 00000000                       .%.3....

00018c38 <AdvChannels923JP>:
   18c38:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   18c48:	3709f740 ff100101                       @..7....

00018c50 <DefaultChannels923JP>:
   18c50:	50015001                                .P.P

00018c54 <SubBandDutyCycleJP923>:
   18c54:	000a0064                                d...

00018c58 <SubBandParamsJP923>:
   18c58:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   18c68:	37502800 00000000                       .(P7....

00018c70 <AdvChannels920KR>:
   18c70:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   18c80:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   18c90:	ff0e0100                                ....

00018c94 <DefaultChannels920KR>:
   18c94:	50015001 ffff5001                       .P.P.P..

00018c9c <taskHandlers>:
   18c9c:	0000d40d 0000ec51 0000e265 0000950d     ....Q...e.......
   18cac:	00007961                                ay..

00018cb0 <tc_interrupt_vectors.13447>:
   18cb0:	00151211 ffffff00 00020028 20000024     ........(...$.. 
   18cc0:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   18cd0:	76412074 616c6961 00656c62 656d6954     t Available.Time
   18ce0:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   18cf0:	ffff0032 55200d0a 20545241 7373656d     2..... UART mess
   18d00:	20656761 65636572 64657669 00782520     age received %x.
   18d10:	65646441 64252064 0000000a              Added %d....

00018d1c <lorawanHandlers>:
   18d1c:	0000e129 0000e03d 0000e1ed fffffffd     )...=...........

00018d2c <radioTaskHandlers>:
   18d2c:	0000f831 0000f931 0000f66d 0000f2a5     1...1...m.......
   18d3c:	00013325                                %3..

00018d40 <FskSyncWordBuff>:
   18d40:	02c194c1                                         ...

00018d43 <macEndDevCmdInputLen>:
   18d43:	04010402 01010500 05000004              ............

00018d4f <macEndDevCmdReplyLen>:
   18d4f:	02010201 01010203 01000002 02020000     ................
   18d5f:	0a080200                                         ..

00018d61 <maxEIRPTable>:
   18d61:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   18d71:	20ffffff f0000141 02000140 44000141     ... A...@...A..D
   18d81:	02000140 e6000141 02000140 44000141     @...A...@...A..D
   18d91:	f0000140 f0000140 e6000140 44000140     @...@...@...@..D
   18da1:	4c000140 4c000140 4c000140 08000140     @..L@..L@..L@...
   18db1:	f0000141 f0000140 c4000140 a8000140     A...@...@...@...
   18dc1:	c4000141 e6000140 c4000140 a8000140     A...@...@...@...
   18dd1:	f0000141 f0000140 e6000140 a8000140     A...@...@...@...
   18de1:	4c000141 4c000140 4c000140 b2000140     A..L@..L@..L@...
   18df1:	a0000141 f0000144 f0000143 ee000143     A...D...C...C...
   18e01:	92000143 92000144 88000144 ee000144     C...D...D...D...
   18e11:	92000143 88000144 92000144 ee000144     C...D...D...D...
   18e21:	98000143 98000144 98000144 28000144     C...D...D...D..(
   18e31:	70000145 52000152 0c000152 2a000152     E..pR..RR...R..*
   18e41:	0c000151 44000152 0c000152 2a000152     Q...R..DR...R..*
   18e51:	52000151 52000152 44000152 2a000152     Q..RR..RR..DR..*
   18e61:	22000151 22000151 22000151 88000151     Q.."Q.."Q.."Q...
   18e71:	d0000154 9000015a 90000159 8c000159     T...Z...Y...Y...
   18e81:	a8000159 a800015a 9a00015a 8c00015a     Y...Z...Z...Z...
   18e91:	a8000159 9a00015a a800015a 8c00015a     Y...Z...Z...Z...
   18ea1:	b0000159 b000015a b000015a b400015a     Y...Z...Z...Z...
   18eb1:	2c00015c 6e756620 6f697463 00203a6e     \.., function: .
   18ec1:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   18ed1:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   18ee1:	696c202c 2520656e 25732564 2c000a73              , line %d%s%s..

00018ef0 <_global_impure_ptr>:
   18ef0:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   18f00:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   18f10:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   18f20:	64636261 ff006665                       abcdef..

00018f28 <__sf_fake_stderr>:
	...

00018f48 <__sf_fake_stdin>:
	...

00018f68 <__sf_fake_stdout>:
	...

00018f88 <_init>:
   18f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f8a:	46c0      	nop			; (mov r8, r8)
   18f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18f8e:	bc08      	pop	{r3}
   18f90:	469e      	mov	lr, r3
   18f92:	4770      	bx	lr

00018f94 <__init_array_start>:
   18f94:	00004499 	.word	0x00004499

00018f98 <_fini>:
   18f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f9a:	46c0      	nop			; (mov r8, r8)
   18f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18f9e:	bc08      	pop	{r3}
   18fa0:	469e      	mov	lr, r3
   18fa2:	4770      	bx	lr

00018fa4 <__fini_array_start>:
   18fa4:	00004471 	.word	0x00004471
=======
   17b70:	00004afa 	.word	0x00004afa
   17b74:	00004afa 	.word	0x00004afa
   17b78:	00004b02 	.word	0x00004b02
   17b7c:	00004b02 	.word	0x00004b02
   17b80:	00004b02 	.word	0x00004b02
   17b84:	00004b02 	.word	0x00004b02
   17b88:	42000000 	.word	0x42000000
   17b8c:	42000400 	.word	0x42000400
   17b90:	42000800 	.word	0x42000800
   17b94:	42000c00 	.word	0x42000c00
   17b98:	42001000 	.word	0x42001000
   17b9c:	43000400 	.word	0x43000400
   17ba0:	00006442 	.word	0x00006442
   17ba4:	0000643e 	.word	0x0000643e
   17ba8:	0000643e 	.word	0x0000643e
   17bac:	000064a4 	.word	0x000064a4
   17bb0:	000064a4 	.word	0x000064a4
   17bb4:	00006458 	.word	0x00006458
   17bb8:	00006448 	.word	0x00006448
   17bbc:	0000645e 	.word	0x0000645e
   17bc0:	00006492 	.word	0x00006492
   17bc4:	000065c0 	.word	0x000065c0
   17bc8:	000065a0 	.word	0x000065a0
   17bcc:	000065a0 	.word	0x000065a0
   17bd0:	0000663a 	.word	0x0000663a
   17bd4:	000065b2 	.word	0x000065b2
   17bd8:	000065ce 	.word	0x000065ce
   17bdc:	000065a4 	.word	0x000065a4
   17be0:	000065dc 	.word	0x000065dc
   17be4:	0000661e 	.word	0x0000661e
   17be8:	00006678 	.word	0x00006678
   17bec:	000066ba 	.word	0x000066ba
   17bf0:	000066ba 	.word	0x000066ba
   17bf4:	000066ba 	.word	0x000066ba
   17bf8:	0000666a 	.word	0x0000666a
   17bfc:	00006686 	.word	0x00006686
   17c00:	0000665c 	.word	0x0000665c
   17c04:	00006694 	.word	0x00006694
   17c08:	000066aa 	.word	0x000066aa
   17c0c:	00006db6 	.word	0x00006db6
   17c10:	00006eac 	.word	0x00006eac
   17c14:	00006eb6 	.word	0x00006eb6
   17c18:	00006ec0 	.word	0x00006ec0
   17c1c:	00006eca 	.word	0x00006eca
   17c20:	00006efc 	.word	0x00006efc
   17c24:	00006f06 	.word	0x00006f06
   17c28:	00006f10 	.word	0x00006f10
   17c2c:	00006f1a 	.word	0x00006f1a
   17c30:	00006f24 	.word	0x00006f24
   17c34:	42002000 	.word	0x42002000
   17c38:	42002400 	.word	0x42002400
   17c3c:	42002800 	.word	0x42002800
   17c40:	42002c00 	.word	0x42002c00
   17c44:	43000800 	.word	0x43000800
   17c48:	00000002 	.word	0x00000002
   17c4c:	00000100 	.word	0x00000100
   17c50:	00000002 	.word	0x00000002
   17c54:	00000200 	.word	0x00000200
   17c58:	00000002 	.word	0x00000002
   17c5c:	00000400 	.word	0x00000400
   17c60:	00000002 	.word	0x00000002
   17c64:	00000800 	.word	0x00000800
   17c68:	00000003 	.word	0x00000003
   17c6c:	00000004 	.word	0x00000004
   17c70:	72420a0d 	.word	0x72420a0d
   17c74:	6364616f 	.word	0x6364616f
   17c78:	20747361 	.word	0x20747361
   17c7c:	6c696146 	.word	0x6c696146
   17c80:	000d6465 	.word	0x000d6465
   17c84:	6f430a0d 	.word	0x6f430a0d
   17c88:	63656e6e 	.word	0x63656e6e
   17c8c:	676e6974 	.word	0x676e6974
   17c90:	65655020 	.word	0x65655020
   17c94:	6e6f2072 	.word	0x6e6f2072
   17c98:	61684320 	.word	0x61684320
   17c9c:	6c656e6e 	.word	0x6c656e6e
   17ca0:	00000020 	.word	0x00000020
   17ca4:	00006425 	.word	0x00006425
   17ca8:	6f430a0d 	.word	0x6f430a0d
   17cac:	63656e6e 	.word	0x63656e6e
   17cb0:	20646574 	.word	0x20646574
   17cb4:	72656550 	.word	0x72656550
   17cb8:	206e6f20 	.word	0x206e6f20
   17cbc:	6e616843 	.word	0x6e616843
   17cc0:	206c656e 	.word	0x206c656e
   17cc4:	ffffff00 	.word	0xffffff00
   17cc8:	65530a0d 	.word	0x65530a0d
   17ccc:	7463656c 	.word	0x7463656c
   17cd0:	206e6f69 	.word	0x206e6f69
   17cd4:	6320666f 	.word	0x6320666f
   17cd8:	6e6e6168 	.word	0x6e6e6168
   17cdc:	00206c65 	.word	0x00206c65
   17ce0:	20736920 	.word	0x20736920
   17ce4:	20746f6e 	.word	0x20746f6e
   17ce8:	70707573 	.word	0x70707573
   17cec:	6574726f 	.word	0x6574726f
   17cf0:	6e692064 	.word	0x6e692064
   17cf4:	72756320 	.word	0x72756320
   17cf8:	746e6572 	.word	0x746e6572
   17cfc:	6e6f6320 	.word	0x6e6f6320
   17d00:	75676966 	.word	0x75676966
   17d04:	69746172 	.word	0x69746172
   17d08:	0d2e6e6f 	.word	0x0d2e6e6f
   17d0c:	ffffff00 	.word	0xffffff00
   17d10:	2d2d0d0a 	.word	0x2d2d0d0a
   17d14:	2d2d2d2d 	.word	0x2d2d2d2d
   17d18:	2d2d2d2d 	.word	0x2d2d2d2d
   17d1c:	2d2d2d2d 	.word	0x2d2d2d2d
   17d20:	2d2d2d2d 	.word	0x2d2d2d2d
   17d24:	2d2d2d2d 	.word	0x2d2d2d2d
   17d28:	2d2d2d2d 	.word	0x2d2d2d2d
   17d2c:	2d2d2d2d 	.word	0x2d2d2d2d
   17d30:	2d2d2d2d 	.word	0x2d2d2d2d
   17d34:	2d2d2d2d 	.word	0x2d2d2d2d
   17d38:	2d2d2d2d 	.word	0x2d2d2d2d
   17d3c:	2d2d2d2d 	.word	0x2d2d2d2d
   17d40:	2d2d2d2d 	.word	0x2d2d2d2d
   17d44:	0a2d2d2d 	.word	0x0a2d2d2d
   17d48:	2d2d2d0d 	.word	0x2d2d2d0d
   17d4c:	2d2d2d2d 	.word	0x2d2d2d2d
   17d50:	2d2d2d2d 	.word	0x2d2d2d2d
   17d54:	2d2d2d2d 	.word	0x2d2d2d2d
   17d58:	2d2d2d2d 	.word	0x2d2d2d2d
   17d5c:	2d2d2d2d 	.word	0x2d2d2d2d
   17d60:	2d2d2d2d 	.word	0x2d2d2d2d
   17d64:	2d2d2d2d 	.word	0x2d2d2d2d
   17d68:	2d2d2d2d 	.word	0x2d2d2d2d
   17d6c:	2d2d2d2d 	.word	0x2d2d2d2d
   17d70:	2d2d2d2d 	.word	0x2d2d2d2d
   17d74:	2d2d2d2d 	.word	0x2d2d2d2d
   17d78:	2d2d2d2d 	.word	0x2d2d2d2d
   17d7c:	00002d2d 	.word	0x00002d2d
   17d80:	74530a0d 	.word	0x74530a0d
   17d84:	69747261 	.word	0x69747261
   17d88:	4e20676e 	.word	0x4e20676e
   17d8c:	2065646f 	.word	0x2065646f
   17d90:	666f2031 	.word	0x666f2031
   17d94:	6d695320 	.word	0x6d695320
   17d98:	20656c70 	.word	0x20656c70
   17d9c:	6f6d6544 	.word	0x6f6d6544
   17da0:	726f6620 	.word	0x726f6620
   17da4:	526f4c20 	.word	0x526f4c20
   17da8:	32502061 	.word	0x32502061
   17dac:	74532050 	.word	0x74532050
   17db0:	206b6361 	.word	0x206b6361
   17db4:	002e2e2e 	.word	0x002e2e2e
   17db8:	75460a0d 	.word	0x75460a0d
   17dbc:	46206c6c 	.word	0x46206c6c
   17dc0:	74636e75 	.word	0x74636e75
   17dc4:	206e6f69 	.word	0x206e6f69
   17dc8:	69766544 	.word	0x69766544
   17dcc:	28206563 	.word	0x28206563
   17dd0:	29444646 	.word	0x29444646
   17dd4:	65706f20 	.word	0x65706f20
   17dd8:	69746172 	.word	0x69746172
   17ddc:	00736e6f 	.word	0x00736e6f
   17de0:	20200a0d 	.word	0x20200a0d
   17de4:	52202020 	.word	0x52202020
   17de8:	72542046 	.word	0x72542046
   17dec:	63736e61 	.word	0x63736e61
   17df0:	65766965 	.word	0x65766965
   17df4:	53203a72 	.word	0x53203a72
   17df8:	32315f58 	.word	0x32315f58
   17dfc:	00003637 	.word	0x00003637
   17e00:	20200a0d 	.word	0x20200a0d
   17e04:	44202020 	.word	0x44202020
   17e08:	206f6d65 	.word	0x206f6d65
   17e0c:	74736e49 	.word	0x74736e49
   17e10:	74637572 	.word	0x74637572
   17e14:	3a6e6f69 	.word	0x3a6e6f69
   17e18:	00000000 	.word	0x00000000
   17e1c:	20200a0d 	.word	0x20200a0d
   17e20:	20202020 	.word	0x20202020
   17e24:	20202020 	.word	0x20202020
   17e28:	20202020 	.word	0x20202020
   17e2c:	20202020 	.word	0x20202020
   17e30:	50202020 	.word	0x50202020
   17e34:	7265776f 	.word	0x7265776f
   17e38:	206e6f20 	.word	0x206e6f20
   17e3c:	20656874 	.word	0x20656874
   17e40:	72616f62 	.word	0x72616f62
   17e44:	6e752064 	.word	0x6e752064
   17e48:	206c6974 	.word	0x206c6974
   17e4c:	2044454c 	.word	0x2044454c
   17e50:	696c2031 	.word	0x696c2031
   17e54:	73746867 	.word	0x73746867
   17e58:	00707520 	.word	0x00707520
   17e5c:	20200a0d 	.word	0x20200a0d
   17e60:	20202020 	.word	0x20202020
   17e64:	20202020 	.word	0x20202020
   17e68:	20202020 	.word	0x20202020
   17e6c:	20202020 	.word	0x20202020
   17e70:	74202020 	.word	0x74202020
   17e74:	6e69206f 	.word	0x6e69206f
   17e78:	61636964 	.word	0x61636964
   17e7c:	63206574 	.word	0x63206574
   17e80:	656e6e6f 	.word	0x656e6e6f
   17e84:	6e697463 	.word	0x6e697463
   17e88:	69772067 	.word	0x69772067
   17e8c:	70206874 	.word	0x70206874
   17e90:	2e726565 	.word	0x2e726565
   17e94:	00000000 	.word	0x00000000
   17e98:	20200a0d 	.word	0x20200a0d
   17e9c:	20202020 	.word	0x20202020
   17ea0:	20202020 	.word	0x20202020
   17ea4:	20202020 	.word	0x20202020
   17ea8:	20202020 	.word	0x20202020
   17eac:	50202020 	.word	0x50202020
   17eb0:	20687375 	.word	0x20687375
   17eb4:	74747542 	.word	0x74747542
   17eb8:	31206e6f 	.word	0x31206e6f
   17ebc:	206f7420 	.word	0x206f7420
   17ec0:	616f7262 	.word	0x616f7262
   17ec4:	73616364 	.word	0x73616364
   17ec8:	656d2074 	.word	0x656d2074
   17ecc:	67617373 	.word	0x67617373
   17ed0:	00002e65 	.word	0x00002e65
   17ed4:	20200a0d 	.word	0x20200a0d
   17ed8:	20202020 	.word	0x20202020
   17edc:	20202020 	.word	0x20202020
   17ee0:	20202020 	.word	0x20202020
   17ee4:	20202020 	.word	0x20202020
   17ee8:	4c202020 	.word	0x4c202020
   17eec:	31204445 	.word	0x31204445
   17ef0:	6c697720 	.word	0x6c697720
   17ef4:	6562206c 	.word	0x6562206c
   17ef8:	676f7420 	.word	0x676f7420
   17efc:	64656c67 	.word	0x64656c67
   17f00:	6f707520 	.word	0x6f707520
   17f04:	6572206e 	.word	0x6572206e
   17f08:	76696563 	.word	0x76696563
   17f0c:	20676e69 	.word	0x20676e69
   17f10:	7373656d 	.word	0x7373656d
   17f14:	73656761 	.word	0x73656761
   17f18:	0000202e 	.word	0x0000202e
   17f1c:	000d0a0d 	.word	0x000d0a0d
   17f20:	69726550 	.word	0x69726550
   17f24:	6369646f 	.word	0x6369646f
   17f28:	61725420 	.word	0x61725420
   17f2c:	696d736e 	.word	0x696d736e
   17f30:	6f697373 	.word	0x6f697373
   17f34:	203d206e 	.word	0x203d206e
   17f38:	61736944 	.word	0x61736944
   17f3c:	0d656c62 	.word	0x0d656c62
   17f40:	00000000 	.word	0x00000000
   17f44:	79747544 	.word	0x79747544
   17f48:	63794320 	.word	0x63794320
   17f4c:	676e696c 	.word	0x676e696c
   17f50:	70757320 	.word	0x70757320
   17f54:	74726f70 	.word	0x74726f70
   17f58:	44203d20 	.word	0x44203d20
   17f5c:	62617369 	.word	0x62617369
   17f60:	000d656c 	.word	0x000d656c
   17f64:	2054424c 	.word	0x2054424c
   17f68:	70707573 	.word	0x70707573
   17f6c:	2074726f 	.word	0x2074726f
   17f70:	6944203d 	.word	0x6944203d
   17f74:	6c626173 	.word	0x6c626173
   17f78:	ff000d65 	.word	0xff000d65
   17f7c:	75636553 	.word	0x75636553
   17f80:	20646572 	.word	0x20646572
   17f84:	00000000 	.word	0x00000000
   17f88:	616f7242 	.word	0x616f7242
   17f8c:	73616364 	.word	0x73616364
   17f90:	61502074 	.word	0x61502074
   17f94:	74656b63 	.word	0x74656b63
   17f98:	74697720 	.word	0x74697720
   17f9c:	53522068 	.word	0x53522068
   17fa0:	00204953 	.word	0x00204953
   17fa4:	63696e55 	.word	0x63696e55
   17fa8:	20747361 	.word	0x20747361
   17fac:	6b636150 	.word	0x6b636150
   17fb0:	77207465 	.word	0x77207465
   17fb4:	20687469 	.word	0x20687469
   17fb8:	49535352 	.word	0x49535352
   17fbc:	00000020 	.word	0x00000020
   17fc0:	78323025 	.word	0x78323025
   17fc4:	00000000 	.word	0x00000000
   17fc8:	6f726620 	.word	0x6f726620
   17fcc:	0000206d 	.word	0x0000206d
   17fd0:	00007825 	.word	0x00007825
   17fd4:	ff00203a 	.word	0xff00203a
   17fd8:	000076ee 	.word	0x000076ee
   17fdc:	000076ee 	.word	0x000076ee
   17fe0:	000076e8 	.word	0x000076e8
   17fe4:	000076ee 	.word	0x000076ee
   17fe8:	000076ee 	.word	0x000076ee
   17fec:	00007730 	.word	0x00007730
   17ff0:	000076ee 	.word	0x000076ee
   17ff4:	000076ee 	.word	0x000076ee
   17ff8:	000076ee 	.word	0x000076ee
   17ffc:	000076ee 	.word	0x000076ee
   18000:	000076ee 	.word	0x000076ee
   18004:	00007700 	.word	0x00007700
   18008:	00007710 	.word	0x00007710
   1800c:	000076ee 	.word	0x000076ee
   18010:	000076ee 	.word	0x000076ee
   18014:	000076ee 	.word	0x000076ee
   18018:	00007730 	.word	0x00007730
   1801c:	00007730 	.word	0x00007730
   18020:	00007730 	.word	0x00007730
   18024:	00007730 	.word	0x00007730
   18028:	00007730 	.word	0x00007730
   1802c:	00007730 	.word	0x00007730
   18030:	00007730 	.word	0x00007730
   18034:	00007730 	.word	0x00007730
   18038:	00007730 	.word	0x00007730
   1803c:	00007730 	.word	0x00007730
   18040:	00007730 	.word	0x00007730
   18044:	00007730 	.word	0x00007730
   18048:	00007730 	.word	0x00007730
   1804c:	00007730 	.word	0x00007730
   18050:	00007730 	.word	0x00007730
   18054:	00007730 	.word	0x00007730
   18058:	00007730 	.word	0x00007730
   1805c:	00007730 	.word	0x00007730
   18060:	00007730 	.word	0x00007730
   18064:	00007730 	.word	0x00007730
   18068:	00007730 	.word	0x00007730
   1806c:	00007730 	.word	0x00007730
   18070:	00007730 	.word	0x00007730
   18074:	00007730 	.word	0x00007730
   18078:	00007730 	.word	0x00007730
   1807c:	00007730 	.word	0x00007730
   18080:	00007730 	.word	0x00007730
   18084:	00007730 	.word	0x00007730
   18088:	00007730 	.word	0x00007730
   1808c:	00007730 	.word	0x00007730
   18090:	00007730 	.word	0x00007730
   18094:	00007730 	.word	0x00007730
   18098:	00007730 	.word	0x00007730
   1809c:	00007730 	.word	0x00007730
   180a0:	00007730 	.word	0x00007730
   180a4:	00007730 	.word	0x00007730
   180a8:	00007730 	.word	0x00007730
   180ac:	00007730 	.word	0x00007730
   180b0:	00007730 	.word	0x00007730
   180b4:	00007730 	.word	0x00007730
   180b8:	00007730 	.word	0x00007730
   180bc:	00007730 	.word	0x00007730
   180c0:	00007730 	.word	0x00007730
   180c4:	00007730 	.word	0x00007730
   180c8:	00007730 	.word	0x00007730
   180cc:	00007730 	.word	0x00007730
   180d0:	00007730 	.word	0x00007730
   180d4:	00007730 	.word	0x00007730
   180d8:	000076ee 	.word	0x000076ee
   180dc:	000076ee 	.word	0x000076ee
   180e0:	000076f8 	.word	0x000076f8
   180e4:	000076ee 	.word	0x000076ee
   180e8:	000076ee 	.word	0x000076ee
   180ec:	00007730 	.word	0x00007730
   180f0:	000076ee 	.word	0x000076ee
   180f4:	000076ee 	.word	0x000076ee
   180f8:	000076ee 	.word	0x000076ee
   180fc:	000076ee 	.word	0x000076ee
   18100:	000076ee 	.word	0x000076ee
   18104:	00007718 	.word	0x00007718
   18108:	00007728 	.word	0x00007728
   1810c:	000076ee 	.word	0x000076ee
   18110:	000076ee 	.word	0x000076ee
   18114:	000076ee 	.word	0x000076ee
   18118:	6b636150 	.word	0x6b636150
   1811c:	72207465 	.word	0x72207465
   18120:	69656365 	.word	0x69656365
   18124:	20646576 	.word	0x20646576
   18128:	6d6f7266 	.word	0x6d6f7266
   1812c:	68746f20 	.word	0x68746f20
   18130:	53207265 	.word	0x53207265
   18134:	6372756f 	.word	0x6372756f
   18138:	41502065 	.word	0x41502065
   1813c:	4449204e 	.word	0x4449204e
   18140:	30203a20 	.word	0x30203a20
   18144:	25782578 	.word	0x25782578
   18148:	000a0d78 	.word	0x000a0d78
   1814c:	7461440a 	.word	0x7461440a
   18150:	6f432061 	.word	0x6f432061
   18154:	7269666e 	.word	0x7269666e
   18158:	48203a6d 	.word	0x48203a6d
   1815c:	6c646e61 	.word	0x6c646e61
   18160:	25203a65 	.word	0x25203a65
   18164:	74732064 	.word	0x74732064
   18168:	73757461 	.word	0x73757461
   1816c:	2064253a 	.word	0x2064253a
   18170:	ff000a0d 	.word	0xff000a0d
   18174:	6f430a0d 	.word	0x6f430a0d
   18178:	63656e6e 	.word	0x63656e6e
   1817c:	704f2074 	.word	0x704f2074
   18180:	74617265 	.word	0x74617265
   18184:	206e6f69 	.word	0x206e6f69
   18188:	74617453 	.word	0x74617453
   1818c:	203a7375 	.word	0x203a7375
   18190:	000a6425 	.word	0x000a6425
   18194:	74530a0d 	.word	0x74530a0d
   18198:	65747261 	.word	0x65747261
   1819c:	69572064 	.word	0x69572064
   181a0:	656c6572 	.word	0x656c6572
   181a4:	43207373 	.word	0x43207373
   181a8:	756d6d6f 	.word	0x756d6d6f
   181ac:	6163696e 	.word	0x6163696e
   181b0:	6e6f6974 	.word	0x6e6f6974
   181b4:	206e6f20 	.word	0x206e6f20
   181b8:	6e616843 	.word	0x6e616843
   181bc:	206c656e 	.word	0x206c656e
   181c0:	0a0d7525 	.word	0x0a0d7525
   181c4:	ffffff00 	.word	0xffffff00
   181c8:	7275430a 	.word	0x7275430a
   181cc:	746e6572 	.word	0x746e6572
   181d0:	20785420 	.word	0x20785420
   181d4:	7074756f 	.word	0x7074756f
   181d8:	70207475 	.word	0x70207475
   181dc:	7265776f 	.word	0x7265776f
   181e0:	6425203a 	.word	0x6425203a
   181e4:	00000a0d 	.word	0x00000a0d
   181e8:	42204150 	.word	0x42204150
   181ec:	54534f4f 	.word	0x54534f4f
   181f0:	61747320 	.word	0x61747320
   181f4:	3a737574 	.word	0x3a737574
   181f8:	0d642520 	.word	0x0d642520
   181fc:	0000000a 	.word	0x0000000a
   18200:	72727543 	.word	0x72727543
   18204:	20746e65 	.word	0x20746e65
   18208:	203a4653 	.word	0x203a4653
   1820c:	64254653 	.word	0x64254653
   18210:	00000a0d 	.word	0x00000a0d
   18214:	72727543 	.word	0x72727543
   18218:	20746e65 	.word	0x20746e65
   1821c:	28205742 	.word	0x28205742
   18220:	6b353231 	.word	0x6b353231
   18224:	373d7a48 	.word	0x373d7a48
   18228:	3532202c 	.word	0x3532202c
   1822c:	7a486b30 	.word	0x7a486b30
   18230:	202c383d 	.word	0x202c383d
   18234:	6b303035 	.word	0x6b303035
   18238:	393d7a48 	.word	0x393d7a48
   1823c:	25203a29 	.word	0x25203a29
   18240:	000a0d64 	.word	0x000a0d64
   18244:	6153200a 	.word	0x6153200a
   18248:	6f207474 	.word	0x6f207474
   1824c:	6e207070 	.word	0x6e207070
   18250:	76747465 	.word	0x76747465
   18254:	206b7265 	.word	0x206b7265
   18258:	0000000d 	.word	0x0000000d
   1825c:	6a4b200a 	.word	0x6a4b200a
   18260:	2074726f 	.word	0x2074726f
   18264:	65657266 	.word	0x65657266
   18268:	2072657a 	.word	0x2072657a
   1826c:	ffff000d 	.word	0xffff000d
   18270:	626d756e 	.word	0x626d756e
   18274:	664f7265 	.word	0x664f7265
   18278:	65747942 	.word	0x65747942
   1827c:	00000073 	.word	0x00000073
   18280:	732f2e2e 	.word	0x732f2e2e
   18284:	412f6372 	.word	0x412f6372
   18288:	742f4653 	.word	0x742f4653
   1828c:	64726968 	.word	0x64726968
   18290:	74726170 	.word	0x74726170
   18294:	69772f79 	.word	0x69772f79
   18298:	656c6572 	.word	0x656c6572
   1829c:	4c2f7373 	.word	0x4c2f7373
   182a0:	5f61526f 	.word	0x5f61526f
   182a4:	2f503250 	.word	0x2f503250
   182a8:	76726573 	.word	0x76726573
   182ac:	73656369 	.word	0x73656369
   182b0:	7364702f 	.word	0x7364702f
   182b4:	6372732f 	.word	0x6372732f
   182b8:	2f766e2f 	.word	0x2f766e2f
   182bc:	764e5f44 	.word	0x764e5f44
   182c0:	0000632e 	.word	0x0000632e
   182c4:	72646461 	.word	0x72646461
   182c8:	20737365 	.word	0x20737365
   182cc:	44203d3c 	.word	0x44203d3c
   182d0:	5f564e5f 	.word	0x5f564e5f
   182d4:	4f4d454d 	.word	0x4f4d454d
   182d8:	455f5952 	.word	0x455f5952
   182dc:	0000444e 	.word	0x0000444e
   182e0:	64646128 	.word	0x64646128
   182e4:	73736572 	.word	0x73736572
   182e8:	6e202b20 	.word	0x6e202b20
   182ec:	65626d75 	.word	0x65626d75
   182f0:	42664f72 	.word	0x42664f72
   182f4:	73657479 	.word	0x73657479
   182f8:	3d3c2029 	.word	0x3d3c2029
   182fc:	5f442820 	.word	0x5f442820
   18300:	4d5f564e 	.word	0x4d5f564e
   18304:	524f4d45 	.word	0x524f4d45
   18308:	4e455f59 	.word	0x4e455f59
   1830c:	202b2044 	.word	0x202b2044
   18310:	00295531 	.word	0x00295531
   18314:	66666f28 	.word	0x66666f28
   18318:	20746573 	.word	0x20746573
   1831c:	756e202b 	.word	0x756e202b
   18320:	7265626d 	.word	0x7265626d
   18324:	7942664f 	.word	0x7942664f
   18328:	29736574 	.word	0x29736574
   1832c:	203d3c20 	.word	0x203d3c20
   18330:	564e5f44 	.word	0x564e5f44
   18334:	4345535f 	.word	0x4345535f
   18338:	5f524f54 	.word	0x5f524f54
   1833c:	455a4953 	.word	0x455a4953
   18340:	ffffff00 	.word	0xffffff00
   18344:	4e5f4428 	.word	0x4e5f4428
   18348:	454d5f56 	.word	0x454d5f56
   1834c:	59524f4d 	.word	0x59524f4d
   18350:	4154535f 	.word	0x4154535f
   18354:	25205452 	.word	0x25205452
   18358:	4d564e20 	.word	0x4d564e20
   1835c:	4c525443 	.word	0x4c525443
   18360:	574f525f 	.word	0x574f525f
   18364:	5a49535f 	.word	0x5a49535f
   18368:	3d202945 	.word	0x3d202945
   1836c:	5530203d 	.word	0x5530203d
   18370:	00000000 	.word	0x00000000
   18374:	4e5f4428 	.word	0x4e5f4428
   18378:	454d5f56 	.word	0x454d5f56
   1837c:	59524f4d 	.word	0x59524f4d
   18380:	444e455f 	.word	0x444e455f
   18384:	44202d20 	.word	0x44202d20
   18388:	5f564e5f 	.word	0x5f564e5f
   1838c:	4f4d454d 	.word	0x4f4d454d
   18390:	535f5952 	.word	0x535f5952
   18394:	54524154 	.word	0x54524154
   18398:	31202b20 	.word	0x31202b20
   1839c:	3d202955 	.word	0x3d202955
   183a0:	5f44203d 	.word	0x5f44203d
   183a4:	4d5f564e 	.word	0x4d5f564e
   183a8:	524f4d45 	.word	0x524f4d45
   183ac:	49535f59 	.word	0x49535f59
   183b0:	ff00455a 	.word	0xff00455a

000183b4 <__func__.13263>:
   183b4:	764e5f44 696e495f ffff0074              D_Nv_Init...

000183c0 <__func__.13275>:
   183c0:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

000183d0 <__func__.13288>:
   183d0:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

000183e0 <__func__.13300>:
   183e0:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   183f0:	706d495f ffff006c                       _Impl...

000183f8 <__func__.13313>:
   183f8:	706d6f43 44657261 00617461 68636163     CompareData.cach
   18408:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   18418:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   18428:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   18438:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   18448:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   18458:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   18468:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   18478:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   18488:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   18498:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   184a8:	656c6572 4c2f7373 5f61526f 2f503250     reless/LoRa_P2P/
   184b8:	76726573 73656369 7364702f 6372732f     services/pds/src
   184c8:	2f766e2f 764e5f53 6d61532d 2e313252     /nv/S_Nv-SamR21.
   184d8:	ffff0063 20646928 30203d21 26202975     c...(id != 0u) &
   184e8:	69282026 203c2064 30467830 29753030     & (id < 0xF000u)
   184f8:	20262620 65746928 6e654c6d 20687467      && (itemLength 
   18508:	4d203d3c 495f5841 5f4d4554 474e454c     <= MAX_ITEM_LENG
   18518:	00294854 21206469 7530203d ffffff00     TH).id != 0u....
   18528:	20646928 30203d21 26202975 70282026     (id != 0u) && (p
   18538:	61746144 203d2120 4c4c554e ffff0029     Data != NULL)...

00018548 <__func__.13290>:
   18548:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   18558:	69467265 00646572                       erFired.

00018560 <__func__.13326>:
   18560:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00018570 <__func__.13333>:
   18570:	61657243 74496574 61436d65 00656863     CreateItemCache.

00018580 <__func__.13338>:
   18580:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00018590 <__func__.13431>:
   18590:	64616f4c 74636553 ff00726f              LoadSector..

0001859c <__func__.13453>:
   1859c:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

000185ac <__func__.13473>:
   185ac:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   185bc:	65646565 ffff0064                       eeded...

000185c4 <__func__.13480>:
   185c4:	706d6f43 49746361 006d6574              CompactItem.

000185d0 <__func__.13504>:
   185d0:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

000185e0 <__func__.13514>:
   185e0:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   185f0:	ff006c70                                pl..

000185f4 <__func__.13527>:
   185f4:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00018604 <__func__.13538>:
   18604:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00018614 <__func__.13543>:
   18614:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   18624:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   18634:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   18644:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   18654:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   18664:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   18674:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   18684:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   18694:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   186a4:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   186b4:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   186c4:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   186d4:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   186e4:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   186f4:	3d3d206b 74657220 ffff0029              k == ret)...

00018700 <__func__.13203>:
   18700:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   18710:	646e6148 0072656c                       Handler.

00018718 <__func__.13223>:
   18718:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00018728 <__func__.13230>:
   18728:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   18738:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   18748:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00018754 <__func__.13397>:
   18754:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   18764:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   18774:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   18784:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   18794:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   187a4:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   187b4:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   187c4:	6372732f 2f6c772f 64506c77 70795473     /src/wl/wlPdsTyp
   187d4:	6f437365 7265766e 2e726574 ffff0063     esConverter.c...

000187e4 <mySecurityKey>:
   187e4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   187f4:	0000a5ec 0000a5fc 0000a602 0000a608     ................
   18804:	0000a60e 0000a614 0000a61a 0000a620     ............ ...
   18814:	0000a626 0000a62c 0000a632 0000a638     &...,...2...8...
   18824:	0000a63e 0000a644 0000a64a 0000a650     >...D...J...P...
   18834:	0000a656 0000a65c 0000a662 0000a668     V...\...b...h...
   18844:	0000a66e 0000a674 0000a67a 0000a680     n...t...z.......
   18854:	0000a686 0000a68c 0000a7d0 0000a730     ............0...
   18864:	0000a7b0 0000a7d0 0000a7b0 0000a7d0     ................
   18874:	0000a7d0 0000a7d0 0000a730 0000a7d0     ........0.......
   18884:	0000a7d0 0000a7d0 0000a7d0 0000a7d0     ................
   18894:	0000a7d0 0000a7d0 0000a7f8 0a0d0a0d     ................
   188a4:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   188b4:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   188c4:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   188d4:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   188e4:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   188f4:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   18904:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   18914:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   18924:	41676e6f 65726464 20207373 50202020     ongAddress     P
   18934:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   18944:	000d7375 20202020 20202020 20202020     us..            
   18954:	00000020 20202020 ffffff00 41500a0d      ...    ......PA
   18964:	3a44494e 00000000 61684320 6c656e6e     NID:.... Channel
   18974:	ffff003a 61530a0d 43206576 656e6e6f     :.....Save Conne
   18984:	6f697463 00000d6e 41200a0d 54206b63     ction..... Ack T
   18994:	6f656d69 000d7475                       imeout..

0001899c <AdvChannels433>:
   1899c:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   189ac:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   189bc:	ff0c0101                                ....

000189c0 <AdvChannels868>:
   189c0:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   189d0:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   189e0:	ff100101                                ....

000189e4 <DefaultChannels433>:
   189e4:	50015001 ffff5001                       .P.P.P..

000189ec <DefaultChannels868>:
   189ec:	50015001 ffff5001                       .P.P.P..

000189f4 <SubBandDutyCycle868>:
   189f4:	006403e8 03e80064 0064000a              ..d.d.....d.

00018a00 <SubBandParams433>:
   18a00:	19cf0e40 19ea8580 00000000              @...........

00018a0c <SubBandParams868>:
   18a0c:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   18a1c:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   18a2c:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   18a3c:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   18a4c:	33db2580 00000000                       .%.3....

00018a54 <AdvChannels923JP>:
   18a54:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   18a64:	3709f740 ff100101                       @..7....

00018a6c <DefaultChannels923JP>:
   18a6c:	50015001                                .P.P

00018a70 <SubBandDutyCycleJP923>:
   18a70:	000a0064                                d...

00018a74 <SubBandParamsJP923>:
   18a74:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   18a84:	37502800 00000000                       .(P7....

00018a8c <AdvChannels920KR>:
   18a8c:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   18a9c:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   18aac:	ff0e0100                                ....

00018ab0 <DefaultChannels920KR>:
   18ab0:	50015001 ffff5001                       .P.P.P..

00018ab8 <taskHandlers>:
   18ab8:	0000d371 0000eba5 0000e1b9 00009471     q...........q...
   18ac8:	000078c5                                .x..

00018acc <tc_interrupt_vectors.13447>:
   18acc:	00151211 ffffff00 00020028 20000024     ........(...$.. 
   18adc:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   18aec:	76412074 616c6961 00656c62 656d6954     t Available.Time
   18afc:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   18b0c:	ffff0032 65646441 64252064 0000000a     2...Added %d....

00018b1c <lorawanHandlers>:
   18b1c:	0000e07d 0000df91 0000e141 fffffffd     }.......A.......

00018b2c <radioTaskHandlers>:
   18b2c:	0000f785 0000f885 0000f5c1 0000f1f9     ................
   18b3c:	00013279                                y2..

00018b40 <FskSyncWordBuff>:
   18b40:	02c194c1                                         ...

00018b43 <macEndDevCmdInputLen>:
   18b43:	04010402 01010500 05000004              ............

00018b4f <macEndDevCmdReplyLen>:
   18b4f:	02010201 01010203 01000002 02020000     ................
   18b5f:	0a080200                                         ..

00018b61 <maxEIRPTable>:
   18b61:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   18b71:	74ffffff 44000140 56000140 98000140     ...t@..D@..V@...
   18b81:	5600013f 3a000140 56000140 98000140     ?..V@..:@..V@...
   18b91:	4400013f 44000140 3a000140 98000140     ?..D@..D@..:@...
   18ba1:	a000013f a000013f a000013f 5c00013f     ?...?...?...?..\
   18bb1:	44000140 44000140 18000140 fc000140     @..D@..D@...@...
   18bc1:	18000140 3a000140 18000140 fc000140     @...@..:@...@...
   18bd1:	44000140 44000140 3a000140 fc000140     @..D@..D@..:@...
   18be1:	a0000140 a000013f a000013f 0600013f     @...?...?...?...
   18bf1:	f4000141 44000143 44000143 42000143     A...C..DC..DC..B
   18c01:	e6000143 e6000143 dc000143 42000143     C...C...C...C..B
   18c11:	e6000143 dc000143 e6000143 42000143     C...C...C...C..B
   18c21:	ec000143 ec000143 ec000143 7c000143     C...C...C...C..|
   18c31:	c4000144 a6000151 60000151 7e000151     D...Q...Q..`Q..~
   18c41:	60000150 98000151 60000151 7e000151     P..`Q...Q..`Q..~
   18c51:	a6000150 a6000151 98000151 7e000151     P...Q...Q...Q..~
   18c61:	76000150 76000150 76000150 dc000150     P..vP..vP..vP...
   18c71:	24000153 e400015a e4000158 e0000158     S..$Z...X...X...
   18c81:	fc000158 fc000159 ee000159 e0000159     X...Y...Y...Y...
   18c91:	fc000158 ee000159 fc000159 e0000159     X...Y...Y...Y...
   18ca1:	04000158 0400015a 0400015a 0800015a     X...Z...Z...Z...
   18cb1:	2c00015c 6e756620 6f697463 00203a6e     \.., function: .
   18cc1:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   18cd1:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   18ce1:	696c202c 2520656e 25732564 2c000a73              , line %d%s%s..

00018cf0 <_global_impure_ptr>:
   18cf0:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   18d00:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   18d10:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   18d20:	64636261 ff006665                       abcdef..

00018d28 <__sf_fake_stderr>:
	...

00018d48 <__sf_fake_stdin>:
	...

00018d68 <__sf_fake_stdout>:
	...

00018d88 <_init>:
   18d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d8a:	46c0      	nop			; (mov r8, r8)
   18d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18d8e:	bc08      	pop	{r3}
   18d90:	469e      	mov	lr, r3
   18d92:	4770      	bx	lr

00018d94 <__init_array_start>:
   18d94:	00004499 	.word	0x00004499

00018d98 <_fini>:
   18d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d9a:	46c0      	nop			; (mov r8, r8)
   18d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18d9e:	bc08      	pop	{r3}
   18da0:	469e      	mov	lr, r3
   18da2:	4770      	bx	lr

00018da4 <__fini_array_start>:
   18da4:	00004471 	.word	0x00004471
>>>>>>> Stashed changes

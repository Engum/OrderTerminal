
LoRa_v0.6_Modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00018e68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00018e68  00018e68  00028e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000008c  20000000  00018e70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  0003008c  2**0
                  CONTENTS
  4 .bss          0000344c  20000090  00018f00  0003008c  2**3
                  ALLOC
  5 .stack        00002004  200034dc  0001c34c  0003008c  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
  8 .debug_info   00097a23  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d89d  00000000  00000000  000c7b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001dd3f  00000000  00000000  000d5400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001930  00000000  00000000  000f313f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002518  00000000  00000000  000f4a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001bfd7  00000000  00000000  000f6f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035f52  00000000  00000000  00112f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5d50  00000000  00000000  00148eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005184  00000000  00000000  001fec00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 54 00 20 89 70 00 00 85 70 00 00 85 70 00 00     .T. .p...p...p..
	...
      2c:	85 70 00 00 00 00 00 00 00 00 00 00 85 70 00 00     .p...........p..
      3c:	85 70 00 00 85 70 00 00 85 70 00 00 3d 4d 00 00     .p...p...p..=M..
      4c:	71 48 00 00 85 70 00 00 85 70 00 00 85 70 00 00     qH...p...p...p..
      5c:	85 70 00 00 15 58 00 00 25 58 00 00 35 58 00 00     .p...X..%X..5X..
      6c:	45 58 00 00 55 58 00 00 65 58 00 00 85 70 00 00     EX..UX..eX...p..
      7c:	85 70 00 00 85 70 00 00 59 6c 00 00 69 6c 00 00     .p...p..Yl..il..
      8c:	85 70 00 00 85 70 00 00 79 6c 00 00 85 70 00 00     .p...p..yl...p..
      9c:	85 70 00 00 85 70 00 00 85 70 00 00 e9 47 00 00     .p...p...p...G..
      ac:	85 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .p..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <pds_ff_PDS_FREEZER>:
    4400:	00010006 200002a4 00000000 00000000     ....... ........

00004410 <pds_ff_PDS_EDC_ID>:
    4410:	00010007 200026c5 00000000 00000000     .....&. ........

00004420 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    4420:	00320005 20002668 00000000 00000000     ..2.h&. ........

00004430 <pds_ff_PDS_CONNECTION_MODE_ID>:
    4430:	00010004 20000018 00000000 00000000     ....... ........

00004440 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    4440:	00010003 20000019 00000000 00000000     ....... ........

00004450 <pds_ff_PDS_PANID_ID>:
    4450:	00020002 200026bc 00000000 00000000     .....&. ........

00004460 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    4460:	00040001 20002128 00000000 00000000     ....(!. ........

00004470 <__do_global_dtors_aux>:
    4470:	b510      	push	{r4, lr}
    4472:	4c06      	ldr	r4, [pc, #24]	; (448c <__do_global_dtors_aux+0x1c>)
    4474:	7823      	ldrb	r3, [r4, #0]
    4476:	2b00      	cmp	r3, #0
    4478:	d107      	bne.n	448a <__do_global_dtors_aux+0x1a>
    447a:	4b05      	ldr	r3, [pc, #20]	; (4490 <__do_global_dtors_aux+0x20>)
    447c:	2b00      	cmp	r3, #0
    447e:	d002      	beq.n	4486 <__do_global_dtors_aux+0x16>
    4480:	4804      	ldr	r0, [pc, #16]	; (4494 <__do_global_dtors_aux+0x24>)
    4482:	e000      	b.n	4486 <__do_global_dtors_aux+0x16>
    4484:	bf00      	nop
    4486:	2301      	movs	r3, #1
    4488:	7023      	strb	r3, [r4, #0]
    448a:	bd10      	pop	{r4, pc}
    448c:	20000090 	.word	0x20000090
    4490:	00000000 	.word	0x00000000
    4494:	00018e70 	.word	0x00018e70

00004498 <frame_dummy>:
    4498:	4b08      	ldr	r3, [pc, #32]	; (44bc <frame_dummy+0x24>)
    449a:	b510      	push	{r4, lr}
    449c:	2b00      	cmp	r3, #0
    449e:	d003      	beq.n	44a8 <frame_dummy+0x10>
    44a0:	4907      	ldr	r1, [pc, #28]	; (44c0 <frame_dummy+0x28>)
    44a2:	4808      	ldr	r0, [pc, #32]	; (44c4 <frame_dummy+0x2c>)
    44a4:	e000      	b.n	44a8 <frame_dummy+0x10>
    44a6:	bf00      	nop
    44a8:	4807      	ldr	r0, [pc, #28]	; (44c8 <frame_dummy+0x30>)
    44aa:	6803      	ldr	r3, [r0, #0]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d100      	bne.n	44b2 <frame_dummy+0x1a>
    44b0:	bd10      	pop	{r4, pc}
    44b2:	4b06      	ldr	r3, [pc, #24]	; (44cc <frame_dummy+0x34>)
    44b4:	2b00      	cmp	r3, #0
    44b6:	d0fb      	beq.n	44b0 <frame_dummy+0x18>
    44b8:	4798      	blx	r3
    44ba:	e7f9      	b.n	44b0 <frame_dummy+0x18>
    44bc:	00000000 	.word	0x00000000
    44c0:	20000094 	.word	0x20000094
    44c4:	00018e70 	.word	0x00018e70
    44c8:	00018e70 	.word	0x00018e70
    44cc:	00000000 	.word	0x00000000

000044d0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    44d0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    44d2:	2000      	movs	r0, #0
    44d4:	4b08      	ldr	r3, [pc, #32]	; (44f8 <delay_init+0x28>)
    44d6:	4798      	blx	r3
    44d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    44da:	4c08      	ldr	r4, [pc, #32]	; (44fc <delay_init+0x2c>)
    44dc:	21fa      	movs	r1, #250	; 0xfa
    44de:	0089      	lsls	r1, r1, #2
    44e0:	47a0      	blx	r4
    44e2:	4b07      	ldr	r3, [pc, #28]	; (4500 <delay_init+0x30>)
    44e4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    44e6:	4907      	ldr	r1, [pc, #28]	; (4504 <delay_init+0x34>)
    44e8:	0028      	movs	r0, r5
    44ea:	47a0      	blx	r4
    44ec:	4b06      	ldr	r3, [pc, #24]	; (4508 <delay_init+0x38>)
    44ee:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    44f0:	2205      	movs	r2, #5
    44f2:	4b06      	ldr	r3, [pc, #24]	; (450c <delay_init+0x3c>)
    44f4:	601a      	str	r2, [r3, #0]
}
    44f6:	bd70      	pop	{r4, r5, r6, pc}
    44f8:	00006989 	.word	0x00006989
    44fc:	00013495 	.word	0x00013495
    4500:	20000000 	.word	0x20000000
    4504:	000f4240 	.word	0x000f4240
    4508:	20000004 	.word	0x20000004
    450c:	e000e010 	.word	0xe000e010

00004510 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4510:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4512:	4b08      	ldr	r3, [pc, #32]	; (4534 <delay_cycles_us+0x24>)
    4514:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    4516:	4a08      	ldr	r2, [pc, #32]	; (4538 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4518:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    451a:	2180      	movs	r1, #128	; 0x80
    451c:	0249      	lsls	r1, r1, #9
	while (n--) {
    451e:	3801      	subs	r0, #1
    4520:	d307      	bcc.n	4532 <delay_cycles_us+0x22>
	if (n > 0) {
    4522:	2c00      	cmp	r4, #0
    4524:	d0fb      	beq.n	451e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4526:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4528:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    452a:	6813      	ldr	r3, [r2, #0]
    452c:	420b      	tst	r3, r1
    452e:	d0fc      	beq.n	452a <delay_cycles_us+0x1a>
    4530:	e7f5      	b.n	451e <delay_cycles_us+0xe>
	}
}
    4532:	bd30      	pop	{r4, r5, pc}
    4534:	20000004 	.word	0x20000004
    4538:	e000e010 	.word	0xe000e010

0000453c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    453c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    453e:	4b08      	ldr	r3, [pc, #32]	; (4560 <delay_cycles_ms+0x24>)
    4540:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4542:	4a08      	ldr	r2, [pc, #32]	; (4564 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4544:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4546:	2180      	movs	r1, #128	; 0x80
    4548:	0249      	lsls	r1, r1, #9
	while (n--) {
    454a:	3801      	subs	r0, #1
    454c:	d307      	bcc.n	455e <delay_cycles_ms+0x22>
	if (n > 0) {
    454e:	2c00      	cmp	r4, #0
    4550:	d0fb      	beq.n	454a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4552:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4554:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4556:	6813      	ldr	r3, [r2, #0]
    4558:	420b      	tst	r3, r1
    455a:	d0fc      	beq.n	4556 <delay_cycles_ms+0x1a>
    455c:	e7f5      	b.n	454a <delay_cycles_ms+0xe>
	}
}
    455e:	bd30      	pop	{r4, r5, pc}
    4560:	20000000 	.word	0x20000000
    4564:	e000e010 	.word	0xe000e010

00004568 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4568:	4b0c      	ldr	r3, [pc, #48]	; (459c <cpu_irq_enter_critical+0x34>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	2b00      	cmp	r3, #0
    456e:	d106      	bne.n	457e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4570:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4574:	2b00      	cmp	r3, #0
    4576:	d007      	beq.n	4588 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4578:	2200      	movs	r2, #0
    457a:	4b09      	ldr	r3, [pc, #36]	; (45a0 <cpu_irq_enter_critical+0x38>)
    457c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    457e:	4a07      	ldr	r2, [pc, #28]	; (459c <cpu_irq_enter_critical+0x34>)
    4580:	6813      	ldr	r3, [r2, #0]
    4582:	3301      	adds	r3, #1
    4584:	6013      	str	r3, [r2, #0]
}
    4586:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4588:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    458a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    458e:	2200      	movs	r2, #0
    4590:	4b04      	ldr	r3, [pc, #16]	; (45a4 <cpu_irq_enter_critical+0x3c>)
    4592:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4594:	3201      	adds	r2, #1
    4596:	4b02      	ldr	r3, [pc, #8]	; (45a0 <cpu_irq_enter_critical+0x38>)
    4598:	701a      	strb	r2, [r3, #0]
    459a:	e7f0      	b.n	457e <cpu_irq_enter_critical+0x16>
    459c:	200000ac 	.word	0x200000ac
    45a0:	200000b0 	.word	0x200000b0
    45a4:	20000008 	.word	0x20000008

000045a8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    45a8:	4b08      	ldr	r3, [pc, #32]	; (45cc <cpu_irq_leave_critical+0x24>)
    45aa:	681a      	ldr	r2, [r3, #0]
    45ac:	3a01      	subs	r2, #1
    45ae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d109      	bne.n	45ca <cpu_irq_leave_critical+0x22>
    45b6:	4b06      	ldr	r3, [pc, #24]	; (45d0 <cpu_irq_leave_critical+0x28>)
    45b8:	781b      	ldrb	r3, [r3, #0]
    45ba:	2b00      	cmp	r3, #0
    45bc:	d005      	beq.n	45ca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    45be:	2201      	movs	r2, #1
    45c0:	4b04      	ldr	r3, [pc, #16]	; (45d4 <cpu_irq_leave_critical+0x2c>)
    45c2:	701a      	strb	r2, [r3, #0]
    45c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45c8:	b662      	cpsie	i
	}
}
    45ca:	4770      	bx	lr
    45cc:	200000ac 	.word	0x200000ac
    45d0:	200000b0 	.word	0x200000b0
    45d4:	20000008 	.word	0x20000008

000045d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45da:	46c6      	mov	lr, r8
    45dc:	b500      	push	{lr}
    45de:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    45e0:	ac01      	add	r4, sp, #4
    45e2:	2501      	movs	r5, #1
    45e4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    45e6:	2300      	movs	r3, #0
    45e8:	4698      	mov	r8, r3
    45ea:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45ec:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    45ee:	0021      	movs	r1, r4
    45f0:	2013      	movs	r0, #19
    45f2:	4e12      	ldr	r6, [pc, #72]	; (463c <system_board_init+0x64>)
    45f4:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    45f6:	4f12      	ldr	r7, [pc, #72]	; (4640 <system_board_init+0x68>)
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	031b      	lsls	r3, r3, #12
    45fc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4600:	0021      	movs	r1, r4
    4602:	2012      	movs	r0, #18
    4604:	47b0      	blx	r6
    4606:	2380      	movs	r3, #128	; 0x80
    4608:	02db      	lsls	r3, r3, #11
    460a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    460c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    460e:	0021      	movs	r1, r4
    4610:	200d      	movs	r0, #13
    4612:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4614:	2380      	movs	r3, #128	; 0x80
    4616:	019b      	lsls	r3, r3, #6
    4618:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    461a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    461c:	0021      	movs	r1, r4
    461e:	2009      	movs	r0, #9
    4620:	47b0      	blx	r6
    4622:	2380      	movs	r3, #128	; 0x80
    4624:	009b      	lsls	r3, r3, #2
    4626:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4628:	4643      	mov	r3, r8
    462a:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    462c:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    462e:	0021      	movs	r1, r4
    4630:	201c      	movs	r0, #28
    4632:	47b0      	blx	r6
		
}
    4634:	b002      	add	sp, #8
    4636:	bc04      	pop	{r2}
    4638:	4690      	mov	r8, r2
    463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    463c:	00004ca1 	.word	0x00004ca1
    4640:	40002800 	.word	0x40002800

00004644 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4644:	2301      	movs	r3, #1
    4646:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4648:	2300      	movs	r3, #0
    464a:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    464c:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    464e:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4650:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4652:	220f      	movs	r2, #15
    4654:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4656:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4658:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    465a:	7203      	strb	r3, [r0, #8]
}
    465c:	4770      	bx	lr

0000465e <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    465e:	6802      	ldr	r2, [r0, #0]
    4660:	6813      	ldr	r3, [r2, #0]
    4662:	2102      	movs	r1, #2
    4664:	430b      	orrs	r3, r1
    4666:	6013      	str	r3, [r2, #0]

}
    4668:	4770      	bx	lr

0000466a <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    466a:	2303      	movs	r3, #3
    466c:	6802      	ldr	r2, [r0, #0]
    466e:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4670:	6802      	ldr	r2, [r0, #0]
    4672:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4674:	6802      	ldr	r2, [r0, #0]
    4676:	6813      	ldr	r3, [r2, #0]
    4678:	2102      	movs	r1, #2
    467a:	438b      	bics	r3, r1
    467c:	6013      	str	r3, [r2, #0]
}
    467e:	4770      	bx	lr

00004680 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4680:	b570      	push	{r4, r5, r6, lr}
    4682:	0004      	movs	r4, r0
    4684:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4686:	78d3      	ldrb	r3, [r2, #3]
    4688:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    468a:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    468c:	7853      	ldrb	r3, [r2, #1]
    468e:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4690:	7913      	ldrb	r3, [r2, #4]
    4692:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4694:	7813      	ldrb	r3, [r2, #0]
    4696:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4698:	7891      	ldrb	r1, [r2, #2]
    469a:	02c9      	lsls	r1, r1, #11
    469c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    469e:	7851      	ldrb	r1, [r2, #1]
    46a0:	0209      	lsls	r1, r1, #8
    46a2:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    46a4:	78d1      	ldrb	r1, [r2, #3]
    46a6:	0089      	lsls	r1, r1, #2
    46a8:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    46aa:	7911      	ldrb	r1, [r2, #4]
    46ac:	0149      	lsls	r1, r1, #5
    46ae:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    46b0:	7991      	ldrb	r1, [r2, #6]
    46b2:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    46b4:	79d0      	ldrb	r0, [r2, #7]
    46b6:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    46b8:	4301      	orrs	r1, r0
    46ba:	7a10      	ldrb	r0, [r2, #8]
    46bc:	0300      	lsls	r0, r0, #12
    46be:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    46c0:	7952      	ldrb	r2, [r2, #5]
    46c2:	0412      	lsls	r2, r2, #16
    46c4:	20f0      	movs	r0, #240	; 0xf0
    46c6:	0300      	lsls	r0, r0, #12
    46c8:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    46ca:	430a      	orrs	r2, r1
    46cc:	4313      	orrs	r3, r2
    46ce:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    46d0:	682b      	ldr	r3, [r5, #0]
    46d2:	079b      	lsls	r3, r3, #30
    46d4:	d401      	bmi.n	46da <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    46d6:	602e      	str	r6, [r5, #0]
	}
}
    46d8:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    46da:	0020      	movs	r0, r4
    46dc:	4b03      	ldr	r3, [pc, #12]	; (46ec <aes_set_config+0x6c>)
    46de:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    46e0:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    46e2:	0020      	movs	r0, r4
    46e4:	4b02      	ldr	r3, [pc, #8]	; (46f0 <aes_set_config+0x70>)
    46e6:	4798      	blx	r3
    46e8:	e7f6      	b.n	46d8 <aes_set_config+0x58>
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	0000466b 	.word	0x0000466b
    46f0:	0000465f 	.word	0x0000465f

000046f4 <aes_init>:
{
    46f4:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    46f6:	4c05      	ldr	r4, [pc, #20]	; (470c <aes_init+0x18>)
    46f8:	69e5      	ldr	r5, [r4, #28]
    46fa:	2380      	movs	r3, #128	; 0x80
    46fc:	019b      	lsls	r3, r3, #6
    46fe:	432b      	orrs	r3, r5
    4700:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4702:	2301      	movs	r3, #1
    4704:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4706:	4b02      	ldr	r3, [pc, #8]	; (4710 <aes_init+0x1c>)
    4708:	4798      	blx	r3
}
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	40000400 	.word	0x40000400
    4710:	00004681 	.word	0x00004681

00004714 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4714:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4716:	7943      	ldrb	r3, [r0, #5]
    4718:	2b01      	cmp	r3, #1
    471a:	d005      	beq.n	4728 <aes_write_key+0x14>
    471c:	2b00      	cmp	r3, #0
    471e:	d010      	beq.n	4742 <aes_write_key+0x2e>
    4720:	2b02      	cmp	r3, #2
    4722:	d10d      	bne.n	4740 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4724:	2508      	movs	r5, #8
    4726:	e000      	b.n	472a <aes_write_key+0x16>
		key_length = 6;
    4728:	2506      	movs	r5, #6
{
    472a:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    472c:	c910      	ldmia	r1!, {r4}
    472e:	1c9a      	adds	r2, r3, #2
    4730:	0092      	lsls	r2, r2, #2
    4732:	6806      	ldr	r6, [r0, #0]
    4734:	46b4      	mov	ip, r6
    4736:	4462      	add	r2, ip
    4738:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    473a:	3301      	adds	r3, #1
    473c:	42ab      	cmp	r3, r5
    473e:	d3f5      	bcc.n	472c <aes_write_key+0x18>
		key++;
	}
}
    4740:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4742:	2504      	movs	r5, #4
    4744:	e7f1      	b.n	472a <aes_write_key+0x16>
    4746:	Address 0x00004746 is out of bounds.


00004748 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4748:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    474a:	2300      	movs	r3, #0
    474c:	6802      	ldr	r2, [r0, #0]
    474e:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4750:	4b0f      	ldr	r3, [pc, #60]	; (4790 <aes_write_input_data+0x48>)
    4752:	6842      	ldr	r2, [r0, #4]
    4754:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4756:	4a0f      	ldr	r2, [pc, #60]	; (4794 <aes_write_input_data+0x4c>)
    4758:	4293      	cmp	r3, r2
    475a:	d00a      	beq.n	4772 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    475c:	7903      	ldrb	r3, [r0, #4]
    475e:	2b03      	cmp	r3, #3
    4760:	d00e      	beq.n	4780 <aes_write_input_data+0x38>
    4762:	000c      	movs	r4, r1
    4764:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4766:	6803      	ldr	r3, [r0, #0]
    4768:	c904      	ldmia	r1!, {r2}
    476a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    476c:	428c      	cmp	r4, r1
    476e:	d1fa      	bne.n	4766 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4770:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4772:	6803      	ldr	r3, [r0, #0]
    4774:	680a      	ldr	r2, [r1, #0]
    4776:	639a      	str	r2, [r3, #56]	; 0x38
    4778:	6803      	ldr	r3, [r0, #0]
    477a:	684a      	ldr	r2, [r1, #4]
    477c:	639a      	str	r2, [r3, #56]	; 0x38
    477e:	e7f7      	b.n	4770 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4780:	7983      	ldrb	r3, [r0, #6]
    4782:	3b02      	subs	r3, #2
    4784:	2b01      	cmp	r3, #1
    4786:	d8ec      	bhi.n	4762 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4788:	6803      	ldr	r3, [r0, #0]
    478a:	680a      	ldr	r2, [r1, #0]
    478c:	639a      	str	r2, [r3, #56]	; 0x38
    478e:	e7ef      	b.n	4770 <aes_write_input_data+0x28>
    4790:	00ff00ff 	.word	0x00ff00ff
    4794:	00010003 	.word	0x00010003

00004798 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4798:	2300      	movs	r3, #0
    479a:	6802      	ldr	r2, [r0, #0]
    479c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    479e:	4b10      	ldr	r3, [pc, #64]	; (47e0 <aes_read_output_data+0x48>)
    47a0:	6842      	ldr	r2, [r0, #4]
    47a2:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    47a4:	4a0f      	ldr	r2, [pc, #60]	; (47e4 <aes_read_output_data+0x4c>)
    47a6:	4293      	cmp	r3, r2
    47a8:	d00a      	beq.n	47c0 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    47aa:	7903      	ldrb	r3, [r0, #4]
    47ac:	2b03      	cmp	r3, #3
    47ae:	d00e      	beq.n	47ce <aes_read_output_data+0x36>
    47b0:	000a      	movs	r2, r1
    47b2:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    47b4:	6803      	ldr	r3, [r0, #0]
    47b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47b8:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    47ba:	428a      	cmp	r2, r1
    47bc:	d1fa      	bne.n	47b4 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    47be:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    47c0:	6803      	ldr	r3, [r0, #0]
    47c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47c4:	600b      	str	r3, [r1, #0]
    47c6:	6803      	ldr	r3, [r0, #0]
    47c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47ca:	604b      	str	r3, [r1, #4]
    47cc:	e7f7      	b.n	47be <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    47ce:	7983      	ldrb	r3, [r0, #6]
    47d0:	3b02      	subs	r3, #2
    47d2:	2b01      	cmp	r3, #1
    47d4:	d8ec      	bhi.n	47b0 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    47d6:	6803      	ldr	r3, [r0, #0]
    47d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47da:	600b      	str	r3, [r1, #0]
    47dc:	e7ef      	b.n	47be <aes_read_output_data+0x26>
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	00ff00ff 	.word	0x00ff00ff
    47e4:	00010003 	.word	0x00010003

000047e8 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    47e8:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    47ea:	4b0c      	ldr	r3, [pc, #48]	; (481c <AES_Handler+0x34>)
    47ec:	79dc      	ldrb	r4, [r3, #7]
    47ee:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    47f0:	07e3      	lsls	r3, r4, #31
    47f2:	d507      	bpl.n	4804 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    47f4:	4b0a      	ldr	r3, [pc, #40]	; (4820 <AES_Handler+0x38>)
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d00d      	beq.n	4818 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    47fc:	2101      	movs	r1, #1
    47fe:	4a07      	ldr	r2, [pc, #28]	; (481c <AES_Handler+0x34>)
    4800:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4802:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4804:	07a3      	lsls	r3, r4, #30
    4806:	d507      	bpl.n	4818 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4808:	4b05      	ldr	r3, [pc, #20]	; (4820 <AES_Handler+0x38>)
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	2b00      	cmp	r3, #0
    480e:	d003      	beq.n	4818 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4810:	2102      	movs	r1, #2
    4812:	4a02      	ldr	r2, [pc, #8]	; (481c <AES_Handler+0x34>)
    4814:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4816:	4798      	blx	r3
		}
	}
}
    4818:	bd10      	pop	{r4, pc}
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	42003400 	.word	0x42003400
    4820:	200000b4 	.word	0x200000b4

00004824 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4824:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4826:	2a00      	cmp	r2, #0
    4828:	d001      	beq.n	482e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    482a:	0018      	movs	r0, r3
    482c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    482e:	008b      	lsls	r3, r1, #2
    4830:	4a06      	ldr	r2, [pc, #24]	; (484c <extint_register_callback+0x28>)
    4832:	589b      	ldr	r3, [r3, r2]
    4834:	2b00      	cmp	r3, #0
    4836:	d003      	beq.n	4840 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4838:	4283      	cmp	r3, r0
    483a:	d005      	beq.n	4848 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    483c:	231d      	movs	r3, #29
    483e:	e7f4      	b.n	482a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4840:	0089      	lsls	r1, r1, #2
    4842:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4844:	2300      	movs	r3, #0
    4846:	e7f0      	b.n	482a <extint_register_callback+0x6>
		return STATUS_OK;
    4848:	2300      	movs	r3, #0
    484a:	e7ee      	b.n	482a <extint_register_callback+0x6>
    484c:	20001ee8 	.word	0x20001ee8

00004850 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4850:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4852:	2900      	cmp	r1, #0
    4854:	d001      	beq.n	485a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4856:	0018      	movs	r0, r3
    4858:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    485a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    485c:	281f      	cmp	r0, #31
    485e:	d800      	bhi.n	4862 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4860:	4a02      	ldr	r2, [pc, #8]	; (486c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4862:	2301      	movs	r3, #1
    4864:	4083      	lsls	r3, r0
    4866:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4868:	2300      	movs	r3, #0
    486a:	e7f4      	b.n	4856 <extint_chan_enable_callback+0x6>
    486c:	40002400 	.word	0x40002400

00004870 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4870:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4872:	2200      	movs	r2, #0
    4874:	4b10      	ldr	r3, [pc, #64]	; (48b8 <EIC_Handler+0x48>)
    4876:	701a      	strb	r2, [r3, #0]
    4878:	2300      	movs	r3, #0
    487a:	4910      	ldr	r1, [pc, #64]	; (48bc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    487c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    487e:	4e10      	ldr	r6, [pc, #64]	; (48c0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4880:	4c0d      	ldr	r4, [pc, #52]	; (48b8 <EIC_Handler+0x48>)
    4882:	e00a      	b.n	489a <EIC_Handler+0x2a>
		return eics[eic_index];
    4884:	490d      	ldr	r1, [pc, #52]	; (48bc <EIC_Handler+0x4c>)
    4886:	e008      	b.n	489a <EIC_Handler+0x2a>
    4888:	7823      	ldrb	r3, [r4, #0]
    488a:	3301      	adds	r3, #1
    488c:	b2db      	uxtb	r3, r3
    488e:	7023      	strb	r3, [r4, #0]
    4890:	2b0f      	cmp	r3, #15
    4892:	d810      	bhi.n	48b6 <EIC_Handler+0x46>
		return NULL;
    4894:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4896:	2b1f      	cmp	r3, #31
    4898:	d9f4      	bls.n	4884 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    489a:	0028      	movs	r0, r5
    489c:	4018      	ands	r0, r3
    489e:	2201      	movs	r2, #1
    48a0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    48a2:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    48a4:	4210      	tst	r0, r2
    48a6:	d0ef      	beq.n	4888 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    48a8:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48aa:	009b      	lsls	r3, r3, #2
    48ac:	599b      	ldr	r3, [r3, r6]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d0ea      	beq.n	4888 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    48b2:	4798      	blx	r3
    48b4:	e7e8      	b.n	4888 <EIC_Handler+0x18>
			}
		}
	}
}
    48b6:	bd70      	pop	{r4, r5, r6, pc}
    48b8:	20001ee4 	.word	0x20001ee4
    48bc:	40002400 	.word	0x40002400
    48c0:	20001ee8 	.word	0x20001ee8

000048c4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    48c4:	4a06      	ldr	r2, [pc, #24]	; (48e0 <_extint_enable+0x1c>)
    48c6:	7813      	ldrb	r3, [r2, #0]
    48c8:	2102      	movs	r1, #2
    48ca:	430b      	orrs	r3, r1
    48cc:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ce:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48d0:	6853      	ldr	r3, [r2, #4]
    48d2:	4219      	tst	r1, r3
    48d4:	d1fc      	bne.n	48d0 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48d6:	6853      	ldr	r3, [r2, #4]
    48d8:	4218      	tst	r0, r3
    48da:	d1f9      	bne.n	48d0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48dc:	4770      	bx	lr
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	40002400 	.word	0x40002400

000048e4 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    48e4:	4a06      	ldr	r2, [pc, #24]	; (4900 <_extint_disable+0x1c>)
    48e6:	7813      	ldrb	r3, [r2, #0]
    48e8:	2102      	movs	r1, #2
    48ea:	438b      	bics	r3, r1
    48ec:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ee:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48f0:	6853      	ldr	r3, [r2, #4]
    48f2:	4219      	tst	r1, r3
    48f4:	d1fc      	bne.n	48f0 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48f6:	6853      	ldr	r3, [r2, #4]
    48f8:	4218      	tst	r0, r3
    48fa:	d1f9      	bne.n	48f0 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48fc:	4770      	bx	lr
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	40002400 	.word	0x40002400

00004904 <_system_extint_init>:
{
    4904:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4906:	4a12      	ldr	r2, [pc, #72]	; (4950 <_system_extint_init+0x4c>)
    4908:	6951      	ldr	r1, [r2, #20]
    490a:	2380      	movs	r3, #128	; 0x80
    490c:	009b      	lsls	r3, r3, #2
    490e:	430b      	orrs	r3, r1
    4910:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4912:	4a10      	ldr	r2, [pc, #64]	; (4954 <_system_extint_init+0x50>)
    4914:	7813      	ldrb	r3, [r2, #0]
    4916:	2101      	movs	r1, #1
    4918:	430b      	orrs	r3, r1
    491a:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    491c:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    491e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4920:	6853      	ldr	r3, [r2, #4]
    4922:	4219      	tst	r1, r3
    4924:	d1fc      	bne.n	4920 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4926:	6853      	ldr	r3, [r2, #4]
    4928:	4218      	tst	r0, r3
    492a:	d1f9      	bne.n	4920 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    492c:	4a09      	ldr	r2, [pc, #36]	; (4954 <_system_extint_init+0x50>)
    492e:	7813      	ldrb	r3, [r2, #0]
    4930:	2110      	movs	r1, #16
    4932:	430b      	orrs	r3, r1
    4934:	7013      	strb	r3, [r2, #0]
    4936:	4b08      	ldr	r3, [pc, #32]	; (4958 <_system_extint_init+0x54>)
    4938:	0019      	movs	r1, r3
    493a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    493c:	2200      	movs	r2, #0
    493e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4940:	428b      	cmp	r3, r1
    4942:	d1fc      	bne.n	493e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4944:	2208      	movs	r2, #8
    4946:	4b05      	ldr	r3, [pc, #20]	; (495c <_system_extint_init+0x58>)
    4948:	601a      	str	r2, [r3, #0]
	_extint_enable();
    494a:	4b05      	ldr	r3, [pc, #20]	; (4960 <_system_extint_init+0x5c>)
    494c:	4798      	blx	r3
}
    494e:	bd10      	pop	{r4, pc}
    4950:	40000400 	.word	0x40000400
    4954:	40002400 	.word	0x40002400
    4958:	20001ee8 	.word	0x20001ee8
    495c:	e000e100 	.word	0xe000e100
    4960:	000048c5 	.word	0x000048c5

00004964 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4964:	2300      	movs	r3, #0
    4966:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4968:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    496a:	2201      	movs	r2, #1
    496c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    496e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4970:	3201      	adds	r2, #1
    4972:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4974:	7243      	strb	r3, [r0, #9]
}
    4976:	4770      	bx	lr

00004978 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4978:	b5f0      	push	{r4, r5, r6, r7, lr}
    497a:	b083      	sub	sp, #12
    497c:	0005      	movs	r5, r0
    497e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4980:	4b1c      	ldr	r3, [pc, #112]	; (49f4 <extint_chan_set_config+0x7c>)
    4982:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4984:	a901      	add	r1, sp, #4
    4986:	2300      	movs	r3, #0
    4988:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    498a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    498c:	7923      	ldrb	r3, [r4, #4]
    498e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4990:	7a23      	ldrb	r3, [r4, #8]
    4992:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4994:	7820      	ldrb	r0, [r4, #0]
    4996:	4b18      	ldr	r3, [pc, #96]	; (49f8 <extint_chan_set_config+0x80>)
    4998:	4798      	blx	r3
		return NULL;
    499a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    499c:	2d1f      	cmp	r5, #31
    499e:	d800      	bhi.n	49a2 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    49a0:	4916      	ldr	r1, [pc, #88]	; (49fc <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    49a2:	2207      	movs	r2, #7
    49a4:	402a      	ands	r2, r5
    49a6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    49a8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    49aa:	7aa3      	ldrb	r3, [r4, #10]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d001      	beq.n	49b4 <extint_chan_set_config+0x3c>
    49b0:	2308      	movs	r3, #8
    49b2:	431f      	orrs	r7, r3
    49b4:	08eb      	lsrs	r3, r5, #3
    49b6:	009b      	lsls	r3, r3, #2
    49b8:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    49ba:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49bc:	260f      	movs	r6, #15
    49be:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    49c0:	43b0      	bics	r0, r6
			(new_config << config_pos);
    49c2:	4097      	lsls	r7, r2
    49c4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49c6:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    49c8:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    49ca:	7a63      	ldrb	r3, [r4, #9]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d10b      	bne.n	49e8 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    49d0:	698a      	ldr	r2, [r1, #24]
    49d2:	2301      	movs	r3, #1
    49d4:	40ab      	lsls	r3, r5
    49d6:	43db      	mvns	r3, r3
    49d8:	041b      	lsls	r3, r3, #16
    49da:	0c1b      	lsrs	r3, r3, #16
    49dc:	4013      	ands	r3, r2
    49de:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    49e0:	4b07      	ldr	r3, [pc, #28]	; (4a00 <extint_chan_set_config+0x88>)
    49e2:	4798      	blx	r3
}
    49e4:	b003      	add	sp, #12
    49e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    49e8:	698a      	ldr	r2, [r1, #24]
    49ea:	2301      	movs	r3, #1
    49ec:	40ab      	lsls	r3, r5
    49ee:	4313      	orrs	r3, r2
    49f0:	618b      	str	r3, [r1, #24]
    49f2:	e7f5      	b.n	49e0 <extint_chan_set_config+0x68>
    49f4:	000048e5 	.word	0x000048e5
    49f8:	00006b61 	.word	0x00006b61
    49fc:	40002400 	.word	0x40002400
    4a00:	000048c5 	.word	0x000048c5

00004a04 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4a04:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4a06:	4a1e      	ldr	r2, [pc, #120]	; (4a80 <nvm_set_config+0x7c>)
    4a08:	6993      	ldr	r3, [r2, #24]
    4a0a:	2104      	movs	r1, #4
    4a0c:	430b      	orrs	r3, r1
    4a0e:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a10:	4b1c      	ldr	r3, [pc, #112]	; (4a84 <nvm_set_config+0x80>)
    4a12:	2220      	movs	r2, #32
    4a14:	32ff      	adds	r2, #255	; 0xff
    4a16:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4a18:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4a1a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4a1c:	07d2      	lsls	r2, r2, #31
    4a1e:	d401      	bmi.n	4a24 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4a20:	0018      	movs	r0, r3
    4a22:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a24:	7803      	ldrb	r3, [r0, #0]
    4a26:	021b      	lsls	r3, r3, #8
    4a28:	22c0      	movs	r2, #192	; 0xc0
    4a2a:	0092      	lsls	r2, r2, #2
    4a2c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a2e:	7841      	ldrb	r1, [r0, #1]
    4a30:	01c9      	lsls	r1, r1, #7
    4a32:	22ff      	movs	r2, #255	; 0xff
    4a34:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a36:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a38:	7881      	ldrb	r1, [r0, #2]
    4a3a:	0049      	lsls	r1, r1, #1
    4a3c:	221e      	movs	r2, #30
    4a3e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a40:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a42:	78c2      	ldrb	r2, [r0, #3]
    4a44:	0492      	lsls	r2, r2, #18
    4a46:	2180      	movs	r1, #128	; 0x80
    4a48:	02c9      	lsls	r1, r1, #11
    4a4a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a4c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4a4e:	7902      	ldrb	r2, [r0, #4]
    4a50:	0412      	lsls	r2, r2, #16
    4a52:	21c0      	movs	r1, #192	; 0xc0
    4a54:	0289      	lsls	r1, r1, #10
    4a56:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a58:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4a5a:	4a0a      	ldr	r2, [pc, #40]	; (4a84 <nvm_set_config+0x80>)
    4a5c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4a5e:	6893      	ldr	r3, [r2, #8]
    4a60:	035b      	lsls	r3, r3, #13
    4a62:	0f5b      	lsrs	r3, r3, #29
    4a64:	4908      	ldr	r1, [pc, #32]	; (4a88 <nvm_set_config+0x84>)
    4a66:	2408      	movs	r4, #8
    4a68:	409c      	lsls	r4, r3
    4a6a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4a6c:	6893      	ldr	r3, [r2, #8]
    4a6e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4a70:	7843      	ldrb	r3, [r0, #1]
    4a72:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4a74:	8b13      	ldrh	r3, [r2, #24]
    4a76:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4a78:	0fdb      	lsrs	r3, r3, #31
    4a7a:	011b      	lsls	r3, r3, #4
    4a7c:	e7d0      	b.n	4a20 <nvm_set_config+0x1c>
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	40000400 	.word	0x40000400
    4a84:	41004000 	.word	0x41004000
    4a88:	200000bc 	.word	0x200000bc

00004a8c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4a8c:	b530      	push	{r4, r5, lr}
    4a8e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4a90:	4a25      	ldr	r2, [pc, #148]	; (4b28 <nvm_execute_command+0x9c>)
    4a92:	8810      	ldrh	r0, [r2, #0]
    4a94:	8853      	ldrh	r3, [r2, #2]
    4a96:	4343      	muls	r3, r0
    4a98:	428b      	cmp	r3, r1
    4a9a:	d20b      	bcs.n	4ab4 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4a9c:	2280      	movs	r2, #128	; 0x80
    4a9e:	0192      	lsls	r2, r2, #6
    4aa0:	4b22      	ldr	r3, [pc, #136]	; (4b2c <nvm_execute_command+0xa0>)
    4aa2:	18cb      	adds	r3, r1, r3
    4aa4:	4293      	cmp	r3, r2
    4aa6:	d905      	bls.n	4ab4 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4aa8:	4a21      	ldr	r2, [pc, #132]	; (4b30 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4aaa:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4aac:	4b21      	ldr	r3, [pc, #132]	; (4b34 <nvm_execute_command+0xa8>)
    4aae:	18cb      	adds	r3, r1, r3
    4ab0:	4293      	cmp	r3, r2
    4ab2:	d80e      	bhi.n	4ad2 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4ab4:	4b20      	ldr	r3, [pc, #128]	; (4b38 <nvm_execute_command+0xac>)
    4ab6:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4ab8:	2280      	movs	r2, #128	; 0x80
    4aba:	02d2      	lsls	r2, r2, #11
    4abc:	432a      	orrs	r2, r5
    4abe:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4ac0:	2220      	movs	r2, #32
    4ac2:	32ff      	adds	r2, #255	; 0xff
    4ac4:	831a      	strh	r2, [r3, #24]
    4ac6:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4ac8:	07db      	lsls	r3, r3, #31
    4aca:	d403      	bmi.n	4ad4 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4acc:	4b1a      	ldr	r3, [pc, #104]	; (4b38 <nvm_execute_command+0xac>)
    4ace:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4ad0:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4ad2:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4ad4:	2c45      	cmp	r4, #69	; 0x45
    4ad6:	d822      	bhi.n	4b1e <nvm_execute_command+0x92>
    4ad8:	00a3      	lsls	r3, r4, #2
    4ada:	4a18      	ldr	r2, [pc, #96]	; (4b3c <nvm_execute_command+0xb0>)
    4adc:	58d3      	ldr	r3, [r2, r3]
    4ade:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4ae0:	4b15      	ldr	r3, [pc, #84]	; (4b38 <nvm_execute_command+0xac>)
    4ae2:	8b1b      	ldrh	r3, [r3, #24]
    4ae4:	05db      	lsls	r3, r3, #23
    4ae6:	d503      	bpl.n	4af0 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4ae8:	4b13      	ldr	r3, [pc, #76]	; (4b38 <nvm_execute_command+0xac>)
    4aea:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4aec:	2010      	movs	r0, #16
    4aee:	e7f0      	b.n	4ad2 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4af0:	0889      	lsrs	r1, r1, #2
    4af2:	0049      	lsls	r1, r1, #1
    4af4:	4b10      	ldr	r3, [pc, #64]	; (4b38 <nvm_execute_command+0xac>)
    4af6:	61d9      	str	r1, [r3, #28]
			break;
    4af8:	e003      	b.n	4b02 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4afa:	0889      	lsrs	r1, r1, #2
    4afc:	0049      	lsls	r1, r1, #1
    4afe:	4b0e      	ldr	r3, [pc, #56]	; (4b38 <nvm_execute_command+0xac>)
    4b00:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4b02:	20a5      	movs	r0, #165	; 0xa5
    4b04:	0200      	lsls	r0, r0, #8
    4b06:	4304      	orrs	r4, r0
    4b08:	4b0b      	ldr	r3, [pc, #44]	; (4b38 <nvm_execute_command+0xac>)
    4b0a:	801c      	strh	r4, [r3, #0]
    4b0c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4b0e:	2201      	movs	r2, #1
    4b10:	7d0b      	ldrb	r3, [r1, #20]
    4b12:	4213      	tst	r3, r2
    4b14:	d0fc      	beq.n	4b10 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4b16:	4b08      	ldr	r3, [pc, #32]	; (4b38 <nvm_execute_command+0xac>)
    4b18:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4b1a:	2000      	movs	r0, #0
    4b1c:	e7d9      	b.n	4ad2 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4b1e:	4b06      	ldr	r3, [pc, #24]	; (4b38 <nvm_execute_command+0xac>)
    4b20:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4b22:	2017      	movs	r0, #23
    4b24:	e7d5      	b.n	4ad2 <nvm_execute_command+0x46>
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	200000bc 	.word	0x200000bc
    4b2c:	ff7fc000 	.word	0xff7fc000
    4b30:	00001fff 	.word	0x00001fff
    4b34:	ffc00000 	.word	0xffc00000
    4b38:	41004000 	.word	0x41004000
    4b3c:	000179dc 	.word	0x000179dc

00004b40 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b42:	4b2f      	ldr	r3, [pc, #188]	; (4c00 <nvm_write_buffer+0xc0>)
    4b44:	881c      	ldrh	r4, [r3, #0]
    4b46:	885b      	ldrh	r3, [r3, #2]
    4b48:	4363      	muls	r3, r4
	if (destination_address >
    4b4a:	4283      	cmp	r3, r0
    4b4c:	d207      	bcs.n	4b5e <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b4e:	4e2d      	ldr	r6, [pc, #180]	; (4c04 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b50:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b52:	4b2d      	ldr	r3, [pc, #180]	; (4c08 <nvm_write_buffer+0xc8>)
    4b54:	18c3      	adds	r3, r0, r3
    4b56:	42b3      	cmp	r3, r6
    4b58:	d806      	bhi.n	4b68 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4b5a:	2601      	movs	r6, #1
    4b5c:	e000      	b.n	4b60 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4b5e:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4b60:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b62:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4b64:	4218      	tst	r0, r3
    4b66:	d001      	beq.n	4b6c <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4b68:	0028      	movs	r0, r5
    4b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4b6c:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4b6e:	4294      	cmp	r4, r2
    4b70:	d3fa      	bcc.n	4b68 <nvm_write_buffer+0x28>
    4b72:	4b26      	ldr	r3, [pc, #152]	; (4c0c <nvm_write_buffer+0xcc>)
    4b74:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b76:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4b78:	07db      	lsls	r3, r3, #31
    4b7a:	d5f5      	bpl.n	4b68 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4b7c:	4c24      	ldr	r4, [pc, #144]	; (4c10 <nvm_write_buffer+0xd0>)
    4b7e:	4b23      	ldr	r3, [pc, #140]	; (4c0c <nvm_write_buffer+0xcc>)
    4b80:	801c      	strh	r4, [r3, #0]
    4b82:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4b84:	2401      	movs	r4, #1
    4b86:	7d2b      	ldrb	r3, [r5, #20]
    4b88:	4223      	tst	r3, r4
    4b8a:	d0fc      	beq.n	4b86 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b8c:	2420      	movs	r4, #32
    4b8e:	34ff      	adds	r4, #255	; 0xff
    4b90:	4b1e      	ldr	r3, [pc, #120]	; (4c0c <nvm_write_buffer+0xcc>)
    4b92:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4b94:	2a00      	cmp	r2, #0
    4b96:	d02c      	beq.n	4bf2 <nvm_write_buffer+0xb2>
    4b98:	2301      	movs	r3, #1
    4b9a:	0005      	movs	r5, r0
    4b9c:	439d      	bics	r5, r3
    4b9e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4ba0:	1e54      	subs	r4, r2, #1
    4ba2:	46a4      	mov	ip, r4
    4ba4:	e009      	b.n	4bba <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4ba6:	18cf      	adds	r7, r1, r3
    4ba8:	787f      	ldrb	r7, [r7, #1]
    4baa:	023f      	lsls	r7, r7, #8
    4bac:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4bae:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4bb0:	3302      	adds	r3, #2
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	3502      	adds	r5, #2
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d904      	bls.n	4bc4 <nvm_write_buffer+0x84>
		data = buffer[i];
    4bba:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4bbc:	4563      	cmp	r3, ip
    4bbe:	dbf2      	blt.n	4ba6 <nvm_write_buffer+0x66>
		data = buffer[i];
    4bc0:	b2a4      	uxth	r4, r4
    4bc2:	e7f4      	b.n	4bae <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bc4:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <nvm_write_buffer+0xc0>)
    4bc6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4bc8:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d1cc      	bne.n	4b68 <nvm_write_buffer+0x28>
    4bce:	2a3f      	cmp	r2, #63	; 0x3f
    4bd0:	d8ca      	bhi.n	4b68 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4bd2:	2e00      	cmp	r6, #0
    4bd4:	d106      	bne.n	4be4 <nvm_write_buffer+0xa4>
    4bd6:	2200      	movs	r2, #0
    4bd8:	0001      	movs	r1, r0
    4bda:	2004      	movs	r0, #4
    4bdc:	4b0d      	ldr	r3, [pc, #52]	; (4c14 <nvm_write_buffer+0xd4>)
    4bde:	4798      	blx	r3
    4be0:	0005      	movs	r5, r0
    4be2:	e7c1      	b.n	4b68 <nvm_write_buffer+0x28>
    4be4:	2200      	movs	r2, #0
    4be6:	0001      	movs	r1, r0
    4be8:	201c      	movs	r0, #28
    4bea:	4b0a      	ldr	r3, [pc, #40]	; (4c14 <nvm_write_buffer+0xd4>)
    4bec:	4798      	blx	r3
    4bee:	0005      	movs	r5, r0
    4bf0:	e7ba      	b.n	4b68 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bf2:	4b03      	ldr	r3, [pc, #12]	; (4c00 <nvm_write_buffer+0xc0>)
    4bf4:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4bf6:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d0ea      	beq.n	4bd2 <nvm_write_buffer+0x92>
    4bfc:	e7b4      	b.n	4b68 <nvm_write_buffer+0x28>
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	200000bc 	.word	0x200000bc
    4c04:	00001fff 	.word	0x00001fff
    4c08:	ffc00000 	.word	0xffc00000
    4c0c:	41004000 	.word	0x41004000
    4c10:	ffffa544 	.word	0xffffa544
    4c14:	00004a8d 	.word	0x00004a8d

00004c18 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4c18:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4c1a:	4a1b      	ldr	r2, [pc, #108]	; (4c88 <nvm_erase_row+0x70>)
    4c1c:	8813      	ldrh	r3, [r2, #0]
    4c1e:	8852      	ldrh	r2, [r2, #2]
    4c20:	435a      	muls	r2, r3
	if (row_address >
    4c22:	4282      	cmp	r2, r0
    4c24:	d207      	bcs.n	4c36 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c26:	4c19      	ldr	r4, [pc, #100]	; (4c8c <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4c28:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c2a:	4919      	ldr	r1, [pc, #100]	; (4c90 <nvm_erase_row+0x78>)
    4c2c:	1841      	adds	r1, r0, r1
    4c2e:	42a1      	cmp	r1, r4
    4c30:	d807      	bhi.n	4c42 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4c32:	2101      	movs	r1, #1
    4c34:	e000      	b.n	4c38 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4c36:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4c38:	009b      	lsls	r3, r3, #2
    4c3a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4c3c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4c3e:	4218      	tst	r0, r3
    4c40:	d001      	beq.n	4c46 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4c42:	0010      	movs	r0, r2
    4c44:	bd10      	pop	{r4, pc}
    4c46:	4b13      	ldr	r3, [pc, #76]	; (4c94 <nvm_erase_row+0x7c>)
    4c48:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4c4a:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4c4c:	07db      	lsls	r3, r3, #31
    4c4e:	d5f8      	bpl.n	4c42 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c50:	4b10      	ldr	r3, [pc, #64]	; (4c94 <nvm_erase_row+0x7c>)
    4c52:	2220      	movs	r2, #32
    4c54:	32ff      	adds	r2, #255	; 0xff
    4c56:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4c58:	0880      	lsrs	r0, r0, #2
    4c5a:	0040      	lsls	r0, r0, #1
    4c5c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4c5e:	2900      	cmp	r1, #0
    4c60:	d10f      	bne.n	4c82 <nvm_erase_row+0x6a>
    4c62:	4a0d      	ldr	r2, [pc, #52]	; (4c98 <nvm_erase_row+0x80>)
    4c64:	4b0b      	ldr	r3, [pc, #44]	; (4c94 <nvm_erase_row+0x7c>)
    4c66:	801a      	strh	r2, [r3, #0]
    4c68:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4c6a:	2201      	movs	r2, #1
    4c6c:	7d0b      	ldrb	r3, [r1, #20]
    4c6e:	4213      	tst	r3, r2
    4c70:	d0fc      	beq.n	4c6c <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4c72:	4b08      	ldr	r3, [pc, #32]	; (4c94 <nvm_erase_row+0x7c>)
    4c74:	8b1a      	ldrh	r2, [r3, #24]
    4c76:	201c      	movs	r0, #28
    4c78:	4002      	ands	r2, r0
	return STATUS_OK;
    4c7a:	1e50      	subs	r0, r2, #1
    4c7c:	4182      	sbcs	r2, r0
    4c7e:	0092      	lsls	r2, r2, #2
    4c80:	e7df      	b.n	4c42 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4c82:	4a06      	ldr	r2, [pc, #24]	; (4c9c <nvm_erase_row+0x84>)
    4c84:	e7ee      	b.n	4c64 <nvm_erase_row+0x4c>
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	200000bc 	.word	0x200000bc
    4c8c:	00001fff 	.word	0x00001fff
    4c90:	ffc00000 	.word	0xffc00000
    4c94:	41004000 	.word	0x41004000
    4c98:	0000a502 	.word	0x0000a502
    4c9c:	0000a51a 	.word	0x0000a51a

00004ca0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4ca0:	b500      	push	{lr}
    4ca2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ca4:	ab01      	add	r3, sp, #4
    4ca6:	2280      	movs	r2, #128	; 0x80
    4ca8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4caa:	780a      	ldrb	r2, [r1, #0]
    4cac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4cae:	784a      	ldrb	r2, [r1, #1]
    4cb0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4cb2:	788a      	ldrb	r2, [r1, #2]
    4cb4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4cb6:	0019      	movs	r1, r3
    4cb8:	4b01      	ldr	r3, [pc, #4]	; (4cc0 <port_pin_set_config+0x20>)
    4cba:	4798      	blx	r3
}
    4cbc:	b003      	add	sp, #12
    4cbe:	bd00      	pop	{pc}
    4cc0:	00006b61 	.word	0x00006b61

00004cc4 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cc4:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4cc6:	6918      	ldr	r0, [r3, #16]
    4cc8:	1e43      	subs	r3, r0, #1
    4cca:	4198      	sbcs	r0, r3
    4ccc:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4cce:	4770      	bx	lr

00004cd0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4cd0:	b570      	push	{r4, r5, r6, lr}
    4cd2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cd4:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4cd6:	4d08      	ldr	r5, [pc, #32]	; (4cf8 <rtc_count_get_count+0x28>)
    4cd8:	0020      	movs	r0, r4
    4cda:	47a8      	blx	r5
    4cdc:	2800      	cmp	r0, #0
    4cde:	d1fb      	bne.n	4cd8 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4ce0:	7923      	ldrb	r3, [r4, #4]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d004      	beq.n	4cf0 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4ce6:	2000      	movs	r0, #0
	switch (module->mode) {
    4ce8:	2b01      	cmp	r3, #1
    4cea:	d100      	bne.n	4cee <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4cec:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4cee:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4cf0:	8b30      	ldrh	r0, [r6, #24]
    4cf2:	b280      	uxth	r0, r0
			break;
    4cf4:	e7fb      	b.n	4cee <rtc_count_get_count+0x1e>
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	00004cc5 	.word	0x00004cc5

00004cfc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    4cfc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cfe:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    4d00:	290a      	cmp	r1, #10
    4d02:	d010      	beq.n	4d26 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    4d04:	2907      	cmp	r1, #7
    4d06:	d911      	bls.n	4d2c <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    4d08:	2380      	movs	r3, #128	; 0x80
    4d0a:	005b      	lsls	r3, r3, #1
    4d0c:	000c      	movs	r4, r1
    4d0e:	3c08      	subs	r4, #8
    4d10:	40a3      	lsls	r3, r4
    4d12:	24c0      	movs	r4, #192	; 0xc0
    4d14:	00a4      	lsls	r4, r4, #2
    4d16:	4023      	ands	r3, r4
    4d18:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    4d1a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    4d1c:	2201      	movs	r2, #1
    4d1e:	408a      	lsls	r2, r1
    4d20:	4393      	bics	r3, r2
    4d22:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    4d24:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    4d26:	4b04      	ldr	r3, [pc, #16]	; (4d38 <rtc_count_disable_callback+0x3c>)
    4d28:	8113      	strh	r3, [r2, #8]
    4d2a:	e7f6      	b.n	4d1a <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    4d2c:	2401      	movs	r4, #1
    4d2e:	408c      	lsls	r4, r1
    4d30:	23ff      	movs	r3, #255	; 0xff
    4d32:	4023      	ands	r3, r4
    4d34:	8113      	strh	r3, [r2, #8]
    4d36:	e7f0      	b.n	4d1a <rtc_count_disable_callback+0x1e>
    4d38:	ffff8000 	.word	0xffff8000

00004d3c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d3e:	46de      	mov	lr, fp
    4d40:	4657      	mov	r7, sl
    4d42:	464e      	mov	r6, r9
    4d44:	4645      	mov	r5, r8
    4d46:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4d48:	4b2b      	ldr	r3, [pc, #172]	; (4df8 <RTC_Handler+0xbc>)
    4d4a:	681b      	ldr	r3, [r3, #0]
    4d4c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    4d4e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    4d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    4d52:	4652      	mov	r2, sl
    4d54:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    4d56:	401a      	ands	r2, r3
    4d58:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    4d5a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    4d5c:	8973      	ldrh	r3, [r6, #10]
    4d5e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    4d60:	b21a      	sxth	r2, r3
    4d62:	2a00      	cmp	r2, #0
    4d64:	db08      	blt.n	4d78 <RTC_Handler+0x3c>
    4d66:	27ff      	movs	r7, #255	; 0xff
    4d68:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    4d6a:	d02a      	beq.n	4dc2 <RTC_Handler+0x86>
    4d6c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4d6e:	2301      	movs	r3, #1
    4d70:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4d72:	33fe      	adds	r3, #254	; 0xfe
    4d74:	469b      	mov	fp, r3
    4d76:	e014      	b.n	4da2 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    4d78:	4643      	mov	r3, r8
    4d7a:	055b      	lsls	r3, r3, #21
    4d7c:	d407      	bmi.n	4d8e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    4d7e:	4b1f      	ldr	r3, [pc, #124]	; (4dfc <RTC_Handler+0xc0>)
    4d80:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    4d82:	bc3c      	pop	{r2, r3, r4, r5}
    4d84:	4690      	mov	r8, r2
    4d86:	4699      	mov	r9, r3
    4d88:	46a2      	mov	sl, r4
    4d8a:	46ab      	mov	fp, r5
    4d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    4d8e:	4653      	mov	r3, sl
    4d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d92:	4798      	blx	r3
    4d94:	e7f3      	b.n	4d7e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4d96:	465b      	mov	r3, fp
    4d98:	401d      	ands	r5, r3
    4d9a:	81b5      	strh	r5, [r6, #12]
    4d9c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    4d9e:	2c08      	cmp	r4, #8
    4da0:	d0ef      	beq.n	4d82 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4da2:	0023      	movs	r3, r4
    4da4:	464d      	mov	r5, r9
    4da6:	40a5      	lsls	r5, r4
    4da8:	422f      	tst	r7, r5
    4daa:	d0f4      	beq.n	4d96 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    4dac:	4642      	mov	r2, r8
    4dae:	4122      	asrs	r2, r4
    4db0:	4649      	mov	r1, r9
    4db2:	4211      	tst	r1, r2
    4db4:	d0ef      	beq.n	4d96 <RTC_Handler+0x5a>
				module->callbacks[i]();
    4db6:	3302      	adds	r3, #2
    4db8:	009b      	lsls	r3, r3, #2
    4dba:	4652      	mov	r2, sl
    4dbc:	589b      	ldr	r3, [r3, r2]
    4dbe:	4798      	blx	r3
    4dc0:	e7e9      	b.n	4d96 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    4dc2:	05da      	lsls	r2, r3, #23
    4dc4:	d50a      	bpl.n	4ddc <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    4dc6:	4643      	mov	r3, r8
    4dc8:	05db      	lsls	r3, r3, #23
    4dca:	d403      	bmi.n	4dd4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    4dcc:	2380      	movs	r3, #128	; 0x80
    4dce:	005b      	lsls	r3, r3, #1
    4dd0:	81b3      	strh	r3, [r6, #12]
    4dd2:	e7d6      	b.n	4d82 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    4dd4:	4653      	mov	r3, sl
    4dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dd8:	4798      	blx	r3
    4dda:	e7f7      	b.n	4dcc <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    4ddc:	059b      	lsls	r3, r3, #22
    4dde:	d5d0      	bpl.n	4d82 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    4de0:	4643      	mov	r3, r8
    4de2:	059b      	lsls	r3, r3, #22
    4de4:	d403      	bmi.n	4dee <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    4de6:	2380      	movs	r3, #128	; 0x80
    4de8:	009b      	lsls	r3, r3, #2
    4dea:	81b3      	strh	r3, [r6, #12]
}
    4dec:	e7c9      	b.n	4d82 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    4dee:	4653      	mov	r3, sl
    4df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4df2:	4798      	blx	r3
    4df4:	e7f7      	b.n	4de6 <RTC_Handler+0xaa>
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	20001f28 	.word	0x20001f28
    4dfc:	ffff8000 	.word	0xffff8000

00004e00 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4e00:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4e02:	2207      	movs	r2, #7
    4e04:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4e06:	421a      	tst	r2, r3
    4e08:	d1fc      	bne.n	4e04 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    4e0a:	4770      	bx	lr

00004e0c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e0e:	46d6      	mov	lr, sl
    4e10:	464f      	mov	r7, r9
    4e12:	4646      	mov	r6, r8
    4e14:	b5c0      	push	{r6, r7, lr}
    4e16:	b08a      	sub	sp, #40	; 0x28
    4e18:	0007      	movs	r7, r0
    4e1a:	000e      	movs	r6, r1
    4e1c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4e1e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e20:	0008      	movs	r0, r1
    4e22:	4b9c      	ldr	r3, [pc, #624]	; (5094 <i2c_master_init+0x288>)
    4e24:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    4e26:	2805      	cmp	r0, #5
    4e28:	d100      	bne.n	4e2c <i2c_master_init+0x20>
    4e2a:	e12b      	b.n	5084 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e2c:	0005      	movs	r5, r0
    4e2e:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    4e30:	4a99      	ldr	r2, [pc, #612]	; (5098 <i2c_master_init+0x28c>)
    4e32:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e34:	2301      	movs	r3, #1
    4e36:	4083      	lsls	r3, r0
    4e38:	430b      	orrs	r3, r1
    4e3a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4e3c:	a909      	add	r1, sp, #36	; 0x24
    4e3e:	7b23      	ldrb	r3, [r4, #12]
    4e40:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e42:	b2ed      	uxtb	r5, r5
    4e44:	0028      	movs	r0, r5
    4e46:	4b95      	ldr	r3, [pc, #596]	; (509c <i2c_master_init+0x290>)
    4e48:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e4a:	0028      	movs	r0, r5
    4e4c:	4b94      	ldr	r3, [pc, #592]	; (50a0 <i2c_master_init+0x294>)
    4e4e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e50:	7b20      	ldrb	r0, [r4, #12]
    4e52:	2100      	movs	r1, #0
    4e54:	4b93      	ldr	r3, [pc, #588]	; (50a4 <i2c_master_init+0x298>)
    4e56:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4e58:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    4e5a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4e5c:	079b      	lsls	r3, r3, #30
    4e5e:	d505      	bpl.n	4e6c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    4e60:	b00a      	add	sp, #40	; 0x28
    4e62:	bc1c      	pop	{r2, r3, r4}
    4e64:	4690      	mov	r8, r2
    4e66:	4699      	mov	r9, r3
    4e68:	46a2      	mov	sl, r4
    4e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4e6c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    4e6e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4e70:	07db      	lsls	r3, r3, #31
    4e72:	d4f5      	bmi.n	4e60 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4e74:	2314      	movs	r3, #20
    4e76:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4e78:	683b      	ldr	r3, [r7, #0]
    4e7a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4e7c:	0018      	movs	r0, r3
    4e7e:	4b85      	ldr	r3, [pc, #532]	; (5094 <i2c_master_init+0x288>)
    4e80:	4798      	blx	r3
    4e82:	0005      	movs	r5, r0
    4e84:	2380      	movs	r3, #128	; 0x80
    4e86:	aa08      	add	r2, sp, #32
    4e88:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e8a:	2300      	movs	r3, #0
    4e8c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e8e:	2201      	movs	r2, #1
    4e90:	a908      	add	r1, sp, #32
    4e92:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    4e94:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    4e96:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4e98:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    4e9a:	2800      	cmp	r0, #0
    4e9c:	d100      	bne.n	4ea0 <i2c_master_init+0x94>
    4e9e:	e0ae      	b.n	4ffe <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    4ea0:	ab08      	add	r3, sp, #32
    4ea2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ea4:	2302      	movs	r3, #2
    4ea6:	aa08      	add	r2, sp, #32
    4ea8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4eaa:	0c00      	lsrs	r0, r0, #16
    4eac:	b2c0      	uxtb	r0, r0
    4eae:	0011      	movs	r1, r2
    4eb0:	4b7d      	ldr	r3, [pc, #500]	; (50a8 <i2c_master_init+0x29c>)
    4eb2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    4eb4:	2e00      	cmp	r6, #0
    4eb6:	d100      	bne.n	4eba <i2c_master_init+0xae>
    4eb8:	e0a6      	b.n	5008 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    4eba:	ab08      	add	r3, sp, #32
    4ebc:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ebe:	2302      	movs	r3, #2
    4ec0:	aa08      	add	r2, sp, #32
    4ec2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4ec4:	0c36      	lsrs	r6, r6, #16
    4ec6:	b2f0      	uxtb	r0, r6
    4ec8:	0011      	movs	r1, r2
    4eca:	4b77      	ldr	r3, [pc, #476]	; (50a8 <i2c_master_init+0x29c>)
    4ecc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4ece:	8aa3      	ldrh	r3, [r4, #20]
    4ed0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    4ed2:	8ae3      	ldrh	r3, [r4, #22]
    4ed4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ed6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ed8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    4eda:	2b00      	cmp	r3, #0
    4edc:	d104      	bne.n	4ee8 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4ede:	4b73      	ldr	r3, [pc, #460]	; (50ac <i2c_master_init+0x2a0>)
    4ee0:	789b      	ldrb	r3, [r3, #2]
    4ee2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ee4:	0fdb      	lsrs	r3, r3, #31
    4ee6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    4ee8:	68a1      	ldr	r1, [r4, #8]
    4eea:	6923      	ldr	r3, [r4, #16]
    4eec:	430b      	orrs	r3, r1
    4eee:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    4ef0:	2224      	movs	r2, #36	; 0x24
    4ef2:	5ca2      	ldrb	r2, [r4, r2]
    4ef4:	2a00      	cmp	r2, #0
    4ef6:	d002      	beq.n	4efe <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4ef8:	2280      	movs	r2, #128	; 0x80
    4efa:	05d2      	lsls	r2, r2, #23
    4efc:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    4efe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f00:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4f02:	222c      	movs	r2, #44	; 0x2c
    4f04:	5ca2      	ldrb	r2, [r4, r2]
    4f06:	2a00      	cmp	r2, #0
    4f08:	d103      	bne.n	4f12 <i2c_master_init+0x106>
    4f0a:	2280      	movs	r2, #128	; 0x80
    4f0c:	0492      	lsls	r2, r2, #18
    4f0e:	4291      	cmp	r1, r2
    4f10:	d102      	bne.n	4f18 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4f12:	2280      	movs	r2, #128	; 0x80
    4f14:	0512      	lsls	r2, r2, #20
    4f16:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    4f18:	222d      	movs	r2, #45	; 0x2d
    4f1a:	5ca2      	ldrb	r2, [r4, r2]
    4f1c:	2a00      	cmp	r2, #0
    4f1e:	d002      	beq.n	4f26 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    4f20:	2280      	movs	r2, #128	; 0x80
    4f22:	0412      	lsls	r2, r2, #16
    4f24:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    4f26:	222e      	movs	r2, #46	; 0x2e
    4f28:	5ca2      	ldrb	r2, [r4, r2]
    4f2a:	2a00      	cmp	r2, #0
    4f2c:	d002      	beq.n	4f34 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    4f2e:	2280      	movs	r2, #128	; 0x80
    4f30:	03d2      	lsls	r2, r2, #15
    4f32:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4f34:	4642      	mov	r2, r8
    4f36:	6812      	ldr	r2, [r2, #0]
    4f38:	4313      	orrs	r3, r2
    4f3a:	4642      	mov	r2, r8
    4f3c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4f3e:	2380      	movs	r3, #128	; 0x80
    4f40:	005b      	lsls	r3, r3, #1
    4f42:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    4f44:	3512      	adds	r5, #18
    4f46:	b2e8      	uxtb	r0, r5
    4f48:	4b59      	ldr	r3, [pc, #356]	; (50b0 <i2c_master_init+0x2a4>)
    4f4a:	4798      	blx	r3
    4f4c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4f4e:	23fa      	movs	r3, #250	; 0xfa
    4f50:	009b      	lsls	r3, r3, #2
    4f52:	6822      	ldr	r2, [r4, #0]
    4f54:	435a      	muls	r2, r3
    4f56:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4f58:	6863      	ldr	r3, [r4, #4]
    4f5a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    4f5c:	4d55      	ldr	r5, [pc, #340]	; (50b4 <i2c_master_init+0x2a8>)
    4f5e:	47a8      	blx	r5
    4f60:	9000      	str	r0, [sp, #0]
    4f62:	9101      	str	r1, [sp, #4]
    4f64:	464b      	mov	r3, r9
    4f66:	0058      	lsls	r0, r3, #1
    4f68:	47a8      	blx	r5
    4f6a:	9002      	str	r0, [sp, #8]
    4f6c:	9103      	str	r1, [sp, #12]
    4f6e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4f70:	47a8      	blx	r5
    4f72:	9004      	str	r0, [sp, #16]
    4f74:	9105      	str	r1, [sp, #20]
    4f76:	4f50      	ldr	r7, [pc, #320]	; (50b8 <i2c_master_init+0x2ac>)
    4f78:	4a50      	ldr	r2, [pc, #320]	; (50bc <i2c_master_init+0x2b0>)
    4f7a:	4b51      	ldr	r3, [pc, #324]	; (50c0 <i2c_master_init+0x2b4>)
    4f7c:	9800      	ldr	r0, [sp, #0]
    4f7e:	9901      	ldr	r1, [sp, #4]
    4f80:	47b8      	blx	r7
    4f82:	0002      	movs	r2, r0
    4f84:	000b      	movs	r3, r1
    4f86:	9804      	ldr	r0, [sp, #16]
    4f88:	9905      	ldr	r1, [sp, #20]
    4f8a:	47b8      	blx	r7
    4f8c:	4e4d      	ldr	r6, [pc, #308]	; (50c4 <i2c_master_init+0x2b8>)
    4f8e:	2200      	movs	r2, #0
    4f90:	4b4d      	ldr	r3, [pc, #308]	; (50c8 <i2c_master_init+0x2bc>)
    4f92:	47b0      	blx	r6
    4f94:	9004      	str	r0, [sp, #16]
    4f96:	9105      	str	r1, [sp, #20]
    4f98:	4648      	mov	r0, r9
    4f9a:	47a8      	blx	r5
    4f9c:	0002      	movs	r2, r0
    4f9e:	000b      	movs	r3, r1
    4fa0:	9804      	ldr	r0, [sp, #16]
    4fa2:	9905      	ldr	r1, [sp, #20]
    4fa4:	47b8      	blx	r7
    4fa6:	0002      	movs	r2, r0
    4fa8:	000b      	movs	r3, r1
    4faa:	4d48      	ldr	r5, [pc, #288]	; (50cc <i2c_master_init+0x2c0>)
    4fac:	9800      	ldr	r0, [sp, #0]
    4fae:	9901      	ldr	r1, [sp, #4]
    4fb0:	47a8      	blx	r5
    4fb2:	9a02      	ldr	r2, [sp, #8]
    4fb4:	9b03      	ldr	r3, [sp, #12]
    4fb6:	47b0      	blx	r6
    4fb8:	2200      	movs	r2, #0
    4fba:	4b45      	ldr	r3, [pc, #276]	; (50d0 <i2c_master_init+0x2c4>)
    4fbc:	47a8      	blx	r5
    4fbe:	9a02      	ldr	r2, [sp, #8]
    4fc0:	9b03      	ldr	r3, [sp, #12]
    4fc2:	4d44      	ldr	r5, [pc, #272]	; (50d4 <i2c_master_init+0x2c8>)
    4fc4:	47a8      	blx	r5
    4fc6:	4b44      	ldr	r3, [pc, #272]	; (50d8 <i2c_master_init+0x2cc>)
    4fc8:	4798      	blx	r3
    4fca:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4fcc:	2380      	movs	r3, #128	; 0x80
    4fce:	049b      	lsls	r3, r3, #18
    4fd0:	68a2      	ldr	r2, [r4, #8]
    4fd2:	429a      	cmp	r2, r3
    4fd4:	d01e      	beq.n	5014 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4fd6:	0003      	movs	r3, r0
    4fd8:	2040      	movs	r0, #64	; 0x40
    4fda:	2dff      	cmp	r5, #255	; 0xff
    4fdc:	d900      	bls.n	4fe0 <i2c_master_init+0x1d4>
    4fde:	e73f      	b.n	4e60 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    4fe0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    4fe2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4fe4:	25ff      	movs	r5, #255	; 0xff
    4fe6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    4fe8:	0624      	lsls	r4, r4, #24
    4fea:	4325      	orrs	r5, r4
    4fec:	0400      	lsls	r0, r0, #16
    4fee:	23ff      	movs	r3, #255	; 0xff
    4ff0:	041b      	lsls	r3, r3, #16
    4ff2:	4018      	ands	r0, r3
    4ff4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4ff6:	4643      	mov	r3, r8
    4ff8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    4ffa:	2000      	movs	r0, #0
    4ffc:	e730      	b.n	4e60 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4ffe:	2100      	movs	r1, #0
    5000:	4640      	mov	r0, r8
    5002:	4b36      	ldr	r3, [pc, #216]	; (50dc <i2c_master_init+0x2d0>)
    5004:	4798      	blx	r3
    5006:	e74b      	b.n	4ea0 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5008:	2101      	movs	r1, #1
    500a:	4640      	mov	r0, r8
    500c:	4b33      	ldr	r3, [pc, #204]	; (50dc <i2c_master_init+0x2d0>)
    500e:	4798      	blx	r3
    5010:	0006      	movs	r6, r0
    5012:	e752      	b.n	4eba <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5014:	26fa      	movs	r6, #250	; 0xfa
    5016:	00b6      	lsls	r6, r6, #2
    5018:	4653      	mov	r3, sl
    501a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    501c:	9800      	ldr	r0, [sp, #0]
    501e:	9901      	ldr	r1, [sp, #4]
    5020:	0002      	movs	r2, r0
    5022:	000b      	movs	r3, r1
    5024:	4c27      	ldr	r4, [pc, #156]	; (50c4 <i2c_master_init+0x2b8>)
    5026:	47a0      	blx	r4
    5028:	9000      	str	r0, [sp, #0]
    502a:	9101      	str	r1, [sp, #4]
    502c:	0030      	movs	r0, r6
    502e:	4b21      	ldr	r3, [pc, #132]	; (50b4 <i2c_master_init+0x2a8>)
    5030:	4798      	blx	r3
    5032:	2200      	movs	r2, #0
    5034:	4b2a      	ldr	r3, [pc, #168]	; (50e0 <i2c_master_init+0x2d4>)
    5036:	47b8      	blx	r7
    5038:	0002      	movs	r2, r0
    503a:	000b      	movs	r3, r1
    503c:	9800      	ldr	r0, [sp, #0]
    503e:	9901      	ldr	r1, [sp, #4]
    5040:	4c24      	ldr	r4, [pc, #144]	; (50d4 <i2c_master_init+0x2c8>)
    5042:	47a0      	blx	r4
    5044:	2200      	movs	r2, #0
    5046:	4b22      	ldr	r3, [pc, #136]	; (50d0 <i2c_master_init+0x2c4>)
    5048:	4c20      	ldr	r4, [pc, #128]	; (50cc <i2c_master_init+0x2c0>)
    504a:	47a0      	blx	r4
    504c:	4b22      	ldr	r3, [pc, #136]	; (50d8 <i2c_master_init+0x2cc>)
    504e:	4798      	blx	r3
    5050:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5052:	d00c      	beq.n	506e <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5054:	0031      	movs	r1, r6
    5056:	9807      	ldr	r0, [sp, #28]
    5058:	4b22      	ldr	r3, [pc, #136]	; (50e4 <i2c_master_init+0x2d8>)
    505a:	4798      	blx	r3
    505c:	3802      	subs	r0, #2
    505e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5060:	002b      	movs	r3, r5
    5062:	2dff      	cmp	r5, #255	; 0xff
    5064:	d80c      	bhi.n	5080 <i2c_master_init+0x274>
    5066:	28ff      	cmp	r0, #255	; 0xff
    5068:	d9bc      	bls.n	4fe4 <i2c_master_init+0x1d8>
    506a:	2040      	movs	r0, #64	; 0x40
    506c:	e6f8      	b.n	4e60 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    506e:	0071      	lsls	r1, r6, #1
    5070:	1e48      	subs	r0, r1, #1
    5072:	9b07      	ldr	r3, [sp, #28]
    5074:	469c      	mov	ip, r3
    5076:	4460      	add	r0, ip
    5078:	4b1a      	ldr	r3, [pc, #104]	; (50e4 <i2c_master_init+0x2d8>)
    507a:	4798      	blx	r3
    507c:	3801      	subs	r0, #1
    507e:	e7ef      	b.n	5060 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5080:	2040      	movs	r0, #64	; 0x40
    5082:	e6ed      	b.n	4e60 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5084:	4a04      	ldr	r2, [pc, #16]	; (5098 <i2c_master_init+0x28c>)
    5086:	6a13      	ldr	r3, [r2, #32]
    5088:	2102      	movs	r1, #2
    508a:	430b      	orrs	r3, r1
    508c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    508e:	2518      	movs	r5, #24
    5090:	e6d4      	b.n	4e3c <i2c_master_init+0x30>
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0000576d 	.word	0x0000576d
    5098:	40000400 	.word	0x40000400
    509c:	00006a65 	.word	0x00006a65
    50a0:	000069f5 	.word	0x000069f5
    50a4:	000055c5 	.word	0x000055c5
    50a8:	00006b61 	.word	0x00006b61
    50ac:	41002000 	.word	0x41002000
    50b0:	00006a89 	.word	0x00006a89
    50b4:	000163b9 	.word	0x000163b9
    50b8:	000157a1 	.word	0x000157a1
    50bc:	e826d695 	.word	0xe826d695
    50c0:	3e112e0b 	.word	0x3e112e0b
    50c4:	00014919 	.word	0x00014919
    50c8:	40240000 	.word	0x40240000
    50cc:	00015ca1 	.word	0x00015ca1
    50d0:	3ff00000 	.word	0x3ff00000
    50d4:	00014f39 	.word	0x00014f39
    50d8:	000162cd 	.word	0x000162cd
    50dc:	00005611 	.word	0x00005611
    50e0:	40080000 	.word	0x40080000
    50e4:	00013495 	.word	0x00013495

000050e8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    50e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ea:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50ec:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    50ee:	4e08      	ldr	r6, [pc, #32]	; (5110 <i2c_master_reset+0x28>)
    50f0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50f2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    50f4:	0020      	movs	r0, r4
    50f6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    50f8:	2383      	movs	r3, #131	; 0x83
    50fa:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    50fc:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    50fe:	682b      	ldr	r3, [r5, #0]
    5100:	2202      	movs	r2, #2
    5102:	4393      	bics	r3, r2
    5104:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5106:	0020      	movs	r0, r4
    5108:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    510a:	2301      	movs	r3, #1
    510c:	603b      	str	r3, [r7, #0]
}
    510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5110:	00004e01 	.word	0x00004e01

00005114 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5114:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5116:	7e1a      	ldrb	r2, [r3, #24]
    5118:	0792      	lsls	r2, r2, #30
    511a:	d507      	bpl.n	512c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    511c:	2202      	movs	r2, #2
    511e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5120:	8b5b      	ldrh	r3, [r3, #26]
    5122:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5124:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    5126:	17db      	asrs	r3, r3, #31
    5128:	4018      	ands	r0, r3
}
    512a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    512c:	8b5a      	ldrh	r2, [r3, #26]
    512e:	0752      	lsls	r2, r2, #29
    5130:	d506      	bpl.n	5140 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5132:	6859      	ldr	r1, [r3, #4]
    5134:	22c0      	movs	r2, #192	; 0xc0
    5136:	0292      	lsls	r2, r2, #10
    5138:	430a      	orrs	r2, r1
    513a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    513c:	2018      	movs	r0, #24
    513e:	e7f4      	b.n	512a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5140:	2000      	movs	r0, #0
    5142:	e7f2      	b.n	512a <_i2c_master_address_response+0x16>

00005144 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    5144:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5146:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5148:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    514a:	2401      	movs	r4, #1
    514c:	2502      	movs	r5, #2
    514e:	7e11      	ldrb	r1, [r2, #24]
    5150:	4221      	tst	r1, r4
    5152:	d10b      	bne.n	516c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5154:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5156:	4229      	tst	r1, r5
    5158:	d106      	bne.n	5168 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    515a:	3301      	adds	r3, #1
    515c:	b29b      	uxth	r3, r3
    515e:	8901      	ldrh	r1, [r0, #8]
    5160:	4299      	cmp	r1, r3
    5162:	d8f4      	bhi.n	514e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    5164:	2012      	movs	r0, #18
    5166:	e002      	b.n	516e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5168:	2000      	movs	r0, #0
    516a:	e000      	b.n	516e <_i2c_master_wait_for_bus+0x2a>
    516c:	2000      	movs	r0, #0
}
    516e:	bd30      	pop	{r4, r5, pc}

00005170 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5170:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5172:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5174:	6862      	ldr	r2, [r4, #4]
    5176:	2380      	movs	r3, #128	; 0x80
    5178:	02db      	lsls	r3, r3, #11
    517a:	4313      	orrs	r3, r2
    517c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    517e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5180:	4b02      	ldr	r3, [pc, #8]	; (518c <_i2c_master_send_hs_master_code+0x1c>)
    5182:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5184:	2301      	movs	r3, #1
    5186:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5188:	bd10      	pop	{r4, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	00005145 	.word	0x00005145

00005190 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5190:	b5f0      	push	{r4, r5, r6, r7, lr}
    5192:	46de      	mov	lr, fp
    5194:	4657      	mov	r7, sl
    5196:	464e      	mov	r6, r9
    5198:	4645      	mov	r5, r8
    519a:	b5e0      	push	{r5, r6, r7, lr}
    519c:	b083      	sub	sp, #12
    519e:	0006      	movs	r6, r0
    51a0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    51a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    51a4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    51a6:	682b      	ldr	r3, [r5, #0]
    51a8:	011b      	lsls	r3, r3, #4
    51aa:	0fdb      	lsrs	r3, r3, #31
    51ac:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    51ae:	7a4b      	ldrb	r3, [r1, #9]
    51b0:	2b00      	cmp	r3, #0
    51b2:	d12b      	bne.n	520c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    51b4:	686b      	ldr	r3, [r5, #4]
    51b6:	4a58      	ldr	r2, [pc, #352]	; (5318 <_i2c_master_read_packet+0x188>)
    51b8:	4013      	ands	r3, r2
    51ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    51bc:	464b      	mov	r3, r9
    51be:	7a1b      	ldrb	r3, [r3, #8]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d127      	bne.n	5214 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    51c4:	464b      	mov	r3, r9
    51c6:	881b      	ldrh	r3, [r3, #0]
    51c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    51ca:	464a      	mov	r2, r9
    51cc:	7a52      	ldrb	r2, [r2, #9]
    51ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    51d0:	4313      	orrs	r3, r2
    51d2:	2201      	movs	r2, #1
    51d4:	4313      	orrs	r3, r2
    51d6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    51d8:	0030      	movs	r0, r6
    51da:	4b50      	ldr	r3, [pc, #320]	; (531c <_i2c_master_read_packet+0x18c>)
    51dc:	4798      	blx	r3
    51de:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    51e0:	4653      	mov	r3, sl
    51e2:	2b00      	cmp	r3, #0
    51e4:	d003      	beq.n	51ee <_i2c_master_read_packet+0x5e>
    51e6:	464b      	mov	r3, r9
    51e8:	885b      	ldrh	r3, [r3, #2]
    51ea:	2b01      	cmp	r3, #1
    51ec:	d03b      	beq.n	5266 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    51ee:	686b      	ldr	r3, [r5, #4]
    51f0:	4a49      	ldr	r2, [pc, #292]	; (5318 <_i2c_master_read_packet+0x188>)
    51f2:	4013      	ands	r3, r2
    51f4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    51f6:	9b01      	ldr	r3, [sp, #4]
    51f8:	2b00      	cmp	r3, #0
    51fa:	d03a      	beq.n	5272 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    51fc:	9801      	ldr	r0, [sp, #4]
    51fe:	b003      	add	sp, #12
    5200:	bc3c      	pop	{r2, r3, r4, r5}
    5202:	4690      	mov	r8, r2
    5204:	4699      	mov	r9, r3
    5206:	46a2      	mov	sl, r4
    5208:	46ab      	mov	fp, r5
    520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    520c:	7a89      	ldrb	r1, [r1, #10]
    520e:	4b44      	ldr	r3, [pc, #272]	; (5320 <_i2c_master_read_packet+0x190>)
    5210:	4798      	blx	r3
    5212:	e7cf      	b.n	51b4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    5214:	464b      	mov	r3, r9
    5216:	881b      	ldrh	r3, [r3, #0]
    5218:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    521a:	464a      	mov	r2, r9
    521c:	7a52      	ldrb	r2, [r2, #9]
    521e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5220:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5222:	2280      	movs	r2, #128	; 0x80
    5224:	0212      	lsls	r2, r2, #8
    5226:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5228:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    522a:	0030      	movs	r0, r6
    522c:	4b3b      	ldr	r3, [pc, #236]	; (531c <_i2c_master_read_packet+0x18c>)
    522e:	4798      	blx	r3
    5230:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5232:	686b      	ldr	r3, [r5, #4]
    5234:	4a38      	ldr	r2, [pc, #224]	; (5318 <_i2c_master_read_packet+0x188>)
    5236:	4013      	ands	r3, r2
    5238:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    523a:	2800      	cmp	r0, #0
    523c:	d1de      	bne.n	51fc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    523e:	0030      	movs	r0, r6
    5240:	4b38      	ldr	r3, [pc, #224]	; (5324 <_i2c_master_read_packet+0x194>)
    5242:	4798      	blx	r3
    5244:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    5246:	2800      	cmp	r0, #0
    5248:	d1d8      	bne.n	51fc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    524a:	464b      	mov	r3, r9
    524c:	881b      	ldrh	r3, [r3, #0]
    524e:	0a1b      	lsrs	r3, r3, #8
    5250:	2278      	movs	r2, #120	; 0x78
    5252:	4313      	orrs	r3, r2
    5254:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5256:	464a      	mov	r2, r9
    5258:	7a52      	ldrb	r2, [r2, #9]
    525a:	0392      	lsls	r2, r2, #14
    525c:	2101      	movs	r1, #1
    525e:	430a      	orrs	r2, r1
    5260:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5262:	626b      	str	r3, [r5, #36]	; 0x24
    5264:	e7b8      	b.n	51d8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5266:	686a      	ldr	r2, [r5, #4]
    5268:	2380      	movs	r3, #128	; 0x80
    526a:	02db      	lsls	r3, r3, #11
    526c:	4313      	orrs	r3, r2
    526e:	606b      	str	r3, [r5, #4]
    5270:	e7c1      	b.n	51f6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    5272:	0030      	movs	r0, r6
    5274:	4b2b      	ldr	r3, [pc, #172]	; (5324 <_i2c_master_read_packet+0x194>)
    5276:	4798      	blx	r3
    5278:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    527a:	2800      	cmp	r0, #0
    527c:	d1be      	bne.n	51fc <_i2c_master_read_packet+0x6c>
    527e:	3c01      	subs	r4, #1
    5280:	b2a4      	uxth	r4, r4
    5282:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5284:	4b28      	ldr	r3, [pc, #160]	; (5328 <_i2c_master_read_packet+0x198>)
    5286:	469b      	mov	fp, r3
    5288:	e015      	b.n	52b6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    528a:	2c01      	cmp	r4, #1
    528c:	d020      	beq.n	52d0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    528e:	0030      	movs	r0, r6
    5290:	4b26      	ldr	r3, [pc, #152]	; (532c <_i2c_master_read_packet+0x19c>)
    5292:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5294:	4643      	mov	r3, r8
    5296:	1c5f      	adds	r7, r3, #1
    5298:	b2bf      	uxth	r7, r7
    529a:	2328      	movs	r3, #40	; 0x28
    529c:	5ceb      	ldrb	r3, [r5, r3]
    529e:	464a      	mov	r2, r9
    52a0:	6852      	ldr	r2, [r2, #4]
    52a2:	4641      	mov	r1, r8
    52a4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    52a6:	0030      	movs	r0, r6
    52a8:	4b1c      	ldr	r3, [pc, #112]	; (531c <_i2c_master_read_packet+0x18c>)
    52aa:	4798      	blx	r3
    52ac:	3c01      	subs	r4, #1
    52ae:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    52b0:	2800      	cmp	r0, #0
    52b2:	d115      	bne.n	52e0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    52b4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    52b6:	455c      	cmp	r4, fp
    52b8:	d014      	beq.n	52e4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52ba:	8b6b      	ldrh	r3, [r5, #26]
    52bc:	069b      	lsls	r3, r3, #26
    52be:	d527      	bpl.n	5310 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    52c0:	7af3      	ldrb	r3, [r6, #11]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d0e3      	beq.n	528e <_i2c_master_read_packet+0xfe>
    52c6:	4653      	mov	r3, sl
    52c8:	2b00      	cmp	r3, #0
    52ca:	d1de      	bne.n	528a <_i2c_master_read_packet+0xfa>
    52cc:	2c00      	cmp	r4, #0
    52ce:	d1de      	bne.n	528e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    52d0:	686a      	ldr	r2, [r5, #4]
    52d2:	2380      	movs	r3, #128	; 0x80
    52d4:	02db      	lsls	r3, r3, #11
    52d6:	4313      	orrs	r3, r2
    52d8:	606b      	str	r3, [r5, #4]
    52da:	3c01      	subs	r4, #1
    52dc:	b2a4      	uxth	r4, r4
    52de:	e7ea      	b.n	52b6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    52e0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    52e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    52e4:	7ab3      	ldrb	r3, [r6, #10]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d109      	bne.n	52fe <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    52ea:	0030      	movs	r0, r6
    52ec:	4b0f      	ldr	r3, [pc, #60]	; (532c <_i2c_master_read_packet+0x19c>)
    52ee:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    52f0:	2328      	movs	r3, #40	; 0x28
    52f2:	5cea      	ldrb	r2, [r5, r3]
    52f4:	464b      	mov	r3, r9
    52f6:	685b      	ldr	r3, [r3, #4]
    52f8:	4641      	mov	r1, r8
    52fa:	545a      	strb	r2, [r3, r1]
    52fc:	e77e      	b.n	51fc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    52fe:	0030      	movs	r0, r6
    5300:	4b0a      	ldr	r3, [pc, #40]	; (532c <_i2c_master_read_packet+0x19c>)
    5302:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5304:	686a      	ldr	r2, [r5, #4]
    5306:	23c0      	movs	r3, #192	; 0xc0
    5308:	029b      	lsls	r3, r3, #10
    530a:	4313      	orrs	r3, r2
    530c:	606b      	str	r3, [r5, #4]
    530e:	e7ec      	b.n	52ea <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5310:	2341      	movs	r3, #65	; 0x41
    5312:	9301      	str	r3, [sp, #4]
    5314:	e772      	b.n	51fc <_i2c_master_read_packet+0x6c>
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	fffbffff 	.word	0xfffbffff
    531c:	00005145 	.word	0x00005145
    5320:	00005171 	.word	0x00005171
    5324:	00005115 	.word	0x00005115
    5328:	0000ffff 	.word	0x0000ffff
    532c:	00004e01 	.word	0x00004e01

00005330 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
    5332:	46de      	mov	lr, fp
    5334:	4657      	mov	r7, sl
    5336:	464e      	mov	r6, r9
    5338:	4645      	mov	r5, r8
    533a:	b5e0      	push	{r5, r6, r7, lr}
    533c:	b083      	sub	sp, #12
    533e:	0006      	movs	r6, r0
    5340:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5342:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5344:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    5346:	4b32      	ldr	r3, [pc, #200]	; (5410 <_i2c_master_write_packet+0xe0>)
    5348:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    534a:	7a7b      	ldrb	r3, [r7, #9]
    534c:	2b00      	cmp	r3, #0
    534e:	d11d      	bne.n	538c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5350:	686b      	ldr	r3, [r5, #4]
    5352:	4a30      	ldr	r2, [pc, #192]	; (5414 <_i2c_master_write_packet+0xe4>)
    5354:	4013      	ands	r3, r2
    5356:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5358:	7a3b      	ldrb	r3, [r7, #8]
    535a:	2b00      	cmp	r3, #0
    535c:	d01b      	beq.n	5396 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    535e:	883b      	ldrh	r3, [r7, #0]
    5360:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5362:	7a7a      	ldrb	r2, [r7, #9]
    5364:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5366:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5368:	2280      	movs	r2, #128	; 0x80
    536a:	0212      	lsls	r2, r2, #8
    536c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    536e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5370:	0030      	movs	r0, r6
    5372:	4b29      	ldr	r3, [pc, #164]	; (5418 <_i2c_master_write_packet+0xe8>)
    5374:	4798      	blx	r3
    5376:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5378:	2800      	cmp	r0, #0
    537a:	d013      	beq.n	53a4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    537c:	9801      	ldr	r0, [sp, #4]
    537e:	b003      	add	sp, #12
    5380:	bc3c      	pop	{r2, r3, r4, r5}
    5382:	4690      	mov	r8, r2
    5384:	4699      	mov	r9, r3
    5386:	46a2      	mov	sl, r4
    5388:	46ab      	mov	fp, r5
    538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    538c:	7ab9      	ldrb	r1, [r7, #10]
    538e:	0030      	movs	r0, r6
    5390:	4b22      	ldr	r3, [pc, #136]	; (541c <_i2c_master_write_packet+0xec>)
    5392:	4798      	blx	r3
    5394:	e7dc      	b.n	5350 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5396:	883b      	ldrh	r3, [r7, #0]
    5398:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    539a:	7a7a      	ldrb	r2, [r7, #9]
    539c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    539e:	4313      	orrs	r3, r2
    53a0:	626b      	str	r3, [r5, #36]	; 0x24
    53a2:	e7e5      	b.n	5370 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    53a4:	0030      	movs	r0, r6
    53a6:	4b1e      	ldr	r3, [pc, #120]	; (5420 <_i2c_master_write_packet+0xf0>)
    53a8:	4798      	blx	r3
    53aa:	1e03      	subs	r3, r0, #0
    53ac:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    53ae:	d1e5      	bne.n	537c <_i2c_master_write_packet+0x4c>
    53b0:	46a0      	mov	r8, r4
    53b2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    53b4:	3320      	adds	r3, #32
    53b6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    53b8:	4b15      	ldr	r3, [pc, #84]	; (5410 <_i2c_master_write_packet+0xe0>)
    53ba:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    53bc:	4b16      	ldr	r3, [pc, #88]	; (5418 <_i2c_master_write_packet+0xe8>)
    53be:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    53c0:	4544      	cmp	r4, r8
    53c2:	d015      	beq.n	53f0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    53c4:	8b6b      	ldrh	r3, [r5, #26]
    53c6:	464a      	mov	r2, r9
    53c8:	4213      	tst	r3, r2
    53ca:	d01d      	beq.n	5408 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    53cc:	0030      	movs	r0, r6
    53ce:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	5d1a      	ldrb	r2, [r3, r4]
    53d4:	2328      	movs	r3, #40	; 0x28
    53d6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    53d8:	0030      	movs	r0, r6
    53da:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    53dc:	2800      	cmp	r0, #0
    53de:	d106      	bne.n	53ee <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    53e0:	8b6b      	ldrh	r3, [r5, #26]
    53e2:	3401      	adds	r4, #1
    53e4:	075b      	lsls	r3, r3, #29
    53e6:	d5eb      	bpl.n	53c0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    53e8:	231e      	movs	r3, #30
    53ea:	9301      	str	r3, [sp, #4]
    53ec:	e000      	b.n	53f0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    53ee:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    53f0:	7ab3      	ldrb	r3, [r6, #10]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d0c2      	beq.n	537c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    53f6:	0030      	movs	r0, r6
    53f8:	4b05      	ldr	r3, [pc, #20]	; (5410 <_i2c_master_write_packet+0xe0>)
    53fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    53fc:	686a      	ldr	r2, [r5, #4]
    53fe:	23c0      	movs	r3, #192	; 0xc0
    5400:	029b      	lsls	r3, r3, #10
    5402:	4313      	orrs	r3, r2
    5404:	606b      	str	r3, [r5, #4]
    5406:	e7b9      	b.n	537c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5408:	2341      	movs	r3, #65	; 0x41
    540a:	9301      	str	r3, [sp, #4]
    540c:	e7b6      	b.n	537c <_i2c_master_write_packet+0x4c>
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	00004e01 	.word	0x00004e01
    5414:	fffbffff 	.word	0xfffbffff
    5418:	00005145 	.word	0x00005145
    541c:	00005171 	.word	0x00005171
    5420:	00005115 	.word	0x00005115

00005424 <i2c_master_read_packet_wait>:
{
    5424:	b510      	push	{r4, lr}
	module->send_stop = true;
    5426:	2301      	movs	r3, #1
    5428:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    542a:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    542c:	4b01      	ldr	r3, [pc, #4]	; (5434 <i2c_master_read_packet_wait+0x10>)
    542e:	4798      	blx	r3
}
    5430:	bd10      	pop	{r4, pc}
    5432:	46c0      	nop			; (mov r8, r8)
    5434:	00005191 	.word	0x00005191

00005438 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5438:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    543a:	2300      	movs	r3, #0
    543c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    543e:	3301      	adds	r3, #1
    5440:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    5442:	4b01      	ldr	r3, [pc, #4]	; (5448 <i2c_master_write_packet_wait_no_stop+0x10>)
    5444:	4798      	blx	r3
}
    5446:	bd10      	pop	{r4, pc}
    5448:	00005331 	.word	0x00005331

0000544c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    544c:	b5f0      	push	{r4, r5, r6, r7, lr}
    544e:	46de      	mov	lr, fp
    5450:	4657      	mov	r7, sl
    5452:	464e      	mov	r6, r9
    5454:	4645      	mov	r5, r8
    5456:	b5e0      	push	{r5, r6, r7, lr}
    5458:	b087      	sub	sp, #28
    545a:	4680      	mov	r8, r0
    545c:	9104      	str	r1, [sp, #16]
    545e:	0016      	movs	r6, r2
    5460:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5462:	2200      	movs	r2, #0
    5464:	2300      	movs	r3, #0
    5466:	2100      	movs	r1, #0
    5468:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    546a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    546c:	2001      	movs	r0, #1
    546e:	0021      	movs	r1, r4
    5470:	9600      	str	r6, [sp, #0]
    5472:	9701      	str	r7, [sp, #4]
    5474:	465c      	mov	r4, fp
    5476:	9403      	str	r4, [sp, #12]
    5478:	4644      	mov	r4, r8
    547a:	9405      	str	r4, [sp, #20]
    547c:	e013      	b.n	54a6 <long_division+0x5a>
    547e:	2420      	movs	r4, #32
    5480:	1a64      	subs	r4, r4, r1
    5482:	0005      	movs	r5, r0
    5484:	40e5      	lsrs	r5, r4
    5486:	46a8      	mov	r8, r5
    5488:	e014      	b.n	54b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    548a:	9c00      	ldr	r4, [sp, #0]
    548c:	9d01      	ldr	r5, [sp, #4]
    548e:	1b12      	subs	r2, r2, r4
    5490:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5492:	465c      	mov	r4, fp
    5494:	464d      	mov	r5, r9
    5496:	432c      	orrs	r4, r5
    5498:	46a3      	mov	fp, r4
    549a:	9c03      	ldr	r4, [sp, #12]
    549c:	4645      	mov	r5, r8
    549e:	432c      	orrs	r4, r5
    54a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    54a2:	3901      	subs	r1, #1
    54a4:	d325      	bcc.n	54f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    54a6:	2420      	movs	r4, #32
    54a8:	4264      	negs	r4, r4
    54aa:	190c      	adds	r4, r1, r4
    54ac:	d4e7      	bmi.n	547e <long_division+0x32>
    54ae:	0005      	movs	r5, r0
    54b0:	40a5      	lsls	r5, r4
    54b2:	46a8      	mov	r8, r5
    54b4:	0004      	movs	r4, r0
    54b6:	408c      	lsls	r4, r1
    54b8:	46a1      	mov	r9, r4
		r = r << 1;
    54ba:	1892      	adds	r2, r2, r2
    54bc:	415b      	adcs	r3, r3
    54be:	0014      	movs	r4, r2
    54c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    54c2:	9e05      	ldr	r6, [sp, #20]
    54c4:	464f      	mov	r7, r9
    54c6:	403e      	ands	r6, r7
    54c8:	46b4      	mov	ip, r6
    54ca:	9e04      	ldr	r6, [sp, #16]
    54cc:	4647      	mov	r7, r8
    54ce:	403e      	ands	r6, r7
    54d0:	46b2      	mov	sl, r6
    54d2:	4666      	mov	r6, ip
    54d4:	4657      	mov	r7, sl
    54d6:	433e      	orrs	r6, r7
    54d8:	d003      	beq.n	54e2 <long_division+0x96>
			r |= 0x01;
    54da:	0006      	movs	r6, r0
    54dc:	4326      	orrs	r6, r4
    54de:	0032      	movs	r2, r6
    54e0:	002b      	movs	r3, r5
		if (r >= d) {
    54e2:	9c00      	ldr	r4, [sp, #0]
    54e4:	9d01      	ldr	r5, [sp, #4]
    54e6:	429d      	cmp	r5, r3
    54e8:	d8db      	bhi.n	54a2 <long_division+0x56>
    54ea:	d1ce      	bne.n	548a <long_division+0x3e>
    54ec:	4294      	cmp	r4, r2
    54ee:	d8d8      	bhi.n	54a2 <long_division+0x56>
    54f0:	e7cb      	b.n	548a <long_division+0x3e>
    54f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    54f4:	4658      	mov	r0, fp
    54f6:	0019      	movs	r1, r3
    54f8:	b007      	add	sp, #28
    54fa:	bc3c      	pop	{r2, r3, r4, r5}
    54fc:	4690      	mov	r8, r2
    54fe:	4699      	mov	r9, r3
    5500:	46a2      	mov	sl, r4
    5502:	46ab      	mov	fp, r5
    5504:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005506 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5506:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5508:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    550a:	2340      	movs	r3, #64	; 0x40
    550c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    550e:	4281      	cmp	r1, r0
    5510:	d202      	bcs.n	5518 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5512:	0018      	movs	r0, r3
    5514:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5516:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5518:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    551a:	1c63      	adds	r3, r4, #1
    551c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    551e:	4288      	cmp	r0, r1
    5520:	d9f9      	bls.n	5516 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5522:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5524:	2cff      	cmp	r4, #255	; 0xff
    5526:	d8f4      	bhi.n	5512 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5528:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    552a:	2300      	movs	r3, #0
    552c:	e7f1      	b.n	5512 <_sercom_get_sync_baud_val+0xc>
    552e:	Address 0x0000552e is out of bounds.


00005530 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5530:	b5f0      	push	{r4, r5, r6, r7, lr}
    5532:	b083      	sub	sp, #12
    5534:	000f      	movs	r7, r1
    5536:	0016      	movs	r6, r2
    5538:	aa08      	add	r2, sp, #32
    553a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    553c:	0004      	movs	r4, r0
    553e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5540:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5542:	42bc      	cmp	r4, r7
    5544:	d902      	bls.n	554c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5546:	0010      	movs	r0, r2
    5548:	b003      	add	sp, #12
    554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    554c:	2b00      	cmp	r3, #0
    554e:	d114      	bne.n	557a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5550:	0002      	movs	r2, r0
    5552:	0008      	movs	r0, r1
    5554:	2100      	movs	r1, #0
    5556:	4c19      	ldr	r4, [pc, #100]	; (55bc <_sercom_get_async_baud_val+0x8c>)
    5558:	47a0      	blx	r4
    555a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    555c:	003a      	movs	r2, r7
    555e:	2300      	movs	r3, #0
    5560:	2000      	movs	r0, #0
    5562:	4c17      	ldr	r4, [pc, #92]	; (55c0 <_sercom_get_async_baud_val+0x90>)
    5564:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5566:	2200      	movs	r2, #0
    5568:	2301      	movs	r3, #1
    556a:	1a12      	subs	r2, r2, r0
    556c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    556e:	0c12      	lsrs	r2, r2, #16
    5570:	041b      	lsls	r3, r3, #16
    5572:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5574:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5576:	2200      	movs	r2, #0
    5578:	e7e5      	b.n	5546 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    557a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    557c:	2b01      	cmp	r3, #1
    557e:	d1f9      	bne.n	5574 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5580:	000a      	movs	r2, r1
    5582:	2300      	movs	r3, #0
    5584:	2100      	movs	r1, #0
    5586:	4c0d      	ldr	r4, [pc, #52]	; (55bc <_sercom_get_async_baud_val+0x8c>)
    5588:	47a0      	blx	r4
    558a:	0002      	movs	r2, r0
    558c:	000b      	movs	r3, r1
    558e:	9200      	str	r2, [sp, #0]
    5590:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5592:	0038      	movs	r0, r7
    5594:	2100      	movs	r1, #0
    5596:	4c0a      	ldr	r4, [pc, #40]	; (55c0 <_sercom_get_async_baud_val+0x90>)
    5598:	47a0      	blx	r4
    559a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    559c:	2380      	movs	r3, #128	; 0x80
    559e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    55a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    55a2:	4298      	cmp	r0, r3
    55a4:	d8cf      	bhi.n	5546 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    55a6:	0f79      	lsrs	r1, r7, #29
    55a8:	00f8      	lsls	r0, r7, #3
    55aa:	9a00      	ldr	r2, [sp, #0]
    55ac:	9b01      	ldr	r3, [sp, #4]
    55ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    55b0:	00ea      	lsls	r2, r5, #3
    55b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    55b4:	b2d2      	uxtb	r2, r2
    55b6:	0352      	lsls	r2, r2, #13
    55b8:	432a      	orrs	r2, r5
    55ba:	e7db      	b.n	5574 <_sercom_get_async_baud_val+0x44>
    55bc:	000138b1 	.word	0x000138b1
    55c0:	0000544d 	.word	0x0000544d

000055c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    55c4:	b510      	push	{r4, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    55ca:	4b0e      	ldr	r3, [pc, #56]	; (5604 <sercom_set_gclk_generator+0x40>)
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d007      	beq.n	55e2 <sercom_set_gclk_generator+0x1e>
    55d2:	2900      	cmp	r1, #0
    55d4:	d105      	bne.n	55e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    55d6:	4b0b      	ldr	r3, [pc, #44]	; (5604 <sercom_set_gclk_generator+0x40>)
    55d8:	785b      	ldrb	r3, [r3, #1]
    55da:	4283      	cmp	r3, r0
    55dc:	d010      	beq.n	5600 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    55de:	201d      	movs	r0, #29
    55e0:	e00c      	b.n	55fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    55e2:	a901      	add	r1, sp, #4
    55e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    55e6:	2011      	movs	r0, #17
    55e8:	4b07      	ldr	r3, [pc, #28]	; (5608 <sercom_set_gclk_generator+0x44>)
    55ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    55ec:	2011      	movs	r0, #17
    55ee:	4b07      	ldr	r3, [pc, #28]	; (560c <sercom_set_gclk_generator+0x48>)
    55f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    55f2:	4b04      	ldr	r3, [pc, #16]	; (5604 <sercom_set_gclk_generator+0x40>)
    55f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    55f6:	2201      	movs	r2, #1
    55f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    55fa:	2000      	movs	r0, #0
}
    55fc:	b002      	add	sp, #8
    55fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5600:	2000      	movs	r0, #0
    5602:	e7fb      	b.n	55fc <sercom_set_gclk_generator+0x38>
    5604:	200000c4 	.word	0x200000c4
    5608:	00006a65 	.word	0x00006a65
    560c:	000069f5 	.word	0x000069f5

00005610 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5610:	4b3c      	ldr	r3, [pc, #240]	; (5704 <_sercom_get_default_pad+0xf4>)
    5612:	4298      	cmp	r0, r3
    5614:	d032      	beq.n	567c <_sercom_get_default_pad+0x6c>
    5616:	d90a      	bls.n	562e <_sercom_get_default_pad+0x1e>
    5618:	4b3b      	ldr	r3, [pc, #236]	; (5708 <_sercom_get_default_pad+0xf8>)
    561a:	4298      	cmp	r0, r3
    561c:	d04e      	beq.n	56bc <_sercom_get_default_pad+0xac>
    561e:	4b3b      	ldr	r3, [pc, #236]	; (570c <_sercom_get_default_pad+0xfc>)
    5620:	4298      	cmp	r0, r3
    5622:	d055      	beq.n	56d0 <_sercom_get_default_pad+0xc0>
    5624:	4b3a      	ldr	r3, [pc, #232]	; (5710 <_sercom_get_default_pad+0x100>)
    5626:	4298      	cmp	r0, r3
    5628:	d038      	beq.n	569c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    562a:	2000      	movs	r0, #0
}
    562c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    562e:	2384      	movs	r3, #132	; 0x84
    5630:	05db      	lsls	r3, r3, #23
    5632:	4298      	cmp	r0, r3
    5634:	d00c      	beq.n	5650 <_sercom_get_default_pad+0x40>
    5636:	4b37      	ldr	r3, [pc, #220]	; (5714 <_sercom_get_default_pad+0x104>)
    5638:	4298      	cmp	r0, r3
    563a:	d1f6      	bne.n	562a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    563c:	2901      	cmp	r1, #1
    563e:	d017      	beq.n	5670 <_sercom_get_default_pad+0x60>
    5640:	2900      	cmp	r1, #0
    5642:	d057      	beq.n	56f4 <_sercom_get_default_pad+0xe4>
    5644:	2902      	cmp	r1, #2
    5646:	d015      	beq.n	5674 <_sercom_get_default_pad+0x64>
    5648:	2903      	cmp	r1, #3
    564a:	d015      	beq.n	5678 <_sercom_get_default_pad+0x68>
	return 0;
    564c:	2000      	movs	r0, #0
    564e:	e7ed      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5650:	2901      	cmp	r1, #1
    5652:	d007      	beq.n	5664 <_sercom_get_default_pad+0x54>
    5654:	2900      	cmp	r1, #0
    5656:	d04b      	beq.n	56f0 <_sercom_get_default_pad+0xe0>
    5658:	2902      	cmp	r1, #2
    565a:	d005      	beq.n	5668 <_sercom_get_default_pad+0x58>
    565c:	2903      	cmp	r1, #3
    565e:	d005      	beq.n	566c <_sercom_get_default_pad+0x5c>
	return 0;
    5660:	2000      	movs	r0, #0
    5662:	e7e3      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5664:	482c      	ldr	r0, [pc, #176]	; (5718 <_sercom_get_default_pad+0x108>)
    5666:	e7e1      	b.n	562c <_sercom_get_default_pad+0x1c>
    5668:	482c      	ldr	r0, [pc, #176]	; (571c <_sercom_get_default_pad+0x10c>)
    566a:	e7df      	b.n	562c <_sercom_get_default_pad+0x1c>
    566c:	482c      	ldr	r0, [pc, #176]	; (5720 <_sercom_get_default_pad+0x110>)
    566e:	e7dd      	b.n	562c <_sercom_get_default_pad+0x1c>
    5670:	482c      	ldr	r0, [pc, #176]	; (5724 <_sercom_get_default_pad+0x114>)
    5672:	e7db      	b.n	562c <_sercom_get_default_pad+0x1c>
    5674:	482c      	ldr	r0, [pc, #176]	; (5728 <_sercom_get_default_pad+0x118>)
    5676:	e7d9      	b.n	562c <_sercom_get_default_pad+0x1c>
    5678:	482c      	ldr	r0, [pc, #176]	; (572c <_sercom_get_default_pad+0x11c>)
    567a:	e7d7      	b.n	562c <_sercom_get_default_pad+0x1c>
    567c:	2901      	cmp	r1, #1
    567e:	d007      	beq.n	5690 <_sercom_get_default_pad+0x80>
    5680:	2900      	cmp	r1, #0
    5682:	d039      	beq.n	56f8 <_sercom_get_default_pad+0xe8>
    5684:	2902      	cmp	r1, #2
    5686:	d005      	beq.n	5694 <_sercom_get_default_pad+0x84>
    5688:	2903      	cmp	r1, #3
    568a:	d005      	beq.n	5698 <_sercom_get_default_pad+0x88>
	return 0;
    568c:	2000      	movs	r0, #0
    568e:	e7cd      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5690:	4827      	ldr	r0, [pc, #156]	; (5730 <_sercom_get_default_pad+0x120>)
    5692:	e7cb      	b.n	562c <_sercom_get_default_pad+0x1c>
    5694:	4827      	ldr	r0, [pc, #156]	; (5734 <_sercom_get_default_pad+0x124>)
    5696:	e7c9      	b.n	562c <_sercom_get_default_pad+0x1c>
    5698:	4827      	ldr	r0, [pc, #156]	; (5738 <_sercom_get_default_pad+0x128>)
    569a:	e7c7      	b.n	562c <_sercom_get_default_pad+0x1c>
    569c:	2901      	cmp	r1, #1
    569e:	d007      	beq.n	56b0 <_sercom_get_default_pad+0xa0>
    56a0:	2900      	cmp	r1, #0
    56a2:	d02b      	beq.n	56fc <_sercom_get_default_pad+0xec>
    56a4:	2902      	cmp	r1, #2
    56a6:	d005      	beq.n	56b4 <_sercom_get_default_pad+0xa4>
    56a8:	2903      	cmp	r1, #3
    56aa:	d005      	beq.n	56b8 <_sercom_get_default_pad+0xa8>
	return 0;
    56ac:	2000      	movs	r0, #0
    56ae:	e7bd      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    56b0:	4822      	ldr	r0, [pc, #136]	; (573c <_sercom_get_default_pad+0x12c>)
    56b2:	e7bb      	b.n	562c <_sercom_get_default_pad+0x1c>
    56b4:	4822      	ldr	r0, [pc, #136]	; (5740 <_sercom_get_default_pad+0x130>)
    56b6:	e7b9      	b.n	562c <_sercom_get_default_pad+0x1c>
    56b8:	4822      	ldr	r0, [pc, #136]	; (5744 <_sercom_get_default_pad+0x134>)
    56ba:	e7b7      	b.n	562c <_sercom_get_default_pad+0x1c>
    56bc:	2902      	cmp	r1, #2
    56be:	d003      	beq.n	56c8 <_sercom_get_default_pad+0xb8>
    56c0:	2903      	cmp	r1, #3
    56c2:	d003      	beq.n	56cc <_sercom_get_default_pad+0xbc>
    56c4:	2000      	movs	r0, #0
    56c6:	e7b1      	b.n	562c <_sercom_get_default_pad+0x1c>
    56c8:	481f      	ldr	r0, [pc, #124]	; (5748 <_sercom_get_default_pad+0x138>)
    56ca:	e7af      	b.n	562c <_sercom_get_default_pad+0x1c>
    56cc:	481f      	ldr	r0, [pc, #124]	; (574c <_sercom_get_default_pad+0x13c>)
    56ce:	e7ad      	b.n	562c <_sercom_get_default_pad+0x1c>
    56d0:	2901      	cmp	r1, #1
    56d2:	d007      	beq.n	56e4 <_sercom_get_default_pad+0xd4>
    56d4:	2900      	cmp	r1, #0
    56d6:	d013      	beq.n	5700 <_sercom_get_default_pad+0xf0>
    56d8:	2902      	cmp	r1, #2
    56da:	d005      	beq.n	56e8 <_sercom_get_default_pad+0xd8>
    56dc:	2903      	cmp	r1, #3
    56de:	d005      	beq.n	56ec <_sercom_get_default_pad+0xdc>
	return 0;
    56e0:	2000      	movs	r0, #0
    56e2:	e7a3      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    56e4:	481a      	ldr	r0, [pc, #104]	; (5750 <_sercom_get_default_pad+0x140>)
    56e6:	e7a1      	b.n	562c <_sercom_get_default_pad+0x1c>
    56e8:	481a      	ldr	r0, [pc, #104]	; (5754 <_sercom_get_default_pad+0x144>)
    56ea:	e79f      	b.n	562c <_sercom_get_default_pad+0x1c>
    56ec:	481a      	ldr	r0, [pc, #104]	; (5758 <_sercom_get_default_pad+0x148>)
    56ee:	e79d      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f0:	481a      	ldr	r0, [pc, #104]	; (575c <_sercom_get_default_pad+0x14c>)
    56f2:	e79b      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f4:	2003      	movs	r0, #3
    56f6:	e799      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f8:	4819      	ldr	r0, [pc, #100]	; (5760 <_sercom_get_default_pad+0x150>)
    56fa:	e797      	b.n	562c <_sercom_get_default_pad+0x1c>
    56fc:	4819      	ldr	r0, [pc, #100]	; (5764 <_sercom_get_default_pad+0x154>)
    56fe:	e795      	b.n	562c <_sercom_get_default_pad+0x1c>
    5700:	4819      	ldr	r0, [pc, #100]	; (5768 <_sercom_get_default_pad+0x158>)
    5702:	e793      	b.n	562c <_sercom_get_default_pad+0x1c>
    5704:	42000800 	.word	0x42000800
    5708:	42001000 	.word	0x42001000
    570c:	43000400 	.word	0x43000400
    5710:	42000c00 	.word	0x42000c00
    5714:	42000400 	.word	0x42000400
    5718:	00050003 	.word	0x00050003
    571c:	00060003 	.word	0x00060003
    5720:	00070003 	.word	0x00070003
    5724:	00010003 	.word	0x00010003
    5728:	001e0003 	.word	0x001e0003
    572c:	001f0003 	.word	0x001f0003
    5730:	00090003 	.word	0x00090003
    5734:	000a0003 	.word	0x000a0003
    5738:	000b0003 	.word	0x000b0003
    573c:	00110003 	.word	0x00110003
    5740:	00120003 	.word	0x00120003
    5744:	00130003 	.word	0x00130003
    5748:	000e0003 	.word	0x000e0003
    574c:	000f0003 	.word	0x000f0003
    5750:	00170003 	.word	0x00170003
    5754:	00180003 	.word	0x00180003
    5758:	00190003 	.word	0x00190003
    575c:	00040003 	.word	0x00040003
    5760:	00080003 	.word	0x00080003
    5764:	00100003 	.word	0x00100003
    5768:	00160003 	.word	0x00160003

0000576c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    576c:	b530      	push	{r4, r5, lr}
    576e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5770:	4b0b      	ldr	r3, [pc, #44]	; (57a0 <_sercom_get_sercom_inst_index+0x34>)
    5772:	466a      	mov	r2, sp
    5774:	cb32      	ldmia	r3!, {r1, r4, r5}
    5776:	c232      	stmia	r2!, {r1, r4, r5}
    5778:	cb32      	ldmia	r3!, {r1, r4, r5}
    577a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    577c:	9b00      	ldr	r3, [sp, #0]
    577e:	4283      	cmp	r3, r0
    5780:	d00b      	beq.n	579a <_sercom_get_sercom_inst_index+0x2e>
    5782:	2301      	movs	r3, #1
    5784:	009a      	lsls	r2, r3, #2
    5786:	4669      	mov	r1, sp
    5788:	5852      	ldr	r2, [r2, r1]
    578a:	4282      	cmp	r2, r0
    578c:	d006      	beq.n	579c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    578e:	3301      	adds	r3, #1
    5790:	2b06      	cmp	r3, #6
    5792:	d1f7      	bne.n	5784 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5794:	2000      	movs	r0, #0
}
    5796:	b007      	add	sp, #28
    5798:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    579a:	2300      	movs	r3, #0
			return i;
    579c:	b2d8      	uxtb	r0, r3
    579e:	e7fa      	b.n	5796 <_sercom_get_sercom_inst_index+0x2a>
    57a0:	00017af4 	.word	0x00017af4

000057a4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    57a4:	4770      	bx	lr
    57a6:	Address 0x000057a6 is out of bounds.


000057a8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    57a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    57aa:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <_sercom_set_handler+0x2c>)
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	2b00      	cmp	r3, #0
    57b0:	d10c      	bne.n	57cc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57b2:	4f09      	ldr	r7, [pc, #36]	; (57d8 <_sercom_set_handler+0x30>)
    57b4:	4e09      	ldr	r6, [pc, #36]	; (57dc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    57b6:	4d0a      	ldr	r5, [pc, #40]	; (57e0 <_sercom_set_handler+0x38>)
    57b8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57ba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    57bc:	195a      	adds	r2, r3, r5
    57be:	6014      	str	r4, [r2, #0]
    57c0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57c2:	2b18      	cmp	r3, #24
    57c4:	d1f9      	bne.n	57ba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    57c6:	2201      	movs	r2, #1
    57c8:	4b02      	ldr	r3, [pc, #8]	; (57d4 <_sercom_set_handler+0x2c>)
    57ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    57cc:	0080      	lsls	r0, r0, #2
    57ce:	4b02      	ldr	r3, [pc, #8]	; (57d8 <_sercom_set_handler+0x30>)
    57d0:	50c1      	str	r1, [r0, r3]
}
    57d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57d4:	200000c6 	.word	0x200000c6
    57d8:	200000c8 	.word	0x200000c8
    57dc:	000057a5 	.word	0x000057a5
    57e0:	20001f2c 	.word	0x20001f2c

000057e4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    57e4:	b500      	push	{lr}
    57e6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    57e8:	2308      	movs	r3, #8
    57ea:	466a      	mov	r2, sp
    57ec:	7013      	strb	r3, [r2, #0]
    57ee:	3301      	adds	r3, #1
    57f0:	7053      	strb	r3, [r2, #1]
    57f2:	3301      	adds	r3, #1
    57f4:	7093      	strb	r3, [r2, #2]
    57f6:	3301      	adds	r3, #1
    57f8:	70d3      	strb	r3, [r2, #3]
    57fa:	3301      	adds	r3, #1
    57fc:	7113      	strb	r3, [r2, #4]
    57fe:	3301      	adds	r3, #1
    5800:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5802:	4b03      	ldr	r3, [pc, #12]	; (5810 <_sercom_get_interrupt_vector+0x2c>)
    5804:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5806:	466b      	mov	r3, sp
    5808:	5618      	ldrsb	r0, [r3, r0]
}
    580a:	b003      	add	sp, #12
    580c:	bd00      	pop	{pc}
    580e:	46c0      	nop			; (mov r8, r8)
    5810:	0000576d 	.word	0x0000576d

00005814 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5814:	b510      	push	{r4, lr}
    5816:	4b02      	ldr	r3, [pc, #8]	; (5820 <SERCOM0_Handler+0xc>)
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	2000      	movs	r0, #0
    581c:	4798      	blx	r3
    581e:	bd10      	pop	{r4, pc}
    5820:	200000c8 	.word	0x200000c8

00005824 <SERCOM1_Handler>:
    5824:	b510      	push	{r4, lr}
    5826:	4b02      	ldr	r3, [pc, #8]	; (5830 <SERCOM1_Handler+0xc>)
    5828:	685b      	ldr	r3, [r3, #4]
    582a:	2001      	movs	r0, #1
    582c:	4798      	blx	r3
    582e:	bd10      	pop	{r4, pc}
    5830:	200000c8 	.word	0x200000c8

00005834 <SERCOM2_Handler>:
    5834:	b510      	push	{r4, lr}
    5836:	4b02      	ldr	r3, [pc, #8]	; (5840 <SERCOM2_Handler+0xc>)
    5838:	689b      	ldr	r3, [r3, #8]
    583a:	2002      	movs	r0, #2
    583c:	4798      	blx	r3
    583e:	bd10      	pop	{r4, pc}
    5840:	200000c8 	.word	0x200000c8

00005844 <SERCOM3_Handler>:
    5844:	b510      	push	{r4, lr}
    5846:	4b02      	ldr	r3, [pc, #8]	; (5850 <SERCOM3_Handler+0xc>)
    5848:	68db      	ldr	r3, [r3, #12]
    584a:	2003      	movs	r0, #3
    584c:	4798      	blx	r3
    584e:	bd10      	pop	{r4, pc}
    5850:	200000c8 	.word	0x200000c8

00005854 <SERCOM4_Handler>:
    5854:	b510      	push	{r4, lr}
    5856:	4b02      	ldr	r3, [pc, #8]	; (5860 <SERCOM4_Handler+0xc>)
    5858:	691b      	ldr	r3, [r3, #16]
    585a:	2004      	movs	r0, #4
    585c:	4798      	blx	r3
    585e:	bd10      	pop	{r4, pc}
    5860:	200000c8 	.word	0x200000c8

00005864 <SERCOM5_Handler>:
    5864:	b510      	push	{r4, lr}
    5866:	4b02      	ldr	r3, [pc, #8]	; (5870 <SERCOM5_Handler+0xc>)
    5868:	695b      	ldr	r3, [r3, #20]
    586a:	2005      	movs	r0, #5
    586c:	4798      	blx	r3
    586e:	bd10      	pop	{r4, pc}
    5870:	200000c8 	.word	0x200000c8

00005874 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    5876:	46d6      	mov	lr, sl
    5878:	464f      	mov	r7, r9
    587a:	4646      	mov	r6, r8
    587c:	b5c0      	push	{r6, r7, lr}
    587e:	b08a      	sub	sp, #40	; 0x28
    5880:	0006      	movs	r6, r0
    5882:	000f      	movs	r7, r1
    5884:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5886:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5888:	680b      	ldr	r3, [r1, #0]
    588a:	079b      	lsls	r3, r3, #30
    588c:	d40a      	bmi.n	58a4 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    588e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5890:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5892:	07db      	lsls	r3, r3, #31
    5894:	d400      	bmi.n	5898 <spi_init+0x24>
    5896:	e0af      	b.n	59f8 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5898:	b00a      	add	sp, #40	; 0x28
    589a:	bc1c      	pop	{r2, r3, r4}
    589c:	4690      	mov	r8, r2
    589e:	4699      	mov	r9, r3
    58a0:	46a2      	mov	sl, r4
    58a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    58a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    58a6:	9305      	str	r3, [sp, #20]
    58a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    58aa:	9306      	str	r3, [sp, #24]
    58ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
    58ae:	9307      	str	r3, [sp, #28]
    58b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    58b2:	9308      	str	r3, [sp, #32]
    58b4:	2500      	movs	r5, #0
    58b6:	e00a      	b.n	58ce <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    58b8:	0038      	movs	r0, r7
    58ba:	4bb6      	ldr	r3, [pc, #728]	; (5b94 <spi_init+0x320>)
    58bc:	4798      	blx	r3
    58be:	e00e      	b.n	58de <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    58c0:	230f      	movs	r3, #15
    58c2:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    58c4:	4581      	cmp	r9, r0
    58c6:	d130      	bne.n	592a <spi_init+0xb6>
    58c8:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    58ca:	2d04      	cmp	r5, #4
    58cc:	d031      	beq.n	5932 <spi_init+0xbe>
    58ce:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    58d0:	00ab      	lsls	r3, r5, #2
    58d2:	aa02      	add	r2, sp, #8
    58d4:	200c      	movs	r0, #12
    58d6:	1812      	adds	r2, r2, r0
    58d8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    58da:	2800      	cmp	r0, #0
    58dc:	d0ec      	beq.n	58b8 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    58de:	1c43      	adds	r3, r0, #1
    58e0:	d0f2      	beq.n	58c8 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    58e2:	0401      	lsls	r1, r0, #16
    58e4:	0c0b      	lsrs	r3, r1, #16
    58e6:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    58e8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    58ea:	b2c3      	uxtb	r3, r0
    58ec:	469c      	mov	ip, r3
		return NULL;
    58ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    58f0:	0602      	lsls	r2, r0, #24
    58f2:	d405      	bmi.n	5900 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    58f4:	4663      	mov	r3, ip
    58f6:	095b      	lsrs	r3, r3, #5
    58f8:	01db      	lsls	r3, r3, #7
    58fa:	4aa7      	ldr	r2, [pc, #668]	; (5b98 <spi_init+0x324>)
    58fc:	4690      	mov	r8, r2
    58fe:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5900:	221f      	movs	r2, #31
    5902:	4660      	mov	r0, ip
    5904:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5906:	1898      	adds	r0, r3, r2
    5908:	3040      	adds	r0, #64	; 0x40
    590a:	7800      	ldrb	r0, [r0, #0]
    590c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    590e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5910:	4651      	mov	r1, sl
    5912:	07c9      	lsls	r1, r1, #31
    5914:	d5d6      	bpl.n	58c4 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5916:	0852      	lsrs	r2, r2, #1
    5918:	189b      	adds	r3, r3, r2
    591a:	3330      	adds	r3, #48	; 0x30
    591c:	7818      	ldrb	r0, [r3, #0]
    591e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5920:	4663      	mov	r3, ip
    5922:	07db      	lsls	r3, r3, #31
    5924:	d5cc      	bpl.n	58c0 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5926:	0900      	lsrs	r0, r0, #4
    5928:	e7cc      	b.n	58c4 <spi_init+0x50>
			module->hw = NULL;
    592a:	2300      	movs	r3, #0
    592c:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    592e:	201c      	movs	r0, #28
    5930:	e7b2      	b.n	5898 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5932:	2011      	movs	r0, #17
    5934:	4b99      	ldr	r3, [pc, #612]	; (5b9c <spi_init+0x328>)
    5936:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5938:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    593a:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    593c:	2a01      	cmp	r2, #1
    593e:	d016      	beq.n	596e <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5940:	7821      	ldrb	r1, [r4, #0]
    5942:	2900      	cmp	r1, #0
    5944:	d127      	bne.n	5996 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    5946:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5948:	7fe2      	ldrb	r2, [r4, #31]
    594a:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    594c:	7fa0      	ldrb	r0, [r4, #30]
    594e:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5950:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5952:	429a      	cmp	r2, r3
    5954:	d1a0      	bne.n	5898 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5956:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5958:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    595a:	3004      	adds	r0, #4
    595c:	5c20      	ldrb	r0, [r4, r0]
    595e:	2800      	cmp	r0, #0
    5960:	d001      	beq.n	5966 <spi_init+0xf2>
    5962:	2040      	movs	r0, #64	; 0x40
    5964:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5966:	2008      	movs	r0, #8
    5968:	4303      	orrs	r3, r0
    596a:	431d      	orrs	r5, r3
    596c:	e014      	b.n	5998 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    596e:	aa04      	add	r2, sp, #16
    5970:	0001      	movs	r1, r0
    5972:	69a0      	ldr	r0, [r4, #24]
    5974:	4b8a      	ldr	r3, [pc, #552]	; (5ba0 <spi_init+0x32c>)
    5976:	4798      	blx	r3
    5978:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    597a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    597c:	2b00      	cmp	r3, #0
    597e:	d000      	beq.n	5982 <spi_init+0x10e>
    5980:	e78a      	b.n	5898 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5982:	7b3b      	ldrb	r3, [r7, #12]
    5984:	b2db      	uxtb	r3, r3
    5986:	aa04      	add	r2, sp, #16
    5988:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    598a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    598c:	429a      	cmp	r2, r3
    598e:	d000      	beq.n	5992 <spi_init+0x11e>
    5990:	e782      	b.n	5898 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5992:	350c      	adds	r5, #12
    5994:	e7d4      	b.n	5940 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5996:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5998:	6863      	ldr	r3, [r4, #4]
    599a:	68a0      	ldr	r0, [r4, #8]
    599c:	4303      	orrs	r3, r0
    599e:	68e0      	ldr	r0, [r4, #12]
    59a0:	4303      	orrs	r3, r0
    59a2:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    59a4:	7c20      	ldrb	r0, [r4, #16]
    59a6:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    59a8:	7c60      	ldrb	r0, [r4, #17]
    59aa:	2800      	cmp	r0, #0
    59ac:	d001      	beq.n	59b2 <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    59ae:	2080      	movs	r0, #128	; 0x80
    59b0:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    59b2:	7ca0      	ldrb	r0, [r4, #18]
    59b4:	2800      	cmp	r0, #0
    59b6:	d002      	beq.n	59be <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    59b8:	2080      	movs	r0, #128	; 0x80
    59ba:	0280      	lsls	r0, r0, #10
    59bc:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    59be:	7ce0      	ldrb	r0, [r4, #19]
    59c0:	2800      	cmp	r0, #0
    59c2:	d002      	beq.n	59ca <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    59c4:	2080      	movs	r0, #128	; 0x80
    59c6:	0080      	lsls	r0, r0, #2
    59c8:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    59ca:	7d20      	ldrb	r0, [r4, #20]
    59cc:	2800      	cmp	r0, #0
    59ce:	d002      	beq.n	59d6 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    59d0:	2080      	movs	r0, #128	; 0x80
    59d2:	0180      	lsls	r0, r0, #6
    59d4:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    59d6:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    59d8:	2502      	movs	r5, #2
    59da:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    59dc:	4283      	cmp	r3, r0
    59de:	d003      	beq.n	59e8 <spi_init+0x174>
	module->hw = NULL;
    59e0:	2300      	movs	r3, #0
    59e2:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    59e4:	201c      	movs	r0, #28
    59e6:	e757      	b.n	5898 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    59e8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    59ea:	4293      	cmp	r3, r2
    59ec:	d1f8      	bne.n	59e0 <spi_init+0x16c>
		module->mode           = config->mode;
    59ee:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    59f0:	7c23      	ldrb	r3, [r4, #16]
    59f2:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    59f4:	2000      	movs	r0, #0
    59f6:	e74f      	b.n	5898 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    59f8:	0008      	movs	r0, r1
    59fa:	4b6a      	ldr	r3, [pc, #424]	; (5ba4 <spi_init+0x330>)
    59fc:	4798      	blx	r3
	if (sercom_index == 5) {
    59fe:	2805      	cmp	r0, #5
    5a00:	d100      	bne.n	5a04 <spi_init+0x190>
    5a02:	e0bf      	b.n	5b84 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a04:	0003      	movs	r3, r0
    5a06:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5a08:	4967      	ldr	r1, [pc, #412]	; (5ba8 <spi_init+0x334>)
    5a0a:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5a0c:	2201      	movs	r2, #1
    5a0e:	4082      	lsls	r2, r0
    5a10:	432a      	orrs	r2, r5
    5a12:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5a14:	a909      	add	r1, sp, #36	; 0x24
    5a16:	2524      	movs	r5, #36	; 0x24
    5a18:	5d62      	ldrb	r2, [r4, r5]
    5a1a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	9301      	str	r3, [sp, #4]
    5a20:	0018      	movs	r0, r3
    5a22:	4b62      	ldr	r3, [pc, #392]	; (5bac <spi_init+0x338>)
    5a24:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5a26:	9801      	ldr	r0, [sp, #4]
    5a28:	4b61      	ldr	r3, [pc, #388]	; (5bb0 <spi_init+0x33c>)
    5a2a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5a2c:	5d60      	ldrb	r0, [r4, r5]
    5a2e:	2100      	movs	r1, #0
    5a30:	4b60      	ldr	r3, [pc, #384]	; (5bb4 <spi_init+0x340>)
    5a32:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5a34:	7823      	ldrb	r3, [r4, #0]
    5a36:	2b01      	cmp	r3, #1
    5a38:	d020      	beq.n	5a7c <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5a3a:	7823      	ldrb	r3, [r4, #0]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d103      	bne.n	5a48 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5a40:	683b      	ldr	r3, [r7, #0]
    5a42:	2208      	movs	r2, #8
    5a44:	4313      	orrs	r3, r2
    5a46:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a48:	6833      	ldr	r3, [r6, #0]
    5a4a:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5a4c:	ab04      	add	r3, sp, #16
    5a4e:	2280      	movs	r2, #128	; 0x80
    5a50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5a52:	2200      	movs	r2, #0
    5a54:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5a56:	2101      	movs	r1, #1
    5a58:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5a5a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5a5c:	7823      	ldrb	r3, [r4, #0]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d101      	bne.n	5a66 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5a62:	ab04      	add	r3, sp, #16
    5a64:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5a68:	9305      	str	r3, [sp, #20]
    5a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5a6c:	9306      	str	r3, [sp, #24]
    5a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a70:	9307      	str	r3, [sp, #28]
    5a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a74:	9308      	str	r3, [sp, #32]
    5a76:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5a78:	ad05      	add	r5, sp, #20
    5a7a:	e011      	b.n	5aa0 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5a7c:	683b      	ldr	r3, [r7, #0]
    5a7e:	220c      	movs	r2, #12
    5a80:	4313      	orrs	r3, r2
    5a82:	603b      	str	r3, [r7, #0]
    5a84:	e7d9      	b.n	5a3a <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5a86:	4640      	mov	r0, r8
    5a88:	4b42      	ldr	r3, [pc, #264]	; (5b94 <spi_init+0x320>)
    5a8a:	4798      	blx	r3
    5a8c:	e00d      	b.n	5aaa <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5a8e:	a904      	add	r1, sp, #16
    5a90:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5a92:	0c00      	lsrs	r0, r0, #16
    5a94:	b2c0      	uxtb	r0, r0
    5a96:	4b48      	ldr	r3, [pc, #288]	; (5bb8 <spi_init+0x344>)
    5a98:	4798      	blx	r3
    5a9a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5a9c:	2f04      	cmp	r7, #4
    5a9e:	d007      	beq.n	5ab0 <spi_init+0x23c>
    5aa0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5aa2:	00bb      	lsls	r3, r7, #2
    5aa4:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5aa6:	2800      	cmp	r0, #0
    5aa8:	d0ed      	beq.n	5a86 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5aaa:	1c43      	adds	r3, r0, #1
    5aac:	d1ef      	bne.n	5a8e <spi_init+0x21a>
    5aae:	e7f4      	b.n	5a9a <spi_init+0x226>
	module->mode             = config->mode;
    5ab0:	7823      	ldrb	r3, [r4, #0]
    5ab2:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5ab4:	7c23      	ldrb	r3, [r4, #16]
    5ab6:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5ab8:	7ca3      	ldrb	r3, [r4, #18]
    5aba:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5abc:	7d23      	ldrb	r3, [r4, #20]
    5abe:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5ac0:	2200      	movs	r2, #0
    5ac2:	ab02      	add	r3, sp, #8
    5ac4:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5ac6:	7823      	ldrb	r3, [r4, #0]
    5ac8:	2b01      	cmp	r3, #1
    5aca:	d014      	beq.n	5af6 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5acc:	7823      	ldrb	r3, [r4, #0]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d129      	bne.n	5b26 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5ad2:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5ad4:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5ad6:	4643      	mov	r3, r8
    5ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5ada:	7fe1      	ldrb	r1, [r4, #31]
    5adc:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5ade:	7fa5      	ldrb	r5, [r4, #30]
    5ae0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5ae2:	4319      	orrs	r1, r3
    5ae4:	4643      	mov	r3, r8
    5ae6:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5ae8:	2320      	movs	r3, #32
    5aea:	5ce3      	ldrb	r3, [r4, r3]
    5aec:	2b00      	cmp	r3, #0
    5aee:	d01c      	beq.n	5b2a <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5af0:	2340      	movs	r3, #64	; 0x40
    5af2:	431a      	orrs	r2, r3
    5af4:	e019      	b.n	5b2a <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5af6:	6830      	ldr	r0, [r6, #0]
    5af8:	4b2a      	ldr	r3, [pc, #168]	; (5ba4 <spi_init+0x330>)
    5afa:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5afc:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5afe:	b2c0      	uxtb	r0, r0
    5b00:	4b26      	ldr	r3, [pc, #152]	; (5b9c <spi_init+0x328>)
    5b02:	4798      	blx	r3
    5b04:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5b06:	ab02      	add	r3, sp, #8
    5b08:	1d9a      	adds	r2, r3, #6
    5b0a:	69a0      	ldr	r0, [r4, #24]
    5b0c:	4b24      	ldr	r3, [pc, #144]	; (5ba0 <spi_init+0x32c>)
    5b0e:	4798      	blx	r3
    5b10:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5b12:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5b14:	2b00      	cmp	r3, #0
    5b16:	d000      	beq.n	5b1a <spi_init+0x2a6>
    5b18:	e6be      	b.n	5898 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5b1a:	ab02      	add	r3, sp, #8
    5b1c:	3306      	adds	r3, #6
    5b1e:	781b      	ldrb	r3, [r3, #0]
    5b20:	4642      	mov	r2, r8
    5b22:	7313      	strb	r3, [r2, #12]
    5b24:	e7d2      	b.n	5acc <spi_init+0x258>
	uint32_t ctrlb = 0;
    5b26:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5b28:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5b2a:	6863      	ldr	r3, [r4, #4]
    5b2c:	68a1      	ldr	r1, [r4, #8]
    5b2e:	430b      	orrs	r3, r1
    5b30:	68e1      	ldr	r1, [r4, #12]
    5b32:	430b      	orrs	r3, r1
    5b34:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5b36:	7c21      	ldrb	r1, [r4, #16]
    5b38:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5b3a:	7c61      	ldrb	r1, [r4, #17]
    5b3c:	2900      	cmp	r1, #0
    5b3e:	d103      	bne.n	5b48 <spi_init+0x2d4>
    5b40:	491e      	ldr	r1, [pc, #120]	; (5bbc <spi_init+0x348>)
    5b42:	7889      	ldrb	r1, [r1, #2]
    5b44:	0789      	lsls	r1, r1, #30
    5b46:	d501      	bpl.n	5b4c <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5b48:	2180      	movs	r1, #128	; 0x80
    5b4a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5b4c:	7ca1      	ldrb	r1, [r4, #18]
    5b4e:	2900      	cmp	r1, #0
    5b50:	d002      	beq.n	5b58 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5b52:	2180      	movs	r1, #128	; 0x80
    5b54:	0289      	lsls	r1, r1, #10
    5b56:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5b58:	7ce1      	ldrb	r1, [r4, #19]
    5b5a:	2900      	cmp	r1, #0
    5b5c:	d002      	beq.n	5b64 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5b5e:	2180      	movs	r1, #128	; 0x80
    5b60:	0089      	lsls	r1, r1, #2
    5b62:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5b64:	7d21      	ldrb	r1, [r4, #20]
    5b66:	2900      	cmp	r1, #0
    5b68:	d002      	beq.n	5b70 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5b6a:	2180      	movs	r1, #128	; 0x80
    5b6c:	0189      	lsls	r1, r1, #6
    5b6e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5b70:	4641      	mov	r1, r8
    5b72:	6809      	ldr	r1, [r1, #0]
    5b74:	430b      	orrs	r3, r1
    5b76:	4641      	mov	r1, r8
    5b78:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5b7a:	684b      	ldr	r3, [r1, #4]
    5b7c:	431a      	orrs	r2, r3
    5b7e:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5b80:	2000      	movs	r0, #0
    5b82:	e689      	b.n	5898 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    5b84:	4a08      	ldr	r2, [pc, #32]	; (5ba8 <spi_init+0x334>)
    5b86:	6a13      	ldr	r3, [r2, #32]
    5b88:	2102      	movs	r1, #2
    5b8a:	430b      	orrs	r3, r1
    5b8c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5b8e:	2318      	movs	r3, #24
    5b90:	e740      	b.n	5a14 <spi_init+0x1a0>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005611 	.word	0x00005611
    5b98:	40002800 	.word	0x40002800
    5b9c:	00006a89 	.word	0x00006a89
    5ba0:	00005507 	.word	0x00005507
    5ba4:	0000576d 	.word	0x0000576d
    5ba8:	40000400 	.word	0x40000400
    5bac:	00006a65 	.word	0x00006a65
    5bb0:	000069f5 	.word	0x000069f5
    5bb4:	000055c5 	.word	0x000055c5
    5bb8:	00006b61 	.word	0x00006b61
    5bbc:	41002000 	.word	0x41002000

00005bc0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5bc0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5bc2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5bc4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5bc6:	2c01      	cmp	r4, #1
    5bc8:	d001      	beq.n	5bce <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5bca:	0018      	movs	r0, r3
    5bcc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5bce:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5bd0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5bd2:	2c00      	cmp	r4, #0
    5bd4:	d1f9      	bne.n	5bca <spi_select_slave+0xa>
		if (select) {
    5bd6:	2a00      	cmp	r2, #0
    5bd8:	d058      	beq.n	5c8c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5bda:	784b      	ldrb	r3, [r1, #1]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d044      	beq.n	5c6a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5be0:	6803      	ldr	r3, [r0, #0]
    5be2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5be4:	07db      	lsls	r3, r3, #31
    5be6:	d410      	bmi.n	5c0a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5be8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5bea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bee:	2900      	cmp	r1, #0
    5bf0:	d104      	bne.n	5bfc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5bf2:	0953      	lsrs	r3, r2, #5
    5bf4:	01db      	lsls	r3, r3, #7
    5bf6:	492e      	ldr	r1, [pc, #184]	; (5cb0 <spi_select_slave+0xf0>)
    5bf8:	468c      	mov	ip, r1
    5bfa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5bfc:	211f      	movs	r1, #31
    5bfe:	4011      	ands	r1, r2
    5c00:	2201      	movs	r2, #1
    5c02:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5c04:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5c06:	2305      	movs	r3, #5
    5c08:	e7df      	b.n	5bca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5c0a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c0c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5c0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c10:	2c00      	cmp	r4, #0
    5c12:	d104      	bne.n	5c1e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5c14:	0953      	lsrs	r3, r2, #5
    5c16:	01db      	lsls	r3, r3, #7
    5c18:	4c25      	ldr	r4, [pc, #148]	; (5cb0 <spi_select_slave+0xf0>)
    5c1a:	46a4      	mov	ip, r4
    5c1c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c1e:	241f      	movs	r4, #31
    5c20:	4014      	ands	r4, r2
    5c22:	2201      	movs	r2, #1
    5c24:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5c26:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5c28:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c2a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5c2c:	07d2      	lsls	r2, r2, #31
    5c2e:	d501      	bpl.n	5c34 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c30:	788a      	ldrb	r2, [r1, #2]
    5c32:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5c34:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5c36:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5c38:	2a00      	cmp	r2, #0
    5c3a:	d1c6      	bne.n	5bca <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c3c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5c3e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c40:	7e13      	ldrb	r3, [r2, #24]
    5c42:	420b      	tst	r3, r1
    5c44:	d0fc      	beq.n	5c40 <spi_select_slave+0x80>
    5c46:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5c48:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5c4a:	0749      	lsls	r1, r1, #29
    5c4c:	d5bd      	bpl.n	5bca <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c4e:	8b53      	ldrh	r3, [r2, #26]
    5c50:	075b      	lsls	r3, r3, #29
    5c52:	d501      	bpl.n	5c58 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c54:	2304      	movs	r3, #4
    5c56:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c58:	7983      	ldrb	r3, [r0, #6]
    5c5a:	2b01      	cmp	r3, #1
    5c5c:	d002      	beq.n	5c64 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c60:	2300      	movs	r3, #0
    5c62:	e7b2      	b.n	5bca <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5c64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c66:	2300      	movs	r3, #0
    5c68:	e7af      	b.n	5bca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5c6a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c6c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c70:	2900      	cmp	r1, #0
    5c72:	d104      	bne.n	5c7e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5c74:	0953      	lsrs	r3, r2, #5
    5c76:	01db      	lsls	r3, r3, #7
    5c78:	490d      	ldr	r1, [pc, #52]	; (5cb0 <spi_select_slave+0xf0>)
    5c7a:	468c      	mov	ip, r1
    5c7c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c7e:	211f      	movs	r1, #31
    5c80:	4011      	ands	r1, r2
    5c82:	2201      	movs	r2, #1
    5c84:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5c86:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5c88:	2300      	movs	r3, #0
    5c8a:	e79e      	b.n	5bca <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5c8c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c8e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c90:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c92:	2900      	cmp	r1, #0
    5c94:	d104      	bne.n	5ca0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5c96:	0953      	lsrs	r3, r2, #5
    5c98:	01db      	lsls	r3, r3, #7
    5c9a:	4905      	ldr	r1, [pc, #20]	; (5cb0 <spi_select_slave+0xf0>)
    5c9c:	468c      	mov	ip, r1
    5c9e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ca0:	211f      	movs	r1, #31
    5ca2:	4011      	ands	r1, r2
    5ca4:	2201      	movs	r2, #1
    5ca6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ca8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5caa:	2300      	movs	r3, #0
    5cac:	e78d      	b.n	5bca <spi_select_slave+0xa>
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	40002800 	.word	0x40002800

00005cb4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cb6:	46de      	mov	lr, fp
    5cb8:	4657      	mov	r7, sl
    5cba:	464e      	mov	r6, r9
    5cbc:	4645      	mov	r5, r8
    5cbe:	b5e0      	push	{r5, r6, r7, lr}
    5cc0:	b091      	sub	sp, #68	; 0x44
    5cc2:	0005      	movs	r5, r0
    5cc4:	000c      	movs	r4, r1
    5cc6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5cc8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5cca:	0008      	movs	r0, r1
    5ccc:	4bc6      	ldr	r3, [pc, #792]	; (5fe8 <usart_init+0x334>)
    5cce:	4798      	blx	r3
    5cd0:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5cd2:	2805      	cmp	r0, #5
    5cd4:	d00d      	beq.n	5cf2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5cd6:	0007      	movs	r7, r0
    5cd8:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5cda:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5cdc:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5cde:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5ce0:	07c9      	lsls	r1, r1, #31
    5ce2:	d509      	bpl.n	5cf8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5ce4:	b011      	add	sp, #68	; 0x44
    5ce6:	bc3c      	pop	{r2, r3, r4, r5}
    5ce8:	4690      	mov	r8, r2
    5cea:	4699      	mov	r9, r3
    5cec:	46a2      	mov	sl, r4
    5cee:	46ab      	mov	fp, r5
    5cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5cf2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5cf4:	2301      	movs	r3, #1
    5cf6:	e7f1      	b.n	5cdc <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5cf8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5cfa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5cfc:	0789      	lsls	r1, r1, #30
    5cfe:	d4f1      	bmi.n	5ce4 <usart_init+0x30>
	if (sercom_index == 5) {
    5d00:	2a05      	cmp	r2, #5
    5d02:	d049      	beq.n	5d98 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5d04:	49b9      	ldr	r1, [pc, #740]	; (5fec <usart_init+0x338>)
    5d06:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5d08:	2201      	movs	r2, #1
    5d0a:	409a      	lsls	r2, r3
    5d0c:	0013      	movs	r3, r2
    5d0e:	4303      	orrs	r3, r0
    5d10:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5d12:	a90f      	add	r1, sp, #60	; 0x3c
    5d14:	232d      	movs	r3, #45	; 0x2d
    5d16:	4698      	mov	r8, r3
    5d18:	5cf3      	ldrb	r3, [r6, r3]
    5d1a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5d1c:	b2ff      	uxtb	r7, r7
    5d1e:	0038      	movs	r0, r7
    5d20:	4bb3      	ldr	r3, [pc, #716]	; (5ff0 <usart_init+0x33c>)
    5d22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5d24:	0038      	movs	r0, r7
    5d26:	4bb3      	ldr	r3, [pc, #716]	; (5ff4 <usart_init+0x340>)
    5d28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5d2a:	4643      	mov	r3, r8
    5d2c:	5cf0      	ldrb	r0, [r6, r3]
    5d2e:	2100      	movs	r1, #0
    5d30:	4bb1      	ldr	r3, [pc, #708]	; (5ff8 <usart_init+0x344>)
    5d32:	4798      	blx	r3
	module->character_size = config->character_size;
    5d34:	7af3      	ldrb	r3, [r6, #11]
    5d36:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5d38:	2324      	movs	r3, #36	; 0x24
    5d3a:	5cf3      	ldrb	r3, [r6, r3]
    5d3c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5d3e:	2325      	movs	r3, #37	; 0x25
    5d40:	5cf3      	ldrb	r3, [r6, r3]
    5d42:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5d44:	7ef3      	ldrb	r3, [r6, #27]
    5d46:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5d48:	7f33      	ldrb	r3, [r6, #28]
    5d4a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d4c:	682b      	ldr	r3, [r5, #0]
    5d4e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5d50:	0018      	movs	r0, r3
    5d52:	4ba5      	ldr	r3, [pc, #660]	; (5fe8 <usart_init+0x334>)
    5d54:	4798      	blx	r3
	if (sercom_index == 5) {
    5d56:	2805      	cmp	r0, #5
    5d58:	d026      	beq.n	5da8 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5d5a:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5d5c:	2200      	movs	r2, #0
    5d5e:	230e      	movs	r3, #14
    5d60:	a906      	add	r1, sp, #24
    5d62:	468c      	mov	ip, r1
    5d64:	4463      	add	r3, ip
    5d66:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5d68:	8a32      	ldrh	r2, [r6, #16]
    5d6a:	9202      	str	r2, [sp, #8]
    5d6c:	2380      	movs	r3, #128	; 0x80
    5d6e:	01db      	lsls	r3, r3, #7
    5d70:	429a      	cmp	r2, r3
    5d72:	d100      	bne.n	5d76 <usart_init+0xc2>
    5d74:	e0ab      	b.n	5ece <usart_init+0x21a>
    5d76:	d919      	bls.n	5dac <usart_init+0xf8>
    5d78:	23c0      	movs	r3, #192	; 0xc0
    5d7a:	01db      	lsls	r3, r3, #7
    5d7c:	9a02      	ldr	r2, [sp, #8]
    5d7e:	429a      	cmp	r2, r3
    5d80:	d100      	bne.n	5d84 <usart_init+0xd0>
    5d82:	e09f      	b.n	5ec4 <usart_init+0x210>
    5d84:	2380      	movs	r3, #128	; 0x80
    5d86:	021b      	lsls	r3, r3, #8
    5d88:	429a      	cmp	r2, r3
    5d8a:	d000      	beq.n	5d8e <usart_init+0xda>
    5d8c:	e127      	b.n	5fde <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5d8e:	2303      	movs	r3, #3
    5d90:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5d92:	2300      	movs	r3, #0
    5d94:	9307      	str	r3, [sp, #28]
    5d96:	e012      	b.n	5dbe <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5d98:	4994      	ldr	r1, [pc, #592]	; (5fec <usart_init+0x338>)
    5d9a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5d9c:	3a04      	subs	r2, #4
    5d9e:	409a      	lsls	r2, r3
    5da0:	0013      	movs	r3, r2
    5da2:	4303      	orrs	r3, r0
    5da4:	620b      	str	r3, [r1, #32]
    5da6:	e7b4      	b.n	5d12 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5da8:	2018      	movs	r0, #24
    5daa:	e7d7      	b.n	5d5c <usart_init+0xa8>
	switch (config->sample_rate) {
    5dac:	2380      	movs	r3, #128	; 0x80
    5dae:	019b      	lsls	r3, r3, #6
    5db0:	429a      	cmp	r2, r3
    5db2:	d000      	beq.n	5db6 <usart_init+0x102>
    5db4:	e113      	b.n	5fde <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5db6:	2310      	movs	r3, #16
    5db8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5dba:	3b0f      	subs	r3, #15
    5dbc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5dbe:	6833      	ldr	r3, [r6, #0]
    5dc0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5dc2:	68f3      	ldr	r3, [r6, #12]
    5dc4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5dc6:	6973      	ldr	r3, [r6, #20]
    5dc8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5dca:	7e33      	ldrb	r3, [r6, #24]
    5dcc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5dce:	2326      	movs	r3, #38	; 0x26
    5dd0:	5cf3      	ldrb	r3, [r6, r3]
    5dd2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5dd4:	6873      	ldr	r3, [r6, #4]
    5dd6:	4699      	mov	r9, r3
	switch (transfer_mode)
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d100      	bne.n	5dde <usart_init+0x12a>
    5ddc:	e09f      	b.n	5f1e <usart_init+0x26a>
    5dde:	2380      	movs	r3, #128	; 0x80
    5de0:	055b      	lsls	r3, r3, #21
    5de2:	4599      	cmp	r9, r3
    5de4:	d104      	bne.n	5df0 <usart_init+0x13c>
			if (!config->use_external_clock) {
    5de6:	2327      	movs	r3, #39	; 0x27
    5de8:	5cf3      	ldrb	r3, [r6, r3]
    5dea:	2b00      	cmp	r3, #0
    5dec:	d100      	bne.n	5df0 <usart_init+0x13c>
    5dee:	e084      	b.n	5efa <usart_init+0x246>
	if(config->encoding_format_enable) {
    5df0:	7e73      	ldrb	r3, [r6, #25]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d002      	beq.n	5dfc <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5df6:	7eb3      	ldrb	r3, [r6, #26]
    5df8:	4642      	mov	r2, r8
    5dfa:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dfc:	682a      	ldr	r2, [r5, #0]
    5dfe:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5e00:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5e02:	2b00      	cmp	r3, #0
    5e04:	d1fc      	bne.n	5e00 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5e06:	330e      	adds	r3, #14
    5e08:	aa06      	add	r2, sp, #24
    5e0a:	4694      	mov	ip, r2
    5e0c:	4463      	add	r3, ip
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	4642      	mov	r2, r8
    5e12:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5e14:	9b05      	ldr	r3, [sp, #20]
    5e16:	9a03      	ldr	r2, [sp, #12]
    5e18:	4313      	orrs	r3, r2
    5e1a:	9a04      	ldr	r2, [sp, #16]
    5e1c:	4313      	orrs	r3, r2
    5e1e:	464a      	mov	r2, r9
    5e20:	4313      	orrs	r3, r2
    5e22:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5e24:	465b      	mov	r3, fp
    5e26:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5e28:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5e2a:	4653      	mov	r3, sl
    5e2c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5e2e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5e30:	2327      	movs	r3, #39	; 0x27
    5e32:	5cf3      	ldrb	r3, [r6, r3]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d101      	bne.n	5e3c <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5e38:	3304      	adds	r3, #4
    5e3a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e3c:	7e73      	ldrb	r3, [r6, #25]
    5e3e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e40:	7f32      	ldrb	r2, [r6, #28]
    5e42:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e44:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e46:	7f72      	ldrb	r2, [r6, #29]
    5e48:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e4a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e4c:	2224      	movs	r2, #36	; 0x24
    5e4e:	5cb2      	ldrb	r2, [r6, r2]
    5e50:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e52:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5e54:	2225      	movs	r2, #37	; 0x25
    5e56:	5cb2      	ldrb	r2, [r6, r2]
    5e58:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e5a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5e5c:	7ab1      	ldrb	r1, [r6, #10]
    5e5e:	7af2      	ldrb	r2, [r6, #11]
    5e60:	4311      	orrs	r1, r2
    5e62:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5e64:	8933      	ldrh	r3, [r6, #8]
    5e66:	2bff      	cmp	r3, #255	; 0xff
    5e68:	d07d      	beq.n	5f66 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5e6a:	2280      	movs	r2, #128	; 0x80
    5e6c:	0452      	lsls	r2, r2, #17
    5e6e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5e70:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5e72:	232c      	movs	r3, #44	; 0x2c
    5e74:	5cf3      	ldrb	r3, [r6, r3]
    5e76:	2b00      	cmp	r3, #0
    5e78:	d103      	bne.n	5e82 <usart_init+0x1ce>
    5e7a:	4b60      	ldr	r3, [pc, #384]	; (5ffc <usart_init+0x348>)
    5e7c:	789b      	ldrb	r3, [r3, #2]
    5e7e:	079b      	lsls	r3, r3, #30
    5e80:	d501      	bpl.n	5e86 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5e82:	2380      	movs	r3, #128	; 0x80
    5e84:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e86:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5e88:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d1fc      	bne.n	5e88 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5e8e:	4643      	mov	r3, r8
    5e90:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e92:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5e94:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5e96:	2b00      	cmp	r3, #0
    5e98:	d1fc      	bne.n	5e94 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    5e9a:	4643      	mov	r3, r8
    5e9c:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5e9e:	ab0e      	add	r3, sp, #56	; 0x38
    5ea0:	2280      	movs	r2, #128	; 0x80
    5ea2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5ea4:	2200      	movs	r2, #0
    5ea6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5ea8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5eaa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5eac:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5eae:	930a      	str	r3, [sp, #40]	; 0x28
    5eb0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5eb2:	930b      	str	r3, [sp, #44]	; 0x2c
    5eb4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5eb6:	930c      	str	r3, [sp, #48]	; 0x30
    5eb8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5eba:	9302      	str	r3, [sp, #8]
    5ebc:	930d      	str	r3, [sp, #52]	; 0x34
    5ebe:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5ec0:	ae0a      	add	r6, sp, #40	; 0x28
    5ec2:	e05e      	b.n	5f82 <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ec4:	2308      	movs	r3, #8
    5ec6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec8:	3b07      	subs	r3, #7
    5eca:	9307      	str	r3, [sp, #28]
    5ecc:	e777      	b.n	5dbe <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    5ece:	6833      	ldr	r3, [r6, #0]
    5ed0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5ed2:	68f3      	ldr	r3, [r6, #12]
    5ed4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5ed6:	6973      	ldr	r3, [r6, #20]
    5ed8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5eda:	7e33      	ldrb	r3, [r6, #24]
    5edc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5ede:	2326      	movs	r3, #38	; 0x26
    5ee0:	5cf3      	ldrb	r3, [r6, r3]
    5ee2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5ee4:	6873      	ldr	r3, [r6, #4]
    5ee6:	4699      	mov	r9, r3
	switch (transfer_mode)
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d014      	beq.n	5f16 <usart_init+0x262>
    5eec:	2380      	movs	r3, #128	; 0x80
    5eee:	055b      	lsls	r3, r3, #21
    5ef0:	4599      	cmp	r9, r3
    5ef2:	d100      	bne.n	5ef6 <usart_init+0x242>
    5ef4:	e777      	b.n	5de6 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    5ef6:	2000      	movs	r0, #0
    5ef8:	e020      	b.n	5f3c <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5efa:	6a33      	ldr	r3, [r6, #32]
    5efc:	001f      	movs	r7, r3
    5efe:	b2c0      	uxtb	r0, r0
    5f00:	4b3f      	ldr	r3, [pc, #252]	; (6000 <usart_init+0x34c>)
    5f02:	4798      	blx	r3
    5f04:	0001      	movs	r1, r0
    5f06:	220e      	movs	r2, #14
    5f08:	ab06      	add	r3, sp, #24
    5f0a:	469c      	mov	ip, r3
    5f0c:	4462      	add	r2, ip
    5f0e:	0038      	movs	r0, r7
    5f10:	4b3c      	ldr	r3, [pc, #240]	; (6004 <usart_init+0x350>)
    5f12:	4798      	blx	r3
    5f14:	e012      	b.n	5f3c <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5f16:	2308      	movs	r3, #8
    5f18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f1a:	2300      	movs	r3, #0
    5f1c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5f1e:	2327      	movs	r3, #39	; 0x27
    5f20:	5cf3      	ldrb	r3, [r6, r3]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d00e      	beq.n	5f44 <usart_init+0x290>
				status_code =
    5f26:	9b06      	ldr	r3, [sp, #24]
    5f28:	9300      	str	r3, [sp, #0]
    5f2a:	9b07      	ldr	r3, [sp, #28]
    5f2c:	220e      	movs	r2, #14
    5f2e:	a906      	add	r1, sp, #24
    5f30:	468c      	mov	ip, r1
    5f32:	4462      	add	r2, ip
    5f34:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5f36:	6a30      	ldr	r0, [r6, #32]
    5f38:	4f33      	ldr	r7, [pc, #204]	; (6008 <usart_init+0x354>)
    5f3a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5f3c:	2800      	cmp	r0, #0
    5f3e:	d000      	beq.n	5f42 <usart_init+0x28e>
    5f40:	e6d0      	b.n	5ce4 <usart_init+0x30>
    5f42:	e755      	b.n	5df0 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    5f44:	6a33      	ldr	r3, [r6, #32]
    5f46:	001f      	movs	r7, r3
    5f48:	b2c0      	uxtb	r0, r0
    5f4a:	4b2d      	ldr	r3, [pc, #180]	; (6000 <usart_init+0x34c>)
    5f4c:	4798      	blx	r3
    5f4e:	0001      	movs	r1, r0
				status_code =
    5f50:	9b06      	ldr	r3, [sp, #24]
    5f52:	9300      	str	r3, [sp, #0]
    5f54:	9b07      	ldr	r3, [sp, #28]
    5f56:	220e      	movs	r2, #14
    5f58:	a806      	add	r0, sp, #24
    5f5a:	4684      	mov	ip, r0
    5f5c:	4462      	add	r2, ip
    5f5e:	0038      	movs	r0, r7
    5f60:	4f29      	ldr	r7, [pc, #164]	; (6008 <usart_init+0x354>)
    5f62:	47b8      	blx	r7
    5f64:	e7ea      	b.n	5f3c <usart_init+0x288>
		if(config->lin_slave_enable) {
    5f66:	7ef3      	ldrb	r3, [r6, #27]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d082      	beq.n	5e72 <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5f6c:	2380      	movs	r3, #128	; 0x80
    5f6e:	04db      	lsls	r3, r3, #19
    5f70:	431f      	orrs	r7, r3
    5f72:	e77e      	b.n	5e72 <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5f74:	0020      	movs	r0, r4
    5f76:	4b25      	ldr	r3, [pc, #148]	; (600c <usart_init+0x358>)
    5f78:	4798      	blx	r3
    5f7a:	e007      	b.n	5f8c <usart_init+0x2d8>
    5f7c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5f7e:	2f04      	cmp	r7, #4
    5f80:	d00d      	beq.n	5f9e <usart_init+0x2ea>
    5f82:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f84:	00bb      	lsls	r3, r7, #2
    5f86:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5f88:	2800      	cmp	r0, #0
    5f8a:	d0f3      	beq.n	5f74 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    5f8c:	1c43      	adds	r3, r0, #1
    5f8e:	d0f5      	beq.n	5f7c <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5f90:	a90e      	add	r1, sp, #56	; 0x38
    5f92:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5f94:	0c00      	lsrs	r0, r0, #16
    5f96:	b2c0      	uxtb	r0, r0
    5f98:	4b1d      	ldr	r3, [pc, #116]	; (6010 <usart_init+0x35c>)
    5f9a:	4798      	blx	r3
    5f9c:	e7ee      	b.n	5f7c <usart_init+0x2c8>
		module->callback[i]            = NULL;
    5f9e:	2300      	movs	r3, #0
    5fa0:	60eb      	str	r3, [r5, #12]
    5fa2:	612b      	str	r3, [r5, #16]
    5fa4:	616b      	str	r3, [r5, #20]
    5fa6:	61ab      	str	r3, [r5, #24]
    5fa8:	61eb      	str	r3, [r5, #28]
    5faa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5fac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5fae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5fb0:	2200      	movs	r2, #0
    5fb2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5fb4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5fb6:	3330      	adds	r3, #48	; 0x30
    5fb8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5fba:	3301      	adds	r3, #1
    5fbc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5fbe:	3301      	adds	r3, #1
    5fc0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5fc2:	3301      	adds	r3, #1
    5fc4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5fc6:	6828      	ldr	r0, [r5, #0]
    5fc8:	4b07      	ldr	r3, [pc, #28]	; (5fe8 <usart_init+0x334>)
    5fca:	4798      	blx	r3
    5fcc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5fce:	4911      	ldr	r1, [pc, #68]	; (6014 <usart_init+0x360>)
    5fd0:	4b11      	ldr	r3, [pc, #68]	; (6018 <usart_init+0x364>)
    5fd2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5fd4:	00a4      	lsls	r4, r4, #2
    5fd6:	4b11      	ldr	r3, [pc, #68]	; (601c <usart_init+0x368>)
    5fd8:	50e5      	str	r5, [r4, r3]
	return status_code;
    5fda:	2000      	movs	r0, #0
    5fdc:	e682      	b.n	5ce4 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5fde:	2310      	movs	r3, #16
    5fe0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5fe2:	2300      	movs	r3, #0
    5fe4:	9307      	str	r3, [sp, #28]
    5fe6:	e6ea      	b.n	5dbe <usart_init+0x10a>
    5fe8:	0000576d 	.word	0x0000576d
    5fec:	40000400 	.word	0x40000400
    5ff0:	00006a65 	.word	0x00006a65
    5ff4:	000069f5 	.word	0x000069f5
    5ff8:	000055c5 	.word	0x000055c5
    5ffc:	41002000 	.word	0x41002000
    6000:	00006a89 	.word	0x00006a89
    6004:	00005507 	.word	0x00005507
    6008:	00005531 	.word	0x00005531
    600c:	00005611 	.word	0x00005611
    6010:	00006b61 	.word	0x00006b61
    6014:	0000629d 	.word	0x0000629d
    6018:	000057a9 	.word	0x000057a9
    601c:	20001f2c 	.word	0x20001f2c

00006020 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6020:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    6022:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6024:	2a00      	cmp	r2, #0
    6026:	d101      	bne.n	602c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6028:	0018      	movs	r0, r3
    602a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    602c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    602e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6030:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    6032:	2a00      	cmp	r2, #0
    6034:	d1f8      	bne.n	6028 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6036:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    6038:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    603a:	2a00      	cmp	r2, #0
    603c:	d1fc      	bne.n	6038 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    603e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6040:	2102      	movs	r1, #2
    6042:	7e1a      	ldrb	r2, [r3, #24]
    6044:	420a      	tst	r2, r1
    6046:	d0fc      	beq.n	6042 <usart_write_wait+0x22>
	return STATUS_OK;
    6048:	2300      	movs	r3, #0
    604a:	e7ed      	b.n	6028 <usart_write_wait+0x8>

0000604c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    604c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    604e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6050:	2a00      	cmp	r2, #0
    6052:	d101      	bne.n	6058 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6054:	0018      	movs	r0, r3
    6056:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    6058:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    605a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    605c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    605e:	2a00      	cmp	r2, #0
    6060:	d1f8      	bne.n	6054 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6062:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6064:	7e10      	ldrb	r0, [r2, #24]
    6066:	0740      	lsls	r0, r0, #29
    6068:	d5f4      	bpl.n	6054 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    606a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    606c:	2b00      	cmp	r3, #0
    606e:	d1fc      	bne.n	606a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6070:	8b53      	ldrh	r3, [r2, #26]
    6072:	b2db      	uxtb	r3, r3
	if (error_code) {
    6074:	0698      	lsls	r0, r3, #26
    6076:	d01d      	beq.n	60b4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6078:	0798      	lsls	r0, r3, #30
    607a:	d503      	bpl.n	6084 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    607c:	2302      	movs	r3, #2
    607e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6080:	3318      	adds	r3, #24
    6082:	e7e7      	b.n	6054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6084:	0758      	lsls	r0, r3, #29
    6086:	d503      	bpl.n	6090 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6088:	2304      	movs	r3, #4
    608a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    608c:	331a      	adds	r3, #26
    608e:	e7e1      	b.n	6054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6090:	07d8      	lsls	r0, r3, #31
    6092:	d503      	bpl.n	609c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6094:	2301      	movs	r3, #1
    6096:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6098:	3312      	adds	r3, #18
    609a:	e7db      	b.n	6054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    609c:	06d8      	lsls	r0, r3, #27
    609e:	d503      	bpl.n	60a8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    60a0:	2310      	movs	r3, #16
    60a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    60a4:	3332      	adds	r3, #50	; 0x32
    60a6:	e7d5      	b.n	6054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    60a8:	069b      	lsls	r3, r3, #26
    60aa:	d503      	bpl.n	60b4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    60ac:	2320      	movs	r3, #32
    60ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    60b0:	3321      	adds	r3, #33	; 0x21
    60b2:	e7cf      	b.n	6054 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    60b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    60b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    60b8:	2300      	movs	r3, #0
    60ba:	e7cb      	b.n	6054 <usart_read_wait+0x8>

000060bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    60bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60be:	46ce      	mov	lr, r9
    60c0:	4647      	mov	r7, r8
    60c2:	b580      	push	{r7, lr}
    60c4:	b083      	sub	sp, #12
    60c6:	0005      	movs	r5, r0
    60c8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    60ca:	2017      	movs	r0, #23
	if (length == 0) {
    60cc:	2a00      	cmp	r2, #0
    60ce:	d104      	bne.n	60da <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    60d0:	b003      	add	sp, #12
    60d2:	bc0c      	pop	{r2, r3}
    60d4:	4690      	mov	r8, r2
    60d6:	4699      	mov	r9, r3
    60d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    60da:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    60dc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    60de:	2b00      	cmp	r3, #0
    60e0:	d0f6      	beq.n	60d0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60e2:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    60e4:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    60e6:	2b00      	cmp	r3, #0
    60e8:	d1fc      	bne.n	60e4 <usart_write_buffer_wait+0x28>
	while (length--) {
    60ea:	3a01      	subs	r2, #1
    60ec:	b293      	uxth	r3, r2
    60ee:	4699      	mov	r9, r3
    60f0:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    60f2:	2701      	movs	r7, #1
	while (length--) {
    60f4:	4b1f      	ldr	r3, [pc, #124]	; (6174 <usart_write_buffer_wait+0xb8>)
    60f6:	4698      	mov	r8, r3
    60f8:	e011      	b.n	611e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    60fa:	1c73      	adds	r3, r6, #1
    60fc:	b29b      	uxth	r3, r3
    60fe:	9a01      	ldr	r2, [sp, #4]
    6100:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6102:	796a      	ldrb	r2, [r5, #5]
    6104:	2a01      	cmp	r2, #1
    6106:	d017      	beq.n	6138 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6108:	b289      	uxth	r1, r1
    610a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    610c:	0028      	movs	r0, r5
    610e:	4b1a      	ldr	r3, [pc, #104]	; (6178 <usart_write_buffer_wait+0xbc>)
    6110:	4798      	blx	r3
	while (length--) {
    6112:	464b      	mov	r3, r9
    6114:	3b01      	subs	r3, #1
    6116:	b29b      	uxth	r3, r3
    6118:	4699      	mov	r9, r3
    611a:	4543      	cmp	r3, r8
    611c:	d013      	beq.n	6146 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    611e:	7e23      	ldrb	r3, [r4, #24]
    6120:	423b      	tst	r3, r7
    6122:	d1ea      	bne.n	60fa <usart_write_buffer_wait+0x3e>
    6124:	4b13      	ldr	r3, [pc, #76]	; (6174 <usart_write_buffer_wait+0xb8>)
    6126:	7e22      	ldrb	r2, [r4, #24]
    6128:	423a      	tst	r2, r7
    612a:	d1e6      	bne.n	60fa <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    612c:	2b01      	cmp	r3, #1
    612e:	d019      	beq.n	6164 <usart_write_buffer_wait+0xa8>
    6130:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6132:	2b00      	cmp	r3, #0
    6134:	d1f7      	bne.n	6126 <usart_write_buffer_wait+0x6a>
    6136:	e7e0      	b.n	60fa <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6138:	3602      	adds	r6, #2
    613a:	b2b6      	uxth	r6, r6
    613c:	9a01      	ldr	r2, [sp, #4]
    613e:	5cd3      	ldrb	r3, [r2, r3]
    6140:	021b      	lsls	r3, r3, #8
    6142:	4319      	orrs	r1, r3
    6144:	e7e2      	b.n	610c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6146:	7e23      	ldrb	r3, [r4, #24]
    6148:	079b      	lsls	r3, r3, #30
    614a:	d40d      	bmi.n	6168 <usart_write_buffer_wait+0xac>
    614c:	4b09      	ldr	r3, [pc, #36]	; (6174 <usart_write_buffer_wait+0xb8>)
    614e:	2102      	movs	r1, #2
    6150:	7e22      	ldrb	r2, [r4, #24]
    6152:	420a      	tst	r2, r1
    6154:	d10a      	bne.n	616c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    6156:	2b01      	cmp	r3, #1
    6158:	d00a      	beq.n	6170 <usart_write_buffer_wait+0xb4>
    615a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    615c:	2b00      	cmp	r3, #0
    615e:	d1f7      	bne.n	6150 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6160:	2000      	movs	r0, #0
    6162:	e7b5      	b.n	60d0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    6164:	2012      	movs	r0, #18
    6166:	e7b3      	b.n	60d0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6168:	2000      	movs	r0, #0
    616a:	e7b1      	b.n	60d0 <usart_write_buffer_wait+0x14>
    616c:	2000      	movs	r0, #0
    616e:	e7af      	b.n	60d0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6170:	2012      	movs	r0, #18
    6172:	e7ad      	b.n	60d0 <usart_write_buffer_wait+0x14>
    6174:	0000ffff 	.word	0x0000ffff
    6178:	00006021 	.word	0x00006021

0000617c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    617c:	b5f0      	push	{r4, r5, r6, r7, lr}
    617e:	46d6      	mov	lr, sl
    6180:	b500      	push	{lr}
    6182:	b084      	sub	sp, #16
    6184:	0004      	movs	r4, r0
    6186:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6188:	2017      	movs	r0, #23
	if (length == 0) {
    618a:	2a00      	cmp	r2, #0
    618c:	d103      	bne.n	6196 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    618e:	b004      	add	sp, #16
    6190:	bc04      	pop	{r2}
    6192:	4692      	mov	sl, r2
    6194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    6196:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6198:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    619a:	2b00      	cmp	r3, #0
    619c:	d0f7      	beq.n	618e <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    619e:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    61a0:	3a01      	subs	r2, #1
    61a2:	b293      	uxth	r3, r2
    61a4:	469a      	mov	sl, r3
    61a6:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    61a8:	2704      	movs	r7, #4
    61aa:	e019      	b.n	61e0 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    61ac:	2300      	movs	r3, #0
    61ae:	aa02      	add	r2, sp, #8
    61b0:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    61b2:	1d91      	adds	r1, r2, #6
    61b4:	0020      	movs	r0, r4
    61b6:	4b15      	ldr	r3, [pc, #84]	; (620c <usart_read_buffer_wait+0x90>)
    61b8:	4798      	blx	r3
		if (retval != STATUS_OK) {
    61ba:	2800      	cmp	r0, #0
    61bc:	d1e7      	bne.n	618e <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    61be:	1c69      	adds	r1, r5, #1
    61c0:	b289      	uxth	r1, r1
    61c2:	ab02      	add	r3, sp, #8
    61c4:	88db      	ldrh	r3, [r3, #6]
    61c6:	9a01      	ldr	r2, [sp, #4]
    61c8:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    61ca:	7962      	ldrb	r2, [r4, #5]
    61cc:	2a01      	cmp	r2, #1
    61ce:	d014      	beq.n	61fa <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    61d0:	000d      	movs	r5, r1
	while (length--) {
    61d2:	4653      	mov	r3, sl
    61d4:	3b01      	subs	r3, #1
    61d6:	b29b      	uxth	r3, r3
    61d8:	469a      	mov	sl, r3
    61da:	4b0d      	ldr	r3, [pc, #52]	; (6210 <usart_read_buffer_wait+0x94>)
    61dc:	459a      	cmp	sl, r3
    61de:	d0d6      	beq.n	618e <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    61e0:	7e33      	ldrb	r3, [r6, #24]
    61e2:	423b      	tst	r3, r7
    61e4:	d1e2      	bne.n	61ac <usart_read_buffer_wait+0x30>
    61e6:	4b0a      	ldr	r3, [pc, #40]	; (6210 <usart_read_buffer_wait+0x94>)
    61e8:	7e32      	ldrb	r2, [r6, #24]
    61ea:	423a      	tst	r2, r7
    61ec:	d1de      	bne.n	61ac <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    61ee:	2b01      	cmp	r3, #1
    61f0:	d009      	beq.n	6206 <usart_read_buffer_wait+0x8a>
    61f2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    61f4:	2b00      	cmp	r3, #0
    61f6:	d1f7      	bne.n	61e8 <usart_read_buffer_wait+0x6c>
    61f8:	e7d8      	b.n	61ac <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    61fa:	3502      	adds	r5, #2
    61fc:	b2ad      	uxth	r5, r5
    61fe:	0a1b      	lsrs	r3, r3, #8
    6200:	9a01      	ldr	r2, [sp, #4]
    6202:	5453      	strb	r3, [r2, r1]
    6204:	e7e5      	b.n	61d2 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    6206:	2012      	movs	r0, #18
    6208:	e7c1      	b.n	618e <usart_read_buffer_wait+0x12>
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	0000604d 	.word	0x0000604d
    6210:	0000ffff 	.word	0x0000ffff

00006214 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6216:	0004      	movs	r4, r0
    6218:	000d      	movs	r5, r1
    621a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    621c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    621e:	4b0f      	ldr	r3, [pc, #60]	; (625c <_usart_read_buffer+0x48>)
    6220:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    6222:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6224:	b29b      	uxth	r3, r3
    6226:	2b00      	cmp	r3, #0
    6228:	d003      	beq.n	6232 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    622a:	4b0d      	ldr	r3, [pc, #52]	; (6260 <_usart_read_buffer+0x4c>)
    622c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    622e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    6232:	85a6      	strh	r6, [r4, #44]	; 0x2c
    6234:	4b0a      	ldr	r3, [pc, #40]	; (6260 <_usart_read_buffer+0x4c>)
    6236:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    6238:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    623a:	2205      	movs	r2, #5
    623c:	2332      	movs	r3, #50	; 0x32
    623e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6240:	3b2e      	subs	r3, #46	; 0x2e
    6242:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    6244:	7a23      	ldrb	r3, [r4, #8]
    6246:	2b00      	cmp	r3, #0
    6248:	d001      	beq.n	624e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    624a:	2320      	movs	r3, #32
    624c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    624e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    6250:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    6252:	2b00      	cmp	r3, #0
    6254:	d0ec      	beq.n	6230 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6256:	2308      	movs	r3, #8
    6258:	75bb      	strb	r3, [r7, #22]
    625a:	e7e9      	b.n	6230 <_usart_read_buffer+0x1c>
    625c:	00004569 	.word	0x00004569
    6260:	000045a9 	.word	0x000045a9

00006264 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6264:	1c93      	adds	r3, r2, #2
    6266:	009b      	lsls	r3, r3, #2
    6268:	18c3      	adds	r3, r0, r3
    626a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    626c:	2130      	movs	r1, #48	; 0x30
    626e:	2301      	movs	r3, #1
    6270:	4093      	lsls	r3, r2
    6272:	001a      	movs	r2, r3
    6274:	5c43      	ldrb	r3, [r0, r1]
    6276:	4313      	orrs	r3, r2
    6278:	5443      	strb	r3, [r0, r1]
}
    627a:	4770      	bx	lr

0000627c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    627c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    627e:	2317      	movs	r3, #23
	if (length == 0) {
    6280:	2a00      	cmp	r2, #0
    6282:	d101      	bne.n	6288 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    6284:	0018      	movs	r0, r3
    6286:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6288:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    628a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    628c:	2c00      	cmp	r4, #0
    628e:	d0f9      	beq.n	6284 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6290:	4b01      	ldr	r3, [pc, #4]	; (6298 <usart_read_buffer_job+0x1c>)
    6292:	4798      	blx	r3
    6294:	0003      	movs	r3, r0
    6296:	e7f5      	b.n	6284 <usart_read_buffer_job+0x8>
    6298:	00006215 	.word	0x00006215

0000629c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    629e:	0080      	lsls	r0, r0, #2
    62a0:	4b62      	ldr	r3, [pc, #392]	; (642c <_usart_interrupt_handler+0x190>)
    62a2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    62a4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    62a6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    62a8:	2b00      	cmp	r3, #0
    62aa:	d1fc      	bne.n	62a6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    62ac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    62ae:	7da6      	ldrb	r6, [r4, #22]
    62b0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    62b2:	2330      	movs	r3, #48	; 0x30
    62b4:	5ceb      	ldrb	r3, [r5, r3]
    62b6:	2231      	movs	r2, #49	; 0x31
    62b8:	5caf      	ldrb	r7, [r5, r2]
    62ba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    62bc:	07f3      	lsls	r3, r6, #31
    62be:	d522      	bpl.n	6306 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    62c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62c2:	b29b      	uxth	r3, r3
    62c4:	2b00      	cmp	r3, #0
    62c6:	d01c      	beq.n	6302 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    62ca:	7813      	ldrb	r3, [r2, #0]
    62cc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    62ce:	1c51      	adds	r1, r2, #1
    62d0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62d2:	7969      	ldrb	r1, [r5, #5]
    62d4:	2901      	cmp	r1, #1
    62d6:	d00e      	beq.n	62f6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62d8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    62da:	05db      	lsls	r3, r3, #23
    62dc:	0ddb      	lsrs	r3, r3, #23
    62de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    62e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62e2:	3b01      	subs	r3, #1
    62e4:	b29b      	uxth	r3, r3
    62e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    62e8:	2b00      	cmp	r3, #0
    62ea:	d10c      	bne.n	6306 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    62ec:	3301      	adds	r3, #1
    62ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    62f0:	3301      	adds	r3, #1
    62f2:	75a3      	strb	r3, [r4, #22]
    62f4:	e007      	b.n	6306 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    62f6:	7851      	ldrb	r1, [r2, #1]
    62f8:	0209      	lsls	r1, r1, #8
    62fa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    62fc:	3202      	adds	r2, #2
    62fe:	62aa      	str	r2, [r5, #40]	; 0x28
    6300:	e7eb      	b.n	62da <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6302:	2301      	movs	r3, #1
    6304:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6306:	07b3      	lsls	r3, r6, #30
    6308:	d506      	bpl.n	6318 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    630a:	2302      	movs	r3, #2
    630c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    630e:	2200      	movs	r2, #0
    6310:	3331      	adds	r3, #49	; 0x31
    6312:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6314:	07fb      	lsls	r3, r7, #31
    6316:	d41a      	bmi.n	634e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6318:	0773      	lsls	r3, r6, #29
    631a:	d565      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    631c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    631e:	b29b      	uxth	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d05f      	beq.n	63e4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6324:	8b63      	ldrh	r3, [r4, #26]
    6326:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6328:	071a      	lsls	r2, r3, #28
    632a:	d414      	bmi.n	6356 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    632c:	223f      	movs	r2, #63	; 0x3f
    632e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6330:	2b00      	cmp	r3, #0
    6332:	d034      	beq.n	639e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6334:	079a      	lsls	r2, r3, #30
    6336:	d511      	bpl.n	635c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6338:	221a      	movs	r2, #26
    633a:	2332      	movs	r3, #50	; 0x32
    633c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    633e:	3b30      	subs	r3, #48	; 0x30
    6340:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6342:	077b      	lsls	r3, r7, #29
    6344:	d550      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6346:	0028      	movs	r0, r5
    6348:	696b      	ldr	r3, [r5, #20]
    634a:	4798      	blx	r3
    634c:	e04c      	b.n	63e8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    634e:	0028      	movs	r0, r5
    6350:	68eb      	ldr	r3, [r5, #12]
    6352:	4798      	blx	r3
    6354:	e7e0      	b.n	6318 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6356:	2237      	movs	r2, #55	; 0x37
    6358:	4013      	ands	r3, r2
    635a:	e7e9      	b.n	6330 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    635c:	075a      	lsls	r2, r3, #29
    635e:	d505      	bpl.n	636c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6360:	221e      	movs	r2, #30
    6362:	2332      	movs	r3, #50	; 0x32
    6364:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6366:	3b2e      	subs	r3, #46	; 0x2e
    6368:	8363      	strh	r3, [r4, #26]
    636a:	e7ea      	b.n	6342 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    636c:	07da      	lsls	r2, r3, #31
    636e:	d505      	bpl.n	637c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6370:	2213      	movs	r2, #19
    6372:	2332      	movs	r3, #50	; 0x32
    6374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6376:	3b31      	subs	r3, #49	; 0x31
    6378:	8363      	strh	r3, [r4, #26]
    637a:	e7e2      	b.n	6342 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    637c:	06da      	lsls	r2, r3, #27
    637e:	d505      	bpl.n	638c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6380:	2242      	movs	r2, #66	; 0x42
    6382:	2332      	movs	r3, #50	; 0x32
    6384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6386:	3b22      	subs	r3, #34	; 0x22
    6388:	8363      	strh	r3, [r4, #26]
    638a:	e7da      	b.n	6342 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    638c:	2220      	movs	r2, #32
    638e:	421a      	tst	r2, r3
    6390:	d0d7      	beq.n	6342 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6392:	3221      	adds	r2, #33	; 0x21
    6394:	2332      	movs	r3, #50	; 0x32
    6396:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6398:	3b12      	subs	r3, #18
    639a:	8363      	strh	r3, [r4, #26]
    639c:	e7d1      	b.n	6342 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    639e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    63a0:	05db      	lsls	r3, r3, #23
    63a2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    63a4:	b2da      	uxtb	r2, r3
    63a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    63a8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    63aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    63ac:	1c51      	adds	r1, r2, #1
    63ae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    63b0:	7969      	ldrb	r1, [r5, #5]
    63b2:	2901      	cmp	r1, #1
    63b4:	d010      	beq.n	63d8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    63b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    63b8:	3b01      	subs	r3, #1
    63ba:	b29b      	uxth	r3, r3
    63bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    63be:	2b00      	cmp	r3, #0
    63c0:	d112      	bne.n	63e8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63c2:	3304      	adds	r3, #4
    63c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    63c6:	2200      	movs	r2, #0
    63c8:	332e      	adds	r3, #46	; 0x2e
    63ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    63cc:	07bb      	lsls	r3, r7, #30
    63ce:	d50b      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    63d0:	0028      	movs	r0, r5
    63d2:	692b      	ldr	r3, [r5, #16]
    63d4:	4798      	blx	r3
    63d6:	e007      	b.n	63e8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    63d8:	0a1b      	lsrs	r3, r3, #8
    63da:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    63dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    63de:	3301      	adds	r3, #1
    63e0:	626b      	str	r3, [r5, #36]	; 0x24
    63e2:	e7e8      	b.n	63b6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63e4:	2304      	movs	r3, #4
    63e6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    63e8:	06f3      	lsls	r3, r6, #27
    63ea:	d504      	bpl.n	63f6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    63ec:	2310      	movs	r3, #16
    63ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    63f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    63f2:	06fb      	lsls	r3, r7, #27
    63f4:	d40e      	bmi.n	6414 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    63f6:	06b3      	lsls	r3, r6, #26
    63f8:	d504      	bpl.n	6404 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    63fa:	2320      	movs	r3, #32
    63fc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    63fe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6400:	073b      	lsls	r3, r7, #28
    6402:	d40b      	bmi.n	641c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6404:	0733      	lsls	r3, r6, #28
    6406:	d504      	bpl.n	6412 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6408:	2308      	movs	r3, #8
    640a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    640c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    640e:	06bb      	lsls	r3, r7, #26
    6410:	d408      	bmi.n	6424 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6414:	0028      	movs	r0, r5
    6416:	69eb      	ldr	r3, [r5, #28]
    6418:	4798      	blx	r3
    641a:	e7ec      	b.n	63f6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    641c:	0028      	movs	r0, r5
    641e:	69ab      	ldr	r3, [r5, #24]
    6420:	4798      	blx	r3
    6422:	e7ef      	b.n	6404 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6424:	6a2b      	ldr	r3, [r5, #32]
    6426:	0028      	movs	r0, r5
    6428:	4798      	blx	r3
}
    642a:	e7f2      	b.n	6412 <_usart_interrupt_handler+0x176>
    642c:	20001f2c 	.word	0x20001f2c

00006430 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6430:	b510      	push	{r4, lr}
	switch (clock_source) {
    6432:	2808      	cmp	r0, #8
    6434:	d803      	bhi.n	643e <system_clock_source_get_hz+0xe>
    6436:	0080      	lsls	r0, r0, #2
    6438:	4b1c      	ldr	r3, [pc, #112]	; (64ac <system_clock_source_get_hz+0x7c>)
    643a:	581b      	ldr	r3, [r3, r0]
    643c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    643e:	2000      	movs	r0, #0
    6440:	e032      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6442:	4b1b      	ldr	r3, [pc, #108]	; (64b0 <system_clock_source_get_hz+0x80>)
    6444:	6918      	ldr	r0, [r3, #16]
    6446:	e02f      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6448:	4b1a      	ldr	r3, [pc, #104]	; (64b4 <system_clock_source_get_hz+0x84>)
    644a:	7d18      	ldrb	r0, [r3, #20]
    644c:	0700      	lsls	r0, r0, #28
    644e:	0f80      	lsrs	r0, r0, #30
    6450:	1c43      	adds	r3, r0, #1
    6452:	4819      	ldr	r0, [pc, #100]	; (64b8 <system_clock_source_get_hz+0x88>)
    6454:	4358      	muls	r0, r3
    6456:	e027      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6458:	4b15      	ldr	r3, [pc, #84]	; (64b0 <system_clock_source_get_hz+0x80>)
    645a:	6958      	ldr	r0, [r3, #20]
    645c:	e024      	b.n	64a8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    645e:	4b14      	ldr	r3, [pc, #80]	; (64b0 <system_clock_source_get_hz+0x80>)
    6460:	681b      	ldr	r3, [r3, #0]
			return 0;
    6462:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6464:	079b      	lsls	r3, r3, #30
    6466:	d51f      	bpl.n	64a8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6468:	4912      	ldr	r1, [pc, #72]	; (64b4 <system_clock_source_get_hz+0x84>)
    646a:	2280      	movs	r2, #128	; 0x80
    646c:	0052      	lsls	r2, r2, #1
    646e:	68cb      	ldr	r3, [r1, #12]
    6470:	4213      	tst	r3, r2
    6472:	d0fc      	beq.n	646e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6474:	4b0e      	ldr	r3, [pc, #56]	; (64b0 <system_clock_source_get_hz+0x80>)
    6476:	681b      	ldr	r3, [r3, #0]
    6478:	075b      	lsls	r3, r3, #29
    647a:	d401      	bmi.n	6480 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    647c:	480f      	ldr	r0, [pc, #60]	; (64bc <system_clock_source_get_hz+0x8c>)
    647e:	e013      	b.n	64a8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6480:	2000      	movs	r0, #0
    6482:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <system_clock_source_get_hz+0x90>)
    6484:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6486:	4b0a      	ldr	r3, [pc, #40]	; (64b0 <system_clock_source_get_hz+0x80>)
    6488:	689b      	ldr	r3, [r3, #8]
    648a:	041b      	lsls	r3, r3, #16
    648c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    648e:	4358      	muls	r0, r3
    6490:	e00a      	b.n	64a8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6492:	2328      	movs	r3, #40	; 0x28
    6494:	4a07      	ldr	r2, [pc, #28]	; (64b4 <system_clock_source_get_hz+0x84>)
    6496:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6498:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    649a:	079b      	lsls	r3, r3, #30
    649c:	d504      	bpl.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    649e:	4b04      	ldr	r3, [pc, #16]	; (64b0 <system_clock_source_get_hz+0x80>)
    64a0:	68d8      	ldr	r0, [r3, #12]
    64a2:	e001      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    64a4:	2080      	movs	r0, #128	; 0x80
    64a6:	0200      	lsls	r0, r0, #8
	}
}
    64a8:	bd10      	pop	{r4, pc}
    64aa:	46c0      	nop			; (mov r8, r8)
    64ac:	00017b0c 	.word	0x00017b0c
    64b0:	200000e0 	.word	0x200000e0
    64b4:	40000c00 	.word	0x40000c00
    64b8:	003d0900 	.word	0x003d0900
    64bc:	02dc6c00 	.word	0x02dc6c00
    64c0:	00006a89 	.word	0x00006a89

000064c4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    64c4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    64c6:	4c0b      	ldr	r4, [pc, #44]	; (64f4 <system_clock_source_osc16m_set_config+0x30>)
    64c8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    64ca:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    64cc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    64ce:	7802      	ldrb	r2, [r0, #0]
    64d0:	2103      	movs	r1, #3
    64d2:	4011      	ands	r1, r2
    64d4:	0089      	lsls	r1, r1, #2
    64d6:	220c      	movs	r2, #12
    64d8:	4393      	bics	r3, r2
    64da:	430b      	orrs	r3, r1
    64dc:	3a0b      	subs	r2, #11
    64de:	4032      	ands	r2, r6
    64e0:	0192      	lsls	r2, r2, #6
    64e2:	2140      	movs	r1, #64	; 0x40
    64e4:	438b      	bics	r3, r1
    64e6:	4313      	orrs	r3, r2
    64e8:	01ed      	lsls	r5, r5, #7
    64ea:	227f      	movs	r2, #127	; 0x7f
    64ec:	4013      	ands	r3, r2
    64ee:	432b      	orrs	r3, r5
    64f0:	7523      	strb	r3, [r4, #20]
}
    64f2:	bd70      	pop	{r4, r5, r6, pc}
    64f4:	40000c00 	.word	0x40000c00

000064f8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fa:	46d6      	mov	lr, sl
    64fc:	464f      	mov	r7, r9
    64fe:	4646      	mov	r6, r8
    6500:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6502:	4b20      	ldr	r3, [pc, #128]	; (6584 <system_clock_source_xosc32k_set_config+0x8c>)
    6504:	469a      	mov	sl, r3
    6506:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6508:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    650a:	7801      	ldrb	r1, [r0, #0]
    650c:	424c      	negs	r4, r1
    650e:	414c      	adcs	r4, r1
    6510:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6512:	7881      	ldrb	r1, [r0, #2]
    6514:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6516:	78c1      	ldrb	r1, [r0, #3]
    6518:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    651a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    651c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    651e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6520:	6840      	ldr	r0, [r0, #4]
    6522:	4919      	ldr	r1, [pc, #100]	; (6588 <system_clock_source_xosc32k_set_config+0x90>)
    6524:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6526:	2101      	movs	r1, #1
    6528:	4648      	mov	r0, r9
    652a:	0080      	lsls	r0, r0, #2
    652c:	2204      	movs	r2, #4
    652e:	4393      	bics	r3, r2
    6530:	4303      	orrs	r3, r0
    6532:	4640      	mov	r0, r8
    6534:	4008      	ands	r0, r1
    6536:	00c0      	lsls	r0, r0, #3
    6538:	3204      	adds	r2, #4
    653a:	4393      	bics	r3, r2
    653c:	4303      	orrs	r3, r0
    653e:	4660      	mov	r0, ip
    6540:	4008      	ands	r0, r1
    6542:	0100      	lsls	r0, r0, #4
    6544:	3208      	adds	r2, #8
    6546:	4393      	bics	r3, r2
    6548:	4303      	orrs	r3, r0
    654a:	400f      	ands	r7, r1
    654c:	01bf      	lsls	r7, r7, #6
    654e:	2040      	movs	r0, #64	; 0x40
    6550:	4383      	bics	r3, r0
    6552:	433b      	orrs	r3, r7
    6554:	400e      	ands	r6, r1
    6556:	01f6      	lsls	r6, r6, #7
    6558:	3040      	adds	r0, #64	; 0x40
    655a:	4383      	bics	r3, r0
    655c:	4333      	orrs	r3, r6
    655e:	3879      	subs	r0, #121	; 0x79
    6560:	4005      	ands	r5, r0
    6562:	022d      	lsls	r5, r5, #8
    6564:	4809      	ldr	r0, [pc, #36]	; (658c <system_clock_source_xosc32k_set_config+0x94>)
    6566:	4003      	ands	r3, r0
    6568:	432b      	orrs	r3, r5
    656a:	4021      	ands	r1, r4
    656c:	0309      	lsls	r1, r1, #12
    656e:	4808      	ldr	r0, [pc, #32]	; (6590 <system_clock_source_xosc32k_set_config+0x98>)
    6570:	4003      	ands	r3, r0
    6572:	430b      	orrs	r3, r1
    6574:	4652      	mov	r2, sl
    6576:	6153      	str	r3, [r2, #20]
}
    6578:	bc1c      	pop	{r2, r3, r4}
    657a:	4690      	mov	r8, r2
    657c:	4699      	mov	r9, r3
    657e:	46a2      	mov	sl, r4
    6580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	40001000 	.word	0x40001000
    6588:	200000e0 	.word	0x200000e0
    658c:	fffff8ff 	.word	0xfffff8ff
    6590:	ffffefff 	.word	0xffffefff

00006594 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6594:	2808      	cmp	r0, #8
    6596:	d803      	bhi.n	65a0 <system_clock_source_enable+0xc>
    6598:	0080      	lsls	r0, r0, #2
    659a:	4b29      	ldr	r3, [pc, #164]	; (6640 <system_clock_source_enable+0xac>)
    659c:	581b      	ldr	r3, [r3, r0]
    659e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    65a0:	2017      	movs	r0, #23
    65a2:	e04b      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    65a4:	4a27      	ldr	r2, [pc, #156]	; (6644 <system_clock_source_enable+0xb0>)
    65a6:	7d13      	ldrb	r3, [r2, #20]
    65a8:	2102      	movs	r1, #2
    65aa:	430b      	orrs	r3, r1
    65ac:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    65ae:	2000      	movs	r0, #0
    65b0:	e044      	b.n	663c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    65b2:	4a25      	ldr	r2, [pc, #148]	; (6648 <system_clock_source_enable+0xb4>)
    65b4:	6993      	ldr	r3, [r2, #24]
    65b6:	2102      	movs	r1, #2
    65b8:	430b      	orrs	r3, r1
    65ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    65bc:	2000      	movs	r0, #0
		break;
    65be:	e03d      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    65c0:	4a20      	ldr	r2, [pc, #128]	; (6644 <system_clock_source_enable+0xb0>)
    65c2:	8a13      	ldrh	r3, [r2, #16]
    65c4:	2102      	movs	r1, #2
    65c6:	430b      	orrs	r3, r1
    65c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    65ca:	2000      	movs	r0, #0
		break;
    65cc:	e036      	b.n	663c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    65ce:	4a1e      	ldr	r2, [pc, #120]	; (6648 <system_clock_source_enable+0xb4>)
    65d0:	6953      	ldr	r3, [r2, #20]
    65d2:	2102      	movs	r1, #2
    65d4:	430b      	orrs	r3, r1
    65d6:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    65d8:	2000      	movs	r0, #0
		break;
    65da:	e02f      	b.n	663c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    65dc:	491b      	ldr	r1, [pc, #108]	; (664c <system_clock_source_enable+0xb8>)
    65de:	680b      	ldr	r3, [r1, #0]
    65e0:	2202      	movs	r2, #2
    65e2:	4313      	orrs	r3, r2
    65e4:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    65e6:	4b17      	ldr	r3, [pc, #92]	; (6644 <system_clock_source_enable+0xb0>)
    65e8:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    65ea:	0019      	movs	r1, r3
    65ec:	32fe      	adds	r2, #254	; 0xfe
    65ee:	68cb      	ldr	r3, [r1, #12]
    65f0:	4213      	tst	r3, r2
    65f2:	d0fc      	beq.n	65ee <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    65f4:	4a15      	ldr	r2, [pc, #84]	; (664c <system_clock_source_enable+0xb8>)
    65f6:	6891      	ldr	r1, [r2, #8]
    65f8:	4b12      	ldr	r3, [pc, #72]	; (6644 <system_clock_source_enable+0xb0>)
    65fa:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    65fc:	6852      	ldr	r2, [r2, #4]
    65fe:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6600:	2200      	movs	r2, #0
    6602:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6604:	0019      	movs	r1, r3
    6606:	3201      	adds	r2, #1
    6608:	32ff      	adds	r2, #255	; 0xff
    660a:	68cb      	ldr	r3, [r1, #12]
    660c:	4213      	tst	r3, r2
    660e:	d0fc      	beq.n	660a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6610:	4b0e      	ldr	r3, [pc, #56]	; (664c <system_clock_source_enable+0xb8>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	b29b      	uxth	r3, r3
    6616:	4a0b      	ldr	r2, [pc, #44]	; (6644 <system_clock_source_enable+0xb0>)
    6618:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    661a:	2000      	movs	r0, #0
    661c:	e00e      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    661e:	4909      	ldr	r1, [pc, #36]	; (6644 <system_clock_source_enable+0xb0>)
    6620:	2228      	movs	r2, #40	; 0x28
    6622:	5c8b      	ldrb	r3, [r1, r2]
    6624:	2002      	movs	r0, #2
    6626:	4303      	orrs	r3, r0
    6628:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    662a:	0008      	movs	r0, r1
    662c:	2138      	movs	r1, #56	; 0x38
    662e:	3a26      	subs	r2, #38	; 0x26
    6630:	5c43      	ldrb	r3, [r0, r1]
    6632:	4213      	tst	r3, r2
    6634:	d1fc      	bne.n	6630 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6636:	2000      	movs	r0, #0
    6638:	e000      	b.n	663c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    663a:	2000      	movs	r0, #0
}
    663c:	4770      	bx	lr
    663e:	46c0      	nop			; (mov r8, r8)
    6640:	00017b30 	.word	0x00017b30
    6644:	40000c00 	.word	0x40000c00
    6648:	40001000 	.word	0x40001000
    664c:	200000e0 	.word	0x200000e0

00006650 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6650:	2808      	cmp	r0, #8
    6652:	d832      	bhi.n	66ba <system_clock_source_disable+0x6a>
    6654:	0080      	lsls	r0, r0, #2
    6656:	4b1a      	ldr	r3, [pc, #104]	; (66c0 <system_clock_source_disable+0x70>)
    6658:	581b      	ldr	r3, [r3, r0]
    665a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    665c:	4a19      	ldr	r2, [pc, #100]	; (66c4 <system_clock_source_disable+0x74>)
    665e:	7d13      	ldrb	r3, [r2, #20]
    6660:	2102      	movs	r1, #2
    6662:	438b      	bics	r3, r1
    6664:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6666:	2000      	movs	r0, #0
}
    6668:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    666a:	4a17      	ldr	r2, [pc, #92]	; (66c8 <system_clock_source_disable+0x78>)
    666c:	6993      	ldr	r3, [r2, #24]
    666e:	2102      	movs	r1, #2
    6670:	438b      	bics	r3, r1
    6672:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6674:	2000      	movs	r0, #0
		break;
    6676:	e7f7      	b.n	6668 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6678:	4a12      	ldr	r2, [pc, #72]	; (66c4 <system_clock_source_disable+0x74>)
    667a:	8a13      	ldrh	r3, [r2, #16]
    667c:	2102      	movs	r1, #2
    667e:	438b      	bics	r3, r1
    6680:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6682:	2000      	movs	r0, #0
		break;
    6684:	e7f0      	b.n	6668 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6686:	4a10      	ldr	r2, [pc, #64]	; (66c8 <system_clock_source_disable+0x78>)
    6688:	6953      	ldr	r3, [r2, #20]
    668a:	2102      	movs	r1, #2
    668c:	438b      	bics	r3, r1
    668e:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6690:	2000      	movs	r0, #0
		break;
    6692:	e7e9      	b.n	6668 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6694:	4b0d      	ldr	r3, [pc, #52]	; (66cc <system_clock_source_disable+0x7c>)
    6696:	681a      	ldr	r2, [r3, #0]
    6698:	2102      	movs	r1, #2
    669a:	438a      	bics	r2, r1
    669c:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	b29b      	uxth	r3, r3
    66a2:	4a08      	ldr	r2, [pc, #32]	; (66c4 <system_clock_source_disable+0x74>)
    66a4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    66a6:	2000      	movs	r0, #0
		break;
    66a8:	e7de      	b.n	6668 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    66aa:	4906      	ldr	r1, [pc, #24]	; (66c4 <system_clock_source_disable+0x74>)
    66ac:	2228      	movs	r2, #40	; 0x28
    66ae:	5c8b      	ldrb	r3, [r1, r2]
    66b0:	2002      	movs	r0, #2
    66b2:	4383      	bics	r3, r0
    66b4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    66b6:	2000      	movs	r0, #0
		break;
    66b8:	e7d6      	b.n	6668 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    66ba:	2017      	movs	r0, #23
    66bc:	e7d4      	b.n	6668 <system_clock_source_disable+0x18>
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	00017b54 	.word	0x00017b54
    66c4:	40000c00 	.word	0x40000c00
    66c8:	40001000 	.word	0x40001000
    66cc:	200000e0 	.word	0x200000e0

000066d0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    66d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66d2:	46d6      	mov	lr, sl
    66d4:	464f      	mov	r7, r9
    66d6:	4646      	mov	r6, r8
    66d8:	b5c0      	push	{r6, r7, lr}
    66da:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    66dc:	2280      	movs	r2, #128	; 0x80
    66de:	0052      	lsls	r2, r2, #1
    66e0:	4b56      	ldr	r3, [pc, #344]	; (683c <system_clock_init+0x16c>)
    66e2:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    66e4:	3afd      	subs	r2, #253	; 0xfd
    66e6:	4b56      	ldr	r3, [pc, #344]	; (6840 <system_clock_init+0x170>)
    66e8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    66ea:	4a56      	ldr	r2, [pc, #344]	; (6844 <system_clock_init+0x174>)
    66ec:	6853      	ldr	r3, [r2, #4]
    66ee:	211e      	movs	r1, #30
    66f0:	438b      	bics	r3, r1
    66f2:	391a      	subs	r1, #26
    66f4:	430b      	orrs	r3, r1
    66f6:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    66f8:	2380      	movs	r3, #128	; 0x80
    66fa:	05db      	lsls	r3, r3, #23
    66fc:	789b      	ldrb	r3, [r3, #2]
    66fe:	2b02      	cmp	r3, #2
    6700:	d00f      	beq.n	6722 <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6702:	2380      	movs	r3, #128	; 0x80
    6704:	05db      	lsls	r3, r3, #23
    6706:	789b      	ldrb	r3, [r3, #2]
    6708:	b25b      	sxtb	r3, r3
    670a:	2b00      	cmp	r3, #0
    670c:	db09      	blt.n	6722 <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    670e:	2380      	movs	r3, #128	; 0x80
    6710:	05db      	lsls	r3, r3, #23
    6712:	2201      	movs	r2, #1
    6714:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6716:	3201      	adds	r2, #1
    6718:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    671a:	001a      	movs	r2, r3
    671c:	7993      	ldrb	r3, [r2, #6]
    671e:	2b00      	cmp	r3, #0
    6720:	d0fc      	beq.n	671c <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6722:	a805      	add	r0, sp, #20
    6724:	2300      	movs	r3, #0
    6726:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6728:	2280      	movs	r2, #128	; 0x80
    672a:	0212      	lsls	r2, r2, #8
    672c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    672e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6730:	2201      	movs	r2, #1
    6732:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6734:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6736:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6738:	3203      	adds	r2, #3
    673a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    673c:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    673e:	4b42      	ldr	r3, [pc, #264]	; (6848 <system_clock_init+0x178>)
    6740:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6742:	2005      	movs	r0, #5
    6744:	4b41      	ldr	r3, [pc, #260]	; (684c <system_clock_init+0x17c>)
    6746:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6748:	4941      	ldr	r1, [pc, #260]	; (6850 <system_clock_init+0x180>)
    674a:	2201      	movs	r2, #1
    674c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    674e:	421a      	tst	r2, r3
    6750:	d0fc      	beq.n	674c <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6752:	4a3f      	ldr	r2, [pc, #252]	; (6850 <system_clock_init+0x180>)
    6754:	6953      	ldr	r3, [r2, #20]
    6756:	2180      	movs	r1, #128	; 0x80
    6758:	430b      	orrs	r3, r1
    675a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    675c:	a902      	add	r1, sp, #8
    675e:	2501      	movs	r5, #1
    6760:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6762:	2400      	movs	r4, #0
    6764:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6766:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6768:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    676a:	2303      	movs	r3, #3
    676c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    676e:	2000      	movs	r0, #0
    6770:	4b38      	ldr	r3, [pc, #224]	; (6854 <system_clock_init+0x184>)
    6772:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6774:	2006      	movs	r0, #6
    6776:	4b38      	ldr	r3, [pc, #224]	; (6858 <system_clock_init+0x188>)
    6778:	4798      	blx	r3
	config->run_in_standby  = false;
    677a:	a801      	add	r0, sp, #4
    677c:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    677e:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6780:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6782:	4b36      	ldr	r3, [pc, #216]	; (685c <system_clock_init+0x18c>)
    6784:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6786:	2006      	movs	r0, #6
    6788:	4b30      	ldr	r3, [pc, #192]	; (684c <system_clock_init+0x17c>)
    678a:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    678c:	492b      	ldr	r1, [pc, #172]	; (683c <system_clock_init+0x16c>)
    678e:	2210      	movs	r2, #16
    6790:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6792:	421a      	tst	r2, r3
    6794:	d0fc      	beq.n	6790 <system_clock_init+0xc0>
	config->division_factor    = 1;
    6796:	ac02      	add	r4, sp, #8
    6798:	2601      	movs	r6, #1
    679a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    679c:	2500      	movs	r5, #0
    679e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67a0:	2306      	movs	r3, #6
    67a2:	469a      	mov	sl, r3
    67a4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67a6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67a8:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    67aa:	0021      	movs	r1, r4
    67ac:	2000      	movs	r0, #0
    67ae:	4b29      	ldr	r3, [pc, #164]	; (6854 <system_clock_init+0x184>)
    67b0:	4698      	mov	r8, r3
    67b2:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    67b4:	4b2a      	ldr	r3, [pc, #168]	; (6860 <system_clock_init+0x190>)
    67b6:	4798      	blx	r3
	config->division_factor    = 1;
    67b8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67ba:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    67bc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    67be:	2305      	movs	r3, #5
    67c0:	7023      	strb	r3, [r4, #0]
    67c2:	7226      	strb	r6, [r4, #8]
    67c4:	0021      	movs	r1, r4
    67c6:	2001      	movs	r0, #1
    67c8:	47c0      	blx	r8
    67ca:	2001      	movs	r0, #1
    67cc:	4b25      	ldr	r3, [pc, #148]	; (6864 <system_clock_init+0x194>)
    67ce:	4699      	mov	r9, r3
    67d0:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    67d2:	4f25      	ldr	r7, [pc, #148]	; (6868 <system_clock_init+0x198>)
    67d4:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    67d6:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    67d8:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    67da:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67dc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67de:	4653      	mov	r3, sl
    67e0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67e2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67e4:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    67e6:	0021      	movs	r1, r4
    67e8:	2000      	movs	r0, #0
    67ea:	47c0      	blx	r8
    67ec:	2000      	movs	r0, #0
    67ee:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    67f0:	2000      	movs	r0, #0
    67f2:	4b1e      	ldr	r3, [pc, #120]	; (686c <system_clock_init+0x19c>)
    67f4:	4798      	blx	r3
    67f6:	7939      	ldrb	r1, [r7, #4]
    67f8:	b2c9      	uxtb	r1, r1
    67fa:	4b1d      	ldr	r3, [pc, #116]	; (6870 <system_clock_init+0x1a0>)
    67fc:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    67fe:	4b1d      	ldr	r3, [pc, #116]	; (6874 <system_clock_init+0x1a4>)
    6800:	4298      	cmp	r0, r3
    6802:	d814      	bhi.n	682e <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6804:	2380      	movs	r3, #128	; 0x80
    6806:	05db      	lsls	r3, r3, #23
    6808:	789b      	ldrb	r3, [r3, #2]
    680a:	2b00      	cmp	r3, #0
    680c:	d00f      	beq.n	682e <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    680e:	2380      	movs	r3, #128	; 0x80
    6810:	05db      	lsls	r3, r3, #23
    6812:	789b      	ldrb	r3, [r3, #2]
    6814:	b25b      	sxtb	r3, r3
    6816:	2b00      	cmp	r3, #0
    6818:	db09      	blt.n	682e <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    681a:	2380      	movs	r3, #128	; 0x80
    681c:	05db      	lsls	r3, r3, #23
    681e:	2201      	movs	r2, #1
    6820:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6822:	2200      	movs	r2, #0
    6824:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6826:	001a      	movs	r2, r3
    6828:	7993      	ldrb	r3, [r2, #6]
    682a:	2b00      	cmp	r3, #0
    682c:	d0fc      	beq.n	6828 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    682e:	b008      	add	sp, #32
    6830:	bc1c      	pop	{r2, r3, r4}
    6832:	4690      	mov	r8, r2
    6834:	4699      	mov	r9, r3
    6836:	46a2      	mov	sl, r4
    6838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	40000c00 	.word	0x40000c00
    6840:	40001400 	.word	0x40001400
    6844:	41004000 	.word	0x41004000
    6848:	000064f9 	.word	0x000064f9
    684c:	00006595 	.word	0x00006595
    6850:	40001000 	.word	0x40001000
    6854:	0000689d 	.word	0x0000689d
    6858:	00006651 	.word	0x00006651
    685c:	000064c5 	.word	0x000064c5
    6860:	00006879 	.word	0x00006879
    6864:	00006949 	.word	0x00006949
    6868:	40000400 	.word	0x40000400
    686c:	00006989 	.word	0x00006989
    6870:	00013495 	.word	0x00013495
    6874:	00b71b00 	.word	0x00b71b00

00006878 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6878:	4a06      	ldr	r2, [pc, #24]	; (6894 <system_gclk_init+0x1c>)
    687a:	6953      	ldr	r3, [r2, #20]
    687c:	2140      	movs	r1, #64	; 0x40
    687e:	430b      	orrs	r3, r1
    6880:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6882:	2201      	movs	r2, #1
    6884:	4b04      	ldr	r3, [pc, #16]	; (6898 <system_gclk_init+0x20>)
    6886:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6888:	0019      	movs	r1, r3
    688a:	780b      	ldrb	r3, [r1, #0]
    688c:	4213      	tst	r3, r2
    688e:	d1fc      	bne.n	688a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6890:	4770      	bx	lr
    6892:	46c0      	nop			; (mov r8, r8)
    6894:	40000400 	.word	0x40000400
    6898:	40001800 	.word	0x40001800

0000689c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    689c:	b570      	push	{r4, r5, r6, lr}
    689e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    68a0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    68a2:	784b      	ldrb	r3, [r1, #1]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d002      	beq.n	68ae <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    68a8:	2380      	movs	r3, #128	; 0x80
    68aa:	00db      	lsls	r3, r3, #3
    68ac:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    68ae:	7a4b      	ldrb	r3, [r1, #9]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d002      	beq.n	68ba <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    68b4:	2380      	movs	r3, #128	; 0x80
    68b6:	011b      	lsls	r3, r3, #4
    68b8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    68ba:	6848      	ldr	r0, [r1, #4]
    68bc:	2801      	cmp	r0, #1
    68be:	d90f      	bls.n	68e0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    68c0:	1e43      	subs	r3, r0, #1
    68c2:	4218      	tst	r0, r3
    68c4:	d131      	bne.n	692a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    68c6:	2802      	cmp	r0, #2
    68c8:	d92d      	bls.n	6926 <system_gclk_gen_set_config+0x8a>
    68ca:	2302      	movs	r3, #2
    68cc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    68ce:	3201      	adds	r2, #1
						mask <<= 1) {
    68d0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    68d2:	4298      	cmp	r0, r3
    68d4:	d8fb      	bhi.n	68ce <system_gclk_gen_set_config+0x32>
    68d6:	2380      	movs	r3, #128	; 0x80
    68d8:	015b      	lsls	r3, r3, #5
    68da:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    68dc:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    68de:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    68e0:	7a0b      	ldrb	r3, [r1, #8]
    68e2:	2b00      	cmp	r3, #0
    68e4:	d002      	beq.n	68ec <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    68e6:	2380      	movs	r3, #128	; 0x80
    68e8:	019b      	lsls	r3, r3, #6
    68ea:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    68ec:	2604      	movs	r6, #4
    68ee:	40a6      	lsls	r6, r4
    68f0:	4911      	ldr	r1, [pc, #68]	; (6938 <system_gclk_gen_set_config+0x9c>)
    68f2:	4a12      	ldr	r2, [pc, #72]	; (693c <system_gclk_gen_set_config+0xa0>)
    68f4:	684b      	ldr	r3, [r1, #4]
    68f6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    68f8:	421e      	tst	r6, r3
    68fa:	d1fb      	bne.n	68f4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    68fc:	4b10      	ldr	r3, [pc, #64]	; (6940 <system_gclk_gen_set_config+0xa4>)
    68fe:	4798      	blx	r3
    6900:	00a4      	lsls	r4, r4, #2
    6902:	4b0d      	ldr	r3, [pc, #52]	; (6938 <system_gclk_gen_set_config+0x9c>)
    6904:	469c      	mov	ip, r3
    6906:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6908:	6a22      	ldr	r2, [r4, #32]
    690a:	2380      	movs	r3, #128	; 0x80
    690c:	005b      	lsls	r3, r3, #1
    690e:	401a      	ands	r2, r3
    6910:	432a      	orrs	r2, r5
    6912:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6914:	4661      	mov	r1, ip
    6916:	4a09      	ldr	r2, [pc, #36]	; (693c <system_gclk_gen_set_config+0xa0>)
    6918:	684b      	ldr	r3, [r1, #4]
    691a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    691c:	421e      	tst	r6, r3
    691e:	d1fb      	bne.n	6918 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6920:	4b08      	ldr	r3, [pc, #32]	; (6944 <system_gclk_gen_set_config+0xa8>)
    6922:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6924:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6926:	2200      	movs	r2, #0
    6928:	e7d5      	b.n	68d6 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    692a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    692c:	2380      	movs	r3, #128	; 0x80
    692e:	009b      	lsls	r3, r3, #2
    6930:	4318      	orrs	r0, r3
    6932:	4305      	orrs	r5, r0
    6934:	e7d4      	b.n	68e0 <system_gclk_gen_set_config+0x44>
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	40001800 	.word	0x40001800
    693c:	000007fc 	.word	0x000007fc
    6940:	00004569 	.word	0x00004569
    6944:	000045a9 	.word	0x000045a9

00006948 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6948:	b510      	push	{r4, lr}
    694a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    694c:	2204      	movs	r2, #4
    694e:	4082      	lsls	r2, r0
    6950:	4809      	ldr	r0, [pc, #36]	; (6978 <system_gclk_gen_enable+0x30>)
    6952:	490a      	ldr	r1, [pc, #40]	; (697c <system_gclk_gen_enable+0x34>)
    6954:	6843      	ldr	r3, [r0, #4]
    6956:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6958:	421a      	tst	r2, r3
    695a:	d1fb      	bne.n	6954 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    695c:	4b08      	ldr	r3, [pc, #32]	; (6980 <system_gclk_gen_enable+0x38>)
    695e:	4798      	blx	r3
    6960:	00a4      	lsls	r4, r4, #2
    6962:	4b05      	ldr	r3, [pc, #20]	; (6978 <system_gclk_gen_enable+0x30>)
    6964:	469c      	mov	ip, r3
    6966:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6968:	6a22      	ldr	r2, [r4, #32]
    696a:	2380      	movs	r3, #128	; 0x80
    696c:	005b      	lsls	r3, r3, #1
    696e:	4313      	orrs	r3, r2
    6970:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6972:	4b04      	ldr	r3, [pc, #16]	; (6984 <system_gclk_gen_enable+0x3c>)
    6974:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6976:	bd10      	pop	{r4, pc}
    6978:	40001800 	.word	0x40001800
    697c:	000007fc 	.word	0x000007fc
    6980:	00004569 	.word	0x00004569
    6984:	000045a9 	.word	0x000045a9

00006988 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    698a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    698c:	2204      	movs	r2, #4
    698e:	4082      	lsls	r2, r0
    6990:	4812      	ldr	r0, [pc, #72]	; (69dc <system_gclk_gen_get_hz+0x54>)
    6992:	4913      	ldr	r1, [pc, #76]	; (69e0 <system_gclk_gen_get_hz+0x58>)
    6994:	6843      	ldr	r3, [r0, #4]
    6996:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6998:	421a      	tst	r2, r3
    699a:	d1fb      	bne.n	6994 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    699c:	4b11      	ldr	r3, [pc, #68]	; (69e4 <system_gclk_gen_get_hz+0x5c>)
    699e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    69a0:	4f0e      	ldr	r7, [pc, #56]	; (69dc <system_gclk_gen_get_hz+0x54>)
    69a2:	3408      	adds	r4, #8
    69a4:	00a4      	lsls	r4, r4, #2
    69a6:	59e0      	ldr	r0, [r4, r7]
    69a8:	0700      	lsls	r0, r0, #28
    69aa:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    69ac:	4b0e      	ldr	r3, [pc, #56]	; (69e8 <system_gclk_gen_get_hz+0x60>)
    69ae:	4798      	blx	r3
    69b0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    69b2:	59e5      	ldr	r5, [r4, r7]
    69b4:	04ed      	lsls	r5, r5, #19
    69b6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    69b8:	59e4      	ldr	r4, [r4, r7]
    69ba:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    69bc:	4b0b      	ldr	r3, [pc, #44]	; (69ec <system_gclk_gen_get_hz+0x64>)
    69be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    69c0:	2d00      	cmp	r5, #0
    69c2:	d107      	bne.n	69d4 <system_gclk_gen_get_hz+0x4c>
    69c4:	2c01      	cmp	r4, #1
    69c6:	d907      	bls.n	69d8 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    69c8:	0021      	movs	r1, r4
    69ca:	0030      	movs	r0, r6
    69cc:	4b08      	ldr	r3, [pc, #32]	; (69f0 <system_gclk_gen_get_hz+0x68>)
    69ce:	4798      	blx	r3
    69d0:	0006      	movs	r6, r0
    69d2:	e001      	b.n	69d8 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    69d4:	3401      	adds	r4, #1
    69d6:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    69d8:	0030      	movs	r0, r6
    69da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69dc:	40001800 	.word	0x40001800
    69e0:	000007fc 	.word	0x000007fc
    69e4:	00004569 	.word	0x00004569
    69e8:	00006431 	.word	0x00006431
    69ec:	000045a9 	.word	0x000045a9
    69f0:	00013495 	.word	0x00013495

000069f4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    69f4:	b510      	push	{r4, lr}
    69f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    69f8:	4b09      	ldr	r3, [pc, #36]	; (6a20 <system_gclk_chan_enable+0x2c>)
    69fa:	4798      	blx	r3
    69fc:	00a0      	lsls	r0, r4, #2
    69fe:	4b09      	ldr	r3, [pc, #36]	; (6a24 <system_gclk_chan_enable+0x30>)
    6a00:	469c      	mov	ip, r3
    6a02:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    6a04:	2280      	movs	r2, #128	; 0x80
    6a06:	5883      	ldr	r3, [r0, r2]
    6a08:	2140      	movs	r1, #64	; 0x40
    6a0a:	430b      	orrs	r3, r1
    6a0c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    6a0e:	3140      	adds	r1, #64	; 0x40
    6a10:	3a40      	subs	r2, #64	; 0x40
    6a12:	5843      	ldr	r3, [r0, r1]
    6a14:	421a      	tst	r2, r3
    6a16:	d0fc      	beq.n	6a12 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <system_gclk_chan_enable+0x34>)
    6a1a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a1c:	bd10      	pop	{r4, pc}
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	00004569 	.word	0x00004569
    6a24:	40001800 	.word	0x40001800
    6a28:	000045a9 	.word	0x000045a9

00006a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6a2c:	b510      	push	{r4, lr}
    6a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a30:	4b09      	ldr	r3, [pc, #36]	; (6a58 <system_gclk_chan_disable+0x2c>)
    6a32:	4798      	blx	r3
    6a34:	00a0      	lsls	r0, r4, #2
    6a36:	4b09      	ldr	r3, [pc, #36]	; (6a5c <system_gclk_chan_disable+0x30>)
    6a38:	469c      	mov	ip, r3
    6a3a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6a3c:	2280      	movs	r2, #128	; 0x80
    6a3e:	5883      	ldr	r3, [r0, r2]
    6a40:	2140      	movs	r1, #64	; 0x40
    6a42:	438b      	bics	r3, r1
    6a44:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    6a46:	3140      	adds	r1, #64	; 0x40
    6a48:	3a40      	subs	r2, #64	; 0x40
    6a4a:	5843      	ldr	r3, [r0, r1]
    6a4c:	421a      	tst	r2, r3
    6a4e:	d1fc      	bne.n	6a4a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <system_gclk_chan_disable+0x34>)
    6a52:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a54:	bd10      	pop	{r4, pc}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	00004569 	.word	0x00004569
    6a5c:	40001800 	.word	0x40001800
    6a60:	000045a9 	.word	0x000045a9

00006a64 <system_gclk_chan_set_config>:
{
    6a64:	b570      	push	{r4, r5, r6, lr}
    6a66:	0004      	movs	r4, r0
    6a68:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6a6a:	4b05      	ldr	r3, [pc, #20]	; (6a80 <system_gclk_chan_set_config+0x1c>)
    6a6c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6a6e:	782a      	ldrb	r2, [r5, #0]
    6a70:	230f      	movs	r3, #15
    6a72:	4013      	ands	r3, r2
    6a74:	3420      	adds	r4, #32
    6a76:	00a4      	lsls	r4, r4, #2
    6a78:	4a02      	ldr	r2, [pc, #8]	; (6a84 <system_gclk_chan_set_config+0x20>)
    6a7a:	50a3      	str	r3, [r4, r2]
}
    6a7c:	bd70      	pop	{r4, r5, r6, pc}
    6a7e:	46c0      	nop			; (mov r8, r8)
    6a80:	00006a2d 	.word	0x00006a2d
    6a84:	40001800 	.word	0x40001800

00006a88 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a88:	b510      	push	{r4, lr}
    6a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a8c:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <system_gclk_chan_get_hz+0x20>)
    6a8e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6a90:	3420      	adds	r4, #32
    6a92:	00a4      	lsls	r4, r4, #2
    6a94:	4b05      	ldr	r3, [pc, #20]	; (6aac <system_gclk_chan_get_hz+0x24>)
    6a96:	58e4      	ldr	r4, [r4, r3]
    6a98:	0724      	lsls	r4, r4, #28
    6a9a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6a9c:	4b04      	ldr	r3, [pc, #16]	; (6ab0 <system_gclk_chan_get_hz+0x28>)
    6a9e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6aa0:	0020      	movs	r0, r4
    6aa2:	4b04      	ldr	r3, [pc, #16]	; (6ab4 <system_gclk_chan_get_hz+0x2c>)
    6aa4:	4798      	blx	r3
}
    6aa6:	bd10      	pop	{r4, pc}
    6aa8:	00004569 	.word	0x00004569
    6aac:	40001800 	.word	0x40001800
    6ab0:	000045a9 	.word	0x000045a9
    6ab4:	00006989 	.word	0x00006989

00006ab8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6ab8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6aba:	78d3      	ldrb	r3, [r2, #3]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d135      	bne.n	6b2c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6ac0:	7813      	ldrb	r3, [r2, #0]
    6ac2:	2b80      	cmp	r3, #128	; 0x80
    6ac4:	d029      	beq.n	6b1a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6ac6:	061b      	lsls	r3, r3, #24
    6ac8:	2480      	movs	r4, #128	; 0x80
    6aca:	0264      	lsls	r4, r4, #9
    6acc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6ace:	7854      	ldrb	r4, [r2, #1]
    6ad0:	2502      	movs	r5, #2
    6ad2:	43ac      	bics	r4, r5
    6ad4:	d106      	bne.n	6ae4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6ad6:	7894      	ldrb	r4, [r2, #2]
    6ad8:	2c00      	cmp	r4, #0
    6ada:	d120      	bne.n	6b1e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6adc:	2480      	movs	r4, #128	; 0x80
    6ade:	02a4      	lsls	r4, r4, #10
    6ae0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6ae2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ae4:	7854      	ldrb	r4, [r2, #1]
    6ae6:	3c01      	subs	r4, #1
    6ae8:	2c01      	cmp	r4, #1
    6aea:	d91c      	bls.n	6b26 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6aec:	040d      	lsls	r5, r1, #16
    6aee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6af0:	24a0      	movs	r4, #160	; 0xa0
    6af2:	05e4      	lsls	r4, r4, #23
    6af4:	432c      	orrs	r4, r5
    6af6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6af8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6afa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6afc:	24d0      	movs	r4, #208	; 0xd0
    6afe:	0624      	lsls	r4, r4, #24
    6b00:	432c      	orrs	r4, r5
    6b02:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b04:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6b06:	78d4      	ldrb	r4, [r2, #3]
    6b08:	2c00      	cmp	r4, #0
    6b0a:	d122      	bne.n	6b52 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6b0c:	035b      	lsls	r3, r3, #13
    6b0e:	d51c      	bpl.n	6b4a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6b10:	7893      	ldrb	r3, [r2, #2]
    6b12:	2b01      	cmp	r3, #1
    6b14:	d01e      	beq.n	6b54 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6b16:	6141      	str	r1, [r0, #20]
    6b18:	e017      	b.n	6b4a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6b1a:	2300      	movs	r3, #0
    6b1c:	e7d7      	b.n	6ace <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b1e:	24c0      	movs	r4, #192	; 0xc0
    6b20:	02e4      	lsls	r4, r4, #11
    6b22:	4323      	orrs	r3, r4
    6b24:	e7dd      	b.n	6ae2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6b26:	4c0d      	ldr	r4, [pc, #52]	; (6b5c <_system_pinmux_config+0xa4>)
    6b28:	4023      	ands	r3, r4
    6b2a:	e7df      	b.n	6aec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6b2c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6b2e:	040c      	lsls	r4, r1, #16
    6b30:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6b32:	23a0      	movs	r3, #160	; 0xa0
    6b34:	05db      	lsls	r3, r3, #23
    6b36:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b38:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6b3a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6b3c:	23d0      	movs	r3, #208	; 0xd0
    6b3e:	061b      	lsls	r3, r3, #24
    6b40:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b42:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6b44:	78d3      	ldrb	r3, [r2, #3]
    6b46:	2b00      	cmp	r3, #0
    6b48:	d103      	bne.n	6b52 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b4a:	7853      	ldrb	r3, [r2, #1]
    6b4c:	3b01      	subs	r3, #1
    6b4e:	2b01      	cmp	r3, #1
    6b50:	d902      	bls.n	6b58 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6b52:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6b54:	6181      	str	r1, [r0, #24]
    6b56:	e7f8      	b.n	6b4a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6b58:	6081      	str	r1, [r0, #8]
}
    6b5a:	e7fa      	b.n	6b52 <_system_pinmux_config+0x9a>
    6b5c:	fffbffff 	.word	0xfffbffff

00006b60 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6b60:	b510      	push	{r4, lr}
    6b62:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6b64:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6b66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6b68:	2900      	cmp	r1, #0
    6b6a:	d104      	bne.n	6b76 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6b6c:	0943      	lsrs	r3, r0, #5
    6b6e:	01db      	lsls	r3, r3, #7
    6b70:	4905      	ldr	r1, [pc, #20]	; (6b88 <system_pinmux_pin_set_config+0x28>)
    6b72:	468c      	mov	ip, r1
    6b74:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b76:	241f      	movs	r4, #31
    6b78:	4020      	ands	r0, r4
    6b7a:	2101      	movs	r1, #1
    6b7c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6b7e:	0018      	movs	r0, r3
    6b80:	4b02      	ldr	r3, [pc, #8]	; (6b8c <system_pinmux_pin_set_config+0x2c>)
    6b82:	4798      	blx	r3
}
    6b84:	bd10      	pop	{r4, pc}
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	40002800 	.word	0x40002800
    6b8c:	00006ab9 	.word	0x00006ab9

00006b90 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6b90:	4770      	bx	lr
    6b92:	Address 0x00006b92 is out of bounds.


00006b94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b94:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b96:	4b05      	ldr	r3, [pc, #20]	; (6bac <system_init+0x18>)
    6b98:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b9a:	4b05      	ldr	r3, [pc, #20]	; (6bb0 <system_init+0x1c>)
    6b9c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b9e:	4b05      	ldr	r3, [pc, #20]	; (6bb4 <system_init+0x20>)
    6ba0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6ba2:	4b05      	ldr	r3, [pc, #20]	; (6bb8 <system_init+0x24>)
    6ba4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <system_init+0x28>)
    6ba8:	4798      	blx	r3
}
    6baa:	bd10      	pop	{r4, pc}
    6bac:	000066d1 	.word	0x000066d1
    6bb0:	000045d9 	.word	0x000045d9
    6bb4:	00006b91 	.word	0x00006b91
    6bb8:	00004905 	.word	0x00004905
    6bbc:	00006b91 	.word	0x00006b91

00006bc0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6bc0:	1c93      	adds	r3, r2, #2
    6bc2:	009b      	lsls	r3, r3, #2
    6bc4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6bc6:	2a02      	cmp	r2, #2
    6bc8:	d009      	beq.n	6bde <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6bca:	2a03      	cmp	r2, #3
    6bcc:	d00c      	beq.n	6be8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6bce:	2301      	movs	r3, #1
    6bd0:	4093      	lsls	r3, r2
    6bd2:	001a      	movs	r2, r3
    6bd4:	7e03      	ldrb	r3, [r0, #24]
    6bd6:	4313      	orrs	r3, r2
    6bd8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6bda:	2000      	movs	r0, #0
    6bdc:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6bde:	7e03      	ldrb	r3, [r0, #24]
    6be0:	2210      	movs	r2, #16
    6be2:	4313      	orrs	r3, r2
    6be4:	7603      	strb	r3, [r0, #24]
    6be6:	e7f8      	b.n	6bda <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6be8:	7e03      	ldrb	r3, [r0, #24]
    6bea:	2220      	movs	r2, #32
    6bec:	4313      	orrs	r3, r2
    6bee:	7603      	strb	r3, [r0, #24]
    6bf0:	e7f3      	b.n	6bda <tc_register_callback+0x1a>
    6bf2:	Address 0x00006bf2 is out of bounds.


00006bf4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6bf4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6bf6:	0080      	lsls	r0, r0, #2
    6bf8:	4b16      	ldr	r3, [pc, #88]	; (6c54 <_tc_interrupt_handler+0x60>)
    6bfa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6bfc:	6823      	ldr	r3, [r4, #0]
    6bfe:	7a9d      	ldrb	r5, [r3, #10]
    6c00:	7e22      	ldrb	r2, [r4, #24]
    6c02:	7e63      	ldrb	r3, [r4, #25]
    6c04:	4013      	ands	r3, r2
    6c06:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6c08:	07eb      	lsls	r3, r5, #31
    6c0a:	d406      	bmi.n	6c1a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6c0c:	07ab      	lsls	r3, r5, #30
    6c0e:	d40b      	bmi.n	6c28 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6c10:	06eb      	lsls	r3, r5, #27
    6c12:	d410      	bmi.n	6c36 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6c14:	06ab      	lsls	r3, r5, #26
    6c16:	d415      	bmi.n	6c44 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6c18:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6c1a:	0020      	movs	r0, r4
    6c1c:	68a3      	ldr	r3, [r4, #8]
    6c1e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6c20:	2301      	movs	r3, #1
    6c22:	6822      	ldr	r2, [r4, #0]
    6c24:	7293      	strb	r3, [r2, #10]
    6c26:	e7f1      	b.n	6c0c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6c28:	0020      	movs	r0, r4
    6c2a:	68e3      	ldr	r3, [r4, #12]
    6c2c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6c2e:	2302      	movs	r3, #2
    6c30:	6822      	ldr	r2, [r4, #0]
    6c32:	7293      	strb	r3, [r2, #10]
    6c34:	e7ec      	b.n	6c10 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6c36:	0020      	movs	r0, r4
    6c38:	6923      	ldr	r3, [r4, #16]
    6c3a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6c3c:	2310      	movs	r3, #16
    6c3e:	6822      	ldr	r2, [r4, #0]
    6c40:	7293      	strb	r3, [r2, #10]
    6c42:	e7e7      	b.n	6c14 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6c44:	0020      	movs	r0, r4
    6c46:	6963      	ldr	r3, [r4, #20]
    6c48:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6c4a:	6823      	ldr	r3, [r4, #0]
    6c4c:	2220      	movs	r2, #32
    6c4e:	729a      	strb	r2, [r3, #10]
}
    6c50:	e7e2      	b.n	6c18 <_tc_interrupt_handler+0x24>
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	20001f44 	.word	0x20001f44

00006c58 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6c58:	b510      	push	{r4, lr}
    6c5a:	2000      	movs	r0, #0
    6c5c:	4b01      	ldr	r3, [pc, #4]	; (6c64 <TC0_Handler+0xc>)
    6c5e:	4798      	blx	r3
    6c60:	bd10      	pop	{r4, pc}
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	00006bf5 	.word	0x00006bf5

00006c68 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6c68:	b510      	push	{r4, lr}
    6c6a:	2001      	movs	r0, #1
    6c6c:	4b01      	ldr	r3, [pc, #4]	; (6c74 <TC1_Handler+0xc>)
    6c6e:	4798      	blx	r3
    6c70:	bd10      	pop	{r4, pc}
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	00006bf5 	.word	0x00006bf5

00006c78 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6c78:	b510      	push	{r4, lr}
    6c7a:	2002      	movs	r0, #2
    6c7c:	4b01      	ldr	r3, [pc, #4]	; (6c84 <TC4_Handler+0xc>)
    6c7e:	4798      	blx	r3
    6c80:	bd10      	pop	{r4, pc}
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	00006bf5 	.word	0x00006bf5

00006c88 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6c88:	b530      	push	{r4, r5, lr}
    6c8a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6c8c:	a901      	add	r1, sp, #4
    6c8e:	4b0c      	ldr	r3, [pc, #48]	; (6cc0 <_tc_get_inst_index+0x38>)
    6c90:	000a      	movs	r2, r1
    6c92:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c94:	c232      	stmia	r2!, {r1, r4, r5}
    6c96:	cb12      	ldmia	r3!, {r1, r4}
    6c98:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6c9a:	9b01      	ldr	r3, [sp, #4]
    6c9c:	4298      	cmp	r0, r3
    6c9e:	d00b      	beq.n	6cb8 <_tc_get_inst_index+0x30>
    6ca0:	2301      	movs	r3, #1
    6ca2:	a901      	add	r1, sp, #4
    6ca4:	009a      	lsls	r2, r3, #2
    6ca6:	5852      	ldr	r2, [r2, r1]
    6ca8:	4282      	cmp	r2, r0
    6caa:	d006      	beq.n	6cba <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6cac:	3301      	adds	r3, #1
    6cae:	2b05      	cmp	r3, #5
    6cb0:	d1f8      	bne.n	6ca4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6cb2:	2000      	movs	r0, #0
}
    6cb4:	b007      	add	sp, #28
    6cb6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6cb8:	2300      	movs	r3, #0
			return i;
    6cba:	b2d8      	uxtb	r0, r3
    6cbc:	e7fa      	b.n	6cb4 <_tc_get_inst_index+0x2c>
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	00017ba0 	.word	0x00017ba0

00006cc4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cc6:	46c6      	mov	lr, r8
    6cc8:	b500      	push	{lr}
    6cca:	b08e      	sub	sp, #56	; 0x38
    6ccc:	0004      	movs	r4, r0
    6cce:	000d      	movs	r5, r1
    6cd0:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6cd2:	0008      	movs	r0, r1
    6cd4:	4bae      	ldr	r3, [pc, #696]	; (6f90 <tc_init+0x2cc>)
    6cd6:	4798      	blx	r3
    6cd8:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6cda:	ab0c      	add	r3, sp, #48	; 0x30
    6cdc:	221b      	movs	r2, #27
    6cde:	701a      	strb	r2, [r3, #0]
    6ce0:	705a      	strb	r2, [r3, #1]
    6ce2:	3201      	adds	r2, #1
    6ce4:	709a      	strb	r2, [r3, #2]
    6ce6:	70da      	strb	r2, [r3, #3]
    6ce8:	3201      	adds	r2, #1
    6cea:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6cec:	a902      	add	r1, sp, #8
    6cee:	4ba9      	ldr	r3, [pc, #676]	; (6f94 <tc_init+0x2d0>)
    6cf0:	3314      	adds	r3, #20
    6cf2:	000a      	movs	r2, r1
    6cf4:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cf6:	c283      	stmia	r2!, {r0, r1, r7}
    6cf8:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cfa:	c283      	stmia	r2!, {r0, r1, r7}
    6cfc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cfe:	c283      	stmia	r2!, {r0, r1, r7}
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6d04:	2300      	movs	r3, #0
    6d06:	60a3      	str	r3, [r4, #8]
    6d08:	60e3      	str	r3, [r4, #12]
    6d0a:	6123      	str	r3, [r4, #16]
    6d0c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6d0e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6d10:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6d12:	4643      	mov	r3, r8
    6d14:	009a      	lsls	r2, r3, #2
    6d16:	4ba0      	ldr	r3, [pc, #640]	; (6f98 <tc_init+0x2d4>)
    6d18:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6d1a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6d1c:	2334      	movs	r3, #52	; 0x34
    6d1e:	5cf3      	ldrb	r3, [r6, r3]
    6d20:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d22:	78f3      	ldrb	r3, [r6, #3]
    6d24:	2b08      	cmp	r3, #8
    6d26:	d008      	beq.n	6d3a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6d28:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d2a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6d2c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d2e:	07db      	lsls	r3, r3, #31
    6d30:	d508      	bpl.n	6d44 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6d32:	b00e      	add	sp, #56	; 0x38
    6d34:	bc04      	pop	{r2}
    6d36:	4690      	mov	r8, r2
    6d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6d3a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d3c:	4642      	mov	r2, r8
    6d3e:	07d2      	lsls	r2, r2, #31
    6d40:	d4f7      	bmi.n	6d32 <tc_init+0x6e>
    6d42:	e7f1      	b.n	6d28 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d44:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6d46:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d48:	079b      	lsls	r3, r3, #30
    6d4a:	d4f2      	bmi.n	6d32 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6d4c:	682b      	ldr	r3, [r5, #0]
    6d4e:	079b      	lsls	r3, r3, #30
    6d50:	d4ef      	bmi.n	6d32 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6d52:	7c33      	ldrb	r3, [r6, #16]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d112      	bne.n	6d7e <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6d58:	7f33      	ldrb	r3, [r6, #28]
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d11b      	bne.n	6d96 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6d5e:	4643      	mov	r3, r8
    6d60:	005a      	lsls	r2, r3, #1
    6d62:	a902      	add	r1, sp, #8
    6d64:	1c53      	adds	r3, r2, #1
    6d66:	009b      	lsls	r3, r3, #2
    6d68:	5858      	ldr	r0, [r3, r1]
    6d6a:	4643      	mov	r3, r8
    6d6c:	00db      	lsls	r3, r3, #3
    6d6e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6d70:	b2d9      	uxtb	r1, r3
    6d72:	2904      	cmp	r1, #4
    6d74:	d823      	bhi.n	6dbe <tc_init+0xfa>
    6d76:	008b      	lsls	r3, r1, #2
    6d78:	4988      	ldr	r1, [pc, #544]	; (6f9c <tc_init+0x2d8>)
    6d7a:	58cb      	ldr	r3, [r1, r3]
    6d7c:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d7e:	a901      	add	r1, sp, #4
    6d80:	2301      	movs	r3, #1
    6d82:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d84:	2200      	movs	r2, #0
    6d86:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6d88:	7e32      	ldrb	r2, [r6, #24]
    6d8a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d8c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6d8e:	7d30      	ldrb	r0, [r6, #20]
    6d90:	4b83      	ldr	r3, [pc, #524]	; (6fa0 <tc_init+0x2dc>)
    6d92:	4798      	blx	r3
    6d94:	e7e0      	b.n	6d58 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d96:	a901      	add	r1, sp, #4
    6d98:	2301      	movs	r3, #1
    6d9a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d9c:	2200      	movs	r2, #0
    6d9e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6da0:	3224      	adds	r2, #36	; 0x24
    6da2:	18b2      	adds	r2, r6, r2
    6da4:	7812      	ldrb	r2, [r2, #0]
    6da6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6da8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6daa:	331f      	adds	r3, #31
    6dac:	18f3      	adds	r3, r6, r3
    6dae:	7818      	ldrb	r0, [r3, #0]
    6db0:	4b7b      	ldr	r3, [pc, #492]	; (6fa0 <tc_init+0x2dc>)
    6db2:	4798      	blx	r3
    6db4:	e7d3      	b.n	6d5e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6db6:	497b      	ldr	r1, [pc, #492]	; (6fa4 <tc_init+0x2e0>)
    6db8:	694b      	ldr	r3, [r1, #20]
    6dba:	4318      	orrs	r0, r3
    6dbc:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6dbe:	78f3      	ldrb	r3, [r6, #3]
    6dc0:	2b08      	cmp	r3, #8
    6dc2:	d100      	bne.n	6dc6 <tc_init+0x102>
    6dc4:	e086      	b.n	6ed4 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6dc6:	7833      	ldrb	r3, [r6, #0]
    6dc8:	466a      	mov	r2, sp
    6dca:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6dcc:	ab0c      	add	r3, sp, #48	; 0x30
    6dce:	4642      	mov	r2, r8
    6dd0:	5c9f      	ldrb	r7, [r3, r2]
    6dd2:	4669      	mov	r1, sp
    6dd4:	0038      	movs	r0, r7
    6dd6:	4b74      	ldr	r3, [pc, #464]	; (6fa8 <tc_init+0x2e4>)
    6dd8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6dda:	0038      	movs	r0, r7
    6ddc:	4b73      	ldr	r3, [pc, #460]	; (6fac <tc_init+0x2e8>)
    6dde:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6de0:	78f3      	ldrb	r3, [r6, #3]
    6de2:	79f2      	ldrb	r2, [r6, #7]
    6de4:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6de6:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6de8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6dea:	7a72      	ldrb	r2, [r6, #9]
    6dec:	2a00      	cmp	r2, #0
    6dee:	d002      	beq.n	6df6 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6df0:	2280      	movs	r2, #128	; 0x80
    6df2:	0252      	lsls	r2, r2, #9
    6df4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6df6:	7ab2      	ldrb	r2, [r6, #10]
    6df8:	2a00      	cmp	r2, #0
    6dfa:	d002      	beq.n	6e02 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6dfc:	2280      	movs	r2, #128	; 0x80
    6dfe:	0292      	lsls	r2, r2, #10
    6e00:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6e02:	7af2      	ldrb	r2, [r6, #11]
    6e04:	2a00      	cmp	r2, #0
    6e06:	d002      	beq.n	6e0e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e08:	2280      	movs	r2, #128	; 0x80
    6e0a:	0352      	lsls	r2, r2, #13
    6e0c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6e0e:	7b32      	ldrb	r2, [r6, #12]
    6e10:	2a00      	cmp	r2, #0
    6e12:	d002      	beq.n	6e1a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e14:	2280      	movs	r2, #128	; 0x80
    6e16:	0392      	lsls	r2, r2, #14
    6e18:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e1a:	7871      	ldrb	r1, [r6, #1]
    6e1c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6e1e:	78b2      	ldrb	r2, [r6, #2]
    6e20:	01d2      	lsls	r2, r2, #7
    6e22:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e24:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e26:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6e28:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d1fc      	bne.n	6e28 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6e2e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e30:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e32:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e34:	2b00      	cmp	r3, #0
    6e36:	d1fc      	bne.n	6e32 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6e38:	79b3      	ldrb	r3, [r6, #6]
    6e3a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6e3c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6e3e:	1e4b      	subs	r3, r1, #1
    6e40:	4199      	sbcs	r1, r3
    6e42:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6e44:	7bb3      	ldrb	r3, [r6, #14]
    6e46:	2b00      	cmp	r3, #0
    6e48:	d001      	beq.n	6e4e <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6e4a:	2301      	movs	r3, #1
    6e4c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e4e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e50:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e52:	2b00      	cmp	r3, #0
    6e54:	d1fc      	bne.n	6e50 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6e56:	33ff      	adds	r3, #255	; 0xff
    6e58:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6e5a:	2900      	cmp	r1, #0
    6e5c:	d004      	beq.n	6e68 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e60:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6e62:	2b00      	cmp	r3, #0
    6e64:	d1fc      	bne.n	6e60 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6e66:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6e68:	7a33      	ldrb	r3, [r6, #8]
    6e6a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e6c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e6e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e70:	2b00      	cmp	r3, #0
    6e72:	d1fc      	bne.n	6e6e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6e74:	7923      	ldrb	r3, [r4, #4]
    6e76:	2b04      	cmp	r3, #4
    6e78:	d059      	beq.n	6f2e <tc_init+0x26a>
    6e7a:	2b08      	cmp	r3, #8
    6e7c:	d074      	beq.n	6f68 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6e7e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6e80:	2b00      	cmp	r3, #0
    6e82:	d000      	beq.n	6e86 <tc_init+0x1c2>
    6e84:	e755      	b.n	6d32 <tc_init+0x6e>
    6e86:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d1fc      	bne.n	6e86 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6e8c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6e8e:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e90:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e92:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e94:	2b00      	cmp	r3, #0
    6e96:	d1fc      	bne.n	6e92 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6e98:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6e9a:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e9e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d1fc      	bne.n	6e9e <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6ea4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6ea6:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6ea8:	2000      	movs	r0, #0
    6eaa:	e742      	b.n	6d32 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6eac:	493d      	ldr	r1, [pc, #244]	; (6fa4 <tc_init+0x2e0>)
    6eae:	698b      	ldr	r3, [r1, #24]
    6eb0:	4318      	orrs	r0, r3
    6eb2:	6188      	str	r0, [r1, #24]
    6eb4:	e783      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6eb6:	493b      	ldr	r1, [pc, #236]	; (6fa4 <tc_init+0x2e0>)
    6eb8:	69cb      	ldr	r3, [r1, #28]
    6eba:	4318      	orrs	r0, r3
    6ebc:	61c8      	str	r0, [r1, #28]
    6ebe:	e77e      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6ec0:	4938      	ldr	r1, [pc, #224]	; (6fa4 <tc_init+0x2e0>)
    6ec2:	6a0b      	ldr	r3, [r1, #32]
    6ec4:	4318      	orrs	r0, r3
    6ec6:	6208      	str	r0, [r1, #32]
    6ec8:	e779      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6eca:	4b36      	ldr	r3, [pc, #216]	; (6fa4 <tc_init+0x2e0>)
    6ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6ece:	4308      	orrs	r0, r1
    6ed0:	6258      	str	r0, [r3, #36]	; 0x24
    6ed2:	e774      	b.n	6dbe <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6ed4:	4643      	mov	r3, r8
    6ed6:	3301      	adds	r3, #1
    6ed8:	2b04      	cmp	r3, #4
    6eda:	dd00      	ble.n	6ede <tc_init+0x21a>
    6edc:	e773      	b.n	6dc6 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6ede:	ab02      	add	r3, sp, #8
    6ee0:	1cd1      	adds	r1, r2, #3
    6ee2:	0089      	lsls	r1, r1, #2
    6ee4:	58c9      	ldr	r1, [r1, r3]
    6ee6:	3202      	adds	r2, #2
    6ee8:	0092      	lsls	r2, r2, #2
    6eea:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6eec:	b2da      	uxtb	r2, r3
    6eee:	2a04      	cmp	r2, #4
    6ef0:	d900      	bls.n	6ef4 <tc_init+0x230>
    6ef2:	e768      	b.n	6dc6 <tc_init+0x102>
    6ef4:	0093      	lsls	r3, r2, #2
    6ef6:	4a2e      	ldr	r2, [pc, #184]	; (6fb0 <tc_init+0x2ec>)
    6ef8:	58d3      	ldr	r3, [r2, r3]
    6efa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6efc:	4a29      	ldr	r2, [pc, #164]	; (6fa4 <tc_init+0x2e0>)
    6efe:	6953      	ldr	r3, [r2, #20]
    6f00:	4319      	orrs	r1, r3
    6f02:	6151      	str	r1, [r2, #20]
    6f04:	e75f      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6f06:	4a27      	ldr	r2, [pc, #156]	; (6fa4 <tc_init+0x2e0>)
    6f08:	6993      	ldr	r3, [r2, #24]
    6f0a:	4319      	orrs	r1, r3
    6f0c:	6191      	str	r1, [r2, #24]
    6f0e:	e75a      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6f10:	4a24      	ldr	r2, [pc, #144]	; (6fa4 <tc_init+0x2e0>)
    6f12:	69d3      	ldr	r3, [r2, #28]
    6f14:	4319      	orrs	r1, r3
    6f16:	61d1      	str	r1, [r2, #28]
    6f18:	e755      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    6f1a:	4a22      	ldr	r2, [pc, #136]	; (6fa4 <tc_init+0x2e0>)
    6f1c:	6a13      	ldr	r3, [r2, #32]
    6f1e:	4319      	orrs	r1, r3
    6f20:	6211      	str	r1, [r2, #32]
    6f22:	e750      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6f24:	4b1f      	ldr	r3, [pc, #124]	; (6fa4 <tc_init+0x2e0>)
    6f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6f28:	4311      	orrs	r1, r2
    6f2a:	6259      	str	r1, [r3, #36]	; 0x24
    6f2c:	e74b      	b.n	6dc6 <tc_init+0x102>
    6f2e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f30:	2b00      	cmp	r3, #0
    6f32:	d1fc      	bne.n	6f2e <tc_init+0x26a>
					config->counter_8_bit.value;
    6f34:	3328      	adds	r3, #40	; 0x28
    6f36:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6f38:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f3a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f3c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d1fc      	bne.n	6f3c <tc_init+0x278>
					config->counter_8_bit.period;
    6f42:	3329      	adds	r3, #41	; 0x29
    6f44:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6f46:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f48:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f4a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d1fc      	bne.n	6f4a <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6f50:	332a      	adds	r3, #42	; 0x2a
    6f52:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6f54:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f58:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d1fc      	bne.n	6f58 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    6f5e:	332b      	adds	r3, #43	; 0x2b
    6f60:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6f62:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6f64:	2000      	movs	r0, #0
    6f66:	e6e4      	b.n	6d32 <tc_init+0x6e>
    6f68:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d1fc      	bne.n	6f68 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    6f6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6f70:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f72:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f74:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f76:	2b00      	cmp	r3, #0
    6f78:	d1fc      	bne.n	6f74 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    6f7a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6f7c:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f80:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f82:	2b00      	cmp	r3, #0
    6f84:	d1fc      	bne.n	6f80 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    6f86:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6f88:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    6f8a:	2000      	movs	r0, #0
    6f8c:	e6d1      	b.n	6d32 <tc_init+0x6e>
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	00006c89 	.word	0x00006c89
    6f94:	00017ba0 	.word	0x00017ba0
    6f98:	20001f44 	.word	0x20001f44
    6f9c:	00017b78 	.word	0x00017b78
    6fa0:	00006b61 	.word	0x00006b61
    6fa4:	40000400 	.word	0x40000400
    6fa8:	00006a65 	.word	0x00006a65
    6fac:	000069f5 	.word	0x000069f5
    6fb0:	00017b8c 	.word	0x00017b8c

00006fb4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fb4:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fb6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d1fc      	bne.n	6fb6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    6fbc:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fbe:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fc0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d1fc      	bne.n	6fc0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6fc6:	3380      	adds	r3, #128	; 0x80
    6fc8:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    6fca:	7953      	ldrb	r3, [r2, #5]
    6fcc:	b25b      	sxtb	r3, r3
    6fce:	2b00      	cmp	r3, #0
    6fd0:	dbfb      	blt.n	6fca <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6fd2:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fd4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d1fc      	bne.n	6fd4 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    6fda:	7903      	ldrb	r3, [r0, #4]
    6fdc:	2b04      	cmp	r3, #4
    6fde:	d005      	beq.n	6fec <tc_get_count_value+0x38>
    6fe0:	2b08      	cmp	r3, #8
    6fe2:	d009      	beq.n	6ff8 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6fe4:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d003      	beq.n	6ff2 <tc_get_count_value+0x3e>
}
    6fea:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    6fec:	7d10      	ldrb	r0, [r2, #20]
    6fee:	b2c0      	uxtb	r0, r0
    6ff0:	e7fb      	b.n	6fea <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6ff2:	8a90      	ldrh	r0, [r2, #20]
    6ff4:	b280      	uxth	r0, r0
    6ff6:	e7f8      	b.n	6fea <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6ff8:	6950      	ldr	r0, [r2, #20]
    6ffa:	e7f6      	b.n	6fea <tc_get_count_value+0x36>

00006ffc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    6ffc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6ffe:	6804      	ldr	r4, [r0, #0]
    7000:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    7002:	2b00      	cmp	r3, #0
    7004:	d1fc      	bne.n	7000 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7006:	7903      	ldrb	r3, [r0, #4]
    7008:	2b04      	cmp	r3, #4
    700a:	d006      	beq.n	701a <tc_set_compare_value+0x1e>
    700c:	2b08      	cmp	r3, #8
    700e:	d028      	beq.n	7062 <tc_set_compare_value+0x66>
    7010:	2b00      	cmp	r3, #0
    7012:	d013      	beq.n	703c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7014:	2317      	movs	r3, #23
}
    7016:	0018      	movs	r0, r3
    7018:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    701a:	2317      	movs	r3, #23
			if (channel_index <
    701c:	2901      	cmp	r1, #1
    701e:	d8fa      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7020:	7e83      	ldrb	r3, [r0, #26]
    7022:	2b00      	cmp	r3, #0
    7024:	d005      	beq.n	7032 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7026:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7028:	1861      	adds	r1, r4, r1
    702a:	3130      	adds	r1, #48	; 0x30
    702c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    702e:	2300      	movs	r3, #0
    7030:	e7f1      	b.n	7016 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    7032:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7034:	1864      	adds	r4, r4, r1
    7036:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7038:	2300      	movs	r3, #0
    703a:	e7ec      	b.n	7016 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    703c:	2317      	movs	r3, #23
			if (channel_index <
    703e:	2901      	cmp	r1, #1
    7040:	d8e9      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7042:	7e83      	ldrb	r3, [r0, #26]
    7044:	2b00      	cmp	r3, #0
    7046:	d005      	beq.n	7054 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7048:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    704a:	3118      	adds	r1, #24
    704c:	0049      	lsls	r1, r1, #1
    704e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7050:	2300      	movs	r3, #0
    7052:	e7e0      	b.n	7016 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7054:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    7056:	310c      	adds	r1, #12
    7058:	0049      	lsls	r1, r1, #1
    705a:	1864      	adds	r4, r4, r1
    705c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    705e:	2300      	movs	r3, #0
    7060:	e7d9      	b.n	7016 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7062:	2317      	movs	r3, #23
			if (channel_index <
    7064:	2901      	cmp	r1, #1
    7066:	d8d6      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7068:	7e83      	ldrb	r3, [r0, #26]
    706a:	2b00      	cmp	r3, #0
    706c:	d105      	bne.n	707a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    706e:	3106      	adds	r1, #6
    7070:	0089      	lsls	r1, r1, #2
    7072:	1864      	adds	r4, r4, r1
    7074:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    7076:	2300      	movs	r3, #0
    7078:	e7cd      	b.n	7016 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    707a:	310c      	adds	r1, #12
    707c:	0089      	lsls	r1, r1, #2
    707e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7080:	2300      	movs	r3, #0
    7082:	e7c8      	b.n	7016 <tc_set_compare_value+0x1a>

00007084 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7084:	e7fe      	b.n	7084 <Dummy_Handler>
    7086:	Address 0x00007086 is out of bounds.


00007088 <Reset_Handler>:
{
    7088:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    708a:	4a1a      	ldr	r2, [pc, #104]	; (70f4 <Reset_Handler+0x6c>)
    708c:	4b1a      	ldr	r3, [pc, #104]	; (70f8 <Reset_Handler+0x70>)
    708e:	429a      	cmp	r2, r3
    7090:	d011      	beq.n	70b6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    7092:	001a      	movs	r2, r3
    7094:	4b19      	ldr	r3, [pc, #100]	; (70fc <Reset_Handler+0x74>)
    7096:	429a      	cmp	r2, r3
    7098:	d20d      	bcs.n	70b6 <Reset_Handler+0x2e>
    709a:	4a19      	ldr	r2, [pc, #100]	; (7100 <Reset_Handler+0x78>)
    709c:	3303      	adds	r3, #3
    709e:	1a9b      	subs	r3, r3, r2
    70a0:	089b      	lsrs	r3, r3, #2
    70a2:	3301      	adds	r3, #1
    70a4:	009b      	lsls	r3, r3, #2
    70a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    70a8:	4813      	ldr	r0, [pc, #76]	; (70f8 <Reset_Handler+0x70>)
    70aa:	4912      	ldr	r1, [pc, #72]	; (70f4 <Reset_Handler+0x6c>)
    70ac:	588c      	ldr	r4, [r1, r2]
    70ae:	5084      	str	r4, [r0, r2]
    70b0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    70b2:	429a      	cmp	r2, r3
    70b4:	d1fa      	bne.n	70ac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    70b6:	4a13      	ldr	r2, [pc, #76]	; (7104 <Reset_Handler+0x7c>)
    70b8:	4b13      	ldr	r3, [pc, #76]	; (7108 <Reset_Handler+0x80>)
    70ba:	429a      	cmp	r2, r3
    70bc:	d20a      	bcs.n	70d4 <Reset_Handler+0x4c>
    70be:	43d3      	mvns	r3, r2
    70c0:	4911      	ldr	r1, [pc, #68]	; (7108 <Reset_Handler+0x80>)
    70c2:	185b      	adds	r3, r3, r1
    70c4:	2103      	movs	r1, #3
    70c6:	438b      	bics	r3, r1
    70c8:	3304      	adds	r3, #4
    70ca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    70cc:	2100      	movs	r1, #0
    70ce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    70d0:	4293      	cmp	r3, r2
    70d2:	d1fc      	bne.n	70ce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    70d4:	4a0d      	ldr	r2, [pc, #52]	; (710c <Reset_Handler+0x84>)
    70d6:	21ff      	movs	r1, #255	; 0xff
    70d8:	4b0d      	ldr	r3, [pc, #52]	; (7110 <Reset_Handler+0x88>)
    70da:	438b      	bics	r3, r1
    70dc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    70de:	4a0d      	ldr	r2, [pc, #52]	; (7114 <Reset_Handler+0x8c>)
    70e0:	6853      	ldr	r3, [r2, #4]
    70e2:	397f      	subs	r1, #127	; 0x7f
    70e4:	430b      	orrs	r3, r1
    70e6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    70e8:	4b0b      	ldr	r3, [pc, #44]	; (7118 <Reset_Handler+0x90>)
    70ea:	4798      	blx	r3
        main();
    70ec:	4b0b      	ldr	r3, [pc, #44]	; (711c <Reset_Handler+0x94>)
    70ee:	4798      	blx	r3
    70f0:	e7fe      	b.n	70f0 <Reset_Handler+0x68>
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	00018e70 	.word	0x00018e70
    70f8:	20000000 	.word	0x20000000
    70fc:	2000008c 	.word	0x2000008c
    7100:	20000004 	.word	0x20000004
    7104:	20000090 	.word	0x20000090
    7108:	200034dc 	.word	0x200034dc
    710c:	e000ed00 	.word	0xe000ed00
    7110:	00000000 	.word	0x00000000
    7114:	41004000 	.word	0x41004000
    7118:	00016691 	.word	0x00016691
    711c:	00007955 	.word	0x00007955

00007120 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7120:	b5f0      	push	{r4, r5, r6, r7, lr}
    7122:	46c6      	mov	lr, r8
    7124:	b500      	push	{lr}
    7126:	000c      	movs	r4, r1
    7128:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    712a:	2800      	cmp	r0, #0
    712c:	d10f      	bne.n	714e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    712e:	2a00      	cmp	r2, #0
    7130:	dd11      	ble.n	7156 <_read+0x36>
    7132:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7134:	4e09      	ldr	r6, [pc, #36]	; (715c <_read+0x3c>)
    7136:	4d0a      	ldr	r5, [pc, #40]	; (7160 <_read+0x40>)
    7138:	6830      	ldr	r0, [r6, #0]
    713a:	0021      	movs	r1, r4
    713c:	682b      	ldr	r3, [r5, #0]
    713e:	4798      	blx	r3
		ptr++;
    7140:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    7142:	42bc      	cmp	r4, r7
    7144:	d1f8      	bne.n	7138 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7146:	4640      	mov	r0, r8
    7148:	bc04      	pop	{r2}
    714a:	4690      	mov	r8, r2
    714c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    714e:	2301      	movs	r3, #1
    7150:	425b      	negs	r3, r3
    7152:	4698      	mov	r8, r3
    7154:	e7f7      	b.n	7146 <_read+0x26>
	for (; len > 0; --len) {
    7156:	4680      	mov	r8, r0
    7158:	e7f5      	b.n	7146 <_read+0x26>
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	20001f60 	.word	0x20001f60
    7160:	20001f58 	.word	0x20001f58

00007164 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7164:	b5f0      	push	{r4, r5, r6, r7, lr}
    7166:	46c6      	mov	lr, r8
    7168:	b500      	push	{lr}
    716a:	000e      	movs	r6, r1
    716c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    716e:	3801      	subs	r0, #1
    7170:	2802      	cmp	r0, #2
    7172:	d810      	bhi.n	7196 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7174:	2a00      	cmp	r2, #0
    7176:	d011      	beq.n	719c <_write+0x38>
    7178:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    717a:	4b0c      	ldr	r3, [pc, #48]	; (71ac <_write+0x48>)
    717c:	4698      	mov	r8, r3
    717e:	4f0c      	ldr	r7, [pc, #48]	; (71b0 <_write+0x4c>)
    7180:	4643      	mov	r3, r8
    7182:	6818      	ldr	r0, [r3, #0]
    7184:	5d31      	ldrb	r1, [r6, r4]
    7186:	683b      	ldr	r3, [r7, #0]
    7188:	4798      	blx	r3
    718a:	2800      	cmp	r0, #0
    718c:	db08      	blt.n	71a0 <_write+0x3c>
			return -1;
		}
		++nChars;
    718e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7190:	42a5      	cmp	r5, r4
    7192:	d1f5      	bne.n	7180 <_write+0x1c>
    7194:	e006      	b.n	71a4 <_write+0x40>
		return -1;
    7196:	2401      	movs	r4, #1
    7198:	4264      	negs	r4, r4
    719a:	e003      	b.n	71a4 <_write+0x40>
	for (; len != 0; --len) {
    719c:	0014      	movs	r4, r2
    719e:	e001      	b.n	71a4 <_write+0x40>
			return -1;
    71a0:	2401      	movs	r4, #1
    71a2:	4264      	negs	r4, r4
	}
	return nChars;
}
    71a4:	0020      	movs	r0, r4
    71a6:	bc04      	pop	{r2}
    71a8:	4690      	mov	r8, r2
    71aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71ac:	20001f60 	.word	0x20001f60
    71b0:	20001f5c 	.word	0x20001f5c

000071b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    71b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    71b6:	4a06      	ldr	r2, [pc, #24]	; (71d0 <_sbrk+0x1c>)
    71b8:	6812      	ldr	r2, [r2, #0]
    71ba:	2a00      	cmp	r2, #0
    71bc:	d004      	beq.n	71c8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    71be:	4a04      	ldr	r2, [pc, #16]	; (71d0 <_sbrk+0x1c>)
    71c0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    71c2:	18c3      	adds	r3, r0, r3
    71c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    71c6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    71c8:	4902      	ldr	r1, [pc, #8]	; (71d4 <_sbrk+0x20>)
    71ca:	4a01      	ldr	r2, [pc, #4]	; (71d0 <_sbrk+0x1c>)
    71cc:	6011      	str	r1, [r2, #0]
    71ce:	e7f6      	b.n	71be <_sbrk+0xa>
    71d0:	200000f8 	.word	0x200000f8
    71d4:	200054e0 	.word	0x200054e0

000071d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    71d8:	2001      	movs	r0, #1
    71da:	4240      	negs	r0, r0
    71dc:	4770      	bx	lr

000071de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    71de:	2380      	movs	r3, #128	; 0x80
    71e0:	019b      	lsls	r3, r3, #6
    71e2:	604b      	str	r3, [r1, #4]

	return 0;
}
    71e4:	2000      	movs	r0, #0
    71e6:	4770      	bx	lr

000071e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    71e8:	2001      	movs	r0, #1
    71ea:	4770      	bx	lr

000071ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    71ec:	2000      	movs	r0, #0
    71ee:	4770      	bx	lr

000071f0 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    71f0:	be00      	bkpt	0x0000
    71f2:	e7fe      	b.n	71f2 <_exit+0x2>

000071f4 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    71f4:	4770      	bx	lr

000071f6 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    71f6:	2001      	movs	r0, #1
    71f8:	4240      	negs	r0, r0
    71fa:	4770      	bx	lr

000071fc <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    71fc:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    71fe:	1e53      	subs	r3, r2, #1
    7200:	b2db      	uxtb	r3, r3
    7202:	2a00      	cmp	r2, #0
    7204:	d00b      	beq.n	721e <sal_FillSubKey+0x22>
    7206:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7208:	18c5      	adds	r5, r0, r3
    720a:	782a      	ldrb	r2, [r5, #0]
    720c:	0052      	lsls	r2, r2, #1
    720e:	4322      	orrs	r2, r4
    7210:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    7212:	782c      	ldrb	r4, [r5, #0]
    7214:	09e4      	lsrs	r4, r4, #7
	while(i--)
    7216:	3b01      	subs	r3, #1
    7218:	b2db      	uxtb	r3, r3
    721a:	2bff      	cmp	r3, #255	; 0xff
    721c:	d1f4      	bne.n	7208 <sal_FillSubKey+0xc>
	}
}
    721e:	bd30      	pop	{r4, r5, pc}

00007220 <SAL_AESEncode>:
{
    7220:	b510      	push	{r4, lr}
    7222:	b084      	sub	sp, #16
    7224:	0004      	movs	r4, r0
    7226:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7228:	2210      	movs	r2, #16
    722a:	4668      	mov	r0, sp
    722c:	4b04      	ldr	r3, [pc, #16]	; (7240 <SAL_AESEncode+0x20>)
    722e:	4798      	blx	r3
	AESEncode(buffer, useKey);
    7230:	4669      	mov	r1, sp
    7232:	0020      	movs	r0, r4
    7234:	4b03      	ldr	r3, [pc, #12]	; (7244 <SAL_AESEncode+0x24>)
    7236:	4798      	blx	r3
}
    7238:	2000      	movs	r0, #0
    723a:	b004      	add	sp, #16
    723c:	bd10      	pop	{r4, pc}
    723e:	46c0      	nop			; (mov r8, r8)
    7240:	000166f7 	.word	0x000166f7
    7244:	0000cca5 	.word	0x0000cca5

00007248 <SAL_DeriveSessionKey>:
{
    7248:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    724a:	4b01      	ldr	r3, [pc, #4]	; (7250 <SAL_DeriveSessionKey+0x8>)
    724c:	4798      	blx	r3
}
    724e:	bd10      	pop	{r4, pc}
    7250:	00007221 	.word	0x00007221

00007254 <SAL_Read>:
}
    7254:	2000      	movs	r0, #0
    7256:	4770      	bx	lr

00007258 <SAL_AESCmac>:
{
    7258:	b5f0      	push	{r4, r5, r6, r7, lr}
    725a:	46d6      	mov	lr, sl
    725c:	464f      	mov	r7, r9
    725e:	4646      	mov	r6, r8
    7260:	b5c0      	push	{r6, r7, lr}
    7262:	b0a4      	sub	sp, #144	; 0x90
    7264:	9001      	str	r0, [sp, #4]
    7266:	000f      	movs	r7, r1
    7268:	9102      	str	r1, [sp, #8]
    726a:	9203      	str	r2, [sp, #12]
    726c:	469a      	mov	sl, r3
    726e:	ab2c      	add	r3, sp, #176	; 0xb0
    7270:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    7272:	ae08      	add	r6, sp, #32
    7274:	2210      	movs	r2, #16
    7276:	2100      	movs	r1, #0
    7278:	0030      	movs	r0, r6
    727a:	4d64      	ldr	r5, [pc, #400]	; (740c <SAL_AESCmac+0x1b4>)
    727c:	47a8      	blx	r5
    727e:	2387      	movs	r3, #135	; 0x87
    7280:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    7282:	2210      	movs	r2, #16
    7284:	2100      	movs	r1, #0
    7286:	a804      	add	r0, sp, #16
    7288:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    728a:	9a01      	ldr	r2, [sp, #4]
    728c:	0039      	movs	r1, r7
    728e:	a804      	add	r0, sp, #16
    7290:	4b5f      	ldr	r3, [pc, #380]	; (7410 <SAL_AESCmac+0x1b8>)
    7292:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    7294:	ab04      	add	r3, sp, #16
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	2b7f      	cmp	r3, #127	; 0x7f
    729a:	d82d      	bhi.n	72f8 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    729c:	2210      	movs	r2, #16
    729e:	a920      	add	r1, sp, #128	; 0x80
    72a0:	a804      	add	r0, sp, #16
    72a2:	4b5c      	ldr	r3, [pc, #368]	; (7414 <SAL_AESCmac+0x1bc>)
    72a4:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    72a6:	ab20      	add	r3, sp, #128	; 0x80
    72a8:	781b      	ldrb	r3, [r3, #0]
    72aa:	2b7f      	cmp	r3, #127	; 0x7f
    72ac:	d834      	bhi.n	7318 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    72ae:	2210      	movs	r2, #16
    72b0:	a91c      	add	r1, sp, #112	; 0x70
    72b2:	a820      	add	r0, sp, #128	; 0x80
    72b4:	4b57      	ldr	r3, [pc, #348]	; (7414 <SAL_AESCmac+0x1bc>)
    72b6:	4798      	blx	r3
	n = (size + 15) >> 4;
    72b8:	0023      	movs	r3, r4
    72ba:	330f      	adds	r3, #15
    72bc:	111d      	asrs	r5, r3, #4
    72be:	b2aa      	uxth	r2, r5
    72c0:	4690      	mov	r8, r2
	if (n == 0)
    72c2:	2a00      	cmp	r2, #0
    72c4:	d038      	beq.n	7338 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    72c6:	0722      	lsls	r2, r4, #28
    72c8:	d138      	bne.n	733c <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    72ca:	4642      	mov	r2, r8
    72cc:	3a01      	subs	r2, #1
    72ce:	0112      	lsls	r2, r2, #4
    72d0:	b296      	uxth	r6, r2
    72d2:	4f51      	ldr	r7, [pc, #324]	; (7418 <SAL_AESCmac+0x1c0>)
    72d4:	401f      	ands	r7, r3
    72d6:	42be      	cmp	r6, r7
    72d8:	da54      	bge.n	7384 <SAL_AESCmac+0x12c>
    72da:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    72dc:	a910      	add	r1, sp, #64	; 0x40
    72de:	aa20      	add	r2, sp, #128	; 0x80
    72e0:	1b98      	subs	r0, r3, r6
    72e2:	b280      	uxth	r0, r0
    72e4:	4654      	mov	r4, sl
    72e6:	5ce4      	ldrb	r4, [r4, r3]
    72e8:	5c15      	ldrb	r5, [r2, r0]
    72ea:	406c      	eors	r4, r5
    72ec:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    72ee:	3301      	adds	r3, #1
    72f0:	b29b      	uxth	r3, r3
    72f2:	42bb      	cmp	r3, r7
    72f4:	dbf4      	blt.n	72e0 <SAL_AESCmac+0x88>
    72f6:	e045      	b.n	7384 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    72f8:	2210      	movs	r2, #16
    72fa:	a920      	add	r1, sp, #128	; 0x80
    72fc:	a804      	add	r0, sp, #16
    72fe:	4b45      	ldr	r3, [pc, #276]	; (7414 <SAL_AESCmac+0x1bc>)
    7300:	4798      	blx	r3
    7302:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    7304:	aa20      	add	r2, sp, #128	; 0x80
    7306:	a908      	add	r1, sp, #32
    7308:	5c98      	ldrb	r0, [r3, r2]
    730a:	5c5d      	ldrb	r5, [r3, r1]
    730c:	4068      	eors	r0, r5
    730e:	5498      	strb	r0, [r3, r2]
    7310:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    7312:	2b10      	cmp	r3, #16
    7314:	d1f8      	bne.n	7308 <SAL_AESCmac+0xb0>
    7316:	e7c6      	b.n	72a6 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7318:	2210      	movs	r2, #16
    731a:	a91c      	add	r1, sp, #112	; 0x70
    731c:	a820      	add	r0, sp, #128	; 0x80
    731e:	4b3d      	ldr	r3, [pc, #244]	; (7414 <SAL_AESCmac+0x1bc>)
    7320:	4798      	blx	r3
    7322:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    7324:	aa1c      	add	r2, sp, #112	; 0x70
    7326:	a908      	add	r1, sp, #32
    7328:	5c98      	ldrb	r0, [r3, r2]
    732a:	5c5d      	ldrb	r5, [r3, r1]
    732c:	4068      	eors	r0, r5
    732e:	5498      	strb	r0, [r3, r2]
    7330:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    7332:	2b10      	cmp	r3, #16
    7334:	d1f8      	bne.n	7328 <SAL_AESCmac+0xd0>
    7336:	e7bf      	b.n	72b8 <SAL_AESCmac+0x60>
		n = 1;
    7338:	2301      	movs	r3, #1
    733a:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    733c:	230f      	movs	r3, #15
    733e:	0020      	movs	r0, r4
    7340:	4398      	bics	r0, r3
    7342:	2300      	movs	r3, #0
			if ( i < (size%16) )
    7344:	220f      	movs	r2, #15
    7346:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7348:	a90c      	add	r1, sp, #48	; 0x30
    734a:	2700      	movs	r7, #0
					padded[i] = 0x80;
    734c:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    734e:	4450      	add	r0, sl
    7350:	e005      	b.n	735e <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    7352:	4294      	cmp	r4, r2
    7354:	d009      	beq.n	736a <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    7356:	545f      	strb	r7, [r3, r1]
    7358:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    735a:	2b10      	cmp	r3, #16
    735c:	d007      	beq.n	736e <SAL_AESCmac+0x116>
    735e:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    7360:	4294      	cmp	r4, r2
    7362:	d9f6      	bls.n	7352 <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    7364:	5cc2      	ldrb	r2, [r0, r3]
    7366:	545a      	strb	r2, [r3, r1]
    7368:	e7f6      	b.n	7358 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    736a:	545e      	strb	r6, [r3, r1]
    736c:	e7f4      	b.n	7358 <SAL_AESCmac+0x100>
    736e:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    7370:	a810      	add	r0, sp, #64	; 0x40
    7372:	a90c      	add	r1, sp, #48	; 0x30
    7374:	aa1c      	add	r2, sp, #112	; 0x70
    7376:	5c5c      	ldrb	r4, [r3, r1]
    7378:	5c9d      	ldrb	r5, [r3, r2]
    737a:	406c      	eors	r4, r5
    737c:	541c      	strb	r4, [r3, r0]
    737e:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    7380:	2b10      	cmp	r3, #16
    7382:	d1f8      	bne.n	7376 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    7384:	2210      	movs	r2, #16
    7386:	2100      	movs	r1, #0
    7388:	a818      	add	r0, sp, #96	; 0x60
    738a:	4b20      	ldr	r3, [pc, #128]	; (740c <SAL_AESCmac+0x1b4>)
    738c:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    738e:	2301      	movs	r3, #1
    7390:	425b      	negs	r3, r3
    7392:	4443      	add	r3, r8
    7394:	4699      	mov	r9, r3
    7396:	2000      	movs	r0, #0
    7398:	2700      	movs	r7, #0
    739a:	2b00      	cmp	r3, #0
    739c:	dd1a      	ble.n	73d4 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    739e:	ad14      	add	r5, sp, #80	; 0x50
    73a0:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    73a2:	4e1e      	ldr	r6, [pc, #120]	; (741c <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    73a4:	0100      	lsls	r0, r0, #4
    73a6:	2300      	movs	r3, #0
    73a8:	4450      	add	r0, sl
    73aa:	5cc2      	ldrb	r2, [r0, r3]
    73ac:	5d19      	ldrb	r1, [r3, r4]
    73ae:	404a      	eors	r2, r1
    73b0:	555a      	strb	r2, [r3, r5]
    73b2:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    73b4:	2b10      	cmp	r3, #16
    73b6:	d1f8      	bne.n	73aa <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    73b8:	2210      	movs	r2, #16
    73ba:	0029      	movs	r1, r5
    73bc:	0020      	movs	r0, r4
    73be:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    73c0:	9a01      	ldr	r2, [sp, #4]
    73c2:	9902      	ldr	r1, [sp, #8]
    73c4:	0020      	movs	r0, r4
    73c6:	4b12      	ldr	r3, [pc, #72]	; (7410 <SAL_AESCmac+0x1b8>)
    73c8:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    73ca:	3701      	adds	r7, #1
    73cc:	b2bf      	uxth	r7, r7
    73ce:	0038      	movs	r0, r7
    73d0:	454f      	cmp	r7, r9
    73d2:	dbe7      	blt.n	73a4 <SAL_AESCmac+0x14c>
    73d4:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    73d6:	ac14      	add	r4, sp, #80	; 0x50
    73d8:	a818      	add	r0, sp, #96	; 0x60
    73da:	a910      	add	r1, sp, #64	; 0x40
    73dc:	5c1a      	ldrb	r2, [r3, r0]
    73de:	5c5d      	ldrb	r5, [r3, r1]
    73e0:	406a      	eors	r2, r5
    73e2:	551a      	strb	r2, [r3, r4]
    73e4:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    73e6:	2b10      	cmp	r3, #16
    73e8:	d1f8      	bne.n	73dc <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    73ea:	9a01      	ldr	r2, [sp, #4]
    73ec:	9902      	ldr	r1, [sp, #8]
    73ee:	a814      	add	r0, sp, #80	; 0x50
    73f0:	4b07      	ldr	r3, [pc, #28]	; (7410 <SAL_AESCmac+0x1b8>)
    73f2:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    73f4:	2210      	movs	r2, #16
    73f6:	a914      	add	r1, sp, #80	; 0x50
    73f8:	9803      	ldr	r0, [sp, #12]
    73fa:	4b08      	ldr	r3, [pc, #32]	; (741c <SAL_AESCmac+0x1c4>)
    73fc:	4798      	blx	r3
}
    73fe:	2000      	movs	r0, #0
    7400:	b024      	add	sp, #144	; 0x90
    7402:	bc1c      	pop	{r2, r3, r4}
    7404:	4690      	mov	r8, r2
    7406:	4699      	mov	r9, r3
    7408:	46a2      	mov	sl, r4
    740a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    740c:	00016709 	.word	0x00016709
    7410:	00007221 	.word	0x00007221
    7414:	000071fd 	.word	0x000071fd
    7418:	000ffff0 	.word	0x000ffff0
    741c:	000166f7 	.word	0x000166f7

00007420 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    7420:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    7422:	480e      	ldr	r0, [pc, #56]	; (745c <DemoOutput_Greeting+0x3c>)
    7424:	4c0e      	ldr	r4, [pc, #56]	; (7460 <DemoOutput_Greeting+0x40>)
    7426:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7428:	480e      	ldr	r0, [pc, #56]	; (7464 <DemoOutput_Greeting+0x44>)
    742a:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    742c:	480e      	ldr	r0, [pc, #56]	; (7468 <DemoOutput_Greeting+0x48>)
    742e:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7430:	480e      	ldr	r0, [pc, #56]	; (746c <DemoOutput_Greeting+0x4c>)
    7432:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    7434:	480e      	ldr	r0, [pc, #56]	; (7470 <DemoOutput_Greeting+0x50>)
    7436:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    7438:	480e      	ldr	r0, [pc, #56]	; (7474 <DemoOutput_Greeting+0x54>)
    743a:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    743c:	480e      	ldr	r0, [pc, #56]	; (7478 <DemoOutput_Greeting+0x58>)
    743e:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7440:	480e      	ldr	r0, [pc, #56]	; (747c <DemoOutput_Greeting+0x5c>)
    7442:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    7444:	480e      	ldr	r0, [pc, #56]	; (7480 <DemoOutput_Greeting+0x60>)
    7446:	47a0      	blx	r4
        printf("\r\n\r\n");		
    7448:	480e      	ldr	r0, [pc, #56]	; (7484 <DemoOutput_Greeting+0x64>)
    744a:	4c0f      	ldr	r4, [pc, #60]	; (7488 <DemoOutput_Greeting+0x68>)
    744c:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    744e:	480f      	ldr	r0, [pc, #60]	; (748c <DemoOutput_Greeting+0x6c>)
    7450:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    7452:	480f      	ldr	r0, [pc, #60]	; (7490 <DemoOutput_Greeting+0x70>)
    7454:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    7456:	480f      	ldr	r0, [pc, #60]	; (7494 <DemoOutput_Greeting+0x74>)
    7458:	47a0      	blx	r4
		#endif
    #endif 
}        
    745a:	bd10      	pop	{r4, pc}
    745c:	00017c7c 	.word	0x00017c7c
    7460:	00016cb1 	.word	0x00016cb1
    7464:	00017cec 	.word	0x00017cec
    7468:	00017d24 	.word	0x00017d24
    746c:	00017d4c 	.word	0x00017d4c
    7470:	00017d6c 	.word	0x00017d6c
    7474:	00017d88 	.word	0x00017d88
    7478:	00017dc8 	.word	0x00017dc8
    747c:	00017e04 	.word	0x00017e04
    7480:	00017e40 	.word	0x00017e40
    7484:	00017e88 	.word	0x00017e88
    7488:	00016dcd 	.word	0x00016dcd
    748c:	00017e8c 	.word	0x00017e8c
    7490:	00017eb0 	.word	0x00017eb0
    7494:	00017ed0 	.word	0x00017ed0

00007498 <DemoOutput_HandleMessage>:
    }
}    


void DemoOutput_HandleMessage(void)
{
    7498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    749a:	4b2a      	ldr	r3, [pc, #168]	; (7544 <DemoOutput_HandleMessage+0xac>)
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	071b      	lsls	r3, r3, #28
    74a0:	d426      	bmi.n	74f0 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    74a2:	4b28      	ldr	r3, [pc, #160]	; (7544 <DemoOutput_HandleMessage+0xac>)
    74a4:	781b      	ldrb	r3, [r3, #0]
    74a6:	079b      	lsls	r3, r3, #30
    74a8:	d027      	beq.n	74fa <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    74aa:	211c      	movs	r1, #28
    74ac:	4826      	ldr	r0, [pc, #152]	; (7548 <DemoOutput_HandleMessage+0xb0>)
    74ae:	4b27      	ldr	r3, [pc, #156]	; (754c <DemoOutput_HandleMessage+0xb4>)
    74b0:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    74b2:	4c24      	ldr	r4, [pc, #144]	; (7544 <DemoOutput_HandleMessage+0xac>)
    74b4:	7b61      	ldrb	r1, [r4, #13]
    74b6:	4826      	ldr	r0, [pc, #152]	; (7550 <DemoOutput_HandleMessage+0xb8>)
    74b8:	4b26      	ldr	r3, [pc, #152]	; (7554 <DemoOutput_HandleMessage+0xbc>)
    74ba:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    74bc:	7823      	ldrb	r3, [r4, #0]
    74be:	065b      	lsls	r3, r3, #25
    74c0:	d420      	bmi.n	7504 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    74c2:	2103      	movs	r1, #3
    74c4:	4824      	ldr	r0, [pc, #144]	; (7558 <DemoOutput_HandleMessage+0xc0>)
    74c6:	4b21      	ldr	r3, [pc, #132]	; (754c <DemoOutput_HandleMessage+0xb4>)
    74c8:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    74ca:	4b1e      	ldr	r3, [pc, #120]	; (7544 <DemoOutput_HandleMessage+0xac>)
    74cc:	7b1b      	ldrb	r3, [r3, #12]
    74ce:	2b00      	cmp	r3, #0
    74d0:	d00a      	beq.n	74e8 <DemoOutput_HandleMessage+0x50>
    74d2:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    74d4:	4d1b      	ldr	r5, [pc, #108]	; (7544 <DemoOutput_HandleMessage+0xac>)
    74d6:	4e21      	ldr	r6, [pc, #132]	; (755c <DemoOutput_HandleMessage+0xc4>)
    74d8:	68ab      	ldr	r3, [r5, #8]
    74da:	5d18      	ldrb	r0, [r3, r4]
    74dc:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    74de:	3401      	adds	r4, #1
    74e0:	b2e4      	uxtb	r4, r4
    74e2:	7b2b      	ldrb	r3, [r5, #12]
    74e4:	42a3      	cmp	r3, r4
    74e6:	d8f7      	bhi.n	74d8 <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    74e8:	481d      	ldr	r0, [pc, #116]	; (7560 <DemoOutput_HandleMessage+0xc8>)
    74ea:	4b1e      	ldr	r3, [pc, #120]	; (7564 <DemoOutput_HandleMessage+0xcc>)
    74ec:	4798      	blx	r3
} 
    74ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    74f0:	2109      	movs	r1, #9
    74f2:	481d      	ldr	r0, [pc, #116]	; (7568 <DemoOutput_HandleMessage+0xd0>)
    74f4:	4b15      	ldr	r3, [pc, #84]	; (754c <DemoOutput_HandleMessage+0xb4>)
    74f6:	4798      	blx	r3
    74f8:	e7d3      	b.n	74a2 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    74fa:	211a      	movs	r1, #26
    74fc:	481b      	ldr	r0, [pc, #108]	; (756c <DemoOutput_HandleMessage+0xd4>)
    74fe:	4b13      	ldr	r3, [pc, #76]	; (754c <DemoOutput_HandleMessage+0xb4>)
    7500:	4798      	blx	r3
    7502:	e7d6      	b.n	74b2 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7504:	2107      	movs	r1, #7
    7506:	481a      	ldr	r0, [pc, #104]	; (7570 <DemoOutput_HandleMessage+0xd8>)
    7508:	4b10      	ldr	r3, [pc, #64]	; (754c <DemoOutput_HandleMessage+0xb4>)
    750a:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    750c:	4b0d      	ldr	r3, [pc, #52]	; (7544 <DemoOutput_HandleMessage+0xac>)
    750e:	781b      	ldrb	r3, [r3, #0]
    7510:	2407      	movs	r4, #7
    7512:	2b7f      	cmp	r3, #127	; 0x7f
    7514:	d809      	bhi.n	752a <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    7516:	4f0b      	ldr	r7, [pc, #44]	; (7544 <DemoOutput_HandleMessage+0xac>)
    7518:	4e16      	ldr	r6, [pc, #88]	; (7574 <DemoOutput_HandleMessage+0xdc>)
    751a:	4d0e      	ldr	r5, [pc, #56]	; (7554 <DemoOutput_HandleMessage+0xbc>)
    751c:	687b      	ldr	r3, [r7, #4]
    751e:	5d19      	ldrb	r1, [r3, r4]
    7520:	0030      	movs	r0, r6
    7522:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    7524:	3c01      	subs	r4, #1
    7526:	d2f9      	bcs.n	751c <DemoOutput_HandleMessage+0x84>
    7528:	e7cb      	b.n	74c2 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    752a:	4e06      	ldr	r6, [pc, #24]	; (7544 <DemoOutput_HandleMessage+0xac>)
    752c:	6873      	ldr	r3, [r6, #4]
    752e:	7859      	ldrb	r1, [r3, #1]
    7530:	4d10      	ldr	r5, [pc, #64]	; (7574 <DemoOutput_HandleMessage+0xdc>)
    7532:	0028      	movs	r0, r5
    7534:	4c07      	ldr	r4, [pc, #28]	; (7554 <DemoOutput_HandleMessage+0xbc>)
    7536:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    7538:	6873      	ldr	r3, [r6, #4]
    753a:	7819      	ldrb	r1, [r3, #0]
    753c:	0028      	movs	r0, r5
    753e:	47a0      	blx	r4
    7540:	e7bf      	b.n	74c2 <DemoOutput_HandleMessage+0x2a>
    7542:	46c0      	nop			; (mov r8, r8)
    7544:	20002950 	.word	0x20002950
    7548:	00017ef4 	.word	0x00017ef4
    754c:	0000c185 	.word	0x0000c185
    7550:	00017f2c 	.word	0x00017f2c
    7554:	00016cb1 	.word	0x00016cb1
    7558:	00017f40 	.word	0x00017f40
    755c:	0000c1b1 	.word	0x0000c1b1
    7560:	00018168 	.word	0x00018168
    7564:	00016dcd 	.word	0x00016dcd
    7568:	00017ee8 	.word	0x00017ee8
    756c:	00017f10 	.word	0x00017f10
    7570:	00017f34 	.word	0x00017f34
    7574:	00017f3c 	.word	0x00017f3c

00007578 <DemoOutput_ChannelError>:



void DemoOutput_ChannelError(uint8_t channel)
{
    7578:	b570      	push	{r4, r5, r6, lr}
    757a:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    757c:	4804      	ldr	r0, [pc, #16]	; (7590 <DemoOutput_ChannelError+0x18>)
    757e:	4c05      	ldr	r4, [pc, #20]	; (7594 <DemoOutput_ChannelError+0x1c>)
    7580:	47a0      	blx	r4
        printf("%d", channel);
    7582:	0029      	movs	r1, r5
    7584:	4804      	ldr	r0, [pc, #16]	; (7598 <DemoOutput_ChannelError+0x20>)
    7586:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    7588:	4804      	ldr	r0, [pc, #16]	; (759c <DemoOutput_ChannelError+0x24>)
    758a:	4b05      	ldr	r3, [pc, #20]	; (75a0 <DemoOutput_ChannelError+0x28>)
    758c:	4798      	blx	r3
    #endif
}
    758e:	bd70      	pop	{r4, r5, r6, pc}
    7590:	00017c34 	.word	0x00017c34
    7594:	00016cb1 	.word	0x00016cb1
    7598:	00017c10 	.word	0x00017c10
    759c:	00017c4c 	.word	0x00017c4c
    75a0:	00016dcd 	.word	0x00016dcd

000075a4 <DemoOutput_BroadcastFail>:
        printf("\r\nUnicast Failed\r\n");
    #endif
}    

void DemoOutput_BroadcastFail(void)
{
    75a4:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    75a6:	4802      	ldr	r0, [pc, #8]	; (75b0 <DemoOutput_BroadcastFail+0xc>)
    75a8:	4b02      	ldr	r3, [pc, #8]	; (75b4 <DemoOutput_BroadcastFail+0x10>)
    75aa:	4798      	blx	r3
	#endif
}    
    75ac:	bd10      	pop	{r4, pc}
    75ae:	46c0      	nop			; (mov r8, r8)
    75b0:	00017bdc 	.word	0x00017bdc
    75b4:	00016dcd 	.word	0x00016dcd

000075b8 <TxToutCallback>:
uint8_t ferryState = 0;

#define PAYLOAD_TERMINAL 1

void TxToutCallback(void)
{
    75b8:	b510      	push	{r4, lr}
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    75ba:	2005      	movs	r0, #5
    75bc:	4b03      	ldr	r3, [pc, #12]	; (75cc <TxToutCallback+0x14>)
    75be:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    75c0:	4b03      	ldr	r3, [pc, #12]	; (75d0 <TxToutCallback+0x18>)
    75c2:	7818      	ldrb	r0, [r3, #0]
    75c4:	4b03      	ldr	r3, [pc, #12]	; (75d4 <TxToutCallback+0x1c>)
    75c6:	4798      	blx	r3
}
    75c8:	bd10      	pop	{r4, pc}
    75ca:	46c0      	nop			; (mov r8, r8)
    75cc:	00009e6d 	.word	0x00009e6d
    75d0:	20000104 	.word	0x20000104
    75d4:	0000d3d5 	.word	0x0000d3d5

000075d8 <dataConfcb>:


// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    75d8:	b510      	push	{r4, lr}
    75da:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    75dc:	000a      	movs	r2, r1
    75de:	0001      	movs	r1, r0
    75e0:	4805      	ldr	r0, [pc, #20]	; (75f8 <dataConfcb+0x20>)
    75e2:	4b06      	ldr	r3, [pc, #24]	; (75fc <dataConfcb+0x24>)
    75e4:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    75e6:	4b06      	ldr	r3, [pc, #24]	; (7600 <dataConfcb+0x28>)
    75e8:	7818      	ldrb	r0, [r3, #0]
    75ea:	4b06      	ldr	r3, [pc, #24]	; (7604 <dataConfcb+0x2c>)
    75ec:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    75ee:	0020      	movs	r0, r4
    75f0:	4b05      	ldr	r3, [pc, #20]	; (7608 <dataConfcb+0x30>)
    75f2:	4798      	blx	r3
	
}
    75f4:	bd10      	pop	{r4, pc}
    75f6:	46c0      	nop			; (mov r8, r8)
    75f8:	000181f0 	.word	0x000181f0
    75fc:	00016cb1 	.word	0x00016cb1
    7600:	20000104 	.word	0x20000104
    7604:	0000d3d5 	.word	0x0000d3d5
    7608:	0000bda1 	.word	0x0000bda1

0000760c <M_BroadcastMessageToTerminal>:
	.rear = -1
};


void M_BroadcastMessageToTerminal(uint8_t signal)
{
    760c:	b5f0      	push	{r4, r5, r6, r7, lr}
    760e:	46ce      	mov	lr, r9
    7610:	4647      	mov	r7, r8
    7612:	b580      	push	{r7, lr}
    7614:	b087      	sub	sp, #28
    7616:	0007      	movs	r7, r0
	uint8_t* dataPtr = NULL;
	uint8_t dataLen = 0;
	uint16_t broadcastAddress = 0xFFFF;
    7618:	2201      	movs	r2, #1
    761a:	4252      	negs	r2, r2
    761c:	2316      	movs	r3, #22
    761e:	446b      	add	r3, sp
    7620:	801a      	strh	r2, [r3, #0]
	
	MiMem_Free(previousMessage);
    7622:	4d23      	ldr	r5, [pc, #140]	; (76b0 <M_BroadcastMessageToTerminal+0xa4>)
    7624:	6828      	ldr	r0, [r5, #0]
    7626:	4b23      	ldr	r3, [pc, #140]	; (76b4 <M_BroadcastMessageToTerminal+0xa8>)
    7628:	4798      	blx	r3
	previousMessage = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    762a:	2010      	movs	r0, #16
    762c:	4c22      	ldr	r4, [pc, #136]	; (76b8 <M_BroadcastMessageToTerminal+0xac>)
    762e:	47a0      	blx	r4
    7630:	6028      	str	r0, [r5, #0]
	
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    7632:	2010      	movs	r0, #16
    7634:	47a0      	blx	r4
    7636:	1e06      	subs	r6, r0, #0
	
	if (NULL == dataPtr) return;
    7638:	d02b      	beq.n	7692 <M_BroadcastMessageToTerminal+0x86>
	
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    763a:	2200      	movs	r2, #0
    763c:	4b1f      	ldr	r3, [pc, #124]	; (76bc <M_BroadcastMessageToTerminal+0xb0>)
    763e:	701a      	strb	r2, [r3, #0]
	{
		previousMessage[i] = signal;
    7640:	4b1b      	ldr	r3, [pc, #108]	; (76b0 <M_BroadcastMessageToTerminal+0xa4>)
    7642:	4699      	mov	r9, r3
		dataPtr[dataLen++] = signal;
		sio2host_putchar(dataPtr[i]);
    7644:	4d1d      	ldr	r5, [pc, #116]	; (76bc <M_BroadcastMessageToTerminal+0xb0>)
    7646:	4b1e      	ldr	r3, [pc, #120]	; (76c0 <M_BroadcastMessageToTerminal+0xb4>)
    7648:	4698      	mov	r8, r3
		previousMessage[i] = signal;
    764a:	464b      	mov	r3, r9
    764c:	681b      	ldr	r3, [r3, #0]
    764e:	701f      	strb	r7, [r3, #0]
		dataPtr[dataLen++] = signal;
    7650:	1c54      	adds	r4, r2, #1
    7652:	b2e4      	uxtb	r4, r4
    7654:	54b7      	strb	r7, [r6, r2]
		sio2host_putchar(dataPtr[i]);
    7656:	782b      	ldrb	r3, [r5, #0]
    7658:	5cf0      	ldrb	r0, [r6, r3]
    765a:	47c0      	blx	r8
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    765c:	782b      	ldrb	r3, [r5, #0]
    765e:	3301      	adds	r3, #1
    7660:	b2db      	uxtb	r3, r3
    7662:	702b      	strb	r3, [r5, #0]
		dataPtr[dataLen++] = signal;
    7664:	0022      	movs	r2, r4
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7666:	2b00      	cmp	r3, #0
    7668:	d0ef      	beq.n	764a <M_BroadcastMessageToTerminal+0x3e>
	}
			
	// Broadcast the message
	if (MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb) == false)
    766a:	4a16      	ldr	r2, [pc, #88]	; (76c4 <M_BroadcastMessageToTerminal+0xb8>)
    766c:	7813      	ldrb	r3, [r2, #0]
    766e:	1c59      	adds	r1, r3, #1
    7670:	7011      	strb	r1, [r2, #0]
    7672:	4a15      	ldr	r2, [pc, #84]	; (76c8 <M_BroadcastMessageToTerminal+0xbc>)
    7674:	9202      	str	r2, [sp, #8]
    7676:	2201      	movs	r2, #1
    7678:	9201      	str	r2, [sp, #4]
    767a:	9300      	str	r3, [sp, #0]
    767c:	0033      	movs	r3, r6
    767e:	0022      	movs	r2, r4
    7680:	2116      	movs	r1, #22
    7682:	4469      	add	r1, sp
    7684:	2002      	movs	r0, #2
    7686:	4c11      	ldr	r4, [pc, #68]	; (76cc <M_BroadcastMessageToTerminal+0xc0>)
    7688:	47a0      	blx	r4
    768a:	2800      	cmp	r0, #0
    768c:	d106      	bne.n	769c <M_BroadcastMessageToTerminal+0x90>
	{
		DemoOutput_BroadcastFail();
    768e:	4b10      	ldr	r3, [pc, #64]	; (76d0 <M_BroadcastMessageToTerminal+0xc4>)
    7690:	4798      	blx	r3
	else
	{
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
	}
	
}
    7692:	b007      	add	sp, #28
    7694:	bc0c      	pop	{r2, r3}
    7696:	4690      	mov	r8, r2
    7698:	4699      	mov	r9, r3
    769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
    769c:	4b0d      	ldr	r3, [pc, #52]	; (76d4 <M_BroadcastMessageToTerminal+0xc8>)
    769e:	7818      	ldrb	r0, [r3, #0]
    76a0:	2300      	movs	r3, #0
    76a2:	9300      	str	r3, [sp, #0]
    76a4:	4b0c      	ldr	r3, [pc, #48]	; (76d8 <M_BroadcastMessageToTerminal+0xcc>)
    76a6:	2200      	movs	r2, #0
    76a8:	490c      	ldr	r1, [pc, #48]	; (76dc <M_BroadcastMessageToTerminal+0xd0>)
    76aa:	4c0d      	ldr	r4, [pc, #52]	; (76e0 <M_BroadcastMessageToTerminal+0xd4>)
    76ac:	47a0      	blx	r4
    76ae:	e7f0      	b.n	7692 <M_BroadcastMessageToTerminal+0x86>
    76b0:	20000100 	.word	0x20000100
    76b4:	0000bda1 	.word	0x0000bda1
    76b8:	0000bce5 	.word	0x0000bce5
    76bc:	20001f64 	.word	0x20001f64
    76c0:	0000c1b1 	.word	0x0000c1b1
    76c4:	200000fd 	.word	0x200000fd
    76c8:	000075d9 	.word	0x000075d9
    76cc:	0000aced 	.word	0x0000aced
    76d0:	000075a5 	.word	0x000075a5
    76d4:	20000104 	.word	0x20000104
    76d8:	000075b9 	.word	0x000075b9
    76dc:	004c4b40 	.word	0x004c4b40
    76e0:	0000d0bd 	.word	0x0000d0bd

000076e4 <M_SendReceivedUARTMessage>:


// Send received UART message with LoRa
void M_SendReceivedUARTMessage(uint8_t message)
{
    76e4:	b510      	push	{r4, lr}
    76e6:	b082      	sub	sp, #8
    76e8:	0004      	movs	r4, r0
	printf("\n\r Send UART message %x \n", message);
    76ea:	0001      	movs	r1, r0
    76ec:	4822      	ldr	r0, [pc, #136]	; (7778 <M_SendReceivedUARTMessage+0x94>)
    76ee:	4b23      	ldr	r3, [pc, #140]	; (777c <M_SendReceivedUARTMessage+0x98>)
    76f0:	4798      	blx	r3
	switch(message)
    76f2:	0023      	movs	r3, r4
    76f4:	3b70      	subs	r3, #112	; 0x70
    76f6:	b2da      	uxtb	r2, r3
    76f8:	2a4f      	cmp	r2, #79	; 0x4f
    76fa:	d835      	bhi.n	7768 <M_SendReceivedUARTMessage+0x84>
    76fc:	0093      	lsls	r3, r2, #2
    76fe:	4a20      	ldr	r2, [pc, #128]	; (7780 <M_SendReceivedUARTMessage+0x9c>)
    7700:	58d3      	ldr	r3, [r2, r3]
    7702:	469f      	mov	pc, r3
	{
		case TEAID_GCMD_RESET:
			break;
			
		case TEAID_GCMD_OPEN:
			ferryState = TEAID; 
    7704:	2240      	movs	r2, #64	; 0x40
    7706:	4b1f      	ldr	r3, [pc, #124]	; (7784 <M_SendReceivedUARTMessage+0xa0>)
    7708:	701a      	strb	r2, [r3, #0]
			printf("\n Open gate at terminal A from IO \n\r");
    770a:	481f      	ldr	r0, [pc, #124]	; (7788 <M_SendReceivedUARTMessage+0xa4>)
    770c:	4b1b      	ldr	r3, [pc, #108]	; (777c <M_SendReceivedUARTMessage+0x98>)
    770e:	4798      	blx	r3
		default: ;
			uint8_t send_message_again = SEND_MESSAGE_AGAIN;
			UART_SAM_To_IO(&send_message_again);
			return;
	}
	M_BroadcastMessageToTerminal(message);
    7710:	0020      	movs	r0, r4
    7712:	4b1e      	ldr	r3, [pc, #120]	; (778c <M_SendReceivedUARTMessage+0xa8>)
    7714:	4798      	blx	r3
}
    7716:	b002      	add	sp, #8
    7718:	bd10      	pop	{r4, pc}
			printf("\n Close gate at terminal A from IO \n\r");
    771a:	481d      	ldr	r0, [pc, #116]	; (7790 <M_SendReceivedUARTMessage+0xac>)
    771c:	4b17      	ldr	r3, [pc, #92]	; (777c <M_SendReceivedUARTMessage+0x98>)
    771e:	4798      	blx	r3
			break;
    7720:	e7f6      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			ferryState = TEBID;
    7722:	2280      	movs	r2, #128	; 0x80
    7724:	4b17      	ldr	r3, [pc, #92]	; (7784 <M_SendReceivedUARTMessage+0xa0>)
    7726:	701a      	strb	r2, [r3, #0]
			printf("\n Open gate at terminal B from IO \n\r");
    7728:	481a      	ldr	r0, [pc, #104]	; (7794 <M_SendReceivedUARTMessage+0xb0>)
    772a:	4b14      	ldr	r3, [pc, #80]	; (777c <M_SendReceivedUARTMessage+0x98>)
    772c:	4798      	blx	r3
			break;
    772e:	e7ef      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			printf("\n Close gate at terminal B from IO \n\r");
    7730:	4819      	ldr	r0, [pc, #100]	; (7798 <M_SendReceivedUARTMessage+0xb4>)
    7732:	4b12      	ldr	r3, [pc, #72]	; (777c <M_SendReceivedUARTMessage+0x98>)
    7734:	4798      	blx	r3
			break;
    7736:	e7eb      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			if (s.front == TEAID_REQF_REQUEST)
    7738:	4b18      	ldr	r3, [pc, #96]	; (779c <M_SendReceivedUARTMessage+0xb8>)
    773a:	78db      	ldrb	r3, [r3, #3]
    773c:	2bde      	cmp	r3, #222	; 0xde
    773e:	d1e7      	bne.n	7710 <M_SendReceivedUARTMessage+0x2c>
				pop_front(&s);
    7740:	4816      	ldr	r0, [pc, #88]	; (779c <M_SendReceivedUARTMessage+0xb8>)
    7742:	4b17      	ldr	r3, [pc, #92]	; (77a0 <M_SendReceivedUARTMessage+0xbc>)
    7744:	4798      	blx	r3
    7746:	e7e3      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			ferryState = IN_TRANSIT;
    7748:	22a0      	movs	r2, #160	; 0xa0
    774a:	4b0e      	ldr	r3, [pc, #56]	; (7784 <M_SendReceivedUARTMessage+0xa0>)
    774c:	701a      	strb	r2, [r3, #0]
			break;
    774e:	e7df      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			if (s.front == TEBID_REQF_REQUEST)
    7750:	4b12      	ldr	r3, [pc, #72]	; (779c <M_SendReceivedUARTMessage+0xb8>)
    7752:	78db      	ldrb	r3, [r3, #3]
    7754:	2bee      	cmp	r3, #238	; 0xee
    7756:	d1db      	bne.n	7710 <M_SendReceivedUARTMessage+0x2c>
				pop_front(&s);
    7758:	4810      	ldr	r0, [pc, #64]	; (779c <M_SendReceivedUARTMessage+0xb8>)
    775a:	4b11      	ldr	r3, [pc, #68]	; (77a0 <M_SendReceivedUARTMessage+0xbc>)
    775c:	4798      	blx	r3
    775e:	e7d7      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			ferryState = IN_TRANSIT;
    7760:	22a0      	movs	r2, #160	; 0xa0
    7762:	4b08      	ldr	r3, [pc, #32]	; (7784 <M_SendReceivedUARTMessage+0xa0>)
    7764:	701a      	strb	r2, [r3, #0]
			break;
    7766:	e7d3      	b.n	7710 <M_SendReceivedUARTMessage+0x2c>
			uint8_t send_message_again = SEND_MESSAGE_AGAIN;
    7768:	466b      	mov	r3, sp
    776a:	1dd8      	adds	r0, r3, #7
    776c:	23aa      	movs	r3, #170	; 0xaa
    776e:	7003      	strb	r3, [r0, #0]
			UART_SAM_To_IO(&send_message_again);
    7770:	4b0c      	ldr	r3, [pc, #48]	; (77a4 <M_SendReceivedUARTMessage+0xc0>)
    7772:	4798      	blx	r3
    7774:	e7cf      	b.n	7716 <M_SendReceivedUARTMessage+0x32>
    7776:	46c0      	nop			; (mov r8, r8)
    7778:	00018100 	.word	0x00018100
    777c:	00016cb1 	.word	0x00016cb1
    7780:	00017f44 	.word	0x00017f44
    7784:	200000fc 	.word	0x200000fc
    7788:	0001811c 	.word	0x0001811c
    778c:	0000760d 	.word	0x0000760d
    7790:	00018144 	.word	0x00018144
    7794:	0001816c 	.word	0x0001816c
    7798:	00018194 	.word	0x00018194
    779c:	2000000c 	.word	0x2000000c
    77a0:	0000ded1 	.word	0x0000ded1
    77a4:	0000de79 	.word	0x0000de79

000077a8 <processOrder>:
}



void processOrder(uint8_t receivedOrder, uint8_t terminalIdentifier)
{
    77a8:	b510      	push	{r4, lr}
    77aa:	b082      	sub	sp, #8
	
	switch (terminalIdentifier)
    77ac:	2940      	cmp	r1, #64	; 0x40
    77ae:	d003      	beq.n	77b8 <processOrder+0x10>
    77b0:	2980      	cmp	r1, #128	; 0x80
    77b2:	d018      	beq.n	77e6 <processOrder+0x3e>
			break;
		
		default:
			break;
	}
}
    77b4:	b002      	add	sp, #8
    77b6:	bd10      	pop	{r4, pc}
			if (ferryState == TEAID)
    77b8:	4b16      	ldr	r3, [pc, #88]	; (7814 <processOrder+0x6c>)
    77ba:	781b      	ldrb	r3, [r3, #0]
    77bc:	2b40      	cmp	r3, #64	; 0x40
    77be:	d00e      	beq.n	77de <processOrder+0x36>
				push_back(&s, receivedOrder);
    77c0:	0001      	movs	r1, r0
    77c2:	4815      	ldr	r0, [pc, #84]	; (7818 <processOrder+0x70>)
    77c4:	4b15      	ldr	r3, [pc, #84]	; (781c <processOrder+0x74>)
    77c6:	4798      	blx	r3
				uint8_t terminal_A_conf = TEAID_CQUD_QCONF;
    77c8:	466b      	mov	r3, sp
    77ca:	1ddc      	adds	r4, r3, #7
    77cc:	2375      	movs	r3, #117	; 0x75
    77ce:	7023      	strb	r3, [r4, #0]
				M_BroadcastMessageToTerminal(terminal_A_conf);
    77d0:	2075      	movs	r0, #117	; 0x75
    77d2:	4b13      	ldr	r3, [pc, #76]	; (7820 <processOrder+0x78>)
    77d4:	4798      	blx	r3
				UART_SAM_To_IO(&terminal_A_conf);
    77d6:	0020      	movs	r0, r4
    77d8:	4b12      	ldr	r3, [pc, #72]	; (7824 <processOrder+0x7c>)
    77da:	4798      	blx	r3
    77dc:	e7ea      	b.n	77b4 <processOrder+0xc>
				M_BroadcastMessageToTerminal(teaid_gcmd_open);
    77de:	2072      	movs	r0, #114	; 0x72
    77e0:	4b0f      	ldr	r3, [pc, #60]	; (7820 <processOrder+0x78>)
    77e2:	4798      	blx	r3
    77e4:	e7e6      	b.n	77b4 <processOrder+0xc>
			if (ferryState == TEBID)
    77e6:	4b0b      	ldr	r3, [pc, #44]	; (7814 <processOrder+0x6c>)
    77e8:	781b      	ldrb	r3, [r3, #0]
    77ea:	2b80      	cmp	r3, #128	; 0x80
    77ec:	d00e      	beq.n	780c <processOrder+0x64>
				push_back(&s, receivedOrder);
    77ee:	0001      	movs	r1, r0
    77f0:	4809      	ldr	r0, [pc, #36]	; (7818 <processOrder+0x70>)
    77f2:	4b0a      	ldr	r3, [pc, #40]	; (781c <processOrder+0x74>)
    77f4:	4798      	blx	r3
				uint8_t terminal_B_conf = TEBID_CQUD_QCONF; 
    77f6:	466b      	mov	r3, sp
    77f8:	1ddc      	adds	r4, r3, #7
    77fa:	23b5      	movs	r3, #181	; 0xb5
    77fc:	7023      	strb	r3, [r4, #0]
				M_BroadcastMessageToTerminal(terminal_B_conf);
    77fe:	20b5      	movs	r0, #181	; 0xb5
    7800:	4b07      	ldr	r3, [pc, #28]	; (7820 <processOrder+0x78>)
    7802:	4798      	blx	r3
				UART_SAM_To_IO(&terminal_B_conf);
    7804:	0020      	movs	r0, r4
    7806:	4b07      	ldr	r3, [pc, #28]	; (7824 <processOrder+0x7c>)
    7808:	4798      	blx	r3
}
    780a:	e7d3      	b.n	77b4 <processOrder+0xc>
				M_BroadcastMessageToTerminal(tebid_gcmd_open);
    780c:	20b2      	movs	r0, #178	; 0xb2
    780e:	4b04      	ldr	r3, [pc, #16]	; (7820 <processOrder+0x78>)
    7810:	4798      	blx	r3
    7812:	e7cf      	b.n	77b4 <processOrder+0xc>
    7814:	200000fc 	.word	0x200000fc
    7818:	2000000c 	.word	0x2000000c
    781c:	0000de91 	.word	0x0000de91
    7820:	0000760d 	.word	0x0000760d
    7824:	0000de79 	.word	0x0000de79

00007828 <M_SendReceivedLoRaMessage>:
{
    7828:	b510      	push	{r4, lr}
    782a:	b082      	sub	sp, #8
    782c:	466b      	mov	r3, sp
    782e:	1ddc      	adds	r4, r3, #7
    7830:	71d8      	strb	r0, [r3, #7]
	printf("\n\r Received message %x \n", message);
    7832:	0001      	movs	r1, r0
    7834:	481e      	ldr	r0, [pc, #120]	; (78b0 <M_SendReceivedLoRaMessage+0x88>)
    7836:	4b1f      	ldr	r3, [pc, #124]	; (78b4 <M_SendReceivedLoRaMessage+0x8c>)
    7838:	4798      	blx	r3
	if (M_CheckIdentifier(message))
    783a:	7823      	ldrb	r3, [r4, #0]
    783c:	223f      	movs	r2, #63	; 0x3f
    783e:	0019      	movs	r1, r3
    7840:	4391      	bics	r1, r2
    7842:	29c0      	cmp	r1, #192	; 0xc0
    7844:	d126      	bne.n	7894 <M_SendReceivedLoRaMessage+0x6c>
		switch(message)
    7846:	2bdd      	cmp	r3, #221	; 0xdd
    7848:	d912      	bls.n	7870 <M_SendReceivedLoRaMessage+0x48>
    784a:	2bed      	cmp	r3, #237	; 0xed
    784c:	d818      	bhi.n	7880 <M_SendReceivedLoRaMessage+0x58>
    784e:	2be1      	cmp	r3, #225	; 0xe1
    7850:	d208      	bcs.n	7864 <M_SendReceivedLoRaMessage+0x3c>
    7852:	2bde      	cmp	r3, #222	; 0xde
    7854:	d110      	bne.n	7878 <M_SendReceivedLoRaMessage+0x50>
				processOrder(message, TEAID);
    7856:	2140      	movs	r1, #64	; 0x40
    7858:	20de      	movs	r0, #222	; 0xde
    785a:	4b17      	ldr	r3, [pc, #92]	; (78b8 <M_SendReceivedLoRaMessage+0x90>)
    785c:	4798      	blx	r3
				printf("\n Received order from terminal A \n\r");
    785e:	4817      	ldr	r0, [pc, #92]	; (78bc <M_SendReceivedLoRaMessage+0x94>)
    7860:	4b14      	ldr	r3, [pc, #80]	; (78b4 <M_SendReceivedLoRaMessage+0x8c>)
    7862:	4798      	blx	r3
		UART_SAM_To_IO(&message);
    7864:	466b      	mov	r3, sp
    7866:	1dd8      	adds	r0, r3, #7
    7868:	4b15      	ldr	r3, [pc, #84]	; (78c0 <M_SendReceivedLoRaMessage+0x98>)
    786a:	4798      	blx	r3
}
    786c:	b002      	add	sp, #8
    786e:	bd10      	pop	{r4, pc}
		switch(message)
    7870:	2bd1      	cmp	r3, #209	; 0xd1
    7872:	d2f7      	bcs.n	7864 <M_SendReceivedLoRaMessage+0x3c>
    7874:	2b0f      	cmp	r3, #15
    7876:	d9f5      	bls.n	7864 <M_SendReceivedLoRaMessage+0x3c>
				M_BroadcastMessageToTerminal(SEND_MESSAGE_AGAIN);
    7878:	20aa      	movs	r0, #170	; 0xaa
    787a:	4b12      	ldr	r3, [pc, #72]	; (78c4 <M_SendReceivedLoRaMessage+0x9c>)
    787c:	4798      	blx	r3
				return;
    787e:	e7f5      	b.n	786c <M_SendReceivedLoRaMessage+0x44>
		switch(message)
    7880:	2bee      	cmp	r3, #238	; 0xee
    7882:	d1f9      	bne.n	7878 <M_SendReceivedLoRaMessage+0x50>
				processOrder(message, TEBID);
    7884:	2180      	movs	r1, #128	; 0x80
    7886:	20ee      	movs	r0, #238	; 0xee
    7888:	4b0b      	ldr	r3, [pc, #44]	; (78b8 <M_SendReceivedLoRaMessage+0x90>)
    788a:	4798      	blx	r3
				printf("\n Received order from terminal B \n\r");
    788c:	480e      	ldr	r0, [pc, #56]	; (78c8 <M_SendReceivedLoRaMessage+0xa0>)
    788e:	4b09      	ldr	r3, [pc, #36]	; (78b4 <M_SendReceivedLoRaMessage+0x8c>)
    7890:	4798      	blx	r3
				break;
    7892:	e7e7      	b.n	7864 <M_SendReceivedLoRaMessage+0x3c>
	else if (message == SEND_MESSAGE_AGAIN)
    7894:	2baa      	cmp	r3, #170	; 0xaa
    7896:	d1e9      	bne.n	786c <M_SendReceivedLoRaMessage+0x44>
		if (previousMessage)	// Send previous message if its not NULL
    7898:	4b0c      	ldr	r3, [pc, #48]	; (78cc <M_SendReceivedLoRaMessage+0xa4>)
    789a:	681b      	ldr	r3, [r3, #0]
    789c:	2b00      	cmp	r3, #0
    789e:	d0e5      	beq.n	786c <M_SendReceivedLoRaMessage+0x44>
			M_BroadcastMessageToTerminal(previousMessage[0]);
    78a0:	7818      	ldrb	r0, [r3, #0]
    78a2:	4b08      	ldr	r3, [pc, #32]	; (78c4 <M_SendReceivedLoRaMessage+0x9c>)
    78a4:	4798      	blx	r3
			printf("\n Send message again \n\r");
    78a6:	480a      	ldr	r0, [pc, #40]	; (78d0 <M_SendReceivedLoRaMessage+0xa8>)
    78a8:	4b02      	ldr	r3, [pc, #8]	; (78b4 <M_SendReceivedLoRaMessage+0x8c>)
    78aa:	4798      	blx	r3
    78ac:	e7de      	b.n	786c <M_SendReceivedLoRaMessage+0x44>
    78ae:	46c0      	nop			; (mov r8, r8)
    78b0:	00018084 	.word	0x00018084
    78b4:	00016cb1 	.word	0x00016cb1
    78b8:	000077a9 	.word	0x000077a9
    78bc:	000180a0 	.word	0x000180a0
    78c0:	0000de79 	.word	0x0000de79
    78c4:	0000760d 	.word	0x0000760d
    78c8:	000180c4 	.word	0x000180c4
    78cc:	20000100 	.word	0x20000100
    78d0:	000180e8 	.word	0x000180e8

000078d4 <ReceivedDataIndication>:
{
    78d4:	b510      	push	{r4, lr}
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    78d6:	4b0b      	ldr	r3, [pc, #44]	; (7904 <ReceivedDataIndication+0x30>)
    78d8:	881a      	ldrh	r2, [r3, #0]
    78da:	8843      	ldrh	r3, [r0, #2]
    78dc:	429a      	cmp	r2, r3
    78de:	d005      	beq.n	78ec <ReceivedDataIndication+0x18>
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    78e0:	7882      	ldrb	r2, [r0, #2]
    78e2:	78c1      	ldrb	r1, [r0, #3]
    78e4:	4808      	ldr	r0, [pc, #32]	; (7908 <ReceivedDataIndication+0x34>)
    78e6:	4b09      	ldr	r3, [pc, #36]	; (790c <ReceivedDataIndication+0x38>)
    78e8:	4798      	blx	r3
}
    78ea:	bd10      	pop	{r4, pc}
		M_SendReceivedLoRaMessage(rxMessage.Payload[0]);
    78ec:	4b08      	ldr	r3, [pc, #32]	; (7910 <ReceivedDataIndication+0x3c>)
    78ee:	689b      	ldr	r3, [r3, #8]
    78f0:	7818      	ldrb	r0, [r3, #0]
    78f2:	4b08      	ldr	r3, [pc, #32]	; (7914 <ReceivedDataIndication+0x40>)
    78f4:	4798      	blx	r3
		DemoOutput_HandleMessage();
    78f6:	4b08      	ldr	r3, [pc, #32]	; (7918 <ReceivedDataIndication+0x44>)
    78f8:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    78fa:	2280      	movs	r2, #128	; 0x80
    78fc:	0312      	lsls	r2, r2, #12
    78fe:	4b07      	ldr	r3, [pc, #28]	; (791c <ReceivedDataIndication+0x48>)
    7900:	61da      	str	r2, [r3, #28]
    7902:	e7f2      	b.n	78ea <ReceivedDataIndication+0x16>
    7904:	200026bc 	.word	0x200026bc
    7908:	000181bc 	.word	0x000181bc
    790c:	00016cb1 	.word	0x00016cb1
    7910:	20002950 	.word	0x20002950
    7914:	00007829 	.word	0x00007829
    7918:	00007499 	.word	0x00007499
    791c:	40002800 	.word	0x40002800

00007920 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7920:	b510      	push	{r4, lr}
    Run_Communication();
    7922:	4b02      	ldr	r3, [pc, #8]	; (792c <APP_TaskHandler+0xc>)
    7924:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    7926:	2000      	movs	r0, #0
    7928:	bd10      	pop	{r4, pc}
    792a:	46c0      	nop			; (mov r8, r8)
    792c:	00007c19 	.word	0x00007c19

00007930 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7930:	b510      	push	{r4, lr}
	#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    7932:	4b06      	ldr	r3, [pc, #24]	; (794c <ReadMacAddress+0x1c>)
    7934:	4798      	blx	r3
    7936:	1dc3      	adds	r3, r0, #7
    7938:	4a05      	ldr	r2, [pc, #20]	; (7950 <ReadMacAddress+0x20>)
    793a:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    793c:	7819      	ldrb	r1, [r3, #0]
    793e:	7011      	strb	r1, [r2, #0]
    7940:	3b01      	subs	r3, #1
    7942:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    7944:	4283      	cmp	r3, r0
    7946:	d1f9      	bne.n	793c <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
	#endif
}
    7948:	bd10      	pop	{r4, pc}
    794a:	46c0      	nop			; (mov r8, r8)
    794c:	0000db69 	.word	0x0000db69
    7950:	2000001c 	.word	0x2000001c

00007954 <main>:
{   
    7954:	b570      	push	{r4, r5, r6, lr}
	system_init();
    7956:	4b16      	ldr	r3, [pc, #88]	; (79b0 <main+0x5c>)
    7958:	4798      	blx	r3
	delay_init();
    795a:	4b16      	ldr	r3, [pc, #88]	; (79b4 <main+0x60>)
    795c:	4798      	blx	r3
	UART_init();
    795e:	4b16      	ldr	r3, [pc, #88]	; (79b8 <main+0x64>)
    7960:	4798      	blx	r3
	UART_cb_init();
    7962:	4b16      	ldr	r3, [pc, #88]	; (79bc <main+0x68>)
    7964:	4798      	blx	r3
	cpu_irq_enable();
    7966:	2201      	movs	r2, #1
    7968:	4b15      	ldr	r3, [pc, #84]	; (79c0 <main+0x6c>)
    796a:	701a      	strb	r2, [r3, #0]
    796c:	f3bf 8f5f 	dmb	sy
    7970:	b662      	cpsie	i
	sio2host_init();
    7972:	4b14      	ldr	r3, [pc, #80]	; (79c4 <main+0x70>)
    7974:	4798      	blx	r3
	ReadMacAddress(); 
    7976:	4b14      	ldr	r3, [pc, #80]	; (79c8 <main+0x74>)
    7978:	4798      	blx	r3
	SystemTimerInit();
    797a:	4b14      	ldr	r3, [pc, #80]	; (79cc <main+0x78>)
    797c:	4798      	blx	r3
    DemoOutput_Greeting();
    797e:	4b14      	ldr	r3, [pc, #80]	; (79d0 <main+0x7c>)
    7980:	4798      	blx	r3
	nvm_init(INT_FLASH);
    7982:	2000      	movs	r0, #0
    7984:	4b13      	ldr	r3, [pc, #76]	; (79d4 <main+0x80>)
    7986:	4798      	blx	r3
	PDS_Init();
    7988:	4b13      	ldr	r3, [pc, #76]	; (79d8 <main+0x84>)
    798a:	4798      	blx	r3
	freezer_enable_state = PDS_Restore(PDS_FREEZER);
    798c:	2006      	movs	r0, #6
    798e:	4b13      	ldr	r3, [pc, #76]	; (79dc <main+0x88>)
    7990:	4798      	blx	r3
    7992:	4b13      	ldr	r3, [pc, #76]	; (79e0 <main+0x8c>)
    7994:	7018      	strb	r0, [r3, #0]
	Initialize_LoRa(freezer_enable_state);
    7996:	4b13      	ldr	r3, [pc, #76]	; (79e4 <main+0x90>)
    7998:	4798      	blx	r3
	Stack_Init();
    799a:	4b13      	ldr	r3, [pc, #76]	; (79e8 <main+0x94>)
    799c:	4798      	blx	r3
	PDS_Store(PDS_FREEZER);
    799e:	2006      	movs	r0, #6
    79a0:	4b12      	ldr	r3, [pc, #72]	; (79ec <main+0x98>)
    79a2:	4798      	blx	r3
		SYSTEM_RunTasks();
    79a4:	4d12      	ldr	r5, [pc, #72]	; (79f0 <main+0x9c>)
		Run_Communication();
    79a6:	4c13      	ldr	r4, [pc, #76]	; (79f4 <main+0xa0>)
		SYSTEM_RunTasks();
    79a8:	47a8      	blx	r5
		Run_Communication();
    79aa:	47a0      	blx	r4
    79ac:	e7fc      	b.n	79a8 <main+0x54>
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	00006b95 	.word	0x00006b95
    79b4:	000044d1 	.word	0x000044d1
    79b8:	0000de39 	.word	0x0000de39
    79bc:	0000de6d 	.word	0x0000de6d
    79c0:	20000008 	.word	0x20000008
    79c4:	0000c039 	.word	0x0000c039
    79c8:	00007931 	.word	0x00007931
    79cc:	0000d021 	.word	0x0000d021
    79d0:	00007421 	.word	0x00007421
    79d4:	0000dd1d 	.word	0x0000dd1d
    79d8:	0000949d 	.word	0x0000949d
    79dc:	00009265 	.word	0x00009265
    79e0:	200002a4 	.word	0x200002a4
    79e4:	00007a29 	.word	0x00007a29
    79e8:	0000d659 	.word	0x0000d659
    79ec:	0000933d 	.word	0x0000933d
    79f0:	0000d669 	.word	0x0000d669
    79f4:	00007c19 	.word	0x00007c19

000079f8 <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    79f8:	b510      	push	{r4, lr}
    79fa:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    79fc:	0001      	movs	r1, r0
    79fe:	4806      	ldr	r0, [pc, #24]	; (7a18 <Connection_Confirm+0x20>)
    7a00:	4b06      	ldr	r3, [pc, #24]	; (7a1c <Connection_Confirm+0x24>)
    7a02:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    7a04:	2c00      	cmp	r4, #0
    7a06:	d001      	beq.n	7a0c <Connection_Confirm+0x14>
    7a08:	2c06      	cmp	r4, #6
    7a0a:	d104      	bne.n	7a16 <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    7a0c:	4b04      	ldr	r3, [pc, #16]	; (7a20 <Connection_Confirm+0x28>)
    7a0e:	7819      	ldrb	r1, [r3, #0]
    7a10:	4804      	ldr	r0, [pc, #16]	; (7a24 <Connection_Confirm+0x2c>)
    7a12:	4b02      	ldr	r3, [pc, #8]	; (7a1c <Connection_Confirm+0x24>)
    7a14:	4798      	blx	r3
		//DumpConnection(0xFF) ;
#endif // #if defined (ENABLE_CONSOLE)

	}
}
    7a16:	bd10      	pop	{r4, pc}
    7a18:	00018218 	.word	0x00018218
    7a1c:	00016cb1 	.word	0x00016cb1
    7a20:	20000019 	.word	0x20000019
    7a24:	00018238 	.word	0x00018238

00007a28 <Initialize_LoRa>:

bool Initialize_LoRa(bool freezer_enable)
{
    7a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a2a:	b085      	sub	sp, #20
    7a2c:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    7a2e:	485c      	ldr	r0, [pc, #368]	; (7ba0 <Initialize_LoRa+0x178>)
    7a30:	4b5c      	ldr	r3, [pc, #368]	; (7ba4 <Initialize_LoRa+0x17c>)
    7a32:	4798      	blx	r3
	
	if (freezer_enable)
    7a34:	2c00      	cmp	r4, #0
    7a36:	d034      	beq.n	7aa2 <Initialize_LoRa+0x7a>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7a38:	2100      	movs	r1, #0
    7a3a:	2000      	movs	r0, #0
    7a3c:	4b5a      	ldr	r3, [pc, #360]	; (7ba8 <Initialize_LoRa+0x180>)
    7a3e:	4798      	blx	r3
		srand(PHY_RandomReq());
    7a40:	4b5a      	ldr	r3, [pc, #360]	; (7bac <Initialize_LoRa+0x184>)
    7a42:	4798      	blx	r3
    7a44:	4b5a      	ldr	r3, [pc, #360]	; (7bb0 <Initialize_LoRa+0x188>)
    7a46:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7a48:	2200      	movs	r2, #0
    7a4a:	2300      	movs	r3, #0
    7a4c:	9202      	str	r2, [sp, #8]
    7a4e:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a50:	4e58      	ldr	r6, [pc, #352]	; (7bb4 <Initialize_LoRa+0x18c>)
    7a52:	3208      	adds	r2, #8
    7a54:	0031      	movs	r1, r6
    7a56:	a802      	add	r0, sp, #8
    7a58:	4d57      	ldr	r5, [pc, #348]	; (7bb8 <Initialize_LoRa+0x190>)
    7a5a:	47a8      	blx	r5
    7a5c:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7a5e:	2201      	movs	r2, #1
    7a60:	4252      	negs	r2, r2
    7a62:	17d3      	asrs	r3, r2, #31
    7a64:	9202      	str	r2, [sp, #8]
    7a66:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a68:	3209      	adds	r2, #9
    7a6a:	0031      	movs	r1, r6
    7a6c:	a802      	add	r0, sp, #8
    7a6e:	47a8      	blx	r5
    7a70:	2800      	cmp	r0, #0
    7a72:	d001      	beq.n	7a78 <Initialize_LoRa+0x50>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    7a74:	2c00      	cmp	r4, #0
    7a76:	d108      	bne.n	7a8a <Initialize_LoRa+0x62>
    7a78:	4c4e      	ldr	r4, [pc, #312]	; (7bb4 <Initialize_LoRa+0x18c>)
    7a7a:	0026      	movs	r6, r4
    7a7c:	3608      	adds	r6, #8
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
    7a7e:	4d4f      	ldr	r5, [pc, #316]	; (7bbc <Initialize_LoRa+0x194>)
    7a80:	47a8      	blx	r5
    7a82:	7020      	strb	r0, [r4, #0]
    7a84:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7a86:	42b4      	cmp	r4, r6
    7a88:	d1fa      	bne.n	7a80 <Initialize_LoRa+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7a8a:	484a      	ldr	r0, [pc, #296]	; (7bb4 <Initialize_LoRa+0x18c>)
    7a8c:	4b4c      	ldr	r3, [pc, #304]	; (7bc0 <Initialize_LoRa+0x198>)
    7a8e:	4798      	blx	r3
        // Turn on LED 1 to indicate connection established
		LED_On(LED1); 
    printf("\n Satt opp nettverk \r\n");
	}
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId);
    7a90:	484c      	ldr	r0, [pc, #304]	; (7bc4 <Initialize_LoRa+0x19c>)
    7a92:	4b4d      	ldr	r3, [pc, #308]	; (7bc8 <Initialize_LoRa+0x1a0>)
    7a94:	4798      	blx	r3
	printf("\n Kjort freezer \r\n");
    7a96:	484d      	ldr	r0, [pc, #308]	; (7bcc <Initialize_LoRa+0x1a4>)
    7a98:	4b4d      	ldr	r3, [pc, #308]	; (7bd0 <Initialize_LoRa+0x1a8>)
    7a9a:	4798      	blx	r3
	
	return true;
}
    7a9c:	2001      	movs	r0, #1
    7a9e:	b005      	add	sp, #20
    7aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    7aa2:	2280      	movs	r2, #128	; 0x80
    7aa4:	0312      	lsls	r2, r2, #12
    7aa6:	4b4b      	ldr	r3, [pc, #300]	; (7bd4 <Initialize_LoRa+0x1ac>)
    7aa8:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    7aaa:	2100      	movs	r1, #0
    7aac:	2000      	movs	r0, #0
    7aae:	4b3e      	ldr	r3, [pc, #248]	; (7ba8 <Initialize_LoRa+0x180>)
    7ab0:	4798      	blx	r3
		uint8_t txPower = 0x01 ; // 1 dBm
    7ab2:	ac01      	add	r4, sp, #4
    7ab4:	2301      	movs	r3, #1
    7ab6:	7023      	strb	r3, [r4, #0]
		PHY_SetTxPower(txPower) ;
    7ab8:	2001      	movs	r0, #1
    7aba:	4b47      	ldr	r3, [pc, #284]	; (7bd8 <Initialize_LoRa+0x1b0>)
    7abc:	4798      	blx	r3
		txPower = 255 ;
    7abe:	27ff      	movs	r7, #255	; 0xff
    7ac0:	7027      	strb	r7, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    7ac2:	0021      	movs	r1, r4
    7ac4:	2004      	movs	r0, #4
    7ac6:	4e45      	ldr	r6, [pc, #276]	; (7bdc <Initialize_LoRa+0x1b4>)
    7ac8:	47b0      	blx	r6
		printf("\nCurrent Tx output power: %d\r\n", txPower) ;
    7aca:	7821      	ldrb	r1, [r4, #0]
    7acc:	4844      	ldr	r0, [pc, #272]	; (7be0 <Initialize_LoRa+0x1b8>)
    7ace:	4c45      	ldr	r4, [pc, #276]	; (7be4 <Initialize_LoRa+0x1bc>)
    7ad0:	47a0      	blx	r4
		uint8_t paBoost = 255 ;
    7ad2:	466b      	mov	r3, sp
    7ad4:	1d5d      	adds	r5, r3, #5
    7ad6:	715f      	strb	r7, [r3, #5]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    7ad8:	0029      	movs	r1, r5
    7ada:	2008      	movs	r0, #8
    7adc:	47b0      	blx	r6
		printf("PA BOOST status: %d\r\n", paBoost) ;
    7ade:	7829      	ldrb	r1, [r5, #0]
    7ae0:	4841      	ldr	r0, [pc, #260]	; (7be8 <Initialize_LoRa+0x1c0>)
    7ae2:	47a0      	blx	r4
		RadioDataRate_t sf = SF_7 ;
    7ae4:	466b      	mov	r3, sp
    7ae6:	1d9d      	adds	r5, r3, #6
    7ae8:	2307      	movs	r3, #7
    7aea:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    7aec:	0029      	movs	r1, r5
    7aee:	2016      	movs	r0, #22
    7af0:	4e3e      	ldr	r6, [pc, #248]	; (7bec <Initialize_LoRa+0x1c4>)
    7af2:	47b0      	blx	r6
		printf("Current SF: SF%d\r\n", sf) ;
    7af4:	7829      	ldrb	r1, [r5, #0]
    7af6:	483e      	ldr	r0, [pc, #248]	; (7bf0 <Initialize_LoRa+0x1c8>)
    7af8:	47a0      	blx	r4
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7afa:	466b      	mov	r3, sp
    7afc:	1ddd      	adds	r5, r3, #7
    7afe:	0029      	movs	r1, r5
    7b00:	2007      	movs	r0, #7
    7b02:	47b0      	blx	r6
		printf("Current BW (125kHz=7, 250kHz=8, 500kHz=9): %d\r\n", bw) ;
    7b04:	7829      	ldrb	r1, [r5, #0]
    7b06:	483b      	ldr	r0, [pc, #236]	; (7bf4 <Initialize_LoRa+0x1cc>)
    7b08:	47a0      	blx	r4
		srand(PHY_RandomReq());
    7b0a:	4b28      	ldr	r3, [pc, #160]	; (7bac <Initialize_LoRa+0x184>)
    7b0c:	4798      	blx	r3
    7b0e:	4b28      	ldr	r3, [pc, #160]	; (7bb0 <Initialize_LoRa+0x188>)
    7b10:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7b12:	2200      	movs	r2, #0
    7b14:	2300      	movs	r3, #0
    7b16:	9202      	str	r2, [sp, #8]
    7b18:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7b1a:	4e26      	ldr	r6, [pc, #152]	; (7bb4 <Initialize_LoRa+0x18c>)
    7b1c:	3208      	adds	r2, #8
    7b1e:	0031      	movs	r1, r6
    7b20:	a802      	add	r0, sp, #8
    7b22:	4d25      	ldr	r5, [pc, #148]	; (7bb8 <Initialize_LoRa+0x190>)
    7b24:	47a8      	blx	r5
    7b26:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7b28:	2201      	movs	r2, #1
    7b2a:	4252      	negs	r2, r2
    7b2c:	17d3      	asrs	r3, r2, #31
    7b2e:	9202      	str	r2, [sp, #8]
    7b30:	9303      	str	r3, [sp, #12]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7b32:	3209      	adds	r2, #9
    7b34:	0031      	movs	r1, r6
    7b36:	a802      	add	r0, sp, #8
    7b38:	47a8      	blx	r5
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d021      	beq.n	7b82 <Initialize_LoRa+0x15a>
		if (invalidIEEEAddrFlag)
    7b3e:	2c00      	cmp	r4, #0
    7b40:	d01f      	beq.n	7b82 <Initialize_LoRa+0x15a>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7b42:	481c      	ldr	r0, [pc, #112]	; (7bb4 <Initialize_LoRa+0x18c>)
    7b44:	4b1e      	ldr	r3, [pc, #120]	; (7bc0 <Initialize_LoRa+0x198>)
    7b46:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7b48:	2000      	movs	r0, #0
    7b4a:	4b2b      	ldr	r3, [pc, #172]	; (7bf8 <Initialize_LoRa+0x1d0>)
    7b4c:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7b4e:	492b      	ldr	r1, [pc, #172]	; (7bfc <Initialize_LoRa+0x1d4>)
    7b50:	2000      	movs	r0, #0
    7b52:	4b2b      	ldr	r3, [pc, #172]	; (7c00 <Initialize_LoRa+0x1d8>)
    7b54:	4798      	blx	r3
    7b56:	2800      	cmp	r0, #0
    7b58:	d01d      	beq.n	7b96 <Initialize_LoRa+0x16e>
		MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7b5a:	4b28      	ldr	r3, [pc, #160]	; (7bfc <Initialize_LoRa+0x1d4>)
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	2201      	movs	r2, #1
    7b60:	409a      	lsls	r2, r3
    7b62:	4b28      	ldr	r3, [pc, #160]	; (7c04 <Initialize_LoRa+0x1dc>)
    7b64:	210a      	movs	r1, #10
    7b66:	2000      	movs	r0, #0
    7b68:	4c27      	ldr	r4, [pc, #156]	; (7c08 <Initialize_LoRa+0x1e0>)
    7b6a:	47a0      	blx	r4
		DumpConnection(0xFF);
    7b6c:	20ff      	movs	r0, #255	; 0xff
    7b6e:	4b27      	ldr	r3, [pc, #156]	; (7c0c <Initialize_LoRa+0x1e4>)
    7b70:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7b72:	2280      	movs	r2, #128	; 0x80
    7b74:	02d2      	lsls	r2, r2, #11
    7b76:	4b17      	ldr	r3, [pc, #92]	; (7bd4 <Initialize_LoRa+0x1ac>)
    7b78:	615a      	str	r2, [r3, #20]
    printf("\n Satt opp nettverk \r\n");
    7b7a:	4825      	ldr	r0, [pc, #148]	; (7c10 <Initialize_LoRa+0x1e8>)
    7b7c:	4b14      	ldr	r3, [pc, #80]	; (7bd0 <Initialize_LoRa+0x1a8>)
    7b7e:	4798      	blx	r3
    7b80:	e786      	b.n	7a90 <Initialize_LoRa+0x68>
    7b82:	4c0c      	ldr	r4, [pc, #48]	; (7bb4 <Initialize_LoRa+0x18c>)
    7b84:	0026      	movs	r6, r4
    7b86:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7b88:	4d0c      	ldr	r5, [pc, #48]	; (7bbc <Initialize_LoRa+0x194>)
    7b8a:	47a8      	blx	r5
    7b8c:	7020      	strb	r0, [r4, #0]
    7b8e:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7b90:	42b4      	cmp	r4, r6
    7b92:	d1fa      	bne.n	7b8a <Initialize_LoRa+0x162>
    7b94:	e7d5      	b.n	7b42 <Initialize_LoRa+0x11a>
			DemoOutput_ChannelError(myChannel);
    7b96:	4b19      	ldr	r3, [pc, #100]	; (7bfc <Initialize_LoRa+0x1d4>)
    7b98:	7818      	ldrb	r0, [r3, #0]
    7b9a:	4b1e      	ldr	r3, [pc, #120]	; (7c14 <Initialize_LoRa+0x1ec>)
    7b9c:	4798      	blx	r3
    7b9e:	e7dc      	b.n	7b5a <Initialize_LoRa+0x132>
    7ba0:	000078d5 	.word	0x000078d5
    7ba4:	0000b33d 	.word	0x0000b33d
    7ba8:	0000ae51 	.word	0x0000ae51
    7bac:	0000aa49 	.word	0x0000aa49
    7bb0:	00016de1 	.word	0x00016de1
    7bb4:	2000001c 	.word	0x2000001c
    7bb8:	000166d9 	.word	0x000166d9
    7bbc:	00016e3d 	.word	0x00016e3d
    7bc0:	0000aa6d 	.word	0x0000aa6d
    7bc4:	20000104 	.word	0x20000104
    7bc8:	0000d089 	.word	0x0000d089
    7bcc:	00018300 	.word	0x00018300
    7bd0:	00016dcd 	.word	0x00016dcd
    7bd4:	40002800 	.word	0x40002800
    7bd8:	0000a8fd 	.word	0x0000a8fd
    7bdc:	0000e175 	.word	0x0000e175
    7be0:	0001826c 	.word	0x0001826c
    7be4:	00016cb1 	.word	0x00016cb1
    7be8:	0001828c 	.word	0x0001828c
    7bec:	0000a945 	.word	0x0000a945
    7bf0:	000182a4 	.word	0x000182a4
    7bf4:	000182b8 	.word	0x000182b8
    7bf8:	0000b30d 	.word	0x0000b30d
    7bfc:	20000015 	.word	0x20000015
    7c00:	0000ae21 	.word	0x0000ae21
    7c04:	000079f9 	.word	0x000079f9
    7c08:	0000af99 	.word	0x0000af99
    7c0c:	0000b039 	.word	0x0000b039
    7c10:	000182e8 	.word	0x000182e8
    7c14:	00007579 	.word	0x00007579

00007c18 <Run_Communication>:

void Run_Communication(void)
{
    7c18:	b510      	push	{r4, lr}
    P2PTasks();
    7c1a:	4b04      	ldr	r3, [pc, #16]	; (7c2c <Run_Communication+0x14>)
    7c1c:	4798      	blx	r3
	
	// Read buffer for received UART message
	usart_read_buffer_job(&UART_IO, (uint8_t*)rx_buffer_IO, AUTOPAX_UART_RX_BUFFER_LENGTH);
    7c1e:	2201      	movs	r2, #1
    7c20:	4903      	ldr	r1, [pc, #12]	; (7c30 <Run_Communication+0x18>)
    7c22:	4804      	ldr	r0, [pc, #16]	; (7c34 <Run_Communication+0x1c>)
    7c24:	4b04      	ldr	r3, [pc, #16]	; (7c38 <Run_Communication+0x20>)
    7c26:	4798      	blx	r3
    7c28:	bd10      	pop	{r4, pc}
    7c2a:	46c0      	nop			; (mov r8, r8)
    7c2c:	0000b4b1 	.word	0x0000b4b1
    7c30:	20001f9c 	.word	0x20001f9c
    7c34:	20001f68 	.word	0x20001f68
    7c38:	0000627d 	.word	0x0000627d

00007c3c <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c3e:	46c6      	mov	lr, r8
    7c40:	b500      	push	{lr}
    7c42:	b084      	sub	sp, #16
    7c44:	0014      	movs	r4, r2
    7c46:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7c48:	4b29      	ldr	r3, [pc, #164]	; (7cf0 <CompareData+0xb4>)
    7c4a:	18cb      	adds	r3, r1, r3
    7c4c:	0340      	lsls	r0, r0, #13
    7c4e:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7c50:	2f00      	cmp	r7, #0
    7c52:	d01a      	beq.n	7c8a <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    7c54:	4b27      	ldr	r3, [pc, #156]	; (7cf4 <CompareData+0xb8>)
    7c56:	1e5a      	subs	r2, r3, #1
    7c58:	4295      	cmp	r5, r2
    7c5a:	d81c      	bhi.n	7c96 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c5c:	197a      	adds	r2, r7, r5
    7c5e:	4293      	cmp	r3, r2
    7c60:	d31f      	bcc.n	7ca2 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c62:	19c9      	adds	r1, r1, r7
    7c64:	2380      	movs	r3, #128	; 0x80
    7c66:	019b      	lsls	r3, r3, #6
    7c68:	4299      	cmp	r1, r3
    7c6a:	d820      	bhi.n	7cae <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7c6c:	4b22      	ldr	r3, [pc, #136]	; (7cf8 <CompareData+0xbc>)
    7c6e:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7c70:	1c3e      	adds	r6, r7, #0
    7c72:	2f10      	cmp	r7, #16
    7c74:	d900      	bls.n	7c78 <CompareData+0x3c>
    7c76:	2610      	movs	r6, #16
    7c78:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7c7a:	0032      	movs	r2, r6
    7c7c:	0029      	movs	r1, r5
    7c7e:	4668      	mov	r0, sp
    7c80:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7c82:	2e00      	cmp	r6, #0
    7c84:	d028      	beq.n	7cd8 <CompareData+0x9c>
    7c86:	2300      	movs	r3, #0
    7c88:	e01f      	b.n	7cca <CompareData+0x8e>
  assert(numberOfBytes);
    7c8a:	4b1c      	ldr	r3, [pc, #112]	; (7cfc <CompareData+0xc0>)
    7c8c:	4a1c      	ldr	r2, [pc, #112]	; (7d00 <CompareData+0xc4>)
    7c8e:	21d9      	movs	r1, #217	; 0xd9
    7c90:	481c      	ldr	r0, [pc, #112]	; (7d04 <CompareData+0xc8>)
    7c92:	4c1d      	ldr	r4, [pc, #116]	; (7d08 <CompareData+0xcc>)
    7c94:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7c96:	4b1d      	ldr	r3, [pc, #116]	; (7d0c <CompareData+0xd0>)
    7c98:	4a19      	ldr	r2, [pc, #100]	; (7d00 <CompareData+0xc4>)
    7c9a:	21da      	movs	r1, #218	; 0xda
    7c9c:	4819      	ldr	r0, [pc, #100]	; (7d04 <CompareData+0xc8>)
    7c9e:	4c1a      	ldr	r4, [pc, #104]	; (7d08 <CompareData+0xcc>)
    7ca0:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7ca2:	4b1b      	ldr	r3, [pc, #108]	; (7d10 <CompareData+0xd4>)
    7ca4:	4a16      	ldr	r2, [pc, #88]	; (7d00 <CompareData+0xc4>)
    7ca6:	21db      	movs	r1, #219	; 0xdb
    7ca8:	4816      	ldr	r0, [pc, #88]	; (7d04 <CompareData+0xc8>)
    7caa:	4c17      	ldr	r4, [pc, #92]	; (7d08 <CompareData+0xcc>)
    7cac:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7cae:	4b19      	ldr	r3, [pc, #100]	; (7d14 <CompareData+0xd8>)
    7cb0:	4a13      	ldr	r2, [pc, #76]	; (7d00 <CompareData+0xc4>)
    7cb2:	21dc      	movs	r1, #220	; 0xdc
    7cb4:	4813      	ldr	r0, [pc, #76]	; (7d04 <CompareData+0xc8>)
    7cb6:	4c14      	ldr	r4, [pc, #80]	; (7d08 <CompareData+0xcc>)
    7cb8:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7cba:	21ff      	movs	r1, #255	; 0xff
    7cbc:	4291      	cmp	r1, r2
    7cbe:	d112      	bne.n	7ce6 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7cc0:	3301      	adds	r3, #1
    7cc2:	b2db      	uxtb	r3, r3
    7cc4:	b29a      	uxth	r2, r3
    7cc6:	4296      	cmp	r6, r2
    7cc8:	d906      	bls.n	7cd8 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7cca:	466a      	mov	r2, sp
    7ccc:	5cd2      	ldrb	r2, [r2, r3]
    7cce:	2c00      	cmp	r4, #0
    7cd0:	d0f3      	beq.n	7cba <CompareData+0x7e>
    7cd2:	7821      	ldrb	r1, [r4, #0]
    7cd4:	3401      	adds	r4, #1
    7cd6:	e7f1      	b.n	7cbc <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7cd8:	1bbf      	subs	r7, r7, r6
    7cda:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7cdc:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7cde:	2f00      	cmp	r7, #0
    7ce0:	d1c6      	bne.n	7c70 <CompareData+0x34>
  }

  return true;
    7ce2:	2001      	movs	r0, #1
    7ce4:	e000      	b.n	7ce8 <CompareData+0xac>
        return false;
    7ce6:	2000      	movs	r0, #0
}
    7ce8:	b004      	add	sp, #16
    7cea:	bc04      	pop	{r2}
    7cec:	4690      	mov	r8, r2
    7cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cf0:	00000400 	.word	0x00000400
    7cf4:	00004400 	.word	0x00004400
    7cf8:	000166f7 	.word	0x000166f7
    7cfc:	00018314 	.word	0x00018314
    7d00:	0001849c 	.word	0x0001849c
    7d04:	00018324 	.word	0x00018324
    7d08:	00016635 	.word	0x00016635
    7d0c:	00018368 	.word	0x00018368
    7d10:	00018384 	.word	0x00018384
    7d14:	000183b8 	.word	0x000183b8

00007d18 <D_Nv_Init>:
{
    7d18:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    7d1a:	4a0b      	ldr	r2, [pc, #44]	; (7d48 <D_Nv_Init+0x30>)
    7d1c:	23ff      	movs	r3, #255	; 0xff
    7d1e:	421a      	tst	r2, r3
    7d20:	d106      	bne.n	7d30 <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    7d22:	4b0a      	ldr	r3, [pc, #40]	; (7d4c <D_Nv_Init+0x34>)
    7d24:	490a      	ldr	r1, [pc, #40]	; (7d50 <D_Nv_Init+0x38>)
    7d26:	468c      	mov	ip, r1
    7d28:	4463      	add	r3, ip
    7d2a:	4293      	cmp	r3, r2
    7d2c:	d106      	bne.n	7d3c <D_Nv_Init+0x24>
}
    7d2e:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    7d30:	4b08      	ldr	r3, [pc, #32]	; (7d54 <D_Nv_Init+0x3c>)
    7d32:	4a09      	ldr	r2, [pc, #36]	; (7d58 <D_Nv_Init+0x40>)
    7d34:	2159      	movs	r1, #89	; 0x59
    7d36:	4809      	ldr	r0, [pc, #36]	; (7d5c <D_Nv_Init+0x44>)
    7d38:	4c09      	ldr	r4, [pc, #36]	; (7d60 <D_Nv_Init+0x48>)
    7d3a:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    7d3c:	4b09      	ldr	r3, [pc, #36]	; (7d64 <D_Nv_Init+0x4c>)
    7d3e:	4a06      	ldr	r2, [pc, #24]	; (7d58 <D_Nv_Init+0x40>)
    7d40:	215d      	movs	r1, #93	; 0x5d
    7d42:	4806      	ldr	r0, [pc, #24]	; (7d5c <D_Nv_Init+0x44>)
    7d44:	4c06      	ldr	r4, [pc, #24]	; (7d60 <D_Nv_Init+0x48>)
    7d46:	47a0      	blx	r4
    7d48:	00000400 	.word	0x00000400
    7d4c:	00004400 	.word	0x00004400
    7d50:	ffffc000 	.word	0xffffc000
    7d54:	000183e8 	.word	0x000183e8
    7d58:	00018458 	.word	0x00018458
    7d5c:	00018324 	.word	0x00018324
    7d60:	00016635 	.word	0x00016635
    7d64:	00018418 	.word	0x00018418

00007d68 <D_Nv_Read_Impl>:
{
    7d68:	b570      	push	{r4, r5, r6, lr}
    7d6a:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7d6c:	0344      	lsls	r4, r0, #13
    7d6e:	4813      	ldr	r0, [pc, #76]	; (7dbc <D_Nv_Read_Impl+0x54>)
    7d70:	1808      	adds	r0, r1, r0
    7d72:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    7d74:	4a12      	ldr	r2, [pc, #72]	; (7dc0 <D_Nv_Read_Impl+0x58>)
    7d76:	1e50      	subs	r0, r2, #1
    7d78:	4284      	cmp	r4, r0
    7d7a:	d80d      	bhi.n	7d98 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d7c:	18e0      	adds	r0, r4, r3
    7d7e:	4282      	cmp	r2, r0
    7d80:	d310      	bcc.n	7da4 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d82:	18c9      	adds	r1, r1, r3
    7d84:	2280      	movs	r2, #128	; 0x80
    7d86:	0192      	lsls	r2, r2, #6
    7d88:	4291      	cmp	r1, r2
    7d8a:	d811      	bhi.n	7db0 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7d8c:	001a      	movs	r2, r3
    7d8e:	0021      	movs	r1, r4
    7d90:	0028      	movs	r0, r5
    7d92:	4b0c      	ldr	r3, [pc, #48]	; (7dc4 <D_Nv_Read_Impl+0x5c>)
    7d94:	4798      	blx	r3
}
    7d96:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7d98:	4b0b      	ldr	r3, [pc, #44]	; (7dc8 <D_Nv_Read_Impl+0x60>)
    7d9a:	4a0c      	ldr	r2, [pc, #48]	; (7dcc <D_Nv_Read_Impl+0x64>)
    7d9c:	2172      	movs	r1, #114	; 0x72
    7d9e:	480c      	ldr	r0, [pc, #48]	; (7dd0 <D_Nv_Read_Impl+0x68>)
    7da0:	4c0c      	ldr	r4, [pc, #48]	; (7dd4 <D_Nv_Read_Impl+0x6c>)
    7da2:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7da4:	4b0c      	ldr	r3, [pc, #48]	; (7dd8 <D_Nv_Read_Impl+0x70>)
    7da6:	4a09      	ldr	r2, [pc, #36]	; (7dcc <D_Nv_Read_Impl+0x64>)
    7da8:	2173      	movs	r1, #115	; 0x73
    7daa:	4809      	ldr	r0, [pc, #36]	; (7dd0 <D_Nv_Read_Impl+0x68>)
    7dac:	4c09      	ldr	r4, [pc, #36]	; (7dd4 <D_Nv_Read_Impl+0x6c>)
    7dae:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7db0:	4b0a      	ldr	r3, [pc, #40]	; (7ddc <D_Nv_Read_Impl+0x74>)
    7db2:	4a06      	ldr	r2, [pc, #24]	; (7dcc <D_Nv_Read_Impl+0x64>)
    7db4:	2174      	movs	r1, #116	; 0x74
    7db6:	4806      	ldr	r0, [pc, #24]	; (7dd0 <D_Nv_Read_Impl+0x68>)
    7db8:	4c06      	ldr	r4, [pc, #24]	; (7dd4 <D_Nv_Read_Impl+0x6c>)
    7dba:	47a0      	blx	r4
    7dbc:	00000400 	.word	0x00000400
    7dc0:	00004400 	.word	0x00004400
    7dc4:	000166f7 	.word	0x000166f7
    7dc8:	00018368 	.word	0x00018368
    7dcc:	00018464 	.word	0x00018464
    7dd0:	00018324 	.word	0x00018324
    7dd4:	00016635 	.word	0x00016635
    7dd8:	00018384 	.word	0x00018384
    7ddc:	000183b8 	.word	0x000183b8

00007de0 <D_Nv_Write_Impl>:
{
    7de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7de2:	46de      	mov	lr, fp
    7de4:	4657      	mov	r7, sl
    7de6:	464e      	mov	r6, r9
    7de8:	4645      	mov	r5, r8
    7dea:	b5e0      	push	{r5, r6, r7, lr}
    7dec:	b093      	sub	sp, #76	; 0x4c
    7dee:	9201      	str	r2, [sp, #4]
    7df0:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7df2:	4c46      	ldr	r4, [pc, #280]	; (7f0c <D_Nv_Write_Impl+0x12c>)
    7df4:	190c      	adds	r4, r1, r4
    7df6:	0340      	lsls	r0, r0, #13
    7df8:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	d047      	beq.n	7e8e <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    7dfe:	4b44      	ldr	r3, [pc, #272]	; (7f10 <D_Nv_Write_Impl+0x130>)
    7e00:	1e5a      	subs	r2, r3, #1
    7e02:	4295      	cmp	r5, r2
    7e04:	d849      	bhi.n	7e9a <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7e06:	4652      	mov	r2, sl
    7e08:	1952      	adds	r2, r2, r5
    7e0a:	4293      	cmp	r3, r2
    7e0c:	d34b      	bcc.n	7ea6 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7e0e:	46d3      	mov	fp, sl
    7e10:	4451      	add	r1, sl
    7e12:	2380      	movs	r3, #128	; 0x80
    7e14:	019b      	lsls	r3, r3, #6
    7e16:	4299      	cmp	r1, r3
    7e18:	d84b      	bhi.n	7eb2 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    7e1a:	4b3e      	ldr	r3, [pc, #248]	; (7f14 <D_Nv_Write_Impl+0x134>)
    7e1c:	681b      	ldr	r3, [r3, #0]
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d000      	beq.n	7e24 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    7e22:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    7e24:	273f      	movs	r7, #63	; 0x3f
    7e26:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    7e28:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    7e2a:	2640      	movs	r6, #64	; 0x40
    7e2c:	1bf6      	subs	r6, r6, r7
    7e2e:	455e      	cmp	r6, fp
    7e30:	dd00      	ble.n	7e34 <D_Nv_Write_Impl+0x54>
    7e32:	4656      	mov	r6, sl
    7e34:	b2b3      	uxth	r3, r6
    7e36:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7e38:	2240      	movs	r2, #64	; 0x40
    7e3a:	21ff      	movs	r1, #255	; 0xff
    7e3c:	a802      	add	r0, sp, #8
    7e3e:	4b36      	ldr	r3, [pc, #216]	; (7f18 <D_Nv_Write_Impl+0x138>)
    7e40:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7e42:	003b      	movs	r3, r7
    7e44:	aa02      	add	r2, sp, #8
    7e46:	4694      	mov	ip, r2
    7e48:	4463      	add	r3, ip
    7e4a:	9300      	str	r3, [sp, #0]
    7e4c:	0436      	lsls	r6, r6, #16
    7e4e:	0c37      	lsrs	r7, r6, #16
    7e50:	003a      	movs	r2, r7
    7e52:	9901      	ldr	r1, [sp, #4]
    7e54:	0018      	movs	r0, r3
    7e56:	4b31      	ldr	r3, [pc, #196]	; (7f1c <D_Nv_Write_Impl+0x13c>)
    7e58:	4798      	blx	r3
	cpu_irq_enter_critical();
    7e5a:	4b31      	ldr	r3, [pc, #196]	; (7f20 <D_Nv_Write_Impl+0x140>)
    7e5c:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    7e5e:	4e31      	ldr	r6, [pc, #196]	; (7f24 <D_Nv_Write_Impl+0x144>)
    7e60:	2240      	movs	r2, #64	; 0x40
    7e62:	a902      	add	r1, sp, #8
    7e64:	0020      	movs	r0, r4
    7e66:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    7e68:	2805      	cmp	r0, #5
    7e6a:	d0f9      	beq.n	7e60 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    7e6c:	4b2e      	ldr	r3, [pc, #184]	; (7f28 <D_Nv_Write_Impl+0x148>)
    7e6e:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    7e70:	4653      	mov	r3, sl
    7e72:	465a      	mov	r2, fp
    7e74:	1a9e      	subs	r6, r3, r2
    7e76:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    7e78:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    7e7a:	9b01      	ldr	r3, [sp, #4]
    7e7c:	4699      	mov	r9, r3
    7e7e:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7e80:	2e00      	cmp	r6, #0
    7e82:	d03b      	beq.n	7efc <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7e84:	4b24      	ldr	r3, [pc, #144]	; (7f18 <D_Nv_Write_Impl+0x138>)
    7e86:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7e88:	4b24      	ldr	r3, [pc, #144]	; (7f1c <D_Nv_Write_Impl+0x13c>)
    7e8a:	4698      	mov	r8, r3
    7e8c:	e031      	b.n	7ef2 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    7e8e:	4b27      	ldr	r3, [pc, #156]	; (7f2c <D_Nv_Write_Impl+0x14c>)
    7e90:	4a27      	ldr	r2, [pc, #156]	; (7f30 <D_Nv_Write_Impl+0x150>)
    7e92:	218a      	movs	r1, #138	; 0x8a
    7e94:	4827      	ldr	r0, [pc, #156]	; (7f34 <D_Nv_Write_Impl+0x154>)
    7e96:	4c28      	ldr	r4, [pc, #160]	; (7f38 <D_Nv_Write_Impl+0x158>)
    7e98:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7e9a:	4b28      	ldr	r3, [pc, #160]	; (7f3c <D_Nv_Write_Impl+0x15c>)
    7e9c:	4a24      	ldr	r2, [pc, #144]	; (7f30 <D_Nv_Write_Impl+0x150>)
    7e9e:	218b      	movs	r1, #139	; 0x8b
    7ea0:	4824      	ldr	r0, [pc, #144]	; (7f34 <D_Nv_Write_Impl+0x154>)
    7ea2:	4c25      	ldr	r4, [pc, #148]	; (7f38 <D_Nv_Write_Impl+0x158>)
    7ea4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7ea6:	4b26      	ldr	r3, [pc, #152]	; (7f40 <D_Nv_Write_Impl+0x160>)
    7ea8:	4a21      	ldr	r2, [pc, #132]	; (7f30 <D_Nv_Write_Impl+0x150>)
    7eaa:	218c      	movs	r1, #140	; 0x8c
    7eac:	4821      	ldr	r0, [pc, #132]	; (7f34 <D_Nv_Write_Impl+0x154>)
    7eae:	4c22      	ldr	r4, [pc, #136]	; (7f38 <D_Nv_Write_Impl+0x158>)
    7eb0:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7eb2:	4b24      	ldr	r3, [pc, #144]	; (7f44 <D_Nv_Write_Impl+0x164>)
    7eb4:	4a1e      	ldr	r2, [pc, #120]	; (7f30 <D_Nv_Write_Impl+0x150>)
    7eb6:	218d      	movs	r1, #141	; 0x8d
    7eb8:	481e      	ldr	r0, [pc, #120]	; (7f34 <D_Nv_Write_Impl+0x154>)
    7eba:	4c1f      	ldr	r4, [pc, #124]	; (7f38 <D_Nv_Write_Impl+0x158>)
    7ebc:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7ebe:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7ec0:	2240      	movs	r2, #64	; 0x40
    7ec2:	21ff      	movs	r1, #255	; 0xff
    7ec4:	a802      	add	r0, sp, #8
    7ec6:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7ec8:	003a      	movs	r2, r7
    7eca:	4649      	mov	r1, r9
    7ecc:	9800      	ldr	r0, [sp, #0]
    7ece:	47c0      	blx	r8
	cpu_irq_enter_critical();
    7ed0:	4b13      	ldr	r3, [pc, #76]	; (7f20 <D_Nv_Write_Impl+0x140>)
    7ed2:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    7ed4:	4d13      	ldr	r5, [pc, #76]	; (7f24 <D_Nv_Write_Impl+0x144>)
    7ed6:	2240      	movs	r2, #64	; 0x40
    7ed8:	a902      	add	r1, sp, #8
    7eda:	0020      	movs	r0, r4
    7edc:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    7ede:	2805      	cmp	r0, #5
    7ee0:	d0f9      	beq.n	7ed6 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    7ee2:	4b11      	ldr	r3, [pc, #68]	; (7f28 <D_Nv_Write_Impl+0x148>)
    7ee4:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    7ee6:	1bf6      	subs	r6, r6, r7
    7ee8:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    7eea:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    7eec:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7eee:	2e00      	cmp	r6, #0
    7ef0:	d004      	beq.n	7efc <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7ef2:	1c33      	adds	r3, r6, #0
    7ef4:	2e40      	cmp	r6, #64	; 0x40
    7ef6:	d9e2      	bls.n	7ebe <D_Nv_Write_Impl+0xde>
    7ef8:	2340      	movs	r3, #64	; 0x40
    7efa:	e7e0      	b.n	7ebe <D_Nv_Write_Impl+0xde>
}
    7efc:	b013      	add	sp, #76	; 0x4c
    7efe:	bc3c      	pop	{r2, r3, r4, r5}
    7f00:	4690      	mov	r8, r2
    7f02:	4699      	mov	r9, r3
    7f04:	46a2      	mov	sl, r4
    7f06:	46ab      	mov	fp, r5
    7f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f0a:	46c0      	nop			; (mov r8, r8)
    7f0c:	00000400 	.word	0x00000400
    7f10:	00004400 	.word	0x00004400
    7f14:	20000108 	.word	0x20000108
    7f18:	00016709 	.word	0x00016709
    7f1c:	000166f7 	.word	0x000166f7
    7f20:	00004569 	.word	0x00004569
    7f24:	00004b41 	.word	0x00004b41
    7f28:	000045a9 	.word	0x000045a9
    7f2c:	00018314 	.word	0x00018314
    7f30:	00018474 	.word	0x00018474
    7f34:	00018324 	.word	0x00018324
    7f38:	00016635 	.word	0x00016635
    7f3c:	00018368 	.word	0x00018368
    7f40:	00018384 	.word	0x00018384
    7f44:	000183b8 	.word	0x000183b8

00007f48 <D_Nv_EraseSector_Impl>:
{
    7f48:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    7f4a:	0344      	lsls	r4, r0, #13
    7f4c:	480c      	ldr	r0, [pc, #48]	; (7f80 <D_Nv_EraseSector_Impl+0x38>)
    7f4e:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    7f50:	23ff      	movs	r3, #255	; 0xff
    7f52:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    7f54:	4b0b      	ldr	r3, [pc, #44]	; (7f84 <D_Nv_EraseSector_Impl+0x3c>)
    7f56:	3b01      	subs	r3, #1
    7f58:	2280      	movs	r2, #128	; 0x80
    7f5a:	0192      	lsls	r2, r2, #6
    7f5c:	18a6      	adds	r6, r4, r2
    7f5e:	429c      	cmp	r4, r3
    7f60:	d807      	bhi.n	7f72 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    7f62:	4d09      	ldr	r5, [pc, #36]	; (7f88 <D_Nv_EraseSector_Impl+0x40>)
    7f64:	0020      	movs	r0, r4
    7f66:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    7f68:	3401      	adds	r4, #1
    7f6a:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    7f6c:	42b4      	cmp	r4, r6
    7f6e:	d1f9      	bne.n	7f64 <D_Nv_EraseSector_Impl+0x1c>
}
    7f70:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7f72:	4b06      	ldr	r3, [pc, #24]	; (7f8c <D_Nv_EraseSector_Impl+0x44>)
    7f74:	4a06      	ldr	r2, [pc, #24]	; (7f90 <D_Nv_EraseSector_Impl+0x48>)
    7f76:	21c2      	movs	r1, #194	; 0xc2
    7f78:	4806      	ldr	r0, [pc, #24]	; (7f94 <D_Nv_EraseSector_Impl+0x4c>)
    7f7a:	4c07      	ldr	r4, [pc, #28]	; (7f98 <D_Nv_EraseSector_Impl+0x50>)
    7f7c:	47a0      	blx	r4
    7f7e:	46c0      	nop			; (mov r8, r8)
    7f80:	00000400 	.word	0x00000400
    7f84:	00004400 	.word	0x00004400
    7f88:	00004c19 	.word	0x00004c19
    7f8c:	00018368 	.word	0x00018368
    7f90:	00018484 	.word	0x00018484
    7f94:	00018324 	.word	0x00018324
    7f98:	00016635 	.word	0x00016635

00007f9c <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    7f9c:	b510      	push	{r4, lr}
    7f9e:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    7fa0:	2200      	movs	r2, #0
    7fa2:	4c01      	ldr	r4, [pc, #4]	; (7fa8 <D_Nv_IsEmpty_Impl+0xc>)
    7fa4:	47a0      	blx	r4
}
    7fa6:	bd10      	pop	{r4, pc}
    7fa8:	00007c3d 	.word	0x00007c3d

00007fac <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7fac:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    7fae:	4c01      	ldr	r4, [pc, #4]	; (7fb4 <D_Nv_IsEqual_Impl+0x8>)
    7fb0:	47a0      	blx	r4
}
    7fb2:	bd10      	pop	{r4, pc}
    7fb4:	00007c3d 	.word	0x00007c3d

00007fb8 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    7fb8:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    7fba:	4b05      	ldr	r3, [pc, #20]	; (7fd0 <PowerSupplyTooLow+0x18>)
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	2b00      	cmp	r3, #0
    7fc0:	d004      	beq.n	7fcc <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    7fc2:	4798      	blx	r3
    7fc4:	2301      	movs	r3, #1
    7fc6:	4058      	eors	r0, r3
    7fc8:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    7fca:	bd10      	pop	{r4, pc}
    bool result = false;
    7fcc:	2000      	movs	r0, #0
    7fce:	e7fc      	b.n	7fca <PowerSupplyTooLow+0x12>
    7fd0:	2000027c 	.word	0x2000027c

00007fd4 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    7fd4:	2901      	cmp	r1, #1
    7fd6:	d009      	beq.n	7fec <UpdateSectorHead+0x18>
    7fd8:	2900      	cmp	r1, #0
    7fda:	d002      	beq.n	7fe2 <UpdateSectorHead+0xe>
    7fdc:	2902      	cmp	r1, #2
    7fde:	d00d      	beq.n	7ffc <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    7fe0:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    7fe2:	4b0a      	ldr	r3, [pc, #40]	; (800c <UpdateSectorHead+0x38>)
    7fe4:	881a      	ldrh	r2, [r3, #0]
    7fe6:	1880      	adds	r0, r0, r2
    7fe8:	8018      	strh	r0, [r3, #0]
           break;
    7fea:	e7f9      	b.n	7fe0 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    7fec:	4a07      	ldr	r2, [pc, #28]	; (800c <UpdateSectorHead+0x38>)
    7fee:	8813      	ldrh	r3, [r2, #0]
    7ff0:	330f      	adds	r3, #15
    7ff2:	18c0      	adds	r0, r0, r3
    7ff4:	230f      	movs	r3, #15
    7ff6:	4398      	bics	r0, r3
    7ff8:	8010      	strh	r0, [r2, #0]
           break;
    7ffa:	e7f1      	b.n	7fe0 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    7ffc:	4a03      	ldr	r2, [pc, #12]	; (800c <UpdateSectorHead+0x38>)
    7ffe:	8813      	ldrh	r3, [r2, #0]
    8000:	333f      	adds	r3, #63	; 0x3f
    8002:	18c0      	adds	r0, r0, r3
    8004:	233f      	movs	r3, #63	; 0x3f
    8006:	4398      	bics	r0, r3
    8008:	8010      	strh	r0, [r2, #0]
}
    800a:	e7e9      	b.n	7fe0 <UpdateSectorHead+0xc>
    800c:	20000282 	.word	0x20000282

00008010 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    8010:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    8012:	2900      	cmp	r1, #0
    8014:	d019      	beq.n	804a <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    8016:	24ff      	movs	r4, #255	; 0xff
    8018:	e013      	b.n	8042 <ComputeCrc+0x32>
    801a:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    801c:	0a15      	lsrs	r5, r2, #8
    801e:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    8020:	091d      	lsrs	r5, r3, #4
    8022:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8024:	0212      	lsls	r2, r2, #8
    8026:	405a      	eors	r2, r3
    8028:	031d      	lsls	r5, r3, #12
    802a:	406a      	eors	r2, r5
    802c:	015b      	lsls	r3, r3, #5
    802e:	405a      	eors	r2, r3
    8030:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    8032:	0003      	movs	r3, r0
    8034:	1e5d      	subs	r5, r3, #1
    8036:	41ab      	sbcs	r3, r5
    8038:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    803a:	3901      	subs	r1, #1
    803c:	b289      	uxth	r1, r1
    803e:	2900      	cmp	r1, #0
    8040:	d003      	beq.n	804a <ComputeCrc+0x3a>
        if (pData == NULL)
    8042:	2800      	cmp	r0, #0
    8044:	d0e9      	beq.n	801a <ComputeCrc+0xa>
            data = *pData;
    8046:	7803      	ldrb	r3, [r0, #0]
    8048:	e7e8      	b.n	801c <ComputeCrc+0xc>
    }

    return crc;
}
    804a:	0010      	movs	r0, r2
    804c:	bd30      	pop	{r4, r5, pc}
    804e:	Address 0x0000804e is out of bounds.


00008050 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    8050:	b5f0      	push	{r4, r5, r6, r7, lr}
    8052:	46de      	mov	lr, fp
    8054:	4657      	mov	r7, sl
    8056:	b580      	push	{r7, lr}
    8058:	b089      	sub	sp, #36	; 0x24
    805a:	9001      	str	r0, [sp, #4]
    805c:	9102      	str	r1, [sp, #8]
    805e:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    8060:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8062:	2a00      	cmp	r2, #0
    8064:	d00d      	beq.n	8082 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8066:	4692      	mov	sl, r2
    8068:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    806a:	445b      	add	r3, fp
    806c:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    806e:	465e      	mov	r6, fp
    8070:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    8072:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8074:	45ab      	cmp	fp, r5
    8076:	d03e      	beq.n	80f6 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8078:	4f22      	ldr	r7, [pc, #136]	; (8104 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    807a:	2c00      	cmp	r4, #0
    807c:	d108      	bne.n	8090 <GatherData+0x40>
                return false;
    807e:	2000      	movs	r0, #0
    8080:	e039      	b.n	80f6 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    8082:	2200      	movs	r2, #0
    8084:	4692      	mov	sl, r2
    8086:	e7f0      	b.n	806a <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    8088:	ab04      	add	r3, sp, #16
    808a:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    808c:	2c00      	cmp	r4, #0
    808e:	d031      	beq.n	80f4 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8090:	2310      	movs	r3, #16
    8092:	aa04      	add	r2, sp, #16
    8094:	0021      	movs	r1, r4
    8096:	9801      	ldr	r0, [sp, #4]
    8098:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    809a:	ab04      	add	r3, sp, #16
    809c:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    809e:	42aa      	cmp	r2, r5
    80a0:	d2f2      	bcs.n	8088 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    80a2:	88db      	ldrh	r3, [r3, #6]
    80a4:	18d3      	adds	r3, r2, r3
    80a6:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    80a8:	42b3      	cmp	r3, r6
    80aa:	d9ed      	bls.n	8088 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    80ac:	42ab      	cmp	r3, r5
    80ae:	d201      	bcs.n	80b4 <GatherData+0x64>
                readStart = blockEnd;
    80b0:	001e      	movs	r6, r3
    80b2:	e7e9      	b.n	8088 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    80b4:	1aa9      	subs	r1, r5, r2
    80b6:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    80b8:	42b2      	cmp	r2, r6
    80ba:	d915      	bls.n	80e8 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    80bc:	ab04      	add	r3, sp, #16
    80be:	895b      	ldrh	r3, [r3, #10]
    80c0:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    80c2:	000b      	movs	r3, r1
        readEnd -= count;
    80c4:	1aed      	subs	r5, r5, r3
    80c6:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    80c8:	4652      	mov	r2, sl
    80ca:	2a00      	cmp	r2, #0
    80cc:	d008      	beq.n	80e0 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    80ce:	3410      	adds	r4, #16
    80d0:	1909      	adds	r1, r1, r4
            pDestination -= count;
    80d2:	1ad2      	subs	r2, r2, r3
    80d4:	4692      	mov	sl, r2
            sourcePointer -= count;
    80d6:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    80d8:	b289      	uxth	r1, r1
    80da:	9801      	ldr	r0, [sp, #4]
    80dc:	4c09      	ldr	r4, [pc, #36]	; (8104 <GatherData+0xb4>)
    80de:	47a0      	blx	r4
    while ( readStart != readEnd )
    80e0:	42ae      	cmp	r6, r5
    80e2:	d00d      	beq.n	8100 <GatherData+0xb0>
    80e4:	9c03      	ldr	r4, [sp, #12]
    80e6:	e7c8      	b.n	807a <GatherData+0x2a>
            count = readEnd - readStart;
    80e8:	1bab      	subs	r3, r5, r6
    80ea:	b29b      	uxth	r3, r3
            readStart = offset;
    80ec:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    80ee:	9a02      	ldr	r2, [sp, #8]
    80f0:	9203      	str	r2, [sp, #12]
    80f2:	e7e7      	b.n	80c4 <GatherData+0x74>
                return false;
    80f4:	2000      	movs	r0, #0
}
    80f6:	b009      	add	sp, #36	; 0x24
    80f8:	bc0c      	pop	{r2, r3}
    80fa:	4692      	mov	sl, r2
    80fc:	469b      	mov	fp, r3
    80fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    8100:	2001      	movs	r0, #1
    8102:	e7f8      	b.n	80f6 <GatherData+0xa6>
    8104:	00007d69 	.word	0x00007d69

00008108 <ComputeDataCrc>:
{
    8108:	b5f0      	push	{r4, r5, r6, r7, lr}
    810a:	46de      	mov	lr, fp
    810c:	4647      	mov	r7, r8
    810e:	b580      	push	{r7, lr}
    8110:	b087      	sub	sp, #28
    8112:	9004      	str	r0, [sp, #16]
    8114:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    8116:	7995      	ldrb	r5, [r2, #6]
    8118:	79d3      	ldrb	r3, [r2, #7]
    811a:	021b      	lsls	r3, r3, #8
    811c:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    811e:	7917      	ldrb	r7, [r2, #4]
    8120:	7953      	ldrb	r3, [r2, #5]
    8122:	021b      	lsls	r3, r3, #8
    8124:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8126:	0a2c      	lsrs	r4, r5, #8
    8128:	b264      	sxtb	r4, r4
    812a:	2c00      	cmp	r4, #0
    812c:	db2f      	blt.n	818e <ComputeDataCrc+0x86>
    812e:	4b1c      	ldr	r3, [pc, #112]	; (81a0 <ComputeDataCrc+0x98>)
    8130:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8132:	4b1c      	ldr	r3, [pc, #112]	; (81a4 <ComputeDataCrc+0x9c>)
    8134:	4698      	mov	r8, r3
    8136:	e011      	b.n	815c <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8138:	2d00      	cmp	r5, #0
    813a:	d02a      	beq.n	8192 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    813c:	4b1a      	ldr	r3, [pc, #104]	; (81a8 <ComputeDataCrc+0xa0>)
    813e:	9300      	str	r3, [sp, #0]
    8140:	002b      	movs	r3, r5
    8142:	003a      	movs	r2, r7
    8144:	9905      	ldr	r1, [sp, #20]
    8146:	9804      	ldr	r0, [sp, #16]
    8148:	4e18      	ldr	r6, [pc, #96]	; (81ac <ComputeDataCrc+0xa4>)
    814a:	47b0      	blx	r6
    814c:	2800      	cmp	r0, #0
    814e:	d020      	beq.n	8192 <ComputeDataCrc+0x8a>
    8150:	0029      	movs	r1, r5
    8152:	e015      	b.n	8180 <ComputeDataCrc+0x78>
    8154:	3c01      	subs	r4, #1
    8156:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8158:	1c63      	adds	r3, r4, #1
    815a:	d01a      	beq.n	8192 <ComputeDataCrc+0x8a>
        if (i)
    815c:	2c00      	cmp	r4, #0
    815e:	d0eb      	beq.n	8138 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8160:	3d01      	subs	r5, #1
    8162:	3dff      	subs	r5, #255	; 0xff
    8164:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8166:	4b10      	ldr	r3, [pc, #64]	; (81a8 <ComputeDataCrc+0xa0>)
    8168:	9300      	str	r3, [sp, #0]
    816a:	2380      	movs	r3, #128	; 0x80
    816c:	005b      	lsls	r3, r3, #1
    816e:	003a      	movs	r2, r7
    8170:	9905      	ldr	r1, [sp, #20]
    8172:	9804      	ldr	r0, [sp, #16]
    8174:	4e0d      	ldr	r6, [pc, #52]	; (81ac <ComputeDataCrc+0xa4>)
    8176:	47b0      	blx	r6
    8178:	2800      	cmp	r0, #0
    817a:	d0eb      	beq.n	8154 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    817c:	2180      	movs	r1, #128	; 0x80
    817e:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8180:	187f      	adds	r7, r7, r1
    8182:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8184:	9a03      	ldr	r2, [sp, #12]
    8186:	4808      	ldr	r0, [pc, #32]	; (81a8 <ComputeDataCrc+0xa0>)
    8188:	47c0      	blx	r8
    818a:	9003      	str	r0, [sp, #12]
    818c:	e7e2      	b.n	8154 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    818e:	4b04      	ldr	r3, [pc, #16]	; (81a0 <ComputeDataCrc+0x98>)
    8190:	9303      	str	r3, [sp, #12]
}
    8192:	9803      	ldr	r0, [sp, #12]
    8194:	b007      	add	sp, #28
    8196:	bc0c      	pop	{r2, r3}
    8198:	4690      	mov	r8, r2
    819a:	469b      	mov	fp, r3
    819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    819e:	46c0      	nop			; (mov r8, r8)
    81a0:	0000ffff 	.word	0x0000ffff
    81a4:	00008011 	.word	0x00008011
    81a8:	2000013c 	.word	0x2000013c
    81ac:	00008051 	.word	0x00008051

000081b0 <FindItemCache>:
{
    81b0:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    81b2:	4b16      	ldr	r3, [pc, #88]	; (820c <FindItemCache+0x5c>)
    81b4:	781c      	ldrb	r4, [r3, #0]
    81b6:	2c00      	cmp	r4, #0
    81b8:	d026      	beq.n	8208 <FindItemCache+0x58>
        if ( cache->id == id )
    81ba:	4b15      	ldr	r3, [pc, #84]	; (8210 <FindItemCache+0x60>)
    81bc:	881b      	ldrh	r3, [r3, #0]
    81be:	4283      	cmp	r3, r0
    81c0:	d016      	beq.n	81f0 <FindItemCache+0x40>
    81c2:	2301      	movs	r3, #1
    81c4:	4e12      	ldr	r6, [pc, #72]	; (8210 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    81c6:	b2da      	uxtb	r2, r3
    81c8:	4294      	cmp	r4, r2
    81ca:	d91b      	bls.n	8204 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    81cc:	001d      	movs	r5, r3
        if ( cache->id == id )
    81ce:	1c59      	adds	r1, r3, #1
    81d0:	009a      	lsls	r2, r3, #2
    81d2:	5ab2      	ldrh	r2, [r6, r2]
    81d4:	4282      	cmp	r2, r0
    81d6:	d001      	beq.n	81dc <FindItemCache+0x2c>
    81d8:	000b      	movs	r3, r1
    81da:	e7f4      	b.n	81c6 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    81dc:	009b      	lsls	r3, r3, #2
    81de:	480c      	ldr	r0, [pc, #48]	; (8210 <FindItemCache+0x60>)
    81e0:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    81e2:	00ad      	lsls	r5, r5, #2
    81e4:	4b0a      	ldr	r3, [pc, #40]	; (8210 <FindItemCache+0x60>)
    81e6:	195d      	adds	r5, r3, r5
    81e8:	886b      	ldrh	r3, [r5, #2]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d003      	beq.n	81f6 <FindItemCache+0x46>
}
    81ee:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    81f0:	4807      	ldr	r0, [pc, #28]	; (8210 <FindItemCache+0x60>)
    81f2:	2500      	movs	r5, #0
    81f4:	e7f5      	b.n	81e2 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    81f6:	4b07      	ldr	r3, [pc, #28]	; (8214 <FindItemCache+0x64>)
    81f8:	4a07      	ldr	r2, [pc, #28]	; (8218 <FindItemCache+0x68>)
    81fa:	218c      	movs	r1, #140	; 0x8c
    81fc:	31ff      	adds	r1, #255	; 0xff
    81fe:	4807      	ldr	r0, [pc, #28]	; (821c <FindItemCache+0x6c>)
    8200:	4c07      	ldr	r4, [pc, #28]	; (8220 <FindItemCache+0x70>)
    8202:	47a0      	blx	r4
    return NULL;
    8204:	2000      	movs	r0, #0
    8206:	e7f2      	b.n	81ee <FindItemCache+0x3e>
    8208:	2000      	movs	r0, #0
    820a:	e7f0      	b.n	81ee <FindItemCache+0x3e>
    820c:	20000278 	.word	0x20000278
    8210:	20000258 	.word	0x20000258
    8214:	00018518 	.word	0x00018518
    8218:	00018604 	.word	0x00018604
    821c:	00018534 	.word	0x00018534
    8220:	00016635 	.word	0x00016635

00008224 <FindItem>:
{
    8224:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8226:	4b05      	ldr	r3, [pc, #20]	; (823c <FindItem+0x18>)
    8228:	4798      	blx	r3
    if (cache)
    822a:	2800      	cmp	r0, #0
    822c:	d004      	beq.n	8238 <FindItem+0x14>
        return cache->lastBlock;
    822e:	7883      	ldrb	r3, [r0, #2]
    8230:	78c0      	ldrb	r0, [r0, #3]
    8232:	0200      	lsls	r0, r0, #8
    8234:	4318      	orrs	r0, r3
}
    8236:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8238:	2000      	movs	r0, #0
    823a:	e7fc      	b.n	8236 <FindItem+0x12>
    823c:	000081b1 	.word	0x000081b1

00008240 <CreateItemCache>:
{
    8240:	b510      	push	{r4, lr}
    8242:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8244:	4b0e      	ldr	r3, [pc, #56]	; (8280 <CreateItemCache+0x40>)
    8246:	4798      	blx	r3
    8248:	2800      	cmp	r0, #0
    824a:	d10b      	bne.n	8264 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    824c:	4b0d      	ldr	r3, [pc, #52]	; (8284 <CreateItemCache+0x44>)
    824e:	781b      	ldrb	r3, [r3, #0]
    8250:	2b07      	cmp	r3, #7
    8252:	d80e      	bhi.n	8272 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8254:	1c59      	adds	r1, r3, #1
    8256:	4a0b      	ldr	r2, [pc, #44]	; (8284 <CreateItemCache+0x44>)
    8258:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    825a:	480b      	ldr	r0, [pc, #44]	; (8288 <CreateItemCache+0x48>)
    825c:	009b      	lsls	r3, r3, #2
    825e:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8260:	18c0      	adds	r0, r0, r3
}
    8262:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8264:	4b09      	ldr	r3, [pc, #36]	; (828c <CreateItemCache+0x4c>)
    8266:	4a0a      	ldr	r2, [pc, #40]	; (8290 <CreateItemCache+0x50>)
    8268:	21cc      	movs	r1, #204	; 0xcc
    826a:	0049      	lsls	r1, r1, #1
    826c:	4809      	ldr	r0, [pc, #36]	; (8294 <CreateItemCache+0x54>)
    826e:	4c0a      	ldr	r4, [pc, #40]	; (8298 <CreateItemCache+0x58>)
    8270:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8272:	4b0a      	ldr	r3, [pc, #40]	; (829c <CreateItemCache+0x5c>)
    8274:	4a06      	ldr	r2, [pc, #24]	; (8290 <CreateItemCache+0x50>)
    8276:	219a      	movs	r1, #154	; 0x9a
    8278:	31ff      	adds	r1, #255	; 0xff
    827a:	4806      	ldr	r0, [pc, #24]	; (8294 <CreateItemCache+0x54>)
    827c:	4c06      	ldr	r4, [pc, #24]	; (8298 <CreateItemCache+0x58>)
    827e:	47a0      	blx	r4
    8280:	000081b1 	.word	0x000081b1
    8284:	20000278 	.word	0x20000278
    8288:	20000258 	.word	0x20000258
    828c:	000184c0 	.word	0x000184c0
    8290:	00018614 	.word	0x00018614
    8294:	00018534 	.word	0x00018534
    8298:	00016635 	.word	0x00016635
    829c:	000184dc 	.word	0x000184dc

000082a0 <DeleteItemCache>:
{
    82a0:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    82a2:	4b0b      	ldr	r3, [pc, #44]	; (82d0 <DeleteItemCache+0x30>)
    82a4:	4798      	blx	r3
    82a6:	2800      	cmp	r0, #0
    82a8:	d00b      	beq.n	82c2 <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    82aa:	4b0a      	ldr	r3, [pc, #40]	; (82d4 <DeleteItemCache+0x34>)
    82ac:	7819      	ldrb	r1, [r3, #0]
    82ae:	3901      	subs	r1, #1
    82b0:	b2c9      	uxtb	r1, r1
    82b2:	7019      	strb	r1, [r3, #0]
    82b4:	0089      	lsls	r1, r1, #2
    82b6:	4b08      	ldr	r3, [pc, #32]	; (82d8 <DeleteItemCache+0x38>)
    82b8:	1859      	adds	r1, r3, r1
    82ba:	2204      	movs	r2, #4
    82bc:	4b07      	ldr	r3, [pc, #28]	; (82dc <DeleteItemCache+0x3c>)
    82be:	4798      	blx	r3
}
    82c0:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    82c2:	4b07      	ldr	r3, [pc, #28]	; (82e0 <DeleteItemCache+0x40>)
    82c4:	4a07      	ldr	r2, [pc, #28]	; (82e4 <DeleteItemCache+0x44>)
    82c6:	21d3      	movs	r1, #211	; 0xd3
    82c8:	0049      	lsls	r1, r1, #1
    82ca:	4807      	ldr	r0, [pc, #28]	; (82e8 <DeleteItemCache+0x48>)
    82cc:	4c07      	ldr	r4, [pc, #28]	; (82ec <DeleteItemCache+0x4c>)
    82ce:	47a0      	blx	r4
    82d0:	000081b1 	.word	0x000081b1
    82d4:	20000278 	.word	0x20000278
    82d8:	20000258 	.word	0x20000258
    82dc:	000166f7 	.word	0x000166f7
    82e0:	000184fc 	.word	0x000184fc
    82e4:	00018624 	.word	0x00018624
    82e8:	00018534 	.word	0x00018534
    82ec:	00016635 	.word	0x00016635

000082f0 <eraseSectorTimerFired>:
{
    82f0:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    82f2:	4b05      	ldr	r3, [pc, #20]	; (8308 <eraseSectorTimerFired+0x18>)
    82f4:	4798      	blx	r3
    82f6:	2800      	cmp	r0, #0
    82f8:	d000      	beq.n	82fc <eraseSectorTimerFired+0xc>
}
    82fa:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    82fc:	4b03      	ldr	r3, [pc, #12]	; (830c <eraseSectorTimerFired+0x1c>)
    82fe:	7818      	ldrb	r0, [r3, #0]
    8300:	4b03      	ldr	r3, [pc, #12]	; (8310 <eraseSectorTimerFired+0x20>)
    8302:	4798      	blx	r3
}
    8304:	e7f9      	b.n	82fa <eraseSectorTimerFired+0xa>
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	00007fb9 	.word	0x00007fb9
    830c:	20000016 	.word	0x20000016
    8310:	00007f49 	.word	0x00007f49

00008314 <EraseSector>:

static bool EraseSector(void)
{
    8314:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8316:	4c08      	ldr	r4, [pc, #32]	; (8338 <EraseSector+0x24>)
    8318:	7820      	ldrb	r0, [r4, #0]
    831a:	4b08      	ldr	r3, [pc, #32]	; (833c <EraseSector+0x28>)
    831c:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    831e:	7820      	ldrb	r0, [r4, #0]
    8320:	2280      	movs	r2, #128	; 0x80
    8322:	0192      	lsls	r2, r2, #6
    8324:	2100      	movs	r1, #0
    8326:	4b06      	ldr	r3, [pc, #24]	; (8340 <EraseSector+0x2c>)
    8328:	4798      	blx	r3
    832a:	2800      	cmp	r0, #0
    832c:	d003      	beq.n	8336 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    832e:	2280      	movs	r2, #128	; 0x80
    8330:	0052      	lsls	r2, r2, #1
    8332:	4b04      	ldr	r3, [pc, #16]	; (8344 <EraseSector+0x30>)
    8334:	801a      	strh	r2, [r3, #0]

    return true;
}
    8336:	bd10      	pop	{r4, pc}
    8338:	20000280 	.word	0x20000280
    833c:	00007f49 	.word	0x00007f49
    8340:	00007f9d 	.word	0x00007f9d
    8344:	20000282 	.word	0x20000282

00008348 <WriteAndCheck>:
{
    8348:	b5f0      	push	{r4, r5, r6, r7, lr}
    834a:	b083      	sub	sp, #12
    834c:	9001      	str	r0, [sp, #4]
    834e:	000d      	movs	r5, r1
    8350:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    8352:	4f07      	ldr	r7, [pc, #28]	; (8370 <WriteAndCheck+0x28>)
    8354:	7838      	ldrb	r0, [r7, #0]
    8356:	0013      	movs	r3, r2
    8358:	000a      	movs	r2, r1
    835a:	9901      	ldr	r1, [sp, #4]
    835c:	4c05      	ldr	r4, [pc, #20]	; (8374 <WriteAndCheck+0x2c>)
    835e:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    8360:	7838      	ldrb	r0, [r7, #0]
    8362:	0033      	movs	r3, r6
    8364:	002a      	movs	r2, r5
    8366:	9901      	ldr	r1, [sp, #4]
    8368:	4c03      	ldr	r4, [pc, #12]	; (8378 <WriteAndCheck+0x30>)
    836a:	47a0      	blx	r4
}
    836c:	b003      	add	sp, #12
    836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8370:	20000280 	.word	0x20000280
    8374:	00007de1 	.word	0x00007de1
    8378:	00007fad 	.word	0x00007fad

0000837c <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    837c:	b510      	push	{r4, lr}
    837e:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    8380:	ac01      	add	r4, sp, #4
    8382:	2341      	movs	r3, #65	; 0x41
    8384:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8386:	3313      	adds	r3, #19
    8388:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    838a:	3b01      	subs	r3, #1
    838c:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    838e:	3b05      	subs	r3, #5
    8390:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    8392:	3328      	adds	r3, #40	; 0x28
    8394:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8396:	3b44      	subs	r3, #68	; 0x44
    8398:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    839a:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    839c:	43c0      	mvns	r0, r0
    839e:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    83a0:	4b08      	ldr	r3, [pc, #32]	; (83c4 <WriteSectorHeader+0x48>)
    83a2:	881b      	ldrh	r3, [r3, #0]
    83a4:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    83a6:	4a08      	ldr	r2, [pc, #32]	; (83c8 <WriteSectorHeader+0x4c>)
    83a8:	2110      	movs	r1, #16
    83aa:	466b      	mov	r3, sp
    83ac:	1d98      	adds	r0, r3, #6
    83ae:	4b07      	ldr	r3, [pc, #28]	; (83cc <WriteSectorHeader+0x50>)
    83b0:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    83b2:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    83b4:	2212      	movs	r2, #18
    83b6:	0021      	movs	r1, r4
    83b8:	2000      	movs	r0, #0
    83ba:	4b05      	ldr	r3, [pc, #20]	; (83d0 <WriteSectorHeader+0x54>)
    83bc:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    83be:	b006      	add	sp, #24
    83c0:	bd10      	pop	{r4, pc}
    83c2:	46c0      	nop			; (mov r8, r8)
    83c4:	2000027a 	.word	0x2000027a
    83c8:	0000ffff 	.word	0x0000ffff
    83cc:	00008011 	.word	0x00008011
    83d0:	00008349 	.word	0x00008349

000083d4 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    83d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83d6:	0004      	movs	r4, r0
    83d8:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    83da:	4a21      	ldr	r2, [pc, #132]	; (8460 <SmartCompacting+0x8c>)
    83dc:	8813      	ldrh	r3, [r2, #0]
    83de:	18cb      	adds	r3, r1, r3
    83e0:	b29b      	uxth	r3, r3
    83e2:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    83e4:	2bff      	cmp	r3, #255	; 0xff
    83e6:	d92e      	bls.n	8446 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    83e8:	4b1e      	ldr	r3, [pc, #120]	; (8464 <SmartCompacting+0x90>)
    83ea:	881a      	ldrh	r2, [r3, #0]
    83ec:	1880      	adds	r0, r0, r2
    83ee:	2580      	movs	r5, #128	; 0x80
    83f0:	006d      	lsls	r5, r5, #1
    83f2:	1aaa      	subs	r2, r5, r2
    83f4:	491c      	ldr	r1, [pc, #112]	; (8468 <SmartCompacting+0x94>)
    83f6:	4b1d      	ldr	r3, [pc, #116]	; (846c <SmartCompacting+0x98>)
    83f8:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    83fa:	4b1d      	ldr	r3, [pc, #116]	; (8470 <SmartCompacting+0x9c>)
    83fc:	8818      	ldrh	r0, [r3, #0]
    83fe:	002a      	movs	r2, r5
    8400:	0021      	movs	r1, r4
    8402:	4b1c      	ldr	r3, [pc, #112]	; (8474 <SmartCompacting+0xa0>)
    8404:	4798      	blx	r3
    8406:	1e05      	subs	r5, r0, #0
    8408:	d027      	beq.n	845a <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    840a:	2100      	movs	r1, #0
    840c:	2080      	movs	r0, #128	; 0x80
    840e:	0040      	lsls	r0, r0, #1
    8410:	4b19      	ldr	r3, [pc, #100]	; (8478 <SmartCompacting+0xa4>)
    8412:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8414:	4b13      	ldr	r3, [pc, #76]	; (8464 <SmartCompacting+0x90>)
    8416:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8418:	2200      	movs	r2, #0
    841a:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    841c:	4b10      	ldr	r3, [pc, #64]	; (8460 <SmartCompacting+0x8c>)
    841e:	881e      	ldrh	r6, [r3, #0]
    8420:	3e01      	subs	r6, #1
    8422:	3eff      	subs	r6, #255	; 0xff
    8424:	b2b6      	uxth	r6, r6
    8426:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8428:	2e00      	cmp	r6, #0
    842a:	d016      	beq.n	845a <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    842c:	2180      	movs	r1, #128	; 0x80
    842e:	0049      	lsls	r1, r1, #1
    8430:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    8432:	b289      	uxth	r1, r1
    8434:	4b0c      	ldr	r3, [pc, #48]	; (8468 <SmartCompacting+0x94>)
    8436:	1859      	adds	r1, r3, r1
    8438:	0032      	movs	r2, r6
    843a:	0020      	movs	r0, r4
    843c:	4b0b      	ldr	r3, [pc, #44]	; (846c <SmartCompacting+0x98>)
    843e:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    8440:	4b08      	ldr	r3, [pc, #32]	; (8464 <SmartCompacting+0x90>)
    8442:	801e      	strh	r6, [r3, #0]
    8444:	e009      	b.n	845a <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    8446:	4e07      	ldr	r6, [pc, #28]	; (8464 <SmartCompacting+0x90>)
    8448:	8837      	ldrh	r7, [r6, #0]
    844a:	19c0      	adds	r0, r0, r7
    844c:	000a      	movs	r2, r1
    844e:	4906      	ldr	r1, [pc, #24]	; (8468 <SmartCompacting+0x94>)
    8450:	4b06      	ldr	r3, [pc, #24]	; (846c <SmartCompacting+0x98>)
    8452:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    8454:	19ed      	adds	r5, r5, r7
    8456:	8035      	strh	r5, [r6, #0]
        return true;
    8458:	2501      	movs	r5, #1
        }
    }

    return true;

}
    845a:	0028      	movs	r0, r5
    845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    845e:	46c0      	nop			; (mov r8, r8)
    8460:	20000138 	.word	0x20000138
    8464:	2000010c 	.word	0x2000010c
    8468:	2000013c 	.word	0x2000013c
    846c:	000166f7 	.word	0x000166f7
    8470:	20000282 	.word	0x20000282
    8474:	00008349 	.word	0x00008349
    8478:	00007fd5 	.word	0x00007fd5

0000847c <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    847c:	b5f0      	push	{r4, r5, r6, r7, lr}
    847e:	46de      	mov	lr, fp
    8480:	4657      	mov	r7, sl
    8482:	464e      	mov	r6, r9
    8484:	4645      	mov	r5, r8
    8486:	b5e0      	push	{r5, r6, r7, lr}
    8488:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    848a:	487b      	ldr	r0, [pc, #492]	; (8678 <CompactSector+0x1fc>)
    848c:	4b7b      	ldr	r3, [pc, #492]	; (867c <CompactSector+0x200>)
    848e:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8490:	2300      	movs	r3, #0
    8492:	4a7b      	ldr	r2, [pc, #492]	; (8680 <CompactSector+0x204>)
    8494:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8496:	4a7b      	ldr	r2, [pc, #492]	; (8684 <CompactSector+0x208>)
    8498:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    849a:	4a7b      	ldr	r2, [pc, #492]	; (8688 <CompactSector+0x20c>)
    849c:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    849e:	4a7b      	ldr	r2, [pc, #492]	; (868c <CompactSector+0x210>)
    84a0:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    84a2:	4b7b      	ldr	r3, [pc, #492]	; (8690 <CompactSector+0x214>)
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	001f      	movs	r7, r3
    84a8:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    84aa:	2312      	movs	r3, #18
    84ac:	aa0f      	add	r2, sp, #60	; 0x3c
    84ae:	2100      	movs	r1, #0
    84b0:	0038      	movs	r0, r7
    84b2:	4c78      	ldr	r4, [pc, #480]	; (8694 <CompactSector+0x218>)
    84b4:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    84b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    84b8:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    84ba:	4c75      	ldr	r4, [pc, #468]	; (8690 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    84bc:	0025      	movs	r5, r4
        s_sector++;
    84be:	0026      	movs	r6, r4
    84c0:	e008      	b.n	84d4 <CompactSector+0x58>
    84c2:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    84c4:	4b72      	ldr	r3, [pc, #456]	; (8690 <CompactSector+0x214>)
    84c6:	781b      	ldrb	r3, [r3, #0]
    84c8:	42bb      	cmp	r3, r7
    84ca:	d00b      	beq.n	84e4 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    84cc:	4b72      	ldr	r3, [pc, #456]	; (8698 <CompactSector+0x21c>)
    84ce:	4798      	blx	r3
    84d0:	2800      	cmp	r0, #0
    84d2:	d10d      	bne.n	84f0 <CompactSector+0x74>
        s_sector++;
    84d4:	7823      	ldrb	r3, [r4, #0]
    84d6:	3301      	adds	r3, #1
    84d8:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    84da:	2b01      	cmp	r3, #1
    84dc:	d9f1      	bls.n	84c2 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    84de:	2300      	movs	r3, #0
    84e0:	702b      	strb	r3, [r5, #0]
    84e2:	e7ef      	b.n	84c4 <CompactSector+0x48>
            assert(false);
    84e4:	4b6d      	ldr	r3, [pc, #436]	; (869c <CompactSector+0x220>)
    84e6:	4a6e      	ldr	r2, [pc, #440]	; (86a0 <CompactSector+0x224>)
    84e8:	496e      	ldr	r1, [pc, #440]	; (86a4 <CompactSector+0x228>)
    84ea:	486f      	ldr	r0, [pc, #444]	; (86a8 <CompactSector+0x22c>)
    84ec:	4c6f      	ldr	r4, [pc, #444]	; (86ac <CompactSector+0x230>)
    84ee:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    84f0:	4b6f      	ldr	r3, [pc, #444]	; (86b0 <CompactSector+0x234>)
    84f2:	781b      	ldrb	r3, [r3, #0]
    84f4:	2b00      	cmp	r3, #0
    84f6:	d06a      	beq.n	85ce <CompactSector+0x152>
    84f8:	2300      	movs	r3, #0
    84fa:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    84fc:	3301      	adds	r3, #1
    84fe:	33ff      	adds	r3, #255	; 0xff
    8500:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8502:	466a      	mov	r2, sp
    8504:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8506:	4b6b      	ldr	r3, [pc, #428]	; (86b4 <CompactSector+0x238>)
    8508:	3310      	adds	r3, #16
    850a:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    850c:	9b06      	ldr	r3, [sp, #24]
    850e:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8510:	009f      	lsls	r7, r3, #2
    8512:	4b69      	ldr	r3, [pc, #420]	; (86b8 <CompactSector+0x23c>)
    8514:	469c      	mov	ip, r3
    8516:	4467      	add	r7, ip
    8518:	887b      	ldrh	r3, [r7, #2]
    851a:	001d      	movs	r5, r3
    851c:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    851e:	2310      	movs	r3, #16
    8520:	aa0b      	add	r2, sp, #44	; 0x2c
    8522:	0029      	movs	r1, r5
    8524:	9803      	ldr	r0, [sp, #12]
    8526:	4680      	mov	r8, r0
    8528:	4c5a      	ldr	r4, [pc, #360]	; (8694 <CompactSector+0x218>)
    852a:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    852c:	ae0b      	add	r6, sp, #44	; 0x2c
    852e:	2300      	movs	r3, #0
    8530:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    8532:	8934      	ldrh	r4, [r6, #8]
    8534:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    8536:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    8538:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    853a:	3410      	adds	r4, #16
    853c:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    853e:	0032      	movs	r2, r6
    8540:	0029      	movs	r1, r5
    8542:	4640      	mov	r0, r8
    8544:	4b5d      	ldr	r3, [pc, #372]	; (86bc <CompactSector+0x240>)
    8546:	4798      	blx	r3
    8548:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    854a:	4a5d      	ldr	r2, [pc, #372]	; (86c0 <CompactSector+0x244>)
    854c:	210e      	movs	r1, #14
    854e:	a80b      	add	r0, sp, #44	; 0x2c
    8550:	4b5c      	ldr	r3, [pc, #368]	; (86c4 <CompactSector+0x248>)
    8552:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    8554:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8556:	4d57      	ldr	r5, [pc, #348]	; (86b4 <CompactSector+0x238>)
    8558:	464a      	mov	r2, r9
    855a:	21ff      	movs	r1, #255	; 0xff
    855c:	0028      	movs	r0, r5
    855e:	4b5a      	ldr	r3, [pc, #360]	; (86c8 <CompactSector+0x24c>)
    8560:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8562:	002b      	movs	r3, r5
    8564:	ce07      	ldmia	r6!, {r0, r1, r2}
    8566:	c307      	stmia	r3!, {r0, r1, r2}
    8568:	6832      	ldr	r2, [r6, #0]
    856a:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    856c:	4b57      	ldr	r3, [pc, #348]	; (86cc <CompactSector+0x250>)
    856e:	881b      	ldrh	r3, [r3, #0]
    8570:	4a45      	ldr	r2, [pc, #276]	; (8688 <CompactSector+0x20c>)
    8572:	8812      	ldrh	r2, [r2, #0]
    8574:	189b      	adds	r3, r3, r2
    8576:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8578:	454c      	cmp	r4, r9
    857a:	d904      	bls.n	8586 <CompactSector+0x10a>
    857c:	2600      	movs	r6, #0
    857e:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8580:	4a4c      	ldr	r2, [pc, #304]	; (86b4 <CompactSector+0x238>)
    8582:	4690      	mov	r8, r2
    8584:	e068      	b.n	8658 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8586:	ab0b      	add	r3, sp, #44	; 0x2c
    8588:	891b      	ldrh	r3, [r3, #8]
    858a:	9a08      	ldr	r2, [sp, #32]
    858c:	9200      	str	r2, [sp, #0]
    858e:	2200      	movs	r2, #0
    8590:	9904      	ldr	r1, [sp, #16]
    8592:	9803      	ldr	r0, [sp, #12]
    8594:	4e4e      	ldr	r6, [pc, #312]	; (86d0 <CompactSector+0x254>)
    8596:	47b0      	blx	r6
    8598:	2800      	cmp	r0, #0
    859a:	d063      	beq.n	8664 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    859c:	9b07      	ldr	r3, [sp, #28]
    859e:	009d      	lsls	r5, r3, #2
    85a0:	4b45      	ldr	r3, [pc, #276]	; (86b8 <CompactSector+0x23c>)
    85a2:	195d      	adds	r5, r3, r5
    85a4:	4b49      	ldr	r3, [pc, #292]	; (86cc <CompactSector+0x250>)
    85a6:	881b      	ldrh	r3, [r3, #0]
    85a8:	4a37      	ldr	r2, [pc, #220]	; (8688 <CompactSector+0x20c>)
    85aa:	8812      	ldrh	r2, [r2, #0]
    85ac:	189b      	adds	r3, r3, r2
    85ae:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    85b0:	0021      	movs	r1, r4
    85b2:	a814      	add	r0, sp, #80	; 0x50
    85b4:	4b47      	ldr	r3, [pc, #284]	; (86d4 <CompactSector+0x258>)
    85b6:	4798      	blx	r3
    85b8:	2800      	cmp	r0, #0
    85ba:	d053      	beq.n	8664 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    85bc:	9b06      	ldr	r3, [sp, #24]
    85be:	3301      	adds	r3, #1
    85c0:	b2db      	uxtb	r3, r3
    85c2:	001a      	movs	r2, r3
    85c4:	9306      	str	r3, [sp, #24]
    85c6:	4b3a      	ldr	r3, [pc, #232]	; (86b0 <CompactSector+0x234>)
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	4293      	cmp	r3, r2
    85cc:	d89e      	bhi.n	850c <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    85ce:	4b2f      	ldr	r3, [pc, #188]	; (868c <CompactSector+0x210>)
    85d0:	881a      	ldrh	r2, [r3, #0]
    85d2:	2a00      	cmp	r2, #0
    85d4:	d006      	beq.n	85e4 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    85d6:	4b3d      	ldr	r3, [pc, #244]	; (86cc <CompactSector+0x250>)
    85d8:	8818      	ldrh	r0, [r3, #0]
    85da:	a914      	add	r1, sp, #80	; 0x50
    85dc:	4b3e      	ldr	r3, [pc, #248]	; (86d8 <CompactSector+0x25c>)
    85de:	4798      	blx	r3
    85e0:	1e04      	subs	r4, r0, #0
    85e2:	d040      	beq.n	8666 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    85e4:	4b29      	ldr	r3, [pc, #164]	; (868c <CompactSector+0x210>)
    85e6:	8818      	ldrh	r0, [r3, #0]
    85e8:	2100      	movs	r1, #0
    85ea:	4b3c      	ldr	r3, [pc, #240]	; (86dc <CompactSector+0x260>)
    85ec:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    85ee:	4b37      	ldr	r3, [pc, #220]	; (86cc <CompactSector+0x250>)
    85f0:	881a      	ldrh	r2, [r3, #0]
    85f2:	4b3b      	ldr	r3, [pc, #236]	; (86e0 <CompactSector+0x264>)
    85f4:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    85f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    85f8:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    85fa:	4b3a      	ldr	r3, [pc, #232]	; (86e4 <CompactSector+0x268>)
    85fc:	4798      	blx	r3
    85fe:	1e04      	subs	r4, r0, #0
    8600:	d031      	beq.n	8666 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    8602:	2102      	movs	r1, #2
    8604:	2000      	movs	r0, #0
    8606:	4b35      	ldr	r3, [pc, #212]	; (86dc <CompactSector+0x260>)
    8608:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    860a:	4b37      	ldr	r3, [pc, #220]	; (86e8 <CompactSector+0x26c>)
    860c:	466a      	mov	r2, sp
    860e:	7b12      	ldrb	r2, [r2, #12]
    8610:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    8612:	4d36      	ldr	r5, [pc, #216]	; (86ec <CompactSector+0x270>)
    8614:	0028      	movs	r0, r5
    8616:	4b19      	ldr	r3, [pc, #100]	; (867c <CompactSector+0x200>)
    8618:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    861a:	0028      	movs	r0, r5
    861c:	4b34      	ldr	r3, [pc, #208]	; (86f0 <CompactSector+0x274>)
    861e:	4798      	blx	r3

    return true;
    8620:	e021      	b.n	8666 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8622:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8624:	1aef      	subs	r7, r5, r3
    8626:	b2ba      	uxth	r2, r7
    8628:	4693      	mov	fp, r2
    862a:	4443      	add	r3, r8
    862c:	9300      	str	r3, [sp, #0]
    862e:	0013      	movs	r3, r2
    8630:	0032      	movs	r2, r6
    8632:	9904      	ldr	r1, [sp, #16]
    8634:	9803      	ldr	r0, [sp, #12]
    8636:	4f26      	ldr	r7, [pc, #152]	; (86d0 <CompactSector+0x254>)
    8638:	47b8      	blx	r7
    863a:	2800      	cmp	r0, #0
    863c:	d012      	beq.n	8664 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    863e:	0029      	movs	r1, r5
    8640:	a814      	add	r0, sp, #80	; 0x50
    8642:	4b24      	ldr	r3, [pc, #144]	; (86d4 <CompactSector+0x258>)
    8644:	4798      	blx	r3
    8646:	2800      	cmp	r0, #0
    8648:	d00c      	beq.n	8664 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    864a:	1b64      	subs	r4, r4, r5
    864c:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    864e:	445e      	add	r6, fp
    8650:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    8652:	2300      	movs	r3, #0
            } while(currLength > 0);
    8654:	2c00      	cmp	r4, #0
    8656:	d0b1      	beq.n	85bc <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8658:	1c25      	adds	r5, r4, #0
    865a:	454c      	cmp	r4, r9
    865c:	d9e1      	bls.n	8622 <CompactSector+0x1a6>
    865e:	466a      	mov	r2, sp
    8660:	8ad5      	ldrh	r5, [r2, #22]
    8662:	e7de      	b.n	8622 <CompactSector+0x1a6>
                return false;
    8664:	2400      	movs	r4, #0
}
    8666:	0020      	movs	r0, r4
    8668:	b055      	add	sp, #340	; 0x154
    866a:	bc3c      	pop	{r2, r3, r4, r5}
    866c:	4690      	mov	r8, r2
    866e:	4699      	mov	r9, r3
    8670:	46a2      	mov	sl, r4
    8672:	46ab      	mov	fp, r5
    8674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8676:	46c0      	nop			; (mov r8, r8)
    8678:	20000124 	.word	0x20000124
    867c:	0000be99 	.word	0x0000be99
    8680:	20000250 	.word	0x20000250
    8684:	20000252 	.word	0x20000252
    8688:	2000010c 	.word	0x2000010c
    868c:	20000138 	.word	0x20000138
    8690:	20000280 	.word	0x20000280
    8694:	00007d69 	.word	0x00007d69
    8698:	00008315 	.word	0x00008315
    869c:	000184b8 	.word	0x000184b8
    86a0:	00018640 	.word	0x00018640
    86a4:	000003d5 	.word	0x000003d5
    86a8:	00018534 	.word	0x00018534
    86ac:	00016635 	.word	0x00016635
    86b0:	20000278 	.word	0x20000278
    86b4:	2000013c 	.word	0x2000013c
    86b8:	20000258 	.word	0x20000258
    86bc:	00008109 	.word	0x00008109
    86c0:	0000ffff 	.word	0x0000ffff
    86c4:	00008011 	.word	0x00008011
    86c8:	00016709 	.word	0x00016709
    86cc:	20000282 	.word	0x20000282
    86d0:	00008051 	.word	0x00008051
    86d4:	000083d5 	.word	0x000083d5
    86d8:	00008349 	.word	0x00008349
    86dc:	00007fd5 	.word	0x00007fd5
    86e0:	2000027a 	.word	0x2000027a
    86e4:	0000837d 	.word	0x0000837d
    86e8:	20000016 	.word	0x20000016
    86ec:	2000023c 	.word	0x2000023c
    86f0:	0000bf05 	.word	0x0000bf05

000086f4 <compactSectorTimerFired>:
{
    86f4:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    86f6:	4b07      	ldr	r3, [pc, #28]	; (8714 <compactSectorTimerFired+0x20>)
    86f8:	4798      	blx	r3
    86fa:	2800      	cmp	r0, #0
    86fc:	d000      	beq.n	8700 <compactSectorTimerFired+0xc>
}
    86fe:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8700:	4b05      	ldr	r3, [pc, #20]	; (8718 <compactSectorTimerFired+0x24>)
    8702:	4798      	blx	r3
      assert(false);
    8704:	4b05      	ldr	r3, [pc, #20]	; (871c <compactSectorTimerFired+0x28>)
    8706:	4a06      	ldr	r2, [pc, #24]	; (8720 <compactSectorTimerFired+0x2c>)
    8708:	212c      	movs	r1, #44	; 0x2c
    870a:	31ff      	adds	r1, #255	; 0xff
    870c:	4805      	ldr	r0, [pc, #20]	; (8724 <compactSectorTimerFired+0x30>)
    870e:	4c06      	ldr	r4, [pc, #24]	; (8728 <compactSectorTimerFired+0x34>)
    8710:	47a0      	blx	r4
    8712:	46c0      	nop			; (mov r8, r8)
    8714:	00007fb9 	.word	0x00007fb9
    8718:	0000847d 	.word	0x0000847d
    871c:	000184b8 	.word	0x000184b8
    8720:	000185ec 	.word	0x000185ec
    8724:	00018534 	.word	0x00018534
    8728:	00016635 	.word	0x00016635

0000872c <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    872c:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    872e:	4b12      	ldr	r3, [pc, #72]	; (8778 <CompactSectorIfNeeded+0x4c>)
    8730:	881a      	ldrh	r2, [r3, #0]
    8732:	2380      	movs	r3, #128	; 0x80
    8734:	019b      	lsls	r3, r3, #6
    8736:	1a9b      	subs	r3, r3, r2
    8738:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    873a:	4283      	cmp	r3, r0
    873c:	d303      	bcc.n	8746 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    873e:	4a0f      	ldr	r2, [pc, #60]	; (877c <CompactSectorIfNeeded+0x50>)
    8740:	4293      	cmp	r3, r2
    8742:	d90a      	bls.n	875a <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    8744:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    8746:	4b0e      	ldr	r3, [pc, #56]	; (8780 <CompactSectorIfNeeded+0x54>)
    8748:	4798      	blx	r3
    874a:	2800      	cmp	r0, #0
    874c:	d1fa      	bne.n	8744 <CompactSectorIfNeeded+0x18>
            assert(false);
    874e:	4b0d      	ldr	r3, [pc, #52]	; (8784 <CompactSectorIfNeeded+0x58>)
    8750:	4a0d      	ldr	r2, [pc, #52]	; (8788 <CompactSectorIfNeeded+0x5c>)
    8752:	490e      	ldr	r1, [pc, #56]	; (878c <CompactSectorIfNeeded+0x60>)
    8754:	480e      	ldr	r0, [pc, #56]	; (8790 <CompactSectorIfNeeded+0x64>)
    8756:	4c0f      	ldr	r4, [pc, #60]	; (8794 <CompactSectorIfNeeded+0x68>)
    8758:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    875a:	480f      	ldr	r0, [pc, #60]	; (8798 <CompactSectorIfNeeded+0x6c>)
    875c:	4b0f      	ldr	r3, [pc, #60]	; (879c <CompactSectorIfNeeded+0x70>)
    875e:	4798      	blx	r3
    8760:	2800      	cmp	r0, #0
    8762:	d1ef      	bne.n	8744 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    8764:	4b0c      	ldr	r3, [pc, #48]	; (8798 <CompactSectorIfNeeded+0x6c>)
    8766:	4a0e      	ldr	r2, [pc, #56]	; (87a0 <CompactSectorIfNeeded+0x74>)
    8768:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    876a:	4a0e      	ldr	r2, [pc, #56]	; (87a4 <CompactSectorIfNeeded+0x78>)
    876c:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    876e:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8770:	2200      	movs	r2, #0
    8772:	731a      	strb	r2, [r3, #12]
    8774:	e7e6      	b.n	8744 <CompactSectorIfNeeded+0x18>
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	20000282 	.word	0x20000282
    877c:	0000080f 	.word	0x0000080f
    8780:	0000847d 	.word	0x0000847d
    8784:	000184b8 	.word	0x000184b8
    8788:	00018650 	.word	0x00018650
    878c:	0000044e 	.word	0x0000044e
    8790:	00018534 	.word	0x00018534
    8794:	00016635 	.word	0x00016635
    8798:	20000124 	.word	0x20000124
    879c:	0000bed9 	.word	0x0000bed9
    87a0:	000086f5 	.word	0x000086f5
    87a4:	00002710 	.word	0x00002710

000087a8 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    87a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87aa:	46de      	mov	lr, fp
    87ac:	4657      	mov	r7, sl
    87ae:	464e      	mov	r6, r9
    87b0:	4645      	mov	r5, r8
    87b2:	b5e0      	push	{r5, r6, r7, lr}
    87b4:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    87b6:	4b77      	ldr	r3, [pc, #476]	; (8994 <CompactItem+0x1ec>)
    87b8:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    87ba:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    87bc:	2800      	cmp	r0, #0
    87be:	d007      	beq.n	87d0 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    87c0:	0018      	movs	r0, r3
    87c2:	b00b      	add	sp, #44	; 0x2c
    87c4:	bc3c      	pop	{r2, r3, r4, r5}
    87c6:	4690      	mov	r8, r2
    87c8:	4699      	mov	r9, r3
    87ca:	46a2      	mov	sl, r4
    87cc:	46ab      	mov	fp, r5
    87ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    87d0:	4b71      	ldr	r3, [pc, #452]	; (8998 <CompactItem+0x1f0>)
    87d2:	8818      	ldrh	r0, [r3, #0]
    87d4:	2800      	cmp	r0, #0
    87d6:	d146      	bne.n	8866 <CompactItem+0xbe>
    87d8:	4b70      	ldr	r3, [pc, #448]	; (899c <CompactItem+0x1f4>)
    87da:	881b      	ldrh	r3, [r3, #0]
    87dc:	2b00      	cmp	r3, #0
    87de:	d100      	bne.n	87e2 <CompactItem+0x3a>
    87e0:	e0d0      	b.n	8984 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    87e2:	4b6e      	ldr	r3, [pc, #440]	; (899c <CompactItem+0x1f4>)
    87e4:	8818      	ldrh	r0, [r3, #0]
    87e6:	4b6e      	ldr	r3, [pc, #440]	; (89a0 <CompactItem+0x1f8>)
    87e8:	4798      	blx	r3
    87ea:	4683      	mov	fp, r0
    if ( cache == NULL )
    87ec:	2800      	cmp	r0, #0
    87ee:	d100      	bne.n	87f2 <CompactItem+0x4a>
    87f0:	e0ca      	b.n	8988 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    87f2:	7882      	ldrb	r2, [r0, #2]
    87f4:	78c3      	ldrb	r3, [r0, #3]
    87f6:	021b      	lsls	r3, r3, #8
    87f8:	4313      	orrs	r3, r2
    87fa:	0019      	movs	r1, r3
    87fc:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    87fe:	4b69      	ldr	r3, [pc, #420]	; (89a4 <CompactItem+0x1fc>)
    8800:	7818      	ldrb	r0, [r3, #0]
    8802:	2310      	movs	r3, #16
    8804:	aa06      	add	r2, sp, #24
    8806:	4c68      	ldr	r4, [pc, #416]	; (89a8 <CompactItem+0x200>)
    8808:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    880a:	4b63      	ldr	r3, [pc, #396]	; (8998 <CompactItem+0x1f0>)
    880c:	881a      	ldrh	r2, [r3, #0]
    880e:	2a00      	cmp	r2, #0
    8810:	d02e      	beq.n	8870 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    8812:	4b66      	ldr	r3, [pc, #408]	; (89ac <CompactItem+0x204>)
    8814:	881b      	ldrh	r3, [r3, #0]
    8816:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8818:	ab06      	add	r3, sp, #24
    881a:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    881c:	a906      	add	r1, sp, #24
    881e:	810a      	strh	r2, [r1, #8]
    8820:	1c19      	adds	r1, r3, #0
    8822:	4293      	cmp	r3, r2
    8824:	d900      	bls.n	8828 <CompactItem+0x80>
    8826:	1c11      	adds	r1, r2, #0
    8828:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    882a:	aa06      	add	r2, sp, #24
    882c:	2100      	movs	r1, #0
    882e:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    8830:	8910      	ldrh	r0, [r2, #8]
    8832:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    8834:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    8836:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    8838:	001c      	movs	r4, r3
    883a:	3410      	adds	r4, #16
    883c:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    883e:	495c      	ldr	r1, [pc, #368]	; (89b0 <CompactItem+0x208>)
    8840:	ca61      	ldmia	r2!, {r0, r5, r6}
    8842:	c161      	stmia	r1!, {r0, r5, r6}
    8844:	6812      	ldr	r2, [r2, #0]
    8846:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    8848:	2280      	movs	r2, #128	; 0x80
    884a:	0052      	lsls	r2, r2, #1
    884c:	4294      	cmp	r4, r2
    884e:	d939      	bls.n	88c4 <CompactItem+0x11c>
    8850:	2600      	movs	r6, #0
    8852:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8854:	2280      	movs	r2, #128	; 0x80
    8856:	0052      	lsls	r2, r2, #1
    8858:	4691      	mov	r9, r2
    885a:	4669      	mov	r1, sp
    885c:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    885e:	4a51      	ldr	r2, [pc, #324]	; (89a4 <CompactItem+0x1fc>)
    8860:	4692      	mov	sl, r2
    8862:	001a      	movs	r2, r3
    8864:	e088      	b.n	8978 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    8866:	3010      	adds	r0, #16
    8868:	b280      	uxth	r0, r0
    886a:	4b52      	ldr	r3, [pc, #328]	; (89b4 <CompactItem+0x20c>)
    886c:	4798      	blx	r3
    886e:	e7b8      	b.n	87e2 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    8870:	ab06      	add	r3, sp, #24
    8872:	8918      	ldrh	r0, [r3, #8]
    8874:	3010      	adds	r0, #16
    8876:	b280      	uxth	r0, r0
    8878:	4b4e      	ldr	r3, [pc, #312]	; (89b4 <CompactItem+0x20c>)
    887a:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    887c:	4b47      	ldr	r3, [pc, #284]	; (899c <CompactItem+0x1f4>)
    887e:	8818      	ldrh	r0, [r3, #0]
    8880:	4b47      	ldr	r3, [pc, #284]	; (89a0 <CompactItem+0x1f8>)
    8882:	4798      	blx	r3
    8884:	4683      	mov	fp, r0
        assert(cache != NULL);
    8886:	2800      	cmp	r0, #0
    8888:	d015      	beq.n	88b6 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    888a:	7882      	ldrb	r2, [r0, #2]
    888c:	78c3      	ldrb	r3, [r0, #3]
    888e:	021b      	lsls	r3, r3, #8
    8890:	4313      	orrs	r3, r2
    8892:	0019      	movs	r1, r3
    8894:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8896:	ac06      	add	r4, sp, #24
    8898:	4b42      	ldr	r3, [pc, #264]	; (89a4 <CompactItem+0x1fc>)
    889a:	7818      	ldrb	r0, [r3, #0]
    889c:	2310      	movs	r3, #16
    889e:	0022      	movs	r2, r4
    88a0:	4d41      	ldr	r5, [pc, #260]	; (89a8 <CompactItem+0x200>)
    88a2:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    88a4:	4b41      	ldr	r3, [pc, #260]	; (89ac <CompactItem+0x204>)
    88a6:	881b      	ldrh	r3, [r3, #0]
    88a8:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    88aa:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    88ac:	4a3a      	ldr	r2, [pc, #232]	; (8998 <CompactItem+0x1f0>)
    88ae:	8812      	ldrh	r2, [r2, #0]
    88b0:	2a00      	cmp	r2, #0
    88b2:	d0ba      	beq.n	882a <CompactItem+0x82>
    88b4:	e7b2      	b.n	881c <CompactItem+0x74>
        assert(cache != NULL);
    88b6:	4b40      	ldr	r3, [pc, #256]	; (89b8 <CompactItem+0x210>)
    88b8:	4a40      	ldr	r2, [pc, #256]	; (89bc <CompactItem+0x214>)
    88ba:	2191      	movs	r1, #145	; 0x91
    88bc:	00c9      	lsls	r1, r1, #3
    88be:	4840      	ldr	r0, [pc, #256]	; (89c0 <CompactItem+0x218>)
    88c0:	4c40      	ldr	r4, [pc, #256]	; (89c4 <CompactItem+0x21c>)
    88c2:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    88c4:	4a37      	ldr	r2, [pc, #220]	; (89a4 <CompactItem+0x1fc>)
    88c6:	7810      	ldrb	r0, [r2, #0]
    88c8:	4a39      	ldr	r2, [pc, #228]	; (89b0 <CompactItem+0x208>)
    88ca:	3210      	adds	r2, #16
    88cc:	9200      	str	r2, [sp, #0]
    88ce:	2200      	movs	r2, #0
    88d0:	9903      	ldr	r1, [sp, #12]
    88d2:	4c3d      	ldr	r4, [pc, #244]	; (89c8 <CompactItem+0x220>)
    88d4:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    88d6:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    88d8:	2800      	cmp	r0, #0
    88da:	d100      	bne.n	88de <CompactItem+0x136>
    88dc:	e770      	b.n	87c0 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    88de:	4934      	ldr	r1, [pc, #208]	; (89b0 <CompactItem+0x208>)
    88e0:	ab06      	add	r3, sp, #24
    88e2:	000a      	movs	r2, r1
    88e4:	0018      	movs	r0, r3
    88e6:	c870      	ldmia	r0!, {r4, r5, r6}
    88e8:	c270      	stmia	r2!, {r4, r5, r6}
    88ea:	6800      	ldr	r0, [r0, #0]
    88ec:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    88ee:	88da      	ldrh	r2, [r3, #6]
    88f0:	3210      	adds	r2, #16
    88f2:	b292      	uxth	r2, r2
    88f4:	4b2d      	ldr	r3, [pc, #180]	; (89ac <CompactItem+0x204>)
    88f6:	8818      	ldrh	r0, [r3, #0]
    88f8:	4b34      	ldr	r3, [pc, #208]	; (89cc <CompactItem+0x224>)
    88fa:	4798      	blx	r3
            return false;
    88fc:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    88fe:	2800      	cmp	r0, #0
    8900:	d100      	bne.n	8904 <CompactItem+0x15c>
    8902:	e75d      	b.n	87c0 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8904:	ab06      	add	r3, sp, #24
    8906:	88d8      	ldrh	r0, [r3, #6]
    8908:	3010      	adds	r0, #16
    890a:	b280      	uxth	r0, r0
    890c:	2102      	movs	r1, #2
    890e:	4b30      	ldr	r3, [pc, #192]	; (89d0 <CompactItem+0x228>)
    8910:	4798      	blx	r3
    s_compactItemId = 0u;
    8912:	2300      	movs	r3, #0
    8914:	4a21      	ldr	r2, [pc, #132]	; (899c <CompactItem+0x1f4>)
    8916:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8918:	4a1f      	ldr	r2, [pc, #124]	; (8998 <CompactItem+0x1f0>)
    891a:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    891c:	465b      	mov	r3, fp
    891e:	9905      	ldr	r1, [sp, #20]
    8920:	7099      	strb	r1, [r3, #2]
    8922:	0a0b      	lsrs	r3, r1, #8
    8924:	465a      	mov	r2, fp
    8926:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    8928:	2300      	movs	r3, #0
    892a:	e749      	b.n	87c0 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    892c:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    892e:	1aaf      	subs	r7, r5, r2
    8930:	b2bb      	uxth	r3, r7
    8932:	0019      	movs	r1, r3
    8934:	4653      	mov	r3, sl
    8936:	7818      	ldrb	r0, [r3, #0]
    8938:	4b1d      	ldr	r3, [pc, #116]	; (89b0 <CompactItem+0x208>)
    893a:	189b      	adds	r3, r3, r2
    893c:	9300      	str	r3, [sp, #0]
    893e:	9102      	str	r1, [sp, #8]
    8940:	000b      	movs	r3, r1
    8942:	0032      	movs	r2, r6
    8944:	9903      	ldr	r1, [sp, #12]
    8946:	4f20      	ldr	r7, [pc, #128]	; (89c8 <CompactItem+0x220>)
    8948:	47b8      	blx	r7
    894a:	2800      	cmp	r0, #0
    894c:	d01e      	beq.n	898c <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    894e:	4b17      	ldr	r3, [pc, #92]	; (89ac <CompactItem+0x204>)
    8950:	8818      	ldrh	r0, [r3, #0]
    8952:	002a      	movs	r2, r5
    8954:	4916      	ldr	r1, [pc, #88]	; (89b0 <CompactItem+0x208>)
    8956:	4b1d      	ldr	r3, [pc, #116]	; (89cc <CompactItem+0x224>)
    8958:	4798      	blx	r3
    895a:	2800      	cmp	r0, #0
    895c:	d018      	beq.n	8990 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    895e:	2102      	movs	r1, #2
    8960:	0028      	movs	r0, r5
    8962:	4b1b      	ldr	r3, [pc, #108]	; (89d0 <CompactItem+0x228>)
    8964:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    8966:	1b64      	subs	r4, r4, r5
    8968:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    896a:	9902      	ldr	r1, [sp, #8]
    896c:	468c      	mov	ip, r1
    896e:	4466      	add	r6, ip
    8970:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    8972:	2200      	movs	r2, #0
        } while(currLength > 0);
    8974:	2c00      	cmp	r4, #0
    8976:	d0cc      	beq.n	8912 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8978:	1c25      	adds	r5, r4, #0
    897a:	454c      	cmp	r4, r9
    897c:	d9d6      	bls.n	892c <CompactItem+0x184>
    897e:	466b      	mov	r3, sp
    8980:	8a5d      	ldrh	r5, [r3, #18]
    8982:	e7d3      	b.n	892c <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    8984:	2300      	movs	r3, #0
    8986:	e71b      	b.n	87c0 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    8988:	2300      	movs	r3, #0
    898a:	e719      	b.n	87c0 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    898c:	2301      	movs	r3, #1
    898e:	e717      	b.n	87c0 <CompactItem+0x18>
                return false;
    8990:	2300      	movs	r3, #0
    8992:	e715      	b.n	87c0 <CompactItem+0x18>
    8994:	00007fb9 	.word	0x00007fb9
    8998:	20000252 	.word	0x20000252
    899c:	20000250 	.word	0x20000250
    89a0:	000081b1 	.word	0x000081b1
    89a4:	20000280 	.word	0x20000280
    89a8:	00007d69 	.word	0x00007d69
    89ac:	20000282 	.word	0x20000282
    89b0:	2000013c 	.word	0x2000013c
    89b4:	0000872d 	.word	0x0000872d
    89b8:	000184a8 	.word	0x000184a8
    89bc:	00018668 	.word	0x00018668
    89c0:	00018534 	.word	0x00018534
    89c4:	00016635 	.word	0x00016635
    89c8:	00008051 	.word	0x00008051
    89cc:	00008349 	.word	0x00008349
    89d0:	00007fd5 	.word	0x00007fd5

000089d4 <compactItemTimerFired>:
{
    89d4:	b510      	push	{r4, lr}
    (void)CompactItem();
    89d6:	4b01      	ldr	r3, [pc, #4]	; (89dc <compactItemTimerFired+0x8>)
    89d8:	4798      	blx	r3
}
    89da:	bd10      	pop	{r4, pc}
    89dc:	000087a9 	.word	0x000087a9

000089e0 <WriteDataBlockAndHeader>:
{
    89e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89e2:	46de      	mov	lr, fp
    89e4:	4657      	mov	r7, sl
    89e6:	464e      	mov	r6, r9
    89e8:	4645      	mov	r5, r8
    89ea:	b5e0      	push	{r5, r6, r7, lr}
    89ec:	b083      	sub	sp, #12
    89ee:	0004      	movs	r4, r0
    89f0:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    89f2:	4d46      	ldr	r5, [pc, #280]	; (8b0c <WriteDataBlockAndHeader+0x12c>)
    89f4:	2280      	movs	r2, #128	; 0x80
    89f6:	0052      	lsls	r2, r2, #1
    89f8:	21ff      	movs	r1, #255	; 0xff
    89fa:	0028      	movs	r0, r5
    89fc:	4b44      	ldr	r3, [pc, #272]	; (8b10 <WriteDataBlockAndHeader+0x130>)
    89fe:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8a00:	4e44      	ldr	r6, [pc, #272]	; (8b14 <WriteDataBlockAndHeader+0x134>)
    8a02:	79a3      	ldrb	r3, [r4, #6]
    8a04:	79e1      	ldrb	r1, [r4, #7]
    8a06:	0209      	lsls	r1, r1, #8
    8a08:	4319      	orrs	r1, r3
    8a0a:	0032      	movs	r2, r6
    8a0c:	4650      	mov	r0, sl
    8a0e:	4f42      	ldr	r7, [pc, #264]	; (8b18 <WriteDataBlockAndHeader+0x138>)
    8a10:	47b8      	blx	r7
    8a12:	7020      	strb	r0, [r4, #0]
    8a14:	0a00      	lsrs	r0, r0, #8
    8a16:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8a18:	0032      	movs	r2, r6
    8a1a:	210e      	movs	r1, #14
    8a1c:	0020      	movs	r0, r4
    8a1e:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8a20:	73a0      	strb	r0, [r4, #14]
    8a22:	0a00      	lsrs	r0, r0, #8
    8a24:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    8a26:	2210      	movs	r2, #16
    8a28:	0021      	movs	r1, r4
    8a2a:	0028      	movs	r0, r5
    8a2c:	4b3b      	ldr	r3, [pc, #236]	; (8b1c <WriteDataBlockAndHeader+0x13c>)
    8a2e:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    8a30:	79a3      	ldrb	r3, [r4, #6]
    8a32:	79e2      	ldrb	r2, [r4, #7]
    8a34:	0212      	lsls	r2, r2, #8
    8a36:	431a      	orrs	r2, r3
    8a38:	0015      	movs	r5, r2
    8a3a:	3510      	adds	r5, #16
    8a3c:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    8a3e:	4653      	mov	r3, sl
    8a40:	2b00      	cmp	r3, #0
    8a42:	d012      	beq.n	8a6a <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    8a44:	2380      	movs	r3, #128	; 0x80
    8a46:	005b      	lsls	r3, r3, #1
    8a48:	429d      	cmp	r5, r3
    8a4a:	d909      	bls.n	8a60 <WriteDataBlockAndHeader+0x80>
    8a4c:	2600      	movs	r6, #0
    8a4e:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8a50:	2380      	movs	r3, #128	; 0x80
    8a52:	005b      	lsls	r3, r3, #1
    8a54:	469b      	mov	fp, r3
    8a56:	466a      	mov	r2, sp
    8a58:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8a5a:	4b2c      	ldr	r3, [pc, #176]	; (8b0c <WriteDataBlockAndHeader+0x12c>)
    8a5c:	4699      	mov	r9, r3
    8a5e:	e045      	b.n	8aec <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    8a60:	4651      	mov	r1, sl
    8a62:	482a      	ldr	r0, [pc, #168]	; (8b0c <WriteDataBlockAndHeader+0x12c>)
    8a64:	3010      	adds	r0, #16
    8a66:	4b2d      	ldr	r3, [pc, #180]	; (8b1c <WriteDataBlockAndHeader+0x13c>)
    8a68:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    8a6a:	79a3      	ldrb	r3, [r4, #6]
    8a6c:	79e2      	ldrb	r2, [r4, #7]
    8a6e:	0212      	lsls	r2, r2, #8
    8a70:	431a      	orrs	r2, r3
    8a72:	3210      	adds	r2, #16
    8a74:	2380      	movs	r3, #128	; 0x80
    8a76:	005b      	lsls	r3, r3, #1
    8a78:	429a      	cmp	r2, r3
    8a7a:	dd00      	ble.n	8a7e <WriteDataBlockAndHeader+0x9e>
    8a7c:	001a      	movs	r2, r3
    8a7e:	b292      	uxth	r2, r2
    8a80:	4b27      	ldr	r3, [pc, #156]	; (8b20 <WriteDataBlockAndHeader+0x140>)
    8a82:	8818      	ldrh	r0, [r3, #0]
    8a84:	4921      	ldr	r1, [pc, #132]	; (8b0c <WriteDataBlockAndHeader+0x12c>)
    8a86:	4b27      	ldr	r3, [pc, #156]	; (8b24 <WriteDataBlockAndHeader+0x144>)
    8a88:	4798      	blx	r3
    8a8a:	4680      	mov	r8, r0
    8a8c:	2800      	cmp	r0, #0
    8a8e:	d033      	beq.n	8af8 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    8a90:	79a3      	ldrb	r3, [r4, #6]
    8a92:	79e0      	ldrb	r0, [r4, #7]
    8a94:	0200      	lsls	r0, r0, #8
    8a96:	4318      	orrs	r0, r3
    8a98:	3010      	adds	r0, #16
    8a9a:	b280      	uxth	r0, r0
    8a9c:	2102      	movs	r1, #2
    8a9e:	4b22      	ldr	r3, [pc, #136]	; (8b28 <WriteDataBlockAndHeader+0x148>)
    8aa0:	4798      	blx	r3
}
    8aa2:	4640      	mov	r0, r8
    8aa4:	b003      	add	sp, #12
    8aa6:	bc3c      	pop	{r2, r3, r4, r5}
    8aa8:	4690      	mov	r8, r2
    8aaa:	4699      	mov	r9, r3
    8aac:	46a2      	mov	sl, r4
    8aae:	46ab      	mov	fp, r5
    8ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8ab2:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8ab4:	464b      	mov	r3, r9
    8ab6:	19d8      	adds	r0, r3, r7
    8ab8:	1be2      	subs	r2, r4, r7
    8aba:	4653      	mov	r3, sl
    8abc:	1999      	adds	r1, r3, r6
    8abe:	4b17      	ldr	r3, [pc, #92]	; (8b1c <WriteDataBlockAndHeader+0x13c>)
    8ac0:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    8ac2:	4b17      	ldr	r3, [pc, #92]	; (8b20 <WriteDataBlockAndHeader+0x140>)
    8ac4:	8818      	ldrh	r0, [r3, #0]
    8ac6:	0022      	movs	r2, r4
    8ac8:	4649      	mov	r1, r9
    8aca:	4b16      	ldr	r3, [pc, #88]	; (8b24 <WriteDataBlockAndHeader+0x144>)
    8acc:	4798      	blx	r3
    8ace:	4680      	mov	r8, r0
    8ad0:	2800      	cmp	r0, #0
    8ad2:	d0e6      	beq.n	8aa2 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    8ad4:	2102      	movs	r1, #2
    8ad6:	0020      	movs	r0, r4
    8ad8:	4b13      	ldr	r3, [pc, #76]	; (8b28 <WriteDataBlockAndHeader+0x148>)
    8ada:	4798      	blx	r3
                currentLength -= bytesToCommit;
    8adc:	1b2d      	subs	r5, r5, r4
    8ade:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    8ae0:	1be4      	subs	r4, r4, r7
    8ae2:	1936      	adds	r6, r6, r4
    8ae4:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    8ae6:	2700      	movs	r7, #0
            } while(currentLength > 0);
    8ae8:	2d00      	cmp	r5, #0
    8aea:	d0da      	beq.n	8aa2 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8aec:	1c2c      	adds	r4, r5, #0
    8aee:	455d      	cmp	r5, fp
    8af0:	d9df      	bls.n	8ab2 <WriteDataBlockAndHeader+0xd2>
    8af2:	466b      	mov	r3, sp
    8af4:	88dc      	ldrh	r4, [r3, #6]
    8af6:	e7dc      	b.n	8ab2 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    8af8:	79a3      	ldrb	r3, [r4, #6]
    8afa:	79e0      	ldrb	r0, [r4, #7]
    8afc:	0200      	lsls	r0, r0, #8
    8afe:	4318      	orrs	r0, r3
    8b00:	3010      	adds	r0, #16
    8b02:	b280      	uxth	r0, r0
    8b04:	2102      	movs	r1, #2
    8b06:	4b08      	ldr	r3, [pc, #32]	; (8b28 <WriteDataBlockAndHeader+0x148>)
    8b08:	4798      	blx	r3
        return false;
    8b0a:	e7ca      	b.n	8aa2 <WriteDataBlockAndHeader+0xc2>
    8b0c:	2000013c 	.word	0x2000013c
    8b10:	00016709 	.word	0x00016709
    8b14:	0000ffff 	.word	0x0000ffff
    8b18:	00008011 	.word	0x00008011
    8b1c:	000166f7 	.word	0x000166f7
    8b20:	20000282 	.word	0x20000282
    8b24:	00008349 	.word	0x00008349
    8b28:	00007fd5 	.word	0x00007fd5

00008b2c <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    8b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b2e:	46ce      	mov	lr, r9
    8b30:	4647      	mov	r7, r8
    8b32:	b580      	push	{r7, lr}
    8b34:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    8b36:	2200      	movs	r2, #0
    8b38:	4bb3      	ldr	r3, [pc, #716]	; (8e08 <S_Nv_EarlyInit+0x2dc>)
    8b3a:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    8b3c:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    8b3e:	2301      	movs	r3, #1
    8b40:	425b      	negs	r3, r3
    8b42:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    8b44:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8b46:	4eb1      	ldr	r6, [pc, #708]	; (8e0c <S_Nv_EarlyInit+0x2e0>)
    8b48:	2312      	movs	r3, #18
    8b4a:	aa0b      	add	r2, sp, #44	; 0x2c
    8b4c:	2100      	movs	r1, #0
    8b4e:	0020      	movs	r0, r4
    8b50:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    8b52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b56:	9301      	str	r3, [sp, #4]
    8b58:	406b      	eors	r3, r5
    8b5a:	3301      	adds	r3, #1
    8b5c:	d01d      	beq.n	8b9a <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    8b5e:	3401      	adds	r4, #1
    8b60:	b2e4      	uxtb	r4, r4
    8b62:	2c02      	cmp	r4, #2
    8b64:	d1f0      	bne.n	8b48 <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    8b66:	2fff      	cmp	r7, #255	; 0xff
    8b68:	d057      	beq.n	8c1a <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    8b6a:	4ba9      	ldr	r3, [pc, #676]	; (8e10 <S_Nv_EarlyInit+0x2e4>)
    8b6c:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    8b6e:	4643      	mov	r3, r8
    8b70:	2b01      	cmp	r3, #1
    8b72:	d100      	bne.n	8b76 <S_Nv_EarlyInit+0x4a>
    8b74:	e07b      	b.n	8c6e <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    8b76:	4643      	mov	r3, r8
    8b78:	2b02      	cmp	r3, #2
    8b7a:	d16a      	bne.n	8c52 <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    8b7c:	2280      	movs	r2, #128	; 0x80
    8b7e:	0052      	lsls	r2, r2, #1
    8b80:	4ba4      	ldr	r3, [pc, #656]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
    8b82:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    8b84:	2312      	movs	r3, #18
    8b86:	aa06      	add	r2, sp, #24
    8b88:	2100      	movs	r1, #0
    8b8a:	0038      	movs	r0, r7
    8b8c:	4c9f      	ldr	r4, [pc, #636]	; (8e0c <S_Nv_EarlyInit+0x2e0>)
    8b8e:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    8b90:	4da0      	ldr	r5, [pc, #640]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    8b92:	4ba1      	ldr	r3, [pc, #644]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8b94:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b96:	002e      	movs	r6, r5
    8b98:	e10f      	b.n	8dba <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    8b9a:	ab02      	add	r3, sp, #8
    8b9c:	2226      	movs	r2, #38	; 0x26
    8b9e:	189b      	adds	r3, r3, r2
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	2b41      	cmp	r3, #65	; 0x41
    8ba4:	d1db      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    8ba6:	ab02      	add	r3, sp, #8
    8ba8:	3201      	adds	r2, #1
    8baa:	189b      	adds	r3, r3, r2
    8bac:	781b      	ldrb	r3, [r3, #0]
    8bae:	2b54      	cmp	r3, #84	; 0x54
    8bb0:	d1d5      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    8bb2:	ab02      	add	r3, sp, #8
    8bb4:	3201      	adds	r2, #1
    8bb6:	189b      	adds	r3, r3, r2
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	2b53      	cmp	r3, #83	; 0x53
    8bbc:	d1cf      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    8bbe:	ab02      	add	r3, sp, #8
    8bc0:	3201      	adds	r2, #1
    8bc2:	189b      	adds	r3, r3, r2
    8bc4:	781b      	ldrb	r3, [r3, #0]
    8bc6:	2b4e      	cmp	r3, #78	; 0x4e
    8bc8:	d1c9      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    8bca:	ab02      	add	r3, sp, #8
    8bcc:	3201      	adds	r2, #1
    8bce:	189b      	adds	r3, r3, r2
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	2b76      	cmp	r3, #118	; 0x76
    8bd4:	d1c3      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    8bd6:	ab02      	add	r3, sp, #8
    8bd8:	3201      	adds	r2, #1
    8bda:	189b      	adds	r3, r3, r2
    8bdc:	781b      	ldrb	r3, [r3, #0]
    8bde:	2b31      	cmp	r3, #49	; 0x31
    8be0:	d106      	bne.n	8bf0 <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    8be2:	ab02      	add	r3, sp, #8
    8be4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8be6:	2b00      	cmp	r3, #0
    8be8:	d1b9      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    8bea:	2301      	movs	r3, #1
    8bec:	4698      	mov	r8, r3
    8bee:	e00f      	b.n	8c10 <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    8bf0:	2b32      	cmp	r3, #50	; 0x32
    8bf2:	d1b4      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8bf4:	4a89      	ldr	r2, [pc, #548]	; (8e1c <S_Nv_EarlyInit+0x2f0>)
    8bf6:	2110      	movs	r1, #16
    8bf8:	2026      	movs	r0, #38	; 0x26
    8bfa:	ab02      	add	r3, sp, #8
    8bfc:	469c      	mov	ip, r3
    8bfe:	4460      	add	r0, ip
    8c00:	4b87      	ldr	r3, [pc, #540]	; (8e20 <S_Nv_EarlyInit+0x2f4>)
    8c02:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    8c04:	ab02      	add	r3, sp, #8
    8c06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8c08:	4283      	cmp	r3, r0
    8c0a:	d1a8      	bne.n	8b5e <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    8c0c:	2302      	movs	r3, #2
    8c0e:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    8c10:	454d      	cmp	r5, r9
    8c12:	d2a4      	bcs.n	8b5e <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    8c14:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    8c16:	0027      	movs	r7, r4
    8c18:	e7a1      	b.n	8b5e <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    8c1a:	2200      	movs	r2, #0
    8c1c:	4b7c      	ldr	r3, [pc, #496]	; (8e10 <S_Nv_EarlyInit+0x2e4>)
    8c1e:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    8c20:	4c80      	ldr	r4, [pc, #512]	; (8e24 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    8c22:	4e81      	ldr	r6, [pc, #516]	; (8e28 <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    8c24:	4d81      	ldr	r5, [pc, #516]	; (8e2c <S_Nv_EarlyInit+0x300>)
    8c26:	e006      	b.n	8c36 <S_Nv_EarlyInit+0x10a>
            s_sector++;
    8c28:	4a79      	ldr	r2, [pc, #484]	; (8e10 <S_Nv_EarlyInit+0x2e4>)
    8c2a:	7813      	ldrb	r3, [r2, #0]
    8c2c:	3301      	adds	r3, #1
    8c2e:	b2db      	uxtb	r3, r3
    8c30:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8c32:	2b01      	cmp	r3, #1
    8c34:	d815      	bhi.n	8c62 <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    8c36:	47a0      	blx	r4
    8c38:	2800      	cmp	r0, #0
    8c3a:	d0f5      	beq.n	8c28 <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    8c3c:	2301      	movs	r3, #1
    8c3e:	425b      	negs	r3, r3
    8c40:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    8c42:	2002      	movs	r0, #2
    8c44:	4240      	negs	r0, r0
    8c46:	47a8      	blx	r5
    8c48:	2800      	cmp	r0, #0
    8c4a:	d0ed      	beq.n	8c28 <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    8c4c:	2200      	movs	r2, #0
    8c4e:	4b6e      	ldr	r3, [pc, #440]	; (8e08 <S_Nv_EarlyInit+0x2dc>)
    8c50:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    8c52:	2201      	movs	r2, #1
    8c54:	4b76      	ldr	r3, [pc, #472]	; (8e30 <S_Nv_EarlyInit+0x304>)
    8c56:	701a      	strb	r2, [r3, #0]
}
    8c58:	b011      	add	sp, #68	; 0x44
    8c5a:	bc0c      	pop	{r2, r3}
    8c5c:	4690      	mov	r8, r2
    8c5e:	4699      	mov	r9, r3
    8c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    8c62:	4b74      	ldr	r3, [pc, #464]	; (8e34 <S_Nv_EarlyInit+0x308>)
    8c64:	4a74      	ldr	r2, [pc, #464]	; (8e38 <S_Nv_EarlyInit+0x30c>)
    8c66:	4975      	ldr	r1, [pc, #468]	; (8e3c <S_Nv_EarlyInit+0x310>)
    8c68:	4875      	ldr	r0, [pc, #468]	; (8e40 <S_Nv_EarlyInit+0x314>)
    8c6a:	4c76      	ldr	r4, [pc, #472]	; (8e44 <S_Nv_EarlyInit+0x318>)
    8c6c:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    8c6e:	2210      	movs	r2, #16
    8c70:	4b68      	ldr	r3, [pc, #416]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
    8c72:	801a      	strh	r2, [r3, #0]
    8c74:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8c76:	4e66      	ldr	r6, [pc, #408]	; (8e10 <S_Nv_EarlyInit+0x2e4>)
    8c78:	4d64      	ldr	r5, [pc, #400]	; (8e0c <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    8c7a:	4f69      	ldr	r7, [pc, #420]	; (8e20 <S_Nv_EarlyInit+0x2f4>)
    8c7c:	e072      	b.n	8d64 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    8c7e:	ab06      	add	r3, sp, #24
    8c80:	881b      	ldrh	r3, [r3, #0]
    8c82:	2b00      	cmp	r3, #0
    8c84:	d007      	beq.n	8c96 <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    8c86:	ab06      	add	r3, sp, #24
    8c88:	88d8      	ldrh	r0, [r3, #6]
    8c8a:	3010      	adds	r0, #16
    8c8c:	b280      	uxth	r0, r0
    8c8e:	2101      	movs	r1, #1
    8c90:	4b61      	ldr	r3, [pc, #388]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8c92:	4798      	blx	r3
    8c94:	e061      	b.n	8d5a <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    8c96:	ab06      	add	r3, sp, #24
    8c98:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    8c9a:	0020      	movs	r0, r4
    8c9c:	4b6a      	ldr	r3, [pc, #424]	; (8e48 <S_Nv_EarlyInit+0x31c>)
    8c9e:	4798      	blx	r3
                if (cache == NULL)
    8ca0:	2800      	cmp	r0, #0
    8ca2:	d010      	beq.n	8cc6 <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    8ca4:	4b5b      	ldr	r3, [pc, #364]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
    8ca6:	781a      	ldrb	r2, [r3, #0]
    8ca8:	7082      	strb	r2, [r0, #2]
    8caa:	785b      	ldrb	r3, [r3, #1]
    8cac:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    8cae:	ab06      	add	r3, sp, #24
    8cb0:	891b      	ldrh	r3, [r3, #8]
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	d00b      	beq.n	8cce <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    8cb6:	ab06      	add	r3, sp, #24
    8cb8:	88d8      	ldrh	r0, [r3, #6]
    8cba:	3010      	adds	r0, #16
    8cbc:	b280      	uxth	r0, r0
    8cbe:	2101      	movs	r1, #1
    8cc0:	4b55      	ldr	r3, [pc, #340]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8cc2:	4798      	blx	r3
    8cc4:	e049      	b.n	8d5a <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    8cc6:	0020      	movs	r0, r4
    8cc8:	4b60      	ldr	r3, [pc, #384]	; (8e4c <S_Nv_EarlyInit+0x320>)
    8cca:	4798      	blx	r3
    8ccc:	e7ea      	b.n	8ca4 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    8cce:	0020      	movs	r0, r4
    8cd0:	4b5f      	ldr	r3, [pc, #380]	; (8e50 <S_Nv_EarlyInit+0x324>)
    8cd2:	4798      	blx	r3
    8cd4:	e7ef      	b.n	8cb6 <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    8cd6:	4b4f      	ldr	r3, [pc, #316]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
    8cd8:	8819      	ldrh	r1, [r3, #0]
    8cda:	4b4d      	ldr	r3, [pc, #308]	; (8e10 <S_Nv_EarlyInit+0x2e4>)
    8cdc:	7818      	ldrb	r0, [r3, #0]
    8cde:	aa02      	add	r2, sp, #8
    8ce0:	4b5c      	ldr	r3, [pc, #368]	; (8e54 <S_Nv_EarlyInit+0x328>)
    8ce2:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    8ce4:	ab02      	add	r3, sp, #8
    8ce6:	881b      	ldrh	r3, [r3, #0]
    8ce8:	4283      	cmp	r3, r0
    8cea:	d007      	beq.n	8cfc <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    8cec:	ab02      	add	r3, sp, #8
    8cee:	88d8      	ldrh	r0, [r3, #6]
    8cf0:	3010      	adds	r0, #16
    8cf2:	b280      	uxth	r0, r0
    8cf4:	0021      	movs	r1, r4
    8cf6:	4b48      	ldr	r3, [pc, #288]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8cf8:	4798      	blx	r3
    8cfa:	e05e      	b.n	8dba <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    8cfc:	ab02      	add	r3, sp, #8
    8cfe:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    8d00:	0038      	movs	r0, r7
    8d02:	4b51      	ldr	r3, [pc, #324]	; (8e48 <S_Nv_EarlyInit+0x31c>)
    8d04:	4798      	blx	r3
                    if (cache == NULL)
    8d06:	2800      	cmp	r0, #0
    8d08:	d010      	beq.n	8d2c <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    8d0a:	4b42      	ldr	r3, [pc, #264]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
    8d0c:	781a      	ldrb	r2, [r3, #0]
    8d0e:	7082      	strb	r2, [r0, #2]
    8d10:	785b      	ldrb	r3, [r3, #1]
    8d12:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    8d14:	ab02      	add	r3, sp, #8
    8d16:	891b      	ldrh	r3, [r3, #8]
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d00b      	beq.n	8d34 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    8d1c:	ab02      	add	r3, sp, #8
    8d1e:	88d8      	ldrh	r0, [r3, #6]
    8d20:	3010      	adds	r0, #16
    8d22:	b280      	uxth	r0, r0
    8d24:	0021      	movs	r1, r4
    8d26:	4b3c      	ldr	r3, [pc, #240]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8d28:	4798      	blx	r3
    8d2a:	e046      	b.n	8dba <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    8d2c:	0038      	movs	r0, r7
    8d2e:	4b47      	ldr	r3, [pc, #284]	; (8e4c <S_Nv_EarlyInit+0x320>)
    8d30:	4798      	blx	r3
    8d32:	e7ea      	b.n	8d0a <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    8d34:	0038      	movs	r0, r7
    8d36:	4b46      	ldr	r3, [pc, #280]	; (8e50 <S_Nv_EarlyInit+0x324>)
    8d38:	4798      	blx	r3
    8d3a:	e7ef      	b.n	8d1c <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    8d3c:	ab06      	add	r3, sp, #24
    8d3e:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    8d40:	4a36      	ldr	r2, [pc, #216]	; (8e1c <S_Nv_EarlyInit+0x2f0>)
    8d42:	210c      	movs	r1, #12
    8d44:	2012      	movs	r0, #18
    8d46:	ab02      	add	r3, sp, #8
    8d48:	469c      	mov	ip, r3
    8d4a:	4460      	add	r0, ip
    8d4c:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    8d4e:	4284      	cmp	r4, r0
    8d50:	d095      	beq.n	8c7e <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    8d52:	2101      	movs	r1, #1
    8d54:	2010      	movs	r0, #16
    8d56:	4b30      	ldr	r3, [pc, #192]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8d58:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    8d5a:	4b2e      	ldr	r3, [pc, #184]	; (8e14 <S_Nv_EarlyInit+0x2e8>)
    8d5c:	8819      	ldrh	r1, [r3, #0]
    8d5e:	4b3e      	ldr	r3, [pc, #248]	; (8e58 <S_Nv_EarlyInit+0x32c>)
    8d60:	4299      	cmp	r1, r3
    8d62:	d812      	bhi.n	8d8a <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8d64:	ac06      	add	r4, sp, #24
    8d66:	7830      	ldrb	r0, [r6, #0]
    8d68:	2310      	movs	r3, #16
    8d6a:	0022      	movs	r2, r4
    8d6c:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    8d6e:	7823      	ldrb	r3, [r4, #0]
    8d70:	2bff      	cmp	r3, #255	; 0xff
    8d72:	d1e3      	bne.n	8d3c <S_Nv_EarlyInit+0x210>
    8d74:	ab06      	add	r3, sp, #24
    8d76:	211f      	movs	r1, #31
    8d78:	aa02      	add	r2, sp, #8
    8d7a:	4694      	mov	ip, r2
    8d7c:	4461      	add	r1, ip
    8d7e:	785a      	ldrb	r2, [r3, #1]
    8d80:	2aff      	cmp	r2, #255	; 0xff
    8d82:	d1db      	bne.n	8d3c <S_Nv_EarlyInit+0x210>
    8d84:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    8d86:	428b      	cmp	r3, r1
    8d88:	d1f9      	bne.n	8d7e <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    8d8a:	4b34      	ldr	r3, [pc, #208]	; (8e5c <S_Nv_EarlyInit+0x330>)
    8d8c:	4798      	blx	r3
    8d8e:	2800      	cmp	r0, #0
    8d90:	d000      	beq.n	8d94 <S_Nv_EarlyInit+0x268>
    8d92:	e75e      	b.n	8c52 <S_Nv_EarlyInit+0x126>
            assert(false);
    8d94:	4b27      	ldr	r3, [pc, #156]	; (8e34 <S_Nv_EarlyInit+0x308>)
    8d96:	4a32      	ldr	r2, [pc, #200]	; (8e60 <S_Nv_EarlyInit+0x334>)
    8d98:	4932      	ldr	r1, [pc, #200]	; (8e64 <S_Nv_EarlyInit+0x338>)
    8d9a:	4829      	ldr	r0, [pc, #164]	; (8e40 <S_Nv_EarlyInit+0x314>)
    8d9c:	4c29      	ldr	r4, [pc, #164]	; (8e44 <S_Nv_EarlyInit+0x318>)
    8d9e:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    8da0:	ab02      	add	r3, sp, #8
    8da2:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8da4:	4a1d      	ldr	r2, [pc, #116]	; (8e1c <S_Nv_EarlyInit+0x2f0>)
    8da6:	210e      	movs	r1, #14
    8da8:	0018      	movs	r0, r3
    8daa:	4b1d      	ldr	r3, [pc, #116]	; (8e20 <S_Nv_EarlyInit+0x2f4>)
    8dac:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    8dae:	4287      	cmp	r7, r0
    8db0:	d091      	beq.n	8cd6 <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    8db2:	0021      	movs	r1, r4
    8db4:	2010      	movs	r0, #16
    8db6:	4b18      	ldr	r3, [pc, #96]	; (8e18 <S_Nv_EarlyInit+0x2ec>)
    8db8:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    8dba:	882b      	ldrh	r3, [r5, #0]
    8dbc:	4a26      	ldr	r2, [pc, #152]	; (8e58 <S_Nv_EarlyInit+0x32c>)
    8dbe:	4293      	cmp	r3, r2
    8dc0:	d900      	bls.n	8dc4 <S_Nv_EarlyInit+0x298>
    8dc2:	e746      	b.n	8c52 <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    8dc4:	aa06      	add	r2, sp, #24
    8dc6:	8a12      	ldrh	r2, [r2, #16]
    8dc8:	4914      	ldr	r1, [pc, #80]	; (8e1c <S_Nv_EarlyInit+0x2f0>)
    8dca:	428a      	cmp	r2, r1
    8dcc:	d002      	beq.n	8dd4 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    8dce:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    8dd0:	429a      	cmp	r2, r3
    8dd2:	d803      	bhi.n	8ddc <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    8dd4:	2102      	movs	r1, #2
    8dd6:	2000      	movs	r0, #0
    8dd8:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    8dda:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8ddc:	8831      	ldrh	r1, [r6, #0]
    8dde:	4b0c      	ldr	r3, [pc, #48]	; (8e10 <S_Nv_EarlyInit+0x2e4>)
    8de0:	7818      	ldrb	r0, [r3, #0]
    8de2:	2310      	movs	r3, #16
    8de4:	aa02      	add	r2, sp, #8
    8de6:	4f09      	ldr	r7, [pc, #36]	; (8e0c <S_Nv_EarlyInit+0x2e0>)
    8de8:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    8dea:	ab02      	add	r3, sp, #8
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	2bff      	cmp	r3, #255	; 0xff
    8df0:	d1d6      	bne.n	8da0 <S_Nv_EarlyInit+0x274>
    8df2:	ab02      	add	r3, sp, #8
    8df4:	210f      	movs	r1, #15
    8df6:	469c      	mov	ip, r3
    8df8:	4461      	add	r1, ip
    8dfa:	785a      	ldrb	r2, [r3, #1]
    8dfc:	2aff      	cmp	r2, #255	; 0xff
    8dfe:	d1cf      	bne.n	8da0 <S_Nv_EarlyInit+0x274>
    8e00:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    8e02:	428b      	cmp	r3, r1
    8e04:	d1f9      	bne.n	8dfa <S_Nv_EarlyInit+0x2ce>
    8e06:	e724      	b.n	8c52 <S_Nv_EarlyInit+0x126>
    8e08:	20000278 	.word	0x20000278
    8e0c:	00007d69 	.word	0x00007d69
    8e10:	20000280 	.word	0x20000280
    8e14:	20000282 	.word	0x20000282
    8e18:	00007fd5 	.word	0x00007fd5
    8e1c:	0000ffff 	.word	0x0000ffff
    8e20:	00008011 	.word	0x00008011
    8e24:	00008315 	.word	0x00008315
    8e28:	2000027a 	.word	0x2000027a
    8e2c:	0000837d 	.word	0x0000837d
    8e30:	20000254 	.word	0x20000254
    8e34:	000184b8 	.word	0x000184b8
    8e38:	00018674 	.word	0x00018674
    8e3c:	0000052b 	.word	0x0000052b
    8e40:	00018534 	.word	0x00018534
    8e44:	00016635 	.word	0x00016635
    8e48:	000081b1 	.word	0x000081b1
    8e4c:	00008241 	.word	0x00008241
    8e50:	000082a1 	.word	0x000082a1
    8e54:	00008109 	.word	0x00008109
    8e58:	00001fff 	.word	0x00001fff
    8e5c:	0000847d 	.word	0x0000847d
    8e60:	00018634 	.word	0x00018634
    8e64:	00000336 	.word	0x00000336

00008e68 <S_Nv_Init>:


void S_Nv_Init(void)
{
    8e68:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    8e6a:	4b08      	ldr	r3, [pc, #32]	; (8e8c <S_Nv_Init+0x24>)
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d008      	beq.n	8e84 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    8e72:	4b07      	ldr	r3, [pc, #28]	; (8e90 <S_Nv_Init+0x28>)
    8e74:	4a07      	ldr	r2, [pc, #28]	; (8e94 <S_Nv_Init+0x2c>)
    8e76:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    8e78:	4a07      	ldr	r2, [pc, #28]	; (8e98 <S_Nv_Init+0x30>)
    8e7a:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    8e7c:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8e7e:	2200      	movs	r2, #0
    8e80:	731a      	strb	r2, [r3, #12]
}
    8e82:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    8e84:	4b05      	ldr	r3, [pc, #20]	; (8e9c <S_Nv_Init+0x34>)
    8e86:	4798      	blx	r3
    8e88:	e7f3      	b.n	8e72 <S_Nv_Init+0xa>
    8e8a:	46c0      	nop			; (mov r8, r8)
    8e8c:	20000254 	.word	0x20000254
    8e90:	2000023c 	.word	0x2000023c
    8e94:	000082f1 	.word	0x000082f1
    8e98:	00001b58 	.word	0x00001b58
    8e9c:	00008b2d 	.word	0x00008b2d

00008ea0 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ea2:	46ce      	mov	lr, r9
    8ea4:	4647      	mov	r7, r8
    8ea6:	b580      	push	{r7, lr}
    8ea8:	b087      	sub	sp, #28
    8eaa:	0004      	movs	r4, r0
    8eac:	9101      	str	r1, [sp, #4]
    8eae:	0015      	movs	r5, r2
    8eb0:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    8eb2:	2800      	cmp	r0, #0
    8eb4:	d00c      	beq.n	8ed0 <S_Nv_Write_Impl+0x30>
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d00a      	beq.n	8ed0 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    8eba:	4b35      	ldr	r3, [pc, #212]	; (8f90 <S_Nv_Write_Impl+0xf0>)
    8ebc:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8ebe:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8ec0:	2800      	cmp	r0, #0
    8ec2:	d00b      	beq.n	8edc <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    8ec4:	0018      	movs	r0, r3
    8ec6:	b007      	add	sp, #28
    8ec8:	bc0c      	pop	{r2, r3}
    8eca:	4690      	mov	r8, r2
    8ecc:	4699      	mov	r9, r3
    8ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8ed0:	4b30      	ldr	r3, [pc, #192]	; (8f94 <S_Nv_Write_Impl+0xf4>)
    8ed2:	4a31      	ldr	r2, [pc, #196]	; (8f98 <S_Nv_Write_Impl+0xf8>)
    8ed4:	4931      	ldr	r1, [pc, #196]	; (8f9c <S_Nv_Write_Impl+0xfc>)
    8ed6:	4832      	ldr	r0, [pc, #200]	; (8fa0 <S_Nv_Write_Impl+0x100>)
    8ed8:	4c32      	ldr	r4, [pc, #200]	; (8fa4 <S_Nv_Write_Impl+0x104>)
    8eda:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    8edc:	0028      	movs	r0, r5
    8ede:	3010      	adds	r0, #16
    8ee0:	b280      	uxth	r0, r0
    8ee2:	4b31      	ldr	r3, [pc, #196]	; (8fa8 <S_Nv_Write_Impl+0x108>)
    8ee4:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    8ee6:	0020      	movs	r0, r4
    8ee8:	4b30      	ldr	r3, [pc, #192]	; (8fac <S_Nv_Write_Impl+0x10c>)
    8eea:	4798      	blx	r3
    8eec:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    8eee:	2303      	movs	r3, #3
    if ( cache == NULL )
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d0e7      	beq.n	8ec4 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    8ef4:	7883      	ldrb	r3, [r0, #2]
    8ef6:	78c4      	ldrb	r4, [r0, #3]
    8ef8:	0224      	lsls	r4, r4, #8
    8efa:	431c      	orrs	r4, r3
    8efc:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8efe:	4b2c      	ldr	r3, [pc, #176]	; (8fb0 <S_Nv_Write_Impl+0x110>)
    8f00:	7818      	ldrb	r0, [r3, #0]
    8f02:	2310      	movs	r3, #16
    8f04:	aa02      	add	r2, sp, #8
    8f06:	0021      	movs	r1, r4
    8f08:	4c2a      	ldr	r4, [pc, #168]	; (8fb4 <S_Nv_Write_Impl+0x114>)
    8f0a:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8f0c:	ab02      	add	r3, sp, #8
    8f0e:	8919      	ldrh	r1, [r3, #8]
    8f10:	9b01      	ldr	r3, [sp, #4]
    8f12:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    8f14:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8f16:	428a      	cmp	r2, r1
    8f18:	d8d4      	bhi.n	8ec4 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    8f1a:	ab02      	add	r3, sp, #8
    8f1c:	466a      	mov	r2, sp
    8f1e:	8892      	ldrh	r2, [r2, #4]
    8f20:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    8f22:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    8f24:	4642      	mov	r2, r8
    8f26:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    8f28:	428d      	cmp	r5, r1
    8f2a:	d02c      	beq.n	8f86 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    8f2c:	ab02      	add	r3, sp, #8
    8f2e:	899b      	ldrh	r3, [r3, #12]
    8f30:	3301      	adds	r3, #1
    8f32:	aa02      	add	r2, sp, #8
    8f34:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    8f36:	4b20      	ldr	r3, [pc, #128]	; (8fb8 <S_Nv_Write_Impl+0x118>)
    8f38:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8f3a:	0039      	movs	r1, r7
    8f3c:	a802      	add	r0, sp, #8
    8f3e:	4b1f      	ldr	r3, [pc, #124]	; (8fbc <S_Nv_Write_Impl+0x11c>)
    8f40:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8f42:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8f44:	2800      	cmp	r0, #0
    8f46:	d0bd      	beq.n	8ec4 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    8f48:	70b4      	strb	r4, [r6, #2]
    8f4a:	0a24      	lsrs	r4, r4, #8
    8f4c:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8f4e:	ab02      	add	r3, sp, #8
    8f50:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8f52:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8f54:	2a64      	cmp	r2, #100	; 0x64
    8f56:	d9b5      	bls.n	8ec4 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    8f58:	ab02      	add	r3, sp, #8
    8f5a:	885a      	ldrh	r2, [r3, #2]
    8f5c:	4b18      	ldr	r3, [pc, #96]	; (8fc0 <S_Nv_Write_Impl+0x120>)
    8f5e:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    8f60:	2200      	movs	r2, #0
    8f62:	4b18      	ldr	r3, [pc, #96]	; (8fc4 <S_Nv_Write_Impl+0x124>)
    8f64:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    8f66:	4818      	ldr	r0, [pc, #96]	; (8fc8 <S_Nv_Write_Impl+0x128>)
    8f68:	4b18      	ldr	r3, [pc, #96]	; (8fcc <S_Nv_Write_Impl+0x12c>)
    8f6a:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    8f6c:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    8f6e:	2800      	cmp	r0, #0
    8f70:	d1a8      	bne.n	8ec4 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    8f72:	4b15      	ldr	r3, [pc, #84]	; (8fc8 <S_Nv_Write_Impl+0x128>)
    8f74:	4a16      	ldr	r2, [pc, #88]	; (8fd0 <S_Nv_Write_Impl+0x130>)
    8f76:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    8f78:	4a16      	ldr	r2, [pc, #88]	; (8fd4 <S_Nv_Write_Impl+0x134>)
    8f7a:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    8f7c:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8f7e:	2200      	movs	r2, #0
    8f80:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8f82:	2300      	movs	r3, #0
    8f84:	e79e      	b.n	8ec4 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    8f86:	2300      	movs	r3, #0
    8f88:	aa02      	add	r2, sp, #8
    8f8a:	8193      	strh	r3, [r2, #12]
    8f8c:	e7d3      	b.n	8f36 <S_Nv_Write_Impl+0x96>
    8f8e:	46c0      	nop			; (mov r8, r8)
    8f90:	00007fb9 	.word	0x00007fb9
    8f94:	000185cc 	.word	0x000185cc
    8f98:	00018698 	.word	0x00018698
    8f9c:	00000596 	.word	0x00000596
    8fa0:	00018534 	.word	0x00018534
    8fa4:	00016635 	.word	0x00016635
    8fa8:	0000872d 	.word	0x0000872d
    8fac:	000081b1 	.word	0x000081b1
    8fb0:	20000280 	.word	0x20000280
    8fb4:	00007d69 	.word	0x00007d69
    8fb8:	20000282 	.word	0x20000282
    8fbc:	000089e1 	.word	0x000089e1
    8fc0:	20000250 	.word	0x20000250
    8fc4:	20000252 	.word	0x20000252
    8fc8:	20000110 	.word	0x20000110
    8fcc:	0000bed9 	.word	0x0000bed9
    8fd0:	000089d5 	.word	0x000089d5
    8fd4:	00000bb8 	.word	0x00000bb8

00008fd8 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fda:	b083      	sub	sp, #12
    8fdc:	000c      	movs	r4, r1
    8fde:	0015      	movs	r5, r2
    8fe0:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    8fe2:	2800      	cmp	r0, #0
    8fe4:	d009      	beq.n	8ffa <S_Nv_Read_Impl+0x22>
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d007      	beq.n	8ffa <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    8fea:	4b10      	ldr	r3, [pc, #64]	; (902c <S_Nv_Read_Impl+0x54>)
    8fec:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    8fee:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d108      	bne.n	9006 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    8ff4:	0018      	movs	r0, r3
    8ff6:	b003      	add	sp, #12
    8ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8ffa:	4b0d      	ldr	r3, [pc, #52]	; (9030 <S_Nv_Read_Impl+0x58>)
    8ffc:	4a0d      	ldr	r2, [pc, #52]	; (9034 <S_Nv_Read_Impl+0x5c>)
    8ffe:	490e      	ldr	r1, [pc, #56]	; (9038 <S_Nv_Read_Impl+0x60>)
    9000:	480e      	ldr	r0, [pc, #56]	; (903c <S_Nv_Read_Impl+0x64>)
    9002:	4c0f      	ldr	r4, [pc, #60]	; (9040 <S_Nv_Read_Impl+0x68>)
    9004:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9006:	1962      	adds	r2, r4, r5
    9008:	490e      	ldr	r1, [pc, #56]	; (9044 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    900a:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    900c:	428a      	cmp	r2, r1
    900e:	d8f1      	bhi.n	8ff4 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    9010:	4b0d      	ldr	r3, [pc, #52]	; (9048 <S_Nv_Read_Impl+0x70>)
    9012:	781f      	ldrb	r7, [r3, #0]
    9014:	9600      	str	r6, [sp, #0]
    9016:	002b      	movs	r3, r5
    9018:	0022      	movs	r2, r4
    901a:	0001      	movs	r1, r0
    901c:	0038      	movs	r0, r7
    901e:	4c0b      	ldr	r4, [pc, #44]	; (904c <S_Nv_Read_Impl+0x74>)
    9020:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    9022:	4243      	negs	r3, r0
    9024:	4143      	adcs	r3, r0
    9026:	009b      	lsls	r3, r3, #2
    9028:	e7e4      	b.n	8ff4 <S_Nv_Read_Impl+0x1c>
    902a:	46c0      	nop			; (mov r8, r8)
    902c:	00008225 	.word	0x00008225
    9030:	000185cc 	.word	0x000185cc
    9034:	000186a8 	.word	0x000186a8
    9038:	000005ee 	.word	0x000005ee
    903c:	00018534 	.word	0x00018534
    9040:	00016635 	.word	0x00016635
    9044:	0000ffff 	.word	0x0000ffff
    9048:	20000280 	.word	0x20000280
    904c:	00008051 	.word	0x00008051

00009050 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    9050:	b510      	push	{r4, lr}
    9052:	b084      	sub	sp, #16
    assert(id != 0u);
    9054:	2800      	cmp	r0, #0
    9056:	d005      	beq.n	9064 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    9058:	4b0a      	ldr	r3, [pc, #40]	; (9084 <S_Nv_ItemLength_Impl+0x34>)
    905a:	4798      	blx	r3
    905c:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    905e:	d107      	bne.n	9070 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    9060:	b004      	add	sp, #16
    9062:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    9064:	4b08      	ldr	r3, [pc, #32]	; (9088 <S_Nv_ItemLength_Impl+0x38>)
    9066:	4a09      	ldr	r2, [pc, #36]	; (908c <S_Nv_ItemLength_Impl+0x3c>)
    9068:	4909      	ldr	r1, [pc, #36]	; (9090 <S_Nv_ItemLength_Impl+0x40>)
    906a:	480a      	ldr	r0, [pc, #40]	; (9094 <S_Nv_ItemLength_Impl+0x44>)
    906c:	4c0a      	ldr	r4, [pc, #40]	; (9098 <S_Nv_ItemLength_Impl+0x48>)
    906e:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9070:	4b0a      	ldr	r3, [pc, #40]	; (909c <S_Nv_ItemLength_Impl+0x4c>)
    9072:	7818      	ldrb	r0, [r3, #0]
    9074:	2310      	movs	r3, #16
    9076:	466a      	mov	r2, sp
    9078:	4c09      	ldr	r4, [pc, #36]	; (90a0 <S_Nv_ItemLength_Impl+0x50>)
    907a:	47a0      	blx	r4
    return blockHeader.itemLength;
    907c:	466b      	mov	r3, sp
    907e:	8918      	ldrh	r0, [r3, #8]
    9080:	e7ee      	b.n	9060 <S_Nv_ItemLength_Impl+0x10>
    9082:	46c0      	nop			; (mov r8, r8)
    9084:	00008225 	.word	0x00008225
    9088:	000185c0 	.word	0x000185c0
    908c:	000186b8 	.word	0x000186b8
    9090:	0000060b 	.word	0x0000060b
    9094:	00018534 	.word	0x00018534
    9098:	00016635 	.word	0x00016635
    909c:	20000280 	.word	0x20000280
    90a0:	00007d69 	.word	0x00007d69

000090a4 <S_Nv_ItemInit_Impl>:
{
    90a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90a6:	b085      	sub	sp, #20
    90a8:	0004      	movs	r4, r0
    90aa:	000e      	movs	r6, r1
    90ac:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    90ae:	1e43      	subs	r3, r0, #1
    90b0:	b29b      	uxth	r3, r3
    90b2:	4a2e      	ldr	r2, [pc, #184]	; (916c <S_Nv_ItemInit_Impl+0xc8>)
    90b4:	4293      	cmp	r3, r2
    90b6:	d81e      	bhi.n	90f6 <S_Nv_ItemInit_Impl+0x52>
    90b8:	2380      	movs	r3, #128	; 0x80
    90ba:	011b      	lsls	r3, r3, #4
    90bc:	4299      	cmp	r1, r3
    90be:	d81a      	bhi.n	90f6 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    90c0:	4b2b      	ldr	r3, [pc, #172]	; (9170 <S_Nv_ItemInit_Impl+0xcc>)
    90c2:	4798      	blx	r3
    90c4:	2800      	cmp	r0, #0
    90c6:	d01d      	beq.n	9104 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    90c8:	0020      	movs	r0, r4
    90ca:	4b2a      	ldr	r3, [pc, #168]	; (9174 <S_Nv_ItemInit_Impl+0xd0>)
    90cc:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    90ce:	4286      	cmp	r6, r0
    90d0:	d007      	beq.n	90e2 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    90d2:	4b29      	ldr	r3, [pc, #164]	; (9178 <S_Nv_ItemInit_Impl+0xd4>)
    90d4:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    90d6:	4b29      	ldr	r3, [pc, #164]	; (917c <S_Nv_ItemInit_Impl+0xd8>)
    90d8:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    90da:	4b29      	ldr	r3, [pc, #164]	; (9180 <S_Nv_ItemInit_Impl+0xdc>)
    90dc:	4798      	blx	r3
    90de:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    90e0:	d115      	bne.n	910e <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    90e2:	2d00      	cmp	r5, #0
    90e4:	d040      	beq.n	9168 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    90e6:	002b      	movs	r3, r5
    90e8:	0032      	movs	r2, r6
    90ea:	2100      	movs	r1, #0
    90ec:	0020      	movs	r0, r4
    90ee:	4c25      	ldr	r4, [pc, #148]	; (9184 <S_Nv_ItemInit_Impl+0xe0>)
    90f0:	47a0      	blx	r4
    90f2:	0003      	movs	r3, r0
    90f4:	e00b      	b.n	910e <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    90f6:	4b24      	ldr	r3, [pc, #144]	; (9188 <S_Nv_ItemInit_Impl+0xe4>)
    90f8:	4a24      	ldr	r2, [pc, #144]	; (918c <S_Nv_ItemInit_Impl+0xe8>)
    90fa:	21aa      	movs	r1, #170	; 0xaa
    90fc:	00c9      	lsls	r1, r1, #3
    90fe:	4824      	ldr	r0, [pc, #144]	; (9190 <S_Nv_ItemInit_Impl+0xec>)
    9100:	4c24      	ldr	r4, [pc, #144]	; (9194 <S_Nv_ItemInit_Impl+0xf0>)
    9102:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    9104:	4b24      	ldr	r3, [pc, #144]	; (9198 <S_Nv_ItemInit_Impl+0xf4>)
    9106:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9108:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    910a:	2800      	cmp	r0, #0
    910c:	d002      	beq.n	9114 <S_Nv_ItemInit_Impl+0x70>
}
    910e:	0018      	movs	r0, r3
    9110:	b005      	add	sp, #20
    9112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    9114:	0030      	movs	r0, r6
    9116:	3010      	adds	r0, #16
    9118:	b280      	uxth	r0, r0
    911a:	4b20      	ldr	r3, [pc, #128]	; (919c <S_Nv_ItemInit_Impl+0xf8>)
    911c:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    911e:	4b20      	ldr	r3, [pc, #128]	; (91a0 <S_Nv_ItemInit_Impl+0xfc>)
    9120:	781b      	ldrb	r3, [r3, #0]
    9122:	2b07      	cmp	r3, #7
    9124:	d819      	bhi.n	915a <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    9126:	4b1f      	ldr	r3, [pc, #124]	; (91a4 <S_Nv_ItemInit_Impl+0x100>)
    9128:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    912a:	466b      	mov	r3, sp
    912c:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    912e:	2300      	movs	r3, #0
    9130:	466a      	mov	r2, sp
    9132:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    9134:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    9136:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    9138:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    913a:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    913c:	0029      	movs	r1, r5
    913e:	4668      	mov	r0, sp
    9140:	4b19      	ldr	r3, [pc, #100]	; (91a8 <S_Nv_ItemInit_Impl+0x104>)
    9142:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9144:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9146:	2800      	cmp	r0, #0
    9148:	d0e1      	beq.n	910e <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    914a:	0020      	movs	r0, r4
    914c:	4b17      	ldr	r3, [pc, #92]	; (91ac <S_Nv_ItemInit_Impl+0x108>)
    914e:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    9150:	7087      	strb	r7, [r0, #2]
    9152:	0a3f      	lsrs	r7, r7, #8
    9154:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    9156:	2302      	movs	r3, #2
    9158:	e7d9      	b.n	910e <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    915a:	4b15      	ldr	r3, [pc, #84]	; (91b0 <S_Nv_ItemInit_Impl+0x10c>)
    915c:	4a0b      	ldr	r2, [pc, #44]	; (918c <S_Nv_ItemInit_Impl+0xe8>)
    915e:	21af      	movs	r1, #175	; 0xaf
    9160:	00c9      	lsls	r1, r1, #3
    9162:	480b      	ldr	r0, [pc, #44]	; (9190 <S_Nv_ItemInit_Impl+0xec>)
    9164:	4c0b      	ldr	r4, [pc, #44]	; (9194 <S_Nv_ItemInit_Impl+0xf0>)
    9166:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    9168:	2300      	movs	r3, #0
    916a:	e7d0      	b.n	910e <S_Nv_ItemInit_Impl+0x6a>
    916c:	0000effe 	.word	0x0000effe
    9170:	00008225 	.word	0x00008225
    9174:	00009051 	.word	0x00009051
    9178:	20000250 	.word	0x20000250
    917c:	20000252 	.word	0x20000252
    9180:	000087a9 	.word	0x000087a9
    9184:	00008fd9 	.word	0x00008fd9
    9188:	00018580 	.word	0x00018580
    918c:	00018684 	.word	0x00018684
    9190:	00018534 	.word	0x00018534
    9194:	00016635 	.word	0x00016635
    9198:	00007fb9 	.word	0x00007fb9
    919c:	0000872d 	.word	0x0000872d
    91a0:	20000278 	.word	0x20000278
    91a4:	20000282 	.word	0x20000282
    91a8:	000089e1 	.word	0x000089e1
    91ac:	00008241 	.word	0x00008241
    91b0:	000184dc 	.word	0x000184dc

000091b4 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    91b4:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    91b6:	4b03      	ldr	r3, [pc, #12]	; (91c4 <S_Nv_IsItemAvailable_Impl+0x10>)
    91b8:	4798      	blx	r3
    91ba:	1e43      	subs	r3, r0, #1
    91bc:	4198      	sbcs	r0, r3
    91be:	b2c0      	uxtb	r0, r0
}
    91c0:	bd10      	pop	{r4, pc}
    91c2:	46c0      	nop			; (mov r8, r8)
    91c4:	00008225 	.word	0x00008225

000091c8 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    91c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ca:	46d6      	mov	lr, sl
    91cc:	4647      	mov	r7, r8
    91ce:	b580      	push	{r7, lr}
    91d0:	b087      	sub	sp, #28
    91d2:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    91d4:	4b20      	ldr	r3, [pc, #128]	; (9258 <pdsInitItemMask+0x90>)
    91d6:	4298      	cmp	r0, r3
    91d8:	d012      	beq.n	9200 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    91da:	0443      	lsls	r3, r0, #17
    91dc:	d415      	bmi.n	920a <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    91de:	08c3      	lsrs	r3, r0, #3
    91e0:	18cf      	adds	r7, r1, r3
    91e2:	2307      	movs	r3, #7
    91e4:	4018      	ands	r0, r3
    91e6:	3b06      	subs	r3, #6
    91e8:	4083      	lsls	r3, r0
    91ea:	783a      	ldrb	r2, [r7, #0]
    91ec:	4313      	orrs	r3, r2
    91ee:	703b      	strb	r3, [r7, #0]
  }

  return true;
    91f0:	2301      	movs	r3, #1
    91f2:	9301      	str	r3, [sp, #4]
}
    91f4:	9801      	ldr	r0, [sp, #4]
    91f6:	b007      	add	sp, #28
    91f8:	bc0c      	pop	{r2, r3}
    91fa:	4690      	mov	r8, r2
    91fc:	469a      	mov	sl, r3
    91fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    9200:	23fe      	movs	r3, #254	; 0xfe
    9202:	700b      	strb	r3, [r1, #0]
  return true;
    9204:	3bfd      	subs	r3, #253	; 0xfd
    9206:	9301      	str	r3, [sp, #4]
    9208:	e7f4      	b.n	91f4 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    920a:	a904      	add	r1, sp, #16
    920c:	4b13      	ldr	r3, [pc, #76]	; (925c <pdsInitItemMask+0x94>)
    920e:	4798      	blx	r3
    9210:	9001      	str	r0, [sp, #4]
    9212:	2800      	cmp	r0, #0
    9214:	d0ee      	beq.n	91f4 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9216:	ab04      	add	r3, sp, #16
    9218:	889b      	ldrh	r3, [r3, #4]
    921a:	4698      	mov	r8, r3
    921c:	2b00      	cmp	r3, #0
    921e:	d0e9      	beq.n	91f4 <pdsInitItemMask+0x2c>
    9220:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9222:	ab02      	add	r3, sp, #8
    9224:	1d9d      	adds	r5, r3, #6
    9226:	4b0e      	ldr	r3, [pc, #56]	; (9260 <pdsInitItemMask+0x98>)
    9228:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    922a:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    922c:	0061      	lsls	r1, r4, #1
    922e:	9b04      	ldr	r3, [sp, #16]
    9230:	469c      	mov	ip, r3
    9232:	4461      	add	r1, ip
    9234:	2202      	movs	r2, #2
    9236:	0028      	movs	r0, r5
    9238:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    923a:	8829      	ldrh	r1, [r5, #0]
    923c:	08ca      	lsrs	r2, r1, #3
    923e:	18ba      	adds	r2, r7, r2
    9240:	4031      	ands	r1, r6
    9242:	2301      	movs	r3, #1
    9244:	408b      	lsls	r3, r1
    9246:	7811      	ldrb	r1, [r2, #0]
    9248:	430b      	orrs	r3, r1
    924a:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    924c:	3401      	adds	r4, #1
    924e:	b2e4      	uxtb	r4, r4
    9250:	b2a3      	uxth	r3, r4
    9252:	4543      	cmp	r3, r8
    9254:	d3ea      	bcc.n	922c <pdsInitItemMask+0x64>
    9256:	e7cd      	b.n	91f4 <pdsInitItemMask+0x2c>
    9258:	00004002 	.word	0x00004002
    925c:	000095a1 	.word	0x000095a1
    9260:	000166f7 	.word	0x000166f7

00009264 <PDS_Restore>:
{
    9264:	b5f0      	push	{r4, r5, r6, r7, lr}
    9266:	46d6      	mov	lr, sl
    9268:	4647      	mov	r7, r8
    926a:	b580      	push	{r7, lr}
    926c:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    926e:	a907      	add	r1, sp, #28
    9270:	2300      	movs	r3, #0
    9272:	700b      	strb	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    9274:	4b27      	ldr	r3, [pc, #156]	; (9314 <PDS_Restore+0xb0>)
    9276:	4798      	blx	r3
    9278:	1e06      	subs	r6, r0, #0
    927a:	d043      	beq.n	9304 <PDS_Restore+0xa0>
    927c:	2400      	movs	r4, #0
  if (pdsGetItemDescr(id, &itemDescr))
    927e:	4f26      	ldr	r7, [pc, #152]	; (9318 <PDS_Restore+0xb4>)
      oldSize = S_Nv_ItemLength(id);
    9280:	4b26      	ldr	r3, [pc, #152]	; (931c <PDS_Restore+0xb8>)
    9282:	469a      	mov	sl, r3
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    9284:	4b26      	ldr	r3, [pc, #152]	; (9320 <PDS_Restore+0xbc>)
    9286:	4698      	mov	r8, r3
    9288:	e010      	b.n	92ac <PDS_Restore+0x48>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    928a:	4b26      	ldr	r3, [pc, #152]	; (9324 <PDS_Restore+0xc0>)
    928c:	4a26      	ldr	r2, [pc, #152]	; (9328 <PDS_Restore+0xc4>)
    928e:	2156      	movs	r1, #86	; 0x56
    9290:	31ff      	adds	r1, #255	; 0xff
    9292:	4826      	ldr	r0, [pc, #152]	; (932c <PDS_Restore+0xc8>)
    9294:	4c26      	ldr	r4, [pc, #152]	; (9330 <PDS_Restore+0xcc>)
    9296:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9298:	4b26      	ldr	r3, [pc, #152]	; (9334 <PDS_Restore+0xd0>)
    929a:	4a23      	ldr	r2, [pc, #140]	; (9328 <PDS_Restore+0xc4>)
    929c:	21b3      	movs	r1, #179	; 0xb3
    929e:	0049      	lsls	r1, r1, #1
    92a0:	4822      	ldr	r0, [pc, #136]	; (932c <PDS_Restore+0xc8>)
    92a2:	4c23      	ldr	r4, [pc, #140]	; (9330 <PDS_Restore+0xcc>)
    92a4:	47a0      	blx	r4
    92a6:	3401      	adds	r4, #1
    for (j = 0U; j < 8U; j++)
    92a8:	2c08      	cmp	r4, #8
    92aa:	d02b      	beq.n	9304 <PDS_Restore+0xa0>
      if (itemsToRestore[i] & (1U << j))
    92ac:	ab07      	add	r3, sp, #28
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	40e3      	lsrs	r3, r4
    92b2:	07db      	lsls	r3, r3, #31
    92b4:	d5f7      	bpl.n	92a6 <PDS_Restore+0x42>
        if (!pdsRestoreItem(((S_Nv_ItemId_t)i << 3U) + j))
    92b6:	b2a5      	uxth	r5, r4
  if (pdsGetItemDescr(id, &itemDescr))
    92b8:	a903      	add	r1, sp, #12
    92ba:	0028      	movs	r0, r5
    92bc:	47b8      	blx	r7
    92be:	2800      	cmp	r0, #0
    92c0:	d01f      	beq.n	9302 <PDS_Restore+0x9e>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    92c2:	ab03      	add	r3, sp, #12
    92c4:	885b      	ldrh	r3, [r3, #2]
    92c6:	2b00      	cmp	r3, #0
    92c8:	d0df      	beq.n	928a <PDS_Restore+0x26>
    92ca:	9b04      	ldr	r3, [sp, #16]
    92cc:	2b00      	cmp	r3, #0
    92ce:	d0dc      	beq.n	928a <PDS_Restore+0x26>
    if (itemDescr.filler)
    92d0:	9b05      	ldr	r3, [sp, #20]
    92d2:	2b00      	cmp	r3, #0
    92d4:	d000      	beq.n	92d8 <PDS_Restore+0x74>
      itemDescr.filler();
    92d6:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    92d8:	0028      	movs	r0, r5
    92da:	47d0      	blx	sl
    92dc:	9001      	str	r0, [sp, #4]
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    92de:	ab03      	add	r3, sp, #12
    92e0:	9a04      	ldr	r2, [sp, #16]
    92e2:	8859      	ldrh	r1, [r3, #2]
    92e4:	0028      	movs	r0, r5
    92e6:	47c0      	blx	r8
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    92e8:	2802      	cmp	r0, #2
    92ea:	d011      	beq.n	9310 <PDS_Restore+0xac>
    92ec:	2800      	cmp	r0, #0
    92ee:	d1d3      	bne.n	9298 <PDS_Restore+0x34>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    92f0:	ab03      	add	r3, sp, #12
    92f2:	885a      	ldrh	r2, [r3, #2]
    92f4:	9904      	ldr	r1, [sp, #16]
    92f6:	9b01      	ldr	r3, [sp, #4]
    92f8:	0028      	movs	r0, r5
    92fa:	4d0f      	ldr	r5, [pc, #60]	; (9338 <PDS_Restore+0xd4>)
    92fc:	47a8      	blx	r5
    92fe:	2800      	cmp	r0, #0
    9300:	d1d1      	bne.n	92a6 <PDS_Restore+0x42>
          return false;
    9302:	2600      	movs	r6, #0
}
    9304:	0030      	movs	r0, r6
    9306:	b009      	add	sp, #36	; 0x24
    9308:	bc0c      	pop	{r2, r3}
    930a:	4690      	mov	r8, r2
    930c:	469a      	mov	sl, r3
    930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return false;
    9310:	2600      	movs	r6, #0
    9312:	e7f7      	b.n	9304 <PDS_Restore+0xa0>
    9314:	000091c9 	.word	0x000091c9
    9318:	00009505 	.word	0x00009505
    931c:	00009051 	.word	0x00009051
    9320:	000090a5 	.word	0x000090a5
    9324:	000186d0 	.word	0x000186d0
    9328:	000187cc 	.word	0x000187cc
    932c:	0001870c 	.word	0x0001870c
    9330:	00016635 	.word	0x00016635
    9334:	0001875c 	.word	0x0001875c
    9338:	00009561 	.word	0x00009561

0000933c <PDS_Store>:
{
    933c:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    933e:	4905      	ldr	r1, [pc, #20]	; (9354 <PDS_Store+0x18>)
    9340:	4b05      	ldr	r3, [pc, #20]	; (9358 <PDS_Store+0x1c>)
    9342:	4798      	blx	r3
    9344:	1e04      	subs	r4, r0, #0
    9346:	d101      	bne.n	934c <PDS_Store+0x10>
}
    9348:	0020      	movs	r0, r4
    934a:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    934c:	2000      	movs	r0, #0
    934e:	4b03      	ldr	r3, [pc, #12]	; (935c <PDS_Store+0x20>)
    9350:	4798      	blx	r3
  return true;
    9352:	e7f9      	b.n	9348 <PDS_Store+0xc>
    9354:	20000288 	.word	0x20000288
    9358:	000091c9 	.word	0x000091c9
    935c:	000094b1 	.word	0x000094b1

00009360 <pdsStoreItemTaskHandler>:
{
    9360:	b5f0      	push	{r4, r5, r6, r7, lr}
    9362:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9364:	4b3e      	ldr	r3, [pc, #248]	; (9460 <pdsStoreItemTaskHandler+0x100>)
    9366:	781b      	ldrb	r3, [r3, #0]
    9368:	3301      	adds	r3, #1
      bit_index %= 8;
    936a:	2207      	movs	r2, #7
    936c:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    936e:	4a3d      	ldr	r2, [pc, #244]	; (9464 <pdsStoreItemTaskHandler+0x104>)
    9370:	7817      	ldrb	r7, [r2, #0]
    9372:	0038      	movs	r0, r7
    9374:	001e      	movs	r6, r3
    9376:	003a      	movs	r2, r7
    9378:	40da      	lsrs	r2, r3
    937a:	07d2      	lsls	r2, r2, #31
    937c:	d431      	bmi.n	93e2 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    937e:	3301      	adds	r3, #1
    9380:	b2db      	uxtb	r3, r3
    9382:	2207      	movs	r2, #7
      bit_index %= 8;
    9384:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    9386:	2401      	movs	r4, #1
      bit_index %= 8;
    9388:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    938a:	001e      	movs	r6, r3
    938c:	0001      	movs	r1, r0
    938e:	40d9      	lsrs	r1, r3
    9390:	420c      	tst	r4, r1
    9392:	d126      	bne.n	93e2 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9394:	3301      	adds	r3, #1
    9396:	b2db      	uxtb	r3, r3
    9398:	3a01      	subs	r2, #1
    939a:	b2d2      	uxtb	r2, r2
    939c:	2a00      	cmp	r2, #0
    939e:	d1f3      	bne.n	9388 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    93a0:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    93a2:	00e4      	lsls	r4, r4, #3
    93a4:	18e4      	adds	r4, r4, r3
    93a6:	0020      	movs	r0, r4
    93a8:	4b2f      	ldr	r3, [pc, #188]	; (9468 <pdsStoreItemTaskHandler+0x108>)
    93aa:	4798      	blx	r3
    93ac:	2800      	cmp	r0, #0
    93ae:	d124      	bne.n	93fa <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    93b0:	4669      	mov	r1, sp
    93b2:	0020      	movs	r0, r4
    93b4:	4b2d      	ldr	r3, [pc, #180]	; (946c <pdsStoreItemTaskHandler+0x10c>)
    93b6:	4798      	blx	r3
    93b8:	2800      	cmp	r0, #0
    93ba:	d038      	beq.n	942e <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    93bc:	9b02      	ldr	r3, [sp, #8]
    93be:	2b00      	cmp	r3, #0
    93c0:	d000      	beq.n	93c4 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    93c2:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    93c4:	9a01      	ldr	r2, [sp, #4]
    93c6:	466b      	mov	r3, sp
    93c8:	8859      	ldrh	r1, [r3, #2]
    93ca:	0020      	movs	r0, r4
    93cc:	4b28      	ldr	r3, [pc, #160]	; (9470 <pdsStoreItemTaskHandler+0x110>)
    93ce:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    93d0:	23fd      	movs	r3, #253	; 0xfd
    93d2:	4218      	tst	r0, r3
    93d4:	d02b      	beq.n	942e <pdsStoreItemTaskHandler+0xce>
    93d6:	4b27      	ldr	r3, [pc, #156]	; (9474 <pdsStoreItemTaskHandler+0x114>)
    93d8:	4a27      	ldr	r2, [pc, #156]	; (9478 <pdsStoreItemTaskHandler+0x118>)
    93da:	21ea      	movs	r1, #234	; 0xea
    93dc:	4827      	ldr	r0, [pc, #156]	; (947c <pdsStoreItemTaskHandler+0x11c>)
    93de:	4c28      	ldr	r4, [pc, #160]	; (9480 <pdsStoreItemTaskHandler+0x120>)
    93e0:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    93e2:	2201      	movs	r2, #1
    93e4:	40b2      	lsls	r2, r6
    93e6:	4397      	bics	r7, r2
    93e8:	4a1e      	ldr	r2, [pc, #120]	; (9464 <pdsStoreItemTaskHandler+0x104>)
    93ea:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    93ec:	2100      	movs	r1, #0
    93ee:	4a25      	ldr	r2, [pc, #148]	; (9484 <pdsStoreItemTaskHandler+0x124>)
    93f0:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    93f2:	4a1b      	ldr	r2, [pc, #108]	; (9460 <pdsStoreItemTaskHandler+0x100>)
    93f4:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    93f6:	2400      	movs	r4, #0
    93f8:	e7d3      	b.n	93a2 <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    93fa:	4669      	mov	r1, sp
    93fc:	0020      	movs	r0, r4
    93fe:	4b1b      	ldr	r3, [pc, #108]	; (946c <pdsStoreItemTaskHandler+0x10c>)
    9400:	4798      	blx	r3
    9402:	2800      	cmp	r0, #0
    9404:	d013      	beq.n	942e <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9406:	466b      	mov	r3, sp
    9408:	885b      	ldrh	r3, [r3, #2]
    940a:	2b00      	cmp	r3, #0
    940c:	d015      	beq.n	943a <pdsStoreItemTaskHandler+0xda>
    940e:	9b01      	ldr	r3, [sp, #4]
    9410:	2b00      	cmp	r3, #0
    9412:	d012      	beq.n	943a <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    9414:	9b02      	ldr	r3, [sp, #8]
    9416:	2b00      	cmp	r3, #0
    9418:	d000      	beq.n	941c <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    941a:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    941c:	9b01      	ldr	r3, [sp, #4]
    941e:	466a      	mov	r2, sp
    9420:	8852      	ldrh	r2, [r2, #2]
    9422:	2100      	movs	r1, #0
    9424:	0020      	movs	r0, r4
    9426:	4c18      	ldr	r4, [pc, #96]	; (9488 <pdsStoreItemTaskHandler+0x128>)
    9428:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    942a:	2800      	cmp	r0, #0
    942c:	d10c      	bne.n	9448 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    942e:	4b0d      	ldr	r3, [pc, #52]	; (9464 <pdsStoreItemTaskHandler+0x104>)
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	2b00      	cmp	r3, #0
    9434:	d10f      	bne.n	9456 <pdsStoreItemTaskHandler+0xf6>
}
    9436:	b005      	add	sp, #20
    9438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    943a:	4b14      	ldr	r3, [pc, #80]	; (948c <pdsStoreItemTaskHandler+0x12c>)
    943c:	4a14      	ldr	r2, [pc, #80]	; (9490 <pdsStoreItemTaskHandler+0x130>)
    943e:	2134      	movs	r1, #52	; 0x34
    9440:	31ff      	adds	r1, #255	; 0xff
    9442:	480e      	ldr	r0, [pc, #56]	; (947c <pdsStoreItemTaskHandler+0x11c>)
    9444:	4c0e      	ldr	r4, [pc, #56]	; (9480 <pdsStoreItemTaskHandler+0x120>)
    9446:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9448:	4b12      	ldr	r3, [pc, #72]	; (9494 <pdsStoreItemTaskHandler+0x134>)
    944a:	4a11      	ldr	r2, [pc, #68]	; (9490 <pdsStoreItemTaskHandler+0x130>)
    944c:	2142      	movs	r1, #66	; 0x42
    944e:	31ff      	adds	r1, #255	; 0xff
    9450:	480a      	ldr	r0, [pc, #40]	; (947c <pdsStoreItemTaskHandler+0x11c>)
    9452:	4c0b      	ldr	r4, [pc, #44]	; (9480 <pdsStoreItemTaskHandler+0x120>)
    9454:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9456:	2000      	movs	r0, #0
    9458:	4b0f      	ldr	r3, [pc, #60]	; (9498 <pdsStoreItemTaskHandler+0x138>)
    945a:	4798      	blx	r3
}
    945c:	e7eb      	b.n	9436 <pdsStoreItemTaskHandler+0xd6>
    945e:	46c0      	nop			; (mov r8, r8)
    9460:	20000289 	.word	0x20000289
    9464:	20000288 	.word	0x20000288
    9468:	000091b5 	.word	0x000091b5
    946c:	00009505 	.word	0x00009505
    9470:	000090a5 	.word	0x000090a5
    9474:	0001875c 	.word	0x0001875c
    9478:	000187a4 	.word	0x000187a4
    947c:	0001870c 	.word	0x0001870c
    9480:	00016635 	.word	0x00016635
    9484:	20000284 	.word	0x20000284
    9488:	00008ea1 	.word	0x00008ea1
    948c:	000186d0 	.word	0x000186d0
    9490:	000187bc 	.word	0x000187bc
    9494:	000187dc 	.word	0x000187dc
    9498:	000094b1 	.word	0x000094b1

0000949c <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    949c:	b510      	push	{r4, lr}
  D_Nv_Init();
    949e:	4b02      	ldr	r3, [pc, #8]	; (94a8 <PDS_Init+0xc>)
    94a0:	4798      	blx	r3
  S_Nv_Init();
    94a2:	4b02      	ldr	r3, [pc, #8]	; (94ac <PDS_Init+0x10>)
    94a4:	4798      	blx	r3
}
    94a6:	bd10      	pop	{r4, pc}
    94a8:	00007d19 	.word	0x00007d19
    94ac:	00008e69 	.word	0x00008e69

000094b0 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    94b0:	4a03      	ldr	r2, [pc, #12]	; (94c0 <pdsPostTask+0x10>)
    94b2:	2301      	movs	r3, #1
    94b4:	4083      	lsls	r3, r0
    94b6:	7811      	ldrb	r1, [r2, #0]
    94b8:	430b      	orrs	r3, r1
    94ba:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    94bc:	4770      	bx	lr
    94be:	46c0      	nop			; (mov r8, r8)
    94c0:	2000028a 	.word	0x2000028a

000094c4 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    94c4:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    94c6:	4b0d      	ldr	r3, [pc, #52]	; (94fc <PDS_TaskHandler+0x38>)
    94c8:	781d      	ldrb	r5, [r3, #0]
    94ca:	2d00      	cmp	r5, #0
    94cc:	d012      	beq.n	94f4 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    94ce:	0028      	movs	r0, r5
    94d0:	07eb      	lsls	r3, r5, #31
    94d2:	d410      	bmi.n	94f6 <PDS_TaskHandler+0x32>
    94d4:	2300      	movs	r3, #0
    94d6:	2401      	movs	r4, #1
      taskId++;
    94d8:	3301      	adds	r3, #1
    94da:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    94dc:	0019      	movs	r1, r3
    94de:	0002      	movs	r2, r0
    94e0:	40da      	lsrs	r2, r3
    94e2:	4214      	tst	r4, r2
    94e4:	d0f8      	beq.n	94d8 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    94e6:	2301      	movs	r3, #1
    94e8:	408b      	lsls	r3, r1
    94ea:	405d      	eors	r5, r3
    94ec:	4b03      	ldr	r3, [pc, #12]	; (94fc <PDS_TaskHandler+0x38>)
    94ee:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    94f0:	4b03      	ldr	r3, [pc, #12]	; (9500 <PDS_TaskHandler+0x3c>)
    94f2:	4798      	blx	r3
   
  }
}
    94f4:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    94f6:	2100      	movs	r1, #0
    94f8:	e7f5      	b.n	94e6 <PDS_TaskHandler+0x22>
    94fa:	46c0      	nop			; (mov r8, r8)
    94fc:	2000028a 	.word	0x2000028a
    9500:	00009361 	.word	0x00009361

00009504 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    9504:	b5f0      	push	{r4, r5, r6, r7, lr}
    9506:	b087      	sub	sp, #28
    9508:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    950a:	aa02      	add	r2, sp, #8
    950c:	4b10      	ldr	r3, [pc, #64]	; (9550 <pdsGetItemDescr+0x4c>)
    950e:	0011      	movs	r1, r2
    9510:	cb70      	ldmia	r3!, {r4, r5, r6}
    9512:	c170      	stmia	r1!, {r4, r5, r6}
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    9518:	8813      	ldrh	r3, [r2, #0]
    951a:	4283      	cmp	r3, r0
    951c:	d011      	beq.n	9542 <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    951e:	4b0d      	ldr	r3, [pc, #52]	; (9554 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9520:	aa02      	add	r2, sp, #8
    9522:	0011      	movs	r1, r2
    9524:	001c      	movs	r4, r3
    9526:	cce0      	ldmia	r4!, {r5, r6, r7}
    9528:	c1e0      	stmia	r1!, {r5, r6, r7}
    952a:	6824      	ldr	r4, [r4, #0]
    952c:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    952e:	8811      	ldrh	r1, [r2, #0]
    9530:	4281      	cmp	r1, r0
    9532:	d006      	beq.n	9542 <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    9534:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    9536:	4908      	ldr	r1, [pc, #32]	; (9558 <pdsGetItemDescr+0x54>)
    9538:	428b      	cmp	r3, r1
    953a:	d1f2      	bne.n	9522 <pdsGetItemDescr+0x1e>

  }
  return false;
    953c:	2000      	movs	r0, #0
}
    953e:	b007      	add	sp, #28
    9540:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    9542:	2210      	movs	r2, #16
    9544:	a902      	add	r1, sp, #8
    9546:	9801      	ldr	r0, [sp, #4]
    9548:	4b04      	ldr	r3, [pc, #16]	; (955c <pdsGetItemDescr+0x58>)
    954a:	4798      	blx	r3
      return true;
    954c:	2001      	movs	r0, #1
    954e:	e7f6      	b.n	953e <pdsGetItemDescr+0x3a>
    9550:	00004400 	.word	0x00004400
    9554:	00004410 	.word	0x00004410
    9558:	00004480 	.word	0x00004480
    955c:	000166f7 	.word	0x000166f7

00009560 <pdsUpdateMemory>:
{
    9560:	b510      	push	{r4, lr}
    9562:	b084      	sub	sp, #16
  if (size == oldSize)
    9564:	429a      	cmp	r2, r3
    9566:	d008      	beq.n	957a <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    9568:	4669      	mov	r1, sp
    956a:	4b08      	ldr	r3, [pc, #32]	; (958c <pdsUpdateMemory+0x2c>)
    956c:	4798      	blx	r3
    956e:	2800      	cmp	r0, #0
    9570:	d003      	beq.n	957a <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    9572:	466b      	mov	r3, sp
    9574:	7b1b      	ldrb	r3, [r3, #12]
    9576:	07db      	lsls	r3, r3, #31
    9578:	d502      	bpl.n	9580 <pdsUpdateMemory+0x20>
}
    957a:	2001      	movs	r0, #1
    957c:	b004      	add	sp, #16
    957e:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    9580:	4b03      	ldr	r3, [pc, #12]	; (9590 <pdsUpdateMemory+0x30>)
    9582:	4a04      	ldr	r2, [pc, #16]	; (9594 <pdsUpdateMemory+0x34>)
    9584:	2177      	movs	r1, #119	; 0x77
    9586:	4804      	ldr	r0, [pc, #16]	; (9598 <pdsUpdateMemory+0x38>)
    9588:	4c04      	ldr	r4, [pc, #16]	; (959c <pdsUpdateMemory+0x3c>)
    958a:	47a0      	blx	r4
    958c:	00009505 	.word	0x00009505
    9590:	00018808 	.word	0x00018808
    9594:	000187f8 	.word	0x000187f8
    9598:	00018834 	.word	0x00018834
    959c:	00016635 	.word	0x00016635

000095a0 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    95a0:	b570      	push	{r4, r5, r6, lr}
    95a2:	b082      	sub	sp, #8
    95a4:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    95a6:	466b      	mov	r3, sp
    95a8:	4a08      	ldr	r2, [pc, #32]	; (95cc <pdsGetDirDescr+0x2c>)
    95aa:	4669      	mov	r1, sp
    95ac:	ca60      	ldmia	r2!, {r5, r6}
    95ae:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    95b0:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    95b2:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    95b4:	4282      	cmp	r2, r0
    95b6:	d002      	beq.n	95be <pdsGetDirDescr+0x1e>
}
    95b8:	0018      	movs	r0, r3
    95ba:	b002      	add	sp, #8
    95bc:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    95be:	2208      	movs	r2, #8
    95c0:	4669      	mov	r1, sp
    95c2:	0020      	movs	r0, r4
    95c4:	4b02      	ldr	r3, [pc, #8]	; (95d0 <pdsGetDirDescr+0x30>)
    95c6:	4798      	blx	r3
      return true;
    95c8:	2301      	movs	r3, #1
    95ca:	e7f5      	b.n	95b8 <pdsGetDirDescr+0x18>
    95cc:	00004470 	.word	0x00004470
    95d0:	000166f7 	.word	0x000166f7

000095d4 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    95d4:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    95d6:	7802      	ldrb	r2, [r0, #0]
    95d8:	4b08      	ldr	r3, [pc, #32]	; (95fc <MiMAC_SetAltAddress+0x28>)
    95da:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    95dc:	7842      	ldrb	r2, [r0, #1]
    95de:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    95e0:	780a      	ldrb	r2, [r1, #0]
    95e2:	4c07      	ldr	r4, [pc, #28]	; (9600 <MiMAC_SetAltAddress+0x2c>)
    95e4:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    95e6:	784a      	ldrb	r2, [r1, #1]
    95e8:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    95ea:	8818      	ldrh	r0, [r3, #0]
    95ec:	4b05      	ldr	r3, [pc, #20]	; (9604 <MiMAC_SetAltAddress+0x30>)
    95ee:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    95f0:	8820      	ldrh	r0, [r4, #0]
    95f2:	4b05      	ldr	r3, [pc, #20]	; (9608 <MiMAC_SetAltAddress+0x34>)
    95f4:	4798      	blx	r3
	return true;
}
    95f6:	2001      	movs	r0, #1
    95f8:	bd10      	pop	{r4, pc}
    95fa:	46c0      	nop			; (mov r8, r8)
    95fc:	200020d8 	.word	0x200020d8
    9600:	2000214c 	.word	0x2000214c
    9604:	0000a8e9 	.word	0x0000a8e9
    9608:	0000a8d5 	.word	0x0000a8d5

0000960c <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    960c:	b5f0      	push	{r4, r5, r6, r7, lr}
    960e:	46c6      	mov	lr, r8
    9610:	b500      	push	{lr}
    9612:	b0c6      	sub	sp, #280	; 0x118
    9614:	0006      	movs	r6, r0
    9616:	000c      	movs	r4, r1
    9618:	469c      	mov	ip, r3
    961a:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    961c:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    961e:	0723      	lsls	r3, r4, #28
    9620:	d000      	beq.n	9624 <mic_generator+0x18>
    9622:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    9624:	2049      	movs	r0, #73	; 0x49
    9626:	4b40      	ldr	r3, [pc, #256]	; (9728 <mic_generator+0x11c>)
    9628:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    962a:	2300      	movs	r3, #0
    962c:	a802      	add	r0, sp, #8
    962e:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    9630:	330d      	adds	r3, #13
    9632:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    9634:	7082      	strb	r2, [r0, #2]
    9636:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9638:	4b3b      	ldr	r3, [pc, #236]	; (9728 <mic_generator+0x11c>)
    963a:	5c8f      	ldrb	r7, [r1, r2]
    963c:	18d0      	adds	r0, r2, r3
    963e:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    9640:	0010      	movs	r0, r2
    9642:	af02      	add	r7, sp, #8
    9644:	46b8      	mov	r8, r7
    9646:	4440      	add	r0, r8
    9648:	5c8f      	ldrb	r7, [r1, r2]
    964a:	71c7      	strb	r7, [r0, #7]
    964c:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    964e:	2a08      	cmp	r2, #8
    9650:	d1f3      	bne.n	963a <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    9652:	4663      	mov	r3, ip
    9654:	466a      	mov	r2, sp
    9656:	71d3      	strb	r3, [r2, #7]
    9658:	79d3      	ldrb	r3, [r2, #7]
    965a:	4833      	ldr	r0, [pc, #204]	; (9728 <mic_generator+0x11c>)
    965c:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    965e:	4642      	mov	r2, r8
    9660:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    9662:	4663      	mov	r3, ip
    9664:	041b      	lsls	r3, r3, #16
    9666:	0e1b      	lsrs	r3, r3, #24
    9668:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    966a:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    966c:	4663      	mov	r3, ip
    966e:	021b      	lsls	r3, r3, #8
    9670:	0e1b      	lsrs	r3, r3, #24
    9672:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9674:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9676:	4663      	mov	r3, ip
    9678:	0e1b      	lsrs	r3, r3, #24
    967a:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    967c:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    967e:	2300      	movs	r3, #0
    9680:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9682:	2204      	movs	r2, #4
    9684:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9686:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9688:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    968a:	4928      	ldr	r1, [pc, #160]	; (972c <mic_generator+0x120>)
    968c:	4b28      	ldr	r3, [pc, #160]	; (9730 <mic_generator+0x124>)
    968e:	4798      	blx	r3
    9690:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    9692:	a906      	add	r1, sp, #24
    9694:	aa02      	add	r2, sp, #8
    9696:	5c9a      	ldrb	r2, [r3, r2]
    9698:	545a      	strb	r2, [r3, r1]
    969a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    969c:	2b10      	cmp	r3, #16
    969e:	d1f9      	bne.n	9694 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    96a0:	0027      	movs	r7, r4
    96a2:	3710      	adds	r7, #16
    96a4:	2f10      	cmp	r7, #16
    96a6:	dd0a      	ble.n	96be <mic_generator+0xb2>
    96a8:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    96aa:	a906      	add	r1, sp, #24
    96ac:	18f2      	adds	r2, r6, r3
    96ae:	3a10      	subs	r2, #16
    96b0:	7812      	ldrb	r2, [r2, #0]
    96b2:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    96b4:	3301      	adds	r3, #1
    96b6:	b29b      	uxth	r3, r3
    96b8:	0018      	movs	r0, r3
    96ba:	42bb      	cmp	r3, r7
    96bc:	dbf6      	blt.n	96ac <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    96be:	0023      	movs	r3, r4
    96c0:	3310      	adds	r3, #16
    96c2:	001a      	movs	r2, r3
    96c4:	3501      	adds	r5, #1
    96c6:	0129      	lsls	r1, r5, #4
    96c8:	428b      	cmp	r3, r1
    96ca:	da07      	bge.n	96dc <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    96cc:	ac06      	add	r4, sp, #24
    96ce:	2000      	movs	r0, #0
    96d0:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    96d2:	3301      	adds	r3, #1
    96d4:	b29b      	uxth	r3, r3
    96d6:	001a      	movs	r2, r3
    96d8:	428b      	cmp	r3, r1
    96da:	dbf9      	blt.n	96d0 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    96dc:	2200      	movs	r2, #0
    96de:	2700      	movs	r7, #0
    96e0:	2d00      	cmp	r5, #0
    96e2:	dd15      	ble.n	9710 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    96e4:	4e10      	ldr	r6, [pc, #64]	; (9728 <mic_generator+0x11c>)
    96e6:	0112      	lsls	r2, r2, #4
    96e8:	2300      	movs	r3, #0
    96ea:	a906      	add	r1, sp, #24
    96ec:	188c      	adds	r4, r1, r2
    96ee:	1999      	adds	r1, r3, r6
    96f0:	5ce2      	ldrb	r2, [r4, r3]
    96f2:	7808      	ldrb	r0, [r1, #0]
    96f4:	4042      	eors	r2, r0
    96f6:	700a      	strb	r2, [r1, #0]
    96f8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    96fa:	2b10      	cmp	r3, #16
    96fc:	d1f7      	bne.n	96ee <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    96fe:	490b      	ldr	r1, [pc, #44]	; (972c <mic_generator+0x120>)
    9700:	4809      	ldr	r0, [pc, #36]	; (9728 <mic_generator+0x11c>)
    9702:	4b0b      	ldr	r3, [pc, #44]	; (9730 <mic_generator+0x124>)
    9704:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    9706:	3701      	adds	r7, #1
    9708:	b2bf      	uxth	r7, r7
    970a:	003a      	movs	r2, r7
    970c:	42af      	cmp	r7, r5
    970e:	dbea      	blt.n	96e6 <mic_generator+0xda>
    9710:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    9712:	4808      	ldr	r0, [pc, #32]	; (9734 <mic_generator+0x128>)
    9714:	4904      	ldr	r1, [pc, #16]	; (9728 <mic_generator+0x11c>)
    9716:	5cca      	ldrb	r2, [r1, r3]
    9718:	54c2      	strb	r2, [r0, r3]
    971a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    971c:	2b10      	cmp	r3, #16
    971e:	d1fa      	bne.n	9716 <mic_generator+0x10a>
	}

}
    9720:	b046      	add	sp, #280	; 0x118
    9722:	bc04      	pop	{r2}
    9724:	4690      	mov	r8, r2
    9726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9728:	200020e8 	.word	0x200020e8
    972c:	00018888 	.word	0x00018888
    9730:	0000aa61 	.word	0x0000aa61
    9734:	2000212c 	.word	0x2000212c

00009738 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9738:	b5f0      	push	{r4, r5, r6, r7, lr}
    973a:	46de      	mov	lr, fp
    973c:	4657      	mov	r7, sl
    973e:	464e      	mov	r6, r9
    9740:	4645      	mov	r5, r8
    9742:	b5e0      	push	{r5, r6, r7, lr}
    9744:	b08d      	sub	sp, #52	; 0x34
    9746:	4680      	mov	r8, r0
    9748:	000e      	movs	r6, r1
    974a:	0014      	movs	r4, r2
    974c:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    974e:	7809      	ldrb	r1, [r1, #0]
    9750:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    9752:	070b      	lsls	r3, r1, #28
    9754:	d000      	beq.n	9758 <DataEncrypt+0x20>
    9756:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9758:	4b37      	ldr	r3, [pc, #220]	; (9838 <DataEncrypt+0x100>)
    975a:	685b      	ldr	r3, [r3, #4]
    975c:	9300      	str	r3, [sp, #0]
    975e:	0023      	movs	r3, r4
    9760:	4640      	mov	r0, r8
    9762:	4f36      	ldr	r7, [pc, #216]	; (983c <DataEncrypt+0x104>)
    9764:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9766:	7831      	ldrb	r1, [r6, #0]
    9768:	b28b      	uxth	r3, r1
    976a:	002e      	movs	r6, r5
    976c:	012d      	lsls	r5, r5, #4
    976e:	42a9      	cmp	r1, r5
    9770:	da07      	bge.n	9782 <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    9772:	2100      	movs	r1, #0
    9774:	4642      	mov	r2, r8
    9776:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9778:	3301      	adds	r3, #1
    977a:	b29b      	uxth	r3, r3
    977c:	42ab      	cmp	r3, r5
    977e:	dbfa      	blt.n	9776 <DataEncrypt+0x3e>
    9780:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9782:	2201      	movs	r2, #1
    9784:	ab04      	add	r3, sp, #16
    9786:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9788:	4b2b      	ldr	r3, [pc, #172]	; (9838 <DataEncrypt+0x100>)
    978a:	6858      	ldr	r0, [r3, #4]
    978c:	2300      	movs	r3, #0
    978e:	aa04      	add	r2, sp, #16
    9790:	18d2      	adds	r2, r2, r3
    9792:	5cc1      	ldrb	r1, [r0, r3]
    9794:	7051      	strb	r1, [r2, #1]
    9796:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9798:	2b08      	cmp	r3, #8
    979a:	d1f8      	bne.n	978e <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    979c:	ab04      	add	r3, sp, #16
    979e:	725c      	strb	r4, [r3, #9]
    97a0:	0a22      	lsrs	r2, r4, #8
    97a2:	729a      	strb	r2, [r3, #10]
    97a4:	0c22      	lsrs	r2, r4, #16
    97a6:	72da      	strb	r2, [r3, #11]
    97a8:	0e24      	lsrs	r4, r4, #24
    97aa:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    97ac:	2204      	movs	r2, #4
    97ae:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    97b0:	2200      	movs	r2, #0
    97b2:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    97b4:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    97b6:	1c73      	adds	r3, r6, #1
    97b8:	4699      	mov	r9, r3
    97ba:	2300      	movs	r3, #0
    97bc:	469b      	mov	fp, r3
    97be:	9303      	str	r3, [sp, #12]
    97c0:	464b      	mov	r3, r9
    97c2:	2b00      	cmp	r3, #0
    97c4:	dd2f      	ble.n	9826 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    97c6:	ac08      	add	r4, sp, #32
    97c8:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    97ca:	4b1d      	ldr	r3, [pc, #116]	; (9840 <DataEncrypt+0x108>)
    97cc:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    97ce:	4e1d      	ldr	r6, [pc, #116]	; (9844 <DataEncrypt+0x10c>)
    97d0:	e017      	b.n	9802 <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    97d2:	5d1a      	ldrb	r2, [r3, r4]
    97d4:	5ccf      	ldrb	r7, [r1, r3]
    97d6:	407a      	eors	r2, r7
    97d8:	54ca      	strb	r2, [r1, r3]
    97da:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    97dc:	2b10      	cmp	r3, #16
    97de:	d007      	beq.n	97f0 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    97e0:	2800      	cmp	r0, #0
    97e2:	d1f6      	bne.n	97d2 <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    97e4:	5d1a      	ldrb	r2, [r3, r4]
    97e6:	4667      	mov	r7, ip
    97e8:	5cff      	ldrb	r7, [r7, r3]
    97ea:	407a      	eors	r2, r7
    97ec:	54f2      	strb	r2, [r6, r3]
    97ee:	e7f4      	b.n	97da <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    97f0:	3001      	adds	r0, #1
    97f2:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    97f4:	9f03      	ldr	r7, [sp, #12]
    97f6:	3701      	adds	r7, #1
    97f8:	b2bb      	uxth	r3, r7
    97fa:	9303      	str	r3, [sp, #12]
    97fc:	469b      	mov	fp, r3
    97fe:	454b      	cmp	r3, r9
    9800:	da11      	bge.n	9826 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9802:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9804:	5d5a      	ldrb	r2, [r3, r5]
    9806:	551a      	strb	r2, [r3, r4]
    9808:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    980a:	2b10      	cmp	r3, #16
    980c:	d1fa      	bne.n	9804 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    980e:	490e      	ldr	r1, [pc, #56]	; (9848 <DataEncrypt+0x110>)
    9810:	0020      	movs	r0, r4
    9812:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    9814:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9816:	4659      	mov	r1, fp
    9818:	3901      	subs	r1, #1
    981a:	0109      	lsls	r1, r1, #4
    981c:	2300      	movs	r3, #0
    981e:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9820:	4a0a      	ldr	r2, [pc, #40]	; (984c <DataEncrypt+0x114>)
    9822:	4694      	mov	ip, r2
    9824:	e7dc      	b.n	97e0 <DataEncrypt+0xa8>
	}
	return true;

}
    9826:	2001      	movs	r0, #1
    9828:	b00d      	add	sp, #52	; 0x34
    982a:	bc3c      	pop	{r2, r3, r4, r5}
    982c:	4690      	mov	r8, r2
    982e:	4699      	mov	r9, r3
    9830:	46a2      	mov	sl, r4
    9832:	46ab      	mov	fp, r5
    9834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9836:	46c0      	nop			; (mov r8, r8)
    9838:	200020e0 	.word	0x200020e0
    983c:	0000960d 	.word	0x0000960d
    9840:	0000aa61 	.word	0x0000aa61
    9844:	20002114 	.word	0x20002114
    9848:	00018888 	.word	0x00018888
    984c:	2000212c 	.word	0x2000212c

00009850 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9850:	4b0e      	ldr	r3, [pc, #56]	; (988c <validate_mic+0x3c>)
    9852:	781a      	ldrb	r2, [r3, #0]
    9854:	4b0e      	ldr	r3, [pc, #56]	; (9890 <validate_mic+0x40>)
    9856:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    9858:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    985a:	429a      	cmp	r2, r3
    985c:	d000      	beq.n	9860 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    985e:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9860:	4b0a      	ldr	r3, [pc, #40]	; (988c <validate_mic+0x3c>)
    9862:	785a      	ldrb	r2, [r3, #1]
    9864:	4b0a      	ldr	r3, [pc, #40]	; (9890 <validate_mic+0x40>)
    9866:	785b      	ldrb	r3, [r3, #1]
    9868:	429a      	cmp	r2, r3
    986a:	d1f8      	bne.n	985e <validate_mic+0xe>
    986c:	4b07      	ldr	r3, [pc, #28]	; (988c <validate_mic+0x3c>)
    986e:	789a      	ldrb	r2, [r3, #2]
    9870:	4b07      	ldr	r3, [pc, #28]	; (9890 <validate_mic+0x40>)
    9872:	789b      	ldrb	r3, [r3, #2]
    9874:	429a      	cmp	r2, r3
    9876:	d1f2      	bne.n	985e <validate_mic+0xe>
    9878:	4b04      	ldr	r3, [pc, #16]	; (988c <validate_mic+0x3c>)
    987a:	78d8      	ldrb	r0, [r3, #3]
    987c:	4b04      	ldr	r3, [pc, #16]	; (9890 <validate_mic+0x40>)
    987e:	78db      	ldrb	r3, [r3, #3]
    9880:	1ac0      	subs	r0, r0, r3
    9882:	4243      	negs	r3, r0
    9884:	4158      	adcs	r0, r3
    9886:	b2c0      	uxtb	r0, r0
    9888:	e7e9      	b.n	985e <validate_mic+0xe>
    988a:	46c0      	nop			; (mov r8, r8)
    988c:	20002114 	.word	0x20002114
    9890:	2000213c 	.word	0x2000213c

00009894 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9894:	b5f0      	push	{r4, r5, r6, r7, lr}
    9896:	46de      	mov	lr, fp
    9898:	4657      	mov	r7, sl
    989a:	464e      	mov	r6, r9
    989c:	4645      	mov	r5, r8
    989e:	b5e0      	push	{r5, r6, r7, lr}
    98a0:	b091      	sub	sp, #68	; 0x44
    98a2:	4681      	mov	r9, r0
    98a4:	9106      	str	r1, [sp, #24]
    98a6:	9204      	str	r2, [sp, #16]
    98a8:	9305      	str	r3, [sp, #20]
    98aa:	ab1a      	add	r3, sp, #104	; 0x68
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    98b0:	7809      	ldrb	r1, [r1, #0]
    98b2:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    98b4:	070b      	lsls	r3, r1, #28
    98b6:	d000      	beq.n	98ba <DataDecrypt+0x26>
    98b8:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    98ba:	b28b      	uxth	r3, r1
    98bc:	0010      	movs	r0, r2
    98be:	0112      	lsls	r2, r2, #4
    98c0:	4291      	cmp	r1, r2
    98c2:	da07      	bge.n	98d4 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    98c4:	2100      	movs	r1, #0
    98c6:	464c      	mov	r4, r9
    98c8:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    98ca:	3301      	adds	r3, #1
    98cc:	b29b      	uxth	r3, r3
    98ce:	4293      	cmp	r3, r2
    98d0:	dbfa      	blt.n	98c8 <DataDecrypt+0x34>
    98d2:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    98d4:	2201      	movs	r2, #1
    98d6:	ab08      	add	r3, sp, #32
    98d8:	701a      	strb	r2, [r3, #0]
    98da:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    98dc:	9c04      	ldr	r4, [sp, #16]
    98de:	aa08      	add	r2, sp, #32
    98e0:	18d2      	adds	r2, r2, r3
    98e2:	5ce1      	ldrb	r1, [r4, r3]
    98e4:	7051      	strb	r1, [r2, #1]
    98e6:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    98e8:	2b08      	cmp	r3, #8
    98ea:	d1f8      	bne.n	98de <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    98ec:	ab08      	add	r3, sp, #32
    98ee:	9905      	ldr	r1, [sp, #20]
    98f0:	7259      	strb	r1, [r3, #9]
    98f2:	0a0a      	lsrs	r2, r1, #8
    98f4:	729a      	strb	r2, [r3, #10]
    98f6:	0c0a      	lsrs	r2, r1, #16
    98f8:	72da      	strb	r2, [r3, #11]
    98fa:	0e0a      	lsrs	r2, r1, #24
    98fc:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    98fe:	2204      	movs	r2, #4
    9900:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9902:	2200      	movs	r2, #0
    9904:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9906:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    9908:	1c43      	adds	r3, r0, #1
    990a:	469a      	mov	sl, r3
    990c:	2500      	movs	r5, #0
    990e:	2300      	movs	r3, #0
    9910:	4698      	mov	r8, r3
    9912:	4653      	mov	r3, sl
    9914:	2b00      	cmp	r3, #0
    9916:	dd2e      	ble.n	9976 <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9918:	ac0c      	add	r4, sp, #48	; 0x30
    991a:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    991c:	4b26      	ldr	r3, [pc, #152]	; (99b8 <DataDecrypt+0x124>)
    991e:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9920:	4f26      	ldr	r7, [pc, #152]	; (99bc <DataDecrypt+0x128>)
    9922:	4643      	mov	r3, r8
    9924:	9303      	str	r3, [sp, #12]
    9926:	46a8      	mov	r8, r5
    9928:	e014      	b.n	9954 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    992a:	5d1a      	ldrb	r2, [r3, r4]
    992c:	5ce9      	ldrb	r1, [r5, r3]
    992e:	404a      	eors	r2, r1
    9930:	54ea      	strb	r2, [r5, r3]
    9932:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9934:	2b10      	cmp	r3, #16
    9936:	d004      	beq.n	9942 <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    9938:	2800      	cmp	r0, #0
    993a:	d1f6      	bne.n	992a <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    993c:	5d1a      	ldrb	r2, [r3, r4]
    993e:	54fa      	strb	r2, [r7, r3]
    9940:	e7f7      	b.n	9932 <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    9942:	3001      	adds	r0, #1
    9944:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    9946:	9d03      	ldr	r5, [sp, #12]
    9948:	3501      	adds	r5, #1
    994a:	b2ab      	uxth	r3, r5
    994c:	9303      	str	r3, [sp, #12]
    994e:	4698      	mov	r8, r3
    9950:	4553      	cmp	r3, sl
    9952:	da10      	bge.n	9976 <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9954:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9956:	5d9a      	ldrb	r2, [r3, r6]
    9958:	551a      	strb	r2, [r3, r4]
    995a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    995c:	2b10      	cmp	r3, #16
    995e:	d1fa      	bne.n	9956 <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9960:	4917      	ldr	r1, [pc, #92]	; (99c0 <DataDecrypt+0x12c>)
    9962:	0020      	movs	r0, r4
    9964:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9966:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9968:	4642      	mov	r2, r8
    996a:	3a01      	subs	r2, #1
    996c:	0112      	lsls	r2, r2, #4
    996e:	2300      	movs	r3, #0
    9970:	444a      	add	r2, r9
    9972:	0015      	movs	r5, r2
    9974:	e7e0      	b.n	9938 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9976:	9b06      	ldr	r3, [sp, #24]
    9978:	7819      	ldrb	r1, [r3, #0]
    997a:	3904      	subs	r1, #4
    997c:	b2c9      	uxtb	r1, r1
    997e:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9980:	9b04      	ldr	r3, [sp, #16]
    9982:	9300      	str	r3, [sp, #0]
    9984:	9b05      	ldr	r3, [sp, #20]
    9986:	9a07      	ldr	r2, [sp, #28]
    9988:	4648      	mov	r0, r9
    998a:	4c0e      	ldr	r4, [pc, #56]	; (99c4 <DataDecrypt+0x130>)
    998c:	47a0      	blx	r4
    998e:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9990:	4d0d      	ldr	r5, [pc, #52]	; (99c8 <DataDecrypt+0x134>)
    9992:	4c0a      	ldr	r4, [pc, #40]	; (99bc <DataDecrypt+0x128>)
    9994:	480d      	ldr	r0, [pc, #52]	; (99cc <DataDecrypt+0x138>)
    9996:	5ce2      	ldrb	r2, [r4, r3]
    9998:	5cc1      	ldrb	r1, [r0, r3]
    999a:	404a      	eors	r2, r1
    999c:	54ea      	strb	r2, [r5, r3]
    999e:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    99a0:	2b10      	cmp	r3, #16
    99a2:	d1f8      	bne.n	9996 <DataDecrypt+0x102>
	}
	return validate_mic();
    99a4:	4b0a      	ldr	r3, [pc, #40]	; (99d0 <DataDecrypt+0x13c>)
    99a6:	4798      	blx	r3

}
    99a8:	b011      	add	sp, #68	; 0x44
    99aa:	bc3c      	pop	{r2, r3, r4, r5}
    99ac:	4690      	mov	r8, r2
    99ae:	4699      	mov	r9, r3
    99b0:	46a2      	mov	sl, r4
    99b2:	46ab      	mov	fp, r5
    99b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	0000aa61 	.word	0x0000aa61
    99bc:	20002104 	.word	0x20002104
    99c0:	00018888 	.word	0x00018888
    99c4:	0000960d 	.word	0x0000960d
    99c8:	20002114 	.word	0x20002114
    99cc:	2000212c 	.word	0x2000212c
    99d0:	00009851 	.word	0x00009851

000099d4 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    99d4:	b510      	push	{r4, lr}
    switch(id)
    99d6:	2800      	cmp	r0, #0
    99d8:	d109      	bne.n	99ee <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    99da:	780b      	ldrb	r3, [r1, #0]
    99dc:	2b19      	cmp	r3, #25
    99de:	d807      	bhi.n	99f0 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    99e0:	4a04      	ldr	r2, [pc, #16]	; (99f4 <MiMAC_Set+0x20>)
    99e2:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    99e4:	0018      	movs	r0, r3
    99e6:	4b04      	ldr	r3, [pc, #16]	; (99f8 <MiMAC_Set+0x24>)
    99e8:	4798      	blx	r3
          return true;
    99ea:	2001      	movs	r0, #1
    99ec:	e000      	b.n	99f0 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    99ee:	2000      	movs	r0, #0
}
    99f0:	bd10      	pop	{r4, pc}
    99f2:	46c0      	nop			; (mov r8, r8)
    99f4:	2000214e 	.word	0x2000214e
    99f8:	0000a9ad 	.word	0x0000a9ad

000099fc <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    99fc:	b570      	push	{r4, r5, r6, lr}
    99fe:	b082      	sub	sp, #8
    9a00:	466c      	mov	r4, sp
    9a02:	9000      	str	r0, [sp, #0]
    9a04:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    9a06:	4b1c      	ldr	r3, [pc, #112]	; (9a78 <MiMAC_Init+0x7c>)
    9a08:	4798      	blx	r3
	MACInitParams = initValue;
    9a0a:	4d1c      	ldr	r5, [pc, #112]	; (9a7c <MiMAC_Init+0x80>)
    9a0c:	002b      	movs	r3, r5
    9a0e:	466a      	mov	r2, sp
    9a10:	ca03      	ldmia	r2!, {r0, r1}
    9a12:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    9a14:	4b1a      	ldr	r3, [pc, #104]	; (9a80 <MiMAC_Init+0x84>)
    9a16:	4798      	blx	r3
    9a18:	0006      	movs	r6, r0
	// Set RF mode
	PHY_SetRxState(true);
    9a1a:	2001      	movs	r0, #1
    9a1c:	4b19      	ldr	r3, [pc, #100]	; (9a84 <MiMAC_Init+0x88>)
    9a1e:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    9a20:	4b19      	ldr	r3, [pc, #100]	; (9a88 <MiMAC_Init+0x8c>)
    9a22:	701e      	strb	r6, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    9a24:	6868      	ldr	r0, [r5, #4]
    9a26:	4b19      	ldr	r3, [pc, #100]	; (9a8c <MiMAC_Init+0x90>)
    9a28:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    9a2a:	4b19      	ldr	r3, [pc, #100]	; (9a90 <MiMAC_Init+0x94>)
    9a2c:	2200      	movs	r2, #0
    9a2e:	701a      	strb	r2, [r3, #0]
    9a30:	2102      	movs	r1, #2
    9a32:	31ff      	adds	r1, #255	; 0xff
    9a34:	545a      	strb	r2, [r3, r1]
    9a36:	4917      	ldr	r1, [pc, #92]	; (9a94 <MiMAC_Init+0x98>)
    9a38:	545a      	strb	r2, [r3, r1]
    9a3a:	4917      	ldr	r1, [pc, #92]	; (9a98 <MiMAC_Init+0x9c>)
    9a3c:	545a      	strb	r2, [r3, r1]
	}
	#ifdef ENABLE_SECURITY
		#if defined(ENABLE_NETWORK_FREEZER)
			if (initValue.actionFlags.bits.NetworkFreezer)
    9a3e:	7823      	ldrb	r3, [r4, #0]
    9a40:	075b      	lsls	r3, r3, #29
    9a42:	d40a      	bmi.n	9a5a <MiMAC_Init+0x5e>
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
			} else
			{
				OutgoingFrameCounter.Val = 0;
    9a44:	4c15      	ldr	r4, [pc, #84]	; (9a9c <MiMAC_Init+0xa0>)
    9a46:	2300      	movs	r3, #0
    9a48:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9a4a:	2001      	movs	r0, #1
    9a4c:	4b14      	ldr	r3, [pc, #80]	; (9aa0 <MiMAC_Init+0xa4>)
    9a4e:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    9a50:	2301      	movs	r3, #1
    9a52:	6023      	str	r3, [r4, #0]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    9a54:	2001      	movs	r0, #1
    9a56:	b002      	add	sp, #8
    9a58:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    9a5a:	2001      	movs	r0, #1
    9a5c:	4b11      	ldr	r3, [pc, #68]	; (9aa4 <MiMAC_Init+0xa8>)
    9a5e:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    9a60:	4a0e      	ldr	r2, [pc, #56]	; (9a9c <MiMAC_Init+0xa0>)
    9a62:	6813      	ldr	r3, [r2, #0]
    9a64:	2180      	movs	r1, #128	; 0x80
    9a66:	00c9      	lsls	r1, r1, #3
    9a68:	468c      	mov	ip, r1
    9a6a:	4463      	add	r3, ip
    9a6c:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9a6e:	2001      	movs	r0, #1
    9a70:	4b0b      	ldr	r3, [pc, #44]	; (9aa0 <MiMAC_Init+0xa4>)
    9a72:	4798      	blx	r3
    9a74:	e7ee      	b.n	9a54 <MiMAC_Init+0x58>
    9a76:	46c0      	nop			; (mov r8, r8)
    9a78:	0000a895 	.word	0x0000a895
    9a7c:	200020e0 	.word	0x200020e0
    9a80:	0000aa49 	.word	0x0000aa49
    9a84:	0000a8c9 	.word	0x0000a8c9
    9a88:	20001fd5 	.word	0x20001fd5
    9a8c:	0000aa6d 	.word	0x0000aa6d
    9a90:	20002258 	.word	0x20002258
    9a94:	00000202 	.word	0x00000202
    9a98:	00000303 	.word	0x00000303
    9a9c:	20002128 	.word	0x20002128
    9aa0:	0000933d 	.word	0x0000933d
    9aa4:	00009265 	.word	0x00009265

00009aa8 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aaa:	46de      	mov	lr, fp
    9aac:	4657      	mov	r7, sl
    9aae:	464e      	mov	r6, r9
    9ab0:	4645      	mov	r5, r8
    9ab2:	b5e0      	push	{r5, r6, r7, lr}
    9ab4:	b087      	sub	sp, #28
    9ab6:	af03      	add	r7, sp, #12
    9ab8:	1c04      	adds	r4, r0, #0
    9aba:	9003      	str	r0, [sp, #12]
    9abc:	0008      	movs	r0, r1
    9abe:	9104      	str	r1, [sp, #16]
    9ac0:	0015      	movs	r5, r2
    9ac2:	0a2d      	lsrs	r5, r5, #8
    9ac4:	9205      	str	r2, [sp, #20]
    9ac6:	9300      	str	r3, [sp, #0]
    9ac8:	ab11      	add	r3, sp, #68	; 0x44
    9aca:	781b      	ldrb	r3, [r3, #0]
    9acc:	469a      	mov	sl, r3
    9ace:	b2e4      	uxtb	r4, r4
    9ad0:	06a6      	lsls	r6, r4, #26
    9ad2:	0ff6      	lsrs	r6, r6, #31
    9ad4:	9002      	str	r0, [sp, #8]
    9ad6:	b2d3      	uxtb	r3, r2
    9ad8:	469c      	mov	ip, r3
    9ada:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    9adc:	2200      	movs	r2, #0
    9ade:	4bc9      	ldr	r3, [pc, #804]	; (9e04 <MiMAC_SendPacket+0x35c>)
    9ae0:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9ae2:	4bc9      	ldr	r3, [pc, #804]	; (9e08 <MiMAC_SendPacket+0x360>)
    9ae4:	cf07      	ldmia	r7!, {r0, r1, r2}
    9ae6:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9ae8:	0763      	lsls	r3, r4, #29
    9aea:	d501      	bpl.n	9af0 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    9aec:	2301      	movs	r3, #1
    9aee:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9af0:	2308      	movs	r3, #8
    9af2:	4023      	ands	r3, r4
    9af4:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9af6:	4253      	negs	r3, r2
    9af8:	4153      	adcs	r3, r2
    9afa:	425b      	negs	r3, r3
    9afc:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    9afe:	2303      	movs	r3, #3
    9b00:	4023      	ands	r3, r4
    9b02:	2b01      	cmp	r3, #1
    9b04:	d04d      	beq.n	9ba2 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9b06:	2201      	movs	r2, #1
    9b08:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d004      	beq.n	9b18 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    9b0e:	1e9a      	subs	r2, r3, #2
    9b10:	4251      	negs	r1, r2
    9b12:	4151      	adcs	r1, r2
    9b14:	004a      	lsls	r2, r1, #1
    9b16:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9b18:	aa03      	add	r2, sp, #12
    9b1a:	8952      	ldrh	r2, [r2, #10]
    9b1c:	48bb      	ldr	r0, [pc, #748]	; (9e0c <MiMAC_SendPacket+0x364>)
    9b1e:	8800      	ldrh	r0, [r0, #0]
    9b20:	4290      	cmp	r0, r2
    9b22:	d041      	beq.n	9ba8 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    9b24:	2200      	movs	r2, #0
    9b26:	4693      	mov	fp, r2
        headerLength = 7;
    9b28:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    9b2a:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    9b2c:	0017      	movs	r7, r2
    9b2e:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    9b30:	4661      	mov	r1, ip
    9b32:	2900      	cmp	r1, #0
    9b34:	d000      	beq.n	9b38 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    9b36:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    9b38:	2d00      	cmp	r5, #0
    9b3a:	d044      	beq.n	9bc6 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    9b3c:	3702      	adds	r7, #2
    9b3e:	b2fa      	uxtb	r2, r7
    9b40:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    9b42:	2224      	movs	r2, #36	; 0x24
    9b44:	4014      	ands	r4, r2
    9b46:	2c20      	cmp	r4, #32
    9b48:	d041      	beq.n	9bce <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9b4a:	2b03      	cmp	r3, #3
    9b4c:	d044      	beq.n	9bd8 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    9b4e:	aa03      	add	r2, sp, #12
    9b50:	0171      	lsls	r1, r6, #5
    9b52:	7813      	ldrb	r3, [r2, #0]
    9b54:	2020      	movs	r0, #32
    9b56:	4383      	bics	r3, r0
    9b58:	430b      	orrs	r3, r1
    9b5a:	7013      	strb	r3, [r2, #0]
    9b5c:	2203      	movs	r2, #3
    9b5e:	4013      	ands	r3, r2
    9b60:	2b01      	cmp	r3, #1
    9b62:	d041      	beq.n	9be8 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    9b64:	ab03      	add	r3, sp, #12
    9b66:	0172      	lsls	r2, r6, #5
    9b68:	781c      	ldrb	r4, [r3, #0]
    9b6a:	2120      	movs	r1, #32
    9b6c:	438c      	bics	r4, r1
    9b6e:	4314      	orrs	r4, r2
    9b70:	701c      	strb	r4, [r3, #0]
    9b72:	b2e4      	uxtb	r4, r4
    9b74:	0723      	lsls	r3, r4, #28
    9b76:	d439      	bmi.n	9bec <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    9b78:	ab10      	add	r3, sp, #64	; 0x40
    9b7a:	781b      	ldrb	r3, [r3, #0]
    9b7c:	9a01      	ldr	r2, [sp, #4]
    9b7e:	18d7      	adds	r7, r2, r3
    9b80:	4ba3      	ldr	r3, [pc, #652]	; (9e10 <MiMAC_SendPacket+0x368>)
    9b82:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    9b84:	4ba2      	ldr	r3, [pc, #648]	; (9e10 <MiMAC_SendPacket+0x368>)
    9b86:	464a      	mov	r2, r9
    9b88:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9b8a:	43e3      	mvns	r3, r4
    9b8c:	079b      	lsls	r3, r3, #30
    9b8e:	d040      	beq.n	9c12 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9b90:	4643      	mov	r3, r8
    9b92:	2b00      	cmp	r3, #0
    9b94:	d05f      	beq.n	9c56 <MiMAC_SendPacket+0x1ae>
    9b96:	2d00      	cmp	r5, #0
    9b98:	d045      	beq.n	9c26 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    9b9a:	2288      	movs	r2, #136	; 0x88
    9b9c:	4b9c      	ldr	r3, [pc, #624]	; (9e10 <MiMAC_SendPacket+0x368>)
    9b9e:	709a      	strb	r2, [r3, #2]
    9ba0:	e044      	b.n	9c2c <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    9ba2:	2203      	movs	r2, #3
    9ba4:	4691      	mov	r9, r2
    9ba6:	e7b7      	b.n	9b18 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9ba8:	489a      	ldr	r0, [pc, #616]	; (9e14 <MiMAC_SendPacket+0x36c>)
    9baa:	4282      	cmp	r2, r0
    9bac:	d007      	beq.n	9bbe <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    9bae:	2240      	movs	r2, #64	; 0x40
    9bb0:	4649      	mov	r1, r9
    9bb2:	4311      	orrs	r1, r2
    9bb4:	4689      	mov	r9, r1
        IntraPAN = true;
    9bb6:	3a3f      	subs	r2, #63	; 0x3f
    9bb8:	4693      	mov	fp, r2
        headerLength = 5;
    9bba:	3204      	adds	r2, #4
        IntraPAN = true;
    9bbc:	e7b5      	b.n	9b2a <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    9bbe:	2200      	movs	r2, #0
    9bc0:	4693      	mov	fp, r2
        headerLength = 7;
    9bc2:	3207      	adds	r2, #7
    9bc4:	e7b1      	b.n	9b2a <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9bc6:	3708      	adds	r7, #8
    9bc8:	b2fa      	uxtb	r2, r7
    9bca:	9201      	str	r2, [sp, #4]
    9bcc:	e7b9      	b.n	9b42 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    9bce:	3a04      	subs	r2, #4
    9bd0:	4649      	mov	r1, r9
    9bd2:	4311      	orrs	r1, r2
    9bd4:	4689      	mov	r9, r1
    9bd6:	e7b8      	b.n	9b4a <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9bd8:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    9bda:	2600      	movs	r6, #0
        IntraPAN = false;
    9bdc:	2300      	movs	r3, #0
    9bde:	469b      	mov	fp, r3
        frameControl = 0x00;
    9be0:	4699      	mov	r9, r3
        headerLength = 7;
    9be2:	3307      	adds	r3, #7
    9be4:	9301      	str	r3, [sp, #4]
    9be6:	e7b2      	b.n	9b4e <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9be8:	2600      	movs	r6, #0
    9bea:	e7bb      	b.n	9b64 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    9bec:	2308      	movs	r3, #8
    9bee:	464a      	mov	r2, r9
    9bf0:	431a      	orrs	r2, r3
    9bf2:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9bf4:	4b88      	ldr	r3, [pc, #544]	; (9e18 <MiMAC_SendPacket+0x370>)
    9bf6:	681a      	ldr	r2, [r3, #0]
    9bf8:	464b      	mov	r3, r9
    9bfa:	a910      	add	r1, sp, #64	; 0x40
    9bfc:	9800      	ldr	r0, [sp, #0]
    9bfe:	4f87      	ldr	r7, [pc, #540]	; (9e1c <MiMAC_SendPacket+0x374>)
    9c00:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9c02:	ab10      	add	r3, sp, #64	; 0x40
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	3309      	adds	r3, #9
    9c08:	9a01      	ldr	r2, [sp, #4]
    9c0a:	18d7      	adds	r7, r2, r3
    9c0c:	4b80      	ldr	r3, [pc, #512]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c0e:	701f      	strb	r7, [r3, #0]
    9c10:	e7b8      	b.n	9b84 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9c12:	4b7f      	ldr	r3, [pc, #508]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c14:	2280      	movs	r2, #128	; 0x80
    9c16:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9c18:	4981      	ldr	r1, [pc, #516]	; (9e20 <MiMAC_SendPacket+0x378>)
    9c1a:	780a      	ldrb	r2, [r1, #0]
    9c1c:	1c50      	adds	r0, r2, #1
    9c1e:	7008      	strb	r0, [r1, #0]
    9c20:	70da      	strb	r2, [r3, #3]
    9c22:	2304      	movs	r3, #4
    9c24:	e03e      	b.n	9ca4 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    9c26:	22c8      	movs	r2, #200	; 0xc8
    9c28:	4b79      	ldr	r3, [pc, #484]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c2a:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    9c2c:	4b7c      	ldr	r3, [pc, #496]	; (9e20 <MiMAC_SendPacket+0x378>)
    9c2e:	781a      	ldrb	r2, [r3, #0]
    9c30:	1c51      	adds	r1, r2, #1
    9c32:	7019      	strb	r1, [r3, #0]
    9c34:	4b76      	ldr	r3, [pc, #472]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c36:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    9c38:	aa03      	add	r2, sp, #12
    9c3a:	7a91      	ldrb	r1, [r2, #10]
    9c3c:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9c3e:	7ad2      	ldrb	r2, [r2, #11]
    9c40:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    9c42:	0763      	lsls	r3, r4, #29
    9c44:	d429      	bmi.n	9c9a <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    9c46:	9902      	ldr	r1, [sp, #8]
    9c48:	780a      	ldrb	r2, [r1, #0]
    9c4a:	4b71      	ldr	r3, [pc, #452]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c4c:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9c4e:	784a      	ldrb	r2, [r1, #1]
    9c50:	71da      	strb	r2, [r3, #7]
    9c52:	2308      	movs	r3, #8
    9c54:	e026      	b.n	9ca4 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    9c56:	2d00      	cmp	r5, #0
    9c58:	d00f      	beq.n	9c7a <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    9c5a:	4b6d      	ldr	r3, [pc, #436]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c5c:	228c      	movs	r2, #140	; 0x8c
    9c5e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9c60:	496f      	ldr	r1, [pc, #444]	; (9e20 <MiMAC_SendPacket+0x378>)
    9c62:	780a      	ldrb	r2, [r1, #0]
    9c64:	1c50      	adds	r0, r2, #1
    9c66:	7008      	strb	r0, [r1, #0]
    9c68:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9c6a:	aa03      	add	r2, sp, #12
    9c6c:	7a91      	ldrb	r1, [r2, #10]
    9c6e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9c70:	7ad2      	ldrb	r2, [r2, #11]
    9c72:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9c74:	0763      	lsls	r3, r4, #29
    9c76:	d410      	bmi.n	9c9a <MiMAC_SendPacket+0x1f2>
    9c78:	e09f      	b.n	9dba <MiMAC_SendPacket+0x312>
			packet[loc++] = 0xCC;
    9c7a:	4b65      	ldr	r3, [pc, #404]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c7c:	22cc      	movs	r2, #204	; 0xcc
    9c7e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9c80:	4967      	ldr	r1, [pc, #412]	; (9e20 <MiMAC_SendPacket+0x378>)
    9c82:	780a      	ldrb	r2, [r1, #0]
    9c84:	1c50      	adds	r0, r2, #1
    9c86:	7008      	strb	r0, [r1, #0]
    9c88:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9c8a:	aa03      	add	r2, sp, #12
    9c8c:	7a91      	ldrb	r1, [r2, #10]
    9c8e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9c90:	7ad2      	ldrb	r2, [r2, #11]
    9c92:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9c94:	0763      	lsls	r3, r4, #29
    9c96:	d400      	bmi.n	9c9a <MiMAC_SendPacket+0x1f2>
    9c98:	e08b      	b.n	9db2 <MiMAC_SendPacket+0x30a>
			packet[loc++] = 0xFF;
    9c9a:	4b5d      	ldr	r3, [pc, #372]	; (9e10 <MiMAC_SendPacket+0x368>)
    9c9c:	22ff      	movs	r2, #255	; 0xff
    9c9e:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9ca0:	71da      	strb	r2, [r3, #7]
    9ca2:	2308      	movs	r3, #8
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    9ca4:	a903      	add	r1, sp, #12
    9ca6:	0170      	lsls	r0, r6, #5
    9ca8:	780a      	ldrb	r2, [r1, #0]
    9caa:	2420      	movs	r4, #32
    9cac:	43a2      	bics	r2, r4
    9cae:	4302      	orrs	r2, r0
    9cb0:	700a      	strb	r2, [r1, #0]
    9cb2:	0692      	lsls	r2, r2, #26
    9cb4:	d400      	bmi.n	9cb8 <MiMAC_SendPacket+0x210>
    9cb6:	e08b      	b.n	9dd0 <MiMAC_SendPacket+0x328>
	{
	 	AckSeqNum = IEEESeqNum-1;
    9cb8:	4a59      	ldr	r2, [pc, #356]	; (9e20 <MiMAC_SendPacket+0x378>)
    9cba:	7812      	ldrb	r2, [r2, #0]
    9cbc:	3a01      	subs	r2, #1
    9cbe:	4959      	ldr	r1, [pc, #356]	; (9e24 <MiMAC_SendPacket+0x37c>)
    9cc0:	700a      	strb	r2, [r1, #0]
		 AckReqData = 1;
    9cc2:	2101      	movs	r1, #1
    9cc4:	4a58      	ldr	r2, [pc, #352]	; (9e28 <MiMAC_SendPacket+0x380>)
    9cc6:	7011      	strb	r1, [r2, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9cc8:	465a      	mov	r2, fp
    9cca:	2a00      	cmp	r2, #0
    9ccc:	d109      	bne.n	9ce2 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    9cce:	1c5a      	adds	r2, r3, #1
    9cd0:	b2d2      	uxtb	r2, r2
    9cd2:	494f      	ldr	r1, [pc, #316]	; (9e10 <MiMAC_SendPacket+0x368>)
    9cd4:	484d      	ldr	r0, [pc, #308]	; (9e0c <MiMAC_SendPacket+0x364>)
    9cd6:	7804      	ldrb	r4, [r0, #0]
    9cd8:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    9cda:	3302      	adds	r3, #2
    9cdc:	b2db      	uxtb	r3, r3
    9cde:	7840      	ldrb	r0, [r0, #1]
    9ce0:	5488      	strb	r0, [r1, r2]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9ce2:	2d00      	cmp	r5, #0
    9ce4:	d100      	bne.n	9ce8 <MiMAC_SendPacket+0x240>
    9ce6:	e077      	b.n	9dd8 <MiMAC_SendPacket+0x330>
    {
		packet[loc++] = myNetworkAddress.v[0];
    9ce8:	4a49      	ldr	r2, [pc, #292]	; (9e10 <MiMAC_SendPacket+0x368>)
    9cea:	4950      	ldr	r1, [pc, #320]	; (9e2c <MiMAC_SendPacket+0x384>)
    9cec:	7808      	ldrb	r0, [r1, #0]
    9cee:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    9cf0:	1c9c      	adds	r4, r3, #2
    9cf2:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    9cf4:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    9cf6:	b2db      	uxtb	r3, r3
    9cf8:	7849      	ldrb	r1, [r1, #1]
    9cfa:	54d1      	strb	r1, [r2, r3]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    9cfc:	ab03      	add	r3, sp, #12
    9cfe:	0172      	lsls	r2, r6, #5
    9d00:	781e      	ldrb	r6, [r3, #0]
    9d02:	2120      	movs	r1, #32
    9d04:	438e      	bics	r6, r1
    9d06:	4316      	orrs	r6, r2
    9d08:	701e      	strb	r6, [r3, #0]
    9d0a:	0733      	lsls	r3, r6, #28
    9d0c:	d51b      	bpl.n	9d46 <MiMAC_SendPacket+0x29e>
    9d0e:	0022      	movs	r2, r4
    9d10:	2300      	movs	r3, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    9d12:	4e3f      	ldr	r6, [pc, #252]	; (9e10 <MiMAC_SendPacket+0x368>)
    9d14:	4d40      	ldr	r5, [pc, #256]	; (9e18 <MiMAC_SendPacket+0x370>)
    9d16:	1c51      	adds	r1, r2, #1
    9d18:	5ce8      	ldrb	r0, [r5, r3]
    9d1a:	54b0      	strb	r0, [r6, r2]
    9d1c:	3301      	adds	r3, #1
    9d1e:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    9d20:	2b04      	cmp	r3, #4
    9d22:	d1f8      	bne.n	9d16 <MiMAC_SendPacket+0x26e>
    9d24:	1d25      	adds	r5, r4, #4
    9d26:	b2ed      	uxtb	r5, r5
	}
	OutgoingFrameCounter.Val++;
    9d28:	4a3b      	ldr	r2, [pc, #236]	; (9e18 <MiMAC_SendPacket+0x370>)
    9d2a:	6813      	ldr	r3, [r2, #0]
    9d2c:	3301      	adds	r3, #1
    9d2e:	6013      	str	r3, [r2, #0]

	#if defined(ENABLE_NETWORK_FREEZER)
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    9d30:	b2db      	uxtb	r3, r3
    9d32:	2b00      	cmp	r3, #0
    9d34:	d102      	bne.n	9d3c <MiMAC_SendPacket+0x294>
    9d36:	7853      	ldrb	r3, [r2, #1]
    9d38:	079b      	lsls	r3, r3, #30
    9d3a:	d05c      	beq.n	9df6 <MiMAC_SendPacket+0x34e>
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    9d3c:	3405      	adds	r4, #5
    9d3e:	b2e4      	uxtb	r4, r4
    9d40:	2200      	movs	r2, #0
    9d42:	4b33      	ldr	r3, [pc, #204]	; (9e10 <MiMAC_SendPacket+0x368>)
    9d44:	555a      	strb	r2, [r3, r5]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9d46:	ab10      	add	r3, sp, #64	; 0x40
    9d48:	781e      	ldrb	r6, [r3, #0]
    9d4a:	2e00      	cmp	r6, #0
    9d4c:	d057      	beq.n	9dfe <MiMAC_SendPacket+0x356>
    9d4e:	9b00      	ldr	r3, [sp, #0]
    9d50:	1932      	adds	r2, r6, r4
    9d52:	b2d2      	uxtb	r2, r2
    {
	    packet[loc++] = MACPayload[i];
    9d54:	4d2e      	ldr	r5, [pc, #184]	; (9e10 <MiMAC_SendPacket+0x368>)
    9d56:	1c61      	adds	r1, r4, #1
    9d58:	7818      	ldrb	r0, [r3, #0]
    9d5a:	5528      	strb	r0, [r5, r4]
    9d5c:	3301      	adds	r3, #1
    9d5e:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9d60:	4294      	cmp	r4, r2
    9d62:	d1f8      	bne.n	9d56 <MiMAC_SendPacket+0x2ae>
    }
	packet[loc++] = final_mic_value[0];
    9d64:	482a      	ldr	r0, [pc, #168]	; (9e10 <MiMAC_SendPacket+0x368>)
    9d66:	4b32      	ldr	r3, [pc, #200]	; (9e30 <MiMAC_SendPacket+0x388>)
    9d68:	7819      	ldrb	r1, [r3, #0]
    9d6a:	5481      	strb	r1, [r0, r2]
    9d6c:	1c51      	adds	r1, r2, #1
	packet[loc++] = final_mic_value[1];
    9d6e:	b2c9      	uxtb	r1, r1
    9d70:	785c      	ldrb	r4, [r3, #1]
    9d72:	5444      	strb	r4, [r0, r1]
    9d74:	1c91      	adds	r1, r2, #2
	packet[loc++] = final_mic_value[2];
    9d76:	b2c9      	uxtb	r1, r1
    9d78:	789c      	ldrb	r4, [r3, #2]
    9d7a:	5444      	strb	r4, [r0, r1]
    9d7c:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    9d7e:	b2d2      	uxtb	r2, r2
    9d80:	78db      	ldrb	r3, [r3, #3]
    9d82:	5483      	strb	r3, [r0, r2]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    9d84:	4b2b      	ldr	r3, [pc, #172]	; (9e34 <MiMAC_SendPacket+0x38c>)
    9d86:	9a00      	ldr	r2, [sp, #0]
    9d88:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    9d8a:	4b2b      	ldr	r3, [pc, #172]	; (9e38 <MiMAC_SendPacket+0x390>)
    9d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d8e:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    9d90:	4b2a      	ldr	r3, [pc, #168]	; (9e3c <MiMAC_SendPacket+0x394>)
    9d92:	4652      	mov	r2, sl
    9d94:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    9d96:	4b2a      	ldr	r3, [pc, #168]	; (9e40 <MiMAC_SendPacket+0x398>)
    9d98:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    9d9a:	4b2a      	ldr	r3, [pc, #168]	; (9e44 <MiMAC_SendPacket+0x39c>)
    9d9c:	4798      	blx	r3
    9d9e:	1e43      	subs	r3, r0, #1
    9da0:	4198      	sbcs	r0, r3
    9da2:	b2c0      	uxtb	r0, r0
}
    9da4:	b007      	add	sp, #28
    9da6:	bc3c      	pop	{r2, r3, r4, r5}
    9da8:	4690      	mov	r8, r2
    9daa:	4699      	mov	r9, r3
    9dac:	46a2      	mov	sl, r4
    9dae:	46ab      	mov	fp, r5
    9db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    9db2:	4643      	mov	r3, r8
    9db4:	2b00      	cmp	r3, #0
    9db6:	d000      	beq.n	9dba <MiMAC_SendPacket+0x312>
    9db8:	e745      	b.n	9c46 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    9dba:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9dbc:	4814      	ldr	r0, [pc, #80]	; (9e10 <MiMAC_SendPacket+0x368>)
    9dbe:	9c02      	ldr	r4, [sp, #8]
    9dc0:	5ce1      	ldrb	r1, [r4, r3]
    9dc2:	181a      	adds	r2, r3, r0
    9dc4:	7191      	strb	r1, [r2, #6]
    9dc6:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    9dc8:	2b08      	cmp	r3, #8
    9dca:	d1f9      	bne.n	9dc0 <MiMAC_SendPacket+0x318>
					packet[loc++] = transParam.DestAddress[i];
    9dcc:	3306      	adds	r3, #6
    9dce:	e769      	b.n	9ca4 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9dd0:	2100      	movs	r1, #0
    9dd2:	4a15      	ldr	r2, [pc, #84]	; (9e28 <MiMAC_SendPacket+0x380>)
    9dd4:	7011      	strb	r1, [r2, #0]
    9dd6:	e777      	b.n	9cc8 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    9dd8:	4a1b      	ldr	r2, [pc, #108]	; (9e48 <MiMAC_SendPacket+0x3a0>)
    9dda:	6852      	ldr	r2, [r2, #4]
    9ddc:	0018      	movs	r0, r3
    9dde:	3008      	adds	r0, #8
    9de0:	b2c0      	uxtb	r0, r0
    9de2:	4d0b      	ldr	r5, [pc, #44]	; (9e10 <MiMAC_SendPacket+0x368>)
    9de4:	1c5c      	adds	r4, r3, #1
    9de6:	b2e4      	uxtb	r4, r4
    9de8:	7811      	ldrb	r1, [r2, #0]
    9dea:	54e9      	strb	r1, [r5, r3]
    9dec:	3201      	adds	r2, #1
    9dee:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    9df0:	42a0      	cmp	r0, r4
    9df2:	d1f7      	bne.n	9de4 <MiMAC_SendPacket+0x33c>
    9df4:	e782      	b.n	9cfc <MiMAC_SendPacket+0x254>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9df6:	2001      	movs	r0, #1
    9df8:	4b14      	ldr	r3, [pc, #80]	; (9e4c <MiMAC_SendPacket+0x3a4>)
    9dfa:	4798      	blx	r3
    9dfc:	e79e      	b.n	9d3c <MiMAC_SendPacket+0x294>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9dfe:	0022      	movs	r2, r4
    9e00:	e7b0      	b.n	9d64 <MiMAC_SendPacket+0x2bc>
    9e02:	46c0      	nop			; (mov r8, r8)
    9e04:	2000028e 	.word	0x2000028e
    9e08:	200020f8 	.word	0x200020f8
    9e0c:	2000214c 	.word	0x2000214c
    9e10:	20001fd8 	.word	0x20001fd8
    9e14:	0000ffff 	.word	0x0000ffff
    9e18:	20002128 	.word	0x20002128
    9e1c:	00009739 	.word	0x00009739
    9e20:	20001fd5 	.word	0x20001fd5
    9e24:	20001fd4 	.word	0x20001fd4
    9e28:	2000028b 	.word	0x2000028b
    9e2c:	200020d8 	.word	0x200020d8
    9e30:	20002114 	.word	0x20002114
    9e34:	20000298 	.word	0x20000298
    9e38:	20000290 	.word	0x20000290
    9e3c:	20000294 	.word	0x20000294
    9e40:	2000028d 	.word	0x2000028d
    9e44:	0000a9d9 	.word	0x0000a9d9
    9e48:	200020e0 	.word	0x200020e0
    9e4c:	0000933d 	.word	0x0000933d

00009e50 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    9e50:	4b04      	ldr	r3, [pc, #16]	; (9e64 <MiMAC_DiscardPacket+0x14>)
    9e52:	781b      	ldrb	r3, [r3, #0]
    9e54:	2b03      	cmp	r3, #3
    9e56:	d804      	bhi.n	9e62 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    9e58:	021a      	lsls	r2, r3, #8
    9e5a:	18d3      	adds	r3, r2, r3
    9e5c:	2100      	movs	r1, #0
    9e5e:	4a02      	ldr	r2, [pc, #8]	; (9e68 <MiMAC_DiscardPacket+0x18>)
    9e60:	5499      	strb	r1, [r3, r2]
	}
}
    9e62:	4770      	bx	lr
    9e64:	20000017 	.word	0x20000017
    9e68:	20002258 	.word	0x20002258

00009e6c <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    9e6c:	2200      	movs	r2, #0
    9e6e:	4b04      	ldr	r3, [pc, #16]	; (9e80 <PHY_DataConf+0x14>)
    9e70:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    9e72:	4b04      	ldr	r3, [pc, #16]	; (9e84 <PHY_DataConf+0x18>)
    9e74:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    9e76:	3201      	adds	r2, #1
    9e78:	4b03      	ldr	r3, [pc, #12]	; (9e88 <PHY_DataConf+0x1c>)
    9e7a:	701a      	strb	r2, [r3, #0]
}
    9e7c:	4770      	bx	lr
    9e7e:	46c0      	nop			; (mov r8, r8)
    9e80:	2000028c 	.word	0x2000028c
    9e84:	20002124 	.word	0x20002124
    9e88:	2000028e 	.word	0x2000028e

00009e8c <MiMAC_RetryPacket>:
{
    9e8c:	b510      	push	{r4, lr}
	DataRetryCount++;
    9e8e:	4a0b      	ldr	r2, [pc, #44]	; (9ebc <MiMAC_RetryPacket+0x30>)
    9e90:	7813      	ldrb	r3, [r2, #0]
    9e92:	3301      	adds	r3, #1
    9e94:	b2db      	uxtb	r3, r3
    9e96:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    9e98:	2b02      	cmp	r3, #2
    9e9a:	d904      	bls.n	9ea6 <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    9e9c:	2003      	movs	r0, #3
    9e9e:	4b08      	ldr	r3, [pc, #32]	; (9ec0 <MiMAC_RetryPacket+0x34>)
    9ea0:	4798      	blx	r3
	bool status = false;
    9ea2:	2000      	movs	r0, #0
}
    9ea4:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    9ea6:	2201      	movs	r2, #1
    9ea8:	4b06      	ldr	r3, [pc, #24]	; (9ec4 <MiMAC_RetryPacket+0x38>)
    9eaa:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    9eac:	4806      	ldr	r0, [pc, #24]	; (9ec8 <MiMAC_RetryPacket+0x3c>)
    9eae:	4b07      	ldr	r3, [pc, #28]	; (9ecc <MiMAC_RetryPacket+0x40>)
    9eb0:	4798      	blx	r3
    9eb2:	1e43      	subs	r3, r0, #1
    9eb4:	4198      	sbcs	r0, r3
    9eb6:	b2c0      	uxtb	r0, r0
    9eb8:	e7f4      	b.n	9ea4 <MiMAC_RetryPacket+0x18>
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	2000028c 	.word	0x2000028c
    9ec0:	00009e6d 	.word	0x00009e6d
    9ec4:	2000028b 	.word	0x2000028b
    9ec8:	20001fd8 	.word	0x20001fd8
    9ecc:	0000a9d9 	.word	0x0000a9d9

00009ed0 <MiMAC_ReceivedPacket>:
{
    9ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ed2:	46c6      	mov	lr, r8
    9ed4:	b500      	push	{lr}
    9ed6:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9ed8:	22ff      	movs	r2, #255	; 0xff
    9eda:	4bcc      	ldr	r3, [pc, #816]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    9edc:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    9ede:	4bcc      	ldr	r3, [pc, #816]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d000      	beq.n	9ee8 <MiMAC_ReceivedPacket+0x18>
    9ee6:	e354      	b.n	a592 <MiMAC_ReceivedPacket+0x6c2>
    9ee8:	2302      	movs	r3, #2
    9eea:	33ff      	adds	r3, #255	; 0xff
    9eec:	4ac8      	ldr	r2, [pc, #800]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9eee:	5cd3      	ldrb	r3, [r2, r3]
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d10e      	bne.n	9f12 <MiMAC_ReceivedPacket+0x42>
    9ef4:	4bc7      	ldr	r3, [pc, #796]	; (a214 <MiMAC_ReceivedPacket+0x344>)
    9ef6:	5cd3      	ldrb	r3, [r2, r3]
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d140      	bne.n	9f7e <MiMAC_ReceivedPacket+0xae>
    9efc:	4bc6      	ldr	r3, [pc, #792]	; (a218 <MiMAC_ReceivedPacket+0x348>)
    9efe:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    9f00:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    9f02:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    9f04:	2b00      	cmp	r3, #0
    9f06:	d105      	bne.n	9f14 <MiMAC_ReceivedPacket+0x44>
}
    9f08:	0020      	movs	r0, r4
    9f0a:	b008      	add	sp, #32
    9f0c:	bc04      	pop	{r2}
    9f0e:	4690      	mov	r8, r2
    9f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    9f12:	2201      	movs	r2, #1
			BankIndex = i;
    9f14:	4bbd      	ldr	r3, [pc, #756]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    9f16:	701a      	strb	r2, [r3, #0]
	return false;
    9f18:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    9f1a:	2a03      	cmp	r2, #3
    9f1c:	d8f4      	bhi.n	9f08 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    9f1e:	0010      	movs	r0, r2
    9f20:	0211      	lsls	r1, r2, #8
    9f22:	1889      	adds	r1, r1, r2
    9f24:	4bba      	ldr	r3, [pc, #744]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9f26:	185b      	adds	r3, r3, r1
    9f28:	789d      	ldrb	r5, [r3, #2]
    9f2a:	2440      	movs	r4, #64	; 0x40
    9f2c:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    9f2e:	49bb      	ldr	r1, [pc, #748]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    9f30:	2400      	movs	r4, #0
    9f32:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    9f34:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    9f36:	78db      	ldrb	r3, [r3, #3]
    9f38:	2133      	movs	r1, #51	; 0x33
    9f3a:	438b      	bics	r3, r1
		switch (addrMode)
    9f3c:	b2d9      	uxtb	r1, r3
    9f3e:	2988      	cmp	r1, #136	; 0x88
    9f40:	d100      	bne.n	9f44 <MiMAC_ReceivedPacket+0x74>
    9f42:	e12f      	b.n	a1a4 <MiMAC_ReceivedPacket+0x2d4>
    9f44:	d91d      	bls.n	9f82 <MiMAC_ReceivedPacket+0xb2>
    9f46:	b2d9      	uxtb	r1, r3
    9f48:	29c8      	cmp	r1, #200	; 0xc8
    9f4a:	d06f      	beq.n	a02c <MiMAC_ReceivedPacket+0x15c>
    9f4c:	29cc      	cmp	r1, #204	; 0xcc
    9f4e:	d100      	bne.n	9f52 <MiMAC_ReceivedPacket+0x82>
    9f50:	e0b9      	b.n	a0c6 <MiMAC_ReceivedPacket+0x1f6>
    9f52:	298c      	cmp	r1, #140	; 0x8c
    9f54:	d100      	bne.n	9f58 <MiMAC_ReceivedPacket+0x88>
    9f56:	e1aa      	b.n	a2ae <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    9f58:	4bb1      	ldr	r3, [pc, #708]	; (a220 <MiMAC_ReceivedPacket+0x350>)
    9f5a:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9f5c:	4bab      	ldr	r3, [pc, #684]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    9f5e:	781a      	ldrb	r2, [r3, #0]
    9f60:	0213      	lsls	r3, r2, #8
    9f62:	189a      	adds	r2, r3, r2
    9f64:	4baa      	ldr	r3, [pc, #680]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9f66:	189b      	adds	r3, r3, r2
    9f68:	789b      	ldrb	r3, [r3, #2]
			return false;
    9f6a:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9f6c:	069b      	lsls	r3, r3, #26
    9f6e:	d5cb      	bpl.n	9f08 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    9f70:	a807      	add	r0, sp, #28
    9f72:	2300      	movs	r3, #0
    9f74:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    9f76:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    9f78:	4baa      	ldr	r3, [pc, #680]	; (a224 <MiMAC_ReceivedPacket+0x354>)
    9f7a:	4798      	blx	r3
    9f7c:	e7c4      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    9f7e:	2202      	movs	r2, #2
    9f80:	e7c8      	b.n	9f14 <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    9f82:	2b08      	cmp	r3, #8
    9f84:	d100      	bne.n	9f88 <MiMAC_ReceivedPacket+0xb8>
    9f86:	e1e1      	b.n	a34c <MiMAC_ReceivedPacket+0x47c>
    9f88:	2980      	cmp	r1, #128	; 0x80
    9f8a:	d1e5      	bne.n	9f58 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    9f8c:	4ba3      	ldr	r3, [pc, #652]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    9f8e:	7819      	ldrb	r1, [r3, #0]
    9f90:	2404      	movs	r4, #4
    9f92:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9f94:	2480      	movs	r4, #128	; 0x80
    9f96:	4264      	negs	r4, r4
    9f98:	4321      	orrs	r1, r4
    9f9a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9f9c:	2101      	movs	r1, #1
    9f9e:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9fa0:	4c9b      	ldr	r4, [pc, #620]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9fa2:	0211      	lsls	r1, r2, #8
    9fa4:	1888      	adds	r0, r1, r2
    9fa6:	1821      	adds	r1, r4, r0
    9fa8:	794d      	ldrb	r5, [r1, #5]
    9faa:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9fac:	7989      	ldrb	r1, [r1, #6]
    9fae:	7459      	strb	r1, [r3, #17]
    9fb0:	0211      	lsls	r1, r2, #8
    9fb2:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    9fb4:	1dd1      	adds	r1, r2, #7
    9fb6:	1909      	adds	r1, r1, r4
    9fb8:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    9fba:	5d01      	ldrb	r1, [r0, r4]
    9fbc:	390b      	subs	r1, #11
    9fbe:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9fc0:	3209      	adds	r2, #9
    9fc2:	1912      	adds	r2, r2, r4
    9fc4:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9fc6:	4b91      	ldr	r3, [pc, #580]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    9fc8:	781a      	ldrb	r2, [r3, #0]
    9fca:	0213      	lsls	r3, r2, #8
    9fcc:	189a      	adds	r2, r3, r2
    9fce:	4b90      	ldr	r3, [pc, #576]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9fd0:	189b      	adds	r3, r3, r2
    9fd2:	789b      	ldrb	r3, [r3, #2]
    9fd4:	071b      	lsls	r3, r3, #28
    9fd6:	d500      	bpl.n	9fda <MiMAC_ReceivedPacket+0x10a>
    9fd8:	e1d9      	b.n	a38e <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    9fda:	4b8c      	ldr	r3, [pc, #560]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    9fdc:	7818      	ldrb	r0, [r3, #0]
    9fde:	0202      	lsls	r2, r0, #8
    9fe0:	1812      	adds	r2, r2, r0
    9fe2:	4b8b      	ldr	r3, [pc, #556]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    9fe4:	189b      	adds	r3, r3, r2
    9fe6:	7899      	ldrb	r1, [r3, #2]
    9fe8:	2307      	movs	r3, #7
    9fea:	400b      	ands	r3, r1
    9fec:	2b01      	cmp	r3, #1
    9fee:	d100      	bne.n	9ff2 <MiMAC_ReceivedPacket+0x122>
    9ff0:	e24e      	b.n	a490 <MiMAC_ReceivedPacket+0x5c0>
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d100      	bne.n	9ff8 <MiMAC_ReceivedPacket+0x128>
    9ff6:	e283      	b.n	a500 <MiMAC_ReceivedPacket+0x630>
    9ff8:	2b02      	cmp	r3, #2
    9ffa:	d100      	bne.n	9ffe <MiMAC_ReceivedPacket+0x12e>
    9ffc:	e286      	b.n	a50c <MiMAC_ReceivedPacket+0x63c>
    9ffe:	2b03      	cmp	r3, #3
    a000:	d100      	bne.n	a004 <MiMAC_ReceivedPacket+0x134>
    a002:	e275      	b.n	a4f0 <MiMAC_ReceivedPacket+0x620>
			MiMAC_DiscardPacket();
    a004:	4b86      	ldr	r3, [pc, #536]	; (a220 <MiMAC_ReceivedPacket+0x350>)
    a006:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a008:	4b80      	ldr	r3, [pc, #512]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    a00a:	781a      	ldrb	r2, [r3, #0]
    a00c:	0213      	lsls	r3, r2, #8
    a00e:	189a      	adds	r2, r3, r2
    a010:	4b7f      	ldr	r3, [pc, #508]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a012:	189b      	adds	r3, r3, r2
    a014:	789b      	ldrb	r3, [r3, #2]
			return false;
    a016:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a018:	069b      	lsls	r3, r3, #26
    a01a:	d400      	bmi.n	a01e <MiMAC_ReceivedPacket+0x14e>
    a01c:	e774      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    a01e:	a807      	add	r0, sp, #28
    a020:	2300      	movs	r3, #0
    a022:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a024:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a026:	4b7f      	ldr	r3, [pc, #508]	; (a224 <MiMAC_ReceivedPacket+0x354>)
    a028:	4798      	blx	r3
    a02a:	e76d      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a02c:	0211      	lsls	r1, r2, #8
    a02e:	1889      	adds	r1, r1, r2
    a030:	4b77      	ldr	r3, [pc, #476]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a032:	185b      	adds	r3, r3, r1
    a034:	79dc      	ldrb	r4, [r3, #7]
    a036:	2cff      	cmp	r4, #255	; 0xff
    a038:	d01e      	beq.n	a078 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a03a:	4978      	ldr	r1, [pc, #480]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a03c:	780e      	ldrb	r6, [r1, #0]
    a03e:	2380      	movs	r3, #128	; 0x80
    a040:	425b      	negs	r3, r3
    a042:	4333      	orrs	r3, r6
    a044:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a046:	2d00      	cmp	r5, #0
    a048:	d000      	beq.n	a04c <MiMAC_ReceivedPacket+0x17c>
    a04a:	e27d      	b.n	a548 <MiMAC_ReceivedPacket+0x678>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a04c:	4973      	ldr	r1, [pc, #460]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a04e:	4c70      	ldr	r4, [pc, #448]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a050:	0203      	lsls	r3, r0, #8
    a052:	1818      	adds	r0, r3, r0
    a054:	1823      	adds	r3, r4, r0
    a056:	7a5d      	ldrb	r5, [r3, #9]
    a058:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a05a:	7a9b      	ldrb	r3, [r3, #10]
    a05c:	744b      	strb	r3, [r1, #17]
    a05e:	0213      	lsls	r3, r2, #8
    a060:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a062:	0013      	movs	r3, r2
    a064:	330b      	adds	r3, #11
    a066:	191b      	adds	r3, r3, r4
    a068:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a06a:	5d03      	ldrb	r3, [r0, r4]
    a06c:	3b15      	subs	r3, #21
    a06e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a070:	3213      	adds	r2, #19
    a072:	1912      	adds	r2, r2, r4
    a074:	608a      	str	r2, [r1, #8]
    a076:	e043      	b.n	a100 <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a078:	0211      	lsls	r1, r2, #8
    a07a:	1889      	adds	r1, r1, r2
    a07c:	4b64      	ldr	r3, [pc, #400]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a07e:	185b      	adds	r3, r3, r1
    a080:	7a1b      	ldrb	r3, [r3, #8]
    a082:	2bff      	cmp	r3, #255	; 0xff
    a084:	d1d9      	bne.n	a03a <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    a086:	4965      	ldr	r1, [pc, #404]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a088:	780b      	ldrb	r3, [r1, #0]
    a08a:	2404      	movs	r4, #4
    a08c:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a08e:	2480      	movs	r4, #128	; 0x80
    a090:	4264      	negs	r4, r4
    a092:	4323      	orrs	r3, r4
    a094:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a096:	2d00      	cmp	r5, #0
    a098:	d000      	beq.n	a09c <MiMAC_ReceivedPacket+0x1cc>
    a09a:	e264      	b.n	a566 <MiMAC_ReceivedPacket+0x696>
    a09c:	e7d6      	b.n	a04c <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    a09e:	4b60      	ldr	r3, [pc, #384]	; (a220 <MiMAC_ReceivedPacket+0x350>)
    a0a0:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a0a2:	4b5a      	ldr	r3, [pc, #360]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    a0a4:	781a      	ldrb	r2, [r3, #0]
    a0a6:	0213      	lsls	r3, r2, #8
    a0a8:	189a      	adds	r2, r3, r2
    a0aa:	4b59      	ldr	r3, [pc, #356]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a0ac:	189b      	adds	r3, r3, r2
    a0ae:	789b      	ldrb	r3, [r3, #2]
					return false;
    a0b0:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a0b2:	069b      	lsls	r3, r3, #26
    a0b4:	d400      	bmi.n	a0b8 <MiMAC_ReceivedPacket+0x1e8>
    a0b6:	e727      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a0b8:	a807      	add	r0, sp, #28
    a0ba:	2300      	movs	r3, #0
    a0bc:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a0be:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a0c0:	4b58      	ldr	r3, [pc, #352]	; (a224 <MiMAC_ReceivedPacket+0x354>)
    a0c2:	4798      	blx	r3
    a0c4:	e720      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a0c6:	4955      	ldr	r1, [pc, #340]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a0c8:	780c      	ldrb	r4, [r1, #0]
    a0ca:	2380      	movs	r3, #128	; 0x80
    a0cc:	425b      	negs	r3, r3
    a0ce:	4323      	orrs	r3, r4
    a0d0:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a0d2:	2d00      	cmp	r5, #0
    a0d4:	d133      	bne.n	a13e <MiMAC_ReceivedPacket+0x26e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    a0d6:	4951      	ldr	r1, [pc, #324]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a0d8:	4c4d      	ldr	r4, [pc, #308]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a0da:	0213      	lsls	r3, r2, #8
    a0dc:	1898      	adds	r0, r3, r2
    a0de:	1823      	adds	r3, r4, r0
    a0e0:	7bdd      	ldrb	r5, [r3, #15]
    a0e2:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    a0e4:	7c1b      	ldrb	r3, [r3, #16]
    a0e6:	744b      	strb	r3, [r1, #17]
    a0e8:	0213      	lsls	r3, r2, #8
    a0ea:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    a0ec:	0013      	movs	r3, r2
    a0ee:	3311      	adds	r3, #17
    a0f0:	191b      	adds	r3, r3, r4
    a0f2:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    a0f4:	5d03      	ldrb	r3, [r0, r4]
    a0f6:	3b1b      	subs	r3, #27
    a0f8:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    a0fa:	3219      	adds	r2, #25
    a0fc:	1912      	adds	r2, r2, r4
    a0fe:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a100:	4b42      	ldr	r3, [pc, #264]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    a102:	781a      	ldrb	r2, [r3, #0]
    a104:	0213      	lsls	r3, r2, #8
    a106:	189a      	adds	r2, r3, r2
    a108:	4b41      	ldr	r3, [pc, #260]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a10a:	189b      	adds	r3, r3, r2
    a10c:	789b      	ldrb	r3, [r3, #2]
    a10e:	071b      	lsls	r3, r3, #28
    a110:	d400      	bmi.n	a114 <MiMAC_ReceivedPacket+0x244>
    a112:	e762      	b.n	9fda <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    a114:	4b41      	ldr	r3, [pc, #260]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a116:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    a118:	785f      	ldrb	r7, [r3, #1]
    a11a:	023f      	lsls	r7, r7, #8
    a11c:	781a      	ldrb	r2, [r3, #0]
    a11e:	4317      	orrs	r7, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    a120:	789a      	ldrb	r2, [r3, #2]
    a122:	0412      	lsls	r2, r2, #16
    a124:	4940      	ldr	r1, [pc, #256]	; (a228 <MiMAC_ReceivedPacket+0x358>)
    a126:	400f      	ands	r7, r1
    a128:	4317      	orrs	r7, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    a12a:	78db      	ldrb	r3, [r3, #3]
    a12c:	061b      	lsls	r3, r3, #24
    a12e:	023f      	lsls	r7, r7, #8
    a130:	0a3f      	lsrs	r7, r7, #8
    a132:	431f      	orrs	r7, r3
    a134:	4d3d      	ldr	r5, [pc, #244]	; (a22c <MiMAC_ReceivedPacket+0x35c>)
    a136:	2600      	movs	r6, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    a138:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    a13a:	46a8      	mov	r8, r5
    a13c:	e141      	b.n	a3c2 <MiMAC_ReceivedPacket+0x4f2>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a13e:	0211      	lsls	r1, r2, #8
    a140:	1889      	adds	r1, r1, r2
    a142:	3107      	adds	r1, #7
    a144:	4a32      	ldr	r2, [pc, #200]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a146:	1889      	adds	r1, r1, r2
    a148:	4839      	ldr	r0, [pc, #228]	; (a230 <MiMAC_ReceivedPacket+0x360>)
    a14a:	4b3a      	ldr	r3, [pc, #232]	; (a234 <MiMAC_ReceivedPacket+0x364>)
    a14c:	4798      	blx	r3
    a14e:	1e04      	subs	r4, r0, #0
    a150:	d015      	beq.n	a17e <MiMAC_ReceivedPacket+0x2ae>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a152:	4b2e      	ldr	r3, [pc, #184]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    a154:	7818      	ldrb	r0, [r3, #0]
    a156:	4a31      	ldr	r2, [pc, #196]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a158:	492d      	ldr	r1, [pc, #180]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a15a:	0203      	lsls	r3, r0, #8
    a15c:	181b      	adds	r3, r3, r0
    a15e:	18c8      	adds	r0, r1, r3
    a160:	7944      	ldrb	r4, [r0, #5]
    a162:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a164:	7980      	ldrb	r0, [r0, #6]
    a166:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    a168:	0018      	movs	r0, r3
    a16a:	300f      	adds	r0, #15
    a16c:	1840      	adds	r0, r0, r1
    a16e:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    a170:	5c58      	ldrb	r0, [r3, r1]
    a172:	3819      	subs	r0, #25
    a174:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    a176:	3317      	adds	r3, #23
    a178:	185b      	adds	r3, r3, r1
    a17a:	6093      	str	r3, [r2, #8]
    a17c:	e7c0      	b.n	a100 <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    a17e:	4b28      	ldr	r3, [pc, #160]	; (a220 <MiMAC_ReceivedPacket+0x350>)
    a180:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a182:	4b22      	ldr	r3, [pc, #136]	; (a20c <MiMAC_ReceivedPacket+0x33c>)
    a184:	781a      	ldrb	r2, [r3, #0]
    a186:	0213      	lsls	r3, r2, #8
    a188:	189a      	adds	r2, r3, r2
    a18a:	4b21      	ldr	r3, [pc, #132]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a18c:	189b      	adds	r3, r3, r2
    a18e:	789b      	ldrb	r3, [r3, #2]
    a190:	069b      	lsls	r3, r3, #26
    a192:	d400      	bmi.n	a196 <MiMAC_ReceivedPacket+0x2c6>
    a194:	e6b8      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a196:	a807      	add	r0, sp, #28
    a198:	2300      	movs	r3, #0
    a19a:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a19c:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a19e:	4b21      	ldr	r3, [pc, #132]	; (a224 <MiMAC_ReceivedPacket+0x354>)
    a1a0:	4798      	blx	r3
    a1a2:	e6b1      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a1a4:	0211      	lsls	r1, r2, #8
    a1a6:	1889      	adds	r1, r1, r2
    a1a8:	4b19      	ldr	r3, [pc, #100]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a1aa:	185b      	adds	r3, r3, r1
    a1ac:	79dc      	ldrb	r4, [r3, #7]
    a1ae:	2cff      	cmp	r4, #255	; 0xff
    a1b0:	d01f      	beq.n	a1f2 <MiMAC_ReceivedPacket+0x322>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a1b2:	4b1a      	ldr	r3, [pc, #104]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a1b4:	781e      	ldrb	r6, [r3, #0]
    a1b6:	2180      	movs	r1, #128	; 0x80
    a1b8:	4249      	negs	r1, r1
    a1ba:	4331      	orrs	r1, r6
    a1bc:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a1be:	2101      	movs	r1, #1
    a1c0:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    a1c2:	2d00      	cmp	r5, #0
    a1c4:	d138      	bne.n	a238 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a1c6:	0019      	movs	r1, r3
    a1c8:	4c11      	ldr	r4, [pc, #68]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a1ca:	0203      	lsls	r3, r0, #8
    a1cc:	1818      	adds	r0, r3, r0
    a1ce:	1823      	adds	r3, r4, r0
    a1d0:	7a5d      	ldrb	r5, [r3, #9]
    a1d2:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a1d4:	7a9b      	ldrb	r3, [r3, #10]
    a1d6:	744b      	strb	r3, [r1, #17]
    a1d8:	0213      	lsls	r3, r2, #8
    a1da:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a1dc:	0013      	movs	r3, r2
    a1de:	330b      	adds	r3, #11
    a1e0:	191b      	adds	r3, r3, r4
    a1e2:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    a1e4:	5d03      	ldrb	r3, [r0, r4]
    a1e6:	3b0f      	subs	r3, #15
    a1e8:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    a1ea:	320d      	adds	r2, #13
    a1ec:	1912      	adds	r2, r2, r4
    a1ee:	608a      	str	r2, [r1, #8]
    a1f0:	e6e9      	b.n	9fc6 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a1f2:	0211      	lsls	r1, r2, #8
    a1f4:	1889      	adds	r1, r1, r2
    a1f6:	4b06      	ldr	r3, [pc, #24]	; (a210 <MiMAC_ReceivedPacket+0x340>)
    a1f8:	185b      	adds	r3, r3, r1
    a1fa:	7a1b      	ldrb	r3, [r3, #8]
    a1fc:	2bff      	cmp	r3, #255	; 0xff
    a1fe:	d1d8      	bne.n	a1b2 <MiMAC_ReceivedPacket+0x2e2>
					MACRxPacket.flags.bits.broadcast = 1;
    a200:	4906      	ldr	r1, [pc, #24]	; (a21c <MiMAC_ReceivedPacket+0x34c>)
    a202:	780b      	ldrb	r3, [r1, #0]
    a204:	2604      	movs	r6, #4
    a206:	4333      	orrs	r3, r6
    a208:	700b      	strb	r3, [r1, #0]
    a20a:	e7d2      	b.n	a1b2 <MiMAC_ReceivedPacket+0x2e2>
    a20c:	20000017 	.word	0x20000017
    a210:	20002258 	.word	0x20002258
    a214:	00000202 	.word	0x00000202
    a218:	00000303 	.word	0x00000303
    a21c:	200026a0 	.word	0x200026a0
    a220:	00009e51 	.word	0x00009e51
    a224:	0000f471 	.word	0x0000f471
    a228:	ff00ffff 	.word	0xff00ffff
    a22c:	20002668 	.word	0x20002668
    a230:	20002250 	.word	0x20002250
    a234:	0000acc5 	.word	0x0000acc5
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a238:	0201      	lsls	r1, r0, #8
    a23a:	1809      	adds	r1, r1, r0
    a23c:	4bd7      	ldr	r3, [pc, #860]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a23e:	185b      	adds	r3, r3, r1
    a240:	7a1b      	ldrb	r3, [r3, #8]
    a242:	2cff      	cmp	r4, #255	; 0xff
    a244:	d117      	bne.n	a276 <MiMAC_ReceivedPacket+0x3a6>
    a246:	2bff      	cmp	r3, #255	; 0xff
    a248:	d115      	bne.n	a276 <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a24a:	49d5      	ldr	r1, [pc, #852]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a24c:	4cd3      	ldr	r4, [pc, #844]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a24e:	0203      	lsls	r3, r0, #8
    a250:	1818      	adds	r0, r3, r0
    a252:	1823      	adds	r3, r4, r0
    a254:	795d      	ldrb	r5, [r3, #5]
    a256:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a258:	799b      	ldrb	r3, [r3, #6]
    a25a:	744b      	strb	r3, [r1, #17]
    a25c:	0213      	lsls	r3, r2, #8
    a25e:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a260:	0013      	movs	r3, r2
    a262:	3309      	adds	r3, #9
    a264:	191b      	adds	r3, r3, r4
    a266:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    a268:	5d03      	ldrb	r3, [r0, r4]
    a26a:	3b0d      	subs	r3, #13
    a26c:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    a26e:	320b      	adds	r2, #11
    a270:	1912      	adds	r2, r2, r4
    a272:	608a      	str	r2, [r1, #8]
    a274:	e6a7      	b.n	9fc6 <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a276:	49cb      	ldr	r1, [pc, #812]	; (a5a4 <MiMAC_ReceivedPacket+0x6d4>)
    a278:	7809      	ldrb	r1, [r1, #0]
    a27a:	42a1      	cmp	r1, r4
    a27c:	d103      	bne.n	a286 <MiMAC_ReceivedPacket+0x3b6>
    a27e:	49c9      	ldr	r1, [pc, #804]	; (a5a4 <MiMAC_ReceivedPacket+0x6d4>)
    a280:	7849      	ldrb	r1, [r1, #1]
    a282:	4299      	cmp	r1, r3
    a284:	d0e1      	beq.n	a24a <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    a286:	4bc8      	ldr	r3, [pc, #800]	; (a5a8 <MiMAC_ReceivedPacket+0x6d8>)
    a288:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a28a:	4bc8      	ldr	r3, [pc, #800]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a28c:	781a      	ldrb	r2, [r3, #0]
    a28e:	0213      	lsls	r3, r2, #8
    a290:	189a      	adds	r2, r3, r2
    a292:	4bc2      	ldr	r3, [pc, #776]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a294:	189b      	adds	r3, r3, r2
    a296:	789b      	ldrb	r3, [r3, #2]
						return false;
    a298:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a29a:	069b      	lsls	r3, r3, #26
    a29c:	d400      	bmi.n	a2a0 <MiMAC_ReceivedPacket+0x3d0>
    a29e:	e633      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a2a0:	a807      	add	r0, sp, #28
    a2a2:	2300      	movs	r3, #0
    a2a4:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a2a6:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a2a8:	4bc1      	ldr	r3, [pc, #772]	; (a5b0 <MiMAC_ReceivedPacket+0x6e0>)
    a2aa:	4798      	blx	r3
    a2ac:	e62c      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a2ae:	4bbc      	ldr	r3, [pc, #752]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a2b0:	781c      	ldrb	r4, [r3, #0]
    a2b2:	2180      	movs	r1, #128	; 0x80
    a2b4:	4249      	negs	r1, r1
    a2b6:	4321      	orrs	r1, r4
    a2b8:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a2ba:	2101      	movs	r1, #1
    a2bc:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    a2be:	2d00      	cmp	r5, #0
    a2c0:	d115      	bne.n	a2ee <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    a2c2:	49b7      	ldr	r1, [pc, #732]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a2c4:	4cb5      	ldr	r4, [pc, #724]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a2c6:	0213      	lsls	r3, r2, #8
    a2c8:	1898      	adds	r0, r3, r2
    a2ca:	1823      	adds	r3, r4, r0
    a2cc:	7b9d      	ldrb	r5, [r3, #14]
    a2ce:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    a2d0:	7bdb      	ldrb	r3, [r3, #15]
    a2d2:	744b      	strb	r3, [r1, #17]
    a2d4:	0213      	lsls	r3, r2, #8
    a2d6:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    a2d8:	0013      	movs	r3, r2
    a2da:	3310      	adds	r3, #16
    a2dc:	191b      	adds	r3, r3, r4
    a2de:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a2e0:	5d03      	ldrb	r3, [r0, r4]
    a2e2:	3b15      	subs	r3, #21
    a2e4:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a2e6:	3213      	adds	r2, #19
    a2e8:	1912      	adds	r2, r2, r4
    a2ea:	608a      	str	r2, [r1, #8]
    a2ec:	e66b      	b.n	9fc6 <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a2ee:	0211      	lsls	r1, r2, #8
    a2f0:	1889      	adds	r1, r1, r2
    a2f2:	3107      	adds	r1, #7
    a2f4:	4aa9      	ldr	r2, [pc, #676]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a2f6:	1889      	adds	r1, r1, r2
    a2f8:	48ae      	ldr	r0, [pc, #696]	; (a5b4 <MiMAC_ReceivedPacket+0x6e4>)
    a2fa:	4baf      	ldr	r3, [pc, #700]	; (a5b8 <MiMAC_ReceivedPacket+0x6e8>)
    a2fc:	4798      	blx	r3
    a2fe:	1e04      	subs	r4, r0, #0
    a300:	d011      	beq.n	a326 <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a302:	4baa      	ldr	r3, [pc, #680]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a304:	7818      	ldrb	r0, [r3, #0]
    a306:	4aa6      	ldr	r2, [pc, #664]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a308:	49a4      	ldr	r1, [pc, #656]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a30a:	0203      	lsls	r3, r0, #8
    a30c:	181b      	adds	r3, r3, r0
    a30e:	18c8      	adds	r0, r1, r3
    a310:	7944      	ldrb	r4, [r0, #5]
    a312:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a314:	7980      	ldrb	r0, [r0, #6]
    a316:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a318:	5c58      	ldrb	r0, [r3, r1]
    a31a:	3813      	subs	r0, #19
    a31c:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a31e:	3311      	adds	r3, #17
    a320:	185b      	adds	r3, r3, r1
    a322:	6093      	str	r3, [r2, #8]
    a324:	e64f      	b.n	9fc6 <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    a326:	4ba0      	ldr	r3, [pc, #640]	; (a5a8 <MiMAC_ReceivedPacket+0x6d8>)
    a328:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a32a:	4ba0      	ldr	r3, [pc, #640]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a32c:	781a      	ldrb	r2, [r3, #0]
    a32e:	0213      	lsls	r3, r2, #8
    a330:	189a      	adds	r2, r3, r2
    a332:	4b9a      	ldr	r3, [pc, #616]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a334:	189b      	adds	r3, r3, r2
    a336:	789b      	ldrb	r3, [r3, #2]
    a338:	069b      	lsls	r3, r3, #26
    a33a:	d400      	bmi.n	a33e <MiMAC_ReceivedPacket+0x46e>
    a33c:	e5e4      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a33e:	a807      	add	r0, sp, #28
    a340:	2300      	movs	r3, #0
    a342:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a344:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a346:	4b9a      	ldr	r3, [pc, #616]	; (a5b0 <MiMAC_ReceivedPacket+0x6e0>)
    a348:	4798      	blx	r3
    a34a:	e5dd      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a34c:	0211      	lsls	r1, r2, #8
    a34e:	1889      	adds	r1, r1, r2
    a350:	4b92      	ldr	r3, [pc, #584]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a352:	185b      	adds	r3, r3, r1
    a354:	79db      	ldrb	r3, [r3, #7]
    a356:	2bff      	cmp	r3, #255	; 0xff
    a358:	d00c      	beq.n	a374 <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    a35a:	4991      	ldr	r1, [pc, #580]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a35c:	4c8f      	ldr	r4, [pc, #572]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a35e:	0203      	lsls	r3, r0, #8
    a360:	1818      	adds	r0, r3, r0
    a362:	5d03      	ldrb	r3, [r0, r4]
    a364:	3b0a      	subs	r3, #10
    a366:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a368:	0213      	lsls	r3, r2, #8
    a36a:	189a      	adds	r2, r3, r2
    a36c:	3209      	adds	r2, #9
    a36e:	1912      	adds	r2, r2, r4
    a370:	608a      	str	r2, [r1, #8]
			break;
    a372:	e628      	b.n	9fc6 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a374:	0211      	lsls	r1, r2, #8
    a376:	1889      	adds	r1, r1, r2
    a378:	4b88      	ldr	r3, [pc, #544]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a37a:	185b      	adds	r3, r3, r1
    a37c:	7a1b      	ldrb	r3, [r3, #8]
    a37e:	2bff      	cmp	r3, #255	; 0xff
    a380:	d1eb      	bne.n	a35a <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    a382:	4987      	ldr	r1, [pc, #540]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a384:	780b      	ldrb	r3, [r1, #0]
    a386:	2404      	movs	r4, #4
    a388:	4323      	orrs	r3, r4
    a38a:	700b      	strb	r3, [r1, #0]
    a38c:	e7e5      	b.n	a35a <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    a38e:	4b86      	ldr	r3, [pc, #536]	; (a5a8 <MiMAC_ReceivedPacket+0x6d8>)
    a390:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a392:	4b86      	ldr	r3, [pc, #536]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a394:	781a      	ldrb	r2, [r3, #0]
    a396:	0213      	lsls	r3, r2, #8
    a398:	189a      	adds	r2, r3, r2
    a39a:	4b80      	ldr	r3, [pc, #512]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a39c:	189b      	adds	r3, r3, r2
    a39e:	789b      	ldrb	r3, [r3, #2]
    a3a0:	069b      	lsls	r3, r3, #26
    a3a2:	d401      	bmi.n	a3a8 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    a3a4:	2400      	movs	r4, #0
    a3a6:	e5af      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a3a8:	a807      	add	r0, sp, #28
    a3aa:	2300      	movs	r3, #0
    a3ac:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a3ae:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a3b0:	4b7f      	ldr	r3, [pc, #508]	; (a5b0 <MiMAC_ReceivedPacket+0x6e0>)
    a3b2:	4798      	blx	r3
    a3b4:	e7f6      	b.n	a3a4 <MiMAC_ReceivedPacket+0x4d4>
			for (i = 0; i < CONNECTION_SIZE; i++)
    a3b6:	3401      	adds	r4, #1
    a3b8:	b2e4      	uxtb	r4, r4
    a3ba:	3601      	adds	r6, #1
    a3bc:	350a      	adds	r5, #10
    a3be:	2c05      	cmp	r4, #5
    a3c0:	d014      	beq.n	a3ec <MiMAC_ReceivedPacket+0x51c>
				if ((ConnectionTable[i].status.bits.isValid) &&
    a3c2:	00b3      	lsls	r3, r6, #2
    a3c4:	199b      	adds	r3, r3, r6
    a3c6:	005b      	lsls	r3, r3, #1
    a3c8:	4443      	add	r3, r8
    a3ca:	7a1b      	ldrb	r3, [r3, #8]
    a3cc:	09db      	lsrs	r3, r3, #7
    a3ce:	d0f2      	beq.n	a3b6 <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    a3d0:	4b73      	ldr	r3, [pc, #460]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a3d2:	6859      	ldr	r1, [r3, #4]
    a3d4:	0028      	movs	r0, r5
    a3d6:	4b78      	ldr	r3, [pc, #480]	; (a5b8 <MiMAC_ReceivedPacket+0x6e8>)
    a3d8:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    a3da:	2800      	cmp	r0, #0
    a3dc:	d0eb      	beq.n	a3b6 <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    a3de:	2c04      	cmp	r4, #4
    a3e0:	d804      	bhi.n	a3ec <MiMAC_ReceivedPacket+0x51c>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    a3e2:	00a3      	lsls	r3, r4, #2
    a3e4:	4a75      	ldr	r2, [pc, #468]	; (a5bc <MiMAC_ReceivedPacket+0x6ec>)
    a3e6:	589b      	ldr	r3, [r3, r2]
    a3e8:	42bb      	cmp	r3, r7
    a3ea:	d22d      	bcs.n	a448 <MiMAC_ReceivedPacket+0x578>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    a3ec:	496c      	ldr	r1, [pc, #432]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a3ee:	7b0b      	ldrb	r3, [r1, #12]
    a3f0:	3b05      	subs	r3, #5
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    a3f6:	6888      	ldr	r0, [r1, #8]
    a3f8:	18c3      	adds	r3, r0, r3
    a3fa:	785d      	ldrb	r5, [r3, #1]
    a3fc:	4a70      	ldr	r2, [pc, #448]	; (a5c0 <MiMAC_ReceivedPacket+0x6f0>)
    a3fe:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    a400:	789d      	ldrb	r5, [r3, #2]
    a402:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    a404:	78dd      	ldrb	r5, [r3, #3]
    a406:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    a408:	791b      	ldrb	r3, [r3, #4]
    a40a:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    a40c:	684a      	ldr	r2, [r1, #4]
    a40e:	310c      	adds	r1, #12
    a410:	3005      	adds	r0, #5
    a412:	4b66      	ldr	r3, [pc, #408]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a414:	781d      	ldrb	r5, [r3, #0]
    a416:	022b      	lsls	r3, r5, #8
    a418:	195d      	adds	r5, r3, r5
    a41a:	4b60      	ldr	r3, [pc, #384]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a41c:	195b      	adds	r3, r3, r5
    a41e:	789b      	ldrb	r3, [r3, #2]
    a420:	9300      	str	r3, [sp, #0]
    a422:	003b      	movs	r3, r7
    a424:	4d67      	ldr	r5, [pc, #412]	; (a5c4 <MiMAC_ReceivedPacket+0x6f4>)
    a426:	47a8      	blx	r5
    a428:	2800      	cmp	r0, #0
    a42a:	d01f      	beq.n	a46c <MiMAC_ReceivedPacket+0x59c>
			if (i < CONNECTION_SIZE)
    a42c:	2c04      	cmp	r4, #4
    a42e:	d802      	bhi.n	a436 <MiMAC_ReceivedPacket+0x566>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    a430:	00a4      	lsls	r4, r4, #2
    a432:	4b62      	ldr	r3, [pc, #392]	; (a5bc <MiMAC_ReceivedPacket+0x6ec>)
    a434:	50e7      	str	r7, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    a436:	4b5a      	ldr	r3, [pc, #360]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a438:	689a      	ldr	r2, [r3, #8]
    a43a:	3205      	adds	r2, #5
    a43c:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    a43e:	781a      	ldrb	r2, [r3, #0]
    a440:	2108      	movs	r1, #8
    a442:	430a      	orrs	r2, r1
    a444:	701a      	strb	r2, [r3, #0]
    a446:	e5c8      	b.n	9fda <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    a448:	4b57      	ldr	r3, [pc, #348]	; (a5a8 <MiMAC_ReceivedPacket+0x6d8>)
    a44a:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a44c:	4b57      	ldr	r3, [pc, #348]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a44e:	781a      	ldrb	r2, [r3, #0]
    a450:	0213      	lsls	r3, r2, #8
    a452:	189a      	adds	r2, r3, r2
    a454:	4b51      	ldr	r3, [pc, #324]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a456:	189b      	adds	r3, r3, r2
    a458:	789b      	ldrb	r3, [r3, #2]
    a45a:	069b      	lsls	r3, r3, #26
    a45c:	d5a2      	bpl.n	a3a4 <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a45e:	a807      	add	r0, sp, #28
    a460:	2300      	movs	r3, #0
    a462:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a464:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a466:	4b52      	ldr	r3, [pc, #328]	; (a5b0 <MiMAC_ReceivedPacket+0x6e0>)
    a468:	4798      	blx	r3
    a46a:	e79b      	b.n	a3a4 <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    a46c:	4b4e      	ldr	r3, [pc, #312]	; (a5a8 <MiMAC_ReceivedPacket+0x6d8>)
    a46e:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a470:	4b4e      	ldr	r3, [pc, #312]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a472:	781a      	ldrb	r2, [r3, #0]
    a474:	0213      	lsls	r3, r2, #8
    a476:	189a      	adds	r2, r3, r2
    a478:	4b48      	ldr	r3, [pc, #288]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a47a:	189b      	adds	r3, r3, r2
    a47c:	789b      	ldrb	r3, [r3, #2]
    a47e:	069b      	lsls	r3, r3, #26
    a480:	d590      	bpl.n	a3a4 <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a482:	a807      	add	r0, sp, #28
    a484:	2300      	movs	r3, #0
    a486:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a488:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a48a:	4b49      	ldr	r3, [pc, #292]	; (a5b0 <MiMAC_ReceivedPacket+0x6e0>)
    a48c:	4798      	blx	r3
    a48e:	e789      	b.n	a3a4 <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    a490:	4a43      	ldr	r2, [pc, #268]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a492:	7813      	ldrb	r3, [r2, #0]
    a494:	2403      	movs	r4, #3
    a496:	43a3      	bics	r3, r4
    a498:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    a49a:	4c41      	ldr	r4, [pc, #260]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a49c:	4b3f      	ldr	r3, [pc, #252]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a49e:	0202      	lsls	r2, r0, #8
    a4a0:	1812      	adds	r2, r2, r0
    a4a2:	5cd5      	ldrb	r5, [r2, r3]
    a4a4:	189b      	adds	r3, r3, r2
    a4a6:	5d5a      	ldrb	r2, [r3, r5]
    a4a8:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    a4aa:	785b      	ldrb	r3, [r3, #1]
    a4ac:	7363      	strb	r3, [r4, #13]
		return true;
    a4ae:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a4b0:	068b      	lsls	r3, r1, #26
    a4b2:	d400      	bmi.n	a4b6 <MiMAC_ReceivedPacket+0x5e6>
    a4b4:	e528      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    a4b6:	aa04      	add	r2, sp, #16
    a4b8:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    a4ba:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    a4bc:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    a4be:	233e      	movs	r3, #62	; 0x3e
    a4c0:	425b      	negs	r3, r3
    a4c2:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    a4c4:	4b36      	ldr	r3, [pc, #216]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a4c6:	6859      	ldr	r1, [r3, #4]
    a4c8:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    a4ca:	8a1b      	ldrh	r3, [r3, #16]
    a4cc:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    a4ce:	4b3e      	ldr	r3, [pc, #248]	; (a5c8 <MiMAC_ReceivedPacket+0x6f8>)
    a4d0:	0205      	lsls	r5, r0, #8
    a4d2:	182d      	adds	r5, r5, r0
    a4d4:	4831      	ldr	r0, [pc, #196]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a4d6:	1940      	adds	r0, r0, r5
    a4d8:	7900      	ldrb	r0, [r0, #4]
    a4da:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    a4dc:	9402      	str	r4, [sp, #8]
    a4de:	9401      	str	r4, [sp, #4]
    a4e0:	2001      	movs	r0, #1
    a4e2:	9000      	str	r0, [sp, #0]
    a4e4:	9804      	ldr	r0, [sp, #16]
    a4e6:	9a06      	ldr	r2, [sp, #24]
    a4e8:	4c38      	ldr	r4, [pc, #224]	; (a5cc <MiMAC_ReceivedPacket+0x6fc>)
    a4ea:	47a0      	blx	r4
		return true;
    a4ec:	2401      	movs	r4, #1
    a4ee:	e50b      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a4f0:	4a2b      	ldr	r2, [pc, #172]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a4f2:	7813      	ldrb	r3, [r2, #0]
    a4f4:	2403      	movs	r4, #3
    a4f6:	43a3      	bics	r3, r4
    a4f8:	2401      	movs	r4, #1
    a4fa:	4323      	orrs	r3, r4
    a4fc:	7013      	strb	r3, [r2, #0]
			break;
    a4fe:	e7cc      	b.n	a49a <MiMAC_ReceivedPacket+0x5ca>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    a500:	4a27      	ldr	r2, [pc, #156]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a502:	7813      	ldrb	r3, [r2, #0]
    a504:	2403      	movs	r4, #3
    a506:	4323      	orrs	r3, r4
    a508:	7013      	strb	r3, [r2, #0]
			break;
    a50a:	e7c6      	b.n	a49a <MiMAC_ReceivedPacket+0x5ca>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    a50c:	4a24      	ldr	r2, [pc, #144]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a50e:	7813      	ldrb	r3, [r2, #0]
    a510:	2103      	movs	r1, #3
    a512:	438b      	bics	r3, r1
    a514:	2102      	movs	r1, #2
    a516:	430b      	orrs	r3, r1
    a518:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a51a:	6893      	ldr	r3, [r2, #8]
    a51c:	781a      	ldrb	r2, [r3, #0]
    a51e:	4b2c      	ldr	r3, [pc, #176]	; (a5d0 <MiMAC_ReceivedPacket+0x700>)
    a520:	781b      	ldrb	r3, [r3, #0]
    a522:	429a      	cmp	r2, r3
    a524:	d003      	beq.n	a52e <MiMAC_ReceivedPacket+0x65e>
				MiMAC_DiscardPacket();
    a526:	4b20      	ldr	r3, [pc, #128]	; (a5a8 <MiMAC_ReceivedPacket+0x6d8>)
    a528:	4798      	blx	r3
				return false;
    a52a:	2400      	movs	r4, #0
    a52c:	e4ec      	b.n	9f08 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a52e:	4b29      	ldr	r3, [pc, #164]	; (a5d4 <MiMAC_ReceivedPacket+0x704>)
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	2b00      	cmp	r3, #0
    a534:	d0f7      	beq.n	a526 <MiMAC_ReceivedPacket+0x656>
					DataTxAckTimer.Val = 0;
    a536:	2400      	movs	r4, #0
    a538:	4b27      	ldr	r3, [pc, #156]	; (a5d8 <MiMAC_ReceivedPacket+0x708>)
    a53a:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    a53c:	2000      	movs	r0, #0
    a53e:	4b27      	ldr	r3, [pc, #156]	; (a5dc <MiMAC_ReceivedPacket+0x70c>)
    a540:	4798      	blx	r3
					AckReqData = 0;
    a542:	4b24      	ldr	r3, [pc, #144]	; (a5d4 <MiMAC_ReceivedPacket+0x704>)
    a544:	701c      	strb	r4, [r3, #0]
    a546:	e7ee      	b.n	a526 <MiMAC_ReceivedPacket+0x656>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a548:	0201      	lsls	r1, r0, #8
    a54a:	1809      	adds	r1, r1, r0
    a54c:	4b13      	ldr	r3, [pc, #76]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a54e:	185b      	adds	r3, r3, r1
    a550:	4914      	ldr	r1, [pc, #80]	; (a5a4 <MiMAC_ReceivedPacket+0x6d4>)
    a552:	7849      	ldrb	r1, [r1, #1]
    a554:	7a1b      	ldrb	r3, [r3, #8]
    a556:	4299      	cmp	r1, r3
    a558:	d000      	beq.n	a55c <MiMAC_ReceivedPacket+0x68c>
    a55a:	e5a0      	b.n	a09e <MiMAC_ReceivedPacket+0x1ce>
    a55c:	4b11      	ldr	r3, [pc, #68]	; (a5a4 <MiMAC_ReceivedPacket+0x6d4>)
    a55e:	781b      	ldrb	r3, [r3, #0]
    a560:	42a3      	cmp	r3, r4
    a562:	d000      	beq.n	a566 <MiMAC_ReceivedPacket+0x696>
    a564:	e59b      	b.n	a09e <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a566:	490e      	ldr	r1, [pc, #56]	; (a5a0 <MiMAC_ReceivedPacket+0x6d0>)
    a568:	4c0c      	ldr	r4, [pc, #48]	; (a59c <MiMAC_ReceivedPacket+0x6cc>)
    a56a:	0203      	lsls	r3, r0, #8
    a56c:	1818      	adds	r0, r3, r0
    a56e:	1823      	adds	r3, r4, r0
    a570:	795d      	ldrb	r5, [r3, #5]
    a572:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a574:	799b      	ldrb	r3, [r3, #6]
    a576:	744b      	strb	r3, [r1, #17]
    a578:	0213      	lsls	r3, r2, #8
    a57a:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a57c:	0013      	movs	r3, r2
    a57e:	3309      	adds	r3, #9
    a580:	191b      	adds	r3, r3, r4
    a582:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a584:	5d03      	ldrb	r3, [r0, r4]
    a586:	3b13      	subs	r3, #19
    a588:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a58a:	3211      	adds	r2, #17
    a58c:	1912      	adds	r2, r2, r4
    a58e:	608a      	str	r2, [r1, #8]
    a590:	e5b6      	b.n	a100 <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    a592:	2200      	movs	r2, #0
    a594:	4b05      	ldr	r3, [pc, #20]	; (a5ac <MiMAC_ReceivedPacket+0x6dc>)
    a596:	701a      	strb	r2, [r3, #0]
    a598:	e4c1      	b.n	9f1e <MiMAC_ReceivedPacket+0x4e>
    a59a:	46c0      	nop			; (mov r8, r8)
    a59c:	20002258 	.word	0x20002258
    a5a0:	200026a0 	.word	0x200026a0
    a5a4:	20002660 	.word	0x20002660
    a5a8:	00009e51 	.word	0x00009e51
    a5ac:	20000017 	.word	0x20000017
    a5b0:	0000f471 	.word	0x0000f471
    a5b4:	20002250 	.word	0x20002250
    a5b8:	0000acc5 	.word	0x0000acc5
    a5bc:	200026c8 	.word	0x200026c8
    a5c0:	2000213c 	.word	0x2000213c
    a5c4:	00009895 	.word	0x00009895
    a5c8:	20002140 	.word	0x20002140
    a5cc:	00009aa9 	.word	0x00009aa9
    a5d0:	20001fd4 	.word	0x20001fd4
    a5d4:	2000028b 	.word	0x2000028b
    a5d8:	20002964 	.word	0x20002964
    a5dc:	00009e6d 	.word	0x00009e6d

0000a5e0 <MiMAC_Task>:

void MiMAC_Task(void)
{
    a5e0:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a5e2:	4b0b      	ldr	r3, [pc, #44]	; (a610 <MiMAC_Task+0x30>)
    a5e4:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a5e6:	4b0b      	ldr	r3, [pc, #44]	; (a614 <MiMAC_Task+0x34>)
    a5e8:	681b      	ldr	r3, [r3, #0]
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d003      	beq.n	a5f6 <MiMAC_Task+0x16>
    a5ee:	4a0a      	ldr	r2, [pc, #40]	; (a618 <MiMAC_Task+0x38>)
    a5f0:	7812      	ldrb	r2, [r2, #0]
    a5f2:	2a00      	cmp	r2, #0
    a5f4:	d100      	bne.n	a5f8 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a5f6:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a5f8:	2100      	movs	r1, #0
    a5fa:	4a07      	ldr	r2, [pc, #28]	; (a618 <MiMAC_Task+0x38>)
    a5fc:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a5fe:	4a07      	ldr	r2, [pc, #28]	; (a61c <MiMAC_Task+0x3c>)
    a600:	6812      	ldr	r2, [r2, #0]
    a602:	4907      	ldr	r1, [pc, #28]	; (a620 <MiMAC_Task+0x40>)
    a604:	7809      	ldrb	r1, [r1, #0]
    a606:	4807      	ldr	r0, [pc, #28]	; (a624 <MiMAC_Task+0x44>)
    a608:	7800      	ldrb	r0, [r0, #0]
    a60a:	4798      	blx	r3
}
    a60c:	e7f3      	b.n	a5f6 <MiMAC_Task+0x16>
    a60e:	46c0      	nop			; (mov r8, r8)
    a610:	0000aa81 	.word	0x0000aa81
    a614:	20000290 	.word	0x20000290
    a618:	2000028e 	.word	0x2000028e
    a61c:	20000298 	.word	0x20000298
    a620:	20002124 	.word	0x20002124
    a624:	20000294 	.word	0x20000294

0000a628 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    a628:	b500      	push	{lr}
    a62a:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    a62c:	4b2f      	ldr	r3, [pc, #188]	; (a6ec <phySetChannel+0xc4>)
    a62e:	781b      	ldrb	r3, [r3, #0]
    a630:	2b00      	cmp	r3, #0
    a632:	d007      	beq.n	a644 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    a634:	2b19      	cmp	r3, #25
    a636:	d856      	bhi.n	a6e6 <phySetChannel+0xbe>
    a638:	009b      	lsls	r3, r3, #2
    a63a:	4a2d      	ldr	r2, [pc, #180]	; (a6f0 <phySetChannel+0xc8>)
    a63c:	58d3      	ldr	r3, [r2, r3]
    a63e:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    a640:	4b2c      	ldr	r3, [pc, #176]	; (a6f4 <phySetChannel+0xcc>)
    a642:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    a644:	a901      	add	r1, sp, #4
    a646:	2001      	movs	r0, #1
    a648:	4b2b      	ldr	r3, [pc, #172]	; (a6f8 <phySetChannel+0xd0>)
    a64a:	4798      	blx	r3
	{
	}
}
    a64c:	b003      	add	sp, #12
    a64e:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    a650:	4b2a      	ldr	r3, [pc, #168]	; (a6fc <phySetChannel+0xd4>)
    a652:	9301      	str	r3, [sp, #4]
				break;
    a654:	e7f6      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    a656:	4b2a      	ldr	r3, [pc, #168]	; (a700 <phySetChannel+0xd8>)
    a658:	9301      	str	r3, [sp, #4]
				break;
    a65a:	e7f3      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    a65c:	4b29      	ldr	r3, [pc, #164]	; (a704 <phySetChannel+0xdc>)
    a65e:	9301      	str	r3, [sp, #4]
				break;
    a660:	e7f0      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a662:	4b29      	ldr	r3, [pc, #164]	; (a708 <phySetChannel+0xe0>)
    a664:	9301      	str	r3, [sp, #4]
				break;			
    a666:	e7ed      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a668:	4b28      	ldr	r3, [pc, #160]	; (a70c <phySetChannel+0xe4>)
    a66a:	9301      	str	r3, [sp, #4]
				break;
    a66c:	e7ea      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a66e:	4b28      	ldr	r3, [pc, #160]	; (a710 <phySetChannel+0xe8>)
    a670:	9301      	str	r3, [sp, #4]
				break;			
    a672:	e7e7      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a674:	4b27      	ldr	r3, [pc, #156]	; (a714 <phySetChannel+0xec>)
    a676:	9301      	str	r3, [sp, #4]
				break;
    a678:	e7e4      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a67a:	4b27      	ldr	r3, [pc, #156]	; (a718 <phySetChannel+0xf0>)
    a67c:	9301      	str	r3, [sp, #4]
				break;
    a67e:	e7e1      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a680:	4b26      	ldr	r3, [pc, #152]	; (a71c <phySetChannel+0xf4>)
    a682:	9301      	str	r3, [sp, #4]
				break;
    a684:	e7de      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a686:	4b26      	ldr	r3, [pc, #152]	; (a720 <phySetChannel+0xf8>)
    a688:	9301      	str	r3, [sp, #4]
				break;
    a68a:	e7db      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    a68c:	4b25      	ldr	r3, [pc, #148]	; (a724 <phySetChannel+0xfc>)
    a68e:	9301      	str	r3, [sp, #4]
				break;
    a690:	e7d8      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    a692:	4b25      	ldr	r3, [pc, #148]	; (a728 <phySetChannel+0x100>)
    a694:	9301      	str	r3, [sp, #4]
				break;
    a696:	e7d5      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    a698:	4b24      	ldr	r3, [pc, #144]	; (a72c <phySetChannel+0x104>)
    a69a:	9301      	str	r3, [sp, #4]
				break;
    a69c:	e7d2      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    a69e:	4b24      	ldr	r3, [pc, #144]	; (a730 <phySetChannel+0x108>)
    a6a0:	9301      	str	r3, [sp, #4]
				break;
    a6a2:	e7cf      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    a6a4:	4b23      	ldr	r3, [pc, #140]	; (a734 <phySetChannel+0x10c>)
    a6a6:	9301      	str	r3, [sp, #4]
				break;
    a6a8:	e7cc      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    a6aa:	4b23      	ldr	r3, [pc, #140]	; (a738 <phySetChannel+0x110>)
    a6ac:	9301      	str	r3, [sp, #4]
				break;
    a6ae:	e7c9      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    a6b0:	4b22      	ldr	r3, [pc, #136]	; (a73c <phySetChannel+0x114>)
    a6b2:	9301      	str	r3, [sp, #4]
				break;
    a6b4:	e7c6      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    a6b6:	4b22      	ldr	r3, [pc, #136]	; (a740 <phySetChannel+0x118>)
    a6b8:	9301      	str	r3, [sp, #4]
				break;
    a6ba:	e7c3      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    a6bc:	4b21      	ldr	r3, [pc, #132]	; (a744 <phySetChannel+0x11c>)
    a6be:	9301      	str	r3, [sp, #4]
				break;
    a6c0:	e7c0      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    a6c2:	4b21      	ldr	r3, [pc, #132]	; (a748 <phySetChannel+0x120>)
    a6c4:	9301      	str	r3, [sp, #4]
				break;
    a6c6:	e7bd      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    a6c8:	4b20      	ldr	r3, [pc, #128]	; (a74c <phySetChannel+0x124>)
    a6ca:	9301      	str	r3, [sp, #4]
				break;		
    a6cc:	e7ba      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    a6ce:	4b20      	ldr	r3, [pc, #128]	; (a750 <phySetChannel+0x128>)
    a6d0:	9301      	str	r3, [sp, #4]
				break;
    a6d2:	e7b7      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    a6d4:	4b1f      	ldr	r3, [pc, #124]	; (a754 <phySetChannel+0x12c>)
    a6d6:	9301      	str	r3, [sp, #4]
				break;
    a6d8:	e7b4      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a6da:	4b1f      	ldr	r3, [pc, #124]	; (a758 <phySetChannel+0x130>)
    a6dc:	9301      	str	r3, [sp, #4]
				break;
    a6de:	e7b1      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a6e0:	4b1e      	ldr	r3, [pc, #120]	; (a75c <phySetChannel+0x134>)
    a6e2:	9301      	str	r3, [sp, #4]
				break;
    a6e4:	e7ae      	b.n	a644 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a6e6:	4b09      	ldr	r3, [pc, #36]	; (a70c <phySetChannel+0xe4>)
    a6e8:	9301      	str	r3, [sp, #4]
				break;				
    a6ea:	e7ab      	b.n	a644 <phySetChannel+0x1c>
    a6ec:	2000029c 	.word	0x2000029c
    a6f0:	00018898 	.word	0x00018898
    a6f4:	33611380 	.word	0x33611380
    a6f8:	0000e265 	.word	0x0000e265
    a6fc:	337055c0 	.word	0x337055c0
    a700:	338eda40 	.word	0x338eda40
    a704:	33a680f0 	.word	0x33a680f0
    a708:	33ad5ec0 	.word	0x33ad5ec0
    a70c:	33be27a0 	.word	0x33be27a0
    a710:	33d3e608 	.word	0x33d3e608
    a714:	33db2580 	.word	0x33db2580
    a718:	35c80160 	.word	0x35c80160
    a71c:	35d2afc0 	.word	0x35d2afc0
    a720:	3689cac0 	.word	0x3689cac0
    a724:	368cd800 	.word	0x368cd800
    a728:	36978660 	.word	0x36978660
    a72c:	36d61600 	.word	0x36d61600
    a730:	36e3d1a0 	.word	0x36e3d1a0
    a734:	36f313e0 	.word	0x36f313e0
    a738:	36f49a80 	.word	0x36f49a80
    a73c:	36f62120 	.word	0x36f62120
    a740:	3703dcc0 	.word	0x3703dcc0
    a744:	3706ea00 	.word	0x3706ea00
    a748:	370870a0 	.word	0x370870a0
    a74c:	37226140 	.word	0x37226140
    a750:	374886e0 	.word	0x374886e0
    a754:	37502800 	.word	0x37502800
    a758:	3757c920 	.word	0x3757c920
    a75c:	3ccbf700 	.word	0x3ccbf700

0000a760 <radioCallback>:
{
    a760:	b570      	push	{r4, r5, r6, lr}
    a762:	b082      	sub	sp, #8
    a764:	0004      	movs	r4, r0
    a766:	000d      	movs	r5, r1
	callbackBackup = callback;
    a768:	4b3e      	ldr	r3, [pc, #248]	; (a864 <radioCallback+0x104>)
    a76a:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a76c:	466b      	mov	r3, sp
    a76e:	1c98      	adds	r0, r3, #2
    a770:	2300      	movs	r3, #0
    a772:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a774:	4b3c      	ldr	r3, [pc, #240]	; (a868 <radioCallback+0x108>)
    a776:	4798      	blx	r3
	switch (callback)
    a778:	2c10      	cmp	r4, #16
    a77a:	d853      	bhi.n	a824 <radioCallback+0xc4>
    a77c:	00a4      	lsls	r4, r4, #2
    a77e:	4b3b      	ldr	r3, [pc, #236]	; (a86c <radioCallback+0x10c>)
    a780:	591b      	ldr	r3, [r3, r4]
    a782:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a784:	4b3a      	ldr	r3, [pc, #232]	; (a870 <radioCallback+0x110>)
    a786:	781a      	ldrb	r2, [r3, #0]
    a788:	2a00      	cmp	r2, #0
    a78a:	d00e      	beq.n	a7aa <radioCallback+0x4a>
    a78c:	2302      	movs	r3, #2
    a78e:	33ff      	adds	r3, #255	; 0xff
    a790:	4a37      	ldr	r2, [pc, #220]	; (a870 <radioCallback+0x110>)
    a792:	5cd3      	ldrb	r3, [r2, r3]
    a794:	2b00      	cmp	r3, #0
    a796:	d04e      	beq.n	a836 <radioCallback+0xd6>
    a798:	4b36      	ldr	r3, [pc, #216]	; (a874 <radioCallback+0x114>)
    a79a:	5cd3      	ldrb	r3, [r2, r3]
    a79c:	2b00      	cmp	r3, #0
    a79e:	d04c      	beq.n	a83a <radioCallback+0xda>
    a7a0:	4b35      	ldr	r3, [pc, #212]	; (a878 <radioCallback+0x118>)
    a7a2:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a7a4:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d043      	beq.n	a832 <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a7aa:	0016      	movs	r6, r2
    a7ac:	7a2c      	ldrb	r4, [r5, #8]
    a7ae:	0213      	lsls	r3, r2, #8
    a7b0:	189a      	adds	r2, r3, r2
    a7b2:	4b2f      	ldr	r3, [pc, #188]	; (a870 <radioCallback+0x110>)
    a7b4:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a7b6:	2cfa      	cmp	r4, #250	; 0xfa
    a7b8:	d80d      	bhi.n	a7d6 <radioCallback+0x76>
    a7ba:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a7bc:	0232      	lsls	r2, r6, #8
    a7be:	1992      	adds	r2, r2, r6
    a7c0:	482b      	ldr	r0, [pc, #172]	; (a870 <radioCallback+0x110>)
    a7c2:	1880      	adds	r0, r0, r2
    a7c4:	686a      	ldr	r2, [r5, #4]
    a7c6:	5cd1      	ldrb	r1, [r2, r3]
    a7c8:	18c2      	adds	r2, r0, r3
    a7ca:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a7cc:	3301      	adds	r3, #1
    a7ce:	b2db      	uxtb	r3, r3
    a7d0:	7a2a      	ldrb	r2, [r5, #8]
    a7d2:	429a      	cmp	r2, r3
    a7d4:	d2f6      	bcs.n	a7c4 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    a7d6:	4b26      	ldr	r3, [pc, #152]	; (a870 <radioCallback+0x110>)
    a7d8:	0232      	lsls	r2, r6, #8
    a7da:	1992      	adds	r2, r2, r6
    a7dc:	3404      	adds	r4, #4
    a7de:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    a7e0:	2156      	movs	r1, #86	; 0x56
    a7e2:	4826      	ldr	r0, [pc, #152]	; (a87c <radioCallback+0x11c>)
    a7e4:	5e41      	ldrsh	r1, [r0, r1]
    a7e6:	4668      	mov	r0, sp
    a7e8:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    a7ea:	189b      	adds	r3, r3, r2
    a7ec:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    a7ee:	789b      	ldrb	r3, [r3, #2]
    a7f0:	069b      	lsls	r3, r3, #26
    a7f2:	d524      	bpl.n	a83e <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    a7f4:	a801      	add	r0, sp, #4
    a7f6:	2301      	movs	r3, #1
    a7f8:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a7fa:	2300      	movs	r3, #0
    a7fc:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    a7fe:	4b20      	ldr	r3, [pc, #128]	; (a880 <radioCallback+0x120>)
    a800:	4798      	blx	r3
    a802:	e00f      	b.n	a824 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    a804:	4b1f      	ldr	r3, [pc, #124]	; (a884 <radioCallback+0x124>)
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	2b00      	cmp	r3, #0
    a80a:	d002      	beq.n	a812 <radioCallback+0xb2>
    a80c:	782b      	ldrb	r3, [r5, #0]
    a80e:	2b00      	cmp	r3, #0
    a810:	d00a      	beq.n	a828 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    a812:	7828      	ldrb	r0, [r5, #0]
    a814:	4b1c      	ldr	r3, [pc, #112]	; (a888 <radioCallback+0x128>)
    a816:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    a818:	a801      	add	r0, sp, #4
    a81a:	2300      	movs	r3, #0
    a81c:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    a81e:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    a820:	4b17      	ldr	r3, [pc, #92]	; (a880 <radioCallback+0x120>)
    a822:	4798      	blx	r3
}
    a824:	b002      	add	sp, #8
    a826:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    a828:	4b18      	ldr	r3, [pc, #96]	; (a88c <radioCallback+0x12c>)
    a82a:	4798      	blx	r3
    a82c:	4b18      	ldr	r3, [pc, #96]	; (a890 <radioCallback+0x130>)
    a82e:	6018      	str	r0, [r3, #0]
    a830:	e7f2      	b.n	a818 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    a832:	3afc      	subs	r2, #252	; 0xfc
    a834:	e7b9      	b.n	a7aa <radioCallback+0x4a>
    a836:	2201      	movs	r2, #1
    a838:	e7b7      	b.n	a7aa <radioCallback+0x4a>
    a83a:	2202      	movs	r2, #2
    a83c:	e7b5      	b.n	a7aa <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    a83e:	a801      	add	r0, sp, #4
    a840:	2300      	movs	r3, #0
    a842:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a844:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    a846:	4b0e      	ldr	r3, [pc, #56]	; (a880 <radioCallback+0x120>)
    a848:	4798      	blx	r3
    a84a:	e7eb      	b.n	a824 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    a84c:	ac01      	add	r4, sp, #4
    a84e:	2300      	movs	r3, #0
    a850:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    a852:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    a854:	2001      	movs	r0, #1
    a856:	4b0c      	ldr	r3, [pc, #48]	; (a888 <radioCallback+0x128>)
    a858:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    a85a:	0020      	movs	r0, r4
    a85c:	4b08      	ldr	r3, [pc, #32]	; (a880 <radioCallback+0x120>)
    a85e:	4798      	blx	r3
}
    a860:	e7e0      	b.n	a824 <radioCallback+0xc4>
    a862:	46c0      	nop			; (mov r8, r8)
    a864:	2000224f 	.word	0x2000224f
    a868:	0000d8bd 	.word	0x0000d8bd
    a86c:	00018900 	.word	0x00018900
    a870:	20002258 	.word	0x20002258
    a874:	00000202 	.word	0x00000202
    a878:	00000303 	.word	0x00000303
    a87c:	20002d78 	.word	0x20002d78
    a880:	0000f471 	.word	0x0000f471
    a884:	2000028b 	.word	0x2000028b
    a888:	00009e6d 	.word	0x00009e6d
    a88c:	0000bf25 	.word	0x0000bf25
    a890:	20002964 	.word	0x20002964

0000a894 <PHY_Init>:
{
    a894:	b510      	push	{r4, lr}
    HAL_RadioInit();
    a896:	4b06      	ldr	r3, [pc, #24]	; (a8b0 <PHY_Init+0x1c>)
    a898:	4798      	blx	r3
    AESInit();	
    a89a:	4b06      	ldr	r3, [pc, #24]	; (a8b4 <PHY_Init+0x20>)
    a89c:	4798      	blx	r3
	RADIO_Init();
    a89e:	4b06      	ldr	r3, [pc, #24]	; (a8b8 <PHY_Init+0x24>)
    a8a0:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    a8a2:	4906      	ldr	r1, [pc, #24]	; (a8bc <PHY_Init+0x28>)
    a8a4:	201a      	movs	r0, #26
    a8a6:	4b06      	ldr	r3, [pc, #24]	; (a8c0 <PHY_Init+0x2c>)
    a8a8:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    a8aa:	4b06      	ldr	r3, [pc, #24]	; (a8c4 <PHY_Init+0x30>)
    a8ac:	4798      	blx	r3
}
    a8ae:	bd10      	pop	{r4, pc}
    a8b0:	0000c2d9 	.word	0x0000c2d9
    a8b4:	0000cd81 	.word	0x0000cd81
    a8b8:	0000e461 	.word	0x0000e461
    a8bc:	0000a761 	.word	0x0000a761
    a8c0:	0000e265 	.word	0x0000e265
    a8c4:	0000f27d 	.word	0x0000f27d

0000a8c8 <PHY_SetRxState>:
{
    a8c8:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    a8ca:	4b01      	ldr	r3, [pc, #4]	; (a8d0 <PHY_SetRxState+0x8>)
    a8cc:	4798      	blx	r3
}
    a8ce:	bd10      	pop	{r4, pc}
    a8d0:	0000f165 	.word	0x0000f165

0000a8d4 <PHY_SetPanId>:
{
    a8d4:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    a8d6:	b2c2      	uxtb	r2, r0
    a8d8:	4b02      	ldr	r3, [pc, #8]	; (a8e4 <PHY_SetPanId+0x10>)
    a8da:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    a8dc:	0a00      	lsrs	r0, r0, #8
    a8de:	7058      	strb	r0, [r3, #1]
}
    a8e0:	b002      	add	sp, #8
    a8e2:	4770      	bx	lr
    a8e4:	2000265c 	.word	0x2000265c

0000a8e8 <PHY_SetShortAddr>:
{
    a8e8:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    a8ea:	b2c2      	uxtb	r2, r0
    a8ec:	4b02      	ldr	r3, [pc, #8]	; (a8f8 <PHY_SetShortAddr+0x10>)
    a8ee:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    a8f0:	0a00      	lsrs	r0, r0, #8
    a8f2:	7058      	strb	r0, [r3, #1]
}
    a8f4:	b002      	add	sp, #8
    a8f6:	4770      	bx	lr
    a8f8:	20002660 	.word	0x20002660

0000a8fc <PHY_SetTxPower>:
{
    a8fc:	b500      	push	{lr}
    a8fe:	b083      	sub	sp, #12
	reg = txPower;
    a900:	466b      	mov	r3, sp
    a902:	71d8      	strb	r0, [r3, #7]
	if(reg > 15)
    a904:	280f      	cmp	r0, #15
    a906:	d813      	bhi.n	a930 <PHY_SetTxPower+0x34>
		PaBoost = DISABLED;
    a908:	466b      	mov	r3, sp
    a90a:	1d99      	adds	r1, r3, #6
    a90c:	2300      	movs	r3, #0
    a90e:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a910:	2008      	movs	r0, #8
    a912:	4b0b      	ldr	r3, [pc, #44]	; (a940 <PHY_SetTxPower+0x44>)
    a914:	4798      	blx	r3
		reg &= 0x0F ;
    a916:	466b      	mov	r3, sp
    a918:	1dda      	adds	r2, r3, #7
    a91a:	79d9      	ldrb	r1, [r3, #7]
    a91c:	230f      	movs	r3, #15
    a91e:	400b      	ands	r3, r1
    a920:	7013      	strb	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER, &reg);
    a922:	466b      	mov	r3, sp
    a924:	1dd9      	adds	r1, r3, #7
    a926:	2004      	movs	r0, #4
    a928:	4b05      	ldr	r3, [pc, #20]	; (a940 <PHY_SetTxPower+0x44>)
    a92a:	4798      	blx	r3
}
    a92c:	b003      	add	sp, #12
    a92e:	bd00      	pop	{pc}
		PaBoost = ENABLED;
    a930:	466b      	mov	r3, sp
    a932:	1d99      	adds	r1, r3, #6
    a934:	2301      	movs	r3, #1
    a936:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a938:	2008      	movs	r0, #8
    a93a:	4b01      	ldr	r3, [pc, #4]	; (a940 <PHY_SetTxPower+0x44>)
    a93c:	4798      	blx	r3
    a93e:	e7f0      	b.n	a922 <PHY_SetTxPower+0x26>
    a940:	0000e265 	.word	0x0000e265

0000a944 <PHY_GetAttribute>:
{
    a944:	b510      	push	{r4, lr}
	switch(RadioAttr)
    a946:	2807      	cmp	r0, #7
    a948:	d003      	beq.n	a952 <PHY_GetAttribute+0xe>
    a94a:	2816      	cmp	r0, #22
    a94c:	d001      	beq.n	a952 <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    a94e:	2003      	movs	r0, #3
}
    a950:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    a952:	4b01      	ldr	r3, [pc, #4]	; (a958 <PHY_GetAttribute+0x14>)
    a954:	4798      	blx	r3
			break;
    a956:	e7fb      	b.n	a950 <PHY_GetAttribute+0xc>
    a958:	0000e175 	.word	0x0000e175

0000a95c <PHY_Wakeup>:
{
    a95c:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    a95e:	4b0c      	ldr	r3, [pc, #48]	; (a990 <PHY_Wakeup+0x34>)
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	2b02      	cmp	r3, #2
    a964:	d000      	beq.n	a968 <PHY_Wakeup+0xc>
}
    a966:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    a968:	4b0a      	ldr	r3, [pc, #40]	; (a994 <PHY_Wakeup+0x38>)
    a96a:	4798      	blx	r3
		HAL_RadioInit();
    a96c:	4b0a      	ldr	r3, [pc, #40]	; (a998 <PHY_Wakeup+0x3c>)
    a96e:	4798      	blx	r3
		RADIO_Reset();
    a970:	4b0a      	ldr	r3, [pc, #40]	; (a99c <PHY_Wakeup+0x40>)
    a972:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    a974:	2334      	movs	r3, #52	; 0x34
    a976:	4a0a      	ldr	r2, [pc, #40]	; (a9a0 <PHY_Wakeup+0x44>)
    a978:	5cd1      	ldrb	r1, [r2, r3]
    a97a:	2200      	movs	r2, #0
    a97c:	2001      	movs	r0, #1
    a97e:	4b09      	ldr	r3, [pc, #36]	; (a9a4 <PHY_Wakeup+0x48>)
    a980:	4798      	blx	r3
	RADIO_RxHandler();
    a982:	4b09      	ldr	r3, [pc, #36]	; (a9a8 <PHY_Wakeup+0x4c>)
    a984:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    a986:	2201      	movs	r2, #1
    a988:	4b01      	ldr	r3, [pc, #4]	; (a990 <PHY_Wakeup+0x34>)
    a98a:	701a      	strb	r2, [r3, #0]
}
    a98c:	e7eb      	b.n	a966 <PHY_Wakeup+0xa>
    a98e:	46c0      	nop			; (mov r8, r8)
    a990:	2000029d 	.word	0x2000029d
    a994:	0000c619 	.word	0x0000c619
    a998:	0000c2d9 	.word	0x0000c2d9
    a99c:	0000c491 	.word	0x0000c491
    a9a0:	20002d78 	.word	0x20002d78
    a9a4:	0000d6f9 	.word	0x0000d6f9
    a9a8:	0000f165 	.word	0x0000f165

0000a9ac <PHY_SetChannel>:
{
    a9ac:	b510      	push	{r4, lr}
	phyChannel = channel;
    a9ae:	4b06      	ldr	r3, [pc, #24]	; (a9c8 <PHY_SetChannel+0x1c>)
    a9b0:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    a9b2:	4b06      	ldr	r3, [pc, #24]	; (a9cc <PHY_SetChannel+0x20>)
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	2b02      	cmp	r3, #2
    a9b8:	d002      	beq.n	a9c0 <PHY_SetChannel+0x14>
	phySetChannel();
    a9ba:	4b05      	ldr	r3, [pc, #20]	; (a9d0 <PHY_SetChannel+0x24>)
    a9bc:	4798      	blx	r3
}
    a9be:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    a9c0:	4b04      	ldr	r3, [pc, #16]	; (a9d4 <PHY_SetChannel+0x28>)
    a9c2:	4798      	blx	r3
    a9c4:	e7f9      	b.n	a9ba <PHY_SetChannel+0xe>
    a9c6:	46c0      	nop			; (mov r8, r8)
    a9c8:	2000029c 	.word	0x2000029c
    a9cc:	2000029d 	.word	0x2000029d
    a9d0:	0000a629 	.word	0x0000a629
    a9d4:	0000a95d 	.word	0x0000a95d

0000a9d8 <PHY_DataReq>:
{
    a9d8:	b500      	push	{lr}
    a9da:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    a9dc:	7803      	ldrb	r3, [r0, #0]
    a9de:	aa02      	add	r2, sp, #8
    a9e0:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d009      	beq.n	a9fa <PHY_DataReq+0x22>
    a9e6:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    a9e8:	4912      	ldr	r1, [pc, #72]	; (aa34 <PHY_DataReq+0x5c>)
    a9ea:	18c2      	adds	r2, r0, r3
    a9ec:	7852      	ldrb	r2, [r2, #1]
    a9ee:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    a9f0:	3301      	adds	r3, #1
    a9f2:	b2db      	uxtb	r3, r3
    a9f4:	7802      	ldrb	r2, [r0, #0]
    a9f6:	429a      	cmp	r2, r3
    a9f8:	d8f7      	bhi.n	a9ea <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    a9fa:	4b0e      	ldr	r3, [pc, #56]	; (aa34 <PHY_DataReq+0x5c>)
    a9fc:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    a9fe:	2001      	movs	r0, #1
    aa00:	4b0d      	ldr	r3, [pc, #52]	; (aa38 <PHY_DataReq+0x60>)
    aa02:	4798      	blx	r3
		phySetChannel();
    aa04:	4b0d      	ldr	r3, [pc, #52]	; (aa3c <PHY_DataReq+0x64>)
    aa06:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    aa08:	2305      	movs	r3, #5
    aa0a:	466a      	mov	r2, sp
    aa0c:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    aa0e:	3b5f      	subs	r3, #95	; 0x5f
    aa10:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    aa12:	2305      	movs	r3, #5
    aa14:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    aa16:	2300      	movs	r3, #0
    aa18:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    aa1a:	4669      	mov	r1, sp
    aa1c:	201d      	movs	r0, #29
    aa1e:	4b08      	ldr	r3, [pc, #32]	; (aa40 <PHY_DataReq+0x68>)
    aa20:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    aa22:	a802      	add	r0, sp, #8
    aa24:	4b07      	ldr	r3, [pc, #28]	; (aa44 <PHY_DataReq+0x6c>)
    aa26:	4798      	blx	r3
		return (!status);							
    aa28:	4243      	negs	r3, r0
    aa2a:	4158      	adcs	r0, r3
    aa2c:	b2c0      	uxtb	r0, r0
}
    aa2e:	b005      	add	sp, #20
    aa30:	bd00      	pop	{pc}
    aa32:	46c0      	nop			; (mov r8, r8)
    aa34:	20002150 	.word	0x20002150
    aa38:	0000eb6d 	.word	0x0000eb6d
    aa3c:	0000a629 	.word	0x0000a629
    aa40:	0000e265 	.word	0x0000e265
    aa44:	0000eb95 	.word	0x0000eb95

0000aa48 <PHY_RandomReq>:
{
    aa48:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    aa4a:	4b03      	ldr	r3, [pc, #12]	; (aa58 <PHY_RandomReq+0x10>)
    aa4c:	4798      	blx	r3
    aa4e:	0004      	movs	r4, r0
	RADIO_RxHandler();
    aa50:	4b02      	ldr	r3, [pc, #8]	; (aa5c <PHY_RandomReq+0x14>)
    aa52:	4798      	blx	r3
}
    aa54:	0020      	movs	r0, r4
    aa56:	bd10      	pop	{r4, pc}
    aa58:	0000d82d 	.word	0x0000d82d
    aa5c:	0000f165 	.word	0x0000f165

0000aa60 <PHY_EncryptReq>:
{	
    aa60:	b510      	push	{r4, lr}
	AESEncode(text,key);
    aa62:	4b01      	ldr	r3, [pc, #4]	; (aa68 <PHY_EncryptReq+0x8>)
    aa64:	4798      	blx	r3
}
    aa66:	bd10      	pop	{r4, pc}
    aa68:	0000cca5 	.word	0x0000cca5

0000aa6c <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    aa6c:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    aa6e:	4903      	ldr	r1, [pc, #12]	; (aa7c <PHY_SetIEEEAddr+0x10>)
    aa70:	5cc2      	ldrb	r2, [r0, r3]
    aa72:	54ca      	strb	r2, [r1, r3]
    aa74:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    aa76:	2b08      	cmp	r3, #8
    aa78:	d1fa      	bne.n	aa70 <PHY_SetIEEEAddr+0x4>
	}
}
    aa7a:	4770      	bx	lr
    aa7c:	20002250 	.word	0x20002250

0000aa80 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    aa80:	4770      	bx	lr
    aa82:	Address 0x0000aa82 is out of bounds.


0000aa84 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    aa84:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    aa86:	0010      	movs	r0, r2
    aa88:	4b01      	ldr	r3, [pc, #4]	; (aa90 <CommandConfCallback+0xc>)
    aa8a:	4798      	blx	r3
}
    aa8c:	bd10      	pop	{r4, pc}
    aa8e:	46c0      	nop			; (mov r8, r8)
    aa90:	0000bda1 	.word	0x0000bda1

0000aa94 <Total_Connections>:
{
    aa94:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    aa96:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    aa98:	4907      	ldr	r1, [pc, #28]	; (aab8 <Total_Connections+0x24>)
    aa9a:	e002      	b.n	aaa2 <Total_Connections+0xe>
    aa9c:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    aa9e:	2a05      	cmp	r2, #5
    aaa0:	d009      	beq.n	aab6 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    aaa2:	0093      	lsls	r3, r2, #2
    aaa4:	189b      	adds	r3, r3, r2
    aaa6:	005b      	lsls	r3, r3, #1
    aaa8:	18cb      	adds	r3, r1, r3
    aaaa:	7a1b      	ldrb	r3, [r3, #8]
    aaac:	09db      	lsrs	r3, r3, #7
    aaae:	d0f5      	beq.n	aa9c <Total_Connections+0x8>
            count++;
    aab0:	3001      	adds	r0, #1
    aab2:	b2c0      	uxtb	r0, r0
    aab4:	e7f2      	b.n	aa9c <Total_Connections+0x8>
}
    aab6:	4770      	bx	lr
    aab8:	20002668 	.word	0x20002668

0000aabc <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aabe:	46de      	mov	lr, fp
    aac0:	4657      	mov	r7, sl
    aac2:	464e      	mov	r6, r9
    aac4:	4645      	mov	r5, r8
    aac6:	b5e0      	push	{r5, r6, r7, lr}
    aac8:	b083      	sub	sp, #12
    aaca:	466c      	mov	r4, sp
    aacc:	8061      	strh	r1, [r4, #2]
    aace:	ac0c      	add	r4, sp, #48	; 0x30
    aad0:	7827      	ldrb	r7, [r4, #0]
    aad2:	ac0d      	add	r4, sp, #52	; 0x34
    aad4:	7826      	ldrb	r6, [r4, #0]
    aad6:	ac0f      	add	r4, sp, #60	; 0x3c
    aad8:	7825      	ldrb	r5, [r4, #0]
    aada:	ac10      	add	r4, sp, #64	; 0x40
    aadc:	7821      	ldrb	r1, [r4, #0]
    aade:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    aae0:	2800      	cmp	r0, #0
    aae2:	d000      	beq.n	aae6 <IndirectPacket+0x2a>
    aae4:	e07e      	b.n	abe4 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    aae6:	4c40      	ldr	r4, [pc, #256]	; (abe8 <IndirectPacket+0x12c>)
    aae8:	7ba4      	ldrb	r4, [r4, #14]
    aaea:	07e1      	lsls	r1, r4, #31
    aaec:	d400      	bmi.n	aaf0 <IndirectPacket+0x34>
    aaee:	e077      	b.n	abe0 <IndirectPacket+0x124>
    aaf0:	2491      	movs	r4, #145	; 0x91
    aaf2:	0064      	lsls	r4, r4, #1
    aaf4:	493c      	ldr	r1, [pc, #240]	; (abe8 <IndirectPacket+0x12c>)
    aaf6:	5d0c      	ldrb	r4, [r1, r4]
    aaf8:	07e1      	lsls	r1, r4, #31
    aafa:	d506      	bpl.n	ab0a <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    aafc:	b003      	add	sp, #12
    aafe:	bc3c      	pop	{r2, r3, r4, r5}
    ab00:	4690      	mov	r8, r2
    ab02:	4699      	mov	r9, r3
    ab04:	46a2      	mov	sl, r4
    ab06:	46ab      	mov	fp, r5
    ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ab0a:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    ab0c:	208a      	movs	r0, #138	; 0x8a
    ab0e:	0040      	lsls	r0, r0, #1
    ab10:	4360      	muls	r0, r4
    ab12:	4935      	ldr	r1, [pc, #212]	; (abe8 <IndirectPacket+0x12c>)
    ab14:	468c      	mov	ip, r1
    ab16:	4484      	add	ip, r0
    ab18:	2108      	movs	r1, #8
    ab1a:	4461      	add	r1, ip
    ab1c:	4689      	mov	r9, r1
    ab1e:	7989      	ldrb	r1, [r1, #6]
    ab20:	2001      	movs	r0, #1
    ab22:	4301      	orrs	r1, r0
    ab24:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    ab26:	2001      	movs	r0, #1
    ab28:	4003      	ands	r3, r0
    ab2a:	0099      	lsls	r1, r3, #2
    ab2c:	9101      	str	r1, [sp, #4]
    ab2e:	21fd      	movs	r1, #253	; 0xfd
    ab30:	468b      	mov	fp, r1
    ab32:	4651      	mov	r1, sl
    ab34:	465b      	mov	r3, fp
    ab36:	4019      	ands	r1, r3
    ab38:	3bf9      	subs	r3, #249	; 0xf9
    ab3a:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    ab3c:	4007      	ands	r7, r0
    ab3e:	00ff      	lsls	r7, r7, #3
    ab40:	000b      	movs	r3, r1
    ab42:	9901      	ldr	r1, [sp, #4]
    ab44:	4319      	orrs	r1, r3
    ab46:	000b      	movs	r3, r1
    ab48:	2108      	movs	r1, #8
    ab4a:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    ab4c:	4641      	mov	r1, r8
    ab4e:	4008      	ands	r0, r1
    ab50:	0101      	lsls	r1, r0, #4
    ab52:	433b      	orrs	r3, r7
    ab54:	0018      	movs	r0, r3
    ab56:	2310      	movs	r3, #16
    ab58:	4398      	bics	r0, r3
    ab5a:	4308      	orrs	r0, r1
    ab5c:	464b      	mov	r3, r9
    ab5e:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    ab60:	4663      	mov	r3, ip
    ab62:	4669      	mov	r1, sp
    ab64:	8849      	ldrh	r1, [r1, #2]
    ab66:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    ab68:	2a00      	cmp	r2, #0
    ab6a:	d00d      	beq.n	ab88 <IndirectPacket+0xcc>
    ab6c:	0013      	movs	r3, r2
    ab6e:	218a      	movs	r1, #138	; 0x8a
    ab70:	0049      	lsls	r1, r1, #1
    ab72:	4361      	muls	r1, r4
    ab74:	3106      	adds	r1, #6
    ab76:	481c      	ldr	r0, [pc, #112]	; (abe8 <IndirectPacket+0x12c>)
    ab78:	1809      	adds	r1, r1, r0
    ab7a:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    ab7c:	7818      	ldrb	r0, [r3, #0]
    ab7e:	7008      	strb	r0, [r1, #0]
    ab80:	3301      	adds	r3, #1
    ab82:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    ab84:	4293      	cmp	r3, r2
    ab86:	d1f9      	bne.n	ab7c <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    ab88:	228a      	movs	r2, #138	; 0x8a
    ab8a:	0052      	lsls	r2, r2, #1
    ab8c:	4362      	muls	r2, r4
    ab8e:	4b16      	ldr	r3, [pc, #88]	; (abe8 <IndirectPacket+0x12c>)
    ab90:	189b      	adds	r3, r3, r2
    ab92:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    ab94:	2e00      	cmp	r6, #0
    ab96:	d011      	beq.n	abbc <IndirectPacket+0x100>
    ab98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab9a:	228a      	movs	r2, #138	; 0x8a
    ab9c:	0052      	lsls	r2, r2, #1
    ab9e:	4362      	muls	r2, r4
    aba0:	3210      	adds	r2, #16
    aba2:	4911      	ldr	r1, [pc, #68]	; (abe8 <IndirectPacket+0x12c>)
    aba4:	1852      	adds	r2, r2, r1
    aba6:	3e01      	subs	r6, #1
    aba8:	b2f0      	uxtb	r0, r6
    abaa:	3001      	adds	r0, #1
    abac:	469c      	mov	ip, r3
    abae:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    abb0:	7819      	ldrb	r1, [r3, #0]
    abb2:	7011      	strb	r1, [r2, #0]
    abb4:	3301      	adds	r3, #1
    abb6:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    abb8:	4283      	cmp	r3, r0
    abba:	d1f9      	bne.n	abb0 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    abbc:	4e0a      	ldr	r6, [pc, #40]	; (abe8 <IndirectPacket+0x12c>)
    abbe:	238a      	movs	r3, #138	; 0x8a
    abc0:	005b      	lsls	r3, r3, #1
    abc2:	435c      	muls	r4, r3
    abc4:	1933      	adds	r3, r6, r4
    abc6:	001a      	movs	r2, r3
    abc8:	3210      	adds	r2, #16
    abca:	32ff      	adds	r2, #255	; 0xff
    abcc:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    abce:	3311      	adds	r3, #17
    abd0:	33ff      	adds	r3, #255	; 0xff
    abd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    abd4:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    abd6:	4b05      	ldr	r3, [pc, #20]	; (abec <IndirectPacket+0x130>)
    abd8:	4798      	blx	r3
    abda:	51a0      	str	r0, [r4, r6]
                return true;
    abdc:	2001      	movs	r0, #1
    abde:	e78d      	b.n	aafc <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    abe0:	2400      	movs	r4, #0
    abe2:	e793      	b.n	ab0c <IndirectPacket+0x50>
                return false;
    abe4:	2000      	movs	r0, #0
    abe6:	e789      	b.n	aafc <IndirectPacket+0x40>
    abe8:	200026e4 	.word	0x200026e4
    abec:	0000bf25 	.word	0x0000bf25

0000abf0 <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    abf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    abf2:	46ce      	mov	lr, r9
    abf4:	4647      	mov	r7, r8
    abf6:	b580      	push	{r7, lr}
    abf8:	b08b      	sub	sp, #44	; 0x2c
    abfa:	0005      	movs	r5, r0
    abfc:	468c      	mov	ip, r1
    abfe:	9205      	str	r2, [sp, #20]
    ac00:	a812      	add	r0, sp, #72	; 0x48
    ac02:	7800      	ldrb	r0, [r0, #0]
    ac04:	ac13      	add	r4, sp, #76	; 0x4c
    ac06:	7826      	ldrb	r6, [r4, #0]
    ac08:	ac15      	add	r4, sp, #84	; 0x54
    ac0a:	7827      	ldrb	r7, [r4, #0]
    ac0c:	ac16      	add	r4, sp, #88	; 0x58
    ac0e:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    ac10:	2400      	movs	r4, #0
    ac12:	46a0      	mov	r8, r4
    ac14:	ac07      	add	r4, sp, #28
    ac16:	4641      	mov	r1, r8
    ac18:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d043      	beq.n	aca6 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    ac1e:	0023      	movs	r3, r4
    ac20:	b2cc      	uxtb	r4, r1
    ac22:	2103      	movs	r1, #3
    ac24:	438c      	bics	r4, r1
    ac26:	2101      	movs	r1, #1
    ac28:	4688      	mov	r8, r1
    ac2a:	4641      	mov	r1, r8
    ac2c:	430c      	orrs	r4, r1
    ac2e:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    ac30:	2d00      	cmp	r5, #0
    ac32:	d13e      	bne.n	acb2 <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    ac34:	ac07      	add	r4, sp, #28
    ac36:	2301      	movs	r3, #1
    ac38:	4013      	ands	r3, r2
    ac3a:	015a      	lsls	r2, r3, #5
    ac3c:	7823      	ldrb	r3, [r4, #0]
    ac3e:	2120      	movs	r1, #32
    ac40:	438b      	bics	r3, r1
    ac42:	4313      	orrs	r3, r2
    ac44:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    ac46:	ac07      	add	r4, sp, #28
    ac48:	2201      	movs	r2, #1
    ac4a:	0013      	movs	r3, r2
    ac4c:	402b      	ands	r3, r5
    ac4e:	009b      	lsls	r3, r3, #2
    ac50:	4698      	mov	r8, r3
    ac52:	7823      	ldrb	r3, [r4, #0]
    ac54:	2104      	movs	r1, #4
    ac56:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    ac58:	4010      	ands	r0, r2
    ac5a:	00c0      	lsls	r0, r0, #3
    ac5c:	4641      	mov	r1, r8
    ac5e:	430b      	orrs	r3, r1
    ac60:	2108      	movs	r1, #8
    ac62:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    ac64:	2100      	movs	r1, #0
    ac66:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    ac68:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    ac6a:	2101      	movs	r1, #1
    ac6c:	4688      	mov	r8, r1
    ac6e:	4641      	mov	r1, r8
    ac70:	404d      	eors	r5, r1
    ac72:	4015      	ands	r5, r2
    ac74:	01ad      	lsls	r5, r5, #6
    ac76:	4318      	orrs	r0, r3
    ac78:	2340      	movs	r3, #64	; 0x40
    ac7a:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    ac7c:	4328      	orrs	r0, r5
    ac7e:	3bc0      	subs	r3, #192	; 0xc0
    ac80:	4318      	orrs	r0, r3
    ac82:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    ac84:	4663      	mov	r3, ip
    ac86:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    ac88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ac8a:	9302      	str	r3, [sp, #8]
    ac8c:	9701      	str	r7, [sp, #4]
    ac8e:	9600      	str	r6, [sp, #0]
    ac90:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac92:	9807      	ldr	r0, [sp, #28]
    ac94:	9905      	ldr	r1, [sp, #20]
    ac96:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ac98:	4c09      	ldr	r4, [pc, #36]	; (acc0 <SendPacket+0xd0>)
    ac9a:	47a0      	blx	r4
    
    return status;
}
    ac9c:	b00b      	add	sp, #44	; 0x2c
    ac9e:	bc0c      	pop	{r2, r3}
    aca0:	4690      	mov	r8, r2
    aca2:	4699      	mov	r9, r3
    aca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    aca6:	ab07      	add	r3, sp, #28
    aca8:	781c      	ldrb	r4, [r3, #0]
    acaa:	2103      	movs	r1, #3
    acac:	438c      	bics	r4, r1
    acae:	701c      	strb	r4, [r3, #0]
    acb0:	e7be      	b.n	ac30 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    acb2:	ac07      	add	r4, sp, #28
    acb4:	7823      	ldrb	r3, [r4, #0]
    acb6:	2220      	movs	r2, #32
    acb8:	4393      	bics	r3, r2
    acba:	7023      	strb	r3, [r4, #0]
    acbc:	e7c3      	b.n	ac46 <SendPacket+0x56>
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	00009aa9 	.word	0x00009aa9

0000acc4 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    acc4:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    acc6:	7802      	ldrb	r2, [r0, #0]
    acc8:	780b      	ldrb	r3, [r1, #0]
    acca:	429a      	cmp	r2, r3
    accc:	d109      	bne.n	ace2 <isSameAddress+0x1e>
    acce:	2301      	movs	r3, #1
    acd0:	5cc4      	ldrb	r4, [r0, r3]
    acd2:	5cca      	ldrb	r2, [r1, r3]
    acd4:	4294      	cmp	r4, r2
    acd6:	d106      	bne.n	ace6 <isSameAddress+0x22>
    acd8:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    acda:	2b08      	cmp	r3, #8
    acdc:	d1f8      	bne.n	acd0 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    acde:	2001      	movs	r0, #1
}
    ace0:	bd10      	pop	{r4, pc}
            return false;
    ace2:	2000      	movs	r0, #0
    ace4:	e7fc      	b.n	ace0 <isSameAddress+0x1c>
    ace6:	2000      	movs	r0, #0
    ace8:	e7fa      	b.n	ace0 <isSameAddress+0x1c>
    acea:	Address 0x0000acea is out of bounds.


0000acec <MiApp_SendData>:
   {
    acec:	b5f0      	push	{r4, r5, r6, r7, lr}
    acee:	46de      	mov	lr, fp
    acf0:	4657      	mov	r7, sl
    acf2:	464e      	mov	r6, r9
    acf4:	b5c0      	push	{r6, r7, lr}
    acf6:	b088      	sub	sp, #32
    acf8:	9107      	str	r1, [sp, #28]
    acfa:	0017      	movs	r7, r2
    acfc:	4699      	mov	r9, r3
    acfe:	ab10      	add	r3, sp, #64	; 0x40
    ad00:	781b      	ldrb	r3, [r3, #0]
    ad02:	469a      	mov	sl, r3
    ad04:	ab11      	add	r3, sp, #68	; 0x44
    ad06:	781b      	ldrb	r3, [r3, #0]
    ad08:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    ad0a:	2802      	cmp	r0, #2
    ad0c:	d003      	beq.n	ad16 <MiApp_SendData+0x2a>
    ad0e:	4d3e      	ldr	r5, [pc, #248]	; (ae08 <MiApp_SendData+0x11c>)
    ad10:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    ad12:	002e      	movs	r6, r5
    ad14:	e036      	b.n	ad84 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    ad16:	784a      	ldrb	r2, [r1, #1]
    ad18:	0212      	lsls	r2, r2, #8
    ad1a:	780b      	ldrb	r3, [r1, #0]
    ad1c:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    ad1e:	b29b      	uxth	r3, r3
    ad20:	4a3a      	ldr	r2, [pc, #232]	; (ae0c <MiApp_SendData+0x120>)
    ad22:	4293      	cmp	r3, r2
    ad24:	d1f3      	bne.n	ad0e <MiApp_SendData+0x22>
    ad26:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    ad28:	4837      	ldr	r0, [pc, #220]	; (ae08 <MiApp_SendData+0x11c>)
    ad2a:	0002      	movs	r2, r0
    ad2c:	e002      	b.n	ad34 <MiApp_SendData+0x48>
    ad2e:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    ad30:	2905      	cmp	r1, #5
    ad32:	d021      	beq.n	ad78 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    ad34:	008b      	lsls	r3, r1, #2
    ad36:	185b      	adds	r3, r3, r1
    ad38:	005b      	lsls	r3, r3, #1
    ad3a:	18c3      	adds	r3, r0, r3
    ad3c:	7a1b      	ldrb	r3, [r3, #8]
    ad3e:	09db      	lsrs	r3, r3, #7
    ad40:	d0f5      	beq.n	ad2e <MiApp_SendData+0x42>
    ad42:	008b      	lsls	r3, r1, #2
    ad44:	185b      	adds	r3, r3, r1
    ad46:	005b      	lsls	r3, r3, #1
    ad48:	18d3      	adds	r3, r2, r3
    ad4a:	7a1b      	ldrb	r3, [r3, #8]
    ad4c:	07db      	lsls	r3, r3, #31
    ad4e:	d4ee      	bmi.n	ad2e <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    ad50:	4b2f      	ldr	r3, [pc, #188]	; (ae10 <MiApp_SendData+0x124>)
    ad52:	8819      	ldrh	r1, [r3, #0]
    ad54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad56:	9305      	str	r3, [sp, #20]
    ad58:	465b      	mov	r3, fp
    ad5a:	9304      	str	r3, [sp, #16]
    ad5c:	4653      	mov	r3, sl
    ad5e:	9303      	str	r3, [sp, #12]
    ad60:	464b      	mov	r3, r9
    ad62:	9302      	str	r3, [sp, #8]
    ad64:	9701      	str	r7, [sp, #4]
    ad66:	2301      	movs	r3, #1
    ad68:	9300      	str	r3, [sp, #0]
    ad6a:	2300      	movs	r3, #0
    ad6c:	2200      	movs	r2, #0
    ad6e:	2001      	movs	r0, #1
    ad70:	4c28      	ldr	r4, [pc, #160]	; (ae14 <MiApp_SendData+0x128>)
    ad72:	47a0      	blx	r4
			broadcast = true;
    ad74:	2001      	movs	r0, #1
					    break;
    ad76:	e02f      	b.n	add8 <MiApp_SendData+0xec>
			broadcast = true;
    ad78:	2001      	movs	r0, #1
    ad7a:	e02d      	b.n	add8 <MiApp_SendData+0xec>
    ad7c:	3401      	adds	r4, #1
    ad7e:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    ad80:	2c05      	cmp	r4, #5
    ad82:	d028      	beq.n	add6 <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    ad84:	00a3      	lsls	r3, r4, #2
    ad86:	191b      	adds	r3, r3, r4
    ad88:	005b      	lsls	r3, r3, #1
    ad8a:	18f3      	adds	r3, r6, r3
    ad8c:	7a1b      	ldrb	r3, [r3, #8]
    ad8e:	09db      	lsrs	r3, r3, #7
    ad90:	d0f4      	beq.n	ad7c <MiApp_SendData+0x90>
    ad92:	00a3      	lsls	r3, r4, #2
    ad94:	191b      	adds	r3, r3, r4
    ad96:	005b      	lsls	r3, r3, #1
    ad98:	4a1b      	ldr	r2, [pc, #108]	; (ae08 <MiApp_SendData+0x11c>)
    ad9a:	4694      	mov	ip, r2
    ad9c:	4463      	add	r3, ip
    ad9e:	7a1b      	ldrb	r3, [r3, #8]
    ada0:	07db      	lsls	r3, r3, #31
    ada2:	d4eb      	bmi.n	ad7c <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    ada4:	0029      	movs	r1, r5
    ada6:	9807      	ldr	r0, [sp, #28]
    ada8:	4b1b      	ldr	r3, [pc, #108]	; (ae18 <MiApp_SendData+0x12c>)
    adaa:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    adac:	2800      	cmp	r0, #0
    adae:	d0e5      	beq.n	ad7c <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    adb0:	4b17      	ldr	r3, [pc, #92]	; (ae10 <MiApp_SendData+0x124>)
    adb2:	8819      	ldrh	r1, [r3, #0]
    adb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    adb6:	9305      	str	r3, [sp, #20]
    adb8:	465b      	mov	r3, fp
    adba:	9304      	str	r3, [sp, #16]
    adbc:	4653      	mov	r3, sl
    adbe:	9303      	str	r3, [sp, #12]
    adc0:	464b      	mov	r3, r9
    adc2:	9302      	str	r3, [sp, #8]
    adc4:	9701      	str	r7, [sp, #4]
    adc6:	2301      	movs	r3, #1
    adc8:	9300      	str	r3, [sp, #0]
    adca:	2300      	movs	r3, #0
    adcc:	9a07      	ldr	r2, [sp, #28]
    adce:	2000      	movs	r0, #0
    add0:	4c10      	ldr	r4, [pc, #64]	; (ae14 <MiApp_SendData+0x128>)
    add2:	47a0      	blx	r4
    add4:	e011      	b.n	adfa <MiApp_SendData+0x10e>
	    bool broadcast = false;
    add6:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    add8:	4b0d      	ldr	r3, [pc, #52]	; (ae10 <MiApp_SendData+0x124>)
    adda:	8819      	ldrh	r1, [r3, #0]
    addc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    adde:	9305      	str	r3, [sp, #20]
    ade0:	465b      	mov	r3, fp
    ade2:	9304      	str	r3, [sp, #16]
    ade4:	4653      	mov	r3, sl
    ade6:	9303      	str	r3, [sp, #12]
    ade8:	464b      	mov	r3, r9
    adea:	9302      	str	r3, [sp, #8]
    adec:	9701      	str	r7, [sp, #4]
    adee:	2301      	movs	r3, #1
    adf0:	9300      	str	r3, [sp, #0]
    adf2:	2300      	movs	r3, #0
    adf4:	9a07      	ldr	r2, [sp, #28]
    adf6:	4c09      	ldr	r4, [pc, #36]	; (ae1c <MiApp_SendData+0x130>)
    adf8:	47a0      	blx	r4
}
    adfa:	b008      	add	sp, #32
    adfc:	bc1c      	pop	{r2, r3, r4}
    adfe:	4691      	mov	r9, r2
    ae00:	469a      	mov	sl, r3
    ae02:	46a3      	mov	fp, r4
    ae04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae06:	46c0      	nop			; (mov r8, r8)
    ae08:	20002668 	.word	0x20002668
    ae0c:	0000ffff 	.word	0x0000ffff
    ae10:	200026bc 	.word	0x200026bc
    ae14:	0000aabd 	.word	0x0000aabd
    ae18:	0000acc5 	.word	0x0000acc5
    ae1c:	0000abf1 	.word	0x0000abf1

0000ae20 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    ae20:	b570      	push	{r4, r5, r6, lr}
    ae22:	000d      	movs	r5, r1
     break;

     default:
     break;
   }
    return false;
    ae24:	2400      	movs	r4, #0
    switch(id)
    ae26:	2800      	cmp	r0, #0
    ae28:	d001      	beq.n	ae2e <MiApp_Set+0xe>
}
    ae2a:	0020      	movs	r0, r4
    ae2c:	bd70      	pop	{r4, r5, r6, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    ae2e:	4b05      	ldr	r3, [pc, #20]	; (ae44 <MiApp_Set+0x24>)
    ae30:	4798      	blx	r3
    ae32:	1e04      	subs	r4, r0, #0
    ae34:	d0f9      	beq.n	ae2a <MiApp_Set+0xa>
          currentChannel = *value;
    ae36:	782a      	ldrb	r2, [r5, #0]
    ae38:	4b03      	ldr	r3, [pc, #12]	; (ae48 <MiApp_Set+0x28>)
    ae3a:	701a      	strb	r2, [r3, #0]
			  PDS_Store(PDS_CURRENT_CHANNEL_ID);
    ae3c:	2003      	movs	r0, #3
    ae3e:	4b03      	ldr	r3, [pc, #12]	; (ae4c <MiApp_Set+0x2c>)
    ae40:	4798      	blx	r3
          return true;
    ae42:	e7f2      	b.n	ae2a <MiApp_Set+0xa>
    ae44:	000099d5 	.word	0x000099d5
    ae48:	20000019 	.word	0x20000019
    ae4c:	0000933d 	.word	0x0000933d

0000ae50 <MiApp_ProtocolInit>:
{
    ae50:	b570      	push	{r4, r5, r6, lr}
    ae52:	b084      	sub	sp, #16
    P2PStatus.Val = 0;
    ae54:	2200      	movs	r2, #0
    ae56:	4b3c      	ldr	r3, [pc, #240]	; (af48 <MiApp_ProtocolInit+0xf8>)
    ae58:	701a      	strb	r2, [r3, #0]
    ae5a:	4b3c      	ldr	r3, [pc, #240]	; (af4c <MiApp_ProtocolInit+0xfc>)
    ae5c:	0019      	movs	r1, r3
    ae5e:	3132      	adds	r1, #50	; 0x32
            ConnectionTable[i].status.Val = 0;
    ae60:	721a      	strb	r2, [r3, #8]
            ConnectionTable[i].Address[0] = 0x00;
    ae62:	701a      	strb	r2, [r3, #0]
            ConnectionTable[i].Address[1] = 0x00;
    ae64:	705a      	strb	r2, [r3, #1]
            ConnectionTable[i].Address[2] = 0x00;
    ae66:	709a      	strb	r2, [r3, #2]
    ae68:	330a      	adds	r3, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    ae6a:	428b      	cmp	r3, r1
    ae6c:	d1f8      	bne.n	ae60 <MiApp_ProtocolInit+0x10>
            indirectMessages[i].flags.Val = 0;
    ae6e:	4a38      	ldr	r2, [pc, #224]	; (af50 <MiApp_ProtocolInit+0x100>)
    ae70:	2300      	movs	r3, #0
    ae72:	7393      	strb	r3, [r2, #14]
    ae74:	2191      	movs	r1, #145	; 0x91
    ae76:	0049      	lsls	r1, r1, #1
    ae78:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    ae7a:	4a36      	ldr	r2, [pc, #216]	; (af54 <MiApp_ProtocolInit+0x104>)
    ae7c:	6013      	str	r3, [r2, #0]
    ae7e:	6053      	str	r3, [r2, #4]
    ae80:	6093      	str	r3, [r2, #8]
    ae82:	60d3      	str	r3, [r2, #12]
    ae84:	6113      	str	r3, [r2, #16]
			PDS_Restore(PDS_PANID_ID);
    ae86:	2002      	movs	r0, #2
    ae88:	4b33      	ldr	r3, [pc, #204]	; (af58 <MiApp_ProtocolInit+0x108>)
    ae8a:	4798      	blx	r3
        if (myPANID.Val)
    ae8c:	4b33      	ldr	r3, [pc, #204]	; (af5c <MiApp_ProtocolInit+0x10c>)
    ae8e:	881b      	ldrh	r3, [r3, #0]
    ae90:	2b00      	cmp	r3, #0
    ae92:	d021      	beq.n	aed8 <MiApp_ProtocolInit+0x88>
			PDS_Restore(PDS_CURRENT_CHANNEL_ID);
    ae94:	2003      	movs	r0, #3
    ae96:	4b30      	ldr	r3, [pc, #192]	; (af58 <MiApp_ProtocolInit+0x108>)
    ae98:	4798      	blx	r3
            if( currentChannel >= 32 )
    ae9a:	4b31      	ldr	r3, [pc, #196]	; (af60 <MiApp_ProtocolInit+0x110>)
    ae9c:	781b      	ldrb	r3, [r3, #0]
    ae9e:	2b1f      	cmp	r3, #31
    aea0:	d84f      	bhi.n	af42 <MiApp_ProtocolInit+0xf2>
			PDS_Restore(PDS_PANID_ID);
    aea2:	2002      	movs	r0, #2
    aea4:	4c2c      	ldr	r4, [pc, #176]	; (af58 <MiApp_ProtocolInit+0x108>)
    aea6:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_MODE_ID);
    aea8:	2004      	movs	r0, #4
    aeaa:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_TABLE_ID);
    aeac:	2005      	movs	r0, #5
    aeae:	47a0      	blx	r4
			PDS_Restore(PDS_EDC_ID);
    aeb0:	2007      	movs	r0, #7
    aeb2:	47a0      	blx	r4
                printf("\r\nPANID:");
    aeb4:	482b      	ldr	r0, [pc, #172]	; (af64 <MiApp_ProtocolInit+0x114>)
    aeb6:	4c2c      	ldr	r4, [pc, #176]	; (af68 <MiApp_ProtocolInit+0x118>)
    aeb8:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    aeba:	4e28      	ldr	r6, [pc, #160]	; (af5c <MiApp_ProtocolInit+0x10c>)
    aebc:	7871      	ldrb	r1, [r6, #1]
    aebe:	4d2b      	ldr	r5, [pc, #172]	; (af6c <MiApp_ProtocolInit+0x11c>)
    aec0:	0028      	movs	r0, r5
    aec2:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    aec4:	7831      	ldrb	r1, [r6, #0]
    aec6:	0028      	movs	r0, r5
    aec8:	47a0      	blx	r4
                printf(" Channel:");
    aeca:	4829      	ldr	r0, [pc, #164]	; (af70 <MiApp_ProtocolInit+0x120>)
    aecc:	47a0      	blx	r4
                printf("%d",currentChannel);
    aece:	4b24      	ldr	r3, [pc, #144]	; (af60 <MiApp_ProtocolInit+0x110>)
    aed0:	7819      	ldrb	r1, [r3, #0]
    aed2:	4828      	ldr	r0, [pc, #160]	; (af74 <MiApp_ProtocolInit+0x124>)
    aed4:	47a0      	blx	r4
    aed6:	e00b      	b.n	aef0 <MiApp_ProtocolInit+0xa0>
                myPANID.Val = MY_PAN_ID;
    aed8:	4a27      	ldr	r2, [pc, #156]	; (af78 <MiApp_ProtocolInit+0x128>)
    aeda:	4b20      	ldr	r3, [pc, #128]	; (af5c <MiApp_ProtocolInit+0x10c>)
    aedc:	801a      	strh	r2, [r3, #0]
				PDS_Store(PDS_PANID_ID);
    aede:	2002      	movs	r0, #2
    aee0:	4c26      	ldr	r4, [pc, #152]	; (af7c <MiApp_ProtocolInit+0x12c>)
    aee2:	47a0      	blx	r4
			PDS_Store(PDS_CURRENT_CHANNEL_ID);
    aee4:	2003      	movs	r0, #3
    aee6:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_MODE_ID);
    aee8:	2004      	movs	r0, #4
    aeea:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_TABLE_ID);
    aeec:	2005      	movs	r0, #5
    aeee:	47a0      	blx	r4
    initValue.PAddress = myLongAddress;
    aef0:	aa02      	add	r2, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    aef2:	7813      	ldrb	r3, [r2, #0]
    aef4:	2102      	movs	r1, #2
    aef6:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    aef8:	2187      	movs	r1, #135	; 0x87
    aefa:	400b      	ands	r3, r1
    aefc:	2140      	movs	r1, #64	; 0x40
    aefe:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    af00:	b2db      	uxtb	r3, r3
    af02:	2104      	movs	r1, #4
    af04:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    af06:	21c6      	movs	r1, #198	; 0xc6
    af08:	400b      	ands	r3, r1
    af0a:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    af0c:	9802      	ldr	r0, [sp, #8]
    af0e:	491c      	ldr	r1, [pc, #112]	; (af80 <MiApp_ProtocolInit+0x130>)
    af10:	4b1c      	ldr	r3, [pc, #112]	; (af84 <MiApp_ProtocolInit+0x134>)
    af12:	4798      	blx	r3
    if (currentChannel != 0xFF)
    af14:	4b12      	ldr	r3, [pc, #72]	; (af60 <MiApp_ProtocolInit+0x110>)
    af16:	781b      	ldrb	r3, [r3, #0]
    af18:	2bff      	cmp	r3, #255	; 0xff
    af1a:	d003      	beq.n	af24 <MiApp_ProtocolInit+0xd4>
	    MiApp_Set(CHANNEL, &currentChannel);
    af1c:	4910      	ldr	r1, [pc, #64]	; (af60 <MiApp_ProtocolInit+0x110>)
    af1e:	2000      	movs	r0, #0
    af20:	4b19      	ldr	r3, [pc, #100]	; (af88 <MiApp_ProtocolInit+0x138>)
    af22:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    af24:	466b      	mov	r3, sp
    af26:	1d98      	adds	r0, r3, #6
    af28:	2301      	movs	r3, #1
    af2a:	425b      	negs	r3, r3
    af2c:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    af2e:	490b      	ldr	r1, [pc, #44]	; (af5c <MiApp_ProtocolInit+0x10c>)
    af30:	4b16      	ldr	r3, [pc, #88]	; (af8c <MiApp_ProtocolInit+0x13c>)
    af32:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    af34:	4b16      	ldr	r3, [pc, #88]	; (af90 <MiApp_ProtocolInit+0x140>)
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	011b      	lsls	r3, r3, #4
    af3a:	2209      	movs	r2, #9
    af3c:	4313      	orrs	r3, r2
    af3e:	4a15      	ldr	r2, [pc, #84]	; (af94 <MiApp_ProtocolInit+0x144>)
    af40:	7013      	strb	r3, [r2, #0]
}
    af42:	2000      	movs	r0, #0
    af44:	b004      	add	sp, #16
    af46:	bd70      	pop	{r4, r5, r6, pc}
    af48:	200026e0 	.word	0x200026e0
    af4c:	20002668 	.word	0x20002668
    af50:	200026e4 	.word	0x200026e4
    af54:	200026c8 	.word	0x200026c8
    af58:	00009265 	.word	0x00009265
    af5c:	200026bc 	.word	0x200026bc
    af60:	20000019 	.word	0x20000019
    af64:	00018a04 	.word	0x00018a04
    af68:	00016cb1 	.word	0x00016cb1
    af6c:	00017f3c 	.word	0x00017f3c
    af70:	00018a10 	.word	0x00018a10
    af74:	00017c10 	.word	0x00017c10
    af78:	00004761 	.word	0x00004761
    af7c:	0000933d 	.word	0x0000933d
    af80:	2000001c 	.word	0x2000001c
    af84:	000099fd 	.word	0x000099fd
    af88:	0000ae21 	.word	0x0000ae21
    af8c:	000095d5 	.word	0x000095d5
    af90:	20000018 	.word	0x20000018
    af94:	200026b5 	.word	0x200026b5

0000af98 <MiApp_StartConnection>:
    {
    af98:	b530      	push	{r4, r5, lr}
    af9a:	b083      	sub	sp, #12
    af9c:	0014      	movs	r4, r2
    af9e:	001d      	movs	r5, r3
        switch(Mode)
    afa0:	2801      	cmp	r0, #1
    afa2:	d032      	beq.n	b00a <MiApp_StartConnection+0x72>
    afa4:	2800      	cmp	r0, #0
    afa6:	d005      	beq.n	afb4 <MiApp_StartConnection+0x1c>
    afa8:	2802      	cmp	r0, #2
    afaa:	d032      	beq.n	b012 <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    afac:	2001      	movs	r0, #1
    afae:	4798      	blx	r3
        return false;
    afb0:	2000      	movs	r0, #0
    afb2:	e028      	b.n	b006 <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    afb4:	2200      	movs	r2, #0
    afb6:	466b      	mov	r3, sp
    afb8:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    afba:	4918      	ldr	r1, [pc, #96]	; (b01c <MiApp_StartConnection+0x84>)
    afbc:	4b18      	ldr	r3, [pc, #96]	; (b020 <MiApp_StartConnection+0x88>)
    afbe:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    afc0:	466b      	mov	r3, sp
    afc2:	1d98      	adds	r0, r3, #6
    afc4:	2301      	movs	r3, #1
    afc6:	425b      	negs	r3, r3
    afc8:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    afca:	4b16      	ldr	r3, [pc, #88]	; (b024 <MiApp_StartConnection+0x8c>)
    afcc:	4798      	blx	r3
				while (!(index & ChannelMap))
    afce:	07e3      	lsls	r3, r4, #31
    afd0:	d40a      	bmi.n	afe8 <MiApp_StartConnection+0x50>
    afd2:	466b      	mov	r3, sp
    afd4:	3305      	adds	r3, #5
    afd6:	781b      	ldrb	r3, [r3, #0]
    afd8:	2201      	movs	r2, #1
				index = index << 1;
    afda:	0052      	lsls	r2, r2, #1
				++channel;
    afdc:	3301      	adds	r3, #1
    afde:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    afe0:	4222      	tst	r2, r4
    afe2:	d0fa      	beq.n	afda <MiApp_StartConnection+0x42>
    afe4:	466a      	mov	r2, sp
    afe6:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    afe8:	466b      	mov	r3, sp
    afea:	1d59      	adds	r1, r3, #5
    afec:	2000      	movs	r0, #0
    afee:	4b0e      	ldr	r3, [pc, #56]	; (b028 <MiApp_StartConnection+0x90>)
    aff0:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    aff2:	4c0e      	ldr	r4, [pc, #56]	; (b02c <MiApp_StartConnection+0x94>)
    aff4:	47a0      	blx	r4
    aff6:	4b0e      	ldr	r3, [pc, #56]	; (b030 <MiApp_StartConnection+0x98>)
    aff8:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    affa:	47a0      	blx	r4
    affc:	4b0d      	ldr	r3, [pc, #52]	; (b034 <MiApp_StartConnection+0x9c>)
    affe:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    b000:	2000      	movs	r0, #0
    b002:	47a8      	blx	r5
                return true;
    b004:	2001      	movs	r0, #1
    }
    b006:	b003      	add	sp, #12
    b008:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    b00a:	2001      	movs	r0, #1
    b00c:	4798      	blx	r3
                    return false;
    b00e:	2000      	movs	r0, #0
    b010:	e7f9      	b.n	b006 <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    b012:	2001      	movs	r0, #1
    b014:	4798      	blx	r3
                return false;
    b016:	2000      	movs	r0, #0
    b018:	e7f5      	b.n	b006 <MiApp_StartConnection+0x6e>
    b01a:	46c0      	nop			; (mov r8, r8)
    b01c:	200026bc 	.word	0x200026bc
    b020:	00004761 	.word	0x00004761
    b024:	000095d5 	.word	0x000095d5
    b028:	0000ae21 	.word	0x0000ae21
    b02c:	0000bf25 	.word	0x0000bf25
    b030:	2000290c 	.word	0x2000290c
    b034:	2000269c 	.word	0x2000269c

0000b038 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    b038:	b5f0      	push	{r4, r5, r6, r7, lr}
    b03a:	46d6      	mov	lr, sl
    b03c:	4647      	mov	r7, r8
    b03e:	b580      	push	{r7, lr}
    b040:	b083      	sub	sp, #12
    b042:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    b044:	2805      	cmp	r0, #5
    b046:	d811      	bhi.n	b06c <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    b048:	2d04      	cmp	r5, #4
    b04a:	d85e      	bhi.n	b10a <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    b04c:	4851      	ldr	r0, [pc, #324]	; (b194 <DumpConnection+0x15c>)
    b04e:	4b52      	ldr	r3, [pc, #328]	; (b198 <DumpConnection+0x160>)
    b050:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    b052:	00ab      	lsls	r3, r5, #2
    b054:	195b      	adds	r3, r3, r5
    b056:	005b      	lsls	r3, r3, #1
    b058:	4a50      	ldr	r2, [pc, #320]	; (b19c <DumpConnection+0x164>)
    b05a:	18d3      	adds	r3, r2, r3
    b05c:	7a1b      	ldrb	r3, [r3, #8]
    b05e:	09db      	lsrs	r3, r3, #7
    b060:	d123      	bne.n	b0aa <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    b062:	b003      	add	sp, #12
    b064:	bc0c      	pop	{r2, r3}
    b066:	4690      	mov	r8, r2
    b068:	469a      	mov	sl, r3
    b06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    b06c:	484c      	ldr	r0, [pc, #304]	; (b1a0 <DumpConnection+0x168>)
    b06e:	4b4d      	ldr	r3, [pc, #308]	; (b1a4 <DumpConnection+0x16c>)
    b070:	4798      	blx	r3
    b072:	4c4d      	ldr	r4, [pc, #308]	; (b1a8 <DumpConnection+0x170>)
    b074:	0026      	movs	r6, r4
    b076:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    b078:	4f4a      	ldr	r7, [pc, #296]	; (b1a4 <DumpConnection+0x16c>)
    b07a:	79e1      	ldrb	r1, [r4, #7]
    b07c:	484b      	ldr	r0, [pc, #300]	; (b1ac <DumpConnection+0x174>)
    b07e:	47b8      	blx	r7
    b080:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b082:	42b4      	cmp	r4, r6
    b084:	d1f9      	bne.n	b07a <DumpConnection+0x42>
                printf("  PANID: 0x");
    b086:	484a      	ldr	r0, [pc, #296]	; (b1b0 <DumpConnection+0x178>)
    b088:	4c46      	ldr	r4, [pc, #280]	; (b1a4 <DumpConnection+0x16c>)
    b08a:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    b08c:	4f49      	ldr	r7, [pc, #292]	; (b1b4 <DumpConnection+0x17c>)
    b08e:	7879      	ldrb	r1, [r7, #1]
    b090:	4e49      	ldr	r6, [pc, #292]	; (b1b8 <DumpConnection+0x180>)
    b092:	0030      	movs	r0, r6
    b094:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    b096:	7839      	ldrb	r1, [r7, #0]
    b098:	0030      	movs	r0, r6
    b09a:	47a0      	blx	r4
            printf("  Channel: ");
    b09c:	4847      	ldr	r0, [pc, #284]	; (b1bc <DumpConnection+0x184>)
    b09e:	47a0      	blx	r4
            printf("%d",currentChannel);
    b0a0:	4b47      	ldr	r3, [pc, #284]	; (b1c0 <DumpConnection+0x188>)
    b0a2:	7819      	ldrb	r1, [r3, #0]
    b0a4:	4847      	ldr	r0, [pc, #284]	; (b1c4 <DumpConnection+0x18c>)
    b0a6:	47a0      	blx	r4
    b0a8:	e7ce      	b.n	b048 <DumpConnection+0x10>
                printf("%02x",index);
    b0aa:	0029      	movs	r1, r5
    b0ac:	483f      	ldr	r0, [pc, #252]	; (b1ac <DumpConnection+0x174>)
    b0ae:	4c3d      	ldr	r4, [pc, #244]	; (b1a4 <DumpConnection+0x16c>)
    b0b0:	47a0      	blx	r4
                printf("\t\t\t");
    b0b2:	4845      	ldr	r0, [pc, #276]	; (b1c8 <DumpConnection+0x190>)
    b0b4:	47a0      	blx	r4
    b0b6:	00ae      	lsls	r6, r5, #2
    b0b8:	1976      	adds	r6, r6, r5
    b0ba:	0076      	lsls	r6, r6, #1
    b0bc:	1df4      	adds	r4, r6, #7
    b0be:	4b37      	ldr	r3, [pc, #220]	; (b19c <DumpConnection+0x164>)
    b0c0:	18e4      	adds	r4, r4, r3
    b0c2:	3e01      	subs	r6, #1
    b0c4:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    b0c6:	4f37      	ldr	r7, [pc, #220]	; (b1a4 <DumpConnection+0x16c>)
    b0c8:	7821      	ldrb	r1, [r4, #0]
    b0ca:	4838      	ldr	r0, [pc, #224]	; (b1ac <DumpConnection+0x174>)
    b0cc:	47b8      	blx	r7
    b0ce:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    b0d0:	42b4      	cmp	r4, r6
    b0d2:	d1f9      	bne.n	b0c8 <DumpConnection+0x90>
                printf("/t");
    b0d4:	483d      	ldr	r0, [pc, #244]	; (b1cc <DumpConnection+0x194>)
    b0d6:	4f33      	ldr	r7, [pc, #204]	; (b1a4 <DumpConnection+0x16c>)
    b0d8:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    b0da:	4e30      	ldr	r6, [pc, #192]	; (b19c <DumpConnection+0x164>)
    b0dc:	00ac      	lsls	r4, r5, #2
    b0de:	1963      	adds	r3, r4, r5
    b0e0:	005b      	lsls	r3, r3, #1
    b0e2:	18f3      	adds	r3, r6, r3
    b0e4:	7a59      	ldrb	r1, [r3, #9]
    b0e6:	4831      	ldr	r0, [pc, #196]	; (b1ac <DumpConnection+0x174>)
    b0e8:	47b8      	blx	r7
				printf("\t");
    b0ea:	2009      	movs	r0, #9
    b0ec:	4b38      	ldr	r3, [pc, #224]	; (b1d0 <DumpConnection+0x198>)
    b0ee:	4698      	mov	r8, r3
    b0f0:	4798      	blx	r3
				printf("\t");
    b0f2:	2009      	movs	r0, #9
    b0f4:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    b0f6:	1964      	adds	r4, r4, r5
    b0f8:	0064      	lsls	r4, r4, #1
    b0fa:	1934      	adds	r4, r6, r4
    b0fc:	7a21      	ldrb	r1, [r4, #8]
    b0fe:	4831      	ldr	r0, [pc, #196]	; (b1c4 <DumpConnection+0x18c>)
    b100:	47b8      	blx	r7
                printf("\r\n");
    b102:	4834      	ldr	r0, [pc, #208]	; (b1d4 <DumpConnection+0x19c>)
    b104:	4b24      	ldr	r3, [pc, #144]	; (b198 <DumpConnection+0x160>)
    b106:	4798      	blx	r3
    b108:	e7ab      	b.n	b062 <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    b10a:	4833      	ldr	r0, [pc, #204]	; (b1d8 <DumpConnection+0x1a0>)
    b10c:	4b22      	ldr	r3, [pc, #136]	; (b198 <DumpConnection+0x160>)
    b10e:	4798      	blx	r3
    b110:	4b32      	ldr	r3, [pc, #200]	; (b1dc <DumpConnection+0x1a4>)
    b112:	4698      	mov	r8, r3
    b114:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    b116:	4b21      	ldr	r3, [pc, #132]	; (b19c <DumpConnection+0x164>)
    b118:	469a      	mov	sl, r3
    b11a:	e020      	b.n	b15e <DumpConnection+0x126>
                    printf("    ");
    b11c:	4830      	ldr	r0, [pc, #192]	; (b1e0 <DumpConnection+0x1a8>)
    b11e:	4e21      	ldr	r6, [pc, #132]	; (b1a4 <DumpConnection+0x16c>)
    b120:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    b122:	4643      	mov	r3, r8
    b124:	7899      	ldrb	r1, [r3, #2]
    b126:	4821      	ldr	r0, [pc, #132]	; (b1ac <DumpConnection+0x174>)
    b128:	47b0      	blx	r6
					printf("\t");
    b12a:	2009      	movs	r0, #9
    b12c:	4c28      	ldr	r4, [pc, #160]	; (b1d0 <DumpConnection+0x198>)
    b12e:	47a0      	blx	r4
					printf("\t");
    b130:	2009      	movs	r0, #9
    b132:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    b134:	9a01      	ldr	r2, [sp, #4]
    b136:	0093      	lsls	r3, r2, #2
    b138:	189f      	adds	r7, r3, r2
    b13a:	007f      	lsls	r7, r7, #1
    b13c:	4b17      	ldr	r3, [pc, #92]	; (b19c <DumpConnection+0x164>)
    b13e:	19df      	adds	r7, r3, r7
    b140:	7a39      	ldrb	r1, [r7, #8]
    b142:	07c9      	lsls	r1, r1, #31
    b144:	0fc9      	lsrs	r1, r1, #31
    b146:	4819      	ldr	r0, [pc, #100]	; (b1ac <DumpConnection+0x174>)
    b148:	47b0      	blx	r6
                    printf("\r\n");
    b14a:	4822      	ldr	r0, [pc, #136]	; (b1d4 <DumpConnection+0x19c>)
    b14c:	4b12      	ldr	r3, [pc, #72]	; (b198 <DumpConnection+0x160>)
    b14e:	4798      	blx	r3
    b150:	3501      	adds	r5, #1
    b152:	230a      	movs	r3, #10
    b154:	469c      	mov	ip, r3
    b156:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    b158:	2d05      	cmp	r5, #5
    b15a:	d100      	bne.n	b15e <DumpConnection+0x126>
    b15c:	e781      	b.n	b062 <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    b15e:	9501      	str	r5, [sp, #4]
    b160:	00ab      	lsls	r3, r5, #2
    b162:	195b      	adds	r3, r3, r5
    b164:	005b      	lsls	r3, r3, #1
    b166:	4453      	add	r3, sl
    b168:	7a1b      	ldrb	r3, [r3, #8]
    b16a:	09db      	lsrs	r3, r3, #7
    b16c:	d0f0      	beq.n	b150 <DumpConnection+0x118>
                    printf("%02x",i);
    b16e:	0029      	movs	r1, r5
    b170:	480e      	ldr	r0, [pc, #56]	; (b1ac <DumpConnection+0x174>)
    b172:	4b0c      	ldr	r3, [pc, #48]	; (b1a4 <DumpConnection+0x16c>)
    b174:	4798      	blx	r3
                    printf("             ");
    b176:	481b      	ldr	r0, [pc, #108]	; (b1e4 <DumpConnection+0x1ac>)
    b178:	4b0a      	ldr	r3, [pc, #40]	; (b1a4 <DumpConnection+0x16c>)
    b17a:	4798      	blx	r3
    b17c:	4647      	mov	r7, r8
    b17e:	3f08      	subs	r7, #8
    b180:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    b182:	4e08      	ldr	r6, [pc, #32]	; (b1a4 <DumpConnection+0x16c>)
    b184:	7821      	ldrb	r1, [r4, #0]
    b186:	4809      	ldr	r0, [pc, #36]	; (b1ac <DumpConnection+0x174>)
    b188:	47b0      	blx	r6
    b18a:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    b18c:	42bc      	cmp	r4, r7
    b18e:	d1f9      	bne.n	b184 <DumpConnection+0x14c>
    b190:	e7c4      	b.n	b11c <DumpConnection+0xe4>
    b192:	46c0      	nop			; (mov r8, r8)
    b194:	00018970 	.word	0x00018970
    b198:	00016dcd 	.word	0x00016dcd
    b19c:	20002668 	.word	0x20002668
    b1a0:	00018944 	.word	0x00018944
    b1a4:	00016cb1 	.word	0x00016cb1
    b1a8:	2000001c 	.word	0x2000001c
    b1ac:	00017f2c 	.word	0x00017f2c
    b1b0:	00018958 	.word	0x00018958
    b1b4:	200026bc 	.word	0x200026bc
    b1b8:	00017f3c 	.word	0x00017f3c
    b1bc:	00018964 	.word	0x00018964
    b1c0:	20000019 	.word	0x20000019
    b1c4:	00017c10 	.word	0x00017c10
    b1c8:	000189a8 	.word	0x000189a8
    b1cc:	000189ac 	.word	0x000189ac
    b1d0:	00016ce5 	.word	0x00016ce5
    b1d4:	00018168 	.word	0x00018168
    b1d8:	000189b0 	.word	0x000189b0
    b1dc:	2000266f 	.word	0x2000266f
    b1e0:	000189fc 	.word	0x000189fc
    b1e4:	000189ec 	.word	0x000189ec

0000b1e8 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1ea:	46d6      	mov	lr, sl
    b1ec:	464f      	mov	r7, r9
    b1ee:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b1f0:	4b3b      	ldr	r3, [pc, #236]	; (b2e0 <AddConnection+0xf8>)
    b1f2:	685e      	ldr	r6, [r3, #4]
    b1f4:	4d3b      	ldr	r5, [pc, #236]	; (b2e4 <AddConnection+0xfc>)
    b1f6:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    b1f8:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    b1fa:	46a9      	mov	r9, r5
    b1fc:	e005      	b.n	b20a <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    b1fe:	2fff      	cmp	r7, #255	; 0xff
    b200:	d015      	beq.n	b22e <AddConnection+0x46>
    b202:	3401      	adds	r4, #1
    b204:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b206:	2c05      	cmp	r4, #5
    b208:	d013      	beq.n	b232 <AddConnection+0x4a>
    b20a:	b2e3      	uxtb	r3, r4
    b20c:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    b20e:	00a3      	lsls	r3, r4, #2
    b210:	191b      	adds	r3, r3, r4
    b212:	005b      	lsls	r3, r3, #1
    b214:	444b      	add	r3, r9
    b216:	7a1b      	ldrb	r3, [r3, #8]
    b218:	09db      	lsrs	r3, r3, #7
    b21a:	d0f0      	beq.n	b1fe <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b21c:	0029      	movs	r1, r5
    b21e:	0030      	movs	r0, r6
    b220:	4b31      	ldr	r3, [pc, #196]	; (b2e8 <AddConnection+0x100>)
    b222:	4798      	blx	r3
    b224:	2800      	cmp	r0, #0
    b226:	d0ec      	beq.n	b202 <AddConnection+0x1a>
    b228:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    b22a:	2401      	movs	r4, #1
    b22c:	e002      	b.n	b234 <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    b22e:	4657      	mov	r7, sl
    b230:	e7e7      	b.n	b202 <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    b232:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    b234:	2fff      	cmp	r7, #255	; 0xff
    b236:	d04c      	beq.n	b2d2 <AddConnection+0xea>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    b238:	4b2c      	ldr	r3, [pc, #176]	; (b2ec <AddConnection+0x104>)
    b23a:	781b      	ldrb	r3, [r3, #0]
    b23c:	2b00      	cmp	r3, #0
    b23e:	d149      	bne.n	b2d4 <AddConnection+0xec>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    b240:	4b2b      	ldr	r3, [pc, #172]	; (b2f0 <AddConnection+0x108>)
    b242:	701f      	strb	r7, [r3, #0]
    b244:	00b9      	lsls	r1, r7, #2
    b246:	19c9      	adds	r1, r1, r7
    b248:	0049      	lsls	r1, r1, #1
    b24a:	4b26      	ldr	r3, [pc, #152]	; (b2e4 <AddConnection+0xfc>)
    b24c:	18c9      	adds	r1, r1, r3
    b24e:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    b250:	0038      	movs	r0, r7
    b252:	5cf2      	ldrb	r2, [r6, r3]
    b254:	54ca      	strb	r2, [r1, r3]
    b256:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    b258:	2b08      	cmp	r3, #8
    b25a:	d1fa      	bne.n	b252 <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    b25c:	0083      	lsls	r3, r0, #2
    b25e:	181b      	adds	r3, r3, r0
    b260:	005b      	lsls	r3, r3, #1
    b262:	4a20      	ldr	r2, [pc, #128]	; (b2e4 <AddConnection+0xfc>)
    b264:	18d3      	adds	r3, r2, r3
    b266:	7a19      	ldrb	r1, [r3, #8]
    b268:	2280      	movs	r2, #128	; 0x80
    b26a:	4252      	negs	r2, r2
    b26c:	430a      	orrs	r2, r1
    b26e:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    b270:	4b1b      	ldr	r3, [pc, #108]	; (b2e0 <AddConnection+0xf8>)
    b272:	689b      	ldr	r3, [r3, #8]
    b274:	789a      	ldrb	r2, [r3, #2]
    b276:	07d2      	lsls	r2, r2, #31
    b278:	d521      	bpl.n	b2be <AddConnection+0xd6>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    b27a:	0082      	lsls	r2, r0, #2
    b27c:	1812      	adds	r2, r2, r0
    b27e:	0052      	lsls	r2, r2, #1
    b280:	4918      	ldr	r1, [pc, #96]	; (b2e4 <AddConnection+0xfc>)
    b282:	188a      	adds	r2, r1, r2
    b284:	7a11      	ldrb	r1, [r2, #8]
    b286:	2501      	movs	r5, #1
    b288:	4329      	orrs	r1, r5
    b28a:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    b28c:	78d9      	ldrb	r1, [r3, #3]
    b28e:	0082      	lsls	r2, r0, #2
    b290:	1810      	adds	r0, r2, r0
    b292:	0043      	lsls	r3, r0, #1
    b294:	4813      	ldr	r0, [pc, #76]	; (b2e4 <AddConnection+0xfc>)
    b296:	18c0      	adds	r0, r0, r3
    b298:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    b29a:	2100      	movs	r1, #0
    b29c:	4b15      	ldr	r3, [pc, #84]	; (b2f4 <AddConnection+0x10c>)
    b29e:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    b2a0:	4b15      	ldr	r3, [pc, #84]	; (b2f8 <AddConnection+0x110>)
    b2a2:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    b2a4:	4a15      	ldr	r2, [pc, #84]	; (b2fc <AddConnection+0x114>)
    b2a6:	7813      	ldrb	r3, [r2, #0]
    b2a8:	3110      	adds	r1, #16
    b2aa:	438b      	bics	r3, r1
    b2ac:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    b2ae:	4b14      	ldr	r3, [pc, #80]	; (b300 <AddConnection+0x118>)
    b2b0:	4798      	blx	r3
    b2b2:	4b14      	ldr	r3, [pc, #80]	; (b304 <AddConnection+0x11c>)
    b2b4:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    b2b6:	2007      	movs	r0, #7
    b2b8:	4b13      	ldr	r3, [pc, #76]	; (b308 <AddConnection+0x120>)
    b2ba:	4798      	blx	r3
    #endif

        return status;
    b2bc:	e00a      	b.n	b2d4 <AddConnection+0xec>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    b2be:	0082      	lsls	r2, r0, #2
    b2c0:	1812      	adds	r2, r2, r0
    b2c2:	0052      	lsls	r2, r2, #1
    b2c4:	4907      	ldr	r1, [pc, #28]	; (b2e4 <AddConnection+0xfc>)
    b2c6:	188a      	adds	r2, r1, r2
    b2c8:	7a11      	ldrb	r1, [r2, #8]
    b2ca:	2501      	movs	r5, #1
    b2cc:	43a9      	bics	r1, r5
    b2ce:	7211      	strb	r1, [r2, #8]
    b2d0:	e7dc      	b.n	b28c <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    b2d2:	24f1      	movs	r4, #241	; 0xf1
    }
    b2d4:	0020      	movs	r0, r4
    b2d6:	bc0c      	pop	{r2, r3}
    b2d8:	4691      	mov	r9, r2
    b2da:	469a      	mov	sl, r3
    b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2de:	46c0      	nop			; (mov r8, r8)
    b2e0:	20002950 	.word	0x20002950
    b2e4:	20002668 	.word	0x20002668
    b2e8:	0000acc5 	.word	0x0000acc5
    b2ec:	20000018 	.word	0x20000018
    b2f0:	200026dc 	.word	0x200026dc
    b2f4:	200026c8 	.word	0x200026c8
    b2f8:	20002664 	.word	0x20002664
    b2fc:	200026e0 	.word	0x200026e0
    b300:	0000aa95 	.word	0x0000aa95
    b304:	200026c5 	.word	0x200026c5
    b308:	0000933d 	.word	0x0000933d

0000b30c <MiApp_ConnectionMode>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    b30c:	b510      	push	{r4, lr}
    if( Mode > 3 )
    b30e:	2803      	cmp	r0, #3
    b310:	d900      	bls.n	b314 <MiApp_ConnectionMode+0x8>
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    b312:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    b314:	4b06      	ldr	r3, [pc, #24]	; (b330 <MiApp_ConnectionMode+0x24>)
    b316:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b318:	4a06      	ldr	r2, [pc, #24]	; (b334 <MiApp_ConnectionMode+0x28>)
    b31a:	7811      	ldrb	r1, [r2, #0]
    b31c:	230f      	movs	r3, #15
    b31e:	400b      	ands	r3, r1
    b320:	0100      	lsls	r0, r0, #4
    b322:	4318      	orrs	r0, r3
    b324:	7010      	strb	r0, [r2, #0]
		PDS_Store(PDS_CONNECTION_MODE_ID);
    b326:	2004      	movs	r0, #4
    b328:	4b03      	ldr	r3, [pc, #12]	; (b338 <MiApp_ConnectionMode+0x2c>)
    b32a:	4798      	blx	r3
    b32c:	e7f1      	b.n	b312 <MiApp_ConnectionMode+0x6>
    b32e:	46c0      	nop			; (mov r8, r8)
    b330:	20000018 	.word	0x20000018
    b334:	200026b5 	.word	0x200026b5
    b338:	0000933d 	.word	0x0000933d

0000b33c <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    b33c:	2800      	cmp	r0, #0
    b33e:	d003      	beq.n	b348 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    b340:	4b02      	ldr	r3, [pc, #8]	; (b34c <MiApp_SubscribeDataIndicationCallback+0x10>)
    b342:	6018      	str	r0, [r3, #0]
        return true;
    b344:	2001      	movs	r0, #1
    }
    return false;
}
    b346:	4770      	bx	lr
    return false;
    b348:	2000      	movs	r0, #0
    b34a:	e7fc      	b.n	b346 <MiApp_SubscribeDataIndicationCallback+0xa>
    b34c:	200002a8 	.word	0x200002a8

0000b350 <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    b350:	b5f0      	push	{r4, r5, r6, r7, lr}
    b352:	46ce      	mov	lr, r9
    b354:	4647      	mov	r7, r8
    b356:	b580      	push	{r7, lr}
    b358:	b087      	sub	sp, #28
    b35a:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    b35c:	ab04      	add	r3, sp, #16
    b35e:	1dde      	adds	r6, r3, #7
    b360:	2300      	movs	r3, #0
    b362:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    b364:	aa04      	add	r2, sp, #16
    b366:	1d97      	adds	r7, r2, #6
    b368:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    b36a:	ad05      	add	r5, sp, #20
    b36c:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    b36e:	3303      	adds	r3, #3
    b370:	4694      	mov	ip, r2
    b372:	4463      	add	r3, ip
    b374:	4699      	mov	r9, r3
    b376:	2300      	movs	r3, #0
    b378:	464a      	mov	r2, r9
    b37a:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    b37c:	0031      	movs	r1, r6
    b37e:	2016      	movs	r0, #22
    b380:	4c39      	ldr	r4, [pc, #228]	; (b468 <calculate_ToA+0x118>)
    b382:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    b384:	0029      	movs	r1, r5
    b386:	2003      	movs	r0, #3
    b388:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    b38a:	4649      	mov	r1, r9
    b38c:	2014      	movs	r0, #20
    b38e:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    b390:	0039      	movs	r1, r7
    b392:	200b      	movs	r0, #11
    b394:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    b396:	7836      	ldrb	r6, [r6, #0]
    b398:	2001      	movs	r0, #1
    b39a:	40b0      	lsls	r0, r6
    b39c:	4b33      	ldr	r3, [pc, #204]	; (b46c <calculate_ToA+0x11c>)
    b39e:	4798      	blx	r3
    b3a0:	1c01      	adds	r1, r0, #0
    b3a2:	4c33      	ldr	r4, [pc, #204]	; (b470 <calculate_ToA+0x120>)
    b3a4:	4833      	ldr	r0, [pc, #204]	; (b474 <calculate_ToA+0x124>)
    b3a6:	47a0      	blx	r4
    b3a8:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    b3aa:	4833      	ldr	r0, [pc, #204]	; (b478 <calculate_ToA+0x128>)
    b3ac:	47a0      	blx	r4
    b3ae:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    b3b0:	8828      	ldrh	r0, [r5, #0]
    b3b2:	4b32      	ldr	r3, [pc, #200]	; (b47c <calculate_ToA+0x12c>)
    b3b4:	4798      	blx	r3
    b3b6:	2200      	movs	r2, #0
    b3b8:	4b31      	ldr	r3, [pc, #196]	; (b480 <calculate_ToA+0x130>)
    b3ba:	4d32      	ldr	r5, [pc, #200]	; (b484 <calculate_ToA+0x134>)
    b3bc:	47a8      	blx	r5
    b3be:	9000      	str	r0, [sp, #0]
    b3c0:	9101      	str	r1, [sp, #4]
    b3c2:	1c20      	adds	r0, r4, #0
    b3c4:	4b30      	ldr	r3, [pc, #192]	; (b488 <calculate_ToA+0x138>)
    b3c6:	4798      	blx	r3
    b3c8:	0002      	movs	r2, r0
    b3ca:	000b      	movs	r3, r1
    b3cc:	9800      	ldr	r0, [sp, #0]
    b3ce:	9901      	ldr	r1, [sp, #4]
    b3d0:	4d2e      	ldr	r5, [pc, #184]	; (b48c <calculate_ToA+0x13c>)
    b3d2:	47a8      	blx	r5
    b3d4:	4b2e      	ldr	r3, [pc, #184]	; (b490 <calculate_ToA+0x140>)
    b3d6:	4798      	blx	r3
    b3d8:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    b3da:	2e0c      	cmp	r6, #12
    b3dc:	d040      	beq.n	b460 <calculate_ToA+0x110>
    b3de:	0033      	movs	r3, r6
    b3e0:	3b0b      	subs	r3, #11
    b3e2:	425a      	negs	r2, r3
    b3e4:	4153      	adcs	r3, r2
    b3e6:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    b3e8:	005b      	lsls	r3, r3, #1
    b3ea:	1af3      	subs	r3, r6, r3
    b3ec:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b3ee:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    b3f0:	4643      	mov	r3, r8
    b3f2:	0058      	lsls	r0, r3, #1
    b3f4:	1b80      	subs	r0, r0, r6
    b3f6:	3007      	adds	r0, #7
    b3f8:	ab04      	add	r3, sp, #16
    b3fa:	3303      	adds	r3, #3
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	009b      	lsls	r3, r3, #2
    b400:	18c0      	adds	r0, r0, r3
    b402:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b404:	b280      	uxth	r0, r0
    b406:	19c0      	adds	r0, r0, r7
    b408:	4d1c      	ldr	r5, [pc, #112]	; (b47c <calculate_ToA+0x12c>)
    b40a:	47a8      	blx	r5
    b40c:	2200      	movs	r2, #0
    b40e:	4b21      	ldr	r3, [pc, #132]	; (b494 <calculate_ToA+0x144>)
    b410:	4e21      	ldr	r6, [pc, #132]	; (b498 <calculate_ToA+0x148>)
    b412:	47b0      	blx	r6
    b414:	9002      	str	r0, [sp, #8]
    b416:	9103      	str	r1, [sp, #12]
    b418:	0038      	movs	r0, r7
    b41a:	47a8      	blx	r5
    b41c:	0002      	movs	r2, r0
    b41e:	000b      	movs	r3, r1
    b420:	9802      	ldr	r0, [sp, #8]
    b422:	9903      	ldr	r1, [sp, #12]
    b424:	4e1d      	ldr	r6, [pc, #116]	; (b49c <calculate_ToA+0x14c>)
    b426:	47b0      	blx	r6
    b428:	4b1d      	ldr	r3, [pc, #116]	; (b4a0 <calculate_ToA+0x150>)
    b42a:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    b42c:	b282      	uxth	r2, r0
    b42e:	ab04      	add	r3, sp, #16
    b430:	7998      	ldrb	r0, [r3, #6]
    b432:	3004      	adds	r0, #4
    b434:	4350      	muls	r0, r2
    b436:	2800      	cmp	r0, #0
    b438:	dd14      	ble.n	b464 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    b43a:	4b0c      	ldr	r3, [pc, #48]	; (b46c <calculate_ToA+0x11c>)
    b43c:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    b43e:	4e19      	ldr	r6, [pc, #100]	; (b4a4 <calculate_ToA+0x154>)
    b440:	2182      	movs	r1, #130	; 0x82
    b442:	05c9      	lsls	r1, r1, #23
    b444:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    b446:	1c21      	adds	r1, r4, #0
    b448:	4b17      	ldr	r3, [pc, #92]	; (b4a8 <calculate_ToA+0x158>)
    b44a:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    b44c:	9900      	ldr	r1, [sp, #0]
    b44e:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    b450:	4b16      	ldr	r3, [pc, #88]	; (b4ac <calculate_ToA+0x15c>)
    b452:	4798      	blx	r3
    b454:	b280      	uxth	r0, r0
    b456:	b007      	add	sp, #28
    b458:	bc0c      	pop	{r2, r3}
    b45a:	4690      	mov	r8, r2
    b45c:	4699      	mov	r9, r3
    b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    b460:	2301      	movs	r3, #1
    b462:	e7c1      	b.n	b3e8 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    b464:	2000      	movs	r0, #0
    b466:	e7ea      	b.n	b43e <calculate_ToA+0xee>
    b468:	0000e175 	.word	0x0000e175
    b46c:	000147ed 	.word	0x000147ed
    b470:	00013e55 	.word	0x00013e55
    b474:	47f42400 	.word	0x47f42400
    b478:	447a0000 	.word	0x447a0000
    b47c:	00016335 	.word	0x00016335
    b480:	40110000 	.word	0x40110000
    b484:	00014919 	.word	0x00014919
    b488:	00016429 	.word	0x00016429
    b48c:	000157a1 	.word	0x000157a1
    b490:	000164cd 	.word	0x000164cd
    b494:	3ff00000 	.word	0x3ff00000
    b498:	00015ca1 	.word	0x00015ca1
    b49c:	00014f39 	.word	0x00014f39
    b4a0:	00013935 	.word	0x00013935
    b4a4:	00013b31 	.word	0x00013b31
    b4a8:	00014235 	.word	0x00014235
    b4ac:	00013905 	.word	0x00013905

0000b4b0 <P2PTasks>:
{
    b4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4b2:	46de      	mov	lr, fp
    b4b4:	4657      	mov	r7, sl
    b4b6:	464e      	mov	r6, r9
    b4b8:	4645      	mov	r5, r8
    b4ba:	b5e0      	push	{r5, r6, r7, lr}
    b4bc:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    b4be:	4bc9      	ldr	r3, [pc, #804]	; (b7e4 <P2PTasks+0x334>)
    b4c0:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    b4c2:	4bc9      	ldr	r3, [pc, #804]	; (b7e8 <P2PTasks+0x338>)
    b4c4:	7b9b      	ldrb	r3, [r3, #14]
    b4c6:	07db      	lsls	r3, r3, #31
    b4c8:	d500      	bpl.n	b4cc <P2PTasks+0x1c>
    b4ca:	e083      	b.n	b5d4 <P2PTasks+0x124>
    b4cc:	2391      	movs	r3, #145	; 0x91
    b4ce:	005b      	lsls	r3, r3, #1
    b4d0:	4ac5      	ldr	r2, [pc, #788]	; (b7e8 <P2PTasks+0x338>)
    b4d2:	5cd3      	ldrb	r3, [r2, r3]
    b4d4:	07db      	lsls	r3, r3, #31
    b4d6:	d500      	bpl.n	b4da <P2PTasks+0x2a>
    b4d8:	e094      	b.n	b604 <P2PTasks+0x154>
        if( P2PStatus.bits.SaveConnection )
    b4da:	4bc4      	ldr	r3, [pc, #784]	; (b7ec <P2PTasks+0x33c>)
    b4dc:	781b      	ldrb	r3, [r3, #0]
    b4de:	079b      	lsls	r3, r3, #30
    b4e0:	d500      	bpl.n	b4e4 <P2PTasks+0x34>
    b4e2:	e0aa      	b.n	b63a <P2PTasks+0x18a>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    b4e4:	2016      	movs	r0, #22
    b4e6:	4bc2      	ldr	r3, [pc, #776]	; (b7f0 <P2PTasks+0x340>)
    b4e8:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    b4ea:	23fa      	movs	r3, #250	; 0xfa
    b4ec:	009b      	lsls	r3, r3, #2
    b4ee:	4358      	muls	r0, r3
    b4f0:	4bc0      	ldr	r3, [pc, #768]	; (b7f4 <P2PTasks+0x344>)
    b4f2:	469c      	mov	ip, r3
    b4f4:	4460      	add	r0, ip
    b4f6:	4bc0      	ldr	r3, [pc, #768]	; (b7f8 <P2PTasks+0x348>)
    b4f8:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    b4fa:	4bc0      	ldr	r3, [pc, #768]	; (b7fc <P2PTasks+0x34c>)
    b4fc:	781b      	ldrb	r3, [r3, #0]
    b4fe:	2b00      	cmp	r3, #0
    b500:	d004      	beq.n	b50c <P2PTasks+0x5c>
    b502:	4bbf      	ldr	r3, [pc, #764]	; (b800 <P2PTasks+0x350>)
    b504:	681b      	ldr	r3, [r3, #0]
    b506:	2b00      	cmp	r3, #0
    b508:	d000      	beq.n	b50c <P2PTasks+0x5c>
    b50a:	e0ac      	b.n	b666 <P2PTasks+0x1b6>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b50c:	4bb7      	ldr	r3, [pc, #732]	; (b7ec <P2PTasks+0x33c>)
    b50e:	781b      	ldrb	r3, [r3, #0]
    b510:	071b      	lsls	r3, r3, #28
    b512:	d500      	bpl.n	b516 <P2PTasks+0x66>
    b514:	e38c      	b.n	bc30 <P2PTasks+0x780>
    b516:	4bbb      	ldr	r3, [pc, #748]	; (b804 <P2PTasks+0x354>)
    b518:	4798      	blx	r3
    b51a:	2800      	cmp	r0, #0
    b51c:	d100      	bne.n	b520 <P2PTasks+0x70>
    b51e:	e387      	b.n	bc30 <P2PTasks+0x780>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    b520:	2200      	movs	r2, #0
    b522:	4bb9      	ldr	r3, [pc, #740]	; (b808 <P2PTasks+0x358>)
    b524:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    b526:	4bb9      	ldr	r3, [pc, #740]	; (b80c <P2PTasks+0x35c>)
    b528:	7819      	ldrb	r1, [r3, #0]
    b52a:	074b      	lsls	r3, r1, #29
    b52c:	0fdb      	lsrs	r3, r3, #31
    b52e:	4ab8      	ldr	r2, [pc, #736]	; (b810 <P2PTasks+0x360>)
    b530:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    b532:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    b534:	08cc      	lsrs	r4, r1, #3
    b536:	2001      	movs	r0, #1
    b538:	4004      	ands	r4, r0
    b53a:	00e4      	lsls	r4, r4, #3
    b53c:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    b53e:	400a      	ands	r2, r1
    b540:	3a01      	subs	r2, #1
    b542:	4255      	negs	r5, r2
    b544:	416a      	adcs	r2, r5
    b546:	4002      	ands	r2, r0
    b548:	0152      	lsls	r2, r2, #5
    b54a:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    b54c:	09cc      	lsrs	r4, r1, #7
    b54e:	4020      	ands	r0, r4
    b550:	0180      	lsls	r0, r0, #6
    b552:	4313      	orrs	r3, r2
    b554:	4303      	orrs	r3, r0
    b556:	4aaf      	ldr	r2, [pc, #700]	; (b814 <P2PTasks+0x364>)
    b558:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    b55a:	b249      	sxtb	r1, r1
    b55c:	2900      	cmp	r1, #0
    b55e:	da00      	bge.n	b562 <P2PTasks+0xb2>
    b560:	e097      	b.n	b692 <P2PTasks+0x1e2>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    b562:	4aaa      	ldr	r2, [pc, #680]	; (b80c <P2PTasks+0x35c>)
    b564:	8a17      	ldrh	r7, [r2, #16]
    b566:	4bab      	ldr	r3, [pc, #684]	; (b814 <P2PTasks+0x364>)
    b568:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    b56a:	7b11      	ldrb	r1, [r2, #12]
    b56c:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    b56e:	6895      	ldr	r5, [r2, #8]
    b570:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    b572:	7b90      	ldrb	r0, [r2, #14]
    b574:	4680      	mov	r8, r0
    b576:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    b578:	7b52      	ldrb	r2, [r2, #13]
    b57a:	4691      	mov	r9, r2
    b57c:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    b57e:	781b      	ldrb	r3, [r3, #0]
    b580:	069b      	lsls	r3, r3, #26
    b582:	d400      	bmi.n	b586 <P2PTasks+0xd6>
    b584:	e332      	b.n	bbec <P2PTasks+0x73c>
            switch( rxMessage.Payload[0] )
    b586:	782b      	ldrb	r3, [r5, #0]
    b588:	b2da      	uxtb	r2, r3
    b58a:	2a83      	cmp	r2, #131	; 0x83
    b58c:	d100      	bne.n	b590 <P2PTasks+0xe0>
    b58e:	e293      	b.n	bab8 <P2PTasks+0x608>
    b590:	d800      	bhi.n	b594 <P2PTasks+0xe4>
    b592:	e083      	b.n	b69c <P2PTasks+0x1ec>
    b594:	b2da      	uxtb	r2, r3
    b596:	2a91      	cmp	r2, #145	; 0x91
    b598:	d100      	bne.n	b59c <P2PTasks+0xec>
    b59a:	e1e6      	b.n	b96a <P2PTasks+0x4ba>
    b59c:	d800      	bhi.n	b5a0 <P2PTasks+0xf0>
    b59e:	e094      	b.n	b6ca <P2PTasks+0x21a>
    b5a0:	b2da      	uxtb	r2, r3
    b5a2:	2a92      	cmp	r2, #146	; 0x92
    b5a4:	d100      	bne.n	b5a8 <P2PTasks+0xf8>
    b5a6:	e25e      	b.n	ba66 <P2PTasks+0x5b6>
    b5a8:	2a97      	cmp	r2, #151	; 0x97
    b5aa:	d17e      	bne.n	b6aa <P2PTasks+0x1fa>
                            if( P2PStatus.bits.Resync )
    b5ac:	4b8f      	ldr	r3, [pc, #572]	; (b7ec <P2PTasks+0x33c>)
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	069b      	lsls	r3, r3, #26
    b5b2:	d500      	bpl.n	b5b6 <P2PTasks+0x106>
    b5b4:	e215      	b.n	b9e2 <P2PTasks+0x532>
                                    for(; i < ActiveScanResultIndex; i++)
    b5b6:	4b98      	ldr	r3, [pc, #608]	; (b818 <P2PTasks+0x368>)
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	469a      	mov	sl, r3
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d100      	bne.n	b5c2 <P2PTasks+0x112>
    b5c0:	e22c      	b.n	ba1c <P2PTasks+0x56c>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b5c2:	4b96      	ldr	r3, [pc, #600]	; (b81c <P2PTasks+0x36c>)
    b5c4:	781b      	ldrb	r3, [r3, #0]
    b5c6:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b5c8:	4b92      	ldr	r3, [pc, #584]	; (b814 <P2PTasks+0x364>)
    b5ca:	685b      	ldr	r3, [r3, #4]
    b5cc:	9306      	str	r3, [sp, #24]
    b5ce:	4e94      	ldr	r6, [pc, #592]	; (b820 <P2PTasks+0x370>)
    b5d0:	2400      	movs	r4, #0
    b5d2:	e213      	b.n	b9fc <P2PTasks+0x54c>
                tmpTick.Val = MiWi_TickGet();
    b5d4:	4b93      	ldr	r3, [pc, #588]	; (b824 <P2PTasks+0x374>)
    b5d6:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b5d8:	4b83      	ldr	r3, [pc, #524]	; (b7e8 <P2PTasks+0x338>)
    b5da:	6819      	ldr	r1, [r3, #0]
    b5dc:	4b92      	ldr	r3, [pc, #584]	; (b828 <P2PTasks+0x378>)
    b5de:	4798      	blx	r3
    b5e0:	4b92      	ldr	r3, [pc, #584]	; (b82c <P2PTasks+0x37c>)
    b5e2:	4298      	cmp	r0, r3
    b5e4:	d800      	bhi.n	b5e8 <P2PTasks+0x138>
    b5e6:	e771      	b.n	b4cc <P2PTasks+0x1c>
                    indirectMessages[i].flags.Val = 0x00;   
    b5e8:	4b7f      	ldr	r3, [pc, #508]	; (b7e8 <P2PTasks+0x338>)
    b5ea:	2200      	movs	r2, #0
    b5ec:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b5ee:	001a      	movs	r2, r3
    b5f0:	3210      	adds	r2, #16
    b5f2:	2110      	movs	r1, #16
    b5f4:	31ff      	adds	r1, #255	; 0xff
    b5f6:	5c58      	ldrb	r0, [r3, r1]
    b5f8:	3101      	adds	r1, #1
    b5fa:	585b      	ldr	r3, [r3, r1]
    b5fc:	390c      	subs	r1, #12
    b5fe:	39ff      	subs	r1, #255	; 0xff
    b600:	4798      	blx	r3
    b602:	e763      	b.n	b4cc <P2PTasks+0x1c>
                tmpTick.Val = MiWi_TickGet();
    b604:	4b87      	ldr	r3, [pc, #540]	; (b824 <P2PTasks+0x374>)
    b606:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b608:	238a      	movs	r3, #138	; 0x8a
    b60a:	005b      	lsls	r3, r3, #1
    b60c:	4a76      	ldr	r2, [pc, #472]	; (b7e8 <P2PTasks+0x338>)
    b60e:	58d1      	ldr	r1, [r2, r3]
    b610:	4b85      	ldr	r3, [pc, #532]	; (b828 <P2PTasks+0x378>)
    b612:	4798      	blx	r3
    b614:	4b85      	ldr	r3, [pc, #532]	; (b82c <P2PTasks+0x37c>)
    b616:	4298      	cmp	r0, r3
    b618:	d800      	bhi.n	b61c <P2PTasks+0x16c>
    b61a:	e75e      	b.n	b4da <P2PTasks+0x2a>
                    indirectMessages[i].flags.Val = 0x00;   
    b61c:	4b72      	ldr	r3, [pc, #456]	; (b7e8 <P2PTasks+0x338>)
    b61e:	2100      	movs	r1, #0
    b620:	2291      	movs	r2, #145	; 0x91
    b622:	0052      	lsls	r2, r2, #1
    b624:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b626:	001a      	movs	r2, r3
    b628:	3225      	adds	r2, #37	; 0x25
    b62a:	32ff      	adds	r2, #255	; 0xff
    b62c:	4980      	ldr	r1, [pc, #512]	; (b830 <P2PTasks+0x380>)
    b62e:	5c58      	ldrb	r0, [r3, r1]
    b630:	3101      	adds	r1, #1
    b632:	585b      	ldr	r3, [r3, r1]
    b634:	2105      	movs	r1, #5
    b636:	4798      	blx	r3
    b638:	e74f      	b.n	b4da <P2PTasks+0x2a>
            tmpTick.Val = MiWi_TickGet();
    b63a:	4b7a      	ldr	r3, [pc, #488]	; (b824 <P2PTasks+0x374>)
    b63c:	4798      	blx	r3
            if( MiWi_TickGetDiff(tmpTick, nvmDelayTick) > (ONE_SECOND) )
    b63e:	4b7d      	ldr	r3, [pc, #500]	; (b834 <P2PTasks+0x384>)
    b640:	6819      	ldr	r1, [r3, #0]
    b642:	4b79      	ldr	r3, [pc, #484]	; (b828 <P2PTasks+0x378>)
    b644:	4798      	blx	r3
    b646:	4b7c      	ldr	r3, [pc, #496]	; (b838 <P2PTasks+0x388>)
    b648:	4298      	cmp	r0, r3
    b64a:	d800      	bhi.n	b64e <P2PTasks+0x19e>
    b64c:	e74a      	b.n	b4e4 <P2PTasks+0x34>
                P2PStatus.bits.SaveConnection = 0;
    b64e:	4a67      	ldr	r2, [pc, #412]	; (b7ec <P2PTasks+0x33c>)
    b650:	7813      	ldrb	r3, [r2, #0]
    b652:	2102      	movs	r1, #2
    b654:	438b      	bics	r3, r1
    b656:	7013      	strb	r3, [r2, #0]
				PDS_Store(PDS_CONNECTION_TABLE_ID);
    b658:	2005      	movs	r0, #5
    b65a:	4b78      	ldr	r3, [pc, #480]	; (b83c <P2PTasks+0x38c>)
    b65c:	4798      	blx	r3
                printf("\r\nSave Connection\r\n");
    b65e:	4878      	ldr	r0, [pc, #480]	; (b840 <P2PTasks+0x390>)
    b660:	4b78      	ldr	r3, [pc, #480]	; (b844 <P2PTasks+0x394>)
    b662:	4798      	blx	r3
    b664:	e73e      	b.n	b4e4 <P2PTasks+0x34>
		tmpTick.Val = MiWi_TickGet();
    b666:	4b6f      	ldr	r3, [pc, #444]	; (b824 <P2PTasks+0x374>)
    b668:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    b66a:	4b65      	ldr	r3, [pc, #404]	; (b800 <P2PTasks+0x350>)
    b66c:	6819      	ldr	r1, [r3, #0]
    b66e:	4b6e      	ldr	r3, [pc, #440]	; (b828 <P2PTasks+0x378>)
    b670:	4798      	blx	r3
    b672:	4b61      	ldr	r3, [pc, #388]	; (b7f8 <P2PTasks+0x348>)
    b674:	681b      	ldr	r3, [r3, #0]
    b676:	4298      	cmp	r0, r3
    b678:	d800      	bhi.n	b67c <P2PTasks+0x1cc>
    b67a:	e747      	b.n	b50c <P2PTasks+0x5c>
			DataTxAckTimer.Val =0;
    b67c:	2300      	movs	r3, #0
    b67e:	4a60      	ldr	r2, [pc, #384]	; (b800 <P2PTasks+0x350>)
    b680:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    b682:	4a5e      	ldr	r2, [pc, #376]	; (b7fc <P2PTasks+0x34c>)
    b684:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    b686:	4b70      	ldr	r3, [pc, #448]	; (b848 <P2PTasks+0x398>)
    b688:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    b68a:	4870      	ldr	r0, [pc, #448]	; (b84c <P2PTasks+0x39c>)
    b68c:	4b6d      	ldr	r3, [pc, #436]	; (b844 <P2PTasks+0x394>)
    b68e:	4798      	blx	r3
    b690:	e73c      	b.n	b50c <P2PTasks+0x5c>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    b692:	4b5e      	ldr	r3, [pc, #376]	; (b80c <P2PTasks+0x35c>)
    b694:	685a      	ldr	r2, [r3, #4]
    b696:	4b5f      	ldr	r3, [pc, #380]	; (b814 <P2PTasks+0x364>)
    b698:	605a      	str	r2, [r3, #4]
    b69a:	e762      	b.n	b562 <P2PTasks+0xb2>
            switch( rxMessage.Payload[0] )
    b69c:	2a81      	cmp	r2, #129	; 0x81
    b69e:	d024      	beq.n	b6ea <P2PTasks+0x23a>
    b6a0:	d900      	bls.n	b6a4 <P2PTasks+0x1f4>
    b6a2:	e127      	b.n	b8f4 <P2PTasks+0x444>
    b6a4:	2b04      	cmp	r3, #4
    b6a6:	d100      	bne.n	b6aa <P2PTasks+0x1fa>
    b6a8:	e206      	b.n	bab8 <P2PTasks+0x608>
                    P2PStatus.bits.RxHasUserData = 1;
    b6aa:	4c50      	ldr	r4, [pc, #320]	; (b7ec <P2PTasks+0x33c>)
    b6ac:	7823      	ldrb	r3, [r4, #0]
    b6ae:	2208      	movs	r2, #8
    b6b0:	4313      	orrs	r3, r2
    b6b2:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    b6b4:	4b66      	ldr	r3, [pc, #408]	; (b850 <P2PTasks+0x3a0>)
    b6b6:	681b      	ldr	r3, [r3, #0]
    b6b8:	4856      	ldr	r0, [pc, #344]	; (b814 <P2PTasks+0x364>)
    b6ba:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    b6bc:	7823      	ldrb	r3, [r4, #0]
    b6be:	2208      	movs	r2, #8
    b6c0:	4393      	bics	r3, r2
    b6c2:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    b6c4:	4b63      	ldr	r3, [pc, #396]	; (b854 <P2PTasks+0x3a4>)
    b6c6:	4798      	blx	r3
                    break;
    b6c8:	e29f      	b.n	bc0a <P2PTasks+0x75a>
            switch( rxMessage.Payload[0] )
    b6ca:	2a87      	cmp	r2, #135	; 0x87
    b6cc:	d1ed      	bne.n	b6aa <P2PTasks+0x1fa>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    b6ce:	4b62      	ldr	r3, [pc, #392]	; (b858 <P2PTasks+0x3a8>)
    b6d0:	781b      	ldrb	r3, [r3, #0]
    b6d2:	2b02      	cmp	r3, #2
    b6d4:	d900      	bls.n	b6d8 <P2PTasks+0x228>
    b6d6:	e082      	b.n	b7de <P2PTasks+0x32e>
                            if( currentChannel != rxMessage.Payload[1] )
    b6d8:	786a      	ldrb	r2, [r5, #1]
    b6da:	4b50      	ldr	r3, [pc, #320]	; (b81c <P2PTasks+0x36c>)
    b6dc:	781b      	ldrb	r3, [r3, #0]
    b6de:	429a      	cmp	r2, r3
    b6e0:	d100      	bne.n	b6e4 <P2PTasks+0x234>
    b6e2:	e0d5      	b.n	b890 <P2PTasks+0x3e0>
                                MiMAC_DiscardPacket();
    b6e4:	4b5b      	ldr	r3, [pc, #364]	; (b854 <P2PTasks+0x3a4>)
    b6e6:	4798      	blx	r3
                                break;
    b6e8:	e28f      	b.n	bc0a <P2PTasks+0x75a>
                                if( currentChannel != rxMessage.Payload[1] )
    b6ea:	786a      	ldrb	r2, [r5, #1]
    b6ec:	4b4b      	ldr	r3, [pc, #300]	; (b81c <P2PTasks+0x36c>)
    b6ee:	781b      	ldrb	r3, [r3, #0]
    b6f0:	429a      	cmp	r2, r3
    b6f2:	d002      	beq.n	b6fa <P2PTasks+0x24a>
                                    MiMAC_DiscardPacket();
    b6f4:	4b57      	ldr	r3, [pc, #348]	; (b854 <P2PTasks+0x3a4>)
    b6f6:	4798      	blx	r3
                                    break;
    b6f8:	e287      	b.n	bc0a <P2PTasks+0x75a>
                                if( ConnMode == DISABLE_ALL_CONN )
    b6fa:	4b57      	ldr	r3, [pc, #348]	; (b858 <P2PTasks+0x3a8>)
    b6fc:	781b      	ldrb	r3, [r3, #0]
    b6fe:	2b03      	cmp	r3, #3
    b700:	d04d      	beq.n	b79e <P2PTasks+0x2ee>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b702:	4b56      	ldr	r3, [pc, #344]	; (b85c <P2PTasks+0x3ac>)
    b704:	429f      	cmp	r7, r3
    b706:	d006      	beq.n	b716 <P2PTasks+0x266>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b708:	4b55      	ldr	r3, [pc, #340]	; (b860 <P2PTasks+0x3b0>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b70a:	881b      	ldrh	r3, [r3, #0]
    b70c:	42bb      	cmp	r3, r7
    b70e:	d002      	beq.n	b716 <P2PTasks+0x266>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b710:	2902      	cmp	r1, #2
    b712:	d900      	bls.n	b716 <P2PTasks+0x266>
    b714:	e295      	b.n	bc42 <P2PTasks+0x792>
                                    status = AddConnection();
    b716:	4b53      	ldr	r3, [pc, #332]	; (b864 <P2PTasks+0x3b4>)
    b718:	4798      	blx	r3
    b71a:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b71c:	4b4e      	ldr	r3, [pc, #312]	; (b858 <P2PTasks+0x3a8>)
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	2b01      	cmp	r3, #1
    b722:	d03f      	beq.n	b7a4 <P2PTasks+0x2f4>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b724:	20e0      	movs	r0, #224	; 0xe0
    b726:	4b50      	ldr	r3, [pc, #320]	; (b868 <P2PTasks+0x3b8>)
    b728:	4798      	blx	r3
    b72a:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b72c:	d100      	bne.n	b730 <P2PTasks+0x280>
    b72e:	e281      	b.n	bc34 <P2PTasks+0x784>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b730:	2391      	movs	r3, #145	; 0x91
    b732:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    b734:	7045      	strb	r5, [r0, #1]
    b736:	2702      	movs	r7, #2
                                if( status == STATUS_SUCCESS ||
    b738:	2d01      	cmp	r5, #1
    b73a:	d944      	bls.n	b7c6 <P2PTasks+0x316>
                                MiMAC_DiscardPacket();
    b73c:	4b45      	ldr	r3, [pc, #276]	; (b854 <P2PTasks+0x3a4>)
    b73e:	4798      	blx	r3
                                i = PHY_RandomReq();
    b740:	4b4a      	ldr	r3, [pc, #296]	; (b86c <P2PTasks+0x3bc>)
    b742:	4798      	blx	r3
    b744:	b2c6      	uxtb	r6, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b746:	2103      	movs	r1, #3
    b748:	0030      	movs	r0, r6
    b74a:	4b49      	ldr	r3, [pc, #292]	; (b870 <P2PTasks+0x3c0>)
    b74c:	4798      	blx	r3
    b74e:	b2c9      	uxtb	r1, r1
    b750:	2900      	cmp	r1, #0
    b752:	d040      	beq.n	b7d6 <P2PTasks+0x326>
    b754:	20fa      	movs	r0, #250	; 0xfa
    b756:	0080      	lsls	r0, r0, #2
    b758:	4370      	muls	r0, r6
    b75a:	2103      	movs	r1, #3
    b75c:	4b45      	ldr	r3, [pc, #276]	; (b874 <P2PTasks+0x3c4>)
    b75e:	4798      	blx	r3
    b760:	0008      	movs	r0, r1
    b762:	4b45      	ldr	r3, [pc, #276]	; (b878 <P2PTasks+0x3c8>)
    b764:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b766:	4b2b      	ldr	r3, [pc, #172]	; (b814 <P2PTasks+0x364>)
    b768:	685a      	ldr	r2, [r3, #4]
    b76a:	8859      	ldrh	r1, [r3, #2]
    b76c:	4843      	ldr	r0, [pc, #268]	; (b87c <P2PTasks+0x3cc>)
    b76e:	9005      	str	r0, [sp, #20]
    b770:	2001      	movs	r0, #1
    b772:	9004      	str	r0, [sp, #16]
    b774:	2000      	movs	r0, #0
    b776:	9003      	str	r0, [sp, #12]
    b778:	9402      	str	r4, [sp, #8]
    b77a:	9701      	str	r7, [sp, #4]
    b77c:	781b      	ldrb	r3, [r3, #0]
    b77e:	071b      	lsls	r3, r3, #28
    b780:	0fdb      	lsrs	r3, r3, #31
    b782:	9300      	str	r3, [sp, #0]
    b784:	2301      	movs	r3, #1
    b786:	4c3e      	ldr	r4, [pc, #248]	; (b880 <P2PTasks+0x3d0>)
    b788:	47a0      	blx	r4
								delay_ms (100);
    b78a:	2064      	movs	r0, #100	; 0x64
    b78c:	4b3a      	ldr	r3, [pc, #232]	; (b878 <P2PTasks+0x3c8>)
    b78e:	4798      	blx	r3
                                    if( status == STATUS_SUCCESS )
    b790:	2d00      	cmp	r5, #0
    b792:	d000      	beq.n	b796 <P2PTasks+0x2e6>
    b794:	e239      	b.n	bc0a <P2PTasks+0x75a>
										PDS_Store(PDS_CONNECTION_TABLE_ID);
    b796:	2005      	movs	r0, #5
    b798:	4b28      	ldr	r3, [pc, #160]	; (b83c <P2PTasks+0x38c>)
    b79a:	4798      	blx	r3
    b79c:	e235      	b.n	bc0a <P2PTasks+0x75a>
                                    MiMAC_DiscardPacket();
    b79e:	4b2d      	ldr	r3, [pc, #180]	; (b854 <P2PTasks+0x3a4>)
    b7a0:	4798      	blx	r3
                                    break;
    b7a2:	e232      	b.n	bc0a <P2PTasks+0x75a>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b7a4:	3801      	subs	r0, #1
    b7a6:	b2c0      	uxtb	r0, r0
    b7a8:	2801      	cmp	r0, #1
    b7aa:	d9bb      	bls.n	b724 <P2PTasks+0x274>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b7ac:	20e0      	movs	r0, #224	; 0xe0
    b7ae:	4b2e      	ldr	r3, [pc, #184]	; (b868 <P2PTasks+0x3b8>)
    b7b0:	4798      	blx	r3
    b7b2:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b7b4:	d100      	bne.n	b7b8 <P2PTasks+0x308>
    b7b6:	e23d      	b.n	bc34 <P2PTasks+0x784>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b7b8:	2391      	movs	r3, #145	; 0x91
    b7ba:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b7bc:	3362      	adds	r3, #98	; 0x62
    b7be:	7063      	strb	r3, [r4, #1]
                                    status = STATUS_NOT_PERMITTED;
    b7c0:	25f3      	movs	r5, #243	; 0xf3
                                dataPtr[dataLen++] = status;
    b7c2:	2702      	movs	r7, #2
    b7c4:	e7ba      	b.n	b73c <P2PTasks+0x28c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b7c6:	4b2f      	ldr	r3, [pc, #188]	; (b884 <P2PTasks+0x3d4>)
    b7c8:	781b      	ldrb	r3, [r3, #0]
    b7ca:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b7cc:	4b2e      	ldr	r3, [pc, #184]	; (b888 <P2PTasks+0x3d8>)
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	70c3      	strb	r3, [r0, #3]
    b7d2:	3702      	adds	r7, #2
    b7d4:	e7b2      	b.n	b73c <P2PTasks+0x28c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b7d6:	2001      	movs	r0, #1
    b7d8:	4b2c      	ldr	r3, [pc, #176]	; (b88c <P2PTasks+0x3dc>)
    b7da:	4798      	blx	r3
    b7dc:	e7c3      	b.n	b766 <P2PTasks+0x2b6>
                                MiMAC_DiscardPacket();
    b7de:	4b1d      	ldr	r3, [pc, #116]	; (b854 <P2PTasks+0x3a4>)
    b7e0:	4798      	blx	r3
                                break;
    b7e2:	e212      	b.n	bc0a <P2PTasks+0x75a>
    b7e4:	0000a5e1 	.word	0x0000a5e1
    b7e8:	200026e4 	.word	0x200026e4
    b7ec:	200026e0 	.word	0x200026e0
    b7f0:	0000b351 	.word	0x0000b351
    b7f4:	000c8708 	.word	0x000c8708
    b7f8:	200002a0 	.word	0x200002a0
    b7fc:	2000028b 	.word	0x2000028b
    b800:	20002964 	.word	0x20002964
    b804:	00009ed1 	.word	0x00009ed1
    b808:	200026c6 	.word	0x200026c6
    b80c:	200026a0 	.word	0x200026a0
    b810:	200026c4 	.word	0x200026c4
    b814:	20002950 	.word	0x20002950
    b818:	20002960 	.word	0x20002960
    b81c:	20000019 	.word	0x20000019
    b820:	20002910 	.word	0x20002910
    b824:	0000bf25 	.word	0x0000bf25
    b828:	0000bf85 	.word	0x0000bf85
    b82c:	016e3600 	.word	0x016e3600
    b830:	00000223 	.word	0x00000223
    b834:	200026b8 	.word	0x200026b8
    b838:	000f4240 	.word	0x000f4240
    b83c:	0000933d 	.word	0x0000933d
    b840:	00018a1c 	.word	0x00018a1c
    b844:	00016dcd 	.word	0x00016dcd
    b848:	00009e8d 	.word	0x00009e8d
    b84c:	00018a30 	.word	0x00018a30
    b850:	200002a8 	.word	0x200002a8
    b854:	00009e51 	.word	0x00009e51
    b858:	20000018 	.word	0x20000018
    b85c:	0000ffff 	.word	0x0000ffff
    b860:	200026bc 	.word	0x200026bc
    b864:	0000b1e9 	.word	0x0000b1e9
    b868:	0000bce5 	.word	0x0000bce5
    b86c:	0000aa49 	.word	0x0000aa49
    b870:	000135a1 	.word	0x000135a1
    b874:	00013775 	.word	0x00013775
    b878:	0000453d 	.word	0x0000453d
    b87c:	0000aa85 	.word	0x0000aa85
    b880:	0000abf1 	.word	0x0000abf1
    b884:	200026b5 	.word	0x200026b5
    b888:	20000014 	.word	0x20000014
    b88c:	00004511 	.word	0x00004511
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    b890:	2010      	movs	r0, #16
    b892:	4bba      	ldr	r3, [pc, #744]	; (bb7c <P2PTasks+0x6cc>)
    b894:	4798      	blx	r3
    b896:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b898:	d100      	bne.n	b89c <P2PTasks+0x3ec>
    b89a:	e1cb      	b.n	bc34 <P2PTasks+0x784>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    b89c:	2397      	movs	r3, #151	; 0x97
    b89e:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    b8a0:	4bb7      	ldr	r3, [pc, #732]	; (bb80 <P2PTasks+0x6d0>)
    b8a2:	781b      	ldrb	r3, [r3, #0]
    b8a4:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    b8a6:	4bb7      	ldr	r3, [pc, #732]	; (bb84 <P2PTasks+0x6d4>)
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    b8ac:	4bb6      	ldr	r3, [pc, #728]	; (bb88 <P2PTasks+0x6d8>)
    b8ae:	4798      	blx	r3
							i = PHY_RandomReq();
    b8b0:	4bb6      	ldr	r3, [pc, #728]	; (bb8c <P2PTasks+0x6dc>)
    b8b2:	4798      	blx	r3
							delay_ms(i*100);
    b8b4:	b2c3      	uxtb	r3, r0
    b8b6:	2064      	movs	r0, #100	; 0x64
    b8b8:	4358      	muls	r0, r3
    b8ba:	2800      	cmp	r0, #0
    b8bc:	d016      	beq.n	b8ec <P2PTasks+0x43c>
    b8be:	4bb4      	ldr	r3, [pc, #720]	; (bb90 <P2PTasks+0x6e0>)
    b8c0:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b8c2:	4bb4      	ldr	r3, [pc, #720]	; (bb94 <P2PTasks+0x6e4>)
    b8c4:	685a      	ldr	r2, [r3, #4]
    b8c6:	8859      	ldrh	r1, [r3, #2]
    b8c8:	48b3      	ldr	r0, [pc, #716]	; (bb98 <P2PTasks+0x6e8>)
    b8ca:	9005      	str	r0, [sp, #20]
    b8cc:	2001      	movs	r0, #1
    b8ce:	9004      	str	r0, [sp, #16]
    b8d0:	2000      	movs	r0, #0
    b8d2:	9003      	str	r0, [sp, #12]
    b8d4:	9402      	str	r4, [sp, #8]
    b8d6:	3003      	adds	r0, #3
    b8d8:	9001      	str	r0, [sp, #4]
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	071b      	lsls	r3, r3, #28
    b8de:	0fdb      	lsrs	r3, r3, #31
    b8e0:	9300      	str	r3, [sp, #0]
    b8e2:	2301      	movs	r3, #1
    b8e4:	2000      	movs	r0, #0
    b8e6:	4cad      	ldr	r4, [pc, #692]	; (bb9c <P2PTasks+0x6ec>)
    b8e8:	47a0      	blx	r4
                        break;
    b8ea:	e18e      	b.n	bc0a <P2PTasks+0x75a>
							delay_ms(i*100);
    b8ec:	2001      	movs	r0, #1
    b8ee:	4bac      	ldr	r3, [pc, #688]	; (bba0 <P2PTasks+0x6f0>)
    b8f0:	4798      	blx	r3
    b8f2:	e7e6      	b.n	b8c2 <P2PTasks+0x412>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    b8f4:	2010      	movs	r0, #16
    b8f6:	4ba1      	ldr	r3, [pc, #644]	; (bb7c <P2PTasks+0x6cc>)
    b8f8:	4798      	blx	r3
    b8fa:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    b8fc:	2800      	cmp	r0, #0
    b8fe:	d100      	bne.n	b902 <P2PTasks+0x452>
    b900:	e198      	b.n	bc34 <P2PTasks+0x784>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b902:	2392      	movs	r3, #146	; 0x92
    b904:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b906:	4ba3      	ldr	r3, [pc, #652]	; (bb94 <P2PTasks+0x6e4>)
    b908:	685b      	ldr	r3, [r3, #4]
    b90a:	9307      	str	r3, [sp, #28]
    b90c:	4ea5      	ldr	r6, [pc, #660]	; (bba4 <P2PTasks+0x6f4>)
    b90e:	2400      	movs	r4, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b910:	2700      	movs	r7, #0
                                if( ConnectionTable[i].status.bits.isValid )
    b912:	0035      	movs	r5, r6
    b914:	e006      	b.n	b924 <P2PTasks+0x474>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b916:	3701      	adds	r7, #1
    b918:	b2ff      	uxtb	r7, r7
    b91a:	3401      	adds	r4, #1
    b91c:	360a      	adds	r6, #10
    b91e:	2f05      	cmp	r7, #5
    b920:	d100      	bne.n	b924 <P2PTasks+0x474>
    b922:	e195      	b.n	bc50 <P2PTasks+0x7a0>
                                if( ConnectionTable[i].status.bits.isValid )
    b924:	9406      	str	r4, [sp, #24]
    b926:	00a3      	lsls	r3, r4, #2
    b928:	191b      	adds	r3, r3, r4
    b92a:	005b      	lsls	r3, r3, #1
    b92c:	18eb      	adds	r3, r5, r3
    b92e:	7a1b      	ldrb	r3, [r3, #8]
    b930:	09db      	lsrs	r3, r3, #7
    b932:	d0f0      	beq.n	b916 <P2PTasks+0x466>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b934:	0031      	movs	r1, r6
    b936:	9807      	ldr	r0, [sp, #28]
    b938:	4b9b      	ldr	r3, [pc, #620]	; (bba8 <P2PTasks+0x6f8>)
    b93a:	4798      	blx	r3
    b93c:	2800      	cmp	r0, #0
    b93e:	d0ea      	beq.n	b916 <P2PTasks+0x466>
                                        ConnectionTable[i].status.Val = 0;
    b940:	9a06      	ldr	r2, [sp, #24]
    b942:	0093      	lsls	r3, r2, #2
    b944:	189d      	adds	r5, r3, r2
    b946:	006d      	lsls	r5, r5, #1
    b948:	4b96      	ldr	r3, [pc, #600]	; (bba4 <P2PTasks+0x6f4>)
    b94a:	195d      	adds	r5, r3, r5
    b94c:	2400      	movs	r4, #0
    b94e:	722c      	strb	r4, [r5, #8]
											PDS_Store(PDS_CONNECTION_TABLE_ID);
    b950:	2005      	movs	r0, #5
    b952:	4b96      	ldr	r3, [pc, #600]	; (bbac <P2PTasks+0x6fc>)
    b954:	4798      	blx	r3
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b956:	4643      	mov	r3, r8
    b958:	705c      	strb	r4, [r3, #1]
                            MiMAC_DiscardPacket();
    b95a:	4b8b      	ldr	r3, [pc, #556]	; (bb88 <P2PTasks+0x6d8>)
    b95c:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    b95e:	2f05      	cmp	r7, #5
    b960:	d001      	beq.n	b966 <P2PTasks+0x4b6>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b962:	3402      	adds	r4, #2
    b964:	e17b      	b.n	bc5e <P2PTasks+0x7ae>
    b966:	2302      	movs	r3, #2
    b968:	e175      	b.n	bc56 <P2PTasks+0x7a6>
                            switch( rxMessage.Payload[1] )
    b96a:	786b      	ldrb	r3, [r5, #1]
    b96c:	2b00      	cmp	r3, #0
    b96e:	d01d      	beq.n	b9ac <P2PTasks+0x4fc>
    b970:	2b01      	cmp	r3, #1
    b972:	d118      	bne.n	b9a6 <P2PTasks+0x4f6>
                                    if (EstConfCallback)
    b974:	4b8e      	ldr	r3, [pc, #568]	; (bbb0 <P2PTasks+0x700>)
    b976:	681b      	ldr	r3, [r3, #0]
    b978:	2b00      	cmp	r3, #0
    b97a:	d004      	beq.n	b986 <P2PTasks+0x4d6>
                                        EstConfCallback(ALREADY_EXISTS);
    b97c:	2006      	movs	r0, #6
    b97e:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b980:	2200      	movs	r2, #0
    b982:	4b8b      	ldr	r3, [pc, #556]	; (bbb0 <P2PTasks+0x700>)
    b984:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    b986:	4b8b      	ldr	r3, [pc, #556]	; (bbb4 <P2PTasks+0x704>)
    b988:	881a      	ldrh	r2, [r3, #0]
    b98a:	4b8b      	ldr	r3, [pc, #556]	; (bbb8 <P2PTasks+0x708>)
    b98c:	429a      	cmp	r2, r3
    b98e:	d017      	beq.n	b9c0 <P2PTasks+0x510>
                                    AddConnection();
    b990:	4b8a      	ldr	r3, [pc, #552]	; (bbbc <P2PTasks+0x70c>)
    b992:	4798      	blx	r3
                                        P2PStatus.bits.SaveConnection = 1;
    b994:	4a8a      	ldr	r2, [pc, #552]	; (bbc0 <P2PTasks+0x710>)
    b996:	7813      	ldrb	r3, [r2, #0]
    b998:	2102      	movs	r1, #2
    b99a:	430b      	orrs	r3, r1
    b99c:	7013      	strb	r3, [r2, #0]
                                        nvmDelayTick.Val = MiWi_TickGet();
    b99e:	4b89      	ldr	r3, [pc, #548]	; (bbc4 <P2PTasks+0x714>)
    b9a0:	4798      	blx	r3
    b9a2:	4b89      	ldr	r3, [pc, #548]	; (bbc8 <P2PTasks+0x718>)
    b9a4:	6018      	str	r0, [r3, #0]
                        MiMAC_DiscardPacket();
    b9a6:	4b78      	ldr	r3, [pc, #480]	; (bb88 <P2PTasks+0x6d8>)
    b9a8:	4798      	blx	r3
                        break; 
    b9aa:	e12e      	b.n	bc0a <P2PTasks+0x75a>
                                    if (EstConfCallback)
    b9ac:	4b80      	ldr	r3, [pc, #512]	; (bbb0 <P2PTasks+0x700>)
    b9ae:	681b      	ldr	r3, [r3, #0]
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	d0e8      	beq.n	b986 <P2PTasks+0x4d6>
                                        EstConfCallback(SUCCESS);
    b9b4:	2000      	movs	r0, #0
    b9b6:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b9b8:	2200      	movs	r2, #0
    b9ba:	4b7d      	ldr	r3, [pc, #500]	; (bbb0 <P2PTasks+0x700>)
    b9bc:	601a      	str	r2, [r3, #0]
    b9be:	e7e2      	b.n	b986 <P2PTasks+0x4d6>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    b9c0:	497c      	ldr	r1, [pc, #496]	; (bbb4 <P2PTasks+0x704>)
    b9c2:	4b74      	ldr	r3, [pc, #464]	; (bb94 <P2PTasks+0x6e4>)
    b9c4:	885b      	ldrh	r3, [r3, #2]
    b9c6:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    b9c8:	201e      	movs	r0, #30
    b9ca:	ab02      	add	r3, sp, #8
    b9cc:	469c      	mov	ip, r3
    b9ce:	4460      	add	r0, ip
    b9d0:	2301      	movs	r3, #1
    b9d2:	425b      	negs	r3, r3
    b9d4:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b9d6:	4b7d      	ldr	r3, [pc, #500]	; (bbcc <P2PTasks+0x71c>)
    b9d8:	4798      	blx	r3
												PDS_Store(PDS_PANID_ID);
    b9da:	2002      	movs	r0, #2
    b9dc:	4b73      	ldr	r3, [pc, #460]	; (bbac <P2PTasks+0x6fc>)
    b9de:	4798      	blx	r3
    b9e0:	e7d6      	b.n	b990 <P2PTasks+0x4e0>
                                P2PStatus.bits.Resync = 0;   
    b9e2:	4a77      	ldr	r2, [pc, #476]	; (bbc0 <P2PTasks+0x710>)
    b9e4:	7813      	ldrb	r3, [r2, #0]
    b9e6:	2120      	movs	r1, #32
    b9e8:	438b      	bics	r3, r1
    b9ea:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    b9ec:	4b66      	ldr	r3, [pc, #408]	; (bb88 <P2PTasks+0x6d8>)
    b9ee:	4798      	blx	r3
                        break;                
    b9f0:	e10b      	b.n	bc0a <P2PTasks+0x75a>
                                    for(; i < ActiveScanResultIndex; i++)
    b9f2:	3401      	adds	r4, #1
    b9f4:	b2e4      	uxtb	r4, r4
    b9f6:	3610      	adds	r6, #16
    b9f8:	4554      	cmp	r4, sl
    b9fa:	d00d      	beq.n	ba18 <P2PTasks+0x568>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b9fc:	7833      	ldrb	r3, [r6, #0]
    b9fe:	455b      	cmp	r3, fp
    ba00:	d1f7      	bne.n	b9f2 <P2PTasks+0x542>
    ba02:	8973      	ldrh	r3, [r6, #10]
    ba04:	42bb      	cmp	r3, r7
    ba06:	d1f4      	bne.n	b9f2 <P2PTasks+0x542>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    ba08:	1c70      	adds	r0, r6, #1
    ba0a:	9906      	ldr	r1, [sp, #24]
    ba0c:	4b66      	ldr	r3, [pc, #408]	; (bba8 <P2PTasks+0x6f8>)
    ba0e:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    ba10:	2800      	cmp	r0, #0
    ba12:	d0ee      	beq.n	b9f2 <P2PTasks+0x542>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    ba14:	45a2      	cmp	sl, r4
    ba16:	d1e9      	bne.n	b9ec <P2PTasks+0x53c>
    ba18:	2c03      	cmp	r4, #3
    ba1a:	d8e7      	bhi.n	b9ec <P2PTasks+0x53c>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    ba1c:	496c      	ldr	r1, [pc, #432]	; (bbd0 <P2PTasks+0x720>)
    ba1e:	4653      	mov	r3, sl
    ba20:	011b      	lsls	r3, r3, #4
    ba22:	4a6c      	ldr	r2, [pc, #432]	; (bbd4 <P2PTasks+0x724>)
    ba24:	7812      	ldrb	r2, [r2, #0]
    ba26:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    ba28:	18ca      	adds	r2, r1, r3
    ba2a:	4648      	mov	r0, r9
    ba2c:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    ba2e:	4640      	mov	r0, r8
    ba30:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    ba32:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    ba34:	4a57      	ldr	r2, [pc, #348]	; (bb94 <P2PTasks+0x6e4>)
    ba36:	6852      	ldr	r2, [r2, #4]
    ba38:	3301      	adds	r3, #1
    ba3a:	185b      	adds	r3, r3, r1
    ba3c:	0010      	movs	r0, r2
    ba3e:	3008      	adds	r0, #8
    ba40:	7811      	ldrb	r1, [r2, #0]
    ba42:	7019      	strb	r1, [r3, #0]
    ba44:	3201      	adds	r2, #1
    ba46:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    ba48:	4290      	cmp	r0, r2
    ba4a:	d1f9      	bne.n	ba40 <P2PTasks+0x590>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    ba4c:	786a      	ldrb	r2, [r5, #1]
    ba4e:	4653      	mov	r3, sl
    ba50:	0119      	lsls	r1, r3, #4
    ba52:	4b5f      	ldr	r3, [pc, #380]	; (bbd0 <P2PTasks+0x720>)
    ba54:	185b      	adds	r3, r3, r1
    ba56:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    ba58:	78aa      	ldrb	r2, [r5, #2]
    ba5a:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    ba5c:	4653      	mov	r3, sl
    ba5e:	3301      	adds	r3, #1
    ba60:	4a5d      	ldr	r2, [pc, #372]	; (bbd8 <P2PTasks+0x728>)
    ba62:	7013      	strb	r3, [r2, #0]
    ba64:	e7c2      	b.n	b9ec <P2PTasks+0x53c>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    ba66:	786b      	ldrb	r3, [r5, #1]
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d122      	bne.n	bab2 <P2PTasks+0x602>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ba6c:	4b49      	ldr	r3, [pc, #292]	; (bb94 <P2PTasks+0x6e4>)
    ba6e:	685e      	ldr	r6, [r3, #4]
    ba70:	4c4c      	ldr	r4, [pc, #304]	; (bba4 <P2PTasks+0x6f4>)
    ba72:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    ba74:	0025      	movs	r5, r4
    ba76:	e003      	b.n	ba80 <P2PTasks+0x5d0>
    ba78:	3701      	adds	r7, #1
    ba7a:	340a      	adds	r4, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    ba7c:	2f05      	cmp	r7, #5
    ba7e:	d018      	beq.n	bab2 <P2PTasks+0x602>
                                    if( ConnectionTable[i].status.bits.isValid )
    ba80:	9706      	str	r7, [sp, #24]
    ba82:	00bb      	lsls	r3, r7, #2
    ba84:	19db      	adds	r3, r3, r7
    ba86:	005b      	lsls	r3, r3, #1
    ba88:	18eb      	adds	r3, r5, r3
    ba8a:	7a1b      	ldrb	r3, [r3, #8]
    ba8c:	09db      	lsrs	r3, r3, #7
    ba8e:	d0f3      	beq.n	ba78 <P2PTasks+0x5c8>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ba90:	0021      	movs	r1, r4
    ba92:	0030      	movs	r0, r6
    ba94:	4b44      	ldr	r3, [pc, #272]	; (bba8 <P2PTasks+0x6f8>)
    ba96:	4798      	blx	r3
    ba98:	2800      	cmp	r0, #0
    ba9a:	d0ed      	beq.n	ba78 <P2PTasks+0x5c8>
                                            ConnectionTable[i].status.Val = 0;
    ba9c:	9a06      	ldr	r2, [sp, #24]
    ba9e:	0093      	lsls	r3, r2, #2
    baa0:	189c      	adds	r4, r3, r2
    baa2:	0064      	lsls	r4, r4, #1
    baa4:	4b3f      	ldr	r3, [pc, #252]	; (bba4 <P2PTasks+0x6f4>)
    baa6:	191c      	adds	r4, r3, r4
    baa8:	2300      	movs	r3, #0
    baaa:	7223      	strb	r3, [r4, #8]
												PDS_Store(PDS_CONNECTION_TABLE_ID);
    baac:	2005      	movs	r0, #5
    baae:	4b3f      	ldr	r3, [pc, #252]	; (bbac <P2PTasks+0x6fc>)
    bab0:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    bab2:	4b35      	ldr	r3, [pc, #212]	; (bb88 <P2PTasks+0x6d8>)
    bab4:	4798      	blx	r3
                        break;
    bab6:	e0a8      	b.n	bc0a <P2PTasks+0x75a>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    bab8:	20e0      	movs	r0, #224	; 0xe0
    baba:	4b30      	ldr	r3, [pc, #192]	; (bb7c <P2PTasks+0x6cc>)
    babc:	4798      	blx	r3
    babe:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    bac0:	d100      	bne.n	bac4 <P2PTasks+0x614>
    bac2:	e0b7      	b.n	bc34 <P2PTasks+0x784>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bac4:	4b33      	ldr	r3, [pc, #204]	; (bb94 <P2PTasks+0x6e4>)
    bac6:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    bac8:	4b44      	ldr	r3, [pc, #272]	; (bbdc <P2PTasks+0x72c>)
    baca:	7b9b      	ldrb	r3, [r3, #14]
    bacc:	07db      	lsls	r3, r3, #31
    bace:	d505      	bpl.n	badc <P2PTasks+0x62c>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bad0:	0029      	movs	r1, r5
    bad2:	4843      	ldr	r0, [pc, #268]	; (bbe0 <P2PTasks+0x730>)
    bad4:	4b34      	ldr	r3, [pc, #208]	; (bba8 <P2PTasks+0x6f8>)
    bad6:	4798      	blx	r3
    bad8:	2800      	cmp	r0, #0
    bada:	d11e      	bne.n	bb1a <P2PTasks+0x66a>
                                if( indirectMessages[i].flags.bits.isValid )
    badc:	2391      	movs	r3, #145	; 0x91
    bade:	005b      	lsls	r3, r3, #1
    bae0:	4a3e      	ldr	r2, [pc, #248]	; (bbdc <P2PTasks+0x72c>)
    bae2:	5cd3      	ldrb	r3, [r2, r3]
    bae4:	07db      	lsls	r3, r3, #31
    bae6:	d507      	bpl.n	baf8 <P2PTasks+0x648>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bae8:	0029      	movs	r1, r5
    baea:	483e      	ldr	r0, [pc, #248]	; (bbe4 <P2PTasks+0x734>)
    baec:	4b2e      	ldr	r3, [pc, #184]	; (bba8 <P2PTasks+0x6f8>)
    baee:	4798      	blx	r3
    baf0:	4a3c      	ldr	r2, [pc, #240]	; (bbe4 <P2PTasks+0x734>)
                                if( indirectMessages[i].flags.bits.isValid )
    baf2:	2601      	movs	r6, #1
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    baf4:	2800      	cmp	r0, #0
    baf6:	d112      	bne.n	bb1e <P2PTasks+0x66e>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    baf8:	4b26      	ldr	r3, [pc, #152]	; (bb94 <P2PTasks+0x6e4>)
    bafa:	8859      	ldrh	r1, [r3, #2]
    bafc:	4b3a      	ldr	r3, [pc, #232]	; (bbe8 <P2PTasks+0x738>)
    bafe:	9305      	str	r3, [sp, #20]
    bb00:	2300      	movs	r3, #0
    bb02:	9304      	str	r3, [sp, #16]
    bb04:	9303      	str	r3, [sp, #12]
    bb06:	9402      	str	r4, [sp, #8]
    bb08:	9301      	str	r3, [sp, #4]
    bb0a:	9300      	str	r3, [sp, #0]
    bb0c:	002a      	movs	r2, r5
    bb0e:	2000      	movs	r0, #0
    bb10:	4c22      	ldr	r4, [pc, #136]	; (bb9c <P2PTasks+0x6ec>)
    bb12:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    bb14:	4b1c      	ldr	r3, [pc, #112]	; (bb88 <P2PTasks+0x6d8>)
    bb16:	4798      	blx	r3
                        break;
    bb18:	e077      	b.n	bc0a <P2PTasks+0x75a>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bb1a:	4a31      	ldr	r2, [pc, #196]	; (bbe0 <P2PTasks+0x730>)
                                if( indirectMessages[i].flags.bits.isValid )
    bb1c:	2600      	movs	r6, #0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bb1e:	218a      	movs	r1, #138	; 0x8a
    bb20:	0049      	lsls	r1, r1, #1
    bb22:	4371      	muls	r1, r6
    bb24:	4b2d      	ldr	r3, [pc, #180]	; (bbdc <P2PTasks+0x72c>)
    bb26:	185b      	adds	r3, r3, r1
    bb28:	7bd8      	ldrb	r0, [r3, #15]
    bb2a:	2800      	cmp	r0, #0
    bb2c:	d00e      	beq.n	bb4c <P2PTasks+0x69c>
    bb2e:	2300      	movs	r3, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bb30:	0008      	movs	r0, r1
    bb32:	492a      	ldr	r1, [pc, #168]	; (bbdc <P2PTasks+0x72c>)
    bb34:	1809      	adds	r1, r1, r0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bb36:	000f      	movs	r7, r1
    bb38:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bb3a:	1c58      	adds	r0, r3, #1
    bb3c:	b2c0      	uxtb	r0, r0
    bb3e:	18cd      	adds	r5, r1, r3
    bb40:	7c2d      	ldrb	r5, [r5, #16]
    bb42:	54e5      	strb	r5, [r4, r3]
    bb44:	0003      	movs	r3, r0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bb46:	783d      	ldrb	r5, [r7, #0]
    bb48:	4285      	cmp	r5, r0
    bb4a:	d8f6      	bhi.n	bb3a <P2PTasks+0x68a>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    bb4c:	258a      	movs	r5, #138	; 0x8a
    bb4e:	006d      	lsls	r5, r5, #1
    bb50:	436e      	muls	r6, r5
    bb52:	4d22      	ldr	r5, [pc, #136]	; (bbdc <P2PTasks+0x72c>)
    bb54:	19ad      	adds	r5, r5, r6
    bb56:	88a9      	ldrh	r1, [r5, #4]
    bb58:	4b23      	ldr	r3, [pc, #140]	; (bbe8 <P2PTasks+0x738>)
    bb5a:	9305      	str	r3, [sp, #20]
    bb5c:	2600      	movs	r6, #0
    bb5e:	9604      	str	r6, [sp, #16]
    bb60:	9603      	str	r6, [sp, #12]
    bb62:	9402      	str	r4, [sp, #8]
    bb64:	9001      	str	r0, [sp, #4]
    bb66:	7bab      	ldrb	r3, [r5, #14]
    bb68:	071b      	lsls	r3, r3, #28
    bb6a:	0fdb      	lsrs	r3, r3, #31
    bb6c:	9300      	str	r3, [sp, #0]
    bb6e:	2300      	movs	r3, #0
    bb70:	2000      	movs	r0, #0
    bb72:	4c0a      	ldr	r4, [pc, #40]	; (bb9c <P2PTasks+0x6ec>)
    bb74:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    bb76:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    bb78:	e7cc      	b.n	bb14 <P2PTasks+0x664>
    bb7a:	46c0      	nop			; (mov r8, r8)
    bb7c:	0000bce5 	.word	0x0000bce5
    bb80:	200026b5 	.word	0x200026b5
    bb84:	20000014 	.word	0x20000014
    bb88:	00009e51 	.word	0x00009e51
    bb8c:	0000aa49 	.word	0x0000aa49
    bb90:	0000453d 	.word	0x0000453d
    bb94:	20002950 	.word	0x20002950
    bb98:	0000aa85 	.word	0x0000aa85
    bb9c:	0000abf1 	.word	0x0000abf1
    bba0:	00004511 	.word	0x00004511
    bba4:	20002668 	.word	0x20002668
    bba8:	0000acc5 	.word	0x0000acc5
    bbac:	0000933d 	.word	0x0000933d
    bbb0:	200026c0 	.word	0x200026c0
    bbb4:	200026bc 	.word	0x200026bc
    bbb8:	0000ffff 	.word	0x0000ffff
    bbbc:	0000b1e9 	.word	0x0000b1e9
    bbc0:	200026e0 	.word	0x200026e0
    bbc4:	0000bf25 	.word	0x0000bf25
    bbc8:	200026b8 	.word	0x200026b8
    bbcc:	000095d5 	.word	0x000095d5
    bbd0:	20002910 	.word	0x20002910
    bbd4:	20000019 	.word	0x20000019
    bbd8:	20002960 	.word	0x20002960
    bbdc:	200026e4 	.word	0x200026e4
    bbe0:	200026ea 	.word	0x200026ea
    bbe4:	200027fe 	.word	0x200027fe
    bbe8:	000075d9 	.word	0x000075d9
            P2PStatus.bits.RxHasUserData = 1;
    bbec:	4c26      	ldr	r4, [pc, #152]	; (bc88 <P2PTasks+0x7d8>)
    bbee:	7823      	ldrb	r3, [r4, #0]
    bbf0:	2208      	movs	r2, #8
    bbf2:	4313      	orrs	r3, r2
    bbf4:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    bbf6:	4b25      	ldr	r3, [pc, #148]	; (bc8c <P2PTasks+0x7dc>)
    bbf8:	681b      	ldr	r3, [r3, #0]
    bbfa:	4825      	ldr	r0, [pc, #148]	; (bc90 <P2PTasks+0x7e0>)
    bbfc:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    bbfe:	7823      	ldrb	r3, [r4, #0]
    bc00:	2208      	movs	r2, #8
    bc02:	4393      	bics	r3, r2
    bc04:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    bc06:	4b23      	ldr	r3, [pc, #140]	; (bc94 <P2PTasks+0x7e4>)
    bc08:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    bc0a:	4b21      	ldr	r3, [pc, #132]	; (bc90 <P2PTasks+0x7e0>)
    bc0c:	7b1b      	ldrb	r3, [r3, #12]
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d007      	beq.n	bc22 <P2PTasks+0x772>
    bc12:	4b1d      	ldr	r3, [pc, #116]	; (bc88 <P2PTasks+0x7d8>)
    bc14:	781b      	ldrb	r3, [r3, #0]
    bc16:	06db      	lsls	r3, r3, #27
    bc18:	d403      	bmi.n	bc22 <P2PTasks+0x772>
    bc1a:	4b1b      	ldr	r3, [pc, #108]	; (bc88 <P2PTasks+0x7d8>)
    bc1c:	781b      	ldrb	r3, [r3, #0]
    bc1e:	069b      	lsls	r3, r3, #26
    bc20:	d506      	bpl.n	bc30 <P2PTasks+0x780>
            P2PStatus.bits.RxHasUserData = 0;
    bc22:	4a19      	ldr	r2, [pc, #100]	; (bc88 <P2PTasks+0x7d8>)
    bc24:	7813      	ldrb	r3, [r2, #0]
    bc26:	2108      	movs	r1, #8
    bc28:	438b      	bics	r3, r1
    bc2a:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    bc2c:	4b19      	ldr	r3, [pc, #100]	; (bc94 <P2PTasks+0x7e4>)
    bc2e:	4798      	blx	r3
    PDS_TaskHandler();
    bc30:	4b19      	ldr	r3, [pc, #100]	; (bc98 <P2PTasks+0x7e8>)
    bc32:	4798      	blx	r3
}
    bc34:	b00b      	add	sp, #44	; 0x2c
    bc36:	bc3c      	pop	{r2, r3, r4, r5}
    bc38:	4690      	mov	r8, r2
    bc3a:	4699      	mov	r9, r3
    bc3c:	46a2      	mov	sl, r4
    bc3e:	46ab      	mov	fp, r5
    bc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    bc42:	4b16      	ldr	r3, [pc, #88]	; (bc9c <P2PTasks+0x7ec>)
    bc44:	781b      	ldrb	r3, [r3, #0]
    bc46:	2b01      	cmp	r3, #1
    bc48:	d100      	bne.n	bc4c <P2PTasks+0x79c>
    bc4a:	e5af      	b.n	b7ac <P2PTasks+0x2fc>
                                        status = STATUS_NOT_SAME_PAN;
    bc4c:	25f2      	movs	r5, #242	; 0xf2
    bc4e:	e569      	b.n	b724 <P2PTasks+0x274>
                            MiMAC_DiscardPacket();
    bc50:	4b10      	ldr	r3, [pc, #64]	; (bc94 <P2PTasks+0x7e4>)
    bc52:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    bc54:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    bc56:	1c5c      	adds	r4, r3, #1
    bc58:	22f0      	movs	r2, #240	; 0xf0
    bc5a:	4641      	mov	r1, r8
    bc5c:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    bc5e:	4b0c      	ldr	r3, [pc, #48]	; (bc90 <P2PTasks+0x7e0>)
    bc60:	685a      	ldr	r2, [r3, #4]
    bc62:	8859      	ldrh	r1, [r3, #2]
    bc64:	480e      	ldr	r0, [pc, #56]	; (bca0 <P2PTasks+0x7f0>)
    bc66:	9005      	str	r0, [sp, #20]
    bc68:	2001      	movs	r0, #1
    bc6a:	9004      	str	r0, [sp, #16]
    bc6c:	2000      	movs	r0, #0
    bc6e:	9003      	str	r0, [sp, #12]
    bc70:	4640      	mov	r0, r8
    bc72:	9002      	str	r0, [sp, #8]
    bc74:	9401      	str	r4, [sp, #4]
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	071b      	lsls	r3, r3, #28
    bc7a:	0fdb      	lsrs	r3, r3, #31
    bc7c:	9300      	str	r3, [sp, #0]
    bc7e:	2301      	movs	r3, #1
    bc80:	2000      	movs	r0, #0
    bc82:	4c08      	ldr	r4, [pc, #32]	; (bca4 <P2PTasks+0x7f4>)
    bc84:	47a0      	blx	r4
                            break;
    bc86:	e7c0      	b.n	bc0a <P2PTasks+0x75a>
    bc88:	200026e0 	.word	0x200026e0
    bc8c:	200002a8 	.word	0x200002a8
    bc90:	20002950 	.word	0x20002950
    bc94:	00009e51 	.word	0x00009e51
    bc98:	000094c5 	.word	0x000094c5
    bc9c:	20000018 	.word	0x20000018
    bca0:	0000aa85 	.word	0x0000aa85
    bca4:	0000abf1 	.word	0x0000abf1

0000bca8 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    bca8:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    bcaa:	4a0b      	ldr	r2, [pc, #44]	; (bcd8 <MiMem_Init+0x30>)
    bcac:	1e50      	subs	r0, r2, #1
    bcae:	2403      	movs	r4, #3
    bcb0:	43a0      	bics	r0, r4
    bcb2:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    bcb4:	4b09      	ldr	r3, [pc, #36]	; (bcdc <MiMem_Init+0x34>)
    bcb6:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    bcb8:	4253      	negs	r3, r2
    bcba:	43a3      	bics	r3, r4
    bcbc:	24c0      	movs	r4, #192	; 0xc0
    bcbe:	0164      	lsls	r4, r4, #5
    bcc0:	46a4      	mov	ip, r4
    bcc2:	4462      	add	r2, ip
    bcc4:	189b      	adds	r3, r3, r2
    bcc6:	4a06      	ldr	r2, [pc, #24]	; (bce0 <MiMem_Init+0x38>)
    bcc8:	6013      	str	r3, [r2, #0]
    bcca:	60c3      	str	r3, [r0, #12]
	base->free = true;
    bccc:	2301      	movs	r3, #1
    bcce:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    bcd0:	2300      	movs	r3, #0
    bcd2:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    bcd4:	6083      	str	r3, [r0, #8]
}
    bcd6:	bd10      	pop	{r4, pc}
    bcd8:	200002b0 	.word	0x200002b0
    bcdc:	200002ac 	.word	0x200002ac
    bce0:	20001ab0 	.word	0x20001ab0

0000bce4 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    bce4:	b570      	push	{r4, r5, r6, lr}
    bce6:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    bce8:	4b29      	ldr	r3, [pc, #164]	; (bd90 <MiMem_Alloc+0xac>)
    bcea:	681b      	ldr	r3, [r3, #0]
    bcec:	2b00      	cmp	r3, #0
    bcee:	d012      	beq.n	bd16 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    bcf0:	2d00      	cmp	r5, #0
    bcf2:	d047      	beq.n	bd84 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    bcf4:	0029      	movs	r1, r5
    bcf6:	310f      	adds	r1, #15
    bcf8:	2303      	movs	r3, #3
    bcfa:	4399      	bics	r1, r3
    bcfc:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    bcfe:	4b25      	ldr	r3, [pc, #148]	; (bd94 <MiMem_Alloc+0xb0>)
    bd00:	6818      	ldr	r0, [r3, #0]
    bd02:	4281      	cmp	r1, r0
    bd04:	d840      	bhi.n	bd88 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    bd06:	4b22      	ldr	r3, [pc, #136]	; (bd90 <MiMem_Alloc+0xac>)
    bd08:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    bd0a:	2b00      	cmp	r3, #0
    bd0c:	d03e      	beq.n	bd8c <MiMem_Alloc+0xa8>
    bd0e:	2600      	movs	r6, #0
    bd10:	2401      	movs	r4, #1
    bd12:	4264      	negs	r4, r4
    bd14:	e005      	b.n	bd22 <MiMem_Alloc+0x3e>
		MiMem_Init();
    bd16:	4b20      	ldr	r3, [pc, #128]	; (bd98 <MiMem_Alloc+0xb4>)
    bd18:	4798      	blx	r3
    bd1a:	e7e9      	b.n	bcf0 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    bd1c:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    bd1e:	2b00      	cmp	r3, #0
    bd20:	d00a      	beq.n	bd38 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    bd22:	7b1a      	ldrb	r2, [r3, #12]
    bd24:	2a00      	cmp	r2, #0
    bd26:	d0f9      	beq.n	bd1c <MiMem_Alloc+0x38>
    bd28:	689a      	ldr	r2, [r3, #8]
    bd2a:	4291      	cmp	r1, r2
    bd2c:	d8f6      	bhi.n	bd1c <MiMem_Alloc+0x38>
    bd2e:	42a2      	cmp	r2, r4
    bd30:	d2f4      	bcs.n	bd1c <MiMem_Alloc+0x38>
    bd32:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    bd34:	0014      	movs	r4, r2
    bd36:	e7f1      	b.n	bd1c <MiMem_Alloc+0x38>
    bd38:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    bd3a:	2e00      	cmp	r6, #0
    bd3c:	d012      	beq.n	bd64 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    bd3e:	68b3      	ldr	r3, [r6, #8]
    bd40:	1a5b      	subs	r3, r3, r1
    bd42:	2b14      	cmp	r3, #20
    bd44:	d810      	bhi.n	bd68 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    bd46:	2300      	movs	r3, #0
    bd48:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    bd4a:	68b3      	ldr	r3, [r6, #8]
    bd4c:	1ac0      	subs	r0, r0, r3
    bd4e:	4b11      	ldr	r3, [pc, #68]	; (bd94 <MiMem_Alloc+0xb0>)
    bd50:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    bd52:	0034      	movs	r4, r6
    bd54:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    bd56:	2c00      	cmp	r4, #0
    bd58:	d004      	beq.n	bd64 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    bd5a:	002a      	movs	r2, r5
    bd5c:	2100      	movs	r1, #0
    bd5e:	0020      	movs	r0, r4
    bd60:	4b0e      	ldr	r3, [pc, #56]	; (bd9c <MiMem_Alloc+0xb8>)
    bd62:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    bd64:	0020      	movs	r0, r4
    bd66:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    bd68:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    bd6a:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    bd6c:	6833      	ldr	r3, [r6, #0]
    bd6e:	2b00      	cmp	r3, #0
    bd70:	d000      	beq.n	bd74 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    bd72:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    bd74:	6833      	ldr	r3, [r6, #0]
    bd76:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    bd78:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    bd7a:	2301      	movs	r3, #1
    bd7c:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    bd7e:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    bd80:	60b1      	str	r1, [r6, #8]
    bd82:	e7e0      	b.n	bd46 <MiMem_Alloc+0x62>
    bd84:	2400      	movs	r4, #0
    bd86:	e7ed      	b.n	bd64 <MiMem_Alloc+0x80>
    bd88:	2400      	movs	r4, #0
    bd8a:	e7eb      	b.n	bd64 <MiMem_Alloc+0x80>
			while (blockPtr)
    bd8c:	2400      	movs	r4, #0
    bd8e:	e7e9      	b.n	bd64 <MiMem_Alloc+0x80>
    bd90:	200002ac 	.word	0x200002ac
    bd94:	20001ab0 	.word	0x20001ab0
    bd98:	0000bca9 	.word	0x0000bca9
    bd9c:	00016709 	.word	0x00016709

0000bda0 <MiMem_Free>:
	Block_t* blockPtr = base;
    bda0:	4b1c      	ldr	r3, [pc, #112]	; (be14 <MiMem_Free+0x74>)
    bda2:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    bda4:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    bda6:	2b00      	cmp	r3, #0
    bda8:	d030      	beq.n	be0c <MiMem_Free+0x6c>
    bdaa:	4283      	cmp	r3, r0
    bdac:	d02f      	beq.n	be0e <MiMem_Free+0x6e>
    bdae:	681b      	ldr	r3, [r3, #0]
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d02b      	beq.n	be0c <MiMem_Free+0x6c>
    bdb4:	4298      	cmp	r0, r3
    bdb6:	d1fa      	bne.n	bdae <MiMem_Free+0xe>
		blockPtr->free = true;
    bdb8:	2301      	movs	r3, #1
    bdba:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    bdbc:	6881      	ldr	r1, [r0, #8]
    bdbe:	4a16      	ldr	r2, [pc, #88]	; (be18 <MiMem_Free+0x78>)
    bdc0:	6813      	ldr	r3, [r2, #0]
    bdc2:	185b      	adds	r3, r3, r1
    bdc4:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    bdc6:	6843      	ldr	r3, [r0, #4]
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d00f      	beq.n	bdec <MiMem_Free+0x4c>
    bdcc:	7b1a      	ldrb	r2, [r3, #12]
    bdce:	2a00      	cmp	r2, #0
    bdd0:	d00c      	beq.n	bdec <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    bdd2:	689a      	ldr	r2, [r3, #8]
    bdd4:	4694      	mov	ip, r2
    bdd6:	4461      	add	r1, ip
    bdd8:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    bdda:	6803      	ldr	r3, [r0, #0]
    bddc:	2b00      	cmp	r3, #0
    bdde:	d001      	beq.n	bde4 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    bde0:	6842      	ldr	r2, [r0, #4]
    bde2:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    bde4:	6843      	ldr	r3, [r0, #4]
    bde6:	6802      	ldr	r2, [r0, #0]
    bde8:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    bdea:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    bdec:	6803      	ldr	r3, [r0, #0]
    bdee:	2b00      	cmp	r3, #0
    bdf0:	d00c      	beq.n	be0c <MiMem_Free+0x6c>
    bdf2:	7b1a      	ldrb	r2, [r3, #12]
    bdf4:	2a00      	cmp	r2, #0
    bdf6:	d009      	beq.n	be0c <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    bdf8:	6882      	ldr	r2, [r0, #8]
    bdfa:	6899      	ldr	r1, [r3, #8]
    bdfc:	468c      	mov	ip, r1
    bdfe:	4462      	add	r2, ip
    be00:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    be02:	681b      	ldr	r3, [r3, #0]
    be04:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    be06:	2b00      	cmp	r3, #0
    be08:	d000      	beq.n	be0c <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    be0a:	6058      	str	r0, [r3, #4]
}
    be0c:	4770      	bx	lr
	Block_t* blockPtr = base;
    be0e:	0018      	movs	r0, r3
    be10:	e7d2      	b.n	bdb8 <MiMem_Free+0x18>
    be12:	46c0      	nop			; (mov r8, r8)
    be14:	200002ac 	.word	0x200002ac
    be18:	20001ab0 	.word	0x20001ab0

0000be1c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    be1c:	b530      	push	{r4, r5, lr}
	if (timers) {
    be1e:	4b14      	ldr	r3, [pc, #80]	; (be70 <placeTimer+0x54>)
    be20:	681d      	ldr	r5, [r3, #0]
    be22:	2d00      	cmp	r5, #0
    be24:	d01c      	beq.n	be60 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    be26:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    be28:	6869      	ldr	r1, [r5, #4]
    be2a:	428a      	cmp	r2, r1
    be2c:	d309      	bcc.n	be42 <placeTimer+0x26>
    be2e:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    be30:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    be32:	6823      	ldr	r3, [r4, #0]
    be34:	2b00      	cmp	r3, #0
    be36:	d008      	beq.n	be4a <placeTimer+0x2e>
			if (timeout < t->timeout) {
    be38:	6859      	ldr	r1, [r3, #4]
    be3a:	4291      	cmp	r1, r2
    be3c:	d803      	bhi.n	be46 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    be3e:	001c      	movs	r4, r3
    be40:	e7f6      	b.n	be30 <placeTimer+0x14>
    be42:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    be44:	2400      	movs	r4, #0
				t->timeout -= timeout;
    be46:	1a89      	subs	r1, r1, r2
    be48:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    be4a:	6042      	str	r2, [r0, #4]

		if (prev) {
    be4c:	2c00      	cmp	r4, #0
    be4e:	d003      	beq.n	be58 <placeTimer+0x3c>
			timer->next = prev->next;
    be50:	6823      	ldr	r3, [r4, #0]
    be52:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    be54:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    be56:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    be58:	6005      	str	r5, [r0, #0]
			timers = timer;
    be5a:	4b05      	ldr	r3, [pc, #20]	; (be70 <placeTimer+0x54>)
    be5c:	6018      	str	r0, [r3, #0]
    be5e:	e7fa      	b.n	be56 <placeTimer+0x3a>
		timer->next = NULL;
    be60:	2300      	movs	r3, #0
    be62:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    be64:	6883      	ldr	r3, [r0, #8]
    be66:	6043      	str	r3, [r0, #4]
		timers = timer;
    be68:	4b01      	ldr	r3, [pc, #4]	; (be70 <placeTimer+0x54>)
    be6a:	6018      	str	r0, [r3, #0]
}
    be6c:	e7f3      	b.n	be56 <placeTimer+0x3a>
    be6e:	46c0      	nop			; (mov r8, r8)
    be70:	20001ab4 	.word	0x20001ab4

0000be74 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    be74:	4a06      	ldr	r2, [pc, #24]	; (be90 <SYS_HwOverflow_Cb+0x1c>)
    be76:	7813      	ldrb	r3, [r2, #0]
    be78:	3301      	adds	r3, #1
    be7a:	b2db      	uxtb	r3, r3
    be7c:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    be7e:	7813      	ldrb	r3, [r2, #0]
    be80:	2b00      	cmp	r3, #0
    be82:	d104      	bne.n	be8e <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    be84:	4a03      	ldr	r2, [pc, #12]	; (be94 <SYS_HwOverflow_Cb+0x20>)
    be86:	7813      	ldrb	r3, [r2, #0]
    be88:	3301      	adds	r3, #1
    be8a:	b2db      	uxtb	r3, r3
    be8c:	7013      	strb	r3, [r2, #0]
	}
}
    be8e:	4770      	bx	lr
    be90:	2000296c 	.word	0x2000296c
    be94:	2000296d 	.word	0x2000296d

0000be98 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    be98:	4b0e      	ldr	r3, [pc, #56]	; (bed4 <SYS_TimerStop+0x3c>)
    be9a:	681a      	ldr	r2, [r3, #0]
    be9c:	2a00      	cmp	r2, #0
    be9e:	d014      	beq.n	beca <SYS_TimerStop+0x32>
		if (t == timer) {
    bea0:	4282      	cmp	r2, r0
    bea2:	d013      	beq.n	becc <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bea4:	6813      	ldr	r3, [r2, #0]
    bea6:	2b00      	cmp	r3, #0
    bea8:	d00f      	beq.n	beca <SYS_TimerStop+0x32>
		if (t == timer) {
    beaa:	4298      	cmp	r0, r3
    beac:	d001      	beq.n	beb2 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    beae:	001a      	movs	r2, r3
    beb0:	e7f8      	b.n	bea4 <SYS_TimerStop+0xc>
			if (prev) {
    beb2:	2a00      	cmp	r2, #0
    beb4:	d00a      	beq.n	becc <SYS_TimerStop+0x34>
				prev->next = t->next;
    beb6:	6803      	ldr	r3, [r0, #0]
    beb8:	6013      	str	r3, [r2, #0]
			if (t->next) {
    beba:	6803      	ldr	r3, [r0, #0]
    bebc:	2b00      	cmp	r3, #0
    bebe:	d004      	beq.n	beca <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    bec0:	6842      	ldr	r2, [r0, #4]
    bec2:	6859      	ldr	r1, [r3, #4]
    bec4:	468c      	mov	ip, r1
    bec6:	4462      	add	r2, ip
    bec8:	605a      	str	r2, [r3, #4]
}
    beca:	4770      	bx	lr
				timers = t->next;
    becc:	4b01      	ldr	r3, [pc, #4]	; (bed4 <SYS_TimerStop+0x3c>)
    bece:	6802      	ldr	r2, [r0, #0]
    bed0:	601a      	str	r2, [r3, #0]
    bed2:	e7f2      	b.n	beba <SYS_TimerStop+0x22>
    bed4:	20001ab4 	.word	0x20001ab4

0000bed8 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bed8:	4b09      	ldr	r3, [pc, #36]	; (bf00 <SYS_TimerStarted+0x28>)
    beda:	681b      	ldr	r3, [r3, #0]
    bedc:	2b00      	cmp	r3, #0
    bede:	d00a      	beq.n	bef6 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    bee0:	4283      	cmp	r3, r0
    bee2:	d00a      	beq.n	befa <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bee4:	681b      	ldr	r3, [r3, #0]
    bee6:	2b00      	cmp	r3, #0
    bee8:	d003      	beq.n	bef2 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    beea:	4298      	cmp	r0, r3
    beec:	d1fa      	bne.n	bee4 <SYS_TimerStarted+0xc>
			return true;
    beee:	2001      	movs	r0, #1
    bef0:	e000      	b.n	bef4 <SYS_TimerStarted+0x1c>
	return false;
    bef2:	2000      	movs	r0, #0
}
    bef4:	4770      	bx	lr
	return false;
    bef6:	2000      	movs	r0, #0
    bef8:	e7fc      	b.n	bef4 <SYS_TimerStarted+0x1c>
			return true;
    befa:	2001      	movs	r0, #1
    befc:	e7fa      	b.n	bef4 <SYS_TimerStarted+0x1c>
    befe:	46c0      	nop			; (mov r8, r8)
    bf00:	20001ab4 	.word	0x20001ab4

0000bf04 <SYS_TimerStart>:
{
    bf04:	b510      	push	{r4, lr}
    bf06:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    bf08:	4b04      	ldr	r3, [pc, #16]	; (bf1c <SYS_TimerStart+0x18>)
    bf0a:	4798      	blx	r3
    bf0c:	2800      	cmp	r0, #0
    bf0e:	d000      	beq.n	bf12 <SYS_TimerStart+0xe>
}
    bf10:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    bf12:	0020      	movs	r0, r4
    bf14:	4b02      	ldr	r3, [pc, #8]	; (bf20 <SYS_TimerStart+0x1c>)
    bf16:	4798      	blx	r3
}
    bf18:	e7fa      	b.n	bf10 <SYS_TimerStart+0xc>
    bf1a:	46c0      	nop			; (mov r8, r8)
    bf1c:	0000bed9 	.word	0x0000bed9
    bf20:	0000be1d 	.word	0x0000be1d

0000bf24 <MiWi_TickGet>:
{
    bf24:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    bf26:	4e11      	ldr	r6, [pc, #68]	; (bf6c <MiWi_TickGet+0x48>)
    bf28:	7835      	ldrb	r5, [r6, #0]
    bf2a:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    bf2c:	4b10      	ldr	r3, [pc, #64]	; (bf70 <MiWi_TickGet+0x4c>)
    bf2e:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    bf30:	4b10      	ldr	r3, [pc, #64]	; (bf74 <MiWi_TickGet+0x50>)
    bf32:	4798      	blx	r3
    bf34:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    bf36:	4b10      	ldr	r3, [pc, #64]	; (bf78 <MiWi_TickGet+0x54>)
    bf38:	4798      	blx	r3
  __ASM volatile ("nop");
    bf3a:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    bf3c:	7833      	ldrb	r3, [r6, #0]
    bf3e:	b2db      	uxtb	r3, r3
    bf40:	429d      	cmp	r5, r3
    bf42:	d004      	beq.n	bf4e <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    bf44:	4b0b      	ldr	r3, [pc, #44]	; (bf74 <MiWi_TickGet+0x50>)
    bf46:	4798      	blx	r3
    bf48:	0c24      	lsrs	r4, r4, #16
    bf4a:	0424      	lsls	r4, r4, #16
    bf4c:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    bf4e:	4b07      	ldr	r3, [pc, #28]	; (bf6c <MiWi_TickGet+0x48>)
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	041b      	lsls	r3, r3, #16
    bf54:	4809      	ldr	r0, [pc, #36]	; (bf7c <MiWi_TickGet+0x58>)
    bf56:	4004      	ands	r4, r0
    bf58:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    bf5a:	4b09      	ldr	r3, [pc, #36]	; (bf80 <MiWi_TickGet+0x5c>)
    bf5c:	781b      	ldrb	r3, [r3, #0]
    bf5e:	061b      	lsls	r3, r3, #24
    bf60:	0224      	lsls	r4, r4, #8
    bf62:	0a24      	lsrs	r4, r4, #8
    bf64:	431c      	orrs	r4, r3
}
    bf66:	0020      	movs	r0, r4
    bf68:	bd70      	pop	{r4, r5, r6, pc}
    bf6a:	46c0      	nop			; (mov r8, r8)
    bf6c:	2000296c 	.word	0x2000296c
    bf70:	0000d9ad 	.word	0x0000d9ad
    bf74:	000132dd 	.word	0x000132dd
    bf78:	0000d9c1 	.word	0x0000d9c1
    bf7c:	ff00ffff 	.word	0xff00ffff
    bf80:	2000296d 	.word	0x2000296d

0000bf84 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    bf84:	4288      	cmp	r0, r1
    bf86:	d802      	bhi.n	bf8e <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    bf88:	3801      	subs	r0, #1
    bf8a:	1a40      	subs	r0, r0, r1
}
    bf8c:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    bf8e:	1a40      	subs	r0, r0, r1
    bf90:	e7fc      	b.n	bf8c <MiWi_TickGetDiff+0x8>
    bf92:	Address 0x0000bf92 is out of bounds.


0000bf94 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    bf94:	b570      	push	{r4, r5, r6, lr}
    bf96:	b082      	sub	sp, #8
    bf98:	0005      	movs	r5, r0
    bf9a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    bf9c:	2200      	movs	r2, #0
    bf9e:	466b      	mov	r3, sp
    bfa0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    bfa2:	4c06      	ldr	r4, [pc, #24]	; (bfbc <usart_serial_getchar+0x28>)
    bfa4:	466b      	mov	r3, sp
    bfa6:	1d99      	adds	r1, r3, #6
    bfa8:	0028      	movs	r0, r5
    bfaa:	47a0      	blx	r4
    bfac:	2800      	cmp	r0, #0
    bfae:	d1f9      	bne.n	bfa4 <usart_serial_getchar+0x10>

	*c = temp;
    bfb0:	466b      	mov	r3, sp
    bfb2:	3306      	adds	r3, #6
    bfb4:	881b      	ldrh	r3, [r3, #0]
    bfb6:	7033      	strb	r3, [r6, #0]
}
    bfb8:	b002      	add	sp, #8
    bfba:	bd70      	pop	{r4, r5, r6, pc}
    bfbc:	0000604d 	.word	0x0000604d

0000bfc0 <usart_serial_putchar>:
{
    bfc0:	b570      	push	{r4, r5, r6, lr}
    bfc2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    bfc4:	b28c      	uxth	r4, r1
    bfc6:	4e03      	ldr	r6, [pc, #12]	; (bfd4 <usart_serial_putchar+0x14>)
    bfc8:	0021      	movs	r1, r4
    bfca:	0028      	movs	r0, r5
    bfcc:	47b0      	blx	r6
    bfce:	2800      	cmp	r0, #0
    bfd0:	d1fa      	bne.n	bfc8 <usart_serial_putchar+0x8>
}
    bfd2:	bd70      	pop	{r4, r5, r6, pc}
    bfd4:	00006021 	.word	0x00006021

0000bfd8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    bfd8:	b510      	push	{r4, lr}
    bfda:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    bfdc:	466b      	mov	r3, sp
    bfde:	1ddc      	adds	r4, r3, #7
    bfe0:	2201      	movs	r2, #1
    bfe2:	0021      	movs	r1, r4
    bfe4:	480f      	ldr	r0, [pc, #60]	; (c024 <USART_HOST_ISR_VECT+0x4c>)
    bfe6:	4b10      	ldr	r3, [pc, #64]	; (c028 <USART_HOST_ISR_VECT+0x50>)
    bfe8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    bfea:	b672      	cpsid	i
  __ASM volatile ("dmb");
    bfec:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    bff0:	2200      	movs	r2, #0
    bff2:	4b0e      	ldr	r3, [pc, #56]	; (c02c <USART_HOST_ISR_VECT+0x54>)
    bff4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    bff6:	4b0e      	ldr	r3, [pc, #56]	; (c030 <USART_HOST_ISR_VECT+0x58>)
    bff8:	781b      	ldrb	r3, [r3, #0]
    bffa:	7821      	ldrb	r1, [r4, #0]
    bffc:	4a0d      	ldr	r2, [pc, #52]	; (c034 <USART_HOST_ISR_VECT+0x5c>)
    bffe:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    c000:	2b7f      	cmp	r3, #127	; 0x7f
    c002:	d00a      	beq.n	c01a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    c004:	3301      	adds	r3, #1
    c006:	4a0a      	ldr	r2, [pc, #40]	; (c030 <USART_HOST_ISR_VECT+0x58>)
    c008:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    c00a:	2201      	movs	r2, #1
    c00c:	4b07      	ldr	r3, [pc, #28]	; (c02c <USART_HOST_ISR_VECT+0x54>)
    c00e:	701a      	strb	r2, [r3, #0]
    c010:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c014:	b662      	cpsie	i
}
    c016:	b002      	add	sp, #8
    c018:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    c01a:	2200      	movs	r2, #0
    c01c:	4b04      	ldr	r3, [pc, #16]	; (c030 <USART_HOST_ISR_VECT+0x58>)
    c01e:	701a      	strb	r2, [r3, #0]
    c020:	e7f3      	b.n	c00a <USART_HOST_ISR_VECT+0x32>
    c022:	46c0      	nop			; (mov r8, r8)
    c024:	20001ab8 	.word	0x20001ab8
    c028:	0000617d 	.word	0x0000617d
    c02c:	20000008 	.word	0x20000008
    c030:	20001b6c 	.word	0x20001b6c
    c034:	20001aec 	.word	0x20001aec

0000c038 <sio2host_init>:
{
    c038:	b5f0      	push	{r4, r5, r6, r7, lr}
    c03a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c03c:	2380      	movs	r3, #128	; 0x80
    c03e:	05db      	lsls	r3, r3, #23
    c040:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c042:	2300      	movs	r3, #0
    c044:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    c046:	22ff      	movs	r2, #255	; 0xff
    c048:	4669      	mov	r1, sp
    c04a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    c04c:	2200      	movs	r2, #0
    c04e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c050:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    c052:	2401      	movs	r4, #1
    c054:	2124      	movs	r1, #36	; 0x24
    c056:	4668      	mov	r0, sp
    c058:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    c05a:	3101      	adds	r1, #1
    c05c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    c05e:	3101      	adds	r1, #1
    c060:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    c062:	3101      	adds	r1, #1
    c064:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    c066:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    c068:	3105      	adds	r1, #5
    c06a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    c06c:	3101      	adds	r1, #1
    c06e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c070:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c072:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c074:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c076:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c078:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c07a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    c07c:	2313      	movs	r3, #19
    c07e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c080:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    c082:	2380      	movs	r3, #128	; 0x80
    c084:	035b      	lsls	r3, r3, #13
    c086:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    c088:	4b2f      	ldr	r3, [pc, #188]	; (c148 <sio2host_init+0x110>)
    c08a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    c08c:	4b2f      	ldr	r3, [pc, #188]	; (c14c <sio2host_init+0x114>)
    c08e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    c090:	2301      	movs	r3, #1
    c092:	425b      	negs	r3, r3
    c094:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    c096:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    c098:	23e1      	movs	r3, #225	; 0xe1
    c09a:	025b      	lsls	r3, r3, #9
    c09c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    c09e:	4d2c      	ldr	r5, [pc, #176]	; (c150 <sio2host_init+0x118>)
    c0a0:	4b2c      	ldr	r3, [pc, #176]	; (c154 <sio2host_init+0x11c>)
    c0a2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c0a4:	4a2c      	ldr	r2, [pc, #176]	; (c158 <sio2host_init+0x120>)
    c0a6:	4b2d      	ldr	r3, [pc, #180]	; (c15c <sio2host_init+0x124>)
    c0a8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c0aa:	4a2d      	ldr	r2, [pc, #180]	; (c160 <sio2host_init+0x128>)
    c0ac:	4b2d      	ldr	r3, [pc, #180]	; (c164 <sio2host_init+0x12c>)
    c0ae:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c0b0:	466a      	mov	r2, sp
    c0b2:	2184      	movs	r1, #132	; 0x84
    c0b4:	05c9      	lsls	r1, r1, #23
    c0b6:	0028      	movs	r0, r5
    c0b8:	4b2b      	ldr	r3, [pc, #172]	; (c168 <sio2host_init+0x130>)
    c0ba:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c0bc:	4f2b      	ldr	r7, [pc, #172]	; (c16c <sio2host_init+0x134>)
    c0be:	683b      	ldr	r3, [r7, #0]
    c0c0:	6898      	ldr	r0, [r3, #8]
    c0c2:	2100      	movs	r1, #0
    c0c4:	4e2a      	ldr	r6, [pc, #168]	; (c170 <sio2host_init+0x138>)
    c0c6:	47b0      	blx	r6
	setbuf(stdin, NULL);
    c0c8:	683b      	ldr	r3, [r7, #0]
    c0ca:	6858      	ldr	r0, [r3, #4]
    c0cc:	2100      	movs	r1, #0
    c0ce:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c0d0:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c0d2:	0030      	movs	r0, r6
    c0d4:	4b27      	ldr	r3, [pc, #156]	; (c174 <sio2host_init+0x13c>)
    c0d6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c0d8:	231f      	movs	r3, #31
    c0da:	4018      	ands	r0, r3
    c0dc:	4084      	lsls	r4, r0
    c0de:	4b26      	ldr	r3, [pc, #152]	; (c178 <sio2host_init+0x140>)
    c0e0:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c0e2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c0e4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d1fc      	bne.n	c0e4 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c0ea:	6833      	ldr	r3, [r6, #0]
    c0ec:	2202      	movs	r2, #2
    c0ee:	4313      	orrs	r3, r2
    c0f0:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c0f2:	4b17      	ldr	r3, [pc, #92]	; (c150 <sio2host_init+0x118>)
    c0f4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c0f6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c0f8:	2a00      	cmp	r2, #0
    c0fa:	d1fc      	bne.n	c0f6 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    c0fc:	6859      	ldr	r1, [r3, #4]
    c0fe:	2280      	movs	r2, #128	; 0x80
    c100:	0252      	lsls	r2, r2, #9
    c102:	430a      	orrs	r2, r1
    c104:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    c106:	2101      	movs	r1, #1
    c108:	4a11      	ldr	r2, [pc, #68]	; (c150 <sio2host_init+0x118>)
    c10a:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    c10c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c10e:	2a00      	cmp	r2, #0
    c110:	d1fc      	bne.n	c10c <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    c112:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c114:	2a00      	cmp	r2, #0
    c116:	d1fc      	bne.n	c112 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    c118:	6859      	ldr	r1, [r3, #4]
    c11a:	2280      	movs	r2, #128	; 0x80
    c11c:	0292      	lsls	r2, r2, #10
    c11e:	430a      	orrs	r2, r1
    c120:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    c122:	2101      	movs	r1, #1
    c124:	4a0a      	ldr	r2, [pc, #40]	; (c150 <sio2host_init+0x118>)
    c126:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    c128:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c12a:	2a00      	cmp	r2, #0
    c12c:	d1fc      	bne.n	c128 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    c12e:	4913      	ldr	r1, [pc, #76]	; (c17c <sio2host_init+0x144>)
    c130:	2000      	movs	r0, #0
    c132:	4b13      	ldr	r3, [pc, #76]	; (c180 <sio2host_init+0x148>)
    c134:	4798      	blx	r3
    c136:	2204      	movs	r2, #4
    c138:	2384      	movs	r3, #132	; 0x84
    c13a:	05db      	lsls	r3, r3, #23
    c13c:	759a      	strb	r2, [r3, #22]
    c13e:	32fc      	adds	r2, #252	; 0xfc
    c140:	4b0d      	ldr	r3, [pc, #52]	; (c178 <sio2host_init+0x140>)
    c142:	601a      	str	r2, [r3, #0]
}
    c144:	b011      	add	sp, #68	; 0x44
    c146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c148:	00040003 	.word	0x00040003
    c14c:	00050003 	.word	0x00050003
    c150:	20001ab8 	.word	0x20001ab8
    c154:	20001f60 	.word	0x20001f60
    c158:	0000bfc1 	.word	0x0000bfc1
    c15c:	20001f5c 	.word	0x20001f5c
    c160:	0000bf95 	.word	0x0000bf95
    c164:	20001f58 	.word	0x20001f58
    c168:	00005cb5 	.word	0x00005cb5
    c16c:	20000028 	.word	0x20000028
    c170:	00016eb5 	.word	0x00016eb5
    c174:	000057e5 	.word	0x000057e5
    c178:	e000e100 	.word	0xe000e100
    c17c:	0000bfd9 	.word	0x0000bfd9
    c180:	000057a9 	.word	0x000057a9

0000c184 <sio2host_tx>:
{
    c184:	b5f0      	push	{r4, r5, r6, r7, lr}
    c186:	b083      	sub	sp, #12
    c188:	0006      	movs	r6, r0
    c18a:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    c18c:	466b      	mov	r3, sp
    c18e:	889d      	ldrh	r5, [r3, #4]
    c190:	4c05      	ldr	r4, [pc, #20]	; (c1a8 <sio2host_tx+0x24>)
    c192:	4f06      	ldr	r7, [pc, #24]	; (c1ac <sio2host_tx+0x28>)
    c194:	002a      	movs	r2, r5
    c196:	0031      	movs	r1, r6
    c198:	0020      	movs	r0, r4
    c19a:	47b8      	blx	r7
	} while (status != STATUS_OK);
    c19c:	2800      	cmp	r0, #0
    c19e:	d1f9      	bne.n	c194 <sio2host_tx+0x10>
}
    c1a0:	9801      	ldr	r0, [sp, #4]
    c1a2:	b003      	add	sp, #12
    c1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1a6:	46c0      	nop			; (mov r8, r8)
    c1a8:	20001ab8 	.word	0x20001ab8
    c1ac:	000060bd 	.word	0x000060bd

0000c1b0 <sio2host_putchar>:
{
    c1b0:	b500      	push	{lr}
    c1b2:	b083      	sub	sp, #12
    c1b4:	466b      	mov	r3, sp
    c1b6:	71d8      	strb	r0, [r3, #7]
    c1b8:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    c1ba:	2101      	movs	r1, #1
    c1bc:	0018      	movs	r0, r3
    c1be:	4b02      	ldr	r3, [pc, #8]	; (c1c8 <sio2host_putchar+0x18>)
    c1c0:	4798      	blx	r3
}
    c1c2:	b003      	add	sp, #12
    c1c4:	bd00      	pop	{pc}
    c1c6:	46c0      	nop			; (mov r8, r8)
    c1c8:	0000c185 	.word	0x0000c185

0000c1cc <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    c1cc:	4b13      	ldr	r3, [pc, #76]	; (c21c <HAL_SPISend+0x50>)
    c1ce:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    c1d0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c1d2:	7e1a      	ldrb	r2, [r3, #24]
    c1d4:	420a      	tst	r2, r1
    c1d6:	d0fc      	beq.n	c1d2 <HAL_SPISend+0x6>
    c1d8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c1da:	07d2      	lsls	r2, r2, #31
    c1dc:	d500      	bpl.n	c1e0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c1de:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    c1e0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c1e2:	7e1a      	ldrb	r2, [r3, #24]
    c1e4:	420a      	tst	r2, r1
    c1e6:	d0fc      	beq.n	c1e2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    c1e8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c1ea:	7e1a      	ldrb	r2, [r3, #24]
    c1ec:	420a      	tst	r2, r1
    c1ee:	d0fc      	beq.n	c1ea <HAL_SPISend+0x1e>
    c1f0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    c1f2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    c1f4:	0752      	lsls	r2, r2, #29
    c1f6:	d50a      	bpl.n	c20e <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c1f8:	8b5a      	ldrh	r2, [r3, #26]
    c1fa:	0752      	lsls	r2, r2, #29
    c1fc:	d501      	bpl.n	c202 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c1fe:	2204      	movs	r2, #4
    c200:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c202:	4a06      	ldr	r2, [pc, #24]	; (c21c <HAL_SPISend+0x50>)
    c204:	7992      	ldrb	r2, [r2, #6]
    c206:	2a01      	cmp	r2, #1
    c208:	d003      	beq.n	c212 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c20a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c20c:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    c20e:	b2c0      	uxtb	r0, r0
}
    c210:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c212:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c214:	05c0      	lsls	r0, r0, #23
    c216:	0dc0      	lsrs	r0, r0, #23
    c218:	e7f9      	b.n	c20e <HAL_SPISend+0x42>
    c21a:	46c0      	nop			; (mov r8, r8)
    c21c:	20001b7c 	.word	0x20001b7c

0000c220 <HAL_ResetPinMakeOutput>:
{
    c220:	b500      	push	{lr}
    c222:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    c224:	a901      	add	r1, sp, #4
    c226:	2301      	movs	r3, #1
    c228:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    c22a:	2200      	movs	r2, #0
    c22c:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c22e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c230:	202f      	movs	r0, #47	; 0x2f
    c232:	4b02      	ldr	r3, [pc, #8]	; (c23c <HAL_ResetPinMakeOutput+0x1c>)
    c234:	4798      	blx	r3
}
    c236:	b003      	add	sp, #12
    c238:	bd00      	pop	{pc}
    c23a:	46c0      	nop			; (mov r8, r8)
    c23c:	00004ca1 	.word	0x00004ca1

0000c240 <HAL_RadioDIO2Callback>:
{
    c240:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    c242:	4b05      	ldr	r3, [pc, #20]	; (c258 <HAL_RadioDIO2Callback+0x18>)
    c244:	681b      	ldr	r3, [r3, #0]
    c246:	2b00      	cmp	r3, #0
    c248:	d004      	beq.n	c254 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    c24a:	4b04      	ldr	r3, [pc, #16]	; (c25c <HAL_RadioDIO2Callback+0x1c>)
    c24c:	4798      	blx	r3
    interruptHandlerDio2();
    c24e:	4b02      	ldr	r3, [pc, #8]	; (c258 <HAL_RadioDIO2Callback+0x18>)
    c250:	681b      	ldr	r3, [r3, #0]
    c252:	4798      	blx	r3
}
    c254:	bd10      	pop	{r4, pc}
    c256:	46c0      	nop			; (mov r8, r8)
    c258:	20001b78 	.word	0x20001b78
    c25c:	0000c6a1 	.word	0x0000c6a1

0000c260 <HAL_RadioDIO1Callback>:
{
    c260:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    c262:	4b05      	ldr	r3, [pc, #20]	; (c278 <HAL_RadioDIO1Callback+0x18>)
    c264:	681b      	ldr	r3, [r3, #0]
    c266:	2b00      	cmp	r3, #0
    c268:	d004      	beq.n	c274 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    c26a:	4b04      	ldr	r3, [pc, #16]	; (c27c <HAL_RadioDIO1Callback+0x1c>)
    c26c:	4798      	blx	r3
    interruptHandlerDio1();
    c26e:	4b02      	ldr	r3, [pc, #8]	; (c278 <HAL_RadioDIO1Callback+0x18>)
    c270:	681b      	ldr	r3, [r3, #0]
    c272:	4798      	blx	r3
}
    c274:	bd10      	pop	{r4, pc}
    c276:	46c0      	nop			; (mov r8, r8)
    c278:	20001b74 	.word	0x20001b74
    c27c:	0000c6a1 	.word	0x0000c6a1

0000c280 <HAL_RadioDIO0Callback>:
{
    c280:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    c282:	4b05      	ldr	r3, [pc, #20]	; (c298 <HAL_RadioDIO0Callback+0x18>)
    c284:	681b      	ldr	r3, [r3, #0]
    c286:	2b00      	cmp	r3, #0
    c288:	d004      	beq.n	c294 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    c28a:	4b04      	ldr	r3, [pc, #16]	; (c29c <HAL_RadioDIO0Callback+0x1c>)
    c28c:	4798      	blx	r3
    interruptHandlerDio0();
    c28e:	4b02      	ldr	r3, [pc, #8]	; (c298 <HAL_RadioDIO0Callback+0x18>)
    c290:	681b      	ldr	r3, [r3, #0]
    c292:	4798      	blx	r3
}
    c294:	bd10      	pop	{r4, pc}
    c296:	46c0      	nop			; (mov r8, r8)
    c298:	20001b70 	.word	0x20001b70
    c29c:	0000c6a1 	.word	0x0000c6a1

0000c2a0 <HAL_SPICSAssert>:
{
    c2a0:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    c2a2:	2201      	movs	r2, #1
    c2a4:	4902      	ldr	r1, [pc, #8]	; (c2b0 <HAL_SPICSAssert+0x10>)
    c2a6:	4803      	ldr	r0, [pc, #12]	; (c2b4 <HAL_SPICSAssert+0x14>)
    c2a8:	4b03      	ldr	r3, [pc, #12]	; (c2b8 <HAL_SPICSAssert+0x18>)
    c2aa:	4798      	blx	r3
}
    c2ac:	bd10      	pop	{r4, pc}
    c2ae:	46c0      	nop			; (mov r8, r8)
    c2b0:	20002970 	.word	0x20002970
    c2b4:	20001b7c 	.word	0x20001b7c
    c2b8:	00005bc1 	.word	0x00005bc1

0000c2bc <HAL_SPICSDeassert>:
{
    c2bc:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    c2be:	2200      	movs	r2, #0
    c2c0:	4902      	ldr	r1, [pc, #8]	; (c2cc <HAL_SPICSDeassert+0x10>)
    c2c2:	4803      	ldr	r0, [pc, #12]	; (c2d0 <HAL_SPICSDeassert+0x14>)
    c2c4:	4b03      	ldr	r3, [pc, #12]	; (c2d4 <HAL_SPICSDeassert+0x18>)
    c2c6:	4798      	blx	r3
}
    c2c8:	bd10      	pop	{r4, pc}
    c2ca:	46c0      	nop			; (mov r8, r8)
    c2cc:	20002970 	.word	0x20002970
    c2d0:	20001b7c 	.word	0x20001b7c
    c2d4:	00005bc1 	.word	0x00005bc1

0000c2d8 <HAL_RadioInit>:
{
    c2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2da:	46d6      	mov	lr, sl
    c2dc:	464f      	mov	r7, r9
    c2de:	4646      	mov	r6, r8
    c2e0:	b5c0      	push	{r6, r7, lr}
    c2e2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    c2e4:	ac01      	add	r4, sp, #4
    c2e6:	2601      	movs	r6, #1
    c2e8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c2ea:	2500      	movs	r5, #0
    c2ec:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c2ee:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    c2f0:	0021      	movs	r1, r4
    c2f2:	2052      	movs	r0, #82	; 0x52
    c2f4:	4f52      	ldr	r7, [pc, #328]	; (c440 <HAL_RadioInit+0x168>)
    c2f6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    c2f8:	0021      	movs	r1, r4
    c2fa:	203e      	movs	r0, #62	; 0x3e
    c2fc:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    c2fe:	0021      	movs	r1, r4
    c300:	203f      	movs	r0, #63	; 0x3f
    c302:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    c304:	0021      	movs	r1, r4
    c306:	202f      	movs	r0, #47	; 0x2f
    c308:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    c30a:	2280      	movs	r2, #128	; 0x80
    c30c:	02d2      	lsls	r2, r2, #11
    c30e:	4b4d      	ldr	r3, [pc, #308]	; (c444 <HAL_RadioInit+0x16c>)
    c310:	619a      	str	r2, [r3, #24]
    c312:	4b4d      	ldr	r3, [pc, #308]	; (c448 <HAL_RadioInit+0x170>)
    c314:	2280      	movs	r2, #128	; 0x80
    c316:	05d2      	lsls	r2, r2, #23
    c318:	619a      	str	r2, [r3, #24]
    c31a:	2280      	movs	r2, #128	; 0x80
    c31c:	0612      	lsls	r2, r2, #24
    c31e:	619a      	str	r2, [r3, #24]
    c320:	2280      	movs	r2, #128	; 0x80
    c322:	0212      	lsls	r2, r2, #8
    c324:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c326:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    c328:	0021      	movs	r1, r4
    c32a:	2053      	movs	r0, #83	; 0x53
    c32c:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    c32e:	ac02      	add	r4, sp, #8
    c330:	0020      	movs	r0, r4
    c332:	4b46      	ldr	r3, [pc, #280]	; (c44c <HAL_RadioInit+0x174>)
    c334:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    c336:	2330      	movs	r3, #48	; 0x30
    c338:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    c33a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c33c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c33e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    c340:	0021      	movs	r1, r4
    c342:	2000      	movs	r0, #0
    c344:	4b42      	ldr	r3, [pc, #264]	; (c450 <HAL_RadioInit+0x178>)
    c346:	469a      	mov	sl, r3
    c348:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c34a:	2200      	movs	r2, #0
    c34c:	2100      	movs	r1, #0
    c34e:	4841      	ldr	r0, [pc, #260]	; (c454 <HAL_RadioInit+0x17c>)
    c350:	4b41      	ldr	r3, [pc, #260]	; (c458 <HAL_RadioInit+0x180>)
    c352:	4699      	mov	r9, r3
    c354:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c356:	2100      	movs	r1, #0
    c358:	2000      	movs	r0, #0
    c35a:	4b40      	ldr	r3, [pc, #256]	; (c45c <HAL_RadioInit+0x184>)
    c35c:	4698      	mov	r8, r3
    c35e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    c360:	230b      	movs	r3, #11
    c362:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    c364:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c366:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c368:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    c36a:	0021      	movs	r1, r4
    c36c:	200b      	movs	r0, #11
    c36e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c370:	2200      	movs	r2, #0
    c372:	210b      	movs	r1, #11
    c374:	483a      	ldr	r0, [pc, #232]	; (c460 <HAL_RadioInit+0x188>)
    c376:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c378:	2100      	movs	r1, #0
    c37a:	200b      	movs	r0, #11
    c37c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    c37e:	230c      	movs	r3, #12
    c380:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    c382:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c384:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c386:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    c388:	0021      	movs	r1, r4
    c38a:	200c      	movs	r0, #12
    c38c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c38e:	2200      	movs	r2, #0
    c390:	210c      	movs	r1, #12
    c392:	4834      	ldr	r0, [pc, #208]	; (c464 <HAL_RadioInit+0x18c>)
    c394:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c396:	2100      	movs	r1, #0
    c398:	200c      	movs	r0, #12
    c39a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    c39c:	4b32      	ldr	r3, [pc, #200]	; (c468 <HAL_RadioInit+0x190>)
    c39e:	4698      	mov	r8, r3
    c3a0:	233f      	movs	r3, #63	; 0x3f
    c3a2:	4642      	mov	r2, r8
    c3a4:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    c3a6:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    c3a8:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c3aa:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c3ac:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c3ae:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c3b0:	0021      	movs	r1, r4
    c3b2:	203f      	movs	r0, #63	; 0x3f
    c3b4:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    c3b6:	4643      	mov	r3, r8
    c3b8:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    c3ba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c3bc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c3be:	2900      	cmp	r1, #0
    c3c0:	d104      	bne.n	c3cc <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    c3c2:	0953      	lsrs	r3, r2, #5
    c3c4:	01db      	lsls	r3, r3, #7
    c3c6:	4929      	ldr	r1, [pc, #164]	; (c46c <HAL_RadioInit+0x194>)
    c3c8:	468c      	mov	ip, r1
    c3ca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c3cc:	211f      	movs	r1, #31
    c3ce:	4011      	ands	r1, r2
    c3d0:	2201      	movs	r2, #1
    c3d2:	0010      	movs	r0, r2
    c3d4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c3d6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c3d8:	ac02      	add	r4, sp, #8
    c3da:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c3dc:	2300      	movs	r3, #0
    c3de:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c3e0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c3e2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c3e4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c3e6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c3e8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c3ea:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c3ec:	3223      	adds	r2, #35	; 0x23
    c3ee:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c3f0:	3a18      	subs	r2, #24
    c3f2:	2100      	movs	r1, #0
    c3f4:	a808      	add	r0, sp, #32
    c3f6:	4b1e      	ldr	r3, [pc, #120]	; (c470 <HAL_RadioInit+0x198>)
    c3f8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    c3fa:	4b1e      	ldr	r3, [pc, #120]	; (c474 <HAL_RadioInit+0x19c>)
    c3fc:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    c3fe:	2380      	movs	r3, #128	; 0x80
    c400:	025b      	lsls	r3, r3, #9
    c402:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    c404:	4b1c      	ldr	r3, [pc, #112]	; (c478 <HAL_RadioInit+0x1a0>)
    c406:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    c408:	2301      	movs	r3, #1
    c40a:	425b      	negs	r3, r3
    c40c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    c40e:	4b1b      	ldr	r3, [pc, #108]	; (c47c <HAL_RadioInit+0x1a4>)
    c410:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    c412:	4b1b      	ldr	r3, [pc, #108]	; (c480 <HAL_RadioInit+0x1a8>)
    c414:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    c416:	4d1b      	ldr	r5, [pc, #108]	; (c484 <HAL_RadioInit+0x1ac>)
    c418:	0022      	movs	r2, r4
    c41a:	491b      	ldr	r1, [pc, #108]	; (c488 <HAL_RadioInit+0x1b0>)
    c41c:	0028      	movs	r0, r5
    c41e:	4b1b      	ldr	r3, [pc, #108]	; (c48c <HAL_RadioInit+0x1b4>)
    c420:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c422:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c424:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c426:	2b00      	cmp	r3, #0
    c428:	d1fc      	bne.n	c424 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c42a:	6813      	ldr	r3, [r2, #0]
    c42c:	2102      	movs	r1, #2
    c42e:	430b      	orrs	r3, r1
    c430:	6013      	str	r3, [r2, #0]
}
    c432:	b010      	add	sp, #64	; 0x40
    c434:	bc1c      	pop	{r2, r3, r4}
    c436:	4690      	mov	r8, r2
    c438:	4699      	mov	r9, r3
    c43a:	46a2      	mov	sl, r4
    c43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c43e:	46c0      	nop			; (mov r8, r8)
    c440:	00004ca1 	.word	0x00004ca1
    c444:	40002900 	.word	0x40002900
    c448:	40002880 	.word	0x40002880
    c44c:	00004965 	.word	0x00004965
    c450:	00004979 	.word	0x00004979
    c454:	0000c281 	.word	0x0000c281
    c458:	00004825 	.word	0x00004825
    c45c:	00004851 	.word	0x00004851
    c460:	0000c261 	.word	0x0000c261
    c464:	0000c241 	.word	0x0000c241
    c468:	20002970 	.word	0x20002970
    c46c:	40002800 	.word	0x40002800
    c470:	00016709 	.word	0x00016709
    c474:	001e8480 	.word	0x001e8480
    c478:	00530005 	.word	0x00530005
    c47c:	003e0005 	.word	0x003e0005
    c480:	00520005 	.word	0x00520005
    c484:	20001b7c 	.word	0x20001b7c
    c488:	42001000 	.word	0x42001000
    c48c:	00005875 	.word	0x00005875

0000c490 <RADIO_Reset>:
{
    c490:	b570      	push	{r4, r5, r6, lr}
    c492:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    c494:	4c0a      	ldr	r4, [pc, #40]	; (c4c0 <RADIO_Reset+0x30>)
    c496:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c498:	4d0a      	ldr	r5, [pc, #40]	; (c4c4 <RADIO_Reset+0x34>)
    c49a:	2680      	movs	r6, #128	; 0x80
    c49c:	0236      	lsls	r6, r6, #8
    c49e:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c4a0:	2001      	movs	r0, #1
    c4a2:	4b09      	ldr	r3, [pc, #36]	; (c4c8 <RADIO_Reset+0x38>)
    c4a4:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c4a6:	a901      	add	r1, sp, #4
    c4a8:	2300      	movs	r3, #0
    c4aa:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c4ac:	2201      	movs	r2, #1
    c4ae:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c4b0:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c4b2:	202f      	movs	r0, #47	; 0x2f
    c4b4:	4b05      	ldr	r3, [pc, #20]	; (c4cc <RADIO_Reset+0x3c>)
    c4b6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c4b8:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c4ba:	47a0      	blx	r4
}
    c4bc:	b002      	add	sp, #8
    c4be:	bd70      	pop	{r4, r5, r6, pc}
    c4c0:	0000c221 	.word	0x0000c221
    c4c4:	40002880 	.word	0x40002880
    c4c8:	0000c66d 	.word	0x0000c66d
    c4cc:	00004ca1 	.word	0x00004ca1

0000c4d0 <RADIO_RegisterWrite>:
{
    c4d0:	b570      	push	{r4, r5, r6, lr}
    c4d2:	0004      	movs	r4, r0
    c4d4:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c4d6:	4b05      	ldr	r3, [pc, #20]	; (c4ec <RADIO_RegisterWrite+0x1c>)
    c4d8:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c4da:	2080      	movs	r0, #128	; 0x80
    c4dc:	4320      	orrs	r0, r4
    c4de:	4c04      	ldr	r4, [pc, #16]	; (c4f0 <RADIO_RegisterWrite+0x20>)
    c4e0:	47a0      	blx	r4
	HAL_SPISend(value);
    c4e2:	0028      	movs	r0, r5
    c4e4:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c4e6:	4b03      	ldr	r3, [pc, #12]	; (c4f4 <RADIO_RegisterWrite+0x24>)
    c4e8:	4798      	blx	r3
}
    c4ea:	bd70      	pop	{r4, r5, r6, pc}
    c4ec:	0000c2a1 	.word	0x0000c2a1
    c4f0:	0000c1cd 	.word	0x0000c1cd
    c4f4:	0000c2bd 	.word	0x0000c2bd

0000c4f8 <RADIO_RegisterRead>:
{
    c4f8:	b510      	push	{r4, lr}
    c4fa:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c4fc:	4b06      	ldr	r3, [pc, #24]	; (c518 <RADIO_RegisterRead+0x20>)
    c4fe:	4798      	blx	r3
	HAL_SPISend(reg);
    c500:	207f      	movs	r0, #127	; 0x7f
    c502:	4020      	ands	r0, r4
    c504:	4c05      	ldr	r4, [pc, #20]	; (c51c <RADIO_RegisterRead+0x24>)
    c506:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    c508:	20ff      	movs	r0, #255	; 0xff
    c50a:	47a0      	blx	r4
    c50c:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    c50e:	4b04      	ldr	r3, [pc, #16]	; (c520 <RADIO_RegisterRead+0x28>)
    c510:	4798      	blx	r3
}
    c512:	0020      	movs	r0, r4
    c514:	bd10      	pop	{r4, pc}
    c516:	46c0      	nop			; (mov r8, r8)
    c518:	0000c2a1 	.word	0x0000c2a1
    c51c:	0000c1cd 	.word	0x0000c1cd
    c520:	0000c2bd 	.word	0x0000c2bd

0000c524 <RADIO_FrameWrite>:
{
    c524:	b570      	push	{r4, r5, r6, lr}
    c526:	0004      	movs	r4, r0
    c528:	000e      	movs	r6, r1
    c52a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c52c:	4b0a      	ldr	r3, [pc, #40]	; (c558 <RADIO_FrameWrite+0x34>)
    c52e:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c530:	2080      	movs	r0, #128	; 0x80
    c532:	4320      	orrs	r0, r4
    c534:	4b09      	ldr	r3, [pc, #36]	; (c55c <RADIO_FrameWrite+0x38>)
    c536:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c538:	2d00      	cmp	r5, #0
    c53a:	d00a      	beq.n	c552 <RADIO_FrameWrite+0x2e>
    c53c:	0034      	movs	r4, r6
    c53e:	3d01      	subs	r5, #1
    c540:	b2ed      	uxtb	r5, r5
    c542:	3501      	adds	r5, #1
    c544:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    c546:	4e05      	ldr	r6, [pc, #20]	; (c55c <RADIO_FrameWrite+0x38>)
    c548:	7820      	ldrb	r0, [r4, #0]
    c54a:	47b0      	blx	r6
    c54c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c54e:	42ac      	cmp	r4, r5
    c550:	d1fa      	bne.n	c548 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    c552:	4b03      	ldr	r3, [pc, #12]	; (c560 <RADIO_FrameWrite+0x3c>)
    c554:	4798      	blx	r3
}
    c556:	bd70      	pop	{r4, r5, r6, pc}
    c558:	0000c2a1 	.word	0x0000c2a1
    c55c:	0000c1cd 	.word	0x0000c1cd
    c560:	0000c2bd 	.word	0x0000c2bd

0000c564 <RADIO_FrameRead>:
{
    c564:	b570      	push	{r4, r5, r6, lr}
    c566:	0004      	movs	r4, r0
    c568:	000e      	movs	r6, r1
    c56a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c56c:	4b0a      	ldr	r3, [pc, #40]	; (c598 <RADIO_FrameRead+0x34>)
    c56e:	4798      	blx	r3
    HAL_SPISend(offset);
    c570:	0020      	movs	r0, r4
    c572:	4b0a      	ldr	r3, [pc, #40]	; (c59c <RADIO_FrameRead+0x38>)
    c574:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c576:	2d00      	cmp	r5, #0
    c578:	d00b      	beq.n	c592 <RADIO_FrameRead+0x2e>
    c57a:	0034      	movs	r4, r6
    c57c:	3d01      	subs	r5, #1
    c57e:	b2ed      	uxtb	r5, r5
    c580:	3501      	adds	r5, #1
    c582:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    c584:	4e05      	ldr	r6, [pc, #20]	; (c59c <RADIO_FrameRead+0x38>)
    c586:	20ff      	movs	r0, #255	; 0xff
    c588:	47b0      	blx	r6
    c58a:	7020      	strb	r0, [r4, #0]
    c58c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c58e:	42ac      	cmp	r4, r5
    c590:	d1f9      	bne.n	c586 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    c592:	4b03      	ldr	r3, [pc, #12]	; (c5a0 <RADIO_FrameRead+0x3c>)
    c594:	4798      	blx	r3
}
    c596:	bd70      	pop	{r4, r5, r6, pc}
    c598:	0000c2a1 	.word	0x0000c2a1
    c59c:	0000c1cd 	.word	0x0000c1cd
    c5a0:	0000c2bd 	.word	0x0000c2bd

0000c5a4 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    c5a4:	2802      	cmp	r0, #2
    c5a6:	d007      	beq.n	c5b8 <HAL_RegisterDioInterruptHandler+0x14>
    c5a8:	2804      	cmp	r0, #4
    c5aa:	d008      	beq.n	c5be <HAL_RegisterDioInterruptHandler+0x1a>
    c5ac:	2801      	cmp	r0, #1
    c5ae:	d000      	beq.n	c5b2 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    c5b0:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    c5b2:	4b04      	ldr	r3, [pc, #16]	; (c5c4 <HAL_RegisterDioInterruptHandler+0x20>)
    c5b4:	6019      	str	r1, [r3, #0]
      break;
    c5b6:	e7fb      	b.n	c5b0 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    c5b8:	4b03      	ldr	r3, [pc, #12]	; (c5c8 <HAL_RegisterDioInterruptHandler+0x24>)
    c5ba:	6019      	str	r1, [r3, #0]
      break;
    c5bc:	e7f8      	b.n	c5b0 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    c5be:	4b03      	ldr	r3, [pc, #12]	; (c5cc <HAL_RegisterDioInterruptHandler+0x28>)
    c5c0:	6019      	str	r1, [r3, #0]
}
    c5c2:	e7f5      	b.n	c5b0 <HAL_RegisterDioInterruptHandler+0xc>
    c5c4:	20001b70 	.word	0x20001b70
    c5c8:	20001b74 	.word	0x20001b74
    c5cc:	20001b78 	.word	0x20001b78

0000c5d0 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c5d0:	2801      	cmp	r0, #1
    c5d2:	d00a      	beq.n	c5ea <HAL_EnableRFCtrl+0x1a>
    c5d4:	2900      	cmp	r1, #0
    c5d6:	d008      	beq.n	c5ea <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    c5d8:	2802      	cmp	r0, #2
    c5da:	d10a      	bne.n	c5f2 <HAL_EnableRFCtrl+0x22>
    c5dc:	2901      	cmp	r1, #1
    c5de:	d108      	bne.n	c5f2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    c5e0:	2280      	movs	r2, #128	; 0x80
    c5e2:	0192      	lsls	r2, r2, #6
    c5e4:	4b03      	ldr	r3, [pc, #12]	; (c5f4 <HAL_EnableRFCtrl+0x24>)
    c5e6:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    c5e8:	e003      	b.n	c5f2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    c5ea:	2280      	movs	r2, #128	; 0x80
    c5ec:	0192      	lsls	r2, r2, #6
    c5ee:	4b01      	ldr	r3, [pc, #4]	; (c5f4 <HAL_EnableRFCtrl+0x24>)
    c5f0:	619a      	str	r2, [r3, #24]
    c5f2:	4770      	bx	lr
    c5f4:	40002800 	.word	0x40002800

0000c5f8 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c5f8:	2801      	cmp	r0, #1
    c5fa:	d001      	beq.n	c600 <HAL_DisableRFCtrl+0x8>
    c5fc:	2900      	cmp	r1, #0
    c5fe:	d103      	bne.n	c608 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    c600:	2280      	movs	r2, #128	; 0x80
    c602:	0192      	lsls	r2, r2, #6
    c604:	4b01      	ldr	r3, [pc, #4]	; (c60c <HAL_DisableRFCtrl+0x14>)
    c606:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    c608:	4770      	bx	lr
    c60a:	46c0      	nop			; (mov r8, r8)
    c60c:	40002800 	.word	0x40002800

0000c610 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    c610:	2002      	movs	r0, #2
    c612:	4770      	bx	lr

0000c614 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    c614:	2000      	movs	r0, #0
    c616:	4770      	bx	lr

0000c618 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    c618:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    c61a:	2280      	movs	r2, #128	; 0x80
    c61c:	0092      	lsls	r2, r2, #2
    c61e:	4b03      	ldr	r3, [pc, #12]	; (c62c <HAL_TCXOPowerOn+0x14>)
    c620:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    c622:	2002      	movs	r0, #2
    c624:	4b02      	ldr	r3, [pc, #8]	; (c630 <HAL_TCXOPowerOn+0x18>)
    c626:	4798      	blx	r3
#endif
}
    c628:	bd10      	pop	{r4, pc}
    c62a:	46c0      	nop			; (mov r8, r8)
    c62c:	40002800 	.word	0x40002800
    c630:	0000453d 	.word	0x0000453d

0000c634 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    c634:	2280      	movs	r2, #128	; 0x80
    c636:	0092      	lsls	r2, r2, #2
    c638:	4b01      	ldr	r3, [pc, #4]	; (c640 <HAL_TCXOPowerOff+0xc>)
    c63a:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    c63c:	4770      	bx	lr
    c63e:	46c0      	nop			; (mov r8, r8)
    c640:	40002800 	.word	0x40002800

0000c644 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    c644:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    c646:	4802      	ldr	r0, [pc, #8]	; (c650 <SleepTimerGetElapsedTime+0xc>)
    c648:	4b02      	ldr	r3, [pc, #8]	; (c654 <SleepTimerGetElapsedTime+0x10>)
    c64a:	4798      	blx	r3
}
    c64c:	bd10      	pop	{r4, pc}
    c64e:	46c0      	nop			; (mov r8, r8)
    c650:	20002974 	.word	0x20002974
    c654:	00004cd1 	.word	0x00004cd1

0000c658 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    c658:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    c65a:	2108      	movs	r1, #8
    c65c:	4801      	ldr	r0, [pc, #4]	; (c664 <SleepTimerStop+0xc>)
    c65e:	4b02      	ldr	r3, [pc, #8]	; (c668 <SleepTimerStop+0x10>)
    c660:	4798      	blx	r3
}
    c662:	bd10      	pop	{r4, pc}
    c664:	20002974 	.word	0x20002974
    c668:	00004cfd 	.word	0x00004cfd

0000c66c <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    c66c:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    c66e:	2800      	cmp	r0, #0
    c670:	d103      	bne.n	c67a <SystemBlockingWaitMs+0xe>
    c672:	2001      	movs	r0, #1
    c674:	4b02      	ldr	r3, [pc, #8]	; (c680 <SystemBlockingWaitMs+0x14>)
    c676:	4798      	blx	r3
#endif
}
    c678:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    c67a:	4b02      	ldr	r3, [pc, #8]	; (c684 <SystemBlockingWaitMs+0x18>)
    c67c:	4798      	blx	r3
    c67e:	e7fb      	b.n	c678 <SystemBlockingWaitMs+0xc>
    c680:	00004511 	.word	0x00004511
    c684:	0000453d 	.word	0x0000453d

0000c688 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    c688:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    c68a:	4b01      	ldr	r3, [pc, #4]	; (c690 <system_enter_critical_section+0x8>)
    c68c:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    c68e:	bd10      	pop	{r4, pc}
    c690:	00004569 	.word	0x00004569

0000c694 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    c694:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    c696:	4b01      	ldr	r3, [pc, #4]	; (c69c <system_leave_critical_section+0x8>)
    c698:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    c69a:	bd10      	pop	{r4, pc}
    c69c:	000045a9 	.word	0x000045a9

0000c6a0 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    c6a0:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    c6a2:	4b16      	ldr	r3, [pc, #88]	; (c6fc <PMM_Wakeup+0x5c>)
    c6a4:	781b      	ldrb	r3, [r3, #0]
    c6a6:	2b01      	cmp	r3, #1
    c6a8:	d000      	beq.n	c6ac <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    c6aa:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    c6ac:	2200      	movs	r2, #0
    c6ae:	4b13      	ldr	r3, [pc, #76]	; (c6fc <PMM_Wakeup+0x5c>)
    c6b0:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    c6b2:	4b13      	ldr	r3, [pc, #76]	; (c700 <PMM_Wakeup+0x60>)
    c6b4:	4798      	blx	r3
    c6b6:	4b13      	ldr	r3, [pc, #76]	; (c704 <PMM_Wakeup+0x64>)
    c6b8:	4798      	blx	r3
    c6ba:	4913      	ldr	r1, [pc, #76]	; (c708 <PMM_Wakeup+0x68>)
    c6bc:	4b13      	ldr	r3, [pc, #76]	; (c70c <PMM_Wakeup+0x6c>)
    c6be:	4798      	blx	r3
    c6c0:	4b13      	ldr	r3, [pc, #76]	; (c710 <PMM_Wakeup+0x70>)
    c6c2:	4798      	blx	r3
    c6c4:	0004      	movs	r4, r0
    c6c6:	000d      	movs	r5, r1
        SleepTimerStop();
    c6c8:	4b12      	ldr	r3, [pc, #72]	; (c714 <PMM_Wakeup+0x74>)
    c6ca:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    c6cc:	0020      	movs	r0, r4
    c6ce:	0029      	movs	r1, r5
    c6d0:	4b11      	ldr	r3, [pc, #68]	; (c718 <PMM_Wakeup+0x78>)
    c6d2:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    c6d4:	4b11      	ldr	r3, [pc, #68]	; (c71c <PMM_Wakeup+0x7c>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	2b00      	cmp	r3, #0
    c6da:	d0e6      	beq.n	c6aa <PMM_Wakeup+0xa>
    c6dc:	689e      	ldr	r6, [r3, #8]
    c6de:	2e00      	cmp	r6, #0
    c6e0:	d0e3      	beq.n	c6aa <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    c6e2:	22fa      	movs	r2, #250	; 0xfa
    c6e4:	0092      	lsls	r2, r2, #2
    c6e6:	2300      	movs	r3, #0
    c6e8:	0020      	movs	r0, r4
    c6ea:	0029      	movs	r1, r5
    c6ec:	4c0c      	ldr	r4, [pc, #48]	; (c720 <PMM_Wakeup+0x80>)
    c6ee:	47a0      	blx	r4
    c6f0:	47b0      	blx	r6
            sleepReq = NULL;
    c6f2:	2200      	movs	r2, #0
    c6f4:	4b09      	ldr	r3, [pc, #36]	; (c71c <PMM_Wakeup+0x7c>)
    c6f6:	601a      	str	r2, [r3, #0]
}
    c6f8:	e7d7      	b.n	c6aa <PMM_Wakeup+0xa>
    c6fa:	46c0      	nop			; (mov r8, r8)
    c6fc:	20001b88 	.word	0x20001b88
    c700:	0000c645 	.word	0x0000c645
    c704:	0001488d 	.word	0x0001488d
    c708:	41f423d7 	.word	0x41f423d7
    c70c:	00014235 	.word	0x00014235
    c710:	00013971 	.word	0x00013971
    c714:	0000c659 	.word	0x0000c659
    c718:	0000d57d 	.word	0x0000d57d
    c71c:	20001b8c 	.word	0x20001b8c
    c720:	00013871 	.word	0x00013871

0000c724 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    c724:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    c726:	4c39      	ldr	r4, [pc, #228]	; (c80c <InitDefault868Channels+0xe8>)
    c728:	7920      	ldrb	r0, [r4, #4]
    c72a:	7963      	ldrb	r3, [r4, #5]
    c72c:	021b      	lsls	r3, r3, #8
    c72e:	4303      	orrs	r3, r0
    c730:	79a0      	ldrb	r0, [r4, #6]
    c732:	0400      	lsls	r0, r0, #16
    c734:	4303      	orrs	r3, r0
    c736:	79e0      	ldrb	r0, [r4, #7]
    c738:	0600      	lsls	r0, r0, #24
    c73a:	4318      	orrs	r0, r3
    c73c:	2206      	movs	r2, #6
    c73e:	2100      	movs	r1, #0
    c740:	4e33      	ldr	r6, [pc, #204]	; (c810 <InitDefault868Channels+0xec>)
    c742:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    c744:	7920      	ldrb	r0, [r4, #4]
    c746:	7963      	ldrb	r3, [r4, #5]
    c748:	021b      	lsls	r3, r3, #8
    c74a:	4303      	orrs	r3, r0
    c74c:	79a0      	ldrb	r0, [r4, #6]
    c74e:	0400      	lsls	r0, r0, #16
    c750:	4303      	orrs	r3, r0
    c752:	79e0      	ldrb	r0, [r4, #7]
    c754:	0600      	lsls	r0, r0, #24
    c756:	4318      	orrs	r0, r3
    c758:	2206      	movs	r2, #6
    c75a:	492e      	ldr	r1, [pc, #184]	; (c814 <InitDefault868Channels+0xf0>)
    c75c:	4d2e      	ldr	r5, [pc, #184]	; (c818 <InitDefault868Channels+0xf4>)
    c75e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    c760:	7a20      	ldrb	r0, [r4, #8]
    c762:	7a63      	ldrb	r3, [r4, #9]
    c764:	021b      	lsls	r3, r3, #8
    c766:	4303      	orrs	r3, r0
    c768:	7aa0      	ldrb	r0, [r4, #10]
    c76a:	0400      	lsls	r0, r0, #16
    c76c:	4303      	orrs	r3, r0
    c76e:	7ae0      	ldrb	r0, [r4, #11]
    c770:	0600      	lsls	r0, r0, #24
    c772:	4318      	orrs	r0, r3
    c774:	2224      	movs	r2, #36	; 0x24
    c776:	2100      	movs	r1, #0
    c778:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    c77a:	7a20      	ldrb	r0, [r4, #8]
    c77c:	7a63      	ldrb	r3, [r4, #9]
    c77e:	021b      	lsls	r3, r3, #8
    c780:	4303      	orrs	r3, r0
    c782:	7aa0      	ldrb	r0, [r4, #10]
    c784:	0400      	lsls	r0, r0, #16
    c786:	4303      	orrs	r3, r0
    c788:	7ae0      	ldrb	r0, [r4, #11]
    c78a:	0600      	lsls	r0, r0, #24
    c78c:	4318      	orrs	r0, r3
    c78e:	2224      	movs	r2, #36	; 0x24
    c790:	4922      	ldr	r1, [pc, #136]	; (c81c <InitDefault868Channels+0xf8>)
    c792:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    c794:	7b20      	ldrb	r0, [r4, #12]
    c796:	7b63      	ldrb	r3, [r4, #13]
    c798:	021b      	lsls	r3, r3, #8
    c79a:	4303      	orrs	r3, r0
    c79c:	7ba0      	ldrb	r0, [r4, #14]
    c79e:	0400      	lsls	r0, r0, #16
    c7a0:	4303      	orrs	r3, r0
    c7a2:	7be0      	ldrb	r0, [r4, #15]
    c7a4:	0600      	lsls	r0, r0, #24
    c7a6:	4318      	orrs	r0, r3
    c7a8:	2248      	movs	r2, #72	; 0x48
    c7aa:	2100      	movs	r1, #0
    c7ac:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    c7ae:	7b20      	ldrb	r0, [r4, #12]
    c7b0:	7b63      	ldrb	r3, [r4, #13]
    c7b2:	021b      	lsls	r3, r3, #8
    c7b4:	4303      	orrs	r3, r0
    c7b6:	7ba0      	ldrb	r0, [r4, #14]
    c7b8:	0400      	lsls	r0, r0, #16
    c7ba:	4303      	orrs	r3, r0
    c7bc:	7be0      	ldrb	r0, [r4, #15]
    c7be:	0600      	lsls	r0, r0, #24
    c7c0:	4318      	orrs	r0, r3
    c7c2:	2248      	movs	r2, #72	; 0x48
    c7c4:	4916      	ldr	r1, [pc, #88]	; (c820 <InitDefault868Channels+0xfc>)
    c7c6:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    c7c8:	0020      	movs	r0, r4
    c7ca:	30af      	adds	r0, #175	; 0xaf
    c7cc:	30ff      	adds	r0, #255	; 0xff
    c7ce:	220c      	movs	r2, #12
    c7d0:	4914      	ldr	r1, [pc, #80]	; (c824 <InitDefault868Channels+0x100>)
    c7d2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    c7d4:	232a      	movs	r3, #42	; 0x2a
    c7d6:	56e3      	ldrsb	r3, [r4, r3]
    c7d8:	2b03      	cmp	r3, #3
    c7da:	dd15      	ble.n	c808 <InitDefault868Channels+0xe4>
    c7dc:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c7de:	480b      	ldr	r0, [pc, #44]	; (c80c <InitDefault868Channels+0xe8>)
    c7e0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c7e2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c7e4:	7902      	ldrb	r2, [r0, #4]
    c7e6:	7941      	ldrb	r1, [r0, #5]
    c7e8:	0209      	lsls	r1, r1, #8
    c7ea:	4311      	orrs	r1, r2
    c7ec:	7982      	ldrb	r2, [r0, #6]
    c7ee:	0412      	lsls	r2, r2, #16
    c7f0:	4311      	orrs	r1, r2
    c7f2:	79c2      	ldrb	r2, [r0, #7]
    c7f4:	0612      	lsls	r2, r2, #24
    c7f6:	430a      	orrs	r2, r1
    c7f8:	0059      	lsls	r1, r3, #1
    c7fa:	188a      	adds	r2, r1, r2
    c7fc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c7fe:	3301      	adds	r3, #1
    c800:	b2db      	uxtb	r3, r3
    c802:	5702      	ldrsb	r2, [r0, r4]
    c804:	4293      	cmp	r3, r2
    c806:	dbed      	blt.n	c7e4 <InitDefault868Channels+0xc0>
    }
}
    c808:	bd70      	pop	{r4, r5, r6, pc}
    c80a:	46c0      	nop			; (mov r8, r8)
    c80c:	200029b0 	.word	0x200029b0
    c810:	00016709 	.word	0x00016709
    c814:	00018a90 	.word	0x00018a90
    c818:	000166f7 	.word	0x000166f7
    c81c:	00018a64 	.word	0x00018a64
    c820:	00018ab0 	.word	0x00018ab0
    c824:	00018a98 	.word	0x00018a98

0000c828 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    c828:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    c82a:	4c36      	ldr	r4, [pc, #216]	; (c904 <InitDefault433Channels+0xdc>)
    c82c:	7920      	ldrb	r0, [r4, #4]
    c82e:	7963      	ldrb	r3, [r4, #5]
    c830:	021b      	lsls	r3, r3, #8
    c832:	4303      	orrs	r3, r0
    c834:	79a0      	ldrb	r0, [r4, #6]
    c836:	0400      	lsls	r0, r0, #16
    c838:	4303      	orrs	r3, r0
    c83a:	79e0      	ldrb	r0, [r4, #7]
    c83c:	0600      	lsls	r0, r0, #24
    c83e:	4318      	orrs	r0, r3
    c840:	2206      	movs	r2, #6
    c842:	2100      	movs	r1, #0
    c844:	4e30      	ldr	r6, [pc, #192]	; (c908 <InitDefault433Channels+0xe0>)
    c846:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    c848:	7920      	ldrb	r0, [r4, #4]
    c84a:	7963      	ldrb	r3, [r4, #5]
    c84c:	021b      	lsls	r3, r3, #8
    c84e:	4303      	orrs	r3, r0
    c850:	79a0      	ldrb	r0, [r4, #6]
    c852:	0400      	lsls	r0, r0, #16
    c854:	4303      	orrs	r3, r0
    c856:	79e0      	ldrb	r0, [r4, #7]
    c858:	0600      	lsls	r0, r0, #24
    c85a:	4318      	orrs	r0, r3
    c85c:	2206      	movs	r2, #6
    c85e:	492b      	ldr	r1, [pc, #172]	; (c90c <InitDefault433Channels+0xe4>)
    c860:	4d2b      	ldr	r5, [pc, #172]	; (c910 <InitDefault433Channels+0xe8>)
    c862:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    c864:	7a20      	ldrb	r0, [r4, #8]
    c866:	7a63      	ldrb	r3, [r4, #9]
    c868:	021b      	lsls	r3, r3, #8
    c86a:	4303      	orrs	r3, r0
    c86c:	7aa0      	ldrb	r0, [r4, #10]
    c86e:	0400      	lsls	r0, r0, #16
    c870:	4303      	orrs	r3, r0
    c872:	7ae0      	ldrb	r0, [r4, #11]
    c874:	0600      	lsls	r0, r0, #24
    c876:	4318      	orrs	r0, r3
    c878:	2224      	movs	r2, #36	; 0x24
    c87a:	2100      	movs	r1, #0
    c87c:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    c87e:	7a20      	ldrb	r0, [r4, #8]
    c880:	7a63      	ldrb	r3, [r4, #9]
    c882:	021b      	lsls	r3, r3, #8
    c884:	4303      	orrs	r3, r0
    c886:	7aa0      	ldrb	r0, [r4, #10]
    c888:	0400      	lsls	r0, r0, #16
    c88a:	4303      	orrs	r3, r0
    c88c:	7ae0      	ldrb	r0, [r4, #11]
    c88e:	0600      	lsls	r0, r0, #24
    c890:	4318      	orrs	r0, r3
    c892:	2224      	movs	r2, #36	; 0x24
    c894:	491f      	ldr	r1, [pc, #124]	; (c914 <InitDefault433Channels+0xec>)
    c896:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    c898:	7b20      	ldrb	r0, [r4, #12]
    c89a:	7b63      	ldrb	r3, [r4, #13]
    c89c:	021b      	lsls	r3, r3, #8
    c89e:	4303      	orrs	r3, r0
    c8a0:	7ba0      	ldrb	r0, [r4, #14]
    c8a2:	0400      	lsls	r0, r0, #16
    c8a4:	4303      	orrs	r3, r0
    c8a6:	7be0      	ldrb	r0, [r4, #15]
    c8a8:	0600      	lsls	r0, r0, #24
    c8aa:	4318      	orrs	r0, r3
    c8ac:	220c      	movs	r2, #12
    c8ae:	2100      	movs	r1, #0
    c8b0:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    c8b2:	7b20      	ldrb	r0, [r4, #12]
    c8b4:	7b63      	ldrb	r3, [r4, #13]
    c8b6:	021b      	lsls	r3, r3, #8
    c8b8:	4303      	orrs	r3, r0
    c8ba:	7ba0      	ldrb	r0, [r4, #14]
    c8bc:	0400      	lsls	r0, r0, #16
    c8be:	4303      	orrs	r3, r0
    c8c0:	7be0      	ldrb	r0, [r4, #15]
    c8c2:	0600      	lsls	r0, r0, #24
    c8c4:	4318      	orrs	r0, r3
    c8c6:	220c      	movs	r2, #12
    c8c8:	4913      	ldr	r1, [pc, #76]	; (c918 <InitDefault433Channels+0xf0>)
    c8ca:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    c8cc:	232a      	movs	r3, #42	; 0x2a
    c8ce:	56e3      	ldrsb	r3, [r4, r3]
    c8d0:	2b03      	cmp	r3, #3
    c8d2:	dd15      	ble.n	c900 <InitDefault433Channels+0xd8>
    c8d4:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c8d6:	480b      	ldr	r0, [pc, #44]	; (c904 <InitDefault433Channels+0xdc>)
    c8d8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c8da:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c8dc:	7902      	ldrb	r2, [r0, #4]
    c8de:	7941      	ldrb	r1, [r0, #5]
    c8e0:	0209      	lsls	r1, r1, #8
    c8e2:	4311      	orrs	r1, r2
    c8e4:	7982      	ldrb	r2, [r0, #6]
    c8e6:	0412      	lsls	r2, r2, #16
    c8e8:	4311      	orrs	r1, r2
    c8ea:	79c2      	ldrb	r2, [r0, #7]
    c8ec:	0612      	lsls	r2, r2, #24
    c8ee:	430a      	orrs	r2, r1
    c8f0:	0059      	lsls	r1, r3, #1
    c8f2:	188a      	adds	r2, r1, r2
    c8f4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c8f6:	3301      	adds	r3, #1
    c8f8:	b2db      	uxtb	r3, r3
    c8fa:	5702      	ldrsb	r2, [r0, r4]
    c8fc:	4293      	cmp	r3, r2
    c8fe:	dbed      	blt.n	c8dc <InitDefault433Channels+0xb4>
    }
}
    c900:	bd70      	pop	{r4, r5, r6, pc}
    c902:	46c0      	nop			; (mov r8, r8)
    c904:	200029b0 	.word	0x200029b0
    c908:	00016709 	.word	0x00016709
    c90c:	00018a88 	.word	0x00018a88
    c910:	000166f7 	.word	0x000166f7
    c914:	00018a40 	.word	0x00018a40
    c918:	00018aa4 	.word	0x00018aa4

0000c91c <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    c91e:	4c40      	ldr	r4, [pc, #256]	; (ca20 <InitDefault920Channels+0x104>)
    c920:	7920      	ldrb	r0, [r4, #4]
    c922:	7963      	ldrb	r3, [r4, #5]
    c924:	021b      	lsls	r3, r3, #8
    c926:	4303      	orrs	r3, r0
    c928:	79a0      	ldrb	r0, [r4, #6]
    c92a:	0400      	lsls	r0, r0, #16
    c92c:	4303      	orrs	r3, r0
    c92e:	79e0      	ldrb	r0, [r4, #7]
    c930:	0600      	lsls	r0, r0, #24
    c932:	4318      	orrs	r0, r3
    c934:	2204      	movs	r2, #4
    c936:	2100      	movs	r1, #0
    c938:	4e3a      	ldr	r6, [pc, #232]	; (ca24 <InitDefault920Channels+0x108>)
    c93a:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    c93c:	7a20      	ldrb	r0, [r4, #8]
    c93e:	7a63      	ldrb	r3, [r4, #9]
    c940:	021b      	lsls	r3, r3, #8
    c942:	4303      	orrs	r3, r0
    c944:	7aa0      	ldrb	r0, [r4, #10]
    c946:	0400      	lsls	r0, r0, #16
    c948:	4303      	orrs	r3, r0
    c94a:	7ae0      	ldrb	r0, [r4, #11]
    c94c:	0600      	lsls	r0, r0, #24
    c94e:	4318      	orrs	r0, r3
    c950:	2218      	movs	r2, #24
    c952:	2100      	movs	r1, #0
    c954:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    c956:	7920      	ldrb	r0, [r4, #4]
    c958:	7963      	ldrb	r3, [r4, #5]
    c95a:	021b      	lsls	r3, r3, #8
    c95c:	4303      	orrs	r3, r0
    c95e:	79a0      	ldrb	r0, [r4, #6]
    c960:	0400      	lsls	r0, r0, #16
    c962:	4303      	orrs	r3, r0
    c964:	79e0      	ldrb	r0, [r4, #7]
    c966:	0600      	lsls	r0, r0, #24
    c968:	4318      	orrs	r0, r3
    c96a:	2204      	movs	r2, #4
    c96c:	492e      	ldr	r1, [pc, #184]	; (ca28 <InitDefault920Channels+0x10c>)
    c96e:	4d2f      	ldr	r5, [pc, #188]	; (ca2c <InitDefault920Channels+0x110>)
    c970:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    c972:	7a20      	ldrb	r0, [r4, #8]
    c974:	7a63      	ldrb	r3, [r4, #9]
    c976:	021b      	lsls	r3, r3, #8
    c978:	4303      	orrs	r3, r0
    c97a:	7aa0      	ldrb	r0, [r4, #10]
    c97c:	0400      	lsls	r0, r0, #16
    c97e:	4303      	orrs	r3, r0
    c980:	7ae0      	ldrb	r0, [r4, #11]
    c982:	0600      	lsls	r0, r0, #24
    c984:	4318      	orrs	r0, r3
    c986:	2218      	movs	r2, #24
    c988:	4929      	ldr	r1, [pc, #164]	; (ca30 <InitDefault920Channels+0x114>)
    c98a:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    c98c:	7b20      	ldrb	r0, [r4, #12]
    c98e:	7b63      	ldrb	r3, [r4, #13]
    c990:	021b      	lsls	r3, r3, #8
    c992:	4303      	orrs	r3, r0
    c994:	7ba0      	ldrb	r0, [r4, #14]
    c996:	0400      	lsls	r0, r0, #16
    c998:	4303      	orrs	r3, r0
    c99a:	7be0      	ldrb	r0, [r4, #15]
    c99c:	0600      	lsls	r0, r0, #24
    c99e:	4318      	orrs	r0, r3
    c9a0:	2218      	movs	r2, #24
    c9a2:	2100      	movs	r1, #0
    c9a4:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    c9a6:	7b20      	ldrb	r0, [r4, #12]
    c9a8:	7b63      	ldrb	r3, [r4, #13]
    c9aa:	021b      	lsls	r3, r3, #8
    c9ac:	4303      	orrs	r3, r0
    c9ae:	7ba0      	ldrb	r0, [r4, #14]
    c9b0:	0400      	lsls	r0, r0, #16
    c9b2:	4303      	orrs	r3, r0
    c9b4:	7be0      	ldrb	r0, [r4, #15]
    c9b6:	0600      	lsls	r0, r0, #24
    c9b8:	4318      	orrs	r0, r3
    c9ba:	2218      	movs	r2, #24
    c9bc:	491d      	ldr	r1, [pc, #116]	; (ca34 <InitDefault920Channels+0x118>)
    c9be:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    c9c0:	0020      	movs	r0, r4
    c9c2:	30af      	adds	r0, #175	; 0xaf
    c9c4:	30ff      	adds	r0, #255	; 0xff
    c9c6:	2204      	movs	r2, #4
    c9c8:	491b      	ldr	r1, [pc, #108]	; (ca38 <InitDefault920Channels+0x11c>)
    c9ca:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    c9cc:	232a      	movs	r3, #42	; 0x2a
    c9ce:	56e3      	ldrsb	r3, [r4, r3]
    c9d0:	2b02      	cmp	r3, #2
    c9d2:	dd1f      	ble.n	ca14 <InitDefault920Channels+0xf8>
    c9d4:	2302      	movs	r3, #2
    c9d6:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c9d8:	4911      	ldr	r1, [pc, #68]	; (ca20 <InitDefault920Channels+0x104>)
    c9da:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c9dc:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    c9de:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c9e0:	7908      	ldrb	r0, [r1, #4]
    c9e2:	794c      	ldrb	r4, [r1, #5]
    c9e4:	0224      	lsls	r4, r4, #8
    c9e6:	4304      	orrs	r4, r0
    c9e8:	7988      	ldrb	r0, [r1, #6]
    c9ea:	0400      	lsls	r0, r0, #16
    c9ec:	4304      	orrs	r4, r0
    c9ee:	79c8      	ldrb	r0, [r1, #7]
    c9f0:	0600      	lsls	r0, r0, #24
    c9f2:	4320      	orrs	r0, r4
    c9f4:	0054      	lsls	r4, r2, #1
    c9f6:	1820      	adds	r0, r4, r0
    c9f8:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c9fa:	3358      	adds	r3, #88	; 0x58
    c9fc:	009b      	lsls	r3, r3, #2
    c9fe:	18cb      	adds	r3, r1, r3
    ca00:	725d      	strb	r5, [r3, #9]
    ca02:	729d      	strb	r5, [r3, #10]
    ca04:	72dd      	strb	r5, [r3, #11]
    ca06:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    ca08:	3201      	adds	r2, #1
    ca0a:	b2d2      	uxtb	r2, r2
    ca0c:	0013      	movs	r3, r2
    ca0e:	5788      	ldrsb	r0, [r1, r6]
    ca10:	4282      	cmp	r2, r0
    ca12:	dbe5      	blt.n	c9e0 <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    ca14:	21ff      	movs	r1, #255	; 0xff
    ca16:	2330      	movs	r3, #48	; 0x30
    ca18:	4a01      	ldr	r2, [pc, #4]	; (ca20 <InitDefault920Channels+0x104>)
    ca1a:	54d1      	strb	r1, [r2, r3]
}
    ca1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	200029b0 	.word	0x200029b0
    ca24:	00016709 	.word	0x00016709
    ca28:	00018b10 	.word	0x00018b10
    ca2c:	000166f7 	.word	0x000166f7
    ca30:	00018af8 	.word	0x00018af8
    ca34:	00018b18 	.word	0x00018b18
    ca38:	00018b14 	.word	0x00018b14

0000ca3c <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca3e:	46d6      	mov	lr, sl
    ca40:	464f      	mov	r7, r9
    ca42:	4646      	mov	r6, r8
    ca44:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    ca46:	4c46      	ldr	r4, [pc, #280]	; (cb60 <InitDefault920ChannelsKR+0x124>)
    ca48:	7920      	ldrb	r0, [r4, #4]
    ca4a:	7963      	ldrb	r3, [r4, #5]
    ca4c:	021b      	lsls	r3, r3, #8
    ca4e:	4303      	orrs	r3, r0
    ca50:	79a0      	ldrb	r0, [r4, #6]
    ca52:	0400      	lsls	r0, r0, #16
    ca54:	4303      	orrs	r3, r0
    ca56:	79e0      	ldrb	r0, [r4, #7]
    ca58:	0600      	lsls	r0, r0, #24
    ca5a:	4318      	orrs	r0, r3
    ca5c:	2206      	movs	r2, #6
    ca5e:	2100      	movs	r1, #0
    ca60:	4d40      	ldr	r5, [pc, #256]	; (cb64 <InitDefault920ChannelsKR+0x128>)
    ca62:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    ca64:	7a20      	ldrb	r0, [r4, #8]
    ca66:	7a63      	ldrb	r3, [r4, #9]
    ca68:	021b      	lsls	r3, r3, #8
    ca6a:	4303      	orrs	r3, r0
    ca6c:	7aa0      	ldrb	r0, [r4, #10]
    ca6e:	0400      	lsls	r0, r0, #16
    ca70:	4303      	orrs	r3, r0
    ca72:	7ae0      	ldrb	r0, [r4, #11]
    ca74:	0600      	lsls	r0, r0, #24
    ca76:	4318      	orrs	r0, r3
    ca78:	2224      	movs	r2, #36	; 0x24
    ca7a:	2100      	movs	r1, #0
    ca7c:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    ca7e:	7920      	ldrb	r0, [r4, #4]
    ca80:	7963      	ldrb	r3, [r4, #5]
    ca82:	021b      	lsls	r3, r3, #8
    ca84:	4303      	orrs	r3, r0
    ca86:	79a0      	ldrb	r0, [r4, #6]
    ca88:	0400      	lsls	r0, r0, #16
    ca8a:	4303      	orrs	r3, r0
    ca8c:	79e0      	ldrb	r0, [r4, #7]
    ca8e:	0600      	lsls	r0, r0, #24
    ca90:	4318      	orrs	r0, r3
    ca92:	2206      	movs	r2, #6
    ca94:	4934      	ldr	r1, [pc, #208]	; (cb68 <InitDefault920ChannelsKR+0x12c>)
    ca96:	4d35      	ldr	r5, [pc, #212]	; (cb6c <InitDefault920ChannelsKR+0x130>)
    ca98:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    ca9a:	7a20      	ldrb	r0, [r4, #8]
    ca9c:	7a63      	ldrb	r3, [r4, #9]
    ca9e:	021b      	lsls	r3, r3, #8
    caa0:	4303      	orrs	r3, r0
    caa2:	7aa0      	ldrb	r0, [r4, #10]
    caa4:	0400      	lsls	r0, r0, #16
    caa6:	4303      	orrs	r3, r0
    caa8:	7ae0      	ldrb	r0, [r4, #11]
    caaa:	0600      	lsls	r0, r0, #24
    caac:	4318      	orrs	r0, r3
    caae:	2224      	movs	r2, #36	; 0x24
    cab0:	492f      	ldr	r1, [pc, #188]	; (cb70 <InitDefault920ChannelsKR+0x134>)
    cab2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    cab4:	232a      	movs	r3, #42	; 0x2a
    cab6:	56e3      	ldrsb	r3, [r4, r3]
    cab8:	2b03      	cmp	r3, #3
    caba:	dd48      	ble.n	cb4e <InitDefault920ChannelsKR+0x112>
    cabc:	2103      	movs	r1, #3
    cabe:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cac0:	4b27      	ldr	r3, [pc, #156]	; (cb60 <InitDefault920ChannelsKR+0x124>)
    cac2:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    cac4:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    cac6:	22e1      	movs	r2, #225	; 0xe1
    cac8:	0052      	lsls	r2, r2, #1
    caca:	4690      	mov	r8, r2
    cacc:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    cace:	3a99      	subs	r2, #153	; 0x99
    cad0:	3aff      	subs	r2, #255	; 0xff
    cad2:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cad4:	0042      	lsls	r2, r0, #1
    cad6:	791c      	ldrb	r4, [r3, #4]
    cad8:	46a1      	mov	r9, r4
    cada:	795c      	ldrb	r4, [r3, #5]
    cadc:	0224      	lsls	r4, r4, #8
    cade:	464f      	mov	r7, r9
    cae0:	4327      	orrs	r7, r4
    cae2:	799c      	ldrb	r4, [r3, #6]
    cae4:	0424      	lsls	r4, r4, #16
    cae6:	4327      	orrs	r7, r4
    cae8:	79dc      	ldrb	r4, [r3, #7]
    caea:	0624      	lsls	r4, r4, #24
    caec:	433c      	orrs	r4, r7
    caee:	18a4      	adds	r4, r4, r2
    caf0:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    caf2:	791c      	ldrb	r4, [r3, #4]
    caf4:	46a1      	mov	r9, r4
    caf6:	795c      	ldrb	r4, [r3, #5]
    caf8:	0224      	lsls	r4, r4, #8
    cafa:	464f      	mov	r7, r9
    cafc:	4327      	orrs	r7, r4
    cafe:	799c      	ldrb	r4, [r3, #6]
    cb00:	0424      	lsls	r4, r4, #16
    cb02:	4327      	orrs	r7, r4
    cb04:	79dc      	ldrb	r4, [r3, #7]
    cb06:	0624      	lsls	r4, r4, #24
    cb08:	433c      	orrs	r4, r7
    cb0a:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    cb0c:	7a1c      	ldrb	r4, [r3, #8]
    cb0e:	46a1      	mov	r9, r4
    cb10:	7a5c      	ldrb	r4, [r3, #9]
    cb12:	0224      	lsls	r4, r4, #8
    cb14:	464f      	mov	r7, r9
    cb16:	4327      	orrs	r7, r4
    cb18:	7a9c      	ldrb	r4, [r3, #10]
    cb1a:	0424      	lsls	r4, r4, #16
    cb1c:	4327      	orrs	r7, r4
    cb1e:	7adc      	ldrb	r4, [r3, #11]
    cb20:	0624      	lsls	r4, r4, #24
    cb22:	433c      	orrs	r4, r7
    cb24:	1812      	adds	r2, r2, r0
    cb26:	0092      	lsls	r2, r2, #2
    cb28:	1912      	adds	r2, r2, r4
    cb2a:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    cb2c:	4642      	mov	r2, r8
    cb2e:	4664      	mov	r4, ip
    cb30:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    cb32:	3158      	adds	r1, #88	; 0x58
    cb34:	0089      	lsls	r1, r1, #2
    cb36:	1859      	adds	r1, r3, r1
    cb38:	724d      	strb	r5, [r1, #9]
    cb3a:	728d      	strb	r5, [r1, #10]
    cb3c:	72cd      	strb	r5, [r1, #11]
    cb3e:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    cb40:	3001      	adds	r0, #1
    cb42:	b2c0      	uxtb	r0, r0
    cb44:	0001      	movs	r1, r0
    cb46:	4652      	mov	r2, sl
    cb48:	569a      	ldrsb	r2, [r3, r2]
    cb4a:	4290      	cmp	r0, r2
    cb4c:	dbc2      	blt.n	cad4 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    cb4e:	21ff      	movs	r1, #255	; 0xff
    cb50:	2330      	movs	r3, #48	; 0x30
    cb52:	4a03      	ldr	r2, [pc, #12]	; (cb60 <InitDefault920ChannelsKR+0x124>)
    cb54:	54d1      	strb	r1, [r2, r3]
}
    cb56:	bc1c      	pop	{r2, r3, r4}
    cb58:	4690      	mov	r8, r2
    cb5a:	4699      	mov	r9, r3
    cb5c:	46a2      	mov	sl, r4
    cb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb60:	200029b0 	.word	0x200029b0
    cb64:	00016709 	.word	0x00016709
    cb68:	00018b54 	.word	0x00018b54
    cb6c:	000166f7 	.word	0x000166f7
    cb70:	00018b30 	.word	0x00018b30

0000cb74 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    cb74:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    cb76:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    cb78:	283c      	cmp	r0, #60	; 0x3c
    cb7a:	d901      	bls.n	cb80 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    cb7c:	0018      	movs	r0, r3
    cb7e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    cb80:	0084      	lsls	r4, r0, #2
    cb82:	4b02      	ldr	r3, [pc, #8]	; (cb8c <LORAREG_GetAttr+0x18>)
    cb84:	58e3      	ldr	r3, [r4, r3]
    cb86:	4798      	blx	r3
    cb88:	0003      	movs	r3, r0
    cb8a:	e7f7      	b.n	cb7c <LORAREG_GetAttr+0x8>
    cb8c:	20001b90 	.word	0x20001b90

0000cb90 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    cb90:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    cb92:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    cb94:	283c      	cmp	r0, #60	; 0x3c
    cb96:	d901      	bls.n	cb9c <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    cb98:	0018      	movs	r0, r3
    cb9a:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    cb9c:	0082      	lsls	r2, r0, #2
    cb9e:	4b02      	ldr	r3, [pc, #8]	; (cba8 <LORAREG_ValidateAttr+0x18>)
    cba0:	58d3      	ldr	r3, [r2, r3]
    cba2:	4798      	blx	r3
    cba4:	0003      	movs	r3, r0
    cba6:	e7f7      	b.n	cb98 <LORAREG_ValidateAttr+0x8>
    cba8:	20001d78 	.word	0x20001d78

0000cbac <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    cbac:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    cbae:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    cbb0:	283c      	cmp	r0, #60	; 0x3c
    cbb2:	d901      	bls.n	cbb8 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    cbb4:	0018      	movs	r0, r3
    cbb6:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    cbb8:	0082      	lsls	r2, r0, #2
    cbba:	4b02      	ldr	r3, [pc, #8]	; (cbc4 <LORAREG_SetAttr+0x18>)
    cbbc:	58d3      	ldr	r3, [r2, r3]
    cbbe:	4798      	blx	r3
    cbc0:	0003      	movs	r3, r0
    cbc2:	e7f7      	b.n	cbb4 <LORAREG_SetAttr+0x8>
    cbc4:	20001c84 	.word	0x20001c84

0000cbc8 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    cbc8:	2800      	cmp	r0, #0
    cbca:	d00e      	beq.n	cbea <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    cbcc:	2805      	cmp	r0, #5
    cbce:	d013      	beq.n	cbf8 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    cbd0:	2804      	cmp	r0, #4
    cbd2:	d017      	beq.n	cc04 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    cbd4:	2803      	cmp	r0, #3
    cbd6:	d01b      	beq.n	cc10 <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    cbd8:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    cbda:	2802      	cmp	r0, #2
    cbdc:	d10a      	bne.n	cbf4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    cbde:	2107      	movs	r1, #7
    cbe0:	331d      	adds	r3, #29
    cbe2:	4a0e      	ldr	r2, [pc, #56]	; (cc1c <setDefaultTxPower+0x54>)
    cbe4:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cbe6:	3b1f      	subs	r3, #31
    cbe8:	e004      	b.n	cbf4 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    cbea:	2101      	movs	r1, #1
    cbec:	2327      	movs	r3, #39	; 0x27
    cbee:	4a0b      	ldr	r2, [pc, #44]	; (cc1c <setDefaultTxPower+0x54>)
    cbf0:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cbf2:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    cbf4:	0018      	movs	r0, r3
    cbf6:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    cbf8:	2101      	movs	r1, #1
    cbfa:	2327      	movs	r3, #39	; 0x27
    cbfc:	4a07      	ldr	r2, [pc, #28]	; (cc1c <setDefaultTxPower+0x54>)
    cbfe:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cc00:	3b1f      	subs	r3, #31
    cc02:	e7f7      	b.n	cbf4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    cc04:	2101      	movs	r1, #1
    cc06:	2327      	movs	r3, #39	; 0x27
    cc08:	4a04      	ldr	r2, [pc, #16]	; (cc1c <setDefaultTxPower+0x54>)
    cc0a:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cc0c:	3b1f      	subs	r3, #31
    cc0e:	e7f1      	b.n	cbf4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    cc10:	2107      	movs	r1, #7
    cc12:	2327      	movs	r3, #39	; 0x27
    cc14:	4a01      	ldr	r2, [pc, #4]	; (cc1c <setDefaultTxPower+0x54>)
    cc16:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    cc18:	3b1f      	subs	r3, #31
    cc1a:	e7eb      	b.n	cbf4 <setDefaultTxPower+0x2c>
    cc1c:	200029b0 	.word	0x200029b0

0000cc20 <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    cc20:	b510      	push	{r4, lr}
    cc22:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    cc24:	490a      	ldr	r1, [pc, #40]	; (cc50 <Enableallchannels+0x30>)
    cc26:	2401      	movs	r4, #1
    cc28:	790b      	ldrb	r3, [r1, #4]
    cc2a:	794a      	ldrb	r2, [r1, #5]
    cc2c:	0212      	lsls	r2, r2, #8
    cc2e:	431a      	orrs	r2, r3
    cc30:	798b      	ldrb	r3, [r1, #6]
    cc32:	041b      	lsls	r3, r3, #16
    cc34:	431a      	orrs	r2, r3
    cc36:	79cb      	ldrb	r3, [r1, #7]
    cc38:	061b      	lsls	r3, r3, #24
    cc3a:	4313      	orrs	r3, r2
    cc3c:	541c      	strb	r4, [r3, r0]
    cc3e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    cc40:	2890      	cmp	r0, #144	; 0x90
    cc42:	d1f1      	bne.n	cc28 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    cc44:	2100      	movs	r1, #0
    cc46:	23ac      	movs	r3, #172	; 0xac
    cc48:	005b      	lsls	r3, r3, #1
    cc4a:	4a01      	ldr	r2, [pc, #4]	; (cc50 <Enableallchannels+0x30>)
    cc4c:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    cc4e:	bd10      	pop	{r4, pc}
    cc50:	200029b0 	.word	0x200029b0

0000cc54 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    cc54:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    cc56:	2800      	cmp	r0, #0
    cc58:	d00a      	beq.n	cc70 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    cc5a:	2801      	cmp	r0, #1
    cc5c:	d00b      	beq.n	cc76 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    cc5e:	2805      	cmp	r0, #5
    cc60:	d00c      	beq.n	cc7c <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    cc62:	2804      	cmp	r0, #4
    cc64:	d00d      	beq.n	cc82 <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    cc66:	3802      	subs	r0, #2
    cc68:	2801      	cmp	r0, #1
    cc6a:	d90d      	bls.n	cc88 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    cc6c:	2008      	movs	r0, #8
    cc6e:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    cc70:	4b07      	ldr	r3, [pc, #28]	; (cc90 <LORAREG_EnableallChannels+0x3c>)
    cc72:	4798      	blx	r3
    cc74:	e7fa      	b.n	cc6c <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    cc76:	4b07      	ldr	r3, [pc, #28]	; (cc94 <LORAREG_EnableallChannels+0x40>)
    cc78:	4798      	blx	r3
    cc7a:	e7f7      	b.n	cc6c <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    cc7c:	4b06      	ldr	r3, [pc, #24]	; (cc98 <LORAREG_EnableallChannels+0x44>)
    cc7e:	4798      	blx	r3
    cc80:	e7f4      	b.n	cc6c <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    cc82:	4b06      	ldr	r3, [pc, #24]	; (cc9c <LORAREG_EnableallChannels+0x48>)
    cc84:	4798      	blx	r3
    cc86:	e7f1      	b.n	cc6c <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    cc88:	4b05      	ldr	r3, [pc, #20]	; (cca0 <LORAREG_EnableallChannels+0x4c>)
    cc8a:	4798      	blx	r3
    cc8c:	e7ee      	b.n	cc6c <LORAREG_EnableallChannels+0x18>
    cc8e:	46c0      	nop			; (mov r8, r8)
    cc90:	0000c725 	.word	0x0000c725
    cc94:	0000c829 	.word	0x0000c829
    cc98:	0000c91d 	.word	0x0000c91d
    cc9c:	0000ca3d 	.word	0x0000ca3d
    cca0:	0000cc21 	.word	0x0000cc21

0000cca4 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cca6:	b083      	sub	sp, #12
    cca8:	0004      	movs	r4, r0
    ccaa:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    ccac:	4a2b      	ldr	r2, [pc, #172]	; (cd5c <AESEncode+0xb8>)
    ccae:	2101      	movs	r1, #1
    ccb0:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    ccb2:	2300      	movs	r3, #0
    ccb4:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    ccb6:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    ccb8:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    ccba:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    ccbc:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    ccbe:	4928      	ldr	r1, [pc, #160]	; (cd60 <AESEncode+0xbc>)
    ccc0:	4828      	ldr	r0, [pc, #160]	; (cd64 <AESEncode+0xc0>)
    ccc2:	4b29      	ldr	r3, [pc, #164]	; (cd68 <AESEncode+0xc4>)
    ccc4:	4798      	blx	r3
    ccc6:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    ccc8:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    ccca:	4f28      	ldr	r7, [pc, #160]	; (cd6c <AESEncode+0xc8>)
    cccc:	1870      	adds	r0, r6, r1
    ccce:	2300      	movs	r3, #0
    ccd0:	5cc2      	ldrb	r2, [r0, r3]
    ccd2:	555a      	strb	r2, [r3, r5]
    ccd4:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    ccd6:	2b04      	cmp	r3, #4
    ccd8:	d1fa      	bne.n	ccd0 <AESEncode+0x2c>
    ccda:	9b01      	ldr	r3, [sp, #4]
    ccdc:	51cb      	str	r3, [r1, r7]
    ccde:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    cce0:	2910      	cmp	r1, #16
    cce2:	d1f3      	bne.n	cccc <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    cce4:	4d1f      	ldr	r5, [pc, #124]	; (cd64 <AESEncode+0xc0>)
    cce6:	4921      	ldr	r1, [pc, #132]	; (cd6c <AESEncode+0xc8>)
    cce8:	0028      	movs	r0, r5
    ccea:	4b21      	ldr	r3, [pc, #132]	; (cd70 <AESEncode+0xcc>)
    ccec:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    ccee:	682a      	ldr	r2, [r5, #0]
    ccf0:	7913      	ldrb	r3, [r2, #4]
    ccf2:	2102      	movs	r1, #2
    ccf4:	430b      	orrs	r3, r1
    ccf6:	7113      	strb	r3, [r2, #4]
    ccf8:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    ccfa:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    ccfc:	4e1b      	ldr	r6, [pc, #108]	; (cd6c <AESEncode+0xc8>)
    ccfe:	1860      	adds	r0, r4, r1
    cd00:	2300      	movs	r3, #0
    cd02:	5cc2      	ldrb	r2, [r0, r3]
    cd04:	555a      	strb	r2, [r3, r5]
    cd06:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    cd08:	2b04      	cmp	r3, #4
    cd0a:	d1fa      	bne.n	cd02 <AESEncode+0x5e>
    cd0c:	9b01      	ldr	r3, [sp, #4]
    cd0e:	518b      	str	r3, [r1, r6]
    cd10:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    cd12:	2910      	cmp	r1, #16
    cd14:	d1f3      	bne.n	ccfe <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    cd16:	4d13      	ldr	r5, [pc, #76]	; (cd64 <AESEncode+0xc0>)
    cd18:	4914      	ldr	r1, [pc, #80]	; (cd6c <AESEncode+0xc8>)
    cd1a:	0028      	movs	r0, r5
    cd1c:	4b15      	ldr	r3, [pc, #84]	; (cd74 <AESEncode+0xd0>)
    cd1e:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    cd20:	682d      	ldr	r5, [r5, #0]
    cd22:	792b      	ldrb	r3, [r5, #4]
    cd24:	2202      	movs	r2, #2
    cd26:	4393      	bics	r3, r2
    cd28:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    cd2a:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    cd2c:	2002      	movs	r0, #2
    cd2e:	e001      	b.n	cd34 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    cd30:	4211      	tst	r1, r2
    cd32:	d107      	bne.n	cd44 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    cd34:	79eb      	ldrb	r3, [r5, #7]
    cd36:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    cd38:	000a      	movs	r2, r1
    cd3a:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    cd3c:	4218      	tst	r0, r3
    cd3e:	d0f7      	beq.n	cd30 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    cd40:	4302      	orrs	r2, r0
    cd42:	e7f5      	b.n	cd30 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    cd44:	4d09      	ldr	r5, [pc, #36]	; (cd6c <AESEncode+0xc8>)
    cd46:	0029      	movs	r1, r5
    cd48:	4806      	ldr	r0, [pc, #24]	; (cd64 <AESEncode+0xc0>)
    cd4a:	4b0b      	ldr	r3, [pc, #44]	; (cd78 <AESEncode+0xd4>)
    cd4c:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    cd4e:	2210      	movs	r2, #16
    cd50:	0029      	movs	r1, r5
    cd52:	0020      	movs	r0, r4
    cd54:	4b09      	ldr	r3, [pc, #36]	; (cd7c <AESEncode+0xd8>)
    cd56:	4798      	blx	r3
#endif	
}
    cd58:	b003      	add	sp, #12
    cd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd5c:	20002bbc 	.word	0x20002bbc
    cd60:	42003400 	.word	0x42003400
    cd64:	20002bc8 	.word	0x20002bc8
    cd68:	00004681 	.word	0x00004681
    cd6c:	20001e6c 	.word	0x20001e6c
    cd70:	00004715 	.word	0x00004715
    cd74:	00004749 	.word	0x00004749
    cd78:	00004799 	.word	0x00004799
    cd7c:	000166f7 	.word	0x000166f7

0000cd80 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    cd80:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    cd82:	4d07      	ldr	r5, [pc, #28]	; (cda0 <AESInit+0x20>)
    cd84:	0028      	movs	r0, r5
    cd86:	4b07      	ldr	r3, [pc, #28]	; (cda4 <AESInit+0x24>)
    cd88:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    cd8a:	4c07      	ldr	r4, [pc, #28]	; (cda8 <AESInit+0x28>)
    cd8c:	002a      	movs	r2, r5
    cd8e:	4907      	ldr	r1, [pc, #28]	; (cdac <AESInit+0x2c>)
    cd90:	0020      	movs	r0, r4
    cd92:	4b07      	ldr	r3, [pc, #28]	; (cdb0 <AESInit+0x30>)
    cd94:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    cd96:	0020      	movs	r0, r4
    cd98:	4b06      	ldr	r3, [pc, #24]	; (cdb4 <AESInit+0x34>)
    cd9a:	4798      	blx	r3
#endif	
}
    cd9c:	bd70      	pop	{r4, r5, r6, pc}
    cd9e:	46c0      	nop			; (mov r8, r8)
    cda0:	20002bbc 	.word	0x20002bbc
    cda4:	00004645 	.word	0x00004645
    cda8:	20002bc8 	.word	0x20002bc8
    cdac:	42003400 	.word	0x42003400
    cdb0:	000046f5 	.word	0x000046f5
    cdb4:	0000465f 	.word	0x0000465f

0000cdb8 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    cdb8:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    cdba:	4b06      	ldr	r3, [pc, #24]	; (cdd4 <hwTimerExpiryCallback+0x1c>)
    cdbc:	781b      	ldrb	r3, [r3, #0]
    cdbe:	2b00      	cmp	r3, #0
    cdc0:	d100      	bne.n	cdc4 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    cdc2:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    cdc4:	2201      	movs	r2, #1
    cdc6:	4b04      	ldr	r3, [pc, #16]	; (cdd8 <hwTimerExpiryCallback+0x20>)
    cdc8:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    cdca:	2001      	movs	r0, #1
    cdcc:	4b03      	ldr	r3, [pc, #12]	; (cddc <hwTimerExpiryCallback+0x24>)
    cdce:	4798      	blx	r3
}
    cdd0:	e7f7      	b.n	cdc2 <hwTimerExpiryCallback+0xa>
    cdd2:	46c0      	nop			; (mov r8, r8)
    cdd4:	20001e8c 	.word	0x20001e8c
    cdd8:	20002d72 	.word	0x20002d72
    cddc:	0000d6d5 	.word	0x0000d6d5

0000cde0 <hwTimerOverflowCallback>:
{
    cde0:	b510      	push	{r4, lr}
    cde2:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    cde4:	4925      	ldr	r1, [pc, #148]	; (ce7c <hwTimerOverflowCallback+0x9c>)
    cde6:	880a      	ldrh	r2, [r1, #0]
    cde8:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    cdea:	880b      	ldrh	r3, [r1, #0]
    cdec:	3301      	adds	r3, #1
    cdee:	b29b      	uxth	r3, r3
    cdf0:	800b      	strh	r3, [r1, #0]
    cdf2:	429a      	cmp	r2, r3
    cdf4:	d903      	bls.n	cdfe <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    cdf6:	4a22      	ldr	r2, [pc, #136]	; (ce80 <hwTimerOverflowCallback+0xa0>)
    cdf8:	6813      	ldr	r3, [r2, #0]
    cdfa:	3301      	adds	r3, #1
    cdfc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cdfe:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ce02:	425a      	negs	r2, r3
    ce04:	4153      	adcs	r3, r2
    ce06:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ce08:	b672      	cpsid	i
    ce0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ce0e:	2200      	movs	r2, #0
    ce10:	4b1c      	ldr	r3, [pc, #112]	; (ce84 <hwTimerOverflowCallback+0xa4>)
    ce12:	701a      	strb	r2, [r3, #0]
	return flags;
    ce14:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    ce16:	4b1c      	ldr	r3, [pc, #112]	; (ce88 <hwTimerOverflowCallback+0xa8>)
    ce18:	681b      	ldr	r3, [r3, #0]
    ce1a:	2bff      	cmp	r3, #255	; 0xff
    ce1c:	d00d      	beq.n	ce3a <hwTimerOverflowCallback+0x5a>
    ce1e:	0119      	lsls	r1, r3, #4
    ce20:	4a1a      	ldr	r2, [pc, #104]	; (ce8c <hwTimerOverflowCallback+0xac>)
    ce22:	1852      	adds	r2, r2, r1
    ce24:	7b52      	ldrb	r2, [r2, #13]
    ce26:	2a00      	cmp	r2, #0
    ce28:	d107      	bne.n	ce3a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    ce2a:	4a18      	ldr	r2, [pc, #96]	; (ce8c <hwTimerOverflowCallback+0xac>)
    ce2c:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    ce2e:	4b13      	ldr	r3, [pc, #76]	; (ce7c <hwTimerOverflowCallback+0x9c>)
    ce30:	881b      	ldrh	r3, [r3, #0]
    ce32:	b29b      	uxth	r3, r3
    ce34:	0c02      	lsrs	r2, r0, #16
    ce36:	429a      	cmp	r2, r3
    ce38:	d00c      	beq.n	ce54 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    ce3a:	23ff      	movs	r3, #255	; 0xff
    ce3c:	4223      	tst	r3, r4
    ce3e:	d005      	beq.n	ce4c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    ce40:	2201      	movs	r2, #1
    ce42:	4b10      	ldr	r3, [pc, #64]	; (ce84 <hwTimerOverflowCallback+0xa4>)
    ce44:	701a      	strb	r2, [r3, #0]
    ce46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ce4a:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    ce4c:	4b10      	ldr	r3, [pc, #64]	; (ce90 <hwTimerOverflowCallback+0xb0>)
    ce4e:	4798      	blx	r3
}
    ce50:	b002      	add	sp, #8
    ce52:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    ce54:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    ce56:	28ff      	cmp	r0, #255	; 0xff
    ce58:	d909      	bls.n	ce6e <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    ce5a:	4b0e      	ldr	r3, [pc, #56]	; (ce94 <hwTimerOverflowCallback+0xb4>)
    ce5c:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    ce5e:	4b0a      	ldr	r3, [pc, #40]	; (ce88 <hwTimerOverflowCallback+0xa8>)
    ce60:	681a      	ldr	r2, [r3, #0]
    ce62:	0112      	lsls	r2, r2, #4
    ce64:	4b09      	ldr	r3, [pc, #36]	; (ce8c <hwTimerOverflowCallback+0xac>)
    ce66:	189b      	adds	r3, r3, r2
    ce68:	2201      	movs	r2, #1
    ce6a:	735a      	strb	r2, [r3, #13]
    ce6c:	e7e5      	b.n	ce3a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    ce6e:	2201      	movs	r2, #1
    ce70:	4b09      	ldr	r3, [pc, #36]	; (ce98 <hwTimerOverflowCallback+0xb8>)
    ce72:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    ce74:	2001      	movs	r0, #1
    ce76:	4b09      	ldr	r3, [pc, #36]	; (ce9c <hwTimerOverflowCallback+0xbc>)
    ce78:	4798      	blx	r3
    ce7a:	e7de      	b.n	ce3a <hwTimerOverflowCallback+0x5a>
    ce7c:	20002d70 	.word	0x20002d70
    ce80:	20002d74 	.word	0x20002d74
    ce84:	20000008 	.word	0x20000008
    ce88:	20001e88 	.word	0x20001e88
    ce8c:	20002be0 	.word	0x20002be0
    ce90:	0000be75 	.word	0x0000be75
    ce94:	00013351 	.word	0x00013351
    ce98:	20002d72 	.word	0x20002d72
    ce9c:	0000d6d5 	.word	0x0000d6d5

0000cea0 <loadHwTimer>:
{
    cea0:	b570      	push	{r4, r5, r6, lr}
    cea2:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    cea4:	28ff      	cmp	r0, #255	; 0xff
    cea6:	d030      	beq.n	cf0a <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    cea8:	4b19      	ldr	r3, [pc, #100]	; (cf10 <loadHwTimer+0x70>)
    ceaa:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ceac:	4b19      	ldr	r3, [pc, #100]	; (cf14 <loadHwTimer+0x74>)
    ceae:	881d      	ldrh	r5, [r3, #0]
    ceb0:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    ceb2:	4b19      	ldr	r3, [pc, #100]	; (cf18 <loadHwTimer+0x78>)
    ceb4:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    ceb6:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    ceb8:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    ceba:	4a18      	ldr	r2, [pc, #96]	; (cf1c <loadHwTimer+0x7c>)
    cebc:	589b      	ldr	r3, [r3, r2]
    cebe:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    cec0:	4b17      	ldr	r3, [pc, #92]	; (cf20 <loadHwTimer+0x80>)
    cec2:	4298      	cmp	r0, r3
    cec4:	d81a      	bhi.n	cefc <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    cec6:	0122      	lsls	r2, r4, #4
    cec8:	4b14      	ldr	r3, [pc, #80]	; (cf1c <loadHwTimer+0x7c>)
    ceca:	189b      	adds	r3, r3, r2
    cecc:	7b5b      	ldrb	r3, [r3, #13]
    cece:	2b00      	cmp	r3, #0
    ced0:	d11d      	bne.n	cf0e <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    ced2:	28ff      	cmp	r0, #255	; 0xff
    ced4:	d90b      	bls.n	ceee <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    ced6:	4b13      	ldr	r3, [pc, #76]	; (cf24 <loadHwTimer+0x84>)
    ced8:	4298      	cmp	r0, r3
    ceda:	d818      	bhi.n	cf0e <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    cedc:	b280      	uxth	r0, r0
    cede:	4b12      	ldr	r3, [pc, #72]	; (cf28 <loadHwTimer+0x88>)
    cee0:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    cee2:	0124      	lsls	r4, r4, #4
    cee4:	4b0d      	ldr	r3, [pc, #52]	; (cf1c <loadHwTimer+0x7c>)
    cee6:	191c      	adds	r4, r3, r4
    cee8:	2301      	movs	r3, #1
    ceea:	7363      	strb	r3, [r4, #13]
    ceec:	e00f      	b.n	cf0e <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ceee:	2201      	movs	r2, #1
    cef0:	4b0e      	ldr	r3, [pc, #56]	; (cf2c <loadHwTimer+0x8c>)
    cef2:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    cef4:	2001      	movs	r0, #1
    cef6:	4b0e      	ldr	r3, [pc, #56]	; (cf30 <loadHwTimer+0x90>)
    cef8:	4798      	blx	r3
    cefa:	e008      	b.n	cf0e <loadHwTimer+0x6e>
            isTimerTriggered = true;
    cefc:	2201      	movs	r2, #1
    cefe:	4b0b      	ldr	r3, [pc, #44]	; (cf2c <loadHwTimer+0x8c>)
    cf00:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    cf02:	2001      	movs	r0, #1
    cf04:	4b0a      	ldr	r3, [pc, #40]	; (cf30 <loadHwTimer+0x90>)
    cf06:	4798      	blx	r3
    cf08:	e001      	b.n	cf0e <loadHwTimer+0x6e>
        common_tc_compare_stop();
    cf0a:	4b0a      	ldr	r3, [pc, #40]	; (cf34 <loadHwTimer+0x94>)
    cf0c:	4798      	blx	r3
}
    cf0e:	bd70      	pop	{r4, r5, r6, pc}
    cf10:	20002d74 	.word	0x20002d74
    cf14:	20002d70 	.word	0x20002d70
    cf18:	000132dd 	.word	0x000132dd
    cf1c:	20002be0 	.word	0x20002be0
    cf20:	7ffffffe 	.word	0x7ffffffe
    cf24:	0000ffff 	.word	0x0000ffff
    cf28:	00013351 	.word	0x00013351
    cf2c:	20002d72 	.word	0x20002d72
    cf30:	0000d6d5 	.word	0x0000d6d5
    cf34:	00013329 	.word	0x00013329

0000cf38 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    cf38:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    cf3a:	4b1d      	ldr	r3, [pc, #116]	; (cfb0 <swtimerInternalHandler+0x78>)
    cf3c:	781b      	ldrb	r3, [r3, #0]
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d027      	beq.n	cf92 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    cf42:	2200      	movs	r2, #0
    cf44:	4b1a      	ldr	r3, [pc, #104]	; (cfb0 <swtimerInternalHandler+0x78>)
    cf46:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    cf48:	4b1a      	ldr	r3, [pc, #104]	; (cfb4 <swtimerInternalHandler+0x7c>)
    cf4a:	781b      	ldrb	r3, [r3, #0]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d020      	beq.n	cf92 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cf50:	4b19      	ldr	r3, [pc, #100]	; (cfb8 <swtimerInternalHandler+0x80>)
    cf52:	681b      	ldr	r3, [r3, #0]
    cf54:	2bff      	cmp	r3, #255	; 0xff
    cf56:	d01d      	beq.n	cf94 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    cf58:	4b18      	ldr	r3, [pc, #96]	; (cfbc <swtimerInternalHandler+0x84>)
    cf5a:	6818      	ldr	r0, [r3, #0]
    cf5c:	4918      	ldr	r1, [pc, #96]	; (cfc0 <swtimerInternalHandler+0x88>)
    cf5e:	680b      	ldr	r3, [r1, #0]
    cf60:	011a      	lsls	r2, r3, #4
    cf62:	4b18      	ldr	r3, [pc, #96]	; (cfc4 <swtimerInternalHandler+0x8c>)
    cf64:	189b      	adds	r3, r3, r2
    cf66:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    cf68:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    cf6a:	4a16      	ldr	r2, [pc, #88]	; (cfc4 <swtimerInternalHandler+0x8c>)
    cf6c:	4913      	ldr	r1, [pc, #76]	; (cfbc <swtimerInternalHandler+0x84>)
    cf6e:	680b      	ldr	r3, [r1, #0]
    cf70:	011b      	lsls	r3, r3, #4
    cf72:	18d3      	adds	r3, r2, r3
    cf74:	7b18      	ldrb	r0, [r3, #12]
    cf76:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    cf78:	4b11      	ldr	r3, [pc, #68]	; (cfc0 <swtimerInternalHandler+0x88>)
    cf7a:	681b      	ldr	r3, [r3, #0]
    cf7c:	011b      	lsls	r3, r3, #4
    cf7e:	18d2      	adds	r2, r2, r3
    cf80:	23ff      	movs	r3, #255	; 0xff
    cf82:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    cf84:	4a0b      	ldr	r2, [pc, #44]	; (cfb4 <swtimerInternalHandler+0x7c>)
    cf86:	7813      	ldrb	r3, [r2, #0]
    cf88:	3b01      	subs	r3, #1
    cf8a:	b2db      	uxtb	r3, r3
    cf8c:	7013      	strb	r3, [r2, #0]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d10b      	bne.n	cfaa <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    cf92:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    cf94:	4b0a      	ldr	r3, [pc, #40]	; (cfc0 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cf96:	681b      	ldr	r3, [r3, #0]
    cf98:	2bff      	cmp	r3, #255	; 0xff
    cf9a:	d1dd      	bne.n	cf58 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    cf9c:	4b07      	ldr	r3, [pc, #28]	; (cfbc <swtimerInternalHandler+0x84>)
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	4a05      	ldr	r2, [pc, #20]	; (cfb8 <swtimerInternalHandler+0x80>)
    cfa2:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    cfa4:	4a06      	ldr	r2, [pc, #24]	; (cfc0 <swtimerInternalHandler+0x88>)
    cfa6:	6013      	str	r3, [r2, #0]
    cfa8:	e7df      	b.n	cf6a <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    cfaa:	4b07      	ldr	r3, [pc, #28]	; (cfc8 <swtimerInternalHandler+0x90>)
    cfac:	4798      	blx	r3
}
    cfae:	e7f0      	b.n	cf92 <swtimerInternalHandler+0x5a>
    cfb0:	20002d72 	.word	0x20002d72
    cfb4:	20001e8c 	.word	0x20001e8c
    cfb8:	20001e80 	.word	0x20001e80
    cfbc:	20001e88 	.word	0x20001e88
    cfc0:	20001e84 	.word	0x20001e84
    cfc4:	20002be0 	.word	0x20002be0
    cfc8:	0000cea1 	.word	0x0000cea1

0000cfcc <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    cfcc:	2300      	movs	r3, #0
    cfce:	4a0d      	ldr	r2, [pc, #52]	; (d004 <SwTimerReset+0x38>)
    cfd0:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    cfd2:	4a0d      	ldr	r2, [pc, #52]	; (d008 <SwTimerReset+0x3c>)
    cfd4:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    cfd6:	33ff      	adds	r3, #255	; 0xff
    cfd8:	4a0c      	ldr	r2, [pc, #48]	; (d00c <SwTimerReset+0x40>)
    cfda:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    cfdc:	4a0c      	ldr	r2, [pc, #48]	; (d010 <SwTimerReset+0x44>)
    cfde:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    cfe0:	4a0c      	ldr	r2, [pc, #48]	; (d014 <SwTimerReset+0x48>)
    cfe2:	6013      	str	r3, [r2, #0]
    cfe4:	4b0c      	ldr	r3, [pc, #48]	; (d018 <SwTimerReset+0x4c>)
    cfe6:	0018      	movs	r0, r3
    cfe8:	3091      	adds	r0, #145	; 0x91
    cfea:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cfec:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    cfee:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cff0:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    cff2:	601a      	str	r2, [r3, #0]
    cff4:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    cff6:	4283      	cmp	r3, r0
    cff8:	d1fa      	bne.n	cff0 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    cffa:	2200      	movs	r2, #0
    cffc:	4b07      	ldr	r3, [pc, #28]	; (d01c <SwTimerReset+0x50>)
    cffe:	701a      	strb	r2, [r3, #0]
}
    d000:	4770      	bx	lr
    d002:	46c0      	nop			; (mov r8, r8)
    d004:	20001e8c 	.word	0x20001e8c
    d008:	20002d72 	.word	0x20002d72
    d00c:	20001e88 	.word	0x20001e88
    d010:	20001e80 	.word	0x20001e80
    d014:	20001e84 	.word	0x20001e84
    d018:	20002be4 	.word	0x20002be4
    d01c:	20001e7c 	.word	0x20001e7c

0000d020 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    d020:	b510      	push	{r4, lr}
    SwTimerReset();
    d022:	4b08      	ldr	r3, [pc, #32]	; (d044 <SystemTimerInit+0x24>)
    d024:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    d026:	2300      	movs	r3, #0
    d028:	4a07      	ldr	r2, [pc, #28]	; (d048 <SystemTimerInit+0x28>)
    d02a:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    d02c:	4a07      	ldr	r2, [pc, #28]	; (d04c <SystemTimerInit+0x2c>)
    d02e:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    d030:	4b07      	ldr	r3, [pc, #28]	; (d050 <SystemTimerInit+0x30>)
    d032:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d034:	4807      	ldr	r0, [pc, #28]	; (d054 <SystemTimerInit+0x34>)
    d036:	4b08      	ldr	r3, [pc, #32]	; (d058 <SystemTimerInit+0x38>)
    d038:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d03a:	4808      	ldr	r0, [pc, #32]	; (d05c <SystemTimerInit+0x3c>)
    d03c:	4b08      	ldr	r3, [pc, #32]	; (d060 <SystemTimerInit+0x40>)
    d03e:	4798      	blx	r3
}
    d040:	bd10      	pop	{r4, pc}
    d042:	46c0      	nop			; (mov r8, r8)
    d044:	0000cfcd 	.word	0x0000cfcd
    d048:	20002d74 	.word	0x20002d74
    d04c:	20002d70 	.word	0x20002d70
    d050:	000133bd 	.word	0x000133bd
    d054:	0000cde1 	.word	0x0000cde1
    d058:	00013441 	.word	0x00013441
    d05c:	0000cdb9 	.word	0x0000cdb9
    d060:	0001344d 	.word	0x0001344d

0000d064 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    d064:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d066:	4b05      	ldr	r3, [pc, #20]	; (d07c <SwTimerGetTime+0x18>)
    d068:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d06a:	4b05      	ldr	r3, [pc, #20]	; (d080 <SwTimerGetTime+0x1c>)
    d06c:	881d      	ldrh	r5, [r3, #0]
    d06e:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d070:	4b04      	ldr	r3, [pc, #16]	; (d084 <SwTimerGetTime+0x20>)
    d072:	4798      	blx	r3
    d074:	4328      	orrs	r0, r5
    return gettime();
}
    d076:	0021      	movs	r1, r4
    d078:	bd70      	pop	{r4, r5, r6, pc}
    d07a:	46c0      	nop			; (mov r8, r8)
    d07c:	20002d74 	.word	0x20002d74
    d080:	20002d70 	.word	0x20002d70
    d084:	000132dd 	.word	0x000132dd

0000d088 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    d088:	b510      	push	{r4, lr}
    d08a:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d08c:	4b08      	ldr	r3, [pc, #32]	; (d0b0 <SwTimerCreate+0x28>)
    d08e:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    d090:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d092:	2b18      	cmp	r3, #24
    d094:	d900      	bls.n	d098 <SwTimerCreate+0x10>
    }

    return retVal;
}
    d096:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    d098:	4b06      	ldr	r3, [pc, #24]	; (d0b4 <SwTimerCreate+0x2c>)
    d09a:	4798      	blx	r3
        *timerId = allocatedTimerId;
    d09c:	4a04      	ldr	r2, [pc, #16]	; (d0b0 <SwTimerCreate+0x28>)
    d09e:	7813      	ldrb	r3, [r2, #0]
    d0a0:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    d0a2:	3301      	adds	r3, #1
    d0a4:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    d0a6:	4b04      	ldr	r3, [pc, #16]	; (d0b8 <SwTimerCreate+0x30>)
    d0a8:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d0aa:	2008      	movs	r0, #8
    d0ac:	e7f3      	b.n	d096 <SwTimerCreate+0xe>
    d0ae:	46c0      	nop			; (mov r8, r8)
    d0b0:	20001e7c 	.word	0x20001e7c
    d0b4:	0000c689 	.word	0x0000c689
    d0b8:	0000c695 	.word	0x0000c695

0000d0bc <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    d0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0be:	46d6      	mov	lr, sl
    d0c0:	464f      	mov	r7, r9
    d0c2:	4646      	mov	r6, r8
    d0c4:	b5c0      	push	{r6, r7, lr}
    d0c6:	b084      	sub	sp, #16
    d0c8:	0007      	movs	r7, r0
    d0ca:	000d      	movs	r5, r1
    d0cc:	0016      	movs	r6, r2
    d0ce:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d0d0:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    d0d2:	2f18      	cmp	r7, #24
    d0d4:	d809      	bhi.n	d0ea <SwTimerStart+0x2e>
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d100      	bne.n	d0dc <SwTimerStart+0x20>
    d0da:	e08c      	b.n	d1f6 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    d0dc:	013a      	lsls	r2, r7, #4
    d0de:	4b52      	ldr	r3, [pc, #328]	; (d228 <SwTimerStart+0x16c>)
    d0e0:	189b      	adds	r3, r3, r2
    d0e2:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    d0e4:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d005      	beq.n	d0f6 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    d0ea:	b004      	add	sp, #16
    d0ec:	bc1c      	pop	{r2, r3, r4}
    d0ee:	4690      	mov	r8, r2
    d0f0:	4699      	mov	r9, r3
    d0f2:	46a2      	mov	sl, r4
    d0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d0f6:	4b4d      	ldr	r3, [pc, #308]	; (d22c <SwTimerStart+0x170>)
    d0f8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d0fa:	4b4d      	ldr	r3, [pc, #308]	; (d230 <SwTimerStart+0x174>)
    d0fc:	8818      	ldrh	r0, [r3, #0]
    d0fe:	0403      	lsls	r3, r0, #16
    d100:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    d102:	4b4c      	ldr	r3, [pc, #304]	; (d234 <SwTimerStart+0x178>)
    d104:	4798      	blx	r3
    d106:	4643      	mov	r3, r8
    d108:	4303      	orrs	r3, r0
    switch (timeoutType)
    d10a:	2e00      	cmp	r6, #0
    d10c:	d003      	beq.n	d116 <SwTimerStart+0x5a>
    d10e:	2e01      	cmp	r6, #1
    d110:	d038      	beq.n	d184 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    d112:	200a      	movs	r0, #10
    d114:	e7e9      	b.n	d0ea <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d116:	4948      	ldr	r1, [pc, #288]	; (d238 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d118:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d11a:	002a      	movs	r2, r5
    d11c:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    d11e:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d120:	428a      	cmp	r2, r1
    d122:	d8e2      	bhi.n	d0ea <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d124:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d128:	425a      	negs	r2, r3
    d12a:	4153      	adcs	r3, r2
    d12c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    d12e:	b672      	cpsid	i
    d130:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d134:	2600      	movs	r6, #0
    d136:	4b41      	ldr	r3, [pc, #260]	; (d23c <SwTimerStart+0x180>)
    d138:	701e      	strb	r6, [r3, #0]
	return flags;
    d13a:	9b03      	ldr	r3, [sp, #12]
    d13c:	4699      	mov	r9, r3
    swtimerInternalHandler();
    d13e:	4b40      	ldr	r3, [pc, #256]	; (d240 <SwTimerStart+0x184>)
    d140:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    d142:	4b39      	ldr	r3, [pc, #228]	; (d228 <SwTimerStart+0x16c>)
    d144:	013a      	lsls	r2, r7, #4
    d146:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    d148:	189b      	adds	r3, r3, r2
    d14a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    d14c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d14e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    d150:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    d152:	4a3c      	ldr	r2, [pc, #240]	; (d244 <SwTimerStart+0x188>)
    d154:	7813      	ldrb	r3, [r2, #0]
    d156:	3301      	adds	r3, #1
    d158:	b2db      	uxtb	r3, r3
    d15a:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    d15c:	4b3a      	ldr	r3, [pc, #232]	; (d248 <SwTimerStart+0x18c>)
    d15e:	681b      	ldr	r3, [r3, #0]
    d160:	469a      	mov	sl, r3
    d162:	2bff      	cmp	r3, #255	; 0xff
    d164:	d016      	beq.n	d194 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    d166:	466a      	mov	r2, sp
    d168:	7013      	strb	r3, [r2, #0]
    d16a:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    d16c:	4b35      	ldr	r3, [pc, #212]	; (d244 <SwTimerStart+0x188>)
    d16e:	781b      	ldrb	r3, [r3, #0]
    d170:	2b00      	cmp	r3, #0
    d172:	d042      	beq.n	d1fa <SwTimerStart+0x13e>
    d174:	9200      	str	r2, [sp, #0]
    d176:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d178:	492b      	ldr	r1, [pc, #172]	; (d228 <SwTimerStart+0x16c>)
    d17a:	4688      	mov	r8, r1
    d17c:	4833      	ldr	r0, [pc, #204]	; (d24c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    d17e:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    d180:	4c30      	ldr	r4, [pc, #192]	; (d244 <SwTimerStart+0x188>)
    d182:	e02a      	b.n	d1da <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d184:	0028      	movs	r0, r5
    d186:	38ff      	subs	r0, #255	; 0xff
    d188:	1ac3      	subs	r3, r0, r3
    d18a:	4a2b      	ldr	r2, [pc, #172]	; (d238 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d18c:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d18e:	4293      	cmp	r3, r2
    d190:	d9c8      	bls.n	d124 <SwTimerStart+0x68>
    d192:	e7aa      	b.n	d0ea <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    d194:	4b2c      	ldr	r3, [pc, #176]	; (d248 <SwTimerStart+0x18c>)
    d196:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    d198:	0038      	movs	r0, r7
    d19a:	4b2d      	ldr	r3, [pc, #180]	; (d250 <SwTimerStart+0x194>)
    d19c:	4798      	blx	r3
    d19e:	e036      	b.n	d20e <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    d1a0:	4b21      	ldr	r3, [pc, #132]	; (d228 <SwTimerStart+0x16c>)
    d1a2:	013c      	lsls	r4, r7, #4
    d1a4:	191c      	adds	r4, r3, r4
    d1a6:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    d1a8:	9901      	ldr	r1, [sp, #4]
    d1aa:	0109      	lsls	r1, r1, #4
    d1ac:	1859      	adds	r1, r3, r1
    d1ae:	2300      	movs	r3, #0
    d1b0:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    d1b2:	4592      	cmp	sl, r2
    d1b4:	d005      	beq.n	d1c2 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    d1b6:	9b00      	ldr	r3, [sp, #0]
    d1b8:	0118      	lsls	r0, r3, #4
    d1ba:	4b1b      	ldr	r3, [pc, #108]	; (d228 <SwTimerStart+0x16c>)
    d1bc:	1818      	adds	r0, r3, r0
    d1be:	7307      	strb	r7, [r0, #12]
    d1c0:	e025      	b.n	d20e <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    d1c2:	4b21      	ldr	r3, [pc, #132]	; (d248 <SwTimerStart+0x18c>)
    d1c4:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    d1c6:	0038      	movs	r0, r7
    d1c8:	4b21      	ldr	r3, [pc, #132]	; (d250 <SwTimerStart+0x194>)
    d1ca:	4798      	blx	r3
    d1cc:	e01f      	b.n	d20e <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    d1ce:	3301      	adds	r3, #1
    d1d0:	b2db      	uxtb	r3, r3
    d1d2:	7821      	ldrb	r1, [r4, #0]
    d1d4:	b2c9      	uxtb	r1, r1
    d1d6:	428b      	cmp	r3, r1
    d1d8:	d210      	bcs.n	d1fc <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    d1da:	2aff      	cmp	r2, #255	; 0xff
    d1dc:	d0f7      	beq.n	d1ce <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d1de:	9201      	str	r2, [sp, #4]
    d1e0:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    d1e2:	4646      	mov	r6, r8
    d1e4:	5989      	ldr	r1, [r1, r6]
    d1e6:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d1e8:	4281      	cmp	r1, r0
    d1ea:	d8d9      	bhi.n	d1a0 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    d1ec:	0111      	lsls	r1, r2, #4
    d1ee:	4461      	add	r1, ip
    d1f0:	9200      	str	r2, [sp, #0]
    d1f2:	7b0a      	ldrb	r2, [r1, #12]
    d1f4:	e7eb      	b.n	d1ce <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    d1f6:	200a      	movs	r0, #10
    d1f8:	e777      	b.n	d0ea <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    d1fa:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    d1fc:	4b0a      	ldr	r3, [pc, #40]	; (d228 <SwTimerStart+0x16c>)
    d1fe:	9a00      	ldr	r2, [sp, #0]
    d200:	0110      	lsls	r0, r2, #4
    d202:	1818      	adds	r0, r3, r0
    d204:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    d206:	013f      	lsls	r7, r7, #4
    d208:	19df      	adds	r7, r3, r7
    d20a:	23ff      	movs	r3, #255	; 0xff
    d20c:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    d20e:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    d210:	2008      	movs	r0, #8
    d212:	464a      	mov	r2, r9
    d214:	4213      	tst	r3, r2
    d216:	d100      	bne.n	d21a <SwTimerStart+0x15e>
    d218:	e767      	b.n	d0ea <SwTimerStart+0x2e>
		cpu_irq_enable();
    d21a:	2201      	movs	r2, #1
    d21c:	4b07      	ldr	r3, [pc, #28]	; (d23c <SwTimerStart+0x180>)
    d21e:	701a      	strb	r2, [r3, #0]
    d220:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d224:	b662      	cpsie	i
    d226:	e760      	b.n	d0ea <SwTimerStart+0x2e>
    d228:	20002be0 	.word	0x20002be0
    d22c:	20002d74 	.word	0x20002d74
    d230:	20002d70 	.word	0x20002d70
    d234:	000132dd 	.word	0x000132dd
    d238:	7fffff00 	.word	0x7fffff00
    d23c:	20000008 	.word	0x20000008
    d240:	0000cf39 	.word	0x0000cf39
    d244:	20001e8c 	.word	0x20001e8c
    d248:	20001e88 	.word	0x20001e88
    d24c:	7ffffffe 	.word	0x7ffffffe
    d250:	0000cea1 	.word	0x0000cea1

0000d254 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    d254:	0103      	lsls	r3, r0, #4
    d256:	4803      	ldr	r0, [pc, #12]	; (d264 <SwTimerIsRunning+0x10>)
    d258:	18c0      	adds	r0, r0, r3
    d25a:	6840      	ldr	r0, [r0, #4]
    d25c:	1e43      	subs	r3, r0, #1
    d25e:	4198      	sbcs	r0, r3
    d260:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    d262:	4770      	bx	lr
    d264:	20002be0 	.word	0x20002be0

0000d268 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    d268:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    d26a:	0102      	lsls	r2, r0, #4
    d26c:	4b0d      	ldr	r3, [pc, #52]	; (d2a4 <SwTimerReadValue+0x3c>)
    d26e:	189b      	adds	r3, r3, r2
    d270:	685b      	ldr	r3, [r3, #4]
    d272:	2b00      	cmp	r3, #0
    d274:	d014      	beq.n	d2a0 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    d276:	4b0b      	ldr	r3, [pc, #44]	; (d2a4 <SwTimerReadValue+0x3c>)
    d278:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    d27a:	4b0b      	ldr	r3, [pc, #44]	; (d2a8 <SwTimerReadValue+0x40>)
    d27c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d27e:	4b0b      	ldr	r3, [pc, #44]	; (d2ac <SwTimerReadValue+0x44>)
    d280:	881c      	ldrh	r4, [r3, #0]
    d282:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    d284:	4b0a      	ldr	r3, [pc, #40]	; (d2b0 <SwTimerReadValue+0x48>)
    d286:	4798      	blx	r3
    d288:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    d28a:	4285      	cmp	r5, r0
    d28c:	d305      	bcc.n	d29a <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    d28e:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    d290:	4b08      	ldr	r3, [pc, #32]	; (d2b4 <SwTimerReadValue+0x4c>)
    d292:	4298      	cmp	r0, r3
    d294:	d900      	bls.n	d298 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    d296:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    d298:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    d29a:	3d01      	subs	r5, #1
    d29c:	1a28      	subs	r0, r5, r0
    d29e:	e7f7      	b.n	d290 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    d2a0:	2000      	movs	r0, #0
    return remainingTime;
    d2a2:	e7f9      	b.n	d298 <SwTimerReadValue+0x30>
    d2a4:	20002be0 	.word	0x20002be0
    d2a8:	20002d74 	.word	0x20002d74
    d2ac:	20002d70 	.word	0x20002d70
    d2b0:	000132dd 	.word	0x000132dd
    d2b4:	7ffffffe 	.word	0x7ffffffe

0000d2b8 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    d2b8:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    d2ba:	4b05      	ldr	r3, [pc, #20]	; (d2d0 <SwTimerNextExpiryDuration+0x18>)
    d2bc:	6818      	ldr	r0, [r3, #0]
    d2be:	28ff      	cmp	r0, #255	; 0xff
    d2c0:	d102      	bne.n	d2c8 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    d2c2:	2001      	movs	r0, #1
    d2c4:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    d2c6:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    d2c8:	b2c0      	uxtb	r0, r0
    d2ca:	4b02      	ldr	r3, [pc, #8]	; (d2d4 <SwTimerNextExpiryDuration+0x1c>)
    d2cc:	4798      	blx	r3
    d2ce:	e7fa      	b.n	d2c6 <SwTimerNextExpiryDuration+0xe>
    d2d0:	20001e88 	.word	0x20001e88
    d2d4:	0000d269 	.word	0x0000d269

0000d2d8 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    d2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2da:	46de      	mov	lr, fp
    d2dc:	4657      	mov	r7, sl
    d2de:	464e      	mov	r6, r9
    d2e0:	4645      	mov	r5, r8
    d2e2:	b5e0      	push	{r5, r6, r7, lr}
    d2e4:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    d2e6:	4b2f      	ldr	r3, [pc, #188]	; (d3a4 <SwTimersExecute+0xcc>)
    d2e8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d2ea:	4b2f      	ldr	r3, [pc, #188]	; (d3a8 <SwTimersExecute+0xd0>)
    d2ec:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    d2ee:	4b2f      	ldr	r3, [pc, #188]	; (d3ac <SwTimersExecute+0xd4>)
    d2f0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d2f2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d2f6:	4253      	negs	r3, r2
    d2f8:	4153      	adcs	r3, r2
    d2fa:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d2fc:	b672      	cpsid	i
    d2fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d302:	2200      	movs	r2, #0
    d304:	4b2a      	ldr	r3, [pc, #168]	; (d3b0 <SwTimersExecute+0xd8>)
    d306:	701a      	strb	r2, [r3, #0]
	return flags;
    d308:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    d30a:	4b2a      	ldr	r3, [pc, #168]	; (d3b4 <SwTimersExecute+0xdc>)
    d30c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d30e:	23ff      	movs	r3, #255	; 0xff
    d310:	4223      	tst	r3, r4
    d312:	d005      	beq.n	d320 <SwTimersExecute+0x48>
		cpu_irq_enable();
    d314:	2201      	movs	r2, #1
    d316:	4b26      	ldr	r3, [pc, #152]	; (d3b0 <SwTimersExecute+0xd8>)
    d318:	701a      	strb	r2, [r3, #0]
    d31a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d31e:	b662      	cpsie	i
	cpu_irq_disable();
    d320:	4b23      	ldr	r3, [pc, #140]	; (d3b0 <SwTimersExecute+0xd8>)
    d322:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d324:	4c24      	ldr	r4, [pc, #144]	; (d3b8 <SwTimersExecute+0xe0>)
    d326:	4b25      	ldr	r3, [pc, #148]	; (d3bc <SwTimersExecute+0xe4>)
    d328:	4699      	mov	r9, r3
    d32a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d32c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    d32e:	4b24      	ldr	r3, [pc, #144]	; (d3c0 <SwTimersExecute+0xe8>)
    d330:	4698      	mov	r8, r3
		cpu_irq_enable();
    d332:	4b1f      	ldr	r3, [pc, #124]	; (d3b0 <SwTimersExecute+0xd8>)
    d334:	469c      	mov	ip, r3
    d336:	e004      	b.n	d342 <SwTimersExecute+0x6a>
    d338:	4643      	mov	r3, r8
    d33a:	6018      	str	r0, [r3, #0]
    d33c:	e01e      	b.n	d37c <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    d33e:	2e00      	cmp	r6, #0
    d340:	d125      	bne.n	d38e <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    d342:	4b1d      	ldr	r3, [pc, #116]	; (d3b8 <SwTimersExecute+0xe0>)
    d344:	681b      	ldr	r3, [r3, #0]
    d346:	2bff      	cmp	r3, #255	; 0xff
    d348:	d024      	beq.n	d394 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d34a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d34e:	424b      	negs	r3, r1
    d350:	414b      	adcs	r3, r1
    d352:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d354:	b672      	cpsid	i
    d356:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d35a:	4653      	mov	r3, sl
    d35c:	701a      	strb	r2, [r3, #0]
	return flags;
    d35e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d360:	6823      	ldr	r3, [r4, #0]
    d362:	011b      	lsls	r3, r3, #4
    d364:	444b      	add	r3, r9
    d366:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    d368:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    d36a:	689d      	ldr	r5, [r3, #8]
    d36c:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d36e:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    d370:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    d372:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    d374:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    d376:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    d378:	29ff      	cmp	r1, #255	; 0xff
    d37a:	d0dd      	beq.n	d338 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    d37c:	4238      	tst	r0, r7
    d37e:	d0de      	beq.n	d33e <SwTimersExecute+0x66>
		cpu_irq_enable();
    d380:	2301      	movs	r3, #1
    d382:	4661      	mov	r1, ip
    d384:	700b      	strb	r3, [r1, #0]
    d386:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d38a:	b662      	cpsie	i
    d38c:	e7d7      	b.n	d33e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    d38e:	4658      	mov	r0, fp
    d390:	47b0      	blx	r6
    d392:	e7ca      	b.n	d32a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    d394:	b003      	add	sp, #12
    d396:	bc3c      	pop	{r2, r3, r4, r5}
    d398:	4690      	mov	r8, r2
    d39a:	4699      	mov	r9, r3
    d39c:	46a2      	mov	sl, r4
    d39e:	46ab      	mov	fp, r5
    d3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3a2:	46c0      	nop			; (mov r8, r8)
    d3a4:	20002d74 	.word	0x20002d74
    d3a8:	20002d70 	.word	0x20002d70
    d3ac:	000132dd 	.word	0x000132dd
    d3b0:	20000008 	.word	0x20000008
    d3b4:	0000cf39 	.word	0x0000cf39
    d3b8:	20001e80 	.word	0x20001e80
    d3bc:	20002be0 	.word	0x20002be0
    d3c0:	20001e84 	.word	0x20001e84

0000d3c4 <TIMER_TaskHandler>:
{
    d3c4:	b510      	push	{r4, lr}
    SwTimersExecute();
    d3c6:	4b02      	ldr	r3, [pc, #8]	; (d3d0 <TIMER_TaskHandler+0xc>)
    d3c8:	4798      	blx	r3
}
    d3ca:	2000      	movs	r0, #0
    d3cc:	bd10      	pop	{r4, pc}
    d3ce:	46c0      	nop			; (mov r8, r8)
    d3d0:	0000d2d9 	.word	0x0000d2d9

0000d3d4 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    d3d4:	b570      	push	{r4, r5, r6, lr}
    d3d6:	b082      	sub	sp, #8
    d3d8:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d3da:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    d3dc:	2c18      	cmp	r4, #24
    d3de:	d901      	bls.n	d3e4 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    d3e0:	b002      	add	sp, #8
    d3e2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d3e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d3e8:	425a      	negs	r2, r3
    d3ea:	4153      	adcs	r3, r2
    d3ec:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d3ee:	b672      	cpsid	i
    d3f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d3f4:	2200      	movs	r2, #0
    d3f6:	4b47      	ldr	r3, [pc, #284]	; (d514 <SwTimerStop+0x140>)
    d3f8:	701a      	strb	r2, [r3, #0]
	return flags;
    d3fa:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    d3fc:	4b46      	ldr	r3, [pc, #280]	; (d518 <SwTimerStop+0x144>)
    d3fe:	4798      	blx	r3
    if (runningTimers > 0)
    d400:	4b46      	ldr	r3, [pc, #280]	; (d51c <SwTimerStop+0x148>)
    d402:	781b      	ldrb	r3, [r3, #0]
    d404:	2b00      	cmp	r3, #0
    d406:	d040      	beq.n	d48a <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    d408:	4b44      	ldr	r3, [pc, #272]	; (d51c <SwTimerStop+0x148>)
    d40a:	781b      	ldrb	r3, [r3, #0]
    d40c:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    d40e:	4a44      	ldr	r2, [pc, #272]	; (d520 <SwTimerStop+0x14c>)
    d410:	6816      	ldr	r6, [r2, #0]
    d412:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    d414:	2b00      	cmp	r3, #0
    d416:	d038      	beq.n	d48a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d418:	428c      	cmp	r4, r1
    d41a:	d00b      	beq.n	d434 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d41c:	4841      	ldr	r0, [pc, #260]	; (d524 <SwTimerStop+0x150>)
    d41e:	010a      	lsls	r2, r1, #4
    d420:	1882      	adds	r2, r0, r2
    d422:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    d424:	3b01      	subs	r3, #1
    d426:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    d428:	2b00      	cmp	r3, #0
    d42a:	d02e      	beq.n	d48a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d42c:	4294      	cmp	r4, r2
    d42e:	d001      	beq.n	d434 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d430:	0011      	movs	r1, r2
    d432:	e7f4      	b.n	d41e <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    d434:	42a6      	cmp	r6, r4
    d436:	d01d      	beq.n	d474 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d438:	4b3a      	ldr	r3, [pc, #232]	; (d524 <SwTimerStop+0x150>)
    d43a:	0122      	lsls	r2, r4, #4
    d43c:	189a      	adds	r2, r3, r2
    d43e:	7b12      	ldrb	r2, [r2, #12]
    d440:	0109      	lsls	r1, r1, #4
    d442:	1859      	adds	r1, r3, r1
    d444:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    d446:	0122      	lsls	r2, r4, #4
    d448:	4b36      	ldr	r3, [pc, #216]	; (d524 <SwTimerStop+0x150>)
    d44a:	189b      	adds	r3, r3, r2
    d44c:	22ff      	movs	r2, #255	; 0xff
    d44e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    d450:	4a32      	ldr	r2, [pc, #200]	; (d51c <SwTimerStop+0x148>)
    d452:	7813      	ldrb	r3, [r2, #0]
    d454:	3b01      	subs	r3, #1
    d456:	b2db      	uxtb	r3, r3
    d458:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    d45a:	0124      	lsls	r4, r4, #4
    d45c:	4b31      	ldr	r3, [pc, #196]	; (d524 <SwTimerStop+0x150>)
    d45e:	191c      	adds	r4, r3, r4
    d460:	2300      	movs	r3, #0
    d462:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    d464:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    d466:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    d468:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    d46a:	2008      	movs	r0, #8
    d46c:	422b      	tst	r3, r5
    d46e:	d0b7      	beq.n	d3e0 <SwTimerStop+0xc>
    d470:	2301      	movs	r3, #1
    d472:	e040      	b.n	d4f6 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    d474:	4b2c      	ldr	r3, [pc, #176]	; (d528 <SwTimerStop+0x154>)
    d476:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    d478:	0122      	lsls	r2, r4, #4
    d47a:	4b2a      	ldr	r3, [pc, #168]	; (d524 <SwTimerStop+0x150>)
    d47c:	189b      	adds	r3, r3, r2
    d47e:	7b18      	ldrb	r0, [r3, #12]
    d480:	4b27      	ldr	r3, [pc, #156]	; (d520 <SwTimerStop+0x14c>)
    d482:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    d484:	4b29      	ldr	r3, [pc, #164]	; (d52c <SwTimerStop+0x158>)
    d486:	4798      	blx	r3
    d488:	e7dd      	b.n	d446 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    d48a:	4b29      	ldr	r3, [pc, #164]	; (d530 <SwTimerStop+0x15c>)
    d48c:	6818      	ldr	r0, [r3, #0]
    d48e:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    d490:	2aff      	cmp	r2, #255	; 0xff
    d492:	d02c      	beq.n	d4ee <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d494:	4294      	cmp	r4, r2
    d496:	d009      	beq.n	d4ac <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d498:	4922      	ldr	r1, [pc, #136]	; (d524 <SwTimerStop+0x150>)
    d49a:	0113      	lsls	r3, r2, #4
    d49c:	18cb      	adds	r3, r1, r3
    d49e:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d4a0:	2bff      	cmp	r3, #255	; 0xff
    d4a2:	d024      	beq.n	d4ee <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d4a4:	429c      	cmp	r4, r3
    d4a6:	d001      	beq.n	d4ac <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d4a8:	001a      	movs	r2, r3
    d4aa:	e7f6      	b.n	d49a <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d4ac:	42a0      	cmp	r0, r4
    d4ae:	d00d      	beq.n	d4cc <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d4b0:	4b1c      	ldr	r3, [pc, #112]	; (d524 <SwTimerStop+0x150>)
    d4b2:	0121      	lsls	r1, r4, #4
    d4b4:	1859      	adds	r1, r3, r1
    d4b6:	7b09      	ldrb	r1, [r1, #12]
    d4b8:	0110      	lsls	r0, r2, #4
    d4ba:	181b      	adds	r3, r3, r0
    d4bc:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d4be:	4b1d      	ldr	r3, [pc, #116]	; (d534 <SwTimerStop+0x160>)
    d4c0:	681b      	ldr	r3, [r3, #0]
    d4c2:	429c      	cmp	r4, r3
    d4c4:	d1c9      	bne.n	d45a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d4c6:	4b1b      	ldr	r3, [pc, #108]	; (d534 <SwTimerStop+0x160>)
    d4c8:	601a      	str	r2, [r3, #0]
    d4ca:	e7c6      	b.n	d45a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d4cc:	4b19      	ldr	r3, [pc, #100]	; (d534 <SwTimerStop+0x160>)
    d4ce:	681b      	ldr	r3, [r3, #0]
    d4d0:	4298      	cmp	r0, r3
    d4d2:	d006      	beq.n	d4e2 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d4d4:	0100      	lsls	r0, r0, #4
    d4d6:	4b13      	ldr	r3, [pc, #76]	; (d524 <SwTimerStop+0x150>)
    d4d8:	1818      	adds	r0, r3, r0
    d4da:	7b02      	ldrb	r2, [r0, #12]
    d4dc:	4b14      	ldr	r3, [pc, #80]	; (d530 <SwTimerStop+0x15c>)
    d4de:	601a      	str	r2, [r3, #0]
    d4e0:	e7bb      	b.n	d45a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d4e2:	23ff      	movs	r3, #255	; 0xff
    d4e4:	4a13      	ldr	r2, [pc, #76]	; (d534 <SwTimerStop+0x160>)
    d4e6:	6013      	str	r3, [r2, #0]
    d4e8:	4a11      	ldr	r2, [pc, #68]	; (d530 <SwTimerStop+0x15c>)
    d4ea:	6013      	str	r3, [r2, #0]
    d4ec:	e7b5      	b.n	d45a <SwTimerStop+0x86>
    d4ee:	23ff      	movs	r3, #255	; 0xff
    d4f0:	422b      	tst	r3, r5
    d4f2:	d00a      	beq.n	d50a <SwTimerStop+0x136>
    d4f4:	2300      	movs	r3, #0
		cpu_irq_enable();
    d4f6:	2101      	movs	r1, #1
    d4f8:	4a06      	ldr	r2, [pc, #24]	; (d514 <SwTimerStop+0x140>)
    d4fa:	7011      	strb	r1, [r2, #0]
    d4fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d500:	b662      	cpsie	i
    if (timerStopReqStatus)
    d502:	2b00      	cmp	r3, #0
    d504:	d103      	bne.n	d50e <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d506:	2015      	movs	r0, #21
    d508:	e76a      	b.n	d3e0 <SwTimerStop+0xc>
    d50a:	2015      	movs	r0, #21
    d50c:	e768      	b.n	d3e0 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    d50e:	2008      	movs	r0, #8
    d510:	e766      	b.n	d3e0 <SwTimerStop+0xc>
    d512:	46c0      	nop			; (mov r8, r8)
    d514:	20000008 	.word	0x20000008
    d518:	0000cf39 	.word	0x0000cf39
    d51c:	20001e8c 	.word	0x20001e8c
    d520:	20001e88 	.word	0x20001e88
    d524:	20002be0 	.word	0x20002be0
    d528:	00013329 	.word	0x00013329
    d52c:	0000cea1 	.word	0x0000cea1
    d530:	20001e80 	.word	0x20001e80
    d534:	20001e84 	.word	0x20001e84

0000d538 <SwTimerRunRemainingTime>:
{
    d538:	b5f0      	push	{r4, r5, r6, r7, lr}
    d53a:	b083      	sub	sp, #12
    d53c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d53e:	4b0b      	ldr	r3, [pc, #44]	; (d56c <SwTimerRunRemainingTime+0x34>)
    d540:	681c      	ldr	r4, [r3, #0]
    d542:	0122      	lsls	r2, r4, #4
    d544:	4b0a      	ldr	r3, [pc, #40]	; (d570 <SwTimerRunRemainingTime+0x38>)
    d546:	189b      	adds	r3, r3, r2
    d548:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    d54a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    d54c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    d54e:	0020      	movs	r0, r4
    d550:	4b08      	ldr	r3, [pc, #32]	; (d574 <SwTimerRunRemainingTime+0x3c>)
    d552:	4798      	blx	r3
    d554:	2808      	cmp	r0, #8
    d556:	d001      	beq.n	d55c <SwTimerRunRemainingTime+0x24>
}
    d558:	b003      	add	sp, #12
    d55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    d55c:	9700      	str	r7, [sp, #0]
    d55e:	0033      	movs	r3, r6
    d560:	2200      	movs	r2, #0
    d562:	0029      	movs	r1, r5
    d564:	0020      	movs	r0, r4
    d566:	4c04      	ldr	r4, [pc, #16]	; (d578 <SwTimerRunRemainingTime+0x40>)
    d568:	47a0      	blx	r4
}
    d56a:	e7f5      	b.n	d558 <SwTimerRunRemainingTime+0x20>
    d56c:	20001e88 	.word	0x20001e88
    d570:	20002be0 	.word	0x20002be0
    d574:	0000d3d5 	.word	0x0000d3d5
    d578:	0000d0bd 	.word	0x0000d0bd

0000d57c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    d57c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    d57e:	4b22      	ldr	r3, [pc, #136]	; (d608 <SystemTimerSync+0x8c>)
    d580:	681c      	ldr	r4, [r3, #0]
    d582:	685d      	ldr	r5, [r3, #4]
    d584:	1900      	adds	r0, r0, r4
    d586:	4169      	adcs	r1, r5
    d588:	6018      	str	r0, [r3, #0]
    d58a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    d58c:	4b1f      	ldr	r3, [pc, #124]	; (d60c <SystemTimerSync+0x90>)
    d58e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    d590:	0c02      	lsrs	r2, r0, #16
    d592:	4b1f      	ldr	r3, [pc, #124]	; (d610 <SystemTimerSync+0x94>)
    d594:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    d596:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    d598:	4b1e      	ldr	r3, [pc, #120]	; (d614 <SystemTimerSync+0x98>)
    d59a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    d59c:	4a1e      	ldr	r2, [pc, #120]	; (d618 <SystemTimerSync+0x9c>)
    d59e:	7812      	ldrb	r2, [r2, #0]
    d5a0:	2a00      	cmp	r2, #0
    d5a2:	d012      	beq.n	d5ca <SystemTimerSync+0x4e>
    d5a4:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d5a6:	4c1d      	ldr	r4, [pc, #116]	; (d61c <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    d5a8:	4d1b      	ldr	r5, [pc, #108]	; (d618 <SystemTimerSync+0x9c>)
    d5aa:	e005      	b.n	d5b8 <SystemTimerSync+0x3c>
    d5ac:	3201      	adds	r2, #1
    d5ae:	b2d2      	uxtb	r2, r2
    d5b0:	7829      	ldrb	r1, [r5, #0]
    d5b2:	b2c9      	uxtb	r1, r1
    d5b4:	4291      	cmp	r1, r2
    d5b6:	d908      	bls.n	d5ca <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    d5b8:	2bff      	cmp	r3, #255	; 0xff
    d5ba:	d0f7      	beq.n	d5ac <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d5bc:	011b      	lsls	r3, r3, #4
    d5be:	5919      	ldr	r1, [r3, r4]
    d5c0:	1a09      	subs	r1, r1, r0
    d5c2:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    d5c4:	18e3      	adds	r3, r4, r3
    d5c6:	7b1b      	ldrb	r3, [r3, #12]
    d5c8:	e7f0      	b.n	d5ac <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    d5ca:	4b15      	ldr	r3, [pc, #84]	; (d620 <SystemTimerSync+0xa4>)
    d5cc:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d5ce:	4815      	ldr	r0, [pc, #84]	; (d624 <SystemTimerSync+0xa8>)
    d5d0:	4b15      	ldr	r3, [pc, #84]	; (d628 <SystemTimerSync+0xac>)
    d5d2:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d5d4:	4815      	ldr	r0, [pc, #84]	; (d62c <SystemTimerSync+0xb0>)
    d5d6:	4b16      	ldr	r3, [pc, #88]	; (d630 <SystemTimerSync+0xb4>)
    d5d8:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    d5da:	4b0f      	ldr	r3, [pc, #60]	; (d618 <SystemTimerSync+0x9c>)
    d5dc:	781b      	ldrb	r3, [r3, #0]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d009      	beq.n	d5f6 <SystemTimerSync+0x7a>
    d5e2:	4b0c      	ldr	r3, [pc, #48]	; (d614 <SystemTimerSync+0x98>)
    d5e4:	681b      	ldr	r3, [r3, #0]
    d5e6:	2bff      	cmp	r3, #255	; 0xff
    d5e8:	d005      	beq.n	d5f6 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    d5ea:	4b12      	ldr	r3, [pc, #72]	; (d634 <SystemTimerSync+0xb8>)
    d5ec:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    d5ee:	28fe      	cmp	r0, #254	; 0xfe
    d5f0:	d902      	bls.n	d5f8 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    d5f2:	4b11      	ldr	r3, [pc, #68]	; (d638 <SystemTimerSync+0xbc>)
    d5f4:	4798      	blx	r3
        }
    }
}
    d5f6:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    d5f8:	2201      	movs	r2, #1
    d5fa:	4b10      	ldr	r3, [pc, #64]	; (d63c <SystemTimerSync+0xc0>)
    d5fc:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d5fe:	2001      	movs	r0, #1
    d600:	4b0f      	ldr	r3, [pc, #60]	; (d640 <SystemTimerSync+0xc4>)
    d602:	4798      	blx	r3
    d604:	e7f7      	b.n	d5f6 <SystemTimerSync+0x7a>
    d606:	46c0      	nop			; (mov r8, r8)
    d608:	20001e90 	.word	0x20001e90
    d60c:	20002d74 	.word	0x20002d74
    d610:	20002d70 	.word	0x20002d70
    d614:	20001e88 	.word	0x20001e88
    d618:	20001e8c 	.word	0x20001e8c
    d61c:	20002be0 	.word	0x20002be0
    d620:	000133bd 	.word	0x000133bd
    d624:	0000cde1 	.word	0x0000cde1
    d628:	00013441 	.word	0x00013441
    d62c:	0000cdb9 	.word	0x0000cdb9
    d630:	0001344d 	.word	0x0001344d
    d634:	0000d2b9 	.word	0x0000d2b9
    d638:	0000d539 	.word	0x0000d539
    d63c:	20002d72 	.word	0x20002d72
    d640:	0000d6d5 	.word	0x0000d6d5

0000d644 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    d644:	680a      	ldr	r2, [r1, #0]
    d646:	684b      	ldr	r3, [r1, #4]
    d648:	00c1      	lsls	r1, r0, #3
    d64a:	4802      	ldr	r0, [pc, #8]	; (d654 <SwTimerWriteTimestamp+0x10>)
    d64c:	1840      	adds	r0, r0, r1
    d64e:	6002      	str	r2, [r0, #0]
    d650:	6043      	str	r3, [r0, #4]
}
    d652:	4770      	bx	lr
    d654:	20002bd0 	.word	0x20002bd0

0000d658 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    d658:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    d65a:	2010      	movs	r0, #16
    d65c:	4b01      	ldr	r3, [pc, #4]	; (d664 <Stack_Init+0xc>)
    d65e:	4798      	blx	r3
}
    d660:	bd10      	pop	{r4, pc}
    d662:	46c0      	nop			; (mov r8, r8)
    d664:	0000d6d5 	.word	0x0000d6d5

0000d668 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    d66a:	4b16      	ldr	r3, [pc, #88]	; (d6c4 <SYSTEM_RunTasks+0x5c>)
    d66c:	881b      	ldrh	r3, [r3, #0]
    d66e:	b29b      	uxth	r3, r3
    d670:	2b1f      	cmp	r3, #31
    d672:	d922      	bls.n	d6ba <SYSTEM_RunTasks+0x52>
    d674:	e7fe      	b.n	d674 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    d676:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    d678:	4b13      	ldr	r3, [pc, #76]	; (d6c8 <SYSTEM_RunTasks+0x60>)
    d67a:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    d67c:	4911      	ldr	r1, [pc, #68]	; (d6c4 <SYSTEM_RunTasks+0x5c>)
    d67e:	880b      	ldrh	r3, [r1, #0]
    d680:	2201      	movs	r2, #1
    d682:	40aa      	lsls	r2, r5
    d684:	4393      	bics	r3, r2
    d686:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    d688:	4b10      	ldr	r3, [pc, #64]	; (d6cc <SYSTEM_RunTasks+0x64>)
    d68a:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    d68c:	00ad      	lsls	r5, r5, #2
    d68e:	4b10      	ldr	r3, [pc, #64]	; (d6d0 <SYSTEM_RunTasks+0x68>)
    d690:	58eb      	ldr	r3, [r5, r3]
    d692:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    d694:	2101      	movs	r1, #1
        while (sysTaskFlag)
    d696:	883b      	ldrh	r3, [r7, #0]
    d698:	b29b      	uxth	r3, r3
    d69a:	2b00      	cmp	r3, #0
    d69c:	d011      	beq.n	d6c2 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    d69e:	8823      	ldrh	r3, [r4, #0]
    d6a0:	420b      	tst	r3, r1
    d6a2:	d1e8      	bne.n	d676 <SYSTEM_RunTasks+0xe>
    d6a4:	2201      	movs	r2, #1
    d6a6:	8833      	ldrh	r3, [r6, #0]
    d6a8:	b29b      	uxth	r3, r3
    d6aa:	0015      	movs	r5, r2
    d6ac:	4113      	asrs	r3, r2
    d6ae:	4219      	tst	r1, r3
    d6b0:	d1e2      	bne.n	d678 <SYSTEM_RunTasks+0x10>
    d6b2:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    d6b4:	2a05      	cmp	r2, #5
    d6b6:	d1f6      	bne.n	d6a6 <SYSTEM_RunTasks+0x3e>
    d6b8:	e7ed      	b.n	d696 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    d6ba:	4f02      	ldr	r7, [pc, #8]	; (d6c4 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    d6bc:	003c      	movs	r4, r7
    d6be:	003e      	movs	r6, r7
    d6c0:	e7e8      	b.n	d694 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    d6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6c4:	20001e98 	.word	0x20001e98
    d6c8:	0000c689 	.word	0x0000c689
    d6cc:	0000c695 	.word	0x0000c695
    d6d0:	00018b5c 	.word	0x00018b5c

0000d6d4 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    d6d4:	b510      	push	{r4, lr}
    d6d6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d6d8:	4b04      	ldr	r3, [pc, #16]	; (d6ec <SYSTEM_PostTask+0x18>)
    d6da:	4798      	blx	r3
    sysTaskFlag |= task;
    d6dc:	4b04      	ldr	r3, [pc, #16]	; (d6f0 <SYSTEM_PostTask+0x1c>)
    d6de:	8818      	ldrh	r0, [r3, #0]
    d6e0:	4320      	orrs	r0, r4
    d6e2:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    d6e4:	4b03      	ldr	r3, [pc, #12]	; (d6f4 <SYSTEM_PostTask+0x20>)
    d6e6:	4798      	blx	r3
}
    d6e8:	bd10      	pop	{r4, pc}
    d6ea:	46c0      	nop			; (mov r8, r8)
    d6ec:	0000c689 	.word	0x0000c689
    d6f0:	20001e98 	.word	0x20001e98
    d6f4:	0000c695 	.word	0x0000c695

0000d6f8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    d6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6fa:	46d6      	mov	lr, sl
    d6fc:	464f      	mov	r7, r9
    d6fe:	b580      	push	{r7, lr}
    d700:	b083      	sub	sp, #12
    d702:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    d704:	2900      	cmp	r1, #0
    d706:	d102      	bne.n	d70e <Radio_WriteMode+0x16>
    d708:	1f83      	subs	r3, r0, #6
    d70a:	2b01      	cmp	r3, #1
    d70c:	d92a      	bls.n	d764 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    d70e:	2307      	movs	r3, #7
    d710:	4699      	mov	r9, r3
    d712:	001c      	movs	r4, r3
    d714:	4004      	ands	r4, r0
    newModulation &= 0x01;
    d716:	2601      	movs	r6, #1
    d718:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    d71a:	2001      	movs	r0, #1
    d71c:	4b2b      	ldr	r3, [pc, #172]	; (d7cc <Radio_WriteMode+0xd4>)
    d71e:	4798      	blx	r3
    d720:	0005      	movs	r5, r0
    d722:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    d724:	b243      	sxtb	r3, r0
    d726:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    d728:	464b      	mov	r3, r9
    d72a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    d72c:	4652      	mov	r2, sl
    d72e:	0fd2      	lsrs	r2, r2, #31
    d730:	4296      	cmp	r6, r2
    d732:	d00a      	beq.n	d74a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    d734:	2b00      	cmp	r3, #0
    d736:	d11a      	bne.n	d76e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    d738:	2e00      	cmp	r6, #0
    d73a:	d11e      	bne.n	d77a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    d73c:	2778      	movs	r7, #120	; 0x78
    d73e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d740:	0039      	movs	r1, r7
    d742:	2001      	movs	r0, #1
    d744:	4b22      	ldr	r3, [pc, #136]	; (d7d0 <Radio_WriteMode+0xd8>)
    d746:	4798      	blx	r3
    d748:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    d74a:	42a3      	cmp	r3, r4
    d74c:	d00a      	beq.n	d764 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    d74e:	2c00      	cmp	r4, #0
    d750:	d030      	beq.n	d7b4 <Radio_WriteMode+0xbc>
    d752:	9b01      	ldr	r3, [sp, #4]
    d754:	2b01      	cmp	r3, #1
    d756:	d016      	beq.n	d786 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    d758:	21f8      	movs	r1, #248	; 0xf8
    d75a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d75c:	4321      	orrs	r1, r4
    d75e:	2001      	movs	r0, #1
    d760:	4b1b      	ldr	r3, [pc, #108]	; (d7d0 <Radio_WriteMode+0xd8>)
    d762:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    d764:	b003      	add	sp, #12
    d766:	bc0c      	pop	{r2, r3}
    d768:	4691      	mov	r9, r2
    d76a:	469a      	mov	sl, r3
    d76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    d76e:	21f8      	movs	r1, #248	; 0xf8
    d770:	4001      	ands	r1, r0
    d772:	2001      	movs	r0, #1
    d774:	4b16      	ldr	r3, [pc, #88]	; (d7d0 <Radio_WriteMode+0xd8>)
    d776:	4798      	blx	r3
    d778:	e7de      	b.n	d738 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    d77a:	2778      	movs	r7, #120	; 0x78
    d77c:	4653      	mov	r3, sl
    d77e:	401f      	ands	r7, r3
    d780:	2180      	movs	r1, #128	; 0x80
    d782:	430f      	orrs	r7, r1
    d784:	e7dc      	b.n	d740 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    d786:	2041      	movs	r0, #65	; 0x41
    d788:	4b10      	ldr	r3, [pc, #64]	; (d7cc <Radio_WriteMode+0xd4>)
    d78a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    d78c:	2e00      	cmp	r6, #0
    d78e:	d10e      	bne.n	d7ae <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    d790:	2130      	movs	r1, #48	; 0x30
    d792:	4301      	orrs	r1, r0
    d794:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    d796:	2041      	movs	r0, #65	; 0x41
    d798:	4d0d      	ldr	r5, [pc, #52]	; (d7d0 <Radio_WriteMode+0xd8>)
    d79a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    d79c:	21f8      	movs	r1, #248	; 0xf8
    d79e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d7a0:	4321      	orrs	r1, r4
    d7a2:	2001      	movs	r0, #1
    d7a4:	47a8      	blx	r5
			   delay_ms(1);
    d7a6:	2001      	movs	r0, #1
    d7a8:	4b0a      	ldr	r3, [pc, #40]	; (d7d4 <Radio_WriteMode+0xdc>)
    d7aa:	4798      	blx	r3
    d7ac:	e7da      	b.n	d764 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    d7ae:	21cf      	movs	r1, #207	; 0xcf
    d7b0:	4001      	ands	r1, r0
    d7b2:	e7f0      	b.n	d796 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    d7b4:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d7b6:	4039      	ands	r1, r7
    d7b8:	2001      	movs	r0, #1
    d7ba:	4b05      	ldr	r3, [pc, #20]	; (d7d0 <Radio_WriteMode+0xd8>)
    d7bc:	4798      	blx	r3
        if (1 == blocking)
    d7be:	9b01      	ldr	r3, [sp, #4]
    d7c0:	2b01      	cmp	r3, #1
    d7c2:	d1cf      	bne.n	d764 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    d7c4:	2001      	movs	r0, #1
    d7c6:	4b04      	ldr	r3, [pc, #16]	; (d7d8 <Radio_WriteMode+0xe0>)
    d7c8:	4798      	blx	r3
    d7ca:	e7cb      	b.n	d764 <Radio_WriteMode+0x6c>
    d7cc:	0000c4f9 	.word	0x0000c4f9
    d7d0:	0000c4d1 	.word	0x0000c4d1
    d7d4:	0000453d 	.word	0x0000453d
    d7d8:	0000c66d 	.word	0x0000c66d

0000d7dc <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    d7dc:	b500      	push	{lr}
    d7de:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    d7e0:	2012      	movs	r0, #18
    d7e2:	4b0d      	ldr	r3, [pc, #52]	; (d818 <RADIO_FHSSChangeChannel+0x3c>)
    d7e4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    d7e6:	4b0d      	ldr	r3, [pc, #52]	; (d81c <RADIO_FHSSChangeChannel+0x40>)
    d7e8:	8adb      	ldrh	r3, [r3, #22]
    d7ea:	2b00      	cmp	r3, #0
    d7ec:	d007      	beq.n	d7fe <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    d7ee:	4b0b      	ldr	r3, [pc, #44]	; (d81c <RADIO_FHSSChangeChannel+0x40>)
    d7f0:	691b      	ldr	r3, [r3, #16]
    d7f2:	2b00      	cmp	r3, #0
    d7f4:	d003      	beq.n	d7fe <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    d7f6:	4a0a      	ldr	r2, [pc, #40]	; (d820 <RADIO_FHSSChangeChannel+0x44>)
    d7f8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    d7fa:	0692      	lsls	r2, r2, #26
    d7fc:	d405      	bmi.n	d80a <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    d7fe:	2102      	movs	r1, #2
    d800:	2012      	movs	r0, #18
    d802:	4b08      	ldr	r3, [pc, #32]	; (d824 <RADIO_FHSSChangeChannel+0x48>)
    d804:	4798      	blx	r3
}
    d806:	b003      	add	sp, #12
    d808:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    d80a:	a901      	add	r1, sp, #4
    d80c:	2020      	movs	r0, #32
    d80e:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    d810:	9801      	ldr	r0, [sp, #4]
    d812:	4b05      	ldr	r3, [pc, #20]	; (d828 <RADIO_FHSSChangeChannel+0x4c>)
    d814:	4798      	blx	r3
    d816:	e7f2      	b.n	d7fe <RADIO_FHSSChangeChannel+0x22>
    d818:	0000c4f9 	.word	0x0000c4f9
    d81c:	20002d78 	.word	0x20002d78
    d820:	20003046 	.word	0x20003046
    d824:	0000c4d1 	.word	0x0000c4d1
    d828:	0000e4b9 	.word	0x0000e4b9

0000d82c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    d82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    d82e:	2000      	movs	r0, #0
    d830:	4b1a      	ldr	r3, [pc, #104]	; (d89c <RADIO_ReadRandom+0x70>)
    d832:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    d834:	4b1a      	ldr	r3, [pc, #104]	; (d8a0 <RADIO_ReadRandom+0x74>)
    d836:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d838:	2201      	movs	r2, #1
    d83a:	2101      	movs	r1, #1
    d83c:	2000      	movs	r0, #0
    d83e:	4c19      	ldr	r4, [pc, #100]	; (d8a4 <RADIO_ReadRandom+0x78>)
    d840:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    d842:	21ff      	movs	r1, #255	; 0xff
    d844:	2011      	movs	r0, #17
    d846:	4b18      	ldr	r3, [pc, #96]	; (d8a8 <RADIO_ReadRandom+0x7c>)
    d848:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    d84a:	2201      	movs	r2, #1
    d84c:	2101      	movs	r1, #1
    d84e:	2005      	movs	r0, #5
    d850:	47a0      	blx	r4
    d852:	2410      	movs	r4, #16
    retVal = 0;
    d854:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    d856:	4f15      	ldr	r7, [pc, #84]	; (d8ac <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d858:	4e15      	ldr	r6, [pc, #84]	; (d8b0 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    d85a:	2001      	movs	r0, #1
    d85c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d85e:	202c      	movs	r0, #44	; 0x2c
    d860:	47b0      	blx	r6
    d862:	2301      	movs	r3, #1
    d864:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    d866:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d868:	4305      	orrs	r5, r0
    d86a:	b2ad      	uxth	r5, r5
    d86c:	3c01      	subs	r4, #1
    d86e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    d870:	2c00      	cmp	r4, #0
    d872:	d1f2      	bne.n	d85a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    d874:	2000      	movs	r0, #0
    d876:	4b0f      	ldr	r3, [pc, #60]	; (d8b4 <RADIO_ReadRandom+0x88>)
    d878:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d87a:	2201      	movs	r2, #1
    d87c:	2101      	movs	r1, #1
    d87e:	2000      	movs	r0, #0
    d880:	4b08      	ldr	r3, [pc, #32]	; (d8a4 <RADIO_ReadRandom+0x78>)
    d882:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    d884:	21ff      	movs	r1, #255	; 0xff
    d886:	2012      	movs	r0, #18
    d888:	4c07      	ldr	r4, [pc, #28]	; (d8a8 <RADIO_ReadRandom+0x7c>)
    d88a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    d88c:	2100      	movs	r1, #0
    d88e:	2011      	movs	r0, #17
    d890:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    d892:	4b09      	ldr	r3, [pc, #36]	; (d8b8 <RADIO_ReadRandom+0x8c>)
    d894:	4798      	blx	r3
	
    return retVal;
}
    d896:	0028      	movs	r0, r5
    d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d89a:	46c0      	nop			; (mov r8, r8)
    d89c:	0000ed75 	.word	0x0000ed75
    d8a0:	0000f131 	.word	0x0000f131
    d8a4:	0000d6f9 	.word	0x0000d6f9
    d8a8:	0000c4d1 	.word	0x0000c4d1
    d8ac:	0000c66d 	.word	0x0000c66d
    d8b0:	0000c4f9 	.word	0x0000c4f9
    d8b4:	0000eda9 	.word	0x0000eda9
    d8b8:	0000f261 	.word	0x0000f261

0000d8bc <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    d8bc:	b510      	push	{r4, lr}
    d8be:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    d8c0:	2334      	movs	r3, #52	; 0x34
    d8c2:	4a11      	ldr	r2, [pc, #68]	; (d908 <Radio_ReadRssi+0x4c>)
    d8c4:	5cd3      	ldrb	r3, [r2, r3]
    d8c6:	2b01      	cmp	r3, #1
    d8c8:	d003      	beq.n	d8d2 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    d8ca:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    d8cc:	2b00      	cmp	r3, #0
    d8ce:	d012      	beq.n	d8f6 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    d8d0:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    d8d2:	4b0e      	ldr	r3, [pc, #56]	; (d90c <Radio_ReadRssi+0x50>)
    d8d4:	6812      	ldr	r2, [r2, #0]
    d8d6:	429a      	cmp	r2, r3
    d8d8:	d906      	bls.n	d8e8 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d8da:	201a      	movs	r0, #26
    d8dc:	4b0c      	ldr	r3, [pc, #48]	; (d910 <Radio_ReadRssi+0x54>)
    d8de:	4798      	blx	r3
    d8e0:	389d      	subs	r0, #157	; 0x9d
    d8e2:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d8e4:	2000      	movs	r0, #0
    d8e6:	e7f3      	b.n	d8d0 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d8e8:	201a      	movs	r0, #26
    d8ea:	4b09      	ldr	r3, [pc, #36]	; (d910 <Radio_ReadRssi+0x54>)
    d8ec:	4798      	blx	r3
    d8ee:	38a4      	subs	r0, #164	; 0xa4
    d8f0:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d8f2:	2000      	movs	r0, #0
    d8f4:	e7ec      	b.n	d8d0 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d8f6:	300b      	adds	r0, #11
    d8f8:	4b05      	ldr	r3, [pc, #20]	; (d910 <Radio_ReadRssi+0x54>)
    d8fa:	4798      	blx	r3
    d8fc:	0840      	lsrs	r0, r0, #1
    d8fe:	b2c3      	uxtb	r3, r0
    d900:	425b      	negs	r3, r3
    d902:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    d904:	2000      	movs	r0, #0
    d906:	e7e3      	b.n	d8d0 <Radio_ReadRssi+0x14>
    d908:	20002d78 	.word	0x20002d78
    d90c:	3361137f 	.word	0x3361137f
    d910:	0000c4f9 	.word	0x0000c4f9

0000d914 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    d914:	b510      	push	{r4, lr}
    d916:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d918:	2011      	movs	r0, #17
    d91a:	4b04      	ldr	r3, [pc, #16]	; (d92c <Radio_ReadFSKRssi+0x18>)
    d91c:	4798      	blx	r3
    d91e:	0840      	lsrs	r0, r0, #1
    d920:	b2c0      	uxtb	r0, r0
    d922:	4240      	negs	r0, r0
    d924:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    d926:	2000      	movs	r0, #0
    d928:	bd10      	pop	{r4, pc}
    d92a:	46c0      	nop			; (mov r8, r8)
    d92c:	0000c4f9 	.word	0x0000c4f9

0000d930 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d930:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d932:	4b01      	ldr	r3, [pc, #4]	; (d938 <tc_cca_callback+0x8>)
    d934:	4798      	blx	r3
}
    d936:	bd10      	pop	{r4, pc}
    d938:	00013425 	.word	0x00013425

0000d93c <tc_ovf_callback>:
{
    d93c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d93e:	4b01      	ldr	r3, [pc, #4]	; (d944 <tc_ovf_callback+0x8>)
    d940:	4798      	blx	r3
}
    d942:	bd10      	pop	{r4, pc}
    d944:	000133dd 	.word	0x000133dd

0000d948 <tmr_read_count>:
{
    d948:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d94a:	4802      	ldr	r0, [pc, #8]	; (d954 <tmr_read_count+0xc>)
    d94c:	4b02      	ldr	r3, [pc, #8]	; (d958 <tmr_read_count+0x10>)
    d94e:	4798      	blx	r3
    d950:	b280      	uxth	r0, r0
}
    d952:	bd10      	pop	{r4, pc}
    d954:	20002e0c 	.word	0x20002e0c
    d958:	00006fb5 	.word	0x00006fb5

0000d95c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d95c:	4b03      	ldr	r3, [pc, #12]	; (d96c <tmr_disable_cc_interrupt+0x10>)
    d95e:	2110      	movs	r1, #16
    d960:	681a      	ldr	r2, [r3, #0]
    d962:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d964:	7e5a      	ldrb	r2, [r3, #25]
    d966:	438a      	bics	r2, r1
    d968:	765a      	strb	r2, [r3, #25]
}
    d96a:	4770      	bx	lr
    d96c:	20002e0c 	.word	0x20002e0c

0000d970 <tmr_enable_cc_interrupt>:
{
    d970:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d972:	4c0a      	ldr	r4, [pc, #40]	; (d99c <tmr_enable_cc_interrupt+0x2c>)
    d974:	6820      	ldr	r0, [r4, #0]
    d976:	4b0a      	ldr	r3, [pc, #40]	; (d9a0 <tmr_enable_cc_interrupt+0x30>)
    d978:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d97a:	4b0a      	ldr	r3, [pc, #40]	; (d9a4 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d97c:	5c1b      	ldrb	r3, [r3, r0]
    d97e:	221f      	movs	r2, #31
    d980:	401a      	ands	r2, r3
    d982:	2301      	movs	r3, #1
    d984:	4093      	lsls	r3, r2
    d986:	4a08      	ldr	r2, [pc, #32]	; (d9a8 <tmr_enable_cc_interrupt+0x38>)
    d988:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d98a:	7e63      	ldrb	r3, [r4, #25]
    d98c:	2210      	movs	r2, #16
    d98e:	4313      	orrs	r3, r2
    d990:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d992:	6823      	ldr	r3, [r4, #0]
    d994:	2210      	movs	r2, #16
    d996:	725a      	strb	r2, [r3, #9]
}
    d998:	bd10      	pop	{r4, pc}
    d99a:	46c0      	nop			; (mov r8, r8)
    d99c:	20002e0c 	.word	0x20002e0c
    d9a0:	00006c89 	.word	0x00006c89
    d9a4:	00018b70 	.word	0x00018b70
    d9a8:	e000e100 	.word	0xe000e100

0000d9ac <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d9ac:	4b03      	ldr	r3, [pc, #12]	; (d9bc <tmr_disable_ovf_interrupt+0x10>)
    d9ae:	2101      	movs	r1, #1
    d9b0:	681a      	ldr	r2, [r3, #0]
    d9b2:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d9b4:	7e5a      	ldrb	r2, [r3, #25]
    d9b6:	438a      	bics	r2, r1
    d9b8:	765a      	strb	r2, [r3, #25]
}
    d9ba:	4770      	bx	lr
    d9bc:	20002e0c 	.word	0x20002e0c

0000d9c0 <tmr_enable_ovf_interrupt>:
{
    d9c0:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d9c2:	4c0a      	ldr	r4, [pc, #40]	; (d9ec <tmr_enable_ovf_interrupt+0x2c>)
    d9c4:	6820      	ldr	r0, [r4, #0]
    d9c6:	4b0a      	ldr	r3, [pc, #40]	; (d9f0 <tmr_enable_ovf_interrupt+0x30>)
    d9c8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d9ca:	4b0a      	ldr	r3, [pc, #40]	; (d9f4 <tmr_enable_ovf_interrupt+0x34>)
    d9cc:	5c1a      	ldrb	r2, [r3, r0]
    d9ce:	231f      	movs	r3, #31
    d9d0:	4013      	ands	r3, r2
    d9d2:	2201      	movs	r2, #1
    d9d4:	0011      	movs	r1, r2
    d9d6:	4099      	lsls	r1, r3
    d9d8:	4b07      	ldr	r3, [pc, #28]	; (d9f8 <tmr_enable_ovf_interrupt+0x38>)
    d9da:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d9dc:	7e63      	ldrb	r3, [r4, #25]
    d9de:	2101      	movs	r1, #1
    d9e0:	430b      	orrs	r3, r1
    d9e2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d9e4:	6823      	ldr	r3, [r4, #0]
    d9e6:	725a      	strb	r2, [r3, #9]
}
    d9e8:	bd10      	pop	{r4, pc}
    d9ea:	46c0      	nop			; (mov r8, r8)
    d9ec:	20002e0c 	.word	0x20002e0c
    d9f0:	00006c89 	.word	0x00006c89
    d9f4:	00018b70 	.word	0x00018b70
    d9f8:	e000e100 	.word	0xe000e100

0000d9fc <tmr_write_cmpreg>:
{
    d9fc:	b510      	push	{r4, lr}
    d9fe:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    da00:	2100      	movs	r1, #0
    da02:	4802      	ldr	r0, [pc, #8]	; (da0c <tmr_write_cmpreg+0x10>)
    da04:	4b02      	ldr	r3, [pc, #8]	; (da10 <tmr_write_cmpreg+0x14>)
    da06:	4798      	blx	r3
}
    da08:	bd10      	pop	{r4, pc}
    da0a:	46c0      	nop			; (mov r8, r8)
    da0c:	20002e0c 	.word	0x20002e0c
    da10:	00006ffd 	.word	0x00006ffd

0000da14 <save_cpu_interrupt>:
{
    da14:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    da16:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    da1a:	425a      	negs	r2, r3
    da1c:	4153      	adcs	r3, r2
    da1e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    da20:	b672      	cpsid	i
    da22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    da26:	2200      	movs	r2, #0
    da28:	4b02      	ldr	r3, [pc, #8]	; (da34 <save_cpu_interrupt+0x20>)
    da2a:	701a      	strb	r2, [r3, #0]
	return flags;
    da2c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    da2e:	b2c0      	uxtb	r0, r0
}
    da30:	b002      	add	sp, #8
    da32:	4770      	bx	lr
    da34:	20000008 	.word	0x20000008

0000da38 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    da38:	2800      	cmp	r0, #0
    da3a:	d005      	beq.n	da48 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    da3c:	2201      	movs	r2, #1
    da3e:	4b03      	ldr	r3, [pc, #12]	; (da4c <restore_cpu_interrupt+0x14>)
    da40:	701a      	strb	r2, [r3, #0]
    da42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    da46:	b662      	cpsie	i
}
    da48:	4770      	bx	lr
    da4a:	46c0      	nop			; (mov r8, r8)
    da4c:	20000008 	.word	0x20000008

0000da50 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    da50:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    da52:	4a33      	ldr	r2, [pc, #204]	; (db20 <tmr_init+0xd0>)
    da54:	2100      	movs	r1, #0
    da56:	2300      	movs	r3, #0
    da58:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    da5a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    da5c:	2000      	movs	r0, #0
    da5e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    da60:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    da62:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    da64:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    da66:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    da68:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    da6a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    da6c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    da6e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    da70:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    da72:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    da74:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    da76:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    da78:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    da7a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    da7c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    da7e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    da80:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    da82:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    da84:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    da86:	2334      	movs	r3, #52	; 0x34
    da88:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    da8a:	3b35      	subs	r3, #53	; 0x35
    da8c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    da8e:	4c25      	ldr	r4, [pc, #148]	; (db24 <tmr_init+0xd4>)
    da90:	4925      	ldr	r1, [pc, #148]	; (db28 <tmr_init+0xd8>)
    da92:	0020      	movs	r0, r4
    da94:	4b25      	ldr	r3, [pc, #148]	; (db2c <tmr_init+0xdc>)
    da96:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    da98:	2200      	movs	r2, #0
    da9a:	4925      	ldr	r1, [pc, #148]	; (db30 <tmr_init+0xe0>)
    da9c:	0020      	movs	r0, r4
    da9e:	4d25      	ldr	r5, [pc, #148]	; (db34 <tmr_init+0xe4>)
    daa0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    daa2:	2202      	movs	r2, #2
    daa4:	4924      	ldr	r1, [pc, #144]	; (db38 <tmr_init+0xe8>)
    daa6:	0020      	movs	r0, r4
    daa8:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    daaa:	6820      	ldr	r0, [r4, #0]
    daac:	4b23      	ldr	r3, [pc, #140]	; (db3c <tmr_init+0xec>)
    daae:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    dab0:	4b23      	ldr	r3, [pc, #140]	; (db40 <tmr_init+0xf0>)
    dab2:	5c1a      	ldrb	r2, [r3, r0]
    dab4:	231f      	movs	r3, #31
    dab6:	4013      	ands	r3, r2
    dab8:	2101      	movs	r1, #1
    daba:	000a      	movs	r2, r1
    dabc:	409a      	lsls	r2, r3
    dabe:	4b21      	ldr	r3, [pc, #132]	; (db44 <tmr_init+0xf4>)
    dac0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    dac2:	7e63      	ldrb	r3, [r4, #25]
    dac4:	2201      	movs	r2, #1
    dac6:	4313      	orrs	r3, r2
    dac8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    daca:	6822      	ldr	r2, [r4, #0]
    dacc:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    dace:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dad0:	2b00      	cmp	r3, #0
    dad2:	d1fc      	bne.n	dace <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    dad4:	6813      	ldr	r3, [r2, #0]
    dad6:	2102      	movs	r1, #2
    dad8:	430b      	orrs	r3, r1
    dada:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    dadc:	2000      	movs	r0, #0
    dade:	4b1a      	ldr	r3, [pc, #104]	; (db48 <tmr_init+0xf8>)
    dae0:	4798      	blx	r3
    dae2:	4d1a      	ldr	r5, [pc, #104]	; (db4c <tmr_init+0xfc>)
    dae4:	47a8      	blx	r5
    dae6:	491a      	ldr	r1, [pc, #104]	; (db50 <tmr_init+0x100>)
    dae8:	4b1a      	ldr	r3, [pc, #104]	; (db54 <tmr_init+0x104>)
    daea:	4798      	blx	r3
    daec:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    daee:	4b1a      	ldr	r3, [pc, #104]	; (db58 <tmr_init+0x108>)
    daf0:	4798      	blx	r3
    daf2:	47a8      	blx	r5
    daf4:	1c01      	adds	r1, r0, #0
    daf6:	1c20      	adds	r0, r4, #0
    daf8:	4b18      	ldr	r3, [pc, #96]	; (db5c <tmr_init+0x10c>)
    dafa:	4798      	blx	r3
    dafc:	21fc      	movs	r1, #252	; 0xfc
    dafe:	0589      	lsls	r1, r1, #22
    db00:	4b17      	ldr	r3, [pc, #92]	; (db60 <tmr_init+0x110>)
    db02:	4798      	blx	r3
    db04:	2800      	cmp	r0, #0
    db06:	d005      	beq.n	db14 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    db08:	21fe      	movs	r1, #254	; 0xfe
    db0a:	0589      	lsls	r1, r1, #22
    db0c:	1c20      	adds	r0, r4, #0
    db0e:	4b15      	ldr	r3, [pc, #84]	; (db64 <tmr_init+0x114>)
    db10:	4798      	blx	r3
    db12:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    db14:	1c20      	adds	r0, r4, #0
    db16:	4b10      	ldr	r3, [pc, #64]	; (db58 <tmr_init+0x108>)
    db18:	4798      	blx	r3
    db1a:	b2c0      	uxtb	r0, r0
}
    db1c:	bd70      	pop	{r4, r5, r6, pc}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	20002dd4 	.word	0x20002dd4
    db24:	20002e0c 	.word	0x20002e0c
    db28:	42002000 	.word	0x42002000
    db2c:	00006cc5 	.word	0x00006cc5
    db30:	0000d93d 	.word	0x0000d93d
    db34:	00006bc1 	.word	0x00006bc1
    db38:	0000d931 	.word	0x0000d931
    db3c:	00006c89 	.word	0x00006c89
    db40:	00018b70 	.word	0x00018b70
    db44:	e000e100 	.word	0xe000e100
    db48:	00006989 	.word	0x00006989
    db4c:	0001488d 	.word	0x0001488d
    db50:	49742400 	.word	0x49742400
    db54:	00013e55 	.word	0x00013e55
    db58:	00013905 	.word	0x00013905
    db5c:	00014475 	.word	0x00014475
    db60:	0001385d 	.word	0x0001385d
    db64:	00013b31 	.word	0x00013b31

0000db68 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    db68:	b570      	push	{r4, r5, r6, lr}
    db6a:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    db6c:	aa03      	add	r2, sp, #12
    db6e:	2364      	movs	r3, #100	; 0x64
    db70:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    db72:	4b54      	ldr	r3, [pc, #336]	; (dcc4 <edbg_eui_read_eui64+0x15c>)
    db74:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    db76:	2300      	movs	r3, #0
    db78:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    db7a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    db7c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    db7e:	2180      	movs	r1, #128	; 0x80
    db80:	0389      	lsls	r1, r1, #14
    db82:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    db84:	2101      	movs	r1, #1
    db86:	4249      	negs	r1, r1
    db88:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    db8a:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    db8c:	3125      	adds	r1, #37	; 0x25
    db8e:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    db90:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    db92:	3108      	adds	r1, #8
    db94:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    db96:	3101      	adds	r1, #1
    db98:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    db9a:	3101      	adds	r1, #1
    db9c:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    db9e:	33d7      	adds	r3, #215	; 0xd7
    dba0:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    dba2:	4b49      	ldr	r3, [pc, #292]	; (dcc8 <edbg_eui_read_eui64+0x160>)
    dba4:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    dba6:	4b49      	ldr	r3, [pc, #292]	; (dccc <edbg_eui_read_eui64+0x164>)
    dba8:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    dbaa:	4c49      	ldr	r4, [pc, #292]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dbac:	4949      	ldr	r1, [pc, #292]	; (dcd4 <edbg_eui_read_eui64+0x16c>)
    dbae:	0020      	movs	r0, r4
    dbb0:	4b49      	ldr	r3, [pc, #292]	; (dcd8 <edbg_eui_read_eui64+0x170>)
    dbb2:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    dbb4:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    dbb6:	2107      	movs	r1, #7
    dbb8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    dbba:	4219      	tst	r1, r3
    dbbc:	d1fc      	bne.n	dbb8 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    dbbe:	6813      	ldr	r3, [r2, #0]
    dbc0:	2102      	movs	r1, #2
    dbc2:	430b      	orrs	r3, r1
    dbc4:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    dbc6:	4b42      	ldr	r3, [pc, #264]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dbc8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    dbca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    dbcc:	2010      	movs	r0, #16
    dbce:	8b51      	ldrh	r1, [r2, #26]
    dbd0:	4201      	tst	r1, r0
    dbd2:	d104      	bne.n	dbde <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    dbd4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    dbd6:	42a3      	cmp	r3, r4
    dbd8:	d3f9      	bcc.n	dbce <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    dbda:	2310      	movs	r3, #16
    dbdc:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    dbde:	466a      	mov	r2, sp
    dbe0:	4b3e      	ldr	r3, [pc, #248]	; (dcdc <edbg_eui_read_eui64+0x174>)
    dbe2:	cb13      	ldmia	r3!, {r0, r1, r4}
    dbe4:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    dbe6:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    dbe8:	4c39      	ldr	r4, [pc, #228]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dbea:	4d3d      	ldr	r5, [pc, #244]	; (dce0 <edbg_eui_read_eui64+0x178>)
    dbec:	e003      	b.n	dbf6 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    dbee:	1c73      	adds	r3, r6, #1
    dbf0:	2e0a      	cmp	r6, #10
    dbf2:	d033      	beq.n	dc5c <edbg_eui_read_eui64+0xf4>
    dbf4:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    dbf6:	4669      	mov	r1, sp
    dbf8:	0020      	movs	r0, r4
    dbfa:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    dbfc:	2818      	cmp	r0, #24
    dbfe:	d0f6      	beq.n	dbee <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    dc00:	2812      	cmp	r0, #18
    dc02:	d02f      	beq.n	dc64 <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    dc04:	3801      	subs	r0, #1
    dc06:	b2c0      	uxtb	r0, r0
    dc08:	28fd      	cmp	r0, #253	; 0xfd
    dc0a:	d9f4      	bls.n	dbf6 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    dc0c:	4b35      	ldr	r3, [pc, #212]	; (dce4 <edbg_eui_read_eui64+0x17c>)
    dc0e:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    dc10:	2380      	movs	r3, #128	; 0x80
    dc12:	005b      	lsls	r3, r3, #1
    dc14:	466a      	mov	r2, sp
    dc16:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    dc18:	4c2d      	ldr	r4, [pc, #180]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dc1a:	4d33      	ldr	r5, [pc, #204]	; (dce8 <edbg_eui_read_eui64+0x180>)
    dc1c:	4669      	mov	r1, sp
    dc1e:	0020      	movs	r0, r4
    dc20:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    dc22:	2818      	cmp	r0, #24
    dc24:	d043      	beq.n	dcae <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    dc26:	2812      	cmp	r0, #18
    dc28:	d048      	beq.n	dcbc <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    dc2a:	3801      	subs	r0, #1
    dc2c:	b2c0      	uxtb	r0, r0
    dc2e:	28fd      	cmp	r0, #253	; 0xfd
    dc30:	d9f4      	bls.n	dc1c <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    dc32:	4827      	ldr	r0, [pc, #156]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dc34:	4b2d      	ldr	r3, [pc, #180]	; (dcec <edbg_eui_read_eui64+0x184>)
    dc36:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    dc38:	4a2a      	ldr	r2, [pc, #168]	; (dce4 <edbg_eui_read_eui64+0x17c>)
    dc3a:	7813      	ldrb	r3, [r2, #0]
    dc3c:	7851      	ldrb	r1, [r2, #1]
    dc3e:	404b      	eors	r3, r1
    dc40:	7891      	ldrb	r1, [r2, #2]
    dc42:	404b      	eors	r3, r1
    dc44:	78d1      	ldrb	r1, [r2, #3]
    dc46:	404b      	eors	r3, r1
    dc48:	7911      	ldrb	r1, [r2, #4]
    dc4a:	404b      	eors	r3, r1
    dc4c:	7951      	ldrb	r1, [r2, #5]
    dc4e:	404b      	eors	r3, r1
    dc50:	7991      	ldrb	r1, [r2, #6]
    dc52:	79d2      	ldrb	r2, [r2, #7]
    dc54:	404b      	eors	r3, r1
    dc56:	429a      	cmp	r2, r3
    dc58:	d126      	bne.n	dca8 <edbg_eui_read_eui64+0x140>
    dc5a:	e00f      	b.n	dc7c <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    dc5c:	4824      	ldr	r0, [pc, #144]	; (dcf0 <edbg_eui_read_eui64+0x188>)
    dc5e:	4b25      	ldr	r3, [pc, #148]	; (dcf4 <edbg_eui_read_eui64+0x18c>)
    dc60:	4798      	blx	r3
				break;
    dc62:	e002      	b.n	dc6a <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    dc64:	4824      	ldr	r0, [pc, #144]	; (dcf8 <edbg_eui_read_eui64+0x190>)
    dc66:	4b25      	ldr	r3, [pc, #148]	; (dcfc <edbg_eui_read_eui64+0x194>)
    dc68:	4798      	blx	r3
  packet.data = readbuf;
    dc6a:	4b1e      	ldr	r3, [pc, #120]	; (dce4 <edbg_eui_read_eui64+0x17c>)
    dc6c:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    dc6e:	2380      	movs	r3, #128	; 0x80
    dc70:	005b      	lsls	r3, r3, #1
    dc72:	466a      	mov	r2, sp
    dc74:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    dc76:	4816      	ldr	r0, [pc, #88]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dc78:	4b1c      	ldr	r3, [pc, #112]	; (dcec <edbg_eui_read_eui64+0x184>)
    dc7a:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    dc7c:	4b20      	ldr	r3, [pc, #128]	; (dd00 <edbg_eui_read_eui64+0x198>)
    dc7e:	6818      	ldr	r0, [r3, #0]
    dc80:	4b20      	ldr	r3, [pc, #128]	; (dd04 <edbg_eui_read_eui64+0x19c>)
    dc82:	681b      	ldr	r3, [r3, #0]
    dc84:	4058      	eors	r0, r3
    dc86:	4b20      	ldr	r3, [pc, #128]	; (dd08 <edbg_eui_read_eui64+0x1a0>)
    dc88:	681b      	ldr	r3, [r3, #0]
    dc8a:	4058      	eors	r0, r3
    dc8c:	4b1f      	ldr	r3, [pc, #124]	; (dd0c <edbg_eui_read_eui64+0x1a4>)
    dc8e:	681b      	ldr	r3, [r3, #0]
    dc90:	4058      	eors	r0, r3
	  srand(seed);
    dc92:	4b1f      	ldr	r3, [pc, #124]	; (dd10 <edbg_eui_read_eui64+0x1a8>)
    dc94:	4798      	blx	r3
    dc96:	4c13      	ldr	r4, [pc, #76]	; (dce4 <edbg_eui_read_eui64+0x17c>)
    dc98:	0026      	movs	r6, r4
    dc9a:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    dc9c:	4d1d      	ldr	r5, [pc, #116]	; (dd14 <edbg_eui_read_eui64+0x1ac>)
    dc9e:	47a8      	blx	r5
    dca0:	7020      	strb	r0, [r4, #0]
    dca2:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    dca4:	42a6      	cmp	r6, r4
    dca6:	d1fa      	bne.n	dc9e <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    dca8:	480e      	ldr	r0, [pc, #56]	; (dce4 <edbg_eui_read_eui64+0x17c>)
    dcaa:	b010      	add	sp, #64	; 0x40
    dcac:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    dcae:	4810      	ldr	r0, [pc, #64]	; (dcf0 <edbg_eui_read_eui64+0x188>)
    dcb0:	4b10      	ldr	r3, [pc, #64]	; (dcf4 <edbg_eui_read_eui64+0x18c>)
    dcb2:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    dcb4:	4806      	ldr	r0, [pc, #24]	; (dcd0 <edbg_eui_read_eui64+0x168>)
    dcb6:	4b0d      	ldr	r3, [pc, #52]	; (dcec <edbg_eui_read_eui64+0x184>)
    dcb8:	4798      	blx	r3
    dcba:	e7df      	b.n	dc7c <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    dcbc:	4816      	ldr	r0, [pc, #88]	; (dd18 <edbg_eui_read_eui64+0x1b0>)
    dcbe:	4b0f      	ldr	r3, [pc, #60]	; (dcfc <edbg_eui_read_eui64+0x194>)
    dcc0:	4798      	blx	r3
			break;
    dcc2:	e7f7      	b.n	dcb4 <edbg_eui_read_eui64+0x14c>
    dcc4:	00000d48 	.word	0x00000d48
    dcc8:	00100002 	.word	0x00100002
    dccc:	00110002 	.word	0x00110002
    dcd0:	20002f28 	.word	0x20002f28
    dcd4:	42000400 	.word	0x42000400
    dcd8:	00004e0d 	.word	0x00004e0d
    dcdc:	00018b78 	.word	0x00018b78
    dce0:	00005439 	.word	0x00005439
    dce4:	20002e28 	.word	0x20002e28
    dce8:	00005425 	.word	0x00005425
    dcec:	000050e9 	.word	0x000050e9
    dcf0:	00018b84 	.word	0x00018b84
    dcf4:	00016cb1 	.word	0x00016cb1
    dcf8:	00018b9c 	.word	0x00018b9c
    dcfc:	00016dcd 	.word	0x00016dcd
    dd00:	0080a00c 	.word	0x0080a00c
    dd04:	0080a040 	.word	0x0080a040
    dd08:	0080a044 	.word	0x0080a044
    dd0c:	0080a048 	.word	0x0080a048
    dd10:	00016de1 	.word	0x00016de1
    dd14:	00016e3d 	.word	0x00016e3d
    dd18:	00018ba8 	.word	0x00018ba8

0000dd1c <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    dd1c:	b500      	push	{lr}
    dd1e:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    dd20:	2800      	cmp	r0, #0
    dd22:	d110      	bne.n	dd46 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    dd24:	2300      	movs	r3, #0
    dd26:	466a      	mov	r2, sp
    dd28:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    dd2a:	4a08      	ldr	r2, [pc, #32]	; (dd4c <nvm_init+0x30>)
    dd2c:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    dd2e:	466a      	mov	r2, sp
    dd30:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    dd32:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    dd34:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    dd36:	3302      	adds	r3, #2
    dd38:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    dd3a:	4668      	mov	r0, sp
    dd3c:	4b04      	ldr	r3, [pc, #16]	; (dd50 <nvm_init+0x34>)
    dd3e:	4798      	blx	r3

		return STATUS_OK;
    dd40:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    dd42:	b003      	add	sp, #12
    dd44:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    dd46:	2008      	movs	r0, #8
    dd48:	4240      	negs	r0, r0
    dd4a:	e7fa      	b.n	dd42 <nvm_init+0x26>
    dd4c:	41004000 	.word	0x41004000
    dd50:	00004a05 	.word	0x00004a05

0000dd54 <UART_IO_rx_cb>:
	usart_enable_callback(&UART_IO, USART_CALLBACK_BUFFER_RECEIVED);
}


void UART_IO_rx_cb(struct usart_module *const usart_module)
{
    dd54:	b510      	push	{r4, lr}
	printf("\n\r UART message received %x", rx_buffer_IO[0]);
    dd56:	4c05      	ldr	r4, [pc, #20]	; (dd6c <UART_IO_rx_cb+0x18>)
    dd58:	7821      	ldrb	r1, [r4, #0]
    dd5a:	b2c9      	uxtb	r1, r1
    dd5c:	4804      	ldr	r0, [pc, #16]	; (dd70 <UART_IO_rx_cb+0x1c>)
    dd5e:	4b05      	ldr	r3, [pc, #20]	; (dd74 <UART_IO_rx_cb+0x20>)
    dd60:	4798      	blx	r3
	M_SendReceivedUARTMessage(rx_buffer_IO[0]);
    dd62:	7820      	ldrb	r0, [r4, #0]
    dd64:	b2c0      	uxtb	r0, r0
    dd66:	4b04      	ldr	r3, [pc, #16]	; (dd78 <UART_IO_rx_cb+0x24>)
    dd68:	4798      	blx	r3
}
    dd6a:	bd10      	pop	{r4, pc}
    dd6c:	20001f9c 	.word	0x20001f9c
    dd70:	00018bb4 	.word	0x00018bb4
    dd74:	00016cb1 	.word	0x00016cb1
    dd78:	000076e5 	.word	0x000076e5

0000dd7c <UART_IO_init>:
{
    dd7c:	b530      	push	{r4, r5, lr}
    dd7e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    dd80:	2380      	movs	r3, #128	; 0x80
    dd82:	05db      	lsls	r3, r3, #23
    dd84:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    dd86:	2300      	movs	r3, #0
    dd88:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    dd8a:	22ff      	movs	r2, #255	; 0xff
    dd8c:	4669      	mov	r1, sp
    dd8e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    dd90:	2200      	movs	r2, #0
    dd92:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    dd94:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    dd96:	2101      	movs	r1, #1
    dd98:	2024      	movs	r0, #36	; 0x24
    dd9a:	466c      	mov	r4, sp
    dd9c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    dd9e:	3001      	adds	r0, #1
    dda0:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    dda2:	3125      	adds	r1, #37	; 0x25
    dda4:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    dda6:	3101      	adds	r1, #1
    dda8:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    ddaa:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    ddac:	3105      	adds	r1, #5
    ddae:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    ddb0:	3101      	adds	r1, #1
    ddb2:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    ddb4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    ddb6:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    ddb8:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    ddba:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    ddbc:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    ddbe:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    ddc0:	2313      	movs	r3, #19
    ddc2:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    ddc4:	7762      	strb	r2, [r4, #29]
	config_uart_IO.baudrate    = UART_BAUD;
    ddc6:	23e1      	movs	r3, #225	; 0xe1
    ddc8:	025b      	lsls	r3, r3, #9
    ddca:	9308      	str	r3, [sp, #32]
	config_uart_IO.mux_setting = USART_RX_3_TX_0_XCK_1; //SERCOM1
    ddcc:	23c0      	movs	r3, #192	; 0xc0
    ddce:	039b      	lsls	r3, r3, #14
    ddd0:	9303      	str	r3, [sp, #12]
	config_uart_IO.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0; //TX
    ddd2:	4b12      	ldr	r3, [pc, #72]	; (de1c <UART_IO_init+0xa0>)
    ddd4:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_IO.pinmux_pad1 = PINMUX_UNUSED; //UNUSED
    ddd6:	2301      	movs	r3, #1
    ddd8:	425b      	negs	r3, r3
    ddda:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_IO.pinmux_pad2 = PINMUX_UNUSED;
    dddc:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_IO.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3; //RX
    ddde:	4b10      	ldr	r3, [pc, #64]	; (de20 <UART_IO_init+0xa4>)
    dde0:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_IO,SERCOM5, &config_uart_IO) != STATUS_OK) {
    dde2:	4d10      	ldr	r5, [pc, #64]	; (de24 <UART_IO_init+0xa8>)
    dde4:	4c10      	ldr	r4, [pc, #64]	; (de28 <UART_IO_init+0xac>)
    dde6:	466a      	mov	r2, sp
    dde8:	4910      	ldr	r1, [pc, #64]	; (de2c <UART_IO_init+0xb0>)
    ddea:	0028      	movs	r0, r5
    ddec:	47a0      	blx	r4
    ddee:	2800      	cmp	r0, #0
    ddf0:	d1f9      	bne.n	dde6 <UART_IO_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    ddf2:	4d0c      	ldr	r5, [pc, #48]	; (de24 <UART_IO_init+0xa8>)
    ddf4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ddf6:	0020      	movs	r0, r4
    ddf8:	4b0d      	ldr	r3, [pc, #52]	; (de30 <UART_IO_init+0xb4>)
    ddfa:	4798      	blx	r3
    ddfc:	231f      	movs	r3, #31
    ddfe:	4018      	ands	r0, r3
    de00:	3b1e      	subs	r3, #30
    de02:	4083      	lsls	r3, r0
    de04:	4a0b      	ldr	r2, [pc, #44]	; (de34 <UART_IO_init+0xb8>)
    de06:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    de08:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    de0a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    de0c:	2b00      	cmp	r3, #0
    de0e:	d1fc      	bne.n	de0a <UART_IO_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    de10:	6823      	ldr	r3, [r4, #0]
    de12:	2202      	movs	r2, #2
    de14:	4313      	orrs	r3, r2
    de16:	6023      	str	r3, [r4, #0]
}
    de18:	b011      	add	sp, #68	; 0x44
    de1a:	bd30      	pop	{r4, r5, pc}
    de1c:	00220003 	.word	0x00220003
    de20:	00370003 	.word	0x00370003
    de24:	20001f68 	.word	0x20001f68
    de28:	00005cb5 	.word	0x00005cb5
    de2c:	43000400 	.word	0x43000400
    de30:	000057e5 	.word	0x000057e5
    de34:	e000e100 	.word	0xe000e100

0000de38 <UART_init>:
{
    de38:	b510      	push	{r4, lr}
	UART_IO_init();
    de3a:	4b01      	ldr	r3, [pc, #4]	; (de40 <UART_init+0x8>)
    de3c:	4798      	blx	r3
}
    de3e:	bd10      	pop	{r4, pc}
    de40:	0000dd7d 	.word	0x0000dd7d

0000de44 <UART_IO_cb_init>:
{
    de44:	b510      	push	{r4, lr}
	usart_register_callback(&UART_IO,UART_IO_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    de46:	4c06      	ldr	r4, [pc, #24]	; (de60 <UART_IO_cb_init+0x1c>)
    de48:	2201      	movs	r2, #1
    de4a:	4906      	ldr	r1, [pc, #24]	; (de64 <UART_IO_cb_init+0x20>)
    de4c:	0020      	movs	r0, r4
    de4e:	4b06      	ldr	r3, [pc, #24]	; (de68 <UART_IO_cb_init+0x24>)
    de50:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    de52:	2231      	movs	r2, #49	; 0x31
    de54:	5ca3      	ldrb	r3, [r4, r2]
    de56:	2102      	movs	r1, #2
    de58:	430b      	orrs	r3, r1
    de5a:	54a3      	strb	r3, [r4, r2]
}
    de5c:	bd10      	pop	{r4, pc}
    de5e:	46c0      	nop			; (mov r8, r8)
    de60:	20001f68 	.word	0x20001f68
    de64:	0000dd55 	.word	0x0000dd55
    de68:	00006265 	.word	0x00006265

0000de6c <UART_cb_init>:
{
    de6c:	b510      	push	{r4, lr}
	UART_IO_cb_init();
    de6e:	4b01      	ldr	r3, [pc, #4]	; (de74 <UART_cb_init+0x8>)
    de70:	4798      	blx	r3
}
    de72:	bd10      	pop	{r4, pc}
    de74:	0000de45 	.word	0x0000de45

0000de78 <UART_SAM_To_IO>:

void UART_SAM_To_IO(uint8_t* data)
{
    de78:	b510      	push	{r4, lr}
    de7a:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_IO, data, 1);
    de7c:	2201      	movs	r2, #1
    de7e:	4802      	ldr	r0, [pc, #8]	; (de88 <UART_SAM_To_IO+0x10>)
    de80:	4b02      	ldr	r3, [pc, #8]	; (de8c <UART_SAM_To_IO+0x14>)
    de82:	4798      	blx	r3
    de84:	bd10      	pop	{r4, pc}
    de86:	46c0      	nop			; (mov r8, r8)
    de88:	20001f68 	.word	0x20001f68
    de8c:	000060bd 	.word	0x000060bd

0000de90 <push_back>:
	else
	return 0;
}


void push_back(struct queStruct* s,uint8_t data) {
    de90:	b570      	push	{r4, r5, r6, lr}
    de92:	0004      	movs	r4, r0
    de94:	000d      	movs	r5, r1
	if ((s.rear + 1) % MAX_QUEUE_SIZE == s.front)
    de96:	7900      	ldrb	r0, [r0, #4]
    de98:	3001      	adds	r0, #1
    de9a:	2103      	movs	r1, #3
    de9c:	4b09      	ldr	r3, [pc, #36]	; (dec4 <push_back+0x34>)
    de9e:	4798      	blx	r3
    dea0:	78e3      	ldrb	r3, [r4, #3]
	if (isFull(*s)) {
    dea2:	4299      	cmp	r1, r3
    dea4:	d00c      	beq.n	dec0 <push_back+0x30>
		return;
		} else if (isEmpty(*s)) {
		s->front = 0;
		s->rear = 0;
		} else {
		s->rear = (s->rear + 1) % MAX_QUEUE_SIZE;
    dea6:	7920      	ldrb	r0, [r4, #4]
    dea8:	3001      	adds	r0, #1
    deaa:	2103      	movs	r1, #3
    deac:	4b05      	ldr	r3, [pc, #20]	; (dec4 <push_back+0x34>)
    deae:	4798      	blx	r3
    deb0:	7121      	strb	r1, [r4, #4]
	}
	s->queue[s->rear] = data;
    deb2:	23ff      	movs	r3, #255	; 0xff
    deb4:	4019      	ands	r1, r3
    deb6:	5465      	strb	r5, [r4, r1]
	printf("Added %d\n", data);
    deb8:	0029      	movs	r1, r5
    deba:	4803      	ldr	r0, [pc, #12]	; (dec8 <push_back+0x38>)
    debc:	4b03      	ldr	r3, [pc, #12]	; (decc <push_back+0x3c>)
    debe:	4798      	blx	r3
}
    dec0:	bd70      	pop	{r4, r5, r6, pc}
    dec2:	46c0      	nop			; (mov r8, r8)
    dec4:	00013775 	.word	0x00013775
    dec8:	00018bd0 	.word	0x00018bd0
    decc:	00016cb1 	.word	0x00016cb1

0000ded0 <pop_front>:


uint8_t pop_front(struct queStruct* s) {
    ded0:	b570      	push	{r4, r5, r6, lr}
    ded2:	0004      	movs	r4, r0
	uint8_t data;
	if (isEmpty(*s)) {
		//printf("Queue is empty.\n");
		return -1;
		} else if (s->front == s->rear) {
    ded4:	78c0      	ldrb	r0, [r0, #3]
    ded6:	7923      	ldrb	r3, [r4, #4]
    ded8:	4283      	cmp	r3, r0
    deda:	d007      	beq.n	deec <pop_front+0x1c>
		data = s->queue[s->front];
		s->front = -1;
		s->rear = -1;
		} else {
		data = s->queue[s->front];
    dedc:	5c25      	ldrb	r5, [r4, r0]
		s->front = (s->front + 1) % MAX_QUEUE_SIZE;
    dede:	3001      	adds	r0, #1
    dee0:	2103      	movs	r1, #3
    dee2:	4b05      	ldr	r3, [pc, #20]	; (def8 <pop_front+0x28>)
    dee4:	4798      	blx	r3
    dee6:	70e1      	strb	r1, [r4, #3]
	}
	return data;
}
    dee8:	0028      	movs	r0, r5
    deea:	bd70      	pop	{r4, r5, r6, pc}
		data = s->queue[s->front];
    deec:	5c25      	ldrb	r5, [r4, r0]
		s->front = -1;
    deee:	23ff      	movs	r3, #255	; 0xff
    def0:	70e3      	strb	r3, [r4, #3]
		s->rear = -1;
    def2:	7123      	strb	r3, [r4, #4]
    def4:	e7f8      	b.n	dee8 <pop_front+0x18>
    def6:	46c0      	nop			; (mov r8, r8)
    def8:	00013775 	.word	0x00013775

0000defc <LORAWAN_TxHandler>:
    defc:	b5f0      	push	{r4, r5, r6, r7, lr}
    defe:	b087      	sub	sp, #28
    df00:	466b      	mov	r3, sp
    df02:	2501      	movs	r5, #1
    df04:	4c2f      	ldr	r4, [pc, #188]	; (dfc4 <LORAWAN_TxHandler+0xc8>)
    df06:	701d      	strb	r5, [r3, #0]
    df08:	0023      	movs	r3, r4
    df0a:	466a      	mov	r2, sp
    df0c:	33e9      	adds	r3, #233	; 0xe9
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	4669      	mov	r1, sp
    df12:	7053      	strb	r3, [r2, #1]
    df14:	0023      	movs	r3, r4
    df16:	33e7      	adds	r3, #231	; 0xe7
    df18:	781b      	ldrb	r3, [r3, #0]
    df1a:	202e      	movs	r0, #46	; 0x2e
    df1c:	7093      	strb	r3, [r2, #2]
    df1e:	aa03      	add	r2, sp, #12
    df20:	4b29      	ldr	r3, [pc, #164]	; (dfc8 <LORAWAN_TxHandler+0xcc>)
    df22:	4798      	blx	r3
    df24:	2808      	cmp	r0, #8
    df26:	d004      	beq.n	df32 <LORAWAN_TxHandler+0x36>
    df28:	4b28      	ldr	r3, [pc, #160]	; (dfcc <LORAWAN_TxHandler+0xd0>)
    df2a:	4798      	blx	r3
    df2c:	2000      	movs	r0, #0
    df2e:	b007      	add	sp, #28
    df30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df32:	0023      	movs	r3, r4
    df34:	33fd      	adds	r3, #253	; 0xfd
    df36:	781b      	ldrb	r3, [r3, #0]
    df38:	ae01      	add	r6, sp, #4
    df3a:	2b04      	cmp	r3, #4
    df3c:	d103      	bne.n	df46 <LORAWAN_TxHandler+0x4a>
    df3e:	0030      	movs	r0, r6
    df40:	4b23      	ldr	r3, [pc, #140]	; (dfd0 <LORAWAN_TxHandler+0xd4>)
    df42:	7035      	strb	r5, [r6, #0]
    df44:	4798      	blx	r3
    df46:	4b23      	ldr	r3, [pc, #140]	; (dfd4 <LORAWAN_TxHandler+0xd8>)
    df48:	9803      	ldr	r0, [sp, #12]
    df4a:	9904      	ldr	r1, [sp, #16]
    df4c:	9a05      	ldr	r2, [sp, #20]
    df4e:	4798      	blx	r3
    df50:	0023      	movs	r3, r4
    df52:	33fc      	adds	r3, #252	; 0xfc
    df54:	68dd      	ldr	r5, [r3, #12]
    df56:	4f20      	ldr	r7, [pc, #128]	; (dfd8 <LORAWAN_TxHandler+0xdc>)
    df58:	4b20      	ldr	r3, [pc, #128]	; (dfdc <LORAWAN_TxHandler+0xe0>)
    df5a:	2d00      	cmp	r5, #0
    df5c:	d023      	beq.n	dfa6 <LORAWAN_TxHandler+0xaa>
    df5e:	2201      	movs	r2, #1
    df60:	54e2      	strb	r2, [r4, r3]
    df62:	7828      	ldrb	r0, [r5, #0]
    df64:	7a2b      	ldrb	r3, [r5, #8]
    df66:	1e42      	subs	r2, r0, #1
    df68:	4190      	sbcs	r0, r2
    df6a:	7869      	ldrb	r1, [r5, #1]
    df6c:	686a      	ldr	r2, [r5, #4]
    df6e:	b2c0      	uxtb	r0, r0
    df70:	47b8      	blx	r7
    df72:	0023      	movs	r3, r4
    df74:	33ce      	adds	r3, #206	; 0xce
    df76:	881b      	ldrh	r3, [r3, #0]
    df78:	0030      	movs	r0, r6
    df7a:	7033      	strb	r3, [r6, #0]
    df7c:	4b18      	ldr	r3, [pc, #96]	; (dfe0 <LORAWAN_TxHandler+0xe4>)
    df7e:	6073      	str	r3, [r6, #4]
    df80:	4b18      	ldr	r3, [pc, #96]	; (dfe4 <LORAWAN_TxHandler+0xe8>)
    df82:	4798      	blx	r3
    df84:	2800      	cmp	r0, #0
    df86:	d114      	bne.n	dfb2 <LORAWAN_TxHandler+0xb6>
    df88:	0021      	movs	r1, r4
    df8a:	220e      	movs	r2, #14
    df8c:	3184      	adds	r1, #132	; 0x84
    df8e:	780b      	ldrb	r3, [r1, #0]
    df90:	4393      	bics	r3, r2
    df92:	001a      	movs	r2, r3
    df94:	2302      	movs	r3, #2
    df96:	4313      	orrs	r3, r2
    df98:	700b      	strb	r3, [r1, #0]
    df9a:	2208      	movs	r2, #8
    df9c:	3494      	adds	r4, #148	; 0x94
    df9e:	7823      	ldrb	r3, [r4, #0]
    dfa0:	4393      	bics	r3, r2
    dfa2:	7023      	strb	r3, [r4, #0]
    dfa4:	e7c2      	b.n	df2c <LORAWAN_TxHandler+0x30>
    dfa6:	54e5      	strb	r5, [r4, r3]
    dfa8:	002a      	movs	r2, r5
    dfaa:	002b      	movs	r3, r5
    dfac:	0029      	movs	r1, r5
    dfae:	0028      	movs	r0, r5
    dfb0:	e7de      	b.n	df70 <LORAWAN_TxHandler+0x74>
    dfb2:	0022      	movs	r2, r4
    dfb4:	2120      	movs	r1, #32
    dfb6:	3294      	adds	r2, #148	; 0x94
    dfb8:	7813      	ldrb	r3, [r2, #0]
    dfba:	438b      	bics	r3, r1
    dfbc:	7013      	strb	r3, [r2, #0]
    dfbe:	4b03      	ldr	r3, [pc, #12]	; (dfcc <LORAWAN_TxHandler+0xd0>)
    dfc0:	4798      	blx	r3
    dfc2:	e7ea      	b.n	df9a <LORAWAN_TxHandler+0x9e>
    dfc4:	20003170 	.word	0x20003170
    dfc8:	0000cb75 	.word	0x0000cb75
    dfcc:	00010d41 	.word	0x00010d41
    dfd0:	0000f471 	.word	0x0000f471
    dfd4:	000108d9 	.word	0x000108d9
    dfd8:	00012865 	.word	0x00012865
    dfdc:	0000022a 	.word	0x0000022a
    dfe0:	200033c8 	.word	0x200033c8
    dfe4:	0000eb95 	.word	0x0000eb95

0000dfe8 <LORAWAN_JoinReqHandler>:
    dfe8:	b530      	push	{r4, r5, lr}
    dfea:	b087      	sub	sp, #28
    dfec:	466a      	mov	r2, sp
    dfee:	2300      	movs	r3, #0
    dff0:	4c25      	ldr	r4, [pc, #148]	; (e088 <LORAWAN_JoinReqHandler+0xa0>)
    dff2:	7013      	strb	r3, [r2, #0]
    dff4:	0023      	movs	r3, r4
    dff6:	33e9      	adds	r3, #233	; 0xe9
    dff8:	781b      	ldrb	r3, [r3, #0]
    dffa:	7053      	strb	r3, [r2, #1]
    dffc:	0023      	movs	r3, r4
    dffe:	33e7      	adds	r3, #231	; 0xe7
    e000:	781b      	ldrb	r3, [r3, #0]
    e002:	7093      	strb	r3, [r2, #2]
    e004:	0023      	movs	r3, r4
    e006:	33ff      	adds	r3, #255	; 0xff
    e008:	7f5b      	ldrb	r3, [r3, #29]
    e00a:	069b      	lsls	r3, r3, #26
    e00c:	d507      	bpl.n	e01e <LORAWAN_JoinReqHandler+0x36>
    e00e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e010:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    e012:	4313      	orrs	r3, r2
    e014:	d103      	bne.n	e01e <LORAWAN_JoinReqHandler+0x36>
    e016:	0023      	movs	r3, r4
    e018:	2201      	movs	r2, #1
    e01a:	3380      	adds	r3, #128	; 0x80
    e01c:	701a      	strb	r2, [r3, #0]
    e01e:	aa03      	add	r2, sp, #12
    e020:	4669      	mov	r1, sp
    e022:	202e      	movs	r0, #46	; 0x2e
    e024:	4b19      	ldr	r3, [pc, #100]	; (e08c <LORAWAN_JoinReqHandler+0xa4>)
    e026:	4798      	blx	r3
    e028:	2808      	cmp	r0, #8
    e02a:	d004      	beq.n	e036 <LORAWAN_JoinReqHandler+0x4e>
    e02c:	4b18      	ldr	r3, [pc, #96]	; (e090 <LORAWAN_JoinReqHandler+0xa8>)
    e02e:	4798      	blx	r3
    e030:	2000      	movs	r0, #0
    e032:	b007      	add	sp, #28
    e034:	bd30      	pop	{r4, r5, pc}
    e036:	4b17      	ldr	r3, [pc, #92]	; (e094 <LORAWAN_JoinReqHandler+0xac>)
    e038:	9803      	ldr	r0, [sp, #12]
    e03a:	9904      	ldr	r1, [sp, #16]
    e03c:	9a05      	ldr	r2, [sp, #20]
    e03e:	4798      	blx	r3
    e040:	0023      	movs	r3, r4
    e042:	33fd      	adds	r3, #253	; 0xfd
    e044:	781b      	ldrb	r3, [r3, #0]
    e046:	ad01      	add	r5, sp, #4
    e048:	2b04      	cmp	r3, #4
    e04a:	d104      	bne.n	e056 <LORAWAN_JoinReqHandler+0x6e>
    e04c:	3b03      	subs	r3, #3
    e04e:	702b      	strb	r3, [r5, #0]
    e050:	0028      	movs	r0, r5
    e052:	4b11      	ldr	r3, [pc, #68]	; (e098 <LORAWAN_JoinReqHandler+0xb0>)
    e054:	4798      	blx	r3
    e056:	2200      	movs	r2, #0
    e058:	4b10      	ldr	r3, [pc, #64]	; (e09c <LORAWAN_JoinReqHandler+0xb4>)
    e05a:	54e2      	strb	r2, [r4, r3]
    e05c:	4b10      	ldr	r3, [pc, #64]	; (e0a0 <LORAWAN_JoinReqHandler+0xb8>)
    e05e:	4798      	blx	r3
    e060:	4b10      	ldr	r3, [pc, #64]	; (e0a4 <LORAWAN_JoinReqHandler+0xbc>)
    e062:	7028      	strb	r0, [r5, #0]
    e064:	606b      	str	r3, [r5, #4]
    e066:	0028      	movs	r0, r5
    e068:	4b0f      	ldr	r3, [pc, #60]	; (e0a8 <LORAWAN_JoinReqHandler+0xc0>)
    e06a:	4798      	blx	r3
    e06c:	2800      	cmp	r0, #0
    e06e:	d001      	beq.n	e074 <LORAWAN_JoinReqHandler+0x8c>
    e070:	201b      	movs	r0, #27
    e072:	e7db      	b.n	e02c <LORAWAN_JoinReqHandler+0x44>
    e074:	220e      	movs	r2, #14
    e076:	3484      	adds	r4, #132	; 0x84
    e078:	7823      	ldrb	r3, [r4, #0]
    e07a:	4393      	bics	r3, r2
    e07c:	001a      	movs	r2, r3
    e07e:	2302      	movs	r3, #2
    e080:	4313      	orrs	r3, r2
    e082:	7023      	strb	r3, [r4, #0]
    e084:	e7d4      	b.n	e030 <LORAWAN_JoinReqHandler+0x48>
    e086:	46c0      	nop			; (mov r8, r8)
    e088:	20003170 	.word	0x20003170
    e08c:	0000cb75 	.word	0x0000cb75
    e090:	000103a1 	.word	0x000103a1
    e094:	000108d9 	.word	0x000108d9
    e098:	0000f471 	.word	0x0000f471
    e09c:	0000022a 	.word	0x0000022a
    e0a0:	0001079d 	.word	0x0001079d
    e0a4:	200033b8 	.word	0x200033b8
    e0a8:	0000eb95 	.word	0x0000eb95

0000e0ac <LORAWAN_RxHandler>:
    e0ac:	b513      	push	{r0, r1, r4, lr}
    e0ae:	4b0c      	ldr	r3, [pc, #48]	; (e0e0 <LORAWAN_RxHandler+0x34>)
    e0b0:	781b      	ldrb	r3, [r3, #0]
    e0b2:	2b08      	cmp	r3, #8
    e0b4:	d011      	beq.n	e0da <LORAWAN_RxHandler+0x2e>
    e0b6:	2b10      	cmp	r3, #16
    e0b8:	d001      	beq.n	e0be <LORAWAN_RxHandler+0x12>
    e0ba:	2b01      	cmp	r3, #1
    e0bc:	d10b      	bne.n	e0d6 <LORAWAN_RxHandler+0x2a>
    e0be:	466b      	mov	r3, sp
    e0c0:	1c9c      	adds	r4, r3, #2
    e0c2:	0021      	movs	r1, r4
    e0c4:	a801      	add	r0, sp, #4
    e0c6:	4b07      	ldr	r3, [pc, #28]	; (e0e4 <LORAWAN_RxHandler+0x38>)
    e0c8:	4798      	blx	r3
    e0ca:	9801      	ldr	r0, [sp, #4]
    e0cc:	2800      	cmp	r0, #0
    e0ce:	d002      	beq.n	e0d6 <LORAWAN_RxHandler+0x2a>
    e0d0:	7821      	ldrb	r1, [r4, #0]
    e0d2:	4b05      	ldr	r3, [pc, #20]	; (e0e8 <LORAWAN_RxHandler+0x3c>)
    e0d4:	4798      	blx	r3
    e0d6:	2000      	movs	r0, #0
    e0d8:	bd16      	pop	{r1, r2, r4, pc}
    e0da:	4b04      	ldr	r3, [pc, #16]	; (e0ec <LORAWAN_RxHandler+0x40>)
    e0dc:	4798      	blx	r3
    e0de:	e7fa      	b.n	e0d6 <LORAWAN_RxHandler+0x2a>
    e0e0:	2000224f 	.word	0x2000224f
    e0e4:	0000ed61 	.word	0x0000ed61
    e0e8:	000117c1 	.word	0x000117c1
    e0ec:	000110d5 	.word	0x000110d5

0000e0f0 <LORAWAN_PostTask>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	4b08      	ldr	r3, [pc, #32]	; (e114 <LORAWAN_PostTask+0x24>)
    e0f4:	0004      	movs	r4, r0
    e0f6:	4798      	blx	r3
    e0f8:	2201      	movs	r2, #1
    e0fa:	40a2      	lsls	r2, r4
    e0fc:	4906      	ldr	r1, [pc, #24]	; (e118 <LORAWAN_PostTask+0x28>)
    e0fe:	780b      	ldrb	r3, [r1, #0]
    e100:	4313      	orrs	r3, r2
    e102:	b2db      	uxtb	r3, r3
    e104:	700b      	strb	r3, [r1, #0]
    e106:	4b05      	ldr	r3, [pc, #20]	; (e11c <LORAWAN_PostTask+0x2c>)
    e108:	4798      	blx	r3
    e10a:	2004      	movs	r0, #4
    e10c:	4b04      	ldr	r3, [pc, #16]	; (e120 <LORAWAN_PostTask+0x30>)
    e10e:	4798      	blx	r3
    e110:	bd10      	pop	{r4, pc}
    e112:	46c0      	nop			; (mov r8, r8)
    e114:	0000c689 	.word	0x0000c689
    e118:	20001e9a 	.word	0x20001e9a
    e11c:	0000c695 	.word	0x0000c695
    e120:	0000d6d5 	.word	0x0000d6d5

0000e124 <LORAWAN_TaskHandler>:
    e124:	b570      	push	{r4, r5, r6, lr}
    e126:	2601      	movs	r6, #1
    e128:	4d0e      	ldr	r5, [pc, #56]	; (e164 <LORAWAN_TaskHandler+0x40>)
    e12a:	e015      	b.n	e158 <LORAWAN_TaskHandler+0x34>
    e12c:	2400      	movs	r4, #0
    e12e:	782b      	ldrb	r3, [r5, #0]
    e130:	4123      	asrs	r3, r4
    e132:	4233      	tst	r3, r6
    e134:	d00d      	beq.n	e152 <LORAWAN_TaskHandler+0x2e>
    e136:	4b0c      	ldr	r3, [pc, #48]	; (e168 <LORAWAN_TaskHandler+0x44>)
    e138:	4798      	blx	r3
    e13a:	0032      	movs	r2, r6
    e13c:	40a2      	lsls	r2, r4
    e13e:	782b      	ldrb	r3, [r5, #0]
    e140:	00a4      	lsls	r4, r4, #2
    e142:	4393      	bics	r3, r2
    e144:	702b      	strb	r3, [r5, #0]
    e146:	4b09      	ldr	r3, [pc, #36]	; (e16c <LORAWAN_TaskHandler+0x48>)
    e148:	4798      	blx	r3
    e14a:	4b09      	ldr	r3, [pc, #36]	; (e170 <LORAWAN_TaskHandler+0x4c>)
    e14c:	58e3      	ldr	r3, [r4, r3]
    e14e:	4798      	blx	r3
    e150:	e7ea      	b.n	e128 <LORAWAN_TaskHandler+0x4>
    e152:	3401      	adds	r4, #1
    e154:	2c03      	cmp	r4, #3
    e156:	d1ea      	bne.n	e12e <LORAWAN_TaskHandler+0xa>
    e158:	7828      	ldrb	r0, [r5, #0]
    e15a:	b2c0      	uxtb	r0, r0
    e15c:	2800      	cmp	r0, #0
    e15e:	d1e5      	bne.n	e12c <LORAWAN_TaskHandler+0x8>
    e160:	bd70      	pop	{r4, r5, r6, pc}
    e162:	46c0      	nop			; (mov r8, r8)
    e164:	20001e9a 	.word	0x20001e9a
    e168:	0000c689 	.word	0x0000c689
    e16c:	0000c695 	.word	0x0000c695
    e170:	00018bdc 	.word	0x00018bdc

0000e174 <RADIO_GetAttr>:
    e174:	b510      	push	{r4, lr}
    e176:	000b      	movs	r3, r1
    e178:	281f      	cmp	r0, #31
    e17a:	d900      	bls.n	e17e <RADIO_GetAttr+0xa>
    e17c:	e069      	b.n	e252 <RADIO_GetAttr+0xde>
    e17e:	f005 f96b 	bl	13458 <__gnu_thumb1_case_uqi>
    e182:	1410      	.short	0x1410
    e184:	68201c19 	.word	0x68201c19
    e188:	312e2a27 	.word	0x312e2a27
    e18c:	3d3a3734 	.word	0x3d3a3734
    e190:	46434054 	.word	0x46434054
    e194:	68245149 	.word	0x68245149
    e198:	68686859 	.word	0x68686859
    e19c:	5c686817 	.word	0x5c686817
    e1a0:	6360      	.short	0x6360
    e1a2:	4a2d      	ldr	r2, [pc, #180]	; (e258 <RADIO_GetAttr+0xe4>)
    e1a4:	7e12      	ldrb	r2, [r2, #24]
    e1a6:	701a      	strb	r2, [r3, #0]
    e1a8:	e002      	b.n	e1b0 <RADIO_GetAttr+0x3c>
    e1aa:	4a2b      	ldr	r2, [pc, #172]	; (e258 <RADIO_GetAttr+0xe4>)
    e1ac:	6812      	ldr	r2, [r2, #0]
    e1ae:	601a      	str	r2, [r3, #0]
    e1b0:	2000      	movs	r0, #0
    e1b2:	bd10      	pop	{r4, pc}
    e1b4:	4a28      	ldr	r2, [pc, #160]	; (e258 <RADIO_GetAttr+0xe4>)
    e1b6:	6852      	ldr	r2, [r2, #4]
    e1b8:	e7f9      	b.n	e1ae <RADIO_GetAttr+0x3a>
    e1ba:	4a27      	ldr	r2, [pc, #156]	; (e258 <RADIO_GetAttr+0xe4>)
    e1bc:	8a92      	ldrh	r2, [r2, #20]
    e1be:	801a      	strh	r2, [r3, #0]
    e1c0:	e7f6      	b.n	e1b0 <RADIO_GetAttr+0x3c>
    e1c2:	4a25      	ldr	r2, [pc, #148]	; (e258 <RADIO_GetAttr+0xe4>)
    e1c4:	3203      	adds	r2, #3
    e1c6:	7fd2      	ldrb	r2, [r2, #31]
    e1c8:	e7ed      	b.n	e1a6 <RADIO_GetAttr+0x32>
    e1ca:	4a23      	ldr	r2, [pc, #140]	; (e258 <RADIO_GetAttr+0xe4>)
    e1cc:	3204      	adds	r2, #4
    e1ce:	e7fa      	b.n	e1c6 <RADIO_GetAttr+0x52>
    e1d0:	4a21      	ldr	r2, [pc, #132]	; (e258 <RADIO_GetAttr+0xe4>)
    e1d2:	3206      	adds	r2, #6
    e1d4:	e7f7      	b.n	e1c6 <RADIO_GetAttr+0x52>
    e1d6:	4a20      	ldr	r2, [pc, #128]	; (e258 <RADIO_GetAttr+0xe4>)
    e1d8:	3236      	adds	r2, #54	; 0x36
    e1da:	7812      	ldrb	r2, [r2, #0]
    e1dc:	e7e3      	b.n	e1a6 <RADIO_GetAttr+0x32>
    e1de:	4a1e      	ldr	r2, [pc, #120]	; (e258 <RADIO_GetAttr+0xe4>)
    e1e0:	3205      	adds	r2, #5
    e1e2:	e7f0      	b.n	e1c6 <RADIO_GetAttr+0x52>
    e1e4:	4a1c      	ldr	r2, [pc, #112]	; (e258 <RADIO_GetAttr+0xe4>)
    e1e6:	3234      	adds	r2, #52	; 0x34
    e1e8:	e7f7      	b.n	e1da <RADIO_GetAttr+0x66>
    e1ea:	4a1b      	ldr	r2, [pc, #108]	; (e258 <RADIO_GetAttr+0xe4>)
    e1ec:	8ad2      	ldrh	r2, [r2, #22]
    e1ee:	e7e6      	b.n	e1be <RADIO_GetAttr+0x4a>
    e1f0:	4a19      	ldr	r2, [pc, #100]	; (e258 <RADIO_GetAttr+0xe4>)
    e1f2:	3233      	adds	r2, #51	; 0x33
    e1f4:	e7f1      	b.n	e1da <RADIO_GetAttr+0x66>
    e1f6:	4a18      	ldr	r2, [pc, #96]	; (e258 <RADIO_GetAttr+0xe4>)
    e1f8:	68d2      	ldr	r2, [r2, #12]
    e1fa:	e7d8      	b.n	e1ae <RADIO_GetAttr+0x3a>
    e1fc:	4a16      	ldr	r2, [pc, #88]	; (e258 <RADIO_GetAttr+0xe4>)
    e1fe:	6892      	ldr	r2, [r2, #8]
    e200:	e7d5      	b.n	e1ae <RADIO_GetAttr+0x3a>
    e202:	4a15      	ldr	r2, [pc, #84]	; (e258 <RADIO_GetAttr+0xe4>)
    e204:	3237      	adds	r2, #55	; 0x37
    e206:	e7e8      	b.n	e1da <RADIO_GetAttr+0x66>
    e208:	4a13      	ldr	r2, [pc, #76]	; (e258 <RADIO_GetAttr+0xe4>)
    e20a:	3238      	adds	r2, #56	; 0x38
    e20c:	e7e5      	b.n	e1da <RADIO_GetAttr+0x66>
    e20e:	4a12      	ldr	r2, [pc, #72]	; (e258 <RADIO_GetAttr+0xe4>)
    e210:	3239      	adds	r2, #57	; 0x39
    e212:	e7e2      	b.n	e1da <RADIO_GetAttr+0x66>
    e214:	4a10      	ldr	r2, [pc, #64]	; (e258 <RADIO_GetAttr+0xe4>)
    e216:	4911      	ldr	r1, [pc, #68]	; (e25c <RADIO_GetAttr+0xe8>)
    e218:	3202      	adds	r2, #2
    e21a:	7fd2      	ldrb	r2, [r2, #31]
    e21c:	0018      	movs	r0, r3
    e21e:	4b10      	ldr	r3, [pc, #64]	; (e260 <RADIO_GetAttr+0xec>)
    e220:	4798      	blx	r3
    e222:	e7c5      	b.n	e1b0 <RADIO_GetAttr+0x3c>
    e224:	4a0c      	ldr	r2, [pc, #48]	; (e258 <RADIO_GetAttr+0xe4>)
    e226:	3202      	adds	r2, #2
    e228:	e7cd      	b.n	e1c6 <RADIO_GetAttr+0x52>
    e22a:	4a0b      	ldr	r2, [pc, #44]	; (e258 <RADIO_GetAttr+0xe4>)
    e22c:	3232      	adds	r2, #50	; 0x32
    e22e:	7812      	ldrb	r2, [r2, #0]
    e230:	b252      	sxtb	r2, r2
    e232:	e7b8      	b.n	e1a6 <RADIO_GetAttr+0x32>
    e234:	4a08      	ldr	r2, [pc, #32]	; (e258 <RADIO_GetAttr+0xe4>)
    e236:	3235      	adds	r2, #53	; 0x35
    e238:	e7cf      	b.n	e1da <RADIO_GetAttr+0x66>
    e23a:	4907      	ldr	r1, [pc, #28]	; (e258 <RADIO_GetAttr+0xe4>)
    e23c:	2206      	movs	r2, #6
    e23e:	313c      	adds	r1, #60	; 0x3c
    e240:	e7ec      	b.n	e21c <RADIO_GetAttr+0xa8>
    e242:	4a05      	ldr	r2, [pc, #20]	; (e258 <RADIO_GetAttr+0xe4>)
    e244:	3254      	adds	r2, #84	; 0x54
    e246:	e7c8      	b.n	e1da <RADIO_GetAttr+0x66>
    e248:	4a03      	ldr	r2, [pc, #12]	; (e258 <RADIO_GetAttr+0xe4>)
    e24a:	3256      	adds	r2, #86	; 0x56
    e24c:	2100      	movs	r1, #0
    e24e:	5e52      	ldrsh	r2, [r2, r1]
    e250:	e7b5      	b.n	e1be <RADIO_GetAttr+0x4a>
    e252:	2005      	movs	r0, #5
    e254:	e7ad      	b.n	e1b2 <RADIO_GetAttr+0x3e>
    e256:	46c0      	nop			; (mov r8, r8)
    e258:	20002d78 	.word	0x20002d78
    e25c:	20002d91 	.word	0x20002d91
    e260:	000166f7 	.word	0x000166f7

0000e264 <RADIO_SetAttr>:
    e264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e266:	4b71      	ldr	r3, [pc, #452]	; (e42c <RADIO_SetAttr+0x1c8>)
    e268:	0004      	movs	r4, r0
    e26a:	000d      	movs	r5, r1
    e26c:	4798      	blx	r3
    e26e:	2304      	movs	r3, #4
    e270:	2801      	cmp	r0, #1
    e272:	d11a      	bne.n	e2aa <RADIO_SetAttr+0x46>
    e274:	2c1d      	cmp	r4, #29
    e276:	d900      	bls.n	e27a <RADIO_SetAttr+0x16>
    e278:	e0d5      	b.n	e426 <RADIO_SetAttr+0x1c2>
    e27a:	0020      	movs	r0, r4
    e27c:	f005 f8ec 	bl	13458 <__gnu_thumb1_case_uqi>
    e280:	605c4844 	.word	0x605c4844
    e284:	7770d364 	.word	0x7770d364
    e288:	908c8480 	.word	0x908c8480
    e28c:	a0d39c99 	.word	0xa0d39c99
    e290:	c2bab1a8 	.word	0xc2bab1a8
    e294:	d3cad369 	.word	0xd3cad369
    e298:	d30fd3d3 	.word	0xd30fd3d3
    e29c:	17d3      	.short	0x17d3
    e29e:	2303      	movs	r3, #3
    e2a0:	2d00      	cmp	r5, #0
    e2a2:	d002      	beq.n	e2aa <RADIO_SetAttr+0x46>
    e2a4:	4b62      	ldr	r3, [pc, #392]	; (e430 <RADIO_SetAttr+0x1cc>)
    e2a6:	611d      	str	r5, [r3, #16]
    e2a8:	2300      	movs	r3, #0
    e2aa:	0018      	movs	r0, r3
    e2ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e2ae:	796c      	ldrb	r4, [r5, #5]
    e2b0:	2c00      	cmp	r4, #0
    e2b2:	d109      	bne.n	e2c8 <RADIO_SetAttr+0x64>
    e2b4:	4b5e      	ldr	r3, [pc, #376]	; (e430 <RADIO_SetAttr+0x1cc>)
    e2b6:	001a      	movs	r2, r3
    e2b8:	649c      	str	r4, [r3, #72]	; 0x48
    e2ba:	879c      	strh	r4, [r3, #60]	; 0x3c
    e2bc:	87dc      	strh	r4, [r3, #62]	; 0x3e
    e2be:	3240      	adds	r2, #64	; 0x40
    e2c0:	3341      	adds	r3, #65	; 0x41
    e2c2:	7014      	strb	r4, [r2, #0]
    e2c4:	701c      	strb	r4, [r3, #0]
    e2c6:	e7ef      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e2c8:	882f      	ldrh	r7, [r5, #0]
    e2ca:	2303      	movs	r3, #3
    e2cc:	2f00      	cmp	r7, #0
    e2ce:	d0ec      	beq.n	e2aa <RADIO_SetAttr+0x46>
    e2d0:	792e      	ldrb	r6, [r5, #4]
    e2d2:	2e00      	cmp	r6, #0
    e2d4:	d0e9      	beq.n	e2aa <RADIO_SetAttr+0x46>
    e2d6:	20fa      	movs	r0, #250	; 0xfa
    e2d8:	2202      	movs	r2, #2
    e2da:	5eab      	ldrsh	r3, [r5, r2]
    e2dc:	0080      	lsls	r0, r0, #2
    e2de:	0031      	movs	r1, r6
    e2e0:	9301      	str	r3, [sp, #4]
    e2e2:	4378      	muls	r0, r7
    e2e4:	4b53      	ldr	r3, [pc, #332]	; (e434 <RADIO_SetAttr+0x1d0>)
    e2e6:	4798      	blx	r3
    e2e8:	4b53      	ldr	r3, [pc, #332]	; (e438 <RADIO_SetAttr+0x1d4>)
    e2ea:	4798      	blx	r3
    e2ec:	4b53      	ldr	r3, [pc, #332]	; (e43c <RADIO_SetAttr+0x1d8>)
    e2ee:	4798      	blx	r3
    e2f0:	466b      	mov	r3, sp
    e2f2:	4d4f      	ldr	r5, [pc, #316]	; (e430 <RADIO_SetAttr+0x1cc>)
    e2f4:	889b      	ldrh	r3, [r3, #4]
    e2f6:	64a8      	str	r0, [r5, #72]	; 0x48
    e2f8:	87eb      	strh	r3, [r5, #62]	; 0x3e
    e2fa:	002b      	movs	r3, r5
    e2fc:	87af      	strh	r7, [r5, #60]	; 0x3c
    e2fe:	3340      	adds	r3, #64	; 0x40
    e300:	3541      	adds	r5, #65	; 0x41
    e302:	701e      	strb	r6, [r3, #0]
    e304:	702c      	strb	r4, [r5, #0]
    e306:	e7cf      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e308:	782a      	ldrb	r2, [r5, #0]
    e30a:	4b49      	ldr	r3, [pc, #292]	; (e430 <RADIO_SetAttr+0x1cc>)
    e30c:	761a      	strb	r2, [r3, #24]
    e30e:	e7cb      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e310:	4b4b      	ldr	r3, [pc, #300]	; (e440 <RADIO_SetAttr+0x1dc>)
    e312:	682a      	ldr	r2, [r5, #0]
    e314:	18d1      	adds	r1, r2, r3
    e316:	4b4b      	ldr	r3, [pc, #300]	; (e444 <RADIO_SetAttr+0x1e0>)
    e318:	4299      	cmp	r1, r3
    e31a:	d90a      	bls.n	e332 <RADIO_SetAttr+0xce>
    e31c:	4b4a      	ldr	r3, [pc, #296]	; (e448 <RADIO_SetAttr+0x1e4>)
    e31e:	494b      	ldr	r1, [pc, #300]	; (e44c <RADIO_SetAttr+0x1e8>)
    e320:	18d3      	adds	r3, r2, r3
    e322:	428b      	cmp	r3, r1
    e324:	d905      	bls.n	e332 <RADIO_SetAttr+0xce>
    e326:	494a      	ldr	r1, [pc, #296]	; (e450 <RADIO_SetAttr+0x1ec>)
    e328:	484a      	ldr	r0, [pc, #296]	; (e454 <RADIO_SetAttr+0x1f0>)
    e32a:	1851      	adds	r1, r2, r1
    e32c:	2305      	movs	r3, #5
    e32e:	4281      	cmp	r1, r0
    e330:	d8bb      	bhi.n	e2aa <RADIO_SetAttr+0x46>
    e332:	4b3f      	ldr	r3, [pc, #252]	; (e430 <RADIO_SetAttr+0x1cc>)
    e334:	601a      	str	r2, [r3, #0]
    e336:	e7b7      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e338:	682a      	ldr	r2, [r5, #0]
    e33a:	4b3d      	ldr	r3, [pc, #244]	; (e430 <RADIO_SetAttr+0x1cc>)
    e33c:	605a      	str	r2, [r3, #4]
    e33e:	e7b3      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e340:	882a      	ldrh	r2, [r5, #0]
    e342:	4b3b      	ldr	r3, [pc, #236]	; (e430 <RADIO_SetAttr+0x1cc>)
    e344:	829a      	strh	r2, [r3, #20]
    e346:	e7af      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e348:	4b39      	ldr	r3, [pc, #228]	; (e430 <RADIO_SetAttr+0x1cc>)
    e34a:	782a      	ldrb	r2, [r5, #0]
    e34c:	3303      	adds	r3, #3
    e34e:	77da      	strb	r2, [r3, #31]
    e350:	e7aa      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e352:	782a      	ldrb	r2, [r5, #0]
    e354:	2305      	movs	r3, #5
    e356:	2a01      	cmp	r2, #1
    e358:	d8a7      	bhi.n	e2aa <RADIO_SetAttr+0x46>
    e35a:	4b35      	ldr	r3, [pc, #212]	; (e430 <RADIO_SetAttr+0x1cc>)
    e35c:	3304      	adds	r3, #4
    e35e:	e7f6      	b.n	e34e <RADIO_SetAttr+0xea>
    e360:	782a      	ldrb	r2, [r5, #0]
    e362:	2305      	movs	r3, #5
    e364:	2a01      	cmp	r2, #1
    e366:	d8a0      	bhi.n	e2aa <RADIO_SetAttr+0x46>
    e368:	4b31      	ldr	r3, [pc, #196]	; (e430 <RADIO_SetAttr+0x1cc>)
    e36a:	3306      	adds	r3, #6
    e36c:	e7ef      	b.n	e34e <RADIO_SetAttr+0xea>
    e36e:	782a      	ldrb	r2, [r5, #0]
    e370:	2305      	movs	r3, #5
    e372:	1fd1      	subs	r1, r2, #7
    e374:	2902      	cmp	r1, #2
    e376:	d898      	bhi.n	e2aa <RADIO_SetAttr+0x46>
    e378:	4b2d      	ldr	r3, [pc, #180]	; (e430 <RADIO_SetAttr+0x1cc>)
    e37a:	3336      	adds	r3, #54	; 0x36
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	e793      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e380:	4b2b      	ldr	r3, [pc, #172]	; (e430 <RADIO_SetAttr+0x1cc>)
    e382:	782a      	ldrb	r2, [r5, #0]
    e384:	3305      	adds	r3, #5
    e386:	e7e2      	b.n	e34e <RADIO_SetAttr+0xea>
    e388:	782a      	ldrb	r2, [r5, #0]
    e38a:	2305      	movs	r3, #5
    e38c:	2a01      	cmp	r2, #1
    e38e:	d900      	bls.n	e392 <RADIO_SetAttr+0x12e>
    e390:	e78b      	b.n	e2aa <RADIO_SetAttr+0x46>
    e392:	4b27      	ldr	r3, [pc, #156]	; (e430 <RADIO_SetAttr+0x1cc>)
    e394:	3334      	adds	r3, #52	; 0x34
    e396:	e7f1      	b.n	e37c <RADIO_SetAttr+0x118>
    e398:	882a      	ldrh	r2, [r5, #0]
    e39a:	4b25      	ldr	r3, [pc, #148]	; (e430 <RADIO_SetAttr+0x1cc>)
    e39c:	82da      	strh	r2, [r3, #22]
    e39e:	e783      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e3a0:	782a      	ldrb	r2, [r5, #0]
    e3a2:	2305      	movs	r3, #5
    e3a4:	1e51      	subs	r1, r2, #1
    e3a6:	2903      	cmp	r1, #3
    e3a8:	d900      	bls.n	e3ac <RADIO_SetAttr+0x148>
    e3aa:	e77e      	b.n	e2aa <RADIO_SetAttr+0x46>
    e3ac:	4b20      	ldr	r3, [pc, #128]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3ae:	3333      	adds	r3, #51	; 0x33
    e3b0:	e7e4      	b.n	e37c <RADIO_SetAttr+0x118>
    e3b2:	4b1f      	ldr	r3, [pc, #124]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3b4:	682a      	ldr	r2, [r5, #0]
    e3b6:	60da      	str	r2, [r3, #12]
    e3b8:	682a      	ldr	r2, [r5, #0]
    e3ba:	4b1d      	ldr	r3, [pc, #116]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3bc:	609a      	str	r2, [r3, #8]
    e3be:	e773      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e3c0:	782a      	ldrb	r2, [r5, #0]
    e3c2:	2305      	movs	r3, #5
    e3c4:	2a03      	cmp	r2, #3
    e3c6:	d900      	bls.n	e3ca <RADIO_SetAttr+0x166>
    e3c8:	e76f      	b.n	e2aa <RADIO_SetAttr+0x46>
    e3ca:	4b19      	ldr	r3, [pc, #100]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3cc:	3337      	adds	r3, #55	; 0x37
    e3ce:	e7d5      	b.n	e37c <RADIO_SetAttr+0x118>
    e3d0:	782a      	ldrb	r2, [r5, #0]
    e3d2:	2305      	movs	r3, #5
    e3d4:	1e51      	subs	r1, r2, #1
    e3d6:	2916      	cmp	r1, #22
    e3d8:	d900      	bls.n	e3dc <RADIO_SetAttr+0x178>
    e3da:	e766      	b.n	e2aa <RADIO_SetAttr+0x46>
    e3dc:	4b14      	ldr	r3, [pc, #80]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3de:	3338      	adds	r3, #56	; 0x38
    e3e0:	e7cc      	b.n	e37c <RADIO_SetAttr+0x118>
    e3e2:	782a      	ldrb	r2, [r5, #0]
    e3e4:	2305      	movs	r3, #5
    e3e6:	1e51      	subs	r1, r2, #1
    e3e8:	2916      	cmp	r1, #22
    e3ea:	d900      	bls.n	e3ee <RADIO_SetAttr+0x18a>
    e3ec:	e75d      	b.n	e2aa <RADIO_SetAttr+0x46>
    e3ee:	4b10      	ldr	r3, [pc, #64]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3f0:	3339      	adds	r3, #57	; 0x39
    e3f2:	e7c3      	b.n	e37c <RADIO_SetAttr+0x118>
    e3f4:	4b0e      	ldr	r3, [pc, #56]	; (e430 <RADIO_SetAttr+0x1cc>)
    e3f6:	0029      	movs	r1, r5
    e3f8:	3302      	adds	r3, #2
    e3fa:	7fda      	ldrb	r2, [r3, #31]
    e3fc:	4816      	ldr	r0, [pc, #88]	; (e458 <RADIO_SetAttr+0x1f4>)
    e3fe:	4b17      	ldr	r3, [pc, #92]	; (e45c <RADIO_SetAttr+0x1f8>)
    e400:	4798      	blx	r3
    e402:	e751      	b.n	e2a8 <RADIO_SetAttr+0x44>
    e404:	782b      	ldrb	r3, [r5, #0]
    e406:	1c1a      	adds	r2, r3, #0
    e408:	2b08      	cmp	r3, #8
    e40a:	d900      	bls.n	e40e <RADIO_SetAttr+0x1aa>
    e40c:	2208      	movs	r2, #8
    e40e:	4b08      	ldr	r3, [pc, #32]	; (e430 <RADIO_SetAttr+0x1cc>)
    e410:	3302      	adds	r3, #2
    e412:	e79c      	b.n	e34e <RADIO_SetAttr+0xea>
    e414:	2305      	movs	r3, #5
    e416:	782a      	ldrb	r2, [r5, #0]
    e418:	1fd1      	subs	r1, r2, #7
    e41a:	4299      	cmp	r1, r3
    e41c:	d900      	bls.n	e420 <RADIO_SetAttr+0x1bc>
    e41e:	e744      	b.n	e2aa <RADIO_SetAttr+0x46>
    e420:	4b03      	ldr	r3, [pc, #12]	; (e430 <RADIO_SetAttr+0x1cc>)
    e422:	3335      	adds	r3, #53	; 0x35
    e424:	e7aa      	b.n	e37c <RADIO_SetAttr+0x118>
    e426:	2305      	movs	r3, #5
    e428:	e73f      	b.n	e2aa <RADIO_SetAttr+0x46>
    e42a:	46c0      	nop			; (mov r8, r8)
    e42c:	0000eb79 	.word	0x0000eb79
    e430:	20002d78 	.word	0x20002d78
    e434:	000135a9 	.word	0x000135a9
    e438:	000147ed 	.word	0x000147ed
    e43c:	00013905 	.word	0x00013905
    e440:	f7d58bc0 	.word	0xf7d58bc0
    e444:	0243d580 	.word	0x0243d580
    e448:	e78fe580 	.word	0xe78fe580
    e44c:	06dac2c0 	.word	0x06dac2c0
    e450:	cc9eec80 	.word	0xcc9eec80
    e454:	096ae380 	.word	0x096ae380
    e458:	20002d91 	.word	0x20002d91
    e45c:	000166f7 	.word	0x000166f7

0000e460 <RADIO_Init>:
    e460:	b510      	push	{r4, lr}
    e462:	4b0c      	ldr	r3, [pc, #48]	; (e494 <RADIO_Init+0x34>)
    e464:	4798      	blx	r3
    e466:	4b0c      	ldr	r3, [pc, #48]	; (e498 <RADIO_Init+0x38>)
    e468:	201f      	movs	r0, #31
    e46a:	4798      	blx	r3
    e46c:	4c0b      	ldr	r4, [pc, #44]	; (e49c <RADIO_Init+0x3c>)
    e46e:	490c      	ldr	r1, [pc, #48]	; (e4a0 <RADIO_Init+0x40>)
    e470:	2001      	movs	r0, #1
    e472:	47a0      	blx	r4
    e474:	490b      	ldr	r1, [pc, #44]	; (e4a4 <RADIO_Init+0x44>)
    e476:	2002      	movs	r0, #2
    e478:	47a0      	blx	r4
    e47a:	490b      	ldr	r1, [pc, #44]	; (e4a8 <RADIO_Init+0x48>)
    e47c:	2004      	movs	r0, #4
    e47e:	47a0      	blx	r4
    e480:	490a      	ldr	r1, [pc, #40]	; (e4ac <RADIO_Init+0x4c>)
    e482:	2008      	movs	r0, #8
    e484:	47a0      	blx	r4
    e486:	490a      	ldr	r1, [pc, #40]	; (e4b0 <RADIO_Init+0x50>)
    e488:	2010      	movs	r0, #16
    e48a:	47a0      	blx	r4
    e48c:	4909      	ldr	r1, [pc, #36]	; (e4b4 <RADIO_Init+0x54>)
    e48e:	2020      	movs	r0, #32
    e490:	47a0      	blx	r4
    e492:	bd10      	pop	{r4, pc}
    e494:	0000f27d 	.word	0x0000f27d
    e498:	0000eb85 	.word	0x0000eb85
    e49c:	0000c5a5 	.word	0x0000c5a5
    e4a0:	0000e911 	.word	0x0000e911
    e4a4:	0000e989 	.word	0x0000e989
    e4a8:	0000e9f9 	.word	0x0000e9f9
    e4ac:	0000ea49 	.word	0x0000ea49
    e4b0:	0000ea71 	.word	0x0000ea71
    e4b4:	0000ea99 	.word	0x0000ea99

0000e4b8 <Radio_WriteFrequency>:
    e4b8:	b570      	push	{r4, r5, r6, lr}
    e4ba:	490d      	ldr	r1, [pc, #52]	; (e4f0 <Radio_WriteFrequency+0x38>)
    e4bc:	4d0d      	ldr	r5, [pc, #52]	; (e4f4 <Radio_WriteFrequency+0x3c>)
    e4be:	0006      	movs	r6, r0
    e4c0:	47a8      	blx	r5
    e4c2:	4b0d      	ldr	r3, [pc, #52]	; (e4f8 <Radio_WriteFrequency+0x40>)
    e4c4:	0004      	movs	r4, r0
    e4c6:	490a      	ldr	r1, [pc, #40]	; (e4f0 <Radio_WriteFrequency+0x38>)
    e4c8:	0030      	movs	r0, r6
    e4ca:	4798      	blx	r3
    e4cc:	0208      	lsls	r0, r1, #8
    e4ce:	4908      	ldr	r1, [pc, #32]	; (e4f0 <Radio_WriteFrequency+0x38>)
    e4d0:	47a8      	blx	r5
    e4d2:	0224      	lsls	r4, r4, #8
    e4d4:	1904      	adds	r4, r0, r4
    e4d6:	0c21      	lsrs	r1, r4, #16
    e4d8:	4d08      	ldr	r5, [pc, #32]	; (e4fc <Radio_WriteFrequency+0x44>)
    e4da:	b2c9      	uxtb	r1, r1
    e4dc:	2006      	movs	r0, #6
    e4de:	47a8      	blx	r5
    e4e0:	0a21      	lsrs	r1, r4, #8
    e4e2:	b2c9      	uxtb	r1, r1
    e4e4:	2007      	movs	r0, #7
    e4e6:	47a8      	blx	r5
    e4e8:	b2e1      	uxtb	r1, r4
    e4ea:	2008      	movs	r0, #8
    e4ec:	47a8      	blx	r5
    e4ee:	bd70      	pop	{r4, r5, r6, pc}
    e4f0:	00003d09 	.word	0x00003d09
    e4f4:	00013495 	.word	0x00013495
    e4f8:	000135a1 	.word	0x000135a1
    e4fc:	0000c4d1 	.word	0x0000c4d1

0000e500 <Radio_WriteConfiguration>:
    e500:	b5f0      	push	{r4, r5, r6, r7, lr}
    e502:	4cb0      	ldr	r4, [pc, #704]	; (e7c4 <Radio_WriteConfiguration+0x2c4>)
    e504:	2200      	movs	r2, #0
    e506:	0023      	movs	r3, r4
    e508:	b085      	sub	sp, #20
    e50a:	9002      	str	r0, [sp, #8]
    e50c:	3334      	adds	r3, #52	; 0x34
    e50e:	0010      	movs	r0, r2
    e510:	7819      	ldrb	r1, [r3, #0]
    e512:	4bad      	ldr	r3, [pc, #692]	; (e7c8 <Radio_WriteConfiguration+0x2c8>)
    e514:	4798      	blx	r3
    e516:	4bad      	ldr	r3, [pc, #692]	; (e7cc <Radio_WriteConfiguration+0x2cc>)
    e518:	6820      	ldr	r0, [r4, #0]
    e51a:	4798      	blx	r3
    e51c:	1ce3      	adds	r3, r4, #3
    e51e:	1d62      	adds	r2, r4, #5
    e520:	7fdb      	ldrb	r3, [r3, #31]
    e522:	7fd2      	ldrb	r2, [r2, #31]
    e524:	b25b      	sxtb	r3, r3
    e526:	4eaa      	ldr	r6, [pc, #680]	; (e7d0 <Radio_WriteConfiguration+0x2d0>)
    e528:	4daa      	ldr	r5, [pc, #680]	; (e7d4 <Radio_WriteConfiguration+0x2d4>)
    e52a:	2a00      	cmp	r2, #0
    e52c:	d000      	beq.n	e530 <Radio_WriteConfiguration+0x30>
    e52e:	e0fc      	b.n	e72a <Radio_WriteConfiguration+0x22a>
    e530:	1c1f      	adds	r7, r3, #0
    e532:	2b0f      	cmp	r3, #15
    e534:	dc00      	bgt.n	e538 <Radio_WriteConfiguration+0x38>
    e536:	e0ec      	b.n	e712 <Radio_WriteConfiguration+0x212>
    e538:	270f      	movs	r7, #15
    e53a:	b27b      	sxtb	r3, r7
    e53c:	204d      	movs	r0, #77	; 0x4d
    e53e:	9301      	str	r3, [sp, #4]
    e540:	47b0      	blx	r6
    e542:	21f8      	movs	r1, #248	; 0xf8
    e544:	4008      	ands	r0, r1
    e546:	39f4      	subs	r1, #244	; 0xf4
    e548:	4301      	orrs	r1, r0
    e54a:	204d      	movs	r0, #77	; 0x4d
    e54c:	47a8      	blx	r5
    e54e:	b27b      	sxtb	r3, r7
    e550:	2b00      	cmp	r3, #0
    e552:	db00      	blt.n	e556 <Radio_WriteConfiguration+0x56>
    e554:	e0e4      	b.n	e720 <Radio_WriteConfiguration+0x220>
    e556:	3703      	adds	r7, #3
    e558:	b2f9      	uxtb	r1, r7
    e55a:	2720      	movs	r7, #32
    e55c:	4339      	orrs	r1, r7
    e55e:	2009      	movs	r0, #9
    e560:	47a8      	blx	r5
    e562:	0023      	movs	r3, r4
    e564:	3334      	adds	r3, #52	; 0x34
    e566:	781f      	ldrb	r7, [r3, #0]
    e568:	2f01      	cmp	r7, #1
    e56a:	d000      	beq.n	e56e <Radio_WriteConfiguration+0x6e>
    e56c:	e144      	b.n	e7f8 <Radio_WriteConfiguration+0x2f8>
    e56e:	7e21      	ldrb	r1, [r4, #24]
    e570:	2039      	movs	r0, #57	; 0x39
    e572:	47a8      	blx	r5
    e574:	4b98      	ldr	r3, [pc, #608]	; (e7d8 <Radio_WriteConfiguration+0x2d8>)
    e576:	201d      	movs	r0, #29
    e578:	7819      	ldrb	r1, [r3, #0]
    e57a:	0023      	movs	r3, r4
    e57c:	3333      	adds	r3, #51	; 0x33
    e57e:	781b      	ldrb	r3, [r3, #0]
    e580:	0109      	lsls	r1, r1, #4
    e582:	005b      	lsls	r3, r3, #1
    e584:	4319      	orrs	r1, r3
    e586:	1de3      	adds	r3, r4, #7
    e588:	7fdb      	ldrb	r3, [r3, #31]
    e58a:	401f      	ands	r7, r3
    e58c:	4339      	orrs	r1, r7
    e58e:	b2c9      	uxtb	r1, r1
    e590:	47a8      	blx	r5
    e592:	1d23      	adds	r3, r4, #4
    e594:	7fd9      	ldrb	r1, [r3, #31]
    e596:	2304      	movs	r3, #4
    e598:	0089      	lsls	r1, r1, #2
    e59a:	4019      	ands	r1, r3
    e59c:	0023      	movs	r3, r4
    e59e:	3335      	adds	r3, #53	; 0x35
    e5a0:	781b      	ldrb	r3, [r3, #0]
    e5a2:	201e      	movs	r0, #30
    e5a4:	011b      	lsls	r3, r3, #4
    e5a6:	4319      	orrs	r1, r3
    e5a8:	9b02      	ldr	r3, [sp, #8]
    e5aa:	059b      	lsls	r3, r3, #22
    e5ac:	0f9b      	lsrs	r3, r3, #30
    e5ae:	4319      	orrs	r1, r3
    e5b0:	b2c9      	uxtb	r1, r1
    e5b2:	47a8      	blx	r5
    e5b4:	2300      	movs	r3, #0
    e5b6:	8ae1      	ldrh	r1, [r4, #22]
    e5b8:	4299      	cmp	r1, r3
    e5ba:	d011      	beq.n	e5e0 <Radio_WriteConfiguration+0xe0>
    e5bc:	4a86      	ldr	r2, [pc, #536]	; (e7d8 <Radio_WriteConfiguration+0x2d8>)
    e5be:	7812      	ldrb	r2, [r2, #0]
    e5c0:	2a08      	cmp	r2, #8
    e5c2:	d100      	bne.n	e5c6 <Radio_WriteConfiguration+0xc6>
    e5c4:	e0e4      	b.n	e790 <Radio_WriteConfiguration+0x290>
    e5c6:	2a09      	cmp	r2, #9
    e5c8:	d100      	bne.n	e5cc <Radio_WriteConfiguration+0xcc>
    e5ca:	e0e3      	b.n	e794 <Radio_WriteConfiguration+0x294>
    e5cc:	2a07      	cmp	r2, #7
    e5ce:	d000      	beq.n	e5d2 <Radio_WriteConfiguration+0xd2>
    e5d0:	e0e3      	b.n	e79a <Radio_WriteConfiguration+0x29a>
    e5d2:	337d      	adds	r3, #125	; 0x7d
    e5d4:	4359      	muls	r1, r3
    e5d6:	0023      	movs	r3, r4
    e5d8:	3335      	adds	r3, #53	; 0x35
    e5da:	781b      	ldrb	r3, [r3, #0]
    e5dc:	40d9      	lsrs	r1, r3
    e5de:	000b      	movs	r3, r1
    e5e0:	b2d9      	uxtb	r1, r3
    e5e2:	2024      	movs	r0, #36	; 0x24
    e5e4:	4d7b      	ldr	r5, [pc, #492]	; (e7d4 <Radio_WriteConfiguration+0x2d4>)
    e5e6:	47a8      	blx	r5
    e5e8:	466b      	mov	r3, sp
    e5ea:	201f      	movs	r0, #31
    e5ec:	7a19      	ldrb	r1, [r3, #8]
    e5ee:	47a8      	blx	r5
    e5f0:	2026      	movs	r0, #38	; 0x26
    e5f2:	47b0      	blx	r6
    e5f4:	0023      	movs	r3, r4
    e5f6:	3335      	adds	r3, #53	; 0x35
    e5f8:	781b      	ldrb	r3, [r3, #0]
    e5fa:	2b0c      	cmp	r3, #12
    e5fc:	d105      	bne.n	e60a <Radio_WriteConfiguration+0x10a>
    e5fe:	0023      	movs	r3, r4
    e600:	3336      	adds	r3, #54	; 0x36
    e602:	781b      	ldrb	r3, [r3, #0]
    e604:	3b07      	subs	r3, #7
    e606:	2b01      	cmp	r3, #1
    e608:	d906      	bls.n	e618 <Radio_WriteConfiguration+0x118>
    e60a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e60c:	4b73      	ldr	r3, [pc, #460]	; (e7dc <Radio_WriteConfiguration+0x2dc>)
    e60e:	4013      	ands	r3, r2
    e610:	4a73      	ldr	r2, [pc, #460]	; (e7e0 <Radio_WriteConfiguration+0x2e0>)
    e612:	4293      	cmp	r3, r2
    e614:	d000      	beq.n	e618 <Radio_WriteConfiguration+0x118>
    e616:	e0c2      	b.n	e79e <Radio_WriteConfiguration+0x29e>
    e618:	2108      	movs	r1, #8
    e61a:	4308      	orrs	r0, r1
    e61c:	b2c0      	uxtb	r0, r0
    e61e:	2104      	movs	r1, #4
    e620:	4301      	orrs	r1, r0
    e622:	2026      	movs	r0, #38	; 0x26
    e624:	47a8      	blx	r5
    e626:	2031      	movs	r0, #49	; 0x31
    e628:	47b0      	blx	r6
    e62a:	21f8      	movs	r1, #248	; 0xf8
    e62c:	4008      	ands	r0, r1
    e62e:	39f5      	subs	r1, #245	; 0xf5
    e630:	4301      	orrs	r1, r0
    e632:	2031      	movs	r0, #49	; 0x31
    e634:	47a8      	blx	r5
    e636:	210a      	movs	r1, #10
    e638:	2037      	movs	r0, #55	; 0x37
    e63a:	47a8      	blx	r5
    e63c:	0023      	movs	r3, r4
    e63e:	3331      	adds	r3, #49	; 0x31
    e640:	781b      	ldrb	r3, [r3, #0]
    e642:	2b12      	cmp	r3, #18
    e644:	d11e      	bne.n	e684 <Radio_WriteConfiguration+0x184>
    e646:	0023      	movs	r3, r4
    e648:	3336      	adds	r3, #54	; 0x36
    e64a:	781b      	ldrb	r3, [r3, #0]
    e64c:	3b07      	subs	r3, #7
    e64e:	2b01      	cmp	r3, #1
    e650:	d80b      	bhi.n	e66a <Radio_WriteConfiguration+0x16a>
    e652:	2031      	movs	r0, #49	; 0x31
    e654:	47b0      	blx	r6
    e656:	217f      	movs	r1, #127	; 0x7f
    e658:	4001      	ands	r1, r0
    e65a:	2031      	movs	r0, #49	; 0x31
    e65c:	47a8      	blx	r5
    e65e:	2140      	movs	r1, #64	; 0x40
    e660:	202f      	movs	r0, #47	; 0x2f
    e662:	47a8      	blx	r5
    e664:	2100      	movs	r1, #0
    e666:	2030      	movs	r0, #48	; 0x30
    e668:	47a8      	blx	r5
    e66a:	0023      	movs	r3, r4
    e66c:	3336      	adds	r3, #54	; 0x36
    e66e:	781b      	ldrb	r3, [r3, #0]
    e670:	2b09      	cmp	r3, #9
    e672:	d107      	bne.n	e684 <Radio_WriteConfiguration+0x184>
    e674:	2031      	movs	r0, #49	; 0x31
    e676:	47b0      	blx	r6
    e678:	2180      	movs	r1, #128	; 0x80
    e67a:	4249      	negs	r1, r1
    e67c:	4301      	orrs	r1, r0
    e67e:	b2c9      	uxtb	r1, r1
    e680:	2031      	movs	r0, #49	; 0x31
    e682:	47a8      	blx	r5
    e684:	2033      	movs	r0, #51	; 0x33
    e686:	47b0      	blx	r6
    e688:	1da3      	adds	r3, r4, #6
    e68a:	7fd9      	ldrb	r1, [r3, #31]
    e68c:	2340      	movs	r3, #64	; 0x40
    e68e:	0189      	lsls	r1, r1, #6
    e690:	4398      	bics	r0, r3
    e692:	4019      	ands	r1, r3
    e694:	4301      	orrs	r1, r0
    e696:	b2c9      	uxtb	r1, r1
    e698:	2033      	movs	r0, #51	; 0x33
    e69a:	47a8      	blx	r5
    e69c:	8aa1      	ldrh	r1, [r4, #20]
    e69e:	2020      	movs	r0, #32
    e6a0:	0a09      	lsrs	r1, r1, #8
    e6a2:	47a8      	blx	r5
    e6a4:	7d21      	ldrb	r1, [r4, #20]
    e6a6:	2021      	movs	r0, #33	; 0x21
    e6a8:	47a8      	blx	r5
    e6aa:	2100      	movs	r1, #0
    e6ac:	200d      	movs	r0, #13
    e6ae:	47a8      	blx	r5
    e6b0:	2100      	movs	r1, #0
    e6b2:	200e      	movs	r0, #14
    e6b4:	47a8      	blx	r5
    e6b6:	2100      	movs	r1, #0
    e6b8:	200f      	movs	r0, #15
    e6ba:	47a8      	blx	r5
    e6bc:	0023      	movs	r3, r4
    e6be:	3331      	adds	r3, #49	; 0x31
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	2b12      	cmp	r3, #18
    e6c4:	d120      	bne.n	e708 <Radio_WriteConfiguration+0x208>
    e6c6:	0023      	movs	r3, r4
    e6c8:	3336      	adds	r3, #54	; 0x36
    e6ca:	781b      	ldrb	r3, [r3, #0]
    e6cc:	2b09      	cmp	r3, #9
    e6ce:	d000      	beq.n	e6d2 <Radio_WriteConfiguration+0x1d2>
    e6d0:	e072      	b.n	e7b8 <Radio_WriteConfiguration+0x2b8>
    e6d2:	4a44      	ldr	r2, [pc, #272]	; (e7e4 <Radio_WriteConfiguration+0x2e4>)
    e6d4:	6823      	ldr	r3, [r4, #0]
    e6d6:	1899      	adds	r1, r3, r2
    e6d8:	4a43      	ldr	r2, [pc, #268]	; (e7e8 <Radio_WriteConfiguration+0x2e8>)
    e6da:	4291      	cmp	r1, r2
    e6dc:	d862      	bhi.n	e7a4 <Radio_WriteConfiguration+0x2a4>
    e6de:	2102      	movs	r1, #2
    e6e0:	2036      	movs	r0, #54	; 0x36
    e6e2:	47a8      	blx	r5
    e6e4:	2164      	movs	r1, #100	; 0x64
    e6e6:	203a      	movs	r0, #58	; 0x3a
    e6e8:	47a8      	blx	r5
    e6ea:	0023      	movs	r3, r4
    e6ec:	3336      	adds	r3, #54	; 0x36
    e6ee:	781b      	ldrb	r3, [r3, #0]
    e6f0:	2165      	movs	r1, #101	; 0x65
    e6f2:	203a      	movs	r0, #58	; 0x3a
    e6f4:	2b09      	cmp	r3, #9
    e6f6:	d162      	bne.n	e7be <Radio_WriteConfiguration+0x2be>
    e6f8:	3406      	adds	r4, #6
    e6fa:	7fe3      	ldrb	r3, [r4, #31]
    e6fc:	2b01      	cmp	r3, #1
    e6fe:	d15e      	bne.n	e7be <Radio_WriteConfiguration+0x2be>
    e700:	47a8      	blx	r5
    e702:	2119      	movs	r1, #25
    e704:	203b      	movs	r0, #59	; 0x3b
    e706:	47a8      	blx	r5
    e708:	21ff      	movs	r1, #255	; 0xff
    e70a:	2012      	movs	r0, #18
    e70c:	47a8      	blx	r5
    e70e:	b005      	add	sp, #20
    e710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e712:	b25b      	sxtb	r3, r3
    e714:	3303      	adds	r3, #3
    e716:	db00      	blt.n	e71a <Radio_WriteConfiguration+0x21a>
    e718:	e70f      	b.n	e53a <Radio_WriteConfiguration+0x3a>
    e71a:	4b34      	ldr	r3, [pc, #208]	; (e7ec <Radio_WriteConfiguration+0x2ec>)
    e71c:	781f      	ldrb	r7, [r3, #0]
    e71e:	e70c      	b.n	e53a <Radio_WriteConfiguration+0x3a>
    e720:	2170      	movs	r1, #112	; 0x70
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	4319      	orrs	r1, r3
    e726:	b2c9      	uxtb	r1, r1
    e728:	e719      	b.n	e55e <Radio_WriteConfiguration+0x5e>
    e72a:	2b01      	cmp	r3, #1
    e72c:	dd07      	ble.n	e73e <Radio_WriteConfiguration+0x23e>
    e72e:	2714      	movs	r7, #20
    e730:	2b13      	cmp	r3, #19
    e732:	dc06      	bgt.n	e742 <Radio_WriteConfiguration+0x242>
    e734:	1c1f      	adds	r7, r3, #0
    e736:	2b11      	cmp	r3, #17
    e738:	dd02      	ble.n	e740 <Radio_WriteConfiguration+0x240>
    e73a:	2711      	movs	r7, #17
    e73c:	e000      	b.n	e740 <Radio_WriteConfiguration+0x240>
    e73e:	2702      	movs	r7, #2
    e740:	b27f      	sxtb	r7, r7
    e742:	200b      	movs	r0, #11
    e744:	47b0      	blx	r6
    e746:	9003      	str	r0, [sp, #12]
    e748:	204d      	movs	r0, #77	; 0x4d
    e74a:	47b0      	blx	r6
    e74c:	2307      	movs	r3, #7
    e74e:	4398      	bics	r0, r3
    e750:	b2c1      	uxtb	r1, r0
    e752:	2f14      	cmp	r7, #20
    e754:	d112      	bne.n	e77c <Radio_WriteConfiguration+0x27c>
    e756:	4319      	orrs	r1, r3
    e758:	9b03      	ldr	r3, [sp, #12]
    e75a:	37cb      	adds	r7, #203	; 0xcb
    e75c:	403b      	ands	r3, r7
    e75e:	001f      	movs	r7, r3
    e760:	230f      	movs	r3, #15
    e762:	9301      	str	r3, [sp, #4]
    e764:	204d      	movs	r0, #77	; 0x4d
    e766:	47a8      	blx	r5
    e768:	2180      	movs	r1, #128	; 0x80
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	4249      	negs	r1, r1
    e76e:	4319      	orrs	r1, r3
    e770:	b2c9      	uxtb	r1, r1
    e772:	2009      	movs	r0, #9
    e774:	47a8      	blx	r5
    e776:	0039      	movs	r1, r7
    e778:	200b      	movs	r0, #11
    e77a:	e6f1      	b.n	e560 <Radio_WriteConfiguration+0x60>
    e77c:	3f02      	subs	r7, #2
    e77e:	b27b      	sxtb	r3, r7
    e780:	2720      	movs	r7, #32
    e782:	2004      	movs	r0, #4
    e784:	9301      	str	r3, [sp, #4]
    e786:	9b03      	ldr	r3, [sp, #12]
    e788:	4301      	orrs	r1, r0
    e78a:	431f      	orrs	r7, r3
    e78c:	b2ff      	uxtb	r7, r7
    e78e:	e7e9      	b.n	e764 <Radio_WriteConfiguration+0x264>
    e790:	23fa      	movs	r3, #250	; 0xfa
    e792:	e71f      	b.n	e5d4 <Radio_WriteConfiguration+0xd4>
    e794:	23fa      	movs	r3, #250	; 0xfa
    e796:	005b      	lsls	r3, r3, #1
    e798:	e71c      	b.n	e5d4 <Radio_WriteConfiguration+0xd4>
    e79a:	0019      	movs	r1, r3
    e79c:	e71b      	b.n	e5d6 <Radio_WriteConfiguration+0xd6>
    e79e:	21f7      	movs	r1, #247	; 0xf7
    e7a0:	4008      	ands	r0, r1
    e7a2:	e73c      	b.n	e61e <Radio_WriteConfiguration+0x11e>
    e7a4:	4a12      	ldr	r2, [pc, #72]	; (e7f0 <Radio_WriteConfiguration+0x2f0>)
    e7a6:	189b      	adds	r3, r3, r2
    e7a8:	4a12      	ldr	r2, [pc, #72]	; (e7f4 <Radio_WriteConfiguration+0x2f4>)
    e7aa:	4293      	cmp	r3, r2
    e7ac:	d804      	bhi.n	e7b8 <Radio_WriteConfiguration+0x2b8>
    e7ae:	2102      	movs	r1, #2
    e7b0:	2036      	movs	r0, #54	; 0x36
    e7b2:	47a8      	blx	r5
    e7b4:	217f      	movs	r1, #127	; 0x7f
    e7b6:	e796      	b.n	e6e6 <Radio_WriteConfiguration+0x1e6>
    e7b8:	2103      	movs	r1, #3
    e7ba:	2036      	movs	r0, #54	; 0x36
    e7bc:	e794      	b.n	e6e8 <Radio_WriteConfiguration+0x1e8>
    e7be:	47a8      	blx	r5
    e7c0:	211d      	movs	r1, #29
    e7c2:	e79f      	b.n	e704 <Radio_WriteConfiguration+0x204>
    e7c4:	20002d78 	.word	0x20002d78
    e7c8:	0000d6f9 	.word	0x0000d6f9
    e7cc:	0000e4b9 	.word	0x0000e4b9
    e7d0:	0000c4f9 	.word	0x0000c4f9
    e7d4:	0000c4d1 	.word	0x0000c4d1
    e7d8:	20002dae 	.word	0x20002dae
    e7dc:	00ffff00 	.word	0x00ffff00
    e7e0:	00070b00 	.word	0x00070b00
    e7e4:	cc9eec80 	.word	0xcc9eec80
    e7e8:	096ae380 	.word	0x096ae380
    e7ec:	00018be8 	.word	0x00018be8
    e7f0:	e78fe580 	.word	0xe78fe580
    e7f4:	06dac2c0 	.word	0x06dac2c0
    e7f8:	6863      	ldr	r3, [r4, #4]
    e7fa:	492c      	ldr	r1, [pc, #176]	; (e8ac <Radio_WriteConfiguration+0x3ac>)
    e7fc:	0218      	lsls	r0, r3, #8
    e7fe:	4b2c      	ldr	r3, [pc, #176]	; (e8b0 <Radio_WriteConfiguration+0x3b0>)
    e800:	4798      	blx	r3
    e802:	0007      	movs	r7, r0
    e804:	0a01      	lsrs	r1, r0, #8
    e806:	b2c9      	uxtb	r1, r1
    e808:	2004      	movs	r0, #4
    e80a:	47a8      	blx	r5
    e80c:	b2f9      	uxtb	r1, r7
    e80e:	2005      	movs	r0, #5
    e810:	47a8      	blx	r5
    e812:	4b27      	ldr	r3, [pc, #156]	; (e8b0 <Radio_WriteConfiguration+0x3b0>)
    e814:	68a1      	ldr	r1, [r4, #8]
    e816:	4827      	ldr	r0, [pc, #156]	; (e8b4 <Radio_WriteConfiguration+0x3b4>)
    e818:	4798      	blx	r3
    e81a:	0007      	movs	r7, r0
    e81c:	0a01      	lsrs	r1, r0, #8
    e81e:	b2c9      	uxtb	r1, r1
    e820:	2002      	movs	r0, #2
    e822:	47a8      	blx	r5
    e824:	b2f9      	uxtb	r1, r7
    e826:	2003      	movs	r0, #3
    e828:	47a8      	blx	r5
    e82a:	2100      	movs	r1, #0
    e82c:	205d      	movs	r0, #93	; 0x5d
    e82e:	47a8      	blx	r5
    e830:	8aa1      	ldrh	r1, [r4, #20]
    e832:	2025      	movs	r0, #37	; 0x25
    e834:	0a09      	lsrs	r1, r1, #8
    e836:	47a8      	blx	r5
    e838:	7d21      	ldrb	r1, [r4, #20]
    e83a:	2026      	movs	r0, #38	; 0x26
    e83c:	47a8      	blx	r5
    e83e:	219e      	movs	r1, #158	; 0x9e
    e840:	200d      	movs	r0, #13
    e842:	47a8      	blx	r5
    e844:	21bf      	movs	r1, #191	; 0xbf
    e846:	2035      	movs	r0, #53	; 0x35
    e848:	47a8      	blx	r5
    e84a:	200a      	movs	r0, #10
    e84c:	47b0      	blx	r6
    e84e:	0023      	movs	r3, r4
    e850:	3337      	adds	r3, #55	; 0x37
    e852:	7819      	ldrb	r1, [r3, #0]
    e854:	2360      	movs	r3, #96	; 0x60
    e856:	0149      	lsls	r1, r1, #5
    e858:	4398      	bics	r0, r3
    e85a:	4301      	orrs	r1, r0
    e85c:	b2c9      	uxtb	r1, r1
    e85e:	200a      	movs	r0, #10
    e860:	47a8      	blx	r5
    e862:	1d23      	adds	r3, r4, #4
    e864:	7fdb      	ldrb	r3, [r3, #31]
    e866:	21c0      	movs	r1, #192	; 0xc0
    e868:	2b00      	cmp	r3, #0
    e86a:	d000      	beq.n	e86e <Radio_WriteConfiguration+0x36e>
    e86c:	3110      	adds	r1, #16
    e86e:	2030      	movs	r0, #48	; 0x30
    e870:	47a8      	blx	r5
    e872:	2600      	movs	r6, #0
    e874:	1ca3      	adds	r3, r4, #2
    e876:	7fd9      	ldrb	r1, [r3, #31]
    e878:	428e      	cmp	r6, r1
    e87a:	d30d      	bcc.n	e898 <Radio_WriteConfiguration+0x398>
    e87c:	2900      	cmp	r1, #0
    e87e:	d003      	beq.n	e888 <Radio_WriteConfiguration+0x388>
    e880:	2310      	movs	r3, #16
    e882:	3901      	subs	r1, #1
    e884:	4319      	orrs	r1, r3
    e886:	b2c9      	uxtb	r1, r1
    e888:	2027      	movs	r0, #39	; 0x27
    e88a:	47a8      	blx	r5
    e88c:	21ff      	movs	r1, #255	; 0xff
    e88e:	203e      	movs	r0, #62	; 0x3e
    e890:	47a8      	blx	r5
    e892:	21ff      	movs	r1, #255	; 0xff
    e894:	203f      	movs	r0, #63	; 0x3f
    e896:	e739      	b.n	e70c <Radio_WriteConfiguration+0x20c>
    e898:	0030      	movs	r0, r6
    e89a:	19a3      	adds	r3, r4, r6
    e89c:	3028      	adds	r0, #40	; 0x28
    e89e:	7e59      	ldrb	r1, [r3, #25]
    e8a0:	b2c0      	uxtb	r0, r0
    e8a2:	3601      	adds	r6, #1
    e8a4:	47a8      	blx	r5
    e8a6:	b2f6      	uxtb	r6, r6
    e8a8:	e7e4      	b.n	e874 <Radio_WriteConfiguration+0x374>
    e8aa:	46c0      	nop			; (mov r8, r8)
    e8ac:	00003d09 	.word	0x00003d09
    e8b0:	00013495 	.word	0x00013495
    e8b4:	01e84800 	.word	0x01e84800

0000e8b8 <RADIO_getMappingAndOpmode>:
    e8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e8ba:	0006      	movs	r6, r0
    e8bc:	4d06      	ldr	r5, [pc, #24]	; (e8d8 <RADIO_getMappingAndOpmode+0x20>)
    e8be:	2040      	movs	r0, #64	; 0x40
    e8c0:	001f      	movs	r7, r3
    e8c2:	0014      	movs	r4, r2
    e8c4:	9101      	str	r1, [sp, #4]
    e8c6:	47a8      	blx	r5
    e8c8:	4004      	ands	r4, r0
    e8ca:	413c      	asrs	r4, r7
    e8cc:	2001      	movs	r0, #1
    e8ce:	7034      	strb	r4, [r6, #0]
    e8d0:	47a8      	blx	r5
    e8d2:	9b01      	ldr	r3, [sp, #4]
    e8d4:	7018      	strb	r0, [r3, #0]
    e8d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e8d8:	0000c4f9 	.word	0x0000c4f9

0000e8dc <RADIO_UnhandledInterrupt.part.0>:
    e8dc:	b510      	push	{r4, lr}
    e8de:	21ff      	movs	r1, #255	; 0xff
    e8e0:	2012      	movs	r0, #18
    e8e2:	4b01      	ldr	r3, [pc, #4]	; (e8e8 <RADIO_UnhandledInterrupt.part.0+0xc>)
    e8e4:	4798      	blx	r3
    e8e6:	bd10      	pop	{r4, pc}
    e8e8:	0000c4d1 	.word	0x0000c4d1

0000e8ec <RADIO_UnhandledInterrupt>:
    e8ec:	b510      	push	{r4, lr}
    e8ee:	2801      	cmp	r0, #1
    e8f0:	d102      	bne.n	e8f8 <RADIO_UnhandledInterrupt+0xc>
    e8f2:	4b05      	ldr	r3, [pc, #20]	; (e908 <RADIO_UnhandledInterrupt+0x1c>)
    e8f4:	4798      	blx	r3
    e8f6:	bd10      	pop	{r4, pc}
    e8f8:	21ff      	movs	r1, #255	; 0xff
    e8fa:	203e      	movs	r0, #62	; 0x3e
    e8fc:	4c03      	ldr	r4, [pc, #12]	; (e90c <RADIO_UnhandledInterrupt+0x20>)
    e8fe:	47a0      	blx	r4
    e900:	21ff      	movs	r1, #255	; 0xff
    e902:	203f      	movs	r0, #63	; 0x3f
    e904:	47a0      	blx	r4
    e906:	e7f6      	b.n	e8f6 <RADIO_UnhandledInterrupt+0xa>
    e908:	0000e8dd 	.word	0x0000e8dd
    e90c:	0000c4d1 	.word	0x0000c4d1

0000e910 <RADIO_DIO0>:
    e910:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e912:	466b      	mov	r3, sp
    e914:	1ddc      	adds	r4, r3, #7
    e916:	1d9d      	adds	r5, r3, #6
    e918:	22c0      	movs	r2, #192	; 0xc0
    e91a:	2306      	movs	r3, #6
    e91c:	0028      	movs	r0, r5
    e91e:	0021      	movs	r1, r4
    e920:	4e12      	ldr	r6, [pc, #72]	; (e96c <RADIO_DIO0+0x5c>)
    e922:	47b0      	blx	r6
    e924:	7823      	ldrb	r3, [r4, #0]
    e926:	7828      	ldrb	r0, [r5, #0]
    e928:	b25a      	sxtb	r2, r3
    e92a:	b2c0      	uxtb	r0, r0
    e92c:	2a00      	cmp	r2, #0
    e92e:	da0b      	bge.n	e948 <RADIO_DIO0+0x38>
    e930:	2800      	cmp	r0, #0
    e932:	d004      	beq.n	e93e <RADIO_DIO0+0x2e>
    e934:	2801      	cmp	r0, #1
    e936:	d005      	beq.n	e944 <RADIO_DIO0+0x34>
    e938:	4b0d      	ldr	r3, [pc, #52]	; (e970 <RADIO_DIO0+0x60>)
    e93a:	4798      	blx	r3
    e93c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e93e:	4b0d      	ldr	r3, [pc, #52]	; (e974 <RADIO_DIO0+0x64>)
    e940:	4798      	blx	r3
    e942:	e7fb      	b.n	e93c <RADIO_DIO0+0x2c>
    e944:	4b0c      	ldr	r3, [pc, #48]	; (e978 <RADIO_DIO0+0x68>)
    e946:	e7fb      	b.n	e940 <RADIO_DIO0+0x30>
    e948:	2800      	cmp	r0, #0
    e94a:	d10a      	bne.n	e962 <RADIO_DIO0+0x52>
    e94c:	2207      	movs	r2, #7
    e94e:	4013      	ands	r3, r2
    e950:	7023      	strb	r3, [r4, #0]
    e952:	2b03      	cmp	r3, #3
    e954:	d101      	bne.n	e95a <RADIO_DIO0+0x4a>
    e956:	4b09      	ldr	r3, [pc, #36]	; (e97c <RADIO_DIO0+0x6c>)
    e958:	e7f2      	b.n	e940 <RADIO_DIO0+0x30>
    e95a:	2b05      	cmp	r3, #5
    e95c:	d102      	bne.n	e964 <RADIO_DIO0+0x54>
    e95e:	4b08      	ldr	r3, [pc, #32]	; (e980 <RADIO_DIO0+0x70>)
    e960:	e7ee      	b.n	e940 <RADIO_DIO0+0x30>
    e962:	2000      	movs	r0, #0
    e964:	4b07      	ldr	r3, [pc, #28]	; (e984 <RADIO_DIO0+0x74>)
    e966:	4798      	blx	r3
    e968:	e7e8      	b.n	e93c <RADIO_DIO0+0x2c>
    e96a:	46c0      	nop			; (mov r8, r8)
    e96c:	0000e8b9 	.word	0x0000e8b9
    e970:	0000e8dd 	.word	0x0000e8dd
    e974:	0000efa1 	.word	0x0000efa1
    e978:	0000eea5 	.word	0x0000eea5
    e97c:	0000ef21 	.word	0x0000ef21
    e980:	0000f01d 	.word	0x0000f01d
    e984:	0000e8ed 	.word	0x0000e8ed

0000e988 <RADIO_DIO1>:
    e988:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e98a:	466b      	mov	r3, sp
    e98c:	1ddc      	adds	r4, r3, #7
    e98e:	1d9d      	adds	r5, r3, #6
    e990:	2230      	movs	r2, #48	; 0x30
    e992:	2304      	movs	r3, #4
    e994:	0021      	movs	r1, r4
    e996:	0028      	movs	r0, r5
    e998:	4e11      	ldr	r6, [pc, #68]	; (e9e0 <RADIO_DIO1+0x58>)
    e99a:	47b0      	blx	r6
    e99c:	7822      	ldrb	r2, [r4, #0]
    e99e:	782b      	ldrb	r3, [r5, #0]
    e9a0:	b251      	sxtb	r1, r2
    e9a2:	2900      	cmp	r1, #0
    e9a4:	da0c      	bge.n	e9c0 <RADIO_DIO1+0x38>
    e9a6:	b2db      	uxtb	r3, r3
    e9a8:	2b00      	cmp	r3, #0
    e9aa:	d004      	beq.n	e9b6 <RADIO_DIO1+0x2e>
    e9ac:	2b01      	cmp	r3, #1
    e9ae:	d005      	beq.n	e9bc <RADIO_DIO1+0x34>
    e9b0:	4b0c      	ldr	r3, [pc, #48]	; (e9e4 <RADIO_DIO1+0x5c>)
    e9b2:	4798      	blx	r3
    e9b4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e9b6:	4b0c      	ldr	r3, [pc, #48]	; (e9e8 <RADIO_DIO1+0x60>)
    e9b8:	4798      	blx	r3
    e9ba:	e7fb      	b.n	e9b4 <RADIO_DIO1+0x2c>
    e9bc:	4b0b      	ldr	r3, [pc, #44]	; (e9ec <RADIO_DIO1+0x64>)
    e9be:	e7fb      	b.n	e9b8 <RADIO_DIO1+0x30>
    e9c0:	2107      	movs	r1, #7
    e9c2:	b2db      	uxtb	r3, r3
    e9c4:	400a      	ands	r2, r1
    e9c6:	7022      	strb	r2, [r4, #0]
    e9c8:	2b00      	cmp	r3, #0
    e9ca:	d005      	beq.n	e9d8 <RADIO_DIO1+0x50>
    e9cc:	2b01      	cmp	r3, #1
    e9ce:	d1f1      	bne.n	e9b4 <RADIO_DIO1+0x2c>
    e9d0:	2a03      	cmp	r2, #3
    e9d2:	d1ef      	bne.n	e9b4 <RADIO_DIO1+0x2c>
    e9d4:	4b06      	ldr	r3, [pc, #24]	; (e9f0 <RADIO_DIO1+0x68>)
    e9d6:	e7ef      	b.n	e9b8 <RADIO_DIO1+0x30>
    e9d8:	4b06      	ldr	r3, [pc, #24]	; (e9f4 <RADIO_DIO1+0x6c>)
    e9da:	2a05      	cmp	r2, #5
    e9dc:	d1ea      	bne.n	e9b4 <RADIO_DIO1+0x2c>
    e9de:	e7eb      	b.n	e9b8 <RADIO_DIO1+0x30>
    e9e0:	0000e8b9 	.word	0x0000e8b9
    e9e4:	0000e8dd 	.word	0x0000e8dd
    e9e8:	0000ee29 	.word	0x0000ee29
    e9ec:	0000d7dd 	.word	0x0000d7dd
    e9f0:	0000ed45 	.word	0x0000ed45
    e9f4:	0000eca9 	.word	0x0000eca9

0000e9f8 <RADIO_DIO2>:
    e9f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e9fa:	466b      	mov	r3, sp
    e9fc:	1ddc      	adds	r4, r3, #7
    e9fe:	1d9d      	adds	r5, r3, #6
    ea00:	220c      	movs	r2, #12
    ea02:	2302      	movs	r3, #2
    ea04:	0021      	movs	r1, r4
    ea06:	0028      	movs	r0, r5
    ea08:	4e0b      	ldr	r6, [pc, #44]	; (ea38 <RADIO_DIO2+0x40>)
    ea0a:	47b0      	blx	r6
    ea0c:	7823      	ldrb	r3, [r4, #0]
    ea0e:	782a      	ldrb	r2, [r5, #0]
    ea10:	b259      	sxtb	r1, r3
    ea12:	2900      	cmp	r1, #0
    ea14:	da05      	bge.n	ea22 <RADIO_DIO2+0x2a>
    ea16:	4b09      	ldr	r3, [pc, #36]	; (ea3c <RADIO_DIO2+0x44>)
    ea18:	2a02      	cmp	r2, #2
    ea1a:	d90a      	bls.n	ea32 <RADIO_DIO2+0x3a>
    ea1c:	4b08      	ldr	r3, [pc, #32]	; (ea40 <RADIO_DIO2+0x48>)
    ea1e:	4798      	blx	r3
    ea20:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ea22:	2107      	movs	r1, #7
    ea24:	400b      	ands	r3, r1
    ea26:	7023      	strb	r3, [r4, #0]
    ea28:	2a03      	cmp	r2, #3
    ea2a:	d1f9      	bne.n	ea20 <RADIO_DIO2+0x28>
    ea2c:	2b05      	cmp	r3, #5
    ea2e:	d1f7      	bne.n	ea20 <RADIO_DIO2+0x28>
    ea30:	4b04      	ldr	r3, [pc, #16]	; (ea44 <RADIO_DIO2+0x4c>)
    ea32:	4798      	blx	r3
    ea34:	e7f4      	b.n	ea20 <RADIO_DIO2+0x28>
    ea36:	46c0      	nop			; (mov r8, r8)
    ea38:	0000e8b9 	.word	0x0000e8b9
    ea3c:	0000d7dd 	.word	0x0000d7dd
    ea40:	0000e8dd 	.word	0x0000e8dd
    ea44:	0000ec79 	.word	0x0000ec79

0000ea48 <RADIO_DIO3>:
    ea48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ea4a:	466b      	mov	r3, sp
    ea4c:	4668      	mov	r0, sp
    ea4e:	1ddc      	adds	r4, r3, #7
    ea50:	2203      	movs	r2, #3
    ea52:	2300      	movs	r3, #0
    ea54:	0021      	movs	r1, r4
    ea56:	3006      	adds	r0, #6
    ea58:	4d03      	ldr	r5, [pc, #12]	; (ea68 <RADIO_DIO3+0x20>)
    ea5a:	47a8      	blx	r5
    ea5c:	7823      	ldrb	r3, [r4, #0]
    ea5e:	2b7f      	cmp	r3, #127	; 0x7f
    ea60:	d901      	bls.n	ea66 <RADIO_DIO3+0x1e>
    ea62:	4b02      	ldr	r3, [pc, #8]	; (ea6c <RADIO_DIO3+0x24>)
    ea64:	4798      	blx	r3
    ea66:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ea68:	0000e8b9 	.word	0x0000e8b9
    ea6c:	0000e8dd 	.word	0x0000e8dd

0000ea70 <RADIO_DIO4>:
    ea70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ea72:	466b      	mov	r3, sp
    ea74:	4668      	mov	r0, sp
    ea76:	1ddc      	adds	r4, r3, #7
    ea78:	2306      	movs	r3, #6
    ea7a:	22c0      	movs	r2, #192	; 0xc0
    ea7c:	18c0      	adds	r0, r0, r3
    ea7e:	0021      	movs	r1, r4
    ea80:	4d03      	ldr	r5, [pc, #12]	; (ea90 <RADIO_DIO4+0x20>)
    ea82:	47a8      	blx	r5
    ea84:	7823      	ldrb	r3, [r4, #0]
    ea86:	2b7f      	cmp	r3, #127	; 0x7f
    ea88:	d901      	bls.n	ea8e <RADIO_DIO4+0x1e>
    ea8a:	4b02      	ldr	r3, [pc, #8]	; (ea94 <RADIO_DIO4+0x24>)
    ea8c:	4798      	blx	r3
    ea8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ea90:	0000e8b9 	.word	0x0000e8b9
    ea94:	0000e8dd 	.word	0x0000e8dd

0000ea98 <RADIO_DIO5>:
    ea98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ea9a:	466b      	mov	r3, sp
    ea9c:	4668      	mov	r0, sp
    ea9e:	1ddc      	adds	r4, r3, #7
    eaa0:	2230      	movs	r2, #48	; 0x30
    eaa2:	2304      	movs	r3, #4
    eaa4:	0021      	movs	r1, r4
    eaa6:	3006      	adds	r0, #6
    eaa8:	4d03      	ldr	r5, [pc, #12]	; (eab8 <RADIO_DIO5+0x20>)
    eaaa:	47a8      	blx	r5
    eaac:	7823      	ldrb	r3, [r4, #0]
    eaae:	2b7f      	cmp	r3, #127	; 0x7f
    eab0:	d901      	bls.n	eab6 <RADIO_DIO5+0x1e>
    eab2:	4b02      	ldr	r3, [pc, #8]	; (eabc <RADIO_DIO5+0x24>)
    eab4:	4798      	blx	r3
    eab6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eab8:	0000e8b9 	.word	0x0000e8b9
    eabc:	0000e8dd 	.word	0x0000e8dd

0000eac0 <radioPostTask>:
    eac0:	b510      	push	{r4, lr}
    eac2:	0004      	movs	r4, r0
    eac4:	4b05      	ldr	r3, [pc, #20]	; (eadc <radioPostTask+0x1c>)
    eac6:	4798      	blx	r3
    eac8:	4b05      	ldr	r3, [pc, #20]	; (eae0 <radioPostTask+0x20>)
    eaca:	8818      	ldrh	r0, [r3, #0]
    eacc:	4320      	orrs	r0, r4
    eace:	8018      	strh	r0, [r3, #0]
    ead0:	4b04      	ldr	r3, [pc, #16]	; (eae4 <radioPostTask+0x24>)
    ead2:	4798      	blx	r3
    ead4:	2002      	movs	r0, #2
    ead6:	4b04      	ldr	r3, [pc, #16]	; (eae8 <radioPostTask+0x28>)
    ead8:	4798      	blx	r3
    eada:	bd10      	pop	{r4, pc}
    eadc:	0000c689 	.word	0x0000c689
    eae0:	20001e9c 	.word	0x20001e9c
    eae4:	0000c695 	.word	0x0000c695
    eae8:	0000d6d5 	.word	0x0000d6d5

0000eaec <radioClearTask>:
    eaec:	b510      	push	{r4, lr}
    eaee:	0004      	movs	r4, r0
    eaf0:	4b04      	ldr	r3, [pc, #16]	; (eb04 <radioClearTask+0x18>)
    eaf2:	4798      	blx	r3
    eaf4:	4a04      	ldr	r2, [pc, #16]	; (eb08 <radioClearTask+0x1c>)
    eaf6:	8813      	ldrh	r3, [r2, #0]
    eaf8:	43a3      	bics	r3, r4
    eafa:	8013      	strh	r3, [r2, #0]
    eafc:	4b03      	ldr	r3, [pc, #12]	; (eb0c <radioClearTask+0x20>)
    eafe:	4798      	blx	r3
    eb00:	bd10      	pop	{r4, pc}
    eb02:	46c0      	nop			; (mov r8, r8)
    eb04:	0000c689 	.word	0x0000c689
    eb08:	20001e9c 	.word	0x20001e9c
    eb0c:	0000c695 	.word	0x0000c695

0000eb10 <RADIO_TaskHandler>:
    eb10:	b570      	push	{r4, r5, r6, lr}
    eb12:	2400      	movs	r4, #0
    eb14:	4d10      	ldr	r5, [pc, #64]	; (eb58 <RADIO_TaskHandler+0x48>)
    eb16:	2601      	movs	r6, #1
    eb18:	882b      	ldrh	r3, [r5, #0]
    eb1a:	42a3      	cmp	r3, r4
    eb1c:	d015      	beq.n	eb4a <RADIO_TaskHandler+0x3a>
    eb1e:	882b      	ldrh	r3, [r5, #0]
    eb20:	4123      	asrs	r3, r4
    eb22:	4233      	tst	r3, r6
    eb24:	d013      	beq.n	eb4e <RADIO_TaskHandler+0x3e>
    eb26:	40a6      	lsls	r6, r4
    eb28:	4b0c      	ldr	r3, [pc, #48]	; (eb5c <RADIO_TaskHandler+0x4c>)
    eb2a:	4798      	blx	r3
    eb2c:	882b      	ldrh	r3, [r5, #0]
    eb2e:	00a4      	lsls	r4, r4, #2
    eb30:	43b3      	bics	r3, r6
    eb32:	802b      	strh	r3, [r5, #0]
    eb34:	4b0a      	ldr	r3, [pc, #40]	; (eb60 <RADIO_TaskHandler+0x50>)
    eb36:	4798      	blx	r3
    eb38:	4b0a      	ldr	r3, [pc, #40]	; (eb64 <RADIO_TaskHandler+0x54>)
    eb3a:	58e3      	ldr	r3, [r4, r3]
    eb3c:	4798      	blx	r3
    eb3e:	882b      	ldrh	r3, [r5, #0]
    eb40:	2b00      	cmp	r3, #0
    eb42:	d002      	beq.n	eb4a <RADIO_TaskHandler+0x3a>
    eb44:	2002      	movs	r0, #2
    eb46:	4b08      	ldr	r3, [pc, #32]	; (eb68 <RADIO_TaskHandler+0x58>)
    eb48:	4798      	blx	r3
    eb4a:	2000      	movs	r0, #0
    eb4c:	bd70      	pop	{r4, r5, r6, pc}
    eb4e:	3401      	adds	r4, #1
    eb50:	2c05      	cmp	r4, #5
    eb52:	d1e4      	bne.n	eb1e <RADIO_TaskHandler+0xe>
    eb54:	e7f9      	b.n	eb4a <RADIO_TaskHandler+0x3a>
    eb56:	46c0      	nop			; (mov r8, r8)
    eb58:	20001e9c 	.word	0x20001e9c
    eb5c:	0000c689 	.word	0x0000c689
    eb60:	0000c695 	.word	0x0000c695
    eb64:	00018bec 	.word	0x00018bec
    eb68:	0000d6d5 	.word	0x0000d6d5

0000eb6c <RadioSetState>:
    eb6c:	4b01      	ldr	r3, [pc, #4]	; (eb74 <RadioSetState+0x8>)
    eb6e:	7018      	strb	r0, [r3, #0]
    eb70:	4770      	bx	lr
    eb72:	46c0      	nop			; (mov r8, r8)
    eb74:	20003047 	.word	0x20003047

0000eb78 <RADIO_GetState>:
    eb78:	4b01      	ldr	r3, [pc, #4]	; (eb80 <RADIO_GetState+0x8>)
    eb7a:	7818      	ldrb	r0, [r3, #0]
    eb7c:	b2c0      	uxtb	r0, r0
    eb7e:	4770      	bx	lr
    eb80:	20003047 	.word	0x20003047

0000eb84 <RADIO_SetCallbackBitmask>:
    eb84:	4a02      	ldr	r2, [pc, #8]	; (eb90 <RADIO_SetCallbackBitmask+0xc>)
    eb86:	7813      	ldrb	r3, [r2, #0]
    eb88:	4318      	orrs	r0, r3
    eb8a:	7010      	strb	r0, [r2, #0]
    eb8c:	4770      	bx	lr
    eb8e:	46c0      	nop			; (mov r8, r8)
    eb90:	20003046 	.word	0x20003046

0000eb94 <RADIO_Transmit>:
    eb94:	b570      	push	{r4, r5, r6, lr}
    eb96:	4d10      	ldr	r5, [pc, #64]	; (ebd8 <RADIO_Transmit+0x44>)
    eb98:	0006      	movs	r6, r0
    eb9a:	782b      	ldrb	r3, [r5, #0]
    eb9c:	2004      	movs	r0, #4
    eb9e:	2b01      	cmp	r3, #1
    eba0:	d118      	bne.n	ebd4 <RADIO_Transmit+0x40>
    eba2:	4c0e      	ldr	r4, [pc, #56]	; (ebdc <RADIO_Transmit+0x48>)
    eba4:	0023      	movs	r3, r4
    eba6:	332f      	adds	r3, #47	; 0x2f
    eba8:	7818      	ldrb	r0, [r3, #0]
    ebaa:	4b0d      	ldr	r3, [pc, #52]	; (ebe0 <RADIO_Transmit+0x4c>)
    ebac:	4798      	blx	r3
    ebae:	4b0d      	ldr	r3, [pc, #52]	; (ebe4 <RADIO_Transmit+0x50>)
    ebb0:	7832      	ldrb	r2, [r6, #0]
    ebb2:	6871      	ldr	r1, [r6, #4]
    ebb4:	701a      	strb	r2, [r3, #0]
    ebb6:	4b0c      	ldr	r3, [pc, #48]	; (ebe8 <RADIO_Transmit+0x54>)
    ebb8:	3434      	adds	r4, #52	; 0x34
    ebba:	6019      	str	r1, [r3, #0]
    ebbc:	7821      	ldrb	r1, [r4, #0]
    ebbe:	2302      	movs	r3, #2
    ebc0:	2900      	cmp	r1, #0
    ebc2:	d102      	bne.n	ebca <RADIO_Transmit+0x36>
    ebc4:	0018      	movs	r0, r3
    ebc6:	2a3f      	cmp	r2, #63	; 0x3f
    ebc8:	d804      	bhi.n	ebd4 <RADIO_Transmit+0x40>
    ebca:	702b      	strb	r3, [r5, #0]
    ebcc:	2004      	movs	r0, #4
    ebce:	4b07      	ldr	r3, [pc, #28]	; (ebec <RADIO_Transmit+0x58>)
    ebd0:	4798      	blx	r3
    ebd2:	2000      	movs	r0, #0
    ebd4:	bd70      	pop	{r4, r5, r6, pc}
    ebd6:	46c0      	nop			; (mov r8, r8)
    ebd8:	20003047 	.word	0x20003047
    ebdc:	20002d78 	.word	0x20002d78
    ebe0:	0000d3d5 	.word	0x0000d3d5
    ebe4:	20001eb4 	.word	0x20001eb4
    ebe8:	20001eb0 	.word	0x20001eb0
    ebec:	0000eac1 	.word	0x0000eac1

0000ebf0 <Radio_FSKTxPayloadHandler>:
    ebf0:	b570      	push	{r4, r5, r6, lr}
    ebf2:	4b1c      	ldr	r3, [pc, #112]	; (ec64 <Radio_FSKTxPayloadHandler+0x74>)
    ebf4:	000d      	movs	r5, r1
    ebf6:	4798      	blx	r3
    ebf8:	4c1b      	ldr	r4, [pc, #108]	; (ec68 <Radio_FSKTxPayloadHandler+0x78>)
    ebfa:	3458      	adds	r4, #88	; 0x58
    ebfc:	7820      	ldrb	r0, [r4, #0]
    ebfe:	b2c0      	uxtb	r0, r0
    ec00:	2800      	cmp	r0, #0
    ec02:	d112      	bne.n	ec2a <Radio_FSKTxPayloadHandler+0x3a>
    ec04:	2d00      	cmp	r5, #0
    ec06:	d007      	beq.n	ec18 <Radio_FSKTxPayloadHandler+0x28>
    ec08:	4918      	ldr	r1, [pc, #96]	; (ec6c <Radio_FSKTxPayloadHandler+0x7c>)
    ec0a:	4b19      	ldr	r3, [pc, #100]	; (ec70 <Radio_FSKTxPayloadHandler+0x80>)
    ec0c:	2d3e      	cmp	r5, #62	; 0x3e
    ec0e:	d806      	bhi.n	ec1e <Radio_FSKTxPayloadHandler+0x2e>
    ec10:	002a      	movs	r2, r5
    ec12:	6809      	ldr	r1, [r1, #0]
    ec14:	4798      	blx	r3
    ec16:	7025      	strb	r5, [r4, #0]
    ec18:	4b16      	ldr	r3, [pc, #88]	; (ec74 <Radio_FSKTxPayloadHandler+0x84>)
    ec1a:	4798      	blx	r3
    ec1c:	bd70      	pop	{r4, r5, r6, pc}
    ec1e:	223f      	movs	r2, #63	; 0x3f
    ec20:	6809      	ldr	r1, [r1, #0]
    ec22:	4798      	blx	r3
    ec24:	233f      	movs	r3, #63	; 0x3f
    ec26:	7023      	strb	r3, [r4, #0]
    ec28:	e7f6      	b.n	ec18 <Radio_FSKTxPayloadHandler+0x28>
    ec2a:	7823      	ldrb	r3, [r4, #0]
    ec2c:	429d      	cmp	r5, r3
    ec2e:	d0f3      	beq.n	ec18 <Radio_FSKTxPayloadHandler+0x28>
    ec30:	7822      	ldrb	r2, [r4, #0]
    ec32:	480e      	ldr	r0, [pc, #56]	; (ec6c <Radio_FSKTxPayloadHandler+0x7c>)
    ec34:	1aaa      	subs	r2, r5, r2
    ec36:	b2d2      	uxtb	r2, r2
    ec38:	4b0d      	ldr	r3, [pc, #52]	; (ec70 <Radio_FSKTxPayloadHandler+0x80>)
    ec3a:	2a3f      	cmp	r2, #63	; 0x3f
    ec3c:	d807      	bhi.n	ec4e <Radio_FSKTxPayloadHandler+0x5e>
    ec3e:	7826      	ldrb	r6, [r4, #0]
    ec40:	7822      	ldrb	r2, [r4, #0]
    ec42:	6801      	ldr	r1, [r0, #0]
    ec44:	1aaa      	subs	r2, r5, r2
    ec46:	b2d2      	uxtb	r2, r2
    ec48:	1989      	adds	r1, r1, r6
    ec4a:	2000      	movs	r0, #0
    ec4c:	e7e2      	b.n	ec14 <Radio_FSKTxPayloadHandler+0x24>
    ec4e:	7822      	ldrb	r2, [r4, #0]
    ec50:	6801      	ldr	r1, [r0, #0]
    ec52:	2000      	movs	r0, #0
    ec54:	1889      	adds	r1, r1, r2
    ec56:	223f      	movs	r2, #63	; 0x3f
    ec58:	4798      	blx	r3
    ec5a:	7823      	ldrb	r3, [r4, #0]
    ec5c:	333f      	adds	r3, #63	; 0x3f
    ec5e:	b2db      	uxtb	r3, r3
    ec60:	e7e1      	b.n	ec26 <Radio_FSKTxPayloadHandler+0x36>
    ec62:	46c0      	nop			; (mov r8, r8)
    ec64:	00004569 	.word	0x00004569
    ec68:	20002d78 	.word	0x20002d78
    ec6c:	20001eb0 	.word	0x20001eb0
    ec70:	0000c525 	.word	0x0000c525
    ec74:	000045a9 	.word	0x000045a9

0000ec78 <RADIO_FSKSyncAddr>:
    ec78:	4b08      	ldr	r3, [pc, #32]	; (ec9c <RADIO_FSKSyncAddr+0x24>)
    ec7a:	b510      	push	{r4, lr}
    ec7c:	4798      	blx	r3
    ec7e:	4b08      	ldr	r3, [pc, #32]	; (eca0 <RADIO_FSKSyncAddr+0x28>)
    ec80:	001a      	movs	r2, r3
    ec82:	3234      	adds	r2, #52	; 0x34
    ec84:	7812      	ldrb	r2, [r2, #0]
    ec86:	2a00      	cmp	r2, #0
    ec88:	d104      	bne.n	ec94 <RADIO_FSKSyncAddr+0x1c>
    ec8a:	0019      	movs	r1, r3
    ec8c:	3358      	adds	r3, #88	; 0x58
    ec8e:	312c      	adds	r1, #44	; 0x2c
    ec90:	700a      	strb	r2, [r1, #0]
    ec92:	701a      	strb	r2, [r3, #0]
    ec94:	4b03      	ldr	r3, [pc, #12]	; (eca4 <RADIO_FSKSyncAddr+0x2c>)
    ec96:	4798      	blx	r3
    ec98:	bd10      	pop	{r4, pc}
    ec9a:	46c0      	nop			; (mov r8, r8)
    ec9c:	00004569 	.word	0x00004569
    eca0:	20002d78 	.word	0x20002d78
    eca4:	000045a9 	.word	0x000045a9

0000eca8 <RADIO_FSKFifoLevel>:
    eca8:	b570      	push	{r4, r5, r6, lr}
    ecaa:	4b22      	ldr	r3, [pc, #136]	; (ed34 <RADIO_FSKFifoLevel+0x8c>)
    ecac:	4798      	blx	r3
    ecae:	4d22      	ldr	r5, [pc, #136]	; (ed38 <RADIO_FSKFifoLevel+0x90>)
    ecb0:	002a      	movs	r2, r5
    ecb2:	002b      	movs	r3, r5
    ecb4:	322c      	adds	r2, #44	; 0x2c
    ecb6:	3358      	adds	r3, #88	; 0x58
    ecb8:	7810      	ldrb	r0, [r2, #0]
    ecba:	7819      	ldrb	r1, [r3, #0]
    ecbc:	4288      	cmp	r0, r1
    ecbe:	d105      	bne.n	eccc <RADIO_FSKFifoLevel+0x24>
    ecc0:	7812      	ldrb	r2, [r2, #0]
    ecc2:	2a00      	cmp	r2, #0
    ecc4:	d002      	beq.n	eccc <RADIO_FSKFifoLevel+0x24>
    ecc6:	781b      	ldrb	r3, [r3, #0]
    ecc8:	2b00      	cmp	r3, #0
    ecca:	d11f      	bne.n	ed0c <RADIO_FSKFifoLevel+0x64>
    eccc:	0029      	movs	r1, r5
    ecce:	312c      	adds	r1, #44	; 0x2c
    ecd0:	7808      	ldrb	r0, [r1, #0]
    ecd2:	b2c0      	uxtb	r0, r0
    ecd4:	2800      	cmp	r0, #0
    ecd6:	d102      	bne.n	ecde <RADIO_FSKFifoLevel+0x36>
    ecd8:	2201      	movs	r2, #1
    ecda:	4b18      	ldr	r3, [pc, #96]	; (ed3c <RADIO_FSKFifoLevel+0x94>)
    ecdc:	4798      	blx	r3
    ecde:	002e      	movs	r6, r5
    ece0:	002c      	movs	r4, r5
    ece2:	362c      	adds	r6, #44	; 0x2c
    ece4:	3458      	adds	r4, #88	; 0x58
    ece6:	7833      	ldrb	r3, [r6, #0]
    ece8:	7822      	ldrb	r2, [r4, #0]
    ecea:	1a9b      	subs	r3, r3, r2
    ecec:	b2db      	uxtb	r3, r3
    ecee:	2b3e      	cmp	r3, #62	; 0x3e
    ecf0:	d80f      	bhi.n	ed12 <RADIO_FSKFifoLevel+0x6a>
    ecf2:	7823      	ldrb	r3, [r4, #0]
    ecf4:	7832      	ldrb	r2, [r6, #0]
    ecf6:	7821      	ldrb	r1, [r4, #0]
    ecf8:	2000      	movs	r0, #0
    ecfa:	1a52      	subs	r2, r2, r1
    ecfc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ecfe:	b2d2      	uxtb	r2, r2
    ed00:	18c9      	adds	r1, r1, r3
    ed02:	4b0e      	ldr	r3, [pc, #56]	; (ed3c <RADIO_FSKFifoLevel+0x94>)
    ed04:	4798      	blx	r3
    ed06:	7833      	ldrb	r3, [r6, #0]
    ed08:	b2db      	uxtb	r3, r3
    ed0a:	7023      	strb	r3, [r4, #0]
    ed0c:	4b0c      	ldr	r3, [pc, #48]	; (ed40 <RADIO_FSKFifoLevel+0x98>)
    ed0e:	4798      	blx	r3
    ed10:	bd70      	pop	{r4, r5, r6, pc}
    ed12:	7833      	ldrb	r3, [r6, #0]
    ed14:	7822      	ldrb	r2, [r4, #0]
    ed16:	1a9b      	subs	r3, r3, r2
    ed18:	b2db      	uxtb	r3, r3
    ed1a:	2b3f      	cmp	r3, #63	; 0x3f
    ed1c:	d9f6      	bls.n	ed0c <RADIO_FSKFifoLevel+0x64>
    ed1e:	7823      	ldrb	r3, [r4, #0]
    ed20:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ed22:	223f      	movs	r2, #63	; 0x3f
    ed24:	18c9      	adds	r1, r1, r3
    ed26:	2000      	movs	r0, #0
    ed28:	4b04      	ldr	r3, [pc, #16]	; (ed3c <RADIO_FSKFifoLevel+0x94>)
    ed2a:	4798      	blx	r3
    ed2c:	7823      	ldrb	r3, [r4, #0]
    ed2e:	333f      	adds	r3, #63	; 0x3f
    ed30:	e7ea      	b.n	ed08 <RADIO_FSKFifoLevel+0x60>
    ed32:	46c0      	nop			; (mov r8, r8)
    ed34:	00004569 	.word	0x00004569
    ed38:	20002d78 	.word	0x20002d78
    ed3c:	0000c565 	.word	0x0000c565
    ed40:	000045a9 	.word	0x000045a9

0000ed44 <RADIO_FSKFifoEmpty>:
    ed44:	b510      	push	{r4, lr}
    ed46:	4b03      	ldr	r3, [pc, #12]	; (ed54 <RADIO_FSKFifoEmpty+0x10>)
    ed48:	7819      	ldrb	r1, [r3, #0]
    ed4a:	4b03      	ldr	r3, [pc, #12]	; (ed58 <RADIO_FSKFifoEmpty+0x14>)
    ed4c:	6818      	ldr	r0, [r3, #0]
    ed4e:	4b03      	ldr	r3, [pc, #12]	; (ed5c <RADIO_FSKFifoEmpty+0x18>)
    ed50:	4798      	blx	r3
    ed52:	bd10      	pop	{r4, pc}
    ed54:	20001eb4 	.word	0x20001eb4
    ed58:	20001eb0 	.word	0x20001eb0
    ed5c:	0000ebf1 	.word	0x0000ebf1

0000ed60 <RADIO_GetData>:
    ed60:	4b03      	ldr	r3, [pc, #12]	; (ed70 <RADIO_GetData+0x10>)
    ed62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ed64:	332c      	adds	r3, #44	; 0x2c
    ed66:	6002      	str	r2, [r0, #0]
    ed68:	781b      	ldrb	r3, [r3, #0]
    ed6a:	2000      	movs	r0, #0
    ed6c:	800b      	strh	r3, [r1, #0]
    ed6e:	4770      	bx	lr
    ed70:	20002d78 	.word	0x20002d78

0000ed74 <Radio_EnableRfControl>:
    ed74:	b510      	push	{r4, lr}
    ed76:	4b08      	ldr	r3, [pc, #32]	; (ed98 <Radio_EnableRfControl+0x24>)
    ed78:	0001      	movs	r1, r0
    ed7a:	681a      	ldr	r2, [r3, #0]
    ed7c:	4807      	ldr	r0, [pc, #28]	; (ed9c <Radio_EnableRfControl+0x28>)
    ed7e:	4c08      	ldr	r4, [pc, #32]	; (eda0 <Radio_EnableRfControl+0x2c>)
    ed80:	1812      	adds	r2, r2, r0
    ed82:	2000      	movs	r0, #0
    ed84:	42a2      	cmp	r2, r4
    ed86:	d804      	bhi.n	ed92 <Radio_EnableRfControl+0x1e>
    ed88:	3305      	adds	r3, #5
    ed8a:	7fdb      	ldrb	r3, [r3, #31]
    ed8c:	1e58      	subs	r0, r3, #1
    ed8e:	4183      	sbcs	r3, r0
    ed90:	1c58      	adds	r0, r3, #1
    ed92:	4b04      	ldr	r3, [pc, #16]	; (eda4 <Radio_EnableRfControl+0x30>)
    ed94:	4798      	blx	r3
    ed96:	bd10      	pop	{r4, pc}
    ed98:	20002d78 	.word	0x20002d78
    ed9c:	cc9eec80 	.word	0xcc9eec80
    eda0:	096ae380 	.word	0x096ae380
    eda4:	0000c5d1 	.word	0x0000c5d1

0000eda8 <Radio_DisableRfControl>:
    eda8:	b510      	push	{r4, lr}
    edaa:	4b08      	ldr	r3, [pc, #32]	; (edcc <Radio_DisableRfControl+0x24>)
    edac:	0001      	movs	r1, r0
    edae:	681a      	ldr	r2, [r3, #0]
    edb0:	4807      	ldr	r0, [pc, #28]	; (edd0 <Radio_DisableRfControl+0x28>)
    edb2:	4c08      	ldr	r4, [pc, #32]	; (edd4 <Radio_DisableRfControl+0x2c>)
    edb4:	1812      	adds	r2, r2, r0
    edb6:	2000      	movs	r0, #0
    edb8:	42a2      	cmp	r2, r4
    edba:	d804      	bhi.n	edc6 <Radio_DisableRfControl+0x1e>
    edbc:	3305      	adds	r3, #5
    edbe:	7fdb      	ldrb	r3, [r3, #31]
    edc0:	1e58      	subs	r0, r3, #1
    edc2:	4183      	sbcs	r3, r0
    edc4:	1c58      	adds	r0, r3, #1
    edc6:	4b04      	ldr	r3, [pc, #16]	; (edd8 <Radio_DisableRfControl+0x30>)
    edc8:	4798      	blx	r3
    edca:	bd10      	pop	{r4, pc}
    edcc:	20002d78 	.word	0x20002d78
    edd0:	cc9eec80 	.word	0xcc9eec80
    edd4:	096ae380 	.word	0x096ae380
    edd8:	0000c5f9 	.word	0x0000c5f9

0000eddc <Radio_WatchdogTimeout>:
    eddc:	b510      	push	{r4, lr}
    edde:	4b0e      	ldr	r3, [pc, #56]	; (ee18 <Radio_WatchdogTimeout+0x3c>)
    ede0:	781a      	ldrb	r2, [r3, #0]
    ede2:	2a04      	cmp	r2, #4
    ede4:	d10b      	bne.n	edfe <Radio_WatchdogTimeout+0x22>
    ede6:	2320      	movs	r3, #32
    ede8:	4a0c      	ldr	r2, [pc, #48]	; (ee1c <Radio_WatchdogTimeout+0x40>)
    edea:	2000      	movs	r0, #0
    edec:	8811      	ldrh	r1, [r2, #0]
    edee:	430b      	orrs	r3, r1
    edf0:	8013      	strh	r3, [r2, #0]
    edf2:	4b0b      	ldr	r3, [pc, #44]	; (ee20 <Radio_WatchdogTimeout+0x44>)
    edf4:	4798      	blx	r3
    edf6:	2002      	movs	r0, #2
    edf8:	4b0a      	ldr	r3, [pc, #40]	; (ee24 <Radio_WatchdogTimeout+0x48>)
    edfa:	4798      	blx	r3
    edfc:	bd10      	pop	{r4, pc}
    edfe:	781b      	ldrb	r3, [r3, #0]
    ee00:	2b02      	cmp	r3, #2
    ee02:	d1fb      	bne.n	edfc <Radio_WatchdogTimeout+0x20>
    ee04:	4a05      	ldr	r2, [pc, #20]	; (ee1c <Radio_WatchdogTimeout+0x40>)
    ee06:	330e      	adds	r3, #14
    ee08:	8811      	ldrh	r1, [r2, #0]
    ee0a:	2001      	movs	r0, #1
    ee0c:	430b      	orrs	r3, r1
    ee0e:	8013      	strh	r3, [r2, #0]
    ee10:	4b03      	ldr	r3, [pc, #12]	; (ee20 <Radio_WatchdogTimeout+0x44>)
    ee12:	4798      	blx	r3
    ee14:	2001      	movs	r0, #1
    ee16:	e7ef      	b.n	edf8 <Radio_WatchdogTimeout+0x1c>
    ee18:	20003047 	.word	0x20003047
    ee1c:	20003044 	.word	0x20003044
    ee20:	0000eda9 	.word	0x0000eda9
    ee24:	0000eac1 	.word	0x0000eac1

0000ee28 <RADIO_RxTimeout>:
    ee28:	b510      	push	{r4, lr}
    ee2a:	4b0a      	ldr	r3, [pc, #40]	; (ee54 <RADIO_RxTimeout+0x2c>)
    ee2c:	332f      	adds	r3, #47	; 0x2f
    ee2e:	7818      	ldrb	r0, [r3, #0]
    ee30:	4b09      	ldr	r3, [pc, #36]	; (ee58 <RADIO_RxTimeout+0x30>)
    ee32:	4798      	blx	r3
    ee34:	2000      	movs	r0, #0
    ee36:	4b09      	ldr	r3, [pc, #36]	; (ee5c <RADIO_RxTimeout+0x34>)
    ee38:	4798      	blx	r3
    ee3a:	2180      	movs	r1, #128	; 0x80
    ee3c:	2012      	movs	r0, #18
    ee3e:	4b08      	ldr	r3, [pc, #32]	; (ee60 <RADIO_RxTimeout+0x38>)
    ee40:	4798      	blx	r3
    ee42:	2340      	movs	r3, #64	; 0x40
    ee44:	4a07      	ldr	r2, [pc, #28]	; (ee64 <RADIO_RxTimeout+0x3c>)
    ee46:	2002      	movs	r0, #2
    ee48:	8811      	ldrh	r1, [r2, #0]
    ee4a:	430b      	orrs	r3, r1
    ee4c:	8013      	strh	r3, [r2, #0]
    ee4e:	4b06      	ldr	r3, [pc, #24]	; (ee68 <RADIO_RxTimeout+0x40>)
    ee50:	4798      	blx	r3
    ee52:	bd10      	pop	{r4, pc}
    ee54:	20002d78 	.word	0x20002d78
    ee58:	0000d3d5 	.word	0x0000d3d5
    ee5c:	0000eda9 	.word	0x0000eda9
    ee60:	0000c4d1 	.word	0x0000c4d1
    ee64:	20003044 	.word	0x20003044
    ee68:	0000eac1 	.word	0x0000eac1

0000ee6c <Radio_RxFSKTimeout>:
    ee6c:	b510      	push	{r4, lr}
    ee6e:	4b08      	ldr	r3, [pc, #32]	; (ee90 <Radio_RxFSKTimeout+0x24>)
    ee70:	332f      	adds	r3, #47	; 0x2f
    ee72:	7818      	ldrb	r0, [r3, #0]
    ee74:	4b07      	ldr	r3, [pc, #28]	; (ee94 <Radio_RxFSKTimeout+0x28>)
    ee76:	4798      	blx	r3
    ee78:	2000      	movs	r0, #0
    ee7a:	4b07      	ldr	r3, [pc, #28]	; (ee98 <Radio_RxFSKTimeout+0x2c>)
    ee7c:	4798      	blx	r3
    ee7e:	2380      	movs	r3, #128	; 0x80
    ee80:	4a06      	ldr	r2, [pc, #24]	; (ee9c <Radio_RxFSKTimeout+0x30>)
    ee82:	2002      	movs	r0, #2
    ee84:	8811      	ldrh	r1, [r2, #0]
    ee86:	430b      	orrs	r3, r1
    ee88:	8013      	strh	r3, [r2, #0]
    ee8a:	4b05      	ldr	r3, [pc, #20]	; (eea0 <Radio_RxFSKTimeout+0x34>)
    ee8c:	4798      	blx	r3
    ee8e:	bd10      	pop	{r4, pc}
    ee90:	20002d78 	.word	0x20002d78
    ee94:	0000d3d5 	.word	0x0000d3d5
    ee98:	0000eda9 	.word	0x0000eda9
    ee9c:	20003044 	.word	0x20003044
    eea0:	0000eac1 	.word	0x0000eac1

0000eea4 <RADIO_TxDone>:
    eea4:	b570      	push	{r4, r5, r6, lr}
    eea6:	4b14      	ldr	r3, [pc, #80]	; (eef8 <RADIO_TxDone+0x54>)
    eea8:	332f      	adds	r3, #47	; 0x2f
    eeaa:	7818      	ldrb	r0, [r3, #0]
    eeac:	4b13      	ldr	r3, [pc, #76]	; (eefc <RADIO_TxDone+0x58>)
    eeae:	4798      	blx	r3
    eeb0:	2001      	movs	r0, #1
    eeb2:	4b13      	ldr	r3, [pc, #76]	; (ef00 <RADIO_TxDone+0x5c>)
    eeb4:	4798      	blx	r3
    eeb6:	4b13      	ldr	r3, [pc, #76]	; (ef04 <RADIO_TxDone+0x60>)
    eeb8:	2108      	movs	r1, #8
    eeba:	2012      	movs	r0, #18
    eebc:	4798      	blx	r3
    eebe:	4b12      	ldr	r3, [pc, #72]	; (ef08 <RADIO_TxDone+0x64>)
    eec0:	781a      	ldrb	r2, [r3, #0]
    eec2:	4b12      	ldr	r3, [pc, #72]	; (ef0c <RADIO_TxDone+0x68>)
    eec4:	2a02      	cmp	r2, #2
    eec6:	d002      	beq.n	eece <RADIO_TxDone+0x2a>
    eec8:	881a      	ldrh	r2, [r3, #0]
    eeca:	0692      	lsls	r2, r2, #26
    eecc:	d413      	bmi.n	eef6 <RADIO_TxDone+0x52>
    eece:	2001      	movs	r0, #1
    eed0:	881a      	ldrh	r2, [r3, #0]
    eed2:	4302      	orrs	r2, r0
    eed4:	801a      	strh	r2, [r3, #0]
    eed6:	4b0e      	ldr	r3, [pc, #56]	; (ef10 <RADIO_TxDone+0x6c>)
    eed8:	4798      	blx	r3
    eeda:	4b0e      	ldr	r3, [pc, #56]	; (ef14 <RADIO_TxDone+0x70>)
    eedc:	4798      	blx	r3
    eede:	4c0e      	ldr	r4, [pc, #56]	; (ef18 <RADIO_TxDone+0x74>)
    eee0:	4d0e      	ldr	r5, [pc, #56]	; (ef1c <RADIO_TxDone+0x78>)
    eee2:	6822      	ldr	r2, [r4, #0]
    eee4:	6863      	ldr	r3, [r4, #4]
    eee6:	1a80      	subs	r0, r0, r2
    eee8:	4199      	sbcs	r1, r3
    eeea:	22fa      	movs	r2, #250	; 0xfa
    eeec:	2300      	movs	r3, #0
    eeee:	0092      	lsls	r2, r2, #2
    eef0:	47a8      	blx	r5
    eef2:	6020      	str	r0, [r4, #0]
    eef4:	6061      	str	r1, [r4, #4]
    eef6:	bd70      	pop	{r4, r5, r6, pc}
    eef8:	20002d78 	.word	0x20002d78
    eefc:	0000d3d5 	.word	0x0000d3d5
    ef00:	0000eda9 	.word	0x0000eda9
    ef04:	0000c4d1 	.word	0x0000c4d1
    ef08:	20003047 	.word	0x20003047
    ef0c:	20003044 	.word	0x20003044
    ef10:	0000eac1 	.word	0x0000eac1
    ef14:	0000d065 	.word	0x0000d065
    ef18:	20001ea8 	.word	0x20001ea8
    ef1c:	00013871 	.word	0x00013871

0000ef20 <RADIO_FSKPacketSent>:
    ef20:	b570      	push	{r4, r5, r6, lr}
    ef22:	4b15      	ldr	r3, [pc, #84]	; (ef78 <RADIO_FSKPacketSent+0x58>)
    ef24:	203f      	movs	r0, #63	; 0x3f
    ef26:	4798      	blx	r3
    ef28:	0703      	lsls	r3, r0, #28
    ef2a:	d524      	bpl.n	ef76 <RADIO_FSKPacketSent+0x56>
    ef2c:	4b13      	ldr	r3, [pc, #76]	; (ef7c <RADIO_FSKPacketSent+0x5c>)
    ef2e:	332f      	adds	r3, #47	; 0x2f
    ef30:	7818      	ldrb	r0, [r3, #0]
    ef32:	4b13      	ldr	r3, [pc, #76]	; (ef80 <RADIO_FSKPacketSent+0x60>)
    ef34:	4798      	blx	r3
    ef36:	4b13      	ldr	r3, [pc, #76]	; (ef84 <RADIO_FSKPacketSent+0x64>)
    ef38:	2001      	movs	r0, #1
    ef3a:	4798      	blx	r3
    ef3c:	4b12      	ldr	r3, [pc, #72]	; (ef88 <RADIO_FSKPacketSent+0x68>)
    ef3e:	4c13      	ldr	r4, [pc, #76]	; (ef8c <RADIO_FSKPacketSent+0x6c>)
    ef40:	781b      	ldrb	r3, [r3, #0]
    ef42:	2b02      	cmp	r3, #2
    ef44:	d002      	beq.n	ef4c <RADIO_FSKPacketSent+0x2c>
    ef46:	8823      	ldrh	r3, [r4, #0]
    ef48:	069b      	lsls	r3, r3, #26
    ef4a:	d414      	bmi.n	ef76 <RADIO_FSKPacketSent+0x56>
    ef4c:	4b10      	ldr	r3, [pc, #64]	; (ef90 <RADIO_FSKPacketSent+0x70>)
    ef4e:	4798      	blx	r3
    ef50:	4d10      	ldr	r5, [pc, #64]	; (ef94 <RADIO_FSKPacketSent+0x74>)
    ef52:	4e11      	ldr	r6, [pc, #68]	; (ef98 <RADIO_FSKPacketSent+0x78>)
    ef54:	682a      	ldr	r2, [r5, #0]
    ef56:	686b      	ldr	r3, [r5, #4]
    ef58:	1a80      	subs	r0, r0, r2
    ef5a:	4199      	sbcs	r1, r3
    ef5c:	22fa      	movs	r2, #250	; 0xfa
    ef5e:	2300      	movs	r3, #0
    ef60:	0092      	lsls	r2, r2, #2
    ef62:	47b0      	blx	r6
    ef64:	4b0d      	ldr	r3, [pc, #52]	; (ef9c <RADIO_FSKPacketSent+0x7c>)
    ef66:	6028      	str	r0, [r5, #0]
    ef68:	6069      	str	r1, [r5, #4]
    ef6a:	2001      	movs	r0, #1
    ef6c:	4798      	blx	r3
    ef6e:	2304      	movs	r3, #4
    ef70:	8822      	ldrh	r2, [r4, #0]
    ef72:	4313      	orrs	r3, r2
    ef74:	8023      	strh	r3, [r4, #0]
    ef76:	bd70      	pop	{r4, r5, r6, pc}
    ef78:	0000c4f9 	.word	0x0000c4f9
    ef7c:	20002d78 	.word	0x20002d78
    ef80:	0000d3d5 	.word	0x0000d3d5
    ef84:	0000eda9 	.word	0x0000eda9
    ef88:	20003047 	.word	0x20003047
    ef8c:	20003044 	.word	0x20003044
    ef90:	0000d065 	.word	0x0000d065
    ef94:	20001ea8 	.word	0x20001ea8
    ef98:	00013871 	.word	0x00013871
    ef9c:	0000eac1 	.word	0x0000eac1

0000efa0 <RADIO_RxDone>:
    efa0:	b570      	push	{r4, r5, r6, lr}
    efa2:	2012      	movs	r0, #18
    efa4:	4e16      	ldr	r6, [pc, #88]	; (f000 <RADIO_RxDone+0x60>)
    efa6:	47b0      	blx	r6
    efa8:	4b16      	ldr	r3, [pc, #88]	; (f004 <RADIO_RxDone+0x64>)
    efaa:	0005      	movs	r5, r0
    efac:	2170      	movs	r1, #112	; 0x70
    efae:	2012      	movs	r0, #18
    efb0:	4798      	blx	r3
    efb2:	2350      	movs	r3, #80	; 0x50
    efb4:	402b      	ands	r3, r5
    efb6:	2b50      	cmp	r3, #80	; 0x50
    efb8:	d119      	bne.n	efee <RADIO_RxDone+0x4e>
    efba:	4c13      	ldr	r4, [pc, #76]	; (f008 <RADIO_RxDone+0x68>)
    efbc:	0023      	movs	r3, r4
    efbe:	332f      	adds	r3, #47	; 0x2f
    efc0:	7818      	ldrb	r0, [r3, #0]
    efc2:	4b12      	ldr	r3, [pc, #72]	; (f00c <RADIO_RxDone+0x6c>)
    efc4:	4798      	blx	r3
    efc6:	4b12      	ldr	r3, [pc, #72]	; (f010 <RADIO_RxDone+0x70>)
    efc8:	2000      	movs	r0, #0
    efca:	4798      	blx	r3
    efcc:	3404      	adds	r4, #4
    efce:	201c      	movs	r0, #28
    efd0:	47b0      	blx	r6
    efd2:	7fe2      	ldrb	r2, [r4, #31]
    efd4:	4b0f      	ldr	r3, [pc, #60]	; (f014 <RADIO_RxDone+0x74>)
    efd6:	4910      	ldr	r1, [pc, #64]	; (f018 <RADIO_RxDone+0x78>)
    efd8:	2a00      	cmp	r2, #0
    efda:	d003      	beq.n	efe4 <RADIO_RxDone+0x44>
    efdc:	06aa      	lsls	r2, r5, #26
    efde:	d407      	bmi.n	eff0 <RADIO_RxDone+0x50>
    efe0:	0642      	lsls	r2, r0, #25
    efe2:	d505      	bpl.n	eff0 <RADIO_RxDone+0x50>
    efe4:	2002      	movs	r0, #2
    efe6:	881a      	ldrh	r2, [r3, #0]
    efe8:	4302      	orrs	r2, r0
    efea:	801a      	strh	r2, [r3, #0]
    efec:	4788      	blx	r1
    efee:	bd70      	pop	{r4, r5, r6, pc}
    eff0:	2280      	movs	r2, #128	; 0x80
    eff2:	8818      	ldrh	r0, [r3, #0]
    eff4:	0052      	lsls	r2, r2, #1
    eff6:	4302      	orrs	r2, r0
    eff8:	801a      	strh	r2, [r3, #0]
    effa:	2002      	movs	r0, #2
    effc:	e7f6      	b.n	efec <RADIO_RxDone+0x4c>
    effe:	46c0      	nop			; (mov r8, r8)
    f000:	0000c4f9 	.word	0x0000c4f9
    f004:	0000c4d1 	.word	0x0000c4d1
    f008:	20002d78 	.word	0x20002d78
    f00c:	0000d3d5 	.word	0x0000d3d5
    f010:	0000eda9 	.word	0x0000eda9
    f014:	20003044 	.word	0x20003044
    f018:	0000eac1 	.word	0x0000eac1

0000f01c <RADIO_FSKPayloadReady>:
    f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f01e:	203f      	movs	r0, #63	; 0x3f
    f020:	4b39      	ldr	r3, [pc, #228]	; (f108 <RADIO_FSKPayloadReady+0xec>)
    f022:	4798      	blx	r3
    f024:	0743      	lsls	r3, r0, #29
    f026:	d559      	bpl.n	f0dc <RADIO_FSKPayloadReady+0xc0>
    f028:	4c38      	ldr	r4, [pc, #224]	; (f10c <RADIO_FSKPayloadReady+0xf0>)
    f02a:	4d39      	ldr	r5, [pc, #228]	; (f110 <RADIO_FSKPayloadReady+0xf4>)
    f02c:	1d23      	adds	r3, r4, #4
    f02e:	7fdb      	ldrb	r3, [r3, #31]
    f030:	2b01      	cmp	r3, #1
    f032:	d154      	bne.n	f0de <RADIO_FSKPayloadReady+0xc2>
    f034:	2202      	movs	r2, #2
    f036:	4210      	tst	r0, r2
    f038:	d048      	beq.n	f0cc <RADIO_FSKPayloadReady+0xb0>
    f03a:	0023      	movs	r3, r4
    f03c:	332f      	adds	r3, #47	; 0x2f
    f03e:	7818      	ldrb	r0, [r3, #0]
    f040:	4e34      	ldr	r6, [pc, #208]	; (f114 <RADIO_FSKPayloadReady+0xf8>)
    f042:	47b0      	blx	r6
    f044:	0023      	movs	r3, r4
    f046:	332e      	adds	r3, #46	; 0x2e
    f048:	7818      	ldrb	r0, [r3, #0]
    f04a:	47b0      	blx	r6
    f04c:	4b32      	ldr	r3, [pc, #200]	; (f118 <RADIO_FSKPayloadReady+0xfc>)
    f04e:	4798      	blx	r3
    f050:	0022      	movs	r2, r4
    f052:	0023      	movs	r3, r4
    f054:	322c      	adds	r2, #44	; 0x2c
    f056:	3358      	adds	r3, #88	; 0x58
    f058:	7810      	ldrb	r0, [r2, #0]
    f05a:	7819      	ldrb	r1, [r3, #0]
    f05c:	4288      	cmp	r0, r1
    f05e:	d105      	bne.n	f06c <RADIO_FSKPayloadReady+0x50>
    f060:	7812      	ldrb	r2, [r2, #0]
    f062:	2a00      	cmp	r2, #0
    f064:	d002      	beq.n	f06c <RADIO_FSKPayloadReady+0x50>
    f066:	781b      	ldrb	r3, [r3, #0]
    f068:	2b00      	cmp	r3, #0
    f06a:	d118      	bne.n	f09e <RADIO_FSKPayloadReady+0x82>
    f06c:	0021      	movs	r1, r4
    f06e:	312c      	adds	r1, #44	; 0x2c
    f070:	7808      	ldrb	r0, [r1, #0]
    f072:	b2c0      	uxtb	r0, r0
    f074:	2800      	cmp	r0, #0
    f076:	d102      	bne.n	f07e <RADIO_FSKPayloadReady+0x62>
    f078:	2201      	movs	r2, #1
    f07a:	4b28      	ldr	r3, [pc, #160]	; (f11c <RADIO_FSKPayloadReady+0x100>)
    f07c:	4798      	blx	r3
    f07e:	0026      	movs	r6, r4
    f080:	0027      	movs	r7, r4
    f082:	3658      	adds	r6, #88	; 0x58
    f084:	7830      	ldrb	r0, [r6, #0]
    f086:	372c      	adds	r7, #44	; 0x2c
    f088:	b2c0      	uxtb	r0, r0
    f08a:	2800      	cmp	r0, #0
    f08c:	d110      	bne.n	f0b0 <RADIO_FSKPayloadReady+0x94>
    f08e:	783a      	ldrb	r2, [r7, #0]
    f090:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f092:	b2d2      	uxtb	r2, r2
    f094:	4b21      	ldr	r3, [pc, #132]	; (f11c <RADIO_FSKPayloadReady+0x100>)
    f096:	4798      	blx	r3
    f098:	783b      	ldrb	r3, [r7, #0]
    f09a:	b2db      	uxtb	r3, r3
    f09c:	7033      	strb	r3, [r6, #0]
    f09e:	4b20      	ldr	r3, [pc, #128]	; (f120 <RADIO_FSKPayloadReady+0x104>)
    f0a0:	4798      	blx	r3
    f0a2:	4b20      	ldr	r3, [pc, #128]	; (f124 <RADIO_FSKPayloadReady+0x108>)
    f0a4:	2000      	movs	r0, #0
    f0a6:	4798      	blx	r3
    f0a8:	2308      	movs	r3, #8
    f0aa:	882a      	ldrh	r2, [r5, #0]
    f0ac:	4313      	orrs	r3, r2
    f0ae:	e011      	b.n	f0d4 <RADIO_FSKPayloadReady+0xb8>
    f0b0:	783b      	ldrb	r3, [r7, #0]
    f0b2:	7832      	ldrb	r2, [r6, #0]
    f0b4:	1a9b      	subs	r3, r3, r2
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	ddf1      	ble.n	f09e <RADIO_FSKPayloadReady+0x82>
    f0ba:	7833      	ldrb	r3, [r6, #0]
    f0bc:	783a      	ldrb	r2, [r7, #0]
    f0be:	7831      	ldrb	r1, [r6, #0]
    f0c0:	2000      	movs	r0, #0
    f0c2:	1a52      	subs	r2, r2, r1
    f0c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f0c6:	b2d2      	uxtb	r2, r2
    f0c8:	18c9      	adds	r1, r1, r3
    f0ca:	e7e3      	b.n	f094 <RADIO_FSKPayloadReady+0x78>
    f0cc:	2380      	movs	r3, #128	; 0x80
    f0ce:	8829      	ldrh	r1, [r5, #0]
    f0d0:	005b      	lsls	r3, r3, #1
    f0d2:	430b      	orrs	r3, r1
    f0d4:	802b      	strh	r3, [r5, #0]
    f0d6:	2002      	movs	r0, #2
    f0d8:	4b13      	ldr	r3, [pc, #76]	; (f128 <RADIO_FSKPayloadReady+0x10c>)
    f0da:	4798      	blx	r3
    f0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0de:	0023      	movs	r3, r4
    f0e0:	332f      	adds	r3, #47	; 0x2f
    f0e2:	4e0c      	ldr	r6, [pc, #48]	; (f114 <RADIO_FSKPayloadReady+0xf8>)
    f0e4:	7818      	ldrb	r0, [r3, #0]
    f0e6:	47b0      	blx	r6
    f0e8:	0023      	movs	r3, r4
    f0ea:	332e      	adds	r3, #46	; 0x2e
    f0ec:	7818      	ldrb	r0, [r3, #0]
    f0ee:	47b0      	blx	r6
    f0f0:	4e0e      	ldr	r6, [pc, #56]	; (f12c <RADIO_FSKPayloadReady+0x110>)
    f0f2:	2201      	movs	r2, #1
    f0f4:	0031      	movs	r1, r6
    f0f6:	2000      	movs	r0, #0
    f0f8:	4f08      	ldr	r7, [pc, #32]	; (f11c <RADIO_FSKPayloadReady+0x100>)
    f0fa:	47b8      	blx	r7
    f0fc:	7832      	ldrb	r2, [r6, #0]
    f0fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f100:	b2d2      	uxtb	r2, r2
    f102:	2000      	movs	r0, #0
    f104:	47b8      	blx	r7
    f106:	e7cc      	b.n	f0a2 <RADIO_FSKPayloadReady+0x86>
    f108:	0000c4f9 	.word	0x0000c4f9
    f10c:	20002d78 	.word	0x20002d78
    f110:	20003044 	.word	0x20003044
    f114:	0000d3d5 	.word	0x0000d3d5
    f118:	00004569 	.word	0x00004569
    f11c:	0000c565 	.word	0x0000c565
    f120:	000045a9 	.word	0x000045a9
    f124:	0000eda9 	.word	0x0000eda9
    f128:	0000eac1 	.word	0x0000eac1
    f12c:	20002da4 	.word	0x20002da4

0000f130 <Radio_SetClockInput>:
    f130:	b510      	push	{r4, lr}
    f132:	4b08      	ldr	r3, [pc, #32]	; (f154 <Radio_SetClockInput+0x24>)
    f134:	3355      	adds	r3, #85	; 0x55
    f136:	781b      	ldrb	r3, [r3, #0]
    f138:	2b00      	cmp	r3, #0
    f13a:	d10a      	bne.n	f152 <Radio_SetClockInput+0x22>
    f13c:	4b06      	ldr	r3, [pc, #24]	; (f158 <Radio_SetClockInput+0x28>)
    f13e:	204b      	movs	r0, #75	; 0x4b
    f140:	4798      	blx	r3
    f142:	2110      	movs	r1, #16
    f144:	4301      	orrs	r1, r0
    f146:	4b05      	ldr	r3, [pc, #20]	; (f15c <Radio_SetClockInput+0x2c>)
    f148:	b2c9      	uxtb	r1, r1
    f14a:	204b      	movs	r0, #75	; 0x4b
    f14c:	4798      	blx	r3
    f14e:	4b04      	ldr	r3, [pc, #16]	; (f160 <Radio_SetClockInput+0x30>)
    f150:	4798      	blx	r3
    f152:	bd10      	pop	{r4, pc}
    f154:	20002d78 	.word	0x20002d78
    f158:	0000c4f9 	.word	0x0000c4f9
    f15c:	0000c4d1 	.word	0x0000c4d1
    f160:	0000c619 	.word	0x0000c619

0000f164 <RADIO_RxHandler>:
    f164:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f166:	4b34      	ldr	r3, [pc, #208]	; (f238 <RADIO_RxHandler+0xd4>)
    f168:	4798      	blx	r3
    f16a:	2000      	movs	r0, #0
    f16c:	4b33      	ldr	r3, [pc, #204]	; (f23c <RADIO_RxHandler+0xd8>)
    f16e:	4798      	blx	r3
    f170:	4e33      	ldr	r6, [pc, #204]	; (f240 <RADIO_RxHandler+0xdc>)
    f172:	4b34      	ldr	r3, [pc, #208]	; (f244 <RADIO_RxHandler+0xe0>)
    f174:	8830      	ldrh	r0, [r6, #0]
    f176:	2800      	cmp	r0, #0
    f178:	d100      	bne.n	f17c <RADIO_RxHandler+0x18>
    f17a:	3004      	adds	r0, #4
    f17c:	4798      	blx	r3
    f17e:	4c32      	ldr	r4, [pc, #200]	; (f248 <RADIO_RxHandler+0xe4>)
    f180:	4d32      	ldr	r5, [pc, #200]	; (f24c <RADIO_RxHandler+0xe8>)
    f182:	0023      	movs	r3, r4
    f184:	3334      	adds	r3, #52	; 0x34
    f186:	7819      	ldrb	r1, [r3, #0]
    f188:	2901      	cmp	r1, #1
    f18a:	d122      	bne.n	f1d2 <RADIO_RxHandler+0x6e>
    f18c:	2022      	movs	r0, #34	; 0x22
    f18e:	47a8      	blx	r5
    f190:	2100      	movs	r1, #0
    f192:	2040      	movs	r0, #64	; 0x40
    f194:	47a8      	blx	r5
    f196:	2100      	movs	r1, #0
    f198:	2041      	movs	r0, #65	; 0x41
    f19a:	47a8      	blx	r5
    f19c:	8832      	ldrh	r2, [r6, #0]
    f19e:	4b2c      	ldr	r3, [pc, #176]	; (f250 <RADIO_RxHandler+0xec>)
    f1a0:	2a00      	cmp	r2, #0
    f1a2:	d131      	bne.n	f208 <RADIO_RxHandler+0xa4>
    f1a4:	0021      	movs	r1, r4
    f1a6:	2005      	movs	r0, #5
    f1a8:	3134      	adds	r1, #52	; 0x34
    f1aa:	7809      	ldrb	r1, [r1, #0]
    f1ac:	4798      	blx	r3
    f1ae:	68e3      	ldr	r3, [r4, #12]
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	d00c      	beq.n	f1ce <RADIO_RxHandler+0x6a>
    f1b4:	8832      	ldrh	r2, [r6, #0]
    f1b6:	2a00      	cmp	r2, #0
    f1b8:	d009      	beq.n	f1ce <RADIO_RxHandler+0x6a>
    f1ba:	21fa      	movs	r1, #250	; 0xfa
    f1bc:	2200      	movs	r2, #0
    f1be:	342f      	adds	r4, #47	; 0x2f
    f1c0:	0089      	lsls	r1, r1, #2
    f1c2:	7820      	ldrb	r0, [r4, #0]
    f1c4:	4359      	muls	r1, r3
    f1c6:	9200      	str	r2, [sp, #0]
    f1c8:	4b22      	ldr	r3, [pc, #136]	; (f254 <RADIO_RxHandler+0xf0>)
    f1ca:	4c23      	ldr	r4, [pc, #140]	; (f258 <RADIO_RxHandler+0xf4>)
    f1cc:	47a0      	blx	r4
    f1ce:	2000      	movs	r0, #0
    f1d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f1d2:	0023      	movs	r3, r4
    f1d4:	3338      	adds	r3, #56	; 0x38
    f1d6:	7819      	ldrb	r1, [r3, #0]
    f1d8:	2012      	movs	r0, #18
    f1da:	47a8      	blx	r5
    f1dc:	0023      	movs	r3, r4
    f1de:	3339      	adds	r3, #57	; 0x39
    f1e0:	7819      	ldrb	r1, [r3, #0]
    f1e2:	2013      	movs	r0, #19
    f1e4:	47a8      	blx	r5
    f1e6:	210c      	movs	r1, #12
    f1e8:	2040      	movs	r0, #64	; 0x40
    f1ea:	47a8      	blx	r5
    f1ec:	2100      	movs	r1, #0
    f1ee:	2041      	movs	r0, #65	; 0x41
    f1f0:	47a8      	blx	r5
    f1f2:	0022      	movs	r2, r4
    f1f4:	2300      	movs	r3, #0
    f1f6:	3256      	adds	r2, #86	; 0x56
    f1f8:	8013      	strh	r3, [r2, #0]
    f1fa:	0022      	movs	r2, r4
    f1fc:	322c      	adds	r2, #44	; 0x2c
    f1fe:	7013      	strb	r3, [r2, #0]
    f200:	0022      	movs	r2, r4
    f202:	3258      	adds	r2, #88	; 0x58
    f204:	7013      	strb	r3, [r2, #0]
    f206:	e7c9      	b.n	f19c <RADIO_RxHandler+0x38>
    f208:	0022      	movs	r2, r4
    f20a:	3234      	adds	r2, #52	; 0x34
    f20c:	7811      	ldrb	r1, [r2, #0]
    f20e:	2200      	movs	r2, #0
    f210:	2901      	cmp	r1, #1
    f212:	d101      	bne.n	f218 <RADIO_RxHandler+0xb4>
    f214:	2006      	movs	r0, #6
    f216:	e7c9      	b.n	f1ac <RADIO_RxHandler+0x48>
    f218:	0011      	movs	r1, r2
    f21a:	2005      	movs	r0, #5
    f21c:	4798      	blx	r3
    f21e:	21fa      	movs	r1, #250	; 0xfa
    f220:	8833      	ldrh	r3, [r6, #0]
    f222:	0089      	lsls	r1, r1, #2
    f224:	4359      	muls	r1, r3
    f226:	0023      	movs	r3, r4
    f228:	2200      	movs	r2, #0
    f22a:	332e      	adds	r3, #46	; 0x2e
    f22c:	7818      	ldrb	r0, [r3, #0]
    f22e:	4d0a      	ldr	r5, [pc, #40]	; (f258 <RADIO_RxHandler+0xf4>)
    f230:	9200      	str	r2, [sp, #0]
    f232:	4b0a      	ldr	r3, [pc, #40]	; (f25c <RADIO_RxHandler+0xf8>)
    f234:	47a8      	blx	r5
    f236:	e7ba      	b.n	f1ae <RADIO_RxHandler+0x4a>
    f238:	0000f131 	.word	0x0000f131
    f23c:	0000ed75 	.word	0x0000ed75
    f240:	20001ea0 	.word	0x20001ea0
    f244:	0000e501 	.word	0x0000e501
    f248:	20002d78 	.word	0x20002d78
    f24c:	0000c4d1 	.word	0x0000c4d1
    f250:	0000d6f9 	.word	0x0000d6f9
    f254:	0000eddd 	.word	0x0000eddd
    f258:	0000d0bd 	.word	0x0000d0bd
    f25c:	0000ee6d 	.word	0x0000ee6d

0000f260 <Radio_ResetClockInput>:
    f260:	b510      	push	{r4, lr}
    f262:	4b04      	ldr	r3, [pc, #16]	; (f274 <Radio_ResetClockInput+0x14>)
    f264:	3355      	adds	r3, #85	; 0x55
    f266:	781b      	ldrb	r3, [r3, #0]
    f268:	2b00      	cmp	r3, #0
    f26a:	d101      	bne.n	f270 <Radio_ResetClockInput+0x10>
    f26c:	4b02      	ldr	r3, [pc, #8]	; (f278 <Radio_ResetClockInput+0x18>)
    f26e:	4798      	blx	r3
    f270:	bd10      	pop	{r4, pc}
    f272:	46c0      	nop			; (mov r8, r8)
    f274:	20002d78 	.word	0x20002d78
    f278:	0000c635 	.word	0x0000c635

0000f27c <RADIO_InitDefaultAttributes>:
    f27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f27e:	2501      	movs	r5, #1
    f280:	4b64      	ldr	r3, [pc, #400]	; (f414 <RADIO_InitDefaultAttributes+0x198>)
    f282:	4c65      	ldr	r4, [pc, #404]	; (f418 <RADIO_InitDefaultAttributes+0x19c>)
    f284:	701d      	strb	r5, [r3, #0]
    f286:	4b65      	ldr	r3, [pc, #404]	; (f41c <RADIO_InitDefaultAttributes+0x1a0>)
    f288:	2207      	movs	r2, #7
    f28a:	6023      	str	r3, [r4, #0]
    f28c:	4b64      	ldr	r3, [pc, #400]	; (f420 <RADIO_InitDefaultAttributes+0x1a4>)
    f28e:	18a1      	adds	r1, r4, r2
    f290:	6063      	str	r3, [r4, #4]
    f292:	4b64      	ldr	r3, [pc, #400]	; (f424 <RADIO_InitDefaultAttributes+0x1a8>)
    f294:	0027      	movs	r7, r4
    f296:	60a3      	str	r3, [r4, #8]
    f298:	0023      	movs	r3, r4
    f29a:	3334      	adds	r3, #52	; 0x34
    f29c:	701d      	strb	r5, [r3, #0]
    f29e:	0023      	movs	r3, r4
    f2a0:	3336      	adds	r3, #54	; 0x36
    f2a2:	701a      	strb	r2, [r3, #0]
    f2a4:	1ce3      	adds	r3, r4, #3
    f2a6:	77dd      	strb	r5, [r3, #31]
    f2a8:	0023      	movs	r3, r4
    f2aa:	3333      	adds	r3, #51	; 0x33
    f2ac:	701d      	strb	r5, [r3, #0]
    f2ae:	2300      	movs	r3, #0
    f2b0:	77cb      	strb	r3, [r1, #31]
    f2b2:	2108      	movs	r1, #8
    f2b4:	82a1      	strh	r1, [r4, #20]
    f2b6:	0021      	movs	r1, r4
    f2b8:	3135      	adds	r1, #53	; 0x35
    f2ba:	700a      	strb	r2, [r1, #0]
    f2bc:	1d22      	adds	r2, r4, #4
    f2be:	77d5      	strb	r5, [r2, #31]
    f2c0:	1d62      	adds	r2, r4, #5
    f2c2:	77d3      	strb	r3, [r2, #31]
    f2c4:	1da2      	adds	r2, r4, #6
    f2c6:	77d3      	strb	r3, [r2, #31]
    f2c8:	2194      	movs	r1, #148	; 0x94
    f2ca:	22c1      	movs	r2, #193	; 0xc1
    f2cc:	76a1      	strb	r1, [r4, #26]
    f2ce:	7662      	strb	r2, [r4, #25]
    f2d0:	76e2      	strb	r2, [r4, #27]
    f2d2:	3991      	subs	r1, #145	; 0x91
    f2d4:	1ca2      	adds	r2, r4, #2
    f2d6:	77d1      	strb	r1, [r2, #31]
    f2d8:	2234      	movs	r2, #52	; 0x34
    f2da:	7622      	strb	r2, [r4, #24]
    f2dc:	0022      	movs	r2, r4
    f2de:	317d      	adds	r1, #125	; 0x7d
    f2e0:	3232      	adds	r2, #50	; 0x32
    f2e2:	7011      	strb	r1, [r2, #0]
    f2e4:	4a50      	ldr	r2, [pc, #320]	; (f428 <RADIO_InitDefaultAttributes+0x1ac>)
    f2e6:	397e      	subs	r1, #126	; 0x7e
    f2e8:	60e2      	str	r2, [r4, #12]
    f2ea:	0022      	movs	r2, r4
    f2ec:	3237      	adds	r2, #55	; 0x37
    f2ee:	7011      	strb	r1, [r2, #0]
    f2f0:	0022      	movs	r2, r4
    f2f2:	3109      	adds	r1, #9
    f2f4:	3238      	adds	r2, #56	; 0x38
    f2f6:	7011      	strb	r1, [r2, #0]
    f2f8:	0022      	movs	r2, r4
    f2fa:	3107      	adds	r1, #7
    f2fc:	3239      	adds	r2, #57	; 0x39
    f2fe:	7011      	strb	r1, [r2, #0]
    f300:	0022      	movs	r2, r4
    f302:	322c      	adds	r2, #44	; 0x2c
    f304:	7013      	strb	r3, [r2, #0]
    f306:	4a49      	ldr	r2, [pc, #292]	; (f42c <RADIO_InitDefaultAttributes+0x1b0>)
    f308:	82e3      	strh	r3, [r4, #22]
    f30a:	62a2      	str	r2, [r4, #40]	; 0x28
    f30c:	0022      	movs	r2, r4
    f30e:	324c      	adds	r2, #76	; 0x4c
    f310:	8013      	strh	r3, [r2, #0]
    f312:	0022      	movs	r2, r4
    f314:	324e      	adds	r2, #78	; 0x4e
    f316:	7013      	strb	r3, [r2, #0]
    f318:	0022      	movs	r2, r4
    f31a:	324f      	adds	r2, #79	; 0x4f
    f31c:	7013      	strb	r3, [r2, #0]
    f31e:	0022      	movs	r2, r4
    f320:	3240      	adds	r2, #64	; 0x40
    f322:	7013      	strb	r3, [r2, #0]
    f324:	0022      	movs	r2, r4
    f326:	3241      	adds	r2, #65	; 0x41
    f328:	7013      	strb	r3, [r2, #0]
    f32a:	0022      	movs	r2, r4
    f32c:	3254      	adds	r2, #84	; 0x54
    f32e:	7013      	strb	r3, [r2, #0]
    f330:	0022      	movs	r2, r4
    f332:	3255      	adds	r2, #85	; 0x55
    f334:	7015      	strb	r5, [r2, #0]
    f336:	0022      	movs	r2, r4
    f338:	3258      	adds	r2, #88	; 0x58
    f33a:	6463      	str	r3, [r4, #68]	; 0x44
    f33c:	64a3      	str	r3, [r4, #72]	; 0x48
    f33e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f340:	87e3      	strh	r3, [r4, #62]	; 0x3e
    f342:	7013      	strb	r3, [r2, #0]
    f344:	3730      	adds	r7, #48	; 0x30
    f346:	783b      	ldrb	r3, [r7, #0]
    f348:	2b00      	cmp	r3, #0
    f34a:	d151      	bne.n	f3f0 <RADIO_InitDefaultAttributes+0x174>
    f34c:	4838      	ldr	r0, [pc, #224]	; (f430 <RADIO_InitDefaultAttributes+0x1b4>)
    f34e:	4e39      	ldr	r6, [pc, #228]	; (f434 <RADIO_InitDefaultAttributes+0x1b8>)
    f350:	47b0      	blx	r6
    f352:	2808      	cmp	r0, #8
    f354:	d149      	bne.n	f3ea <RADIO_InitDefaultAttributes+0x16e>
    f356:	4838      	ldr	r0, [pc, #224]	; (f438 <RADIO_InitDefaultAttributes+0x1bc>)
    f358:	47b0      	blx	r6
    f35a:	2808      	cmp	r0, #8
    f35c:	d145      	bne.n	f3ea <RADIO_InitDefaultAttributes+0x16e>
    f35e:	4837      	ldr	r0, [pc, #220]	; (f43c <RADIO_InitDefaultAttributes+0x1c0>)
    f360:	47b0      	blx	r6
    f362:	2808      	cmp	r0, #8
    f364:	d141      	bne.n	f3ea <RADIO_InitDefaultAttributes+0x16e>
    f366:	4836      	ldr	r0, [pc, #216]	; (f440 <RADIO_InitDefaultAttributes+0x1c4>)
    f368:	47b0      	blx	r6
    f36a:	2808      	cmp	r0, #8
    f36c:	d13d      	bne.n	f3ea <RADIO_InitDefaultAttributes+0x16e>
    f36e:	703d      	strb	r5, [r7, #0]
    f370:	4b34      	ldr	r3, [pc, #208]	; (f444 <RADIO_InitDefaultAttributes+0x1c8>)
    f372:	4798      	blx	r3
    f374:	4b34      	ldr	r3, [pc, #208]	; (f448 <RADIO_InitDefaultAttributes+0x1cc>)
    f376:	4798      	blx	r3
    f378:	2800      	cmp	r0, #0
    f37a:	d107      	bne.n	f38c <RADIO_InitDefaultAttributes+0x110>
    f37c:	0023      	movs	r3, r4
    f37e:	3355      	adds	r3, #85	; 0x55
    f380:	7018      	strb	r0, [r3, #0]
    f382:	4b32      	ldr	r3, [pc, #200]	; (f44c <RADIO_InitDefaultAttributes+0x1d0>)
    f384:	4798      	blx	r3
    f386:	0023      	movs	r3, r4
    f388:	3354      	adds	r3, #84	; 0x54
    f38a:	7018      	strb	r0, [r3, #0]
    f38c:	4b30      	ldr	r3, [pc, #192]	; (f450 <RADIO_InitDefaultAttributes+0x1d4>)
    f38e:	4798      	blx	r3
    f390:	2201      	movs	r2, #1
    f392:	2100      	movs	r1, #0
    f394:	0010      	movs	r0, r2
    f396:	4f2f      	ldr	r7, [pc, #188]	; (f454 <RADIO_InitDefaultAttributes+0x1d8>)
    f398:	47b8      	blx	r7
    f39a:	6820      	ldr	r0, [r4, #0]
    f39c:	4b2e      	ldr	r3, [pc, #184]	; (f458 <RADIO_InitDefaultAttributes+0x1dc>)
    f39e:	4798      	blx	r3
    f3a0:	2142      	movs	r1, #66	; 0x42
    f3a2:	203b      	movs	r0, #59	; 0x3b
    f3a4:	4d2d      	ldr	r5, [pc, #180]	; (f45c <RADIO_InitDefaultAttributes+0x1e0>)
    f3a6:	47a8      	blx	r5
    f3a8:	203b      	movs	r0, #59	; 0x3b
    f3aa:	4b2d      	ldr	r3, [pc, #180]	; (f460 <RADIO_InitDefaultAttributes+0x1e4>)
    f3ac:	4798      	blx	r3
    f3ae:	2620      	movs	r6, #32
    f3b0:	4006      	ands	r6, r0
    f3b2:	d1f9      	bne.n	f3a8 <RADIO_InitDefaultAttributes+0x12c>
    f3b4:	2123      	movs	r1, #35	; 0x23
    f3b6:	200c      	movs	r0, #12
    f3b8:	47a8      	blx	r5
    f3ba:	21aa      	movs	r1, #170	; 0xaa
    f3bc:	201f      	movs	r0, #31
    f3be:	47a8      	blx	r5
    f3c0:	21ff      	movs	r1, #255	; 0xff
    f3c2:	2032      	movs	r0, #50	; 0x32
    f3c4:	47a8      	blx	r5
    f3c6:	2140      	movs	r1, #64	; 0x40
    f3c8:	2031      	movs	r0, #49	; 0x31
    f3ca:	47a8      	blx	r5
    f3cc:	2201      	movs	r2, #1
    f3ce:	0030      	movs	r0, r6
    f3d0:	0011      	movs	r1, r2
    f3d2:	47b8      	blx	r7
    f3d4:	21ff      	movs	r1, #255	; 0xff
    f3d6:	2023      	movs	r0, #35	; 0x23
    f3d8:	47a8      	blx	r5
    f3da:	4b21      	ldr	r3, [pc, #132]	; (f460 <RADIO_InitDefaultAttributes+0x1e4>)
    f3dc:	2042      	movs	r0, #66	; 0x42
    f3de:	4798      	blx	r3
    f3e0:	3431      	adds	r4, #49	; 0x31
    f3e2:	4b20      	ldr	r3, [pc, #128]	; (f464 <RADIO_InitDefaultAttributes+0x1e8>)
    f3e4:	7020      	strb	r0, [r4, #0]
    f3e6:	4798      	blx	r3
    f3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3ea:	4b1f      	ldr	r3, [pc, #124]	; (f468 <RADIO_InitDefaultAttributes+0x1ec>)
    f3ec:	4798      	blx	r3
    f3ee:	e7bf      	b.n	f370 <RADIO_InitDefaultAttributes+0xf4>
    f3f0:	0023      	movs	r3, r4
    f3f2:	332d      	adds	r3, #45	; 0x2d
    f3f4:	4d1d      	ldr	r5, [pc, #116]	; (f46c <RADIO_InitDefaultAttributes+0x1f0>)
    f3f6:	7818      	ldrb	r0, [r3, #0]
    f3f8:	47a8      	blx	r5
    f3fa:	0023      	movs	r3, r4
    f3fc:	332e      	adds	r3, #46	; 0x2e
    f3fe:	7818      	ldrb	r0, [r3, #0]
    f400:	47a8      	blx	r5
    f402:	0023      	movs	r3, r4
    f404:	332f      	adds	r3, #47	; 0x2f
    f406:	7818      	ldrb	r0, [r3, #0]
    f408:	47a8      	blx	r5
    f40a:	0023      	movs	r3, r4
    f40c:	3350      	adds	r3, #80	; 0x50
    f40e:	7818      	ldrb	r0, [r3, #0]
    f410:	47a8      	blx	r5
    f412:	e7ad      	b.n	f370 <RADIO_InitDefaultAttributes+0xf4>
    f414:	20003047 	.word	0x20003047
    f418:	20002d78 	.word	0x20002d78
    f41c:	33be27a0 	.word	0x33be27a0
    f420:	000061a8 	.word	0x000061a8
    f424:	0000c350 	.word	0x0000c350
    f428:	00003a98 	.word	0x00003a98
    f42c:	20002f44 	.word	0x20002f44
    f430:	20002da5 	.word	0x20002da5
    f434:	0000d089 	.word	0x0000d089
    f438:	20002da6 	.word	0x20002da6
    f43c:	20002da7 	.word	0x20002da7
    f440:	20002dc8 	.word	0x20002dc8
    f444:	0000c491 	.word	0x0000c491
    f448:	0000c615 	.word	0x0000c615
    f44c:	0000c611 	.word	0x0000c611
    f450:	0000f131 	.word	0x0000f131
    f454:	0000d6f9 	.word	0x0000d6f9
    f458:	0000e4b9 	.word	0x0000e4b9
    f45c:	0000c4d1 	.word	0x0000c4d1
    f460:	0000c4f9 	.word	0x0000c4f9
    f464:	0000f261 	.word	0x0000f261
    f468:	0000cfcd 	.word	0x0000cfcd
    f46c:	0000d3d5 	.word	0x0000d3d5

0000f470 <RADIO_Receive>:
    f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f472:	7803      	ldrb	r3, [r0, #0]
    f474:	0006      	movs	r6, r0
    f476:	4d24      	ldr	r5, [pc, #144]	; (f508 <RADIO_Receive+0x98>)
    f478:	2b00      	cmp	r3, #0
    f47a:	d11d      	bne.n	f4b8 <RADIO_Receive+0x48>
    f47c:	782b      	ldrb	r3, [r5, #0]
    f47e:	2004      	movs	r0, #4
    f480:	2b01      	cmp	r3, #1
    f482:	d118      	bne.n	f4b6 <RADIO_Receive+0x46>
    f484:	4c21      	ldr	r4, [pc, #132]	; (f50c <RADIO_Receive+0x9c>)
    f486:	4f22      	ldr	r7, [pc, #136]	; (f510 <RADIO_Receive+0xa0>)
    f488:	0023      	movs	r3, r4
    f48a:	332f      	adds	r3, #47	; 0x2f
    f48c:	7818      	ldrb	r0, [r3, #0]
    f48e:	47b8      	blx	r7
    f490:	0023      	movs	r3, r4
    f492:	3334      	adds	r3, #52	; 0x34
    f494:	781b      	ldrb	r3, [r3, #0]
    f496:	2b00      	cmp	r3, #0
    f498:	d102      	bne.n	f4a0 <RADIO_Receive+0x30>
    f49a:	342e      	adds	r4, #46	; 0x2e
    f49c:	7820      	ldrb	r0, [r4, #0]
    f49e:	47b8      	blx	r7
    f4a0:	8872      	ldrh	r2, [r6, #2]
    f4a2:	4b1c      	ldr	r3, [pc, #112]	; (f514 <RADIO_Receive+0xa4>)
    f4a4:	2008      	movs	r0, #8
    f4a6:	801a      	strh	r2, [r3, #0]
    f4a8:	2304      	movs	r3, #4
    f4aa:	702b      	strb	r3, [r5, #0]
    f4ac:	4b1a      	ldr	r3, [pc, #104]	; (f518 <RADIO_Receive+0xa8>)
    f4ae:	4798      	blx	r3
    f4b0:	4b1a      	ldr	r3, [pc, #104]	; (f51c <RADIO_Receive+0xac>)
    f4b2:	4798      	blx	r3
    f4b4:	2000      	movs	r0, #0
    f4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4b8:	782b      	ldrb	r3, [r5, #0]
    f4ba:	2000      	movs	r0, #0
    f4bc:	2b01      	cmp	r3, #1
    f4be:	d0fa      	beq.n	f4b6 <RADIO_Receive+0x46>
    f4c0:	782b      	ldrb	r3, [r5, #0]
    f4c2:	3003      	adds	r0, #3
    f4c4:	2b04      	cmp	r3, #4
    f4c6:	d1f6      	bne.n	f4b6 <RADIO_Receive+0x46>
    f4c8:	4c10      	ldr	r4, [pc, #64]	; (f50c <RADIO_Receive+0x9c>)
    f4ca:	4e11      	ldr	r6, [pc, #68]	; (f510 <RADIO_Receive+0xa0>)
    f4cc:	0023      	movs	r3, r4
    f4ce:	332f      	adds	r3, #47	; 0x2f
    f4d0:	7818      	ldrb	r0, [r3, #0]
    f4d2:	47b0      	blx	r6
    f4d4:	0023      	movs	r3, r4
    f4d6:	3334      	adds	r3, #52	; 0x34
    f4d8:	781b      	ldrb	r3, [r3, #0]
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d103      	bne.n	f4e6 <RADIO_Receive+0x76>
    f4de:	0023      	movs	r3, r4
    f4e0:	332e      	adds	r3, #46	; 0x2e
    f4e2:	7818      	ldrb	r0, [r3, #0]
    f4e4:	47b0      	blx	r6
    f4e6:	2200      	movs	r2, #0
    f4e8:	3434      	adds	r4, #52	; 0x34
    f4ea:	7821      	ldrb	r1, [r4, #0]
    f4ec:	0010      	movs	r0, r2
    f4ee:	4b0c      	ldr	r3, [pc, #48]	; (f520 <RADIO_Receive+0xb0>)
    f4f0:	4798      	blx	r3
    f4f2:	4b0c      	ldr	r3, [pc, #48]	; (f524 <RADIO_Receive+0xb4>)
    f4f4:	4798      	blx	r3
    f4f6:	2301      	movs	r3, #1
    f4f8:	2008      	movs	r0, #8
    f4fa:	4c0b      	ldr	r4, [pc, #44]	; (f528 <RADIO_Receive+0xb8>)
    f4fc:	702b      	strb	r3, [r5, #0]
    f4fe:	47a0      	blx	r4
    f500:	2002      	movs	r0, #2
    f502:	47a0      	blx	r4
    f504:	e7d6      	b.n	f4b4 <RADIO_Receive+0x44>
    f506:	46c0      	nop			; (mov r8, r8)
    f508:	20003047 	.word	0x20003047
    f50c:	20002d78 	.word	0x20002d78
    f510:	0000d3d5 	.word	0x0000d3d5
    f514:	20001ea0 	.word	0x20001ea0
    f518:	0000eac1 	.word	0x0000eac1
    f51c:	0000f131 	.word	0x0000f131
    f520:	0000d6f9 	.word	0x0000d6f9
    f524:	0000f261 	.word	0x0000f261
    f528:	0000eaed 	.word	0x0000eaed

0000f52c <RADIO_TxHandler>:
    f52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f52e:	2500      	movs	r5, #0
    f530:	b087      	sub	sp, #28
    f532:	ae03      	add	r6, sp, #12
    f534:	4f56      	ldr	r7, [pc, #344]	; (f690 <RADIO_TxHandler+0x164>)
    f536:	7035      	strb	r5, [r6, #0]
    f538:	47b8      	blx	r7
    f53a:	4c56      	ldr	r4, [pc, #344]	; (f694 <RADIO_TxHandler+0x168>)
    f53c:	0023      	movs	r3, r4
    f53e:	332d      	adds	r3, #45	; 0x2d
    f540:	7818      	ldrb	r0, [r3, #0]
    f542:	4b55      	ldr	r3, [pc, #340]	; (f698 <RADIO_TxHandler+0x16c>)
    f544:	4798      	blx	r3
    f546:	0023      	movs	r3, r4
    f548:	3341      	adds	r3, #65	; 0x41
    f54a:	781b      	ldrb	r3, [r3, #0]
    f54c:	42ab      	cmp	r3, r5
    f54e:	d021      	beq.n	f594 <RADIO_TxHandler+0x68>
    f550:	2214      	movs	r2, #20
    f552:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    f554:	4353      	muls	r3, r2
    f556:	0022      	movs	r2, r4
    f558:	3240      	adds	r2, #64	; 0x40
    f55a:	7013      	strb	r3, [r2, #0]
    f55c:	47b8      	blx	r7
    f55e:	0028      	movs	r0, r5
    f560:	4b4e      	ldr	r3, [pc, #312]	; (f69c <RADIO_TxHandler+0x170>)
    f562:	4798      	blx	r3
    f564:	6820      	ldr	r0, [r4, #0]
    f566:	4b4e      	ldr	r3, [pc, #312]	; (f6a0 <RADIO_TxHandler+0x174>)
    f568:	4798      	blx	r3
    f56a:	0023      	movs	r3, r4
    f56c:	2201      	movs	r2, #1
    f56e:	334c      	adds	r3, #76	; 0x4c
    f570:	0029      	movs	r1, r5
    f572:	0028      	movs	r0, r5
    f574:	4f4b      	ldr	r7, [pc, #300]	; (f6a4 <RADIO_TxHandler+0x178>)
    f576:	801d      	strh	r5, [r3, #0]
    f578:	47b8      	blx	r7
    f57a:	2109      	movs	r1, #9
    f57c:	2012      	movs	r0, #18
    f57e:	4b4a      	ldr	r3, [pc, #296]	; (f6a8 <RADIO_TxHandler+0x17c>)
    f580:	4798      	blx	r3
    f582:	2201      	movs	r2, #1
    f584:	0029      	movs	r1, r5
    f586:	2005      	movs	r0, #5
    f588:	47b8      	blx	r7
    f58a:	0023      	movs	r3, r4
    f58c:	3340      	adds	r3, #64	; 0x40
    f58e:	781b      	ldrb	r3, [r3, #0]
    f590:	42ab      	cmp	r3, r5
    f592:	d846      	bhi.n	f622 <RADIO_TxHandler+0xf6>
    f594:	7833      	ldrb	r3, [r6, #0]
    f596:	2b07      	cmp	r3, #7
    f598:	d076      	beq.n	f688 <RADIO_TxHandler+0x15c>
    f59a:	2001      	movs	r0, #1
    f59c:	4b3f      	ldr	r3, [pc, #252]	; (f69c <RADIO_TxHandler+0x170>)
    f59e:	4798      	blx	r3
    f5a0:	4b42      	ldr	r3, [pc, #264]	; (f6ac <RADIO_TxHandler+0x180>)
    f5a2:	2004      	movs	r0, #4
    f5a4:	4798      	blx	r3
    f5a6:	4b42      	ldr	r3, [pc, #264]	; (f6b0 <RADIO_TxHandler+0x184>)
    f5a8:	4d3f      	ldr	r5, [pc, #252]	; (f6a8 <RADIO_TxHandler+0x17c>)
    f5aa:	781f      	ldrb	r7, [r3, #0]
    f5ac:	4e41      	ldr	r6, [pc, #260]	; (f6b4 <RADIO_TxHandler+0x188>)
    f5ae:	2f01      	cmp	r7, #1
    f5b0:	d144      	bne.n	f63c <RADIO_TxHandler+0x110>
    f5b2:	7831      	ldrb	r1, [r6, #0]
    f5b4:	2022      	movs	r0, #34	; 0x22
    f5b6:	47a8      	blx	r5
    f5b8:	4b3f      	ldr	r3, [pc, #252]	; (f6b8 <RADIO_TxHandler+0x18c>)
    f5ba:	200a      	movs	r0, #10
    f5bc:	4798      	blx	r3
    f5be:	21f0      	movs	r1, #240	; 0xf0
    f5c0:	4008      	ands	r0, r1
    f5c2:	39e8      	subs	r1, #232	; 0xe8
    f5c4:	4301      	orrs	r1, r0
    f5c6:	200a      	movs	r0, #10
    f5c8:	47a8      	blx	r5
    f5ca:	2140      	movs	r1, #64	; 0x40
    f5cc:	0008      	movs	r0, r1
    f5ce:	47a8      	blx	r5
    f5d0:	2100      	movs	r1, #0
    f5d2:	2041      	movs	r0, #65	; 0x41
    f5d4:	47a8      	blx	r5
    f5d6:	4b36      	ldr	r3, [pc, #216]	; (f6b0 <RADIO_TxHandler+0x184>)
    f5d8:	003a      	movs	r2, r7
    f5da:	7819      	ldrb	r1, [r3, #0]
    f5dc:	0038      	movs	r0, r7
    f5de:	4b31      	ldr	r3, [pc, #196]	; (f6a4 <RADIO_TxHandler+0x178>)
    f5e0:	4798      	blx	r3
    f5e2:	4b36      	ldr	r3, [pc, #216]	; (f6bc <RADIO_TxHandler+0x190>)
    f5e4:	7832      	ldrb	r2, [r6, #0]
    f5e6:	6819      	ldr	r1, [r3, #0]
    f5e8:	2000      	movs	r0, #0
    f5ea:	4b35      	ldr	r3, [pc, #212]	; (f6c0 <RADIO_TxHandler+0x194>)
    f5ec:	4798      	blx	r3
    f5ee:	0023      	movs	r3, r4
    f5f0:	3334      	adds	r3, #52	; 0x34
    f5f2:	7819      	ldrb	r1, [r3, #0]
    f5f4:	2200      	movs	r2, #0
    f5f6:	2003      	movs	r0, #3
    f5f8:	4b2a      	ldr	r3, [pc, #168]	; (f6a4 <RADIO_TxHandler+0x178>)
    f5fa:	4798      	blx	r3
    f5fc:	4b31      	ldr	r3, [pc, #196]	; (f6c4 <RADIO_TxHandler+0x198>)
    f5fe:	4798      	blx	r3
    f600:	4b31      	ldr	r3, [pc, #196]	; (f6c8 <RADIO_TxHandler+0x19c>)
    f602:	6018      	str	r0, [r3, #0]
    f604:	6059      	str	r1, [r3, #4]
    f606:	68e3      	ldr	r3, [r4, #12]
    f608:	2b00      	cmp	r3, #0
    f60a:	d03d      	beq.n	f688 <RADIO_TxHandler+0x15c>
    f60c:	21fa      	movs	r1, #250	; 0xfa
    f60e:	2200      	movs	r2, #0
    f610:	342f      	adds	r4, #47	; 0x2f
    f612:	0089      	lsls	r1, r1, #2
    f614:	4359      	muls	r1, r3
    f616:	7820      	ldrb	r0, [r4, #0]
    f618:	4b2c      	ldr	r3, [pc, #176]	; (f6cc <RADIO_TxHandler+0x1a0>)
    f61a:	9200      	str	r2, [sp, #0]
    f61c:	4c2c      	ldr	r4, [pc, #176]	; (f6d0 <RADIO_TxHandler+0x1a4>)
    f61e:	47a0      	blx	r4
    f620:	e032      	b.n	f688 <RADIO_TxHandler+0x15c>
    f622:	4f2c      	ldr	r7, [pc, #176]	; (f6d4 <RADIO_TxHandler+0x1a8>)
    f624:	4b2c      	ldr	r3, [pc, #176]	; (f6d8 <RADIO_TxHandler+0x1ac>)
    f626:	0038      	movs	r0, r7
    f628:	4798      	blx	r3
    f62a:	233e      	movs	r3, #62	; 0x3e
    f62c:	5ee2      	ldrsh	r2, [r4, r3]
    f62e:	2100      	movs	r1, #0
    f630:	5e7b      	ldrsh	r3, [r7, r1]
    f632:	429a      	cmp	r2, r3
    f634:	db14      	blt.n	f660 <RADIO_TxHandler+0x134>
    f636:	3501      	adds	r5, #1
    f638:	b2ed      	uxtb	r5, r5
    f63a:	e7a6      	b.n	f58a <RADIO_TxHandler+0x5e>
    f63c:	2100      	movs	r1, #0
    f63e:	2040      	movs	r0, #64	; 0x40
    f640:	47a8      	blx	r5
    f642:	2100      	movs	r1, #0
    f644:	2041      	movs	r0, #65	; 0x41
    f646:	47a8      	blx	r5
    f648:	0023      	movs	r3, r4
    f64a:	2000      	movs	r0, #0
    f64c:	3358      	adds	r3, #88	; 0x58
    f64e:	7831      	ldrb	r1, [r6, #0]
    f650:	7018      	strb	r0, [r3, #0]
    f652:	47a8      	blx	r5
    f654:	4b19      	ldr	r3, [pc, #100]	; (f6bc <RADIO_TxHandler+0x190>)
    f656:	7831      	ldrb	r1, [r6, #0]
    f658:	6818      	ldr	r0, [r3, #0]
    f65a:	4b20      	ldr	r3, [pc, #128]	; (f6dc <RADIO_TxHandler+0x1b0>)
    f65c:	4798      	blx	r3
    f65e:	e7c6      	b.n	f5ee <RADIO_TxHandler+0xc2>
    f660:	2000      	movs	r0, #0
    f662:	4b1f      	ldr	r3, [pc, #124]	; (f6e0 <RADIO_TxHandler+0x1b4>)
    f664:	4798      	blx	r3
    f666:	4b1f      	ldr	r3, [pc, #124]	; (f6e4 <RADIO_TxHandler+0x1b8>)
    f668:	4798      	blx	r3
    f66a:	2307      	movs	r3, #7
    f66c:	2201      	movs	r2, #1
    f66e:	7033      	strb	r3, [r6, #0]
    f670:	4b1d      	ldr	r3, [pc, #116]	; (f6e8 <RADIO_TxHandler+0x1bc>)
    f672:	701a      	strb	r2, [r3, #0]
    f674:	4b1d      	ldr	r3, [pc, #116]	; (f6ec <RADIO_TxHandler+0x1c0>)
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	079b      	lsls	r3, r3, #30
    f67a:	d58b      	bpl.n	f594 <RADIO_TxHandler+0x68>
    f67c:	6923      	ldr	r3, [r4, #16]
    f67e:	2b00      	cmp	r3, #0
    f680:	d088      	beq.n	f594 <RADIO_TxHandler+0x68>
    f682:	0031      	movs	r1, r6
    f684:	2002      	movs	r0, #2
    f686:	4798      	blx	r3
    f688:	2000      	movs	r0, #0
    f68a:	b007      	add	sp, #28
    f68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f68e:	46c0      	nop			; (mov r8, r8)
    f690:	0000f131 	.word	0x0000f131
    f694:	20002d78 	.word	0x20002d78
    f698:	0000d3d5 	.word	0x0000d3d5
    f69c:	0000ed75 	.word	0x0000ed75
    f6a0:	0000e4b9 	.word	0x0000e4b9
    f6a4:	0000d6f9 	.word	0x0000d6f9
    f6a8:	0000c4d1 	.word	0x0000c4d1
    f6ac:	0000e501 	.word	0x0000e501
    f6b0:	20002dac 	.word	0x20002dac
    f6b4:	20001eb4 	.word	0x20001eb4
    f6b8:	0000c4f9 	.word	0x0000c4f9
    f6bc:	20001eb0 	.word	0x20001eb0
    f6c0:	0000c525 	.word	0x0000c525
    f6c4:	0000d065 	.word	0x0000d065
    f6c8:	20001ea8 	.word	0x20001ea8
    f6cc:	0000eddd 	.word	0x0000eddd
    f6d0:	0000d0bd 	.word	0x0000d0bd
    f6d4:	20001e9e 	.word	0x20001e9e
    f6d8:	0000d915 	.word	0x0000d915
    f6dc:	0000ebf1 	.word	0x0000ebf1
    f6e0:	0000eda9 	.word	0x0000eda9
    f6e4:	0000f261 	.word	0x0000f261
    f6e8:	20003047 	.word	0x20003047
    f6ec:	20003046 	.word	0x20003046

0000f6f0 <RADIO_TxDoneHandler>:
    f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6f2:	4b35      	ldr	r3, [pc, #212]	; (f7c8 <RADIO_TxDoneHandler+0xd8>)
    f6f4:	b087      	sub	sp, #28
    f6f6:	881a      	ldrh	r2, [r3, #0]
    f6f8:	06d2      	lsls	r2, r2, #27
    f6fa:	0fd2      	lsrs	r2, r2, #31
    f6fc:	9200      	str	r2, [sp, #0]
    f6fe:	466a      	mov	r2, sp
    f700:	7810      	ldrb	r0, [r2, #0]
    f702:	881a      	ldrh	r2, [r3, #0]
    f704:	2801      	cmp	r0, #1
    f706:	d12b      	bne.n	f760 <RADIO_TxDoneHandler+0x70>
    f708:	4c30      	ldr	r4, [pc, #192]	; (f7cc <RADIO_TxDoneHandler+0xdc>)
    f70a:	2110      	movs	r1, #16
    f70c:	0027      	movs	r7, r4
    f70e:	2500      	movs	r5, #0
    f710:	438a      	bics	r2, r1
    f712:	801a      	strh	r2, [r3, #0]
    f714:	3734      	adds	r7, #52	; 0x34
    f716:	0002      	movs	r2, r0
    f718:	7839      	ldrb	r1, [r7, #0]
    f71a:	4b2d      	ldr	r3, [pc, #180]	; (f7d0 <RADIO_TxDoneHandler+0xe0>)
    f71c:	4798      	blx	r3
    f71e:	68e3      	ldr	r3, [r4, #12]
    f720:	ae03      	add	r6, sp, #12
    f722:	9304      	str	r3, [sp, #16]
    f724:	7035      	strb	r5, [r6, #0]
    f726:	002a      	movs	r2, r5
    f728:	4b29      	ldr	r3, [pc, #164]	; (f7d0 <RADIO_TxDoneHandler+0xe0>)
    f72a:	7839      	ldrb	r1, [r7, #0]
    f72c:	0028      	movs	r0, r5
    f72e:	4798      	blx	r3
    f730:	466a      	mov	r2, sp
    f732:	4b28      	ldr	r3, [pc, #160]	; (f7d4 <RADIO_TxDoneHandler+0xe4>)
    f734:	7812      	ldrb	r2, [r2, #0]
    f736:	701a      	strb	r2, [r3, #0]
    f738:	0023      	movs	r3, r4
    f73a:	3358      	adds	r3, #88	; 0x58
    f73c:	701d      	strb	r5, [r3, #0]
    f73e:	4b26      	ldr	r3, [pc, #152]	; (f7d8 <RADIO_TxDoneHandler+0xe8>)
    f740:	781b      	ldrb	r3, [r3, #0]
    f742:	075b      	lsls	r3, r3, #29
    f744:	d505      	bpl.n	f752 <RADIO_TxDoneHandler+0x62>
    f746:	6923      	ldr	r3, [r4, #16]
    f748:	42ab      	cmp	r3, r5
    f74a:	d002      	beq.n	f752 <RADIO_TxDoneHandler+0x62>
    f74c:	0031      	movs	r1, r6
    f74e:	2004      	movs	r0, #4
    f750:	4798      	blx	r3
    f752:	4b22      	ldr	r3, [pc, #136]	; (f7dc <RADIO_TxDoneHandler+0xec>)
    f754:	4798      	blx	r3
    f756:	4b22      	ldr	r3, [pc, #136]	; (f7e0 <RADIO_TxDoneHandler+0xf0>)
    f758:	4798      	blx	r3
    f75a:	2000      	movs	r0, #0
    f75c:	b007      	add	sp, #28
    f75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f760:	07d2      	lsls	r2, r2, #31
    f762:	d402      	bmi.n	f76a <RADIO_TxDoneHandler+0x7a>
    f764:	881a      	ldrh	r2, [r3, #0]
    f766:	0752      	lsls	r2, r2, #29
    f768:	d527      	bpl.n	f7ba <RADIO_TxDoneHandler+0xca>
    f76a:	2601      	movs	r6, #1
    f76c:	2104      	movs	r1, #4
    f76e:	881a      	ldrh	r2, [r3, #0]
    f770:	4f16      	ldr	r7, [pc, #88]	; (f7cc <RADIO_TxDoneHandler+0xdc>)
    f772:	43b2      	bics	r2, r6
    f774:	801a      	strh	r2, [r3, #0]
    f776:	881a      	ldrh	r2, [r3, #0]
    f778:	2400      	movs	r4, #0
    f77a:	438a      	bics	r2, r1
    f77c:	801a      	strh	r2, [r3, #0]
    f77e:	4b19      	ldr	r3, [pc, #100]	; (f7e4 <RADIO_TxDoneHandler+0xf4>)
    f780:	ad03      	add	r5, sp, #12
    f782:	681b      	ldr	r3, [r3, #0]
    f784:	702c      	strb	r4, [r5, #0]
    f786:	9304      	str	r3, [sp, #16]
    f788:	003b      	movs	r3, r7
    f78a:	3334      	adds	r3, #52	; 0x34
    f78c:	7819      	ldrb	r1, [r3, #0]
    f78e:	0022      	movs	r2, r4
    f790:	0020      	movs	r0, r4
    f792:	4b0f      	ldr	r3, [pc, #60]	; (f7d0 <RADIO_TxDoneHandler+0xe0>)
    f794:	4798      	blx	r3
    f796:	4b14      	ldr	r3, [pc, #80]	; (f7e8 <RADIO_TxDoneHandler+0xf8>)
    f798:	4798      	blx	r3
    f79a:	4b0e      	ldr	r3, [pc, #56]	; (f7d4 <RADIO_TxDoneHandler+0xe4>)
    f79c:	701e      	strb	r6, [r3, #0]
    f79e:	003b      	movs	r3, r7
    f7a0:	3358      	adds	r3, #88	; 0x58
    f7a2:	701c      	strb	r4, [r3, #0]
    f7a4:	4b0c      	ldr	r3, [pc, #48]	; (f7d8 <RADIO_TxDoneHandler+0xe8>)
    f7a6:	781b      	ldrb	r3, [r3, #0]
    f7a8:	079b      	lsls	r3, r3, #30
    f7aa:	d5d6      	bpl.n	f75a <RADIO_TxDoneHandler+0x6a>
    f7ac:	693b      	ldr	r3, [r7, #16]
    f7ae:	42a3      	cmp	r3, r4
    f7b0:	d0d3      	beq.n	f75a <RADIO_TxDoneHandler+0x6a>
    f7b2:	0029      	movs	r1, r5
    f7b4:	2002      	movs	r0, #2
    f7b6:	4798      	blx	r3
    f7b8:	e7cf      	b.n	f75a <RADIO_TxDoneHandler+0x6a>
    f7ba:	881b      	ldrh	r3, [r3, #0]
    f7bc:	059b      	lsls	r3, r3, #22
    f7be:	d5cc      	bpl.n	f75a <RADIO_TxDoneHandler+0x6a>
    f7c0:	4b0a      	ldr	r3, [pc, #40]	; (f7ec <RADIO_TxDoneHandler+0xfc>)
    f7c2:	4798      	blx	r3
    f7c4:	e7c9      	b.n	f75a <RADIO_TxDoneHandler+0x6a>
    f7c6:	46c0      	nop			; (mov r8, r8)
    f7c8:	20003044 	.word	0x20003044
    f7cc:	20002d78 	.word	0x20002d78
    f7d0:	0000d6f9 	.word	0x0000d6f9
    f7d4:	20003047 	.word	0x20003047
    f7d8:	20003046 	.word	0x20003046
    f7dc:	0000c491 	.word	0x0000c491
    f7e0:	0000f27d 	.word	0x0000f27d
    f7e4:	20001ea8 	.word	0x20001ea8
    f7e8:	0000f261 	.word	0x0000f261
    f7ec:	00013255 	.word	0x00013255

0000f7f0 <RADIO_RxDoneHandler>:
    f7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7f2:	4b97      	ldr	r3, [pc, #604]	; (fa50 <RADIO_RxDoneHandler+0x260>)
    f7f4:	b085      	sub	sp, #20
    f7f6:	881c      	ldrh	r4, [r3, #0]
    f7f8:	881a      	ldrh	r2, [r3, #0]
    f7fa:	06a4      	lsls	r4, r4, #26
    f7fc:	0fe4      	lsrs	r4, r4, #31
    f7fe:	b2e0      	uxtb	r0, r4
    f800:	2801      	cmp	r0, #1
    f802:	d126      	bne.n	f852 <RADIO_RxDoneHandler+0x62>
    f804:	4d93      	ldr	r5, [pc, #588]	; (fa54 <RADIO_RxDoneHandler+0x264>)
    f806:	2120      	movs	r1, #32
    f808:	002e      	movs	r6, r5
    f80a:	438a      	bics	r2, r1
    f80c:	801a      	strh	r2, [r3, #0]
    f80e:	3634      	adds	r6, #52	; 0x34
    f810:	0002      	movs	r2, r0
    f812:	7831      	ldrb	r1, [r6, #0]
    f814:	4f90      	ldr	r7, [pc, #576]	; (fa58 <RADIO_RxDoneHandler+0x268>)
    f816:	47b8      	blx	r7
    f818:	2200      	movs	r2, #0
    f81a:	7831      	ldrb	r1, [r6, #0]
    f81c:	0010      	movs	r0, r2
    f81e:	47b8      	blx	r7
    f820:	4b8e      	ldr	r3, [pc, #568]	; (fa5c <RADIO_RxDoneHandler+0x26c>)
    f822:	4798      	blx	r3
    f824:	4b8e      	ldr	r3, [pc, #568]	; (fa60 <RADIO_RxDoneHandler+0x270>)
    f826:	002a      	movs	r2, r5
    f828:	701c      	strb	r4, [r3, #0]
    f82a:	2300      	movs	r3, #0
    f82c:	322c      	adds	r2, #44	; 0x2c
    f82e:	7013      	strb	r3, [r2, #0]
    f830:	002a      	movs	r2, r5
    f832:	a901      	add	r1, sp, #4
    f834:	3258      	adds	r2, #88	; 0x58
    f836:	7013      	strb	r3, [r2, #0]
    f838:	700b      	strb	r3, [r1, #0]
    f83a:	4b8a      	ldr	r3, [pc, #552]	; (fa64 <RADIO_RxDoneHandler+0x274>)
    f83c:	781b      	ldrb	r3, [r3, #0]
    f83e:	071b      	lsls	r3, r3, #28
    f840:	d504      	bpl.n	f84c <RADIO_RxDoneHandler+0x5c>
    f842:	692b      	ldr	r3, [r5, #16]
    f844:	2008      	movs	r0, #8
    f846:	2b00      	cmp	r3, #0
    f848:	d000      	beq.n	f84c <RADIO_RxDoneHandler+0x5c>
    f84a:	e084      	b.n	f956 <RADIO_RxDoneHandler+0x166>
    f84c:	2000      	movs	r0, #0
    f84e:	b005      	add	sp, #20
    f850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f852:	0652      	lsls	r2, r2, #25
    f854:	d402      	bmi.n	f85c <RADIO_RxDoneHandler+0x6c>
    f856:	881a      	ldrh	r2, [r3, #0]
    f858:	0612      	lsls	r2, r2, #24
    f85a:	d523      	bpl.n	f8a4 <RADIO_RxDoneHandler+0xb4>
    f85c:	2140      	movs	r1, #64	; 0x40
    f85e:	881a      	ldrh	r2, [r3, #0]
    f860:	4c7c      	ldr	r4, [pc, #496]	; (fa54 <RADIO_RxDoneHandler+0x264>)
    f862:	438a      	bics	r2, r1
    f864:	801a      	strh	r2, [r3, #0]
    f866:	881a      	ldrh	r2, [r3, #0]
    f868:	1849      	adds	r1, r1, r1
    f86a:	438a      	bics	r2, r1
    f86c:	801a      	strh	r2, [r3, #0]
    f86e:	0023      	movs	r3, r4
    f870:	2200      	movs	r2, #0
    f872:	3334      	adds	r3, #52	; 0x34
    f874:	7819      	ldrb	r1, [r3, #0]
    f876:	0010      	movs	r0, r2
    f878:	4b77      	ldr	r3, [pc, #476]	; (fa58 <RADIO_RxDoneHandler+0x268>)
    f87a:	4798      	blx	r3
    f87c:	4b77      	ldr	r3, [pc, #476]	; (fa5c <RADIO_RxDoneHandler+0x26c>)
    f87e:	4798      	blx	r3
    f880:	2201      	movs	r2, #1
    f882:	4b77      	ldr	r3, [pc, #476]	; (fa60 <RADIO_RxDoneHandler+0x270>)
    f884:	a901      	add	r1, sp, #4
    f886:	701a      	strb	r2, [r3, #0]
    f888:	0022      	movs	r2, r4
    f88a:	2300      	movs	r3, #0
    f88c:	322c      	adds	r2, #44	; 0x2c
    f88e:	7013      	strb	r3, [r2, #0]
    f890:	0022      	movs	r2, r4
    f892:	3258      	adds	r2, #88	; 0x58
    f894:	7013      	strb	r3, [r2, #0]
    f896:	700b      	strb	r3, [r1, #0]
    f898:	4b72      	ldr	r3, [pc, #456]	; (fa64 <RADIO_RxDoneHandler+0x274>)
    f89a:	781b      	ldrb	r3, [r3, #0]
    f89c:	071b      	lsls	r3, r3, #28
    f89e:	d5d5      	bpl.n	f84c <RADIO_RxDoneHandler+0x5c>
    f8a0:	6923      	ldr	r3, [r4, #16]
    f8a2:	e7cf      	b.n	f844 <RADIO_RxDoneHandler+0x54>
    f8a4:	881a      	ldrh	r2, [r3, #0]
    f8a6:	0792      	lsls	r2, r2, #30
    f8a8:	d571      	bpl.n	f98e <RADIO_RxDoneHandler+0x19e>
    f8aa:	2102      	movs	r1, #2
    f8ac:	881a      	ldrh	r2, [r3, #0]
    f8ae:	4d6e      	ldr	r5, [pc, #440]	; (fa68 <RADIO_RxDoneHandler+0x278>)
    f8b0:	438a      	bics	r2, r1
    f8b2:	801a      	strh	r2, [r3, #0]
    f8b4:	2013      	movs	r0, #19
    f8b6:	47a8      	blx	r5
    f8b8:	4c66      	ldr	r4, [pc, #408]	; (fa54 <RADIO_RxDoneHandler+0x264>)
    f8ba:	2100      	movs	r1, #0
    f8bc:	0026      	movs	r6, r4
    f8be:	362c      	adds	r6, #44	; 0x2c
    f8c0:	7030      	strb	r0, [r6, #0]
    f8c2:	4b6a      	ldr	r3, [pc, #424]	; (fa6c <RADIO_RxDoneHandler+0x27c>)
    f8c4:	200d      	movs	r0, #13
    f8c6:	4798      	blx	r3
    f8c8:	7832      	ldrb	r2, [r6, #0]
    f8ca:	4b69      	ldr	r3, [pc, #420]	; (fa70 <RADIO_RxDoneHandler+0x280>)
    f8cc:	b2d2      	uxtb	r2, r2
    f8ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f8d0:	2000      	movs	r0, #0
    f8d2:	4798      	blx	r3
    f8d4:	2019      	movs	r0, #25
    f8d6:	47a8      	blx	r5
    f8d8:	0023      	movs	r3, r4
    f8da:	b240      	sxtb	r0, r0
    f8dc:	3332      	adds	r3, #50	; 0x32
    f8de:	2800      	cmp	r0, #0
    f8e0:	da3b      	bge.n	f95a <RADIO_RxDoneHandler+0x16a>
    f8e2:	4240      	negs	r0, r0
    f8e4:	1080      	asrs	r0, r0, #2
    f8e6:	4240      	negs	r0, r0
    f8e8:	7018      	strb	r0, [r3, #0]
    f8ea:	201a      	movs	r0, #26
    f8ec:	47a8      	blx	r5
    f8ee:	0023      	movs	r3, r4
    f8f0:	3332      	adds	r3, #50	; 0x32
    f8f2:	781b      	ldrb	r3, [r3, #0]
    f8f4:	b202      	sxth	r2, r0
    f8f6:	b25b      	sxtb	r3, r3
    f8f8:	4d5e      	ldr	r5, [pc, #376]	; (fa74 <RADIO_RxDoneHandler+0x284>)
    f8fa:	2b00      	cmp	r3, #0
    f8fc:	da36      	bge.n	f96c <RADIO_RxDoneHandler+0x17c>
    f8fe:	6821      	ldr	r1, [r4, #0]
    f900:	4e5d      	ldr	r6, [pc, #372]	; (fa78 <RADIO_RxDoneHandler+0x288>)
    f902:	198e      	adds	r6, r1, r6
    f904:	42ae      	cmp	r6, r5
    f906:	d82a      	bhi.n	f95e <RADIO_RxDoneHandler+0x16e>
    f908:	3b9d      	subs	r3, #157	; 0x9d
    f90a:	181b      	adds	r3, r3, r0
    f90c:	1112      	asrs	r2, r2, #4
    f90e:	189b      	adds	r3, r3, r2
    f910:	0022      	movs	r2, r4
    f912:	3256      	adds	r2, #86	; 0x56
    f914:	8013      	strh	r3, [r2, #0]
    f916:	0023      	movs	r3, r4
    f918:	2200      	movs	r2, #0
    f91a:	3334      	adds	r3, #52	; 0x34
    f91c:	7819      	ldrb	r1, [r3, #0]
    f91e:	0010      	movs	r0, r2
    f920:	4b4d      	ldr	r3, [pc, #308]	; (fa58 <RADIO_RxDoneHandler+0x268>)
    f922:	4798      	blx	r3
    f924:	4b4d      	ldr	r3, [pc, #308]	; (fa5c <RADIO_RxDoneHandler+0x26c>)
    f926:	4798      	blx	r3
    f928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f92a:	a901      	add	r1, sp, #4
    f92c:	604b      	str	r3, [r1, #4]
    f92e:	0023      	movs	r3, r4
    f930:	332c      	adds	r3, #44	; 0x2c
    f932:	781b      	ldrb	r3, [r3, #0]
    f934:	2201      	movs	r2, #1
    f936:	720b      	strb	r3, [r1, #8]
    f938:	2300      	movs	r3, #0
    f93a:	700b      	strb	r3, [r1, #0]
    f93c:	4b48      	ldr	r3, [pc, #288]	; (fa60 <RADIO_RxDoneHandler+0x270>)
    f93e:	701a      	strb	r2, [r3, #0]
    f940:	4b48      	ldr	r3, [pc, #288]	; (fa64 <RADIO_RxDoneHandler+0x274>)
    f942:	7818      	ldrb	r0, [r3, #0]
    f944:	07c0      	lsls	r0, r0, #31
    f946:	0fc0      	lsrs	r0, r0, #31
    f948:	4290      	cmp	r0, r2
    f94a:	d000      	beq.n	f94e <RADIO_RxDoneHandler+0x15e>
    f94c:	e77e      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    f94e:	6923      	ldr	r3, [r4, #16]
    f950:	2b00      	cmp	r3, #0
    f952:	d100      	bne.n	f956 <RADIO_RxDoneHandler+0x166>
    f954:	e77a      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    f956:	4798      	blx	r3
    f958:	e778      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    f95a:	1080      	asrs	r0, r0, #2
    f95c:	e7c4      	b.n	f8e8 <RADIO_RxDoneHandler+0xf8>
    f95e:	4d47      	ldr	r5, [pc, #284]	; (fa7c <RADIO_RxDoneHandler+0x28c>)
    f960:	1949      	adds	r1, r1, r5
    f962:	4d47      	ldr	r5, [pc, #284]	; (fa80 <RADIO_RxDoneHandler+0x290>)
    f964:	42a9      	cmp	r1, r5
    f966:	d8d6      	bhi.n	f916 <RADIO_RxDoneHandler+0x126>
    f968:	3ba4      	subs	r3, #164	; 0xa4
    f96a:	e7ce      	b.n	f90a <RADIO_RxDoneHandler+0x11a>
    f96c:	6823      	ldr	r3, [r4, #0]
    f96e:	4942      	ldr	r1, [pc, #264]	; (fa78 <RADIO_RxDoneHandler+0x288>)
    f970:	1859      	adds	r1, r3, r1
    f972:	42a9      	cmp	r1, r5
    f974:	d802      	bhi.n	f97c <RADIO_RxDoneHandler+0x18c>
    f976:	0003      	movs	r3, r0
    f978:	3b9d      	subs	r3, #157	; 0x9d
    f97a:	e7c7      	b.n	f90c <RADIO_RxDoneHandler+0x11c>
    f97c:	493f      	ldr	r1, [pc, #252]	; (fa7c <RADIO_RxDoneHandler+0x28c>)
    f97e:	185b      	adds	r3, r3, r1
    f980:	493f      	ldr	r1, [pc, #252]	; (fa80 <RADIO_RxDoneHandler+0x290>)
    f982:	428b      	cmp	r3, r1
    f984:	d8c7      	bhi.n	f916 <RADIO_RxDoneHandler+0x126>
    f986:	38a4      	subs	r0, #164	; 0xa4
    f988:	1113      	asrs	r3, r2, #4
    f98a:	18c3      	adds	r3, r0, r3
    f98c:	e7c0      	b.n	f910 <RADIO_RxDoneHandler+0x120>
    f98e:	881a      	ldrh	r2, [r3, #0]
    f990:	0712      	lsls	r2, r2, #28
    f992:	0fd5      	lsrs	r5, r2, #31
    f994:	2a00      	cmp	r2, #0
    f996:	da27      	bge.n	f9e8 <RADIO_RxDoneHandler+0x1f8>
    f998:	2108      	movs	r1, #8
    f99a:	881a      	ldrh	r2, [r3, #0]
    f99c:	4c2d      	ldr	r4, [pc, #180]	; (fa54 <RADIO_RxDoneHandler+0x264>)
    f99e:	438a      	bics	r2, r1
    f9a0:	801a      	strh	r2, [r3, #0]
    f9a2:	0023      	movs	r3, r4
    f9a4:	2280      	movs	r2, #128	; 0x80
    f9a6:	3332      	adds	r3, #50	; 0x32
    f9a8:	701a      	strb	r2, [r3, #0]
    f9aa:	0023      	movs	r3, r4
    f9ac:	2200      	movs	r2, #0
    f9ae:	3334      	adds	r3, #52	; 0x34
    f9b0:	7819      	ldrb	r1, [r3, #0]
    f9b2:	0010      	movs	r0, r2
    f9b4:	4b28      	ldr	r3, [pc, #160]	; (fa58 <RADIO_RxDoneHandler+0x268>)
    f9b6:	4798      	blx	r3
    f9b8:	4b28      	ldr	r3, [pc, #160]	; (fa5c <RADIO_RxDoneHandler+0x26c>)
    f9ba:	4798      	blx	r3
    f9bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f9be:	a901      	add	r1, sp, #4
    f9c0:	604b      	str	r3, [r1, #4]
    f9c2:	0023      	movs	r3, r4
    f9c4:	332c      	adds	r3, #44	; 0x2c
    f9c6:	781b      	ldrb	r3, [r3, #0]
    f9c8:	0022      	movs	r2, r4
    f9ca:	720b      	strb	r3, [r1, #8]
    f9cc:	2300      	movs	r3, #0
    f9ce:	3258      	adds	r2, #88	; 0x58
    f9d0:	7013      	strb	r3, [r2, #0]
    f9d2:	700b      	strb	r3, [r1, #0]
    f9d4:	4b22      	ldr	r3, [pc, #136]	; (fa60 <RADIO_RxDoneHandler+0x270>)
    f9d6:	701d      	strb	r5, [r3, #0]
    f9d8:	4b22      	ldr	r3, [pc, #136]	; (fa64 <RADIO_RxDoneHandler+0x274>)
    f9da:	7818      	ldrb	r0, [r3, #0]
    f9dc:	07c0      	lsls	r0, r0, #31
    f9de:	0fc0      	lsrs	r0, r0, #31
    f9e0:	2801      	cmp	r0, #1
    f9e2:	d000      	beq.n	f9e6 <RADIO_RxDoneHandler+0x1f6>
    f9e4:	e732      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    f9e6:	e7b2      	b.n	f94e <RADIO_RxDoneHandler+0x15e>
    f9e8:	881a      	ldrh	r2, [r3, #0]
    f9ea:	05d2      	lsls	r2, r2, #23
    f9ec:	0fd5      	lsrs	r5, r2, #31
    f9ee:	2a00      	cmp	r2, #0
    f9f0:	db00      	blt.n	f9f4 <RADIO_RxDoneHandler+0x204>
    f9f2:	e72b      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    f9f4:	4c17      	ldr	r4, [pc, #92]	; (fa54 <RADIO_RxDoneHandler+0x264>)
    f9f6:	881a      	ldrh	r2, [r3, #0]
    f9f8:	0026      	movs	r6, r4
    f9fa:	4922      	ldr	r1, [pc, #136]	; (fa84 <RADIO_RxDoneHandler+0x294>)
    f9fc:	362c      	adds	r6, #44	; 0x2c
    f9fe:	400a      	ands	r2, r1
    fa00:	801a      	strh	r2, [r3, #0]
    fa02:	7832      	ldrb	r2, [r6, #0]
    fa04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fa06:	b2d2      	uxtb	r2, r2
    fa08:	2000      	movs	r0, #0
    fa0a:	4b19      	ldr	r3, [pc, #100]	; (fa70 <RADIO_RxDoneHandler+0x280>)
    fa0c:	4798      	blx	r3
    fa0e:	0023      	movs	r3, r4
    fa10:	2200      	movs	r2, #0
    fa12:	3334      	adds	r3, #52	; 0x34
    fa14:	7819      	ldrb	r1, [r3, #0]
    fa16:	0010      	movs	r0, r2
    fa18:	4b0f      	ldr	r3, [pc, #60]	; (fa58 <RADIO_RxDoneHandler+0x268>)
    fa1a:	4798      	blx	r3
    fa1c:	4b0f      	ldr	r3, [pc, #60]	; (fa5c <RADIO_RxDoneHandler+0x26c>)
    fa1e:	4798      	blx	r3
    fa20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fa22:	a901      	add	r1, sp, #4
    fa24:	604b      	str	r3, [r1, #4]
    fa26:	7833      	ldrb	r3, [r6, #0]
    fa28:	0022      	movs	r2, r4
    fa2a:	720b      	strb	r3, [r1, #8]
    fa2c:	2300      	movs	r3, #0
    fa2e:	3258      	adds	r2, #88	; 0x58
    fa30:	7013      	strb	r3, [r2, #0]
    fa32:	700b      	strb	r3, [r1, #0]
    fa34:	4b0a      	ldr	r3, [pc, #40]	; (fa60 <RADIO_RxDoneHandler+0x270>)
    fa36:	701d      	strb	r5, [r3, #0]
    fa38:	4b0a      	ldr	r3, [pc, #40]	; (fa64 <RADIO_RxDoneHandler+0x274>)
    fa3a:	781b      	ldrb	r3, [r3, #0]
    fa3c:	06db      	lsls	r3, r3, #27
    fa3e:	d400      	bmi.n	fa42 <RADIO_RxDoneHandler+0x252>
    fa40:	e704      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    fa42:	6923      	ldr	r3, [r4, #16]
    fa44:	2b00      	cmp	r3, #0
    fa46:	d100      	bne.n	fa4a <RADIO_RxDoneHandler+0x25a>
    fa48:	e700      	b.n	f84c <RADIO_RxDoneHandler+0x5c>
    fa4a:	2010      	movs	r0, #16
    fa4c:	e783      	b.n	f956 <RADIO_RxDoneHandler+0x166>
    fa4e:	46c0      	nop			; (mov r8, r8)
    fa50:	20003044 	.word	0x20003044
    fa54:	20002d78 	.word	0x20002d78
    fa58:	0000d6f9 	.word	0x0000d6f9
    fa5c:	0000f261 	.word	0x0000f261
    fa60:	20003047 	.word	0x20003047
    fa64:	20003046 	.word	0x20003046
    fa68:	0000c4f9 	.word	0x0000c4f9
    fa6c:	0000c4d1 	.word	0x0000c4d1
    fa70:	0000c565 	.word	0x0000c565
    fa74:	096ae380 	.word	0x096ae380
    fa78:	cc9eec80 	.word	0xcc9eec80
    fa7c:	e78fe580 	.word	0xe78fe580
    fa80:	06dac2c0 	.word	0x06dac2c0
    fa84:	fffffeff 	.word	0xfffffeff

0000fa88 <MacClearCommands>:
    fa88:	490e      	ldr	r1, [pc, #56]	; (fac4 <MacClearCommands+0x3c>)
    fa8a:	b570      	push	{r4, r5, r6, lr}
    fa8c:	000b      	movs	r3, r1
    fa8e:	33e0      	adds	r3, #224	; 0xe0
    fa90:	7818      	ldrb	r0, [r3, #0]
    fa92:	2303      	movs	r3, #3
    fa94:	25a4      	movs	r5, #164	; 0xa4
    fa96:	4343      	muls	r3, r0
    fa98:	2401      	movs	r4, #1
    fa9a:	20ff      	movs	r0, #255	; 0xff
    fa9c:	3399      	adds	r3, #153	; 0x99
    fa9e:	4a0a      	ldr	r2, [pc, #40]	; (fac8 <MacClearCommands+0x40>)
    faa0:	185b      	adds	r3, r3, r1
    faa2:	00ed      	lsls	r5, r5, #3
    faa4:	429a      	cmp	r2, r3
    faa6:	d100      	bne.n	faaa <MacClearCommands+0x22>
    faa8:	bd70      	pop	{r4, r5, r6, pc}
    faaa:	7811      	ldrb	r1, [r2, #0]
    faac:	29ff      	cmp	r1, #255	; 0xff
    faae:	d006      	beq.n	fabe <MacClearCommands+0x36>
    fab0:	290a      	cmp	r1, #10
    fab2:	d803      	bhi.n	fabc <MacClearCommands+0x34>
    fab4:	0026      	movs	r6, r4
    fab6:	408e      	lsls	r6, r1
    fab8:	422e      	tst	r6, r5
    faba:	d100      	bne.n	fabe <MacClearCommands+0x36>
    fabc:	7010      	strb	r0, [r2, #0]
    fabe:	3203      	adds	r2, #3
    fac0:	e7f0      	b.n	faa4 <MacClearCommands+0x1c>
    fac2:	46c0      	nop			; (mov r8, r8)
    fac4:	20003170 	.word	0x20003170
    fac8:	20003209 	.word	0x20003209

0000facc <CountfOptsLength>:
    facc:	2200      	movs	r2, #0
    face:	490d      	ldr	r1, [pc, #52]	; (fb04 <CountfOptsLength+0x38>)
    fad0:	b570      	push	{r4, r5, r6, lr}
    fad2:	000b      	movs	r3, r1
    fad4:	0010      	movs	r0, r2
    fad6:	2503      	movs	r5, #3
    fad8:	33e0      	adds	r3, #224	; 0xe0
    fada:	781c      	ldrb	r4, [r3, #0]
    fadc:	4e0a      	ldr	r6, [pc, #40]	; (fb08 <CountfOptsLength+0x3c>)
    fade:	b2d3      	uxtb	r3, r2
    fae0:	429c      	cmp	r4, r3
    fae2:	d800      	bhi.n	fae6 <CountfOptsLength+0x1a>
    fae4:	bd70      	pop	{r4, r5, r6, pc}
    fae6:	002b      	movs	r3, r5
    fae8:	4353      	muls	r3, r2
    faea:	3399      	adds	r3, #153	; 0x99
    faec:	5ccb      	ldrb	r3, [r1, r3]
    faee:	2bff      	cmp	r3, #255	; 0xff
    faf0:	d006      	beq.n	fb00 <CountfOptsLength+0x34>
    faf2:	18f3      	adds	r3, r6, r3
    faf4:	3b02      	subs	r3, #2
    faf6:	781b      	ldrb	r3, [r3, #0]
    faf8:	18c3      	adds	r3, r0, r3
    fafa:	2b0f      	cmp	r3, #15
    fafc:	dcf2      	bgt.n	fae4 <CountfOptsLength+0x18>
    fafe:	b2d8      	uxtb	r0, r3
    fb00:	3201      	adds	r2, #1
    fb02:	e7ec      	b.n	fade <CountfOptsLength+0x12>
    fb04:	20003170 	.word	0x20003170
    fb08:	00018c0f 	.word	0x00018c0f

0000fb0c <LorawanGetMaxPayloadSize>:
    fb0c:	b513      	push	{r0, r1, r4, lr}
    fb0e:	466b      	mov	r3, sp
    fb10:	1ddc      	adds	r4, r3, #7
    fb12:	2300      	movs	r3, #0
    fb14:	0022      	movs	r2, r4
    fb16:	7023      	strb	r3, [r4, #0]
    fb18:	4903      	ldr	r1, [pc, #12]	; (fb28 <LorawanGetMaxPayloadSize+0x1c>)
    fb1a:	4b04      	ldr	r3, [pc, #16]	; (fb2c <LorawanGetMaxPayloadSize+0x20>)
    fb1c:	2005      	movs	r0, #5
    fb1e:	4798      	blx	r3
    fb20:	7820      	ldrb	r0, [r4, #0]
    fb22:	3808      	subs	r0, #8
    fb24:	b2c0      	uxtb	r0, r0
    fb26:	bd16      	pop	{r1, r2, r4, pc}
    fb28:	20003257 	.word	0x20003257
    fb2c:	0000cb75 	.word	0x0000cb75

0000fb30 <UpdateReceiveDelays>:
    fb30:	23fa      	movs	r3, #250	; 0xfa
    fb32:	b570      	push	{r4, r5, r6, lr}
    fb34:	009b      	lsls	r3, r3, #2
    fb36:	4c0b      	ldr	r4, [pc, #44]	; (fb64 <UpdateReceiveDelays+0x34>)
    fb38:	2800      	cmp	r0, #0
    fb3a:	d000      	beq.n	fb3e <UpdateReceiveDelays+0xe>
    fb3c:	4343      	muls	r3, r0
    fb3e:	0022      	movs	r2, r4
    fb40:	4d09      	ldr	r5, [pc, #36]	; (fb68 <UpdateReceiveDelays+0x38>)
    fb42:	32d0      	adds	r2, #208	; 0xd0
    fb44:	210c      	movs	r1, #12
    fb46:	2000      	movs	r0, #0
    fb48:	8013      	strh	r3, [r2, #0]
    fb4a:	47a8      	blx	r5
    fb4c:	0023      	movs	r3, r4
    fb4e:	22fa      	movs	r2, #250	; 0xfa
    fb50:	33d0      	adds	r3, #208	; 0xd0
    fb52:	881b      	ldrh	r3, [r3, #0]
    fb54:	0092      	lsls	r2, r2, #2
    fb56:	189b      	adds	r3, r3, r2
    fb58:	34d2      	adds	r4, #210	; 0xd2
    fb5a:	210d      	movs	r1, #13
    fb5c:	2000      	movs	r0, #0
    fb5e:	8023      	strh	r3, [r4, #0]
    fb60:	47a8      	blx	r5
    fb62:	bd70      	pop	{r4, r5, r6, pc}
    fb64:	20003170 	.word	0x20003170
    fb68:	0000933d 	.word	0x0000933d

0000fb6c <IncludeMacCommandsResponse>:
    fb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb6e:	0005      	movs	r5, r0
    fb70:	2600      	movs	r6, #0
    fb72:	b087      	sub	sp, #28
    fb74:	880c      	ldrh	r4, [r1, #0]
    fb76:	9101      	str	r1, [sp, #4]
    fb78:	9203      	str	r2, [sp, #12]
    fb7a:	4f77      	ldr	r7, [pc, #476]	; (fd58 <IncludeMacCommandsResponse+0x1ec>)
    fb7c:	003b      	movs	r3, r7
    fb7e:	33e0      	adds	r3, #224	; 0xe0
    fb80:	781b      	ldrb	r3, [r3, #0]
    fb82:	42b3      	cmp	r3, r6
    fb84:	d913      	bls.n	fbae <IncludeMacCommandsResponse+0x42>
    fb86:	9b03      	ldr	r3, [sp, #12]
    fb88:	2b00      	cmp	r3, #0
    fb8a:	d019      	beq.n	fbc0 <IncludeMacCommandsResponse+0x54>
    fb8c:	2303      	movs	r3, #3
    fb8e:	4373      	muls	r3, r6
    fb90:	18fb      	adds	r3, r7, r3
    fb92:	3399      	adds	r3, #153	; 0x99
    fb94:	7819      	ldrb	r1, [r3, #0]
    fb96:	29ff      	cmp	r1, #255	; 0xff
    fb98:	d012      	beq.n	fbc0 <IncludeMacCommandsResponse+0x54>
    fb9a:	9b01      	ldr	r3, [sp, #4]
    fb9c:	881a      	ldrh	r2, [r3, #0]
    fb9e:	4b6f      	ldr	r3, [pc, #444]	; (fd5c <IncludeMacCommandsResponse+0x1f0>)
    fba0:	1aa2      	subs	r2, r4, r2
    fba2:	185b      	adds	r3, r3, r1
    fba4:	3b02      	subs	r3, #2
    fba6:	781b      	ldrb	r3, [r3, #0]
    fba8:	18d3      	adds	r3, r2, r3
    fbaa:	2b0f      	cmp	r3, #15
    fbac:	dd08      	ble.n	fbc0 <IncludeMacCommandsResponse+0x54>
    fbae:	2207      	movs	r2, #7
    fbb0:	2100      	movs	r1, #0
    fbb2:	4b6b      	ldr	r3, [pc, #428]	; (fd60 <IncludeMacCommandsResponse+0x1f4>)
    fbb4:	486b      	ldr	r0, [pc, #428]	; (fd64 <IncludeMacCommandsResponse+0x1f8>)
    fbb6:	4798      	blx	r3
    fbb8:	9b01      	ldr	r3, [sp, #4]
    fbba:	801c      	strh	r4, [r3, #0]
    fbbc:	b007      	add	sp, #28
    fbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbc0:	2303      	movs	r3, #3
    fbc2:	4373      	muls	r3, r6
    fbc4:	18fb      	adds	r3, r7, r3
    fbc6:	3399      	adds	r3, #153	; 0x99
    fbc8:	781b      	ldrb	r3, [r3, #0]
    fbca:	1e98      	subs	r0, r3, #2
    fbcc:	280b      	cmp	r0, #11
    fbce:	d862      	bhi.n	fc96 <IncludeMacCommandsResponse+0x12a>
    fbd0:	f003 fc42 	bl	13458 <__gnu_thumb1_case_uqi>
    fbd4:	27a20698 	.word	0x27a20698
    fbd8:	7da26748 	.word	0x7da26748
    fbdc:	a6616182 	.word	0xa6616182
    fbe0:	2303      	movs	r3, #3
    fbe2:	2200      	movs	r2, #0
    fbe4:	552b      	strb	r3, [r5, r4]
    fbe6:	1c63      	adds	r3, r4, #1
    fbe8:	b29b      	uxth	r3, r3
    fbea:	18eb      	adds	r3, r5, r3
    fbec:	4f5a      	ldr	r7, [pc, #360]	; (fd58 <IncludeMacCommandsResponse+0x1ec>)
    fbee:	485e      	ldr	r0, [pc, #376]	; (fd68 <IncludeMacCommandsResponse+0x1fc>)
    fbf0:	701a      	strb	r2, [r3, #0]
    fbf2:	5c39      	ldrb	r1, [r7, r0]
    fbf4:	3201      	adds	r2, #1
    fbf6:	4011      	ands	r1, r2
    fbf8:	466a      	mov	r2, sp
    fbfa:	9102      	str	r1, [sp, #8]
    fbfc:	7a12      	ldrb	r2, [r2, #8]
    fbfe:	701a      	strb	r2, [r3, #0]
    fc00:	5c3a      	ldrb	r2, [r7, r0]
    fc02:	4694      	mov	ip, r2
    fc04:	2202      	movs	r2, #2
    fc06:	4661      	mov	r1, ip
    fc08:	4211      	tst	r1, r2
    fc0a:	d002      	beq.n	fc12 <IncludeMacCommandsResponse+0xa6>
    fc0c:	9902      	ldr	r1, [sp, #8]
    fc0e:	430a      	orrs	r2, r1
    fc10:	701a      	strb	r2, [r3, #0]
    fc12:	2204      	movs	r2, #4
    fc14:	5c39      	ldrb	r1, [r7, r0]
    fc16:	4211      	tst	r1, r2
    fc18:	d071      	beq.n	fcfe <IncludeMacCommandsResponse+0x192>
    fc1a:	7819      	ldrb	r1, [r3, #0]
    fc1c:	430a      	orrs	r2, r1
    fc1e:	701a      	strb	r2, [r3, #0]
    fc20:	e06d      	b.n	fcfe <IncludeMacCommandsResponse+0x192>
    fc22:	2305      	movs	r3, #5
    fc24:	2103      	movs	r1, #3
    fc26:	2200      	movs	r2, #0
    fc28:	552b      	strb	r3, [r5, r4]
    fc2a:	1c63      	adds	r3, r4, #1
    fc2c:	b29b      	uxth	r3, r3
    fc2e:	4371      	muls	r1, r6
    fc30:	18eb      	adds	r3, r5, r3
    fc32:	701a      	strb	r2, [r3, #0]
    fc34:	4a48      	ldr	r2, [pc, #288]	; (fd58 <IncludeMacCommandsResponse+0x1ec>)
    fc36:	1851      	adds	r1, r2, r1
    fc38:	3198      	adds	r1, #152	; 0x98
    fc3a:	7888      	ldrb	r0, [r1, #2]
    fc3c:	0700      	lsls	r0, r0, #28
    fc3e:	0fc0      	lsrs	r0, r0, #31
    fc40:	7018      	strb	r0, [r3, #0]
    fc42:	7889      	ldrb	r1, [r1, #2]
    fc44:	b2c7      	uxtb	r7, r0
    fc46:	06c9      	lsls	r1, r1, #27
    fc48:	d502      	bpl.n	fc50 <IncludeMacCommandsResponse+0xe4>
    fc4a:	2102      	movs	r1, #2
    fc4c:	4339      	orrs	r1, r7
    fc4e:	7019      	strb	r1, [r3, #0]
    fc50:	2103      	movs	r1, #3
    fc52:	4371      	muls	r1, r6
    fc54:	1852      	adds	r2, r2, r1
    fc56:	3298      	adds	r2, #152	; 0x98
    fc58:	7892      	ldrb	r2, [r2, #2]
    fc5a:	0692      	lsls	r2, r2, #26
    fc5c:	d54f      	bpl.n	fcfe <IncludeMacCommandsResponse+0x192>
    fc5e:	7819      	ldrb	r1, [r3, #0]
    fc60:	2204      	movs	r2, #4
    fc62:	e7db      	b.n	fc1c <IncludeMacCommandsResponse+0xb0>
    fc64:	a904      	add	r1, sp, #16
    fc66:	4b41      	ldr	r3, [pc, #260]	; (fd6c <IncludeMacCommandsResponse+0x200>)
    fc68:	200e      	movs	r0, #14
    fc6a:	4798      	blx	r3
    fc6c:	2306      	movs	r3, #6
    fc6e:	4a3a      	ldr	r2, [pc, #232]	; (fd58 <IncludeMacCommandsResponse+0x1ec>)
    fc70:	552b      	strb	r3, [r5, r4]
    fc72:	32e8      	adds	r2, #232	; 0xe8
    fc74:	7811      	ldrb	r1, [r2, #0]
    fc76:	1c62      	adds	r2, r4, #1
    fc78:	b292      	uxth	r2, r2
    fc7a:	54a9      	strb	r1, [r5, r2]
    fc7c:	aa04      	add	r2, sp, #16
    fc7e:	7812      	ldrb	r2, [r2, #0]
    fc80:	1ca3      	adds	r3, r4, #2
    fc82:	0011      	movs	r1, r2
    fc84:	3120      	adds	r1, #32
    fc86:	3403      	adds	r4, #3
    fc88:	b2c9      	uxtb	r1, r1
    fc8a:	b29b      	uxth	r3, r3
    fc8c:	b2a4      	uxth	r4, r4
    fc8e:	293f      	cmp	r1, #63	; 0x3f
    fc90:	d904      	bls.n	fc9c <IncludeMacCommandsResponse+0x130>
    fc92:	2220      	movs	r2, #32
    fc94:	54ea      	strb	r2, [r5, r3]
    fc96:	3601      	adds	r6, #1
    fc98:	b2f6      	uxtb	r6, r6
    fc9a:	e76e      	b.n	fb7a <IncludeMacCommandsResponse+0xe>
    fc9c:	213f      	movs	r1, #63	; 0x3f
    fc9e:	400a      	ands	r2, r1
    fca0:	e7f8      	b.n	fc94 <IncludeMacCommandsResponse+0x128>
    fca2:	2307      	movs	r3, #7
    fca4:	2103      	movs	r1, #3
    fca6:	2200      	movs	r2, #0
    fca8:	552b      	strb	r3, [r5, r4]
    fcaa:	1c63      	adds	r3, r4, #1
    fcac:	4371      	muls	r1, r6
    fcae:	b29b      	uxth	r3, r3
    fcb0:	18eb      	adds	r3, r5, r3
    fcb2:	701a      	strb	r2, [r3, #0]
    fcb4:	4a28      	ldr	r2, [pc, #160]	; (fd58 <IncludeMacCommandsResponse+0x1ec>)
    fcb6:	1852      	adds	r2, r2, r1
    fcb8:	3298      	adds	r2, #152	; 0x98
    fcba:	7891      	ldrb	r1, [r2, #2]
    fcbc:	09c9      	lsrs	r1, r1, #7
    fcbe:	7019      	strb	r1, [r3, #0]
    fcc0:	7892      	ldrb	r2, [r2, #2]
    fcc2:	b2c8      	uxtb	r0, r1
    fcc4:	0652      	lsls	r2, r2, #25
    fcc6:	d51a      	bpl.n	fcfe <IncludeMacCommandsResponse+0x192>
    fcc8:	2202      	movs	r2, #2
    fcca:	4302      	orrs	r2, r0
    fccc:	e7a7      	b.n	fc1e <IncludeMacCommandsResponse+0xb2>
    fcce:	2209      	movs	r2, #9
    fcd0:	1c63      	adds	r3, r4, #1
    fcd2:	552a      	strb	r2, [r5, r4]
    fcd4:	b29c      	uxth	r4, r3
    fcd6:	e7de      	b.n	fc96 <IncludeMacCommandsResponse+0x12a>
    fcd8:	230a      	movs	r3, #10
    fcda:	2103      	movs	r1, #3
    fcdc:	2200      	movs	r2, #0
    fcde:	552b      	strb	r3, [r5, r4]
    fce0:	1c63      	adds	r3, r4, #1
    fce2:	4371      	muls	r1, r6
    fce4:	b29b      	uxth	r3, r3
    fce6:	18eb      	adds	r3, r5, r3
    fce8:	701a      	strb	r2, [r3, #0]
    fcea:	4a1b      	ldr	r2, [pc, #108]	; (fd58 <IncludeMacCommandsResponse+0x1ec>)
    fcec:	1852      	adds	r2, r2, r1
    fcee:	3298      	adds	r2, #152	; 0x98
    fcf0:	7891      	ldrb	r1, [r2, #2]
    fcf2:	09c9      	lsrs	r1, r1, #7
    fcf4:	7019      	strb	r1, [r3, #0]
    fcf6:	78d2      	ldrb	r2, [r2, #3]
    fcf8:	b2c8      	uxtb	r0, r1
    fcfa:	07d2      	lsls	r2, r2, #31
    fcfc:	d4e4      	bmi.n	fcc8 <IncludeMacCommandsResponse+0x15c>
    fcfe:	3402      	adds	r4, #2
    fd00:	b2a4      	uxth	r4, r4
    fd02:	e7c8      	b.n	fc96 <IncludeMacCommandsResponse+0x12a>
    fd04:	003b      	movs	r3, r7
    fd06:	22ff      	movs	r2, #255	; 0xff
    fd08:	33e5      	adds	r3, #229	; 0xe5
    fd0a:	701a      	strb	r2, [r3, #0]
    fd0c:	2300      	movs	r3, #0
    fd0e:	37e6      	adds	r7, #230	; 0xe6
    fd10:	703b      	strb	r3, [r7, #0]
    fd12:	3afd      	subs	r2, #253	; 0xfd
    fd14:	1c63      	adds	r3, r4, #1
    fd16:	e7dc      	b.n	fcd2 <IncludeMacCommandsResponse+0x166>
    fd18:	1c62      	adds	r2, r4, #1
    fd1a:	552b      	strb	r3, [r5, r4]
    fd1c:	b294      	uxth	r4, r2
    fd1e:	e7ba      	b.n	fc96 <IncludeMacCommandsResponse+0x12a>
    fd20:	2201      	movs	r2, #1
    fd22:	4252      	negs	r2, r2
    fd24:	17d3      	asrs	r3, r2, #31
    fd26:	9204      	str	r2, [sp, #16]
    fd28:	9305      	str	r3, [sp, #20]
    fd2a:	4b11      	ldr	r3, [pc, #68]	; (fd70 <IncludeMacCommandsResponse+0x204>)
    fd2c:	a904      	add	r1, sp, #16
    fd2e:	5cf8      	ldrb	r0, [r7, r3]
    fd30:	4b10      	ldr	r3, [pc, #64]	; (fd74 <IncludeMacCommandsResponse+0x208>)
    fd32:	4798      	blx	r3
    fd34:	2301      	movs	r3, #1
    fd36:	228d      	movs	r2, #141	; 0x8d
    fd38:	425b      	negs	r3, r3
    fd3a:	0092      	lsls	r2, r2, #2
    fd3c:	50bb      	str	r3, [r7, r2]
    fd3e:	3204      	adds	r2, #4
    fd40:	54bb      	strb	r3, [r7, r2]
    fd42:	238c      	movs	r3, #140	; 0x8c
    fd44:	2201      	movs	r2, #1
    fd46:	009b      	lsls	r3, r3, #2
    fd48:	54fa      	strb	r2, [r7, r3]
    fd4a:	2303      	movs	r3, #3
    fd4c:	4373      	muls	r3, r6
    fd4e:	18ff      	adds	r7, r7, r3
    fd50:	3799      	adds	r7, #153	; 0x99
    fd52:	18a2      	adds	r2, r4, r2
    fd54:	783b      	ldrb	r3, [r7, #0]
    fd56:	e7e0      	b.n	fd1a <IncludeMacCommandsResponse+0x1ae>
    fd58:	20003170 	.word	0x20003170
    fd5c:	00018c0f 	.word	0x00018c0f
    fd60:	00016709 	.word	0x00016709
    fd64:	20003393 	.word	0x20003393
    fd68:	00000223 	.word	0x00000223
    fd6c:	0000e175 	.word	0x0000e175
    fd70:	00000231 	.word	0x00000231
    fd74:	0000d645 	.word	0x0000d645

0000fd78 <UpdateJoinSuccessState>:
    fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd7a:	4c32      	ldr	r4, [pc, #200]	; (fe44 <UpdateJoinSuccessState+0xcc>)
    fd7c:	2104      	movs	r1, #4
    fd7e:	0022      	movs	r2, r4
    fd80:	3294      	adds	r2, #148	; 0x94
    fd82:	7813      	ldrb	r3, [r2, #0]
    fd84:	2001      	movs	r0, #1
    fd86:	438b      	bics	r3, r1
    fd88:	7013      	strb	r3, [r2, #0]
    fd8a:	0022      	movs	r2, r4
    fd8c:	3284      	adds	r2, #132	; 0x84
    fd8e:	7813      	ldrb	r3, [r2, #0]
    fd90:	b087      	sub	sp, #28
    fd92:	4303      	orrs	r3, r0
    fd94:	3107      	adds	r1, #7
    fd96:	4f2c      	ldr	r7, [pc, #176]	; (fe48 <UpdateJoinSuccessState+0xd0>)
    fd98:	7013      	strb	r3, [r2, #0]
    fd9a:	2500      	movs	r5, #0
    fd9c:	47b8      	blx	r7
    fd9e:	0023      	movs	r3, r4
    fda0:	2115      	movs	r1, #21
    fda2:	3388      	adds	r3, #136	; 0x88
    fda4:	0028      	movs	r0, r5
    fda6:	601d      	str	r5, [r3, #0]
    fda8:	47b8      	blx	r7
    fdaa:	0023      	movs	r3, r4
    fdac:	2020      	movs	r0, #32
    fdae:	33ff      	adds	r3, #255	; 0xff
    fdb0:	7f5b      	ldrb	r3, [r3, #29]
    fdb2:	4e26      	ldr	r6, [pc, #152]	; (fe4c <UpdateJoinSuccessState+0xd4>)
    fdb4:	4203      	tst	r3, r0
    fdb6:	d00c      	beq.n	fdd2 <UpdateJoinSuccessState+0x5a>
    fdb8:	0023      	movs	r3, r4
    fdba:	a904      	add	r1, sp, #16
    fdbc:	3380      	adds	r3, #128	; 0x80
    fdbe:	710d      	strb	r5, [r1, #4]
    fdc0:	701d      	strb	r5, [r3, #0]
    fdc2:	6765      	str	r5, [r4, #116]	; 0x74
    fdc4:	67a5      	str	r5, [r4, #120]	; 0x78
    fdc6:	47b0      	blx	r6
    fdc8:	210f      	movs	r1, #15
    fdca:	2021      	movs	r0, #33	; 0x21
    fdcc:	4469      	add	r1, sp
    fdce:	700d      	strb	r5, [r1, #0]
    fdd0:	47b0      	blx	r6
    fdd2:	0023      	movs	r3, r4
    fdd4:	2500      	movs	r5, #0
    fdd6:	338c      	adds	r3, #140	; 0x8c
    fdd8:	210a      	movs	r1, #10
    fdda:	2001      	movs	r0, #1
    fddc:	601d      	str	r5, [r3, #0]
    fdde:	47b8      	blx	r7
    fde0:	0023      	movs	r3, r4
    fde2:	33ca      	adds	r3, #202	; 0xca
    fde4:	801d      	strh	r5, [r3, #0]
    fde6:	0022      	movs	r2, r4
    fde8:	0023      	movs	r3, r4
    fdea:	210e      	movs	r1, #14
    fdec:	3284      	adds	r2, #132	; 0x84
    fdee:	33f6      	adds	r3, #246	; 0xf6
    fdf0:	701d      	strb	r5, [r3, #0]
    fdf2:	7813      	ldrb	r3, [r2, #0]
    fdf4:	2039      	movs	r0, #57	; 0x39
    fdf6:	438b      	bics	r3, r1
    fdf8:	0029      	movs	r1, r5
    fdfa:	7013      	strb	r3, [r2, #0]
    fdfc:	47b0      	blx	r6
    fdfe:	0023      	movs	r3, r4
    fe00:	3385      	adds	r3, #133	; 0x85
    fe02:	781b      	ldrb	r3, [r3, #0]
    fe04:	079b      	lsls	r3, r3, #30
    fe06:	d50c      	bpl.n	fe22 <UpdateJoinSuccessState+0xaa>
    fe08:	0023      	movs	r3, r4
    fe0a:	21fa      	movs	r1, #250	; 0xfa
    fe0c:	3390      	adds	r3, #144	; 0x90
    fe0e:	681b      	ldr	r3, [r3, #0]
    fe10:	34f0      	adds	r4, #240	; 0xf0
    fe12:	0089      	lsls	r1, r1, #2
    fe14:	7820      	ldrb	r0, [r4, #0]
    fe16:	4359      	muls	r1, r3
    fe18:	9500      	str	r5, [sp, #0]
    fe1a:	4b0d      	ldr	r3, [pc, #52]	; (fe50 <UpdateJoinSuccessState+0xd8>)
    fe1c:	002a      	movs	r2, r5
    fe1e:	4c0d      	ldr	r4, [pc, #52]	; (fe54 <UpdateJoinSuccessState+0xdc>)
    fe20:	47a0      	blx	r4
    fe22:	490d      	ldr	r1, [pc, #52]	; (fe58 <UpdateJoinSuccessState+0xe0>)
    fe24:	794a      	ldrb	r2, [r1, #5]
    fe26:	790b      	ldrb	r3, [r1, #4]
    fe28:	0212      	lsls	r2, r2, #8
    fe2a:	431a      	orrs	r2, r3
    fe2c:	798b      	ldrb	r3, [r1, #6]
    fe2e:	041b      	lsls	r3, r3, #16
    fe30:	431a      	orrs	r2, r3
    fe32:	79cb      	ldrb	r3, [r1, #7]
    fe34:	061b      	lsls	r3, r3, #24
    fe36:	4313      	orrs	r3, r2
    fe38:	d001      	beq.n	fe3e <UpdateJoinSuccessState+0xc6>
    fe3a:	2008      	movs	r0, #8
    fe3c:	4798      	blx	r3
    fe3e:	b007      	add	sp, #28
    fe40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe42:	46c0      	nop			; (mov r8, r8)
    fe44:	20003170 	.word	0x20003170
    fe48:	0000933d 	.word	0x0000933d
    fe4c:	0000cbad 	.word	0x0000cbad
    fe50:	0000ff99 	.word	0x0000ff99
    fe54:	0000d0bd 	.word	0x0000d0bd
    fe58:	200034cc 	.word	0x200034cc

0000fe5c <PrepareSessionKeys>:
    fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe5e:	0004      	movs	r4, r0
    fe60:	2603      	movs	r6, #3
    fe62:	000d      	movs	r5, r1
    fe64:	0017      	movs	r7, r2
    fe66:	4b09      	ldr	r3, [pc, #36]	; (fe8c <PrepareSessionKeys+0x30>)
    fe68:	2210      	movs	r2, #16
    fe6a:	2100      	movs	r1, #0
    fe6c:	4798      	blx	r3
    fe6e:	0032      	movs	r2, r6
    fe70:	0029      	movs	r1, r5
    fe72:	1c60      	adds	r0, r4, #1
    fe74:	4d06      	ldr	r5, [pc, #24]	; (fe90 <PrepareSessionKeys+0x34>)
    fe76:	47a8      	blx	r5
    fe78:	0032      	movs	r2, r6
    fe7a:	0039      	movs	r1, r7
    fe7c:	1d20      	adds	r0, r4, #4
    fe7e:	47a8      	blx	r5
    fe80:	1de0      	adds	r0, r4, #7
    fe82:	2202      	movs	r2, #2
    fe84:	4903      	ldr	r1, [pc, #12]	; (fe94 <PrepareSessionKeys+0x38>)
    fe86:	47a8      	blx	r5
    fe88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe8a:	46c0      	nop			; (mov r8, r8)
    fe8c:	00016709 	.word	0x00016709
    fe90:	000166f7 	.word	0x000166f7
    fe94:	2000323c 	.word	0x2000323c

0000fe98 <AssembleEncryptionBlock>:
    fe98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe9a:	001e      	movs	r6, r3
    fe9c:	4c0b      	ldr	r4, [pc, #44]	; (fecc <AssembleEncryptionBlock+0x34>)
    fe9e:	0017      	movs	r7, r2
    fea0:	4b0b      	ldr	r3, [pc, #44]	; (fed0 <AssembleEncryptionBlock+0x38>)
    fea2:	0005      	movs	r5, r0
    fea4:	9101      	str	r1, [sp, #4]
    fea6:	2210      	movs	r2, #16
    fea8:	2100      	movs	r1, #0
    feaa:	0020      	movs	r0, r4
    feac:	4798      	blx	r3
    feae:	7026      	strb	r6, [r4, #0]
    feb0:	2604      	movs	r6, #4
    feb2:	7165      	strb	r5, [r4, #5]
    feb4:	0032      	movs	r2, r6
    feb6:	4d07      	ldr	r5, [pc, #28]	; (fed4 <AssembleEncryptionBlock+0x3c>)
    feb8:	a908      	add	r1, sp, #32
    feba:	1da0      	adds	r0, r4, #6
    febc:	47a8      	blx	r5
    febe:	0020      	movs	r0, r4
    fec0:	0032      	movs	r2, r6
    fec2:	a901      	add	r1, sp, #4
    fec4:	300a      	adds	r0, #10
    fec6:	47a8      	blx	r5
    fec8:	73e7      	strb	r7, [r4, #15]
    feca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fecc:	20001eb5 	.word	0x20001eb5
    fed0:	00016709 	.word	0x00016709
    fed4:	000166f7 	.word	0x000166f7

0000fed8 <ConfigureRadio>:
    fed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    feda:	0001      	movs	r1, r0
    fedc:	0005      	movs	r5, r0
    fede:	4c11      	ldr	r4, [pc, #68]	; (ff24 <ConfigureRadio+0x4c>)
    fee0:	3109      	adds	r1, #9
    fee2:	2009      	movs	r0, #9
    fee4:	47a0      	blx	r4
    fee6:	0029      	movs	r1, r5
    fee8:	2001      	movs	r0, #1
    feea:	47a0      	blx	r4
    feec:	1d29      	adds	r1, r5, #4
    feee:	200a      	movs	r0, #10
    fef0:	47a0      	blx	r4
    fef2:	7a6b      	ldrb	r3, [r5, #9]
    fef4:	2b01      	cmp	r3, #1
    fef6:	d10b      	bne.n	ff10 <ConfigureRadio+0x38>
    fef8:	0029      	movs	r1, r5
    fefa:	2016      	movs	r0, #22
    fefc:	310b      	adds	r1, #11
    fefe:	47a0      	blx	r4
    ff00:	0029      	movs	r1, r5
    ff02:	2007      	movs	r0, #7
    ff04:	310a      	adds	r1, #10
    ff06:	47a0      	blx	r4
    ff08:	2000      	movs	r0, #0
    ff0a:	4907      	ldr	r1, [pc, #28]	; (ff28 <ConfigureRadio+0x50>)
    ff0c:	47a0      	blx	r4
    ff0e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ff10:	466b      	mov	r3, sp
    ff12:	1dd9      	adds	r1, r3, #7
    ff14:	2303      	movs	r3, #3
    ff16:	2013      	movs	r0, #19
    ff18:	700b      	strb	r3, [r1, #0]
    ff1a:	47a0      	blx	r4
    ff1c:	4903      	ldr	r1, [pc, #12]	; (ff2c <ConfigureRadio+0x54>)
    ff1e:	2012      	movs	r0, #18
    ff20:	e7f4      	b.n	ff0c <ConfigureRadio+0x34>
    ff22:	46c0      	nop			; (mov r8, r8)
    ff24:	0000e265 	.word	0x0000e265
    ff28:	20003270 	.word	0x20003270
    ff2c:	00018c00 	.word	0x00018c00

0000ff30 <StopReceiveWindow2Timer>:
    ff30:	b510      	push	{r4, lr}
    ff32:	4c0b      	ldr	r4, [pc, #44]	; (ff60 <StopReceiveWindow2Timer+0x30>)
    ff34:	0022      	movs	r2, r4
    ff36:	32fd      	adds	r2, #253	; 0xfd
    ff38:	7812      	ldrb	r2, [r2, #0]
    ff3a:	2a01      	cmp	r2, #1
    ff3c:	d10e      	bne.n	ff5c <StopReceiveWindow2Timer+0x2c>
    ff3e:	0021      	movs	r1, r4
    ff40:	200e      	movs	r0, #14
    ff42:	3184      	adds	r1, #132	; 0x84
    ff44:	780a      	ldrb	r2, [r1, #0]
    ff46:	34ee      	adds	r4, #238	; 0xee
    ff48:	4382      	bics	r2, r0
    ff4a:	700a      	strb	r2, [r1, #0]
    ff4c:	7820      	ldrb	r0, [r4, #0]
    ff4e:	4b05      	ldr	r3, [pc, #20]	; (ff64 <StopReceiveWindow2Timer+0x34>)
    ff50:	4798      	blx	r3
    ff52:	2800      	cmp	r0, #0
    ff54:	d002      	beq.n	ff5c <StopReceiveWindow2Timer+0x2c>
    ff56:	7820      	ldrb	r0, [r4, #0]
    ff58:	4b03      	ldr	r3, [pc, #12]	; (ff68 <StopReceiveWindow2Timer+0x38>)
    ff5a:	4798      	blx	r3
    ff5c:	bd10      	pop	{r4, pc}
    ff5e:	46c0      	nop			; (mov r8, r8)
    ff60:	20003170 	.word	0x20003170
    ff64:	0000d255 	.word	0x0000d255
    ff68:	0000d3d5 	.word	0x0000d3d5

0000ff6c <LorawanLinkCheckCallback.part.1>:
    ff6c:	4b07      	ldr	r3, [pc, #28]	; (ff8c <LorawanLinkCheckCallback.part.1+0x20>)
    ff6e:	b513      	push	{r0, r1, r4, lr}
    ff70:	001a      	movs	r2, r3
    ff72:	21fa      	movs	r1, #250	; 0xfa
    ff74:	3290      	adds	r2, #144	; 0x90
    ff76:	6812      	ldr	r2, [r2, #0]
    ff78:	0089      	lsls	r1, r1, #2
    ff7a:	4351      	muls	r1, r2
    ff7c:	2200      	movs	r2, #0
    ff7e:	33f0      	adds	r3, #240	; 0xf0
    ff80:	7818      	ldrb	r0, [r3, #0]
    ff82:	4c03      	ldr	r4, [pc, #12]	; (ff90 <LorawanLinkCheckCallback.part.1+0x24>)
    ff84:	9200      	str	r2, [sp, #0]
    ff86:	4b03      	ldr	r3, [pc, #12]	; (ff94 <LorawanLinkCheckCallback.part.1+0x28>)
    ff88:	47a0      	blx	r4
    ff8a:	bd13      	pop	{r0, r1, r4, pc}
    ff8c:	20003170 	.word	0x20003170
    ff90:	0000d0bd 	.word	0x0000d0bd
    ff94:	0000ff99 	.word	0x0000ff99

0000ff98 <LorawanLinkCheckCallback>:
    ff98:	4b17      	ldr	r3, [pc, #92]	; (fff8 <LorawanLinkCheckCallback+0x60>)
    ff9a:	20a0      	movs	r0, #160	; 0xa0
    ff9c:	001a      	movs	r2, r3
    ff9e:	2180      	movs	r1, #128	; 0x80
    ffa0:	b510      	push	{r4, lr}
    ffa2:	3284      	adds	r2, #132	; 0x84
    ffa4:	8812      	ldrh	r2, [r2, #0]
    ffa6:	0080      	lsls	r0, r0, #2
    ffa8:	0089      	lsls	r1, r1, #2
    ffaa:	4002      	ands	r2, r0
    ffac:	428a      	cmp	r2, r1
    ffae:	d11c      	bne.n	ffea <LorawanLinkCheckCallback+0x52>
    ffb0:	001a      	movs	r2, r3
    ffb2:	32e0      	adds	r2, #224	; 0xe0
    ffb4:	7810      	ldrb	r0, [r2, #0]
    ffb6:	2403      	movs	r4, #3
    ffb8:	2200      	movs	r2, #0
    ffba:	b2d1      	uxtb	r1, r2
    ffbc:	4281      	cmp	r1, r0
    ffbe:	d30d      	bcc.n	ffdc <LorawanLinkCheckCallback+0x44>
    ffc0:	d113      	bne.n	ffea <LorawanLinkCheckCallback+0x52>
    ffc2:	2203      	movs	r2, #3
    ffc4:	434a      	muls	r2, r1
    ffc6:	2102      	movs	r1, #2
    ffc8:	189a      	adds	r2, r3, r2
    ffca:	3299      	adds	r2, #153	; 0x99
    ffcc:	7011      	strb	r1, [r2, #0]
    ffce:	280f      	cmp	r0, #15
    ffd0:	d80b      	bhi.n	ffea <LorawanLinkCheckCallback+0x52>
    ffd2:	001a      	movs	r2, r3
    ffd4:	3001      	adds	r0, #1
    ffd6:	32e0      	adds	r2, #224	; 0xe0
    ffd8:	7010      	strb	r0, [r2, #0]
    ffda:	e006      	b.n	ffea <LorawanLinkCheckCallback+0x52>
    ffdc:	0021      	movs	r1, r4
    ffde:	3201      	adds	r2, #1
    ffe0:	4351      	muls	r1, r2
    ffe2:	3196      	adds	r1, #150	; 0x96
    ffe4:	5c59      	ldrb	r1, [r3, r1]
    ffe6:	2902      	cmp	r1, #2
    ffe8:	d1e7      	bne.n	ffba <LorawanLinkCheckCallback+0x22>
    ffea:	3385      	adds	r3, #133	; 0x85
    ffec:	781b      	ldrb	r3, [r3, #0]
    ffee:	079b      	lsls	r3, r3, #30
    fff0:	d501      	bpl.n	fff6 <LorawanLinkCheckCallback+0x5e>
    fff2:	4b02      	ldr	r3, [pc, #8]	; (fffc <LorawanLinkCheckCallback+0x64>)
    fff4:	4798      	blx	r3
    fff6:	bd10      	pop	{r4, pc}
    fff8:	20003170 	.word	0x20003170
    fffc:	0000ff6d 	.word	0x0000ff6d

00010000 <LORAWAN_Send>:
   10000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10002:	4c37      	ldr	r4, [pc, #220]	; (100e0 <LORAWAN_Send+0xe0>)
   10004:	0006      	movs	r6, r0
   10006:	0023      	movs	r3, r4
   10008:	3384      	adds	r3, #132	; 0x84
   1000a:	781b      	ldrb	r3, [r3, #0]
   1000c:	250f      	movs	r5, #15
   1000e:	b25a      	sxtb	r2, r3
   10010:	2a00      	cmp	r2, #0
   10012:	db0b      	blt.n	1002c <LORAWAN_Send+0x2c>
   10014:	3d03      	subs	r5, #3
   10016:	065a      	lsls	r2, r3, #25
   10018:	d408      	bmi.n	1002c <LORAWAN_Send+0x2c>
   1001a:	3d03      	subs	r5, #3
   1001c:	07db      	lsls	r3, r3, #31
   1001e:	d505      	bpl.n	1002c <LORAWAN_Send+0x2c>
   10020:	2388      	movs	r3, #136	; 0x88
   10022:	009b      	lsls	r3, r3, #2
   10024:	5ce7      	ldrb	r7, [r4, r3]
   10026:	2f00      	cmp	r7, #0
   10028:	d102      	bne.n	10030 <LORAWAN_Send+0x30>
   1002a:	2511      	movs	r5, #17
   1002c:	0028      	movs	r0, r5
   1002e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10030:	2800      	cmp	r0, #0
   10032:	d10f      	bne.n	10054 <LORAWAN_Send+0x54>
   10034:	2700      	movs	r7, #0
   10036:	0023      	movs	r3, r4
   10038:	3388      	adds	r3, #136	; 0x88
   1003a:	681b      	ldr	r3, [r3, #0]
   1003c:	3301      	adds	r3, #1
   1003e:	d123      	bne.n	10088 <LORAWAN_Send+0x88>
   10040:	2001      	movs	r0, #1
   10042:	3484      	adds	r4, #132	; 0x84
   10044:	78a3      	ldrb	r3, [r4, #2]
   10046:	210b      	movs	r1, #11
   10048:	4303      	orrs	r3, r0
   1004a:	70a3      	strb	r3, [r4, #2]
   1004c:	4b25      	ldr	r3, [pc, #148]	; (100e4 <LORAWAN_Send+0xe4>)
   1004e:	4798      	blx	r3
   10050:	250d      	movs	r5, #13
   10052:	e7eb      	b.n	1002c <LORAWAN_Send+0x2c>
   10054:	7843      	ldrb	r3, [r0, #1]
   10056:	7a02      	ldrb	r2, [r0, #8]
   10058:	3b01      	subs	r3, #1
   1005a:	b2db      	uxtb	r3, r3
   1005c:	9201      	str	r2, [sp, #4]
   1005e:	2bdf      	cmp	r3, #223	; 0xdf
   10060:	d902      	bls.n	10068 <LORAWAN_Send+0x68>
   10062:	250a      	movs	r5, #10
   10064:	2a00      	cmp	r2, #0
   10066:	d1e1      	bne.n	1002c <LORAWAN_Send+0x2c>
   10068:	4b1f      	ldr	r3, [pc, #124]	; (100e8 <LORAWAN_Send+0xe8>)
   1006a:	4798      	blx	r3
   1006c:	4684      	mov	ip, r0
   1006e:	9b01      	ldr	r3, [sp, #4]
   10070:	9000      	str	r0, [sp, #0]
   10072:	4463      	add	r3, ip
   10074:	001d      	movs	r5, r3
   10076:	4b1d      	ldr	r3, [pc, #116]	; (100ec <LORAWAN_Send+0xec>)
   10078:	4798      	blx	r3
   1007a:	4285      	cmp	r5, r0
   1007c:	ddda      	ble.n	10034 <LORAWAN_Send+0x34>
   1007e:	9b00      	ldr	r3, [sp, #0]
   10080:	250e      	movs	r5, #14
   10082:	2b00      	cmp	r3, #0
   10084:	d0d2      	beq.n	1002c <LORAWAN_Send+0x2c>
   10086:	e7d6      	b.n	10036 <LORAWAN_Send+0x36>
   10088:	0023      	movs	r3, r4
   1008a:	33fd      	adds	r3, #253	; 0xfd
   1008c:	781b      	ldrb	r3, [r3, #0]
   1008e:	2b04      	cmp	r3, #4
   10090:	d01d      	beq.n	100ce <LORAWAN_Send+0xce>
   10092:	0023      	movs	r3, r4
   10094:	33fd      	adds	r3, #253	; 0xfd
   10096:	781b      	ldrb	r3, [r3, #0]
   10098:	2b01      	cmp	r3, #1
   1009a:	d105      	bne.n	100a8 <LORAWAN_Send+0xa8>
   1009c:	0023      	movs	r3, r4
   1009e:	3384      	adds	r3, #132	; 0x84
   100a0:	781a      	ldrb	r2, [r3, #0]
   100a2:	230e      	movs	r3, #14
   100a4:	421a      	tst	r2, r3
   100a6:	d1c0      	bne.n	1002a <LORAWAN_Send+0x2a>
   100a8:	0023      	movs	r3, r4
   100aa:	33fc      	adds	r3, #252	; 0xfc
   100ac:	2f00      	cmp	r7, #0
   100ae:	d113      	bne.n	100d8 <LORAWAN_Send+0xd8>
   100b0:	2508      	movs	r5, #8
   100b2:	60de      	str	r6, [r3, #12]
   100b4:	2388      	movs	r3, #136	; 0x88
   100b6:	2200      	movs	r2, #0
   100b8:	009b      	lsls	r3, r3, #2
   100ba:	54e2      	strb	r2, [r4, r3]
   100bc:	2001      	movs	r0, #1
   100be:	4b0c      	ldr	r3, [pc, #48]	; (100f0 <LORAWAN_Send+0xf0>)
   100c0:	4798      	blx	r3
   100c2:	2320      	movs	r3, #32
   100c4:	3494      	adds	r4, #148	; 0x94
   100c6:	7822      	ldrb	r2, [r4, #0]
   100c8:	4313      	orrs	r3, r2
   100ca:	7023      	strb	r3, [r4, #0]
   100cc:	e7ae      	b.n	1002c <LORAWAN_Send+0x2c>
   100ce:	4b09      	ldr	r3, [pc, #36]	; (100f4 <LORAWAN_Send+0xf4>)
   100d0:	4798      	blx	r3
   100d2:	2808      	cmp	r0, #8
   100d4:	d1a9      	bne.n	1002a <LORAWAN_Send+0x2a>
   100d6:	e7dc      	b.n	10092 <LORAWAN_Send+0x92>
   100d8:	2200      	movs	r2, #0
   100da:	2511      	movs	r5, #17
   100dc:	60da      	str	r2, [r3, #12]
   100de:	e7e9      	b.n	100b4 <LORAWAN_Send+0xb4>
   100e0:	20003170 	.word	0x20003170
   100e4:	0000933d 	.word	0x0000933d
   100e8:	0000facd 	.word	0x0000facd
   100ec:	0000fb0d 	.word	0x0000fb0d
   100f0:	0000e0f1 	.word	0x0000e0f1
   100f4:	00012c3d 	.word	0x00012c3d

000100f8 <AutomaticReplyCallback>:
   100f8:	b510      	push	{r4, lr}
   100fa:	4c0d      	ldr	r4, [pc, #52]	; (10130 <AutomaticReplyCallback+0x38>)
   100fc:	0023      	movs	r3, r4
   100fe:	33fd      	adds	r3, #253	; 0xfd
   10100:	781b      	ldrb	r3, [r3, #0]
   10102:	2b01      	cmp	r3, #1
   10104:	d10e      	bne.n	10124 <AutomaticReplyCallback+0x2c>
   10106:	0022      	movs	r2, r4
   10108:	210e      	movs	r1, #14
   1010a:	3284      	adds	r2, #132	; 0x84
   1010c:	7813      	ldrb	r3, [r2, #0]
   1010e:	438b      	bics	r3, r1
   10110:	7013      	strb	r3, [r2, #0]
   10112:	4b08      	ldr	r3, [pc, #32]	; (10134 <AutomaticReplyCallback+0x3c>)
   10114:	2000      	movs	r0, #0
   10116:	4798      	blx	r3
   10118:	2208      	movs	r2, #8
   1011a:	3494      	adds	r4, #148	; 0x94
   1011c:	7823      	ldrb	r3, [r4, #0]
   1011e:	4393      	bics	r3, r2
   10120:	7023      	strb	r3, [r4, #0]
   10122:	bd10      	pop	{r4, pc}
   10124:	2b04      	cmp	r3, #4
   10126:	d1f4      	bne.n	10112 <AutomaticReplyCallback+0x1a>
   10128:	4b03      	ldr	r3, [pc, #12]	; (10138 <AutomaticReplyCallback+0x40>)
   1012a:	4798      	blx	r3
   1012c:	e7f1      	b.n	10112 <AutomaticReplyCallback+0x1a>
   1012e:	46c0      	nop			; (mov r8, r8)
   10130:	20003170 	.word	0x20003170
   10134:	00010001 	.word	0x00010001
   10138:	0000eb79 	.word	0x0000eb79

0001013c <LorawanLinkCheckConfigure>:
   1013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1013e:	23fa      	movs	r3, #250	; 0xfa
   10140:	4c21      	ldr	r4, [pc, #132]	; (101c8 <LorawanLinkCheckConfigure+0x8c>)
   10142:	009b      	lsls	r3, r3, #2
   10144:	0022      	movs	r2, r4
   10146:	0025      	movs	r5, r4
   10148:	4343      	muls	r3, r0
   1014a:	3290      	adds	r2, #144	; 0x90
   1014c:	0006      	movs	r6, r0
   1014e:	2102      	movs	r1, #2
   10150:	2000      	movs	r0, #0
   10152:	4f1e      	ldr	r7, [pc, #120]	; (101cc <LorawanLinkCheckConfigure+0x90>)
   10154:	6013      	str	r3, [r2, #0]
   10156:	3584      	adds	r5, #132	; 0x84
   10158:	47b8      	blx	r7
   1015a:	2e00      	cmp	r6, #0
   1015c:	d127      	bne.n	101ae <LorawanLinkCheckConfigure+0x72>
   1015e:	0023      	movs	r3, r4
   10160:	33f0      	adds	r3, #240	; 0xf0
   10162:	7818      	ldrb	r0, [r3, #0]
   10164:	4b1a      	ldr	r3, [pc, #104]	; (101d0 <LorawanLinkCheckConfigure+0x94>)
   10166:	4798      	blx	r3
   10168:	2202      	movs	r2, #2
   1016a:	786b      	ldrb	r3, [r5, #1]
   1016c:	210b      	movs	r1, #11
   1016e:	4393      	bics	r3, r2
   10170:	706b      	strb	r3, [r5, #1]
   10172:	2001      	movs	r0, #1
   10174:	47b8      	blx	r7
   10176:	0023      	movs	r3, r4
   10178:	2701      	movs	r7, #1
   1017a:	33e0      	adds	r3, #224	; 0xe0
   1017c:	781b      	ldrb	r3, [r3, #0]
   1017e:	0030      	movs	r0, r6
   10180:	0032      	movs	r2, r6
   10182:	36ff      	adds	r6, #255	; 0xff
   10184:	429a      	cmp	r2, r3
   10186:	d304      	bcc.n	10192 <LorawanLinkCheckConfigure+0x56>
   10188:	2800      	cmp	r0, #0
   1018a:	d001      	beq.n	10190 <LorawanLinkCheckConfigure+0x54>
   1018c:	34e0      	adds	r4, #224	; 0xe0
   1018e:	7023      	strb	r3, [r4, #0]
   10190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10192:	2103      	movs	r1, #3
   10194:	4351      	muls	r1, r2
   10196:	1861      	adds	r1, r4, r1
   10198:	3199      	adds	r1, #153	; 0x99
   1019a:	780d      	ldrb	r5, [r1, #0]
   1019c:	2d02      	cmp	r5, #2
   1019e:	d103      	bne.n	101a8 <LorawanLinkCheckConfigure+0x6c>
   101a0:	0038      	movs	r0, r7
   101a2:	3b01      	subs	r3, #1
   101a4:	700e      	strb	r6, [r1, #0]
   101a6:	b2db      	uxtb	r3, r3
   101a8:	3201      	adds	r2, #1
   101aa:	b2d2      	uxtb	r2, r2
   101ac:	e7ea      	b.n	10184 <LorawanLinkCheckConfigure+0x48>
   101ae:	2302      	movs	r3, #2
   101b0:	786a      	ldrb	r2, [r5, #1]
   101b2:	210b      	movs	r1, #11
   101b4:	4313      	orrs	r3, r2
   101b6:	706b      	strb	r3, [r5, #1]
   101b8:	2001      	movs	r0, #1
   101ba:	47b8      	blx	r7
   101bc:	782b      	ldrb	r3, [r5, #0]
   101be:	07db      	lsls	r3, r3, #31
   101c0:	d5e6      	bpl.n	10190 <LorawanLinkCheckConfigure+0x54>
   101c2:	4b04      	ldr	r3, [pc, #16]	; (101d4 <LorawanLinkCheckConfigure+0x98>)
   101c4:	4798      	blx	r3
   101c6:	e7e3      	b.n	10190 <LorawanLinkCheckConfigure+0x54>
   101c8:	20003170 	.word	0x20003170
   101cc:	0000933d 	.word	0x0000933d
   101d0:	0000d3d5 	.word	0x0000d3d5
   101d4:	0000ff6d 	.word	0x0000ff6d

000101d8 <EncodeDeviceTimeReq>:
   101d8:	4b08      	ldr	r3, [pc, #32]	; (101fc <EncodeDeviceTimeReq+0x24>)
   101da:	b510      	push	{r4, lr}
   101dc:	001c      	movs	r4, r3
   101de:	34e0      	adds	r4, #224	; 0xe0
   101e0:	7822      	ldrb	r2, [r4, #0]
   101e2:	2015      	movs	r0, #21
   101e4:	2a0f      	cmp	r2, #15
   101e6:	d808      	bhi.n	101fa <EncodeDeviceTimeReq+0x22>
   101e8:	2103      	movs	r1, #3
   101ea:	4351      	muls	r1, r2
   101ec:	185b      	adds	r3, r3, r1
   101ee:	210d      	movs	r1, #13
   101f0:	3399      	adds	r3, #153	; 0x99
   101f2:	3201      	adds	r2, #1
   101f4:	7019      	strb	r1, [r3, #0]
   101f6:	7022      	strb	r2, [r4, #0]
   101f8:	380d      	subs	r0, #13
   101fa:	bd10      	pop	{r4, pc}
   101fc:	20003170 	.word	0x20003170

00010200 <EncodeLinkCheckReq>:
   10200:	4b08      	ldr	r3, [pc, #32]	; (10224 <EncodeLinkCheckReq+0x24>)
   10202:	b510      	push	{r4, lr}
   10204:	001c      	movs	r4, r3
   10206:	34e0      	adds	r4, #224	; 0xe0
   10208:	7822      	ldrb	r2, [r4, #0]
   1020a:	2015      	movs	r0, #21
   1020c:	2a0f      	cmp	r2, #15
   1020e:	d808      	bhi.n	10222 <EncodeLinkCheckReq+0x22>
   10210:	2103      	movs	r1, #3
   10212:	4351      	muls	r1, r2
   10214:	185b      	adds	r3, r3, r1
   10216:	2102      	movs	r1, #2
   10218:	3399      	adds	r3, #153	; 0x99
   1021a:	3201      	adds	r2, #1
   1021c:	7019      	strb	r1, [r3, #0]
   1021e:	7022      	strb	r2, [r4, #0]
   10220:	380d      	subs	r0, #13
   10222:	bd10      	pop	{r4, pc}
   10224:	20003170 	.word	0x20003170

00010228 <UpdateCurrentDataRate>:
   10228:	b510      	push	{r4, lr}
   1022a:	4b04      	ldr	r3, [pc, #16]	; (1023c <UpdateCurrentDataRate+0x14>)
   1022c:	210c      	movs	r1, #12
   1022e:	33e7      	adds	r3, #231	; 0xe7
   10230:	7018      	strb	r0, [r3, #0]
   10232:	2001      	movs	r0, #1
   10234:	4b02      	ldr	r3, [pc, #8]	; (10240 <UpdateCurrentDataRate+0x18>)
   10236:	4798      	blx	r3
   10238:	bd10      	pop	{r4, pc}
   1023a:	46c0      	nop			; (mov r8, r8)
   1023c:	20003170 	.word	0x20003170
   10240:	0000933d 	.word	0x0000933d

00010244 <UpdateDLSettings>:
   10244:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10246:	466b      	mov	r3, sp
   10248:	1dde      	adds	r6, r3, #7
   1024a:	1d9c      	adds	r4, r3, #6
   1024c:	71d8      	strb	r0, [r3, #7]
   1024e:	7021      	strb	r1, [r4, #0]
   10250:	2017      	movs	r0, #23
   10252:	0031      	movs	r1, r6
   10254:	4d0c      	ldr	r5, [pc, #48]	; (10288 <UpdateDLSettings+0x44>)
   10256:	47a8      	blx	r5
   10258:	2808      	cmp	r0, #8
   1025a:	d107      	bne.n	1026c <UpdateDLSettings+0x28>
   1025c:	4b0b      	ldr	r3, [pc, #44]	; (1028c <UpdateDLSettings+0x48>)
   1025e:	7832      	ldrb	r2, [r6, #0]
   10260:	336e      	adds	r3, #110	; 0x6e
   10262:	701a      	strb	r2, [r3, #0]
   10264:	2100      	movs	r1, #0
   10266:	3807      	subs	r0, #7
   10268:	4b09      	ldr	r3, [pc, #36]	; (10290 <UpdateDLSettings+0x4c>)
   1026a:	4798      	blx	r3
   1026c:	0021      	movs	r1, r4
   1026e:	2018      	movs	r0, #24
   10270:	47a8      	blx	r5
   10272:	2808      	cmp	r0, #8
   10274:	d107      	bne.n	10286 <UpdateDLSettings+0x42>
   10276:	2101      	movs	r1, #1
   10278:	4b04      	ldr	r3, [pc, #16]	; (1028c <UpdateDLSettings+0x48>)
   1027a:	7822      	ldrb	r2, [r4, #0]
   1027c:	33f7      	adds	r3, #247	; 0xf7
   1027e:	701a      	strb	r2, [r3, #0]
   10280:	0008      	movs	r0, r1
   10282:	4b03      	ldr	r3, [pc, #12]	; (10290 <UpdateDLSettings+0x4c>)
   10284:	4798      	blx	r3
   10286:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   10288:	0000cb91 	.word	0x0000cb91
   1028c:	20003170 	.word	0x20003170
   10290:	0000933d 	.word	0x0000933d

00010294 <UpdateTxPower>:
   10294:	b510      	push	{r4, lr}
   10296:	4b04      	ldr	r3, [pc, #16]	; (102a8 <UpdateTxPower+0x14>)
   10298:	210a      	movs	r1, #10
   1029a:	33e9      	adds	r3, #233	; 0xe9
   1029c:	7018      	strb	r0, [r3, #0]
   1029e:	2000      	movs	r0, #0
   102a0:	4b02      	ldr	r3, [pc, #8]	; (102ac <UpdateTxPower+0x18>)
   102a2:	4798      	blx	r3
   102a4:	bd10      	pop	{r4, pc}
   102a6:	46c0      	nop			; (mov r8, r8)
   102a8:	20003170 	.word	0x20003170
   102ac:	0000933d 	.word	0x0000933d

000102b0 <UpdateRetransmissionAckTimeoutState>:
   102b0:	4b10      	ldr	r3, [pc, #64]	; (102f4 <UpdateRetransmissionAckTimeoutState+0x44>)
   102b2:	b513      	push	{r0, r1, r4, lr}
   102b4:	001a      	movs	r2, r3
   102b6:	32fd      	adds	r2, #253	; 0xfd
   102b8:	7812      	ldrb	r2, [r2, #0]
   102ba:	2a01      	cmp	r2, #1
   102bc:	d108      	bne.n	102d0 <UpdateRetransmissionAckTimeoutState+0x20>
   102be:	0018      	movs	r0, r3
   102c0:	210e      	movs	r1, #14
   102c2:	3084      	adds	r0, #132	; 0x84
   102c4:	7802      	ldrb	r2, [r0, #0]
   102c6:	438a      	bics	r2, r1
   102c8:	0011      	movs	r1, r2
   102ca:	220c      	movs	r2, #12
   102cc:	430a      	orrs	r2, r1
   102ce:	7002      	strb	r2, [r0, #0]
   102d0:	001a      	movs	r2, r3
   102d2:	32da      	adds	r2, #218	; 0xda
   102d4:	8811      	ldrh	r1, [r2, #0]
   102d6:	4a08      	ldr	r2, [pc, #32]	; (102f8 <UpdateRetransmissionAckTimeoutState+0x48>)
   102d8:	4c08      	ldr	r4, [pc, #32]	; (102fc <UpdateRetransmissionAckTimeoutState+0x4c>)
   102da:	5c9a      	ldrb	r2, [r3, r2]
   102dc:	33f1      	adds	r3, #241	; 0xf1
   102de:	1a8a      	subs	r2, r1, r2
   102e0:	21fa      	movs	r1, #250	; 0xfa
   102e2:	0089      	lsls	r1, r1, #2
   102e4:	4351      	muls	r1, r2
   102e6:	2200      	movs	r2, #0
   102e8:	7818      	ldrb	r0, [r3, #0]
   102ea:	9200      	str	r2, [sp, #0]
   102ec:	4b04      	ldr	r3, [pc, #16]	; (10300 <UpdateRetransmissionAckTimeoutState+0x50>)
   102ee:	47a0      	blx	r4
   102f0:	bd13      	pop	{r0, r1, r4, pc}
   102f2:	46c0      	nop			; (mov r8, r8)
   102f4:	20003170 	.word	0x20003170
   102f8:	0000022b 	.word	0x0000022b
   102fc:	0000d0bd 	.word	0x0000d0bd
   10300:	00011041 	.word	0x00011041

00010304 <UpdateReceiveWindow2Parameters>:
   10304:	4b0f      	ldr	r3, [pc, #60]	; (10344 <UpdateReceiveWindow2Parameters+0x40>)
   10306:	b570      	push	{r4, r5, r6, lr}
   10308:	001a      	movs	r2, r3
   1030a:	326e      	adds	r2, #110	; 0x6e
   1030c:	7011      	strb	r1, [r2, #0]
   1030e:	001a      	movs	r2, r3
   10310:	0c04      	lsrs	r4, r0, #16
   10312:	326a      	adds	r2, #106	; 0x6a
   10314:	8010      	strh	r0, [r2, #0]
   10316:	8054      	strh	r4, [r2, #2]
   10318:	001a      	movs	r2, r3
   1031a:	25fd      	movs	r5, #253	; 0xfd
   1031c:	32fd      	adds	r2, #253	; 0xfd
   1031e:	7812      	ldrb	r2, [r2, #0]
   10320:	3a02      	subs	r2, #2
   10322:	422a      	tst	r2, r5
   10324:	d109      	bne.n	1033a <UpdateReceiveWindow2Parameters+0x36>
   10326:	001a      	movs	r2, r3
   10328:	336f      	adds	r3, #111	; 0x6f
   1032a:	3273      	adds	r2, #115	; 0x73
   1032c:	7011      	strb	r1, [r2, #0]
   1032e:	7018      	strb	r0, [r3, #0]
   10330:	0a02      	lsrs	r2, r0, #8
   10332:	0e00      	lsrs	r0, r0, #24
   10334:	705a      	strb	r2, [r3, #1]
   10336:	709c      	strb	r4, [r3, #2]
   10338:	70d8      	strb	r0, [r3, #3]
   1033a:	2100      	movs	r1, #0
   1033c:	4b02      	ldr	r3, [pc, #8]	; (10348 <UpdateReceiveWindow2Parameters+0x44>)
   1033e:	2001      	movs	r0, #1
   10340:	4798      	blx	r3
   10342:	bd70      	pop	{r4, r5, r6, pc}
   10344:	20003170 	.word	0x20003170
   10348:	0000933d 	.word	0x0000933d

0001034c <ResetParametersForConfirmedTransmission>:
   1034c:	4b0a      	ldr	r3, [pc, #40]	; (10378 <ResetParametersForConfirmedTransmission+0x2c>)
   1034e:	001a      	movs	r2, r3
   10350:	32fd      	adds	r2, #253	; 0xfd
   10352:	7812      	ldrb	r2, [r2, #0]
   10354:	2a01      	cmp	r2, #1
   10356:	d105      	bne.n	10364 <ResetParametersForConfirmedTransmission+0x18>
   10358:	0019      	movs	r1, r3
   1035a:	200e      	movs	r0, #14
   1035c:	3184      	adds	r1, #132	; 0x84
   1035e:	780a      	ldrb	r2, [r1, #0]
   10360:	4382      	bics	r2, r0
   10362:	700a      	strb	r2, [r1, #0]
   10364:	001a      	movs	r2, r3
   10366:	2100      	movs	r1, #0
   10368:	3394      	adds	r3, #148	; 0x94
   1036a:	32e4      	adds	r2, #228	; 0xe4
   1036c:	7011      	strb	r1, [r2, #0]
   1036e:	781a      	ldrb	r2, [r3, #0]
   10370:	3101      	adds	r1, #1
   10372:	438a      	bics	r2, r1
   10374:	701a      	strb	r2, [r3, #0]
   10376:	4770      	bx	lr
   10378:	20003170 	.word	0x20003170

0001037c <ResetParametersForUnconfirmedTransmission>:
   1037c:	4b07      	ldr	r3, [pc, #28]	; (1039c <ResetParametersForUnconfirmedTransmission+0x20>)
   1037e:	001a      	movs	r2, r3
   10380:	32fd      	adds	r2, #253	; 0xfd
   10382:	7812      	ldrb	r2, [r2, #0]
   10384:	2a01      	cmp	r2, #1
   10386:	d105      	bne.n	10394 <ResetParametersForUnconfirmedTransmission+0x18>
   10388:	0019      	movs	r1, r3
   1038a:	200e      	movs	r0, #14
   1038c:	3184      	adds	r1, #132	; 0x84
   1038e:	780a      	ldrb	r2, [r1, #0]
   10390:	4382      	bics	r2, r0
   10392:	700a      	strb	r2, [r1, #0]
   10394:	2200      	movs	r2, #0
   10396:	33e3      	adds	r3, #227	; 0xe3
   10398:	701a      	strb	r2, [r3, #0]
   1039a:	4770      	bx	lr
   1039c:	20003170 	.word	0x20003170

000103a0 <SetJoinFailState>:
   103a0:	b570      	push	{r4, r5, r6, lr}
   103a2:	4c15      	ldr	r4, [pc, #84]	; (103f8 <SetJoinFailState+0x58>)
   103a4:	2604      	movs	r6, #4
   103a6:	0025      	movs	r5, r4
   103a8:	3594      	adds	r5, #148	; 0x94
   103aa:	782a      	ldrb	r2, [r5, #0]
   103ac:	0021      	movs	r1, r4
   103ae:	43b2      	bics	r2, r6
   103b0:	702a      	strb	r2, [r5, #0]
   103b2:	22f0      	movs	r2, #240	; 0xf0
   103b4:	3184      	adds	r1, #132	; 0x84
   103b6:	780b      	ldrb	r3, [r1, #0]
   103b8:	4013      	ands	r3, r2
   103ba:	700b      	strb	r3, [r1, #0]
   103bc:	0023      	movs	r3, r4
   103be:	33ff      	adds	r3, #255	; 0xff
   103c0:	7f5b      	ldrb	r3, [r3, #29]
   103c2:	069b      	lsls	r3, r3, #26
   103c4:	d503      	bpl.n	103ce <SetJoinFailState+0x2e>
   103c6:	0023      	movs	r3, r4
   103c8:	2200      	movs	r2, #0
   103ca:	3380      	adds	r3, #128	; 0x80
   103cc:	701a      	strb	r2, [r3, #0]
   103ce:	490b      	ldr	r1, [pc, #44]	; (103fc <SetJoinFailState+0x5c>)
   103d0:	794a      	ldrb	r2, [r1, #5]
   103d2:	790b      	ldrb	r3, [r1, #4]
   103d4:	0212      	lsls	r2, r2, #8
   103d6:	431a      	orrs	r2, r3
   103d8:	798b      	ldrb	r3, [r1, #6]
   103da:	041b      	lsls	r3, r3, #16
   103dc:	431a      	orrs	r2, r3
   103de:	79cb      	ldrb	r3, [r1, #7]
   103e0:	061b      	lsls	r3, r3, #24
   103e2:	4313      	orrs	r3, r2
   103e4:	d000      	beq.n	103e8 <SetJoinFailState+0x48>
   103e6:	4798      	blx	r3
   103e8:	2300      	movs	r3, #0
   103ea:	34f9      	adds	r4, #249	; 0xf9
   103ec:	7023      	strb	r3, [r4, #0]
   103ee:	210b      	movs	r1, #11
   103f0:	4b03      	ldr	r3, [pc, #12]	; (10400 <SetJoinFailState+0x60>)
   103f2:	2001      	movs	r0, #1
   103f4:	4798      	blx	r3
   103f6:	bd70      	pop	{r4, r5, r6, pc}
   103f8:	20003170 	.word	0x20003170
   103fc:	200034cc 	.word	0x200034cc
   10400:	0000933d 	.word	0x0000933d

00010404 <ExecuteRxParamSetupReq>:
   10404:	b5f0      	push	{r4, r5, r6, r7, lr}
   10406:	b085      	sub	sp, #20
   10408:	7805      	ldrb	r5, [r0, #0]
   1040a:	0004      	movs	r4, r0
   1040c:	1c41      	adds	r1, r0, #1
   1040e:	2204      	movs	r2, #4
   10410:	4b36      	ldr	r3, [pc, #216]	; (104ec <ExecuteRxParamSetupReq+0xe8>)
   10412:	a803      	add	r0, sp, #12
   10414:	4798      	blx	r3
   10416:	2264      	movs	r2, #100	; 0x64
   10418:	9b03      	ldr	r3, [sp, #12]
   1041a:	a903      	add	r1, sp, #12
   1041c:	021b      	lsls	r3, r3, #8
   1041e:	0a1b      	lsrs	r3, r3, #8
   10420:	4353      	muls	r3, r2
   10422:	9303      	str	r3, [sp, #12]
   10424:	1d23      	adds	r3, r4, #4
   10426:	9301      	str	r3, [sp, #4]
   10428:	072b      	lsls	r3, r5, #28
   1042a:	0f1b      	lsrs	r3, r3, #28
   1042c:	b2da      	uxtb	r2, r3
   1042e:	9200      	str	r2, [sp, #0]
   10430:	aa02      	add	r2, sp, #8
   10432:	1c96      	adds	r6, r2, #2
   10434:	066d      	lsls	r5, r5, #25
   10436:	7033      	strb	r3, [r6, #0]
   10438:	1cd7      	adds	r7, r2, #3
   1043a:	0f6d      	lsrs	r5, r5, #29
   1043c:	2001      	movs	r0, #1
   1043e:	4b2c      	ldr	r3, [pc, #176]	; (104f0 <ExecuteRxParamSetupReq+0xec>)
   10440:	703d      	strb	r5, [r7, #0]
   10442:	4798      	blx	r3
   10444:	4c2b      	ldr	r4, [pc, #172]	; (104f4 <ExecuteRxParamSetupReq+0xf0>)
   10446:	2808      	cmp	r0, #8
   10448:	d109      	bne.n	1045e <ExecuteRxParamSetupReq+0x5a>
   1044a:	0023      	movs	r3, r4
   1044c:	33e0      	adds	r3, #224	; 0xe0
   1044e:	781a      	ldrb	r2, [r3, #0]
   10450:	2303      	movs	r3, #3
   10452:	4353      	muls	r3, r2
   10454:	18e3      	adds	r3, r4, r3
   10456:	3398      	adds	r3, #152	; 0x98
   10458:	789a      	ldrb	r2, [r3, #2]
   1045a:	4310      	orrs	r0, r2
   1045c:	7098      	strb	r0, [r3, #2]
   1045e:	0031      	movs	r1, r6
   10460:	200f      	movs	r0, #15
   10462:	4e23      	ldr	r6, [pc, #140]	; (104f0 <ExecuteRxParamSetupReq+0xec>)
   10464:	47b0      	blx	r6
   10466:	2808      	cmp	r0, #8
   10468:	d10a      	bne.n	10480 <ExecuteRxParamSetupReq+0x7c>
   1046a:	0023      	movs	r3, r4
   1046c:	33e0      	adds	r3, #224	; 0xe0
   1046e:	781a      	ldrb	r2, [r3, #0]
   10470:	2303      	movs	r3, #3
   10472:	4353      	muls	r3, r2
   10474:	2210      	movs	r2, #16
   10476:	18e3      	adds	r3, r4, r3
   10478:	3398      	adds	r3, #152	; 0x98
   1047a:	7899      	ldrb	r1, [r3, #2]
   1047c:	430a      	orrs	r2, r1
   1047e:	709a      	strb	r2, [r3, #2]
   10480:	0039      	movs	r1, r7
   10482:	2018      	movs	r0, #24
   10484:	47b0      	blx	r6
   10486:	2808      	cmp	r0, #8
   10488:	d10a      	bne.n	104a0 <ExecuteRxParamSetupReq+0x9c>
   1048a:	0023      	movs	r3, r4
   1048c:	33e0      	adds	r3, #224	; 0xe0
   1048e:	781a      	ldrb	r2, [r3, #0]
   10490:	2303      	movs	r3, #3
   10492:	4353      	muls	r3, r2
   10494:	2220      	movs	r2, #32
   10496:	18e3      	adds	r3, r4, r3
   10498:	3398      	adds	r3, #152	; 0x98
   1049a:	7899      	ldrb	r1, [r3, #2]
   1049c:	430a      	orrs	r2, r1
   1049e:	709a      	strb	r2, [r3, #2]
   104a0:	0023      	movs	r3, r4
   104a2:	33e0      	adds	r3, #224	; 0xe0
   104a4:	781a      	ldrb	r2, [r3, #0]
   104a6:	2303      	movs	r3, #3
   104a8:	4353      	muls	r3, r2
   104aa:	18e3      	adds	r3, r4, r3
   104ac:	3398      	adds	r3, #152	; 0x98
   104ae:	789e      	ldrb	r6, [r3, #2]
   104b0:	06f3      	lsls	r3, r6, #27
   104b2:	d518      	bpl.n	104e6 <ExecuteRxParamSetupReq+0xe2>
   104b4:	0733      	lsls	r3, r6, #28
   104b6:	d516      	bpl.n	104e6 <ExecuteRxParamSetupReq+0xe2>
   104b8:	06b6      	lsls	r6, r6, #26
   104ba:	0ff6      	lsrs	r6, r6, #31
   104bc:	2e01      	cmp	r6, #1
   104be:	d112      	bne.n	104e6 <ExecuteRxParamSetupReq+0xe2>
   104c0:	0023      	movs	r3, r4
   104c2:	33f7      	adds	r3, #247	; 0xf7
   104c4:	701d      	strb	r5, [r3, #0]
   104c6:	0031      	movs	r1, r6
   104c8:	0030      	movs	r0, r6
   104ca:	4d0b      	ldr	r5, [pc, #44]	; (104f8 <ExecuteRxParamSetupReq+0xf4>)
   104cc:	47a8      	blx	r5
   104ce:	9900      	ldr	r1, [sp, #0]
   104d0:	9803      	ldr	r0, [sp, #12]
   104d2:	4b0a      	ldr	r3, [pc, #40]	; (104fc <ExecuteRxParamSetupReq+0xf8>)
   104d4:	4798      	blx	r3
   104d6:	2340      	movs	r3, #64	; 0x40
   104d8:	3484      	adds	r4, #132	; 0x84
   104da:	7862      	ldrb	r2, [r4, #1]
   104dc:	210b      	movs	r1, #11
   104de:	4313      	orrs	r3, r2
   104e0:	7063      	strb	r3, [r4, #1]
   104e2:	0030      	movs	r0, r6
   104e4:	47a8      	blx	r5
   104e6:	9801      	ldr	r0, [sp, #4]
   104e8:	b005      	add	sp, #20
   104ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104ec:	000166f7 	.word	0x000166f7
   104f0:	0000cb91 	.word	0x0000cb91
   104f4:	20003170 	.word	0x20003170
   104f8:	0000933d 	.word	0x0000933d
   104fc:	00010305 	.word	0x00010305

00010500 <ExecuteDutyCycle>:
   10500:	b570      	push	{r4, r5, r6, lr}
   10502:	7803      	ldrb	r3, [r0, #0]
   10504:	1c46      	adds	r6, r0, #1
   10506:	2b0f      	cmp	r3, #15
   10508:	d80f      	bhi.n	1052a <ExecuteDutyCycle+0x2a>
   1050a:	4c09      	ldr	r4, [pc, #36]	; (10530 <ExecuteDutyCycle+0x30>)
   1050c:	210b      	movs	r1, #11
   1050e:	0022      	movs	r2, r4
   10510:	2000      	movs	r0, #0
   10512:	3298      	adds	r2, #152	; 0x98
   10514:	4d07      	ldr	r5, [pc, #28]	; (10534 <ExecuteDutyCycle+0x34>)
   10516:	7013      	strb	r3, [r2, #0]
   10518:	47a8      	blx	r5
   1051a:	2320      	movs	r3, #32
   1051c:	3484      	adds	r4, #132	; 0x84
   1051e:	7862      	ldrb	r2, [r4, #1]
   10520:	210b      	movs	r1, #11
   10522:	4313      	orrs	r3, r2
   10524:	7063      	strb	r3, [r4, #1]
   10526:	2001      	movs	r0, #1
   10528:	47a8      	blx	r5
   1052a:	0030      	movs	r0, r6
   1052c:	bd70      	pop	{r4, r5, r6, pc}
   1052e:	46c0      	nop			; (mov r8, r8)
   10530:	20003170 	.word	0x20003170
   10534:	0000933d 	.word	0x0000933d

00010538 <ExecuteDlChannel>:
   10538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1053a:	b089      	sub	sp, #36	; 0x24
   1053c:	7805      	ldrb	r5, [r0, #0]
   1053e:	ab02      	add	r3, sp, #8
   10540:	1c41      	adds	r1, r0, #1
   10542:	0007      	movs	r7, r0
   10544:	719d      	strb	r5, [r3, #6]
   10546:	1d9e      	adds	r6, r3, #6
   10548:	2204      	movs	r2, #4
   1054a:	4b23      	ldr	r3, [pc, #140]	; (105d8 <ExecuteDlChannel+0xa0>)
   1054c:	a805      	add	r0, sp, #20
   1054e:	4798      	blx	r3
   10550:	9b05      	ldr	r3, [sp, #20]
   10552:	a904      	add	r1, sp, #16
   10554:	021c      	lsls	r4, r3, #8
   10556:	2364      	movs	r3, #100	; 0x64
   10558:	0a24      	lsrs	r4, r4, #8
   1055a:	435c      	muls	r4, r3
   1055c:	1d3b      	adds	r3, r7, #4
   1055e:	9301      	str	r3, [sp, #4]
   10560:	2301      	movs	r3, #1
   10562:	2015      	movs	r0, #21
   10564:	704b      	strb	r3, [r1, #1]
   10566:	4b1d      	ldr	r3, [pc, #116]	; (105dc <ExecuteDlChannel+0xa4>)
   10568:	9405      	str	r4, [sp, #20]
   1056a:	700d      	strb	r5, [r1, #0]
   1056c:	4798      	blx	r3
   1056e:	2808      	cmp	r0, #8
   10570:	d12f      	bne.n	105d2 <ExecuteDlChannel+0x9a>
   10572:	ab02      	add	r3, sp, #8
   10574:	1ddd      	adds	r5, r3, #7
   10576:	2300      	movs	r3, #0
   10578:	702b      	strb	r3, [r5, #0]
   1057a:	7833      	ldrb	r3, [r6, #0]
   1057c:	af06      	add	r7, sp, #24
   1057e:	713b      	strb	r3, [r7, #4]
   10580:	002a      	movs	r2, r5
   10582:	0031      	movs	r1, r6
   10584:	300e      	adds	r0, #14
   10586:	4b16      	ldr	r3, [pc, #88]	; (105e0 <ExecuteDlChannel+0xa8>)
   10588:	9406      	str	r4, [sp, #24]
   1058a:	4798      	blx	r3
   1058c:	280a      	cmp	r0, #10
   1058e:	d00d      	beq.n	105ac <ExecuteDlChannel+0x74>
   10590:	782a      	ldrb	r2, [r5, #0]
   10592:	2a01      	cmp	r2, #1
   10594:	d10a      	bne.n	105ac <ExecuteDlChannel+0x74>
   10596:	4b13      	ldr	r3, [pc, #76]	; (105e4 <ExecuteDlChannel+0xac>)
   10598:	0019      	movs	r1, r3
   1059a:	31e0      	adds	r1, #224	; 0xe0
   1059c:	7808      	ldrb	r0, [r1, #0]
   1059e:	2103      	movs	r1, #3
   105a0:	4341      	muls	r1, r0
   105a2:	185b      	adds	r3, r3, r1
   105a4:	3398      	adds	r3, #152	; 0x98
   105a6:	78d9      	ldrb	r1, [r3, #3]
   105a8:	430a      	orrs	r2, r1
   105aa:	70da      	strb	r2, [r3, #3]
   105ac:	0039      	movs	r1, r7
   105ae:	2033      	movs	r0, #51	; 0x33
   105b0:	4b0d      	ldr	r3, [pc, #52]	; (105e8 <ExecuteDlChannel+0xb0>)
   105b2:	4798      	blx	r3
   105b4:	2808      	cmp	r0, #8
   105b6:	d10c      	bne.n	105d2 <ExecuteDlChannel+0x9a>
   105b8:	4b0a      	ldr	r3, [pc, #40]	; (105e4 <ExecuteDlChannel+0xac>)
   105ba:	001a      	movs	r2, r3
   105bc:	32e0      	adds	r2, #224	; 0xe0
   105be:	7811      	ldrb	r1, [r2, #0]
   105c0:	2203      	movs	r2, #3
   105c2:	434a      	muls	r2, r1
   105c4:	189b      	adds	r3, r3, r2
   105c6:	2280      	movs	r2, #128	; 0x80
   105c8:	3398      	adds	r3, #152	; 0x98
   105ca:	7899      	ldrb	r1, [r3, #2]
   105cc:	4252      	negs	r2, r2
   105ce:	430a      	orrs	r2, r1
   105d0:	709a      	strb	r2, [r3, #2]
   105d2:	9801      	ldr	r0, [sp, #4]
   105d4:	b009      	add	sp, #36	; 0x24
   105d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105d8:	000166f7 	.word	0x000166f7
   105dc:	0000cb91 	.word	0x0000cb91
   105e0:	0000cb75 	.word	0x0000cb75
   105e4:	20003170 	.word	0x20003170
   105e8:	0000cbad 	.word	0x0000cbad

000105ec <ExecuteTxParamSetup>:
   105ec:	220f      	movs	r2, #15
   105ee:	b513      	push	{r0, r1, r4, lr}
   105f0:	7803      	ldrb	r3, [r0, #0]
   105f2:	4c0f      	ldr	r4, [pc, #60]	; (10630 <ExecuteTxParamSetup+0x44>)
   105f4:	401a      	ands	r2, r3
   105f6:	5ca2      	ldrb	r2, [r4, r2]
   105f8:	2401      	movs	r4, #1
   105fa:	a901      	add	r1, sp, #4
   105fc:	700a      	strb	r2, [r1, #0]
   105fe:	111a      	asrs	r2, r3, #4
   10600:	115b      	asrs	r3, r3, #5
   10602:	4023      	ands	r3, r4
   10604:	40a3      	lsls	r3, r4
   10606:	4022      	ands	r2, r4
   10608:	4313      	orrs	r3, r2
   1060a:	704b      	strb	r3, [r1, #1]
   1060c:	1904      	adds	r4, r0, r4
   1060e:	4b09      	ldr	r3, [pc, #36]	; (10634 <ExecuteTxParamSetup+0x48>)
   10610:	2034      	movs	r0, #52	; 0x34
   10612:	4798      	blx	r3
   10614:	2808      	cmp	r0, #8
   10616:	d009      	beq.n	1062c <ExecuteTxParamSetup+0x40>
   10618:	4b07      	ldr	r3, [pc, #28]	; (10638 <ExecuteTxParamSetup+0x4c>)
   1061a:	001a      	movs	r2, r3
   1061c:	32e0      	adds	r2, #224	; 0xe0
   1061e:	7811      	ldrb	r1, [r2, #0]
   10620:	2203      	movs	r2, #3
   10622:	434a      	muls	r2, r1
   10624:	189b      	adds	r3, r3, r2
   10626:	22ff      	movs	r2, #255	; 0xff
   10628:	3399      	adds	r3, #153	; 0x99
   1062a:	701a      	strb	r2, [r3, #0]
   1062c:	0020      	movs	r0, r4
   1062e:	bd16      	pop	{r1, r2, r4, pc}
   10630:	00018c21 	.word	0x00018c21
   10634:	0000cbad 	.word	0x0000cbad
   10638:	20003170 	.word	0x20003170

0001063c <ExecuteLinkAdr>:
   1063c:	220f      	movs	r2, #15
   1063e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10640:	0006      	movs	r6, r0
   10642:	7803      	ldrb	r3, [r0, #0]
   10644:	b089      	sub	sp, #36	; 0x24
   10646:	401a      	ands	r2, r3
   10648:	a905      	add	r1, sp, #20
   1064a:	700a      	strb	r2, [r1, #0]
   1064c:	aa04      	add	r2, sp, #16
   1064e:	1d97      	adds	r7, r2, #6
   10650:	091b      	lsrs	r3, r3, #4
   10652:	7153      	strb	r3, [r2, #5]
   10654:	1c41      	adds	r1, r0, #1
   10656:	2202      	movs	r2, #2
   10658:	0038      	movs	r0, r7
   1065a:	4b3d      	ldr	r3, [pc, #244]	; (10750 <ExecuteLinkAdr+0x114>)
   1065c:	4798      	blx	r3
   1065e:	2201      	movs	r2, #1
   10660:	1d33      	adds	r3, r6, #4
   10662:	9303      	str	r3, [sp, #12]
   10664:	78f3      	ldrb	r3, [r6, #3]
   10666:	4c3b      	ldr	r4, [pc, #236]	; (10754 <ExecuteLinkAdr+0x118>)
   10668:	4d3b      	ldr	r5, [pc, #236]	; (10758 <ExecuteLinkAdr+0x11c>)
   1066a:	065b      	lsls	r3, r3, #25
   1066c:	0f5b      	lsrs	r3, r3, #29
   1066e:	9300      	str	r3, [sp, #0]
   10670:	5d63      	ldrb	r3, [r4, r5]
   10672:	a906      	add	r1, sp, #24
   10674:	4393      	bics	r3, r2
   10676:	1892      	adds	r2, r2, r2
   10678:	4393      	bics	r3, r2
   1067a:	3202      	adds	r2, #2
   1067c:	4393      	bics	r3, r2
   1067e:	5563      	strb	r3, [r4, r5]
   10680:	883b      	ldrh	r3, [r7, #0]
   10682:	2037      	movs	r0, #55	; 0x37
   10684:	9302      	str	r3, [sp, #8]
   10686:	466b      	mov	r3, sp
   10688:	891b      	ldrh	r3, [r3, #8]
   1068a:	4f34      	ldr	r7, [pc, #208]	; (1075c <ExecuteLinkAdr+0x120>)
   1068c:	804b      	strh	r3, [r1, #2]
   1068e:	466b      	mov	r3, sp
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	700b      	strb	r3, [r1, #0]
   10694:	47b8      	blx	r7
   10696:	2808      	cmp	r0, #8
   10698:	d117      	bne.n	106ca <ExecuteLinkAdr+0x8e>
   1069a:	466b      	mov	r3, sp
   1069c:	891b      	ldrh	r3, [r3, #8]
   1069e:	a907      	add	r1, sp, #28
   106a0:	800b      	strh	r3, [r1, #0]
   106a2:	466b      	mov	r3, sp
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	3014      	adds	r0, #20
   106a8:	708b      	strb	r3, [r1, #2]
   106aa:	4b2d      	ldr	r3, [pc, #180]	; (10760 <ExecuteLinkAdr+0x124>)
   106ac:	4798      	blx	r3
   106ae:	2201      	movs	r2, #1
   106b0:	5d63      	ldrb	r3, [r4, r5]
   106b2:	2010      	movs	r0, #16
   106b4:	4313      	orrs	r3, r2
   106b6:	5563      	strb	r3, [r4, r5]
   106b8:	ab04      	add	r3, sp, #16
   106ba:	1d59      	adds	r1, r3, #5
   106bc:	47b8      	blx	r7
   106be:	2808      	cmp	r0, #8
   106c0:	d103      	bne.n	106ca <ExecuteLinkAdr+0x8e>
   106c2:	2202      	movs	r2, #2
   106c4:	5d63      	ldrb	r3, [r4, r5]
   106c6:	4313      	orrs	r3, r2
   106c8:	5563      	strb	r3, [r4, r5]
   106ca:	af05      	add	r7, sp, #20
   106cc:	4b23      	ldr	r3, [pc, #140]	; (1075c <ExecuteLinkAdr+0x120>)
   106ce:	0039      	movs	r1, r7
   106d0:	201d      	movs	r0, #29
   106d2:	4798      	blx	r3
   106d4:	4b1f      	ldr	r3, [pc, #124]	; (10754 <ExecuteLinkAdr+0x118>)
   106d6:	2808      	cmp	r0, #8
   106d8:	d103      	bne.n	106e2 <ExecuteLinkAdr+0xa6>
   106da:	2204      	movs	r2, #4
   106dc:	5d59      	ldrb	r1, [r3, r5]
   106de:	430a      	orrs	r2, r1
   106e0:	555a      	strb	r2, [r3, r5]
   106e2:	5d5a      	ldrb	r2, [r3, r5]
   106e4:	43d2      	mvns	r2, r2
   106e6:	0752      	lsls	r2, r2, #29
   106e8:	d12a      	bne.n	10740 <ExecuteLinkAdr+0x104>
   106ea:	4669      	mov	r1, sp
   106ec:	4a1d      	ldr	r2, [pc, #116]	; (10764 <ExecuteLinkAdr+0x128>)
   106ee:	7a09      	ldrb	r1, [r1, #8]
   106f0:	5499      	strb	r1, [r3, r2]
   106f2:	9a02      	ldr	r2, [sp, #8]
   106f4:	491b      	ldr	r1, [pc, #108]	; (10764 <ExecuteLinkAdr+0x128>)
   106f6:	0a12      	lsrs	r2, r2, #8
   106f8:	1859      	adds	r1, r3, r1
   106fa:	704a      	strb	r2, [r1, #1]
   106fc:	aa04      	add	r2, sp, #16
   106fe:	3205      	adds	r2, #5
   10700:	7812      	ldrb	r2, [r2, #0]
   10702:	2a0f      	cmp	r2, #15
   10704:	d101      	bne.n	1070a <ExecuteLinkAdr+0xce>
   10706:	33e7      	adds	r3, #231	; 0xe7
   10708:	781a      	ldrb	r2, [r3, #0]
   1070a:	2389      	movs	r3, #137	; 0x89
   1070c:	2170      	movs	r1, #112	; 0x70
   1070e:	2070      	movs	r0, #112	; 0x70
   10710:	009b      	lsls	r3, r3, #2
   10712:	54e2      	strb	r2, [r4, r3]
   10714:	78f3      	ldrb	r3, [r6, #3]
   10716:	4a14      	ldr	r2, [pc, #80]	; (10768 <ExecuteLinkAdr+0x12c>)
   10718:	4019      	ands	r1, r3
   1071a:	5ca3      	ldrb	r3, [r4, r2]
   1071c:	4383      	bics	r3, r0
   1071e:	430b      	orrs	r3, r1
   10720:	54a3      	strb	r3, [r4, r2]
   10722:	78f1      	ldrb	r1, [r6, #3]
   10724:	3861      	subs	r0, #97	; 0x61
   10726:	b2db      	uxtb	r3, r3
   10728:	4001      	ands	r1, r0
   1072a:	4383      	bics	r3, r0
   1072c:	430b      	orrs	r3, r1
   1072e:	54a3      	strb	r3, [r4, r2]
   10730:	783b      	ldrb	r3, [r7, #0]
   10732:	4283      	cmp	r3, r0
   10734:	d101      	bne.n	1073a <ExecuteLinkAdr+0xfe>
   10736:	34e9      	adds	r4, #233	; 0xe9
   10738:	7823      	ldrb	r3, [r4, #0]
   1073a:	4a0c      	ldr	r2, [pc, #48]	; (1076c <ExecuteLinkAdr+0x130>)
   1073c:	4905      	ldr	r1, [pc, #20]	; (10754 <ExecuteLinkAdr+0x118>)
   1073e:	548b      	strb	r3, [r1, r2]
   10740:	4904      	ldr	r1, [pc, #16]	; (10754 <ExecuteLinkAdr+0x118>)
   10742:	4a0b      	ldr	r2, [pc, #44]	; (10770 <ExecuteLinkAdr+0x134>)
   10744:	9803      	ldr	r0, [sp, #12]
   10746:	5c8b      	ldrb	r3, [r1, r2]
   10748:	3301      	adds	r3, #1
   1074a:	548b      	strb	r3, [r1, r2]
   1074c:	b009      	add	sp, #36	; 0x24
   1074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10750:	000166f7 	.word	0x000166f7
   10754:	20003170 	.word	0x20003170
   10758:	00000223 	.word	0x00000223
   1075c:	0000cb91 	.word	0x0000cb91
   10760:	0000cbad 	.word	0x0000cbad
   10764:	00000227 	.word	0x00000227
   10768:	00000229 	.word	0x00000229
   1076c:	00000225 	.word	0x00000225
   10770:	00000226 	.word	0x00000226

00010774 <ExecuteDevTimeAns>:
   10774:	b510      	push	{r4, lr}
   10776:	0001      	movs	r1, r0
   10778:	0004      	movs	r4, r0
   1077a:	2204      	movs	r2, #4
   1077c:	4b04      	ldr	r3, [pc, #16]	; (10790 <ExecuteDevTimeAns+0x1c>)
   1077e:	4805      	ldr	r0, [pc, #20]	; (10794 <ExecuteDevTimeAns+0x20>)
   10780:	4798      	blx	r3
   10782:	238e      	movs	r3, #142	; 0x8e
   10784:	7921      	ldrb	r1, [r4, #4]
   10786:	4a04      	ldr	r2, [pc, #16]	; (10798 <ExecuteDevTimeAns+0x24>)
   10788:	009b      	lsls	r3, r3, #2
   1078a:	1d60      	adds	r0, r4, #5
   1078c:	54d1      	strb	r1, [r2, r3]
   1078e:	bd10      	pop	{r4, pc}
   10790:	000166f7 	.word	0x000166f7
   10794:	200033a4 	.word	0x200033a4
   10798:	20003170 	.word	0x20003170

0001079c <PrepareJoinRequestFrame>:
   1079c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1079e:	2210      	movs	r2, #16
   107a0:	4d22      	ldr	r5, [pc, #136]	; (1082c <PrepareJoinRequestFrame+0x90>)
   107a2:	4b23      	ldr	r3, [pc, #140]	; (10830 <PrepareJoinRequestFrame+0x94>)
   107a4:	32ff      	adds	r2, #255	; 0xff
   107a6:	2100      	movs	r1, #0
   107a8:	0028      	movs	r0, r5
   107aa:	4798      	blx	r3
   107ac:	2300      	movs	r3, #0
   107ae:	4c21      	ldr	r4, [pc, #132]	; (10834 <PrepareJoinRequestFrame+0x98>)
   107b0:	702b      	strb	r3, [r5, #0]
   107b2:	4b21      	ldr	r3, [pc, #132]	; (10838 <PrepareJoinRequestFrame+0x9c>)
   107b4:	5ce3      	ldrb	r3, [r4, r3]
   107b6:	2b00      	cmp	r3, #0
   107b8:	d006      	beq.n	107c8 <PrepareJoinRequestFrame+0x2c>
   107ba:	4920      	ldr	r1, [pc, #128]	; (1083c <PrepareJoinRequestFrame+0xa0>)
   107bc:	2006      	movs	r0, #6
   107be:	4e20      	ldr	r6, [pc, #128]	; (10840 <PrepareJoinRequestFrame+0xa4>)
   107c0:	47b0      	blx	r6
   107c2:	4920      	ldr	r1, [pc, #128]	; (10844 <PrepareJoinRequestFrame+0xa8>)
   107c4:	2007      	movs	r0, #7
   107c6:	47b0      	blx	r6
   107c8:	2300      	movs	r3, #0
   107ca:	205c      	movs	r0, #92	; 0x5c
   107cc:	1ac1      	subs	r1, r0, r3
   107ce:	5c61      	ldrb	r1, [r4, r1]
   107d0:	18ea      	adds	r2, r5, r3
   107d2:	3301      	adds	r3, #1
   107d4:	7051      	strb	r1, [r2, #1]
   107d6:	2b08      	cmp	r3, #8
   107d8:	d1f8      	bne.n	107cc <PrepareJoinRequestFrame+0x30>
   107da:	2300      	movs	r3, #0
   107dc:	2064      	movs	r0, #100	; 0x64
   107de:	1ac1      	subs	r1, r0, r3
   107e0:	5c61      	ldrb	r1, [r4, r1]
   107e2:	18ea      	adds	r2, r5, r3
   107e4:	3301      	adds	r3, #1
   107e6:	7251      	strb	r1, [r2, #9]
   107e8:	2b08      	cmp	r3, #8
   107ea:	d1f8      	bne.n	107de <PrepareJoinRequestFrame+0x42>
   107ec:	4b16      	ldr	r3, [pc, #88]	; (10848 <PrepareJoinRequestFrame+0xac>)
   107ee:	4798      	blx	r3
   107f0:	4b16      	ldr	r3, [pc, #88]	; (1084c <PrepareJoinRequestFrame+0xb0>)
   107f2:	4917      	ldr	r1, [pc, #92]	; (10850 <PrepareJoinRequestFrame+0xb4>)
   107f4:	4798      	blx	r3
   107f6:	34cc      	adds	r4, #204	; 0xcc
   107f8:	8021      	strh	r1, [r4, #0]
   107fa:	2202      	movs	r2, #2
   107fc:	0021      	movs	r1, r4
   107fe:	4815      	ldr	r0, [pc, #84]	; (10854 <PrepareJoinRequestFrame+0xb8>)
   10800:	4c15      	ldr	r4, [pc, #84]	; (10858 <PrepareJoinRequestFrame+0xbc>)
   10802:	47a0      	blx	r4
   10804:	2313      	movs	r3, #19
   10806:	4e15      	ldr	r6, [pc, #84]	; (1085c <PrepareJoinRequestFrame+0xc0>)
   10808:	9300      	str	r3, [sp, #0]
   1080a:	0032      	movs	r2, r6
   1080c:	002b      	movs	r3, r5
   1080e:	2100      	movs	r1, #0
   10810:	4d13      	ldr	r5, [pc, #76]	; (10860 <PrepareJoinRequestFrame+0xc4>)
   10812:	4814      	ldr	r0, [pc, #80]	; (10864 <PrepareJoinRequestFrame+0xc8>)
   10814:	47a8      	blx	r5
   10816:	0031      	movs	r1, r6
   10818:	2204      	movs	r2, #4
   1081a:	a803      	add	r0, sp, #12
   1081c:	47a0      	blx	r4
   1081e:	2204      	movs	r2, #4
   10820:	a903      	add	r1, sp, #12
   10822:	4811      	ldr	r0, [pc, #68]	; (10868 <PrepareJoinRequestFrame+0xcc>)
   10824:	47a0      	blx	r4
   10826:	2017      	movs	r0, #23
   10828:	b004      	add	sp, #16
   1082a:	bd70      	pop	{r4, r5, r6, pc}
   1082c:	200033b8 	.word	0x200033b8
   10830:	00016709 	.word	0x00016709
   10834:	20003170 	.word	0x20003170
   10838:	0000022d 	.word	0x0000022d
   1083c:	200031c5 	.word	0x200031c5
   10840:	00007255 	.word	0x00007255
   10844:	200031cd 	.word	0x200031cd
   10848:	00016e3d 	.word	0x00016e3d
   1084c:	00013775 	.word	0x00013775
   10850:	0000ffff 	.word	0x0000ffff
   10854:	200033c9 	.word	0x200033c9
   10858:	000166f7 	.word	0x000166f7
   1085c:	20001eb5 	.word	0x20001eb5
   10860:	00007259 	.word	0x00007259
   10864:	200031b5 	.word	0x200031b5
   10868:	200033cb 	.word	0x200033cb

0001086c <ConfigureRadioRx>:
   1086c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1086e:	b087      	sub	sp, #28
   10870:	466b      	mov	r3, sp
   10872:	2600      	movs	r6, #0
   10874:	1ddc      	adds	r4, r3, #7
   10876:	71d8      	strb	r0, [r3, #7]
   10878:	729e      	strb	r6, [r3, #10]
   1087a:	466a      	mov	r2, sp
   1087c:	2301      	movs	r3, #1
   1087e:	72d3      	strb	r3, [r2, #11]
   10880:	2215      	movs	r2, #21
   10882:	ad03      	add	r5, sp, #12
   10884:	4f11      	ldr	r7, [pc, #68]	; (108cc <ConfigureRadioRx+0x60>)
   10886:	9100      	str	r1, [sp, #0]
   10888:	446a      	add	r2, sp
   1088a:	0021      	movs	r1, r4
   1088c:	2023      	movs	r0, #35	; 0x23
   1088e:	80ae      	strh	r6, [r5, #4]
   10890:	47b8      	blx	r7
   10892:	2216      	movs	r2, #22
   10894:	0021      	movs	r1, r4
   10896:	446a      	add	r2, sp
   10898:	2024      	movs	r0, #36	; 0x24
   1089a:	47b8      	blx	r7
   1089c:	2217      	movs	r2, #23
   1089e:	0021      	movs	r1, r4
   108a0:	446a      	add	r2, sp
   108a2:	2025      	movs	r0, #37	; 0x25
   108a4:	47b8      	blx	r7
   108a6:	9b00      	ldr	r3, [sp, #0]
   108a8:	0028      	movs	r0, r5
   108aa:	9303      	str	r3, [sp, #12]
   108ac:	4b08      	ldr	r3, [pc, #32]	; (108d0 <ConfigureRadioRx+0x64>)
   108ae:	80ae      	strh	r6, [r5, #4]
   108b0:	4798      	blx	r3
   108b2:	230a      	movs	r3, #10
   108b4:	446b      	add	r3, sp
   108b6:	0019      	movs	r1, r3
   108b8:	4c06      	ldr	r4, [pc, #24]	; (108d4 <ConfigureRadioRx+0x68>)
   108ba:	2014      	movs	r0, #20
   108bc:	47a0      	blx	r4
   108be:	230b      	movs	r3, #11
   108c0:	446b      	add	r3, sp
   108c2:	0019      	movs	r1, r3
   108c4:	2006      	movs	r0, #6
   108c6:	47a0      	blx	r4
   108c8:	b007      	add	sp, #28
   108ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108cc:	0000cb75 	.word	0x0000cb75
   108d0:	0000fed9 	.word	0x0000fed9
   108d4:	0000e265 	.word	0x0000e265

000108d8 <ConfigureRadioTx>:
   108d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108da:	2517      	movs	r5, #23
   108dc:	2300      	movs	r3, #0
   108de:	2616      	movs	r6, #22
   108e0:	2701      	movs	r7, #1
   108e2:	b087      	sub	sp, #28
   108e4:	ac01      	add	r4, sp, #4
   108e6:	446d      	add	r5, sp
   108e8:	9001      	str	r0, [sp, #4]
   108ea:	702b      	strb	r3, [r5, #0]
   108ec:	0020      	movs	r0, r4
   108ee:	4b10      	ldr	r3, [pc, #64]	; (10930 <ConfigureRadioTx+0x58>)
   108f0:	446e      	add	r6, sp
   108f2:	9102      	str	r1, [sp, #8]
   108f4:	9203      	str	r2, [sp, #12]
   108f6:	7037      	strb	r7, [r6, #0]
   108f8:	4798      	blx	r3
   108fa:	79e3      	ldrb	r3, [r4, #7]
   108fc:	4c0d      	ldr	r4, [pc, #52]	; (10934 <ConfigureRadioTx+0x5c>)
   108fe:	2b00      	cmp	r3, #0
   10900:	d00a      	beq.n	10918 <ConfigureRadioTx+0x40>
   10902:	4b0d      	ldr	r3, [pc, #52]	; (10938 <ConfigureRadioTx+0x60>)
   10904:	4a0d      	ldr	r2, [pc, #52]	; (1093c <ConfigureRadioTx+0x64>)
   10906:	490e      	ldr	r1, [pc, #56]	; (10940 <ConfigureRadioTx+0x68>)
   10908:	54d7      	strb	r7, [r2, r3]
   1090a:	200b      	movs	r0, #11
   1090c:	4b0d      	ldr	r3, [pc, #52]	; (10944 <ConfigureRadioTx+0x6c>)
   1090e:	4798      	blx	r3
   10910:	210a      	movs	r1, #10
   10912:	200b      	movs	r0, #11
   10914:	4469      	add	r1, sp
   10916:	47a0      	blx	r4
   10918:	a903      	add	r1, sp, #12
   1091a:	2004      	movs	r0, #4
   1091c:	47a0      	blx	r4
   1091e:	0031      	movs	r1, r6
   10920:	2014      	movs	r0, #20
   10922:	47a0      	blx	r4
   10924:	0029      	movs	r1, r5
   10926:	2006      	movs	r0, #6
   10928:	47a0      	blx	r4
   1092a:	b007      	add	sp, #28
   1092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1092e:	46c0      	nop			; (mov r8, r8)
   10930:	0000fed9 	.word	0x0000fed9
   10934:	0000e265 	.word	0x0000e265
   10938:	00000222 	.word	0x00000222
   1093c:	20003170 	.word	0x20003170
   10940:	20003391 	.word	0x20003391
   10944:	0000e175 	.word	0x0000e175

00010948 <LorawanGetChAndInitiateRadioTransmit>:
   10948:	2301      	movs	r3, #1
   1094a:	b530      	push	{r4, r5, lr}
   1094c:	4c46      	ldr	r4, [pc, #280]	; (10a68 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   1094e:	b089      	sub	sp, #36	; 0x24
   10950:	a902      	add	r1, sp, #8
   10952:	700b      	strb	r3, [r1, #0]
   10954:	0023      	movs	r3, r4
   10956:	33e9      	adds	r3, #233	; 0xe9
   10958:	781b      	ldrb	r3, [r3, #0]
   1095a:	704b      	strb	r3, [r1, #1]
   1095c:	0023      	movs	r3, r4
   1095e:	33e7      	adds	r3, #231	; 0xe7
   10960:	781b      	ldrb	r3, [r3, #0]
   10962:	708b      	strb	r3, [r1, #2]
   10964:	0023      	movs	r3, r4
   10966:	33fd      	adds	r3, #253	; 0xfd
   10968:	781b      	ldrb	r3, [r3, #0]
   1096a:	2b01      	cmp	r3, #1
   1096c:	d108      	bne.n	10980 <LorawanGetChAndInitiateRadioTransmit+0x38>
   1096e:	0020      	movs	r0, r4
   10970:	220e      	movs	r2, #14
   10972:	3084      	adds	r0, #132	; 0x84
   10974:	7803      	ldrb	r3, [r0, #0]
   10976:	4393      	bics	r3, r2
   10978:	001a      	movs	r2, r3
   1097a:	230c      	movs	r3, #12
   1097c:	4313      	orrs	r3, r2
   1097e:	7003      	strb	r3, [r0, #0]
   10980:	aa05      	add	r2, sp, #20
   10982:	202e      	movs	r0, #46	; 0x2e
   10984:	4d39      	ldr	r5, [pc, #228]	; (10a6c <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10986:	47a8      	blx	r5
   10988:	0023      	movs	r3, r4
   1098a:	2808      	cmp	r0, #8
   1098c:	d135      	bne.n	109fa <LorawanGetChAndInitiateRadioTransmit+0xb2>
   1098e:	33fd      	adds	r3, #253	; 0xfd
   10990:	781b      	ldrb	r3, [r3, #0]
   10992:	ad03      	add	r5, sp, #12
   10994:	2b04      	cmp	r3, #4
   10996:	d108      	bne.n	109aa <LorawanGetChAndInitiateRadioTransmit+0x62>
   10998:	2390      	movs	r3, #144	; 0x90
   1099a:	2200      	movs	r2, #0
   1099c:	009b      	lsls	r3, r3, #2
   1099e:	54e2      	strb	r2, [r4, r3]
   109a0:	2301      	movs	r3, #1
   109a2:	0028      	movs	r0, r5
   109a4:	702b      	strb	r3, [r5, #0]
   109a6:	4b32      	ldr	r3, [pc, #200]	; (10a70 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   109a8:	4798      	blx	r3
   109aa:	9805      	ldr	r0, [sp, #20]
   109ac:	4b31      	ldr	r3, [pc, #196]	; (10a74 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   109ae:	9906      	ldr	r1, [sp, #24]
   109b0:	9a07      	ldr	r2, [sp, #28]
   109b2:	4798      	blx	r3
   109b4:	0023      	movs	r3, r4
   109b6:	33ce      	adds	r3, #206	; 0xce
   109b8:	881b      	ldrh	r3, [r3, #0]
   109ba:	0028      	movs	r0, r5
   109bc:	702b      	strb	r3, [r5, #0]
   109be:	4b2e      	ldr	r3, [pc, #184]	; (10a78 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   109c0:	606b      	str	r3, [r5, #4]
   109c2:	4b2e      	ldr	r3, [pc, #184]	; (10a7c <LorawanGetChAndInitiateRadioTransmit+0x134>)
   109c4:	4798      	blx	r3
   109c6:	2800      	cmp	r0, #0
   109c8:	d109      	bne.n	109de <LorawanGetChAndInitiateRadioTransmit+0x96>
   109ca:	220e      	movs	r2, #14
   109cc:	3484      	adds	r4, #132	; 0x84
   109ce:	7823      	ldrb	r3, [r4, #0]
   109d0:	4393      	bics	r3, r2
   109d2:	001a      	movs	r2, r3
   109d4:	2302      	movs	r3, #2
   109d6:	4313      	orrs	r3, r2
   109d8:	7023      	strb	r3, [r4, #0]
   109da:	b009      	add	sp, #36	; 0x24
   109dc:	bd30      	pop	{r4, r5, pc}
   109de:	2200      	movs	r2, #0
   109e0:	4b27      	ldr	r3, [pc, #156]	; (10a80 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   109e2:	4928      	ldr	r1, [pc, #160]	; (10a84 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   109e4:	5ce3      	ldrb	r3, [r4, r3]
   109e6:	34fc      	adds	r4, #252	; 0xfc
   109e8:	4359      	muls	r1, r3
   109ea:	4b27      	ldr	r3, [pc, #156]	; (10a88 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   109ec:	7820      	ldrb	r0, [r4, #0]
   109ee:	18c9      	adds	r1, r1, r3
   109f0:	4b26      	ldr	r3, [pc, #152]	; (10a8c <LorawanGetChAndInitiateRadioTransmit+0x144>)
   109f2:	9200      	str	r2, [sp, #0]
   109f4:	4c26      	ldr	r4, [pc, #152]	; (10a90 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   109f6:	47a0      	blx	r4
   109f8:	e7ef      	b.n	109da <LorawanGetChAndInitiateRadioTransmit+0x92>
   109fa:	33ff      	adds	r3, #255	; 0xff
   109fc:	7f5b      	ldrb	r3, [r3, #29]
   109fe:	079a      	lsls	r2, r3, #30
   10a00:	d515      	bpl.n	10a2e <LorawanGetChAndInitiateRadioTransmit+0xe6>
   10a02:	aa03      	add	r2, sp, #12
   10a04:	4923      	ldr	r1, [pc, #140]	; (10a94 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10a06:	2026      	movs	r0, #38	; 0x26
   10a08:	47a8      	blx	r5
   10a0a:	9b03      	ldr	r3, [sp, #12]
   10a0c:	1c5a      	adds	r2, r3, #1
   10a0e:	d001      	beq.n	10a14 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10a10:	3314      	adds	r3, #20
   10a12:	9303      	str	r3, [sp, #12]
   10a14:	21fa      	movs	r1, #250	; 0xfa
   10a16:	4b1a      	ldr	r3, [pc, #104]	; (10a80 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10a18:	9a03      	ldr	r2, [sp, #12]
   10a1a:	5ce3      	ldrb	r3, [r4, r3]
   10a1c:	0089      	lsls	r1, r1, #2
   10a1e:	1ad3      	subs	r3, r2, r3
   10a20:	2200      	movs	r2, #0
   10a22:	4359      	muls	r1, r3
   10a24:	34f2      	adds	r4, #242	; 0xf2
   10a26:	7820      	ldrb	r0, [r4, #0]
   10a28:	9200      	str	r2, [sp, #0]
   10a2a:	4b1b      	ldr	r3, [pc, #108]	; (10a98 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10a2c:	e7e2      	b.n	109f4 <LorawanGetChAndInitiateRadioTransmit+0xac>
   10a2e:	075b      	lsls	r3, r3, #29
   10a30:	d508      	bpl.n	10a44 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   10a32:	aa03      	add	r2, sp, #12
   10a34:	4917      	ldr	r1, [pc, #92]	; (10a94 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10a36:	2032      	movs	r0, #50	; 0x32
   10a38:	47a8      	blx	r5
   10a3a:	9b03      	ldr	r3, [sp, #12]
   10a3c:	1c5a      	adds	r2, r3, #1
   10a3e:	d0e9      	beq.n	10a14 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10a40:	3301      	adds	r3, #1
   10a42:	e7e6      	b.n	10a12 <LorawanGetChAndInitiateRadioTransmit+0xca>
   10a44:	0023      	movs	r3, r4
   10a46:	2201      	movs	r2, #1
   10a48:	3394      	adds	r3, #148	; 0x94
   10a4a:	781b      	ldrb	r3, [r3, #0]
   10a4c:	401a      	ands	r2, r3
   10a4e:	d108      	bne.n	10a62 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10a50:	4b0b      	ldr	r3, [pc, #44]	; (10a80 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10a52:	490c      	ldr	r1, [pc, #48]	; (10a84 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10a54:	5ce3      	ldrb	r3, [r4, r3]
   10a56:	34f2      	adds	r4, #242	; 0xf2
   10a58:	4359      	muls	r1, r3
   10a5a:	4b0b      	ldr	r3, [pc, #44]	; (10a88 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10a5c:	7820      	ldrb	r0, [r4, #0]
   10a5e:	18c9      	adds	r1, r1, r3
   10a60:	e7e2      	b.n	10a28 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   10a62:	4b0e      	ldr	r3, [pc, #56]	; (10a9c <LorawanGetChAndInitiateRadioTransmit+0x154>)
   10a64:	4798      	blx	r3
   10a66:	e7b8      	b.n	109da <LorawanGetChAndInitiateRadioTransmit+0x92>
   10a68:	20003170 	.word	0x20003170
   10a6c:	0000cb75 	.word	0x0000cb75
   10a70:	0000f471 	.word	0x0000f471
   10a74:	000108d9 	.word	0x000108d9
   10a78:	200033c8 	.word	0x200033c8
   10a7c:	0000eb95 	.word	0x0000eb95
   10a80:	0000022b 	.word	0x0000022b
   10a84:	fffffc18 	.word	0xfffffc18
   10a88:	001e8480 	.word	0x001e8480
   10a8c:	00010aa1 	.word	0x00010aa1
   10a90:	0000d0bd 	.word	0x0000d0bd
   10a94:	20003257 	.word	0x20003257
   10a98:	00010b59 	.word	0x00010b59
   10a9c:	000102b1 	.word	0x000102b1

00010aa0 <TransmissionErrorCallback>:
   10aa0:	b530      	push	{r4, r5, lr}
   10aa2:	4c22      	ldr	r4, [pc, #136]	; (10b2c <TransmissionErrorCallback+0x8c>)
   10aa4:	2501      	movs	r5, #1
   10aa6:	0023      	movs	r3, r4
   10aa8:	b08b      	sub	sp, #44	; 0x2c
   10aaa:	a903      	add	r1, sp, #12
   10aac:	700d      	strb	r5, [r1, #0]
   10aae:	33e9      	adds	r3, #233	; 0xe9
   10ab0:	781b      	ldrb	r3, [r3, #0]
   10ab2:	aa07      	add	r2, sp, #28
   10ab4:	704b      	strb	r3, [r1, #1]
   10ab6:	0023      	movs	r3, r4
   10ab8:	33e7      	adds	r3, #231	; 0xe7
   10aba:	781b      	ldrb	r3, [r3, #0]
   10abc:	202e      	movs	r0, #46	; 0x2e
   10abe:	708b      	strb	r3, [r1, #2]
   10ac0:	4b1b      	ldr	r3, [pc, #108]	; (10b30 <TransmissionErrorCallback+0x90>)
   10ac2:	4798      	blx	r3
   10ac4:	2808      	cmp	r0, #8
   10ac6:	d121      	bne.n	10b0c <TransmissionErrorCallback+0x6c>
   10ac8:	a804      	add	r0, sp, #16
   10aca:	4b1a      	ldr	r3, [pc, #104]	; (10b34 <TransmissionErrorCallback+0x94>)
   10acc:	7005      	strb	r5, [r0, #0]
   10ace:	4798      	blx	r3
   10ad0:	9807      	ldr	r0, [sp, #28]
   10ad2:	4b19      	ldr	r3, [pc, #100]	; (10b38 <TransmissionErrorCallback+0x98>)
   10ad4:	9908      	ldr	r1, [sp, #32]
   10ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ad8:	4798      	blx	r3
   10ada:	0023      	movs	r3, r4
   10adc:	33ce      	adds	r3, #206	; 0xce
   10ade:	881b      	ldrh	r3, [r3, #0]
   10ae0:	a805      	add	r0, sp, #20
   10ae2:	7003      	strb	r3, [r0, #0]
   10ae4:	4b15      	ldr	r3, [pc, #84]	; (10b3c <TransmissionErrorCallback+0x9c>)
   10ae6:	6043      	str	r3, [r0, #4]
   10ae8:	4b15      	ldr	r3, [pc, #84]	; (10b40 <TransmissionErrorCallback+0xa0>)
   10aea:	4798      	blx	r3
   10aec:	2800      	cmp	r0, #0
   10aee:	d01a      	beq.n	10b26 <TransmissionErrorCallback+0x86>
   10af0:	0023      	movs	r3, r4
   10af2:	33fd      	adds	r3, #253	; 0xfd
   10af4:	781b      	ldrb	r3, [r3, #0]
   10af6:	42ab      	cmp	r3, r5
   10af8:	d108      	bne.n	10b0c <TransmissionErrorCallback+0x6c>
   10afa:	0021      	movs	r1, r4
   10afc:	220e      	movs	r2, #14
   10afe:	3184      	adds	r1, #132	; 0x84
   10b00:	780b      	ldrb	r3, [r1, #0]
   10b02:	4393      	bics	r3, r2
   10b04:	001a      	movs	r2, r3
   10b06:	230c      	movs	r3, #12
   10b08:	4313      	orrs	r3, r2
   10b0a:	700b      	strb	r3, [r1, #0]
   10b0c:	2200      	movs	r2, #0
   10b0e:	4b0d      	ldr	r3, [pc, #52]	; (10b44 <TransmissionErrorCallback+0xa4>)
   10b10:	490d      	ldr	r1, [pc, #52]	; (10b48 <TransmissionErrorCallback+0xa8>)
   10b12:	5ce3      	ldrb	r3, [r4, r3]
   10b14:	34fc      	adds	r4, #252	; 0xfc
   10b16:	4359      	muls	r1, r3
   10b18:	4b0c      	ldr	r3, [pc, #48]	; (10b4c <TransmissionErrorCallback+0xac>)
   10b1a:	7820      	ldrb	r0, [r4, #0]
   10b1c:	18c9      	adds	r1, r1, r3
   10b1e:	9200      	str	r2, [sp, #0]
   10b20:	4b0b      	ldr	r3, [pc, #44]	; (10b50 <TransmissionErrorCallback+0xb0>)
   10b22:	4c0c      	ldr	r4, [pc, #48]	; (10b54 <TransmissionErrorCallback+0xb4>)
   10b24:	47a0      	blx	r4
   10b26:	b00b      	add	sp, #44	; 0x2c
   10b28:	bd30      	pop	{r4, r5, pc}
   10b2a:	46c0      	nop			; (mov r8, r8)
   10b2c:	20003170 	.word	0x20003170
   10b30:	0000cb75 	.word	0x0000cb75
   10b34:	0000f471 	.word	0x0000f471
   10b38:	000108d9 	.word	0x000108d9
   10b3c:	200033c8 	.word	0x200033c8
   10b40:	0000eb95 	.word	0x0000eb95
   10b44:	0000022b 	.word	0x0000022b
   10b48:	fffffc18 	.word	0xfffffc18
   10b4c:	001e8480 	.word	0x001e8480
   10b50:	00010aa1 	.word	0x00010aa1
   10b54:	0000d0bd 	.word	0x0000d0bd

00010b58 <UnconfirmedTransmissionCallback>:
   10b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b5a:	4c3a      	ldr	r4, [pc, #232]	; (10c44 <UnconfirmedTransmissionCallback+0xec>)
   10b5c:	b08b      	sub	sp, #44	; 0x2c
   10b5e:	0023      	movs	r3, r4
   10b60:	33ce      	adds	r3, #206	; 0xce
   10b62:	881b      	ldrh	r3, [r3, #0]
   10b64:	af05      	add	r7, sp, #20
   10b66:	703b      	strb	r3, [r7, #0]
   10b68:	4b37      	ldr	r3, [pc, #220]	; (10c48 <UnconfirmedTransmissionCallback+0xf0>)
   10b6a:	a903      	add	r1, sp, #12
   10b6c:	9306      	str	r3, [sp, #24]
   10b6e:	2301      	movs	r3, #1
   10b70:	700b      	strb	r3, [r1, #0]
   10b72:	0023      	movs	r3, r4
   10b74:	0026      	movs	r6, r4
   10b76:	33e9      	adds	r3, #233	; 0xe9
   10b78:	781b      	ldrb	r3, [r3, #0]
   10b7a:	36e7      	adds	r6, #231	; 0xe7
   10b7c:	704b      	strb	r3, [r1, #1]
   10b7e:	7833      	ldrb	r3, [r6, #0]
   10b80:	aa07      	add	r2, sp, #28
   10b82:	202e      	movs	r0, #46	; 0x2e
   10b84:	4d31      	ldr	r5, [pc, #196]	; (10c4c <UnconfirmedTransmissionCallback+0xf4>)
   10b86:	708b      	strb	r3, [r1, #2]
   10b88:	47a8      	blx	r5
   10b8a:	2808      	cmp	r0, #8
   10b8c:	d12b      	bne.n	10be6 <UnconfirmedTransmissionCallback+0x8e>
   10b8e:	2301      	movs	r3, #1
   10b90:	a804      	add	r0, sp, #16
   10b92:	7003      	strb	r3, [r0, #0]
   10b94:	4b2e      	ldr	r3, [pc, #184]	; (10c50 <UnconfirmedTransmissionCallback+0xf8>)
   10b96:	4798      	blx	r3
   10b98:	9807      	ldr	r0, [sp, #28]
   10b9a:	4b2e      	ldr	r3, [pc, #184]	; (10c54 <UnconfirmedTransmissionCallback+0xfc>)
   10b9c:	9908      	ldr	r1, [sp, #32]
   10b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ba0:	4798      	blx	r3
   10ba2:	0038      	movs	r0, r7
   10ba4:	4b2c      	ldr	r3, [pc, #176]	; (10c58 <UnconfirmedTransmissionCallback+0x100>)
   10ba6:	4798      	blx	r3
   10ba8:	2800      	cmp	r0, #0
   10baa:	d01a      	beq.n	10be2 <UnconfirmedTransmissionCallback+0x8a>
   10bac:	0023      	movs	r3, r4
   10bae:	33fd      	adds	r3, #253	; 0xfd
   10bb0:	781b      	ldrb	r3, [r3, #0]
   10bb2:	2b01      	cmp	r3, #1
   10bb4:	d108      	bne.n	10bc8 <UnconfirmedTransmissionCallback+0x70>
   10bb6:	0021      	movs	r1, r4
   10bb8:	220e      	movs	r2, #14
   10bba:	3184      	adds	r1, #132	; 0x84
   10bbc:	780b      	ldrb	r3, [r1, #0]
   10bbe:	4393      	bics	r3, r2
   10bc0:	001a      	movs	r2, r3
   10bc2:	230c      	movs	r3, #12
   10bc4:	4313      	orrs	r3, r2
   10bc6:	700b      	strb	r3, [r1, #0]
   10bc8:	2200      	movs	r2, #0
   10bca:	4b24      	ldr	r3, [pc, #144]	; (10c5c <UnconfirmedTransmissionCallback+0x104>)
   10bcc:	4924      	ldr	r1, [pc, #144]	; (10c60 <UnconfirmedTransmissionCallback+0x108>)
   10bce:	5ce3      	ldrb	r3, [r4, r3]
   10bd0:	34fc      	adds	r4, #252	; 0xfc
   10bd2:	4359      	muls	r1, r3
   10bd4:	4b23      	ldr	r3, [pc, #140]	; (10c64 <UnconfirmedTransmissionCallback+0x10c>)
   10bd6:	7820      	ldrb	r0, [r4, #0]
   10bd8:	18c9      	adds	r1, r1, r3
   10bda:	4b23      	ldr	r3, [pc, #140]	; (10c68 <UnconfirmedTransmissionCallback+0x110>)
   10bdc:	9200      	str	r2, [sp, #0]
   10bde:	4c23      	ldr	r4, [pc, #140]	; (10c6c <UnconfirmedTransmissionCallback+0x114>)
   10be0:	47a0      	blx	r4
   10be2:	b00b      	add	sp, #44	; 0x2c
   10be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10be6:	4b22      	ldr	r3, [pc, #136]	; (10c70 <UnconfirmedTransmissionCallback+0x118>)
   10be8:	4798      	blx	r3
   10bea:	4b22      	ldr	r3, [pc, #136]	; (10c74 <UnconfirmedTransmissionCallback+0x11c>)
   10bec:	4922      	ldr	r1, [pc, #136]	; (10c78 <UnconfirmedTransmissionCallback+0x120>)
   10bee:	4798      	blx	r3
   10bf0:	23fa      	movs	r3, #250	; 0xfa
   10bf2:	009b      	lsls	r3, r3, #2
   10bf4:	18c9      	adds	r1, r1, r3
   10bf6:	0023      	movs	r3, r4
   10bf8:	9104      	str	r1, [sp, #16]
   10bfa:	33ff      	adds	r3, #255	; 0xff
   10bfc:	7f5b      	ldrb	r3, [r3, #29]
   10bfe:	079a      	lsls	r2, r3, #30
   10c00:	d515      	bpl.n	10c2e <UnconfirmedTransmissionCallback+0xd6>
   10c02:	aa04      	add	r2, sp, #16
   10c04:	0031      	movs	r1, r6
   10c06:	2026      	movs	r0, #38	; 0x26
   10c08:	47a8      	blx	r5
   10c0a:	9b04      	ldr	r3, [sp, #16]
   10c0c:	1c5a      	adds	r2, r3, #1
   10c0e:	d001      	beq.n	10c14 <UnconfirmedTransmissionCallback+0xbc>
   10c10:	3314      	adds	r3, #20
   10c12:	9304      	str	r3, [sp, #16]
   10c14:	4b11      	ldr	r3, [pc, #68]	; (10c5c <UnconfirmedTransmissionCallback+0x104>)
   10c16:	9a04      	ldr	r2, [sp, #16]
   10c18:	5ce3      	ldrb	r3, [r4, r3]
   10c1a:	21fa      	movs	r1, #250	; 0xfa
   10c1c:	1ad3      	subs	r3, r2, r3
   10c1e:	2200      	movs	r2, #0
   10c20:	0089      	lsls	r1, r1, #2
   10c22:	34f2      	adds	r4, #242	; 0xf2
   10c24:	4359      	muls	r1, r3
   10c26:	7820      	ldrb	r0, [r4, #0]
   10c28:	4b14      	ldr	r3, [pc, #80]	; (10c7c <UnconfirmedTransmissionCallback+0x124>)
   10c2a:	9200      	str	r2, [sp, #0]
   10c2c:	e7d7      	b.n	10bde <UnconfirmedTransmissionCallback+0x86>
   10c2e:	075b      	lsls	r3, r3, #29
   10c30:	d5f0      	bpl.n	10c14 <UnconfirmedTransmissionCallback+0xbc>
   10c32:	aa04      	add	r2, sp, #16
   10c34:	0031      	movs	r1, r6
   10c36:	2032      	movs	r0, #50	; 0x32
   10c38:	47a8      	blx	r5
   10c3a:	9b04      	ldr	r3, [sp, #16]
   10c3c:	1c5a      	adds	r2, r3, #1
   10c3e:	d0e9      	beq.n	10c14 <UnconfirmedTransmissionCallback+0xbc>
   10c40:	3301      	adds	r3, #1
   10c42:	e7e6      	b.n	10c12 <UnconfirmedTransmissionCallback+0xba>
   10c44:	20003170 	.word	0x20003170
   10c48:	200033c8 	.word	0x200033c8
   10c4c:	0000cb75 	.word	0x0000cb75
   10c50:	0000f471 	.word	0x0000f471
   10c54:	000108d9 	.word	0x000108d9
   10c58:	0000eb95 	.word	0x0000eb95
   10c5c:	0000022b 	.word	0x0000022b
   10c60:	fffffc18 	.word	0xfffffc18
   10c64:	001e8480 	.word	0x001e8480
   10c68:	00010aa1 	.word	0x00010aa1
   10c6c:	0000d0bd 	.word	0x0000d0bd
   10c70:	00016e3d 	.word	0x00016e3d
   10c74:	00013775 	.word	0x00013775
   10c78:	000007d1 	.word	0x000007d1
   10c7c:	00010b59 	.word	0x00010b59

00010c80 <EncryptFRMPayload>:
   10c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c82:	0007      	movs	r7, r0
   10c84:	2401      	movs	r4, #1
   10c86:	b089      	sub	sp, #36	; 0x24
   10c88:	9306      	str	r3, [sp, #24]
   10c8a:	ab10      	add	r3, sp, #64	; 0x40
   10c8c:	881d      	ldrh	r5, [r3, #0]
   10c8e:	090b      	lsrs	r3, r1, #4
   10c90:	9104      	str	r1, [sp, #16]
   10c92:	9205      	str	r2, [sp, #20]
   10c94:	9303      	str	r3, [sp, #12]
   10c96:	9b03      	ldr	r3, [sp, #12]
   10c98:	429c      	cmp	r4, r3
   10c9a:	d907      	bls.n	10cac <EncryptFRMPayload+0x2c>
   10c9c:	260f      	movs	r6, #15
   10c9e:	9b04      	ldr	r3, [sp, #16]
   10ca0:	4033      	ands	r3, r6
   10ca2:	1e1e      	subs	r6, r3, #0
   10ca4:	d126      	bne.n	10cf4 <EncryptFRMPayload+0x74>
   10ca6:	2000      	movs	r0, #0
   10ca8:	b009      	add	sp, #36	; 0x24
   10caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10cae:	0022      	movs	r2, r4
   10cb0:	9300      	str	r3, [sp, #0]
   10cb2:	9906      	ldr	r1, [sp, #24]
   10cb4:	2301      	movs	r3, #1
   10cb6:	9805      	ldr	r0, [sp, #20]
   10cb8:	4e1e      	ldr	r6, [pc, #120]	; (10d34 <EncryptFRMPayload+0xb4>)
   10cba:	47b0      	blx	r6
   10cbc:	4e1e      	ldr	r6, [pc, #120]	; (10d38 <EncryptFRMPayload+0xb8>)
   10cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10cc0:	2101      	movs	r1, #1
   10cc2:	0030      	movs	r0, r6
   10cc4:	4b1d      	ldr	r3, [pc, #116]	; (10d3c <EncryptFRMPayload+0xbc>)
   10cc6:	4798      	blx	r3
   10cc8:	2800      	cmp	r0, #0
   10cca:	d1ed      	bne.n	10ca8 <EncryptFRMPayload+0x28>
   10ccc:	1e63      	subs	r3, r4, #1
   10cce:	011b      	lsls	r3, r3, #4
   10cd0:	18fb      	adds	r3, r7, r3
   10cd2:	9307      	str	r3, [sp, #28]
   10cd4:	9b07      	ldr	r3, [sp, #28]
   10cd6:	182a      	adds	r2, r5, r0
   10cd8:	5c19      	ldrb	r1, [r3, r0]
   10cda:	5d83      	ldrb	r3, [r0, r6]
   10cdc:	b292      	uxth	r2, r2
   10cde:	4059      	eors	r1, r3
   10ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ce2:	3001      	adds	r0, #1
   10ce4:	5499      	strb	r1, [r3, r2]
   10ce6:	2810      	cmp	r0, #16
   10ce8:	d1f4      	bne.n	10cd4 <EncryptFRMPayload+0x54>
   10cea:	3510      	adds	r5, #16
   10cec:	3401      	adds	r4, #1
   10cee:	b2ad      	uxth	r5, r5
   10cf0:	b2e4      	uxtb	r4, r4
   10cf2:	e7d0      	b.n	10c96 <EncryptFRMPayload+0x16>
   10cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10cf6:	0022      	movs	r2, r4
   10cf8:	9300      	str	r3, [sp, #0]
   10cfa:	9906      	ldr	r1, [sp, #24]
   10cfc:	2301      	movs	r3, #1
   10cfe:	9805      	ldr	r0, [sp, #20]
   10d00:	4c0c      	ldr	r4, [pc, #48]	; (10d34 <EncryptFRMPayload+0xb4>)
   10d02:	47a0      	blx	r4
   10d04:	4c0c      	ldr	r4, [pc, #48]	; (10d38 <EncryptFRMPayload+0xb8>)
   10d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10d08:	2101      	movs	r1, #1
   10d0a:	0020      	movs	r0, r4
   10d0c:	4b0b      	ldr	r3, [pc, #44]	; (10d3c <EncryptFRMPayload+0xbc>)
   10d0e:	4798      	blx	r3
   10d10:	2800      	cmp	r0, #0
   10d12:	d1c9      	bne.n	10ca8 <EncryptFRMPayload+0x28>
   10d14:	9b03      	ldr	r3, [sp, #12]
   10d16:	011b      	lsls	r3, r3, #4
   10d18:	18fb      	adds	r3, r7, r3
   10d1a:	5d07      	ldrb	r7, [r0, r4]
   10d1c:	5c19      	ldrb	r1, [r3, r0]
   10d1e:	182a      	adds	r2, r5, r0
   10d20:	4079      	eors	r1, r7
   10d22:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10d24:	b292      	uxth	r2, r2
   10d26:	3001      	adds	r0, #1
   10d28:	54b9      	strb	r1, [r7, r2]
   10d2a:	b2c2      	uxtb	r2, r0
   10d2c:	4296      	cmp	r6, r2
   10d2e:	d8f4      	bhi.n	10d1a <EncryptFRMPayload+0x9a>
   10d30:	e7b9      	b.n	10ca6 <EncryptFRMPayload+0x26>
   10d32:	46c0      	nop			; (mov r8, r8)
   10d34:	0000fe99 	.word	0x0000fe99
   10d38:	20001eb5 	.word	0x20001eb5
   10d3c:	00007221 	.word	0x00007221

00010d40 <UpdateTransactionCompleteCbParams>:
   10d40:	2388      	movs	r3, #136	; 0x88
   10d42:	2201      	movs	r2, #1
   10d44:	b570      	push	{r4, r5, r6, lr}
   10d46:	0001      	movs	r1, r0
   10d48:	4c13      	ldr	r4, [pc, #76]	; (10d98 <UpdateTransactionCompleteCbParams+0x58>)
   10d4a:	4814      	ldr	r0, [pc, #80]	; (10d9c <UpdateTransactionCompleteCbParams+0x5c>)
   10d4c:	009b      	lsls	r3, r3, #2
   10d4e:	54e2      	strb	r2, [r4, r3]
   10d50:	7842      	ldrb	r2, [r0, #1]
   10d52:	7803      	ldrb	r3, [r0, #0]
   10d54:	0212      	lsls	r2, r2, #8
   10d56:	431a      	orrs	r2, r3
   10d58:	7883      	ldrb	r3, [r0, #2]
   10d5a:	041b      	lsls	r3, r3, #16
   10d5c:	431a      	orrs	r2, r3
   10d5e:	78c3      	ldrb	r3, [r0, #3]
   10d60:	061b      	lsls	r3, r3, #24
   10d62:	4313      	orrs	r3, r2
   10d64:	d00e      	beq.n	10d84 <UpdateTransactionCompleteCbParams+0x44>
   10d66:	0022      	movs	r2, r4
   10d68:	2504      	movs	r5, #4
   10d6a:	32fc      	adds	r2, #252	; 0xfc
   10d6c:	6890      	ldr	r0, [r2, #8]
   10d6e:	4228      	tst	r0, r5
   10d70:	d008      	beq.n	10d84 <UpdateTransactionCompleteCbParams+0x44>
   10d72:	68d0      	ldr	r0, [r2, #12]
   10d74:	2800      	cmp	r0, #0
   10d76:	d005      	beq.n	10d84 <UpdateTransactionCompleteCbParams+0x44>
   10d78:	0022      	movs	r2, r4
   10d7a:	32ff      	adds	r2, #255	; 0xff
   10d7c:	7451      	strb	r1, [r2, #17]
   10d7e:	7355      	strb	r5, [r2, #13]
   10d80:	4907      	ldr	r1, [pc, #28]	; (10da0 <UpdateTransactionCompleteCbParams+0x60>)
   10d82:	4798      	blx	r3
   10d84:	2388      	movs	r3, #136	; 0x88
   10d86:	009b      	lsls	r3, r3, #2
   10d88:	5ce3      	ldrb	r3, [r4, r3]
   10d8a:	2b00      	cmp	r3, #0
   10d8c:	d002      	beq.n	10d94 <UpdateTransactionCompleteCbParams+0x54>
   10d8e:	2300      	movs	r3, #0
   10d90:	34fc      	adds	r4, #252	; 0xfc
   10d92:	60e3      	str	r3, [r4, #12]
   10d94:	bd70      	pop	{r4, r5, r6, pc}
   10d96:	46c0      	nop			; (mov r8, r8)
   10d98:	20003170 	.word	0x20003170
   10d9c:	200034cc 	.word	0x200034cc
   10da0:	2000327c 	.word	0x2000327c

00010da4 <UpdateRxDataAvailableCbParams>:
   10da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10da6:	4e0f      	ldr	r6, [pc, #60]	; (10de4 <UpdateRxDataAvailableCbParams+0x40>)
   10da8:	469c      	mov	ip, r3
   10daa:	7875      	ldrb	r5, [r6, #1]
   10dac:	7834      	ldrb	r4, [r6, #0]
   10dae:	022d      	lsls	r5, r5, #8
   10db0:	4325      	orrs	r5, r4
   10db2:	78b4      	ldrb	r4, [r6, #2]
   10db4:	0424      	lsls	r4, r4, #16
   10db6:	4325      	orrs	r5, r4
   10db8:	78f4      	ldrb	r4, [r6, #3]
   10dba:	0624      	lsls	r4, r4, #24
   10dbc:	432c      	orrs	r4, r5
   10dbe:	d010      	beq.n	10de2 <UpdateRxDataAvailableCbParams+0x3e>
   10dc0:	4d09      	ldr	r5, [pc, #36]	; (10de8 <UpdateRxDataAvailableCbParams+0x44>)
   10dc2:	2702      	movs	r7, #2
   10dc4:	002e      	movs	r6, r5
   10dc6:	36fc      	adds	r6, #252	; 0xfc
   10dc8:	68b3      	ldr	r3, [r6, #8]
   10dca:	423b      	tst	r3, r7
   10dcc:	d009      	beq.n	10de2 <UpdateRxDataAvailableCbParams+0x3e>
   10dce:	4663      	mov	r3, ip
   10dd0:	35ff      	adds	r5, #255	; 0xff
   10dd2:	6170      	str	r0, [r6, #20]
   10dd4:	61b1      	str	r1, [r6, #24]
   10dd6:	736f      	strb	r7, [r5, #13]
   10dd8:	766a      	strb	r2, [r5, #25]
   10dda:	76ab      	strb	r3, [r5, #26]
   10ddc:	4903      	ldr	r1, [pc, #12]	; (10dec <UpdateRxDataAvailableCbParams+0x48>)
   10dde:	68f0      	ldr	r0, [r6, #12]
   10de0:	47a0      	blx	r4
   10de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10de4:	200034cc 	.word	0x200034cc
   10de8:	20003170 	.word	0x20003170
   10dec:	2000327c 	.word	0x2000327c

00010df0 <LorawanNotifyAppOnRxdone>:
   10df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10df2:	4c25      	ldr	r4, [pc, #148]	; (10e88 <LorawanNotifyAppOnRxdone+0x98>)
   10df4:	0007      	movs	r7, r0
   10df6:	0023      	movs	r3, r4
   10df8:	33fd      	adds	r3, #253	; 0xfd
   10dfa:	781b      	ldrb	r3, [r3, #0]
   10dfc:	000d      	movs	r5, r1
   10dfe:	0016      	movs	r6, r2
   10e00:	2b01      	cmp	r3, #1
   10e02:	d136      	bne.n	10e72 <LorawanNotifyAppOnRxdone+0x82>
   10e04:	0022      	movs	r2, r4
   10e06:	210e      	movs	r1, #14
   10e08:	3284      	adds	r2, #132	; 0x84
   10e0a:	7813      	ldrb	r3, [r2, #0]
   10e0c:	438b      	bics	r3, r1
   10e0e:	7013      	strb	r3, [r2, #0]
   10e10:	491e      	ldr	r1, [pc, #120]	; (10e8c <LorawanNotifyAppOnRxdone+0x9c>)
   10e12:	784a      	ldrb	r2, [r1, #1]
   10e14:	780b      	ldrb	r3, [r1, #0]
   10e16:	0212      	lsls	r2, r2, #8
   10e18:	431a      	orrs	r2, r3
   10e1a:	788b      	ldrb	r3, [r1, #2]
   10e1c:	041b      	lsls	r3, r3, #16
   10e1e:	431a      	orrs	r2, r3
   10e20:	78cb      	ldrb	r3, [r1, #3]
   10e22:	061b      	lsls	r3, r3, #24
   10e24:	4313      	orrs	r3, r2
   10e26:	d023      	beq.n	10e70 <LorawanNotifyAppOnRxdone+0x80>
   10e28:	0022      	movs	r2, r4
   10e2a:	2120      	movs	r1, #32
   10e2c:	3294      	adds	r2, #148	; 0x94
   10e2e:	7813      	ldrb	r3, [r2, #0]
   10e30:	438b      	bics	r3, r1
   10e32:	7013      	strb	r3, [r2, #0]
   10e34:	0023      	movs	r3, r4
   10e36:	33fd      	adds	r3, #253	; 0xfd
   10e38:	781b      	ldrb	r3, [r3, #0]
   10e3a:	7878      	ldrb	r0, [r7, #1]
   10e3c:	469c      	mov	ip, r3
   10e3e:	78fa      	ldrb	r2, [r7, #3]
   10e40:	78b9      	ldrb	r1, [r7, #2]
   10e42:	793b      	ldrb	r3, [r7, #4]
   10e44:	4667      	mov	r7, ip
   10e46:	0209      	lsls	r1, r1, #8
   10e48:	4301      	orrs	r1, r0
   10e4a:	0410      	lsls	r0, r2, #16
   10e4c:	4308      	orrs	r0, r1
   10e4e:	061b      	lsls	r3, r3, #24
   10e50:	4318      	orrs	r0, r3
   10e52:	0032      	movs	r2, r6
   10e54:	2308      	movs	r3, #8
   10e56:	0029      	movs	r1, r5
   10e58:	2f04      	cmp	r7, #4
   10e5a:	d112      	bne.n	10e82 <LorawanNotifyAppOnRxdone+0x92>
   10e5c:	4d0c      	ldr	r5, [pc, #48]	; (10e90 <LorawanNotifyAppOnRxdone+0xa0>)
   10e5e:	47a8      	blx	r5
   10e60:	2388      	movs	r3, #136	; 0x88
   10e62:	009b      	lsls	r3, r3, #2
   10e64:	5ce3      	ldrb	r3, [r4, r3]
   10e66:	2b00      	cmp	r3, #0
   10e68:	d102      	bne.n	10e70 <LorawanNotifyAppOnRxdone+0x80>
   10e6a:	2008      	movs	r0, #8
   10e6c:	4b09      	ldr	r3, [pc, #36]	; (10e94 <LorawanNotifyAppOnRxdone+0xa4>)
   10e6e:	4798      	blx	r3
   10e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e72:	2b04      	cmp	r3, #4
   10e74:	d1cc      	bne.n	10e10 <LorawanNotifyAppOnRxdone+0x20>
   10e76:	0023      	movs	r3, r4
   10e78:	33f1      	adds	r3, #241	; 0xf1
   10e7a:	7818      	ldrb	r0, [r3, #0]
   10e7c:	4b06      	ldr	r3, [pc, #24]	; (10e98 <LorawanNotifyAppOnRxdone+0xa8>)
   10e7e:	4798      	blx	r3
   10e80:	e7c6      	b.n	10e10 <LorawanNotifyAppOnRxdone+0x20>
   10e82:	4d06      	ldr	r5, [pc, #24]	; (10e9c <LorawanNotifyAppOnRxdone+0xac>)
   10e84:	47a8      	blx	r5
   10e86:	e7eb      	b.n	10e60 <LorawanNotifyAppOnRxdone+0x70>
   10e88:	20003170 	.word	0x20003170
   10e8c:	200034cc 	.word	0x200034cc
   10e90:	00012d49 	.word	0x00012d49
   10e94:	00010d41 	.word	0x00010d41
   10e98:	0000d3d5 	.word	0x0000d3d5
   10e9c:	00010da5 	.word	0x00010da5

00010ea0 <LorawanSetReceiveWindow2Parameters>:
   10ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10ea2:	466b      	mov	r3, sp
   10ea4:	1cdd      	adds	r5, r3, #3
   10ea6:	9001      	str	r0, [sp, #4]
   10ea8:	7029      	strb	r1, [r5, #0]
   10eaa:	2001      	movs	r0, #1
   10eac:	a901      	add	r1, sp, #4
   10eae:	4c09      	ldr	r4, [pc, #36]	; (10ed4 <LorawanSetReceiveWindow2Parameters+0x34>)
   10eb0:	47a0      	blx	r4
   10eb2:	2808      	cmp	r0, #8
   10eb4:	d002      	beq.n	10ebc <LorawanSetReceiveWindow2Parameters+0x1c>
   10eb6:	240a      	movs	r4, #10
   10eb8:	0020      	movs	r0, r4
   10eba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10ebc:	0029      	movs	r1, r5
   10ebe:	200f      	movs	r0, #15
   10ec0:	47a0      	blx	r4
   10ec2:	0004      	movs	r4, r0
   10ec4:	2808      	cmp	r0, #8
   10ec6:	d1f6      	bne.n	10eb6 <LorawanSetReceiveWindow2Parameters+0x16>
   10ec8:	7829      	ldrb	r1, [r5, #0]
   10eca:	9801      	ldr	r0, [sp, #4]
   10ecc:	4b02      	ldr	r3, [pc, #8]	; (10ed8 <LorawanSetReceiveWindow2Parameters+0x38>)
   10ece:	4798      	blx	r3
   10ed0:	e7f2      	b.n	10eb8 <LorawanSetReceiveWindow2Parameters+0x18>
   10ed2:	46c0      	nop			; (mov r8, r8)
   10ed4:	0000cb91 	.word	0x0000cb91
   10ed8:	00010305 	.word	0x00010305

00010edc <LorawanSetReceiveWindowCParameters>:
   10edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10ede:	466b      	mov	r3, sp
   10ee0:	1cdc      	adds	r4, r3, #3
   10ee2:	9001      	str	r0, [sp, #4]
   10ee4:	7021      	strb	r1, [r4, #0]
   10ee6:	2001      	movs	r0, #1
   10ee8:	a901      	add	r1, sp, #4
   10eea:	4d0d      	ldr	r5, [pc, #52]	; (10f20 <LorawanSetReceiveWindowCParameters+0x44>)
   10eec:	47a8      	blx	r5
   10eee:	2808      	cmp	r0, #8
   10ef0:	d001      	beq.n	10ef6 <LorawanSetReceiveWindowCParameters+0x1a>
   10ef2:	200a      	movs	r0, #10
   10ef4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10ef6:	0021      	movs	r1, r4
   10ef8:	200f      	movs	r0, #15
   10efa:	47a8      	blx	r5
   10efc:	2808      	cmp	r0, #8
   10efe:	d1f8      	bne.n	10ef2 <LorawanSetReceiveWindowCParameters+0x16>
   10f00:	4b08      	ldr	r3, [pc, #32]	; (10f24 <LorawanSetReceiveWindowCParameters+0x48>)
   10f02:	9a01      	ldr	r2, [sp, #4]
   10f04:	0019      	movs	r1, r3
   10f06:	7824      	ldrb	r4, [r4, #0]
   10f08:	3173      	adds	r1, #115	; 0x73
   10f0a:	336f      	adds	r3, #111	; 0x6f
   10f0c:	700c      	strb	r4, [r1, #0]
   10f0e:	0a11      	lsrs	r1, r2, #8
   10f10:	701a      	strb	r2, [r3, #0]
   10f12:	7059      	strb	r1, [r3, #1]
   10f14:	0c11      	lsrs	r1, r2, #16
   10f16:	0e12      	lsrs	r2, r2, #24
   10f18:	7099      	strb	r1, [r3, #2]
   10f1a:	70da      	strb	r2, [r3, #3]
   10f1c:	e7ea      	b.n	10ef4 <LorawanSetReceiveWindowCParameters+0x18>
   10f1e:	46c0      	nop			; (mov r8, r8)
   10f20:	0000cb91 	.word	0x0000cb91
   10f24:	20003170 	.word	0x20003170

00010f28 <LorawanSetFrequency>:
   10f28:	b507      	push	{r0, r1, r2, lr}
   10f2a:	466b      	mov	r3, sp
   10f2c:	9100      	str	r1, [sp, #0]
   10f2e:	7118      	strb	r0, [r3, #4]
   10f30:	4669      	mov	r1, sp
   10f32:	2000      	movs	r0, #0
   10f34:	4b01      	ldr	r3, [pc, #4]	; (10f3c <LorawanSetFrequency+0x14>)
   10f36:	4798      	blx	r3
   10f38:	bd0e      	pop	{r1, r2, r3, pc}
   10f3a:	46c0      	nop			; (mov r8, r8)
   10f3c:	0000cbad 	.word	0x0000cbad

00010f40 <LorawanCheckAndDoRetryOnTimeout>:
   10f40:	b513      	push	{r0, r1, r4, lr}
   10f42:	4c33      	ldr	r4, [pc, #204]	; (11010 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   10f44:	0023      	movs	r3, r4
   10f46:	3394      	adds	r3, #148	; 0x94
   10f48:	781b      	ldrb	r3, [r3, #0]
   10f4a:	0022      	movs	r2, r4
   10f4c:	07db      	lsls	r3, r3, #31
   10f4e:	d54b      	bpl.n	10fe8 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   10f50:	0023      	movs	r3, r4
   10f52:	32e4      	adds	r2, #228	; 0xe4
   10f54:	33e2      	adds	r3, #226	; 0xe2
   10f56:	7812      	ldrb	r2, [r2, #0]
   10f58:	781b      	ldrb	r3, [r3, #0]
   10f5a:	429a      	cmp	r2, r3
   10f5c:	d836      	bhi.n	10fcc <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10f5e:	4b2d      	ldr	r3, [pc, #180]	; (11014 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10f60:	5ce3      	ldrb	r3, [r4, r3]
   10f62:	2b00      	cmp	r3, #0
   10f64:	d032      	beq.n	10fcc <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10f66:	0023      	movs	r3, r4
   10f68:	33fd      	adds	r3, #253	; 0xfd
   10f6a:	781b      	ldrb	r3, [r3, #0]
   10f6c:	2b01      	cmp	r3, #1
   10f6e:	d119      	bne.n	10fa4 <LorawanCheckAndDoRetryOnTimeout+0x64>
   10f70:	0021      	movs	r1, r4
   10f72:	220e      	movs	r2, #14
   10f74:	3184      	adds	r1, #132	; 0x84
   10f76:	780b      	ldrb	r3, [r1, #0]
   10f78:	4393      	bics	r3, r2
   10f7a:	001a      	movs	r2, r3
   10f7c:	230c      	movs	r3, #12
   10f7e:	4313      	orrs	r3, r2
   10f80:	700b      	strb	r3, [r1, #0]
   10f82:	0023      	movs	r3, r4
   10f84:	33da      	adds	r3, #218	; 0xda
   10f86:	8819      	ldrh	r1, [r3, #0]
   10f88:	4b23      	ldr	r3, [pc, #140]	; (11018 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   10f8a:	2200      	movs	r2, #0
   10f8c:	5ce3      	ldrb	r3, [r4, r3]
   10f8e:	34f1      	adds	r4, #241	; 0xf1
   10f90:	1acb      	subs	r3, r1, r3
   10f92:	21fa      	movs	r1, #250	; 0xfa
   10f94:	0089      	lsls	r1, r1, #2
   10f96:	7820      	ldrb	r0, [r4, #0]
   10f98:	4359      	muls	r1, r3
   10f9a:	9200      	str	r2, [sp, #0]
   10f9c:	4b1f      	ldr	r3, [pc, #124]	; (1101c <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   10f9e:	4c20      	ldr	r4, [pc, #128]	; (11020 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   10fa0:	47a0      	blx	r4
   10fa2:	bd13      	pop	{r0, r1, r4, pc}
   10fa4:	2b04      	cmp	r3, #4
   10fa6:	d1fc      	bne.n	10fa2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10fa8:	4b1e      	ldr	r3, [pc, #120]	; (11024 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   10faa:	4798      	blx	r3
   10fac:	34ce      	adds	r4, #206	; 0xce
   10fae:	300d      	adds	r0, #13
   10fb0:	8823      	ldrh	r3, [r4, #0]
   10fb2:	b280      	uxth	r0, r0
   10fb4:	4283      	cmp	r3, r0
   10fb6:	d802      	bhi.n	10fbe <LorawanCheckAndDoRetryOnTimeout+0x7e>
   10fb8:	4b1b      	ldr	r3, [pc, #108]	; (11028 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10fba:	4798      	blx	r3
   10fbc:	e7f1      	b.n	10fa2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10fbe:	200e      	movs	r0, #14
   10fc0:	4b1a      	ldr	r3, [pc, #104]	; (1102c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10fc2:	4798      	blx	r3
   10fc4:	4b1a      	ldr	r3, [pc, #104]	; (11030 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10fc6:	4798      	blx	r3
   10fc8:	4b1a      	ldr	r3, [pc, #104]	; (11034 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10fca:	e7f6      	b.n	10fba <LorawanCheckAndDoRetryOnTimeout+0x7a>
   10fcc:	2012      	movs	r0, #18
   10fce:	4b17      	ldr	r3, [pc, #92]	; (1102c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10fd0:	4798      	blx	r3
   10fd2:	4b17      	ldr	r3, [pc, #92]	; (11030 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10fd4:	4798      	blx	r3
   10fd6:	34fd      	adds	r4, #253	; 0xfd
   10fd8:	4b16      	ldr	r3, [pc, #88]	; (11034 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10fda:	4798      	blx	r3
   10fdc:	7823      	ldrb	r3, [r4, #0]
   10fde:	2b04      	cmp	r3, #4
   10fe0:	d1df      	bne.n	10fa2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10fe2:	4b15      	ldr	r3, [pc, #84]	; (11038 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10fe4:	4798      	blx	r3
   10fe6:	e7dc      	b.n	10fa2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10fe8:	0023      	movs	r3, r4
   10fea:	32e3      	adds	r2, #227	; 0xe3
   10fec:	33e1      	adds	r3, #225	; 0xe1
   10fee:	7812      	ldrb	r2, [r2, #0]
   10ff0:	781b      	ldrb	r3, [r3, #0]
   10ff2:	429a      	cmp	r2, r3
   10ff4:	d803      	bhi.n	10ffe <LorawanCheckAndDoRetryOnTimeout+0xbe>
   10ff6:	4b07      	ldr	r3, [pc, #28]	; (11014 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10ff8:	5ce3      	ldrb	r3, [r4, r3]
   10ffa:	2b00      	cmp	r3, #0
   10ffc:	d1dc      	bne.n	10fb8 <LorawanCheckAndDoRetryOnTimeout+0x78>
   10ffe:	4b0f      	ldr	r3, [pc, #60]	; (1103c <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   11000:	4798      	blx	r3
   11002:	4b0c      	ldr	r3, [pc, #48]	; (11034 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   11004:	4798      	blx	r3
   11006:	2008      	movs	r0, #8
   11008:	4b08      	ldr	r3, [pc, #32]	; (1102c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1100a:	4798      	blx	r3
   1100c:	e7c9      	b.n	10fa2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1100e:	46c0      	nop			; (mov r8, r8)
   11010:	20003170 	.word	0x20003170
   11014:	0000022a 	.word	0x0000022a
   11018:	0000022b 	.word	0x0000022b
   1101c:	00011041 	.word	0x00011041
   11020:	0000d0bd 	.word	0x0000d0bd
   11024:	0000fb0d 	.word	0x0000fb0d
   11028:	00010949 	.word	0x00010949
   1102c:	00010d41 	.word	0x00010d41
   11030:	0001034d 	.word	0x0001034d
   11034:	0000fa89 	.word	0x0000fa89
   11038:	0000eb79 	.word	0x0000eb79
   1103c:	0001037d 	.word	0x0001037d

00011040 <AckRetransmissionCallback>:
   11040:	b510      	push	{r4, lr}
   11042:	4c1c      	ldr	r4, [pc, #112]	; (110b4 <AckRetransmissionCallback+0x74>)
   11044:	0023      	movs	r3, r4
   11046:	3384      	adds	r3, #132	; 0x84
   11048:	781b      	ldrb	r3, [r3, #0]
   1104a:	2b7f      	cmp	r3, #127	; 0x7f
   1104c:	d82d      	bhi.n	110aa <AckRetransmissionCallback+0x6a>
   1104e:	0023      	movs	r3, r4
   11050:	33fd      	adds	r3, #253	; 0xfd
   11052:	781b      	ldrb	r3, [r3, #0]
   11054:	2b04      	cmp	r3, #4
   11056:	d102      	bne.n	1105e <AckRetransmissionCallback+0x1e>
   11058:	4b17      	ldr	r3, [pc, #92]	; (110b8 <AckRetransmissionCallback+0x78>)
   1105a:	4798      	blx	r3
   1105c:	e01e      	b.n	1109c <AckRetransmissionCallback+0x5c>
   1105e:	2b01      	cmp	r3, #1
   11060:	d11c      	bne.n	1109c <AckRetransmissionCallback+0x5c>
   11062:	0022      	movs	r2, r4
   11064:	0023      	movs	r3, r4
   11066:	32e4      	adds	r2, #228	; 0xe4
   11068:	33e2      	adds	r3, #226	; 0xe2
   1106a:	7812      	ldrb	r2, [r2, #0]
   1106c:	781b      	ldrb	r3, [r3, #0]
   1106e:	429a      	cmp	r2, r3
   11070:	d815      	bhi.n	1109e <AckRetransmissionCallback+0x5e>
   11072:	4b12      	ldr	r3, [pc, #72]	; (110bc <AckRetransmissionCallback+0x7c>)
   11074:	5ce3      	ldrb	r3, [r4, r3]
   11076:	2b00      	cmp	r3, #0
   11078:	d011      	beq.n	1109e <AckRetransmissionCallback+0x5e>
   1107a:	4b11      	ldr	r3, [pc, #68]	; (110c0 <AckRetransmissionCallback+0x80>)
   1107c:	4798      	blx	r3
   1107e:	34ce      	adds	r4, #206	; 0xce
   11080:	300d      	adds	r0, #13
   11082:	8823      	ldrh	r3, [r4, #0]
   11084:	b280      	uxth	r0, r0
   11086:	4283      	cmp	r3, r0
   11088:	d801      	bhi.n	1108e <AckRetransmissionCallback+0x4e>
   1108a:	4b0e      	ldr	r3, [pc, #56]	; (110c4 <AckRetransmissionCallback+0x84>)
   1108c:	e7e5      	b.n	1105a <AckRetransmissionCallback+0x1a>
   1108e:	4b0e      	ldr	r3, [pc, #56]	; (110c8 <AckRetransmissionCallback+0x88>)
   11090:	4798      	blx	r3
   11092:	4b0e      	ldr	r3, [pc, #56]	; (110cc <AckRetransmissionCallback+0x8c>)
   11094:	4798      	blx	r3
   11096:	200e      	movs	r0, #14
   11098:	4b0d      	ldr	r3, [pc, #52]	; (110d0 <AckRetransmissionCallback+0x90>)
   1109a:	4798      	blx	r3
   1109c:	bd10      	pop	{r4, pc}
   1109e:	4b0a      	ldr	r3, [pc, #40]	; (110c8 <AckRetransmissionCallback+0x88>)
   110a0:	4798      	blx	r3
   110a2:	4b0a      	ldr	r3, [pc, #40]	; (110cc <AckRetransmissionCallback+0x8c>)
   110a4:	4798      	blx	r3
   110a6:	2012      	movs	r0, #18
   110a8:	e7f6      	b.n	11098 <AckRetransmissionCallback+0x58>
   110aa:	4b07      	ldr	r3, [pc, #28]	; (110c8 <AckRetransmissionCallback+0x88>)
   110ac:	4798      	blx	r3
   110ae:	4b07      	ldr	r3, [pc, #28]	; (110cc <AckRetransmissionCallback+0x8c>)
   110b0:	e7d3      	b.n	1105a <AckRetransmissionCallback+0x1a>
   110b2:	46c0      	nop			; (mov r8, r8)
   110b4:	20003170 	.word	0x20003170
   110b8:	00010f41 	.word	0x00010f41
   110bc:	0000022a 	.word	0x0000022a
   110c0:	0000fb0d 	.word	0x0000fb0d
   110c4:	00010949 	.word	0x00010949
   110c8:	0001034d 	.word	0x0001034d
   110cc:	0000fa89 	.word	0x0000fa89
   110d0:	00010d41 	.word	0x00010d41

000110d4 <LORAWAN_RxTimeout>:
   110d4:	4b24      	ldr	r3, [pc, #144]	; (11168 <LORAWAN_RxTimeout+0x94>)
   110d6:	b510      	push	{r4, lr}
   110d8:	001a      	movs	r2, r3
   110da:	3284      	adds	r2, #132	; 0x84
   110dc:	7812      	ldrb	r2, [r2, #0]
   110de:	b251      	sxtb	r1, r2
   110e0:	2900      	cmp	r1, #0
   110e2:	db27      	blt.n	11134 <LORAWAN_RxTimeout+0x60>
   110e4:	0019      	movs	r1, r3
   110e6:	31fd      	adds	r1, #253	; 0xfd
   110e8:	7809      	ldrb	r1, [r1, #0]
   110ea:	2904      	cmp	r1, #4
   110ec:	d108      	bne.n	11100 <LORAWAN_RxTimeout+0x2c>
   110ee:	3903      	subs	r1, #3
   110f0:	420a      	tst	r2, r1
   110f2:	d005      	beq.n	11100 <LORAWAN_RxTimeout+0x2c>
   110f4:	2290      	movs	r2, #144	; 0x90
   110f6:	0092      	lsls	r2, r2, #2
   110f8:	5499      	strb	r1, [r3, r2]
   110fa:	4b1c      	ldr	r3, [pc, #112]	; (1116c <LORAWAN_RxTimeout+0x98>)
   110fc:	4798      	blx	r3
   110fe:	bd10      	pop	{r4, pc}
   11100:	210e      	movs	r1, #14
   11102:	0010      	movs	r0, r2
   11104:	4008      	ands	r0, r1
   11106:	2806      	cmp	r0, #6
   11108:	d107      	bne.n	1111a <LORAWAN_RxTimeout+0x46>
   1110a:	3384      	adds	r3, #132	; 0x84
   1110c:	781a      	ldrb	r2, [r3, #0]
   1110e:	438a      	bics	r2, r1
   11110:	0011      	movs	r1, r2
   11112:	2208      	movs	r2, #8
   11114:	430a      	orrs	r2, r1
   11116:	701a      	strb	r2, [r3, #0]
   11118:	e7f1      	b.n	110fe <LORAWAN_RxTimeout+0x2a>
   1111a:	2004      	movs	r0, #4
   1111c:	3394      	adds	r3, #148	; 0x94
   1111e:	781b      	ldrb	r3, [r3, #0]
   11120:	4203      	tst	r3, r0
   11122:	d002      	beq.n	1112a <LORAWAN_RxTimeout+0x56>
   11124:	4b12      	ldr	r3, [pc, #72]	; (11170 <LORAWAN_RxTimeout+0x9c>)
   11126:	4798      	blx	r3
   11128:	e7e9      	b.n	110fe <LORAWAN_RxTimeout+0x2a>
   1112a:	07d3      	lsls	r3, r2, #31
   1112c:	d5e7      	bpl.n	110fe <LORAWAN_RxTimeout+0x2a>
   1112e:	4b11      	ldr	r3, [pc, #68]	; (11174 <LORAWAN_RxTimeout+0xa0>)
   11130:	4798      	blx	r3
   11132:	e7e4      	b.n	110fe <LORAWAN_RxTimeout+0x2a>
   11134:	4810      	ldr	r0, [pc, #64]	; (11178 <LORAWAN_RxTimeout+0xa4>)
   11136:	7841      	ldrb	r1, [r0, #1]
   11138:	7802      	ldrb	r2, [r0, #0]
   1113a:	0209      	lsls	r1, r1, #8
   1113c:	4311      	orrs	r1, r2
   1113e:	7882      	ldrb	r2, [r0, #2]
   11140:	0412      	lsls	r2, r2, #16
   11142:	4311      	orrs	r1, r2
   11144:	78c2      	ldrb	r2, [r0, #3]
   11146:	0612      	lsls	r2, r2, #24
   11148:	430a      	orrs	r2, r1
   1114a:	d0d8      	beq.n	110fe <LORAWAN_RxTimeout+0x2a>
   1114c:	2188      	movs	r1, #136	; 0x88
   1114e:	2001      	movs	r0, #1
   11150:	0089      	lsls	r1, r1, #2
   11152:	5458      	strb	r0, [r3, r1]
   11154:	0019      	movs	r1, r3
   11156:	2404      	movs	r4, #4
   11158:	31ff      	adds	r1, #255	; 0xff
   1115a:	33fc      	adds	r3, #252	; 0xfc
   1115c:	734c      	strb	r4, [r1, #13]
   1115e:	7448      	strb	r0, [r1, #17]
   11160:	4906      	ldr	r1, [pc, #24]	; (1117c <LORAWAN_RxTimeout+0xa8>)
   11162:	68d8      	ldr	r0, [r3, #12]
   11164:	4790      	blx	r2
   11166:	e7ca      	b.n	110fe <LORAWAN_RxTimeout+0x2a>
   11168:	20003170 	.word	0x20003170
   1116c:	00012d0d 	.word	0x00012d0d
   11170:	000103a1 	.word	0x000103a1
   11174:	00010f41 	.word	0x00010f41
   11178:	200034cc 	.word	0x200034cc
   1117c:	2000327c 	.word	0x2000327c

00011180 <LorawanConfigureRadioForRX2>:
   11180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11182:	466b      	mov	r3, sp
   11184:	1cdd      	adds	r5, r3, #3
   11186:	2300      	movs	r3, #0
   11188:	702b      	strb	r3, [r5, #0]
   1118a:	2390      	movs	r3, #144	; 0x90
   1118c:	4c29      	ldr	r4, [pc, #164]	; (11234 <LorawanConfigureRadioForRX2+0xb4>)
   1118e:	009b      	lsls	r3, r3, #2
   11190:	5ce1      	ldrb	r1, [r4, r3]
   11192:	0006      	movs	r6, r0
   11194:	0023      	movs	r3, r4
   11196:	2900      	cmp	r1, #0
   11198:	d02f      	beq.n	111fa <LorawanConfigureRadioForRX2+0x7a>
   1119a:	3373      	adds	r3, #115	; 0x73
   1119c:	781b      	ldrb	r3, [r3, #0]
   1119e:	702b      	strb	r3, [r5, #0]
   111a0:	0023      	movs	r3, r4
   111a2:	6f22      	ldr	r2, [r4, #112]	; 0x70
   111a4:	336f      	adds	r3, #111	; 0x6f
   111a6:	781b      	ldrb	r3, [r3, #0]
   111a8:	0211      	lsls	r1, r2, #8
   111aa:	4319      	orrs	r1, r3
   111ac:	7828      	ldrb	r0, [r5, #0]
   111ae:	4b22      	ldr	r3, [pc, #136]	; (11238 <LorawanConfigureRadioForRX2+0xb8>)
   111b0:	4798      	blx	r3
   111b2:	2300      	movs	r3, #0
   111b4:	0022      	movs	r2, r4
   111b6:	af01      	add	r7, sp, #4
   111b8:	703b      	strb	r3, [r7, #0]
   111ba:	32fd      	adds	r2, #253	; 0xfd
   111bc:	7812      	ldrb	r2, [r2, #0]
   111be:	2a04      	cmp	r2, #4
   111c0:	d130      	bne.n	11224 <LorawanConfigureRadioForRX2+0xa4>
   111c2:	0022      	movs	r2, r4
   111c4:	3284      	adds	r2, #132	; 0x84
   111c6:	7812      	ldrb	r2, [r2, #0]
   111c8:	07d2      	lsls	r2, r2, #31
   111ca:	d52b      	bpl.n	11224 <LorawanConfigureRadioForRX2+0xa4>
   111cc:	2290      	movs	r2, #144	; 0x90
   111ce:	0092      	lsls	r2, r2, #2
   111d0:	5ca2      	ldrb	r2, [r4, r2]
   111d2:	429a      	cmp	r2, r3
   111d4:	d026      	beq.n	11224 <LorawanConfigureRadioForRX2+0xa4>
   111d6:	807b      	strh	r3, [r7, #2]
   111d8:	0038      	movs	r0, r7
   111da:	4b18      	ldr	r3, [pc, #96]	; (1123c <LorawanConfigureRadioForRX2+0xbc>)
   111dc:	4798      	blx	r3
   111de:	1e04      	subs	r4, r0, #0
   111e0:	d00a      	beq.n	111f8 <LorawanConfigureRadioForRX2+0x78>
   111e2:	4b17      	ldr	r3, [pc, #92]	; (11240 <LorawanConfigureRadioForRX2+0xc0>)
   111e4:	4798      	blx	r3
   111e6:	4b17      	ldr	r3, [pc, #92]	; (11244 <LorawanConfigureRadioForRX2+0xc4>)
   111e8:	4798      	blx	r3
   111ea:	4b17      	ldr	r3, [pc, #92]	; (11248 <LorawanConfigureRadioForRX2+0xc8>)
   111ec:	4798      	blx	r3
   111ee:	2e00      	cmp	r6, #0
   111f0:	d002      	beq.n	111f8 <LorawanConfigureRadioForRX2+0x78>
   111f2:	0020      	movs	r0, r4
   111f4:	4b15      	ldr	r3, [pc, #84]	; (1124c <LorawanConfigureRadioForRX2+0xcc>)
   111f6:	4798      	blx	r3
   111f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   111fa:	3394      	adds	r3, #148	; 0x94
   111fc:	781b      	ldrb	r3, [r3, #0]
   111fe:	075b      	lsls	r3, r3, #29
   11200:	d50b      	bpl.n	1121a <LorawanConfigureRadioForRX2+0x9a>
   11202:	002a      	movs	r2, r5
   11204:	2009      	movs	r0, #9
   11206:	4b12      	ldr	r3, [pc, #72]	; (11250 <LorawanConfigureRadioForRX2+0xd0>)
   11208:	4798      	blx	r3
   1120a:	0022      	movs	r2, r4
   1120c:	0023      	movs	r3, r4
   1120e:	326c      	adds	r2, #108	; 0x6c
   11210:	8811      	ldrh	r1, [r2, #0]
   11212:	336a      	adds	r3, #106	; 0x6a
   11214:	881b      	ldrh	r3, [r3, #0]
   11216:	0409      	lsls	r1, r1, #16
   11218:	e7c7      	b.n	111aa <LorawanConfigureRadioForRX2+0x2a>
   1121a:	0023      	movs	r3, r4
   1121c:	336e      	adds	r3, #110	; 0x6e
   1121e:	781b      	ldrb	r3, [r3, #0]
   11220:	702b      	strb	r3, [r5, #0]
   11222:	e7f2      	b.n	1120a <LorawanConfigureRadioForRX2+0x8a>
   11224:	466b      	mov	r3, sp
   11226:	0029      	movs	r1, r5
   11228:	1d9a      	adds	r2, r3, #6
   1122a:	2003      	movs	r0, #3
   1122c:	4b08      	ldr	r3, [pc, #32]	; (11250 <LorawanConfigureRadioForRX2+0xd0>)
   1122e:	4798      	blx	r3
   11230:	e7d2      	b.n	111d8 <LorawanConfigureRadioForRX2+0x58>
   11232:	46c0      	nop			; (mov r8, r8)
   11234:	20003170 	.word	0x20003170
   11238:	0001086d 	.word	0x0001086d
   1123c:	0000f471 	.word	0x0000f471
   11240:	0001034d 	.word	0x0001034d
   11244:	0001037d 	.word	0x0001037d
   11248:	0000fa89 	.word	0x0000fa89
   1124c:	00010d41 	.word	0x00010d41
   11250:	0000cb75 	.word	0x0000cb75

00011254 <SetReceptionNotOkState>:
   11254:	4a0c      	ldr	r2, [pc, #48]	; (11288 <SetReceptionNotOkState+0x34>)
   11256:	b510      	push	{r4, lr}
   11258:	0013      	movs	r3, r2
   1125a:	33fd      	adds	r3, #253	; 0xfd
   1125c:	7819      	ldrb	r1, [r3, #0]
   1125e:	0013      	movs	r3, r2
   11260:	4c0a      	ldr	r4, [pc, #40]	; (1128c <SetReceptionNotOkState+0x38>)
   11262:	3384      	adds	r3, #132	; 0x84
   11264:	2904      	cmp	r1, #4
   11266:	d105      	bne.n	11274 <SetReceptionNotOkState+0x20>
   11268:	2088      	movs	r0, #136	; 0x88
   1126a:	3903      	subs	r1, #3
   1126c:	0080      	lsls	r0, r0, #2
   1126e:	5411      	strb	r1, [r2, r0]
   11270:	3020      	adds	r0, #32
   11272:	5411      	strb	r1, [r2, r0]
   11274:	210e      	movs	r1, #14
   11276:	781a      	ldrb	r2, [r3, #0]
   11278:	2000      	movs	r0, #0
   1127a:	438a      	bics	r2, r1
   1127c:	0011      	movs	r1, r2
   1127e:	220a      	movs	r2, #10
   11280:	430a      	orrs	r2, r1
   11282:	701a      	strb	r2, [r3, #0]
   11284:	47a0      	blx	r4
   11286:	bd10      	pop	{r4, pc}
   11288:	20003170 	.word	0x20003170
   1128c:	00011181 	.word	0x00011181

00011290 <LorawanProcessFcntDown>:
   11290:	b570      	push	{r4, r5, r6, lr}
   11292:	79c3      	ldrb	r3, [r0, #7]
   11294:	7982      	ldrb	r2, [r0, #6]
   11296:	4c1f      	ldr	r4, [pc, #124]	; (11314 <LorawanProcessFcntDown+0x84>)
   11298:	021b      	lsls	r3, r3, #8
   1129a:	4313      	orrs	r3, r2
   1129c:	0022      	movs	r2, r4
   1129e:	218b      	movs	r1, #139	; 0x8b
   112a0:	328c      	adds	r2, #140	; 0x8c
   112a2:	8810      	ldrh	r0, [r2, #0]
   112a4:	0089      	lsls	r1, r1, #2
   112a6:	8013      	strh	r3, [r2, #0]
   112a8:	4298      	cmp	r0, r3
   112aa:	d80f      	bhi.n	112cc <LorawanProcessFcntDown+0x3c>
   112ac:	5c61      	ldrb	r1, [r4, r1]
   112ae:	2900      	cmp	r1, #0
   112b0:	d007      	beq.n	112c2 <LorawanProcessFcntDown+0x32>
   112b2:	2301      	movs	r3, #1
   112b4:	408b      	lsls	r3, r1
   112b6:	6812      	ldr	r2, [r2, #0]
   112b8:	3b01      	subs	r3, #1
   112ba:	421a      	tst	r2, r3
   112bc:	d001      	beq.n	112c2 <LorawanProcessFcntDown+0x32>
   112be:	2008      	movs	r0, #8
   112c0:	bd70      	pop	{r4, r5, r6, pc}
   112c2:	210a      	movs	r1, #10
   112c4:	4b14      	ldr	r3, [pc, #80]	; (11318 <LorawanProcessFcntDown+0x88>)
   112c6:	2001      	movs	r0, #1
   112c8:	4798      	blx	r3
   112ca:	e7f8      	b.n	112be <LorawanProcessFcntDown+0x2e>
   112cc:	0020      	movs	r0, r4
   112ce:	308e      	adds	r0, #142	; 0x8e
   112d0:	8803      	ldrh	r3, [r0, #0]
   112d2:	3301      	adds	r3, #1
   112d4:	8003      	strh	r3, [r0, #0]
   112d6:	5c61      	ldrb	r1, [r4, r1]
   112d8:	2900      	cmp	r1, #0
   112da:	d005      	beq.n	112e8 <LorawanProcessFcntDown+0x58>
   112dc:	2301      	movs	r3, #1
   112de:	408b      	lsls	r3, r1
   112e0:	6812      	ldr	r2, [r2, #0]
   112e2:	3b01      	subs	r3, #1
   112e4:	421a      	tst	r2, r3
   112e6:	d103      	bne.n	112f0 <LorawanProcessFcntDown+0x60>
   112e8:	210a      	movs	r1, #10
   112ea:	2001      	movs	r0, #1
   112ec:	4b0a      	ldr	r3, [pc, #40]	; (11318 <LorawanProcessFcntDown+0x88>)
   112ee:	4798      	blx	r3
   112f0:	0023      	movs	r3, r4
   112f2:	338c      	adds	r3, #140	; 0x8c
   112f4:	681b      	ldr	r3, [r3, #0]
   112f6:	3301      	adds	r3, #1
   112f8:	d1e1      	bne.n	112be <LorawanProcessFcntDown+0x2e>
   112fa:	2501      	movs	r5, #1
   112fc:	3484      	adds	r4, #132	; 0x84
   112fe:	78a3      	ldrb	r3, [r4, #2]
   11300:	432b      	orrs	r3, r5
   11302:	70a3      	strb	r3, [r4, #2]
   11304:	4b05      	ldr	r3, [pc, #20]	; (1131c <LorawanProcessFcntDown+0x8c>)
   11306:	4798      	blx	r3
   11308:	210b      	movs	r1, #11
   1130a:	0028      	movs	r0, r5
   1130c:	4b02      	ldr	r3, [pc, #8]	; (11318 <LorawanProcessFcntDown+0x88>)
   1130e:	4798      	blx	r3
   11310:	200d      	movs	r0, #13
   11312:	e7d5      	b.n	112c0 <LorawanProcessFcntDown+0x30>
   11314:	20003170 	.word	0x20003170
   11318:	0000933d 	.word	0x0000933d
   1131c:	00011255 	.word	0x00011255

00011320 <UpdateCurrentDataRateAfterDataRangeChanges>:
   11320:	4b09      	ldr	r3, [pc, #36]	; (11348 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   11322:	001a      	movs	r2, r3
   11324:	32f4      	adds	r2, #244	; 0xf4
   11326:	7811      	ldrb	r1, [r2, #0]
   11328:	001a      	movs	r2, r3
   1132a:	32e7      	adds	r2, #231	; 0xe7
   1132c:	7810      	ldrb	r0, [r2, #0]
   1132e:	4288      	cmp	r0, r1
   11330:	d900      	bls.n	11334 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   11332:	7011      	strb	r1, [r2, #0]
   11334:	001a      	movs	r2, r3
   11336:	33e7      	adds	r3, #231	; 0xe7
   11338:	32f3      	adds	r2, #243	; 0xf3
   1133a:	7812      	ldrb	r2, [r2, #0]
   1133c:	7819      	ldrb	r1, [r3, #0]
   1133e:	4291      	cmp	r1, r2
   11340:	d200      	bcs.n	11344 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   11342:	701a      	strb	r2, [r3, #0]
   11344:	4770      	bx	lr
   11346:	46c0      	nop			; (mov r8, r8)
   11348:	20003170 	.word	0x20003170

0001134c <ExecuteNewChannel>:
   1134c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1134e:	b08d      	sub	sp, #52	; 0x34
   11350:	7807      	ldrb	r7, [r0, #0]
   11352:	ab02      	add	r3, sp, #8
   11354:	0006      	movs	r6, r0
   11356:	71df      	strb	r7, [r3, #7]
   11358:	1c41      	adds	r1, r0, #1
   1135a:	4b59      	ldr	r3, [pc, #356]	; (114c0 <ExecuteNewChannel+0x174>)
   1135c:	2204      	movs	r2, #4
   1135e:	a808      	add	r0, sp, #32
   11360:	4798      	blx	r3
   11362:	9b08      	ldr	r3, [sp, #32]
   11364:	4c57      	ldr	r4, [pc, #348]	; (114c4 <ExecuteNewChannel+0x178>)
   11366:	021d      	lsls	r5, r3, #8
   11368:	2364      	movs	r3, #100	; 0x64
   1136a:	0a2d      	lsrs	r5, r5, #8
   1136c:	435d      	muls	r5, r3
   1136e:	1d73      	adds	r3, r6, #5
   11370:	9301      	str	r3, [sp, #4]
   11372:	0023      	movs	r3, r4
   11374:	9508      	str	r5, [sp, #32]
   11376:	33ff      	adds	r3, #255	; 0xff
   11378:	781b      	ldrb	r3, [r3, #0]
   1137a:	3b02      	subs	r3, #2
   1137c:	2b01      	cmp	r3, #1
   1137e:	d800      	bhi.n	11382 <ExecuteNewChannel+0x36>
   11380:	e092      	b.n	114a8 <ExecuteNewChannel+0x15c>
   11382:	7933      	ldrb	r3, [r6, #4]
   11384:	a904      	add	r1, sp, #16
   11386:	9300      	str	r3, [sp, #0]
   11388:	2300      	movs	r3, #0
   1138a:	2015      	movs	r0, #21
   1138c:	4e4e      	ldr	r6, [pc, #312]	; (114c8 <ExecuteNewChannel+0x17c>)
   1138e:	700f      	strb	r7, [r1, #0]
   11390:	704b      	strb	r3, [r1, #1]
   11392:	47b0      	blx	r6
   11394:	2808      	cmp	r0, #8
   11396:	d12b      	bne.n	113f0 <ExecuteNewChannel+0xa4>
   11398:	466a      	mov	r2, sp
   1139a:	ab02      	add	r3, sp, #8
   1139c:	79db      	ldrb	r3, [r3, #7]
   1139e:	7812      	ldrb	r2, [r2, #0]
   113a0:	af06      	add	r7, sp, #24
   113a2:	a90a      	add	r1, sp, #40	; 0x28
   113a4:	3806      	subs	r0, #6
   113a6:	703b      	strb	r3, [r7, #0]
   113a8:	707a      	strb	r2, [r7, #1]
   113aa:	710b      	strb	r3, [r1, #4]
   113ac:	950a      	str	r5, [sp, #40]	; 0x28
   113ae:	47b0      	blx	r6
   113b0:	2808      	cmp	r0, #8
   113b2:	d001      	beq.n	113b8 <ExecuteNewChannel+0x6c>
   113b4:	2d00      	cmp	r5, #0
   113b6:	d10b      	bne.n	113d0 <ExecuteNewChannel+0x84>
   113b8:	0023      	movs	r3, r4
   113ba:	33e0      	adds	r3, #224	; 0xe0
   113bc:	781a      	ldrb	r2, [r3, #0]
   113be:	2303      	movs	r3, #3
   113c0:	4353      	muls	r3, r2
   113c2:	2280      	movs	r2, #128	; 0x80
   113c4:	18e3      	adds	r3, r4, r3
   113c6:	3398      	adds	r3, #152	; 0x98
   113c8:	7899      	ldrb	r1, [r3, #2]
   113ca:	4252      	negs	r2, r2
   113cc:	430a      	orrs	r2, r1
   113ce:	709a      	strb	r2, [r3, #2]
   113d0:	0039      	movs	r1, r7
   113d2:	2012      	movs	r0, #18
   113d4:	47b0      	blx	r6
   113d6:	2808      	cmp	r0, #8
   113d8:	d10a      	bne.n	113f0 <ExecuteNewChannel+0xa4>
   113da:	0023      	movs	r3, r4
   113dc:	33e0      	adds	r3, #224	; 0xe0
   113de:	781a      	ldrb	r2, [r3, #0]
   113e0:	2303      	movs	r3, #3
   113e2:	4353      	muls	r3, r2
   113e4:	2240      	movs	r2, #64	; 0x40
   113e6:	18e3      	adds	r3, r4, r3
   113e8:	3398      	adds	r3, #152	; 0x98
   113ea:	7899      	ldrb	r1, [r3, #2]
   113ec:	430a      	orrs	r2, r1
   113ee:	709a      	strb	r2, [r3, #2]
   113f0:	0023      	movs	r3, r4
   113f2:	33e0      	adds	r3, #224	; 0xe0
   113f4:	781a      	ldrb	r2, [r3, #0]
   113f6:	2303      	movs	r3, #3
   113f8:	4353      	muls	r3, r2
   113fa:	18e3      	adds	r3, r4, r3
   113fc:	3398      	adds	r3, #152	; 0x98
   113fe:	789b      	ldrb	r3, [r3, #2]
   11400:	09da      	lsrs	r2, r3, #7
   11402:	2a01      	cmp	r2, #1
   11404:	d150      	bne.n	114a8 <ExecuteNewChannel+0x15c>
   11406:	065b      	lsls	r3, r3, #25
   11408:	d54e      	bpl.n	114a8 <ExecuteNewChannel+0x15c>
   1140a:	4e30      	ldr	r6, [pc, #192]	; (114cc <ExecuteNewChannel+0x180>)
   1140c:	2d00      	cmp	r5, #0
   1140e:	d04e      	beq.n	114ae <ExecuteNewChannel+0x162>
   11410:	a906      	add	r1, sp, #24
   11412:	2012      	movs	r0, #18
   11414:	47b0      	blx	r6
   11416:	ad07      	add	r5, sp, #28
   11418:	a90a      	add	r1, sp, #40	; 0x28
   1141a:	2000      	movs	r0, #0
   1141c:	47b0      	blx	r6
   1141e:	002a      	movs	r2, r5
   11420:	2100      	movs	r1, #0
   11422:	2014      	movs	r0, #20
   11424:	4f2a      	ldr	r7, [pc, #168]	; (114d0 <ExecuteNewChannel+0x184>)
   11426:	47b8      	blx	r7
   11428:	0023      	movs	r3, r4
   1142a:	782a      	ldrb	r2, [r5, #0]
   1142c:	33f3      	adds	r3, #243	; 0xf3
   1142e:	701a      	strb	r2, [r3, #0]
   11430:	0023      	movs	r3, r4
   11432:	786a      	ldrb	r2, [r5, #1]
   11434:	33f4      	adds	r3, #244	; 0xf4
   11436:	701a      	strb	r2, [r3, #0]
   11438:	34ff      	adds	r4, #255	; 0xff
   1143a:	4b26      	ldr	r3, [pc, #152]	; (114d4 <ExecuteNewChannel+0x188>)
   1143c:	4798      	blx	r3
   1143e:	7f63      	ldrb	r3, [r4, #29]
   11440:	079b      	lsls	r3, r3, #30
   11442:	d50e      	bpl.n	11462 <ExecuteNewChannel+0x116>
   11444:	2416      	movs	r4, #22
   11446:	ab02      	add	r3, sp, #8
   11448:	18e4      	adds	r4, r4, r3
   1144a:	1dd9      	adds	r1, r3, #7
   1144c:	0022      	movs	r2, r4
   1144e:	201e      	movs	r0, #30
   11450:	47b8      	blx	r7
   11452:	ab02      	add	r3, sp, #8
   11454:	79db      	ldrb	r3, [r3, #7]
   11456:	a909      	add	r1, sp, #36	; 0x24
   11458:	708b      	strb	r3, [r1, #2]
   1145a:	8823      	ldrh	r3, [r4, #0]
   1145c:	201e      	movs	r0, #30
   1145e:	800b      	strh	r3, [r1, #0]
   11460:	47b0      	blx	r6
   11462:	ab02      	add	r3, sp, #8
   11464:	79db      	ldrb	r3, [r3, #7]
   11466:	a905      	add	r1, sp, #20
   11468:	700b      	strb	r3, [r1, #0]
   1146a:	2301      	movs	r3, #1
   1146c:	2016      	movs	r0, #22
   1146e:	704b      	strb	r3, [r1, #1]
   11470:	4b16      	ldr	r3, [pc, #88]	; (114cc <ExecuteNewChannel+0x180>)
   11472:	4798      	blx	r3
   11474:	ad09      	add	r5, sp, #36	; 0x24
   11476:	2100      	movs	r1, #0
   11478:	002a      	movs	r2, r5
   1147a:	4b15      	ldr	r3, [pc, #84]	; (114d0 <ExecuteNewChannel+0x184>)
   1147c:	2014      	movs	r0, #20
   1147e:	4798      	blx	r3
   11480:	4c10      	ldr	r4, [pc, #64]	; (114c4 <ExecuteNewChannel+0x178>)
   11482:	782a      	ldrb	r2, [r5, #0]
   11484:	0023      	movs	r3, r4
   11486:	33f3      	adds	r3, #243	; 0xf3
   11488:	701a      	strb	r2, [r3, #0]
   1148a:	0023      	movs	r3, r4
   1148c:	786a      	ldrb	r2, [r5, #1]
   1148e:	33f4      	adds	r3, #244	; 0xf4
   11490:	701a      	strb	r2, [r3, #0]
   11492:	4b10      	ldr	r3, [pc, #64]	; (114d4 <ExecuteNewChannel+0x188>)
   11494:	4798      	blx	r3
   11496:	2304      	movs	r3, #4
   11498:	3484      	adds	r4, #132	; 0x84
   1149a:	7862      	ldrb	r2, [r4, #1]
   1149c:	210b      	movs	r1, #11
   1149e:	4313      	orrs	r3, r2
   114a0:	7063      	strb	r3, [r4, #1]
   114a2:	2001      	movs	r0, #1
   114a4:	4b0c      	ldr	r3, [pc, #48]	; (114d8 <ExecuteNewChannel+0x18c>)
   114a6:	4798      	blx	r3
   114a8:	9801      	ldr	r0, [sp, #4]
   114aa:	b00d      	add	sp, #52	; 0x34
   114ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114ae:	ab02      	add	r3, sp, #8
   114b0:	79db      	ldrb	r3, [r3, #7]
   114b2:	a905      	add	r1, sp, #20
   114b4:	2016      	movs	r0, #22
   114b6:	700b      	strb	r3, [r1, #0]
   114b8:	704d      	strb	r5, [r1, #1]
   114ba:	47b0      	blx	r6
   114bc:	e7da      	b.n	11474 <ExecuteNewChannel+0x128>
   114be:	46c0      	nop			; (mov r8, r8)
   114c0:	000166f7 	.word	0x000166f7
   114c4:	20003170 	.word	0x20003170
   114c8:	0000cb91 	.word	0x0000cb91
   114cc:	0000cbad 	.word	0x0000cbad
   114d0:	0000cb75 	.word	0x0000cb75
   114d4:	00011321 	.word	0x00011321
   114d8:	0000933d 	.word	0x0000933d

000114dc <MacExecuteCommands>:
   114dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   114de:	1843      	adds	r3, r0, r1
   114e0:	b087      	sub	sp, #28
   114e2:	9301      	str	r3, [sp, #4]
   114e4:	2300      	movs	r3, #0
   114e6:	0007      	movs	r7, r0
   114e8:	2501      	movs	r5, #1
   114ea:	9302      	str	r3, [sp, #8]
   114ec:	9b01      	ldr	r3, [sp, #4]
   114ee:	4e71      	ldr	r6, [pc, #452]	; (116b4 <MacExecuteCommands+0x1d8>)
   114f0:	429f      	cmp	r7, r3
   114f2:	d362      	bcc.n	115ba <MacExecuteCommands+0xde>
   114f4:	4b70      	ldr	r3, [pc, #448]	; (116b8 <MacExecuteCommands+0x1dc>)
   114f6:	5cf3      	ldrb	r3, [r6, r3]
   114f8:	2b00      	cmp	r3, #0
   114fa:	d000      	beq.n	114fe <MacExecuteCommands+0x22>
   114fc:	e08f      	b.n	1161e <MacExecuteCommands+0x142>
   114fe:	0038      	movs	r0, r7
   11500:	b007      	add	sp, #28
   11502:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11504:	0032      	movs	r2, r6
   11506:	7879      	ldrb	r1, [r7, #1]
   11508:	32e5      	adds	r2, #229	; 0xe5
   1150a:	7011      	strb	r1, [r2, #0]
   1150c:	0032      	movs	r2, r6
   1150e:	78b9      	ldrb	r1, [r7, #2]
   11510:	32e6      	adds	r2, #230	; 0xe6
   11512:	1cfc      	adds	r4, r7, #3
   11514:	7011      	strb	r1, [r2, #0]
   11516:	2203      	movs	r2, #3
   11518:	4353      	muls	r3, r2
   1151a:	18f3      	adds	r3, r6, r3
   1151c:	3399      	adds	r3, #153	; 0x99
   1151e:	32fc      	adds	r2, #252	; 0xfc
   11520:	701a      	strb	r2, [r3, #0]
   11522:	e020      	b.n	11566 <MacExecuteCommands+0x8a>
   11524:	0020      	movs	r0, r4
   11526:	4b65      	ldr	r3, [pc, #404]	; (116bc <MacExecuteCommands+0x1e0>)
   11528:	4798      	blx	r3
   1152a:	0004      	movs	r4, r0
   1152c:	e01b      	b.n	11566 <MacExecuteCommands+0x8a>
   1152e:	0020      	movs	r0, r4
   11530:	4b63      	ldr	r3, [pc, #396]	; (116c0 <MacExecuteCommands+0x1e4>)
   11532:	e7f9      	b.n	11528 <MacExecuteCommands+0x4c>
   11534:	0020      	movs	r0, r4
   11536:	4b63      	ldr	r3, [pc, #396]	; (116c4 <MacExecuteCommands+0x1e8>)
   11538:	e7f6      	b.n	11528 <MacExecuteCommands+0x4c>
   1153a:	0020      	movs	r0, r4
   1153c:	4b62      	ldr	r3, [pc, #392]	; (116c8 <MacExecuteCommands+0x1ec>)
   1153e:	e7f3      	b.n	11528 <MacExecuteCommands+0x4c>
   11540:	7878      	ldrb	r0, [r7, #1]
   11542:	230f      	movs	r3, #15
   11544:	0002      	movs	r2, r0
   11546:	1cbc      	adds	r4, r7, #2
   11548:	439a      	bics	r2, r3
   1154a:	d10c      	bne.n	11566 <MacExecuteCommands+0x8a>
   1154c:	4b5f      	ldr	r3, [pc, #380]	; (116cc <MacExecuteCommands+0x1f0>)
   1154e:	4798      	blx	r3
   11550:	0032      	movs	r2, r6
   11552:	2380      	movs	r3, #128	; 0x80
   11554:	3284      	adds	r2, #132	; 0x84
   11556:	7851      	ldrb	r1, [r2, #1]
   11558:	425b      	negs	r3, r3
   1155a:	430b      	orrs	r3, r1
   1155c:	7053      	strb	r3, [r2, #1]
   1155e:	210b      	movs	r1, #11
   11560:	0028      	movs	r0, r5
   11562:	4b5b      	ldr	r3, [pc, #364]	; (116d0 <MacExecuteCommands+0x1f4>)
   11564:	4798      	blx	r3
   11566:	0032      	movs	r2, r6
   11568:	2103      	movs	r1, #3
   1156a:	32e0      	adds	r2, #224	; 0xe0
   1156c:	7813      	ldrb	r3, [r2, #0]
   1156e:	4359      	muls	r1, r3
   11570:	1876      	adds	r6, r6, r1
   11572:	3699      	adds	r6, #153	; 0x99
   11574:	7831      	ldrb	r1, [r6, #0]
   11576:	29ff      	cmp	r1, #255	; 0xff
   11578:	d003      	beq.n	11582 <MacExecuteCommands+0xa6>
   1157a:	2b0f      	cmp	r3, #15
   1157c:	d801      	bhi.n	11582 <MacExecuteCommands+0xa6>
   1157e:	3301      	adds	r3, #1
   11580:	7013      	strb	r3, [r2, #0]
   11582:	0027      	movs	r7, r4
   11584:	e7b2      	b.n	114ec <MacExecuteCommands+0x10>
   11586:	0020      	movs	r0, r4
   11588:	4b52      	ldr	r3, [pc, #328]	; (116d4 <MacExecuteCommands+0x1f8>)
   1158a:	e7cd      	b.n	11528 <MacExecuteCommands+0x4c>
   1158c:	0020      	movs	r0, r4
   1158e:	4b52      	ldr	r3, [pc, #328]	; (116d8 <MacExecuteCommands+0x1fc>)
   11590:	e7ca      	b.n	11528 <MacExecuteCommands+0x4c>
   11592:	0020      	movs	r0, r4
   11594:	4b51      	ldr	r3, [pc, #324]	; (116dc <MacExecuteCommands+0x200>)
   11596:	4798      	blx	r3
   11598:	0033      	movs	r3, r6
   1159a:	33e0      	adds	r3, #224	; 0xe0
   1159c:	0004      	movs	r4, r0
   1159e:	781b      	ldrb	r3, [r3, #0]
   115a0:	e7b9      	b.n	11516 <MacExecuteCommands+0x3a>
   115a2:	2203      	movs	r2, #3
   115a4:	4353      	muls	r3, r2
   115a6:	18f3      	adds	r3, r6, r3
   115a8:	3399      	adds	r3, #153	; 0x99
   115aa:	32fc      	adds	r2, #252	; 0xfc
   115ac:	701a      	strb	r2, [r3, #0]
   115ae:	9c01      	ldr	r4, [sp, #4]
   115b0:	9502      	str	r5, [sp, #8]
   115b2:	e7d8      	b.n	11566 <MacExecuteCommands+0x8a>
   115b4:	23ff      	movs	r3, #255	; 0xff
   115b6:	7013      	strb	r3, [r2, #0]
   115b8:	e7f9      	b.n	115ae <MacExecuteCommands+0xd2>
   115ba:	9b02      	ldr	r3, [sp, #8]
   115bc:	2b00      	cmp	r3, #0
   115be:	d199      	bne.n	114f4 <MacExecuteCommands+0x18>
   115c0:	0033      	movs	r3, r6
   115c2:	2203      	movs	r2, #3
   115c4:	33e0      	adds	r3, #224	; 0xe0
   115c6:	781b      	ldrb	r3, [r3, #0]
   115c8:	2401      	movs	r4, #1
   115ca:	435a      	muls	r2, r3
   115cc:	18b2      	adds	r2, r6, r2
   115ce:	0010      	movs	r0, r2
   115d0:	3098      	adds	r0, #152	; 0x98
   115d2:	7881      	ldrb	r1, [r0, #2]
   115d4:	3299      	adds	r2, #153	; 0x99
   115d6:	43a9      	bics	r1, r5
   115d8:	4021      	ands	r1, r4
   115da:	7081      	strb	r1, [r0, #2]
   115dc:	78c1      	ldrb	r1, [r0, #3]
   115de:	193c      	adds	r4, r7, r4
   115e0:	43a9      	bics	r1, r5
   115e2:	70c1      	strb	r1, [r0, #3]
   115e4:	7839      	ldrb	r1, [r7, #0]
   115e6:	7011      	strb	r1, [r2, #0]
   115e8:	7838      	ldrb	r0, [r7, #0]
   115ea:	493d      	ldr	r1, [pc, #244]	; (116e0 <MacExecuteCommands+0x204>)
   115ec:	1809      	adds	r1, r1, r0
   115ee:	3902      	subs	r1, #2
   115f0:	7809      	ldrb	r1, [r1, #0]
   115f2:	1861      	adds	r1, r4, r1
   115f4:	468c      	mov	ip, r1
   115f6:	9901      	ldr	r1, [sp, #4]
   115f8:	4561      	cmp	r1, ip
   115fa:	d3db      	bcc.n	115b4 <MacExecuteCommands+0xd8>
   115fc:	3802      	subs	r0, #2
   115fe:	280b      	cmp	r0, #11
   11600:	d8cf      	bhi.n	115a2 <MacExecuteCommands+0xc6>
   11602:	f001 ff33 	bl	1346c <__gnu_thumb1_case_shi>
   11606:	ff7f      	.short	0xff7f
   11608:	ff94ff8f 	.word	0xff94ff8f
   1160c:	ffb0ff97 	.word	0xffb0ff97
   11610:	ff9dff9a 	.word	0xff9dff9a
   11614:	ffc3ffc0 	.word	0xffc3ffc0
   11618:	ffceffce 	.word	0xffceffce
   1161c:	ffc6      	.short	0xffc6
   1161e:	4b31      	ldr	r3, [pc, #196]	; (116e4 <MacExecuteCommands+0x208>)
   11620:	5cf3      	ldrb	r3, [r6, r3]
   11622:	43db      	mvns	r3, r3
   11624:	075b      	lsls	r3, r3, #29
   11626:	d000      	beq.n	1162a <MacExecuteCommands+0x14e>
   11628:	e769      	b.n	114fe <MacExecuteCommands+0x22>
   1162a:	4b2f      	ldr	r3, [pc, #188]	; (116e8 <MacExecuteCommands+0x20c>)
   1162c:	ad05      	add	r5, sp, #20
   1162e:	5cf4      	ldrb	r4, [r6, r3]
   11630:	2100      	movs	r1, #0
   11632:	0724      	lsls	r4, r4, #28
   11634:	0f24      	lsrs	r4, r4, #28
   11636:	b2e3      	uxtb	r3, r4
   11638:	9301      	str	r3, [sp, #4]
   1163a:	4b2c      	ldr	r3, [pc, #176]	; (116ec <MacExecuteCommands+0x210>)
   1163c:	002a      	movs	r2, r5
   1163e:	5cf3      	ldrb	r3, [r6, r3]
   11640:	2014      	movs	r0, #20
   11642:	9302      	str	r3, [sp, #8]
   11644:	2389      	movs	r3, #137	; 0x89
   11646:	009b      	lsls	r3, r3, #2
   11648:	5cf3      	ldrb	r3, [r6, r3]
   1164a:	9303      	str	r3, [sp, #12]
   1164c:	4b28      	ldr	r3, [pc, #160]	; (116f0 <MacExecuteCommands+0x214>)
   1164e:	4798      	blx	r3
   11650:	0033      	movs	r3, r6
   11652:	782a      	ldrb	r2, [r5, #0]
   11654:	33f3      	adds	r3, #243	; 0xf3
   11656:	701a      	strb	r2, [r3, #0]
   11658:	0033      	movs	r3, r6
   1165a:	786a      	ldrb	r2, [r5, #1]
   1165c:	33f4      	adds	r3, #244	; 0xf4
   1165e:	701a      	strb	r2, [r3, #0]
   11660:	4b24      	ldr	r3, [pc, #144]	; (116f4 <MacExecuteCommands+0x218>)
   11662:	4798      	blx	r3
   11664:	9802      	ldr	r0, [sp, #8]
   11666:	4b24      	ldr	r3, [pc, #144]	; (116f8 <MacExecuteCommands+0x21c>)
   11668:	4798      	blx	r3
   1166a:	0032      	movs	r2, r6
   1166c:	2308      	movs	r3, #8
   1166e:	3284      	adds	r2, #132	; 0x84
   11670:	7851      	ldrb	r1, [r2, #1]
   11672:	430b      	orrs	r3, r1
   11674:	7053      	strb	r3, [r2, #1]
   11676:	9803      	ldr	r0, [sp, #12]
   11678:	4b20      	ldr	r3, [pc, #128]	; (116fc <MacExecuteCommands+0x220>)
   1167a:	4798      	blx	r3
   1167c:	0033      	movs	r3, r6
   1167e:	b2e2      	uxtb	r2, r4
   11680:	33e1      	adds	r3, #225	; 0xe1
   11682:	2a00      	cmp	r2, #0
   11684:	d10e      	bne.n	116a4 <MacExecuteCommands+0x1c8>
   11686:	701c      	strb	r4, [r3, #0]
   11688:	2113      	movs	r1, #19
   1168a:	4c11      	ldr	r4, [pc, #68]	; (116d0 <MacExecuteCommands+0x1f4>)
   1168c:	2000      	movs	r0, #0
   1168e:	47a0      	blx	r4
   11690:	2210      	movs	r2, #16
   11692:	4b08      	ldr	r3, [pc, #32]	; (116b4 <MacExecuteCommands+0x1d8>)
   11694:	2001      	movs	r0, #1
   11696:	3384      	adds	r3, #132	; 0x84
   11698:	7859      	ldrb	r1, [r3, #1]
   1169a:	430a      	orrs	r2, r1
   1169c:	705a      	strb	r2, [r3, #1]
   1169e:	210b      	movs	r1, #11
   116a0:	47a0      	blx	r4
   116a2:	e72c      	b.n	114fe <MacExecuteCommands+0x22>
   116a4:	9a01      	ldr	r2, [sp, #4]
   116a6:	3a01      	subs	r2, #1
   116a8:	b2d2      	uxtb	r2, r2
   116aa:	701a      	strb	r2, [r3, #0]
   116ac:	0033      	movs	r3, r6
   116ae:	33e2      	adds	r3, #226	; 0xe2
   116b0:	701a      	strb	r2, [r3, #0]
   116b2:	e7e9      	b.n	11688 <MacExecuteCommands+0x1ac>
   116b4:	20003170 	.word	0x20003170
   116b8:	00000226 	.word	0x00000226
   116bc:	0001063d 	.word	0x0001063d
   116c0:	00010501 	.word	0x00010501
   116c4:	00010405 	.word	0x00010405
   116c8:	0001134d 	.word	0x0001134d
   116cc:	0000fb31 	.word	0x0000fb31
   116d0:	0000933d 	.word	0x0000933d
   116d4:	000105ed 	.word	0x000105ed
   116d8:	00010539 	.word	0x00010539
   116dc:	00010775 	.word	0x00010775
   116e0:	00018c03 	.word	0x00018c03
   116e4:	00000223 	.word	0x00000223
   116e8:	00000229 	.word	0x00000229
   116ec:	00000225 	.word	0x00000225
   116f0:	0000cb75 	.word	0x0000cb75
   116f4:	00011321 	.word	0x00011321
   116f8:	00010295 	.word	0x00010295
   116fc:	00010229 	.word	0x00010229

00011700 <LorawanSetDataRange>:
   11700:	2201      	movs	r2, #1
   11702:	b530      	push	{r4, r5, lr}
   11704:	b085      	sub	sp, #20
   11706:	ab01      	add	r3, sp, #4
   11708:	ac02      	add	r4, sp, #8
   1170a:	7018      	strb	r0, [r3, #0]
   1170c:	7020      	strb	r0, [r4, #0]
   1170e:	7061      	strb	r1, [r4, #1]
   11710:	2015      	movs	r0, #21
   11712:	0019      	movs	r1, r3
   11714:	4d11      	ldr	r5, [pc, #68]	; (1175c <LorawanSetDataRange+0x5c>)
   11716:	705a      	strb	r2, [r3, #1]
   11718:	47a8      	blx	r5
   1171a:	2808      	cmp	r0, #8
   1171c:	d003      	beq.n	11726 <LorawanSetDataRange+0x26>
   1171e:	250a      	movs	r5, #10
   11720:	0028      	movs	r0, r5
   11722:	b005      	add	sp, #20
   11724:	bd30      	pop	{r4, r5, pc}
   11726:	0021      	movs	r1, r4
   11728:	2012      	movs	r0, #18
   1172a:	47a8      	blx	r5
   1172c:	0005      	movs	r5, r0
   1172e:	2808      	cmp	r0, #8
   11730:	d1f5      	bne.n	1171e <LorawanSetDataRange+0x1e>
   11732:	0021      	movs	r1, r4
   11734:	4b0a      	ldr	r3, [pc, #40]	; (11760 <LorawanSetDataRange+0x60>)
   11736:	ac03      	add	r4, sp, #12
   11738:	2012      	movs	r0, #18
   1173a:	4798      	blx	r3
   1173c:	0022      	movs	r2, r4
   1173e:	2100      	movs	r1, #0
   11740:	4b08      	ldr	r3, [pc, #32]	; (11764 <LorawanSetDataRange+0x64>)
   11742:	2014      	movs	r0, #20
   11744:	4798      	blx	r3
   11746:	4b08      	ldr	r3, [pc, #32]	; (11768 <LorawanSetDataRange+0x68>)
   11748:	7821      	ldrb	r1, [r4, #0]
   1174a:	001a      	movs	r2, r3
   1174c:	32f3      	adds	r2, #243	; 0xf3
   1174e:	7011      	strb	r1, [r2, #0]
   11750:	7862      	ldrb	r2, [r4, #1]
   11752:	33f4      	adds	r3, #244	; 0xf4
   11754:	701a      	strb	r2, [r3, #0]
   11756:	4b05      	ldr	r3, [pc, #20]	; (1176c <LorawanSetDataRange+0x6c>)
   11758:	4798      	blx	r3
   1175a:	e7e1      	b.n	11720 <LorawanSetDataRange+0x20>
   1175c:	0000cb91 	.word	0x0000cb91
   11760:	0000cbad 	.word	0x0000cbad
   11764:	0000cb75 	.word	0x0000cb75
   11768:	20003170 	.word	0x20003170
   1176c:	00011321 	.word	0x00011321

00011770 <LorawanSetChannelIdStatus>:
   11770:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11772:	466b      	mov	r3, sp
   11774:	7018      	strb	r0, [r3, #0]
   11776:	7059      	strb	r1, [r3, #1]
   11778:	2016      	movs	r0, #22
   1177a:	4669      	mov	r1, sp
   1177c:	4b0c      	ldr	r3, [pc, #48]	; (117b0 <LorawanSetChannelIdStatus+0x40>)
   1177e:	4798      	blx	r3
   11780:	0004      	movs	r4, r0
   11782:	2808      	cmp	r0, #8
   11784:	d111      	bne.n	117aa <LorawanSetChannelIdStatus+0x3a>
   11786:	ad01      	add	r5, sp, #4
   11788:	002a      	movs	r2, r5
   1178a:	2100      	movs	r1, #0
   1178c:	4b09      	ldr	r3, [pc, #36]	; (117b4 <LorawanSetChannelIdStatus+0x44>)
   1178e:	2014      	movs	r0, #20
   11790:	4798      	blx	r3
   11792:	4b09      	ldr	r3, [pc, #36]	; (117b8 <LorawanSetChannelIdStatus+0x48>)
   11794:	7829      	ldrb	r1, [r5, #0]
   11796:	001a      	movs	r2, r3
   11798:	32f3      	adds	r2, #243	; 0xf3
   1179a:	7011      	strb	r1, [r2, #0]
   1179c:	786a      	ldrb	r2, [r5, #1]
   1179e:	33f4      	adds	r3, #244	; 0xf4
   117a0:	701a      	strb	r2, [r3, #0]
   117a2:	4b06      	ldr	r3, [pc, #24]	; (117bc <LorawanSetChannelIdStatus+0x4c>)
   117a4:	4798      	blx	r3
   117a6:	0020      	movs	r0, r4
   117a8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   117aa:	240a      	movs	r4, #10
   117ac:	e7fb      	b.n	117a6 <LorawanSetChannelIdStatus+0x36>
   117ae:	46c0      	nop			; (mov r8, r8)
   117b0:	0000cbad 	.word	0x0000cbad
   117b4:	0000cb75 	.word	0x0000cb75
   117b8:	20003170 	.word	0x20003170
   117bc:	00011321 	.word	0x00011321

000117c0 <LORAWAN_RxDone>:
   117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   117c2:	4bc4      	ldr	r3, [pc, #784]	; (11ad4 <LORAWAN_RxDone+0x314>)
   117c4:	b093      	sub	sp, #76	; 0x4c
   117c6:	781b      	ldrb	r3, [r3, #0]
   117c8:	0007      	movs	r7, r0
   117ca:	b25a      	sxtb	r2, r3
   117cc:	9106      	str	r1, [sp, #24]
   117ce:	4cc2      	ldr	r4, [pc, #776]	; (11ad8 <LORAWAN_RxDone+0x318>)
   117d0:	2a00      	cmp	r2, #0
   117d2:	da01      	bge.n	117d8 <LORAWAN_RxDone+0x18>
   117d4:	f000 fc86 	bl	120e4 <LORAWAN_RxDone+0x924>
   117d8:	7801      	ldrb	r1, [r0, #0]
   117da:	221f      	movs	r2, #31
   117dc:	000e      	movs	r6, r1
   117de:	4396      	bics	r6, r2
   117e0:	2e20      	cmp	r6, #32
   117e2:	d000      	beq.n	117e6 <LORAWAN_RxDone+0x26>
   117e4:	e1ae      	b.n	11b44 <LORAWAN_RxDone+0x384>
   117e6:	7822      	ldrb	r2, [r4, #0]
   117e8:	2a00      	cmp	r2, #0
   117ea:	d001      	beq.n	117f0 <LORAWAN_RxDone+0x30>
   117ec:	f000 fc66 	bl	120bc <LORAWAN_RxDone+0x8fc>
   117f0:	0022      	movs	r2, r4
   117f2:	3294      	adds	r2, #148	; 0x94
   117f4:	7812      	ldrb	r2, [r2, #0]
   117f6:	0752      	lsls	r2, r2, #29
   117f8:	d401      	bmi.n	117fe <LORAWAN_RxDone+0x3e>
   117fa:	f000 fc5f 	bl	120bc <LORAWAN_RxDone+0x8fc>
   117fe:	9b06      	ldr	r3, [sp, #24]
   11800:	3b01      	subs	r3, #1
   11802:	b2db      	uxtb	r3, r3
   11804:	9307      	str	r3, [sp, #28]
   11806:	4bb5      	ldr	r3, [pc, #724]	; (11adc <LORAWAN_RxDone+0x31c>)
   11808:	469c      	mov	ip, r3
   1180a:	9b07      	ldr	r3, [sp, #28]
   1180c:	2b00      	cmp	r3, #0
   1180e:	d12c      	bne.n	1186a <LORAWAN_RxDone+0xaa>
   11810:	9b06      	ldr	r3, [sp, #24]
   11812:	4660      	mov	r0, ip
   11814:	1f1d      	subs	r5, r3, #4
   11816:	b2eb      	uxtb	r3, r5
   11818:	9300      	str	r3, [sp, #0]
   1181a:	4ab1      	ldr	r2, [pc, #708]	; (11ae0 <LORAWAN_RxDone+0x320>)
   1181c:	003b      	movs	r3, r7
   1181e:	9907      	ldr	r1, [sp, #28]
   11820:	4eb0      	ldr	r6, [pc, #704]	; (11ae4 <LORAWAN_RxDone+0x324>)
   11822:	47b0      	blx	r6
   11824:	2204      	movs	r2, #4
   11826:	49ae      	ldr	r1, [pc, #696]	; (11ae0 <LORAWAN_RxDone+0x320>)
   11828:	4baf      	ldr	r3, [pc, #700]	; (11ae8 <LORAWAN_RxDone+0x328>)
   1182a:	a810      	add	r0, sp, #64	; 0x40
   1182c:	4798      	blx	r3
   1182e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11830:	1979      	adds	r1, r7, r5
   11832:	2204      	movs	r2, #4
   11834:	4bac      	ldr	r3, [pc, #688]	; (11ae8 <LORAWAN_RxDone+0x328>)
   11836:	a810      	add	r0, sp, #64	; 0x40
   11838:	960d      	str	r6, [sp, #52]	; 0x34
   1183a:	4798      	blx	r3
   1183c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1183e:	4ba6      	ldr	r3, [pc, #664]	; (11ad8 <LORAWAN_RxDone+0x318>)
   11840:	210e      	movs	r1, #14
   11842:	42b2      	cmp	r2, r6
   11844:	d029      	beq.n	1189a <LORAWAN_RxDone+0xda>
   11846:	001a      	movs	r2, r3
   11848:	3284      	adds	r2, #132	; 0x84
   1184a:	7812      	ldrb	r2, [r2, #0]
   1184c:	400a      	ands	r2, r1
   1184e:	2a0a      	cmp	r2, #10
   11850:	d005      	beq.n	1185e <LORAWAN_RxDone+0x9e>
   11852:	2a06      	cmp	r2, #6
   11854:	d106      	bne.n	11864 <LORAWAN_RxDone+0xa4>
   11856:	33f9      	adds	r3, #249	; 0xf9
   11858:	781b      	ldrb	r3, [r3, #0]
   1185a:	2b00      	cmp	r3, #0
   1185c:	d002      	beq.n	11864 <LORAWAN_RxDone+0xa4>
   1185e:	2018      	movs	r0, #24
   11860:	4ba2      	ldr	r3, [pc, #648]	; (11aec <LORAWAN_RxDone+0x32c>)
   11862:	4798      	blx	r3
   11864:	4ba2      	ldr	r3, [pc, #648]	; (11af0 <LORAWAN_RxDone+0x330>)
   11866:	4798      	blx	r3
   11868:	e1d0      	b.n	11c0c <LORAWAN_RxDone+0x44c>
   1186a:	9b06      	ldr	r3, [sp, #24]
   1186c:	9a07      	ldr	r2, [sp, #28]
   1186e:	2100      	movs	r1, #0
   11870:	1a98      	subs	r0, r3, r2
   11872:	1838      	adds	r0, r7, r0
   11874:	4662      	mov	r2, ip
   11876:	4b9f      	ldr	r3, [pc, #636]	; (11af4 <LORAWAN_RxDone+0x334>)
   11878:	4798      	blx	r3
   1187a:	2800      	cmp	r0, #0
   1187c:	d006      	beq.n	1188c <LORAWAN_RxDone+0xcc>
   1187e:	4b9b      	ldr	r3, [pc, #620]	; (11aec <LORAWAN_RxDone+0x32c>)
   11880:	4798      	blx	r3
   11882:	4b9b      	ldr	r3, [pc, #620]	; (11af0 <LORAWAN_RxDone+0x330>)
   11884:	4798      	blx	r3
   11886:	201f      	movs	r0, #31
   11888:	b013      	add	sp, #76	; 0x4c
   1188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1188c:	9b07      	ldr	r3, [sp, #28]
   1188e:	2b10      	cmp	r3, #16
   11890:	d901      	bls.n	11896 <LORAWAN_RxDone+0xd6>
   11892:	3b10      	subs	r3, #16
   11894:	e7b5      	b.n	11802 <LORAWAN_RxDone+0x42>
   11896:	9007      	str	r0, [sp, #28]
   11898:	e7b5      	b.n	11806 <LORAWAN_RxDone+0x46>
   1189a:	001a      	movs	r2, r3
   1189c:	3284      	adds	r2, #132	; 0x84
   1189e:	7812      	ldrb	r2, [r2, #0]
   118a0:	400a      	ands	r2, r1
   118a2:	2a06      	cmp	r2, #6
   118a4:	d103      	bne.n	118ae <LORAWAN_RxDone+0xee>
   118a6:	33ec      	adds	r3, #236	; 0xec
   118a8:	7818      	ldrb	r0, [r3, #0]
   118aa:	4b93      	ldr	r3, [pc, #588]	; (11af8 <LORAWAN_RxDone+0x338>)
   118ac:	4798      	blx	r3
   118ae:	7a3a      	ldrb	r2, [r7, #8]
   118b0:	79fb      	ldrb	r3, [r7, #7]
   118b2:	0212      	lsls	r2, r2, #8
   118b4:	431a      	orrs	r2, r3
   118b6:	7a7b      	ldrb	r3, [r7, #9]
   118b8:	2001      	movs	r0, #1
   118ba:	041b      	lsls	r3, r3, #16
   118bc:	431a      	orrs	r2, r3
   118be:	7abb      	ldrb	r3, [r7, #10]
   118c0:	061b      	lsls	r3, r3, #24
   118c2:	4313      	orrs	r3, r2
   118c4:	0a19      	lsrs	r1, r3, #8
   118c6:	7063      	strb	r3, [r4, #1]
   118c8:	70a1      	strb	r1, [r4, #2]
   118ca:	0c19      	lsrs	r1, r3, #16
   118cc:	0e1b      	lsrs	r3, r3, #24
   118ce:	70e1      	strb	r1, [r4, #3]
   118d0:	7123      	strb	r3, [r4, #4]
   118d2:	240f      	movs	r4, #15
   118d4:	2103      	movs	r1, #3
   118d6:	4b89      	ldr	r3, [pc, #548]	; (11afc <LORAWAN_RxDone+0x33c>)
   118d8:	4798      	blx	r3
   118da:	7b38      	ldrb	r0, [r7, #12]
   118dc:	4b88      	ldr	r3, [pc, #544]	; (11b00 <LORAWAN_RxDone+0x340>)
   118de:	4020      	ands	r0, r4
   118e0:	4798      	blx	r3
   118e2:	7af8      	ldrb	r0, [r7, #11]
   118e4:	4b87      	ldr	r3, [pc, #540]	; (11b04 <LORAWAN_RxDone+0x344>)
   118e6:	0641      	lsls	r1, r0, #25
   118e8:	0700      	lsls	r0, r0, #28
   118ea:	0f49      	lsrs	r1, r1, #29
   118ec:	0f00      	lsrs	r0, r0, #28
   118ee:	4798      	blx	r3
   118f0:	4b85      	ldr	r3, [pc, #532]	; (11b08 <LORAWAN_RxDone+0x348>)
   118f2:	2100      	movs	r1, #0
   118f4:	203b      	movs	r0, #59	; 0x3b
   118f6:	4798      	blx	r3
   118f8:	9b06      	ldr	r3, [sp, #24]
   118fa:	2b21      	cmp	r3, #33	; 0x21
   118fc:	d000      	beq.n	11900 <LORAWAN_RxDone+0x140>
   118fe:	e08c      	b.n	11a1a <LORAWAN_RxDone+0x25a>
   11900:	251a      	movs	r5, #26
   11902:	ab04      	add	r3, sp, #16
   11904:	18ed      	adds	r5, r5, r3
   11906:	002a      	movs	r2, r5
   11908:	4b80      	ldr	r3, [pc, #512]	; (11b0c <LORAWAN_RxDone+0x34c>)
   1190a:	4981      	ldr	r1, [pc, #516]	; (11b10 <LORAWAN_RxDone+0x350>)
   1190c:	2007      	movs	r0, #7
   1190e:	4798      	blx	r3
   11910:	782b      	ldrb	r3, [r5, #0]
   11912:	2bff      	cmp	r3, #255	; 0xff
   11914:	d100      	bne.n	11918 <LORAWAN_RxDone+0x158>
   11916:	e080      	b.n	11a1a <LORAWAN_RxDone+0x25a>
   11918:	2350      	movs	r3, #80	; 0x50
   1191a:	43a3      	bics	r3, r4
   1191c:	9308      	str	r3, [sp, #32]
   1191e:	003b      	movs	r3, r7
   11920:	330d      	adds	r3, #13
   11922:	9306      	str	r3, [sp, #24]
   11924:	2600      	movs	r6, #0
   11926:	2203      	movs	r2, #3
   11928:	9906      	ldr	r1, [sp, #24]
   1192a:	4b6f      	ldr	r3, [pc, #444]	; (11ae8 <LORAWAN_RxDone+0x328>)
   1192c:	a80e      	add	r0, sp, #56	; 0x38
   1192e:	960e      	str	r6, [sp, #56]	; 0x38
   11930:	4798      	blx	r3
   11932:	2364      	movs	r3, #100	; 0x64
   11934:	990e      	ldr	r1, [sp, #56]	; 0x38
   11936:	aa04      	add	r2, sp, #16
   11938:	4359      	muls	r1, r3
   1193a:	3b4a      	subs	r3, #74	; 0x4a
   1193c:	189b      	adds	r3, r3, r2
   1193e:	7818      	ldrb	r0, [r3, #0]
   11940:	9b07      	ldr	r3, [sp, #28]
   11942:	910e      	str	r1, [sp, #56]	; 0x38
   11944:	1818      	adds	r0, r3, r0
   11946:	b2c0      	uxtb	r0, r0
   11948:	76d0      	strb	r0, [r2, #27]
   1194a:	42b1      	cmp	r1, r6
   1194c:	d100      	bne.n	11950 <LORAWAN_RxDone+0x190>
   1194e:	e0a7      	b.n	11aa0 <LORAWAN_RxDone+0x2e0>
   11950:	466b      	mov	r3, sp
   11952:	2220      	movs	r2, #32
   11954:	189b      	adds	r3, r3, r2
   11956:	781b      	ldrb	r3, [r3, #0]
   11958:	ad10      	add	r5, sp, #64	; 0x40
   1195a:	ac0b      	add	r4, sp, #44	; 0x2c
   1195c:	7128      	strb	r0, [r5, #4]
   1195e:	9110      	str	r1, [sp, #64]	; 0x40
   11960:	7020      	strb	r0, [r4, #0]
   11962:	7063      	strb	r3, [r4, #1]
   11964:	0029      	movs	r1, r5
   11966:	2002      	movs	r0, #2
   11968:	4b6a      	ldr	r3, [pc, #424]	; (11b14 <LORAWAN_RxDone+0x354>)
   1196a:	4798      	blx	r3
   1196c:	2808      	cmp	r0, #8
   1196e:	d140      	bne.n	119f2 <LORAWAN_RxDone+0x232>
   11970:	0029      	movs	r1, r5
   11972:	0030      	movs	r0, r6
   11974:	4b64      	ldr	r3, [pc, #400]	; (11b08 <LORAWAN_RxDone+0x348>)
   11976:	4798      	blx	r3
   11978:	ad0c      	add	r5, sp, #48	; 0x30
   1197a:	0021      	movs	r1, r4
   1197c:	4b62      	ldr	r3, [pc, #392]	; (11b08 <LORAWAN_RxDone+0x348>)
   1197e:	2012      	movs	r0, #18
   11980:	4798      	blx	r3
   11982:	0031      	movs	r1, r6
   11984:	002a      	movs	r2, r5
   11986:	4e61      	ldr	r6, [pc, #388]	; (11b0c <LORAWAN_RxDone+0x34c>)
   11988:	2014      	movs	r0, #20
   1198a:	47b0      	blx	r6
   1198c:	4c52      	ldr	r4, [pc, #328]	; (11ad8 <LORAWAN_RxDone+0x318>)
   1198e:	782a      	ldrb	r2, [r5, #0]
   11990:	0023      	movs	r3, r4
   11992:	33f3      	adds	r3, #243	; 0xf3
   11994:	701a      	strb	r2, [r3, #0]
   11996:	0023      	movs	r3, r4
   11998:	786a      	ldrb	r2, [r5, #1]
   1199a:	2522      	movs	r5, #34	; 0x22
   1199c:	33f4      	adds	r3, #244	; 0xf4
   1199e:	701a      	strb	r2, [r3, #0]
   119a0:	4b5d      	ldr	r3, [pc, #372]	; (11b18 <LORAWAN_RxDone+0x358>)
   119a2:	4798      	blx	r3
   119a4:	ab04      	add	r3, sp, #16
   119a6:	18ed      	adds	r5, r5, r3
   119a8:	231b      	movs	r3, #27
   119aa:	a904      	add	r1, sp, #16
   119ac:	185b      	adds	r3, r3, r1
   119ae:	0019      	movs	r1, r3
   119b0:	002a      	movs	r2, r5
   119b2:	201e      	movs	r0, #30
   119b4:	47b0      	blx	r6
   119b6:	0023      	movs	r3, r4
   119b8:	33ff      	adds	r3, #255	; 0xff
   119ba:	7f5b      	ldrb	r3, [r3, #29]
   119bc:	079b      	lsls	r3, r3, #30
   119be:	d508      	bpl.n	119d2 <LORAWAN_RxDone+0x212>
   119c0:	ab04      	add	r3, sp, #16
   119c2:	7edb      	ldrb	r3, [r3, #27]
   119c4:	a90f      	add	r1, sp, #60	; 0x3c
   119c6:	708b      	strb	r3, [r1, #2]
   119c8:	882b      	ldrh	r3, [r5, #0]
   119ca:	201e      	movs	r0, #30
   119cc:	800b      	strh	r3, [r1, #0]
   119ce:	4b4e      	ldr	r3, [pc, #312]	; (11b08 <LORAWAN_RxDone+0x348>)
   119d0:	4798      	blx	r3
   119d2:	231b      	movs	r3, #27
   119d4:	aa04      	add	r2, sp, #16
   119d6:	189b      	adds	r3, r3, r2
   119d8:	7818      	ldrb	r0, [r3, #0]
   119da:	2101      	movs	r1, #1
   119dc:	4b4f      	ldr	r3, [pc, #316]	; (11b1c <LORAWAN_RxDone+0x35c>)
   119de:	4798      	blx	r3
   119e0:	2204      	movs	r2, #4
   119e2:	3484      	adds	r4, #132	; 0x84
   119e4:	7863      	ldrb	r3, [r4, #1]
   119e6:	210b      	movs	r1, #11
   119e8:	4313      	orrs	r3, r2
   119ea:	7063      	strb	r3, [r4, #1]
   119ec:	2001      	movs	r0, #1
   119ee:	4b43      	ldr	r3, [pc, #268]	; (11afc <LORAWAN_RxDone+0x33c>)
   119f0:	4798      	blx	r3
   119f2:	9b07      	ldr	r3, [sp, #28]
   119f4:	3301      	adds	r3, #1
   119f6:	b2db      	uxtb	r3, r3
   119f8:	9307      	str	r3, [sp, #28]
   119fa:	9b06      	ldr	r3, [sp, #24]
   119fc:	3303      	adds	r3, #3
   119fe:	9306      	str	r3, [sp, #24]
   11a00:	9b07      	ldr	r3, [sp, #28]
   11a02:	2b05      	cmp	r3, #5
   11a04:	d18e      	bne.n	11924 <LORAWAN_RxDone+0x164>
   11a06:	2204      	movs	r2, #4
   11a08:	4b33      	ldr	r3, [pc, #204]	; (11ad8 <LORAWAN_RxDone+0x318>)
   11a0a:	2001      	movs	r0, #1
   11a0c:	3384      	adds	r3, #132	; 0x84
   11a0e:	7859      	ldrb	r1, [r3, #1]
   11a10:	430a      	orrs	r2, r1
   11a12:	705a      	strb	r2, [r3, #1]
   11a14:	210b      	movs	r1, #11
   11a16:	4b39      	ldr	r3, [pc, #228]	; (11afc <LORAWAN_RxDone+0x33c>)
   11a18:	4798      	blx	r3
   11a1a:	4d41      	ldr	r5, [pc, #260]	; (11b20 <LORAWAN_RxDone+0x360>)
   11a1c:	1c7e      	adds	r6, r7, #1
   11a1e:	3704      	adds	r7, #4
   11a20:	0028      	movs	r0, r5
   11a22:	003a      	movs	r2, r7
   11a24:	0031      	movs	r1, r6
   11a26:	4b3f      	ldr	r3, [pc, #252]	; (11b24 <LORAWAN_RxDone+0x364>)
   11a28:	4798      	blx	r3
   11a2a:	2302      	movs	r3, #2
   11a2c:	4c2a      	ldr	r4, [pc, #168]	; (11ad8 <LORAWAN_RxDone+0x318>)
   11a2e:	0028      	movs	r0, r5
   11a30:	7563      	strb	r3, [r4, #21]
   11a32:	4a2a      	ldr	r2, [pc, #168]	; (11adc <LORAWAN_RxDone+0x31c>)
   11a34:	3b01      	subs	r3, #1
   11a36:	2100      	movs	r1, #0
   11a38:	4d3b      	ldr	r5, [pc, #236]	; (11b28 <LORAWAN_RxDone+0x368>)
   11a3a:	47a8      	blx	r5
   11a3c:	2800      	cmp	r0, #0
   11a3e:	d003      	beq.n	11a48 <LORAWAN_RxDone+0x288>
   11a40:	4b2a      	ldr	r3, [pc, #168]	; (11aec <LORAWAN_RxDone+0x32c>)
   11a42:	4798      	blx	r3
   11a44:	4b2a      	ldr	r3, [pc, #168]	; (11af0 <LORAWAN_RxDone+0x330>)
   11a46:	4798      	blx	r3
   11a48:	2105      	movs	r1, #5
   11a4a:	4b2c      	ldr	r3, [pc, #176]	; (11afc <LORAWAN_RxDone+0x33c>)
   11a4c:	2001      	movs	r0, #1
   11a4e:	4798      	blx	r3
   11a50:	4d36      	ldr	r5, [pc, #216]	; (11b2c <LORAWAN_RxDone+0x36c>)
   11a52:	003a      	movs	r2, r7
   11a54:	0028      	movs	r0, r5
   11a56:	0031      	movs	r1, r6
   11a58:	4b32      	ldr	r3, [pc, #200]	; (11b24 <LORAWAN_RxDone+0x364>)
   11a5a:	4798      	blx	r3
   11a5c:	2301      	movs	r3, #1
   11a5e:	0028      	movs	r0, r5
   11a60:	7163      	strb	r3, [r4, #5]
   11a62:	4a1e      	ldr	r2, [pc, #120]	; (11adc <LORAWAN_RxDone+0x31c>)
   11a64:	18db      	adds	r3, r3, r3
   11a66:	2100      	movs	r1, #0
   11a68:	4d2f      	ldr	r5, [pc, #188]	; (11b28 <LORAWAN_RxDone+0x368>)
   11a6a:	47a8      	blx	r5
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d003      	beq.n	11a78 <LORAWAN_RxDone+0x2b8>
   11a70:	4b1e      	ldr	r3, [pc, #120]	; (11aec <LORAWAN_RxDone+0x32c>)
   11a72:	4798      	blx	r3
   11a74:	4b1e      	ldr	r3, [pc, #120]	; (11af0 <LORAWAN_RxDone+0x330>)
   11a76:	4798      	blx	r3
   11a78:	4b20      	ldr	r3, [pc, #128]	; (11afc <LORAWAN_RxDone+0x33c>)
   11a7a:	2104      	movs	r1, #4
   11a7c:	2001      	movs	r0, #1
   11a7e:	4798      	blx	r3
   11a80:	4b2b      	ldr	r3, [pc, #172]	; (11b30 <LORAWAN_RxDone+0x370>)
   11a82:	5ce3      	ldrb	r3, [r4, r3]
   11a84:	2b00      	cmp	r3, #0
   11a86:	d017      	beq.n	11ab8 <LORAWAN_RxDone+0x2f8>
   11a88:	492a      	ldr	r1, [pc, #168]	; (11b34 <LORAWAN_RxDone+0x374>)
   11a8a:	2002      	movs	r0, #2
   11a8c:	4c2a      	ldr	r4, [pc, #168]	; (11b38 <LORAWAN_RxDone+0x378>)
   11a8e:	47a0      	blx	r4
   11a90:	2800      	cmp	r0, #0
   11a92:	d008      	beq.n	11aa6 <LORAWAN_RxDone+0x2e6>
   11a94:	4b15      	ldr	r3, [pc, #84]	; (11aec <LORAWAN_RxDone+0x32c>)
   11a96:	4798      	blx	r3
   11a98:	4b15      	ldr	r3, [pc, #84]	; (11af0 <LORAWAN_RxDone+0x330>)
   11a9a:	4798      	blx	r3
   11a9c:	2023      	movs	r0, #35	; 0x23
   11a9e:	e6f3      	b.n	11888 <LORAWAN_RxDone+0xc8>
   11aa0:	4b1e      	ldr	r3, [pc, #120]	; (11b1c <LORAWAN_RxDone+0x35c>)
   11aa2:	4798      	blx	r3
   11aa4:	e7a5      	b.n	119f2 <LORAWAN_RxDone+0x232>
   11aa6:	4925      	ldr	r1, [pc, #148]	; (11b3c <LORAWAN_RxDone+0x37c>)
   11aa8:	2001      	movs	r0, #1
   11aaa:	47a0      	blx	r4
   11aac:	2800      	cmp	r0, #0
   11aae:	d1f1      	bne.n	11a94 <LORAWAN_RxDone+0x2d4>
   11ab0:	4b23      	ldr	r3, [pc, #140]	; (11b40 <LORAWAN_RxDone+0x380>)
   11ab2:	4798      	blx	r3
   11ab4:	2008      	movs	r0, #8
   11ab6:	e6e7      	b.n	11888 <LORAWAN_RxDone+0xc8>
   11ab8:	0020      	movs	r0, r4
   11aba:	0021      	movs	r1, r4
   11abc:	2210      	movs	r2, #16
   11abe:	3115      	adds	r1, #21
   11ac0:	4d09      	ldr	r5, [pc, #36]	; (11ae8 <LORAWAN_RxDone+0x328>)
   11ac2:	3035      	adds	r0, #53	; 0x35
   11ac4:	47a8      	blx	r5
   11ac6:	0020      	movs	r0, r4
   11ac8:	1d61      	adds	r1, r4, #5
   11aca:	2210      	movs	r2, #16
   11acc:	3025      	adds	r0, #37	; 0x25
   11ace:	47a8      	blx	r5
   11ad0:	e7ee      	b.n	11ab0 <LORAWAN_RxDone+0x2f0>
   11ad2:	46c0      	nop			; (mov r8, r8)
   11ad4:	200031f4 	.word	0x200031f4
   11ad8:	20003170 	.word	0x20003170
   11adc:	200031b5 	.word	0x200031b5
   11ae0:	20001eb5 	.word	0x20001eb5
   11ae4:	00007259 	.word	0x00007259
   11ae8:	000166f7 	.word	0x000166f7
   11aec:	000103a1 	.word	0x000103a1
   11af0:	00011255 	.word	0x00011255
   11af4:	00007221 	.word	0x00007221
   11af8:	0000d3d5 	.word	0x0000d3d5
   11afc:	0000933d 	.word	0x0000933d
   11b00:	0000fb31 	.word	0x0000fb31
   11b04:	00010245 	.word	0x00010245
   11b08:	0000cbad 	.word	0x0000cbad
   11b0c:	0000cb75 	.word	0x0000cb75
   11b10:	20003257 	.word	0x20003257
   11b14:	0000cb91 	.word	0x0000cb91
   11b18:	00011321 	.word	0x00011321
   11b1c:	00011771 	.word	0x00011771
   11b20:	20003185 	.word	0x20003185
   11b24:	0000fe5d 	.word	0x0000fe5d
   11b28:	00007249 	.word	0x00007249
   11b2c:	20003175 	.word	0x20003175
   11b30:	0000022d 	.word	0x0000022d
   11b34:	20003195 	.word	0x20003195
   11b38:	00007255 	.word	0x00007255
   11b3c:	200031a5 	.word	0x200031a5
   11b40:	0000fd79 	.word	0x0000fd79
   11b44:	22bf      	movs	r2, #191	; 0xbf
   11b46:	3e60      	subs	r6, #96	; 0x60
   11b48:	4016      	ands	r6, r2
   11b4a:	d000      	beq.n	11b4e <LORAWAN_RxDone+0x38e>
   11b4c:	e2b6      	b.n	120bc <LORAWAN_RxDone+0x8fc>
   11b4e:	2501      	movs	r5, #1
   11b50:	422b      	tst	r3, r5
   11b52:	d100      	bne.n	11b56 <LORAWAN_RxDone+0x396>
   11b54:	e2b2      	b.n	120bc <LORAWAN_RxDone+0x8fc>
   11b56:	7922      	ldrb	r2, [r4, #4]
   11b58:	6823      	ldr	r3, [r4, #0]
   11b5a:	0612      	lsls	r2, r2, #24
   11b5c:	0a1b      	lsrs	r3, r3, #8
   11b5e:	431a      	orrs	r2, r3
   11b60:	0023      	movs	r3, r4
   11b62:	33e0      	adds	r3, #224	; 0xe0
   11b64:	701e      	strb	r6, [r3, #0]
   11b66:	9207      	str	r2, [sp, #28]
   11b68:	7882      	ldrb	r2, [r0, #2]
   11b6a:	7843      	ldrb	r3, [r0, #1]
   11b6c:	0212      	lsls	r2, r2, #8
   11b6e:	431a      	orrs	r2, r3
   11b70:	78c3      	ldrb	r3, [r0, #3]
   11b72:	041b      	lsls	r3, r3, #16
   11b74:	431a      	orrs	r2, r3
   11b76:	7903      	ldrb	r3, [r0, #4]
   11b78:	061b      	lsls	r3, r3, #24
   11b7a:	4313      	orrs	r3, r2
   11b7c:	9a07      	ldr	r2, [sp, #28]
   11b7e:	429a      	cmp	r2, r3
   11b80:	d100      	bne.n	11b84 <LORAWAN_RxDone+0x3c4>
   11b82:	e2cc      	b.n	1211e <LORAWAN_RxDone+0x95e>
   11b84:	ab04      	add	r3, sp, #16
   11b86:	3521      	adds	r5, #33	; 0x21
   11b88:	18ed      	adds	r5, r5, r3
   11b8a:	7a02      	ldrb	r2, [r0, #8]
   11b8c:	0949      	lsrs	r1, r1, #5
   11b8e:	002b      	movs	r3, r5
   11b90:	4eda      	ldr	r6, [pc, #872]	; (11efc <LORAWAN_RxDone+0x73c>)
   11b92:	47b0      	blx	r6
   11b94:	2808      	cmp	r0, #8
   11b96:	d131      	bne.n	11bfc <LORAWAN_RxDone+0x43c>
   11b98:	233c      	movs	r3, #60	; 0x3c
   11b9a:	7829      	ldrb	r1, [r5, #0]
   11b9c:	434b      	muls	r3, r1
   11b9e:	001d      	movs	r5, r3
   11ba0:	3535      	adds	r5, #53	; 0x35
   11ba2:	35ff      	adds	r5, #255	; 0xff
   11ba4:	192d      	adds	r5, r5, r4
   11ba6:	18e4      	adds	r4, r4, r3
   11ba8:	0023      	movs	r3, r4
   11baa:	33fc      	adds	r3, #252	; 0xfc
   11bac:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11bb0:	9308      	str	r3, [sp, #32]
   11bb2:	79fb      	ldrb	r3, [r7, #7]
   11bb4:	79ba      	ldrb	r2, [r7, #6]
   11bb6:	021b      	lsls	r3, r3, #8
   11bb8:	4313      	orrs	r3, r2
   11bba:	0022      	movs	r2, r4
   11bbc:	3255      	adds	r2, #85	; 0x55
   11bbe:	32ff      	adds	r2, #255	; 0xff
   11bc0:	8816      	ldrh	r6, [r2, #0]
   11bc2:	429e      	cmp	r6, r3
   11bc4:	d908      	bls.n	11bd8 <LORAWAN_RxDone+0x418>
   11bc6:	3457      	adds	r4, #87	; 0x57
   11bc8:	34ff      	adds	r4, #255	; 0xff
   11bca:	8823      	ldrh	r3, [r4, #0]
   11bcc:	3301      	adds	r3, #1
   11bce:	8023      	strh	r3, [r4, #0]
   11bd0:	79fb      	ldrb	r3, [r7, #7]
   11bd2:	79bc      	ldrb	r4, [r7, #6]
   11bd4:	021b      	lsls	r3, r3, #8
   11bd6:	4323      	orrs	r3, r4
   11bd8:	8013      	strh	r3, [r2, #0]
   11bda:	9b06      	ldr	r3, [sp, #24]
   11bdc:	9000      	str	r0, [sp, #0]
   11bde:	1f1a      	subs	r2, r3, #4
   11be0:	233c      	movs	r3, #60	; 0x3c
   11be2:	434b      	muls	r3, r1
   11be4:	49c6      	ldr	r1, [pc, #792]	; (11f00 <LORAWAN_RxDone+0x740>)
   11be6:	b2d2      	uxtb	r2, r2
   11be8:	18c9      	adds	r1, r1, r3
   11bea:	31fc      	adds	r1, #252	; 0xfc
   11bec:	2349      	movs	r3, #73	; 0x49
   11bee:	6d89      	ldr	r1, [r1, #88]	; 0x58
   11bf0:	2001      	movs	r0, #1
   11bf2:	4cc4      	ldr	r4, [pc, #784]	; (11f04 <LORAWAN_RxDone+0x744>)
   11bf4:	47a0      	blx	r4
   11bf6:	2301      	movs	r3, #1
   11bf8:	9307      	str	r3, [sp, #28]
   11bfa:	e2a6      	b.n	1214a <LORAWAN_RxDone+0x98a>
   11bfc:	220e      	movs	r2, #14
   11bfe:	4bc2      	ldr	r3, [pc, #776]	; (11f08 <LORAWAN_RxDone+0x748>)
   11c00:	781b      	ldrb	r3, [r3, #0]
   11c02:	4013      	ands	r3, r2
   11c04:	2b0a      	cmp	r3, #10
   11c06:	d008      	beq.n	11c1a <LORAWAN_RxDone+0x45a>
   11c08:	2b06      	cmp	r3, #6
   11c0a:	d001      	beq.n	11c10 <LORAWAN_RxDone+0x450>
   11c0c:	200a      	movs	r0, #10
   11c0e:	e63b      	b.n	11888 <LORAWAN_RxDone+0xc8>
   11c10:	0023      	movs	r3, r4
   11c12:	33f9      	adds	r3, #249	; 0xf9
   11c14:	781b      	ldrb	r3, [r3, #0]
   11c16:	2b00      	cmp	r3, #0
   11c18:	d0f8      	beq.n	11c0c <LORAWAN_RxDone+0x44c>
   11c1a:	2220      	movs	r2, #32
   11c1c:	201e      	movs	r0, #30
   11c1e:	3494      	adds	r4, #148	; 0x94
   11c20:	7823      	ldrb	r3, [r4, #0]
   11c22:	4393      	bics	r3, r2
   11c24:	7023      	strb	r3, [r4, #0]
   11c26:	4bb9      	ldr	r3, [pc, #740]	; (11f0c <LORAWAN_RxDone+0x74c>)
   11c28:	e61b      	b.n	11862 <LORAWAN_RxDone+0xa2>
   11c2a:	0022      	movs	r2, r4
   11c2c:	2102      	movs	r1, #2
   11c2e:	e2a6      	b.n	1217e <LORAWAN_RxDone+0x9be>
   11c30:	9b08      	ldr	r3, [sp, #32]
   11c32:	328c      	adds	r2, #140	; 0x8c
   11c34:	6013      	str	r3, [r2, #0]
   11c36:	e2e3      	b.n	12200 <LORAWAN_RxDone+0xa40>
   11c38:	9b07      	ldr	r3, [sp, #28]
   11c3a:	4cb1      	ldr	r4, [pc, #708]	; (11f00 <LORAWAN_RxDone+0x740>)
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d000      	beq.n	11c42 <LORAWAN_RxDone+0x482>
   11c40:	e224      	b.n	1208c <LORAWAN_RxDone+0x8cc>
   11c42:	466a      	mov	r2, sp
   11c44:	0023      	movs	r3, r4
   11c46:	7f12      	ldrb	r2, [r2, #28]
   11c48:	33e3      	adds	r3, #227	; 0xe3
   11c4a:	701a      	strb	r2, [r3, #0]
   11c4c:	797b      	ldrb	r3, [r7, #5]
   11c4e:	2b7f      	cmp	r3, #127	; 0x7f
   11c50:	d909      	bls.n	11c66 <LORAWAN_RxDone+0x4a6>
   11c52:	0022      	movs	r2, r4
   11c54:	2320      	movs	r3, #32
   11c56:	3284      	adds	r2, #132	; 0x84
   11c58:	7811      	ldrb	r1, [r2, #0]
   11c5a:	2001      	movs	r0, #1
   11c5c:	430b      	orrs	r3, r1
   11c5e:	7013      	strb	r3, [r2, #0]
   11c60:	210b      	movs	r1, #11
   11c62:	4bab      	ldr	r3, [pc, #684]	; (11f10 <LORAWAN_RxDone+0x750>)
   11c64:	4798      	blx	r3
   11c66:	797b      	ldrb	r3, [r7, #5]
   11c68:	06db      	lsls	r3, r3, #27
   11c6a:	d505      	bpl.n	11c78 <LORAWAN_RxDone+0x4b8>
   11c6c:	0022      	movs	r2, r4
   11c6e:	2308      	movs	r3, #8
   11c70:	3294      	adds	r2, #148	; 0x94
   11c72:	7811      	ldrb	r1, [r2, #0]
   11c74:	430b      	orrs	r3, r1
   11c76:	7013      	strb	r3, [r2, #0]
   11c78:	797b      	ldrb	r3, [r7, #5]
   11c7a:	065b      	lsls	r3, r3, #25
   11c7c:	d505      	bpl.n	11c8a <LORAWAN_RxDone+0x4ca>
   11c7e:	0022      	movs	r2, r4
   11c80:	2310      	movs	r3, #16
   11c82:	3294      	adds	r2, #148	; 0x94
   11c84:	7811      	ldrb	r1, [r2, #0]
   11c86:	430b      	orrs	r3, r1
   11c88:	7013      	strb	r3, [r2, #0]
   11c8a:	221f      	movs	r2, #31
   11c8c:	783b      	ldrb	r3, [r7, #0]
   11c8e:	4393      	bics	r3, r2
   11c90:	2ba0      	cmp	r3, #160	; 0xa0
   11c92:	d105      	bne.n	11ca0 <LORAWAN_RxDone+0x4e0>
   11c94:	0022      	movs	r2, r4
   11c96:	3294      	adds	r2, #148	; 0x94
   11c98:	7811      	ldrb	r1, [r2, #0]
   11c9a:	3b9e      	subs	r3, #158	; 0x9e
   11c9c:	430b      	orrs	r3, r1
   11c9e:	7013      	strb	r3, [r2, #0]
   11ca0:	7979      	ldrb	r1, [r7, #5]
   11ca2:	070b      	lsls	r3, r1, #28
   11ca4:	d100      	bne.n	11ca8 <LORAWAN_RxDone+0x4e8>
   11ca6:	e0d4      	b.n	11e52 <LORAWAN_RxDone+0x692>
   11ca8:	0709      	lsls	r1, r1, #28
   11caa:	0f09      	lsrs	r1, r1, #28
   11cac:	187b      	adds	r3, r7, r1
   11cae:	7a1b      	ldrb	r3, [r3, #8]
   11cb0:	2b00      	cmp	r3, #0
   11cb2:	d100      	bne.n	11cb6 <LORAWAN_RxDone+0x4f6>
   11cb4:	e0a9      	b.n	11e0a <LORAWAN_RxDone+0x64a>
   11cb6:	0038      	movs	r0, r7
   11cb8:	4b96      	ldr	r3, [pc, #600]	; (11f14 <LORAWAN_RxDone+0x754>)
   11cba:	3008      	adds	r0, #8
   11cbc:	4798      	blx	r3
   11cbe:	2301      	movs	r3, #1
   11cc0:	0006      	movs	r6, r0
   11cc2:	9307      	str	r3, [sp, #28]
   11cc4:	7978      	ldrb	r0, [r7, #5]
   11cc6:	9906      	ldr	r1, [sp, #24]
   11cc8:	0703      	lsls	r3, r0, #28
   11cca:	0f1b      	lsrs	r3, r3, #28
   11ccc:	001a      	movs	r2, r3
   11cce:	320c      	adds	r2, #12
   11cd0:	4291      	cmp	r1, r2
   11cd2:	d100      	bne.n	11cd6 <LORAWAN_RxDone+0x516>
   11cd4:	e0f1      	b.n	11eba <LORAWAN_RxDone+0x6fa>
   11cd6:	7832      	ldrb	r2, [r6, #0]
   11cd8:	1ac9      	subs	r1, r1, r3
   11cda:	b2c9      	uxtb	r1, r1
   11cdc:	9208      	str	r2, [sp, #32]
   11cde:	000a      	movs	r2, r1
   11ce0:	3319      	adds	r3, #25
   11ce2:	3a0c      	subs	r2, #12
   11ce4:	469c      	mov	ip, r3
   11ce6:	9b08      	ldr	r3, [sp, #32]
   11ce8:	b2d2      	uxtb	r2, r2
   11cea:	9206      	str	r2, [sp, #24]
   11cec:	1c75      	adds	r5, r6, #1
   11cee:	4a84      	ldr	r2, [pc, #528]	; (11f00 <LORAWAN_RxDone+0x740>)
   11cf0:	2b00      	cmp	r3, #0
   11cf2:	d100      	bne.n	11cf6 <LORAWAN_RxDone+0x536>
   11cf4:	e0b0      	b.n	11e58 <LORAWAN_RxDone+0x698>
   11cf6:	6813      	ldr	r3, [r2, #0]
   11cf8:	0010      	movs	r0, r2
   11cfa:	7912      	ldrb	r2, [r2, #4]
   11cfc:	0a1c      	lsrs	r4, r3, #8
   11cfe:	0612      	lsls	r2, r2, #24
   11d00:	4322      	orrs	r2, r4
   11d02:	9204      	str	r2, [sp, #16]
   11d04:	4a84      	ldr	r2, [pc, #528]	; (11f18 <LORAWAN_RxDone+0x758>)
   11d06:	4663      	mov	r3, ip
   11d08:	9203      	str	r2, [sp, #12]
   11d0a:	466a      	mov	r2, sp
   11d0c:	8493      	strh	r3, [r2, #36]	; 0x24
   11d0e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   11d10:	2201      	movs	r2, #1
   11d12:	9302      	str	r3, [sp, #8]
   11d14:	4b81      	ldr	r3, [pc, #516]	; (11f1c <LORAWAN_RxDone+0x75c>)
   11d16:	308c      	adds	r0, #140	; 0x8c
   11d18:	390d      	subs	r1, #13
   11d1a:	9201      	str	r2, [sp, #4]
   11d1c:	9300      	str	r3, [sp, #0]
   11d1e:	6803      	ldr	r3, [r0, #0]
   11d20:	b2c9      	uxtb	r1, r1
   11d22:	0028      	movs	r0, r5
   11d24:	4c7e      	ldr	r4, [pc, #504]	; (11f20 <LORAWAN_RxDone+0x760>)
   11d26:	47a0      	blx	r4
   11d28:	2800      	cmp	r0, #0
   11d2a:	d004      	beq.n	11d36 <LORAWAN_RxDone+0x576>
   11d2c:	4b7d      	ldr	r3, [pc, #500]	; (11f24 <LORAWAN_RxDone+0x764>)
   11d2e:	4798      	blx	r3
   11d30:	201f      	movs	r0, #31
   11d32:	4b76      	ldr	r3, [pc, #472]	; (11f0c <LORAWAN_RxDone+0x74c>)
   11d34:	4798      	blx	r3
   11d36:	4c72      	ldr	r4, [pc, #456]	; (11f00 <LORAWAN_RxDone+0x740>)
   11d38:	2300      	movs	r3, #0
   11d3a:	0022      	movs	r2, r4
   11d3c:	32ca      	adds	r2, #202	; 0xca
   11d3e:	8013      	strh	r3, [r2, #0]
   11d40:	0022      	movs	r2, r4
   11d42:	32f6      	adds	r2, #246	; 0xf6
   11d44:	7013      	strb	r3, [r2, #0]
   11d46:	0022      	movs	r2, r4
   11d48:	2110      	movs	r1, #16
   11d4a:	3294      	adds	r2, #148	; 0x94
   11d4c:	7813      	ldrb	r3, [r2, #0]
   11d4e:	438b      	bics	r3, r1
   11d50:	7013      	strb	r3, [r2, #0]
   11d52:	0023      	movs	r3, r4
   11d54:	2201      	movs	r2, #1
   11d56:	3384      	adds	r3, #132	; 0x84
   11d58:	7859      	ldrb	r1, [r3, #1]
   11d5a:	430a      	orrs	r2, r1
   11d5c:	705a      	strb	r2, [r3, #1]
   11d5e:	220e      	movs	r2, #14
   11d60:	781b      	ldrb	r3, [r3, #0]
   11d62:	4013      	ands	r3, r2
   11d64:	2b06      	cmp	r3, #6
   11d66:	d104      	bne.n	11d72 <LORAWAN_RxDone+0x5b2>
   11d68:	0023      	movs	r3, r4
   11d6a:	33ee      	adds	r3, #238	; 0xee
   11d6c:	7818      	ldrb	r0, [r3, #0]
   11d6e:	4b6e      	ldr	r3, [pc, #440]	; (11f28 <LORAWAN_RxDone+0x768>)
   11d70:	4798      	blx	r3
   11d72:	0025      	movs	r5, r4
   11d74:	2201      	movs	r2, #1
   11d76:	3594      	adds	r5, #148	; 0x94
   11d78:	782b      	ldrb	r3, [r5, #0]
   11d7a:	4213      	tst	r3, r2
   11d7c:	d100      	bne.n	11d80 <LORAWAN_RxDone+0x5c0>
   11d7e:	e107      	b.n	11f90 <LORAWAN_RxDone+0x7d0>
   11d80:	797b      	ldrb	r3, [r7, #5]
   11d82:	321f      	adds	r2, #31
   11d84:	4213      	tst	r3, r2
   11d86:	d100      	bne.n	11d8a <LORAWAN_RxDone+0x5ca>
   11d88:	e0e8      	b.n	11f5c <LORAWAN_RxDone+0x79c>
   11d8a:	4b68      	ldr	r3, [pc, #416]	; (11f2c <LORAWAN_RxDone+0x76c>)
   11d8c:	4798      	blx	r3
   11d8e:	0023      	movs	r3, r4
   11d90:	2101      	movs	r1, #1
   11d92:	3384      	adds	r3, #132	; 0x84
   11d94:	785a      	ldrb	r2, [r3, #1]
   11d96:	438a      	bics	r2, r1
   11d98:	705a      	strb	r2, [r3, #1]
   11d9a:	9a08      	ldr	r2, [sp, #32]
   11d9c:	2a00      	cmp	r2, #0
   11d9e:	d100      	bne.n	11da2 <LORAWAN_RxDone+0x5e2>
   11da0:	e093      	b.n	11eca <LORAWAN_RxDone+0x70a>
   11da2:	9a06      	ldr	r2, [sp, #24]
   11da4:	0031      	movs	r1, r6
   11da6:	0038      	movs	r0, r7
   11da8:	4b61      	ldr	r3, [pc, #388]	; (11f30 <LORAWAN_RxDone+0x770>)
   11daa:	4798      	blx	r3
   11dac:	4b56      	ldr	r3, [pc, #344]	; (11f08 <LORAWAN_RxDone+0x748>)
   11dae:	4d54      	ldr	r5, [pc, #336]	; (11f00 <LORAWAN_RxDone+0x740>)
   11db0:	781b      	ldrb	r3, [r3, #0]
   11db2:	06db      	lsls	r3, r3, #27
   11db4:	d400      	bmi.n	11db8 <LORAWAN_RxDone+0x5f8>
   11db6:	e160      	b.n	1207a <LORAWAN_RxDone+0x8ba>
   11db8:	2220      	movs	r2, #32
   11dba:	4b5e      	ldr	r3, [pc, #376]	; (11f34 <LORAWAN_RxDone+0x774>)
   11dbc:	781b      	ldrb	r3, [r3, #0]
   11dbe:	401a      	ands	r2, r3
   11dc0:	9206      	str	r2, [sp, #24]
   11dc2:	d000      	beq.n	11dc6 <LORAWAN_RxDone+0x606>
   11dc4:	e159      	b.n	1207a <LORAWAN_RxDone+0x8ba>
   11dc6:	320a      	adds	r2, #10
   11dc8:	4213      	tst	r3, r2
   11dca:	d100      	bne.n	11dce <LORAWAN_RxDone+0x60e>
   11dcc:	e155      	b.n	1207a <LORAWAN_RxDone+0x8ba>
   11dce:	002b      	movs	r3, r5
   11dd0:	33f5      	adds	r3, #245	; 0xf5
   11dd2:	781b      	ldrb	r3, [r3, #0]
   11dd4:	a90f      	add	r1, sp, #60	; 0x3c
   11dd6:	704b      	strb	r3, [r1, #1]
   11dd8:	002e      	movs	r6, r5
   11dda:	2301      	movs	r3, #1
   11ddc:	36e7      	adds	r6, #231	; 0xe7
   11dde:	700b      	strb	r3, [r1, #0]
   11de0:	7833      	ldrb	r3, [r6, #0]
   11de2:	aa0e      	add	r2, sp, #56	; 0x38
   11de4:	202f      	movs	r0, #47	; 0x2f
   11de6:	4f54      	ldr	r7, [pc, #336]	; (11f38 <LORAWAN_RxDone+0x778>)
   11de8:	708b      	strb	r3, [r1, #2]
   11dea:	47b8      	blx	r7
   11dec:	9007      	str	r0, [sp, #28]
   11dee:	2808      	cmp	r0, #8
   11df0:	d000      	beq.n	11df4 <LORAWAN_RxDone+0x634>
   11df2:	e0fb      	b.n	11fec <LORAWAN_RxDone+0x82c>
   11df4:	4b51      	ldr	r3, [pc, #324]	; (11f3c <LORAWAN_RxDone+0x77c>)
   11df6:	9806      	ldr	r0, [sp, #24]
   11df8:	4798      	blx	r3
   11dfa:	4b4e      	ldr	r3, [pc, #312]	; (11f34 <LORAWAN_RxDone+0x774>)
   11dfc:	9a07      	ldr	r2, [sp, #28]
   11dfe:	781b      	ldrb	r3, [r3, #0]
   11e00:	4393      	bics	r3, r2
   11e02:	4a4c      	ldr	r2, [pc, #304]	; (11f34 <LORAWAN_RxDone+0x774>)
   11e04:	7013      	strb	r3, [r2, #0]
   11e06:	2001      	movs	r0, #1
   11e08:	e53e      	b.n	11888 <LORAWAN_RxDone+0xc8>
   11e0a:	0023      	movs	r3, r4
   11e0c:	220e      	movs	r2, #14
   11e0e:	3384      	adds	r3, #132	; 0x84
   11e10:	781b      	ldrb	r3, [r3, #0]
   11e12:	4013      	ands	r3, r2
   11e14:	2b06      	cmp	r3, #6
   11e16:	d101      	bne.n	11e1c <LORAWAN_RxDone+0x65c>
   11e18:	4b49      	ldr	r3, [pc, #292]	; (11f40 <LORAWAN_RxDone+0x780>)
   11e1a:	4798      	blx	r3
   11e1c:	4949      	ldr	r1, [pc, #292]	; (11f44 <LORAWAN_RxDone+0x784>)
   11e1e:	784a      	ldrb	r2, [r1, #1]
   11e20:	780b      	ldrb	r3, [r1, #0]
   11e22:	0212      	lsls	r2, r2, #8
   11e24:	431a      	orrs	r2, r3
   11e26:	788b      	ldrb	r3, [r1, #2]
   11e28:	041b      	lsls	r3, r3, #16
   11e2a:	431a      	orrs	r2, r3
   11e2c:	78cb      	ldrb	r3, [r1, #3]
   11e2e:	061b      	lsls	r3, r3, #24
   11e30:	4313      	orrs	r3, r2
   11e32:	d008      	beq.n	11e46 <LORAWAN_RxDone+0x686>
   11e34:	0022      	movs	r2, r4
   11e36:	2120      	movs	r1, #32
   11e38:	3294      	adds	r2, #148	; 0x94
   11e3a:	7813      	ldrb	r3, [r2, #0]
   11e3c:	201e      	movs	r0, #30
   11e3e:	438b      	bics	r3, r1
   11e40:	7013      	strb	r3, [r2, #0]
   11e42:	4b32      	ldr	r3, [pc, #200]	; (11f0c <LORAWAN_RxDone+0x74c>)
   11e44:	4798      	blx	r3
   11e46:	2300      	movs	r3, #0
   11e48:	34e0      	adds	r4, #224	; 0xe0
   11e4a:	7023      	strb	r3, [r4, #0]
   11e4c:	4b35      	ldr	r3, [pc, #212]	; (11f24 <LORAWAN_RxDone+0x764>)
   11e4e:	4798      	blx	r3
   11e50:	e7d9      	b.n	11e06 <LORAWAN_RxDone+0x646>
   11e52:	003e      	movs	r6, r7
   11e54:	3608      	adds	r6, #8
   11e56:	e735      	b.n	11cc4 <LORAWAN_RxDone+0x504>
   11e58:	9b06      	ldr	r3, [sp, #24]
   11e5a:	2b00      	cmp	r3, #0
   11e5c:	d031      	beq.n	11ec2 <LORAWAN_RxDone+0x702>
   11e5e:	0703      	lsls	r3, r0, #28
   11e60:	d1d3      	bne.n	11e0a <LORAWAN_RxDone+0x64a>
   11e62:	390d      	subs	r1, #13
   11e64:	6813      	ldr	r3, [r2, #0]
   11e66:	b2cc      	uxtb	r4, r1
   11e68:	0011      	movs	r1, r2
   11e6a:	7912      	ldrb	r2, [r2, #4]
   11e6c:	0a18      	lsrs	r0, r3, #8
   11e6e:	0612      	lsls	r2, r2, #24
   11e70:	4302      	orrs	r2, r0
   11e72:	9204      	str	r2, [sp, #16]
   11e74:	4a28      	ldr	r2, [pc, #160]	; (11f18 <LORAWAN_RxDone+0x758>)
   11e76:	4663      	mov	r3, ip
   11e78:	9203      	str	r2, [sp, #12]
   11e7a:	466a      	mov	r2, sp
   11e7c:	8313      	strh	r3, [r2, #24]
   11e7e:	8b13      	ldrh	r3, [r2, #24]
   11e80:	318c      	adds	r1, #140	; 0x8c
   11e82:	9302      	str	r3, [sp, #8]
   11e84:	2302      	movs	r3, #2
   11e86:	9301      	str	r3, [sp, #4]
   11e88:	4b2f      	ldr	r3, [pc, #188]	; (11f48 <LORAWAN_RxDone+0x788>)
   11e8a:	2201      	movs	r2, #1
   11e8c:	9300      	str	r3, [sp, #0]
   11e8e:	680b      	ldr	r3, [r1, #0]
   11e90:	0028      	movs	r0, r5
   11e92:	0021      	movs	r1, r4
   11e94:	4e22      	ldr	r6, [pc, #136]	; (11f20 <LORAWAN_RxDone+0x760>)
   11e96:	47b0      	blx	r6
   11e98:	2800      	cmp	r0, #0
   11e9a:	d004      	beq.n	11ea6 <LORAWAN_RxDone+0x6e6>
   11e9c:	4b21      	ldr	r3, [pc, #132]	; (11f24 <LORAWAN_RxDone+0x764>)
   11e9e:	4798      	blx	r3
   11ea0:	201f      	movs	r0, #31
   11ea2:	4b1a      	ldr	r3, [pc, #104]	; (11f0c <LORAWAN_RxDone+0x74c>)
   11ea4:	4798      	blx	r3
   11ea6:	4b1b      	ldr	r3, [pc, #108]	; (11f14 <LORAWAN_RxDone+0x754>)
   11ea8:	0021      	movs	r1, r4
   11eaa:	0028      	movs	r0, r5
   11eac:	4798      	blx	r3
   11eae:	2300      	movs	r3, #0
   11eb0:	9306      	str	r3, [sp, #24]
   11eb2:	3301      	adds	r3, #1
   11eb4:	9307      	str	r3, [sp, #28]
   11eb6:	2600      	movs	r6, #0
   11eb8:	e73d      	b.n	11d36 <LORAWAN_RxDone+0x576>
   11eba:	2600      	movs	r6, #0
   11ebc:	9608      	str	r6, [sp, #32]
   11ebe:	9606      	str	r6, [sp, #24]
   11ec0:	e739      	b.n	11d36 <LORAWAN_RxDone+0x576>
   11ec2:	9b06      	ldr	r3, [sp, #24]
   11ec4:	9308      	str	r3, [sp, #32]
   11ec6:	001e      	movs	r6, r3
   11ec8:	e735      	b.n	11d36 <LORAWAN_RxDone+0x576>
   11eca:	2120      	movs	r1, #32
   11ecc:	782a      	ldrb	r2, [r5, #0]
   11ece:	438a      	bics	r2, r1
   11ed0:	702a      	strb	r2, [r5, #0]
   11ed2:	0022      	movs	r2, r4
   11ed4:	32fd      	adds	r2, #253	; 0xfd
   11ed6:	7812      	ldrb	r2, [r2, #0]
   11ed8:	2a01      	cmp	r2, #1
   11eda:	d137      	bne.n	11f4c <LORAWAN_RxDone+0x78c>
   11edc:	781a      	ldrb	r2, [r3, #0]
   11ede:	3912      	subs	r1, #18
   11ee0:	438a      	bics	r2, r1
   11ee2:	701a      	strb	r2, [r3, #0]
   11ee4:	2388      	movs	r3, #136	; 0x88
   11ee6:	4a06      	ldr	r2, [pc, #24]	; (11f00 <LORAWAN_RxDone+0x740>)
   11ee8:	009b      	lsls	r3, r3, #2
   11eea:	5cd3      	ldrb	r3, [r2, r3]
   11eec:	2b00      	cmp	r3, #0
   11eee:	d000      	beq.n	11ef2 <LORAWAN_RxDone+0x732>
   11ef0:	e75c      	b.n	11dac <LORAWAN_RxDone+0x5ec>
   11ef2:	2008      	movs	r0, #8
   11ef4:	4b05      	ldr	r3, [pc, #20]	; (11f0c <LORAWAN_RxDone+0x74c>)
   11ef6:	4798      	blx	r3
   11ef8:	e758      	b.n	11dac <LORAWAN_RxDone+0x5ec>
   11efa:	46c0      	nop			; (mov r8, r8)
   11efc:	00012df5 	.word	0x00012df5
   11f00:	20003170 	.word	0x20003170
   11f04:	0000fe99 	.word	0x0000fe99
   11f08:	200031f4 	.word	0x200031f4
   11f0c:	00010d41 	.word	0x00010d41
   11f10:	0000933d 	.word	0x0000933d
   11f14:	000114dd 	.word	0x000114dd
   11f18:	20002f34 	.word	0x20002f34
   11f1c:	200031a5 	.word	0x200031a5
   11f20:	00010c81 	.word	0x00010c81
   11f24:	00011255 	.word	0x00011255
   11f28:	0000d3d5 	.word	0x0000d3d5
   11f2c:	0001034d 	.word	0x0001034d
   11f30:	00010df1 	.word	0x00010df1
   11f34:	20003204 	.word	0x20003204
   11f38:	0000cb75 	.word	0x0000cb75
   11f3c:	00010001 	.word	0x00010001
   11f40:	0000ff31 	.word	0x0000ff31
   11f44:	200034cc 	.word	0x200034cc
   11f48:	20003195 	.word	0x20003195
   11f4c:	2a04      	cmp	r2, #4
   11f4e:	d1c9      	bne.n	11ee4 <LORAWAN_RxDone+0x724>
   11f50:	0023      	movs	r3, r4
   11f52:	33f1      	adds	r3, #241	; 0xf1
   11f54:	7818      	ldrb	r0, [r3, #0]
   11f56:	4bab      	ldr	r3, [pc, #684]	; (12204 <LORAWAN_RxDone+0xa44>)
   11f58:	4798      	blx	r3
   11f5a:	e7c3      	b.n	11ee4 <LORAWAN_RxDone+0x724>
   11f5c:	9b07      	ldr	r3, [sp, #28]
   11f5e:	2b00      	cmp	r3, #0
   11f60:	d013      	beq.n	11f8a <LORAWAN_RxDone+0x7ca>
   11f62:	0023      	movs	r3, r4
   11f64:	33fd      	adds	r3, #253	; 0xfd
   11f66:	781e      	ldrb	r6, [r3, #0]
   11f68:	2e01      	cmp	r6, #1
   11f6a:	d10e      	bne.n	11f8a <LORAWAN_RxDone+0x7ca>
   11f6c:	4ba6      	ldr	r3, [pc, #664]	; (12208 <LORAWAN_RxDone+0xa48>)
   11f6e:	4798      	blx	r3
   11f70:	0022      	movs	r2, r4
   11f72:	3284      	adds	r2, #132	; 0x84
   11f74:	7853      	ldrb	r3, [r2, #1]
   11f76:	43b3      	bics	r3, r6
   11f78:	7053      	strb	r3, [r2, #1]
   11f7a:	2220      	movs	r2, #32
   11f7c:	782b      	ldrb	r3, [r5, #0]
   11f7e:	4393      	bics	r3, r2
   11f80:	702b      	strb	r3, [r5, #0]
   11f82:	2388      	movs	r3, #136	; 0x88
   11f84:	009b      	lsls	r3, r3, #2
   11f86:	5ce3      	ldrb	r3, [r4, r3]
   11f88:	e7b0      	b.n	11eec <LORAWAN_RxDone+0x72c>
   11f8a:	4ba0      	ldr	r3, [pc, #640]	; (1220c <LORAWAN_RxDone+0xa4c>)
   11f8c:	4798      	blx	r3
   11f8e:	e70d      	b.n	11dac <LORAWAN_RxDone+0x5ec>
   11f90:	9a08      	ldr	r2, [sp, #32]
   11f92:	2a00      	cmp	r2, #0
   11f94:	d00b      	beq.n	11fae <LORAWAN_RxDone+0x7ee>
   11f96:	9a06      	ldr	r2, [sp, #24]
   11f98:	0031      	movs	r1, r6
   11f9a:	0038      	movs	r0, r7
   11f9c:	4b9c      	ldr	r3, [pc, #624]	; (12210 <LORAWAN_RxDone+0xa50>)
   11f9e:	4798      	blx	r3
   11fa0:	0022      	movs	r2, r4
   11fa2:	2101      	movs	r1, #1
   11fa4:	3284      	adds	r2, #132	; 0x84
   11fa6:	7853      	ldrb	r3, [r2, #1]
   11fa8:	438b      	bics	r3, r1
   11faa:	7053      	strb	r3, [r2, #1]
   11fac:	e6fe      	b.n	11dac <LORAWAN_RxDone+0x5ec>
   11fae:	2220      	movs	r2, #32
   11fb0:	4393      	bics	r3, r2
   11fb2:	702b      	strb	r3, [r5, #0]
   11fb4:	0023      	movs	r3, r4
   11fb6:	33fd      	adds	r3, #253	; 0xfd
   11fb8:	781b      	ldrb	r3, [r3, #0]
   11fba:	2b01      	cmp	r3, #1
   11fbc:	d10e      	bne.n	11fdc <LORAWAN_RxDone+0x81c>
   11fbe:	0022      	movs	r2, r4
   11fc0:	210e      	movs	r1, #14
   11fc2:	3284      	adds	r2, #132	; 0x84
   11fc4:	7813      	ldrb	r3, [r2, #0]
   11fc6:	438b      	bics	r3, r1
   11fc8:	7013      	strb	r3, [r2, #0]
   11fca:	2388      	movs	r3, #136	; 0x88
   11fcc:	009b      	lsls	r3, r3, #2
   11fce:	5ce3      	ldrb	r3, [r4, r3]
   11fd0:	2b00      	cmp	r3, #0
   11fd2:	d1e5      	bne.n	11fa0 <LORAWAN_RxDone+0x7e0>
   11fd4:	2008      	movs	r0, #8
   11fd6:	4b8f      	ldr	r3, [pc, #572]	; (12214 <LORAWAN_RxDone+0xa54>)
   11fd8:	4798      	blx	r3
   11fda:	e7e1      	b.n	11fa0 <LORAWAN_RxDone+0x7e0>
   11fdc:	2b04      	cmp	r3, #4
   11fde:	d1f4      	bne.n	11fca <LORAWAN_RxDone+0x80a>
   11fe0:	0023      	movs	r3, r4
   11fe2:	33f1      	adds	r3, #241	; 0xf1
   11fe4:	7818      	ldrb	r0, [r3, #0]
   11fe6:	4b87      	ldr	r3, [pc, #540]	; (12204 <LORAWAN_RxDone+0xa44>)
   11fe8:	4798      	blx	r3
   11fea:	e7ee      	b.n	11fca <LORAWAN_RxDone+0x80a>
   11fec:	35ff      	adds	r5, #255	; 0xff
   11fee:	7f6b      	ldrb	r3, [r5, #29]
   11ff0:	079a      	lsls	r2, r3, #30
   11ff2:	d520      	bpl.n	12036 <LORAWAN_RxDone+0x876>
   11ff4:	aa10      	add	r2, sp, #64	; 0x40
   11ff6:	0031      	movs	r1, r6
   11ff8:	2026      	movs	r0, #38	; 0x26
   11ffa:	47b8      	blx	r7
   11ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11ffe:	1c5a      	adds	r2, r3, #1
   12000:	d001      	beq.n	12006 <LORAWAN_RxDone+0x846>
   12002:	3314      	adds	r3, #20
   12004:	9310      	str	r3, [sp, #64]	; 0x40
   12006:	0021      	movs	r1, r4
   12008:	220e      	movs	r2, #14
   1200a:	3184      	adds	r1, #132	; 0x84
   1200c:	780b      	ldrb	r3, [r1, #0]
   1200e:	4393      	bics	r3, r2
   12010:	001a      	movs	r2, r3
   12012:	230c      	movs	r3, #12
   12014:	4313      	orrs	r3, r2
   12016:	700b      	strb	r3, [r1, #0]
   12018:	4b7f      	ldr	r3, [pc, #508]	; (12218 <LORAWAN_RxDone+0xa58>)
   1201a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1201c:	5ce3      	ldrb	r3, [r4, r3]
   1201e:	21fa      	movs	r1, #250	; 0xfa
   12020:	1ad3      	subs	r3, r2, r3
   12022:	2200      	movs	r2, #0
   12024:	0089      	lsls	r1, r1, #2
   12026:	4359      	muls	r1, r3
   12028:	34ef      	adds	r4, #239	; 0xef
   1202a:	4b7c      	ldr	r3, [pc, #496]	; (1221c <LORAWAN_RxDone+0xa5c>)
   1202c:	7820      	ldrb	r0, [r4, #0]
   1202e:	9200      	str	r2, [sp, #0]
   12030:	4c7b      	ldr	r4, [pc, #492]	; (12220 <LORAWAN_RxDone+0xa60>)
   12032:	47a0      	blx	r4
   12034:	e6e7      	b.n	11e06 <LORAWAN_RxDone+0x646>
   12036:	075b      	lsls	r3, r3, #29
   12038:	d400      	bmi.n	1203c <LORAWAN_RxDone+0x87c>
   1203a:	e6e4      	b.n	11e06 <LORAWAN_RxDone+0x646>
   1203c:	aa10      	add	r2, sp, #64	; 0x40
   1203e:	0031      	movs	r1, r6
   12040:	2032      	movs	r0, #50	; 0x32
   12042:	47b8      	blx	r7
   12044:	220e      	movs	r2, #14
   12046:	4b77      	ldr	r3, [pc, #476]	; (12224 <LORAWAN_RxDone+0xa64>)
   12048:	781b      	ldrb	r3, [r3, #0]
   1204a:	4393      	bics	r3, r2
   1204c:	001a      	movs	r2, r3
   1204e:	230c      	movs	r3, #12
   12050:	4313      	orrs	r3, r2
   12052:	4a74      	ldr	r2, [pc, #464]	; (12224 <LORAWAN_RxDone+0xa64>)
   12054:	7013      	strb	r3, [r2, #0]
   12056:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12058:	1c5a      	adds	r2, r3, #1
   1205a:	d001      	beq.n	12060 <LORAWAN_RxDone+0x8a0>
   1205c:	3301      	adds	r3, #1
   1205e:	9310      	str	r3, [sp, #64]	; 0x40
   12060:	4b6d      	ldr	r3, [pc, #436]	; (12218 <LORAWAN_RxDone+0xa58>)
   12062:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12064:	5ce3      	ldrb	r3, [r4, r3]
   12066:	21fa      	movs	r1, #250	; 0xfa
   12068:	1ad3      	subs	r3, r2, r3
   1206a:	2200      	movs	r2, #0
   1206c:	0089      	lsls	r1, r1, #2
   1206e:	34f2      	adds	r4, #242	; 0xf2
   12070:	4359      	muls	r1, r3
   12072:	7820      	ldrb	r0, [r4, #0]
   12074:	4b6c      	ldr	r3, [pc, #432]	; (12228 <LORAWAN_RxDone+0xa68>)
   12076:	9200      	str	r2, [sp, #0]
   12078:	e7da      	b.n	12030 <LORAWAN_RxDone+0x870>
   1207a:	35fd      	adds	r5, #253	; 0xfd
   1207c:	782b      	ldrb	r3, [r5, #0]
   1207e:	2b04      	cmp	r3, #4
   12080:	d000      	beq.n	12084 <LORAWAN_RxDone+0x8c4>
   12082:	e6c0      	b.n	11e06 <LORAWAN_RxDone+0x646>
   12084:	0038      	movs	r0, r7
   12086:	4b69      	ldr	r3, [pc, #420]	; (1222c <LORAWAN_RxDone+0xa6c>)
   12088:	4798      	blx	r3
   1208a:	e6bc      	b.n	11e06 <LORAWAN_RxDone+0x646>
   1208c:	2390      	movs	r3, #144	; 0x90
   1208e:	009b      	lsls	r3, r3, #2
   12090:	5ce3      	ldrb	r3, [r4, r3]
   12092:	2b00      	cmp	r3, #0
   12094:	d009      	beq.n	120aa <LORAWAN_RxDone+0x8ea>
   12096:	2322      	movs	r3, #34	; 0x22
   12098:	aa04      	add	r2, sp, #16
   1209a:	189b      	adds	r3, r3, r2
   1209c:	781b      	ldrb	r3, [r3, #0]
   1209e:	003a      	movs	r2, r7
   120a0:	9906      	ldr	r1, [sp, #24]
   120a2:	0038      	movs	r0, r7
   120a4:	4c62      	ldr	r4, [pc, #392]	; (12230 <LORAWAN_RxDone+0xa70>)
   120a6:	47a0      	blx	r4
   120a8:	e6ad      	b.n	11e06 <LORAWAN_RxDone+0x646>
   120aa:	2220      	movs	r2, #32
   120ac:	3494      	adds	r4, #148	; 0x94
   120ae:	7823      	ldrb	r3, [r4, #0]
   120b0:	201e      	movs	r0, #30
   120b2:	4393      	bics	r3, r2
   120b4:	7023      	strb	r3, [r4, #0]
   120b6:	4b57      	ldr	r3, [pc, #348]	; (12214 <LORAWAN_RxDone+0xa54>)
   120b8:	4798      	blx	r3
   120ba:	e6c7      	b.n	11e4c <LORAWAN_RxDone+0x68c>
   120bc:	220e      	movs	r2, #14
   120be:	4013      	ands	r3, r2
   120c0:	2b0a      	cmp	r3, #10
   120c2:	d008      	beq.n	120d6 <LORAWAN_RxDone+0x916>
   120c4:	2b06      	cmp	r3, #6
   120c6:	d000      	beq.n	120ca <LORAWAN_RxDone+0x90a>
   120c8:	e5a0      	b.n	11c0c <LORAWAN_RxDone+0x44c>
   120ca:	0023      	movs	r3, r4
   120cc:	33f9      	adds	r3, #249	; 0xf9
   120ce:	781b      	ldrb	r3, [r3, #0]
   120d0:	2b00      	cmp	r3, #0
   120d2:	d100      	bne.n	120d6 <LORAWAN_RxDone+0x916>
   120d4:	e59a      	b.n	11c0c <LORAWAN_RxDone+0x44c>
   120d6:	2220      	movs	r2, #32
   120d8:	3494      	adds	r4, #148	; 0x94
   120da:	7823      	ldrb	r3, [r4, #0]
   120dc:	2019      	movs	r0, #25
   120de:	4393      	bics	r3, r2
   120e0:	7023      	strb	r3, [r4, #0]
   120e2:	e5a0      	b.n	11c26 <LORAWAN_RxDone+0x466>
   120e4:	4953      	ldr	r1, [pc, #332]	; (12234 <LORAWAN_RxDone+0xa74>)
   120e6:	784a      	ldrb	r2, [r1, #1]
   120e8:	780b      	ldrb	r3, [r1, #0]
   120ea:	0212      	lsls	r2, r2, #8
   120ec:	431a      	orrs	r2, r3
   120ee:	788b      	ldrb	r3, [r1, #2]
   120f0:	041b      	lsls	r3, r3, #16
   120f2:	431a      	orrs	r2, r3
   120f4:	78cb      	ldrb	r3, [r1, #3]
   120f6:	061b      	lsls	r3, r3, #24
   120f8:	4313      	orrs	r3, r2
   120fa:	d100      	bne.n	120fe <LORAWAN_RxDone+0x93e>
   120fc:	e683      	b.n	11e06 <LORAWAN_RxDone+0x646>
   120fe:	4b4e      	ldr	r3, [pc, #312]	; (12238 <LORAWAN_RxDone+0xa78>)
   12100:	4c4e      	ldr	r4, [pc, #312]	; (1223c <LORAWAN_RxDone+0xa7c>)
   12102:	781b      	ldrb	r3, [r3, #0]
   12104:	2b10      	cmp	r3, #16
   12106:	d105      	bne.n	12114 <LORAWAN_RxDone+0x954>
   12108:	0001      	movs	r1, r0
   1210a:	2000      	movs	r0, #0
   1210c:	9a06      	ldr	r2, [sp, #24]
   1210e:	3b0c      	subs	r3, #12
   12110:	47a0      	blx	r4
   12112:	e678      	b.n	11e06 <LORAWAN_RxDone+0x646>
   12114:	2300      	movs	r3, #0
   12116:	0001      	movs	r1, r0
   12118:	9a06      	ldr	r2, [sp, #24]
   1211a:	0018      	movs	r0, r3
   1211c:	e7f8      	b.n	12110 <LORAWAN_RxDone+0x950>
   1211e:	348c      	adds	r4, #140	; 0x8c
   12120:	6823      	ldr	r3, [r4, #0]
   12122:	0031      	movs	r1, r6
   12124:	9308      	str	r3, [sp, #32]
   12126:	4b46      	ldr	r3, [pc, #280]	; (12240 <LORAWAN_RxDone+0xa80>)
   12128:	4798      	blx	r3
   1212a:	2808      	cmp	r0, #8
   1212c:	d001      	beq.n	12132 <LORAWAN_RxDone+0x972>
   1212e:	f7ff fbab 	bl	11888 <LORAWAN_RxDone+0xc8>
   12132:	9b06      	ldr	r3, [sp, #24]
   12134:	0028      	movs	r0, r5
   12136:	1f1a      	subs	r2, r3, #4
   12138:	9b07      	ldr	r3, [sp, #28]
   1213a:	b2d2      	uxtb	r2, r2
   1213c:	9300      	str	r3, [sp, #0]
   1213e:	6821      	ldr	r1, [r4, #0]
   12140:	2349      	movs	r3, #73	; 0x49
   12142:	4c40      	ldr	r4, [pc, #256]	; (12244 <LORAWAN_RxDone+0xa84>)
   12144:	47a0      	blx	r4
   12146:	4d40      	ldr	r5, [pc, #256]	; (12248 <LORAWAN_RxDone+0xa88>)
   12148:	9607      	str	r6, [sp, #28]
   1214a:	4e40      	ldr	r6, [pc, #256]	; (1224c <LORAWAN_RxDone+0xa8c>)
   1214c:	4c40      	ldr	r4, [pc, #256]	; (12250 <LORAWAN_RxDone+0xa90>)
   1214e:	2210      	movs	r2, #16
   12150:	0021      	movs	r1, r4
   12152:	4b40      	ldr	r3, [pc, #256]	; (12254 <LORAWAN_RxDone+0xa94>)
   12154:	0030      	movs	r0, r6
   12156:	4798      	blx	r3
   12158:	9b06      	ldr	r3, [sp, #24]
   1215a:	0039      	movs	r1, r7
   1215c:	3b04      	subs	r3, #4
   1215e:	001a      	movs	r2, r3
   12160:	9309      	str	r3, [sp, #36]	; 0x24
   12162:	483d      	ldr	r0, [pc, #244]	; (12258 <LORAWAN_RxDone+0xa98>)
   12164:	4b3b      	ldr	r3, [pc, #236]	; (12254 <LORAWAN_RxDone+0xa94>)
   12166:	4798      	blx	r3
   12168:	9b06      	ldr	r3, [sp, #24]
   1216a:	9a07      	ldr	r2, [sp, #28]
   1216c:	330c      	adds	r3, #12
   1216e:	b29b      	uxth	r3, r3
   12170:	9300      	str	r3, [sp, #0]
   12172:	0033      	movs	r3, r6
   12174:	2a00      	cmp	r2, #0
   12176:	d100      	bne.n	1217a <LORAWAN_RxDone+0x9ba>
   12178:	e557      	b.n	11c2a <LORAWAN_RxDone+0x46a>
   1217a:	0022      	movs	r2, r4
   1217c:	2104      	movs	r1, #4
   1217e:	4c37      	ldr	r4, [pc, #220]	; (1225c <LORAWAN_RxDone+0xa9c>)
   12180:	0028      	movs	r0, r5
   12182:	47a0      	blx	r4
   12184:	2204      	movs	r2, #4
   12186:	4932      	ldr	r1, [pc, #200]	; (12250 <LORAWAN_RxDone+0xa90>)
   12188:	4c32      	ldr	r4, [pc, #200]	; (12254 <LORAWAN_RxDone+0xa94>)
   1218a:	a80d      	add	r0, sp, #52	; 0x34
   1218c:	47a0      	blx	r4
   1218e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12190:	2204      	movs	r2, #4
   12192:	18f9      	adds	r1, r7, r3
   12194:	a810      	add	r0, sp, #64	; 0x40
   12196:	47a0      	blx	r4
   12198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1219a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1219c:	4293      	cmp	r3, r2
   1219e:	d100      	bne.n	121a2 <LORAWAN_RxDone+0x9e2>
   121a0:	e54a      	b.n	11c38 <LORAWAN_RxDone+0x478>
   121a2:	9b07      	ldr	r3, [sp, #28]
   121a4:	2b00      	cmp	r3, #0
   121a6:	d108      	bne.n	121ba <LORAWAN_RxDone+0x9fa>
   121a8:	220e      	movs	r2, #14
   121aa:	4b2d      	ldr	r3, [pc, #180]	; (12260 <LORAWAN_RxDone+0xaa0>)
   121ac:	3384      	adds	r3, #132	; 0x84
   121ae:	781b      	ldrb	r3, [r3, #0]
   121b0:	4013      	ands	r3, r2
   121b2:	2b06      	cmp	r3, #6
   121b4:	d101      	bne.n	121ba <LORAWAN_RxDone+0x9fa>
   121b6:	4b2b      	ldr	r3, [pc, #172]	; (12264 <LORAWAN_RxDone+0xaa4>)
   121b8:	4798      	blx	r3
   121ba:	491e      	ldr	r1, [pc, #120]	; (12234 <LORAWAN_RxDone+0xa74>)
   121bc:	784a      	ldrb	r2, [r1, #1]
   121be:	780b      	ldrb	r3, [r1, #0]
   121c0:	0212      	lsls	r2, r2, #8
   121c2:	431a      	orrs	r2, r3
   121c4:	788b      	ldrb	r3, [r1, #2]
   121c6:	041b      	lsls	r3, r3, #16
   121c8:	431a      	orrs	r2, r3
   121ca:	78cb      	ldrb	r3, [r1, #3]
   121cc:	061b      	lsls	r3, r3, #24
   121ce:	4313      	orrs	r3, r2
   121d0:	d101      	bne.n	121d6 <LORAWAN_RxDone+0xa16>
   121d2:	f7ff fb47 	bl	11864 <LORAWAN_RxDone+0xa4>
   121d6:	4a22      	ldr	r2, [pc, #136]	; (12260 <LORAWAN_RxDone+0xaa0>)
   121d8:	2020      	movs	r0, #32
   121da:	0011      	movs	r1, r2
   121dc:	3194      	adds	r1, #148	; 0x94
   121de:	780b      	ldrb	r3, [r1, #0]
   121e0:	4383      	bics	r3, r0
   121e2:	700b      	strb	r3, [r1, #0]
   121e4:	9b07      	ldr	r3, [sp, #28]
   121e6:	2b00      	cmp	r3, #0
   121e8:	d100      	bne.n	121ec <LORAWAN_RxDone+0xa2c>
   121ea:	e521      	b.n	11c30 <LORAWAN_RxDone+0x470>
   121ec:	2322      	movs	r3, #34	; 0x22
   121ee:	a904      	add	r1, sp, #16
   121f0:	185b      	adds	r3, r3, r1
   121f2:	7819      	ldrb	r1, [r3, #0]
   121f4:	233c      	movs	r3, #60	; 0x3c
   121f6:	434b      	muls	r3, r1
   121f8:	18d3      	adds	r3, r2, r3
   121fa:	9a08      	ldr	r2, [sp, #32]
   121fc:	33fc      	adds	r3, #252	; 0xfc
   121fe:	659a      	str	r2, [r3, #88]	; 0x58
   12200:	2018      	movs	r0, #24
   12202:	e510      	b.n	11c26 <LORAWAN_RxDone+0x466>
   12204:	0000d3d5 	.word	0x0000d3d5
   12208:	0001034d 	.word	0x0001034d
   1220c:	000102b1 	.word	0x000102b1
   12210:	00010df1 	.word	0x00010df1
   12214:	00010d41 	.word	0x00010d41
   12218:	0000022b 	.word	0x0000022b
   1221c:	000100f9 	.word	0x000100f9
   12220:	0000d0bd 	.word	0x0000d0bd
   12224:	200031f4 	.word	0x200031f4
   12228:	00010b59 	.word	0x00010b59
   1222c:	00012c75 	.word	0x00012c75
   12230:	00012e69 	.word	0x00012e69
   12234:	200034cc 	.word	0x200034cc
   12238:	2000224f 	.word	0x2000224f
   1223c:	00010da5 	.word	0x00010da5
   12240:	00011291 	.word	0x00011291
   12244:	0000fe99 	.word	0x0000fe99
   12248:	20003195 	.word	0x20003195
   1224c:	20002f34 	.word	0x20002f34
   12250:	20001eb5 	.word	0x20001eb5
   12254:	000166f7 	.word	0x000166f7
   12258:	20002f44 	.word	0x20002f44
   1225c:	00007259 	.word	0x00007259
   12260:	20003170 	.word	0x20003170
   12264:	0000ff31 	.word	0x0000ff31

00012268 <LorawanSetEdClass>:
   12268:	2388      	movs	r3, #136	; 0x88
   1226a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1226c:	4d1a      	ldr	r5, [pc, #104]	; (122d8 <LorawanSetEdClass+0x70>)
   1226e:	009b      	lsls	r3, r3, #2
   12270:	5ceb      	ldrb	r3, [r5, r3]
   12272:	0004      	movs	r4, r0
   12274:	2011      	movs	r0, #17
   12276:	2b00      	cmp	r3, #0
   12278:	d013      	beq.n	122a2 <LorawanSetEdClass+0x3a>
   1227a:	002b      	movs	r3, r5
   1227c:	33fe      	adds	r3, #254	; 0xfe
   1227e:	781b      	ldrb	r3, [r3, #0]
   12280:	3807      	subs	r0, #7
   12282:	4223      	tst	r3, r4
   12284:	d00d      	beq.n	122a2 <LorawanSetEdClass+0x3a>
   12286:	002b      	movs	r3, r5
   12288:	33fd      	adds	r3, #253	; 0xfd
   1228a:	7819      	ldrb	r1, [r3, #0]
   1228c:	428c      	cmp	r4, r1
   1228e:	d007      	beq.n	122a0 <LorawanSetEdClass+0x38>
   12290:	2901      	cmp	r1, #1
   12292:	d107      	bne.n	122a4 <LorawanSetEdClass+0x3c>
   12294:	2c04      	cmp	r4, #4
   12296:	d104      	bne.n	122a2 <LorawanSetEdClass+0x3a>
   12298:	701c      	strb	r4, [r3, #0]
   1229a:	2000      	movs	r0, #0
   1229c:	4b0f      	ldr	r3, [pc, #60]	; (122dc <LorawanSetEdClass+0x74>)
   1229e:	4798      	blx	r3
   122a0:	2008      	movs	r0, #8
   122a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   122a4:	2904      	cmp	r1, #4
   122a6:	d1fc      	bne.n	122a2 <LorawanSetEdClass+0x3a>
   122a8:	2c01      	cmp	r4, #1
   122aa:	d1fa      	bne.n	122a2 <LorawanSetEdClass+0x3a>
   122ac:	701c      	strb	r4, [r3, #0]
   122ae:	0021      	movs	r1, r4
   122b0:	4b0a      	ldr	r3, [pc, #40]	; (122dc <LorawanSetEdClass+0x74>)
   122b2:	2000      	movs	r0, #0
   122b4:	4798      	blx	r3
   122b6:	002a      	movs	r2, r5
   122b8:	210e      	movs	r1, #14
   122ba:	3284      	adds	r2, #132	; 0x84
   122bc:	7813      	ldrb	r3, [r2, #0]
   122be:	a801      	add	r0, sp, #4
   122c0:	438b      	bics	r3, r1
   122c2:	7013      	strb	r3, [r2, #0]
   122c4:	4b06      	ldr	r3, [pc, #24]	; (122e0 <LorawanSetEdClass+0x78>)
   122c6:	7004      	strb	r4, [r0, #0]
   122c8:	4798      	blx	r3
   122ca:	2394      	movs	r3, #148	; 0x94
   122cc:	005b      	lsls	r3, r3, #1
   122ce:	5ce8      	ldrb	r0, [r5, r3]
   122d0:	4b04      	ldr	r3, [pc, #16]	; (122e4 <LorawanSetEdClass+0x7c>)
   122d2:	4798      	blx	r3
   122d4:	e7e4      	b.n	122a0 <LorawanSetEdClass+0x38>
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	20003170 	.word	0x20003170
   122dc:	0000933d 	.word	0x0000933d
   122e0:	0000f471 	.word	0x0000f471
   122e4:	0000d3d5 	.word	0x0000d3d5

000122e8 <LORAWAN_SetAttr>:
   122e8:	2388      	movs	r3, #136	; 0x88
   122ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   122ec:	4cbb      	ldr	r4, [pc, #748]	; (125dc <LORAWAN_SetAttr+0x2f4>)
   122ee:	009b      	lsls	r3, r3, #2
   122f0:	5ce3      	ldrb	r3, [r4, r3]
   122f2:	000d      	movs	r5, r1
   122f4:	2611      	movs	r6, #17
   122f6:	2b00      	cmp	r3, #0
   122f8:	d100      	bne.n	122fc <LORAWAN_SetAttr+0x14>
   122fa:	e11f      	b.n	1253c <LORAWAN_SetAttr+0x254>
   122fc:	2846      	cmp	r0, #70	; 0x46
   122fe:	d878      	bhi.n	123f2 <LORAWAN_SetAttr+0x10a>
   12300:	f001 f8be 	bl	13480 <__gnu_thumb1_case_uhi>
   12304:	00930047 	.word	0x00930047
   12308:	00fc00b2 	.word	0x00fc00b2
   1230c:	00e600c5 	.word	0x00e600c5
   12310:	0134011e 	.word	0x0134011e
   12314:	01660154 	.word	0x01660154
   12318:	01830178 	.word	0x01830178
   1231c:	01a6018d 	.word	0x01a6018d
   12320:	007701ab 	.word	0x007701ab
   12324:	01b501b0 	.word	0x01b501b0
   12328:	01bf01ba 	.word	0x01bf01ba
   1232c:	01e601c4 	.word	0x01e601c4
   12330:	01cb01eb 	.word	0x01cb01eb
   12334:	01fc01c8 	.word	0x01fc01c8
   12338:	01e101f8 	.word	0x01e101f8
   1233c:	01d701dd 	.word	0x01d701dd
   12340:	00770077 	.word	0x00770077
   12344:	0077019e 	.word	0x0077019e
   12348:	00770077 	.word	0x00770077
   1234c:	00770077 	.word	0x00770077
   12350:	02000077 	.word	0x02000077
   12354:	02030066 	.word	0x02030066
   12358:	020d0211 	.word	0x020d0211
   1235c:	00770208 	.word	0x00770208
   12360:	02190215 	.word	0x02190215
   12364:	0221021d 	.word	0x0221021d
   12368:	02290225 	.word	0x02290225
   1236c:	00770249 	.word	0x00770249
   12370:	00770077 	.word	0x00770077
   12374:	00770077 	.word	0x00770077
   12378:	00770077 	.word	0x00770077
   1237c:	00770077 	.word	0x00770077
   12380:	02600077 	.word	0x02600077
   12384:	026e026a 	.word	0x026e026a
   12388:	00770077 	.word	0x00770077
   1238c:	02730077 	.word	0x02730077
   12390:	0271      	.short	0x0271
   12392:	260a      	movs	r6, #10
   12394:	2900      	cmp	r1, #0
   12396:	d100      	bne.n	1239a <LORAWAN_SetAttr+0xb2>
   12398:	e0d0      	b.n	1253c <LORAWAN_SetAttr+0x254>
   1239a:	0020      	movs	r0, r4
   1239c:	2208      	movs	r2, #8
   1239e:	4b90      	ldr	r3, [pc, #576]	; (125e0 <LORAWAN_SetAttr+0x2f8>)
   123a0:	305d      	adds	r0, #93	; 0x5d
   123a2:	4798      	blx	r3
   123a4:	2108      	movs	r1, #8
   123a6:	4e8f      	ldr	r6, [pc, #572]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   123a8:	2001      	movs	r0, #1
   123aa:	47b0      	blx	r6
   123ac:	0022      	movs	r2, r4
   123ae:	2501      	movs	r5, #1
   123b0:	32de      	adds	r2, #222	; 0xde
   123b2:	7813      	ldrb	r3, [r2, #0]
   123b4:	2109      	movs	r1, #9
   123b6:	432b      	orrs	r3, r5
   123b8:	3484      	adds	r4, #132	; 0x84
   123ba:	0028      	movs	r0, r5
   123bc:	7013      	strb	r3, [r2, #0]
   123be:	47b0      	blx	r6
   123c0:	7823      	ldrb	r3, [r4, #0]
   123c2:	210b      	movs	r1, #11
   123c4:	43ab      	bics	r3, r5
   123c6:	0028      	movs	r0, r5
   123c8:	7023      	strb	r3, [r4, #0]
   123ca:	47b0      	blx	r6
   123cc:	2608      	movs	r6, #8
   123ce:	e0b5      	b.n	1253c <LORAWAN_SetAttr+0x254>
   123d0:	0023      	movs	r3, r4
   123d2:	33ff      	adds	r3, #255	; 0xff
   123d4:	7f5b      	ldrb	r3, [r3, #29]
   123d6:	260a      	movs	r6, #10
   123d8:	075b      	lsls	r3, r3, #29
   123da:	d400      	bmi.n	123de <LORAWAN_SetAttr+0xf6>
   123dc:	e0ae      	b.n	1253c <LORAWAN_SetAttr+0x254>
   123de:	79ca      	ldrb	r2, [r1, #7]
   123e0:	4b81      	ldr	r3, [pc, #516]	; (125e8 <LORAWAN_SetAttr+0x300>)
   123e2:	2a00      	cmp	r2, #0
   123e4:	d10e      	bne.n	12404 <LORAWAN_SetAttr+0x11c>
   123e6:	4669      	mov	r1, sp
   123e8:	201d      	movs	r0, #29
   123ea:	714a      	strb	r2, [r1, #5]
   123ec:	4798      	blx	r3
   123ee:	2800      	cmp	r0, #0
   123f0:	d001      	beq.n	123f6 <LORAWAN_SetAttr+0x10e>
   123f2:	260a      	movs	r6, #10
   123f4:	e0a2      	b.n	1253c <LORAWAN_SetAttr+0x254>
   123f6:	2109      	movs	r1, #9
   123f8:	34fe      	adds	r4, #254	; 0xfe
   123fa:	8460      	strh	r0, [r4, #34]	; 0x22
   123fc:	8420      	strh	r0, [r4, #32]
   123fe:	4b79      	ldr	r3, [pc, #484]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   12400:	4798      	blx	r3
   12402:	e7e3      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   12404:	2002      	movs	r0, #2
   12406:	5e2a      	ldrsh	r2, [r5, r0]
   12408:	88ae      	ldrh	r6, [r5, #4]
   1240a:	79a8      	ldrb	r0, [r5, #6]
   1240c:	466d      	mov	r5, sp
   1240e:	806a      	strh	r2, [r5, #2]
   12410:	2201      	movs	r2, #1
   12412:	8809      	ldrh	r1, [r1, #0]
   12414:	7128      	strb	r0, [r5, #4]
   12416:	8029      	strh	r1, [r5, #0]
   12418:	201d      	movs	r0, #29
   1241a:	4669      	mov	r1, sp
   1241c:	716a      	strb	r2, [r5, #5]
   1241e:	4798      	blx	r3
   12420:	2800      	cmp	r0, #0
   12422:	d1e6      	bne.n	123f2 <LORAWAN_SetAttr+0x10a>
   12424:	34fe      	adds	r4, #254	; 0xfe
   12426:	8466      	strh	r6, [r4, #34]	; 0x22
   12428:	e7d0      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   1242a:	260a      	movs	r6, #10
   1242c:	2900      	cmp	r1, #0
   1242e:	d100      	bne.n	12432 <LORAWAN_SetAttr+0x14a>
   12430:	e084      	b.n	1253c <LORAWAN_SetAttr+0x254>
   12432:	0020      	movs	r0, r4
   12434:	2208      	movs	r2, #8
   12436:	4b6a      	ldr	r3, [pc, #424]	; (125e0 <LORAWAN_SetAttr+0x2f8>)
   12438:	3055      	adds	r0, #85	; 0x55
   1243a:	4798      	blx	r3
   1243c:	2107      	movs	r1, #7
   1243e:	4d69      	ldr	r5, [pc, #420]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   12440:	2001      	movs	r0, #1
   12442:	47a8      	blx	r5
   12444:	0022      	movs	r2, r4
   12446:	2302      	movs	r3, #2
   12448:	32de      	adds	r2, #222	; 0xde
   1244a:	7811      	ldrb	r1, [r2, #0]
   1244c:	2001      	movs	r0, #1
   1244e:	430b      	orrs	r3, r1
   12450:	2109      	movs	r1, #9
   12452:	7013      	strb	r3, [r2, #0]
   12454:	47a8      	blx	r5
   12456:	2001      	movs	r0, #1
   12458:	3484      	adds	r4, #132	; 0x84
   1245a:	7823      	ldrb	r3, [r4, #0]
   1245c:	210b      	movs	r1, #11
   1245e:	4383      	bics	r3, r0
   12460:	7023      	strb	r3, [r4, #0]
   12462:	47a8      	blx	r5
   12464:	3e02      	subs	r6, #2
   12466:	e069      	b.n	1253c <LORAWAN_SetAttr+0x254>
   12468:	680b      	ldr	r3, [r1, #0]
   1246a:	2001      	movs	r0, #1
   1246c:	0a19      	lsrs	r1, r3, #8
   1246e:	70a1      	strb	r1, [r4, #2]
   12470:	0c19      	lsrs	r1, r3, #16
   12472:	7063      	strb	r3, [r4, #1]
   12474:	70e1      	strb	r1, [r4, #3]
   12476:	0e1b      	lsrs	r3, r3, #24
   12478:	2103      	movs	r1, #3
   1247a:	4d5a      	ldr	r5, [pc, #360]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   1247c:	7123      	strb	r3, [r4, #4]
   1247e:	47a8      	blx	r5
   12480:	0022      	movs	r2, r4
   12482:	2304      	movs	r3, #4
   12484:	32de      	adds	r2, #222	; 0xde
   12486:	7811      	ldrb	r1, [r2, #0]
   12488:	430b      	orrs	r3, r1
   1248a:	7013      	strb	r3, [r2, #0]
   1248c:	e015      	b.n	124ba <LORAWAN_SetAttr+0x1d2>
   1248e:	260a      	movs	r6, #10
   12490:	2900      	cmp	r1, #0
   12492:	d053      	beq.n	1253c <LORAWAN_SetAttr+0x254>
   12494:	3606      	adds	r6, #6
   12496:	0032      	movs	r2, r6
   12498:	4f51      	ldr	r7, [pc, #324]	; (125e0 <LORAWAN_SetAttr+0x2f8>)
   1249a:	1d60      	adds	r0, r4, #5
   1249c:	47b8      	blx	r7
   1249e:	0020      	movs	r0, r4
   124a0:	0032      	movs	r2, r6
   124a2:	0029      	movs	r1, r5
   124a4:	3025      	adds	r0, #37	; 0x25
   124a6:	47b8      	blx	r7
   124a8:	2104      	movs	r1, #4
   124aa:	2001      	movs	r0, #1
   124ac:	4d4d      	ldr	r5, [pc, #308]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   124ae:	47a8      	blx	r5
   124b0:	0023      	movs	r3, r4
   124b2:	33de      	adds	r3, #222	; 0xde
   124b4:	781a      	ldrb	r2, [r3, #0]
   124b6:	4316      	orrs	r6, r2
   124b8:	701e      	strb	r6, [r3, #0]
   124ba:	2109      	movs	r1, #9
   124bc:	2001      	movs	r0, #1
   124be:	47a8      	blx	r5
   124c0:	2001      	movs	r0, #1
   124c2:	210b      	movs	r1, #11
   124c4:	3484      	adds	r4, #132	; 0x84
   124c6:	7823      	ldrb	r3, [r4, #0]
   124c8:	4383      	bics	r3, r0
   124ca:	7023      	strb	r3, [r4, #0]
   124cc:	47a8      	blx	r5
   124ce:	e77d      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   124d0:	260a      	movs	r6, #10
   124d2:	2900      	cmp	r1, #0
   124d4:	d032      	beq.n	1253c <LORAWAN_SetAttr+0x254>
   124d6:	0020      	movs	r0, r4
   124d8:	2210      	movs	r2, #16
   124da:	4e41      	ldr	r6, [pc, #260]	; (125e0 <LORAWAN_SetAttr+0x2f8>)
   124dc:	3015      	adds	r0, #21
   124de:	47b0      	blx	r6
   124e0:	0020      	movs	r0, r4
   124e2:	2210      	movs	r2, #16
   124e4:	0029      	movs	r1, r5
   124e6:	3035      	adds	r0, #53	; 0x35
   124e8:	47b0      	blx	r6
   124ea:	2105      	movs	r1, #5
   124ec:	2001      	movs	r0, #1
   124ee:	4d3d      	ldr	r5, [pc, #244]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   124f0:	47a8      	blx	r5
   124f2:	0022      	movs	r2, r4
   124f4:	32de      	adds	r2, #222	; 0xde
   124f6:	7811      	ldrb	r1, [r2, #0]
   124f8:	2320      	movs	r3, #32
   124fa:	e7c5      	b.n	12488 <LORAWAN_SetAttr+0x1a0>
   124fc:	260a      	movs	r6, #10
   124fe:	2900      	cmp	r1, #0
   12500:	d01c      	beq.n	1253c <LORAWAN_SetAttr+0x254>
   12502:	4b3a      	ldr	r3, [pc, #232]	; (125ec <LORAWAN_SetAttr+0x304>)
   12504:	3e02      	subs	r6, #2
   12506:	5ce3      	ldrb	r3, [r4, r3]
   12508:	2b00      	cmp	r3, #0
   1250a:	d117      	bne.n	1253c <LORAWAN_SetAttr+0x254>
   1250c:	0020      	movs	r0, r4
   1250e:	2210      	movs	r2, #16
   12510:	4b33      	ldr	r3, [pc, #204]	; (125e0 <LORAWAN_SetAttr+0x2f8>)
   12512:	3045      	adds	r0, #69	; 0x45
   12514:	4798      	blx	r3
   12516:	2106      	movs	r1, #6
   12518:	4d32      	ldr	r5, [pc, #200]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   1251a:	2001      	movs	r0, #1
   1251c:	47a8      	blx	r5
   1251e:	0022      	movs	r2, r4
   12520:	32de      	adds	r2, #222	; 0xde
   12522:	7813      	ldrb	r3, [r2, #0]
   12524:	2109      	movs	r1, #9
   12526:	4333      	orrs	r3, r6
   12528:	2001      	movs	r0, #1
   1252a:	7013      	strb	r3, [r2, #0]
   1252c:	47a8      	blx	r5
   1252e:	2001      	movs	r0, #1
   12530:	3484      	adds	r4, #132	; 0x84
   12532:	7823      	ldrb	r3, [r4, #0]
   12534:	210b      	movs	r1, #11
   12536:	4383      	bics	r3, r0
   12538:	7023      	strb	r3, [r4, #0]
   1253a:	47a8      	blx	r5
   1253c:	0030      	movs	r0, r6
   1253e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12540:	780b      	ldrb	r3, [r1, #0]
   12542:	2001      	movs	r0, #1
   12544:	0021      	movs	r1, r4
   12546:	2520      	movs	r5, #32
   12548:	3184      	adds	r1, #132	; 0x84
   1254a:	4003      	ands	r3, r0
   1254c:	015a      	lsls	r2, r3, #5
   1254e:	780b      	ldrb	r3, [r1, #0]
   12550:	43ab      	bics	r3, r5
   12552:	4313      	orrs	r3, r2
   12554:	700b      	strb	r3, [r1, #0]
   12556:	0023      	movs	r3, r4
   12558:	2200      	movs	r2, #0
   1255a:	33ca      	adds	r3, #202	; 0xca
   1255c:	3494      	adds	r4, #148	; 0x94
   1255e:	801a      	strh	r2, [r3, #0]
   12560:	7823      	ldrb	r3, [r4, #0]
   12562:	3210      	adds	r2, #16
   12564:	4393      	bics	r3, r2
   12566:	7023      	strb	r3, [r4, #0]
   12568:	210b      	movs	r1, #11
   1256a:	e748      	b.n	123fe <LORAWAN_SetAttr+0x116>
   1256c:	466a      	mov	r2, sp
   1256e:	780b      	ldrb	r3, [r1, #0]
   12570:	7013      	strb	r3, [r2, #0]
   12572:	0022      	movs	r2, r4
   12574:	32f3      	adds	r2, #243	; 0xf3
   12576:	7812      	ldrb	r2, [r2, #0]
   12578:	429a      	cmp	r2, r3
   1257a:	d900      	bls.n	1257e <LORAWAN_SetAttr+0x296>
   1257c:	e739      	b.n	123f2 <LORAWAN_SetAttr+0x10a>
   1257e:	0022      	movs	r2, r4
   12580:	32f4      	adds	r2, #244	; 0xf4
   12582:	7812      	ldrb	r2, [r2, #0]
   12584:	429a      	cmp	r2, r3
   12586:	d200      	bcs.n	1258a <LORAWAN_SetAttr+0x2a2>
   12588:	e733      	b.n	123f2 <LORAWAN_SetAttr+0x10a>
   1258a:	4669      	mov	r1, sp
   1258c:	2010      	movs	r0, #16
   1258e:	4b18      	ldr	r3, [pc, #96]	; (125f0 <LORAWAN_SetAttr+0x308>)
   12590:	4798      	blx	r3
   12592:	0006      	movs	r6, r0
   12594:	2808      	cmp	r0, #8
   12596:	d000      	beq.n	1259a <LORAWAN_SetAttr+0x2b2>
   12598:	e72b      	b.n	123f2 <LORAWAN_SetAttr+0x10a>
   1259a:	466b      	mov	r3, sp
   1259c:	210c      	movs	r1, #12
   1259e:	2001      	movs	r0, #1
   125a0:	781b      	ldrb	r3, [r3, #0]
   125a2:	34e7      	adds	r4, #231	; 0xe7
   125a4:	7023      	strb	r3, [r4, #0]
   125a6:	4b0f      	ldr	r3, [pc, #60]	; (125e4 <LORAWAN_SetAttr+0x2fc>)
   125a8:	4798      	blx	r3
   125aa:	e7c7      	b.n	1253c <LORAWAN_SetAttr+0x254>
   125ac:	466a      	mov	r2, sp
   125ae:	780b      	ldrb	r3, [r1, #0]
   125b0:	201d      	movs	r0, #29
   125b2:	7013      	strb	r3, [r2, #0]
   125b4:	4669      	mov	r1, sp
   125b6:	4b0e      	ldr	r3, [pc, #56]	; (125f0 <LORAWAN_SetAttr+0x308>)
   125b8:	4798      	blx	r3
   125ba:	0006      	movs	r6, r0
   125bc:	2808      	cmp	r0, #8
   125be:	d000      	beq.n	125c2 <LORAWAN_SetAttr+0x2da>
   125c0:	e717      	b.n	123f2 <LORAWAN_SetAttr+0x10a>
   125c2:	466b      	mov	r3, sp
   125c4:	781b      	ldrb	r3, [r3, #0]
   125c6:	34e9      	adds	r4, #233	; 0xe9
   125c8:	7023      	strb	r3, [r4, #0]
   125ca:	210a      	movs	r1, #10
   125cc:	2000      	movs	r0, #0
   125ce:	e7ea      	b.n	125a6 <LORAWAN_SetAttr+0x2be>
   125d0:	780b      	ldrb	r3, [r1, #0]
   125d2:	2103      	movs	r1, #3
   125d4:	34ff      	adds	r4, #255	; 0xff
   125d6:	7063      	strb	r3, [r4, #1]
   125d8:	2000      	movs	r0, #0
   125da:	e710      	b.n	123fe <LORAWAN_SetAttr+0x116>
   125dc:	20003170 	.word	0x20003170
   125e0:	000166f7 	.word	0x000166f7
   125e4:	0000933d 	.word	0x0000933d
   125e8:	0000e265 	.word	0x0000e265
   125ec:	0000022d 	.word	0x0000022d
   125f0:	0000cb91 	.word	0x0000cb91
   125f4:	680b      	ldr	r3, [r1, #0]
   125f6:	260a      	movs	r6, #10
   125f8:	1c5a      	adds	r2, r3, #1
   125fa:	d09f      	beq.n	1253c <LORAWAN_SetAttr+0x254>
   125fc:	2115      	movs	r1, #21
   125fe:	2000      	movs	r0, #0
   12600:	3488      	adds	r4, #136	; 0x88
   12602:	6023      	str	r3, [r4, #0]
   12604:	4b7f      	ldr	r3, [pc, #508]	; (12804 <LORAWAN_SetAttr+0x51c>)
   12606:	4798      	blx	r3
   12608:	e72c      	b.n	12464 <LORAWAN_SetAttr+0x17c>
   1260a:	680b      	ldr	r3, [r1, #0]
   1260c:	260a      	movs	r6, #10
   1260e:	1c5a      	adds	r2, r3, #1
   12610:	d100      	bne.n	12614 <LORAWAN_SetAttr+0x32c>
   12612:	e793      	b.n	1253c <LORAWAN_SetAttr+0x254>
   12614:	0031      	movs	r1, r6
   12616:	348c      	adds	r4, #140	; 0x8c
   12618:	6023      	str	r3, [r4, #0]
   1261a:	2001      	movs	r0, #1
   1261c:	e7f2      	b.n	12604 <LORAWAN_SetAttr+0x31c>
   1261e:	0026      	movs	r6, r4
   12620:	880b      	ldrh	r3, [r1, #0]
   12622:	36d0      	adds	r6, #208	; 0xd0
   12624:	210c      	movs	r1, #12
   12626:	2000      	movs	r0, #0
   12628:	4d76      	ldr	r5, [pc, #472]	; (12804 <LORAWAN_SetAttr+0x51c>)
   1262a:	8033      	strh	r3, [r6, #0]
   1262c:	47a8      	blx	r5
   1262e:	22fa      	movs	r2, #250	; 0xfa
   12630:	8833      	ldrh	r3, [r6, #0]
   12632:	0092      	lsls	r2, r2, #2
   12634:	189b      	adds	r3, r3, r2
   12636:	34d2      	adds	r4, #210	; 0xd2
   12638:	8023      	strh	r3, [r4, #0]
   1263a:	210d      	movs	r1, #13
   1263c:	2000      	movs	r0, #0
   1263e:	e745      	b.n	124cc <LORAWAN_SetAttr+0x1e4>
   12640:	780b      	ldrb	r3, [r1, #0]
   12642:	260a      	movs	r6, #10
   12644:	2b0f      	cmp	r3, #15
   12646:	d900      	bls.n	1264a <LORAWAN_SetAttr+0x362>
   12648:	e778      	b.n	1253c <LORAWAN_SetAttr+0x254>
   1264a:	3498      	adds	r4, #152	; 0x98
   1264c:	7023      	strb	r3, [r4, #0]
   1264e:	e709      	b.n	12464 <LORAWAN_SetAttr+0x17c>
   12650:	880b      	ldrh	r3, [r1, #0]
   12652:	34d4      	adds	r4, #212	; 0xd4
   12654:	8023      	strh	r3, [r4, #0]
   12656:	210e      	movs	r1, #14
   12658:	e7be      	b.n	125d8 <LORAWAN_SetAttr+0x2f0>
   1265a:	880b      	ldrh	r3, [r1, #0]
   1265c:	34d6      	adds	r4, #214	; 0xd6
   1265e:	8023      	strh	r3, [r4, #0]
   12660:	210f      	movs	r1, #15
   12662:	e7b9      	b.n	125d8 <LORAWAN_SetAttr+0x2f0>
   12664:	780b      	ldrb	r3, [r1, #0]
   12666:	34dc      	adds	r4, #220	; 0xdc
   12668:	7023      	strb	r3, [r4, #0]
   1266a:	2111      	movs	r1, #17
   1266c:	e7b4      	b.n	125d8 <LORAWAN_SetAttr+0x2f0>
   1266e:	780b      	ldrb	r3, [r1, #0]
   12670:	34dd      	adds	r4, #221	; 0xdd
   12672:	7023      	strb	r3, [r4, #0]
   12674:	2112      	movs	r1, #18
   12676:	e7af      	b.n	125d8 <LORAWAN_SetAttr+0x2f0>
   12678:	880b      	ldrh	r3, [r1, #0]
   1267a:	34da      	adds	r4, #218	; 0xda
   1267c:	8023      	strh	r3, [r4, #0]
   1267e:	2110      	movs	r1, #16
   12680:	e7aa      	b.n	125d8 <LORAWAN_SetAttr+0x2f0>
   12682:	780b      	ldrb	r3, [r1, #0]
   12684:	34e2      	adds	r4, #226	; 0xe2
   12686:	7023      	strb	r3, [r4, #0]
   12688:	2114      	movs	r1, #20
   1268a:	e7a5      	b.n	125d8 <LORAWAN_SetAttr+0x2f0>
   1268c:	780b      	ldrb	r3, [r1, #0]
   1268e:	34e1      	adds	r4, #225	; 0xe1
   12690:	7023      	strb	r3, [r4, #0]
   12692:	e69b      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   12694:	780b      	ldrb	r3, [r1, #0]
   12696:	34e8      	adds	r4, #232	; 0xe8
   12698:	e7fa      	b.n	12690 <LORAWAN_SetAttr+0x3a8>
   1269a:	2001      	movs	r0, #1
   1269c:	780b      	ldrb	r3, [r1, #0]
   1269e:	2110      	movs	r1, #16
   126a0:	3484      	adds	r4, #132	; 0x84
   126a2:	4003      	ands	r3, r0
   126a4:	011a      	lsls	r2, r3, #4
   126a6:	7823      	ldrb	r3, [r4, #0]
   126a8:	438b      	bics	r3, r1
   126aa:	4313      	orrs	r3, r2
   126ac:	7023      	strb	r3, [r4, #0]
   126ae:	3905      	subs	r1, #5
   126b0:	e6a5      	b.n	123fe <LORAWAN_SetAttr+0x116>
   126b2:	7909      	ldrb	r1, [r1, #4]
   126b4:	7828      	ldrb	r0, [r5, #0]
   126b6:	4b54      	ldr	r3, [pc, #336]	; (12808 <LORAWAN_SetAttr+0x520>)
   126b8:	4798      	blx	r3
   126ba:	0006      	movs	r6, r0
   126bc:	e73e      	b.n	1253c <LORAWAN_SetAttr+0x254>
   126be:	7909      	ldrb	r1, [r1, #4]
   126c0:	7828      	ldrb	r0, [r5, #0]
   126c2:	4b52      	ldr	r3, [pc, #328]	; (1280c <LORAWAN_SetAttr+0x524>)
   126c4:	e7f8      	b.n	126b8 <LORAWAN_SetAttr+0x3d0>
   126c6:	7808      	ldrb	r0, [r1, #0]
   126c8:	4b51      	ldr	r3, [pc, #324]	; (12810 <LORAWAN_SetAttr+0x528>)
   126ca:	6849      	ldr	r1, [r1, #4]
   126cc:	4798      	blx	r3
   126ce:	e7f4      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   126d0:	7909      	ldrb	r1, [r1, #4]
   126d2:	6828      	ldr	r0, [r5, #0]
   126d4:	4b4f      	ldr	r3, [pc, #316]	; (12814 <LORAWAN_SetAttr+0x52c>)
   126d6:	4798      	blx	r3
   126d8:	e7ef      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   126da:	786b      	ldrb	r3, [r5, #1]
   126dc:	7828      	ldrb	r0, [r5, #0]
   126de:	021b      	lsls	r3, r3, #8
   126e0:	4303      	orrs	r3, r0
   126e2:	78a8      	ldrb	r0, [r5, #2]
   126e4:	7909      	ldrb	r1, [r1, #4]
   126e6:	0400      	lsls	r0, r0, #16
   126e8:	4303      	orrs	r3, r0
   126ea:	78e8      	ldrb	r0, [r5, #3]
   126ec:	0600      	lsls	r0, r0, #24
   126ee:	4318      	orrs	r0, r3
   126f0:	4b49      	ldr	r3, [pc, #292]	; (12818 <LORAWAN_SetAttr+0x530>)
   126f2:	e7f0      	b.n	126d6 <LORAWAN_SetAttr+0x3ee>
   126f4:	7808      	ldrb	r0, [r1, #0]
   126f6:	4b49      	ldr	r3, [pc, #292]	; (1281c <LORAWAN_SetAttr+0x534>)
   126f8:	4798      	blx	r3
   126fa:	e7de      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   126fc:	8808      	ldrh	r0, [r1, #0]
   126fe:	4b48      	ldr	r3, [pc, #288]	; (12820 <LORAWAN_SetAttr+0x538>)
   12700:	4798      	blx	r3
   12702:	e663      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   12704:	4b47      	ldr	r3, [pc, #284]	; (12824 <LORAWAN_SetAttr+0x53c>)
   12706:	6019      	str	r1, [r3, #0]
   12708:	e673      	b.n	123f2 <LORAWAN_SetAttr+0x10a>
   1270a:	7809      	ldrb	r1, [r1, #0]
   1270c:	7868      	ldrb	r0, [r5, #1]
   1270e:	4b46      	ldr	r3, [pc, #280]	; (12828 <LORAWAN_SetAttr+0x540>)
   12710:	4798      	blx	r3
   12712:	e7d2      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   12714:	7809      	ldrb	r1, [r1, #0]
   12716:	4b45      	ldr	r3, [pc, #276]	; (1282c <LORAWAN_SetAttr+0x544>)
   12718:	1c68      	adds	r0, r5, #1
   1271a:	4798      	blx	r3
   1271c:	e7cd      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   1271e:	7809      	ldrb	r1, [r1, #0]
   12720:	1c68      	adds	r0, r5, #1
   12722:	4b43      	ldr	r3, [pc, #268]	; (12830 <LORAWAN_SetAttr+0x548>)
   12724:	e7f9      	b.n	1271a <LORAWAN_SetAttr+0x432>
   12726:	7809      	ldrb	r1, [r1, #0]
   12728:	6868      	ldr	r0, [r5, #4]
   1272a:	4b42      	ldr	r3, [pc, #264]	; (12834 <LORAWAN_SetAttr+0x54c>)
   1272c:	e7f5      	b.n	1271a <LORAWAN_SetAttr+0x432>
   1272e:	7809      	ldrb	r1, [r1, #0]
   12730:	6868      	ldr	r0, [r5, #4]
   12732:	4b41      	ldr	r3, [pc, #260]	; (12838 <LORAWAN_SetAttr+0x550>)
   12734:	e7f1      	b.n	1271a <LORAWAN_SetAttr+0x432>
   12736:	7809      	ldrb	r1, [r1, #0]
   12738:	6868      	ldr	r0, [r5, #4]
   1273a:	4b40      	ldr	r3, [pc, #256]	; (1283c <LORAWAN_SetAttr+0x554>)
   1273c:	e7ed      	b.n	1271a <LORAWAN_SetAttr+0x432>
   1273e:	7809      	ldrb	r1, [r1, #0]
   12740:	6868      	ldr	r0, [r5, #4]
   12742:	4b3f      	ldr	r3, [pc, #252]	; (12840 <LORAWAN_SetAttr+0x558>)
   12744:	e7e9      	b.n	1271a <LORAWAN_SetAttr+0x432>
   12746:	7809      	ldrb	r1, [r1, #0]
   12748:	7868      	ldrb	r0, [r5, #1]
   1274a:	4b3e      	ldr	r3, [pc, #248]	; (12844 <LORAWAN_SetAttr+0x55c>)
   1274c:	e7e0      	b.n	12710 <LORAWAN_SetAttr+0x428>
   1274e:	7809      	ldrb	r1, [r1, #0]
   12750:	7868      	ldrb	r0, [r5, #1]
   12752:	4b3d      	ldr	r3, [pc, #244]	; (12848 <LORAWAN_SetAttr+0x560>)
   12754:	e7dc      	b.n	12710 <LORAWAN_SetAttr+0x428>
   12756:	2300      	movs	r3, #0
   12758:	466a      	mov	r2, sp
   1275a:	7809      	ldrb	r1, [r1, #0]
   1275c:	7013      	strb	r3, [r2, #0]
   1275e:	4299      	cmp	r1, r3
   12760:	d014      	beq.n	1278c <LORAWAN_SetAttr+0x4a4>
   12762:	0022      	movs	r2, r4
   12764:	2102      	movs	r1, #2
   12766:	32ff      	adds	r2, #255	; 0xff
   12768:	7f53      	ldrb	r3, [r2, #29]
   1276a:	420b      	tst	r3, r1
   1276c:	d001      	beq.n	12772 <LORAWAN_SetAttr+0x48a>
   1276e:	438b      	bics	r3, r1
   12770:	7753      	strb	r3, [r2, #29]
   12772:	2220      	movs	r2, #32
   12774:	34ff      	adds	r4, #255	; 0xff
   12776:	7f63      	ldrb	r3, [r4, #29]
   12778:	4213      	tst	r3, r2
   1277a:	d100      	bne.n	1277e <LORAWAN_SetAttr+0x496>
   1277c:	e626      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   1277e:	4393      	bics	r3, r2
   12780:	7763      	strb	r3, [r4, #29]
   12782:	4669      	mov	r1, sp
   12784:	4b31      	ldr	r3, [pc, #196]	; (1284c <LORAWAN_SetAttr+0x564>)
   12786:	2038      	movs	r0, #56	; 0x38
   12788:	4798      	blx	r3
   1278a:	e61f      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   1278c:	4a30      	ldr	r2, [pc, #192]	; (12850 <LORAWAN_SetAttr+0x568>)
   1278e:	4b31      	ldr	r3, [pc, #196]	; (12854 <LORAWAN_SetAttr+0x56c>)
   12790:	200e      	movs	r0, #14
   12792:	4798      	blx	r3
   12794:	e61a      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   12796:	466b      	mov	r3, sp
   12798:	780a      	ldrb	r2, [r1, #0]
   1279a:	34ff      	adds	r4, #255	; 0xff
   1279c:	701a      	strb	r2, [r3, #0]
   1279e:	2320      	movs	r3, #32
   127a0:	2a00      	cmp	r2, #0
   127a2:	d007      	beq.n	127b4 <LORAWAN_SetAttr+0x4cc>
   127a4:	7f62      	ldrb	r2, [r4, #29]
   127a6:	4313      	orrs	r3, r2
   127a8:	7763      	strb	r3, [r4, #29]
   127aa:	4669      	mov	r1, sp
   127ac:	4b27      	ldr	r3, [pc, #156]	; (1284c <LORAWAN_SetAttr+0x564>)
   127ae:	2038      	movs	r0, #56	; 0x38
   127b0:	4798      	blx	r3
   127b2:	e782      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   127b4:	7f62      	ldrb	r2, [r4, #29]
   127b6:	260a      	movs	r6, #10
   127b8:	421a      	tst	r2, r3
   127ba:	d100      	bne.n	127be <LORAWAN_SetAttr+0x4d6>
   127bc:	e6be      	b.n	1253c <LORAWAN_SetAttr+0x254>
   127be:	439a      	bics	r2, r3
   127c0:	7762      	strb	r2, [r4, #29]
   127c2:	e7f2      	b.n	127aa <LORAWAN_SetAttr+0x4c2>
   127c4:	780b      	ldrb	r3, [r1, #0]
   127c6:	260a      	movs	r6, #10
   127c8:	2b08      	cmp	r3, #8
   127ca:	d900      	bls.n	127ce <LORAWAN_SetAttr+0x4e6>
   127cc:	e6b6      	b.n	1253c <LORAWAN_SetAttr+0x254>
   127ce:	228b      	movs	r2, #139	; 0x8b
   127d0:	0092      	lsls	r2, r2, #2
   127d2:	54a3      	strb	r3, [r4, r2]
   127d4:	210d      	movs	r1, #13
   127d6:	e720      	b.n	1261a <LORAWAN_SetAttr+0x332>
   127d8:	780a      	ldrb	r2, [r1, #0]
   127da:	4b1f      	ldr	r3, [pc, #124]	; (12858 <LORAWAN_SetAttr+0x570>)
   127dc:	54e2      	strb	r2, [r4, r3]
   127de:	e5f5      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   127e0:	4b1e      	ldr	r3, [pc, #120]	; (1285c <LORAWAN_SetAttr+0x574>)
   127e2:	4798      	blx	r3
   127e4:	e769      	b.n	126ba <LORAWAN_SetAttr+0x3d2>
   127e6:	4b1e      	ldr	r3, [pc, #120]	; (12860 <LORAWAN_SetAttr+0x578>)
   127e8:	e7fb      	b.n	127e2 <LORAWAN_SetAttr+0x4fa>
   127ea:	780a      	ldrb	r2, [r1, #0]
   127ec:	2302      	movs	r3, #2
   127ee:	34ff      	adds	r4, #255	; 0xff
   127f0:	2a00      	cmp	r2, #0
   127f2:	d003      	beq.n	127fc <LORAWAN_SetAttr+0x514>
   127f4:	7f62      	ldrb	r2, [r4, #29]
   127f6:	4313      	orrs	r3, r2
   127f8:	7763      	strb	r3, [r4, #29]
   127fa:	e5e7      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   127fc:	7f62      	ldrb	r2, [r4, #29]
   127fe:	439a      	bics	r2, r3
   12800:	7762      	strb	r2, [r4, #29]
   12802:	e5e3      	b.n	123cc <LORAWAN_SetAttr+0xe4>
   12804:	0000933d 	.word	0x0000933d
   12808:	00011771 	.word	0x00011771
   1280c:	00011701 	.word	0x00011701
   12810:	00010f29 	.word	0x00010f29
   12814:	00010ea1 	.word	0x00010ea1
   12818:	00010edd 	.word	0x00010edd
   1281c:	00012269 	.word	0x00012269
   12820:	0001013d 	.word	0x0001013d
   12824:	200034c8 	.word	0x200034c8
   12828:	00012d7d 	.word	0x00012d7d
   1282c:	00012fdd 	.word	0x00012fdd
   12830:	00013029 	.word	0x00013029
   12834:	00012f95 	.word	0x00012f95
   12838:	00013075 	.word	0x00013075
   1283c:	00013095 	.word	0x00013095
   12840:	000130b1 	.word	0x000130b1
   12844:	000130f5 	.word	0x000130f5
   12848:	00013131 	.word	0x00013131
   1284c:	0000cbad 	.word	0x0000cbad
   12850:	2000328c 	.word	0x2000328c
   12854:	0000cb75 	.word	0x0000cb75
   12858:	0000022d 	.word	0x0000022d
   1285c:	000101d9 	.word	0x000101d9
   12860:	00010201 	.word	0x00010201

00012864 <AssemblePacket>:
   12864:	b5f0      	push	{r4, r5, r6, r7, lr}
   12866:	2710      	movs	r7, #16
   12868:	b08f      	sub	sp, #60	; 0x3c
   1286a:	9308      	str	r3, [sp, #32]
   1286c:	ab0d      	add	r3, sp, #52	; 0x34
   1286e:	801f      	strh	r7, [r3, #0]
   12870:	231e      	movs	r3, #30
   12872:	920a      	str	r2, [sp, #40]	; 0x28
   12874:	aa06      	add	r2, sp, #24
   12876:	189b      	adds	r3, r3, r2
   12878:	2500      	movs	r5, #0
   1287a:	2210      	movs	r2, #16
   1287c:	ac0c      	add	r4, sp, #48	; 0x30
   1287e:	9006      	str	r0, [sp, #24]
   12880:	910b      	str	r1, [sp, #44]	; 0x2c
   12882:	32ff      	adds	r2, #255	; 0xff
   12884:	0029      	movs	r1, r5
   12886:	4ed1      	ldr	r6, [pc, #836]	; (12bcc <AssemblePacket+0x368>)
   12888:	7025      	strb	r5, [r4, #0]
   1288a:	48d1      	ldr	r0, [pc, #836]	; (12bd0 <AssemblePacket+0x36c>)
   1288c:	801d      	strh	r5, [r3, #0]
   1288e:	47b0      	blx	r6
   12890:	003a      	movs	r2, r7
   12892:	0029      	movs	r1, r5
   12894:	48cf      	ldr	r0, [pc, #828]	; (12bd4 <AssemblePacket+0x370>)
   12896:	47b0      	blx	r6
   12898:	221f      	movs	r2, #31
   1289a:	7823      	ldrb	r3, [r4, #0]
   1289c:	9906      	ldr	r1, [sp, #24]
   1289e:	4013      	ands	r3, r2
   128a0:	42a9      	cmp	r1, r5
   128a2:	d100      	bne.n	128a6 <AssemblePacket+0x42>
   128a4:	e0dc      	b.n	12a60 <AssemblePacket+0x1fc>
   128a6:	3a9f      	subs	r2, #159	; 0x9f
   128a8:	4313      	orrs	r3, r2
   128aa:	7023      	strb	r3, [r4, #0]
   128ac:	4bca      	ldr	r3, [pc, #808]	; (12bd8 <AssemblePacket+0x374>)
   128ae:	3281      	adds	r2, #129	; 0x81
   128b0:	3394      	adds	r3, #148	; 0x94
   128b2:	7819      	ldrb	r1, [r3, #0]
   128b4:	430a      	orrs	r2, r1
   128b6:	701a      	strb	r2, [r3, #0]
   128b8:	22e0      	movs	r2, #224	; 0xe0
   128ba:	7823      	ldrb	r3, [r4, #0]
   128bc:	48c4      	ldr	r0, [pc, #784]	; (12bd0 <AssemblePacket+0x36c>)
   128be:	4013      	ands	r3, r2
   128c0:	7023      	strb	r3, [r4, #0]
   128c2:	4cc5      	ldr	r4, [pc, #788]	; (12bd8 <AssemblePacket+0x374>)
   128c4:	7403      	strb	r3, [r0, #16]
   128c6:	3adc      	subs	r2, #220	; 0xdc
   128c8:	4bc4      	ldr	r3, [pc, #784]	; (12bdc <AssemblePacket+0x378>)
   128ca:	3011      	adds	r0, #17
   128cc:	1c61      	adds	r1, r4, #1
   128ce:	4798      	blx	r3
   128d0:	2215      	movs	r2, #21
   128d2:	ab0d      	add	r3, sp, #52	; 0x34
   128d4:	0025      	movs	r5, r4
   128d6:	801a      	strh	r2, [r3, #0]
   128d8:	2600      	movs	r6, #0
   128da:	466b      	mov	r3, sp
   128dc:	3584      	adds	r5, #132	; 0x84
   128de:	761e      	strb	r6, [r3, #24]
   128e0:	782b      	ldrb	r3, [r5, #0]
   128e2:	069b      	lsls	r3, r3, #26
   128e4:	d400      	bmi.n	128e8 <AssemblePacket+0x84>
   128e6:	e130      	b.n	12b4a <AssemblePacket+0x2e6>
   128e8:	0027      	movs	r7, r4
   128ea:	4bbd      	ldr	r3, [pc, #756]	; (12be0 <AssemblePacket+0x37c>)
   128ec:	37f3      	adds	r7, #243	; 0xf3
   128ee:	781a      	ldrb	r2, [r3, #0]
   128f0:	783b      	ldrb	r3, [r7, #0]
   128f2:	429a      	cmp	r2, r3
   128f4:	d31e      	bcc.n	12934 <AssemblePacket+0xd0>
   128f6:	2180      	movs	r1, #128	; 0x80
   128f8:	466b      	mov	r3, sp
   128fa:	0022      	movs	r2, r4
   128fc:	4249      	negs	r1, r1
   128fe:	32ca      	adds	r2, #202	; 0xca
   12900:	7619      	strb	r1, [r3, #24]
   12902:	8813      	ldrh	r3, [r2, #0]
   12904:	3301      	adds	r3, #1
   12906:	b29b      	uxth	r3, r3
   12908:	8013      	strh	r3, [r2, #0]
   1290a:	0022      	movs	r2, r4
   1290c:	32dc      	adds	r2, #220	; 0xdc
   1290e:	7812      	ldrb	r2, [r2, #0]
   12910:	4293      	cmp	r3, r2
   12912:	d30f      	bcc.n	12934 <AssemblePacket+0xd0>
   12914:	2040      	movs	r0, #64	; 0x40
   12916:	4308      	orrs	r0, r1
   12918:	9006      	str	r0, [sp, #24]
   1291a:	0020      	movs	r0, r4
   1291c:	3094      	adds	r0, #148	; 0x94
   1291e:	7801      	ldrb	r1, [r0, #0]
   12920:	4684      	mov	ip, r0
   12922:	2010      	movs	r0, #16
   12924:	4301      	orrs	r1, r0
   12926:	4660      	mov	r0, ip
   12928:	7001      	strb	r1, [r0, #0]
   1292a:	4293      	cmp	r3, r2
   1292c:	d000      	beq.n	12930 <AssemblePacket+0xcc>
   1292e:	e09b      	b.n	12a68 <AssemblePacket+0x204>
   12930:	34f6      	adds	r4, #246	; 0xf6
   12932:	7026      	strb	r6, [r4, #0]
   12934:	4da8      	ldr	r5, [pc, #672]	; (12bd8 <AssemblePacket+0x374>)
   12936:	2102      	movs	r1, #2
   12938:	002a      	movs	r2, r5
   1293a:	3294      	adds	r2, #148	; 0x94
   1293c:	7813      	ldrb	r3, [r2, #0]
   1293e:	420b      	tst	r3, r1
   12940:	d005      	beq.n	1294e <AssemblePacket+0xea>
   12942:	2020      	movs	r0, #32
   12944:	9c06      	ldr	r4, [sp, #24]
   12946:	438b      	bics	r3, r1
   12948:	4304      	orrs	r4, r0
   1294a:	9406      	str	r4, [sp, #24]
   1294c:	7013      	strb	r3, [r2, #0]
   1294e:	2310      	movs	r3, #16
   12950:	9c06      	ldr	r4, [sp, #24]
   12952:	439c      	bics	r4, r3
   12954:	002b      	movs	r3, r5
   12956:	33e0      	adds	r3, #224	; 0xe0
   12958:	781b      	ldrb	r3, [r3, #0]
   1295a:	9309      	str	r3, [sp, #36]	; 0x24
   1295c:	2b00      	cmp	r3, #0
   1295e:	d003      	beq.n	12968 <AssemblePacket+0x104>
   12960:	9b08      	ldr	r3, [sp, #32]
   12962:	2b00      	cmp	r3, #0
   12964:	d000      	beq.n	12968 <AssemblePacket+0x104>
   12966:	e0f6      	b.n	12b56 <AssemblePacket+0x2f2>
   12968:	230f      	movs	r3, #15
   1296a:	439c      	bics	r4, r3
   1296c:	466b      	mov	r3, sp
   1296e:	9406      	str	r4, [sp, #24]
   12970:	ac0d      	add	r4, sp, #52	; 0x34
   12972:	8826      	ldrh	r6, [r4, #0]
   12974:	4f96      	ldr	r7, [pc, #600]	; (12bd0 <AssemblePacket+0x36c>)
   12976:	7e1b      	ldrb	r3, [r3, #24]
   12978:	1c70      	adds	r0, r6, #1
   1297a:	b280      	uxth	r0, r0
   1297c:	55bb      	strb	r3, [r7, r6]
   1297e:	19c0      	adds	r0, r0, r7
   12980:	4b96      	ldr	r3, [pc, #600]	; (12bdc <AssemblePacket+0x378>)
   12982:	2202      	movs	r2, #2
   12984:	4997      	ldr	r1, [pc, #604]	; (12be4 <AssemblePacket+0x380>)
   12986:	4798      	blx	r3
   12988:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1298a:	3603      	adds	r6, #3
   1298c:	8026      	strh	r6, [r4, #0]
   1298e:	2b00      	cmp	r3, #0
   12990:	d100      	bne.n	12994 <AssemblePacket+0x130>
   12992:	e0e7      	b.n	12b64 <AssemblePacket+0x300>
   12994:	9b08      	ldr	r3, [sp, #32]
   12996:	2b00      	cmp	r3, #0
   12998:	d004      	beq.n	129a4 <AssemblePacket+0x140>
   1299a:	2201      	movs	r2, #1
   1299c:	0021      	movs	r1, r4
   1299e:	0038      	movs	r0, r7
   129a0:	4b91      	ldr	r3, [pc, #580]	; (12be8 <AssemblePacket+0x384>)
   129a2:	4798      	blx	r3
   129a4:	466a      	mov	r2, sp
   129a6:	212c      	movs	r1, #44	; 0x2c
   129a8:	1852      	adds	r2, r2, r1
   129aa:	8823      	ldrh	r3, [r4, #0]
   129ac:	7812      	ldrb	r2, [r2, #0]
   129ae:	1c5e      	adds	r6, r3, #1
   129b0:	54fa      	strb	r2, [r7, r3]
   129b2:	9b08      	ldr	r3, [sp, #32]
   129b4:	b2b6      	uxth	r6, r6
   129b6:	8026      	strh	r6, [r4, #0]
   129b8:	2b00      	cmp	r3, #0
   129ba:	d100      	bne.n	129be <AssemblePacket+0x15a>
   129bc:	e0d6      	b.n	12b6c <AssemblePacket+0x308>
   129be:	001a      	movs	r2, r3
   129c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   129c2:	4b86      	ldr	r3, [pc, #536]	; (12bdc <AssemblePacket+0x378>)
   129c4:	19b8      	adds	r0, r7, r6
   129c6:	4798      	blx	r3
   129c8:	2120      	movs	r1, #32
   129ca:	466b      	mov	r3, sp
   129cc:	185b      	adds	r3, r3, r1
   129ce:	7819      	ldrb	r1, [r3, #0]
   129d0:	682b      	ldr	r3, [r5, #0]
   129d2:	002a      	movs	r2, r5
   129d4:	0a18      	lsrs	r0, r3, #8
   129d6:	792b      	ldrb	r3, [r5, #4]
   129d8:	3288      	adds	r2, #136	; 0x88
   129da:	061b      	lsls	r3, r3, #24
   129dc:	4303      	orrs	r3, r0
   129de:	9304      	str	r3, [sp, #16]
   129e0:	2301      	movs	r3, #1
   129e2:	9301      	str	r3, [sp, #4]
   129e4:	4b81      	ldr	r3, [pc, #516]	; (12bec <AssemblePacket+0x388>)
   129e6:	9703      	str	r7, [sp, #12]
   129e8:	9602      	str	r6, [sp, #8]
   129ea:	9300      	str	r3, [sp, #0]
   129ec:	6813      	ldr	r3, [r2, #0]
   129ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   129f0:	2200      	movs	r2, #0
   129f2:	4c7f      	ldr	r4, [pc, #508]	; (12bf0 <AssemblePacket+0x38c>)
   129f4:	47a0      	blx	r4
   129f6:	2800      	cmp	r0, #0
   129f8:	d002      	beq.n	12a00 <AssemblePacket+0x19c>
   129fa:	2020      	movs	r0, #32
   129fc:	4b7d      	ldr	r3, [pc, #500]	; (12bf4 <AssemblePacket+0x390>)
   129fe:	4798      	blx	r3
   12a00:	aa0d      	add	r2, sp, #52	; 0x34
   12a02:	8813      	ldrh	r3, [r2, #0]
   12a04:	9908      	ldr	r1, [sp, #32]
   12a06:	18cb      	adds	r3, r1, r3
   12a08:	8013      	strh	r3, [r2, #0]
   12a0a:	4c73      	ldr	r4, [pc, #460]	; (12bd8 <AssemblePacket+0x374>)
   12a0c:	ae0d      	add	r6, sp, #52	; 0x34
   12a0e:	0021      	movs	r1, r4
   12a10:	6823      	ldr	r3, [r4, #0]
   12a12:	8832      	ldrh	r2, [r6, #0]
   12a14:	0a18      	lsrs	r0, r3, #8
   12a16:	7923      	ldrb	r3, [r4, #4]
   12a18:	3a10      	subs	r2, #16
   12a1a:	061b      	lsls	r3, r3, #24
   12a1c:	4303      	orrs	r3, r0
   12a1e:	9300      	str	r3, [sp, #0]
   12a20:	3188      	adds	r1, #136	; 0x88
   12a22:	b2d2      	uxtb	r2, r2
   12a24:	2349      	movs	r3, #73	; 0x49
   12a26:	6809      	ldr	r1, [r1, #0]
   12a28:	2000      	movs	r0, #0
   12a2a:	4d73      	ldr	r5, [pc, #460]	; (12bf8 <AssemblePacket+0x394>)
   12a2c:	47a8      	blx	r5
   12a2e:	4f68      	ldr	r7, [pc, #416]	; (12bd0 <AssemblePacket+0x36c>)
   12a30:	2210      	movs	r2, #16
   12a32:	4968      	ldr	r1, [pc, #416]	; (12bd4 <AssemblePacket+0x370>)
   12a34:	0038      	movs	r0, r7
   12a36:	4b69      	ldr	r3, [pc, #420]	; (12bdc <AssemblePacket+0x378>)
   12a38:	4798      	blx	r3
   12a3a:	8833      	ldrh	r3, [r6, #0]
   12a3c:	4a65      	ldr	r2, [pc, #404]	; (12bd4 <AssemblePacket+0x370>)
   12a3e:	9300      	str	r3, [sp, #0]
   12a40:	2102      	movs	r1, #2
   12a42:	003b      	movs	r3, r7
   12a44:	4d6d      	ldr	r5, [pc, #436]	; (12bfc <AssemblePacket+0x398>)
   12a46:	486e      	ldr	r0, [pc, #440]	; (12c00 <AssemblePacket+0x39c>)
   12a48:	47a8      	blx	r5
   12a4a:	8836      	ldrh	r6, [r6, #0]
   12a4c:	2204      	movs	r2, #4
   12a4e:	19f0      	adds	r0, r6, r7
   12a50:	4960      	ldr	r1, [pc, #384]	; (12bd4 <AssemblePacket+0x370>)
   12a52:	4b62      	ldr	r3, [pc, #392]	; (12bdc <AssemblePacket+0x378>)
   12a54:	4798      	blx	r3
   12a56:	3e0c      	subs	r6, #12
   12a58:	34ce      	adds	r4, #206	; 0xce
   12a5a:	8026      	strh	r6, [r4, #0]
   12a5c:	b00f      	add	sp, #60	; 0x3c
   12a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a60:	2240      	movs	r2, #64	; 0x40
   12a62:	4313      	orrs	r3, r2
   12a64:	7023      	strb	r3, [r4, #0]
   12a66:	e727      	b.n	128b8 <AssemblePacket+0x54>
   12a68:	4293      	cmp	r3, r2
   12a6a:	d800      	bhi.n	12a6e <AssemblePacket+0x20a>
   12a6c:	e762      	b.n	12934 <AssemblePacket+0xd0>
   12a6e:	0022      	movs	r2, r4
   12a70:	0021      	movs	r1, r4
   12a72:	32f6      	adds	r2, #246	; 0xf6
   12a74:	7813      	ldrb	r3, [r2, #0]
   12a76:	31dd      	adds	r1, #221	; 0xdd
   12a78:	3301      	adds	r3, #1
   12a7a:	b2db      	uxtb	r3, r3
   12a7c:	7013      	strb	r3, [r2, #0]
   12a7e:	7809      	ldrb	r1, [r1, #0]
   12a80:	4299      	cmp	r1, r3
   12a82:	d900      	bls.n	12a86 <AssemblePacket+0x222>
   12a84:	e756      	b.n	12934 <AssemblePacket+0xd0>
   12a86:	231a      	movs	r3, #26
   12a88:	7016      	strb	r6, [r2, #0]
   12a8a:	aa06      	add	r2, sp, #24
   12a8c:	189b      	adds	r3, r3, r2
   12a8e:	001a      	movs	r2, r3
   12a90:	0031      	movs	r1, r6
   12a92:	4b5c      	ldr	r3, [pc, #368]	; (12c04 <AssemblePacket+0x3a0>)
   12a94:	203c      	movs	r0, #60	; 0x3c
   12a96:	4798      	blx	r3
   12a98:	4b5b      	ldr	r3, [pc, #364]	; (12c08 <AssemblePacket+0x3a4>)
   12a9a:	781a      	ldrb	r2, [r3, #0]
   12a9c:	ab06      	add	r3, sp, #24
   12a9e:	7e9b      	ldrb	r3, [r3, #26]
   12aa0:	429a      	cmp	r2, r3
   12aa2:	d00d      	beq.n	12ac0 <AssemblePacket+0x25c>
   12aa4:	34ff      	adds	r4, #255	; 0xff
   12aa6:	7820      	ldrb	r0, [r4, #0]
   12aa8:	4b58      	ldr	r3, [pc, #352]	; (12c0c <AssemblePacket+0x3a8>)
   12aaa:	4798      	blx	r3
   12aac:	0031      	movs	r1, r6
   12aae:	4a56      	ldr	r2, [pc, #344]	; (12c08 <AssemblePacket+0x3a4>)
   12ab0:	4b54      	ldr	r3, [pc, #336]	; (12c04 <AssemblePacket+0x3a0>)
   12ab2:	2035      	movs	r0, #53	; 0x35
   12ab4:	4798      	blx	r3
   12ab6:	210a      	movs	r1, #10
   12ab8:	0030      	movs	r0, r6
   12aba:	4b55      	ldr	r3, [pc, #340]	; (12c10 <AssemblePacket+0x3ac>)
   12abc:	4798      	blx	r3
   12abe:	e739      	b.n	12934 <AssemblePacket+0xd0>
   12ac0:	4b47      	ldr	r3, [pc, #284]	; (12be0 <AssemblePacket+0x37c>)
   12ac2:	783a      	ldrb	r2, [r7, #0]
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	4293      	cmp	r3, r2
   12ac8:	d022      	beq.n	12b10 <AssemblePacket+0x2ac>
   12aca:	d800      	bhi.n	12ace <AssemblePacket+0x26a>
   12acc:	e732      	b.n	12934 <AssemblePacket+0xd0>
   12ace:	221b      	movs	r2, #27
   12ad0:	003d      	movs	r5, r7
   12ad2:	a906      	add	r1, sp, #24
   12ad4:	3b01      	subs	r3, #1
   12ad6:	1852      	adds	r2, r2, r1
   12ad8:	7013      	strb	r3, [r2, #0]
   12ada:	261b      	movs	r6, #27
   12adc:	ab06      	add	r3, sp, #24
   12ade:	18f6      	adds	r6, r6, r3
   12ae0:	782a      	ldrb	r2, [r5, #0]
   12ae2:	7833      	ldrb	r3, [r6, #0]
   12ae4:	429a      	cmp	r2, r3
   12ae6:	d900      	bls.n	12aea <AssemblePacket+0x286>
   12ae8:	e724      	b.n	12934 <AssemblePacket+0xd0>
   12aea:	0031      	movs	r1, r6
   12aec:	2010      	movs	r0, #16
   12aee:	4f49      	ldr	r7, [pc, #292]	; (12c14 <AssemblePacket+0x3b0>)
   12af0:	47b8      	blx	r7
   12af2:	2808      	cmp	r0, #8
   12af4:	d000      	beq.n	12af8 <AssemblePacket+0x294>
   12af6:	e71d      	b.n	12934 <AssemblePacket+0xd0>
   12af8:	0031      	movs	r1, r6
   12afa:	3009      	adds	r0, #9
   12afc:	47b8      	blx	r7
   12afe:	7833      	ldrb	r3, [r6, #0]
   12b00:	2808      	cmp	r0, #8
   12b02:	d061      	beq.n	12bc8 <AssemblePacket+0x364>
   12b04:	782a      	ldrb	r2, [r5, #0]
   12b06:	429a      	cmp	r2, r3
   12b08:	d2e7      	bcs.n	12ada <AssemblePacket+0x276>
   12b0a:	3b01      	subs	r3, #1
   12b0c:	7033      	strb	r3, [r6, #0]
   12b0e:	e7e4      	b.n	12ada <AssemblePacket+0x276>
   12b10:	34ff      	adds	r4, #255	; 0xff
   12b12:	7820      	ldrb	r0, [r4, #0]
   12b14:	4b40      	ldr	r3, [pc, #256]	; (12c18 <AssemblePacket+0x3b4>)
   12b16:	4798      	blx	r3
   12b18:	231b      	movs	r3, #27
   12b1a:	aa06      	add	r2, sp, #24
   12b1c:	189b      	adds	r3, r3, r2
   12b1e:	0019      	movs	r1, r3
   12b20:	4c3e      	ldr	r4, [pc, #248]	; (12c1c <AssemblePacket+0x3b8>)
   12b22:	2013      	movs	r0, #19
   12b24:	47a0      	blx	r4
   12b26:	231b      	movs	r3, #27
   12b28:	aa06      	add	r2, sp, #24
   12b2a:	189b      	adds	r3, r3, r2
   12b2c:	0019      	movs	r1, r3
   12b2e:	2014      	movs	r0, #20
   12b30:	47a0      	blx	r4
   12b32:	2113      	movs	r1, #19
   12b34:	0030      	movs	r0, r6
   12b36:	4c36      	ldr	r4, [pc, #216]	; (12c10 <AssemblePacket+0x3ac>)
   12b38:	47a0      	blx	r4
   12b3a:	2210      	movs	r2, #16
   12b3c:	786b      	ldrb	r3, [r5, #1]
   12b3e:	210b      	movs	r1, #11
   12b40:	4313      	orrs	r3, r2
   12b42:	706b      	strb	r3, [r5, #1]
   12b44:	2001      	movs	r0, #1
   12b46:	47a0      	blx	r4
   12b48:	e6f4      	b.n	12934 <AssemblePacket+0xd0>
   12b4a:	2210      	movs	r2, #16
   12b4c:	3494      	adds	r4, #148	; 0x94
   12b4e:	7823      	ldrb	r3, [r4, #0]
   12b50:	4393      	bics	r3, r2
   12b52:	7023      	strb	r3, [r4, #0]
   12b54:	e6ee      	b.n	12934 <AssemblePacket+0xd0>
   12b56:	4b32      	ldr	r3, [pc, #200]	; (12c20 <AssemblePacket+0x3bc>)
   12b58:	4798      	blx	r3
   12b5a:	230f      	movs	r3, #15
   12b5c:	4018      	ands	r0, r3
   12b5e:	439c      	bics	r4, r3
   12b60:	4304      	orrs	r4, r0
   12b62:	e703      	b.n	1296c <AssemblePacket+0x108>
   12b64:	9b08      	ldr	r3, [sp, #32]
   12b66:	2b00      	cmp	r3, #0
   12b68:	d000      	beq.n	12b6c <AssemblePacket+0x308>
   12b6a:	e71b      	b.n	129a4 <AssemblePacket+0x140>
   12b6c:	4d1a      	ldr	r5, [pc, #104]	; (12bd8 <AssemblePacket+0x374>)
   12b6e:	002b      	movs	r3, r5
   12b70:	33e0      	adds	r3, #224	; 0xe0
   12b72:	781b      	ldrb	r3, [r3, #0]
   12b74:	2b00      	cmp	r3, #0
   12b76:	d100      	bne.n	12b7a <AssemblePacket+0x316>
   12b78:	e747      	b.n	12a0a <AssemblePacket+0x1a6>
   12b7a:	261e      	movs	r6, #30
   12b7c:	ab06      	add	r3, sp, #24
   12b7e:	18f6      	adds	r6, r6, r3
   12b80:	2200      	movs	r2, #0
   12b82:	0031      	movs	r1, r6
   12b84:	4827      	ldr	r0, [pc, #156]	; (12c24 <AssemblePacket+0x3c0>)
   12b86:	4b18      	ldr	r3, [pc, #96]	; (12be8 <AssemblePacket+0x384>)
   12b88:	4798      	blx	r3
   12b8a:	682b      	ldr	r3, [r5, #0]
   12b8c:	7831      	ldrb	r1, [r6, #0]
   12b8e:	0a18      	lsrs	r0, r3, #8
   12b90:	792b      	ldrb	r3, [r5, #4]
   12b92:	9703      	str	r7, [sp, #12]
   12b94:	061b      	lsls	r3, r3, #24
   12b96:	4303      	orrs	r3, r0
   12b98:	9304      	str	r3, [sp, #16]
   12b9a:	8823      	ldrh	r3, [r4, #0]
   12b9c:	002a      	movs	r2, r5
   12b9e:	9302      	str	r3, [sp, #8]
   12ba0:	2302      	movs	r3, #2
   12ba2:	9301      	str	r3, [sp, #4]
   12ba4:	4b16      	ldr	r3, [pc, #88]	; (12c00 <AssemblePacket+0x39c>)
   12ba6:	3288      	adds	r2, #136	; 0x88
   12ba8:	9300      	str	r3, [sp, #0]
   12baa:	6813      	ldr	r3, [r2, #0]
   12bac:	481d      	ldr	r0, [pc, #116]	; (12c24 <AssemblePacket+0x3c0>)
   12bae:	2200      	movs	r2, #0
   12bb0:	4d0f      	ldr	r5, [pc, #60]	; (12bf0 <AssemblePacket+0x38c>)
   12bb2:	47a8      	blx	r5
   12bb4:	2800      	cmp	r0, #0
   12bb6:	d002      	beq.n	12bbe <AssemblePacket+0x35a>
   12bb8:	2020      	movs	r0, #32
   12bba:	4b0e      	ldr	r3, [pc, #56]	; (12bf4 <AssemblePacket+0x390>)
   12bbc:	4798      	blx	r3
   12bbe:	8823      	ldrh	r3, [r4, #0]
   12bc0:	8832      	ldrh	r2, [r6, #0]
   12bc2:	189b      	adds	r3, r3, r2
   12bc4:	8023      	strh	r3, [r4, #0]
   12bc6:	e720      	b.n	12a0a <AssemblePacket+0x1a6>
   12bc8:	34e7      	adds	r4, #231	; 0xe7
   12bca:	e7c2      	b.n	12b52 <AssemblePacket+0x2ee>
   12bcc:	00016709 	.word	0x00016709
   12bd0:	200033b8 	.word	0x200033b8
   12bd4:	20001eb5 	.word	0x20001eb5
   12bd8:	20003170 	.word	0x20003170
   12bdc:	000166f7 	.word	0x000166f7
   12be0:	20003257 	.word	0x20003257
   12be4:	200031f8 	.word	0x200031f8
   12be8:	0000fb6d 	.word	0x0000fb6d
   12bec:	200031a5 	.word	0x200031a5
   12bf0:	00010c81 	.word	0x00010c81
   12bf4:	00010d41 	.word	0x00010d41
   12bf8:	0000fe99 	.word	0x0000fe99
   12bfc:	00007259 	.word	0x00007259
   12c00:	20003195 	.word	0x20003195
   12c04:	0000cb75 	.word	0x0000cb75
   12c08:	20003259 	.word	0x20003259
   12c0c:	0000cbc9 	.word	0x0000cbc9
   12c10:	0000933d 	.word	0x0000933d
   12c14:	0000cb91 	.word	0x0000cb91
   12c18:	0000cc55 	.word	0x0000cc55
   12c1c:	000122e9 	.word	0x000122e9
   12c20:	0000facd 	.word	0x0000facd
   12c24:	20002f34 	.word	0x20002f34

00012c28 <LorawanClasscUlAckTimerCallback>:
   12c28:	2102      	movs	r1, #2
   12c2a:	4b03      	ldr	r3, [pc, #12]	; (12c38 <LorawanClasscUlAckTimerCallback+0x10>)
   12c2c:	3394      	adds	r3, #148	; 0x94
   12c2e:	781a      	ldrb	r2, [r3, #0]
   12c30:	438a      	bics	r2, r1
   12c32:	701a      	strb	r2, [r3, #0]
   12c34:	4770      	bx	lr
   12c36:	46c0      	nop			; (mov r8, r8)
   12c38:	20003170 	.word	0x20003170

00012c3c <LorawanClasscValidateSend>:
   12c3c:	2388      	movs	r3, #136	; 0x88
   12c3e:	b510      	push	{r4, lr}
   12c40:	4c0a      	ldr	r4, [pc, #40]	; (12c6c <LorawanClasscValidateSend+0x30>)
   12c42:	009b      	lsls	r3, r3, #2
   12c44:	5ce3      	ldrb	r3, [r4, r3]
   12c46:	2b00      	cmp	r3, #0
   12c48:	d008      	beq.n	12c5c <LorawanClasscValidateSend+0x20>
   12c4a:	220e      	movs	r2, #14
   12c4c:	3484      	adds	r4, #132	; 0x84
   12c4e:	7823      	ldrb	r3, [r4, #0]
   12c50:	2008      	movs	r0, #8
   12c52:	4013      	ands	r3, r2
   12c54:	2b02      	cmp	r3, #2
   12c56:	d100      	bne.n	12c5a <LorawanClasscValidateSend+0x1e>
   12c58:	2011      	movs	r0, #17
   12c5a:	bd10      	pop	{r4, pc}
   12c5c:	2394      	movs	r3, #148	; 0x94
   12c5e:	005b      	lsls	r3, r3, #1
   12c60:	5ce0      	ldrb	r0, [r4, r3]
   12c62:	4b03      	ldr	r3, [pc, #12]	; (12c70 <LorawanClasscValidateSend+0x34>)
   12c64:	4798      	blx	r3
   12c66:	2800      	cmp	r0, #0
   12c68:	d1ef      	bne.n	12c4a <LorawanClasscValidateSend+0xe>
   12c6a:	e7f5      	b.n	12c58 <LorawanClasscValidateSend+0x1c>
   12c6c:	20003170 	.word	0x20003170
   12c70:	0000d255 	.word	0x0000d255

00012c74 <LorawanClasscRxDone>:
   12c74:	221f      	movs	r2, #31
   12c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12c78:	7803      	ldrb	r3, [r0, #0]
   12c7a:	4c1c      	ldr	r4, [pc, #112]	; (12cec <LorawanClasscRxDone+0x78>)
   12c7c:	4393      	bics	r3, r2
   12c7e:	2ba0      	cmp	r3, #160	; 0xa0
   12c80:	d10c      	bne.n	12c9c <LorawanClasscRxDone+0x28>
   12c82:	2694      	movs	r6, #148	; 0x94
   12c84:	0076      	lsls	r6, r6, #1
   12c86:	5da0      	ldrb	r0, [r4, r6]
   12c88:	4b19      	ldr	r3, [pc, #100]	; (12cf0 <LorawanClasscRxDone+0x7c>)
   12c8a:	4798      	blx	r3
   12c8c:	1e05      	subs	r5, r0, #0
   12c8e:	d019      	beq.n	12cc4 <LorawanClasscRxDone+0x50>
   12c90:	0022      	movs	r2, r4
   12c92:	2102      	movs	r1, #2
   12c94:	3294      	adds	r2, #148	; 0x94
   12c96:	7813      	ldrb	r3, [r2, #0]
   12c98:	438b      	bics	r3, r1
   12c9a:	7013      	strb	r3, [r2, #0]
   12c9c:	0021      	movs	r1, r4
   12c9e:	3184      	adds	r1, #132	; 0x84
   12ca0:	780b      	ldrb	r3, [r1, #0]
   12ca2:	220e      	movs	r2, #14
   12ca4:	0018      	movs	r0, r3
   12ca6:	4010      	ands	r0, r2
   12ca8:	2806      	cmp	r0, #6
   12caa:	d103      	bne.n	12cb4 <LorawanClasscRxDone+0x40>
   12cac:	4393      	bics	r3, r2
   12cae:	3a04      	subs	r2, #4
   12cb0:	4313      	orrs	r3, r2
   12cb2:	700b      	strb	r3, [r1, #0]
   12cb4:	2390      	movs	r3, #144	; 0x90
   12cb6:	2201      	movs	r2, #1
   12cb8:	009b      	lsls	r3, r3, #2
   12cba:	54e2      	strb	r2, [r4, r3]
   12cbc:	2000      	movs	r0, #0
   12cbe:	4b0d      	ldr	r3, [pc, #52]	; (12cf4 <LorawanClasscRxDone+0x80>)
   12cc0:	4798      	blx	r3
   12cc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12cc4:	4b0c      	ldr	r3, [pc, #48]	; (12cf8 <LorawanClasscRxDone+0x84>)
   12cc6:	5da6      	ldrb	r6, [r4, r6]
   12cc8:	4798      	blx	r3
   12cca:	4b0c      	ldr	r3, [pc, #48]	; (12cfc <LorawanClasscRxDone+0x88>)
   12ccc:	490c      	ldr	r1, [pc, #48]	; (12d00 <LorawanClasscRxDone+0x8c>)
   12cce:	4798      	blx	r3
   12cd0:	23fa      	movs	r3, #250	; 0xfa
   12cd2:	009b      	lsls	r3, r3, #2
   12cd4:	18cb      	adds	r3, r1, r3
   12cd6:	21fa      	movs	r1, #250	; 0xfa
   12cd8:	0089      	lsls	r1, r1, #2
   12cda:	4359      	muls	r1, r3
   12cdc:	9500      	str	r5, [sp, #0]
   12cde:	002a      	movs	r2, r5
   12ce0:	4b08      	ldr	r3, [pc, #32]	; (12d04 <LorawanClasscRxDone+0x90>)
   12ce2:	0030      	movs	r0, r6
   12ce4:	4d08      	ldr	r5, [pc, #32]	; (12d08 <LorawanClasscRxDone+0x94>)
   12ce6:	47a8      	blx	r5
   12ce8:	e7d8      	b.n	12c9c <LorawanClasscRxDone+0x28>
   12cea:	46c0      	nop			; (mov r8, r8)
   12cec:	20003170 	.word	0x20003170
   12cf0:	0000d255 	.word	0x0000d255
   12cf4:	00011181 	.word	0x00011181
   12cf8:	00016e3d 	.word	0x00016e3d
   12cfc:	00013775 	.word	0x00013775
   12d00:	000007d1 	.word	0x000007d1
   12d04:	00012c29 	.word	0x00012c29
   12d08:	0000d0bd 	.word	0x0000d0bd

00012d0c <LorawanClasscRxTimeout>:
   12d0c:	4a0c      	ldr	r2, [pc, #48]	; (12d40 <LorawanClasscRxTimeout+0x34>)
   12d0e:	b510      	push	{r4, lr}
   12d10:	0010      	movs	r0, r2
   12d12:	3084      	adds	r0, #132	; 0x84
   12d14:	7803      	ldrb	r3, [r0, #0]
   12d16:	240e      	movs	r4, #14
   12d18:	0019      	movs	r1, r3
   12d1a:	4021      	ands	r1, r4
   12d1c:	2906      	cmp	r1, #6
   12d1e:	d107      	bne.n	12d30 <LorawanClasscRxTimeout+0x24>
   12d20:	2208      	movs	r2, #8
   12d22:	43a3      	bics	r3, r4
   12d24:	4313      	orrs	r3, r2
   12d26:	7003      	strb	r3, [r0, #0]
   12d28:	2000      	movs	r0, #0
   12d2a:	4b06      	ldr	r3, [pc, #24]	; (12d44 <LorawanClasscRxTimeout+0x38>)
   12d2c:	4798      	blx	r3
   12d2e:	e006      	b.n	12d3e <LorawanClasscRxTimeout+0x32>
   12d30:	290a      	cmp	r1, #10
   12d32:	d1f9      	bne.n	12d28 <LorawanClasscRxTimeout+0x1c>
   12d34:	2388      	movs	r3, #136	; 0x88
   12d36:	009b      	lsls	r3, r3, #2
   12d38:	5cd3      	ldrb	r3, [r2, r3]
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	d0f4      	beq.n	12d28 <LorawanClasscRxTimeout+0x1c>
   12d3e:	bd10      	pop	{r4, pc}
   12d40:	20003170 	.word	0x20003170
   12d44:	00011181 	.word	0x00011181

00012d48 <LorawanClasscNotifyAppOnReceive>:
   12d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d4a:	001f      	movs	r7, r3
   12d4c:	2394      	movs	r3, #148	; 0x94
   12d4e:	0016      	movs	r6, r2
   12d50:	4a07      	ldr	r2, [pc, #28]	; (12d70 <LorawanClasscNotifyAppOnReceive+0x28>)
   12d52:	005b      	lsls	r3, r3, #1
   12d54:	0004      	movs	r4, r0
   12d56:	5cd0      	ldrb	r0, [r2, r3]
   12d58:	4b06      	ldr	r3, [pc, #24]	; (12d74 <LorawanClasscNotifyAppOnReceive+0x2c>)
   12d5a:	000d      	movs	r5, r1
   12d5c:	4798      	blx	r3
   12d5e:	2800      	cmp	r0, #0
   12d60:	d105      	bne.n	12d6e <LorawanClasscNotifyAppOnReceive+0x26>
   12d62:	0020      	movs	r0, r4
   12d64:	003b      	movs	r3, r7
   12d66:	0032      	movs	r2, r6
   12d68:	0029      	movs	r1, r5
   12d6a:	4c03      	ldr	r4, [pc, #12]	; (12d78 <LorawanClasscNotifyAppOnReceive+0x30>)
   12d6c:	47a0      	blx	r4
   12d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d70:	20003170 	.word	0x20003170
   12d74:	0000d255 	.word	0x0000d255
   12d78:	00010da5 	.word	0x00010da5

00012d7c <LorawanMcastEnable>:
   12d7c:	0002      	movs	r2, r0
   12d7e:	b510      	push	{r4, lr}
   12d80:	200a      	movs	r0, #10
   12d82:	2903      	cmp	r1, #3
   12d84:	d822      	bhi.n	12dcc <LorawanMcastEnable+0x50>
   12d86:	4b1a      	ldr	r3, [pc, #104]	; (12df0 <LorawanMcastEnable+0x74>)
   12d88:	2a00      	cmp	r2, #0
   12d8a:	d020      	beq.n	12dce <LorawanMcastEnable+0x52>
   12d8c:	223c      	movs	r2, #60	; 0x3c
   12d8e:	434a      	muls	r2, r1
   12d90:	189a      	adds	r2, r3, r2
   12d92:	3259      	adds	r2, #89	; 0x59
   12d94:	32ff      	adds	r2, #255	; 0xff
   12d96:	7a12      	ldrb	r2, [r2, #8]
   12d98:	0754      	lsls	r4, r2, #29
   12d9a:	d512      	bpl.n	12dc2 <LorawanMcastEnable+0x46>
   12d9c:	0794      	lsls	r4, r2, #30
   12d9e:	d510      	bpl.n	12dc2 <LorawanMcastEnable+0x46>
   12da0:	07d2      	lsls	r2, r2, #31
   12da2:	0fd2      	lsrs	r2, r2, #31
   12da4:	2a01      	cmp	r2, #1
   12da6:	d10c      	bne.n	12dc2 <LorawanMcastEnable+0x46>
   12da8:	001c      	movs	r4, r3
   12daa:	34fd      	adds	r4, #253	; 0xfd
   12dac:	7824      	ldrb	r4, [r4, #0]
   12dae:	0764      	lsls	r4, r4, #29
   12db0:	d007      	beq.n	12dc2 <LorawanMcastEnable+0x46>
   12db2:	202e      	movs	r0, #46	; 0x2e
   12db4:	408a      	lsls	r2, r1
   12db6:	30ff      	adds	r0, #255	; 0xff
   12db8:	5c19      	ldrb	r1, [r3, r0]
   12dba:	430a      	orrs	r2, r1
   12dbc:	541a      	strb	r2, [r3, r0]
   12dbe:	3826      	subs	r0, #38	; 0x26
   12dc0:	38ff      	subs	r0, #255	; 0xff
   12dc2:	2196      	movs	r1, #150	; 0x96
   12dc4:	0049      	lsls	r1, r1, #1
   12dc6:	5c5a      	ldrb	r2, [r3, r1]
   12dc8:	3201      	adds	r2, #1
   12dca:	545a      	strb	r2, [r3, r1]
   12dcc:	bd10      	pop	{r4, pc}
   12dce:	2201      	movs	r2, #1
   12dd0:	408a      	lsls	r2, r1
   12dd2:	202e      	movs	r0, #46	; 0x2e
   12dd4:	0011      	movs	r1, r2
   12dd6:	30ff      	adds	r0, #255	; 0xff
   12dd8:	5c1a      	ldrb	r2, [r3, r0]
   12dda:	438a      	bics	r2, r1
   12ddc:	2196      	movs	r1, #150	; 0x96
   12dde:	541a      	strb	r2, [r3, r0]
   12de0:	0049      	lsls	r1, r1, #1
   12de2:	5c5a      	ldrb	r2, [r3, r1]
   12de4:	3826      	subs	r0, #38	; 0x26
   12de6:	3a01      	subs	r2, #1
   12de8:	545a      	strb	r2, [r3, r1]
   12dea:	38ff      	subs	r0, #255	; 0xff
   12dec:	e7ee      	b.n	12dcc <LorawanMcastEnable+0x50>
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	20003170 	.word	0x20003170

00012df4 <LorawanMcastValidateHdr>:
   12df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12df6:	469c      	mov	ip, r3
   12df8:	2400      	movs	r4, #0
   12dfa:	230a      	movs	r3, #10
   12dfc:	4f18      	ldr	r7, [pc, #96]	; (12e60 <LorawanMcastValidateHdr+0x6c>)
   12dfe:	b2e5      	uxtb	r5, r4
   12e00:	9501      	str	r5, [sp, #4]
   12e02:	252e      	movs	r5, #46	; 0x2e
   12e04:	35ff      	adds	r5, #255	; 0xff
   12e06:	5d7d      	ldrb	r5, [r7, r5]
   12e08:	2601      	movs	r6, #1
   12e0a:	4125      	asrs	r5, r4
   12e0c:	4235      	tst	r5, r6
   12e0e:	d022      	beq.n	12e56 <LorawanMcastValidateHdr+0x62>
   12e10:	7886      	ldrb	r6, [r0, #2]
   12e12:	7845      	ldrb	r5, [r0, #1]
   12e14:	0236      	lsls	r6, r6, #8
   12e16:	432e      	orrs	r6, r5
   12e18:	78c5      	ldrb	r5, [r0, #3]
   12e1a:	042d      	lsls	r5, r5, #16
   12e1c:	432e      	orrs	r6, r5
   12e1e:	7905      	ldrb	r5, [r0, #4]
   12e20:	062d      	lsls	r5, r5, #24
   12e22:	4335      	orrs	r5, r6
   12e24:	263c      	movs	r6, #60	; 0x3c
   12e26:	4366      	muls	r6, r4
   12e28:	3631      	adds	r6, #49	; 0x31
   12e2a:	36ff      	adds	r6, #255	; 0xff
   12e2c:	59be      	ldr	r6, [r7, r6]
   12e2e:	42b5      	cmp	r5, r6
   12e30:	d111      	bne.n	12e56 <LorawanMcastValidateHdr+0x62>
   12e32:	4d0c      	ldr	r5, [pc, #48]	; (12e64 <LorawanMcastValidateHdr+0x70>)
   12e34:	782e      	ldrb	r6, [r5, #0]
   12e36:	2506      	movs	r5, #6
   12e38:	422e      	tst	r6, r5
   12e3a:	d00c      	beq.n	12e56 <LorawanMcastValidateHdr+0x62>
   12e3c:	2a00      	cmp	r2, #0
   12e3e:	d00a      	beq.n	12e56 <LorawanMcastValidateHdr+0x62>
   12e40:	7946      	ldrb	r6, [r0, #5]
   12e42:	3569      	adds	r5, #105	; 0x69
   12e44:	422e      	tst	r6, r5
   12e46:	d106      	bne.n	12e56 <LorawanMcastValidateHdr+0x62>
   12e48:	2903      	cmp	r1, #3
   12e4a:	d104      	bne.n	12e56 <LorawanMcastValidateHdr+0x62>
   12e4c:	466d      	mov	r5, sp
   12e4e:	4663      	mov	r3, ip
   12e50:	792d      	ldrb	r5, [r5, #4]
   12e52:	701d      	strb	r5, [r3, #0]
   12e54:	2308      	movs	r3, #8
   12e56:	3401      	adds	r4, #1
   12e58:	2c04      	cmp	r4, #4
   12e5a:	d1d0      	bne.n	12dfe <LorawanMcastValidateHdr+0xa>
   12e5c:	0018      	movs	r0, r3
   12e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12e60:	20003170 	.word	0x20003170
   12e64:	2000326d 	.word	0x2000326d

00012e68 <LorawanMcastProcessPkt>:
   12e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e6a:	0015      	movs	r5, r2
   12e6c:	223c      	movs	r2, #60	; 0x3c
   12e6e:	435a      	muls	r2, r3
   12e70:	b089      	sub	sp, #36	; 0x24
   12e72:	9107      	str	r1, [sp, #28]
   12e74:	493f      	ldr	r1, [pc, #252]	; (12f74 <LorawanMcastProcessPkt+0x10c>)
   12e76:	9006      	str	r0, [sp, #24]
   12e78:	1889      	adds	r1, r1, r2
   12e7a:	31fc      	adds	r1, #252	; 0xfc
   12e7c:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   12e7e:	6e08      	ldr	r0, [r1, #96]	; 0x60
   12e80:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   12e82:	4284      	cmp	r4, r0
   12e84:	d224      	bcs.n	12ed0 <LorawanMcastProcessPkt+0x68>
   12e86:	2100      	movs	r1, #0
   12e88:	4294      	cmp	r4, r2
   12e8a:	d802      	bhi.n	12e92 <LorawanMcastProcessPkt+0x2a>
   12e8c:	4282      	cmp	r2, r0
   12e8e:	4192      	sbcs	r2, r2
   12e90:	4251      	negs	r1, r2
   12e92:	270a      	movs	r7, #10
   12e94:	2900      	cmp	r1, #0
   12e96:	d11d      	bne.n	12ed4 <LorawanMcastProcessPkt+0x6c>
   12e98:	4a36      	ldr	r2, [pc, #216]	; (12f74 <LorawanMcastProcessPkt+0x10c>)
   12e9a:	210e      	movs	r1, #14
   12e9c:	0010      	movs	r0, r2
   12e9e:	3084      	adds	r0, #132	; 0x84
   12ea0:	7803      	ldrb	r3, [r0, #0]
   12ea2:	001c      	movs	r4, r3
   12ea4:	400c      	ands	r4, r1
   12ea6:	2c06      	cmp	r4, #6
   12ea8:	d108      	bne.n	12ebc <LorawanMcastProcessPkt+0x54>
   12eaa:	0014      	movs	r4, r2
   12eac:	34fd      	adds	r4, #253	; 0xfd
   12eae:	7824      	ldrb	r4, [r4, #0]
   12eb0:	2c04      	cmp	r4, #4
   12eb2:	d103      	bne.n	12ebc <LorawanMcastProcessPkt+0x54>
   12eb4:	438b      	bics	r3, r1
   12eb6:	3904      	subs	r1, #4
   12eb8:	430b      	orrs	r3, r1
   12eba:	7003      	strb	r3, [r0, #0]
   12ebc:	2390      	movs	r3, #144	; 0x90
   12ebe:	2101      	movs	r1, #1
   12ec0:	009b      	lsls	r3, r3, #2
   12ec2:	54d1      	strb	r1, [r2, r3]
   12ec4:	2000      	movs	r0, #0
   12ec6:	4b2c      	ldr	r3, [pc, #176]	; (12f78 <LorawanMcastProcessPkt+0x110>)
   12ec8:	4798      	blx	r3
   12eca:	0038      	movs	r0, r7
   12ecc:	b009      	add	sp, #36	; 0x24
   12ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ed0:	4294      	cmp	r4, r2
   12ed2:	d8db      	bhi.n	12e8c <LorawanMcastProcessPkt+0x24>
   12ed4:	243c      	movs	r4, #60	; 0x3c
   12ed6:	435c      	muls	r4, r3
   12ed8:	4e26      	ldr	r6, [pc, #152]	; (12f74 <LorawanMcastProcessPkt+0x10c>)
   12eda:	79ea      	ldrb	r2, [r5, #7]
   12edc:	1937      	adds	r7, r6, r4
   12ede:	003b      	movs	r3, r7
   12ee0:	79a9      	ldrb	r1, [r5, #6]
   12ee2:	0212      	lsls	r2, r2, #8
   12ee4:	3355      	adds	r3, #85	; 0x55
   12ee6:	430a      	orrs	r2, r1
   12ee8:	33ff      	adds	r3, #255	; 0xff
   12eea:	801a      	strh	r2, [r3, #0]
   12eec:	2105      	movs	r1, #5
   12eee:	4b23      	ldr	r3, [pc, #140]	; (12f7c <LorawanMcastProcessPkt+0x114>)
   12ef0:	37fc      	adds	r7, #252	; 0xfc
   12ef2:	2000      	movs	r0, #0
   12ef4:	4798      	blx	r3
   12ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ef8:	3445      	adds	r4, #69	; 0x45
   12efa:	9304      	str	r3, [sp, #16]
   12efc:	4b20      	ldr	r3, [pc, #128]	; (12f80 <LorawanMcastProcessPkt+0x118>)
   12efe:	9907      	ldr	r1, [sp, #28]
   12f00:	9303      	str	r3, [sp, #12]
   12f02:	2319      	movs	r3, #25
   12f04:	34ff      	adds	r4, #255	; 0xff
   12f06:	9302      	str	r3, [sp, #8]
   12f08:	19a4      	adds	r4, r4, r6
   12f0a:	3b16      	subs	r3, #22
   12f0c:	9806      	ldr	r0, [sp, #24]
   12f0e:	9400      	str	r4, [sp, #0]
   12f10:	390d      	subs	r1, #13
   12f12:	9301      	str	r3, [sp, #4]
   12f14:	b2c9      	uxtb	r1, r1
   12f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12f18:	2201      	movs	r2, #1
   12f1a:	3009      	adds	r0, #9
   12f1c:	4c19      	ldr	r4, [pc, #100]	; (12f84 <LorawanMcastProcessPkt+0x11c>)
   12f1e:	47a0      	blx	r4
   12f20:	2800      	cmp	r0, #0
   12f22:	d002      	beq.n	12f2a <LorawanMcastProcessPkt+0xc2>
   12f24:	201f      	movs	r0, #31
   12f26:	4b18      	ldr	r3, [pc, #96]	; (12f88 <LorawanMcastProcessPkt+0x120>)
   12f28:	4798      	blx	r3
   12f2a:	4918      	ldr	r1, [pc, #96]	; (12f8c <LorawanMcastProcessPkt+0x124>)
   12f2c:	2708      	movs	r7, #8
   12f2e:	784a      	ldrb	r2, [r1, #1]
   12f30:	780b      	ldrb	r3, [r1, #0]
   12f32:	0212      	lsls	r2, r2, #8
   12f34:	431a      	orrs	r2, r3
   12f36:	788b      	ldrb	r3, [r1, #2]
   12f38:	041b      	lsls	r3, r3, #16
   12f3a:	431a      	orrs	r2, r3
   12f3c:	78cb      	ldrb	r3, [r1, #3]
   12f3e:	061b      	lsls	r3, r3, #24
   12f40:	4313      	orrs	r3, r2
   12f42:	d0a9      	beq.n	12e98 <LorawanMcastProcessPkt+0x30>
   12f44:	2220      	movs	r2, #32
   12f46:	3694      	adds	r6, #148	; 0x94
   12f48:	7833      	ldrb	r3, [r6, #0]
   12f4a:	9906      	ldr	r1, [sp, #24]
   12f4c:	4393      	bics	r3, r2
   12f4e:	7033      	strb	r3, [r6, #0]
   12f50:	78ab      	ldrb	r3, [r5, #2]
   12f52:	7868      	ldrb	r0, [r5, #1]
   12f54:	40bb      	lsls	r3, r7
   12f56:	4303      	orrs	r3, r0
   12f58:	78e8      	ldrb	r0, [r5, #3]
   12f5a:	9a07      	ldr	r2, [sp, #28]
   12f5c:	0400      	lsls	r0, r0, #16
   12f5e:	4303      	orrs	r3, r0
   12f60:	7928      	ldrb	r0, [r5, #4]
   12f62:	3a0c      	subs	r2, #12
   12f64:	0600      	lsls	r0, r0, #24
   12f66:	4318      	orrs	r0, r3
   12f68:	b2d2      	uxtb	r2, r2
   12f6a:	19c9      	adds	r1, r1, r7
   12f6c:	003b      	movs	r3, r7
   12f6e:	4c08      	ldr	r4, [pc, #32]	; (12f90 <LorawanMcastProcessPkt+0x128>)
   12f70:	47a0      	blx	r4
   12f72:	e791      	b.n	12e98 <LorawanMcastProcessPkt+0x30>
   12f74:	20003170 	.word	0x20003170
   12f78:	00011181 	.word	0x00011181
   12f7c:	0000933d 	.word	0x0000933d
   12f80:	20002f34 	.word	0x20002f34
   12f84:	00010c81 	.word	0x00010c81
   12f88:	00010d41 	.word	0x00010d41
   12f8c:	200034cc 	.word	0x200034cc
   12f90:	00010da5 	.word	0x00010da5

00012f94 <LorawanAddMcastAddr>:
   12f94:	b570      	push	{r4, r5, r6, lr}
   12f96:	260a      	movs	r6, #10
   12f98:	2903      	cmp	r1, #3
   12f9a:	d818      	bhi.n	12fce <LorawanAddMcastAddr+0x3a>
   12f9c:	4b0d      	ldr	r3, [pc, #52]	; (12fd4 <LorawanAddMcastAddr+0x40>)
   12f9e:	681a      	ldr	r2, [r3, #0]
   12fa0:	0a15      	lsrs	r5, r2, #8
   12fa2:	791a      	ldrb	r2, [r3, #4]
   12fa4:	0612      	lsls	r2, r2, #24
   12fa6:	432a      	orrs	r2, r5
   12fa8:	4282      	cmp	r2, r0
   12faa:	d010      	beq.n	12fce <LorawanAddMcastAddr+0x3a>
   12fac:	243c      	movs	r4, #60	; 0x3c
   12fae:	434c      	muls	r4, r1
   12fb0:	191c      	adds	r4, r3, r4
   12fb2:	0023      	movs	r3, r4
   12fb4:	33fc      	adds	r3, #252	; 0xfc
   12fb6:	6358      	str	r0, [r3, #52]	; 0x34
   12fb8:	2106      	movs	r1, #6
   12fba:	2000      	movs	r0, #0
   12fbc:	4b06      	ldr	r3, [pc, #24]	; (12fd8 <LorawanAddMcastAddr+0x44>)
   12fbe:	4798      	blx	r3
   12fc0:	2201      	movs	r2, #1
   12fc2:	3459      	adds	r4, #89	; 0x59
   12fc4:	34ff      	adds	r4, #255	; 0xff
   12fc6:	7a21      	ldrb	r1, [r4, #8]
   12fc8:	3e02      	subs	r6, #2
   12fca:	430a      	orrs	r2, r1
   12fcc:	7222      	strb	r2, [r4, #8]
   12fce:	0030      	movs	r0, r6
   12fd0:	bd70      	pop	{r4, r5, r6, pc}
   12fd2:	46c0      	nop			; (mov r8, r8)
   12fd4:	20003170 	.word	0x20003170
   12fd8:	0000933d 	.word	0x0000933d

00012fdc <LorawanAddMcastAppskey>:
   12fdc:	b570      	push	{r4, r5, r6, lr}
   12fde:	0006      	movs	r6, r0
   12fe0:	200a      	movs	r0, #10
   12fe2:	2903      	cmp	r1, #3
   12fe4:	d818      	bhi.n	13018 <LorawanAddMcastAppskey+0x3c>
   12fe6:	2e00      	cmp	r6, #0
   12fe8:	d016      	beq.n	13018 <LorawanAddMcastAppskey+0x3c>
   12fea:	253c      	movs	r5, #60	; 0x3c
   12fec:	434d      	muls	r5, r1
   12fee:	0028      	movs	r0, r5
   12ff0:	4c0a      	ldr	r4, [pc, #40]	; (1301c <LorawanAddMcastAppskey+0x40>)
   12ff2:	3045      	adds	r0, #69	; 0x45
   12ff4:	30ff      	adds	r0, #255	; 0xff
   12ff6:	2210      	movs	r2, #16
   12ff8:	1900      	adds	r0, r0, r4
   12ffa:	0031      	movs	r1, r6
   12ffc:	4b08      	ldr	r3, [pc, #32]	; (13020 <LorawanAddMcastAppskey+0x44>)
   12ffe:	4798      	blx	r3
   13000:	4b08      	ldr	r3, [pc, #32]	; (13024 <LorawanAddMcastAppskey+0x48>)
   13002:	2107      	movs	r1, #7
   13004:	2000      	movs	r0, #0
   13006:	4798      	blx	r3
   13008:	2304      	movs	r3, #4
   1300a:	2008      	movs	r0, #8
   1300c:	1964      	adds	r4, r4, r5
   1300e:	3459      	adds	r4, #89	; 0x59
   13010:	34ff      	adds	r4, #255	; 0xff
   13012:	7a22      	ldrb	r2, [r4, #8]
   13014:	4313      	orrs	r3, r2
   13016:	7223      	strb	r3, [r4, #8]
   13018:	bd70      	pop	{r4, r5, r6, pc}
   1301a:	46c0      	nop			; (mov r8, r8)
   1301c:	20003170 	.word	0x20003170
   13020:	000166f7 	.word	0x000166f7
   13024:	0000933d 	.word	0x0000933d

00013028 <LorawanAddMcastNwkskey>:
   13028:	b570      	push	{r4, r5, r6, lr}
   1302a:	0006      	movs	r6, r0
   1302c:	200a      	movs	r0, #10
   1302e:	2903      	cmp	r1, #3
   13030:	d818      	bhi.n	13064 <LorawanAddMcastNwkskey+0x3c>
   13032:	2e00      	cmp	r6, #0
   13034:	d016      	beq.n	13064 <LorawanAddMcastNwkskey+0x3c>
   13036:	253c      	movs	r5, #60	; 0x3c
   13038:	434d      	muls	r5, r1
   1303a:	0028      	movs	r0, r5
   1303c:	4c0a      	ldr	r4, [pc, #40]	; (13068 <LorawanAddMcastNwkskey+0x40>)
   1303e:	3035      	adds	r0, #53	; 0x35
   13040:	30ff      	adds	r0, #255	; 0xff
   13042:	2210      	movs	r2, #16
   13044:	1900      	adds	r0, r0, r4
   13046:	0031      	movs	r1, r6
   13048:	4b08      	ldr	r3, [pc, #32]	; (1306c <LorawanAddMcastNwkskey+0x44>)
   1304a:	4798      	blx	r3
   1304c:	4b08      	ldr	r3, [pc, #32]	; (13070 <LorawanAddMcastNwkskey+0x48>)
   1304e:	2108      	movs	r1, #8
   13050:	2000      	movs	r0, #0
   13052:	4798      	blx	r3
   13054:	2302      	movs	r3, #2
   13056:	2008      	movs	r0, #8
   13058:	1964      	adds	r4, r4, r5
   1305a:	3459      	adds	r4, #89	; 0x59
   1305c:	34ff      	adds	r4, #255	; 0xff
   1305e:	7a22      	ldrb	r2, [r4, #8]
   13060:	4313      	orrs	r3, r2
   13062:	7223      	strb	r3, [r4, #8]
   13064:	bd70      	pop	{r4, r5, r6, pc}
   13066:	46c0      	nop			; (mov r8, r8)
   13068:	20003170 	.word	0x20003170
   1306c:	000166f7 	.word	0x000166f7
   13070:	0000933d 	.word	0x0000933d

00013074 <LorawanAddMcastFcntMin>:
   13074:	220a      	movs	r2, #10
   13076:	2903      	cmp	r1, #3
   13078:	d807      	bhi.n	1308a <LorawanAddMcastFcntMin+0x16>
   1307a:	233c      	movs	r3, #60	; 0x3c
   1307c:	434b      	muls	r3, r1
   1307e:	4904      	ldr	r1, [pc, #16]	; (13090 <LorawanAddMcastFcntMin+0x1c>)
   13080:	3a02      	subs	r2, #2
   13082:	18c9      	adds	r1, r1, r3
   13084:	31fc      	adds	r1, #252	; 0xfc
   13086:	65c8      	str	r0, [r1, #92]	; 0x5c
   13088:	6588      	str	r0, [r1, #88]	; 0x58
   1308a:	0010      	movs	r0, r2
   1308c:	4770      	bx	lr
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	20003170 	.word	0x20003170

00013094 <LorawanAddMcastFcntMax>:
   13094:	220a      	movs	r2, #10
   13096:	2903      	cmp	r1, #3
   13098:	d806      	bhi.n	130a8 <LorawanAddMcastFcntMax+0x14>
   1309a:	233c      	movs	r3, #60	; 0x3c
   1309c:	434b      	muls	r3, r1
   1309e:	4903      	ldr	r1, [pc, #12]	; (130ac <LorawanAddMcastFcntMax+0x18>)
   130a0:	3a02      	subs	r2, #2
   130a2:	18c9      	adds	r1, r1, r3
   130a4:	31fc      	adds	r1, #252	; 0xfc
   130a6:	6608      	str	r0, [r1, #96]	; 0x60
   130a8:	0010      	movs	r0, r2
   130aa:	4770      	bx	lr
   130ac:	20003170 	.word	0x20003170

000130b0 <LorawanAddMcastDlFrequency>:
   130b0:	b513      	push	{r0, r1, r4, lr}
   130b2:	000c      	movs	r4, r1
   130b4:	9001      	str	r0, [sp, #4]
   130b6:	2903      	cmp	r1, #3
   130b8:	d901      	bls.n	130be <LorawanAddMcastDlFrequency+0xe>
   130ba:	200a      	movs	r0, #10
   130bc:	bd16      	pop	{r1, r2, r4, pc}
   130be:	a901      	add	r1, sp, #4
   130c0:	2001      	movs	r0, #1
   130c2:	4b0a      	ldr	r3, [pc, #40]	; (130ec <LorawanAddMcastDlFrequency+0x3c>)
   130c4:	4798      	blx	r3
   130c6:	2808      	cmp	r0, #8
   130c8:	d1f7      	bne.n	130ba <LorawanAddMcastDlFrequency+0xa>
   130ca:	213c      	movs	r1, #60	; 0x3c
   130cc:	4361      	muls	r1, r4
   130ce:	4b08      	ldr	r3, [pc, #32]	; (130f0 <LorawanAddMcastDlFrequency+0x40>)
   130d0:	9a01      	ldr	r2, [sp, #4]
   130d2:	1859      	adds	r1, r3, r1
   130d4:	31fc      	adds	r1, #252	; 0xfc
   130d6:	336f      	adds	r3, #111	; 0x6f
   130d8:	668a      	str	r2, [r1, #104]	; 0x68
   130da:	0a11      	lsrs	r1, r2, #8
   130dc:	701a      	strb	r2, [r3, #0]
   130de:	7059      	strb	r1, [r3, #1]
   130e0:	0c11      	lsrs	r1, r2, #16
   130e2:	0e12      	lsrs	r2, r2, #24
   130e4:	7099      	strb	r1, [r3, #2]
   130e6:	70da      	strb	r2, [r3, #3]
   130e8:	e7e8      	b.n	130bc <LorawanAddMcastDlFrequency+0xc>
   130ea:	46c0      	nop			; (mov r8, r8)
   130ec:	0000cb91 	.word	0x0000cb91
   130f0:	20003170 	.word	0x20003170

000130f4 <LorawanAddMcastDatarate>:
   130f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   130f6:	466b      	mov	r3, sp
   130f8:	1ddd      	adds	r5, r3, #7
   130fa:	000c      	movs	r4, r1
   130fc:	7028      	strb	r0, [r5, #0]
   130fe:	2903      	cmp	r1, #3
   13100:	d901      	bls.n	13106 <LorawanAddMcastDatarate+0x12>
   13102:	200a      	movs	r0, #10
   13104:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13106:	0029      	movs	r1, r5
   13108:	200f      	movs	r0, #15
   1310a:	4b07      	ldr	r3, [pc, #28]	; (13128 <LorawanAddMcastDatarate+0x34>)
   1310c:	4798      	blx	r3
   1310e:	2808      	cmp	r0, #8
   13110:	d1f7      	bne.n	13102 <LorawanAddMcastDatarate+0xe>
   13112:	213c      	movs	r1, #60	; 0x3c
   13114:	4361      	muls	r1, r4
   13116:	4b05      	ldr	r3, [pc, #20]	; (1312c <LorawanAddMcastDatarate+0x38>)
   13118:	782a      	ldrb	r2, [r5, #0]
   1311a:	1859      	adds	r1, r3, r1
   1311c:	3169      	adds	r1, #105	; 0x69
   1311e:	31ff      	adds	r1, #255	; 0xff
   13120:	3373      	adds	r3, #115	; 0x73
   13122:	700a      	strb	r2, [r1, #0]
   13124:	701a      	strb	r2, [r3, #0]
   13126:	e7ed      	b.n	13104 <LorawanAddMcastDatarate+0x10>
   13128:	0000cb91 	.word	0x0000cb91
   1312c:	20003170 	.word	0x20003170

00013130 <LorawanAddMcastPeriodicity>:
   13130:	220a      	movs	r2, #10
   13132:	2903      	cmp	r1, #3
   13134:	d809      	bhi.n	1314a <LorawanAddMcastPeriodicity+0x1a>
   13136:	2807      	cmp	r0, #7
   13138:	d807      	bhi.n	1314a <LorawanAddMcastPeriodicity+0x1a>
   1313a:	233c      	movs	r3, #60	; 0x3c
   1313c:	434b      	muls	r3, r1
   1313e:	4904      	ldr	r1, [pc, #16]	; (13150 <LorawanAddMcastPeriodicity+0x20>)
   13140:	3a02      	subs	r2, #2
   13142:	18c9      	adds	r1, r1, r3
   13144:	316a      	adds	r1, #106	; 0x6a
   13146:	31ff      	adds	r1, #255	; 0xff
   13148:	7008      	strb	r0, [r1, #0]
   1314a:	0010      	movs	r0, r2
   1314c:	4770      	bx	lr
   1314e:	46c0      	nop			; (mov r8, r8)
   13150:	20003170 	.word	0x20003170

00013154 <Radio_LBTScanTimeout>:
   13154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13156:	4c1c      	ldr	r4, [pc, #112]	; (131c8 <Radio_LBTScanTimeout+0x74>)
   13158:	0025      	movs	r5, r4
   1315a:	0023      	movs	r3, r4
   1315c:	354f      	adds	r5, #79	; 0x4f
   1315e:	7829      	ldrb	r1, [r5, #0]
   13160:	3340      	adds	r3, #64	; 0x40
   13162:	3101      	adds	r1, #1
   13164:	b2c9      	uxtb	r1, r1
   13166:	7029      	strb	r1, [r5, #0]
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	428b      	cmp	r3, r1
   1316c:	d315      	bcc.n	1319a <Radio_LBTScanTimeout+0x46>
   1316e:	260e      	movs	r6, #14
   13170:	446e      	add	r6, sp
   13172:	4b16      	ldr	r3, [pc, #88]	; (131cc <Radio_LBTScanTimeout+0x78>)
   13174:	0030      	movs	r0, r6
   13176:	4798      	blx	r3
   13178:	2300      	movs	r3, #0
   1317a:	5ef2      	ldrsh	r2, [r6, r3]
   1317c:	782b      	ldrb	r3, [r5, #0]
   1317e:	4353      	muls	r3, r2
   13180:	6c62      	ldr	r2, [r4, #68]	; 0x44
   13182:	189b      	adds	r3, r3, r2
   13184:	6463      	str	r3, [r4, #68]	; 0x44
   13186:	0023      	movs	r3, r4
   13188:	2200      	movs	r2, #0
   1318a:	3350      	adds	r3, #80	; 0x50
   1318c:	7818      	ldrb	r0, [r3, #0]
   1318e:	9200      	str	r2, [sp, #0]
   13190:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   13192:	4b0f      	ldr	r3, [pc, #60]	; (131d0 <Radio_LBTScanTimeout+0x7c>)
   13194:	4c0f      	ldr	r4, [pc, #60]	; (131d4 <Radio_LBTScanTimeout+0x80>)
   13196:	47a0      	blx	r4
   13198:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1319a:	2380      	movs	r3, #128	; 0x80
   1319c:	4a0e      	ldr	r2, [pc, #56]	; (131d8 <Radio_LBTScanTimeout+0x84>)
   1319e:	009b      	lsls	r3, r3, #2
   131a0:	8810      	ldrh	r0, [r2, #0]
   131a2:	4303      	orrs	r3, r0
   131a4:	8013      	strh	r3, [r2, #0]
   131a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   131a8:	0058      	lsls	r0, r3, #1
   131aa:	1e4b      	subs	r3, r1, #1
   131ac:	4359      	muls	r1, r3
   131ae:	4b0b      	ldr	r3, [pc, #44]	; (131dc <Radio_LBTScanTimeout+0x88>)
   131b0:	b289      	uxth	r1, r1
   131b2:	4798      	blx	r3
   131b4:	0023      	movs	r3, r4
   131b6:	334c      	adds	r3, #76	; 0x4c
   131b8:	8018      	strh	r0, [r3, #0]
   131ba:	2300      	movs	r3, #0
   131bc:	2001      	movs	r0, #1
   131be:	702b      	strb	r3, [r5, #0]
   131c0:	6463      	str	r3, [r4, #68]	; 0x44
   131c2:	4b07      	ldr	r3, [pc, #28]	; (131e0 <Radio_LBTScanTimeout+0x8c>)
   131c4:	4798      	blx	r3
   131c6:	e7e7      	b.n	13198 <Radio_LBTScanTimeout+0x44>
   131c8:	20002d78 	.word	0x20002d78
   131cc:	0000d915 	.word	0x0000d915
   131d0:	00013155 	.word	0x00013155
   131d4:	0000d0bd 	.word	0x0000d0bd
   131d8:	20003044 	.word	0x20003044
   131dc:	000135a9 	.word	0x000135a9
   131e0:	0000eac1 	.word	0x0000eac1

000131e4 <RADIO_ScanHandler>:
   131e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   131e6:	4b12      	ldr	r3, [pc, #72]	; (13230 <RADIO_ScanHandler+0x4c>)
   131e8:	4798      	blx	r3
   131ea:	2000      	movs	r0, #0
   131ec:	4b11      	ldr	r3, [pc, #68]	; (13234 <RADIO_ScanHandler+0x50>)
   131ee:	4798      	blx	r3
   131f0:	4d11      	ldr	r5, [pc, #68]	; (13238 <RADIO_ScanHandler+0x54>)
   131f2:	4b12      	ldr	r3, [pc, #72]	; (1323c <RADIO_ScanHandler+0x58>)
   131f4:	6828      	ldr	r0, [r5, #0]
   131f6:	2400      	movs	r4, #0
   131f8:	4798      	blx	r3
   131fa:	002b      	movs	r3, r5
   131fc:	4e10      	ldr	r6, [pc, #64]	; (13240 <RADIO_ScanHandler+0x5c>)
   131fe:	334c      	adds	r3, #76	; 0x4c
   13200:	2201      	movs	r2, #1
   13202:	0021      	movs	r1, r4
   13204:	0020      	movs	r0, r4
   13206:	801c      	strh	r4, [r3, #0]
   13208:	47b0      	blx	r6
   1320a:	4b0e      	ldr	r3, [pc, #56]	; (13244 <RADIO_ScanHandler+0x60>)
   1320c:	2109      	movs	r1, #9
   1320e:	2012      	movs	r0, #18
   13210:	4798      	blx	r3
   13212:	3550      	adds	r5, #80	; 0x50
   13214:	0022      	movs	r2, r4
   13216:	0021      	movs	r1, r4
   13218:	2005      	movs	r0, #5
   1321a:	47b0      	blx	r6
   1321c:	7828      	ldrb	r0, [r5, #0]
   1321e:	4b0a      	ldr	r3, [pc, #40]	; (13248 <RADIO_ScanHandler+0x64>)
   13220:	4d0a      	ldr	r5, [pc, #40]	; (1324c <RADIO_ScanHandler+0x68>)
   13222:	9400      	str	r4, [sp, #0]
   13224:	0022      	movs	r2, r4
   13226:	490a      	ldr	r1, [pc, #40]	; (13250 <RADIO_ScanHandler+0x6c>)
   13228:	47a8      	blx	r5
   1322a:	0020      	movs	r0, r4
   1322c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1322e:	46c0      	nop			; (mov r8, r8)
   13230:	0000f131 	.word	0x0000f131
   13234:	0000ed75 	.word	0x0000ed75
   13238:	20002d78 	.word	0x20002d78
   1323c:	0000e4b9 	.word	0x0000e4b9
   13240:	0000d6f9 	.word	0x0000d6f9
   13244:	0000c4d1 	.word	0x0000c4d1
   13248:	00013155 	.word	0x00013155
   1324c:	0000d0bd 	.word	0x0000d0bd
   13250:	00002328 	.word	0x00002328

00013254 <radioScanDoneHandler>:
   13254:	b530      	push	{r4, r5, lr}
   13256:	4a18      	ldr	r2, [pc, #96]	; (132b8 <radioScanDoneHandler+0x64>)
   13258:	4918      	ldr	r1, [pc, #96]	; (132bc <radioScanDoneHandler+0x68>)
   1325a:	8813      	ldrh	r3, [r2, #0]
   1325c:	b085      	sub	sp, #20
   1325e:	400b      	ands	r3, r1
   13260:	8013      	strh	r3, [r2, #0]
   13262:	2200      	movs	r2, #0
   13264:	4b16      	ldr	r3, [pc, #88]	; (132c0 <radioScanDoneHandler+0x6c>)
   13266:	0011      	movs	r1, r2
   13268:	0010      	movs	r0, r2
   1326a:	4798      	blx	r3
   1326c:	2000      	movs	r0, #0
   1326e:	4b15      	ldr	r3, [pc, #84]	; (132c4 <radioScanDoneHandler+0x70>)
   13270:	4798      	blx	r3
   13272:	4b15      	ldr	r3, [pc, #84]	; (132c8 <radioScanDoneHandler+0x74>)
   13274:	4798      	blx	r3
   13276:	4c15      	ldr	r4, [pc, #84]	; (132cc <radioScanDoneHandler+0x78>)
   13278:	0023      	movs	r3, r4
   1327a:	334c      	adds	r3, #76	; 0x4c
   1327c:	2100      	movs	r1, #0
   1327e:	5e59      	ldrsh	r1, [r3, r1]
   13280:	233e      	movs	r3, #62	; 0x3e
   13282:	5ee2      	ldrsh	r2, [r4, r3]
   13284:	4b12      	ldr	r3, [pc, #72]	; (132d0 <radioScanDoneHandler+0x7c>)
   13286:	4291      	cmp	r1, r2
   13288:	da06      	bge.n	13298 <radioScanDoneHandler+0x44>
   1328a:	2002      	movs	r0, #2
   1328c:	4798      	blx	r3
   1328e:	4b11      	ldr	r3, [pc, #68]	; (132d4 <radioScanDoneHandler+0x80>)
   13290:	4798      	blx	r3
   13292:	2000      	movs	r0, #0
   13294:	b005      	add	sp, #20
   13296:	bd30      	pop	{r4, r5, pc}
   13298:	2207      	movs	r2, #7
   1329a:	ad01      	add	r5, sp, #4
   1329c:	2001      	movs	r0, #1
   1329e:	702a      	strb	r2, [r5, #0]
   132a0:	4798      	blx	r3
   132a2:	4b0d      	ldr	r3, [pc, #52]	; (132d8 <radioScanDoneHandler+0x84>)
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	079b      	lsls	r3, r3, #30
   132a8:	d5f3      	bpl.n	13292 <radioScanDoneHandler+0x3e>
   132aa:	6923      	ldr	r3, [r4, #16]
   132ac:	2b00      	cmp	r3, #0
   132ae:	d0f0      	beq.n	13292 <radioScanDoneHandler+0x3e>
   132b0:	0029      	movs	r1, r5
   132b2:	2002      	movs	r0, #2
   132b4:	4798      	blx	r3
   132b6:	e7ec      	b.n	13292 <radioScanDoneHandler+0x3e>
   132b8:	20003044 	.word	0x20003044
   132bc:	fffffdff 	.word	0xfffffdff
   132c0:	0000d6f9 	.word	0x0000d6f9
   132c4:	0000eda9 	.word	0x0000eda9
   132c8:	0000f261 	.word	0x0000f261
   132cc:	20002d78 	.word	0x20002d78
   132d0:	0000eb6d 	.word	0x0000eb6d
   132d4:	0000f52d 	.word	0x0000f52d
   132d8:	20003046 	.word	0x20003046

000132dc <common_tc_read_count>:
   132dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132de:	4b0d      	ldr	r3, [pc, #52]	; (13314 <common_tc_read_count+0x38>)
   132e0:	4798      	blx	r3
   132e2:	4b0d      	ldr	r3, [pc, #52]	; (13318 <common_tc_read_count+0x3c>)
   132e4:	781b      	ldrb	r3, [r3, #0]
   132e6:	2b00      	cmp	r3, #0
   132e8:	d00e      	beq.n	13308 <common_tc_read_count+0x2c>
   132ea:	4b0c      	ldr	r3, [pc, #48]	; (1331c <common_tc_read_count+0x40>)
   132ec:	781d      	ldrb	r5, [r3, #0]
   132ee:	4b0a      	ldr	r3, [pc, #40]	; (13318 <common_tc_read_count+0x3c>)
   132f0:	781f      	ldrb	r7, [r3, #0]
   132f2:	4c0b      	ldr	r4, [pc, #44]	; (13320 <common_tc_read_count+0x44>)
   132f4:	1c29      	adds	r1, r5, #0
   132f6:	47a0      	blx	r4
   132f8:	1c06      	adds	r6, r0, #0
   132fa:	480a      	ldr	r0, [pc, #40]	; (13324 <common_tc_read_count+0x48>)
   132fc:	1c29      	adds	r1, r5, #0
   132fe:	47a0      	blx	r4
   13300:	4378      	muls	r0, r7
   13302:	1830      	adds	r0, r6, r0
   13304:	b280      	uxth	r0, r0
   13306:	e004      	b.n	13312 <common_tc_read_count+0x36>
   13308:	4b04      	ldr	r3, [pc, #16]	; (1331c <common_tc_read_count+0x40>)
   1330a:	7819      	ldrb	r1, [r3, #0]
   1330c:	4b04      	ldr	r3, [pc, #16]	; (13320 <common_tc_read_count+0x44>)
   1330e:	4798      	blx	r3
   13310:	b280      	uxth	r0, r0
   13312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13314:	0000d949 	.word	0x0000d949
   13318:	20001ec8 	.word	0x20001ec8
   1331c:	200034d4 	.word	0x200034d4
   13320:	000135a9 	.word	0x000135a9
   13324:	0000ffff 	.word	0x0000ffff

00013328 <common_tc_compare_stop>:
   13328:	b508      	push	{r3, lr}
   1332a:	4b05      	ldr	r3, [pc, #20]	; (13340 <common_tc_compare_stop+0x18>)
   1332c:	4798      	blx	r3
   1332e:	4b05      	ldr	r3, [pc, #20]	; (13344 <common_tc_compare_stop+0x1c>)
   13330:	4798      	blx	r3
   13332:	4b05      	ldr	r3, [pc, #20]	; (13348 <common_tc_compare_stop+0x20>)
   13334:	2200      	movs	r2, #0
   13336:	605a      	str	r2, [r3, #4]
   13338:	811a      	strh	r2, [r3, #8]
   1333a:	4b04      	ldr	r3, [pc, #16]	; (1334c <common_tc_compare_stop+0x24>)
   1333c:	4798      	blx	r3
   1333e:	bd08      	pop	{r3, pc}
   13340:	0000d95d 	.word	0x0000d95d
   13344:	0000da15 	.word	0x0000da15
   13348:	20001ec8 	.word	0x20001ec8
   1334c:	0000da39 	.word	0x0000da39

00013350 <common_tc_delay>:
   13350:	b510      	push	{r4, lr}
   13352:	1c04      	adds	r4, r0, #0
   13354:	4b13      	ldr	r3, [pc, #76]	; (133a4 <common_tc_delay+0x54>)
   13356:	4798      	blx	r3
   13358:	4b13      	ldr	r3, [pc, #76]	; (133a8 <common_tc_delay+0x58>)
   1335a:	781a      	ldrb	r2, [r3, #0]
   1335c:	4362      	muls	r2, r4
   1335e:	1881      	adds	r1, r0, r2
   13360:	4b12      	ldr	r3, [pc, #72]	; (133ac <common_tc_delay+0x5c>)
   13362:	6059      	str	r1, [r3, #4]
   13364:	6859      	ldr	r1, [r3, #4]
   13366:	0c09      	lsrs	r1, r1, #16
   13368:	6059      	str	r1, [r3, #4]
   1336a:	685b      	ldr	r3, [r3, #4]
   1336c:	2b00      	cmp	r3, #0
   1336e:	d007      	beq.n	13380 <common_tc_delay+0x30>
   13370:	4b0e      	ldr	r3, [pc, #56]	; (133ac <common_tc_delay+0x5c>)
   13372:	6859      	ldr	r1, [r3, #4]
   13374:	3201      	adds	r2, #1
   13376:	1880      	adds	r0, r0, r2
   13378:	8118      	strh	r0, [r3, #8]
   1337a:	4b0d      	ldr	r3, [pc, #52]	; (133b0 <common_tc_delay+0x60>)
   1337c:	4798      	blx	r3
   1337e:	e004      	b.n	1338a <common_tc_delay+0x3a>
   13380:	1882      	adds	r2, r0, r2
   13382:	4b0a      	ldr	r3, [pc, #40]	; (133ac <common_tc_delay+0x5c>)
   13384:	811a      	strh	r2, [r3, #8]
   13386:	4b0b      	ldr	r3, [pc, #44]	; (133b4 <common_tc_delay+0x64>)
   13388:	4798      	blx	r3
   1338a:	4b08      	ldr	r3, [pc, #32]	; (133ac <common_tc_delay+0x5c>)
   1338c:	891b      	ldrh	r3, [r3, #8]
   1338e:	2b63      	cmp	r3, #99	; 0x63
   13390:	d802      	bhi.n	13398 <common_tc_delay+0x48>
   13392:	3364      	adds	r3, #100	; 0x64
   13394:	4a05      	ldr	r2, [pc, #20]	; (133ac <common_tc_delay+0x5c>)
   13396:	8113      	strh	r3, [r2, #8]
   13398:	4b04      	ldr	r3, [pc, #16]	; (133ac <common_tc_delay+0x5c>)
   1339a:	8918      	ldrh	r0, [r3, #8]
   1339c:	4b06      	ldr	r3, [pc, #24]	; (133b8 <common_tc_delay+0x68>)
   1339e:	4798      	blx	r3
   133a0:	bd10      	pop	{r4, pc}
   133a2:	46c0      	nop			; (mov r8, r8)
   133a4:	0000d949 	.word	0x0000d949
   133a8:	200034d4 	.word	0x200034d4
   133ac:	20001ec8 	.word	0x20001ec8
   133b0:	0000d95d 	.word	0x0000d95d
   133b4:	0000d971 	.word	0x0000d971
   133b8:	0000d9fd 	.word	0x0000d9fd

000133bc <common_tc_init>:
   133bc:	b508      	push	{r3, lr}
   133be:	2200      	movs	r2, #0
   133c0:	4b03      	ldr	r3, [pc, #12]	; (133d0 <common_tc_init+0x14>)
   133c2:	701a      	strb	r2, [r3, #0]
   133c4:	4b03      	ldr	r3, [pc, #12]	; (133d4 <common_tc_init+0x18>)
   133c6:	4798      	blx	r3
   133c8:	4b03      	ldr	r3, [pc, #12]	; (133d8 <common_tc_init+0x1c>)
   133ca:	7018      	strb	r0, [r3, #0]
   133cc:	bd08      	pop	{r3, pc}
   133ce:	46c0      	nop			; (mov r8, r8)
   133d0:	20001ec8 	.word	0x20001ec8
   133d4:	0000da51 	.word	0x0000da51
   133d8:	200034d4 	.word	0x200034d4

000133dc <tmr_ovf_callback>:
   133dc:	b508      	push	{r3, lr}
   133de:	4b0e      	ldr	r3, [pc, #56]	; (13418 <tmr_ovf_callback+0x3c>)
   133e0:	685b      	ldr	r3, [r3, #4]
   133e2:	2b00      	cmp	r3, #0
   133e4:	d007      	beq.n	133f6 <tmr_ovf_callback+0x1a>
   133e6:	4a0c      	ldr	r2, [pc, #48]	; (13418 <tmr_ovf_callback+0x3c>)
   133e8:	6853      	ldr	r3, [r2, #4]
   133ea:	3b01      	subs	r3, #1
   133ec:	6053      	str	r3, [r2, #4]
   133ee:	2b00      	cmp	r3, #0
   133f0:	d101      	bne.n	133f6 <tmr_ovf_callback+0x1a>
   133f2:	4b0a      	ldr	r3, [pc, #40]	; (1341c <tmr_ovf_callback+0x40>)
   133f4:	4798      	blx	r3
   133f6:	4a08      	ldr	r2, [pc, #32]	; (13418 <tmr_ovf_callback+0x3c>)
   133f8:	7813      	ldrb	r3, [r2, #0]
   133fa:	3301      	adds	r3, #1
   133fc:	b2db      	uxtb	r3, r3
   133fe:	7013      	strb	r3, [r2, #0]
   13400:	4a07      	ldr	r2, [pc, #28]	; (13420 <tmr_ovf_callback+0x44>)
   13402:	7812      	ldrb	r2, [r2, #0]
   13404:	429a      	cmp	r2, r3
   13406:	d806      	bhi.n	13416 <tmr_ovf_callback+0x3a>
   13408:	4b03      	ldr	r3, [pc, #12]	; (13418 <tmr_ovf_callback+0x3c>)
   1340a:	2200      	movs	r2, #0
   1340c:	701a      	strb	r2, [r3, #0]
   1340e:	68db      	ldr	r3, [r3, #12]
   13410:	2b00      	cmp	r3, #0
   13412:	d000      	beq.n	13416 <tmr_ovf_callback+0x3a>
   13414:	4798      	blx	r3
   13416:	bd08      	pop	{r3, pc}
   13418:	20001ec8 	.word	0x20001ec8
   1341c:	0000d971 	.word	0x0000d971
   13420:	200034d4 	.word	0x200034d4

00013424 <tmr_cca_callback>:
   13424:	b508      	push	{r3, lr}
   13426:	4b04      	ldr	r3, [pc, #16]	; (13438 <tmr_cca_callback+0x14>)
   13428:	4798      	blx	r3
   1342a:	4b04      	ldr	r3, [pc, #16]	; (1343c <tmr_cca_callback+0x18>)
   1342c:	691b      	ldr	r3, [r3, #16]
   1342e:	2b00      	cmp	r3, #0
   13430:	d000      	beq.n	13434 <tmr_cca_callback+0x10>
   13432:	4798      	blx	r3
   13434:	bd08      	pop	{r3, pc}
   13436:	46c0      	nop			; (mov r8, r8)
   13438:	0000d95d 	.word	0x0000d95d
   1343c:	20001ec8 	.word	0x20001ec8

00013440 <set_common_tc_overflow_callback>:
   13440:	4b01      	ldr	r3, [pc, #4]	; (13448 <set_common_tc_overflow_callback+0x8>)
   13442:	60d8      	str	r0, [r3, #12]
   13444:	4770      	bx	lr
   13446:	46c0      	nop			; (mov r8, r8)
   13448:	20001ec8 	.word	0x20001ec8

0001344c <set_common_tc_expiry_callback>:
   1344c:	4b01      	ldr	r3, [pc, #4]	; (13454 <set_common_tc_expiry_callback+0x8>)
   1344e:	6118      	str	r0, [r3, #16]
   13450:	4770      	bx	lr
   13452:	46c0      	nop			; (mov r8, r8)
   13454:	20001ec8 	.word	0x20001ec8

00013458 <__gnu_thumb1_case_uqi>:
   13458:	b402      	push	{r1}
   1345a:	4671      	mov	r1, lr
   1345c:	0849      	lsrs	r1, r1, #1
   1345e:	0049      	lsls	r1, r1, #1
   13460:	5c09      	ldrb	r1, [r1, r0]
   13462:	0049      	lsls	r1, r1, #1
   13464:	448e      	add	lr, r1
   13466:	bc02      	pop	{r1}
   13468:	4770      	bx	lr
   1346a:	46c0      	nop			; (mov r8, r8)

0001346c <__gnu_thumb1_case_shi>:
   1346c:	b403      	push	{r0, r1}
   1346e:	4671      	mov	r1, lr
   13470:	0849      	lsrs	r1, r1, #1
   13472:	0040      	lsls	r0, r0, #1
   13474:	0049      	lsls	r1, r1, #1
   13476:	5e09      	ldrsh	r1, [r1, r0]
   13478:	0049      	lsls	r1, r1, #1
   1347a:	448e      	add	lr, r1
   1347c:	bc03      	pop	{r0, r1}
   1347e:	4770      	bx	lr

00013480 <__gnu_thumb1_case_uhi>:
   13480:	b403      	push	{r0, r1}
   13482:	4671      	mov	r1, lr
   13484:	0849      	lsrs	r1, r1, #1
   13486:	0040      	lsls	r0, r0, #1
   13488:	0049      	lsls	r1, r1, #1
   1348a:	5a09      	ldrh	r1, [r1, r0]
   1348c:	0049      	lsls	r1, r1, #1
   1348e:	448e      	add	lr, r1
   13490:	bc03      	pop	{r0, r1}
   13492:	4770      	bx	lr

00013494 <__udivsi3>:
   13494:	2200      	movs	r2, #0
   13496:	0843      	lsrs	r3, r0, #1
   13498:	428b      	cmp	r3, r1
   1349a:	d374      	bcc.n	13586 <__udivsi3+0xf2>
   1349c:	0903      	lsrs	r3, r0, #4
   1349e:	428b      	cmp	r3, r1
   134a0:	d35f      	bcc.n	13562 <__udivsi3+0xce>
   134a2:	0a03      	lsrs	r3, r0, #8
   134a4:	428b      	cmp	r3, r1
   134a6:	d344      	bcc.n	13532 <__udivsi3+0x9e>
   134a8:	0b03      	lsrs	r3, r0, #12
   134aa:	428b      	cmp	r3, r1
   134ac:	d328      	bcc.n	13500 <__udivsi3+0x6c>
   134ae:	0c03      	lsrs	r3, r0, #16
   134b0:	428b      	cmp	r3, r1
   134b2:	d30d      	bcc.n	134d0 <__udivsi3+0x3c>
   134b4:	22ff      	movs	r2, #255	; 0xff
   134b6:	0209      	lsls	r1, r1, #8
   134b8:	ba12      	rev	r2, r2
   134ba:	0c03      	lsrs	r3, r0, #16
   134bc:	428b      	cmp	r3, r1
   134be:	d302      	bcc.n	134c6 <__udivsi3+0x32>
   134c0:	1212      	asrs	r2, r2, #8
   134c2:	0209      	lsls	r1, r1, #8
   134c4:	d065      	beq.n	13592 <__udivsi3+0xfe>
   134c6:	0b03      	lsrs	r3, r0, #12
   134c8:	428b      	cmp	r3, r1
   134ca:	d319      	bcc.n	13500 <__udivsi3+0x6c>
   134cc:	e000      	b.n	134d0 <__udivsi3+0x3c>
   134ce:	0a09      	lsrs	r1, r1, #8
   134d0:	0bc3      	lsrs	r3, r0, #15
   134d2:	428b      	cmp	r3, r1
   134d4:	d301      	bcc.n	134da <__udivsi3+0x46>
   134d6:	03cb      	lsls	r3, r1, #15
   134d8:	1ac0      	subs	r0, r0, r3
   134da:	4152      	adcs	r2, r2
   134dc:	0b83      	lsrs	r3, r0, #14
   134de:	428b      	cmp	r3, r1
   134e0:	d301      	bcc.n	134e6 <__udivsi3+0x52>
   134e2:	038b      	lsls	r3, r1, #14
   134e4:	1ac0      	subs	r0, r0, r3
   134e6:	4152      	adcs	r2, r2
   134e8:	0b43      	lsrs	r3, r0, #13
   134ea:	428b      	cmp	r3, r1
   134ec:	d301      	bcc.n	134f2 <__udivsi3+0x5e>
   134ee:	034b      	lsls	r3, r1, #13
   134f0:	1ac0      	subs	r0, r0, r3
   134f2:	4152      	adcs	r2, r2
   134f4:	0b03      	lsrs	r3, r0, #12
   134f6:	428b      	cmp	r3, r1
   134f8:	d301      	bcc.n	134fe <__udivsi3+0x6a>
   134fa:	030b      	lsls	r3, r1, #12
   134fc:	1ac0      	subs	r0, r0, r3
   134fe:	4152      	adcs	r2, r2
   13500:	0ac3      	lsrs	r3, r0, #11
   13502:	428b      	cmp	r3, r1
   13504:	d301      	bcc.n	1350a <__udivsi3+0x76>
   13506:	02cb      	lsls	r3, r1, #11
   13508:	1ac0      	subs	r0, r0, r3
   1350a:	4152      	adcs	r2, r2
   1350c:	0a83      	lsrs	r3, r0, #10
   1350e:	428b      	cmp	r3, r1
   13510:	d301      	bcc.n	13516 <__udivsi3+0x82>
   13512:	028b      	lsls	r3, r1, #10
   13514:	1ac0      	subs	r0, r0, r3
   13516:	4152      	adcs	r2, r2
   13518:	0a43      	lsrs	r3, r0, #9
   1351a:	428b      	cmp	r3, r1
   1351c:	d301      	bcc.n	13522 <__udivsi3+0x8e>
   1351e:	024b      	lsls	r3, r1, #9
   13520:	1ac0      	subs	r0, r0, r3
   13522:	4152      	adcs	r2, r2
   13524:	0a03      	lsrs	r3, r0, #8
   13526:	428b      	cmp	r3, r1
   13528:	d301      	bcc.n	1352e <__udivsi3+0x9a>
   1352a:	020b      	lsls	r3, r1, #8
   1352c:	1ac0      	subs	r0, r0, r3
   1352e:	4152      	adcs	r2, r2
   13530:	d2cd      	bcs.n	134ce <__udivsi3+0x3a>
   13532:	09c3      	lsrs	r3, r0, #7
   13534:	428b      	cmp	r3, r1
   13536:	d301      	bcc.n	1353c <__udivsi3+0xa8>
   13538:	01cb      	lsls	r3, r1, #7
   1353a:	1ac0      	subs	r0, r0, r3
   1353c:	4152      	adcs	r2, r2
   1353e:	0983      	lsrs	r3, r0, #6
   13540:	428b      	cmp	r3, r1
   13542:	d301      	bcc.n	13548 <__udivsi3+0xb4>
   13544:	018b      	lsls	r3, r1, #6
   13546:	1ac0      	subs	r0, r0, r3
   13548:	4152      	adcs	r2, r2
   1354a:	0943      	lsrs	r3, r0, #5
   1354c:	428b      	cmp	r3, r1
   1354e:	d301      	bcc.n	13554 <__udivsi3+0xc0>
   13550:	014b      	lsls	r3, r1, #5
   13552:	1ac0      	subs	r0, r0, r3
   13554:	4152      	adcs	r2, r2
   13556:	0903      	lsrs	r3, r0, #4
   13558:	428b      	cmp	r3, r1
   1355a:	d301      	bcc.n	13560 <__udivsi3+0xcc>
   1355c:	010b      	lsls	r3, r1, #4
   1355e:	1ac0      	subs	r0, r0, r3
   13560:	4152      	adcs	r2, r2
   13562:	08c3      	lsrs	r3, r0, #3
   13564:	428b      	cmp	r3, r1
   13566:	d301      	bcc.n	1356c <__udivsi3+0xd8>
   13568:	00cb      	lsls	r3, r1, #3
   1356a:	1ac0      	subs	r0, r0, r3
   1356c:	4152      	adcs	r2, r2
   1356e:	0883      	lsrs	r3, r0, #2
   13570:	428b      	cmp	r3, r1
   13572:	d301      	bcc.n	13578 <__udivsi3+0xe4>
   13574:	008b      	lsls	r3, r1, #2
   13576:	1ac0      	subs	r0, r0, r3
   13578:	4152      	adcs	r2, r2
   1357a:	0843      	lsrs	r3, r0, #1
   1357c:	428b      	cmp	r3, r1
   1357e:	d301      	bcc.n	13584 <__udivsi3+0xf0>
   13580:	004b      	lsls	r3, r1, #1
   13582:	1ac0      	subs	r0, r0, r3
   13584:	4152      	adcs	r2, r2
   13586:	1a41      	subs	r1, r0, r1
   13588:	d200      	bcs.n	1358c <__udivsi3+0xf8>
   1358a:	4601      	mov	r1, r0
   1358c:	4152      	adcs	r2, r2
   1358e:	4610      	mov	r0, r2
   13590:	4770      	bx	lr
   13592:	e7ff      	b.n	13594 <__udivsi3+0x100>
   13594:	b501      	push	{r0, lr}
   13596:	2000      	movs	r0, #0
   13598:	f000 f8f0 	bl	1377c <__aeabi_idiv0>
   1359c:	bd02      	pop	{r1, pc}
   1359e:	46c0      	nop			; (mov r8, r8)

000135a0 <__aeabi_uidivmod>:
   135a0:	2900      	cmp	r1, #0
   135a2:	d0f7      	beq.n	13594 <__udivsi3+0x100>
   135a4:	e776      	b.n	13494 <__udivsi3>
   135a6:	4770      	bx	lr

000135a8 <__divsi3>:
   135a8:	4603      	mov	r3, r0
   135aa:	430b      	orrs	r3, r1
   135ac:	d47f      	bmi.n	136ae <__divsi3+0x106>
   135ae:	2200      	movs	r2, #0
   135b0:	0843      	lsrs	r3, r0, #1
   135b2:	428b      	cmp	r3, r1
   135b4:	d374      	bcc.n	136a0 <__divsi3+0xf8>
   135b6:	0903      	lsrs	r3, r0, #4
   135b8:	428b      	cmp	r3, r1
   135ba:	d35f      	bcc.n	1367c <__divsi3+0xd4>
   135bc:	0a03      	lsrs	r3, r0, #8
   135be:	428b      	cmp	r3, r1
   135c0:	d344      	bcc.n	1364c <__divsi3+0xa4>
   135c2:	0b03      	lsrs	r3, r0, #12
   135c4:	428b      	cmp	r3, r1
   135c6:	d328      	bcc.n	1361a <__divsi3+0x72>
   135c8:	0c03      	lsrs	r3, r0, #16
   135ca:	428b      	cmp	r3, r1
   135cc:	d30d      	bcc.n	135ea <__divsi3+0x42>
   135ce:	22ff      	movs	r2, #255	; 0xff
   135d0:	0209      	lsls	r1, r1, #8
   135d2:	ba12      	rev	r2, r2
   135d4:	0c03      	lsrs	r3, r0, #16
   135d6:	428b      	cmp	r3, r1
   135d8:	d302      	bcc.n	135e0 <__divsi3+0x38>
   135da:	1212      	asrs	r2, r2, #8
   135dc:	0209      	lsls	r1, r1, #8
   135de:	d065      	beq.n	136ac <__divsi3+0x104>
   135e0:	0b03      	lsrs	r3, r0, #12
   135e2:	428b      	cmp	r3, r1
   135e4:	d319      	bcc.n	1361a <__divsi3+0x72>
   135e6:	e000      	b.n	135ea <__divsi3+0x42>
   135e8:	0a09      	lsrs	r1, r1, #8
   135ea:	0bc3      	lsrs	r3, r0, #15
   135ec:	428b      	cmp	r3, r1
   135ee:	d301      	bcc.n	135f4 <__divsi3+0x4c>
   135f0:	03cb      	lsls	r3, r1, #15
   135f2:	1ac0      	subs	r0, r0, r3
   135f4:	4152      	adcs	r2, r2
   135f6:	0b83      	lsrs	r3, r0, #14
   135f8:	428b      	cmp	r3, r1
   135fa:	d301      	bcc.n	13600 <__divsi3+0x58>
   135fc:	038b      	lsls	r3, r1, #14
   135fe:	1ac0      	subs	r0, r0, r3
   13600:	4152      	adcs	r2, r2
   13602:	0b43      	lsrs	r3, r0, #13
   13604:	428b      	cmp	r3, r1
   13606:	d301      	bcc.n	1360c <__divsi3+0x64>
   13608:	034b      	lsls	r3, r1, #13
   1360a:	1ac0      	subs	r0, r0, r3
   1360c:	4152      	adcs	r2, r2
   1360e:	0b03      	lsrs	r3, r0, #12
   13610:	428b      	cmp	r3, r1
   13612:	d301      	bcc.n	13618 <__divsi3+0x70>
   13614:	030b      	lsls	r3, r1, #12
   13616:	1ac0      	subs	r0, r0, r3
   13618:	4152      	adcs	r2, r2
   1361a:	0ac3      	lsrs	r3, r0, #11
   1361c:	428b      	cmp	r3, r1
   1361e:	d301      	bcc.n	13624 <__divsi3+0x7c>
   13620:	02cb      	lsls	r3, r1, #11
   13622:	1ac0      	subs	r0, r0, r3
   13624:	4152      	adcs	r2, r2
   13626:	0a83      	lsrs	r3, r0, #10
   13628:	428b      	cmp	r3, r1
   1362a:	d301      	bcc.n	13630 <__divsi3+0x88>
   1362c:	028b      	lsls	r3, r1, #10
   1362e:	1ac0      	subs	r0, r0, r3
   13630:	4152      	adcs	r2, r2
   13632:	0a43      	lsrs	r3, r0, #9
   13634:	428b      	cmp	r3, r1
   13636:	d301      	bcc.n	1363c <__divsi3+0x94>
   13638:	024b      	lsls	r3, r1, #9
   1363a:	1ac0      	subs	r0, r0, r3
   1363c:	4152      	adcs	r2, r2
   1363e:	0a03      	lsrs	r3, r0, #8
   13640:	428b      	cmp	r3, r1
   13642:	d301      	bcc.n	13648 <__divsi3+0xa0>
   13644:	020b      	lsls	r3, r1, #8
   13646:	1ac0      	subs	r0, r0, r3
   13648:	4152      	adcs	r2, r2
   1364a:	d2cd      	bcs.n	135e8 <__divsi3+0x40>
   1364c:	09c3      	lsrs	r3, r0, #7
   1364e:	428b      	cmp	r3, r1
   13650:	d301      	bcc.n	13656 <__divsi3+0xae>
   13652:	01cb      	lsls	r3, r1, #7
   13654:	1ac0      	subs	r0, r0, r3
   13656:	4152      	adcs	r2, r2
   13658:	0983      	lsrs	r3, r0, #6
   1365a:	428b      	cmp	r3, r1
   1365c:	d301      	bcc.n	13662 <__divsi3+0xba>
   1365e:	018b      	lsls	r3, r1, #6
   13660:	1ac0      	subs	r0, r0, r3
   13662:	4152      	adcs	r2, r2
   13664:	0943      	lsrs	r3, r0, #5
   13666:	428b      	cmp	r3, r1
   13668:	d301      	bcc.n	1366e <__divsi3+0xc6>
   1366a:	014b      	lsls	r3, r1, #5
   1366c:	1ac0      	subs	r0, r0, r3
   1366e:	4152      	adcs	r2, r2
   13670:	0903      	lsrs	r3, r0, #4
   13672:	428b      	cmp	r3, r1
   13674:	d301      	bcc.n	1367a <__divsi3+0xd2>
   13676:	010b      	lsls	r3, r1, #4
   13678:	1ac0      	subs	r0, r0, r3
   1367a:	4152      	adcs	r2, r2
   1367c:	08c3      	lsrs	r3, r0, #3
   1367e:	428b      	cmp	r3, r1
   13680:	d301      	bcc.n	13686 <__divsi3+0xde>
   13682:	00cb      	lsls	r3, r1, #3
   13684:	1ac0      	subs	r0, r0, r3
   13686:	4152      	adcs	r2, r2
   13688:	0883      	lsrs	r3, r0, #2
   1368a:	428b      	cmp	r3, r1
   1368c:	d301      	bcc.n	13692 <__divsi3+0xea>
   1368e:	008b      	lsls	r3, r1, #2
   13690:	1ac0      	subs	r0, r0, r3
   13692:	4152      	adcs	r2, r2
   13694:	0843      	lsrs	r3, r0, #1
   13696:	428b      	cmp	r3, r1
   13698:	d301      	bcc.n	1369e <__divsi3+0xf6>
   1369a:	004b      	lsls	r3, r1, #1
   1369c:	1ac0      	subs	r0, r0, r3
   1369e:	4152      	adcs	r2, r2
   136a0:	1a41      	subs	r1, r0, r1
   136a2:	d200      	bcs.n	136a6 <__divsi3+0xfe>
   136a4:	4601      	mov	r1, r0
   136a6:	4152      	adcs	r2, r2
   136a8:	4610      	mov	r0, r2
   136aa:	4770      	bx	lr
   136ac:	e05d      	b.n	1376a <__divsi3+0x1c2>
   136ae:	0fca      	lsrs	r2, r1, #31
   136b0:	d000      	beq.n	136b4 <__divsi3+0x10c>
   136b2:	4249      	negs	r1, r1
   136b4:	1003      	asrs	r3, r0, #32
   136b6:	d300      	bcc.n	136ba <__divsi3+0x112>
   136b8:	4240      	negs	r0, r0
   136ba:	4053      	eors	r3, r2
   136bc:	2200      	movs	r2, #0
   136be:	469c      	mov	ip, r3
   136c0:	0903      	lsrs	r3, r0, #4
   136c2:	428b      	cmp	r3, r1
   136c4:	d32d      	bcc.n	13722 <__divsi3+0x17a>
   136c6:	0a03      	lsrs	r3, r0, #8
   136c8:	428b      	cmp	r3, r1
   136ca:	d312      	bcc.n	136f2 <__divsi3+0x14a>
   136cc:	22fc      	movs	r2, #252	; 0xfc
   136ce:	0189      	lsls	r1, r1, #6
   136d0:	ba12      	rev	r2, r2
   136d2:	0a03      	lsrs	r3, r0, #8
   136d4:	428b      	cmp	r3, r1
   136d6:	d30c      	bcc.n	136f2 <__divsi3+0x14a>
   136d8:	0189      	lsls	r1, r1, #6
   136da:	1192      	asrs	r2, r2, #6
   136dc:	428b      	cmp	r3, r1
   136de:	d308      	bcc.n	136f2 <__divsi3+0x14a>
   136e0:	0189      	lsls	r1, r1, #6
   136e2:	1192      	asrs	r2, r2, #6
   136e4:	428b      	cmp	r3, r1
   136e6:	d304      	bcc.n	136f2 <__divsi3+0x14a>
   136e8:	0189      	lsls	r1, r1, #6
   136ea:	d03a      	beq.n	13762 <__divsi3+0x1ba>
   136ec:	1192      	asrs	r2, r2, #6
   136ee:	e000      	b.n	136f2 <__divsi3+0x14a>
   136f0:	0989      	lsrs	r1, r1, #6
   136f2:	09c3      	lsrs	r3, r0, #7
   136f4:	428b      	cmp	r3, r1
   136f6:	d301      	bcc.n	136fc <__divsi3+0x154>
   136f8:	01cb      	lsls	r3, r1, #7
   136fa:	1ac0      	subs	r0, r0, r3
   136fc:	4152      	adcs	r2, r2
   136fe:	0983      	lsrs	r3, r0, #6
   13700:	428b      	cmp	r3, r1
   13702:	d301      	bcc.n	13708 <__divsi3+0x160>
   13704:	018b      	lsls	r3, r1, #6
   13706:	1ac0      	subs	r0, r0, r3
   13708:	4152      	adcs	r2, r2
   1370a:	0943      	lsrs	r3, r0, #5
   1370c:	428b      	cmp	r3, r1
   1370e:	d301      	bcc.n	13714 <__divsi3+0x16c>
   13710:	014b      	lsls	r3, r1, #5
   13712:	1ac0      	subs	r0, r0, r3
   13714:	4152      	adcs	r2, r2
   13716:	0903      	lsrs	r3, r0, #4
   13718:	428b      	cmp	r3, r1
   1371a:	d301      	bcc.n	13720 <__divsi3+0x178>
   1371c:	010b      	lsls	r3, r1, #4
   1371e:	1ac0      	subs	r0, r0, r3
   13720:	4152      	adcs	r2, r2
   13722:	08c3      	lsrs	r3, r0, #3
   13724:	428b      	cmp	r3, r1
   13726:	d301      	bcc.n	1372c <__divsi3+0x184>
   13728:	00cb      	lsls	r3, r1, #3
   1372a:	1ac0      	subs	r0, r0, r3
   1372c:	4152      	adcs	r2, r2
   1372e:	0883      	lsrs	r3, r0, #2
   13730:	428b      	cmp	r3, r1
   13732:	d301      	bcc.n	13738 <__divsi3+0x190>
   13734:	008b      	lsls	r3, r1, #2
   13736:	1ac0      	subs	r0, r0, r3
   13738:	4152      	adcs	r2, r2
   1373a:	d2d9      	bcs.n	136f0 <__divsi3+0x148>
   1373c:	0843      	lsrs	r3, r0, #1
   1373e:	428b      	cmp	r3, r1
   13740:	d301      	bcc.n	13746 <__divsi3+0x19e>
   13742:	004b      	lsls	r3, r1, #1
   13744:	1ac0      	subs	r0, r0, r3
   13746:	4152      	adcs	r2, r2
   13748:	1a41      	subs	r1, r0, r1
   1374a:	d200      	bcs.n	1374e <__divsi3+0x1a6>
   1374c:	4601      	mov	r1, r0
   1374e:	4663      	mov	r3, ip
   13750:	4152      	adcs	r2, r2
   13752:	105b      	asrs	r3, r3, #1
   13754:	4610      	mov	r0, r2
   13756:	d301      	bcc.n	1375c <__divsi3+0x1b4>
   13758:	4240      	negs	r0, r0
   1375a:	2b00      	cmp	r3, #0
   1375c:	d500      	bpl.n	13760 <__divsi3+0x1b8>
   1375e:	4249      	negs	r1, r1
   13760:	4770      	bx	lr
   13762:	4663      	mov	r3, ip
   13764:	105b      	asrs	r3, r3, #1
   13766:	d300      	bcc.n	1376a <__divsi3+0x1c2>
   13768:	4240      	negs	r0, r0
   1376a:	b501      	push	{r0, lr}
   1376c:	2000      	movs	r0, #0
   1376e:	f000 f805 	bl	1377c <__aeabi_idiv0>
   13772:	bd02      	pop	{r1, pc}

00013774 <__aeabi_idivmod>:
   13774:	2900      	cmp	r1, #0
   13776:	d0f8      	beq.n	1376a <__divsi3+0x1c2>
   13778:	e716      	b.n	135a8 <__divsi3>
   1377a:	4770      	bx	lr

0001377c <__aeabi_idiv0>:
   1377c:	4770      	bx	lr
   1377e:	46c0      	nop			; (mov r8, r8)

00013780 <__aeabi_cdrcmple>:
   13780:	4684      	mov	ip, r0
   13782:	1c10      	adds	r0, r2, #0
   13784:	4662      	mov	r2, ip
   13786:	468c      	mov	ip, r1
   13788:	1c19      	adds	r1, r3, #0
   1378a:	4663      	mov	r3, ip
   1378c:	e000      	b.n	13790 <__aeabi_cdcmpeq>
   1378e:	46c0      	nop			; (mov r8, r8)

00013790 <__aeabi_cdcmpeq>:
   13790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13792:	f001 ffa3 	bl	156dc <__ledf2>
   13796:	2800      	cmp	r0, #0
   13798:	d401      	bmi.n	1379e <__aeabi_cdcmpeq+0xe>
   1379a:	2100      	movs	r1, #0
   1379c:	42c8      	cmn	r0, r1
   1379e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000137a0 <__aeabi_dcmpeq>:
   137a0:	b510      	push	{r4, lr}
   137a2:	f001 fefd 	bl	155a0 <__eqdf2>
   137a6:	4240      	negs	r0, r0
   137a8:	3001      	adds	r0, #1
   137aa:	bd10      	pop	{r4, pc}

000137ac <__aeabi_dcmplt>:
   137ac:	b510      	push	{r4, lr}
   137ae:	f001 ff95 	bl	156dc <__ledf2>
   137b2:	2800      	cmp	r0, #0
   137b4:	db01      	blt.n	137ba <__aeabi_dcmplt+0xe>
   137b6:	2000      	movs	r0, #0
   137b8:	bd10      	pop	{r4, pc}
   137ba:	2001      	movs	r0, #1
   137bc:	bd10      	pop	{r4, pc}
   137be:	46c0      	nop			; (mov r8, r8)

000137c0 <__aeabi_dcmple>:
   137c0:	b510      	push	{r4, lr}
   137c2:	f001 ff8b 	bl	156dc <__ledf2>
   137c6:	2800      	cmp	r0, #0
   137c8:	dd01      	ble.n	137ce <__aeabi_dcmple+0xe>
   137ca:	2000      	movs	r0, #0
   137cc:	bd10      	pop	{r4, pc}
   137ce:	2001      	movs	r0, #1
   137d0:	bd10      	pop	{r4, pc}
   137d2:	46c0      	nop			; (mov r8, r8)

000137d4 <__aeabi_dcmpgt>:
   137d4:	b510      	push	{r4, lr}
   137d6:	f001 ff1d 	bl	15614 <__gedf2>
   137da:	2800      	cmp	r0, #0
   137dc:	dc01      	bgt.n	137e2 <__aeabi_dcmpgt+0xe>
   137de:	2000      	movs	r0, #0
   137e0:	bd10      	pop	{r4, pc}
   137e2:	2001      	movs	r0, #1
   137e4:	bd10      	pop	{r4, pc}
   137e6:	46c0      	nop			; (mov r8, r8)

000137e8 <__aeabi_dcmpge>:
   137e8:	b510      	push	{r4, lr}
   137ea:	f001 ff13 	bl	15614 <__gedf2>
   137ee:	2800      	cmp	r0, #0
   137f0:	da01      	bge.n	137f6 <__aeabi_dcmpge+0xe>
   137f2:	2000      	movs	r0, #0
   137f4:	bd10      	pop	{r4, pc}
   137f6:	2001      	movs	r0, #1
   137f8:	bd10      	pop	{r4, pc}
   137fa:	46c0      	nop			; (mov r8, r8)

000137fc <__aeabi_cfrcmple>:
   137fc:	4684      	mov	ip, r0
   137fe:	1c08      	adds	r0, r1, #0
   13800:	4661      	mov	r1, ip
   13802:	e7ff      	b.n	13804 <__aeabi_cfcmpeq>

00013804 <__aeabi_cfcmpeq>:
   13804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13806:	f000 fcd3 	bl	141b0 <__lesf2>
   1380a:	2800      	cmp	r0, #0
   1380c:	d401      	bmi.n	13812 <__aeabi_cfcmpeq+0xe>
   1380e:	2100      	movs	r1, #0
   13810:	42c8      	cmn	r0, r1
   13812:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013814 <__aeabi_fcmpeq>:
   13814:	b510      	push	{r4, lr}
   13816:	f000 fc65 	bl	140e4 <__eqsf2>
   1381a:	4240      	negs	r0, r0
   1381c:	3001      	adds	r0, #1
   1381e:	bd10      	pop	{r4, pc}

00013820 <__aeabi_fcmplt>:
   13820:	b510      	push	{r4, lr}
   13822:	f000 fcc5 	bl	141b0 <__lesf2>
   13826:	2800      	cmp	r0, #0
   13828:	db01      	blt.n	1382e <__aeabi_fcmplt+0xe>
   1382a:	2000      	movs	r0, #0
   1382c:	bd10      	pop	{r4, pc}
   1382e:	2001      	movs	r0, #1
   13830:	bd10      	pop	{r4, pc}
   13832:	46c0      	nop			; (mov r8, r8)

00013834 <__aeabi_fcmple>:
   13834:	b510      	push	{r4, lr}
   13836:	f000 fcbb 	bl	141b0 <__lesf2>
   1383a:	2800      	cmp	r0, #0
   1383c:	dd01      	ble.n	13842 <__aeabi_fcmple+0xe>
   1383e:	2000      	movs	r0, #0
   13840:	bd10      	pop	{r4, pc}
   13842:	2001      	movs	r0, #1
   13844:	bd10      	pop	{r4, pc}
   13846:	46c0      	nop			; (mov r8, r8)

00013848 <__aeabi_fcmpgt>:
   13848:	b510      	push	{r4, lr}
   1384a:	f000 fc71 	bl	14130 <__gesf2>
   1384e:	2800      	cmp	r0, #0
   13850:	dc01      	bgt.n	13856 <__aeabi_fcmpgt+0xe>
   13852:	2000      	movs	r0, #0
   13854:	bd10      	pop	{r4, pc}
   13856:	2001      	movs	r0, #1
   13858:	bd10      	pop	{r4, pc}
   1385a:	46c0      	nop			; (mov r8, r8)

0001385c <__aeabi_fcmpge>:
   1385c:	b510      	push	{r4, lr}
   1385e:	f000 fc67 	bl	14130 <__gesf2>
   13862:	2800      	cmp	r0, #0
   13864:	da01      	bge.n	1386a <__aeabi_fcmpge+0xe>
   13866:	2000      	movs	r0, #0
   13868:	bd10      	pop	{r4, pc}
   1386a:	2001      	movs	r0, #1
   1386c:	bd10      	pop	{r4, pc}
   1386e:	46c0      	nop			; (mov r8, r8)

00013870 <__aeabi_uldivmod>:
   13870:	2b00      	cmp	r3, #0
   13872:	d111      	bne.n	13898 <__aeabi_uldivmod+0x28>
   13874:	2a00      	cmp	r2, #0
   13876:	d10f      	bne.n	13898 <__aeabi_uldivmod+0x28>
   13878:	2900      	cmp	r1, #0
   1387a:	d100      	bne.n	1387e <__aeabi_uldivmod+0xe>
   1387c:	2800      	cmp	r0, #0
   1387e:	d002      	beq.n	13886 <__aeabi_uldivmod+0x16>
   13880:	2100      	movs	r1, #0
   13882:	43c9      	mvns	r1, r1
   13884:	1c08      	adds	r0, r1, #0
   13886:	b407      	push	{r0, r1, r2}
   13888:	4802      	ldr	r0, [pc, #8]	; (13894 <__aeabi_uldivmod+0x24>)
   1388a:	a102      	add	r1, pc, #8	; (adr r1, 13894 <__aeabi_uldivmod+0x24>)
   1388c:	1840      	adds	r0, r0, r1
   1388e:	9002      	str	r0, [sp, #8]
   13890:	bd03      	pop	{r0, r1, pc}
   13892:	46c0      	nop			; (mov r8, r8)
   13894:	fffffee9 	.word	0xfffffee9
   13898:	b403      	push	{r0, r1}
   1389a:	4668      	mov	r0, sp
   1389c:	b501      	push	{r0, lr}
   1389e:	9802      	ldr	r0, [sp, #8]
   138a0:	f000 f886 	bl	139b0 <__udivmoddi4>
   138a4:	9b01      	ldr	r3, [sp, #4]
   138a6:	469e      	mov	lr, r3
   138a8:	b002      	add	sp, #8
   138aa:	bc0c      	pop	{r2, r3}
   138ac:	4770      	bx	lr
   138ae:	46c0      	nop			; (mov r8, r8)

000138b0 <__aeabi_lmul>:
   138b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   138b2:	46ce      	mov	lr, r9
   138b4:	4647      	mov	r7, r8
   138b6:	0415      	lsls	r5, r2, #16
   138b8:	0c2d      	lsrs	r5, r5, #16
   138ba:	002e      	movs	r6, r5
   138bc:	b580      	push	{r7, lr}
   138be:	0407      	lsls	r7, r0, #16
   138c0:	0c14      	lsrs	r4, r2, #16
   138c2:	0c3f      	lsrs	r7, r7, #16
   138c4:	4699      	mov	r9, r3
   138c6:	0c03      	lsrs	r3, r0, #16
   138c8:	437e      	muls	r6, r7
   138ca:	435d      	muls	r5, r3
   138cc:	4367      	muls	r7, r4
   138ce:	4363      	muls	r3, r4
   138d0:	197f      	adds	r7, r7, r5
   138d2:	0c34      	lsrs	r4, r6, #16
   138d4:	19e4      	adds	r4, r4, r7
   138d6:	469c      	mov	ip, r3
   138d8:	42a5      	cmp	r5, r4
   138da:	d903      	bls.n	138e4 <__aeabi_lmul+0x34>
   138dc:	2380      	movs	r3, #128	; 0x80
   138de:	025b      	lsls	r3, r3, #9
   138e0:	4698      	mov	r8, r3
   138e2:	44c4      	add	ip, r8
   138e4:	464b      	mov	r3, r9
   138e6:	4351      	muls	r1, r2
   138e8:	4343      	muls	r3, r0
   138ea:	0436      	lsls	r6, r6, #16
   138ec:	0c36      	lsrs	r6, r6, #16
   138ee:	0c25      	lsrs	r5, r4, #16
   138f0:	0424      	lsls	r4, r4, #16
   138f2:	4465      	add	r5, ip
   138f4:	19a4      	adds	r4, r4, r6
   138f6:	1859      	adds	r1, r3, r1
   138f8:	1949      	adds	r1, r1, r5
   138fa:	0020      	movs	r0, r4
   138fc:	bc0c      	pop	{r2, r3}
   138fe:	4690      	mov	r8, r2
   13900:	4699      	mov	r9, r3
   13902:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013904 <__aeabi_f2uiz>:
   13904:	219e      	movs	r1, #158	; 0x9e
   13906:	b510      	push	{r4, lr}
   13908:	05c9      	lsls	r1, r1, #23
   1390a:	1c04      	adds	r4, r0, #0
   1390c:	f7ff ffa6 	bl	1385c <__aeabi_fcmpge>
   13910:	2800      	cmp	r0, #0
   13912:	d103      	bne.n	1391c <__aeabi_f2uiz+0x18>
   13914:	1c20      	adds	r0, r4, #0
   13916:	f000 ff49 	bl	147ac <__aeabi_f2iz>
   1391a:	bd10      	pop	{r4, pc}
   1391c:	219e      	movs	r1, #158	; 0x9e
   1391e:	1c20      	adds	r0, r4, #0
   13920:	05c9      	lsls	r1, r1, #23
   13922:	f000 fda7 	bl	14474 <__aeabi_fsub>
   13926:	f000 ff41 	bl	147ac <__aeabi_f2iz>
   1392a:	2380      	movs	r3, #128	; 0x80
   1392c:	061b      	lsls	r3, r3, #24
   1392e:	469c      	mov	ip, r3
   13930:	4460      	add	r0, ip
   13932:	e7f2      	b.n	1391a <__aeabi_f2uiz+0x16>

00013934 <__aeabi_d2uiz>:
   13934:	b570      	push	{r4, r5, r6, lr}
   13936:	2200      	movs	r2, #0
   13938:	4b0c      	ldr	r3, [pc, #48]	; (1396c <__aeabi_d2uiz+0x38>)
   1393a:	0004      	movs	r4, r0
   1393c:	000d      	movs	r5, r1
   1393e:	f7ff ff53 	bl	137e8 <__aeabi_dcmpge>
   13942:	2800      	cmp	r0, #0
   13944:	d104      	bne.n	13950 <__aeabi_d2uiz+0x1c>
   13946:	0020      	movs	r0, r4
   13948:	0029      	movs	r1, r5
   1394a:	f002 fcbf 	bl	162cc <__aeabi_d2iz>
   1394e:	bd70      	pop	{r4, r5, r6, pc}
   13950:	4b06      	ldr	r3, [pc, #24]	; (1396c <__aeabi_d2uiz+0x38>)
   13952:	2200      	movs	r2, #0
   13954:	0020      	movs	r0, r4
   13956:	0029      	movs	r1, r5
   13958:	f002 f9a2 	bl	15ca0 <__aeabi_dsub>
   1395c:	f002 fcb6 	bl	162cc <__aeabi_d2iz>
   13960:	2380      	movs	r3, #128	; 0x80
   13962:	061b      	lsls	r3, r3, #24
   13964:	469c      	mov	ip, r3
   13966:	4460      	add	r0, ip
   13968:	e7f1      	b.n	1394e <__aeabi_d2uiz+0x1a>
   1396a:	46c0      	nop			; (mov r8, r8)
   1396c:	41e00000 	.word	0x41e00000

00013970 <__aeabi_f2ulz>:
   13970:	b570      	push	{r4, r5, r6, lr}
   13972:	f002 fd59 	bl	16428 <__aeabi_f2d>
   13976:	2200      	movs	r2, #0
   13978:	4b0b      	ldr	r3, [pc, #44]	; (139a8 <__aeabi_f2ulz+0x38>)
   1397a:	000d      	movs	r5, r1
   1397c:	0004      	movs	r4, r0
   1397e:	f001 ff0f 	bl	157a0 <__aeabi_dmul>
   13982:	f7ff ffd7 	bl	13934 <__aeabi_d2uiz>
   13986:	0006      	movs	r6, r0
   13988:	f002 fd16 	bl	163b8 <__aeabi_ui2d>
   1398c:	2200      	movs	r2, #0
   1398e:	4b07      	ldr	r3, [pc, #28]	; (139ac <__aeabi_f2ulz+0x3c>)
   13990:	f001 ff06 	bl	157a0 <__aeabi_dmul>
   13994:	0002      	movs	r2, r0
   13996:	000b      	movs	r3, r1
   13998:	0020      	movs	r0, r4
   1399a:	0029      	movs	r1, r5
   1399c:	f002 f980 	bl	15ca0 <__aeabi_dsub>
   139a0:	f7ff ffc8 	bl	13934 <__aeabi_d2uiz>
   139a4:	0031      	movs	r1, r6
   139a6:	bd70      	pop	{r4, r5, r6, pc}
   139a8:	3df00000 	.word	0x3df00000
   139ac:	41f00000 	.word	0x41f00000

000139b0 <__udivmoddi4>:
   139b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139b2:	4657      	mov	r7, sl
   139b4:	464e      	mov	r6, r9
   139b6:	4645      	mov	r5, r8
   139b8:	46de      	mov	lr, fp
   139ba:	b5e0      	push	{r5, r6, r7, lr}
   139bc:	0004      	movs	r4, r0
   139be:	b083      	sub	sp, #12
   139c0:	000d      	movs	r5, r1
   139c2:	4692      	mov	sl, r2
   139c4:	4699      	mov	r9, r3
   139c6:	428b      	cmp	r3, r1
   139c8:	d82f      	bhi.n	13a2a <__udivmoddi4+0x7a>
   139ca:	d02c      	beq.n	13a26 <__udivmoddi4+0x76>
   139cc:	4649      	mov	r1, r9
   139ce:	4650      	mov	r0, sl
   139d0:	f002 fe24 	bl	1661c <__clzdi2>
   139d4:	0029      	movs	r1, r5
   139d6:	0006      	movs	r6, r0
   139d8:	0020      	movs	r0, r4
   139da:	f002 fe1f 	bl	1661c <__clzdi2>
   139de:	1a33      	subs	r3, r6, r0
   139e0:	4698      	mov	r8, r3
   139e2:	3b20      	subs	r3, #32
   139e4:	469b      	mov	fp, r3
   139e6:	d500      	bpl.n	139ea <__udivmoddi4+0x3a>
   139e8:	e074      	b.n	13ad4 <__udivmoddi4+0x124>
   139ea:	4653      	mov	r3, sl
   139ec:	465a      	mov	r2, fp
   139ee:	4093      	lsls	r3, r2
   139f0:	001f      	movs	r7, r3
   139f2:	4653      	mov	r3, sl
   139f4:	4642      	mov	r2, r8
   139f6:	4093      	lsls	r3, r2
   139f8:	001e      	movs	r6, r3
   139fa:	42af      	cmp	r7, r5
   139fc:	d829      	bhi.n	13a52 <__udivmoddi4+0xa2>
   139fe:	d026      	beq.n	13a4e <__udivmoddi4+0x9e>
   13a00:	465b      	mov	r3, fp
   13a02:	1ba4      	subs	r4, r4, r6
   13a04:	41bd      	sbcs	r5, r7
   13a06:	2b00      	cmp	r3, #0
   13a08:	da00      	bge.n	13a0c <__udivmoddi4+0x5c>
   13a0a:	e079      	b.n	13b00 <__udivmoddi4+0x150>
   13a0c:	2200      	movs	r2, #0
   13a0e:	2300      	movs	r3, #0
   13a10:	9200      	str	r2, [sp, #0]
   13a12:	9301      	str	r3, [sp, #4]
   13a14:	2301      	movs	r3, #1
   13a16:	465a      	mov	r2, fp
   13a18:	4093      	lsls	r3, r2
   13a1a:	9301      	str	r3, [sp, #4]
   13a1c:	2301      	movs	r3, #1
   13a1e:	4642      	mov	r2, r8
   13a20:	4093      	lsls	r3, r2
   13a22:	9300      	str	r3, [sp, #0]
   13a24:	e019      	b.n	13a5a <__udivmoddi4+0xaa>
   13a26:	4282      	cmp	r2, r0
   13a28:	d9d0      	bls.n	139cc <__udivmoddi4+0x1c>
   13a2a:	2200      	movs	r2, #0
   13a2c:	2300      	movs	r3, #0
   13a2e:	9200      	str	r2, [sp, #0]
   13a30:	9301      	str	r3, [sp, #4]
   13a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13a34:	2b00      	cmp	r3, #0
   13a36:	d001      	beq.n	13a3c <__udivmoddi4+0x8c>
   13a38:	601c      	str	r4, [r3, #0]
   13a3a:	605d      	str	r5, [r3, #4]
   13a3c:	9800      	ldr	r0, [sp, #0]
   13a3e:	9901      	ldr	r1, [sp, #4]
   13a40:	b003      	add	sp, #12
   13a42:	bc3c      	pop	{r2, r3, r4, r5}
   13a44:	4690      	mov	r8, r2
   13a46:	4699      	mov	r9, r3
   13a48:	46a2      	mov	sl, r4
   13a4a:	46ab      	mov	fp, r5
   13a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a4e:	42a3      	cmp	r3, r4
   13a50:	d9d6      	bls.n	13a00 <__udivmoddi4+0x50>
   13a52:	2200      	movs	r2, #0
   13a54:	2300      	movs	r3, #0
   13a56:	9200      	str	r2, [sp, #0]
   13a58:	9301      	str	r3, [sp, #4]
   13a5a:	4643      	mov	r3, r8
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d0e8      	beq.n	13a32 <__udivmoddi4+0x82>
   13a60:	07fb      	lsls	r3, r7, #31
   13a62:	0872      	lsrs	r2, r6, #1
   13a64:	431a      	orrs	r2, r3
   13a66:	4646      	mov	r6, r8
   13a68:	087b      	lsrs	r3, r7, #1
   13a6a:	e00e      	b.n	13a8a <__udivmoddi4+0xda>
   13a6c:	42ab      	cmp	r3, r5
   13a6e:	d101      	bne.n	13a74 <__udivmoddi4+0xc4>
   13a70:	42a2      	cmp	r2, r4
   13a72:	d80c      	bhi.n	13a8e <__udivmoddi4+0xde>
   13a74:	1aa4      	subs	r4, r4, r2
   13a76:	419d      	sbcs	r5, r3
   13a78:	2001      	movs	r0, #1
   13a7a:	1924      	adds	r4, r4, r4
   13a7c:	416d      	adcs	r5, r5
   13a7e:	2100      	movs	r1, #0
   13a80:	3e01      	subs	r6, #1
   13a82:	1824      	adds	r4, r4, r0
   13a84:	414d      	adcs	r5, r1
   13a86:	2e00      	cmp	r6, #0
   13a88:	d006      	beq.n	13a98 <__udivmoddi4+0xe8>
   13a8a:	42ab      	cmp	r3, r5
   13a8c:	d9ee      	bls.n	13a6c <__udivmoddi4+0xbc>
   13a8e:	3e01      	subs	r6, #1
   13a90:	1924      	adds	r4, r4, r4
   13a92:	416d      	adcs	r5, r5
   13a94:	2e00      	cmp	r6, #0
   13a96:	d1f8      	bne.n	13a8a <__udivmoddi4+0xda>
   13a98:	465b      	mov	r3, fp
   13a9a:	9800      	ldr	r0, [sp, #0]
   13a9c:	9901      	ldr	r1, [sp, #4]
   13a9e:	1900      	adds	r0, r0, r4
   13aa0:	4169      	adcs	r1, r5
   13aa2:	2b00      	cmp	r3, #0
   13aa4:	db22      	blt.n	13aec <__udivmoddi4+0x13c>
   13aa6:	002b      	movs	r3, r5
   13aa8:	465a      	mov	r2, fp
   13aaa:	40d3      	lsrs	r3, r2
   13aac:	002a      	movs	r2, r5
   13aae:	4644      	mov	r4, r8
   13ab0:	40e2      	lsrs	r2, r4
   13ab2:	001c      	movs	r4, r3
   13ab4:	465b      	mov	r3, fp
   13ab6:	0015      	movs	r5, r2
   13ab8:	2b00      	cmp	r3, #0
   13aba:	db2c      	blt.n	13b16 <__udivmoddi4+0x166>
   13abc:	0026      	movs	r6, r4
   13abe:	409e      	lsls	r6, r3
   13ac0:	0033      	movs	r3, r6
   13ac2:	0026      	movs	r6, r4
   13ac4:	4647      	mov	r7, r8
   13ac6:	40be      	lsls	r6, r7
   13ac8:	0032      	movs	r2, r6
   13aca:	1a80      	subs	r0, r0, r2
   13acc:	4199      	sbcs	r1, r3
   13ace:	9000      	str	r0, [sp, #0]
   13ad0:	9101      	str	r1, [sp, #4]
   13ad2:	e7ae      	b.n	13a32 <__udivmoddi4+0x82>
   13ad4:	4642      	mov	r2, r8
   13ad6:	2320      	movs	r3, #32
   13ad8:	1a9b      	subs	r3, r3, r2
   13ada:	4652      	mov	r2, sl
   13adc:	40da      	lsrs	r2, r3
   13ade:	4641      	mov	r1, r8
   13ae0:	0013      	movs	r3, r2
   13ae2:	464a      	mov	r2, r9
   13ae4:	408a      	lsls	r2, r1
   13ae6:	0017      	movs	r7, r2
   13ae8:	431f      	orrs	r7, r3
   13aea:	e782      	b.n	139f2 <__udivmoddi4+0x42>
   13aec:	4642      	mov	r2, r8
   13aee:	2320      	movs	r3, #32
   13af0:	1a9b      	subs	r3, r3, r2
   13af2:	002a      	movs	r2, r5
   13af4:	4646      	mov	r6, r8
   13af6:	409a      	lsls	r2, r3
   13af8:	0023      	movs	r3, r4
   13afa:	40f3      	lsrs	r3, r6
   13afc:	4313      	orrs	r3, r2
   13afe:	e7d5      	b.n	13aac <__udivmoddi4+0xfc>
   13b00:	4642      	mov	r2, r8
   13b02:	2320      	movs	r3, #32
   13b04:	2100      	movs	r1, #0
   13b06:	1a9b      	subs	r3, r3, r2
   13b08:	2200      	movs	r2, #0
   13b0a:	9100      	str	r1, [sp, #0]
   13b0c:	9201      	str	r2, [sp, #4]
   13b0e:	2201      	movs	r2, #1
   13b10:	40da      	lsrs	r2, r3
   13b12:	9201      	str	r2, [sp, #4]
   13b14:	e782      	b.n	13a1c <__udivmoddi4+0x6c>
   13b16:	4642      	mov	r2, r8
   13b18:	2320      	movs	r3, #32
   13b1a:	0026      	movs	r6, r4
   13b1c:	1a9b      	subs	r3, r3, r2
   13b1e:	40de      	lsrs	r6, r3
   13b20:	002f      	movs	r7, r5
   13b22:	46b4      	mov	ip, r6
   13b24:	4097      	lsls	r7, r2
   13b26:	4666      	mov	r6, ip
   13b28:	003b      	movs	r3, r7
   13b2a:	4333      	orrs	r3, r6
   13b2c:	e7c9      	b.n	13ac2 <__udivmoddi4+0x112>
   13b2e:	46c0      	nop			; (mov r8, r8)

00013b30 <__aeabi_fadd>:
   13b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b32:	46c6      	mov	lr, r8
   13b34:	024e      	lsls	r6, r1, #9
   13b36:	0247      	lsls	r7, r0, #9
   13b38:	0a76      	lsrs	r6, r6, #9
   13b3a:	0a7b      	lsrs	r3, r7, #9
   13b3c:	0044      	lsls	r4, r0, #1
   13b3e:	0fc5      	lsrs	r5, r0, #31
   13b40:	00f7      	lsls	r7, r6, #3
   13b42:	0048      	lsls	r0, r1, #1
   13b44:	4698      	mov	r8, r3
   13b46:	b500      	push	{lr}
   13b48:	0e24      	lsrs	r4, r4, #24
   13b4a:	002a      	movs	r2, r5
   13b4c:	00db      	lsls	r3, r3, #3
   13b4e:	0e00      	lsrs	r0, r0, #24
   13b50:	0fc9      	lsrs	r1, r1, #31
   13b52:	46bc      	mov	ip, r7
   13b54:	428d      	cmp	r5, r1
   13b56:	d067      	beq.n	13c28 <__aeabi_fadd+0xf8>
   13b58:	1a22      	subs	r2, r4, r0
   13b5a:	2a00      	cmp	r2, #0
   13b5c:	dc00      	bgt.n	13b60 <__aeabi_fadd+0x30>
   13b5e:	e0a5      	b.n	13cac <__aeabi_fadd+0x17c>
   13b60:	2800      	cmp	r0, #0
   13b62:	d13a      	bne.n	13bda <__aeabi_fadd+0xaa>
   13b64:	2f00      	cmp	r7, #0
   13b66:	d100      	bne.n	13b6a <__aeabi_fadd+0x3a>
   13b68:	e093      	b.n	13c92 <__aeabi_fadd+0x162>
   13b6a:	1e51      	subs	r1, r2, #1
   13b6c:	2900      	cmp	r1, #0
   13b6e:	d000      	beq.n	13b72 <__aeabi_fadd+0x42>
   13b70:	e0bc      	b.n	13cec <__aeabi_fadd+0x1bc>
   13b72:	2401      	movs	r4, #1
   13b74:	1bdb      	subs	r3, r3, r7
   13b76:	015a      	lsls	r2, r3, #5
   13b78:	d546      	bpl.n	13c08 <__aeabi_fadd+0xd8>
   13b7a:	019b      	lsls	r3, r3, #6
   13b7c:	099e      	lsrs	r6, r3, #6
   13b7e:	0030      	movs	r0, r6
   13b80:	f002 fd2e 	bl	165e0 <__clzsi2>
   13b84:	3805      	subs	r0, #5
   13b86:	4086      	lsls	r6, r0
   13b88:	4284      	cmp	r4, r0
   13b8a:	dd00      	ble.n	13b8e <__aeabi_fadd+0x5e>
   13b8c:	e09d      	b.n	13cca <__aeabi_fadd+0x19a>
   13b8e:	1b04      	subs	r4, r0, r4
   13b90:	0032      	movs	r2, r6
   13b92:	2020      	movs	r0, #32
   13b94:	3401      	adds	r4, #1
   13b96:	40e2      	lsrs	r2, r4
   13b98:	1b04      	subs	r4, r0, r4
   13b9a:	40a6      	lsls	r6, r4
   13b9c:	0033      	movs	r3, r6
   13b9e:	1e5e      	subs	r6, r3, #1
   13ba0:	41b3      	sbcs	r3, r6
   13ba2:	2400      	movs	r4, #0
   13ba4:	4313      	orrs	r3, r2
   13ba6:	075a      	lsls	r2, r3, #29
   13ba8:	d004      	beq.n	13bb4 <__aeabi_fadd+0x84>
   13baa:	220f      	movs	r2, #15
   13bac:	401a      	ands	r2, r3
   13bae:	2a04      	cmp	r2, #4
   13bb0:	d000      	beq.n	13bb4 <__aeabi_fadd+0x84>
   13bb2:	3304      	adds	r3, #4
   13bb4:	015a      	lsls	r2, r3, #5
   13bb6:	d529      	bpl.n	13c0c <__aeabi_fadd+0xdc>
   13bb8:	3401      	adds	r4, #1
   13bba:	2cff      	cmp	r4, #255	; 0xff
   13bbc:	d100      	bne.n	13bc0 <__aeabi_fadd+0x90>
   13bbe:	e081      	b.n	13cc4 <__aeabi_fadd+0x194>
   13bc0:	002a      	movs	r2, r5
   13bc2:	019b      	lsls	r3, r3, #6
   13bc4:	0a5b      	lsrs	r3, r3, #9
   13bc6:	b2e4      	uxtb	r4, r4
   13bc8:	025b      	lsls	r3, r3, #9
   13bca:	05e4      	lsls	r4, r4, #23
   13bcc:	0a58      	lsrs	r0, r3, #9
   13bce:	07d2      	lsls	r2, r2, #31
   13bd0:	4320      	orrs	r0, r4
   13bd2:	4310      	orrs	r0, r2
   13bd4:	bc04      	pop	{r2}
   13bd6:	4690      	mov	r8, r2
   13bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bda:	2cff      	cmp	r4, #255	; 0xff
   13bdc:	d0e3      	beq.n	13ba6 <__aeabi_fadd+0x76>
   13bde:	2180      	movs	r1, #128	; 0x80
   13be0:	0038      	movs	r0, r7
   13be2:	04c9      	lsls	r1, r1, #19
   13be4:	4308      	orrs	r0, r1
   13be6:	4684      	mov	ip, r0
   13be8:	2a1b      	cmp	r2, #27
   13bea:	dd00      	ble.n	13bee <__aeabi_fadd+0xbe>
   13bec:	e082      	b.n	13cf4 <__aeabi_fadd+0x1c4>
   13bee:	2020      	movs	r0, #32
   13bf0:	4661      	mov	r1, ip
   13bf2:	40d1      	lsrs	r1, r2
   13bf4:	1a82      	subs	r2, r0, r2
   13bf6:	4660      	mov	r0, ip
   13bf8:	4090      	lsls	r0, r2
   13bfa:	0002      	movs	r2, r0
   13bfc:	1e50      	subs	r0, r2, #1
   13bfe:	4182      	sbcs	r2, r0
   13c00:	430a      	orrs	r2, r1
   13c02:	1a9b      	subs	r3, r3, r2
   13c04:	015a      	lsls	r2, r3, #5
   13c06:	d4b8      	bmi.n	13b7a <__aeabi_fadd+0x4a>
   13c08:	075a      	lsls	r2, r3, #29
   13c0a:	d1ce      	bne.n	13baa <__aeabi_fadd+0x7a>
   13c0c:	08de      	lsrs	r6, r3, #3
   13c0e:	002a      	movs	r2, r5
   13c10:	2cff      	cmp	r4, #255	; 0xff
   13c12:	d13a      	bne.n	13c8a <__aeabi_fadd+0x15a>
   13c14:	2e00      	cmp	r6, #0
   13c16:	d100      	bne.n	13c1a <__aeabi_fadd+0xea>
   13c18:	e0ae      	b.n	13d78 <__aeabi_fadd+0x248>
   13c1a:	2380      	movs	r3, #128	; 0x80
   13c1c:	03db      	lsls	r3, r3, #15
   13c1e:	4333      	orrs	r3, r6
   13c20:	025b      	lsls	r3, r3, #9
   13c22:	0a5b      	lsrs	r3, r3, #9
   13c24:	24ff      	movs	r4, #255	; 0xff
   13c26:	e7cf      	b.n	13bc8 <__aeabi_fadd+0x98>
   13c28:	1a21      	subs	r1, r4, r0
   13c2a:	2900      	cmp	r1, #0
   13c2c:	dd52      	ble.n	13cd4 <__aeabi_fadd+0x1a4>
   13c2e:	2800      	cmp	r0, #0
   13c30:	d031      	beq.n	13c96 <__aeabi_fadd+0x166>
   13c32:	2cff      	cmp	r4, #255	; 0xff
   13c34:	d0b7      	beq.n	13ba6 <__aeabi_fadd+0x76>
   13c36:	2080      	movs	r0, #128	; 0x80
   13c38:	003e      	movs	r6, r7
   13c3a:	04c0      	lsls	r0, r0, #19
   13c3c:	4306      	orrs	r6, r0
   13c3e:	46b4      	mov	ip, r6
   13c40:	291b      	cmp	r1, #27
   13c42:	dd00      	ble.n	13c46 <__aeabi_fadd+0x116>
   13c44:	e0aa      	b.n	13d9c <__aeabi_fadd+0x26c>
   13c46:	2620      	movs	r6, #32
   13c48:	4660      	mov	r0, ip
   13c4a:	40c8      	lsrs	r0, r1
   13c4c:	1a71      	subs	r1, r6, r1
   13c4e:	4666      	mov	r6, ip
   13c50:	408e      	lsls	r6, r1
   13c52:	0031      	movs	r1, r6
   13c54:	1e4e      	subs	r6, r1, #1
   13c56:	41b1      	sbcs	r1, r6
   13c58:	4301      	orrs	r1, r0
   13c5a:	185b      	adds	r3, r3, r1
   13c5c:	0159      	lsls	r1, r3, #5
   13c5e:	d5d3      	bpl.n	13c08 <__aeabi_fadd+0xd8>
   13c60:	3401      	adds	r4, #1
   13c62:	2cff      	cmp	r4, #255	; 0xff
   13c64:	d100      	bne.n	13c68 <__aeabi_fadd+0x138>
   13c66:	e087      	b.n	13d78 <__aeabi_fadd+0x248>
   13c68:	2201      	movs	r2, #1
   13c6a:	4978      	ldr	r1, [pc, #480]	; (13e4c <__aeabi_fadd+0x31c>)
   13c6c:	401a      	ands	r2, r3
   13c6e:	085b      	lsrs	r3, r3, #1
   13c70:	400b      	ands	r3, r1
   13c72:	4313      	orrs	r3, r2
   13c74:	e797      	b.n	13ba6 <__aeabi_fadd+0x76>
   13c76:	2c00      	cmp	r4, #0
   13c78:	d000      	beq.n	13c7c <__aeabi_fadd+0x14c>
   13c7a:	e0a7      	b.n	13dcc <__aeabi_fadd+0x29c>
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d000      	beq.n	13c82 <__aeabi_fadd+0x152>
   13c80:	e0b6      	b.n	13df0 <__aeabi_fadd+0x2c0>
   13c82:	1e3b      	subs	r3, r7, #0
   13c84:	d162      	bne.n	13d4c <__aeabi_fadd+0x21c>
   13c86:	2600      	movs	r6, #0
   13c88:	2200      	movs	r2, #0
   13c8a:	0273      	lsls	r3, r6, #9
   13c8c:	0a5b      	lsrs	r3, r3, #9
   13c8e:	b2e4      	uxtb	r4, r4
   13c90:	e79a      	b.n	13bc8 <__aeabi_fadd+0x98>
   13c92:	0014      	movs	r4, r2
   13c94:	e787      	b.n	13ba6 <__aeabi_fadd+0x76>
   13c96:	2f00      	cmp	r7, #0
   13c98:	d04d      	beq.n	13d36 <__aeabi_fadd+0x206>
   13c9a:	1e48      	subs	r0, r1, #1
   13c9c:	2800      	cmp	r0, #0
   13c9e:	d157      	bne.n	13d50 <__aeabi_fadd+0x220>
   13ca0:	4463      	add	r3, ip
   13ca2:	2401      	movs	r4, #1
   13ca4:	015a      	lsls	r2, r3, #5
   13ca6:	d5af      	bpl.n	13c08 <__aeabi_fadd+0xd8>
   13ca8:	2402      	movs	r4, #2
   13caa:	e7dd      	b.n	13c68 <__aeabi_fadd+0x138>
   13cac:	2a00      	cmp	r2, #0
   13cae:	d124      	bne.n	13cfa <__aeabi_fadd+0x1ca>
   13cb0:	1c62      	adds	r2, r4, #1
   13cb2:	b2d2      	uxtb	r2, r2
   13cb4:	2a01      	cmp	r2, #1
   13cb6:	ddde      	ble.n	13c76 <__aeabi_fadd+0x146>
   13cb8:	1bde      	subs	r6, r3, r7
   13cba:	0172      	lsls	r2, r6, #5
   13cbc:	d535      	bpl.n	13d2a <__aeabi_fadd+0x1fa>
   13cbe:	1afe      	subs	r6, r7, r3
   13cc0:	000d      	movs	r5, r1
   13cc2:	e75c      	b.n	13b7e <__aeabi_fadd+0x4e>
   13cc4:	002a      	movs	r2, r5
   13cc6:	2300      	movs	r3, #0
   13cc8:	e77e      	b.n	13bc8 <__aeabi_fadd+0x98>
   13cca:	0033      	movs	r3, r6
   13ccc:	4a60      	ldr	r2, [pc, #384]	; (13e50 <__aeabi_fadd+0x320>)
   13cce:	1a24      	subs	r4, r4, r0
   13cd0:	4013      	ands	r3, r2
   13cd2:	e768      	b.n	13ba6 <__aeabi_fadd+0x76>
   13cd4:	2900      	cmp	r1, #0
   13cd6:	d163      	bne.n	13da0 <__aeabi_fadd+0x270>
   13cd8:	1c61      	adds	r1, r4, #1
   13cda:	b2c8      	uxtb	r0, r1
   13cdc:	2801      	cmp	r0, #1
   13cde:	dd4e      	ble.n	13d7e <__aeabi_fadd+0x24e>
   13ce0:	29ff      	cmp	r1, #255	; 0xff
   13ce2:	d049      	beq.n	13d78 <__aeabi_fadd+0x248>
   13ce4:	4463      	add	r3, ip
   13ce6:	085b      	lsrs	r3, r3, #1
   13ce8:	000c      	movs	r4, r1
   13cea:	e75c      	b.n	13ba6 <__aeabi_fadd+0x76>
   13cec:	2aff      	cmp	r2, #255	; 0xff
   13cee:	d041      	beq.n	13d74 <__aeabi_fadd+0x244>
   13cf0:	000a      	movs	r2, r1
   13cf2:	e779      	b.n	13be8 <__aeabi_fadd+0xb8>
   13cf4:	2201      	movs	r2, #1
   13cf6:	1a9b      	subs	r3, r3, r2
   13cf8:	e784      	b.n	13c04 <__aeabi_fadd+0xd4>
   13cfa:	2c00      	cmp	r4, #0
   13cfc:	d01d      	beq.n	13d3a <__aeabi_fadd+0x20a>
   13cfe:	28ff      	cmp	r0, #255	; 0xff
   13d00:	d022      	beq.n	13d48 <__aeabi_fadd+0x218>
   13d02:	2480      	movs	r4, #128	; 0x80
   13d04:	04e4      	lsls	r4, r4, #19
   13d06:	4252      	negs	r2, r2
   13d08:	4323      	orrs	r3, r4
   13d0a:	2a1b      	cmp	r2, #27
   13d0c:	dd00      	ble.n	13d10 <__aeabi_fadd+0x1e0>
   13d0e:	e08a      	b.n	13e26 <__aeabi_fadd+0x2f6>
   13d10:	001c      	movs	r4, r3
   13d12:	2520      	movs	r5, #32
   13d14:	40d4      	lsrs	r4, r2
   13d16:	1aaa      	subs	r2, r5, r2
   13d18:	4093      	lsls	r3, r2
   13d1a:	1e5a      	subs	r2, r3, #1
   13d1c:	4193      	sbcs	r3, r2
   13d1e:	4323      	orrs	r3, r4
   13d20:	4662      	mov	r2, ip
   13d22:	0004      	movs	r4, r0
   13d24:	1ad3      	subs	r3, r2, r3
   13d26:	000d      	movs	r5, r1
   13d28:	e725      	b.n	13b76 <__aeabi_fadd+0x46>
   13d2a:	2e00      	cmp	r6, #0
   13d2c:	d000      	beq.n	13d30 <__aeabi_fadd+0x200>
   13d2e:	e726      	b.n	13b7e <__aeabi_fadd+0x4e>
   13d30:	2200      	movs	r2, #0
   13d32:	2400      	movs	r4, #0
   13d34:	e7a9      	b.n	13c8a <__aeabi_fadd+0x15a>
   13d36:	000c      	movs	r4, r1
   13d38:	e735      	b.n	13ba6 <__aeabi_fadd+0x76>
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d04d      	beq.n	13dda <__aeabi_fadd+0x2aa>
   13d3e:	43d2      	mvns	r2, r2
   13d40:	2a00      	cmp	r2, #0
   13d42:	d0ed      	beq.n	13d20 <__aeabi_fadd+0x1f0>
   13d44:	28ff      	cmp	r0, #255	; 0xff
   13d46:	d1e0      	bne.n	13d0a <__aeabi_fadd+0x1da>
   13d48:	4663      	mov	r3, ip
   13d4a:	24ff      	movs	r4, #255	; 0xff
   13d4c:	000d      	movs	r5, r1
   13d4e:	e72a      	b.n	13ba6 <__aeabi_fadd+0x76>
   13d50:	29ff      	cmp	r1, #255	; 0xff
   13d52:	d00f      	beq.n	13d74 <__aeabi_fadd+0x244>
   13d54:	0001      	movs	r1, r0
   13d56:	e773      	b.n	13c40 <__aeabi_fadd+0x110>
   13d58:	2b00      	cmp	r3, #0
   13d5a:	d061      	beq.n	13e20 <__aeabi_fadd+0x2f0>
   13d5c:	24ff      	movs	r4, #255	; 0xff
   13d5e:	2f00      	cmp	r7, #0
   13d60:	d100      	bne.n	13d64 <__aeabi_fadd+0x234>
   13d62:	e720      	b.n	13ba6 <__aeabi_fadd+0x76>
   13d64:	2280      	movs	r2, #128	; 0x80
   13d66:	4641      	mov	r1, r8
   13d68:	03d2      	lsls	r2, r2, #15
   13d6a:	4211      	tst	r1, r2
   13d6c:	d002      	beq.n	13d74 <__aeabi_fadd+0x244>
   13d6e:	4216      	tst	r6, r2
   13d70:	d100      	bne.n	13d74 <__aeabi_fadd+0x244>
   13d72:	003b      	movs	r3, r7
   13d74:	24ff      	movs	r4, #255	; 0xff
   13d76:	e716      	b.n	13ba6 <__aeabi_fadd+0x76>
   13d78:	24ff      	movs	r4, #255	; 0xff
   13d7a:	2300      	movs	r3, #0
   13d7c:	e724      	b.n	13bc8 <__aeabi_fadd+0x98>
   13d7e:	2c00      	cmp	r4, #0
   13d80:	d1ea      	bne.n	13d58 <__aeabi_fadd+0x228>
   13d82:	2b00      	cmp	r3, #0
   13d84:	d058      	beq.n	13e38 <__aeabi_fadd+0x308>
   13d86:	2f00      	cmp	r7, #0
   13d88:	d100      	bne.n	13d8c <__aeabi_fadd+0x25c>
   13d8a:	e70c      	b.n	13ba6 <__aeabi_fadd+0x76>
   13d8c:	4463      	add	r3, ip
   13d8e:	015a      	lsls	r2, r3, #5
   13d90:	d400      	bmi.n	13d94 <__aeabi_fadd+0x264>
   13d92:	e739      	b.n	13c08 <__aeabi_fadd+0xd8>
   13d94:	4a2e      	ldr	r2, [pc, #184]	; (13e50 <__aeabi_fadd+0x320>)
   13d96:	000c      	movs	r4, r1
   13d98:	4013      	ands	r3, r2
   13d9a:	e704      	b.n	13ba6 <__aeabi_fadd+0x76>
   13d9c:	2101      	movs	r1, #1
   13d9e:	e75c      	b.n	13c5a <__aeabi_fadd+0x12a>
   13da0:	2c00      	cmp	r4, #0
   13da2:	d11e      	bne.n	13de2 <__aeabi_fadd+0x2b2>
   13da4:	2b00      	cmp	r3, #0
   13da6:	d040      	beq.n	13e2a <__aeabi_fadd+0x2fa>
   13da8:	43c9      	mvns	r1, r1
   13daa:	2900      	cmp	r1, #0
   13dac:	d00b      	beq.n	13dc6 <__aeabi_fadd+0x296>
   13dae:	28ff      	cmp	r0, #255	; 0xff
   13db0:	d036      	beq.n	13e20 <__aeabi_fadd+0x2f0>
   13db2:	291b      	cmp	r1, #27
   13db4:	dc47      	bgt.n	13e46 <__aeabi_fadd+0x316>
   13db6:	001c      	movs	r4, r3
   13db8:	2620      	movs	r6, #32
   13dba:	40cc      	lsrs	r4, r1
   13dbc:	1a71      	subs	r1, r6, r1
   13dbe:	408b      	lsls	r3, r1
   13dc0:	1e59      	subs	r1, r3, #1
   13dc2:	418b      	sbcs	r3, r1
   13dc4:	4323      	orrs	r3, r4
   13dc6:	4463      	add	r3, ip
   13dc8:	0004      	movs	r4, r0
   13dca:	e747      	b.n	13c5c <__aeabi_fadd+0x12c>
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d118      	bne.n	13e02 <__aeabi_fadd+0x2d2>
   13dd0:	1e3b      	subs	r3, r7, #0
   13dd2:	d02d      	beq.n	13e30 <__aeabi_fadd+0x300>
   13dd4:	000d      	movs	r5, r1
   13dd6:	24ff      	movs	r4, #255	; 0xff
   13dd8:	e6e5      	b.n	13ba6 <__aeabi_fadd+0x76>
   13dda:	003b      	movs	r3, r7
   13ddc:	0004      	movs	r4, r0
   13dde:	000d      	movs	r5, r1
   13de0:	e6e1      	b.n	13ba6 <__aeabi_fadd+0x76>
   13de2:	28ff      	cmp	r0, #255	; 0xff
   13de4:	d01c      	beq.n	13e20 <__aeabi_fadd+0x2f0>
   13de6:	2480      	movs	r4, #128	; 0x80
   13de8:	04e4      	lsls	r4, r4, #19
   13dea:	4249      	negs	r1, r1
   13dec:	4323      	orrs	r3, r4
   13dee:	e7e0      	b.n	13db2 <__aeabi_fadd+0x282>
   13df0:	2f00      	cmp	r7, #0
   13df2:	d100      	bne.n	13df6 <__aeabi_fadd+0x2c6>
   13df4:	e6d7      	b.n	13ba6 <__aeabi_fadd+0x76>
   13df6:	1bde      	subs	r6, r3, r7
   13df8:	0172      	lsls	r2, r6, #5
   13dfa:	d51f      	bpl.n	13e3c <__aeabi_fadd+0x30c>
   13dfc:	1afb      	subs	r3, r7, r3
   13dfe:	000d      	movs	r5, r1
   13e00:	e6d1      	b.n	13ba6 <__aeabi_fadd+0x76>
   13e02:	24ff      	movs	r4, #255	; 0xff
   13e04:	2f00      	cmp	r7, #0
   13e06:	d100      	bne.n	13e0a <__aeabi_fadd+0x2da>
   13e08:	e6cd      	b.n	13ba6 <__aeabi_fadd+0x76>
   13e0a:	2280      	movs	r2, #128	; 0x80
   13e0c:	4640      	mov	r0, r8
   13e0e:	03d2      	lsls	r2, r2, #15
   13e10:	4210      	tst	r0, r2
   13e12:	d0af      	beq.n	13d74 <__aeabi_fadd+0x244>
   13e14:	4216      	tst	r6, r2
   13e16:	d1ad      	bne.n	13d74 <__aeabi_fadd+0x244>
   13e18:	003b      	movs	r3, r7
   13e1a:	000d      	movs	r5, r1
   13e1c:	24ff      	movs	r4, #255	; 0xff
   13e1e:	e6c2      	b.n	13ba6 <__aeabi_fadd+0x76>
   13e20:	4663      	mov	r3, ip
   13e22:	24ff      	movs	r4, #255	; 0xff
   13e24:	e6bf      	b.n	13ba6 <__aeabi_fadd+0x76>
   13e26:	2301      	movs	r3, #1
   13e28:	e77a      	b.n	13d20 <__aeabi_fadd+0x1f0>
   13e2a:	003b      	movs	r3, r7
   13e2c:	0004      	movs	r4, r0
   13e2e:	e6ba      	b.n	13ba6 <__aeabi_fadd+0x76>
   13e30:	2680      	movs	r6, #128	; 0x80
   13e32:	2200      	movs	r2, #0
   13e34:	03f6      	lsls	r6, r6, #15
   13e36:	e6f0      	b.n	13c1a <__aeabi_fadd+0xea>
   13e38:	003b      	movs	r3, r7
   13e3a:	e6b4      	b.n	13ba6 <__aeabi_fadd+0x76>
   13e3c:	1e33      	subs	r3, r6, #0
   13e3e:	d000      	beq.n	13e42 <__aeabi_fadd+0x312>
   13e40:	e6e2      	b.n	13c08 <__aeabi_fadd+0xd8>
   13e42:	2200      	movs	r2, #0
   13e44:	e721      	b.n	13c8a <__aeabi_fadd+0x15a>
   13e46:	2301      	movs	r3, #1
   13e48:	e7bd      	b.n	13dc6 <__aeabi_fadd+0x296>
   13e4a:	46c0      	nop			; (mov r8, r8)
   13e4c:	7dffffff 	.word	0x7dffffff
   13e50:	fbffffff 	.word	0xfbffffff

00013e54 <__aeabi_fdiv>:
   13e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e56:	4657      	mov	r7, sl
   13e58:	464e      	mov	r6, r9
   13e5a:	46de      	mov	lr, fp
   13e5c:	4645      	mov	r5, r8
   13e5e:	b5e0      	push	{r5, r6, r7, lr}
   13e60:	0244      	lsls	r4, r0, #9
   13e62:	0043      	lsls	r3, r0, #1
   13e64:	0fc6      	lsrs	r6, r0, #31
   13e66:	b083      	sub	sp, #12
   13e68:	1c0f      	adds	r7, r1, #0
   13e6a:	0a64      	lsrs	r4, r4, #9
   13e6c:	0e1b      	lsrs	r3, r3, #24
   13e6e:	46b2      	mov	sl, r6
   13e70:	d053      	beq.n	13f1a <__aeabi_fdiv+0xc6>
   13e72:	2bff      	cmp	r3, #255	; 0xff
   13e74:	d027      	beq.n	13ec6 <__aeabi_fdiv+0x72>
   13e76:	2280      	movs	r2, #128	; 0x80
   13e78:	00e4      	lsls	r4, r4, #3
   13e7a:	04d2      	lsls	r2, r2, #19
   13e7c:	4314      	orrs	r4, r2
   13e7e:	227f      	movs	r2, #127	; 0x7f
   13e80:	4252      	negs	r2, r2
   13e82:	4690      	mov	r8, r2
   13e84:	4498      	add	r8, r3
   13e86:	2300      	movs	r3, #0
   13e88:	4699      	mov	r9, r3
   13e8a:	469b      	mov	fp, r3
   13e8c:	027d      	lsls	r5, r7, #9
   13e8e:	0078      	lsls	r0, r7, #1
   13e90:	0ffb      	lsrs	r3, r7, #31
   13e92:	0a6d      	lsrs	r5, r5, #9
   13e94:	0e00      	lsrs	r0, r0, #24
   13e96:	9300      	str	r3, [sp, #0]
   13e98:	d024      	beq.n	13ee4 <__aeabi_fdiv+0x90>
   13e9a:	28ff      	cmp	r0, #255	; 0xff
   13e9c:	d046      	beq.n	13f2c <__aeabi_fdiv+0xd8>
   13e9e:	2380      	movs	r3, #128	; 0x80
   13ea0:	2100      	movs	r1, #0
   13ea2:	00ed      	lsls	r5, r5, #3
   13ea4:	04db      	lsls	r3, r3, #19
   13ea6:	431d      	orrs	r5, r3
   13ea8:	387f      	subs	r0, #127	; 0x7f
   13eaa:	4647      	mov	r7, r8
   13eac:	1a38      	subs	r0, r7, r0
   13eae:	464f      	mov	r7, r9
   13eb0:	430f      	orrs	r7, r1
   13eb2:	00bf      	lsls	r7, r7, #2
   13eb4:	46b9      	mov	r9, r7
   13eb6:	0033      	movs	r3, r6
   13eb8:	9a00      	ldr	r2, [sp, #0]
   13eba:	4f87      	ldr	r7, [pc, #540]	; (140d8 <__aeabi_fdiv+0x284>)
   13ebc:	4053      	eors	r3, r2
   13ebe:	464a      	mov	r2, r9
   13ec0:	58ba      	ldr	r2, [r7, r2]
   13ec2:	9301      	str	r3, [sp, #4]
   13ec4:	4697      	mov	pc, r2
   13ec6:	2c00      	cmp	r4, #0
   13ec8:	d14e      	bne.n	13f68 <__aeabi_fdiv+0x114>
   13eca:	2308      	movs	r3, #8
   13ecc:	4699      	mov	r9, r3
   13ece:	33f7      	adds	r3, #247	; 0xf7
   13ed0:	4698      	mov	r8, r3
   13ed2:	3bfd      	subs	r3, #253	; 0xfd
   13ed4:	469b      	mov	fp, r3
   13ed6:	027d      	lsls	r5, r7, #9
   13ed8:	0078      	lsls	r0, r7, #1
   13eda:	0ffb      	lsrs	r3, r7, #31
   13edc:	0a6d      	lsrs	r5, r5, #9
   13ede:	0e00      	lsrs	r0, r0, #24
   13ee0:	9300      	str	r3, [sp, #0]
   13ee2:	d1da      	bne.n	13e9a <__aeabi_fdiv+0x46>
   13ee4:	2d00      	cmp	r5, #0
   13ee6:	d126      	bne.n	13f36 <__aeabi_fdiv+0xe2>
   13ee8:	2000      	movs	r0, #0
   13eea:	2101      	movs	r1, #1
   13eec:	0033      	movs	r3, r6
   13eee:	9a00      	ldr	r2, [sp, #0]
   13ef0:	4f7a      	ldr	r7, [pc, #488]	; (140dc <__aeabi_fdiv+0x288>)
   13ef2:	4053      	eors	r3, r2
   13ef4:	4642      	mov	r2, r8
   13ef6:	1a10      	subs	r0, r2, r0
   13ef8:	464a      	mov	r2, r9
   13efa:	430a      	orrs	r2, r1
   13efc:	0092      	lsls	r2, r2, #2
   13efe:	58ba      	ldr	r2, [r7, r2]
   13f00:	001d      	movs	r5, r3
   13f02:	4697      	mov	pc, r2
   13f04:	9b00      	ldr	r3, [sp, #0]
   13f06:	002c      	movs	r4, r5
   13f08:	469a      	mov	sl, r3
   13f0a:	468b      	mov	fp, r1
   13f0c:	465b      	mov	r3, fp
   13f0e:	2b02      	cmp	r3, #2
   13f10:	d131      	bne.n	13f76 <__aeabi_fdiv+0x122>
   13f12:	4653      	mov	r3, sl
   13f14:	21ff      	movs	r1, #255	; 0xff
   13f16:	2400      	movs	r4, #0
   13f18:	e038      	b.n	13f8c <__aeabi_fdiv+0x138>
   13f1a:	2c00      	cmp	r4, #0
   13f1c:	d117      	bne.n	13f4e <__aeabi_fdiv+0xfa>
   13f1e:	2304      	movs	r3, #4
   13f20:	4699      	mov	r9, r3
   13f22:	2300      	movs	r3, #0
   13f24:	4698      	mov	r8, r3
   13f26:	3301      	adds	r3, #1
   13f28:	469b      	mov	fp, r3
   13f2a:	e7af      	b.n	13e8c <__aeabi_fdiv+0x38>
   13f2c:	20ff      	movs	r0, #255	; 0xff
   13f2e:	2d00      	cmp	r5, #0
   13f30:	d10b      	bne.n	13f4a <__aeabi_fdiv+0xf6>
   13f32:	2102      	movs	r1, #2
   13f34:	e7da      	b.n	13eec <__aeabi_fdiv+0x98>
   13f36:	0028      	movs	r0, r5
   13f38:	f002 fb52 	bl	165e0 <__clzsi2>
   13f3c:	1f43      	subs	r3, r0, #5
   13f3e:	409d      	lsls	r5, r3
   13f40:	2376      	movs	r3, #118	; 0x76
   13f42:	425b      	negs	r3, r3
   13f44:	1a18      	subs	r0, r3, r0
   13f46:	2100      	movs	r1, #0
   13f48:	e7af      	b.n	13eaa <__aeabi_fdiv+0x56>
   13f4a:	2103      	movs	r1, #3
   13f4c:	e7ad      	b.n	13eaa <__aeabi_fdiv+0x56>
   13f4e:	0020      	movs	r0, r4
   13f50:	f002 fb46 	bl	165e0 <__clzsi2>
   13f54:	1f43      	subs	r3, r0, #5
   13f56:	409c      	lsls	r4, r3
   13f58:	2376      	movs	r3, #118	; 0x76
   13f5a:	425b      	negs	r3, r3
   13f5c:	1a1b      	subs	r3, r3, r0
   13f5e:	4698      	mov	r8, r3
   13f60:	2300      	movs	r3, #0
   13f62:	4699      	mov	r9, r3
   13f64:	469b      	mov	fp, r3
   13f66:	e791      	b.n	13e8c <__aeabi_fdiv+0x38>
   13f68:	230c      	movs	r3, #12
   13f6a:	4699      	mov	r9, r3
   13f6c:	33f3      	adds	r3, #243	; 0xf3
   13f6e:	4698      	mov	r8, r3
   13f70:	3bfc      	subs	r3, #252	; 0xfc
   13f72:	469b      	mov	fp, r3
   13f74:	e78a      	b.n	13e8c <__aeabi_fdiv+0x38>
   13f76:	2b03      	cmp	r3, #3
   13f78:	d100      	bne.n	13f7c <__aeabi_fdiv+0x128>
   13f7a:	e0a5      	b.n	140c8 <__aeabi_fdiv+0x274>
   13f7c:	4655      	mov	r5, sl
   13f7e:	2b01      	cmp	r3, #1
   13f80:	d000      	beq.n	13f84 <__aeabi_fdiv+0x130>
   13f82:	e081      	b.n	14088 <__aeabi_fdiv+0x234>
   13f84:	2301      	movs	r3, #1
   13f86:	2100      	movs	r1, #0
   13f88:	2400      	movs	r4, #0
   13f8a:	402b      	ands	r3, r5
   13f8c:	0264      	lsls	r4, r4, #9
   13f8e:	05c9      	lsls	r1, r1, #23
   13f90:	0a60      	lsrs	r0, r4, #9
   13f92:	07db      	lsls	r3, r3, #31
   13f94:	4308      	orrs	r0, r1
   13f96:	4318      	orrs	r0, r3
   13f98:	b003      	add	sp, #12
   13f9a:	bc3c      	pop	{r2, r3, r4, r5}
   13f9c:	4690      	mov	r8, r2
   13f9e:	4699      	mov	r9, r3
   13fa0:	46a2      	mov	sl, r4
   13fa2:	46ab      	mov	fp, r5
   13fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13fa6:	2480      	movs	r4, #128	; 0x80
   13fa8:	2300      	movs	r3, #0
   13faa:	03e4      	lsls	r4, r4, #15
   13fac:	21ff      	movs	r1, #255	; 0xff
   13fae:	e7ed      	b.n	13f8c <__aeabi_fdiv+0x138>
   13fb0:	21ff      	movs	r1, #255	; 0xff
   13fb2:	2400      	movs	r4, #0
   13fb4:	e7ea      	b.n	13f8c <__aeabi_fdiv+0x138>
   13fb6:	2301      	movs	r3, #1
   13fb8:	1a59      	subs	r1, r3, r1
   13fba:	291b      	cmp	r1, #27
   13fbc:	dd66      	ble.n	1408c <__aeabi_fdiv+0x238>
   13fbe:	9a01      	ldr	r2, [sp, #4]
   13fc0:	4013      	ands	r3, r2
   13fc2:	2100      	movs	r1, #0
   13fc4:	2400      	movs	r4, #0
   13fc6:	e7e1      	b.n	13f8c <__aeabi_fdiv+0x138>
   13fc8:	2380      	movs	r3, #128	; 0x80
   13fca:	03db      	lsls	r3, r3, #15
   13fcc:	421c      	tst	r4, r3
   13fce:	d038      	beq.n	14042 <__aeabi_fdiv+0x1ee>
   13fd0:	421d      	tst	r5, r3
   13fd2:	d051      	beq.n	14078 <__aeabi_fdiv+0x224>
   13fd4:	431c      	orrs	r4, r3
   13fd6:	0264      	lsls	r4, r4, #9
   13fd8:	0a64      	lsrs	r4, r4, #9
   13fda:	0033      	movs	r3, r6
   13fdc:	21ff      	movs	r1, #255	; 0xff
   13fde:	e7d5      	b.n	13f8c <__aeabi_fdiv+0x138>
   13fe0:	0163      	lsls	r3, r4, #5
   13fe2:	016c      	lsls	r4, r5, #5
   13fe4:	42a3      	cmp	r3, r4
   13fe6:	d23b      	bcs.n	14060 <__aeabi_fdiv+0x20c>
   13fe8:	261b      	movs	r6, #27
   13fea:	2100      	movs	r1, #0
   13fec:	3801      	subs	r0, #1
   13fee:	2501      	movs	r5, #1
   13ff0:	001f      	movs	r7, r3
   13ff2:	0049      	lsls	r1, r1, #1
   13ff4:	005b      	lsls	r3, r3, #1
   13ff6:	2f00      	cmp	r7, #0
   13ff8:	db01      	blt.n	13ffe <__aeabi_fdiv+0x1aa>
   13ffa:	429c      	cmp	r4, r3
   13ffc:	d801      	bhi.n	14002 <__aeabi_fdiv+0x1ae>
   13ffe:	1b1b      	subs	r3, r3, r4
   14000:	4329      	orrs	r1, r5
   14002:	3e01      	subs	r6, #1
   14004:	2e00      	cmp	r6, #0
   14006:	d1f3      	bne.n	13ff0 <__aeabi_fdiv+0x19c>
   14008:	001c      	movs	r4, r3
   1400a:	1e63      	subs	r3, r4, #1
   1400c:	419c      	sbcs	r4, r3
   1400e:	430c      	orrs	r4, r1
   14010:	0001      	movs	r1, r0
   14012:	317f      	adds	r1, #127	; 0x7f
   14014:	2900      	cmp	r1, #0
   14016:	ddce      	ble.n	13fb6 <__aeabi_fdiv+0x162>
   14018:	0763      	lsls	r3, r4, #29
   1401a:	d004      	beq.n	14026 <__aeabi_fdiv+0x1d2>
   1401c:	230f      	movs	r3, #15
   1401e:	4023      	ands	r3, r4
   14020:	2b04      	cmp	r3, #4
   14022:	d000      	beq.n	14026 <__aeabi_fdiv+0x1d2>
   14024:	3404      	adds	r4, #4
   14026:	0123      	lsls	r3, r4, #4
   14028:	d503      	bpl.n	14032 <__aeabi_fdiv+0x1de>
   1402a:	0001      	movs	r1, r0
   1402c:	4b2c      	ldr	r3, [pc, #176]	; (140e0 <__aeabi_fdiv+0x28c>)
   1402e:	3180      	adds	r1, #128	; 0x80
   14030:	401c      	ands	r4, r3
   14032:	29fe      	cmp	r1, #254	; 0xfe
   14034:	dd0d      	ble.n	14052 <__aeabi_fdiv+0x1fe>
   14036:	2301      	movs	r3, #1
   14038:	9a01      	ldr	r2, [sp, #4]
   1403a:	21ff      	movs	r1, #255	; 0xff
   1403c:	4013      	ands	r3, r2
   1403e:	2400      	movs	r4, #0
   14040:	e7a4      	b.n	13f8c <__aeabi_fdiv+0x138>
   14042:	2380      	movs	r3, #128	; 0x80
   14044:	03db      	lsls	r3, r3, #15
   14046:	431c      	orrs	r4, r3
   14048:	0264      	lsls	r4, r4, #9
   1404a:	0a64      	lsrs	r4, r4, #9
   1404c:	0033      	movs	r3, r6
   1404e:	21ff      	movs	r1, #255	; 0xff
   14050:	e79c      	b.n	13f8c <__aeabi_fdiv+0x138>
   14052:	2301      	movs	r3, #1
   14054:	9a01      	ldr	r2, [sp, #4]
   14056:	01a4      	lsls	r4, r4, #6
   14058:	0a64      	lsrs	r4, r4, #9
   1405a:	b2c9      	uxtb	r1, r1
   1405c:	4013      	ands	r3, r2
   1405e:	e795      	b.n	13f8c <__aeabi_fdiv+0x138>
   14060:	1b1b      	subs	r3, r3, r4
   14062:	261a      	movs	r6, #26
   14064:	2101      	movs	r1, #1
   14066:	e7c2      	b.n	13fee <__aeabi_fdiv+0x19a>
   14068:	9b00      	ldr	r3, [sp, #0]
   1406a:	468b      	mov	fp, r1
   1406c:	469a      	mov	sl, r3
   1406e:	2400      	movs	r4, #0
   14070:	e74c      	b.n	13f0c <__aeabi_fdiv+0xb8>
   14072:	0263      	lsls	r3, r4, #9
   14074:	d5e5      	bpl.n	14042 <__aeabi_fdiv+0x1ee>
   14076:	2500      	movs	r5, #0
   14078:	2480      	movs	r4, #128	; 0x80
   1407a:	03e4      	lsls	r4, r4, #15
   1407c:	432c      	orrs	r4, r5
   1407e:	0264      	lsls	r4, r4, #9
   14080:	0a64      	lsrs	r4, r4, #9
   14082:	9b00      	ldr	r3, [sp, #0]
   14084:	21ff      	movs	r1, #255	; 0xff
   14086:	e781      	b.n	13f8c <__aeabi_fdiv+0x138>
   14088:	9501      	str	r5, [sp, #4]
   1408a:	e7c1      	b.n	14010 <__aeabi_fdiv+0x1bc>
   1408c:	0023      	movs	r3, r4
   1408e:	2020      	movs	r0, #32
   14090:	40cb      	lsrs	r3, r1
   14092:	1a41      	subs	r1, r0, r1
   14094:	408c      	lsls	r4, r1
   14096:	1e61      	subs	r1, r4, #1
   14098:	418c      	sbcs	r4, r1
   1409a:	431c      	orrs	r4, r3
   1409c:	0763      	lsls	r3, r4, #29
   1409e:	d004      	beq.n	140aa <__aeabi_fdiv+0x256>
   140a0:	230f      	movs	r3, #15
   140a2:	4023      	ands	r3, r4
   140a4:	2b04      	cmp	r3, #4
   140a6:	d000      	beq.n	140aa <__aeabi_fdiv+0x256>
   140a8:	3404      	adds	r4, #4
   140aa:	0163      	lsls	r3, r4, #5
   140ac:	d505      	bpl.n	140ba <__aeabi_fdiv+0x266>
   140ae:	2301      	movs	r3, #1
   140b0:	9a01      	ldr	r2, [sp, #4]
   140b2:	2101      	movs	r1, #1
   140b4:	4013      	ands	r3, r2
   140b6:	2400      	movs	r4, #0
   140b8:	e768      	b.n	13f8c <__aeabi_fdiv+0x138>
   140ba:	2301      	movs	r3, #1
   140bc:	9a01      	ldr	r2, [sp, #4]
   140be:	01a4      	lsls	r4, r4, #6
   140c0:	0a64      	lsrs	r4, r4, #9
   140c2:	4013      	ands	r3, r2
   140c4:	2100      	movs	r1, #0
   140c6:	e761      	b.n	13f8c <__aeabi_fdiv+0x138>
   140c8:	2380      	movs	r3, #128	; 0x80
   140ca:	03db      	lsls	r3, r3, #15
   140cc:	431c      	orrs	r4, r3
   140ce:	0264      	lsls	r4, r4, #9
   140d0:	0a64      	lsrs	r4, r4, #9
   140d2:	4653      	mov	r3, sl
   140d4:	21ff      	movs	r1, #255	; 0xff
   140d6:	e759      	b.n	13f8c <__aeabi_fdiv+0x138>
   140d8:	00018c34 	.word	0x00018c34
   140dc:	00018c74 	.word	0x00018c74
   140e0:	f7ffffff 	.word	0xf7ffffff

000140e4 <__eqsf2>:
   140e4:	b570      	push	{r4, r5, r6, lr}
   140e6:	0042      	lsls	r2, r0, #1
   140e8:	0245      	lsls	r5, r0, #9
   140ea:	024e      	lsls	r6, r1, #9
   140ec:	004c      	lsls	r4, r1, #1
   140ee:	0fc3      	lsrs	r3, r0, #31
   140f0:	0a6d      	lsrs	r5, r5, #9
   140f2:	0e12      	lsrs	r2, r2, #24
   140f4:	0a76      	lsrs	r6, r6, #9
   140f6:	0e24      	lsrs	r4, r4, #24
   140f8:	0fc9      	lsrs	r1, r1, #31
   140fa:	2001      	movs	r0, #1
   140fc:	2aff      	cmp	r2, #255	; 0xff
   140fe:	d006      	beq.n	1410e <__eqsf2+0x2a>
   14100:	2cff      	cmp	r4, #255	; 0xff
   14102:	d003      	beq.n	1410c <__eqsf2+0x28>
   14104:	42a2      	cmp	r2, r4
   14106:	d101      	bne.n	1410c <__eqsf2+0x28>
   14108:	42b5      	cmp	r5, r6
   1410a:	d006      	beq.n	1411a <__eqsf2+0x36>
   1410c:	bd70      	pop	{r4, r5, r6, pc}
   1410e:	2d00      	cmp	r5, #0
   14110:	d1fc      	bne.n	1410c <__eqsf2+0x28>
   14112:	2cff      	cmp	r4, #255	; 0xff
   14114:	d1fa      	bne.n	1410c <__eqsf2+0x28>
   14116:	2e00      	cmp	r6, #0
   14118:	d1f8      	bne.n	1410c <__eqsf2+0x28>
   1411a:	428b      	cmp	r3, r1
   1411c:	d006      	beq.n	1412c <__eqsf2+0x48>
   1411e:	2001      	movs	r0, #1
   14120:	2a00      	cmp	r2, #0
   14122:	d1f3      	bne.n	1410c <__eqsf2+0x28>
   14124:	0028      	movs	r0, r5
   14126:	1e45      	subs	r5, r0, #1
   14128:	41a8      	sbcs	r0, r5
   1412a:	e7ef      	b.n	1410c <__eqsf2+0x28>
   1412c:	2000      	movs	r0, #0
   1412e:	e7ed      	b.n	1410c <__eqsf2+0x28>

00014130 <__gesf2>:
   14130:	b5f0      	push	{r4, r5, r6, r7, lr}
   14132:	0042      	lsls	r2, r0, #1
   14134:	0245      	lsls	r5, r0, #9
   14136:	024c      	lsls	r4, r1, #9
   14138:	0fc3      	lsrs	r3, r0, #31
   1413a:	0048      	lsls	r0, r1, #1
   1413c:	0a6d      	lsrs	r5, r5, #9
   1413e:	0e12      	lsrs	r2, r2, #24
   14140:	0a64      	lsrs	r4, r4, #9
   14142:	0e00      	lsrs	r0, r0, #24
   14144:	0fc9      	lsrs	r1, r1, #31
   14146:	2aff      	cmp	r2, #255	; 0xff
   14148:	d01e      	beq.n	14188 <__gesf2+0x58>
   1414a:	28ff      	cmp	r0, #255	; 0xff
   1414c:	d021      	beq.n	14192 <__gesf2+0x62>
   1414e:	2a00      	cmp	r2, #0
   14150:	d10a      	bne.n	14168 <__gesf2+0x38>
   14152:	426e      	negs	r6, r5
   14154:	416e      	adcs	r6, r5
   14156:	b2f6      	uxtb	r6, r6
   14158:	2800      	cmp	r0, #0
   1415a:	d10f      	bne.n	1417c <__gesf2+0x4c>
   1415c:	2c00      	cmp	r4, #0
   1415e:	d10d      	bne.n	1417c <__gesf2+0x4c>
   14160:	2000      	movs	r0, #0
   14162:	2d00      	cmp	r5, #0
   14164:	d009      	beq.n	1417a <__gesf2+0x4a>
   14166:	e005      	b.n	14174 <__gesf2+0x44>
   14168:	2800      	cmp	r0, #0
   1416a:	d101      	bne.n	14170 <__gesf2+0x40>
   1416c:	2c00      	cmp	r4, #0
   1416e:	d001      	beq.n	14174 <__gesf2+0x44>
   14170:	428b      	cmp	r3, r1
   14172:	d011      	beq.n	14198 <__gesf2+0x68>
   14174:	2101      	movs	r1, #1
   14176:	4258      	negs	r0, r3
   14178:	4308      	orrs	r0, r1
   1417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1417c:	2e00      	cmp	r6, #0
   1417e:	d0f7      	beq.n	14170 <__gesf2+0x40>
   14180:	2001      	movs	r0, #1
   14182:	3901      	subs	r1, #1
   14184:	4308      	orrs	r0, r1
   14186:	e7f8      	b.n	1417a <__gesf2+0x4a>
   14188:	2d00      	cmp	r5, #0
   1418a:	d0de      	beq.n	1414a <__gesf2+0x1a>
   1418c:	2002      	movs	r0, #2
   1418e:	4240      	negs	r0, r0
   14190:	e7f3      	b.n	1417a <__gesf2+0x4a>
   14192:	2c00      	cmp	r4, #0
   14194:	d0db      	beq.n	1414e <__gesf2+0x1e>
   14196:	e7f9      	b.n	1418c <__gesf2+0x5c>
   14198:	4282      	cmp	r2, r0
   1419a:	dceb      	bgt.n	14174 <__gesf2+0x44>
   1419c:	db04      	blt.n	141a8 <__gesf2+0x78>
   1419e:	42a5      	cmp	r5, r4
   141a0:	d8e8      	bhi.n	14174 <__gesf2+0x44>
   141a2:	2000      	movs	r0, #0
   141a4:	42a5      	cmp	r5, r4
   141a6:	d2e8      	bcs.n	1417a <__gesf2+0x4a>
   141a8:	2101      	movs	r1, #1
   141aa:	1e58      	subs	r0, r3, #1
   141ac:	4308      	orrs	r0, r1
   141ae:	e7e4      	b.n	1417a <__gesf2+0x4a>

000141b0 <__lesf2>:
   141b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   141b2:	0042      	lsls	r2, r0, #1
   141b4:	024d      	lsls	r5, r1, #9
   141b6:	004c      	lsls	r4, r1, #1
   141b8:	0246      	lsls	r6, r0, #9
   141ba:	0a76      	lsrs	r6, r6, #9
   141bc:	0e12      	lsrs	r2, r2, #24
   141be:	0fc3      	lsrs	r3, r0, #31
   141c0:	0a6d      	lsrs	r5, r5, #9
   141c2:	0e24      	lsrs	r4, r4, #24
   141c4:	0fc9      	lsrs	r1, r1, #31
   141c6:	2aff      	cmp	r2, #255	; 0xff
   141c8:	d016      	beq.n	141f8 <__lesf2+0x48>
   141ca:	2cff      	cmp	r4, #255	; 0xff
   141cc:	d018      	beq.n	14200 <__lesf2+0x50>
   141ce:	2a00      	cmp	r2, #0
   141d0:	d10a      	bne.n	141e8 <__lesf2+0x38>
   141d2:	4270      	negs	r0, r6
   141d4:	4170      	adcs	r0, r6
   141d6:	b2c0      	uxtb	r0, r0
   141d8:	2c00      	cmp	r4, #0
   141da:	d015      	beq.n	14208 <__lesf2+0x58>
   141dc:	2800      	cmp	r0, #0
   141de:	d005      	beq.n	141ec <__lesf2+0x3c>
   141e0:	2001      	movs	r0, #1
   141e2:	3901      	subs	r1, #1
   141e4:	4308      	orrs	r0, r1
   141e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   141e8:	2c00      	cmp	r4, #0
   141ea:	d013      	beq.n	14214 <__lesf2+0x64>
   141ec:	4299      	cmp	r1, r3
   141ee:	d014      	beq.n	1421a <__lesf2+0x6a>
   141f0:	2001      	movs	r0, #1
   141f2:	425b      	negs	r3, r3
   141f4:	4318      	orrs	r0, r3
   141f6:	e7f6      	b.n	141e6 <__lesf2+0x36>
   141f8:	2002      	movs	r0, #2
   141fa:	2e00      	cmp	r6, #0
   141fc:	d1f3      	bne.n	141e6 <__lesf2+0x36>
   141fe:	e7e4      	b.n	141ca <__lesf2+0x1a>
   14200:	2002      	movs	r0, #2
   14202:	2d00      	cmp	r5, #0
   14204:	d1ef      	bne.n	141e6 <__lesf2+0x36>
   14206:	e7e2      	b.n	141ce <__lesf2+0x1e>
   14208:	2d00      	cmp	r5, #0
   1420a:	d1e7      	bne.n	141dc <__lesf2+0x2c>
   1420c:	2000      	movs	r0, #0
   1420e:	2e00      	cmp	r6, #0
   14210:	d0e9      	beq.n	141e6 <__lesf2+0x36>
   14212:	e7ed      	b.n	141f0 <__lesf2+0x40>
   14214:	2d00      	cmp	r5, #0
   14216:	d1e9      	bne.n	141ec <__lesf2+0x3c>
   14218:	e7ea      	b.n	141f0 <__lesf2+0x40>
   1421a:	42a2      	cmp	r2, r4
   1421c:	dc06      	bgt.n	1422c <__lesf2+0x7c>
   1421e:	dbdf      	blt.n	141e0 <__lesf2+0x30>
   14220:	42ae      	cmp	r6, r5
   14222:	d803      	bhi.n	1422c <__lesf2+0x7c>
   14224:	2000      	movs	r0, #0
   14226:	42ae      	cmp	r6, r5
   14228:	d3da      	bcc.n	141e0 <__lesf2+0x30>
   1422a:	e7dc      	b.n	141e6 <__lesf2+0x36>
   1422c:	2001      	movs	r0, #1
   1422e:	4249      	negs	r1, r1
   14230:	4308      	orrs	r0, r1
   14232:	e7d8      	b.n	141e6 <__lesf2+0x36>

00014234 <__aeabi_fmul>:
   14234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14236:	4657      	mov	r7, sl
   14238:	464e      	mov	r6, r9
   1423a:	4645      	mov	r5, r8
   1423c:	46de      	mov	lr, fp
   1423e:	b5e0      	push	{r5, r6, r7, lr}
   14240:	0247      	lsls	r7, r0, #9
   14242:	0046      	lsls	r6, r0, #1
   14244:	4688      	mov	r8, r1
   14246:	0a7f      	lsrs	r7, r7, #9
   14248:	0e36      	lsrs	r6, r6, #24
   1424a:	0fc4      	lsrs	r4, r0, #31
   1424c:	2e00      	cmp	r6, #0
   1424e:	d047      	beq.n	142e0 <__aeabi_fmul+0xac>
   14250:	2eff      	cmp	r6, #255	; 0xff
   14252:	d024      	beq.n	1429e <__aeabi_fmul+0x6a>
   14254:	00fb      	lsls	r3, r7, #3
   14256:	2780      	movs	r7, #128	; 0x80
   14258:	04ff      	lsls	r7, r7, #19
   1425a:	431f      	orrs	r7, r3
   1425c:	2300      	movs	r3, #0
   1425e:	4699      	mov	r9, r3
   14260:	469a      	mov	sl, r3
   14262:	3e7f      	subs	r6, #127	; 0x7f
   14264:	4643      	mov	r3, r8
   14266:	025d      	lsls	r5, r3, #9
   14268:	0058      	lsls	r0, r3, #1
   1426a:	0fdb      	lsrs	r3, r3, #31
   1426c:	0a6d      	lsrs	r5, r5, #9
   1426e:	0e00      	lsrs	r0, r0, #24
   14270:	4698      	mov	r8, r3
   14272:	d043      	beq.n	142fc <__aeabi_fmul+0xc8>
   14274:	28ff      	cmp	r0, #255	; 0xff
   14276:	d03b      	beq.n	142f0 <__aeabi_fmul+0xbc>
   14278:	00eb      	lsls	r3, r5, #3
   1427a:	2580      	movs	r5, #128	; 0x80
   1427c:	2200      	movs	r2, #0
   1427e:	04ed      	lsls	r5, r5, #19
   14280:	431d      	orrs	r5, r3
   14282:	387f      	subs	r0, #127	; 0x7f
   14284:	1836      	adds	r6, r6, r0
   14286:	1c73      	adds	r3, r6, #1
   14288:	4641      	mov	r1, r8
   1428a:	469b      	mov	fp, r3
   1428c:	464b      	mov	r3, r9
   1428e:	4061      	eors	r1, r4
   14290:	4313      	orrs	r3, r2
   14292:	2b0f      	cmp	r3, #15
   14294:	d864      	bhi.n	14360 <__aeabi_fmul+0x12c>
   14296:	4875      	ldr	r0, [pc, #468]	; (1446c <__aeabi_fmul+0x238>)
   14298:	009b      	lsls	r3, r3, #2
   1429a:	58c3      	ldr	r3, [r0, r3]
   1429c:	469f      	mov	pc, r3
   1429e:	2f00      	cmp	r7, #0
   142a0:	d142      	bne.n	14328 <__aeabi_fmul+0xf4>
   142a2:	2308      	movs	r3, #8
   142a4:	4699      	mov	r9, r3
   142a6:	3b06      	subs	r3, #6
   142a8:	26ff      	movs	r6, #255	; 0xff
   142aa:	469a      	mov	sl, r3
   142ac:	e7da      	b.n	14264 <__aeabi_fmul+0x30>
   142ae:	4641      	mov	r1, r8
   142b0:	2a02      	cmp	r2, #2
   142b2:	d028      	beq.n	14306 <__aeabi_fmul+0xd2>
   142b4:	2a03      	cmp	r2, #3
   142b6:	d100      	bne.n	142ba <__aeabi_fmul+0x86>
   142b8:	e0ce      	b.n	14458 <__aeabi_fmul+0x224>
   142ba:	2a01      	cmp	r2, #1
   142bc:	d000      	beq.n	142c0 <__aeabi_fmul+0x8c>
   142be:	e0ac      	b.n	1441a <__aeabi_fmul+0x1e6>
   142c0:	4011      	ands	r1, r2
   142c2:	2000      	movs	r0, #0
   142c4:	2200      	movs	r2, #0
   142c6:	b2cc      	uxtb	r4, r1
   142c8:	0240      	lsls	r0, r0, #9
   142ca:	05d2      	lsls	r2, r2, #23
   142cc:	0a40      	lsrs	r0, r0, #9
   142ce:	07e4      	lsls	r4, r4, #31
   142d0:	4310      	orrs	r0, r2
   142d2:	4320      	orrs	r0, r4
   142d4:	bc3c      	pop	{r2, r3, r4, r5}
   142d6:	4690      	mov	r8, r2
   142d8:	4699      	mov	r9, r3
   142da:	46a2      	mov	sl, r4
   142dc:	46ab      	mov	fp, r5
   142de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   142e0:	2f00      	cmp	r7, #0
   142e2:	d115      	bne.n	14310 <__aeabi_fmul+0xdc>
   142e4:	2304      	movs	r3, #4
   142e6:	4699      	mov	r9, r3
   142e8:	3b03      	subs	r3, #3
   142ea:	2600      	movs	r6, #0
   142ec:	469a      	mov	sl, r3
   142ee:	e7b9      	b.n	14264 <__aeabi_fmul+0x30>
   142f0:	20ff      	movs	r0, #255	; 0xff
   142f2:	2202      	movs	r2, #2
   142f4:	2d00      	cmp	r5, #0
   142f6:	d0c5      	beq.n	14284 <__aeabi_fmul+0x50>
   142f8:	2203      	movs	r2, #3
   142fa:	e7c3      	b.n	14284 <__aeabi_fmul+0x50>
   142fc:	2d00      	cmp	r5, #0
   142fe:	d119      	bne.n	14334 <__aeabi_fmul+0x100>
   14300:	2000      	movs	r0, #0
   14302:	2201      	movs	r2, #1
   14304:	e7be      	b.n	14284 <__aeabi_fmul+0x50>
   14306:	2401      	movs	r4, #1
   14308:	22ff      	movs	r2, #255	; 0xff
   1430a:	400c      	ands	r4, r1
   1430c:	2000      	movs	r0, #0
   1430e:	e7db      	b.n	142c8 <__aeabi_fmul+0x94>
   14310:	0038      	movs	r0, r7
   14312:	f002 f965 	bl	165e0 <__clzsi2>
   14316:	2676      	movs	r6, #118	; 0x76
   14318:	1f43      	subs	r3, r0, #5
   1431a:	409f      	lsls	r7, r3
   1431c:	2300      	movs	r3, #0
   1431e:	4276      	negs	r6, r6
   14320:	1a36      	subs	r6, r6, r0
   14322:	4699      	mov	r9, r3
   14324:	469a      	mov	sl, r3
   14326:	e79d      	b.n	14264 <__aeabi_fmul+0x30>
   14328:	230c      	movs	r3, #12
   1432a:	4699      	mov	r9, r3
   1432c:	3b09      	subs	r3, #9
   1432e:	26ff      	movs	r6, #255	; 0xff
   14330:	469a      	mov	sl, r3
   14332:	e797      	b.n	14264 <__aeabi_fmul+0x30>
   14334:	0028      	movs	r0, r5
   14336:	f002 f953 	bl	165e0 <__clzsi2>
   1433a:	1f43      	subs	r3, r0, #5
   1433c:	409d      	lsls	r5, r3
   1433e:	2376      	movs	r3, #118	; 0x76
   14340:	425b      	negs	r3, r3
   14342:	1a18      	subs	r0, r3, r0
   14344:	2200      	movs	r2, #0
   14346:	e79d      	b.n	14284 <__aeabi_fmul+0x50>
   14348:	2080      	movs	r0, #128	; 0x80
   1434a:	2400      	movs	r4, #0
   1434c:	03c0      	lsls	r0, r0, #15
   1434e:	22ff      	movs	r2, #255	; 0xff
   14350:	e7ba      	b.n	142c8 <__aeabi_fmul+0x94>
   14352:	003d      	movs	r5, r7
   14354:	4652      	mov	r2, sl
   14356:	e7ab      	b.n	142b0 <__aeabi_fmul+0x7c>
   14358:	003d      	movs	r5, r7
   1435a:	0021      	movs	r1, r4
   1435c:	4652      	mov	r2, sl
   1435e:	e7a7      	b.n	142b0 <__aeabi_fmul+0x7c>
   14360:	0c3b      	lsrs	r3, r7, #16
   14362:	469c      	mov	ip, r3
   14364:	042a      	lsls	r2, r5, #16
   14366:	0c12      	lsrs	r2, r2, #16
   14368:	0c2b      	lsrs	r3, r5, #16
   1436a:	0014      	movs	r4, r2
   1436c:	4660      	mov	r0, ip
   1436e:	4665      	mov	r5, ip
   14370:	043f      	lsls	r7, r7, #16
   14372:	0c3f      	lsrs	r7, r7, #16
   14374:	437c      	muls	r4, r7
   14376:	4342      	muls	r2, r0
   14378:	435d      	muls	r5, r3
   1437a:	437b      	muls	r3, r7
   1437c:	0c27      	lsrs	r7, r4, #16
   1437e:	189b      	adds	r3, r3, r2
   14380:	18ff      	adds	r7, r7, r3
   14382:	42ba      	cmp	r2, r7
   14384:	d903      	bls.n	1438e <__aeabi_fmul+0x15a>
   14386:	2380      	movs	r3, #128	; 0x80
   14388:	025b      	lsls	r3, r3, #9
   1438a:	469c      	mov	ip, r3
   1438c:	4465      	add	r5, ip
   1438e:	0424      	lsls	r4, r4, #16
   14390:	043a      	lsls	r2, r7, #16
   14392:	0c24      	lsrs	r4, r4, #16
   14394:	1912      	adds	r2, r2, r4
   14396:	0193      	lsls	r3, r2, #6
   14398:	1e5c      	subs	r4, r3, #1
   1439a:	41a3      	sbcs	r3, r4
   1439c:	0c3f      	lsrs	r7, r7, #16
   1439e:	0e92      	lsrs	r2, r2, #26
   143a0:	197d      	adds	r5, r7, r5
   143a2:	431a      	orrs	r2, r3
   143a4:	01ad      	lsls	r5, r5, #6
   143a6:	4315      	orrs	r5, r2
   143a8:	012b      	lsls	r3, r5, #4
   143aa:	d504      	bpl.n	143b6 <__aeabi_fmul+0x182>
   143ac:	2301      	movs	r3, #1
   143ae:	465e      	mov	r6, fp
   143b0:	086a      	lsrs	r2, r5, #1
   143b2:	401d      	ands	r5, r3
   143b4:	4315      	orrs	r5, r2
   143b6:	0032      	movs	r2, r6
   143b8:	327f      	adds	r2, #127	; 0x7f
   143ba:	2a00      	cmp	r2, #0
   143bc:	dd25      	ble.n	1440a <__aeabi_fmul+0x1d6>
   143be:	076b      	lsls	r3, r5, #29
   143c0:	d004      	beq.n	143cc <__aeabi_fmul+0x198>
   143c2:	230f      	movs	r3, #15
   143c4:	402b      	ands	r3, r5
   143c6:	2b04      	cmp	r3, #4
   143c8:	d000      	beq.n	143cc <__aeabi_fmul+0x198>
   143ca:	3504      	adds	r5, #4
   143cc:	012b      	lsls	r3, r5, #4
   143ce:	d503      	bpl.n	143d8 <__aeabi_fmul+0x1a4>
   143d0:	0032      	movs	r2, r6
   143d2:	4b27      	ldr	r3, [pc, #156]	; (14470 <__aeabi_fmul+0x23c>)
   143d4:	3280      	adds	r2, #128	; 0x80
   143d6:	401d      	ands	r5, r3
   143d8:	2afe      	cmp	r2, #254	; 0xfe
   143da:	dc94      	bgt.n	14306 <__aeabi_fmul+0xd2>
   143dc:	2401      	movs	r4, #1
   143de:	01a8      	lsls	r0, r5, #6
   143e0:	0a40      	lsrs	r0, r0, #9
   143e2:	b2d2      	uxtb	r2, r2
   143e4:	400c      	ands	r4, r1
   143e6:	e76f      	b.n	142c8 <__aeabi_fmul+0x94>
   143e8:	2080      	movs	r0, #128	; 0x80
   143ea:	03c0      	lsls	r0, r0, #15
   143ec:	4207      	tst	r7, r0
   143ee:	d007      	beq.n	14400 <__aeabi_fmul+0x1cc>
   143f0:	4205      	tst	r5, r0
   143f2:	d105      	bne.n	14400 <__aeabi_fmul+0x1cc>
   143f4:	4328      	orrs	r0, r5
   143f6:	0240      	lsls	r0, r0, #9
   143f8:	0a40      	lsrs	r0, r0, #9
   143fa:	4644      	mov	r4, r8
   143fc:	22ff      	movs	r2, #255	; 0xff
   143fe:	e763      	b.n	142c8 <__aeabi_fmul+0x94>
   14400:	4338      	orrs	r0, r7
   14402:	0240      	lsls	r0, r0, #9
   14404:	0a40      	lsrs	r0, r0, #9
   14406:	22ff      	movs	r2, #255	; 0xff
   14408:	e75e      	b.n	142c8 <__aeabi_fmul+0x94>
   1440a:	2401      	movs	r4, #1
   1440c:	1aa3      	subs	r3, r4, r2
   1440e:	2b1b      	cmp	r3, #27
   14410:	dd05      	ble.n	1441e <__aeabi_fmul+0x1ea>
   14412:	400c      	ands	r4, r1
   14414:	2200      	movs	r2, #0
   14416:	2000      	movs	r0, #0
   14418:	e756      	b.n	142c8 <__aeabi_fmul+0x94>
   1441a:	465e      	mov	r6, fp
   1441c:	e7cb      	b.n	143b6 <__aeabi_fmul+0x182>
   1441e:	002a      	movs	r2, r5
   14420:	2020      	movs	r0, #32
   14422:	40da      	lsrs	r2, r3
   14424:	1ac3      	subs	r3, r0, r3
   14426:	409d      	lsls	r5, r3
   14428:	002b      	movs	r3, r5
   1442a:	1e5d      	subs	r5, r3, #1
   1442c:	41ab      	sbcs	r3, r5
   1442e:	4313      	orrs	r3, r2
   14430:	075a      	lsls	r2, r3, #29
   14432:	d004      	beq.n	1443e <__aeabi_fmul+0x20a>
   14434:	220f      	movs	r2, #15
   14436:	401a      	ands	r2, r3
   14438:	2a04      	cmp	r2, #4
   1443a:	d000      	beq.n	1443e <__aeabi_fmul+0x20a>
   1443c:	3304      	adds	r3, #4
   1443e:	015a      	lsls	r2, r3, #5
   14440:	d504      	bpl.n	1444c <__aeabi_fmul+0x218>
   14442:	2401      	movs	r4, #1
   14444:	2201      	movs	r2, #1
   14446:	400c      	ands	r4, r1
   14448:	2000      	movs	r0, #0
   1444a:	e73d      	b.n	142c8 <__aeabi_fmul+0x94>
   1444c:	2401      	movs	r4, #1
   1444e:	019b      	lsls	r3, r3, #6
   14450:	0a58      	lsrs	r0, r3, #9
   14452:	400c      	ands	r4, r1
   14454:	2200      	movs	r2, #0
   14456:	e737      	b.n	142c8 <__aeabi_fmul+0x94>
   14458:	2080      	movs	r0, #128	; 0x80
   1445a:	2401      	movs	r4, #1
   1445c:	03c0      	lsls	r0, r0, #15
   1445e:	4328      	orrs	r0, r5
   14460:	0240      	lsls	r0, r0, #9
   14462:	0a40      	lsrs	r0, r0, #9
   14464:	400c      	ands	r4, r1
   14466:	22ff      	movs	r2, #255	; 0xff
   14468:	e72e      	b.n	142c8 <__aeabi_fmul+0x94>
   1446a:	46c0      	nop			; (mov r8, r8)
   1446c:	00018cb4 	.word	0x00018cb4
   14470:	f7ffffff 	.word	0xf7ffffff

00014474 <__aeabi_fsub>:
   14474:	b5f0      	push	{r4, r5, r6, r7, lr}
   14476:	464f      	mov	r7, r9
   14478:	46d6      	mov	lr, sl
   1447a:	4646      	mov	r6, r8
   1447c:	0044      	lsls	r4, r0, #1
   1447e:	b5c0      	push	{r6, r7, lr}
   14480:	0fc2      	lsrs	r2, r0, #31
   14482:	0247      	lsls	r7, r0, #9
   14484:	0248      	lsls	r0, r1, #9
   14486:	0a40      	lsrs	r0, r0, #9
   14488:	4684      	mov	ip, r0
   1448a:	4666      	mov	r6, ip
   1448c:	0a7b      	lsrs	r3, r7, #9
   1448e:	0048      	lsls	r0, r1, #1
   14490:	0fc9      	lsrs	r1, r1, #31
   14492:	469a      	mov	sl, r3
   14494:	0e24      	lsrs	r4, r4, #24
   14496:	0015      	movs	r5, r2
   14498:	00db      	lsls	r3, r3, #3
   1449a:	0e00      	lsrs	r0, r0, #24
   1449c:	4689      	mov	r9, r1
   1449e:	00f6      	lsls	r6, r6, #3
   144a0:	28ff      	cmp	r0, #255	; 0xff
   144a2:	d100      	bne.n	144a6 <__aeabi_fsub+0x32>
   144a4:	e08f      	b.n	145c6 <__aeabi_fsub+0x152>
   144a6:	2101      	movs	r1, #1
   144a8:	464f      	mov	r7, r9
   144aa:	404f      	eors	r7, r1
   144ac:	0039      	movs	r1, r7
   144ae:	4291      	cmp	r1, r2
   144b0:	d066      	beq.n	14580 <__aeabi_fsub+0x10c>
   144b2:	1a22      	subs	r2, r4, r0
   144b4:	2a00      	cmp	r2, #0
   144b6:	dc00      	bgt.n	144ba <__aeabi_fsub+0x46>
   144b8:	e09d      	b.n	145f6 <__aeabi_fsub+0x182>
   144ba:	2800      	cmp	r0, #0
   144bc:	d13d      	bne.n	1453a <__aeabi_fsub+0xc6>
   144be:	2e00      	cmp	r6, #0
   144c0:	d100      	bne.n	144c4 <__aeabi_fsub+0x50>
   144c2:	e08b      	b.n	145dc <__aeabi_fsub+0x168>
   144c4:	1e51      	subs	r1, r2, #1
   144c6:	2900      	cmp	r1, #0
   144c8:	d000      	beq.n	144cc <__aeabi_fsub+0x58>
   144ca:	e0b5      	b.n	14638 <__aeabi_fsub+0x1c4>
   144cc:	2401      	movs	r4, #1
   144ce:	1b9b      	subs	r3, r3, r6
   144d0:	015a      	lsls	r2, r3, #5
   144d2:	d544      	bpl.n	1455e <__aeabi_fsub+0xea>
   144d4:	019b      	lsls	r3, r3, #6
   144d6:	099f      	lsrs	r7, r3, #6
   144d8:	0038      	movs	r0, r7
   144da:	f002 f881 	bl	165e0 <__clzsi2>
   144de:	3805      	subs	r0, #5
   144e0:	4087      	lsls	r7, r0
   144e2:	4284      	cmp	r4, r0
   144e4:	dd00      	ble.n	144e8 <__aeabi_fsub+0x74>
   144e6:	e096      	b.n	14616 <__aeabi_fsub+0x1a2>
   144e8:	1b04      	subs	r4, r0, r4
   144ea:	003a      	movs	r2, r7
   144ec:	2020      	movs	r0, #32
   144ee:	3401      	adds	r4, #1
   144f0:	40e2      	lsrs	r2, r4
   144f2:	1b04      	subs	r4, r0, r4
   144f4:	40a7      	lsls	r7, r4
   144f6:	003b      	movs	r3, r7
   144f8:	1e5f      	subs	r7, r3, #1
   144fa:	41bb      	sbcs	r3, r7
   144fc:	2400      	movs	r4, #0
   144fe:	4313      	orrs	r3, r2
   14500:	075a      	lsls	r2, r3, #29
   14502:	d004      	beq.n	1450e <__aeabi_fsub+0x9a>
   14504:	220f      	movs	r2, #15
   14506:	401a      	ands	r2, r3
   14508:	2a04      	cmp	r2, #4
   1450a:	d000      	beq.n	1450e <__aeabi_fsub+0x9a>
   1450c:	3304      	adds	r3, #4
   1450e:	015a      	lsls	r2, r3, #5
   14510:	d527      	bpl.n	14562 <__aeabi_fsub+0xee>
   14512:	3401      	adds	r4, #1
   14514:	2cff      	cmp	r4, #255	; 0xff
   14516:	d100      	bne.n	1451a <__aeabi_fsub+0xa6>
   14518:	e079      	b.n	1460e <__aeabi_fsub+0x19a>
   1451a:	2201      	movs	r2, #1
   1451c:	019b      	lsls	r3, r3, #6
   1451e:	0a5b      	lsrs	r3, r3, #9
   14520:	b2e4      	uxtb	r4, r4
   14522:	402a      	ands	r2, r5
   14524:	025b      	lsls	r3, r3, #9
   14526:	05e4      	lsls	r4, r4, #23
   14528:	0a58      	lsrs	r0, r3, #9
   1452a:	07d2      	lsls	r2, r2, #31
   1452c:	4320      	orrs	r0, r4
   1452e:	4310      	orrs	r0, r2
   14530:	bc1c      	pop	{r2, r3, r4}
   14532:	4690      	mov	r8, r2
   14534:	4699      	mov	r9, r3
   14536:	46a2      	mov	sl, r4
   14538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1453a:	2cff      	cmp	r4, #255	; 0xff
   1453c:	d0e0      	beq.n	14500 <__aeabi_fsub+0x8c>
   1453e:	2180      	movs	r1, #128	; 0x80
   14540:	04c9      	lsls	r1, r1, #19
   14542:	430e      	orrs	r6, r1
   14544:	2a1b      	cmp	r2, #27
   14546:	dc7b      	bgt.n	14640 <__aeabi_fsub+0x1cc>
   14548:	0031      	movs	r1, r6
   1454a:	2020      	movs	r0, #32
   1454c:	40d1      	lsrs	r1, r2
   1454e:	1a82      	subs	r2, r0, r2
   14550:	4096      	lsls	r6, r2
   14552:	1e72      	subs	r2, r6, #1
   14554:	4196      	sbcs	r6, r2
   14556:	430e      	orrs	r6, r1
   14558:	1b9b      	subs	r3, r3, r6
   1455a:	015a      	lsls	r2, r3, #5
   1455c:	d4ba      	bmi.n	144d4 <__aeabi_fsub+0x60>
   1455e:	075a      	lsls	r2, r3, #29
   14560:	d1d0      	bne.n	14504 <__aeabi_fsub+0x90>
   14562:	2201      	movs	r2, #1
   14564:	08df      	lsrs	r7, r3, #3
   14566:	402a      	ands	r2, r5
   14568:	2cff      	cmp	r4, #255	; 0xff
   1456a:	d133      	bne.n	145d4 <__aeabi_fsub+0x160>
   1456c:	2f00      	cmp	r7, #0
   1456e:	d100      	bne.n	14572 <__aeabi_fsub+0xfe>
   14570:	e0a8      	b.n	146c4 <__aeabi_fsub+0x250>
   14572:	2380      	movs	r3, #128	; 0x80
   14574:	03db      	lsls	r3, r3, #15
   14576:	433b      	orrs	r3, r7
   14578:	025b      	lsls	r3, r3, #9
   1457a:	0a5b      	lsrs	r3, r3, #9
   1457c:	24ff      	movs	r4, #255	; 0xff
   1457e:	e7d1      	b.n	14524 <__aeabi_fsub+0xb0>
   14580:	1a21      	subs	r1, r4, r0
   14582:	2900      	cmp	r1, #0
   14584:	dd4c      	ble.n	14620 <__aeabi_fsub+0x1ac>
   14586:	2800      	cmp	r0, #0
   14588:	d02a      	beq.n	145e0 <__aeabi_fsub+0x16c>
   1458a:	2cff      	cmp	r4, #255	; 0xff
   1458c:	d0b8      	beq.n	14500 <__aeabi_fsub+0x8c>
   1458e:	2080      	movs	r0, #128	; 0x80
   14590:	04c0      	lsls	r0, r0, #19
   14592:	4306      	orrs	r6, r0
   14594:	291b      	cmp	r1, #27
   14596:	dd00      	ble.n	1459a <__aeabi_fsub+0x126>
   14598:	e0af      	b.n	146fa <__aeabi_fsub+0x286>
   1459a:	0030      	movs	r0, r6
   1459c:	2720      	movs	r7, #32
   1459e:	40c8      	lsrs	r0, r1
   145a0:	1a79      	subs	r1, r7, r1
   145a2:	408e      	lsls	r6, r1
   145a4:	1e71      	subs	r1, r6, #1
   145a6:	418e      	sbcs	r6, r1
   145a8:	4306      	orrs	r6, r0
   145aa:	199b      	adds	r3, r3, r6
   145ac:	0159      	lsls	r1, r3, #5
   145ae:	d5d6      	bpl.n	1455e <__aeabi_fsub+0xea>
   145b0:	3401      	adds	r4, #1
   145b2:	2cff      	cmp	r4, #255	; 0xff
   145b4:	d100      	bne.n	145b8 <__aeabi_fsub+0x144>
   145b6:	e085      	b.n	146c4 <__aeabi_fsub+0x250>
   145b8:	2201      	movs	r2, #1
   145ba:	497a      	ldr	r1, [pc, #488]	; (147a4 <__aeabi_fsub+0x330>)
   145bc:	401a      	ands	r2, r3
   145be:	085b      	lsrs	r3, r3, #1
   145c0:	400b      	ands	r3, r1
   145c2:	4313      	orrs	r3, r2
   145c4:	e79c      	b.n	14500 <__aeabi_fsub+0x8c>
   145c6:	2e00      	cmp	r6, #0
   145c8:	d000      	beq.n	145cc <__aeabi_fsub+0x158>
   145ca:	e770      	b.n	144ae <__aeabi_fsub+0x3a>
   145cc:	e76b      	b.n	144a6 <__aeabi_fsub+0x32>
   145ce:	1e3b      	subs	r3, r7, #0
   145d0:	d1c5      	bne.n	1455e <__aeabi_fsub+0xea>
   145d2:	2200      	movs	r2, #0
   145d4:	027b      	lsls	r3, r7, #9
   145d6:	0a5b      	lsrs	r3, r3, #9
   145d8:	b2e4      	uxtb	r4, r4
   145da:	e7a3      	b.n	14524 <__aeabi_fsub+0xb0>
   145dc:	0014      	movs	r4, r2
   145de:	e78f      	b.n	14500 <__aeabi_fsub+0x8c>
   145e0:	2e00      	cmp	r6, #0
   145e2:	d04d      	beq.n	14680 <__aeabi_fsub+0x20c>
   145e4:	1e48      	subs	r0, r1, #1
   145e6:	2800      	cmp	r0, #0
   145e8:	d157      	bne.n	1469a <__aeabi_fsub+0x226>
   145ea:	199b      	adds	r3, r3, r6
   145ec:	2401      	movs	r4, #1
   145ee:	015a      	lsls	r2, r3, #5
   145f0:	d5b5      	bpl.n	1455e <__aeabi_fsub+0xea>
   145f2:	2402      	movs	r4, #2
   145f4:	e7e0      	b.n	145b8 <__aeabi_fsub+0x144>
   145f6:	2a00      	cmp	r2, #0
   145f8:	d125      	bne.n	14646 <__aeabi_fsub+0x1d2>
   145fa:	1c62      	adds	r2, r4, #1
   145fc:	b2d2      	uxtb	r2, r2
   145fe:	2a01      	cmp	r2, #1
   14600:	dd72      	ble.n	146e8 <__aeabi_fsub+0x274>
   14602:	1b9f      	subs	r7, r3, r6
   14604:	017a      	lsls	r2, r7, #5
   14606:	d535      	bpl.n	14674 <__aeabi_fsub+0x200>
   14608:	1af7      	subs	r7, r6, r3
   1460a:	000d      	movs	r5, r1
   1460c:	e764      	b.n	144d8 <__aeabi_fsub+0x64>
   1460e:	2201      	movs	r2, #1
   14610:	2300      	movs	r3, #0
   14612:	402a      	ands	r2, r5
   14614:	e786      	b.n	14524 <__aeabi_fsub+0xb0>
   14616:	003b      	movs	r3, r7
   14618:	4a63      	ldr	r2, [pc, #396]	; (147a8 <__aeabi_fsub+0x334>)
   1461a:	1a24      	subs	r4, r4, r0
   1461c:	4013      	ands	r3, r2
   1461e:	e76f      	b.n	14500 <__aeabi_fsub+0x8c>
   14620:	2900      	cmp	r1, #0
   14622:	d16c      	bne.n	146fe <__aeabi_fsub+0x28a>
   14624:	1c61      	adds	r1, r4, #1
   14626:	b2c8      	uxtb	r0, r1
   14628:	2801      	cmp	r0, #1
   1462a:	dd4e      	ble.n	146ca <__aeabi_fsub+0x256>
   1462c:	29ff      	cmp	r1, #255	; 0xff
   1462e:	d049      	beq.n	146c4 <__aeabi_fsub+0x250>
   14630:	199b      	adds	r3, r3, r6
   14632:	085b      	lsrs	r3, r3, #1
   14634:	000c      	movs	r4, r1
   14636:	e763      	b.n	14500 <__aeabi_fsub+0x8c>
   14638:	2aff      	cmp	r2, #255	; 0xff
   1463a:	d041      	beq.n	146c0 <__aeabi_fsub+0x24c>
   1463c:	000a      	movs	r2, r1
   1463e:	e781      	b.n	14544 <__aeabi_fsub+0xd0>
   14640:	2601      	movs	r6, #1
   14642:	1b9b      	subs	r3, r3, r6
   14644:	e789      	b.n	1455a <__aeabi_fsub+0xe6>
   14646:	2c00      	cmp	r4, #0
   14648:	d01c      	beq.n	14684 <__aeabi_fsub+0x210>
   1464a:	28ff      	cmp	r0, #255	; 0xff
   1464c:	d021      	beq.n	14692 <__aeabi_fsub+0x21e>
   1464e:	2480      	movs	r4, #128	; 0x80
   14650:	04e4      	lsls	r4, r4, #19
   14652:	4252      	negs	r2, r2
   14654:	4323      	orrs	r3, r4
   14656:	2a1b      	cmp	r2, #27
   14658:	dd00      	ble.n	1465c <__aeabi_fsub+0x1e8>
   1465a:	e096      	b.n	1478a <__aeabi_fsub+0x316>
   1465c:	001c      	movs	r4, r3
   1465e:	2520      	movs	r5, #32
   14660:	40d4      	lsrs	r4, r2
   14662:	1aaa      	subs	r2, r5, r2
   14664:	4093      	lsls	r3, r2
   14666:	1e5a      	subs	r2, r3, #1
   14668:	4193      	sbcs	r3, r2
   1466a:	4323      	orrs	r3, r4
   1466c:	1af3      	subs	r3, r6, r3
   1466e:	0004      	movs	r4, r0
   14670:	000d      	movs	r5, r1
   14672:	e72d      	b.n	144d0 <__aeabi_fsub+0x5c>
   14674:	2f00      	cmp	r7, #0
   14676:	d000      	beq.n	1467a <__aeabi_fsub+0x206>
   14678:	e72e      	b.n	144d8 <__aeabi_fsub+0x64>
   1467a:	2200      	movs	r2, #0
   1467c:	2400      	movs	r4, #0
   1467e:	e7a9      	b.n	145d4 <__aeabi_fsub+0x160>
   14680:	000c      	movs	r4, r1
   14682:	e73d      	b.n	14500 <__aeabi_fsub+0x8c>
   14684:	2b00      	cmp	r3, #0
   14686:	d058      	beq.n	1473a <__aeabi_fsub+0x2c6>
   14688:	43d2      	mvns	r2, r2
   1468a:	2a00      	cmp	r2, #0
   1468c:	d0ee      	beq.n	1466c <__aeabi_fsub+0x1f8>
   1468e:	28ff      	cmp	r0, #255	; 0xff
   14690:	d1e1      	bne.n	14656 <__aeabi_fsub+0x1e2>
   14692:	0033      	movs	r3, r6
   14694:	24ff      	movs	r4, #255	; 0xff
   14696:	000d      	movs	r5, r1
   14698:	e732      	b.n	14500 <__aeabi_fsub+0x8c>
   1469a:	29ff      	cmp	r1, #255	; 0xff
   1469c:	d010      	beq.n	146c0 <__aeabi_fsub+0x24c>
   1469e:	0001      	movs	r1, r0
   146a0:	e778      	b.n	14594 <__aeabi_fsub+0x120>
   146a2:	2b00      	cmp	r3, #0
   146a4:	d06e      	beq.n	14784 <__aeabi_fsub+0x310>
   146a6:	24ff      	movs	r4, #255	; 0xff
   146a8:	2e00      	cmp	r6, #0
   146aa:	d100      	bne.n	146ae <__aeabi_fsub+0x23a>
   146ac:	e728      	b.n	14500 <__aeabi_fsub+0x8c>
   146ae:	2280      	movs	r2, #128	; 0x80
   146b0:	4651      	mov	r1, sl
   146b2:	03d2      	lsls	r2, r2, #15
   146b4:	4211      	tst	r1, r2
   146b6:	d003      	beq.n	146c0 <__aeabi_fsub+0x24c>
   146b8:	4661      	mov	r1, ip
   146ba:	4211      	tst	r1, r2
   146bc:	d100      	bne.n	146c0 <__aeabi_fsub+0x24c>
   146be:	0033      	movs	r3, r6
   146c0:	24ff      	movs	r4, #255	; 0xff
   146c2:	e71d      	b.n	14500 <__aeabi_fsub+0x8c>
   146c4:	24ff      	movs	r4, #255	; 0xff
   146c6:	2300      	movs	r3, #0
   146c8:	e72c      	b.n	14524 <__aeabi_fsub+0xb0>
   146ca:	2c00      	cmp	r4, #0
   146cc:	d1e9      	bne.n	146a2 <__aeabi_fsub+0x22e>
   146ce:	2b00      	cmp	r3, #0
   146d0:	d063      	beq.n	1479a <__aeabi_fsub+0x326>
   146d2:	2e00      	cmp	r6, #0
   146d4:	d100      	bne.n	146d8 <__aeabi_fsub+0x264>
   146d6:	e713      	b.n	14500 <__aeabi_fsub+0x8c>
   146d8:	199b      	adds	r3, r3, r6
   146da:	015a      	lsls	r2, r3, #5
   146dc:	d400      	bmi.n	146e0 <__aeabi_fsub+0x26c>
   146de:	e73e      	b.n	1455e <__aeabi_fsub+0xea>
   146e0:	4a31      	ldr	r2, [pc, #196]	; (147a8 <__aeabi_fsub+0x334>)
   146e2:	000c      	movs	r4, r1
   146e4:	4013      	ands	r3, r2
   146e6:	e70b      	b.n	14500 <__aeabi_fsub+0x8c>
   146e8:	2c00      	cmp	r4, #0
   146ea:	d11e      	bne.n	1472a <__aeabi_fsub+0x2b6>
   146ec:	2b00      	cmp	r3, #0
   146ee:	d12f      	bne.n	14750 <__aeabi_fsub+0x2dc>
   146f0:	2e00      	cmp	r6, #0
   146f2:	d04f      	beq.n	14794 <__aeabi_fsub+0x320>
   146f4:	0033      	movs	r3, r6
   146f6:	000d      	movs	r5, r1
   146f8:	e702      	b.n	14500 <__aeabi_fsub+0x8c>
   146fa:	2601      	movs	r6, #1
   146fc:	e755      	b.n	145aa <__aeabi_fsub+0x136>
   146fe:	2c00      	cmp	r4, #0
   14700:	d11f      	bne.n	14742 <__aeabi_fsub+0x2ce>
   14702:	2b00      	cmp	r3, #0
   14704:	d043      	beq.n	1478e <__aeabi_fsub+0x31a>
   14706:	43c9      	mvns	r1, r1
   14708:	2900      	cmp	r1, #0
   1470a:	d00b      	beq.n	14724 <__aeabi_fsub+0x2b0>
   1470c:	28ff      	cmp	r0, #255	; 0xff
   1470e:	d039      	beq.n	14784 <__aeabi_fsub+0x310>
   14710:	291b      	cmp	r1, #27
   14712:	dc44      	bgt.n	1479e <__aeabi_fsub+0x32a>
   14714:	001c      	movs	r4, r3
   14716:	2720      	movs	r7, #32
   14718:	40cc      	lsrs	r4, r1
   1471a:	1a79      	subs	r1, r7, r1
   1471c:	408b      	lsls	r3, r1
   1471e:	1e59      	subs	r1, r3, #1
   14720:	418b      	sbcs	r3, r1
   14722:	4323      	orrs	r3, r4
   14724:	199b      	adds	r3, r3, r6
   14726:	0004      	movs	r4, r0
   14728:	e740      	b.n	145ac <__aeabi_fsub+0x138>
   1472a:	2b00      	cmp	r3, #0
   1472c:	d11a      	bne.n	14764 <__aeabi_fsub+0x2f0>
   1472e:	2e00      	cmp	r6, #0
   14730:	d124      	bne.n	1477c <__aeabi_fsub+0x308>
   14732:	2780      	movs	r7, #128	; 0x80
   14734:	2200      	movs	r2, #0
   14736:	03ff      	lsls	r7, r7, #15
   14738:	e71b      	b.n	14572 <__aeabi_fsub+0xfe>
   1473a:	0033      	movs	r3, r6
   1473c:	0004      	movs	r4, r0
   1473e:	000d      	movs	r5, r1
   14740:	e6de      	b.n	14500 <__aeabi_fsub+0x8c>
   14742:	28ff      	cmp	r0, #255	; 0xff
   14744:	d01e      	beq.n	14784 <__aeabi_fsub+0x310>
   14746:	2480      	movs	r4, #128	; 0x80
   14748:	04e4      	lsls	r4, r4, #19
   1474a:	4249      	negs	r1, r1
   1474c:	4323      	orrs	r3, r4
   1474e:	e7df      	b.n	14710 <__aeabi_fsub+0x29c>
   14750:	2e00      	cmp	r6, #0
   14752:	d100      	bne.n	14756 <__aeabi_fsub+0x2e2>
   14754:	e6d4      	b.n	14500 <__aeabi_fsub+0x8c>
   14756:	1b9f      	subs	r7, r3, r6
   14758:	017a      	lsls	r2, r7, #5
   1475a:	d400      	bmi.n	1475e <__aeabi_fsub+0x2ea>
   1475c:	e737      	b.n	145ce <__aeabi_fsub+0x15a>
   1475e:	1af3      	subs	r3, r6, r3
   14760:	000d      	movs	r5, r1
   14762:	e6cd      	b.n	14500 <__aeabi_fsub+0x8c>
   14764:	24ff      	movs	r4, #255	; 0xff
   14766:	2e00      	cmp	r6, #0
   14768:	d100      	bne.n	1476c <__aeabi_fsub+0x2f8>
   1476a:	e6c9      	b.n	14500 <__aeabi_fsub+0x8c>
   1476c:	2280      	movs	r2, #128	; 0x80
   1476e:	4650      	mov	r0, sl
   14770:	03d2      	lsls	r2, r2, #15
   14772:	4210      	tst	r0, r2
   14774:	d0a4      	beq.n	146c0 <__aeabi_fsub+0x24c>
   14776:	4660      	mov	r0, ip
   14778:	4210      	tst	r0, r2
   1477a:	d1a1      	bne.n	146c0 <__aeabi_fsub+0x24c>
   1477c:	0033      	movs	r3, r6
   1477e:	000d      	movs	r5, r1
   14780:	24ff      	movs	r4, #255	; 0xff
   14782:	e6bd      	b.n	14500 <__aeabi_fsub+0x8c>
   14784:	0033      	movs	r3, r6
   14786:	24ff      	movs	r4, #255	; 0xff
   14788:	e6ba      	b.n	14500 <__aeabi_fsub+0x8c>
   1478a:	2301      	movs	r3, #1
   1478c:	e76e      	b.n	1466c <__aeabi_fsub+0x1f8>
   1478e:	0033      	movs	r3, r6
   14790:	0004      	movs	r4, r0
   14792:	e6b5      	b.n	14500 <__aeabi_fsub+0x8c>
   14794:	2700      	movs	r7, #0
   14796:	2200      	movs	r2, #0
   14798:	e71c      	b.n	145d4 <__aeabi_fsub+0x160>
   1479a:	0033      	movs	r3, r6
   1479c:	e6b0      	b.n	14500 <__aeabi_fsub+0x8c>
   1479e:	2301      	movs	r3, #1
   147a0:	e7c0      	b.n	14724 <__aeabi_fsub+0x2b0>
   147a2:	46c0      	nop			; (mov r8, r8)
   147a4:	7dffffff 	.word	0x7dffffff
   147a8:	fbffffff 	.word	0xfbffffff

000147ac <__aeabi_f2iz>:
   147ac:	0241      	lsls	r1, r0, #9
   147ae:	0043      	lsls	r3, r0, #1
   147b0:	0fc2      	lsrs	r2, r0, #31
   147b2:	0a49      	lsrs	r1, r1, #9
   147b4:	0e1b      	lsrs	r3, r3, #24
   147b6:	2000      	movs	r0, #0
   147b8:	2b7e      	cmp	r3, #126	; 0x7e
   147ba:	dd0d      	ble.n	147d8 <__aeabi_f2iz+0x2c>
   147bc:	2b9d      	cmp	r3, #157	; 0x9d
   147be:	dc0c      	bgt.n	147da <__aeabi_f2iz+0x2e>
   147c0:	2080      	movs	r0, #128	; 0x80
   147c2:	0400      	lsls	r0, r0, #16
   147c4:	4301      	orrs	r1, r0
   147c6:	2b95      	cmp	r3, #149	; 0x95
   147c8:	dc0a      	bgt.n	147e0 <__aeabi_f2iz+0x34>
   147ca:	2096      	movs	r0, #150	; 0x96
   147cc:	1ac3      	subs	r3, r0, r3
   147ce:	40d9      	lsrs	r1, r3
   147d0:	4248      	negs	r0, r1
   147d2:	2a00      	cmp	r2, #0
   147d4:	d100      	bne.n	147d8 <__aeabi_f2iz+0x2c>
   147d6:	0008      	movs	r0, r1
   147d8:	4770      	bx	lr
   147da:	4b03      	ldr	r3, [pc, #12]	; (147e8 <__aeabi_f2iz+0x3c>)
   147dc:	18d0      	adds	r0, r2, r3
   147de:	e7fb      	b.n	147d8 <__aeabi_f2iz+0x2c>
   147e0:	3b96      	subs	r3, #150	; 0x96
   147e2:	4099      	lsls	r1, r3
   147e4:	e7f4      	b.n	147d0 <__aeabi_f2iz+0x24>
   147e6:	46c0      	nop			; (mov r8, r8)
   147e8:	7fffffff 	.word	0x7fffffff

000147ec <__aeabi_i2f>:
   147ec:	b570      	push	{r4, r5, r6, lr}
   147ee:	2800      	cmp	r0, #0
   147f0:	d030      	beq.n	14854 <__aeabi_i2f+0x68>
   147f2:	17c3      	asrs	r3, r0, #31
   147f4:	18c4      	adds	r4, r0, r3
   147f6:	405c      	eors	r4, r3
   147f8:	0fc5      	lsrs	r5, r0, #31
   147fa:	0020      	movs	r0, r4
   147fc:	f001 fef0 	bl	165e0 <__clzsi2>
   14800:	239e      	movs	r3, #158	; 0x9e
   14802:	1a1b      	subs	r3, r3, r0
   14804:	2b96      	cmp	r3, #150	; 0x96
   14806:	dc0d      	bgt.n	14824 <__aeabi_i2f+0x38>
   14808:	2296      	movs	r2, #150	; 0x96
   1480a:	1ad2      	subs	r2, r2, r3
   1480c:	4094      	lsls	r4, r2
   1480e:	002a      	movs	r2, r5
   14810:	0264      	lsls	r4, r4, #9
   14812:	0a64      	lsrs	r4, r4, #9
   14814:	b2db      	uxtb	r3, r3
   14816:	0264      	lsls	r4, r4, #9
   14818:	05db      	lsls	r3, r3, #23
   1481a:	0a60      	lsrs	r0, r4, #9
   1481c:	07d2      	lsls	r2, r2, #31
   1481e:	4318      	orrs	r0, r3
   14820:	4310      	orrs	r0, r2
   14822:	bd70      	pop	{r4, r5, r6, pc}
   14824:	2b99      	cmp	r3, #153	; 0x99
   14826:	dc19      	bgt.n	1485c <__aeabi_i2f+0x70>
   14828:	2299      	movs	r2, #153	; 0x99
   1482a:	1ad2      	subs	r2, r2, r3
   1482c:	2a00      	cmp	r2, #0
   1482e:	dd29      	ble.n	14884 <__aeabi_i2f+0x98>
   14830:	4094      	lsls	r4, r2
   14832:	0022      	movs	r2, r4
   14834:	4c14      	ldr	r4, [pc, #80]	; (14888 <__aeabi_i2f+0x9c>)
   14836:	4014      	ands	r4, r2
   14838:	0751      	lsls	r1, r2, #29
   1483a:	d004      	beq.n	14846 <__aeabi_i2f+0x5a>
   1483c:	210f      	movs	r1, #15
   1483e:	400a      	ands	r2, r1
   14840:	2a04      	cmp	r2, #4
   14842:	d000      	beq.n	14846 <__aeabi_i2f+0x5a>
   14844:	3404      	adds	r4, #4
   14846:	0162      	lsls	r2, r4, #5
   14848:	d413      	bmi.n	14872 <__aeabi_i2f+0x86>
   1484a:	01a4      	lsls	r4, r4, #6
   1484c:	0a64      	lsrs	r4, r4, #9
   1484e:	b2db      	uxtb	r3, r3
   14850:	002a      	movs	r2, r5
   14852:	e7e0      	b.n	14816 <__aeabi_i2f+0x2a>
   14854:	2200      	movs	r2, #0
   14856:	2300      	movs	r3, #0
   14858:	2400      	movs	r4, #0
   1485a:	e7dc      	b.n	14816 <__aeabi_i2f+0x2a>
   1485c:	2205      	movs	r2, #5
   1485e:	0021      	movs	r1, r4
   14860:	1a12      	subs	r2, r2, r0
   14862:	40d1      	lsrs	r1, r2
   14864:	22b9      	movs	r2, #185	; 0xb9
   14866:	1ad2      	subs	r2, r2, r3
   14868:	4094      	lsls	r4, r2
   1486a:	1e62      	subs	r2, r4, #1
   1486c:	4194      	sbcs	r4, r2
   1486e:	430c      	orrs	r4, r1
   14870:	e7da      	b.n	14828 <__aeabi_i2f+0x3c>
   14872:	4b05      	ldr	r3, [pc, #20]	; (14888 <__aeabi_i2f+0x9c>)
   14874:	002a      	movs	r2, r5
   14876:	401c      	ands	r4, r3
   14878:	239f      	movs	r3, #159	; 0x9f
   1487a:	01a4      	lsls	r4, r4, #6
   1487c:	1a1b      	subs	r3, r3, r0
   1487e:	0a64      	lsrs	r4, r4, #9
   14880:	b2db      	uxtb	r3, r3
   14882:	e7c8      	b.n	14816 <__aeabi_i2f+0x2a>
   14884:	0022      	movs	r2, r4
   14886:	e7d5      	b.n	14834 <__aeabi_i2f+0x48>
   14888:	fbffffff 	.word	0xfbffffff

0001488c <__aeabi_ui2f>:
   1488c:	b510      	push	{r4, lr}
   1488e:	1e04      	subs	r4, r0, #0
   14890:	d027      	beq.n	148e2 <__aeabi_ui2f+0x56>
   14892:	f001 fea5 	bl	165e0 <__clzsi2>
   14896:	239e      	movs	r3, #158	; 0x9e
   14898:	1a1b      	subs	r3, r3, r0
   1489a:	2b96      	cmp	r3, #150	; 0x96
   1489c:	dc0a      	bgt.n	148b4 <__aeabi_ui2f+0x28>
   1489e:	2296      	movs	r2, #150	; 0x96
   148a0:	1ad2      	subs	r2, r2, r3
   148a2:	4094      	lsls	r4, r2
   148a4:	0264      	lsls	r4, r4, #9
   148a6:	0a64      	lsrs	r4, r4, #9
   148a8:	b2db      	uxtb	r3, r3
   148aa:	0264      	lsls	r4, r4, #9
   148ac:	05db      	lsls	r3, r3, #23
   148ae:	0a60      	lsrs	r0, r4, #9
   148b0:	4318      	orrs	r0, r3
   148b2:	bd10      	pop	{r4, pc}
   148b4:	2b99      	cmp	r3, #153	; 0x99
   148b6:	dc17      	bgt.n	148e8 <__aeabi_ui2f+0x5c>
   148b8:	2299      	movs	r2, #153	; 0x99
   148ba:	1ad2      	subs	r2, r2, r3
   148bc:	2a00      	cmp	r2, #0
   148be:	dd27      	ble.n	14910 <__aeabi_ui2f+0x84>
   148c0:	4094      	lsls	r4, r2
   148c2:	0022      	movs	r2, r4
   148c4:	4c13      	ldr	r4, [pc, #76]	; (14914 <__aeabi_ui2f+0x88>)
   148c6:	4014      	ands	r4, r2
   148c8:	0751      	lsls	r1, r2, #29
   148ca:	d004      	beq.n	148d6 <__aeabi_ui2f+0x4a>
   148cc:	210f      	movs	r1, #15
   148ce:	400a      	ands	r2, r1
   148d0:	2a04      	cmp	r2, #4
   148d2:	d000      	beq.n	148d6 <__aeabi_ui2f+0x4a>
   148d4:	3404      	adds	r4, #4
   148d6:	0162      	lsls	r2, r4, #5
   148d8:	d412      	bmi.n	14900 <__aeabi_ui2f+0x74>
   148da:	01a4      	lsls	r4, r4, #6
   148dc:	0a64      	lsrs	r4, r4, #9
   148de:	b2db      	uxtb	r3, r3
   148e0:	e7e3      	b.n	148aa <__aeabi_ui2f+0x1e>
   148e2:	2300      	movs	r3, #0
   148e4:	2400      	movs	r4, #0
   148e6:	e7e0      	b.n	148aa <__aeabi_ui2f+0x1e>
   148e8:	22b9      	movs	r2, #185	; 0xb9
   148ea:	0021      	movs	r1, r4
   148ec:	1ad2      	subs	r2, r2, r3
   148ee:	4091      	lsls	r1, r2
   148f0:	000a      	movs	r2, r1
   148f2:	1e51      	subs	r1, r2, #1
   148f4:	418a      	sbcs	r2, r1
   148f6:	2105      	movs	r1, #5
   148f8:	1a09      	subs	r1, r1, r0
   148fa:	40cc      	lsrs	r4, r1
   148fc:	4314      	orrs	r4, r2
   148fe:	e7db      	b.n	148b8 <__aeabi_ui2f+0x2c>
   14900:	4b04      	ldr	r3, [pc, #16]	; (14914 <__aeabi_ui2f+0x88>)
   14902:	401c      	ands	r4, r3
   14904:	239f      	movs	r3, #159	; 0x9f
   14906:	01a4      	lsls	r4, r4, #6
   14908:	1a1b      	subs	r3, r3, r0
   1490a:	0a64      	lsrs	r4, r4, #9
   1490c:	b2db      	uxtb	r3, r3
   1490e:	e7cc      	b.n	148aa <__aeabi_ui2f+0x1e>
   14910:	0022      	movs	r2, r4
   14912:	e7d7      	b.n	148c4 <__aeabi_ui2f+0x38>
   14914:	fbffffff 	.word	0xfbffffff

00014918 <__aeabi_dadd>:
   14918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1491a:	4645      	mov	r5, r8
   1491c:	46de      	mov	lr, fp
   1491e:	4657      	mov	r7, sl
   14920:	464e      	mov	r6, r9
   14922:	030c      	lsls	r4, r1, #12
   14924:	b5e0      	push	{r5, r6, r7, lr}
   14926:	004e      	lsls	r6, r1, #1
   14928:	0fc9      	lsrs	r1, r1, #31
   1492a:	4688      	mov	r8, r1
   1492c:	000d      	movs	r5, r1
   1492e:	0a61      	lsrs	r1, r4, #9
   14930:	0f44      	lsrs	r4, r0, #29
   14932:	430c      	orrs	r4, r1
   14934:	00c7      	lsls	r7, r0, #3
   14936:	0319      	lsls	r1, r3, #12
   14938:	0058      	lsls	r0, r3, #1
   1493a:	0fdb      	lsrs	r3, r3, #31
   1493c:	469b      	mov	fp, r3
   1493e:	0a4b      	lsrs	r3, r1, #9
   14940:	0f51      	lsrs	r1, r2, #29
   14942:	430b      	orrs	r3, r1
   14944:	0d76      	lsrs	r6, r6, #21
   14946:	0d40      	lsrs	r0, r0, #21
   14948:	0019      	movs	r1, r3
   1494a:	00d2      	lsls	r2, r2, #3
   1494c:	45d8      	cmp	r8, fp
   1494e:	d100      	bne.n	14952 <__aeabi_dadd+0x3a>
   14950:	e0ae      	b.n	14ab0 <__aeabi_dadd+0x198>
   14952:	1a35      	subs	r5, r6, r0
   14954:	2d00      	cmp	r5, #0
   14956:	dc00      	bgt.n	1495a <__aeabi_dadd+0x42>
   14958:	e0f6      	b.n	14b48 <__aeabi_dadd+0x230>
   1495a:	2800      	cmp	r0, #0
   1495c:	d10f      	bne.n	1497e <__aeabi_dadd+0x66>
   1495e:	4313      	orrs	r3, r2
   14960:	d100      	bne.n	14964 <__aeabi_dadd+0x4c>
   14962:	e0db      	b.n	14b1c <__aeabi_dadd+0x204>
   14964:	1e6b      	subs	r3, r5, #1
   14966:	2b00      	cmp	r3, #0
   14968:	d000      	beq.n	1496c <__aeabi_dadd+0x54>
   1496a:	e137      	b.n	14bdc <__aeabi_dadd+0x2c4>
   1496c:	1aba      	subs	r2, r7, r2
   1496e:	4297      	cmp	r7, r2
   14970:	41bf      	sbcs	r7, r7
   14972:	1a64      	subs	r4, r4, r1
   14974:	427f      	negs	r7, r7
   14976:	1be4      	subs	r4, r4, r7
   14978:	2601      	movs	r6, #1
   1497a:	0017      	movs	r7, r2
   1497c:	e024      	b.n	149c8 <__aeabi_dadd+0xb0>
   1497e:	4bc6      	ldr	r3, [pc, #792]	; (14c98 <__aeabi_dadd+0x380>)
   14980:	429e      	cmp	r6, r3
   14982:	d04d      	beq.n	14a20 <__aeabi_dadd+0x108>
   14984:	2380      	movs	r3, #128	; 0x80
   14986:	041b      	lsls	r3, r3, #16
   14988:	4319      	orrs	r1, r3
   1498a:	2d38      	cmp	r5, #56	; 0x38
   1498c:	dd00      	ble.n	14990 <__aeabi_dadd+0x78>
   1498e:	e107      	b.n	14ba0 <__aeabi_dadd+0x288>
   14990:	2d1f      	cmp	r5, #31
   14992:	dd00      	ble.n	14996 <__aeabi_dadd+0x7e>
   14994:	e138      	b.n	14c08 <__aeabi_dadd+0x2f0>
   14996:	2020      	movs	r0, #32
   14998:	1b43      	subs	r3, r0, r5
   1499a:	469a      	mov	sl, r3
   1499c:	000b      	movs	r3, r1
   1499e:	4650      	mov	r0, sl
   149a0:	4083      	lsls	r3, r0
   149a2:	4699      	mov	r9, r3
   149a4:	0013      	movs	r3, r2
   149a6:	4648      	mov	r0, r9
   149a8:	40eb      	lsrs	r3, r5
   149aa:	4318      	orrs	r0, r3
   149ac:	0003      	movs	r3, r0
   149ae:	4650      	mov	r0, sl
   149b0:	4082      	lsls	r2, r0
   149b2:	1e50      	subs	r0, r2, #1
   149b4:	4182      	sbcs	r2, r0
   149b6:	40e9      	lsrs	r1, r5
   149b8:	431a      	orrs	r2, r3
   149ba:	1aba      	subs	r2, r7, r2
   149bc:	1a61      	subs	r1, r4, r1
   149be:	4297      	cmp	r7, r2
   149c0:	41a4      	sbcs	r4, r4
   149c2:	0017      	movs	r7, r2
   149c4:	4264      	negs	r4, r4
   149c6:	1b0c      	subs	r4, r1, r4
   149c8:	0223      	lsls	r3, r4, #8
   149ca:	d562      	bpl.n	14a92 <__aeabi_dadd+0x17a>
   149cc:	0264      	lsls	r4, r4, #9
   149ce:	0a65      	lsrs	r5, r4, #9
   149d0:	2d00      	cmp	r5, #0
   149d2:	d100      	bne.n	149d6 <__aeabi_dadd+0xbe>
   149d4:	e0df      	b.n	14b96 <__aeabi_dadd+0x27e>
   149d6:	0028      	movs	r0, r5
   149d8:	f001 fe02 	bl	165e0 <__clzsi2>
   149dc:	0003      	movs	r3, r0
   149de:	3b08      	subs	r3, #8
   149e0:	2b1f      	cmp	r3, #31
   149e2:	dd00      	ble.n	149e6 <__aeabi_dadd+0xce>
   149e4:	e0d2      	b.n	14b8c <__aeabi_dadd+0x274>
   149e6:	2220      	movs	r2, #32
   149e8:	003c      	movs	r4, r7
   149ea:	1ad2      	subs	r2, r2, r3
   149ec:	409d      	lsls	r5, r3
   149ee:	40d4      	lsrs	r4, r2
   149f0:	409f      	lsls	r7, r3
   149f2:	4325      	orrs	r5, r4
   149f4:	429e      	cmp	r6, r3
   149f6:	dd00      	ble.n	149fa <__aeabi_dadd+0xe2>
   149f8:	e0c4      	b.n	14b84 <__aeabi_dadd+0x26c>
   149fa:	1b9e      	subs	r6, r3, r6
   149fc:	1c73      	adds	r3, r6, #1
   149fe:	2b1f      	cmp	r3, #31
   14a00:	dd00      	ble.n	14a04 <__aeabi_dadd+0xec>
   14a02:	e0f1      	b.n	14be8 <__aeabi_dadd+0x2d0>
   14a04:	2220      	movs	r2, #32
   14a06:	0038      	movs	r0, r7
   14a08:	0029      	movs	r1, r5
   14a0a:	1ad2      	subs	r2, r2, r3
   14a0c:	40d8      	lsrs	r0, r3
   14a0e:	4091      	lsls	r1, r2
   14a10:	4097      	lsls	r7, r2
   14a12:	002c      	movs	r4, r5
   14a14:	4301      	orrs	r1, r0
   14a16:	1e78      	subs	r0, r7, #1
   14a18:	4187      	sbcs	r7, r0
   14a1a:	40dc      	lsrs	r4, r3
   14a1c:	2600      	movs	r6, #0
   14a1e:	430f      	orrs	r7, r1
   14a20:	077b      	lsls	r3, r7, #29
   14a22:	d009      	beq.n	14a38 <__aeabi_dadd+0x120>
   14a24:	230f      	movs	r3, #15
   14a26:	403b      	ands	r3, r7
   14a28:	2b04      	cmp	r3, #4
   14a2a:	d005      	beq.n	14a38 <__aeabi_dadd+0x120>
   14a2c:	1d3b      	adds	r3, r7, #4
   14a2e:	42bb      	cmp	r3, r7
   14a30:	41bf      	sbcs	r7, r7
   14a32:	427f      	negs	r7, r7
   14a34:	19e4      	adds	r4, r4, r7
   14a36:	001f      	movs	r7, r3
   14a38:	0223      	lsls	r3, r4, #8
   14a3a:	d52c      	bpl.n	14a96 <__aeabi_dadd+0x17e>
   14a3c:	4b96      	ldr	r3, [pc, #600]	; (14c98 <__aeabi_dadd+0x380>)
   14a3e:	3601      	adds	r6, #1
   14a40:	429e      	cmp	r6, r3
   14a42:	d100      	bne.n	14a46 <__aeabi_dadd+0x12e>
   14a44:	e09a      	b.n	14b7c <__aeabi_dadd+0x264>
   14a46:	4645      	mov	r5, r8
   14a48:	4b94      	ldr	r3, [pc, #592]	; (14c9c <__aeabi_dadd+0x384>)
   14a4a:	08ff      	lsrs	r7, r7, #3
   14a4c:	401c      	ands	r4, r3
   14a4e:	0760      	lsls	r0, r4, #29
   14a50:	0576      	lsls	r6, r6, #21
   14a52:	0264      	lsls	r4, r4, #9
   14a54:	4307      	orrs	r7, r0
   14a56:	0b24      	lsrs	r4, r4, #12
   14a58:	0d76      	lsrs	r6, r6, #21
   14a5a:	2100      	movs	r1, #0
   14a5c:	0324      	lsls	r4, r4, #12
   14a5e:	0b23      	lsrs	r3, r4, #12
   14a60:	0d0c      	lsrs	r4, r1, #20
   14a62:	4a8f      	ldr	r2, [pc, #572]	; (14ca0 <__aeabi_dadd+0x388>)
   14a64:	0524      	lsls	r4, r4, #20
   14a66:	431c      	orrs	r4, r3
   14a68:	4014      	ands	r4, r2
   14a6a:	0533      	lsls	r3, r6, #20
   14a6c:	4323      	orrs	r3, r4
   14a6e:	005b      	lsls	r3, r3, #1
   14a70:	07ed      	lsls	r5, r5, #31
   14a72:	085b      	lsrs	r3, r3, #1
   14a74:	432b      	orrs	r3, r5
   14a76:	0038      	movs	r0, r7
   14a78:	0019      	movs	r1, r3
   14a7a:	bc3c      	pop	{r2, r3, r4, r5}
   14a7c:	4690      	mov	r8, r2
   14a7e:	4699      	mov	r9, r3
   14a80:	46a2      	mov	sl, r4
   14a82:	46ab      	mov	fp, r5
   14a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a86:	4664      	mov	r4, ip
   14a88:	4304      	orrs	r4, r0
   14a8a:	d100      	bne.n	14a8e <__aeabi_dadd+0x176>
   14a8c:	e211      	b.n	14eb2 <__aeabi_dadd+0x59a>
   14a8e:	0004      	movs	r4, r0
   14a90:	4667      	mov	r7, ip
   14a92:	077b      	lsls	r3, r7, #29
   14a94:	d1c6      	bne.n	14a24 <__aeabi_dadd+0x10c>
   14a96:	4645      	mov	r5, r8
   14a98:	0760      	lsls	r0, r4, #29
   14a9a:	08ff      	lsrs	r7, r7, #3
   14a9c:	4307      	orrs	r7, r0
   14a9e:	08e4      	lsrs	r4, r4, #3
   14aa0:	4b7d      	ldr	r3, [pc, #500]	; (14c98 <__aeabi_dadd+0x380>)
   14aa2:	429e      	cmp	r6, r3
   14aa4:	d030      	beq.n	14b08 <__aeabi_dadd+0x1f0>
   14aa6:	0324      	lsls	r4, r4, #12
   14aa8:	0576      	lsls	r6, r6, #21
   14aaa:	0b24      	lsrs	r4, r4, #12
   14aac:	0d76      	lsrs	r6, r6, #21
   14aae:	e7d4      	b.n	14a5a <__aeabi_dadd+0x142>
   14ab0:	1a33      	subs	r3, r6, r0
   14ab2:	469a      	mov	sl, r3
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	dd78      	ble.n	14baa <__aeabi_dadd+0x292>
   14ab8:	2800      	cmp	r0, #0
   14aba:	d031      	beq.n	14b20 <__aeabi_dadd+0x208>
   14abc:	4876      	ldr	r0, [pc, #472]	; (14c98 <__aeabi_dadd+0x380>)
   14abe:	4286      	cmp	r6, r0
   14ac0:	d0ae      	beq.n	14a20 <__aeabi_dadd+0x108>
   14ac2:	2080      	movs	r0, #128	; 0x80
   14ac4:	0400      	lsls	r0, r0, #16
   14ac6:	4301      	orrs	r1, r0
   14ac8:	4653      	mov	r3, sl
   14aca:	2b38      	cmp	r3, #56	; 0x38
   14acc:	dc00      	bgt.n	14ad0 <__aeabi_dadd+0x1b8>
   14ace:	e0e9      	b.n	14ca4 <__aeabi_dadd+0x38c>
   14ad0:	430a      	orrs	r2, r1
   14ad2:	1e51      	subs	r1, r2, #1
   14ad4:	418a      	sbcs	r2, r1
   14ad6:	2100      	movs	r1, #0
   14ad8:	19d2      	adds	r2, r2, r7
   14ada:	42ba      	cmp	r2, r7
   14adc:	41bf      	sbcs	r7, r7
   14ade:	1909      	adds	r1, r1, r4
   14ae0:	427c      	negs	r4, r7
   14ae2:	0017      	movs	r7, r2
   14ae4:	190c      	adds	r4, r1, r4
   14ae6:	0223      	lsls	r3, r4, #8
   14ae8:	d5d3      	bpl.n	14a92 <__aeabi_dadd+0x17a>
   14aea:	4b6b      	ldr	r3, [pc, #428]	; (14c98 <__aeabi_dadd+0x380>)
   14aec:	3601      	adds	r6, #1
   14aee:	429e      	cmp	r6, r3
   14af0:	d100      	bne.n	14af4 <__aeabi_dadd+0x1dc>
   14af2:	e13a      	b.n	14d6a <__aeabi_dadd+0x452>
   14af4:	2001      	movs	r0, #1
   14af6:	4b69      	ldr	r3, [pc, #420]	; (14c9c <__aeabi_dadd+0x384>)
   14af8:	401c      	ands	r4, r3
   14afa:	087b      	lsrs	r3, r7, #1
   14afc:	4007      	ands	r7, r0
   14afe:	431f      	orrs	r7, r3
   14b00:	07e0      	lsls	r0, r4, #31
   14b02:	4307      	orrs	r7, r0
   14b04:	0864      	lsrs	r4, r4, #1
   14b06:	e78b      	b.n	14a20 <__aeabi_dadd+0x108>
   14b08:	0023      	movs	r3, r4
   14b0a:	433b      	orrs	r3, r7
   14b0c:	d100      	bne.n	14b10 <__aeabi_dadd+0x1f8>
   14b0e:	e1cb      	b.n	14ea8 <__aeabi_dadd+0x590>
   14b10:	2280      	movs	r2, #128	; 0x80
   14b12:	0312      	lsls	r2, r2, #12
   14b14:	4314      	orrs	r4, r2
   14b16:	0324      	lsls	r4, r4, #12
   14b18:	0b24      	lsrs	r4, r4, #12
   14b1a:	e79e      	b.n	14a5a <__aeabi_dadd+0x142>
   14b1c:	002e      	movs	r6, r5
   14b1e:	e77f      	b.n	14a20 <__aeabi_dadd+0x108>
   14b20:	0008      	movs	r0, r1
   14b22:	4310      	orrs	r0, r2
   14b24:	d100      	bne.n	14b28 <__aeabi_dadd+0x210>
   14b26:	e0b4      	b.n	14c92 <__aeabi_dadd+0x37a>
   14b28:	1e58      	subs	r0, r3, #1
   14b2a:	2800      	cmp	r0, #0
   14b2c:	d000      	beq.n	14b30 <__aeabi_dadd+0x218>
   14b2e:	e0de      	b.n	14cee <__aeabi_dadd+0x3d6>
   14b30:	18ba      	adds	r2, r7, r2
   14b32:	42ba      	cmp	r2, r7
   14b34:	419b      	sbcs	r3, r3
   14b36:	1864      	adds	r4, r4, r1
   14b38:	425b      	negs	r3, r3
   14b3a:	18e4      	adds	r4, r4, r3
   14b3c:	0017      	movs	r7, r2
   14b3e:	2601      	movs	r6, #1
   14b40:	0223      	lsls	r3, r4, #8
   14b42:	d5a6      	bpl.n	14a92 <__aeabi_dadd+0x17a>
   14b44:	2602      	movs	r6, #2
   14b46:	e7d5      	b.n	14af4 <__aeabi_dadd+0x1dc>
   14b48:	2d00      	cmp	r5, #0
   14b4a:	d16e      	bne.n	14c2a <__aeabi_dadd+0x312>
   14b4c:	1c70      	adds	r0, r6, #1
   14b4e:	0540      	lsls	r0, r0, #21
   14b50:	0d40      	lsrs	r0, r0, #21
   14b52:	2801      	cmp	r0, #1
   14b54:	dc00      	bgt.n	14b58 <__aeabi_dadd+0x240>
   14b56:	e0f9      	b.n	14d4c <__aeabi_dadd+0x434>
   14b58:	1ab8      	subs	r0, r7, r2
   14b5a:	4684      	mov	ip, r0
   14b5c:	4287      	cmp	r7, r0
   14b5e:	4180      	sbcs	r0, r0
   14b60:	1ae5      	subs	r5, r4, r3
   14b62:	4240      	negs	r0, r0
   14b64:	1a2d      	subs	r5, r5, r0
   14b66:	0228      	lsls	r0, r5, #8
   14b68:	d400      	bmi.n	14b6c <__aeabi_dadd+0x254>
   14b6a:	e089      	b.n	14c80 <__aeabi_dadd+0x368>
   14b6c:	1bd7      	subs	r7, r2, r7
   14b6e:	42ba      	cmp	r2, r7
   14b70:	4192      	sbcs	r2, r2
   14b72:	1b1c      	subs	r4, r3, r4
   14b74:	4252      	negs	r2, r2
   14b76:	1aa5      	subs	r5, r4, r2
   14b78:	46d8      	mov	r8, fp
   14b7a:	e729      	b.n	149d0 <__aeabi_dadd+0xb8>
   14b7c:	4645      	mov	r5, r8
   14b7e:	2400      	movs	r4, #0
   14b80:	2700      	movs	r7, #0
   14b82:	e76a      	b.n	14a5a <__aeabi_dadd+0x142>
   14b84:	4c45      	ldr	r4, [pc, #276]	; (14c9c <__aeabi_dadd+0x384>)
   14b86:	1af6      	subs	r6, r6, r3
   14b88:	402c      	ands	r4, r5
   14b8a:	e749      	b.n	14a20 <__aeabi_dadd+0x108>
   14b8c:	003d      	movs	r5, r7
   14b8e:	3828      	subs	r0, #40	; 0x28
   14b90:	4085      	lsls	r5, r0
   14b92:	2700      	movs	r7, #0
   14b94:	e72e      	b.n	149f4 <__aeabi_dadd+0xdc>
   14b96:	0038      	movs	r0, r7
   14b98:	f001 fd22 	bl	165e0 <__clzsi2>
   14b9c:	3020      	adds	r0, #32
   14b9e:	e71d      	b.n	149dc <__aeabi_dadd+0xc4>
   14ba0:	430a      	orrs	r2, r1
   14ba2:	1e51      	subs	r1, r2, #1
   14ba4:	418a      	sbcs	r2, r1
   14ba6:	2100      	movs	r1, #0
   14ba8:	e707      	b.n	149ba <__aeabi_dadd+0xa2>
   14baa:	2b00      	cmp	r3, #0
   14bac:	d000      	beq.n	14bb0 <__aeabi_dadd+0x298>
   14bae:	e0f3      	b.n	14d98 <__aeabi_dadd+0x480>
   14bb0:	1c70      	adds	r0, r6, #1
   14bb2:	0543      	lsls	r3, r0, #21
   14bb4:	0d5b      	lsrs	r3, r3, #21
   14bb6:	2b01      	cmp	r3, #1
   14bb8:	dc00      	bgt.n	14bbc <__aeabi_dadd+0x2a4>
   14bba:	e0ad      	b.n	14d18 <__aeabi_dadd+0x400>
   14bbc:	4b36      	ldr	r3, [pc, #216]	; (14c98 <__aeabi_dadd+0x380>)
   14bbe:	4298      	cmp	r0, r3
   14bc0:	d100      	bne.n	14bc4 <__aeabi_dadd+0x2ac>
   14bc2:	e0d1      	b.n	14d68 <__aeabi_dadd+0x450>
   14bc4:	18ba      	adds	r2, r7, r2
   14bc6:	42ba      	cmp	r2, r7
   14bc8:	41bf      	sbcs	r7, r7
   14bca:	1864      	adds	r4, r4, r1
   14bcc:	427f      	negs	r7, r7
   14bce:	19e4      	adds	r4, r4, r7
   14bd0:	07e7      	lsls	r7, r4, #31
   14bd2:	0852      	lsrs	r2, r2, #1
   14bd4:	4317      	orrs	r7, r2
   14bd6:	0864      	lsrs	r4, r4, #1
   14bd8:	0006      	movs	r6, r0
   14bda:	e721      	b.n	14a20 <__aeabi_dadd+0x108>
   14bdc:	482e      	ldr	r0, [pc, #184]	; (14c98 <__aeabi_dadd+0x380>)
   14bde:	4285      	cmp	r5, r0
   14be0:	d100      	bne.n	14be4 <__aeabi_dadd+0x2cc>
   14be2:	e093      	b.n	14d0c <__aeabi_dadd+0x3f4>
   14be4:	001d      	movs	r5, r3
   14be6:	e6d0      	b.n	1498a <__aeabi_dadd+0x72>
   14be8:	0029      	movs	r1, r5
   14bea:	3e1f      	subs	r6, #31
   14bec:	40f1      	lsrs	r1, r6
   14bee:	2b20      	cmp	r3, #32
   14bf0:	d100      	bne.n	14bf4 <__aeabi_dadd+0x2dc>
   14bf2:	e08d      	b.n	14d10 <__aeabi_dadd+0x3f8>
   14bf4:	2240      	movs	r2, #64	; 0x40
   14bf6:	1ad3      	subs	r3, r2, r3
   14bf8:	409d      	lsls	r5, r3
   14bfa:	432f      	orrs	r7, r5
   14bfc:	1e7d      	subs	r5, r7, #1
   14bfe:	41af      	sbcs	r7, r5
   14c00:	2400      	movs	r4, #0
   14c02:	430f      	orrs	r7, r1
   14c04:	2600      	movs	r6, #0
   14c06:	e744      	b.n	14a92 <__aeabi_dadd+0x17a>
   14c08:	002b      	movs	r3, r5
   14c0a:	0008      	movs	r0, r1
   14c0c:	3b20      	subs	r3, #32
   14c0e:	40d8      	lsrs	r0, r3
   14c10:	0003      	movs	r3, r0
   14c12:	2d20      	cmp	r5, #32
   14c14:	d100      	bne.n	14c18 <__aeabi_dadd+0x300>
   14c16:	e07d      	b.n	14d14 <__aeabi_dadd+0x3fc>
   14c18:	2040      	movs	r0, #64	; 0x40
   14c1a:	1b45      	subs	r5, r0, r5
   14c1c:	40a9      	lsls	r1, r5
   14c1e:	430a      	orrs	r2, r1
   14c20:	1e51      	subs	r1, r2, #1
   14c22:	418a      	sbcs	r2, r1
   14c24:	2100      	movs	r1, #0
   14c26:	431a      	orrs	r2, r3
   14c28:	e6c7      	b.n	149ba <__aeabi_dadd+0xa2>
   14c2a:	2e00      	cmp	r6, #0
   14c2c:	d050      	beq.n	14cd0 <__aeabi_dadd+0x3b8>
   14c2e:	4e1a      	ldr	r6, [pc, #104]	; (14c98 <__aeabi_dadd+0x380>)
   14c30:	42b0      	cmp	r0, r6
   14c32:	d057      	beq.n	14ce4 <__aeabi_dadd+0x3cc>
   14c34:	2680      	movs	r6, #128	; 0x80
   14c36:	426b      	negs	r3, r5
   14c38:	4699      	mov	r9, r3
   14c3a:	0436      	lsls	r6, r6, #16
   14c3c:	4334      	orrs	r4, r6
   14c3e:	464b      	mov	r3, r9
   14c40:	2b38      	cmp	r3, #56	; 0x38
   14c42:	dd00      	ble.n	14c46 <__aeabi_dadd+0x32e>
   14c44:	e0d6      	b.n	14df4 <__aeabi_dadd+0x4dc>
   14c46:	2b1f      	cmp	r3, #31
   14c48:	dd00      	ble.n	14c4c <__aeabi_dadd+0x334>
   14c4a:	e135      	b.n	14eb8 <__aeabi_dadd+0x5a0>
   14c4c:	2620      	movs	r6, #32
   14c4e:	1af5      	subs	r5, r6, r3
   14c50:	0026      	movs	r6, r4
   14c52:	40ae      	lsls	r6, r5
   14c54:	46b2      	mov	sl, r6
   14c56:	003e      	movs	r6, r7
   14c58:	40de      	lsrs	r6, r3
   14c5a:	46ac      	mov	ip, r5
   14c5c:	0035      	movs	r5, r6
   14c5e:	4656      	mov	r6, sl
   14c60:	432e      	orrs	r6, r5
   14c62:	4665      	mov	r5, ip
   14c64:	40af      	lsls	r7, r5
   14c66:	1e7d      	subs	r5, r7, #1
   14c68:	41af      	sbcs	r7, r5
   14c6a:	40dc      	lsrs	r4, r3
   14c6c:	4337      	orrs	r7, r6
   14c6e:	1bd7      	subs	r7, r2, r7
   14c70:	42ba      	cmp	r2, r7
   14c72:	4192      	sbcs	r2, r2
   14c74:	1b0c      	subs	r4, r1, r4
   14c76:	4252      	negs	r2, r2
   14c78:	1aa4      	subs	r4, r4, r2
   14c7a:	0006      	movs	r6, r0
   14c7c:	46d8      	mov	r8, fp
   14c7e:	e6a3      	b.n	149c8 <__aeabi_dadd+0xb0>
   14c80:	4664      	mov	r4, ip
   14c82:	4667      	mov	r7, ip
   14c84:	432c      	orrs	r4, r5
   14c86:	d000      	beq.n	14c8a <__aeabi_dadd+0x372>
   14c88:	e6a2      	b.n	149d0 <__aeabi_dadd+0xb8>
   14c8a:	2500      	movs	r5, #0
   14c8c:	2600      	movs	r6, #0
   14c8e:	2700      	movs	r7, #0
   14c90:	e706      	b.n	14aa0 <__aeabi_dadd+0x188>
   14c92:	001e      	movs	r6, r3
   14c94:	e6c4      	b.n	14a20 <__aeabi_dadd+0x108>
   14c96:	46c0      	nop			; (mov r8, r8)
   14c98:	000007ff 	.word	0x000007ff
   14c9c:	ff7fffff 	.word	0xff7fffff
   14ca0:	800fffff 	.word	0x800fffff
   14ca4:	2b1f      	cmp	r3, #31
   14ca6:	dc63      	bgt.n	14d70 <__aeabi_dadd+0x458>
   14ca8:	2020      	movs	r0, #32
   14caa:	1ac3      	subs	r3, r0, r3
   14cac:	0008      	movs	r0, r1
   14cae:	4098      	lsls	r0, r3
   14cb0:	469c      	mov	ip, r3
   14cb2:	4683      	mov	fp, r0
   14cb4:	4653      	mov	r3, sl
   14cb6:	0010      	movs	r0, r2
   14cb8:	40d8      	lsrs	r0, r3
   14cba:	0003      	movs	r3, r0
   14cbc:	4658      	mov	r0, fp
   14cbe:	4318      	orrs	r0, r3
   14cc0:	4663      	mov	r3, ip
   14cc2:	409a      	lsls	r2, r3
   14cc4:	1e53      	subs	r3, r2, #1
   14cc6:	419a      	sbcs	r2, r3
   14cc8:	4653      	mov	r3, sl
   14cca:	4302      	orrs	r2, r0
   14ccc:	40d9      	lsrs	r1, r3
   14cce:	e703      	b.n	14ad8 <__aeabi_dadd+0x1c0>
   14cd0:	0026      	movs	r6, r4
   14cd2:	433e      	orrs	r6, r7
   14cd4:	d006      	beq.n	14ce4 <__aeabi_dadd+0x3cc>
   14cd6:	43eb      	mvns	r3, r5
   14cd8:	4699      	mov	r9, r3
   14cda:	2b00      	cmp	r3, #0
   14cdc:	d0c7      	beq.n	14c6e <__aeabi_dadd+0x356>
   14cde:	4e94      	ldr	r6, [pc, #592]	; (14f30 <__aeabi_dadd+0x618>)
   14ce0:	42b0      	cmp	r0, r6
   14ce2:	d1ac      	bne.n	14c3e <__aeabi_dadd+0x326>
   14ce4:	000c      	movs	r4, r1
   14ce6:	0017      	movs	r7, r2
   14ce8:	0006      	movs	r6, r0
   14cea:	46d8      	mov	r8, fp
   14cec:	e698      	b.n	14a20 <__aeabi_dadd+0x108>
   14cee:	4b90      	ldr	r3, [pc, #576]	; (14f30 <__aeabi_dadd+0x618>)
   14cf0:	459a      	cmp	sl, r3
   14cf2:	d00b      	beq.n	14d0c <__aeabi_dadd+0x3f4>
   14cf4:	4682      	mov	sl, r0
   14cf6:	e6e7      	b.n	14ac8 <__aeabi_dadd+0x1b0>
   14cf8:	2800      	cmp	r0, #0
   14cfa:	d000      	beq.n	14cfe <__aeabi_dadd+0x3e6>
   14cfc:	e09e      	b.n	14e3c <__aeabi_dadd+0x524>
   14cfe:	0018      	movs	r0, r3
   14d00:	4310      	orrs	r0, r2
   14d02:	d100      	bne.n	14d06 <__aeabi_dadd+0x3ee>
   14d04:	e0e9      	b.n	14eda <__aeabi_dadd+0x5c2>
   14d06:	001c      	movs	r4, r3
   14d08:	0017      	movs	r7, r2
   14d0a:	46d8      	mov	r8, fp
   14d0c:	4e88      	ldr	r6, [pc, #544]	; (14f30 <__aeabi_dadd+0x618>)
   14d0e:	e687      	b.n	14a20 <__aeabi_dadd+0x108>
   14d10:	2500      	movs	r5, #0
   14d12:	e772      	b.n	14bfa <__aeabi_dadd+0x2e2>
   14d14:	2100      	movs	r1, #0
   14d16:	e782      	b.n	14c1e <__aeabi_dadd+0x306>
   14d18:	0023      	movs	r3, r4
   14d1a:	433b      	orrs	r3, r7
   14d1c:	2e00      	cmp	r6, #0
   14d1e:	d000      	beq.n	14d22 <__aeabi_dadd+0x40a>
   14d20:	e0ab      	b.n	14e7a <__aeabi_dadd+0x562>
   14d22:	2b00      	cmp	r3, #0
   14d24:	d100      	bne.n	14d28 <__aeabi_dadd+0x410>
   14d26:	e0e7      	b.n	14ef8 <__aeabi_dadd+0x5e0>
   14d28:	000b      	movs	r3, r1
   14d2a:	4313      	orrs	r3, r2
   14d2c:	d100      	bne.n	14d30 <__aeabi_dadd+0x418>
   14d2e:	e677      	b.n	14a20 <__aeabi_dadd+0x108>
   14d30:	18ba      	adds	r2, r7, r2
   14d32:	42ba      	cmp	r2, r7
   14d34:	41bf      	sbcs	r7, r7
   14d36:	1864      	adds	r4, r4, r1
   14d38:	427f      	negs	r7, r7
   14d3a:	19e4      	adds	r4, r4, r7
   14d3c:	0223      	lsls	r3, r4, #8
   14d3e:	d400      	bmi.n	14d42 <__aeabi_dadd+0x42a>
   14d40:	e0f2      	b.n	14f28 <__aeabi_dadd+0x610>
   14d42:	4b7c      	ldr	r3, [pc, #496]	; (14f34 <__aeabi_dadd+0x61c>)
   14d44:	0017      	movs	r7, r2
   14d46:	401c      	ands	r4, r3
   14d48:	0006      	movs	r6, r0
   14d4a:	e669      	b.n	14a20 <__aeabi_dadd+0x108>
   14d4c:	0020      	movs	r0, r4
   14d4e:	4338      	orrs	r0, r7
   14d50:	2e00      	cmp	r6, #0
   14d52:	d1d1      	bne.n	14cf8 <__aeabi_dadd+0x3e0>
   14d54:	2800      	cmp	r0, #0
   14d56:	d15b      	bne.n	14e10 <__aeabi_dadd+0x4f8>
   14d58:	001c      	movs	r4, r3
   14d5a:	4314      	orrs	r4, r2
   14d5c:	d100      	bne.n	14d60 <__aeabi_dadd+0x448>
   14d5e:	e0a8      	b.n	14eb2 <__aeabi_dadd+0x59a>
   14d60:	001c      	movs	r4, r3
   14d62:	0017      	movs	r7, r2
   14d64:	46d8      	mov	r8, fp
   14d66:	e65b      	b.n	14a20 <__aeabi_dadd+0x108>
   14d68:	0006      	movs	r6, r0
   14d6a:	2400      	movs	r4, #0
   14d6c:	2700      	movs	r7, #0
   14d6e:	e697      	b.n	14aa0 <__aeabi_dadd+0x188>
   14d70:	4650      	mov	r0, sl
   14d72:	000b      	movs	r3, r1
   14d74:	3820      	subs	r0, #32
   14d76:	40c3      	lsrs	r3, r0
   14d78:	4699      	mov	r9, r3
   14d7a:	4653      	mov	r3, sl
   14d7c:	2b20      	cmp	r3, #32
   14d7e:	d100      	bne.n	14d82 <__aeabi_dadd+0x46a>
   14d80:	e095      	b.n	14eae <__aeabi_dadd+0x596>
   14d82:	2340      	movs	r3, #64	; 0x40
   14d84:	4650      	mov	r0, sl
   14d86:	1a1b      	subs	r3, r3, r0
   14d88:	4099      	lsls	r1, r3
   14d8a:	430a      	orrs	r2, r1
   14d8c:	1e51      	subs	r1, r2, #1
   14d8e:	418a      	sbcs	r2, r1
   14d90:	464b      	mov	r3, r9
   14d92:	2100      	movs	r1, #0
   14d94:	431a      	orrs	r2, r3
   14d96:	e69f      	b.n	14ad8 <__aeabi_dadd+0x1c0>
   14d98:	2e00      	cmp	r6, #0
   14d9a:	d130      	bne.n	14dfe <__aeabi_dadd+0x4e6>
   14d9c:	0026      	movs	r6, r4
   14d9e:	433e      	orrs	r6, r7
   14da0:	d067      	beq.n	14e72 <__aeabi_dadd+0x55a>
   14da2:	43db      	mvns	r3, r3
   14da4:	469a      	mov	sl, r3
   14da6:	2b00      	cmp	r3, #0
   14da8:	d01c      	beq.n	14de4 <__aeabi_dadd+0x4cc>
   14daa:	4e61      	ldr	r6, [pc, #388]	; (14f30 <__aeabi_dadd+0x618>)
   14dac:	42b0      	cmp	r0, r6
   14dae:	d060      	beq.n	14e72 <__aeabi_dadd+0x55a>
   14db0:	4653      	mov	r3, sl
   14db2:	2b38      	cmp	r3, #56	; 0x38
   14db4:	dd00      	ble.n	14db8 <__aeabi_dadd+0x4a0>
   14db6:	e096      	b.n	14ee6 <__aeabi_dadd+0x5ce>
   14db8:	2b1f      	cmp	r3, #31
   14dba:	dd00      	ble.n	14dbe <__aeabi_dadd+0x4a6>
   14dbc:	e09f      	b.n	14efe <__aeabi_dadd+0x5e6>
   14dbe:	2620      	movs	r6, #32
   14dc0:	1af3      	subs	r3, r6, r3
   14dc2:	0026      	movs	r6, r4
   14dc4:	409e      	lsls	r6, r3
   14dc6:	469c      	mov	ip, r3
   14dc8:	46b3      	mov	fp, r6
   14dca:	4653      	mov	r3, sl
   14dcc:	003e      	movs	r6, r7
   14dce:	40de      	lsrs	r6, r3
   14dd0:	0033      	movs	r3, r6
   14dd2:	465e      	mov	r6, fp
   14dd4:	431e      	orrs	r6, r3
   14dd6:	4663      	mov	r3, ip
   14dd8:	409f      	lsls	r7, r3
   14dda:	1e7b      	subs	r3, r7, #1
   14ddc:	419f      	sbcs	r7, r3
   14dde:	4653      	mov	r3, sl
   14de0:	40dc      	lsrs	r4, r3
   14de2:	4337      	orrs	r7, r6
   14de4:	18bf      	adds	r7, r7, r2
   14de6:	4297      	cmp	r7, r2
   14de8:	4192      	sbcs	r2, r2
   14dea:	1864      	adds	r4, r4, r1
   14dec:	4252      	negs	r2, r2
   14dee:	18a4      	adds	r4, r4, r2
   14df0:	0006      	movs	r6, r0
   14df2:	e678      	b.n	14ae6 <__aeabi_dadd+0x1ce>
   14df4:	4327      	orrs	r7, r4
   14df6:	1e7c      	subs	r4, r7, #1
   14df8:	41a7      	sbcs	r7, r4
   14dfa:	2400      	movs	r4, #0
   14dfc:	e737      	b.n	14c6e <__aeabi_dadd+0x356>
   14dfe:	4e4c      	ldr	r6, [pc, #304]	; (14f30 <__aeabi_dadd+0x618>)
   14e00:	42b0      	cmp	r0, r6
   14e02:	d036      	beq.n	14e72 <__aeabi_dadd+0x55a>
   14e04:	2680      	movs	r6, #128	; 0x80
   14e06:	425b      	negs	r3, r3
   14e08:	0436      	lsls	r6, r6, #16
   14e0a:	469a      	mov	sl, r3
   14e0c:	4334      	orrs	r4, r6
   14e0e:	e7cf      	b.n	14db0 <__aeabi_dadd+0x498>
   14e10:	0018      	movs	r0, r3
   14e12:	4310      	orrs	r0, r2
   14e14:	d100      	bne.n	14e18 <__aeabi_dadd+0x500>
   14e16:	e603      	b.n	14a20 <__aeabi_dadd+0x108>
   14e18:	1ab8      	subs	r0, r7, r2
   14e1a:	4684      	mov	ip, r0
   14e1c:	4567      	cmp	r7, ip
   14e1e:	41ad      	sbcs	r5, r5
   14e20:	1ae0      	subs	r0, r4, r3
   14e22:	426d      	negs	r5, r5
   14e24:	1b40      	subs	r0, r0, r5
   14e26:	0205      	lsls	r5, r0, #8
   14e28:	d400      	bmi.n	14e2c <__aeabi_dadd+0x514>
   14e2a:	e62c      	b.n	14a86 <__aeabi_dadd+0x16e>
   14e2c:	1bd7      	subs	r7, r2, r7
   14e2e:	42ba      	cmp	r2, r7
   14e30:	4192      	sbcs	r2, r2
   14e32:	1b1c      	subs	r4, r3, r4
   14e34:	4252      	negs	r2, r2
   14e36:	1aa4      	subs	r4, r4, r2
   14e38:	46d8      	mov	r8, fp
   14e3a:	e5f1      	b.n	14a20 <__aeabi_dadd+0x108>
   14e3c:	0018      	movs	r0, r3
   14e3e:	4310      	orrs	r0, r2
   14e40:	d100      	bne.n	14e44 <__aeabi_dadd+0x52c>
   14e42:	e763      	b.n	14d0c <__aeabi_dadd+0x3f4>
   14e44:	08f8      	lsrs	r0, r7, #3
   14e46:	0767      	lsls	r7, r4, #29
   14e48:	4307      	orrs	r7, r0
   14e4a:	2080      	movs	r0, #128	; 0x80
   14e4c:	08e4      	lsrs	r4, r4, #3
   14e4e:	0300      	lsls	r0, r0, #12
   14e50:	4204      	tst	r4, r0
   14e52:	d008      	beq.n	14e66 <__aeabi_dadd+0x54e>
   14e54:	08dd      	lsrs	r5, r3, #3
   14e56:	4205      	tst	r5, r0
   14e58:	d105      	bne.n	14e66 <__aeabi_dadd+0x54e>
   14e5a:	08d2      	lsrs	r2, r2, #3
   14e5c:	0759      	lsls	r1, r3, #29
   14e5e:	4311      	orrs	r1, r2
   14e60:	000f      	movs	r7, r1
   14e62:	002c      	movs	r4, r5
   14e64:	46d8      	mov	r8, fp
   14e66:	0f7b      	lsrs	r3, r7, #29
   14e68:	00e4      	lsls	r4, r4, #3
   14e6a:	431c      	orrs	r4, r3
   14e6c:	00ff      	lsls	r7, r7, #3
   14e6e:	4e30      	ldr	r6, [pc, #192]	; (14f30 <__aeabi_dadd+0x618>)
   14e70:	e5d6      	b.n	14a20 <__aeabi_dadd+0x108>
   14e72:	000c      	movs	r4, r1
   14e74:	0017      	movs	r7, r2
   14e76:	0006      	movs	r6, r0
   14e78:	e5d2      	b.n	14a20 <__aeabi_dadd+0x108>
   14e7a:	2b00      	cmp	r3, #0
   14e7c:	d038      	beq.n	14ef0 <__aeabi_dadd+0x5d8>
   14e7e:	000b      	movs	r3, r1
   14e80:	4313      	orrs	r3, r2
   14e82:	d100      	bne.n	14e86 <__aeabi_dadd+0x56e>
   14e84:	e742      	b.n	14d0c <__aeabi_dadd+0x3f4>
   14e86:	08f8      	lsrs	r0, r7, #3
   14e88:	0767      	lsls	r7, r4, #29
   14e8a:	4307      	orrs	r7, r0
   14e8c:	2080      	movs	r0, #128	; 0x80
   14e8e:	08e4      	lsrs	r4, r4, #3
   14e90:	0300      	lsls	r0, r0, #12
   14e92:	4204      	tst	r4, r0
   14e94:	d0e7      	beq.n	14e66 <__aeabi_dadd+0x54e>
   14e96:	08cb      	lsrs	r3, r1, #3
   14e98:	4203      	tst	r3, r0
   14e9a:	d1e4      	bne.n	14e66 <__aeabi_dadd+0x54e>
   14e9c:	08d2      	lsrs	r2, r2, #3
   14e9e:	0749      	lsls	r1, r1, #29
   14ea0:	4311      	orrs	r1, r2
   14ea2:	000f      	movs	r7, r1
   14ea4:	001c      	movs	r4, r3
   14ea6:	e7de      	b.n	14e66 <__aeabi_dadd+0x54e>
   14ea8:	2700      	movs	r7, #0
   14eaa:	2400      	movs	r4, #0
   14eac:	e5d5      	b.n	14a5a <__aeabi_dadd+0x142>
   14eae:	2100      	movs	r1, #0
   14eb0:	e76b      	b.n	14d8a <__aeabi_dadd+0x472>
   14eb2:	2500      	movs	r5, #0
   14eb4:	2700      	movs	r7, #0
   14eb6:	e5f3      	b.n	14aa0 <__aeabi_dadd+0x188>
   14eb8:	464e      	mov	r6, r9
   14eba:	0025      	movs	r5, r4
   14ebc:	3e20      	subs	r6, #32
   14ebe:	40f5      	lsrs	r5, r6
   14ec0:	464b      	mov	r3, r9
   14ec2:	002e      	movs	r6, r5
   14ec4:	2b20      	cmp	r3, #32
   14ec6:	d02d      	beq.n	14f24 <__aeabi_dadd+0x60c>
   14ec8:	2540      	movs	r5, #64	; 0x40
   14eca:	1aed      	subs	r5, r5, r3
   14ecc:	40ac      	lsls	r4, r5
   14ece:	4327      	orrs	r7, r4
   14ed0:	1e7c      	subs	r4, r7, #1
   14ed2:	41a7      	sbcs	r7, r4
   14ed4:	2400      	movs	r4, #0
   14ed6:	4337      	orrs	r7, r6
   14ed8:	e6c9      	b.n	14c6e <__aeabi_dadd+0x356>
   14eda:	2480      	movs	r4, #128	; 0x80
   14edc:	2500      	movs	r5, #0
   14ede:	0324      	lsls	r4, r4, #12
   14ee0:	4e13      	ldr	r6, [pc, #76]	; (14f30 <__aeabi_dadd+0x618>)
   14ee2:	2700      	movs	r7, #0
   14ee4:	e5dc      	b.n	14aa0 <__aeabi_dadd+0x188>
   14ee6:	4327      	orrs	r7, r4
   14ee8:	1e7c      	subs	r4, r7, #1
   14eea:	41a7      	sbcs	r7, r4
   14eec:	2400      	movs	r4, #0
   14eee:	e779      	b.n	14de4 <__aeabi_dadd+0x4cc>
   14ef0:	000c      	movs	r4, r1
   14ef2:	0017      	movs	r7, r2
   14ef4:	4e0e      	ldr	r6, [pc, #56]	; (14f30 <__aeabi_dadd+0x618>)
   14ef6:	e593      	b.n	14a20 <__aeabi_dadd+0x108>
   14ef8:	000c      	movs	r4, r1
   14efa:	0017      	movs	r7, r2
   14efc:	e590      	b.n	14a20 <__aeabi_dadd+0x108>
   14efe:	4656      	mov	r6, sl
   14f00:	0023      	movs	r3, r4
   14f02:	3e20      	subs	r6, #32
   14f04:	40f3      	lsrs	r3, r6
   14f06:	4699      	mov	r9, r3
   14f08:	4653      	mov	r3, sl
   14f0a:	2b20      	cmp	r3, #32
   14f0c:	d00e      	beq.n	14f2c <__aeabi_dadd+0x614>
   14f0e:	2340      	movs	r3, #64	; 0x40
   14f10:	4656      	mov	r6, sl
   14f12:	1b9b      	subs	r3, r3, r6
   14f14:	409c      	lsls	r4, r3
   14f16:	4327      	orrs	r7, r4
   14f18:	1e7c      	subs	r4, r7, #1
   14f1a:	41a7      	sbcs	r7, r4
   14f1c:	464b      	mov	r3, r9
   14f1e:	2400      	movs	r4, #0
   14f20:	431f      	orrs	r7, r3
   14f22:	e75f      	b.n	14de4 <__aeabi_dadd+0x4cc>
   14f24:	2400      	movs	r4, #0
   14f26:	e7d2      	b.n	14ece <__aeabi_dadd+0x5b6>
   14f28:	0017      	movs	r7, r2
   14f2a:	e5b2      	b.n	14a92 <__aeabi_dadd+0x17a>
   14f2c:	2400      	movs	r4, #0
   14f2e:	e7f2      	b.n	14f16 <__aeabi_dadd+0x5fe>
   14f30:	000007ff 	.word	0x000007ff
   14f34:	ff7fffff 	.word	0xff7fffff

00014f38 <__aeabi_ddiv>:
   14f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f3a:	4657      	mov	r7, sl
   14f3c:	4645      	mov	r5, r8
   14f3e:	46de      	mov	lr, fp
   14f40:	464e      	mov	r6, r9
   14f42:	b5e0      	push	{r5, r6, r7, lr}
   14f44:	004c      	lsls	r4, r1, #1
   14f46:	030e      	lsls	r6, r1, #12
   14f48:	b087      	sub	sp, #28
   14f4a:	4683      	mov	fp, r0
   14f4c:	4692      	mov	sl, r2
   14f4e:	001d      	movs	r5, r3
   14f50:	4680      	mov	r8, r0
   14f52:	0b36      	lsrs	r6, r6, #12
   14f54:	0d64      	lsrs	r4, r4, #21
   14f56:	0fcf      	lsrs	r7, r1, #31
   14f58:	2c00      	cmp	r4, #0
   14f5a:	d04f      	beq.n	14ffc <__aeabi_ddiv+0xc4>
   14f5c:	4b6f      	ldr	r3, [pc, #444]	; (1511c <__aeabi_ddiv+0x1e4>)
   14f5e:	429c      	cmp	r4, r3
   14f60:	d035      	beq.n	14fce <__aeabi_ddiv+0x96>
   14f62:	2380      	movs	r3, #128	; 0x80
   14f64:	0f42      	lsrs	r2, r0, #29
   14f66:	041b      	lsls	r3, r3, #16
   14f68:	00f6      	lsls	r6, r6, #3
   14f6a:	4313      	orrs	r3, r2
   14f6c:	4333      	orrs	r3, r6
   14f6e:	4699      	mov	r9, r3
   14f70:	00c3      	lsls	r3, r0, #3
   14f72:	4698      	mov	r8, r3
   14f74:	4b6a      	ldr	r3, [pc, #424]	; (15120 <__aeabi_ddiv+0x1e8>)
   14f76:	2600      	movs	r6, #0
   14f78:	469c      	mov	ip, r3
   14f7a:	2300      	movs	r3, #0
   14f7c:	4464      	add	r4, ip
   14f7e:	9303      	str	r3, [sp, #12]
   14f80:	032b      	lsls	r3, r5, #12
   14f82:	0b1b      	lsrs	r3, r3, #12
   14f84:	469b      	mov	fp, r3
   14f86:	006b      	lsls	r3, r5, #1
   14f88:	0fed      	lsrs	r5, r5, #31
   14f8a:	4650      	mov	r0, sl
   14f8c:	0d5b      	lsrs	r3, r3, #21
   14f8e:	9501      	str	r5, [sp, #4]
   14f90:	d05e      	beq.n	15050 <__aeabi_ddiv+0x118>
   14f92:	4a62      	ldr	r2, [pc, #392]	; (1511c <__aeabi_ddiv+0x1e4>)
   14f94:	4293      	cmp	r3, r2
   14f96:	d053      	beq.n	15040 <__aeabi_ddiv+0x108>
   14f98:	465a      	mov	r2, fp
   14f9a:	00d1      	lsls	r1, r2, #3
   14f9c:	2280      	movs	r2, #128	; 0x80
   14f9e:	0f40      	lsrs	r0, r0, #29
   14fa0:	0412      	lsls	r2, r2, #16
   14fa2:	4302      	orrs	r2, r0
   14fa4:	430a      	orrs	r2, r1
   14fa6:	4693      	mov	fp, r2
   14fa8:	4652      	mov	r2, sl
   14faa:	00d1      	lsls	r1, r2, #3
   14fac:	4a5c      	ldr	r2, [pc, #368]	; (15120 <__aeabi_ddiv+0x1e8>)
   14fae:	4694      	mov	ip, r2
   14fb0:	2200      	movs	r2, #0
   14fb2:	4463      	add	r3, ip
   14fb4:	0038      	movs	r0, r7
   14fb6:	4068      	eors	r0, r5
   14fb8:	4684      	mov	ip, r0
   14fba:	9002      	str	r0, [sp, #8]
   14fbc:	1ae4      	subs	r4, r4, r3
   14fbe:	4316      	orrs	r6, r2
   14fc0:	2e0f      	cmp	r6, #15
   14fc2:	d900      	bls.n	14fc6 <__aeabi_ddiv+0x8e>
   14fc4:	e0b4      	b.n	15130 <__aeabi_ddiv+0x1f8>
   14fc6:	4b57      	ldr	r3, [pc, #348]	; (15124 <__aeabi_ddiv+0x1ec>)
   14fc8:	00b6      	lsls	r6, r6, #2
   14fca:	599b      	ldr	r3, [r3, r6]
   14fcc:	469f      	mov	pc, r3
   14fce:	0003      	movs	r3, r0
   14fd0:	4333      	orrs	r3, r6
   14fd2:	4699      	mov	r9, r3
   14fd4:	d16c      	bne.n	150b0 <__aeabi_ddiv+0x178>
   14fd6:	2300      	movs	r3, #0
   14fd8:	4698      	mov	r8, r3
   14fda:	3302      	adds	r3, #2
   14fdc:	2608      	movs	r6, #8
   14fde:	9303      	str	r3, [sp, #12]
   14fe0:	e7ce      	b.n	14f80 <__aeabi_ddiv+0x48>
   14fe2:	46cb      	mov	fp, r9
   14fe4:	4641      	mov	r1, r8
   14fe6:	9a03      	ldr	r2, [sp, #12]
   14fe8:	9701      	str	r7, [sp, #4]
   14fea:	2a02      	cmp	r2, #2
   14fec:	d165      	bne.n	150ba <__aeabi_ddiv+0x182>
   14fee:	9b01      	ldr	r3, [sp, #4]
   14ff0:	4c4a      	ldr	r4, [pc, #296]	; (1511c <__aeabi_ddiv+0x1e4>)
   14ff2:	469c      	mov	ip, r3
   14ff4:	2300      	movs	r3, #0
   14ff6:	2200      	movs	r2, #0
   14ff8:	4698      	mov	r8, r3
   14ffa:	e06b      	b.n	150d4 <__aeabi_ddiv+0x19c>
   14ffc:	0003      	movs	r3, r0
   14ffe:	4333      	orrs	r3, r6
   15000:	4699      	mov	r9, r3
   15002:	d04e      	beq.n	150a2 <__aeabi_ddiv+0x16a>
   15004:	2e00      	cmp	r6, #0
   15006:	d100      	bne.n	1500a <__aeabi_ddiv+0xd2>
   15008:	e1bc      	b.n	15384 <__aeabi_ddiv+0x44c>
   1500a:	0030      	movs	r0, r6
   1500c:	f001 fae8 	bl	165e0 <__clzsi2>
   15010:	0003      	movs	r3, r0
   15012:	3b0b      	subs	r3, #11
   15014:	2b1c      	cmp	r3, #28
   15016:	dd00      	ble.n	1501a <__aeabi_ddiv+0xe2>
   15018:	e1ac      	b.n	15374 <__aeabi_ddiv+0x43c>
   1501a:	221d      	movs	r2, #29
   1501c:	1ad3      	subs	r3, r2, r3
   1501e:	465a      	mov	r2, fp
   15020:	0001      	movs	r1, r0
   15022:	40da      	lsrs	r2, r3
   15024:	3908      	subs	r1, #8
   15026:	408e      	lsls	r6, r1
   15028:	0013      	movs	r3, r2
   1502a:	4333      	orrs	r3, r6
   1502c:	4699      	mov	r9, r3
   1502e:	465b      	mov	r3, fp
   15030:	408b      	lsls	r3, r1
   15032:	4698      	mov	r8, r3
   15034:	2300      	movs	r3, #0
   15036:	4c3c      	ldr	r4, [pc, #240]	; (15128 <__aeabi_ddiv+0x1f0>)
   15038:	2600      	movs	r6, #0
   1503a:	1a24      	subs	r4, r4, r0
   1503c:	9303      	str	r3, [sp, #12]
   1503e:	e79f      	b.n	14f80 <__aeabi_ddiv+0x48>
   15040:	4651      	mov	r1, sl
   15042:	465a      	mov	r2, fp
   15044:	4311      	orrs	r1, r2
   15046:	d129      	bne.n	1509c <__aeabi_ddiv+0x164>
   15048:	2200      	movs	r2, #0
   1504a:	4693      	mov	fp, r2
   1504c:	3202      	adds	r2, #2
   1504e:	e7b1      	b.n	14fb4 <__aeabi_ddiv+0x7c>
   15050:	4659      	mov	r1, fp
   15052:	4301      	orrs	r1, r0
   15054:	d01e      	beq.n	15094 <__aeabi_ddiv+0x15c>
   15056:	465b      	mov	r3, fp
   15058:	2b00      	cmp	r3, #0
   1505a:	d100      	bne.n	1505e <__aeabi_ddiv+0x126>
   1505c:	e19e      	b.n	1539c <__aeabi_ddiv+0x464>
   1505e:	4658      	mov	r0, fp
   15060:	f001 fabe 	bl	165e0 <__clzsi2>
   15064:	0003      	movs	r3, r0
   15066:	3b0b      	subs	r3, #11
   15068:	2b1c      	cmp	r3, #28
   1506a:	dd00      	ble.n	1506e <__aeabi_ddiv+0x136>
   1506c:	e18f      	b.n	1538e <__aeabi_ddiv+0x456>
   1506e:	0002      	movs	r2, r0
   15070:	4659      	mov	r1, fp
   15072:	3a08      	subs	r2, #8
   15074:	4091      	lsls	r1, r2
   15076:	468b      	mov	fp, r1
   15078:	211d      	movs	r1, #29
   1507a:	1acb      	subs	r3, r1, r3
   1507c:	4651      	mov	r1, sl
   1507e:	40d9      	lsrs	r1, r3
   15080:	000b      	movs	r3, r1
   15082:	4659      	mov	r1, fp
   15084:	430b      	orrs	r3, r1
   15086:	4651      	mov	r1, sl
   15088:	469b      	mov	fp, r3
   1508a:	4091      	lsls	r1, r2
   1508c:	4b26      	ldr	r3, [pc, #152]	; (15128 <__aeabi_ddiv+0x1f0>)
   1508e:	2200      	movs	r2, #0
   15090:	1a1b      	subs	r3, r3, r0
   15092:	e78f      	b.n	14fb4 <__aeabi_ddiv+0x7c>
   15094:	2300      	movs	r3, #0
   15096:	2201      	movs	r2, #1
   15098:	469b      	mov	fp, r3
   1509a:	e78b      	b.n	14fb4 <__aeabi_ddiv+0x7c>
   1509c:	4651      	mov	r1, sl
   1509e:	2203      	movs	r2, #3
   150a0:	e788      	b.n	14fb4 <__aeabi_ddiv+0x7c>
   150a2:	2300      	movs	r3, #0
   150a4:	4698      	mov	r8, r3
   150a6:	3301      	adds	r3, #1
   150a8:	2604      	movs	r6, #4
   150aa:	2400      	movs	r4, #0
   150ac:	9303      	str	r3, [sp, #12]
   150ae:	e767      	b.n	14f80 <__aeabi_ddiv+0x48>
   150b0:	2303      	movs	r3, #3
   150b2:	46b1      	mov	r9, r6
   150b4:	9303      	str	r3, [sp, #12]
   150b6:	260c      	movs	r6, #12
   150b8:	e762      	b.n	14f80 <__aeabi_ddiv+0x48>
   150ba:	2a03      	cmp	r2, #3
   150bc:	d100      	bne.n	150c0 <__aeabi_ddiv+0x188>
   150be:	e25c      	b.n	1557a <__aeabi_ddiv+0x642>
   150c0:	9b01      	ldr	r3, [sp, #4]
   150c2:	2a01      	cmp	r2, #1
   150c4:	d000      	beq.n	150c8 <__aeabi_ddiv+0x190>
   150c6:	e1e4      	b.n	15492 <__aeabi_ddiv+0x55a>
   150c8:	4013      	ands	r3, r2
   150ca:	469c      	mov	ip, r3
   150cc:	2300      	movs	r3, #0
   150ce:	2400      	movs	r4, #0
   150d0:	2200      	movs	r2, #0
   150d2:	4698      	mov	r8, r3
   150d4:	2100      	movs	r1, #0
   150d6:	0312      	lsls	r2, r2, #12
   150d8:	0b13      	lsrs	r3, r2, #12
   150da:	0d0a      	lsrs	r2, r1, #20
   150dc:	0512      	lsls	r2, r2, #20
   150de:	431a      	orrs	r2, r3
   150e0:	0523      	lsls	r3, r4, #20
   150e2:	4c12      	ldr	r4, [pc, #72]	; (1512c <__aeabi_ddiv+0x1f4>)
   150e4:	4640      	mov	r0, r8
   150e6:	4022      	ands	r2, r4
   150e8:	4313      	orrs	r3, r2
   150ea:	4662      	mov	r2, ip
   150ec:	005b      	lsls	r3, r3, #1
   150ee:	07d2      	lsls	r2, r2, #31
   150f0:	085b      	lsrs	r3, r3, #1
   150f2:	4313      	orrs	r3, r2
   150f4:	0019      	movs	r1, r3
   150f6:	b007      	add	sp, #28
   150f8:	bc3c      	pop	{r2, r3, r4, r5}
   150fa:	4690      	mov	r8, r2
   150fc:	4699      	mov	r9, r3
   150fe:	46a2      	mov	sl, r4
   15100:	46ab      	mov	fp, r5
   15102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15104:	2300      	movs	r3, #0
   15106:	2280      	movs	r2, #128	; 0x80
   15108:	469c      	mov	ip, r3
   1510a:	0312      	lsls	r2, r2, #12
   1510c:	4698      	mov	r8, r3
   1510e:	4c03      	ldr	r4, [pc, #12]	; (1511c <__aeabi_ddiv+0x1e4>)
   15110:	e7e0      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15112:	2300      	movs	r3, #0
   15114:	4c01      	ldr	r4, [pc, #4]	; (1511c <__aeabi_ddiv+0x1e4>)
   15116:	2200      	movs	r2, #0
   15118:	4698      	mov	r8, r3
   1511a:	e7db      	b.n	150d4 <__aeabi_ddiv+0x19c>
   1511c:	000007ff 	.word	0x000007ff
   15120:	fffffc01 	.word	0xfffffc01
   15124:	00018cf4 	.word	0x00018cf4
   15128:	fffffc0d 	.word	0xfffffc0d
   1512c:	800fffff 	.word	0x800fffff
   15130:	45d9      	cmp	r9, fp
   15132:	d900      	bls.n	15136 <__aeabi_ddiv+0x1fe>
   15134:	e139      	b.n	153aa <__aeabi_ddiv+0x472>
   15136:	d100      	bne.n	1513a <__aeabi_ddiv+0x202>
   15138:	e134      	b.n	153a4 <__aeabi_ddiv+0x46c>
   1513a:	2300      	movs	r3, #0
   1513c:	4646      	mov	r6, r8
   1513e:	464d      	mov	r5, r9
   15140:	469a      	mov	sl, r3
   15142:	3c01      	subs	r4, #1
   15144:	465b      	mov	r3, fp
   15146:	0e0a      	lsrs	r2, r1, #24
   15148:	021b      	lsls	r3, r3, #8
   1514a:	431a      	orrs	r2, r3
   1514c:	020b      	lsls	r3, r1, #8
   1514e:	0c17      	lsrs	r7, r2, #16
   15150:	9303      	str	r3, [sp, #12]
   15152:	0413      	lsls	r3, r2, #16
   15154:	0c1b      	lsrs	r3, r3, #16
   15156:	0039      	movs	r1, r7
   15158:	0028      	movs	r0, r5
   1515a:	4690      	mov	r8, r2
   1515c:	9301      	str	r3, [sp, #4]
   1515e:	f7fe f999 	bl	13494 <__udivsi3>
   15162:	0002      	movs	r2, r0
   15164:	9b01      	ldr	r3, [sp, #4]
   15166:	4683      	mov	fp, r0
   15168:	435a      	muls	r2, r3
   1516a:	0028      	movs	r0, r5
   1516c:	0039      	movs	r1, r7
   1516e:	4691      	mov	r9, r2
   15170:	f7fe fa16 	bl	135a0 <__aeabi_uidivmod>
   15174:	0c35      	lsrs	r5, r6, #16
   15176:	0409      	lsls	r1, r1, #16
   15178:	430d      	orrs	r5, r1
   1517a:	45a9      	cmp	r9, r5
   1517c:	d90d      	bls.n	1519a <__aeabi_ddiv+0x262>
   1517e:	465b      	mov	r3, fp
   15180:	4445      	add	r5, r8
   15182:	3b01      	subs	r3, #1
   15184:	45a8      	cmp	r8, r5
   15186:	d900      	bls.n	1518a <__aeabi_ddiv+0x252>
   15188:	e13a      	b.n	15400 <__aeabi_ddiv+0x4c8>
   1518a:	45a9      	cmp	r9, r5
   1518c:	d800      	bhi.n	15190 <__aeabi_ddiv+0x258>
   1518e:	e137      	b.n	15400 <__aeabi_ddiv+0x4c8>
   15190:	2302      	movs	r3, #2
   15192:	425b      	negs	r3, r3
   15194:	469c      	mov	ip, r3
   15196:	4445      	add	r5, r8
   15198:	44e3      	add	fp, ip
   1519a:	464b      	mov	r3, r9
   1519c:	1aeb      	subs	r3, r5, r3
   1519e:	0039      	movs	r1, r7
   151a0:	0018      	movs	r0, r3
   151a2:	9304      	str	r3, [sp, #16]
   151a4:	f7fe f976 	bl	13494 <__udivsi3>
   151a8:	9b01      	ldr	r3, [sp, #4]
   151aa:	0005      	movs	r5, r0
   151ac:	4343      	muls	r3, r0
   151ae:	0039      	movs	r1, r7
   151b0:	9804      	ldr	r0, [sp, #16]
   151b2:	4699      	mov	r9, r3
   151b4:	f7fe f9f4 	bl	135a0 <__aeabi_uidivmod>
   151b8:	0433      	lsls	r3, r6, #16
   151ba:	0409      	lsls	r1, r1, #16
   151bc:	0c1b      	lsrs	r3, r3, #16
   151be:	430b      	orrs	r3, r1
   151c0:	4599      	cmp	r9, r3
   151c2:	d909      	bls.n	151d8 <__aeabi_ddiv+0x2a0>
   151c4:	4443      	add	r3, r8
   151c6:	1e6a      	subs	r2, r5, #1
   151c8:	4598      	cmp	r8, r3
   151ca:	d900      	bls.n	151ce <__aeabi_ddiv+0x296>
   151cc:	e11a      	b.n	15404 <__aeabi_ddiv+0x4cc>
   151ce:	4599      	cmp	r9, r3
   151d0:	d800      	bhi.n	151d4 <__aeabi_ddiv+0x29c>
   151d2:	e117      	b.n	15404 <__aeabi_ddiv+0x4cc>
   151d4:	3d02      	subs	r5, #2
   151d6:	4443      	add	r3, r8
   151d8:	464a      	mov	r2, r9
   151da:	1a9b      	subs	r3, r3, r2
   151dc:	465a      	mov	r2, fp
   151de:	0412      	lsls	r2, r2, #16
   151e0:	432a      	orrs	r2, r5
   151e2:	9903      	ldr	r1, [sp, #12]
   151e4:	4693      	mov	fp, r2
   151e6:	0c10      	lsrs	r0, r2, #16
   151e8:	0c0a      	lsrs	r2, r1, #16
   151ea:	4691      	mov	r9, r2
   151ec:	0409      	lsls	r1, r1, #16
   151ee:	465a      	mov	r2, fp
   151f0:	0c09      	lsrs	r1, r1, #16
   151f2:	464e      	mov	r6, r9
   151f4:	000d      	movs	r5, r1
   151f6:	0412      	lsls	r2, r2, #16
   151f8:	0c12      	lsrs	r2, r2, #16
   151fa:	4345      	muls	r5, r0
   151fc:	9105      	str	r1, [sp, #20]
   151fe:	4351      	muls	r1, r2
   15200:	4372      	muls	r2, r6
   15202:	4370      	muls	r0, r6
   15204:	1952      	adds	r2, r2, r5
   15206:	0c0e      	lsrs	r6, r1, #16
   15208:	18b2      	adds	r2, r6, r2
   1520a:	4295      	cmp	r5, r2
   1520c:	d903      	bls.n	15216 <__aeabi_ddiv+0x2de>
   1520e:	2580      	movs	r5, #128	; 0x80
   15210:	026d      	lsls	r5, r5, #9
   15212:	46ac      	mov	ip, r5
   15214:	4460      	add	r0, ip
   15216:	0c15      	lsrs	r5, r2, #16
   15218:	0409      	lsls	r1, r1, #16
   1521a:	0412      	lsls	r2, r2, #16
   1521c:	0c09      	lsrs	r1, r1, #16
   1521e:	1828      	adds	r0, r5, r0
   15220:	1852      	adds	r2, r2, r1
   15222:	4283      	cmp	r3, r0
   15224:	d200      	bcs.n	15228 <__aeabi_ddiv+0x2f0>
   15226:	e0ce      	b.n	153c6 <__aeabi_ddiv+0x48e>
   15228:	d100      	bne.n	1522c <__aeabi_ddiv+0x2f4>
   1522a:	e0c8      	b.n	153be <__aeabi_ddiv+0x486>
   1522c:	1a1d      	subs	r5, r3, r0
   1522e:	4653      	mov	r3, sl
   15230:	1a9e      	subs	r6, r3, r2
   15232:	45b2      	cmp	sl, r6
   15234:	4192      	sbcs	r2, r2
   15236:	4252      	negs	r2, r2
   15238:	1aab      	subs	r3, r5, r2
   1523a:	469a      	mov	sl, r3
   1523c:	4598      	cmp	r8, r3
   1523e:	d100      	bne.n	15242 <__aeabi_ddiv+0x30a>
   15240:	e117      	b.n	15472 <__aeabi_ddiv+0x53a>
   15242:	0039      	movs	r1, r7
   15244:	0018      	movs	r0, r3
   15246:	f7fe f925 	bl	13494 <__udivsi3>
   1524a:	9b01      	ldr	r3, [sp, #4]
   1524c:	0005      	movs	r5, r0
   1524e:	4343      	muls	r3, r0
   15250:	0039      	movs	r1, r7
   15252:	4650      	mov	r0, sl
   15254:	9304      	str	r3, [sp, #16]
   15256:	f7fe f9a3 	bl	135a0 <__aeabi_uidivmod>
   1525a:	9804      	ldr	r0, [sp, #16]
   1525c:	040b      	lsls	r3, r1, #16
   1525e:	0c31      	lsrs	r1, r6, #16
   15260:	4319      	orrs	r1, r3
   15262:	4288      	cmp	r0, r1
   15264:	d909      	bls.n	1527a <__aeabi_ddiv+0x342>
   15266:	4441      	add	r1, r8
   15268:	1e6b      	subs	r3, r5, #1
   1526a:	4588      	cmp	r8, r1
   1526c:	d900      	bls.n	15270 <__aeabi_ddiv+0x338>
   1526e:	e107      	b.n	15480 <__aeabi_ddiv+0x548>
   15270:	4288      	cmp	r0, r1
   15272:	d800      	bhi.n	15276 <__aeabi_ddiv+0x33e>
   15274:	e104      	b.n	15480 <__aeabi_ddiv+0x548>
   15276:	3d02      	subs	r5, #2
   15278:	4441      	add	r1, r8
   1527a:	9b04      	ldr	r3, [sp, #16]
   1527c:	1acb      	subs	r3, r1, r3
   1527e:	0018      	movs	r0, r3
   15280:	0039      	movs	r1, r7
   15282:	9304      	str	r3, [sp, #16]
   15284:	f7fe f906 	bl	13494 <__udivsi3>
   15288:	9b01      	ldr	r3, [sp, #4]
   1528a:	4682      	mov	sl, r0
   1528c:	4343      	muls	r3, r0
   1528e:	0039      	movs	r1, r7
   15290:	9804      	ldr	r0, [sp, #16]
   15292:	9301      	str	r3, [sp, #4]
   15294:	f7fe f984 	bl	135a0 <__aeabi_uidivmod>
   15298:	9801      	ldr	r0, [sp, #4]
   1529a:	040b      	lsls	r3, r1, #16
   1529c:	0431      	lsls	r1, r6, #16
   1529e:	0c09      	lsrs	r1, r1, #16
   152a0:	4319      	orrs	r1, r3
   152a2:	4288      	cmp	r0, r1
   152a4:	d90d      	bls.n	152c2 <__aeabi_ddiv+0x38a>
   152a6:	4653      	mov	r3, sl
   152a8:	4441      	add	r1, r8
   152aa:	3b01      	subs	r3, #1
   152ac:	4588      	cmp	r8, r1
   152ae:	d900      	bls.n	152b2 <__aeabi_ddiv+0x37a>
   152b0:	e0e8      	b.n	15484 <__aeabi_ddiv+0x54c>
   152b2:	4288      	cmp	r0, r1
   152b4:	d800      	bhi.n	152b8 <__aeabi_ddiv+0x380>
   152b6:	e0e5      	b.n	15484 <__aeabi_ddiv+0x54c>
   152b8:	2302      	movs	r3, #2
   152ba:	425b      	negs	r3, r3
   152bc:	469c      	mov	ip, r3
   152be:	4441      	add	r1, r8
   152c0:	44e2      	add	sl, ip
   152c2:	9b01      	ldr	r3, [sp, #4]
   152c4:	042d      	lsls	r5, r5, #16
   152c6:	1ace      	subs	r6, r1, r3
   152c8:	4651      	mov	r1, sl
   152ca:	4329      	orrs	r1, r5
   152cc:	9d05      	ldr	r5, [sp, #20]
   152ce:	464f      	mov	r7, r9
   152d0:	002a      	movs	r2, r5
   152d2:	040b      	lsls	r3, r1, #16
   152d4:	0c08      	lsrs	r0, r1, #16
   152d6:	0c1b      	lsrs	r3, r3, #16
   152d8:	435a      	muls	r2, r3
   152da:	4345      	muls	r5, r0
   152dc:	437b      	muls	r3, r7
   152de:	4378      	muls	r0, r7
   152e0:	195b      	adds	r3, r3, r5
   152e2:	0c17      	lsrs	r7, r2, #16
   152e4:	18fb      	adds	r3, r7, r3
   152e6:	429d      	cmp	r5, r3
   152e8:	d903      	bls.n	152f2 <__aeabi_ddiv+0x3ba>
   152ea:	2580      	movs	r5, #128	; 0x80
   152ec:	026d      	lsls	r5, r5, #9
   152ee:	46ac      	mov	ip, r5
   152f0:	4460      	add	r0, ip
   152f2:	0c1d      	lsrs	r5, r3, #16
   152f4:	0412      	lsls	r2, r2, #16
   152f6:	041b      	lsls	r3, r3, #16
   152f8:	0c12      	lsrs	r2, r2, #16
   152fa:	1828      	adds	r0, r5, r0
   152fc:	189b      	adds	r3, r3, r2
   152fe:	4286      	cmp	r6, r0
   15300:	d200      	bcs.n	15304 <__aeabi_ddiv+0x3cc>
   15302:	e093      	b.n	1542c <__aeabi_ddiv+0x4f4>
   15304:	d100      	bne.n	15308 <__aeabi_ddiv+0x3d0>
   15306:	e08e      	b.n	15426 <__aeabi_ddiv+0x4ee>
   15308:	2301      	movs	r3, #1
   1530a:	4319      	orrs	r1, r3
   1530c:	4ba0      	ldr	r3, [pc, #640]	; (15590 <__aeabi_ddiv+0x658>)
   1530e:	18e3      	adds	r3, r4, r3
   15310:	2b00      	cmp	r3, #0
   15312:	dc00      	bgt.n	15316 <__aeabi_ddiv+0x3de>
   15314:	e099      	b.n	1544a <__aeabi_ddiv+0x512>
   15316:	074a      	lsls	r2, r1, #29
   15318:	d000      	beq.n	1531c <__aeabi_ddiv+0x3e4>
   1531a:	e09e      	b.n	1545a <__aeabi_ddiv+0x522>
   1531c:	465a      	mov	r2, fp
   1531e:	01d2      	lsls	r2, r2, #7
   15320:	d506      	bpl.n	15330 <__aeabi_ddiv+0x3f8>
   15322:	465a      	mov	r2, fp
   15324:	4b9b      	ldr	r3, [pc, #620]	; (15594 <__aeabi_ddiv+0x65c>)
   15326:	401a      	ands	r2, r3
   15328:	2380      	movs	r3, #128	; 0x80
   1532a:	4693      	mov	fp, r2
   1532c:	00db      	lsls	r3, r3, #3
   1532e:	18e3      	adds	r3, r4, r3
   15330:	4a99      	ldr	r2, [pc, #612]	; (15598 <__aeabi_ddiv+0x660>)
   15332:	4293      	cmp	r3, r2
   15334:	dd68      	ble.n	15408 <__aeabi_ddiv+0x4d0>
   15336:	2301      	movs	r3, #1
   15338:	9a02      	ldr	r2, [sp, #8]
   1533a:	4c98      	ldr	r4, [pc, #608]	; (1559c <__aeabi_ddiv+0x664>)
   1533c:	401a      	ands	r2, r3
   1533e:	2300      	movs	r3, #0
   15340:	4694      	mov	ip, r2
   15342:	4698      	mov	r8, r3
   15344:	2200      	movs	r2, #0
   15346:	e6c5      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15348:	2280      	movs	r2, #128	; 0x80
   1534a:	464b      	mov	r3, r9
   1534c:	0312      	lsls	r2, r2, #12
   1534e:	4213      	tst	r3, r2
   15350:	d00a      	beq.n	15368 <__aeabi_ddiv+0x430>
   15352:	465b      	mov	r3, fp
   15354:	4213      	tst	r3, r2
   15356:	d106      	bne.n	15366 <__aeabi_ddiv+0x42e>
   15358:	431a      	orrs	r2, r3
   1535a:	0312      	lsls	r2, r2, #12
   1535c:	0b12      	lsrs	r2, r2, #12
   1535e:	46ac      	mov	ip, r5
   15360:	4688      	mov	r8, r1
   15362:	4c8e      	ldr	r4, [pc, #568]	; (1559c <__aeabi_ddiv+0x664>)
   15364:	e6b6      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15366:	464b      	mov	r3, r9
   15368:	431a      	orrs	r2, r3
   1536a:	0312      	lsls	r2, r2, #12
   1536c:	0b12      	lsrs	r2, r2, #12
   1536e:	46bc      	mov	ip, r7
   15370:	4c8a      	ldr	r4, [pc, #552]	; (1559c <__aeabi_ddiv+0x664>)
   15372:	e6af      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15374:	0003      	movs	r3, r0
   15376:	465a      	mov	r2, fp
   15378:	3b28      	subs	r3, #40	; 0x28
   1537a:	409a      	lsls	r2, r3
   1537c:	2300      	movs	r3, #0
   1537e:	4691      	mov	r9, r2
   15380:	4698      	mov	r8, r3
   15382:	e657      	b.n	15034 <__aeabi_ddiv+0xfc>
   15384:	4658      	mov	r0, fp
   15386:	f001 f92b 	bl	165e0 <__clzsi2>
   1538a:	3020      	adds	r0, #32
   1538c:	e640      	b.n	15010 <__aeabi_ddiv+0xd8>
   1538e:	0003      	movs	r3, r0
   15390:	4652      	mov	r2, sl
   15392:	3b28      	subs	r3, #40	; 0x28
   15394:	409a      	lsls	r2, r3
   15396:	2100      	movs	r1, #0
   15398:	4693      	mov	fp, r2
   1539a:	e677      	b.n	1508c <__aeabi_ddiv+0x154>
   1539c:	f001 f920 	bl	165e0 <__clzsi2>
   153a0:	3020      	adds	r0, #32
   153a2:	e65f      	b.n	15064 <__aeabi_ddiv+0x12c>
   153a4:	4588      	cmp	r8, r1
   153a6:	d200      	bcs.n	153aa <__aeabi_ddiv+0x472>
   153a8:	e6c7      	b.n	1513a <__aeabi_ddiv+0x202>
   153aa:	464b      	mov	r3, r9
   153ac:	07de      	lsls	r6, r3, #31
   153ae:	085d      	lsrs	r5, r3, #1
   153b0:	4643      	mov	r3, r8
   153b2:	085b      	lsrs	r3, r3, #1
   153b4:	431e      	orrs	r6, r3
   153b6:	4643      	mov	r3, r8
   153b8:	07db      	lsls	r3, r3, #31
   153ba:	469a      	mov	sl, r3
   153bc:	e6c2      	b.n	15144 <__aeabi_ddiv+0x20c>
   153be:	2500      	movs	r5, #0
   153c0:	4592      	cmp	sl, r2
   153c2:	d300      	bcc.n	153c6 <__aeabi_ddiv+0x48e>
   153c4:	e733      	b.n	1522e <__aeabi_ddiv+0x2f6>
   153c6:	9e03      	ldr	r6, [sp, #12]
   153c8:	4659      	mov	r1, fp
   153ca:	46b4      	mov	ip, r6
   153cc:	44e2      	add	sl, ip
   153ce:	45b2      	cmp	sl, r6
   153d0:	41ad      	sbcs	r5, r5
   153d2:	426d      	negs	r5, r5
   153d4:	4445      	add	r5, r8
   153d6:	18eb      	adds	r3, r5, r3
   153d8:	3901      	subs	r1, #1
   153da:	4598      	cmp	r8, r3
   153dc:	d207      	bcs.n	153ee <__aeabi_ddiv+0x4b6>
   153de:	4298      	cmp	r0, r3
   153e0:	d900      	bls.n	153e4 <__aeabi_ddiv+0x4ac>
   153e2:	e07f      	b.n	154e4 <__aeabi_ddiv+0x5ac>
   153e4:	d100      	bne.n	153e8 <__aeabi_ddiv+0x4b0>
   153e6:	e0bc      	b.n	15562 <__aeabi_ddiv+0x62a>
   153e8:	1a1d      	subs	r5, r3, r0
   153ea:	468b      	mov	fp, r1
   153ec:	e71f      	b.n	1522e <__aeabi_ddiv+0x2f6>
   153ee:	4598      	cmp	r8, r3
   153f0:	d1fa      	bne.n	153e8 <__aeabi_ddiv+0x4b0>
   153f2:	9d03      	ldr	r5, [sp, #12]
   153f4:	4555      	cmp	r5, sl
   153f6:	d9f2      	bls.n	153de <__aeabi_ddiv+0x4a6>
   153f8:	4643      	mov	r3, r8
   153fa:	468b      	mov	fp, r1
   153fc:	1a1d      	subs	r5, r3, r0
   153fe:	e716      	b.n	1522e <__aeabi_ddiv+0x2f6>
   15400:	469b      	mov	fp, r3
   15402:	e6ca      	b.n	1519a <__aeabi_ddiv+0x262>
   15404:	0015      	movs	r5, r2
   15406:	e6e7      	b.n	151d8 <__aeabi_ddiv+0x2a0>
   15408:	465a      	mov	r2, fp
   1540a:	08c9      	lsrs	r1, r1, #3
   1540c:	0752      	lsls	r2, r2, #29
   1540e:	430a      	orrs	r2, r1
   15410:	055b      	lsls	r3, r3, #21
   15412:	4690      	mov	r8, r2
   15414:	0d5c      	lsrs	r4, r3, #21
   15416:	465a      	mov	r2, fp
   15418:	2301      	movs	r3, #1
   1541a:	9902      	ldr	r1, [sp, #8]
   1541c:	0252      	lsls	r2, r2, #9
   1541e:	4019      	ands	r1, r3
   15420:	0b12      	lsrs	r2, r2, #12
   15422:	468c      	mov	ip, r1
   15424:	e656      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15426:	2b00      	cmp	r3, #0
   15428:	d100      	bne.n	1542c <__aeabi_ddiv+0x4f4>
   1542a:	e76f      	b.n	1530c <__aeabi_ddiv+0x3d4>
   1542c:	4446      	add	r6, r8
   1542e:	1e4a      	subs	r2, r1, #1
   15430:	45b0      	cmp	r8, r6
   15432:	d929      	bls.n	15488 <__aeabi_ddiv+0x550>
   15434:	0011      	movs	r1, r2
   15436:	4286      	cmp	r6, r0
   15438:	d000      	beq.n	1543c <__aeabi_ddiv+0x504>
   1543a:	e765      	b.n	15308 <__aeabi_ddiv+0x3d0>
   1543c:	9a03      	ldr	r2, [sp, #12]
   1543e:	4293      	cmp	r3, r2
   15440:	d000      	beq.n	15444 <__aeabi_ddiv+0x50c>
   15442:	e761      	b.n	15308 <__aeabi_ddiv+0x3d0>
   15444:	e762      	b.n	1530c <__aeabi_ddiv+0x3d4>
   15446:	2101      	movs	r1, #1
   15448:	4249      	negs	r1, r1
   1544a:	2001      	movs	r0, #1
   1544c:	1ac2      	subs	r2, r0, r3
   1544e:	2a38      	cmp	r2, #56	; 0x38
   15450:	dd21      	ble.n	15496 <__aeabi_ddiv+0x55e>
   15452:	9b02      	ldr	r3, [sp, #8]
   15454:	4003      	ands	r3, r0
   15456:	469c      	mov	ip, r3
   15458:	e638      	b.n	150cc <__aeabi_ddiv+0x194>
   1545a:	220f      	movs	r2, #15
   1545c:	400a      	ands	r2, r1
   1545e:	2a04      	cmp	r2, #4
   15460:	d100      	bne.n	15464 <__aeabi_ddiv+0x52c>
   15462:	e75b      	b.n	1531c <__aeabi_ddiv+0x3e4>
   15464:	000a      	movs	r2, r1
   15466:	1d11      	adds	r1, r2, #4
   15468:	4291      	cmp	r1, r2
   1546a:	4192      	sbcs	r2, r2
   1546c:	4252      	negs	r2, r2
   1546e:	4493      	add	fp, r2
   15470:	e754      	b.n	1531c <__aeabi_ddiv+0x3e4>
   15472:	4b47      	ldr	r3, [pc, #284]	; (15590 <__aeabi_ddiv+0x658>)
   15474:	18e3      	adds	r3, r4, r3
   15476:	2b00      	cmp	r3, #0
   15478:	dde5      	ble.n	15446 <__aeabi_ddiv+0x50e>
   1547a:	2201      	movs	r2, #1
   1547c:	4252      	negs	r2, r2
   1547e:	e7f2      	b.n	15466 <__aeabi_ddiv+0x52e>
   15480:	001d      	movs	r5, r3
   15482:	e6fa      	b.n	1527a <__aeabi_ddiv+0x342>
   15484:	469a      	mov	sl, r3
   15486:	e71c      	b.n	152c2 <__aeabi_ddiv+0x38a>
   15488:	42b0      	cmp	r0, r6
   1548a:	d839      	bhi.n	15500 <__aeabi_ddiv+0x5c8>
   1548c:	d06e      	beq.n	1556c <__aeabi_ddiv+0x634>
   1548e:	0011      	movs	r1, r2
   15490:	e73a      	b.n	15308 <__aeabi_ddiv+0x3d0>
   15492:	9302      	str	r3, [sp, #8]
   15494:	e73a      	b.n	1530c <__aeabi_ddiv+0x3d4>
   15496:	2a1f      	cmp	r2, #31
   15498:	dc3c      	bgt.n	15514 <__aeabi_ddiv+0x5dc>
   1549a:	2320      	movs	r3, #32
   1549c:	1a9b      	subs	r3, r3, r2
   1549e:	000c      	movs	r4, r1
   154a0:	4658      	mov	r0, fp
   154a2:	4099      	lsls	r1, r3
   154a4:	4098      	lsls	r0, r3
   154a6:	1e4b      	subs	r3, r1, #1
   154a8:	4199      	sbcs	r1, r3
   154aa:	465b      	mov	r3, fp
   154ac:	40d4      	lsrs	r4, r2
   154ae:	40d3      	lsrs	r3, r2
   154b0:	4320      	orrs	r0, r4
   154b2:	4308      	orrs	r0, r1
   154b4:	001a      	movs	r2, r3
   154b6:	0743      	lsls	r3, r0, #29
   154b8:	d009      	beq.n	154ce <__aeabi_ddiv+0x596>
   154ba:	230f      	movs	r3, #15
   154bc:	4003      	ands	r3, r0
   154be:	2b04      	cmp	r3, #4
   154c0:	d005      	beq.n	154ce <__aeabi_ddiv+0x596>
   154c2:	0001      	movs	r1, r0
   154c4:	1d08      	adds	r0, r1, #4
   154c6:	4288      	cmp	r0, r1
   154c8:	419b      	sbcs	r3, r3
   154ca:	425b      	negs	r3, r3
   154cc:	18d2      	adds	r2, r2, r3
   154ce:	0213      	lsls	r3, r2, #8
   154d0:	d53a      	bpl.n	15548 <__aeabi_ddiv+0x610>
   154d2:	2301      	movs	r3, #1
   154d4:	9a02      	ldr	r2, [sp, #8]
   154d6:	2401      	movs	r4, #1
   154d8:	401a      	ands	r2, r3
   154da:	2300      	movs	r3, #0
   154dc:	4694      	mov	ip, r2
   154de:	4698      	mov	r8, r3
   154e0:	2200      	movs	r2, #0
   154e2:	e5f7      	b.n	150d4 <__aeabi_ddiv+0x19c>
   154e4:	2102      	movs	r1, #2
   154e6:	4249      	negs	r1, r1
   154e8:	468c      	mov	ip, r1
   154ea:	9d03      	ldr	r5, [sp, #12]
   154ec:	44e3      	add	fp, ip
   154ee:	46ac      	mov	ip, r5
   154f0:	44e2      	add	sl, ip
   154f2:	45aa      	cmp	sl, r5
   154f4:	41ad      	sbcs	r5, r5
   154f6:	426d      	negs	r5, r5
   154f8:	4445      	add	r5, r8
   154fa:	18ed      	adds	r5, r5, r3
   154fc:	1a2d      	subs	r5, r5, r0
   154fe:	e696      	b.n	1522e <__aeabi_ddiv+0x2f6>
   15500:	1e8a      	subs	r2, r1, #2
   15502:	9903      	ldr	r1, [sp, #12]
   15504:	004d      	lsls	r5, r1, #1
   15506:	428d      	cmp	r5, r1
   15508:	4189      	sbcs	r1, r1
   1550a:	4249      	negs	r1, r1
   1550c:	4441      	add	r1, r8
   1550e:	1876      	adds	r6, r6, r1
   15510:	9503      	str	r5, [sp, #12]
   15512:	e78f      	b.n	15434 <__aeabi_ddiv+0x4fc>
   15514:	201f      	movs	r0, #31
   15516:	4240      	negs	r0, r0
   15518:	1ac3      	subs	r3, r0, r3
   1551a:	4658      	mov	r0, fp
   1551c:	40d8      	lsrs	r0, r3
   1551e:	0003      	movs	r3, r0
   15520:	2a20      	cmp	r2, #32
   15522:	d028      	beq.n	15576 <__aeabi_ddiv+0x63e>
   15524:	2040      	movs	r0, #64	; 0x40
   15526:	465d      	mov	r5, fp
   15528:	1a82      	subs	r2, r0, r2
   1552a:	4095      	lsls	r5, r2
   1552c:	4329      	orrs	r1, r5
   1552e:	1e4a      	subs	r2, r1, #1
   15530:	4191      	sbcs	r1, r2
   15532:	4319      	orrs	r1, r3
   15534:	2307      	movs	r3, #7
   15536:	2200      	movs	r2, #0
   15538:	400b      	ands	r3, r1
   1553a:	d009      	beq.n	15550 <__aeabi_ddiv+0x618>
   1553c:	230f      	movs	r3, #15
   1553e:	2200      	movs	r2, #0
   15540:	400b      	ands	r3, r1
   15542:	0008      	movs	r0, r1
   15544:	2b04      	cmp	r3, #4
   15546:	d1bd      	bne.n	154c4 <__aeabi_ddiv+0x58c>
   15548:	0001      	movs	r1, r0
   1554a:	0753      	lsls	r3, r2, #29
   1554c:	0252      	lsls	r2, r2, #9
   1554e:	0b12      	lsrs	r2, r2, #12
   15550:	08c9      	lsrs	r1, r1, #3
   15552:	4319      	orrs	r1, r3
   15554:	2301      	movs	r3, #1
   15556:	4688      	mov	r8, r1
   15558:	9902      	ldr	r1, [sp, #8]
   1555a:	2400      	movs	r4, #0
   1555c:	4019      	ands	r1, r3
   1555e:	468c      	mov	ip, r1
   15560:	e5b8      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15562:	4552      	cmp	r2, sl
   15564:	d8be      	bhi.n	154e4 <__aeabi_ddiv+0x5ac>
   15566:	468b      	mov	fp, r1
   15568:	2500      	movs	r5, #0
   1556a:	e660      	b.n	1522e <__aeabi_ddiv+0x2f6>
   1556c:	9d03      	ldr	r5, [sp, #12]
   1556e:	429d      	cmp	r5, r3
   15570:	d3c6      	bcc.n	15500 <__aeabi_ddiv+0x5c8>
   15572:	0011      	movs	r1, r2
   15574:	e762      	b.n	1543c <__aeabi_ddiv+0x504>
   15576:	2500      	movs	r5, #0
   15578:	e7d8      	b.n	1552c <__aeabi_ddiv+0x5f4>
   1557a:	2280      	movs	r2, #128	; 0x80
   1557c:	465b      	mov	r3, fp
   1557e:	0312      	lsls	r2, r2, #12
   15580:	431a      	orrs	r2, r3
   15582:	9b01      	ldr	r3, [sp, #4]
   15584:	0312      	lsls	r2, r2, #12
   15586:	0b12      	lsrs	r2, r2, #12
   15588:	469c      	mov	ip, r3
   1558a:	4688      	mov	r8, r1
   1558c:	4c03      	ldr	r4, [pc, #12]	; (1559c <__aeabi_ddiv+0x664>)
   1558e:	e5a1      	b.n	150d4 <__aeabi_ddiv+0x19c>
   15590:	000003ff 	.word	0x000003ff
   15594:	feffffff 	.word	0xfeffffff
   15598:	000007fe 	.word	0x000007fe
   1559c:	000007ff 	.word	0x000007ff

000155a0 <__eqdf2>:
   155a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155a2:	464f      	mov	r7, r9
   155a4:	4646      	mov	r6, r8
   155a6:	46d6      	mov	lr, sl
   155a8:	005c      	lsls	r4, r3, #1
   155aa:	b5c0      	push	{r6, r7, lr}
   155ac:	031f      	lsls	r7, r3, #12
   155ae:	0fdb      	lsrs	r3, r3, #31
   155b0:	469a      	mov	sl, r3
   155b2:	4b17      	ldr	r3, [pc, #92]	; (15610 <__eqdf2+0x70>)
   155b4:	030e      	lsls	r6, r1, #12
   155b6:	004d      	lsls	r5, r1, #1
   155b8:	4684      	mov	ip, r0
   155ba:	4680      	mov	r8, r0
   155bc:	0b36      	lsrs	r6, r6, #12
   155be:	0d6d      	lsrs	r5, r5, #21
   155c0:	0fc9      	lsrs	r1, r1, #31
   155c2:	4691      	mov	r9, r2
   155c4:	0b3f      	lsrs	r7, r7, #12
   155c6:	0d64      	lsrs	r4, r4, #21
   155c8:	2001      	movs	r0, #1
   155ca:	429d      	cmp	r5, r3
   155cc:	d008      	beq.n	155e0 <__eqdf2+0x40>
   155ce:	429c      	cmp	r4, r3
   155d0:	d001      	beq.n	155d6 <__eqdf2+0x36>
   155d2:	42a5      	cmp	r5, r4
   155d4:	d00b      	beq.n	155ee <__eqdf2+0x4e>
   155d6:	bc1c      	pop	{r2, r3, r4}
   155d8:	4690      	mov	r8, r2
   155da:	4699      	mov	r9, r3
   155dc:	46a2      	mov	sl, r4
   155de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   155e0:	4663      	mov	r3, ip
   155e2:	4333      	orrs	r3, r6
   155e4:	d1f7      	bne.n	155d6 <__eqdf2+0x36>
   155e6:	42ac      	cmp	r4, r5
   155e8:	d1f5      	bne.n	155d6 <__eqdf2+0x36>
   155ea:	433a      	orrs	r2, r7
   155ec:	d1f3      	bne.n	155d6 <__eqdf2+0x36>
   155ee:	2001      	movs	r0, #1
   155f0:	42be      	cmp	r6, r7
   155f2:	d1f0      	bne.n	155d6 <__eqdf2+0x36>
   155f4:	45c8      	cmp	r8, r9
   155f6:	d1ee      	bne.n	155d6 <__eqdf2+0x36>
   155f8:	4551      	cmp	r1, sl
   155fa:	d007      	beq.n	1560c <__eqdf2+0x6c>
   155fc:	2d00      	cmp	r5, #0
   155fe:	d1ea      	bne.n	155d6 <__eqdf2+0x36>
   15600:	4663      	mov	r3, ip
   15602:	431e      	orrs	r6, r3
   15604:	0030      	movs	r0, r6
   15606:	1e46      	subs	r6, r0, #1
   15608:	41b0      	sbcs	r0, r6
   1560a:	e7e4      	b.n	155d6 <__eqdf2+0x36>
   1560c:	2000      	movs	r0, #0
   1560e:	e7e2      	b.n	155d6 <__eqdf2+0x36>
   15610:	000007ff 	.word	0x000007ff

00015614 <__gedf2>:
   15614:	b5f0      	push	{r4, r5, r6, r7, lr}
   15616:	4645      	mov	r5, r8
   15618:	46de      	mov	lr, fp
   1561a:	4657      	mov	r7, sl
   1561c:	464e      	mov	r6, r9
   1561e:	b5e0      	push	{r5, r6, r7, lr}
   15620:	031f      	lsls	r7, r3, #12
   15622:	0b3d      	lsrs	r5, r7, #12
   15624:	4f2c      	ldr	r7, [pc, #176]	; (156d8 <__gedf2+0xc4>)
   15626:	030e      	lsls	r6, r1, #12
   15628:	004c      	lsls	r4, r1, #1
   1562a:	46ab      	mov	fp, r5
   1562c:	005d      	lsls	r5, r3, #1
   1562e:	4684      	mov	ip, r0
   15630:	0b36      	lsrs	r6, r6, #12
   15632:	0d64      	lsrs	r4, r4, #21
   15634:	0fc9      	lsrs	r1, r1, #31
   15636:	4690      	mov	r8, r2
   15638:	0d6d      	lsrs	r5, r5, #21
   1563a:	0fdb      	lsrs	r3, r3, #31
   1563c:	42bc      	cmp	r4, r7
   1563e:	d02a      	beq.n	15696 <__gedf2+0x82>
   15640:	4f25      	ldr	r7, [pc, #148]	; (156d8 <__gedf2+0xc4>)
   15642:	42bd      	cmp	r5, r7
   15644:	d02d      	beq.n	156a2 <__gedf2+0x8e>
   15646:	2c00      	cmp	r4, #0
   15648:	d10f      	bne.n	1566a <__gedf2+0x56>
   1564a:	4330      	orrs	r0, r6
   1564c:	0007      	movs	r7, r0
   1564e:	4681      	mov	r9, r0
   15650:	4278      	negs	r0, r7
   15652:	4178      	adcs	r0, r7
   15654:	b2c0      	uxtb	r0, r0
   15656:	2d00      	cmp	r5, #0
   15658:	d117      	bne.n	1568a <__gedf2+0x76>
   1565a:	465f      	mov	r7, fp
   1565c:	433a      	orrs	r2, r7
   1565e:	d114      	bne.n	1568a <__gedf2+0x76>
   15660:	464b      	mov	r3, r9
   15662:	2000      	movs	r0, #0
   15664:	2b00      	cmp	r3, #0
   15666:	d00a      	beq.n	1567e <__gedf2+0x6a>
   15668:	e006      	b.n	15678 <__gedf2+0x64>
   1566a:	2d00      	cmp	r5, #0
   1566c:	d102      	bne.n	15674 <__gedf2+0x60>
   1566e:	4658      	mov	r0, fp
   15670:	4302      	orrs	r2, r0
   15672:	d001      	beq.n	15678 <__gedf2+0x64>
   15674:	4299      	cmp	r1, r3
   15676:	d018      	beq.n	156aa <__gedf2+0x96>
   15678:	4248      	negs	r0, r1
   1567a:	2101      	movs	r1, #1
   1567c:	4308      	orrs	r0, r1
   1567e:	bc3c      	pop	{r2, r3, r4, r5}
   15680:	4690      	mov	r8, r2
   15682:	4699      	mov	r9, r3
   15684:	46a2      	mov	sl, r4
   15686:	46ab      	mov	fp, r5
   15688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1568a:	2800      	cmp	r0, #0
   1568c:	d0f2      	beq.n	15674 <__gedf2+0x60>
   1568e:	2001      	movs	r0, #1
   15690:	3b01      	subs	r3, #1
   15692:	4318      	orrs	r0, r3
   15694:	e7f3      	b.n	1567e <__gedf2+0x6a>
   15696:	0037      	movs	r7, r6
   15698:	4307      	orrs	r7, r0
   1569a:	d0d1      	beq.n	15640 <__gedf2+0x2c>
   1569c:	2002      	movs	r0, #2
   1569e:	4240      	negs	r0, r0
   156a0:	e7ed      	b.n	1567e <__gedf2+0x6a>
   156a2:	465f      	mov	r7, fp
   156a4:	4317      	orrs	r7, r2
   156a6:	d0ce      	beq.n	15646 <__gedf2+0x32>
   156a8:	e7f8      	b.n	1569c <__gedf2+0x88>
   156aa:	42ac      	cmp	r4, r5
   156ac:	dce4      	bgt.n	15678 <__gedf2+0x64>
   156ae:	da03      	bge.n	156b8 <__gedf2+0xa4>
   156b0:	1e48      	subs	r0, r1, #1
   156b2:	2101      	movs	r1, #1
   156b4:	4308      	orrs	r0, r1
   156b6:	e7e2      	b.n	1567e <__gedf2+0x6a>
   156b8:	455e      	cmp	r6, fp
   156ba:	d8dd      	bhi.n	15678 <__gedf2+0x64>
   156bc:	d006      	beq.n	156cc <__gedf2+0xb8>
   156be:	2000      	movs	r0, #0
   156c0:	455e      	cmp	r6, fp
   156c2:	d2dc      	bcs.n	1567e <__gedf2+0x6a>
   156c4:	2301      	movs	r3, #1
   156c6:	1e48      	subs	r0, r1, #1
   156c8:	4318      	orrs	r0, r3
   156ca:	e7d8      	b.n	1567e <__gedf2+0x6a>
   156cc:	45c4      	cmp	ip, r8
   156ce:	d8d3      	bhi.n	15678 <__gedf2+0x64>
   156d0:	2000      	movs	r0, #0
   156d2:	45c4      	cmp	ip, r8
   156d4:	d3f6      	bcc.n	156c4 <__gedf2+0xb0>
   156d6:	e7d2      	b.n	1567e <__gedf2+0x6a>
   156d8:	000007ff 	.word	0x000007ff

000156dc <__ledf2>:
   156dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   156de:	464e      	mov	r6, r9
   156e0:	4645      	mov	r5, r8
   156e2:	46de      	mov	lr, fp
   156e4:	4657      	mov	r7, sl
   156e6:	005c      	lsls	r4, r3, #1
   156e8:	b5e0      	push	{r5, r6, r7, lr}
   156ea:	031f      	lsls	r7, r3, #12
   156ec:	0fdb      	lsrs	r3, r3, #31
   156ee:	4699      	mov	r9, r3
   156f0:	4b2a      	ldr	r3, [pc, #168]	; (1579c <__ledf2+0xc0>)
   156f2:	030e      	lsls	r6, r1, #12
   156f4:	004d      	lsls	r5, r1, #1
   156f6:	0fc9      	lsrs	r1, r1, #31
   156f8:	4684      	mov	ip, r0
   156fa:	0b36      	lsrs	r6, r6, #12
   156fc:	0d6d      	lsrs	r5, r5, #21
   156fe:	468b      	mov	fp, r1
   15700:	4690      	mov	r8, r2
   15702:	0b3f      	lsrs	r7, r7, #12
   15704:	0d64      	lsrs	r4, r4, #21
   15706:	429d      	cmp	r5, r3
   15708:	d020      	beq.n	1574c <__ledf2+0x70>
   1570a:	4b24      	ldr	r3, [pc, #144]	; (1579c <__ledf2+0xc0>)
   1570c:	429c      	cmp	r4, r3
   1570e:	d022      	beq.n	15756 <__ledf2+0x7a>
   15710:	2d00      	cmp	r5, #0
   15712:	d112      	bne.n	1573a <__ledf2+0x5e>
   15714:	4330      	orrs	r0, r6
   15716:	4243      	negs	r3, r0
   15718:	4143      	adcs	r3, r0
   1571a:	b2db      	uxtb	r3, r3
   1571c:	2c00      	cmp	r4, #0
   1571e:	d01f      	beq.n	15760 <__ledf2+0x84>
   15720:	2b00      	cmp	r3, #0
   15722:	d00c      	beq.n	1573e <__ledf2+0x62>
   15724:	464b      	mov	r3, r9
   15726:	2001      	movs	r0, #1
   15728:	3b01      	subs	r3, #1
   1572a:	4303      	orrs	r3, r0
   1572c:	0018      	movs	r0, r3
   1572e:	bc3c      	pop	{r2, r3, r4, r5}
   15730:	4690      	mov	r8, r2
   15732:	4699      	mov	r9, r3
   15734:	46a2      	mov	sl, r4
   15736:	46ab      	mov	fp, r5
   15738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1573a:	2c00      	cmp	r4, #0
   1573c:	d016      	beq.n	1576c <__ledf2+0x90>
   1573e:	45cb      	cmp	fp, r9
   15740:	d017      	beq.n	15772 <__ledf2+0x96>
   15742:	465b      	mov	r3, fp
   15744:	4259      	negs	r1, r3
   15746:	2301      	movs	r3, #1
   15748:	430b      	orrs	r3, r1
   1574a:	e7ef      	b.n	1572c <__ledf2+0x50>
   1574c:	0031      	movs	r1, r6
   1574e:	2302      	movs	r3, #2
   15750:	4301      	orrs	r1, r0
   15752:	d1eb      	bne.n	1572c <__ledf2+0x50>
   15754:	e7d9      	b.n	1570a <__ledf2+0x2e>
   15756:	0039      	movs	r1, r7
   15758:	2302      	movs	r3, #2
   1575a:	4311      	orrs	r1, r2
   1575c:	d1e6      	bne.n	1572c <__ledf2+0x50>
   1575e:	e7d7      	b.n	15710 <__ledf2+0x34>
   15760:	433a      	orrs	r2, r7
   15762:	d1dd      	bne.n	15720 <__ledf2+0x44>
   15764:	2300      	movs	r3, #0
   15766:	2800      	cmp	r0, #0
   15768:	d0e0      	beq.n	1572c <__ledf2+0x50>
   1576a:	e7ea      	b.n	15742 <__ledf2+0x66>
   1576c:	433a      	orrs	r2, r7
   1576e:	d1e6      	bne.n	1573e <__ledf2+0x62>
   15770:	e7e7      	b.n	15742 <__ledf2+0x66>
   15772:	42a5      	cmp	r5, r4
   15774:	dce5      	bgt.n	15742 <__ledf2+0x66>
   15776:	db05      	blt.n	15784 <__ledf2+0xa8>
   15778:	42be      	cmp	r6, r7
   1577a:	d8e2      	bhi.n	15742 <__ledf2+0x66>
   1577c:	d007      	beq.n	1578e <__ledf2+0xb2>
   1577e:	2300      	movs	r3, #0
   15780:	42be      	cmp	r6, r7
   15782:	d2d3      	bcs.n	1572c <__ledf2+0x50>
   15784:	4659      	mov	r1, fp
   15786:	2301      	movs	r3, #1
   15788:	3901      	subs	r1, #1
   1578a:	430b      	orrs	r3, r1
   1578c:	e7ce      	b.n	1572c <__ledf2+0x50>
   1578e:	45c4      	cmp	ip, r8
   15790:	d8d7      	bhi.n	15742 <__ledf2+0x66>
   15792:	2300      	movs	r3, #0
   15794:	45c4      	cmp	ip, r8
   15796:	d3f5      	bcc.n	15784 <__ledf2+0xa8>
   15798:	e7c8      	b.n	1572c <__ledf2+0x50>
   1579a:	46c0      	nop			; (mov r8, r8)
   1579c:	000007ff 	.word	0x000007ff

000157a0 <__aeabi_dmul>:
   157a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   157a2:	4657      	mov	r7, sl
   157a4:	4645      	mov	r5, r8
   157a6:	46de      	mov	lr, fp
   157a8:	464e      	mov	r6, r9
   157aa:	b5e0      	push	{r5, r6, r7, lr}
   157ac:	030c      	lsls	r4, r1, #12
   157ae:	4698      	mov	r8, r3
   157b0:	004e      	lsls	r6, r1, #1
   157b2:	0b23      	lsrs	r3, r4, #12
   157b4:	b087      	sub	sp, #28
   157b6:	0007      	movs	r7, r0
   157b8:	4692      	mov	sl, r2
   157ba:	469b      	mov	fp, r3
   157bc:	0d76      	lsrs	r6, r6, #21
   157be:	0fcd      	lsrs	r5, r1, #31
   157c0:	2e00      	cmp	r6, #0
   157c2:	d06b      	beq.n	1589c <__aeabi_dmul+0xfc>
   157c4:	4b6d      	ldr	r3, [pc, #436]	; (1597c <__aeabi_dmul+0x1dc>)
   157c6:	429e      	cmp	r6, r3
   157c8:	d035      	beq.n	15836 <__aeabi_dmul+0x96>
   157ca:	2480      	movs	r4, #128	; 0x80
   157cc:	465b      	mov	r3, fp
   157ce:	0f42      	lsrs	r2, r0, #29
   157d0:	0424      	lsls	r4, r4, #16
   157d2:	00db      	lsls	r3, r3, #3
   157d4:	4314      	orrs	r4, r2
   157d6:	431c      	orrs	r4, r3
   157d8:	00c3      	lsls	r3, r0, #3
   157da:	4699      	mov	r9, r3
   157dc:	4b68      	ldr	r3, [pc, #416]	; (15980 <__aeabi_dmul+0x1e0>)
   157de:	46a3      	mov	fp, r4
   157e0:	469c      	mov	ip, r3
   157e2:	2300      	movs	r3, #0
   157e4:	2700      	movs	r7, #0
   157e6:	4466      	add	r6, ip
   157e8:	9302      	str	r3, [sp, #8]
   157ea:	4643      	mov	r3, r8
   157ec:	031c      	lsls	r4, r3, #12
   157ee:	005a      	lsls	r2, r3, #1
   157f0:	0fdb      	lsrs	r3, r3, #31
   157f2:	4650      	mov	r0, sl
   157f4:	0b24      	lsrs	r4, r4, #12
   157f6:	0d52      	lsrs	r2, r2, #21
   157f8:	4698      	mov	r8, r3
   157fa:	d100      	bne.n	157fe <__aeabi_dmul+0x5e>
   157fc:	e076      	b.n	158ec <__aeabi_dmul+0x14c>
   157fe:	4b5f      	ldr	r3, [pc, #380]	; (1597c <__aeabi_dmul+0x1dc>)
   15800:	429a      	cmp	r2, r3
   15802:	d06d      	beq.n	158e0 <__aeabi_dmul+0x140>
   15804:	2380      	movs	r3, #128	; 0x80
   15806:	0f41      	lsrs	r1, r0, #29
   15808:	041b      	lsls	r3, r3, #16
   1580a:	430b      	orrs	r3, r1
   1580c:	495c      	ldr	r1, [pc, #368]	; (15980 <__aeabi_dmul+0x1e0>)
   1580e:	00e4      	lsls	r4, r4, #3
   15810:	468c      	mov	ip, r1
   15812:	431c      	orrs	r4, r3
   15814:	00c3      	lsls	r3, r0, #3
   15816:	2000      	movs	r0, #0
   15818:	4462      	add	r2, ip
   1581a:	4641      	mov	r1, r8
   1581c:	18b6      	adds	r6, r6, r2
   1581e:	4069      	eors	r1, r5
   15820:	1c72      	adds	r2, r6, #1
   15822:	9101      	str	r1, [sp, #4]
   15824:	4694      	mov	ip, r2
   15826:	4307      	orrs	r7, r0
   15828:	2f0f      	cmp	r7, #15
   1582a:	d900      	bls.n	1582e <__aeabi_dmul+0x8e>
   1582c:	e0b0      	b.n	15990 <__aeabi_dmul+0x1f0>
   1582e:	4a55      	ldr	r2, [pc, #340]	; (15984 <__aeabi_dmul+0x1e4>)
   15830:	00bf      	lsls	r7, r7, #2
   15832:	59d2      	ldr	r2, [r2, r7]
   15834:	4697      	mov	pc, r2
   15836:	465b      	mov	r3, fp
   15838:	4303      	orrs	r3, r0
   1583a:	4699      	mov	r9, r3
   1583c:	d000      	beq.n	15840 <__aeabi_dmul+0xa0>
   1583e:	e087      	b.n	15950 <__aeabi_dmul+0x1b0>
   15840:	2300      	movs	r3, #0
   15842:	469b      	mov	fp, r3
   15844:	3302      	adds	r3, #2
   15846:	2708      	movs	r7, #8
   15848:	9302      	str	r3, [sp, #8]
   1584a:	e7ce      	b.n	157ea <__aeabi_dmul+0x4a>
   1584c:	4642      	mov	r2, r8
   1584e:	9201      	str	r2, [sp, #4]
   15850:	2802      	cmp	r0, #2
   15852:	d067      	beq.n	15924 <__aeabi_dmul+0x184>
   15854:	2803      	cmp	r0, #3
   15856:	d100      	bne.n	1585a <__aeabi_dmul+0xba>
   15858:	e20e      	b.n	15c78 <__aeabi_dmul+0x4d8>
   1585a:	2801      	cmp	r0, #1
   1585c:	d000      	beq.n	15860 <__aeabi_dmul+0xc0>
   1585e:	e162      	b.n	15b26 <__aeabi_dmul+0x386>
   15860:	2300      	movs	r3, #0
   15862:	2400      	movs	r4, #0
   15864:	2200      	movs	r2, #0
   15866:	4699      	mov	r9, r3
   15868:	9901      	ldr	r1, [sp, #4]
   1586a:	4001      	ands	r1, r0
   1586c:	b2cd      	uxtb	r5, r1
   1586e:	2100      	movs	r1, #0
   15870:	0312      	lsls	r2, r2, #12
   15872:	0d0b      	lsrs	r3, r1, #20
   15874:	0b12      	lsrs	r2, r2, #12
   15876:	051b      	lsls	r3, r3, #20
   15878:	4313      	orrs	r3, r2
   1587a:	4a43      	ldr	r2, [pc, #268]	; (15988 <__aeabi_dmul+0x1e8>)
   1587c:	0524      	lsls	r4, r4, #20
   1587e:	4013      	ands	r3, r2
   15880:	431c      	orrs	r4, r3
   15882:	0064      	lsls	r4, r4, #1
   15884:	07ed      	lsls	r5, r5, #31
   15886:	0864      	lsrs	r4, r4, #1
   15888:	432c      	orrs	r4, r5
   1588a:	4648      	mov	r0, r9
   1588c:	0021      	movs	r1, r4
   1588e:	b007      	add	sp, #28
   15890:	bc3c      	pop	{r2, r3, r4, r5}
   15892:	4690      	mov	r8, r2
   15894:	4699      	mov	r9, r3
   15896:	46a2      	mov	sl, r4
   15898:	46ab      	mov	fp, r5
   1589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1589c:	4303      	orrs	r3, r0
   1589e:	4699      	mov	r9, r3
   158a0:	d04f      	beq.n	15942 <__aeabi_dmul+0x1a2>
   158a2:	465b      	mov	r3, fp
   158a4:	2b00      	cmp	r3, #0
   158a6:	d100      	bne.n	158aa <__aeabi_dmul+0x10a>
   158a8:	e189      	b.n	15bbe <__aeabi_dmul+0x41e>
   158aa:	4658      	mov	r0, fp
   158ac:	f000 fe98 	bl	165e0 <__clzsi2>
   158b0:	0003      	movs	r3, r0
   158b2:	3b0b      	subs	r3, #11
   158b4:	2b1c      	cmp	r3, #28
   158b6:	dd00      	ble.n	158ba <__aeabi_dmul+0x11a>
   158b8:	e17a      	b.n	15bb0 <__aeabi_dmul+0x410>
   158ba:	221d      	movs	r2, #29
   158bc:	1ad3      	subs	r3, r2, r3
   158be:	003a      	movs	r2, r7
   158c0:	0001      	movs	r1, r0
   158c2:	465c      	mov	r4, fp
   158c4:	40da      	lsrs	r2, r3
   158c6:	3908      	subs	r1, #8
   158c8:	408c      	lsls	r4, r1
   158ca:	0013      	movs	r3, r2
   158cc:	408f      	lsls	r7, r1
   158ce:	4323      	orrs	r3, r4
   158d0:	469b      	mov	fp, r3
   158d2:	46b9      	mov	r9, r7
   158d4:	2300      	movs	r3, #0
   158d6:	4e2d      	ldr	r6, [pc, #180]	; (1598c <__aeabi_dmul+0x1ec>)
   158d8:	2700      	movs	r7, #0
   158da:	1a36      	subs	r6, r6, r0
   158dc:	9302      	str	r3, [sp, #8]
   158de:	e784      	b.n	157ea <__aeabi_dmul+0x4a>
   158e0:	4653      	mov	r3, sl
   158e2:	4323      	orrs	r3, r4
   158e4:	d12a      	bne.n	1593c <__aeabi_dmul+0x19c>
   158e6:	2400      	movs	r4, #0
   158e8:	2002      	movs	r0, #2
   158ea:	e796      	b.n	1581a <__aeabi_dmul+0x7a>
   158ec:	4653      	mov	r3, sl
   158ee:	4323      	orrs	r3, r4
   158f0:	d020      	beq.n	15934 <__aeabi_dmul+0x194>
   158f2:	2c00      	cmp	r4, #0
   158f4:	d100      	bne.n	158f8 <__aeabi_dmul+0x158>
   158f6:	e157      	b.n	15ba8 <__aeabi_dmul+0x408>
   158f8:	0020      	movs	r0, r4
   158fa:	f000 fe71 	bl	165e0 <__clzsi2>
   158fe:	0003      	movs	r3, r0
   15900:	3b0b      	subs	r3, #11
   15902:	2b1c      	cmp	r3, #28
   15904:	dd00      	ble.n	15908 <__aeabi_dmul+0x168>
   15906:	e149      	b.n	15b9c <__aeabi_dmul+0x3fc>
   15908:	211d      	movs	r1, #29
   1590a:	1acb      	subs	r3, r1, r3
   1590c:	4651      	mov	r1, sl
   1590e:	0002      	movs	r2, r0
   15910:	40d9      	lsrs	r1, r3
   15912:	4653      	mov	r3, sl
   15914:	3a08      	subs	r2, #8
   15916:	4094      	lsls	r4, r2
   15918:	4093      	lsls	r3, r2
   1591a:	430c      	orrs	r4, r1
   1591c:	4a1b      	ldr	r2, [pc, #108]	; (1598c <__aeabi_dmul+0x1ec>)
   1591e:	1a12      	subs	r2, r2, r0
   15920:	2000      	movs	r0, #0
   15922:	e77a      	b.n	1581a <__aeabi_dmul+0x7a>
   15924:	2501      	movs	r5, #1
   15926:	9b01      	ldr	r3, [sp, #4]
   15928:	4c14      	ldr	r4, [pc, #80]	; (1597c <__aeabi_dmul+0x1dc>)
   1592a:	401d      	ands	r5, r3
   1592c:	2300      	movs	r3, #0
   1592e:	2200      	movs	r2, #0
   15930:	4699      	mov	r9, r3
   15932:	e79c      	b.n	1586e <__aeabi_dmul+0xce>
   15934:	2400      	movs	r4, #0
   15936:	2200      	movs	r2, #0
   15938:	2001      	movs	r0, #1
   1593a:	e76e      	b.n	1581a <__aeabi_dmul+0x7a>
   1593c:	4653      	mov	r3, sl
   1593e:	2003      	movs	r0, #3
   15940:	e76b      	b.n	1581a <__aeabi_dmul+0x7a>
   15942:	2300      	movs	r3, #0
   15944:	469b      	mov	fp, r3
   15946:	3301      	adds	r3, #1
   15948:	2704      	movs	r7, #4
   1594a:	2600      	movs	r6, #0
   1594c:	9302      	str	r3, [sp, #8]
   1594e:	e74c      	b.n	157ea <__aeabi_dmul+0x4a>
   15950:	2303      	movs	r3, #3
   15952:	4681      	mov	r9, r0
   15954:	270c      	movs	r7, #12
   15956:	9302      	str	r3, [sp, #8]
   15958:	e747      	b.n	157ea <__aeabi_dmul+0x4a>
   1595a:	2280      	movs	r2, #128	; 0x80
   1595c:	2300      	movs	r3, #0
   1595e:	2500      	movs	r5, #0
   15960:	0312      	lsls	r2, r2, #12
   15962:	4699      	mov	r9, r3
   15964:	4c05      	ldr	r4, [pc, #20]	; (1597c <__aeabi_dmul+0x1dc>)
   15966:	e782      	b.n	1586e <__aeabi_dmul+0xce>
   15968:	465c      	mov	r4, fp
   1596a:	464b      	mov	r3, r9
   1596c:	9802      	ldr	r0, [sp, #8]
   1596e:	e76f      	b.n	15850 <__aeabi_dmul+0xb0>
   15970:	465c      	mov	r4, fp
   15972:	464b      	mov	r3, r9
   15974:	9501      	str	r5, [sp, #4]
   15976:	9802      	ldr	r0, [sp, #8]
   15978:	e76a      	b.n	15850 <__aeabi_dmul+0xb0>
   1597a:	46c0      	nop			; (mov r8, r8)
   1597c:	000007ff 	.word	0x000007ff
   15980:	fffffc01 	.word	0xfffffc01
   15984:	00018d34 	.word	0x00018d34
   15988:	800fffff 	.word	0x800fffff
   1598c:	fffffc0d 	.word	0xfffffc0d
   15990:	464a      	mov	r2, r9
   15992:	4649      	mov	r1, r9
   15994:	0c17      	lsrs	r7, r2, #16
   15996:	0c1a      	lsrs	r2, r3, #16
   15998:	041b      	lsls	r3, r3, #16
   1599a:	0c1b      	lsrs	r3, r3, #16
   1599c:	0408      	lsls	r0, r1, #16
   1599e:	0019      	movs	r1, r3
   159a0:	0c00      	lsrs	r0, r0, #16
   159a2:	4341      	muls	r1, r0
   159a4:	0015      	movs	r5, r2
   159a6:	4688      	mov	r8, r1
   159a8:	0019      	movs	r1, r3
   159aa:	437d      	muls	r5, r7
   159ac:	4379      	muls	r1, r7
   159ae:	9503      	str	r5, [sp, #12]
   159b0:	4689      	mov	r9, r1
   159b2:	0029      	movs	r1, r5
   159b4:	0015      	movs	r5, r2
   159b6:	4345      	muls	r5, r0
   159b8:	444d      	add	r5, r9
   159ba:	9502      	str	r5, [sp, #8]
   159bc:	4645      	mov	r5, r8
   159be:	0c2d      	lsrs	r5, r5, #16
   159c0:	46aa      	mov	sl, r5
   159c2:	9d02      	ldr	r5, [sp, #8]
   159c4:	4455      	add	r5, sl
   159c6:	45a9      	cmp	r9, r5
   159c8:	d906      	bls.n	159d8 <__aeabi_dmul+0x238>
   159ca:	468a      	mov	sl, r1
   159cc:	2180      	movs	r1, #128	; 0x80
   159ce:	0249      	lsls	r1, r1, #9
   159d0:	4689      	mov	r9, r1
   159d2:	44ca      	add	sl, r9
   159d4:	4651      	mov	r1, sl
   159d6:	9103      	str	r1, [sp, #12]
   159d8:	0c29      	lsrs	r1, r5, #16
   159da:	9104      	str	r1, [sp, #16]
   159dc:	4641      	mov	r1, r8
   159de:	0409      	lsls	r1, r1, #16
   159e0:	042d      	lsls	r5, r5, #16
   159e2:	0c09      	lsrs	r1, r1, #16
   159e4:	4688      	mov	r8, r1
   159e6:	0029      	movs	r1, r5
   159e8:	0c25      	lsrs	r5, r4, #16
   159ea:	0424      	lsls	r4, r4, #16
   159ec:	4441      	add	r1, r8
   159ee:	0c24      	lsrs	r4, r4, #16
   159f0:	9105      	str	r1, [sp, #20]
   159f2:	0021      	movs	r1, r4
   159f4:	4341      	muls	r1, r0
   159f6:	4688      	mov	r8, r1
   159f8:	0021      	movs	r1, r4
   159fa:	4379      	muls	r1, r7
   159fc:	468a      	mov	sl, r1
   159fe:	4368      	muls	r0, r5
   15a00:	4641      	mov	r1, r8
   15a02:	4450      	add	r0, sl
   15a04:	4681      	mov	r9, r0
   15a06:	0c08      	lsrs	r0, r1, #16
   15a08:	4448      	add	r0, r9
   15a0a:	436f      	muls	r7, r5
   15a0c:	4582      	cmp	sl, r0
   15a0e:	d903      	bls.n	15a18 <__aeabi_dmul+0x278>
   15a10:	2180      	movs	r1, #128	; 0x80
   15a12:	0249      	lsls	r1, r1, #9
   15a14:	4689      	mov	r9, r1
   15a16:	444f      	add	r7, r9
   15a18:	0c01      	lsrs	r1, r0, #16
   15a1a:	4689      	mov	r9, r1
   15a1c:	0039      	movs	r1, r7
   15a1e:	4449      	add	r1, r9
   15a20:	9102      	str	r1, [sp, #8]
   15a22:	4641      	mov	r1, r8
   15a24:	040f      	lsls	r7, r1, #16
   15a26:	9904      	ldr	r1, [sp, #16]
   15a28:	0c3f      	lsrs	r7, r7, #16
   15a2a:	4688      	mov	r8, r1
   15a2c:	0400      	lsls	r0, r0, #16
   15a2e:	19c0      	adds	r0, r0, r7
   15a30:	4480      	add	r8, r0
   15a32:	4641      	mov	r1, r8
   15a34:	9104      	str	r1, [sp, #16]
   15a36:	4659      	mov	r1, fp
   15a38:	0c0f      	lsrs	r7, r1, #16
   15a3a:	0409      	lsls	r1, r1, #16
   15a3c:	0c09      	lsrs	r1, r1, #16
   15a3e:	4688      	mov	r8, r1
   15a40:	4359      	muls	r1, r3
   15a42:	468a      	mov	sl, r1
   15a44:	0039      	movs	r1, r7
   15a46:	4351      	muls	r1, r2
   15a48:	4689      	mov	r9, r1
   15a4a:	4641      	mov	r1, r8
   15a4c:	434a      	muls	r2, r1
   15a4e:	4651      	mov	r1, sl
   15a50:	0c09      	lsrs	r1, r1, #16
   15a52:	468b      	mov	fp, r1
   15a54:	437b      	muls	r3, r7
   15a56:	18d2      	adds	r2, r2, r3
   15a58:	445a      	add	r2, fp
   15a5a:	4293      	cmp	r3, r2
   15a5c:	d903      	bls.n	15a66 <__aeabi_dmul+0x2c6>
   15a5e:	2380      	movs	r3, #128	; 0x80
   15a60:	025b      	lsls	r3, r3, #9
   15a62:	469b      	mov	fp, r3
   15a64:	44d9      	add	r9, fp
   15a66:	4651      	mov	r1, sl
   15a68:	0409      	lsls	r1, r1, #16
   15a6a:	0c09      	lsrs	r1, r1, #16
   15a6c:	468a      	mov	sl, r1
   15a6e:	4641      	mov	r1, r8
   15a70:	4361      	muls	r1, r4
   15a72:	437c      	muls	r4, r7
   15a74:	0c13      	lsrs	r3, r2, #16
   15a76:	0412      	lsls	r2, r2, #16
   15a78:	444b      	add	r3, r9
   15a7a:	4452      	add	r2, sl
   15a7c:	46a1      	mov	r9, r4
   15a7e:	468a      	mov	sl, r1
   15a80:	003c      	movs	r4, r7
   15a82:	4641      	mov	r1, r8
   15a84:	436c      	muls	r4, r5
   15a86:	434d      	muls	r5, r1
   15a88:	4651      	mov	r1, sl
   15a8a:	444d      	add	r5, r9
   15a8c:	0c0f      	lsrs	r7, r1, #16
   15a8e:	197d      	adds	r5, r7, r5
   15a90:	45a9      	cmp	r9, r5
   15a92:	d903      	bls.n	15a9c <__aeabi_dmul+0x2fc>
   15a94:	2180      	movs	r1, #128	; 0x80
   15a96:	0249      	lsls	r1, r1, #9
   15a98:	4688      	mov	r8, r1
   15a9a:	4444      	add	r4, r8
   15a9c:	9f04      	ldr	r7, [sp, #16]
   15a9e:	9903      	ldr	r1, [sp, #12]
   15aa0:	46b8      	mov	r8, r7
   15aa2:	4441      	add	r1, r8
   15aa4:	468b      	mov	fp, r1
   15aa6:	4583      	cmp	fp, r0
   15aa8:	4180      	sbcs	r0, r0
   15aaa:	4241      	negs	r1, r0
   15aac:	4688      	mov	r8, r1
   15aae:	4651      	mov	r1, sl
   15ab0:	0408      	lsls	r0, r1, #16
   15ab2:	042f      	lsls	r7, r5, #16
   15ab4:	0c00      	lsrs	r0, r0, #16
   15ab6:	183f      	adds	r7, r7, r0
   15ab8:	4658      	mov	r0, fp
   15aba:	9902      	ldr	r1, [sp, #8]
   15abc:	1810      	adds	r0, r2, r0
   15abe:	4689      	mov	r9, r1
   15ac0:	4290      	cmp	r0, r2
   15ac2:	4192      	sbcs	r2, r2
   15ac4:	444f      	add	r7, r9
   15ac6:	46ba      	mov	sl, r7
   15ac8:	4252      	negs	r2, r2
   15aca:	4699      	mov	r9, r3
   15acc:	4693      	mov	fp, r2
   15ace:	44c2      	add	sl, r8
   15ad0:	44d1      	add	r9, sl
   15ad2:	44cb      	add	fp, r9
   15ad4:	428f      	cmp	r7, r1
   15ad6:	41bf      	sbcs	r7, r7
   15ad8:	45c2      	cmp	sl, r8
   15ada:	4189      	sbcs	r1, r1
   15adc:	4599      	cmp	r9, r3
   15ade:	419b      	sbcs	r3, r3
   15ae0:	4593      	cmp	fp, r2
   15ae2:	4192      	sbcs	r2, r2
   15ae4:	427f      	negs	r7, r7
   15ae6:	4249      	negs	r1, r1
   15ae8:	0c2d      	lsrs	r5, r5, #16
   15aea:	4252      	negs	r2, r2
   15aec:	430f      	orrs	r7, r1
   15aee:	425b      	negs	r3, r3
   15af0:	4313      	orrs	r3, r2
   15af2:	197f      	adds	r7, r7, r5
   15af4:	18ff      	adds	r7, r7, r3
   15af6:	465b      	mov	r3, fp
   15af8:	193c      	adds	r4, r7, r4
   15afa:	0ddb      	lsrs	r3, r3, #23
   15afc:	9a05      	ldr	r2, [sp, #20]
   15afe:	0264      	lsls	r4, r4, #9
   15b00:	431c      	orrs	r4, r3
   15b02:	0243      	lsls	r3, r0, #9
   15b04:	4313      	orrs	r3, r2
   15b06:	1e5d      	subs	r5, r3, #1
   15b08:	41ab      	sbcs	r3, r5
   15b0a:	465a      	mov	r2, fp
   15b0c:	0dc0      	lsrs	r0, r0, #23
   15b0e:	4303      	orrs	r3, r0
   15b10:	0252      	lsls	r2, r2, #9
   15b12:	4313      	orrs	r3, r2
   15b14:	01e2      	lsls	r2, r4, #7
   15b16:	d556      	bpl.n	15bc6 <__aeabi_dmul+0x426>
   15b18:	2001      	movs	r0, #1
   15b1a:	085a      	lsrs	r2, r3, #1
   15b1c:	4003      	ands	r3, r0
   15b1e:	4313      	orrs	r3, r2
   15b20:	07e2      	lsls	r2, r4, #31
   15b22:	4313      	orrs	r3, r2
   15b24:	0864      	lsrs	r4, r4, #1
   15b26:	485a      	ldr	r0, [pc, #360]	; (15c90 <__aeabi_dmul+0x4f0>)
   15b28:	4460      	add	r0, ip
   15b2a:	2800      	cmp	r0, #0
   15b2c:	dd4d      	ble.n	15bca <__aeabi_dmul+0x42a>
   15b2e:	075a      	lsls	r2, r3, #29
   15b30:	d009      	beq.n	15b46 <__aeabi_dmul+0x3a6>
   15b32:	220f      	movs	r2, #15
   15b34:	401a      	ands	r2, r3
   15b36:	2a04      	cmp	r2, #4
   15b38:	d005      	beq.n	15b46 <__aeabi_dmul+0x3a6>
   15b3a:	1d1a      	adds	r2, r3, #4
   15b3c:	429a      	cmp	r2, r3
   15b3e:	419b      	sbcs	r3, r3
   15b40:	425b      	negs	r3, r3
   15b42:	18e4      	adds	r4, r4, r3
   15b44:	0013      	movs	r3, r2
   15b46:	01e2      	lsls	r2, r4, #7
   15b48:	d504      	bpl.n	15b54 <__aeabi_dmul+0x3b4>
   15b4a:	2080      	movs	r0, #128	; 0x80
   15b4c:	4a51      	ldr	r2, [pc, #324]	; (15c94 <__aeabi_dmul+0x4f4>)
   15b4e:	00c0      	lsls	r0, r0, #3
   15b50:	4014      	ands	r4, r2
   15b52:	4460      	add	r0, ip
   15b54:	4a50      	ldr	r2, [pc, #320]	; (15c98 <__aeabi_dmul+0x4f8>)
   15b56:	4290      	cmp	r0, r2
   15b58:	dd00      	ble.n	15b5c <__aeabi_dmul+0x3bc>
   15b5a:	e6e3      	b.n	15924 <__aeabi_dmul+0x184>
   15b5c:	2501      	movs	r5, #1
   15b5e:	08db      	lsrs	r3, r3, #3
   15b60:	0762      	lsls	r2, r4, #29
   15b62:	431a      	orrs	r2, r3
   15b64:	0264      	lsls	r4, r4, #9
   15b66:	9b01      	ldr	r3, [sp, #4]
   15b68:	4691      	mov	r9, r2
   15b6a:	0b22      	lsrs	r2, r4, #12
   15b6c:	0544      	lsls	r4, r0, #21
   15b6e:	0d64      	lsrs	r4, r4, #21
   15b70:	401d      	ands	r5, r3
   15b72:	e67c      	b.n	1586e <__aeabi_dmul+0xce>
   15b74:	2280      	movs	r2, #128	; 0x80
   15b76:	4659      	mov	r1, fp
   15b78:	0312      	lsls	r2, r2, #12
   15b7a:	4211      	tst	r1, r2
   15b7c:	d008      	beq.n	15b90 <__aeabi_dmul+0x3f0>
   15b7e:	4214      	tst	r4, r2
   15b80:	d106      	bne.n	15b90 <__aeabi_dmul+0x3f0>
   15b82:	4322      	orrs	r2, r4
   15b84:	0312      	lsls	r2, r2, #12
   15b86:	0b12      	lsrs	r2, r2, #12
   15b88:	4645      	mov	r5, r8
   15b8a:	4699      	mov	r9, r3
   15b8c:	4c43      	ldr	r4, [pc, #268]	; (15c9c <__aeabi_dmul+0x4fc>)
   15b8e:	e66e      	b.n	1586e <__aeabi_dmul+0xce>
   15b90:	465b      	mov	r3, fp
   15b92:	431a      	orrs	r2, r3
   15b94:	0312      	lsls	r2, r2, #12
   15b96:	0b12      	lsrs	r2, r2, #12
   15b98:	4c40      	ldr	r4, [pc, #256]	; (15c9c <__aeabi_dmul+0x4fc>)
   15b9a:	e668      	b.n	1586e <__aeabi_dmul+0xce>
   15b9c:	0003      	movs	r3, r0
   15b9e:	4654      	mov	r4, sl
   15ba0:	3b28      	subs	r3, #40	; 0x28
   15ba2:	409c      	lsls	r4, r3
   15ba4:	2300      	movs	r3, #0
   15ba6:	e6b9      	b.n	1591c <__aeabi_dmul+0x17c>
   15ba8:	f000 fd1a 	bl	165e0 <__clzsi2>
   15bac:	3020      	adds	r0, #32
   15bae:	e6a6      	b.n	158fe <__aeabi_dmul+0x15e>
   15bb0:	0003      	movs	r3, r0
   15bb2:	3b28      	subs	r3, #40	; 0x28
   15bb4:	409f      	lsls	r7, r3
   15bb6:	2300      	movs	r3, #0
   15bb8:	46bb      	mov	fp, r7
   15bba:	4699      	mov	r9, r3
   15bbc:	e68a      	b.n	158d4 <__aeabi_dmul+0x134>
   15bbe:	f000 fd0f 	bl	165e0 <__clzsi2>
   15bc2:	3020      	adds	r0, #32
   15bc4:	e674      	b.n	158b0 <__aeabi_dmul+0x110>
   15bc6:	46b4      	mov	ip, r6
   15bc8:	e7ad      	b.n	15b26 <__aeabi_dmul+0x386>
   15bca:	2501      	movs	r5, #1
   15bcc:	1a2a      	subs	r2, r5, r0
   15bce:	2a38      	cmp	r2, #56	; 0x38
   15bd0:	dd06      	ble.n	15be0 <__aeabi_dmul+0x440>
   15bd2:	9b01      	ldr	r3, [sp, #4]
   15bd4:	2400      	movs	r4, #0
   15bd6:	401d      	ands	r5, r3
   15bd8:	2300      	movs	r3, #0
   15bda:	2200      	movs	r2, #0
   15bdc:	4699      	mov	r9, r3
   15bde:	e646      	b.n	1586e <__aeabi_dmul+0xce>
   15be0:	2a1f      	cmp	r2, #31
   15be2:	dc21      	bgt.n	15c28 <__aeabi_dmul+0x488>
   15be4:	2520      	movs	r5, #32
   15be6:	0020      	movs	r0, r4
   15be8:	1aad      	subs	r5, r5, r2
   15bea:	001e      	movs	r6, r3
   15bec:	40ab      	lsls	r3, r5
   15bee:	40a8      	lsls	r0, r5
   15bf0:	40d6      	lsrs	r6, r2
   15bf2:	1e5d      	subs	r5, r3, #1
   15bf4:	41ab      	sbcs	r3, r5
   15bf6:	4330      	orrs	r0, r6
   15bf8:	4318      	orrs	r0, r3
   15bfa:	40d4      	lsrs	r4, r2
   15bfc:	0743      	lsls	r3, r0, #29
   15bfe:	d009      	beq.n	15c14 <__aeabi_dmul+0x474>
   15c00:	230f      	movs	r3, #15
   15c02:	4003      	ands	r3, r0
   15c04:	2b04      	cmp	r3, #4
   15c06:	d005      	beq.n	15c14 <__aeabi_dmul+0x474>
   15c08:	0003      	movs	r3, r0
   15c0a:	1d18      	adds	r0, r3, #4
   15c0c:	4298      	cmp	r0, r3
   15c0e:	419b      	sbcs	r3, r3
   15c10:	425b      	negs	r3, r3
   15c12:	18e4      	adds	r4, r4, r3
   15c14:	0223      	lsls	r3, r4, #8
   15c16:	d521      	bpl.n	15c5c <__aeabi_dmul+0x4bc>
   15c18:	2501      	movs	r5, #1
   15c1a:	9b01      	ldr	r3, [sp, #4]
   15c1c:	2401      	movs	r4, #1
   15c1e:	401d      	ands	r5, r3
   15c20:	2300      	movs	r3, #0
   15c22:	2200      	movs	r2, #0
   15c24:	4699      	mov	r9, r3
   15c26:	e622      	b.n	1586e <__aeabi_dmul+0xce>
   15c28:	251f      	movs	r5, #31
   15c2a:	0021      	movs	r1, r4
   15c2c:	426d      	negs	r5, r5
   15c2e:	1a28      	subs	r0, r5, r0
   15c30:	40c1      	lsrs	r1, r0
   15c32:	0008      	movs	r0, r1
   15c34:	2a20      	cmp	r2, #32
   15c36:	d01d      	beq.n	15c74 <__aeabi_dmul+0x4d4>
   15c38:	355f      	adds	r5, #95	; 0x5f
   15c3a:	1aaa      	subs	r2, r5, r2
   15c3c:	4094      	lsls	r4, r2
   15c3e:	4323      	orrs	r3, r4
   15c40:	1e5c      	subs	r4, r3, #1
   15c42:	41a3      	sbcs	r3, r4
   15c44:	2507      	movs	r5, #7
   15c46:	4303      	orrs	r3, r0
   15c48:	401d      	ands	r5, r3
   15c4a:	2200      	movs	r2, #0
   15c4c:	2d00      	cmp	r5, #0
   15c4e:	d009      	beq.n	15c64 <__aeabi_dmul+0x4c4>
   15c50:	220f      	movs	r2, #15
   15c52:	2400      	movs	r4, #0
   15c54:	401a      	ands	r2, r3
   15c56:	0018      	movs	r0, r3
   15c58:	2a04      	cmp	r2, #4
   15c5a:	d1d6      	bne.n	15c0a <__aeabi_dmul+0x46a>
   15c5c:	0003      	movs	r3, r0
   15c5e:	0765      	lsls	r5, r4, #29
   15c60:	0264      	lsls	r4, r4, #9
   15c62:	0b22      	lsrs	r2, r4, #12
   15c64:	08db      	lsrs	r3, r3, #3
   15c66:	432b      	orrs	r3, r5
   15c68:	2501      	movs	r5, #1
   15c6a:	4699      	mov	r9, r3
   15c6c:	9b01      	ldr	r3, [sp, #4]
   15c6e:	2400      	movs	r4, #0
   15c70:	401d      	ands	r5, r3
   15c72:	e5fc      	b.n	1586e <__aeabi_dmul+0xce>
   15c74:	2400      	movs	r4, #0
   15c76:	e7e2      	b.n	15c3e <__aeabi_dmul+0x49e>
   15c78:	2280      	movs	r2, #128	; 0x80
   15c7a:	2501      	movs	r5, #1
   15c7c:	0312      	lsls	r2, r2, #12
   15c7e:	4322      	orrs	r2, r4
   15c80:	9901      	ldr	r1, [sp, #4]
   15c82:	0312      	lsls	r2, r2, #12
   15c84:	0b12      	lsrs	r2, r2, #12
   15c86:	400d      	ands	r5, r1
   15c88:	4699      	mov	r9, r3
   15c8a:	4c04      	ldr	r4, [pc, #16]	; (15c9c <__aeabi_dmul+0x4fc>)
   15c8c:	e5ef      	b.n	1586e <__aeabi_dmul+0xce>
   15c8e:	46c0      	nop			; (mov r8, r8)
   15c90:	000003ff 	.word	0x000003ff
   15c94:	feffffff 	.word	0xfeffffff
   15c98:	000007fe 	.word	0x000007fe
   15c9c:	000007ff 	.word	0x000007ff

00015ca0 <__aeabi_dsub>:
   15ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ca2:	4646      	mov	r6, r8
   15ca4:	46d6      	mov	lr, sl
   15ca6:	464f      	mov	r7, r9
   15ca8:	030c      	lsls	r4, r1, #12
   15caa:	b5c0      	push	{r6, r7, lr}
   15cac:	0fcd      	lsrs	r5, r1, #31
   15cae:	004e      	lsls	r6, r1, #1
   15cb0:	0a61      	lsrs	r1, r4, #9
   15cb2:	0f44      	lsrs	r4, r0, #29
   15cb4:	430c      	orrs	r4, r1
   15cb6:	00c1      	lsls	r1, r0, #3
   15cb8:	0058      	lsls	r0, r3, #1
   15cba:	0d40      	lsrs	r0, r0, #21
   15cbc:	4684      	mov	ip, r0
   15cbe:	468a      	mov	sl, r1
   15cc0:	000f      	movs	r7, r1
   15cc2:	0319      	lsls	r1, r3, #12
   15cc4:	0f50      	lsrs	r0, r2, #29
   15cc6:	0a49      	lsrs	r1, r1, #9
   15cc8:	4301      	orrs	r1, r0
   15cca:	48c6      	ldr	r0, [pc, #792]	; (15fe4 <__aeabi_dsub+0x344>)
   15ccc:	0d76      	lsrs	r6, r6, #21
   15cce:	46a8      	mov	r8, r5
   15cd0:	0fdb      	lsrs	r3, r3, #31
   15cd2:	00d2      	lsls	r2, r2, #3
   15cd4:	4584      	cmp	ip, r0
   15cd6:	d100      	bne.n	15cda <__aeabi_dsub+0x3a>
   15cd8:	e0d8      	b.n	15e8c <__aeabi_dsub+0x1ec>
   15cda:	2001      	movs	r0, #1
   15cdc:	4043      	eors	r3, r0
   15cde:	42ab      	cmp	r3, r5
   15ce0:	d100      	bne.n	15ce4 <__aeabi_dsub+0x44>
   15ce2:	e0a6      	b.n	15e32 <__aeabi_dsub+0x192>
   15ce4:	4660      	mov	r0, ip
   15ce6:	1a35      	subs	r5, r6, r0
   15ce8:	2d00      	cmp	r5, #0
   15cea:	dc00      	bgt.n	15cee <__aeabi_dsub+0x4e>
   15cec:	e105      	b.n	15efa <__aeabi_dsub+0x25a>
   15cee:	2800      	cmp	r0, #0
   15cf0:	d110      	bne.n	15d14 <__aeabi_dsub+0x74>
   15cf2:	000b      	movs	r3, r1
   15cf4:	4313      	orrs	r3, r2
   15cf6:	d100      	bne.n	15cfa <__aeabi_dsub+0x5a>
   15cf8:	e0d7      	b.n	15eaa <__aeabi_dsub+0x20a>
   15cfa:	1e6b      	subs	r3, r5, #1
   15cfc:	2b00      	cmp	r3, #0
   15cfe:	d000      	beq.n	15d02 <__aeabi_dsub+0x62>
   15d00:	e14b      	b.n	15f9a <__aeabi_dsub+0x2fa>
   15d02:	4653      	mov	r3, sl
   15d04:	1a9f      	subs	r7, r3, r2
   15d06:	45ba      	cmp	sl, r7
   15d08:	4180      	sbcs	r0, r0
   15d0a:	1a64      	subs	r4, r4, r1
   15d0c:	4240      	negs	r0, r0
   15d0e:	1a24      	subs	r4, r4, r0
   15d10:	2601      	movs	r6, #1
   15d12:	e01e      	b.n	15d52 <__aeabi_dsub+0xb2>
   15d14:	4bb3      	ldr	r3, [pc, #716]	; (15fe4 <__aeabi_dsub+0x344>)
   15d16:	429e      	cmp	r6, r3
   15d18:	d048      	beq.n	15dac <__aeabi_dsub+0x10c>
   15d1a:	2380      	movs	r3, #128	; 0x80
   15d1c:	041b      	lsls	r3, r3, #16
   15d1e:	4319      	orrs	r1, r3
   15d20:	2d38      	cmp	r5, #56	; 0x38
   15d22:	dd00      	ble.n	15d26 <__aeabi_dsub+0x86>
   15d24:	e119      	b.n	15f5a <__aeabi_dsub+0x2ba>
   15d26:	2d1f      	cmp	r5, #31
   15d28:	dd00      	ble.n	15d2c <__aeabi_dsub+0x8c>
   15d2a:	e14c      	b.n	15fc6 <__aeabi_dsub+0x326>
   15d2c:	2320      	movs	r3, #32
   15d2e:	000f      	movs	r7, r1
   15d30:	1b5b      	subs	r3, r3, r5
   15d32:	0010      	movs	r0, r2
   15d34:	409a      	lsls	r2, r3
   15d36:	409f      	lsls	r7, r3
   15d38:	40e8      	lsrs	r0, r5
   15d3a:	1e53      	subs	r3, r2, #1
   15d3c:	419a      	sbcs	r2, r3
   15d3e:	40e9      	lsrs	r1, r5
   15d40:	4307      	orrs	r7, r0
   15d42:	4317      	orrs	r7, r2
   15d44:	4653      	mov	r3, sl
   15d46:	1bdf      	subs	r7, r3, r7
   15d48:	1a61      	subs	r1, r4, r1
   15d4a:	45ba      	cmp	sl, r7
   15d4c:	41a4      	sbcs	r4, r4
   15d4e:	4264      	negs	r4, r4
   15d50:	1b0c      	subs	r4, r1, r4
   15d52:	0223      	lsls	r3, r4, #8
   15d54:	d400      	bmi.n	15d58 <__aeabi_dsub+0xb8>
   15d56:	e0c5      	b.n	15ee4 <__aeabi_dsub+0x244>
   15d58:	0264      	lsls	r4, r4, #9
   15d5a:	0a65      	lsrs	r5, r4, #9
   15d5c:	2d00      	cmp	r5, #0
   15d5e:	d100      	bne.n	15d62 <__aeabi_dsub+0xc2>
   15d60:	e0f6      	b.n	15f50 <__aeabi_dsub+0x2b0>
   15d62:	0028      	movs	r0, r5
   15d64:	f000 fc3c 	bl	165e0 <__clzsi2>
   15d68:	0003      	movs	r3, r0
   15d6a:	3b08      	subs	r3, #8
   15d6c:	2b1f      	cmp	r3, #31
   15d6e:	dd00      	ble.n	15d72 <__aeabi_dsub+0xd2>
   15d70:	e0e9      	b.n	15f46 <__aeabi_dsub+0x2a6>
   15d72:	2220      	movs	r2, #32
   15d74:	003c      	movs	r4, r7
   15d76:	1ad2      	subs	r2, r2, r3
   15d78:	409d      	lsls	r5, r3
   15d7a:	40d4      	lsrs	r4, r2
   15d7c:	409f      	lsls	r7, r3
   15d7e:	4325      	orrs	r5, r4
   15d80:	429e      	cmp	r6, r3
   15d82:	dd00      	ble.n	15d86 <__aeabi_dsub+0xe6>
   15d84:	e0db      	b.n	15f3e <__aeabi_dsub+0x29e>
   15d86:	1b9e      	subs	r6, r3, r6
   15d88:	1c73      	adds	r3, r6, #1
   15d8a:	2b1f      	cmp	r3, #31
   15d8c:	dd00      	ble.n	15d90 <__aeabi_dsub+0xf0>
   15d8e:	e10a      	b.n	15fa6 <__aeabi_dsub+0x306>
   15d90:	2220      	movs	r2, #32
   15d92:	0038      	movs	r0, r7
   15d94:	1ad2      	subs	r2, r2, r3
   15d96:	0029      	movs	r1, r5
   15d98:	4097      	lsls	r7, r2
   15d9a:	002c      	movs	r4, r5
   15d9c:	4091      	lsls	r1, r2
   15d9e:	40d8      	lsrs	r0, r3
   15da0:	1e7a      	subs	r2, r7, #1
   15da2:	4197      	sbcs	r7, r2
   15da4:	40dc      	lsrs	r4, r3
   15da6:	2600      	movs	r6, #0
   15da8:	4301      	orrs	r1, r0
   15daa:	430f      	orrs	r7, r1
   15dac:	077b      	lsls	r3, r7, #29
   15dae:	d009      	beq.n	15dc4 <__aeabi_dsub+0x124>
   15db0:	230f      	movs	r3, #15
   15db2:	403b      	ands	r3, r7
   15db4:	2b04      	cmp	r3, #4
   15db6:	d005      	beq.n	15dc4 <__aeabi_dsub+0x124>
   15db8:	1d3b      	adds	r3, r7, #4
   15dba:	42bb      	cmp	r3, r7
   15dbc:	41bf      	sbcs	r7, r7
   15dbe:	427f      	negs	r7, r7
   15dc0:	19e4      	adds	r4, r4, r7
   15dc2:	001f      	movs	r7, r3
   15dc4:	0223      	lsls	r3, r4, #8
   15dc6:	d525      	bpl.n	15e14 <__aeabi_dsub+0x174>
   15dc8:	4b86      	ldr	r3, [pc, #536]	; (15fe4 <__aeabi_dsub+0x344>)
   15dca:	3601      	adds	r6, #1
   15dcc:	429e      	cmp	r6, r3
   15dce:	d100      	bne.n	15dd2 <__aeabi_dsub+0x132>
   15dd0:	e0af      	b.n	15f32 <__aeabi_dsub+0x292>
   15dd2:	4b85      	ldr	r3, [pc, #532]	; (15fe8 <__aeabi_dsub+0x348>)
   15dd4:	2501      	movs	r5, #1
   15dd6:	401c      	ands	r4, r3
   15dd8:	4643      	mov	r3, r8
   15dda:	0762      	lsls	r2, r4, #29
   15ddc:	08ff      	lsrs	r7, r7, #3
   15dde:	0264      	lsls	r4, r4, #9
   15de0:	0576      	lsls	r6, r6, #21
   15de2:	4317      	orrs	r7, r2
   15de4:	0b24      	lsrs	r4, r4, #12
   15de6:	0d76      	lsrs	r6, r6, #21
   15de8:	401d      	ands	r5, r3
   15dea:	2100      	movs	r1, #0
   15dec:	0324      	lsls	r4, r4, #12
   15dee:	0b23      	lsrs	r3, r4, #12
   15df0:	0d0c      	lsrs	r4, r1, #20
   15df2:	4a7e      	ldr	r2, [pc, #504]	; (15fec <__aeabi_dsub+0x34c>)
   15df4:	0524      	lsls	r4, r4, #20
   15df6:	431c      	orrs	r4, r3
   15df8:	4014      	ands	r4, r2
   15dfa:	0533      	lsls	r3, r6, #20
   15dfc:	4323      	orrs	r3, r4
   15dfe:	005b      	lsls	r3, r3, #1
   15e00:	07ed      	lsls	r5, r5, #31
   15e02:	085b      	lsrs	r3, r3, #1
   15e04:	432b      	orrs	r3, r5
   15e06:	0038      	movs	r0, r7
   15e08:	0019      	movs	r1, r3
   15e0a:	bc1c      	pop	{r2, r3, r4}
   15e0c:	4690      	mov	r8, r2
   15e0e:	4699      	mov	r9, r3
   15e10:	46a2      	mov	sl, r4
   15e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e14:	2501      	movs	r5, #1
   15e16:	4643      	mov	r3, r8
   15e18:	0762      	lsls	r2, r4, #29
   15e1a:	08ff      	lsrs	r7, r7, #3
   15e1c:	4317      	orrs	r7, r2
   15e1e:	08e4      	lsrs	r4, r4, #3
   15e20:	401d      	ands	r5, r3
   15e22:	4b70      	ldr	r3, [pc, #448]	; (15fe4 <__aeabi_dsub+0x344>)
   15e24:	429e      	cmp	r6, r3
   15e26:	d036      	beq.n	15e96 <__aeabi_dsub+0x1f6>
   15e28:	0324      	lsls	r4, r4, #12
   15e2a:	0576      	lsls	r6, r6, #21
   15e2c:	0b24      	lsrs	r4, r4, #12
   15e2e:	0d76      	lsrs	r6, r6, #21
   15e30:	e7db      	b.n	15dea <__aeabi_dsub+0x14a>
   15e32:	4663      	mov	r3, ip
   15e34:	1af3      	subs	r3, r6, r3
   15e36:	2b00      	cmp	r3, #0
   15e38:	dc00      	bgt.n	15e3c <__aeabi_dsub+0x19c>
   15e3a:	e094      	b.n	15f66 <__aeabi_dsub+0x2c6>
   15e3c:	4660      	mov	r0, ip
   15e3e:	2800      	cmp	r0, #0
   15e40:	d035      	beq.n	15eae <__aeabi_dsub+0x20e>
   15e42:	4868      	ldr	r0, [pc, #416]	; (15fe4 <__aeabi_dsub+0x344>)
   15e44:	4286      	cmp	r6, r0
   15e46:	d0b1      	beq.n	15dac <__aeabi_dsub+0x10c>
   15e48:	2780      	movs	r7, #128	; 0x80
   15e4a:	043f      	lsls	r7, r7, #16
   15e4c:	4339      	orrs	r1, r7
   15e4e:	2b38      	cmp	r3, #56	; 0x38
   15e50:	dc00      	bgt.n	15e54 <__aeabi_dsub+0x1b4>
   15e52:	e0fd      	b.n	16050 <__aeabi_dsub+0x3b0>
   15e54:	430a      	orrs	r2, r1
   15e56:	0017      	movs	r7, r2
   15e58:	2100      	movs	r1, #0
   15e5a:	1e7a      	subs	r2, r7, #1
   15e5c:	4197      	sbcs	r7, r2
   15e5e:	4457      	add	r7, sl
   15e60:	4557      	cmp	r7, sl
   15e62:	4180      	sbcs	r0, r0
   15e64:	1909      	adds	r1, r1, r4
   15e66:	4244      	negs	r4, r0
   15e68:	190c      	adds	r4, r1, r4
   15e6a:	0223      	lsls	r3, r4, #8
   15e6c:	d53a      	bpl.n	15ee4 <__aeabi_dsub+0x244>
   15e6e:	4b5d      	ldr	r3, [pc, #372]	; (15fe4 <__aeabi_dsub+0x344>)
   15e70:	3601      	adds	r6, #1
   15e72:	429e      	cmp	r6, r3
   15e74:	d100      	bne.n	15e78 <__aeabi_dsub+0x1d8>
   15e76:	e14b      	b.n	16110 <__aeabi_dsub+0x470>
   15e78:	2201      	movs	r2, #1
   15e7a:	4b5b      	ldr	r3, [pc, #364]	; (15fe8 <__aeabi_dsub+0x348>)
   15e7c:	401c      	ands	r4, r3
   15e7e:	087b      	lsrs	r3, r7, #1
   15e80:	4017      	ands	r7, r2
   15e82:	431f      	orrs	r7, r3
   15e84:	07e2      	lsls	r2, r4, #31
   15e86:	4317      	orrs	r7, r2
   15e88:	0864      	lsrs	r4, r4, #1
   15e8a:	e78f      	b.n	15dac <__aeabi_dsub+0x10c>
   15e8c:	0008      	movs	r0, r1
   15e8e:	4310      	orrs	r0, r2
   15e90:	d000      	beq.n	15e94 <__aeabi_dsub+0x1f4>
   15e92:	e724      	b.n	15cde <__aeabi_dsub+0x3e>
   15e94:	e721      	b.n	15cda <__aeabi_dsub+0x3a>
   15e96:	0023      	movs	r3, r4
   15e98:	433b      	orrs	r3, r7
   15e9a:	d100      	bne.n	15e9e <__aeabi_dsub+0x1fe>
   15e9c:	e1b9      	b.n	16212 <__aeabi_dsub+0x572>
   15e9e:	2280      	movs	r2, #128	; 0x80
   15ea0:	0312      	lsls	r2, r2, #12
   15ea2:	4314      	orrs	r4, r2
   15ea4:	0324      	lsls	r4, r4, #12
   15ea6:	0b24      	lsrs	r4, r4, #12
   15ea8:	e79f      	b.n	15dea <__aeabi_dsub+0x14a>
   15eaa:	002e      	movs	r6, r5
   15eac:	e77e      	b.n	15dac <__aeabi_dsub+0x10c>
   15eae:	0008      	movs	r0, r1
   15eb0:	4310      	orrs	r0, r2
   15eb2:	d100      	bne.n	15eb6 <__aeabi_dsub+0x216>
   15eb4:	e0ca      	b.n	1604c <__aeabi_dsub+0x3ac>
   15eb6:	1e58      	subs	r0, r3, #1
   15eb8:	4684      	mov	ip, r0
   15eba:	2800      	cmp	r0, #0
   15ebc:	d000      	beq.n	15ec0 <__aeabi_dsub+0x220>
   15ebe:	e0e7      	b.n	16090 <__aeabi_dsub+0x3f0>
   15ec0:	4452      	add	r2, sl
   15ec2:	4552      	cmp	r2, sl
   15ec4:	4180      	sbcs	r0, r0
   15ec6:	1864      	adds	r4, r4, r1
   15ec8:	4240      	negs	r0, r0
   15eca:	1824      	adds	r4, r4, r0
   15ecc:	0017      	movs	r7, r2
   15ece:	2601      	movs	r6, #1
   15ed0:	0223      	lsls	r3, r4, #8
   15ed2:	d507      	bpl.n	15ee4 <__aeabi_dsub+0x244>
   15ed4:	2602      	movs	r6, #2
   15ed6:	e7cf      	b.n	15e78 <__aeabi_dsub+0x1d8>
   15ed8:	4664      	mov	r4, ip
   15eda:	432c      	orrs	r4, r5
   15edc:	d100      	bne.n	15ee0 <__aeabi_dsub+0x240>
   15ede:	e1b3      	b.n	16248 <__aeabi_dsub+0x5a8>
   15ee0:	002c      	movs	r4, r5
   15ee2:	4667      	mov	r7, ip
   15ee4:	077b      	lsls	r3, r7, #29
   15ee6:	d000      	beq.n	15eea <__aeabi_dsub+0x24a>
   15ee8:	e762      	b.n	15db0 <__aeabi_dsub+0x110>
   15eea:	0763      	lsls	r3, r4, #29
   15eec:	08ff      	lsrs	r7, r7, #3
   15eee:	431f      	orrs	r7, r3
   15ef0:	2501      	movs	r5, #1
   15ef2:	4643      	mov	r3, r8
   15ef4:	08e4      	lsrs	r4, r4, #3
   15ef6:	401d      	ands	r5, r3
   15ef8:	e793      	b.n	15e22 <__aeabi_dsub+0x182>
   15efa:	2d00      	cmp	r5, #0
   15efc:	d178      	bne.n	15ff0 <__aeabi_dsub+0x350>
   15efe:	1c75      	adds	r5, r6, #1
   15f00:	056d      	lsls	r5, r5, #21
   15f02:	0d6d      	lsrs	r5, r5, #21
   15f04:	2d01      	cmp	r5, #1
   15f06:	dc00      	bgt.n	15f0a <__aeabi_dsub+0x26a>
   15f08:	e0f2      	b.n	160f0 <__aeabi_dsub+0x450>
   15f0a:	4650      	mov	r0, sl
   15f0c:	1a80      	subs	r0, r0, r2
   15f0e:	4582      	cmp	sl, r0
   15f10:	41bf      	sbcs	r7, r7
   15f12:	1a65      	subs	r5, r4, r1
   15f14:	427f      	negs	r7, r7
   15f16:	1bed      	subs	r5, r5, r7
   15f18:	4684      	mov	ip, r0
   15f1a:	0228      	lsls	r0, r5, #8
   15f1c:	d400      	bmi.n	15f20 <__aeabi_dsub+0x280>
   15f1e:	e08c      	b.n	1603a <__aeabi_dsub+0x39a>
   15f20:	4650      	mov	r0, sl
   15f22:	1a17      	subs	r7, r2, r0
   15f24:	42ba      	cmp	r2, r7
   15f26:	4192      	sbcs	r2, r2
   15f28:	1b0c      	subs	r4, r1, r4
   15f2a:	4255      	negs	r5, r2
   15f2c:	1b65      	subs	r5, r4, r5
   15f2e:	4698      	mov	r8, r3
   15f30:	e714      	b.n	15d5c <__aeabi_dsub+0xbc>
   15f32:	2501      	movs	r5, #1
   15f34:	4643      	mov	r3, r8
   15f36:	2400      	movs	r4, #0
   15f38:	401d      	ands	r5, r3
   15f3a:	2700      	movs	r7, #0
   15f3c:	e755      	b.n	15dea <__aeabi_dsub+0x14a>
   15f3e:	4c2a      	ldr	r4, [pc, #168]	; (15fe8 <__aeabi_dsub+0x348>)
   15f40:	1af6      	subs	r6, r6, r3
   15f42:	402c      	ands	r4, r5
   15f44:	e732      	b.n	15dac <__aeabi_dsub+0x10c>
   15f46:	003d      	movs	r5, r7
   15f48:	3828      	subs	r0, #40	; 0x28
   15f4a:	4085      	lsls	r5, r0
   15f4c:	2700      	movs	r7, #0
   15f4e:	e717      	b.n	15d80 <__aeabi_dsub+0xe0>
   15f50:	0038      	movs	r0, r7
   15f52:	f000 fb45 	bl	165e0 <__clzsi2>
   15f56:	3020      	adds	r0, #32
   15f58:	e706      	b.n	15d68 <__aeabi_dsub+0xc8>
   15f5a:	430a      	orrs	r2, r1
   15f5c:	0017      	movs	r7, r2
   15f5e:	2100      	movs	r1, #0
   15f60:	1e7a      	subs	r2, r7, #1
   15f62:	4197      	sbcs	r7, r2
   15f64:	e6ee      	b.n	15d44 <__aeabi_dsub+0xa4>
   15f66:	2b00      	cmp	r3, #0
   15f68:	d000      	beq.n	15f6c <__aeabi_dsub+0x2cc>
   15f6a:	e0e5      	b.n	16138 <__aeabi_dsub+0x498>
   15f6c:	1c73      	adds	r3, r6, #1
   15f6e:	469c      	mov	ip, r3
   15f70:	055b      	lsls	r3, r3, #21
   15f72:	0d5b      	lsrs	r3, r3, #21
   15f74:	2b01      	cmp	r3, #1
   15f76:	dc00      	bgt.n	15f7a <__aeabi_dsub+0x2da>
   15f78:	e09f      	b.n	160ba <__aeabi_dsub+0x41a>
   15f7a:	4b1a      	ldr	r3, [pc, #104]	; (15fe4 <__aeabi_dsub+0x344>)
   15f7c:	459c      	cmp	ip, r3
   15f7e:	d100      	bne.n	15f82 <__aeabi_dsub+0x2e2>
   15f80:	e0c5      	b.n	1610e <__aeabi_dsub+0x46e>
   15f82:	4452      	add	r2, sl
   15f84:	4552      	cmp	r2, sl
   15f86:	4180      	sbcs	r0, r0
   15f88:	1864      	adds	r4, r4, r1
   15f8a:	4240      	negs	r0, r0
   15f8c:	1824      	adds	r4, r4, r0
   15f8e:	07e7      	lsls	r7, r4, #31
   15f90:	0852      	lsrs	r2, r2, #1
   15f92:	4317      	orrs	r7, r2
   15f94:	0864      	lsrs	r4, r4, #1
   15f96:	4666      	mov	r6, ip
   15f98:	e708      	b.n	15dac <__aeabi_dsub+0x10c>
   15f9a:	4812      	ldr	r0, [pc, #72]	; (15fe4 <__aeabi_dsub+0x344>)
   15f9c:	4285      	cmp	r5, r0
   15f9e:	d100      	bne.n	15fa2 <__aeabi_dsub+0x302>
   15fa0:	e085      	b.n	160ae <__aeabi_dsub+0x40e>
   15fa2:	001d      	movs	r5, r3
   15fa4:	e6bc      	b.n	15d20 <__aeabi_dsub+0x80>
   15fa6:	0029      	movs	r1, r5
   15fa8:	3e1f      	subs	r6, #31
   15faa:	40f1      	lsrs	r1, r6
   15fac:	2b20      	cmp	r3, #32
   15fae:	d100      	bne.n	15fb2 <__aeabi_dsub+0x312>
   15fb0:	e07f      	b.n	160b2 <__aeabi_dsub+0x412>
   15fb2:	2240      	movs	r2, #64	; 0x40
   15fb4:	1ad3      	subs	r3, r2, r3
   15fb6:	409d      	lsls	r5, r3
   15fb8:	432f      	orrs	r7, r5
   15fba:	1e7d      	subs	r5, r7, #1
   15fbc:	41af      	sbcs	r7, r5
   15fbe:	2400      	movs	r4, #0
   15fc0:	430f      	orrs	r7, r1
   15fc2:	2600      	movs	r6, #0
   15fc4:	e78e      	b.n	15ee4 <__aeabi_dsub+0x244>
   15fc6:	002b      	movs	r3, r5
   15fc8:	000f      	movs	r7, r1
   15fca:	3b20      	subs	r3, #32
   15fcc:	40df      	lsrs	r7, r3
   15fce:	2d20      	cmp	r5, #32
   15fd0:	d071      	beq.n	160b6 <__aeabi_dsub+0x416>
   15fd2:	2340      	movs	r3, #64	; 0x40
   15fd4:	1b5d      	subs	r5, r3, r5
   15fd6:	40a9      	lsls	r1, r5
   15fd8:	430a      	orrs	r2, r1
   15fda:	1e51      	subs	r1, r2, #1
   15fdc:	418a      	sbcs	r2, r1
   15fde:	2100      	movs	r1, #0
   15fe0:	4317      	orrs	r7, r2
   15fe2:	e6af      	b.n	15d44 <__aeabi_dsub+0xa4>
   15fe4:	000007ff 	.word	0x000007ff
   15fe8:	ff7fffff 	.word	0xff7fffff
   15fec:	800fffff 	.word	0x800fffff
   15ff0:	2e00      	cmp	r6, #0
   15ff2:	d03e      	beq.n	16072 <__aeabi_dsub+0x3d2>
   15ff4:	4eb3      	ldr	r6, [pc, #716]	; (162c4 <__aeabi_dsub+0x624>)
   15ff6:	45b4      	cmp	ip, r6
   15ff8:	d045      	beq.n	16086 <__aeabi_dsub+0x3e6>
   15ffa:	2680      	movs	r6, #128	; 0x80
   15ffc:	0436      	lsls	r6, r6, #16
   15ffe:	426d      	negs	r5, r5
   16000:	4334      	orrs	r4, r6
   16002:	2d38      	cmp	r5, #56	; 0x38
   16004:	dd00      	ble.n	16008 <__aeabi_dsub+0x368>
   16006:	e0a8      	b.n	1615a <__aeabi_dsub+0x4ba>
   16008:	2d1f      	cmp	r5, #31
   1600a:	dd00      	ble.n	1600e <__aeabi_dsub+0x36e>
   1600c:	e11f      	b.n	1624e <__aeabi_dsub+0x5ae>
   1600e:	2620      	movs	r6, #32
   16010:	0027      	movs	r7, r4
   16012:	4650      	mov	r0, sl
   16014:	1b76      	subs	r6, r6, r5
   16016:	40b7      	lsls	r7, r6
   16018:	40e8      	lsrs	r0, r5
   1601a:	4307      	orrs	r7, r0
   1601c:	4650      	mov	r0, sl
   1601e:	40b0      	lsls	r0, r6
   16020:	1e46      	subs	r6, r0, #1
   16022:	41b0      	sbcs	r0, r6
   16024:	40ec      	lsrs	r4, r5
   16026:	4338      	orrs	r0, r7
   16028:	1a17      	subs	r7, r2, r0
   1602a:	42ba      	cmp	r2, r7
   1602c:	4192      	sbcs	r2, r2
   1602e:	1b0c      	subs	r4, r1, r4
   16030:	4252      	negs	r2, r2
   16032:	1aa4      	subs	r4, r4, r2
   16034:	4666      	mov	r6, ip
   16036:	4698      	mov	r8, r3
   16038:	e68b      	b.n	15d52 <__aeabi_dsub+0xb2>
   1603a:	4664      	mov	r4, ip
   1603c:	4667      	mov	r7, ip
   1603e:	432c      	orrs	r4, r5
   16040:	d000      	beq.n	16044 <__aeabi_dsub+0x3a4>
   16042:	e68b      	b.n	15d5c <__aeabi_dsub+0xbc>
   16044:	2500      	movs	r5, #0
   16046:	2600      	movs	r6, #0
   16048:	2700      	movs	r7, #0
   1604a:	e6ea      	b.n	15e22 <__aeabi_dsub+0x182>
   1604c:	001e      	movs	r6, r3
   1604e:	e6ad      	b.n	15dac <__aeabi_dsub+0x10c>
   16050:	2b1f      	cmp	r3, #31
   16052:	dc60      	bgt.n	16116 <__aeabi_dsub+0x476>
   16054:	2720      	movs	r7, #32
   16056:	1af8      	subs	r0, r7, r3
   16058:	000f      	movs	r7, r1
   1605a:	4684      	mov	ip, r0
   1605c:	4087      	lsls	r7, r0
   1605e:	0010      	movs	r0, r2
   16060:	40d8      	lsrs	r0, r3
   16062:	4307      	orrs	r7, r0
   16064:	4660      	mov	r0, ip
   16066:	4082      	lsls	r2, r0
   16068:	1e50      	subs	r0, r2, #1
   1606a:	4182      	sbcs	r2, r0
   1606c:	40d9      	lsrs	r1, r3
   1606e:	4317      	orrs	r7, r2
   16070:	e6f5      	b.n	15e5e <__aeabi_dsub+0x1be>
   16072:	0026      	movs	r6, r4
   16074:	4650      	mov	r0, sl
   16076:	4306      	orrs	r6, r0
   16078:	d005      	beq.n	16086 <__aeabi_dsub+0x3e6>
   1607a:	43ed      	mvns	r5, r5
   1607c:	2d00      	cmp	r5, #0
   1607e:	d0d3      	beq.n	16028 <__aeabi_dsub+0x388>
   16080:	4e90      	ldr	r6, [pc, #576]	; (162c4 <__aeabi_dsub+0x624>)
   16082:	45b4      	cmp	ip, r6
   16084:	d1bd      	bne.n	16002 <__aeabi_dsub+0x362>
   16086:	000c      	movs	r4, r1
   16088:	0017      	movs	r7, r2
   1608a:	4666      	mov	r6, ip
   1608c:	4698      	mov	r8, r3
   1608e:	e68d      	b.n	15dac <__aeabi_dsub+0x10c>
   16090:	488c      	ldr	r0, [pc, #560]	; (162c4 <__aeabi_dsub+0x624>)
   16092:	4283      	cmp	r3, r0
   16094:	d00b      	beq.n	160ae <__aeabi_dsub+0x40e>
   16096:	4663      	mov	r3, ip
   16098:	e6d9      	b.n	15e4e <__aeabi_dsub+0x1ae>
   1609a:	2d00      	cmp	r5, #0
   1609c:	d000      	beq.n	160a0 <__aeabi_dsub+0x400>
   1609e:	e096      	b.n	161ce <__aeabi_dsub+0x52e>
   160a0:	0008      	movs	r0, r1
   160a2:	4310      	orrs	r0, r2
   160a4:	d100      	bne.n	160a8 <__aeabi_dsub+0x408>
   160a6:	e0e2      	b.n	1626e <__aeabi_dsub+0x5ce>
   160a8:	000c      	movs	r4, r1
   160aa:	0017      	movs	r7, r2
   160ac:	4698      	mov	r8, r3
   160ae:	4e85      	ldr	r6, [pc, #532]	; (162c4 <__aeabi_dsub+0x624>)
   160b0:	e67c      	b.n	15dac <__aeabi_dsub+0x10c>
   160b2:	2500      	movs	r5, #0
   160b4:	e780      	b.n	15fb8 <__aeabi_dsub+0x318>
   160b6:	2100      	movs	r1, #0
   160b8:	e78e      	b.n	15fd8 <__aeabi_dsub+0x338>
   160ba:	0023      	movs	r3, r4
   160bc:	4650      	mov	r0, sl
   160be:	4303      	orrs	r3, r0
   160c0:	2e00      	cmp	r6, #0
   160c2:	d000      	beq.n	160c6 <__aeabi_dsub+0x426>
   160c4:	e0a8      	b.n	16218 <__aeabi_dsub+0x578>
   160c6:	2b00      	cmp	r3, #0
   160c8:	d100      	bne.n	160cc <__aeabi_dsub+0x42c>
   160ca:	e0de      	b.n	1628a <__aeabi_dsub+0x5ea>
   160cc:	000b      	movs	r3, r1
   160ce:	4313      	orrs	r3, r2
   160d0:	d100      	bne.n	160d4 <__aeabi_dsub+0x434>
   160d2:	e66b      	b.n	15dac <__aeabi_dsub+0x10c>
   160d4:	4452      	add	r2, sl
   160d6:	4552      	cmp	r2, sl
   160d8:	4180      	sbcs	r0, r0
   160da:	1864      	adds	r4, r4, r1
   160dc:	4240      	negs	r0, r0
   160de:	1824      	adds	r4, r4, r0
   160e0:	0017      	movs	r7, r2
   160e2:	0223      	lsls	r3, r4, #8
   160e4:	d400      	bmi.n	160e8 <__aeabi_dsub+0x448>
   160e6:	e6fd      	b.n	15ee4 <__aeabi_dsub+0x244>
   160e8:	4b77      	ldr	r3, [pc, #476]	; (162c8 <__aeabi_dsub+0x628>)
   160ea:	4666      	mov	r6, ip
   160ec:	401c      	ands	r4, r3
   160ee:	e65d      	b.n	15dac <__aeabi_dsub+0x10c>
   160f0:	0025      	movs	r5, r4
   160f2:	4650      	mov	r0, sl
   160f4:	4305      	orrs	r5, r0
   160f6:	2e00      	cmp	r6, #0
   160f8:	d1cf      	bne.n	1609a <__aeabi_dsub+0x3fa>
   160fa:	2d00      	cmp	r5, #0
   160fc:	d14f      	bne.n	1619e <__aeabi_dsub+0x4fe>
   160fe:	000c      	movs	r4, r1
   16100:	4314      	orrs	r4, r2
   16102:	d100      	bne.n	16106 <__aeabi_dsub+0x466>
   16104:	e0a0      	b.n	16248 <__aeabi_dsub+0x5a8>
   16106:	000c      	movs	r4, r1
   16108:	0017      	movs	r7, r2
   1610a:	4698      	mov	r8, r3
   1610c:	e64e      	b.n	15dac <__aeabi_dsub+0x10c>
   1610e:	4666      	mov	r6, ip
   16110:	2400      	movs	r4, #0
   16112:	2700      	movs	r7, #0
   16114:	e685      	b.n	15e22 <__aeabi_dsub+0x182>
   16116:	001f      	movs	r7, r3
   16118:	0008      	movs	r0, r1
   1611a:	3f20      	subs	r7, #32
   1611c:	40f8      	lsrs	r0, r7
   1611e:	0007      	movs	r7, r0
   16120:	2b20      	cmp	r3, #32
   16122:	d100      	bne.n	16126 <__aeabi_dsub+0x486>
   16124:	e08e      	b.n	16244 <__aeabi_dsub+0x5a4>
   16126:	2040      	movs	r0, #64	; 0x40
   16128:	1ac3      	subs	r3, r0, r3
   1612a:	4099      	lsls	r1, r3
   1612c:	430a      	orrs	r2, r1
   1612e:	1e51      	subs	r1, r2, #1
   16130:	418a      	sbcs	r2, r1
   16132:	2100      	movs	r1, #0
   16134:	4317      	orrs	r7, r2
   16136:	e692      	b.n	15e5e <__aeabi_dsub+0x1be>
   16138:	2e00      	cmp	r6, #0
   1613a:	d114      	bne.n	16166 <__aeabi_dsub+0x4c6>
   1613c:	0026      	movs	r6, r4
   1613e:	4650      	mov	r0, sl
   16140:	4306      	orrs	r6, r0
   16142:	d062      	beq.n	1620a <__aeabi_dsub+0x56a>
   16144:	43db      	mvns	r3, r3
   16146:	2b00      	cmp	r3, #0
   16148:	d15c      	bne.n	16204 <__aeabi_dsub+0x564>
   1614a:	1887      	adds	r7, r0, r2
   1614c:	4297      	cmp	r7, r2
   1614e:	4192      	sbcs	r2, r2
   16150:	1864      	adds	r4, r4, r1
   16152:	4252      	negs	r2, r2
   16154:	18a4      	adds	r4, r4, r2
   16156:	4666      	mov	r6, ip
   16158:	e687      	b.n	15e6a <__aeabi_dsub+0x1ca>
   1615a:	4650      	mov	r0, sl
   1615c:	4320      	orrs	r0, r4
   1615e:	1e44      	subs	r4, r0, #1
   16160:	41a0      	sbcs	r0, r4
   16162:	2400      	movs	r4, #0
   16164:	e760      	b.n	16028 <__aeabi_dsub+0x388>
   16166:	4e57      	ldr	r6, [pc, #348]	; (162c4 <__aeabi_dsub+0x624>)
   16168:	45b4      	cmp	ip, r6
   1616a:	d04e      	beq.n	1620a <__aeabi_dsub+0x56a>
   1616c:	2680      	movs	r6, #128	; 0x80
   1616e:	0436      	lsls	r6, r6, #16
   16170:	425b      	negs	r3, r3
   16172:	4334      	orrs	r4, r6
   16174:	2b38      	cmp	r3, #56	; 0x38
   16176:	dd00      	ble.n	1617a <__aeabi_dsub+0x4da>
   16178:	e07f      	b.n	1627a <__aeabi_dsub+0x5da>
   1617a:	2b1f      	cmp	r3, #31
   1617c:	dd00      	ble.n	16180 <__aeabi_dsub+0x4e0>
   1617e:	e08b      	b.n	16298 <__aeabi_dsub+0x5f8>
   16180:	2620      	movs	r6, #32
   16182:	0027      	movs	r7, r4
   16184:	4650      	mov	r0, sl
   16186:	1af6      	subs	r6, r6, r3
   16188:	40b7      	lsls	r7, r6
   1618a:	40d8      	lsrs	r0, r3
   1618c:	4307      	orrs	r7, r0
   1618e:	4650      	mov	r0, sl
   16190:	40b0      	lsls	r0, r6
   16192:	1e46      	subs	r6, r0, #1
   16194:	41b0      	sbcs	r0, r6
   16196:	4307      	orrs	r7, r0
   16198:	40dc      	lsrs	r4, r3
   1619a:	18bf      	adds	r7, r7, r2
   1619c:	e7d6      	b.n	1614c <__aeabi_dsub+0x4ac>
   1619e:	000d      	movs	r5, r1
   161a0:	4315      	orrs	r5, r2
   161a2:	d100      	bne.n	161a6 <__aeabi_dsub+0x506>
   161a4:	e602      	b.n	15dac <__aeabi_dsub+0x10c>
   161a6:	4650      	mov	r0, sl
   161a8:	1a80      	subs	r0, r0, r2
   161aa:	4582      	cmp	sl, r0
   161ac:	41bf      	sbcs	r7, r7
   161ae:	1a65      	subs	r5, r4, r1
   161b0:	427f      	negs	r7, r7
   161b2:	1bed      	subs	r5, r5, r7
   161b4:	4684      	mov	ip, r0
   161b6:	0228      	lsls	r0, r5, #8
   161b8:	d400      	bmi.n	161bc <__aeabi_dsub+0x51c>
   161ba:	e68d      	b.n	15ed8 <__aeabi_dsub+0x238>
   161bc:	4650      	mov	r0, sl
   161be:	1a17      	subs	r7, r2, r0
   161c0:	42ba      	cmp	r2, r7
   161c2:	4192      	sbcs	r2, r2
   161c4:	1b0c      	subs	r4, r1, r4
   161c6:	4252      	negs	r2, r2
   161c8:	1aa4      	subs	r4, r4, r2
   161ca:	4698      	mov	r8, r3
   161cc:	e5ee      	b.n	15dac <__aeabi_dsub+0x10c>
   161ce:	000d      	movs	r5, r1
   161d0:	4315      	orrs	r5, r2
   161d2:	d100      	bne.n	161d6 <__aeabi_dsub+0x536>
   161d4:	e76b      	b.n	160ae <__aeabi_dsub+0x40e>
   161d6:	4650      	mov	r0, sl
   161d8:	0767      	lsls	r7, r4, #29
   161da:	08c0      	lsrs	r0, r0, #3
   161dc:	4307      	orrs	r7, r0
   161de:	2080      	movs	r0, #128	; 0x80
   161e0:	08e4      	lsrs	r4, r4, #3
   161e2:	0300      	lsls	r0, r0, #12
   161e4:	4204      	tst	r4, r0
   161e6:	d007      	beq.n	161f8 <__aeabi_dsub+0x558>
   161e8:	08cd      	lsrs	r5, r1, #3
   161ea:	4205      	tst	r5, r0
   161ec:	d104      	bne.n	161f8 <__aeabi_dsub+0x558>
   161ee:	002c      	movs	r4, r5
   161f0:	4698      	mov	r8, r3
   161f2:	08d7      	lsrs	r7, r2, #3
   161f4:	0749      	lsls	r1, r1, #29
   161f6:	430f      	orrs	r7, r1
   161f8:	0f7b      	lsrs	r3, r7, #29
   161fa:	00e4      	lsls	r4, r4, #3
   161fc:	431c      	orrs	r4, r3
   161fe:	00ff      	lsls	r7, r7, #3
   16200:	4e30      	ldr	r6, [pc, #192]	; (162c4 <__aeabi_dsub+0x624>)
   16202:	e5d3      	b.n	15dac <__aeabi_dsub+0x10c>
   16204:	4e2f      	ldr	r6, [pc, #188]	; (162c4 <__aeabi_dsub+0x624>)
   16206:	45b4      	cmp	ip, r6
   16208:	d1b4      	bne.n	16174 <__aeabi_dsub+0x4d4>
   1620a:	000c      	movs	r4, r1
   1620c:	0017      	movs	r7, r2
   1620e:	4666      	mov	r6, ip
   16210:	e5cc      	b.n	15dac <__aeabi_dsub+0x10c>
   16212:	2700      	movs	r7, #0
   16214:	2400      	movs	r4, #0
   16216:	e5e8      	b.n	15dea <__aeabi_dsub+0x14a>
   16218:	2b00      	cmp	r3, #0
   1621a:	d039      	beq.n	16290 <__aeabi_dsub+0x5f0>
   1621c:	000b      	movs	r3, r1
   1621e:	4313      	orrs	r3, r2
   16220:	d100      	bne.n	16224 <__aeabi_dsub+0x584>
   16222:	e744      	b.n	160ae <__aeabi_dsub+0x40e>
   16224:	08c0      	lsrs	r0, r0, #3
   16226:	0767      	lsls	r7, r4, #29
   16228:	4307      	orrs	r7, r0
   1622a:	2080      	movs	r0, #128	; 0x80
   1622c:	08e4      	lsrs	r4, r4, #3
   1622e:	0300      	lsls	r0, r0, #12
   16230:	4204      	tst	r4, r0
   16232:	d0e1      	beq.n	161f8 <__aeabi_dsub+0x558>
   16234:	08cb      	lsrs	r3, r1, #3
   16236:	4203      	tst	r3, r0
   16238:	d1de      	bne.n	161f8 <__aeabi_dsub+0x558>
   1623a:	08d7      	lsrs	r7, r2, #3
   1623c:	0749      	lsls	r1, r1, #29
   1623e:	430f      	orrs	r7, r1
   16240:	001c      	movs	r4, r3
   16242:	e7d9      	b.n	161f8 <__aeabi_dsub+0x558>
   16244:	2100      	movs	r1, #0
   16246:	e771      	b.n	1612c <__aeabi_dsub+0x48c>
   16248:	2500      	movs	r5, #0
   1624a:	2700      	movs	r7, #0
   1624c:	e5e9      	b.n	15e22 <__aeabi_dsub+0x182>
   1624e:	002e      	movs	r6, r5
   16250:	0027      	movs	r7, r4
   16252:	3e20      	subs	r6, #32
   16254:	40f7      	lsrs	r7, r6
   16256:	2d20      	cmp	r5, #32
   16258:	d02f      	beq.n	162ba <__aeabi_dsub+0x61a>
   1625a:	2640      	movs	r6, #64	; 0x40
   1625c:	1b75      	subs	r5, r6, r5
   1625e:	40ac      	lsls	r4, r5
   16260:	4650      	mov	r0, sl
   16262:	4320      	orrs	r0, r4
   16264:	1e44      	subs	r4, r0, #1
   16266:	41a0      	sbcs	r0, r4
   16268:	2400      	movs	r4, #0
   1626a:	4338      	orrs	r0, r7
   1626c:	e6dc      	b.n	16028 <__aeabi_dsub+0x388>
   1626e:	2480      	movs	r4, #128	; 0x80
   16270:	2500      	movs	r5, #0
   16272:	0324      	lsls	r4, r4, #12
   16274:	4e13      	ldr	r6, [pc, #76]	; (162c4 <__aeabi_dsub+0x624>)
   16276:	2700      	movs	r7, #0
   16278:	e5d3      	b.n	15e22 <__aeabi_dsub+0x182>
   1627a:	4650      	mov	r0, sl
   1627c:	4320      	orrs	r0, r4
   1627e:	0007      	movs	r7, r0
   16280:	1e78      	subs	r0, r7, #1
   16282:	4187      	sbcs	r7, r0
   16284:	2400      	movs	r4, #0
   16286:	18bf      	adds	r7, r7, r2
   16288:	e760      	b.n	1614c <__aeabi_dsub+0x4ac>
   1628a:	000c      	movs	r4, r1
   1628c:	0017      	movs	r7, r2
   1628e:	e58d      	b.n	15dac <__aeabi_dsub+0x10c>
   16290:	000c      	movs	r4, r1
   16292:	0017      	movs	r7, r2
   16294:	4e0b      	ldr	r6, [pc, #44]	; (162c4 <__aeabi_dsub+0x624>)
   16296:	e589      	b.n	15dac <__aeabi_dsub+0x10c>
   16298:	001e      	movs	r6, r3
   1629a:	0027      	movs	r7, r4
   1629c:	3e20      	subs	r6, #32
   1629e:	40f7      	lsrs	r7, r6
   162a0:	2b20      	cmp	r3, #32
   162a2:	d00c      	beq.n	162be <__aeabi_dsub+0x61e>
   162a4:	2640      	movs	r6, #64	; 0x40
   162a6:	1af3      	subs	r3, r6, r3
   162a8:	409c      	lsls	r4, r3
   162aa:	4650      	mov	r0, sl
   162ac:	4320      	orrs	r0, r4
   162ae:	1e44      	subs	r4, r0, #1
   162b0:	41a0      	sbcs	r0, r4
   162b2:	4307      	orrs	r7, r0
   162b4:	2400      	movs	r4, #0
   162b6:	18bf      	adds	r7, r7, r2
   162b8:	e748      	b.n	1614c <__aeabi_dsub+0x4ac>
   162ba:	2400      	movs	r4, #0
   162bc:	e7d0      	b.n	16260 <__aeabi_dsub+0x5c0>
   162be:	2400      	movs	r4, #0
   162c0:	e7f3      	b.n	162aa <__aeabi_dsub+0x60a>
   162c2:	46c0      	nop			; (mov r8, r8)
   162c4:	000007ff 	.word	0x000007ff
   162c8:	ff7fffff 	.word	0xff7fffff

000162cc <__aeabi_d2iz>:
   162cc:	b530      	push	{r4, r5, lr}
   162ce:	4d13      	ldr	r5, [pc, #76]	; (1631c <__aeabi_d2iz+0x50>)
   162d0:	030a      	lsls	r2, r1, #12
   162d2:	004b      	lsls	r3, r1, #1
   162d4:	0b12      	lsrs	r2, r2, #12
   162d6:	0d5b      	lsrs	r3, r3, #21
   162d8:	0fc9      	lsrs	r1, r1, #31
   162da:	2400      	movs	r4, #0
   162dc:	42ab      	cmp	r3, r5
   162de:	dd10      	ble.n	16302 <__aeabi_d2iz+0x36>
   162e0:	4c0f      	ldr	r4, [pc, #60]	; (16320 <__aeabi_d2iz+0x54>)
   162e2:	42a3      	cmp	r3, r4
   162e4:	dc0f      	bgt.n	16306 <__aeabi_d2iz+0x3a>
   162e6:	2480      	movs	r4, #128	; 0x80
   162e8:	4d0e      	ldr	r5, [pc, #56]	; (16324 <__aeabi_d2iz+0x58>)
   162ea:	0364      	lsls	r4, r4, #13
   162ec:	4322      	orrs	r2, r4
   162ee:	1aed      	subs	r5, r5, r3
   162f0:	2d1f      	cmp	r5, #31
   162f2:	dd0b      	ble.n	1630c <__aeabi_d2iz+0x40>
   162f4:	480c      	ldr	r0, [pc, #48]	; (16328 <__aeabi_d2iz+0x5c>)
   162f6:	1ac3      	subs	r3, r0, r3
   162f8:	40da      	lsrs	r2, r3
   162fa:	4254      	negs	r4, r2
   162fc:	2900      	cmp	r1, #0
   162fe:	d100      	bne.n	16302 <__aeabi_d2iz+0x36>
   16300:	0014      	movs	r4, r2
   16302:	0020      	movs	r0, r4
   16304:	bd30      	pop	{r4, r5, pc}
   16306:	4b09      	ldr	r3, [pc, #36]	; (1632c <__aeabi_d2iz+0x60>)
   16308:	18cc      	adds	r4, r1, r3
   1630a:	e7fa      	b.n	16302 <__aeabi_d2iz+0x36>
   1630c:	4c08      	ldr	r4, [pc, #32]	; (16330 <__aeabi_d2iz+0x64>)
   1630e:	40e8      	lsrs	r0, r5
   16310:	46a4      	mov	ip, r4
   16312:	4463      	add	r3, ip
   16314:	409a      	lsls	r2, r3
   16316:	4302      	orrs	r2, r0
   16318:	e7ef      	b.n	162fa <__aeabi_d2iz+0x2e>
   1631a:	46c0      	nop			; (mov r8, r8)
   1631c:	000003fe 	.word	0x000003fe
   16320:	0000041d 	.word	0x0000041d
   16324:	00000433 	.word	0x00000433
   16328:	00000413 	.word	0x00000413
   1632c:	7fffffff 	.word	0x7fffffff
   16330:	fffffbed 	.word	0xfffffbed

00016334 <__aeabi_i2d>:
   16334:	b570      	push	{r4, r5, r6, lr}
   16336:	2800      	cmp	r0, #0
   16338:	d030      	beq.n	1639c <__aeabi_i2d+0x68>
   1633a:	17c3      	asrs	r3, r0, #31
   1633c:	18c4      	adds	r4, r0, r3
   1633e:	405c      	eors	r4, r3
   16340:	0fc5      	lsrs	r5, r0, #31
   16342:	0020      	movs	r0, r4
   16344:	f000 f94c 	bl	165e0 <__clzsi2>
   16348:	4b17      	ldr	r3, [pc, #92]	; (163a8 <__aeabi_i2d+0x74>)
   1634a:	4a18      	ldr	r2, [pc, #96]	; (163ac <__aeabi_i2d+0x78>)
   1634c:	1a1b      	subs	r3, r3, r0
   1634e:	1ad2      	subs	r2, r2, r3
   16350:	2a1f      	cmp	r2, #31
   16352:	dd18      	ble.n	16386 <__aeabi_i2d+0x52>
   16354:	4a16      	ldr	r2, [pc, #88]	; (163b0 <__aeabi_i2d+0x7c>)
   16356:	1ad2      	subs	r2, r2, r3
   16358:	4094      	lsls	r4, r2
   1635a:	2200      	movs	r2, #0
   1635c:	0324      	lsls	r4, r4, #12
   1635e:	055b      	lsls	r3, r3, #21
   16360:	0b24      	lsrs	r4, r4, #12
   16362:	0d5b      	lsrs	r3, r3, #21
   16364:	2100      	movs	r1, #0
   16366:	0010      	movs	r0, r2
   16368:	0324      	lsls	r4, r4, #12
   1636a:	0d0a      	lsrs	r2, r1, #20
   1636c:	0b24      	lsrs	r4, r4, #12
   1636e:	0512      	lsls	r2, r2, #20
   16370:	4322      	orrs	r2, r4
   16372:	4c10      	ldr	r4, [pc, #64]	; (163b4 <__aeabi_i2d+0x80>)
   16374:	051b      	lsls	r3, r3, #20
   16376:	4022      	ands	r2, r4
   16378:	4313      	orrs	r3, r2
   1637a:	005b      	lsls	r3, r3, #1
   1637c:	07ed      	lsls	r5, r5, #31
   1637e:	085b      	lsrs	r3, r3, #1
   16380:	432b      	orrs	r3, r5
   16382:	0019      	movs	r1, r3
   16384:	bd70      	pop	{r4, r5, r6, pc}
   16386:	0021      	movs	r1, r4
   16388:	4091      	lsls	r1, r2
   1638a:	000a      	movs	r2, r1
   1638c:	210b      	movs	r1, #11
   1638e:	1a08      	subs	r0, r1, r0
   16390:	40c4      	lsrs	r4, r0
   16392:	055b      	lsls	r3, r3, #21
   16394:	0324      	lsls	r4, r4, #12
   16396:	0b24      	lsrs	r4, r4, #12
   16398:	0d5b      	lsrs	r3, r3, #21
   1639a:	e7e3      	b.n	16364 <__aeabi_i2d+0x30>
   1639c:	2500      	movs	r5, #0
   1639e:	2300      	movs	r3, #0
   163a0:	2400      	movs	r4, #0
   163a2:	2200      	movs	r2, #0
   163a4:	e7de      	b.n	16364 <__aeabi_i2d+0x30>
   163a6:	46c0      	nop			; (mov r8, r8)
   163a8:	0000041e 	.word	0x0000041e
   163ac:	00000433 	.word	0x00000433
   163b0:	00000413 	.word	0x00000413
   163b4:	800fffff 	.word	0x800fffff

000163b8 <__aeabi_ui2d>:
   163b8:	b510      	push	{r4, lr}
   163ba:	1e04      	subs	r4, r0, #0
   163bc:	d028      	beq.n	16410 <__aeabi_ui2d+0x58>
   163be:	f000 f90f 	bl	165e0 <__clzsi2>
   163c2:	4b15      	ldr	r3, [pc, #84]	; (16418 <__aeabi_ui2d+0x60>)
   163c4:	4a15      	ldr	r2, [pc, #84]	; (1641c <__aeabi_ui2d+0x64>)
   163c6:	1a1b      	subs	r3, r3, r0
   163c8:	1ad2      	subs	r2, r2, r3
   163ca:	2a1f      	cmp	r2, #31
   163cc:	dd15      	ble.n	163fa <__aeabi_ui2d+0x42>
   163ce:	4a14      	ldr	r2, [pc, #80]	; (16420 <__aeabi_ui2d+0x68>)
   163d0:	1ad2      	subs	r2, r2, r3
   163d2:	4094      	lsls	r4, r2
   163d4:	2200      	movs	r2, #0
   163d6:	0324      	lsls	r4, r4, #12
   163d8:	055b      	lsls	r3, r3, #21
   163da:	0b24      	lsrs	r4, r4, #12
   163dc:	0d5b      	lsrs	r3, r3, #21
   163de:	2100      	movs	r1, #0
   163e0:	0010      	movs	r0, r2
   163e2:	0324      	lsls	r4, r4, #12
   163e4:	0d0a      	lsrs	r2, r1, #20
   163e6:	0b24      	lsrs	r4, r4, #12
   163e8:	0512      	lsls	r2, r2, #20
   163ea:	4322      	orrs	r2, r4
   163ec:	4c0d      	ldr	r4, [pc, #52]	; (16424 <__aeabi_ui2d+0x6c>)
   163ee:	051b      	lsls	r3, r3, #20
   163f0:	4022      	ands	r2, r4
   163f2:	4313      	orrs	r3, r2
   163f4:	005b      	lsls	r3, r3, #1
   163f6:	0859      	lsrs	r1, r3, #1
   163f8:	bd10      	pop	{r4, pc}
   163fa:	0021      	movs	r1, r4
   163fc:	4091      	lsls	r1, r2
   163fe:	000a      	movs	r2, r1
   16400:	210b      	movs	r1, #11
   16402:	1a08      	subs	r0, r1, r0
   16404:	40c4      	lsrs	r4, r0
   16406:	055b      	lsls	r3, r3, #21
   16408:	0324      	lsls	r4, r4, #12
   1640a:	0b24      	lsrs	r4, r4, #12
   1640c:	0d5b      	lsrs	r3, r3, #21
   1640e:	e7e6      	b.n	163de <__aeabi_ui2d+0x26>
   16410:	2300      	movs	r3, #0
   16412:	2400      	movs	r4, #0
   16414:	2200      	movs	r2, #0
   16416:	e7e2      	b.n	163de <__aeabi_ui2d+0x26>
   16418:	0000041e 	.word	0x0000041e
   1641c:	00000433 	.word	0x00000433
   16420:	00000413 	.word	0x00000413
   16424:	800fffff 	.word	0x800fffff

00016428 <__aeabi_f2d>:
   16428:	0041      	lsls	r1, r0, #1
   1642a:	0e09      	lsrs	r1, r1, #24
   1642c:	1c4b      	adds	r3, r1, #1
   1642e:	b570      	push	{r4, r5, r6, lr}
   16430:	b2db      	uxtb	r3, r3
   16432:	0246      	lsls	r6, r0, #9
   16434:	0a75      	lsrs	r5, r6, #9
   16436:	0fc4      	lsrs	r4, r0, #31
   16438:	2b01      	cmp	r3, #1
   1643a:	dd14      	ble.n	16466 <__aeabi_f2d+0x3e>
   1643c:	23e0      	movs	r3, #224	; 0xe0
   1643e:	009b      	lsls	r3, r3, #2
   16440:	076d      	lsls	r5, r5, #29
   16442:	0b36      	lsrs	r6, r6, #12
   16444:	18cb      	adds	r3, r1, r3
   16446:	2100      	movs	r1, #0
   16448:	0d0a      	lsrs	r2, r1, #20
   1644a:	0028      	movs	r0, r5
   1644c:	0512      	lsls	r2, r2, #20
   1644e:	4d1c      	ldr	r5, [pc, #112]	; (164c0 <__aeabi_f2d+0x98>)
   16450:	4332      	orrs	r2, r6
   16452:	055b      	lsls	r3, r3, #21
   16454:	402a      	ands	r2, r5
   16456:	085b      	lsrs	r3, r3, #1
   16458:	4313      	orrs	r3, r2
   1645a:	005b      	lsls	r3, r3, #1
   1645c:	07e4      	lsls	r4, r4, #31
   1645e:	085b      	lsrs	r3, r3, #1
   16460:	4323      	orrs	r3, r4
   16462:	0019      	movs	r1, r3
   16464:	bd70      	pop	{r4, r5, r6, pc}
   16466:	2900      	cmp	r1, #0
   16468:	d114      	bne.n	16494 <__aeabi_f2d+0x6c>
   1646a:	2d00      	cmp	r5, #0
   1646c:	d01e      	beq.n	164ac <__aeabi_f2d+0x84>
   1646e:	0028      	movs	r0, r5
   16470:	f000 f8b6 	bl	165e0 <__clzsi2>
   16474:	280a      	cmp	r0, #10
   16476:	dc1c      	bgt.n	164b2 <__aeabi_f2d+0x8a>
   16478:	230b      	movs	r3, #11
   1647a:	002a      	movs	r2, r5
   1647c:	1a1b      	subs	r3, r3, r0
   1647e:	40da      	lsrs	r2, r3
   16480:	0003      	movs	r3, r0
   16482:	3315      	adds	r3, #21
   16484:	409d      	lsls	r5, r3
   16486:	4b0f      	ldr	r3, [pc, #60]	; (164c4 <__aeabi_f2d+0x9c>)
   16488:	0312      	lsls	r2, r2, #12
   1648a:	1a1b      	subs	r3, r3, r0
   1648c:	055b      	lsls	r3, r3, #21
   1648e:	0b16      	lsrs	r6, r2, #12
   16490:	0d5b      	lsrs	r3, r3, #21
   16492:	e7d8      	b.n	16446 <__aeabi_f2d+0x1e>
   16494:	2d00      	cmp	r5, #0
   16496:	d006      	beq.n	164a6 <__aeabi_f2d+0x7e>
   16498:	0b32      	lsrs	r2, r6, #12
   1649a:	2680      	movs	r6, #128	; 0x80
   1649c:	0336      	lsls	r6, r6, #12
   1649e:	076d      	lsls	r5, r5, #29
   164a0:	4316      	orrs	r6, r2
   164a2:	4b09      	ldr	r3, [pc, #36]	; (164c8 <__aeabi_f2d+0xa0>)
   164a4:	e7cf      	b.n	16446 <__aeabi_f2d+0x1e>
   164a6:	4b08      	ldr	r3, [pc, #32]	; (164c8 <__aeabi_f2d+0xa0>)
   164a8:	2600      	movs	r6, #0
   164aa:	e7cc      	b.n	16446 <__aeabi_f2d+0x1e>
   164ac:	2300      	movs	r3, #0
   164ae:	2600      	movs	r6, #0
   164b0:	e7c9      	b.n	16446 <__aeabi_f2d+0x1e>
   164b2:	0003      	movs	r3, r0
   164b4:	002a      	movs	r2, r5
   164b6:	3b0b      	subs	r3, #11
   164b8:	409a      	lsls	r2, r3
   164ba:	2500      	movs	r5, #0
   164bc:	e7e3      	b.n	16486 <__aeabi_f2d+0x5e>
   164be:	46c0      	nop			; (mov r8, r8)
   164c0:	800fffff 	.word	0x800fffff
   164c4:	00000389 	.word	0x00000389
   164c8:	000007ff 	.word	0x000007ff

000164cc <__aeabi_d2f>:
   164cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   164ce:	004c      	lsls	r4, r1, #1
   164d0:	0d64      	lsrs	r4, r4, #21
   164d2:	030b      	lsls	r3, r1, #12
   164d4:	1c62      	adds	r2, r4, #1
   164d6:	0f45      	lsrs	r5, r0, #29
   164d8:	0a5b      	lsrs	r3, r3, #9
   164da:	0552      	lsls	r2, r2, #21
   164dc:	432b      	orrs	r3, r5
   164de:	0fc9      	lsrs	r1, r1, #31
   164e0:	00c5      	lsls	r5, r0, #3
   164e2:	0d52      	lsrs	r2, r2, #21
   164e4:	2a01      	cmp	r2, #1
   164e6:	dd28      	ble.n	1653a <__aeabi_d2f+0x6e>
   164e8:	4a3a      	ldr	r2, [pc, #232]	; (165d4 <__aeabi_d2f+0x108>)
   164ea:	18a6      	adds	r6, r4, r2
   164ec:	2efe      	cmp	r6, #254	; 0xfe
   164ee:	dc1b      	bgt.n	16528 <__aeabi_d2f+0x5c>
   164f0:	2e00      	cmp	r6, #0
   164f2:	dd3e      	ble.n	16572 <__aeabi_d2f+0xa6>
   164f4:	0180      	lsls	r0, r0, #6
   164f6:	0002      	movs	r2, r0
   164f8:	1e50      	subs	r0, r2, #1
   164fa:	4182      	sbcs	r2, r0
   164fc:	0f6d      	lsrs	r5, r5, #29
   164fe:	432a      	orrs	r2, r5
   16500:	00db      	lsls	r3, r3, #3
   16502:	4313      	orrs	r3, r2
   16504:	075a      	lsls	r2, r3, #29
   16506:	d004      	beq.n	16512 <__aeabi_d2f+0x46>
   16508:	220f      	movs	r2, #15
   1650a:	401a      	ands	r2, r3
   1650c:	2a04      	cmp	r2, #4
   1650e:	d000      	beq.n	16512 <__aeabi_d2f+0x46>
   16510:	3304      	adds	r3, #4
   16512:	2280      	movs	r2, #128	; 0x80
   16514:	04d2      	lsls	r2, r2, #19
   16516:	401a      	ands	r2, r3
   16518:	d05a      	beq.n	165d0 <__aeabi_d2f+0x104>
   1651a:	3601      	adds	r6, #1
   1651c:	2eff      	cmp	r6, #255	; 0xff
   1651e:	d003      	beq.n	16528 <__aeabi_d2f+0x5c>
   16520:	019b      	lsls	r3, r3, #6
   16522:	0a5b      	lsrs	r3, r3, #9
   16524:	b2f4      	uxtb	r4, r6
   16526:	e001      	b.n	1652c <__aeabi_d2f+0x60>
   16528:	24ff      	movs	r4, #255	; 0xff
   1652a:	2300      	movs	r3, #0
   1652c:	0258      	lsls	r0, r3, #9
   1652e:	05e4      	lsls	r4, r4, #23
   16530:	0a40      	lsrs	r0, r0, #9
   16532:	07c9      	lsls	r1, r1, #31
   16534:	4320      	orrs	r0, r4
   16536:	4308      	orrs	r0, r1
   16538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1653a:	2c00      	cmp	r4, #0
   1653c:	d007      	beq.n	1654e <__aeabi_d2f+0x82>
   1653e:	431d      	orrs	r5, r3
   16540:	d0f2      	beq.n	16528 <__aeabi_d2f+0x5c>
   16542:	2080      	movs	r0, #128	; 0x80
   16544:	00db      	lsls	r3, r3, #3
   16546:	0480      	lsls	r0, r0, #18
   16548:	4303      	orrs	r3, r0
   1654a:	26ff      	movs	r6, #255	; 0xff
   1654c:	e7da      	b.n	16504 <__aeabi_d2f+0x38>
   1654e:	432b      	orrs	r3, r5
   16550:	d003      	beq.n	1655a <__aeabi_d2f+0x8e>
   16552:	2305      	movs	r3, #5
   16554:	08db      	lsrs	r3, r3, #3
   16556:	2cff      	cmp	r4, #255	; 0xff
   16558:	d003      	beq.n	16562 <__aeabi_d2f+0x96>
   1655a:	025b      	lsls	r3, r3, #9
   1655c:	0a5b      	lsrs	r3, r3, #9
   1655e:	b2e4      	uxtb	r4, r4
   16560:	e7e4      	b.n	1652c <__aeabi_d2f+0x60>
   16562:	2b00      	cmp	r3, #0
   16564:	d032      	beq.n	165cc <__aeabi_d2f+0x100>
   16566:	2080      	movs	r0, #128	; 0x80
   16568:	03c0      	lsls	r0, r0, #15
   1656a:	4303      	orrs	r3, r0
   1656c:	025b      	lsls	r3, r3, #9
   1656e:	0a5b      	lsrs	r3, r3, #9
   16570:	e7dc      	b.n	1652c <__aeabi_d2f+0x60>
   16572:	0032      	movs	r2, r6
   16574:	3217      	adds	r2, #23
   16576:	db14      	blt.n	165a2 <__aeabi_d2f+0xd6>
   16578:	2280      	movs	r2, #128	; 0x80
   1657a:	271e      	movs	r7, #30
   1657c:	0412      	lsls	r2, r2, #16
   1657e:	4313      	orrs	r3, r2
   16580:	1bbf      	subs	r7, r7, r6
   16582:	2f1f      	cmp	r7, #31
   16584:	dc0f      	bgt.n	165a6 <__aeabi_d2f+0xda>
   16586:	4a14      	ldr	r2, [pc, #80]	; (165d8 <__aeabi_d2f+0x10c>)
   16588:	4694      	mov	ip, r2
   1658a:	4464      	add	r4, ip
   1658c:	002a      	movs	r2, r5
   1658e:	40a5      	lsls	r5, r4
   16590:	002e      	movs	r6, r5
   16592:	40a3      	lsls	r3, r4
   16594:	1e75      	subs	r5, r6, #1
   16596:	41ae      	sbcs	r6, r5
   16598:	40fa      	lsrs	r2, r7
   1659a:	4333      	orrs	r3, r6
   1659c:	4313      	orrs	r3, r2
   1659e:	2600      	movs	r6, #0
   165a0:	e7b0      	b.n	16504 <__aeabi_d2f+0x38>
   165a2:	2400      	movs	r4, #0
   165a4:	e7d5      	b.n	16552 <__aeabi_d2f+0x86>
   165a6:	2202      	movs	r2, #2
   165a8:	4252      	negs	r2, r2
   165aa:	1b96      	subs	r6, r2, r6
   165ac:	001a      	movs	r2, r3
   165ae:	40f2      	lsrs	r2, r6
   165b0:	2f20      	cmp	r7, #32
   165b2:	d009      	beq.n	165c8 <__aeabi_d2f+0xfc>
   165b4:	4809      	ldr	r0, [pc, #36]	; (165dc <__aeabi_d2f+0x110>)
   165b6:	4684      	mov	ip, r0
   165b8:	4464      	add	r4, ip
   165ba:	40a3      	lsls	r3, r4
   165bc:	432b      	orrs	r3, r5
   165be:	1e5d      	subs	r5, r3, #1
   165c0:	41ab      	sbcs	r3, r5
   165c2:	2600      	movs	r6, #0
   165c4:	4313      	orrs	r3, r2
   165c6:	e79d      	b.n	16504 <__aeabi_d2f+0x38>
   165c8:	2300      	movs	r3, #0
   165ca:	e7f7      	b.n	165bc <__aeabi_d2f+0xf0>
   165cc:	2300      	movs	r3, #0
   165ce:	e7ad      	b.n	1652c <__aeabi_d2f+0x60>
   165d0:	0034      	movs	r4, r6
   165d2:	e7bf      	b.n	16554 <__aeabi_d2f+0x88>
   165d4:	fffffc80 	.word	0xfffffc80
   165d8:	fffffc82 	.word	0xfffffc82
   165dc:	fffffca2 	.word	0xfffffca2

000165e0 <__clzsi2>:
   165e0:	211c      	movs	r1, #28
   165e2:	2301      	movs	r3, #1
   165e4:	041b      	lsls	r3, r3, #16
   165e6:	4298      	cmp	r0, r3
   165e8:	d301      	bcc.n	165ee <__clzsi2+0xe>
   165ea:	0c00      	lsrs	r0, r0, #16
   165ec:	3910      	subs	r1, #16
   165ee:	0a1b      	lsrs	r3, r3, #8
   165f0:	4298      	cmp	r0, r3
   165f2:	d301      	bcc.n	165f8 <__clzsi2+0x18>
   165f4:	0a00      	lsrs	r0, r0, #8
   165f6:	3908      	subs	r1, #8
   165f8:	091b      	lsrs	r3, r3, #4
   165fa:	4298      	cmp	r0, r3
   165fc:	d301      	bcc.n	16602 <__clzsi2+0x22>
   165fe:	0900      	lsrs	r0, r0, #4
   16600:	3904      	subs	r1, #4
   16602:	a202      	add	r2, pc, #8	; (adr r2, 1660c <__clzsi2+0x2c>)
   16604:	5c10      	ldrb	r0, [r2, r0]
   16606:	1840      	adds	r0, r0, r1
   16608:	4770      	bx	lr
   1660a:	46c0      	nop			; (mov r8, r8)
   1660c:	02020304 	.word	0x02020304
   16610:	01010101 	.word	0x01010101
	...

0001661c <__clzdi2>:
   1661c:	b510      	push	{r4, lr}
   1661e:	2900      	cmp	r1, #0
   16620:	d103      	bne.n	1662a <__clzdi2+0xe>
   16622:	f7ff ffdd 	bl	165e0 <__clzsi2>
   16626:	3020      	adds	r0, #32
   16628:	e002      	b.n	16630 <__clzdi2+0x14>
   1662a:	1c08      	adds	r0, r1, #0
   1662c:	f7ff ffd8 	bl	165e0 <__clzsi2>
   16630:	bd10      	pop	{r4, pc}
   16632:	46c0      	nop			; (mov r8, r8)

00016634 <__assert_func>:
   16634:	b530      	push	{r4, r5, lr}
   16636:	001c      	movs	r4, r3
   16638:	4b09      	ldr	r3, [pc, #36]	; (16660 <__assert_func+0x2c>)
   1663a:	0005      	movs	r5, r0
   1663c:	681b      	ldr	r3, [r3, #0]
   1663e:	b085      	sub	sp, #20
   16640:	68d8      	ldr	r0, [r3, #12]
   16642:	4b08      	ldr	r3, [pc, #32]	; (16664 <__assert_func+0x30>)
   16644:	2a00      	cmp	r2, #0
   16646:	d101      	bne.n	1664c <__assert_func+0x18>
   16648:	4b07      	ldr	r3, [pc, #28]	; (16668 <__assert_func+0x34>)
   1664a:	001a      	movs	r2, r3
   1664c:	9202      	str	r2, [sp, #8]
   1664e:	9301      	str	r3, [sp, #4]
   16650:	9100      	str	r1, [sp, #0]
   16652:	002b      	movs	r3, r5
   16654:	0022      	movs	r2, r4
   16656:	4905      	ldr	r1, [pc, #20]	; (1666c <__assert_func+0x38>)
   16658:	f000 f80a 	bl	16670 <fiprintf>
   1665c:	f000 fdac 	bl	171b8 <abort>
   16660:	20000028 	.word	0x20000028
   16664:	00018d74 	.word	0x00018d74
   16668:	00018daf 	.word	0x00018daf
   1666c:	00018d81 	.word	0x00018d81

00016670 <fiprintf>:
   16670:	b40e      	push	{r1, r2, r3}
   16672:	b503      	push	{r0, r1, lr}
   16674:	0001      	movs	r1, r0
   16676:	ab03      	add	r3, sp, #12
   16678:	4804      	ldr	r0, [pc, #16]	; (1668c <fiprintf+0x1c>)
   1667a:	cb04      	ldmia	r3!, {r2}
   1667c:	6800      	ldr	r0, [r0, #0]
   1667e:	9301      	str	r3, [sp, #4]
   16680:	f000 f872 	bl	16768 <_vfiprintf_r>
   16684:	b002      	add	sp, #8
   16686:	bc08      	pop	{r3}
   16688:	b003      	add	sp, #12
   1668a:	4718      	bx	r3
   1668c:	20000028 	.word	0x20000028

00016690 <__libc_init_array>:
   16690:	b570      	push	{r4, r5, r6, lr}
   16692:	2600      	movs	r6, #0
   16694:	4d0c      	ldr	r5, [pc, #48]	; (166c8 <__libc_init_array+0x38>)
   16696:	4c0d      	ldr	r4, [pc, #52]	; (166cc <__libc_init_array+0x3c>)
   16698:	1b64      	subs	r4, r4, r5
   1669a:	10a4      	asrs	r4, r4, #2
   1669c:	42a6      	cmp	r6, r4
   1669e:	d109      	bne.n	166b4 <__libc_init_array+0x24>
   166a0:	2600      	movs	r6, #0
   166a2:	f002 fbd1 	bl	18e48 <_init>
   166a6:	4d0a      	ldr	r5, [pc, #40]	; (166d0 <__libc_init_array+0x40>)
   166a8:	4c0a      	ldr	r4, [pc, #40]	; (166d4 <__libc_init_array+0x44>)
   166aa:	1b64      	subs	r4, r4, r5
   166ac:	10a4      	asrs	r4, r4, #2
   166ae:	42a6      	cmp	r6, r4
   166b0:	d105      	bne.n	166be <__libc_init_array+0x2e>
   166b2:	bd70      	pop	{r4, r5, r6, pc}
   166b4:	00b3      	lsls	r3, r6, #2
   166b6:	58eb      	ldr	r3, [r5, r3]
   166b8:	4798      	blx	r3
   166ba:	3601      	adds	r6, #1
   166bc:	e7ee      	b.n	1669c <__libc_init_array+0xc>
   166be:	00b3      	lsls	r3, r6, #2
   166c0:	58eb      	ldr	r3, [r5, r3]
   166c2:	4798      	blx	r3
   166c4:	3601      	adds	r6, #1
   166c6:	e7f2      	b.n	166ae <__libc_init_array+0x1e>
   166c8:	00018e54 	.word	0x00018e54
   166cc:	00018e54 	.word	0x00018e54
   166d0:	00018e54 	.word	0x00018e54
   166d4:	00018e58 	.word	0x00018e58

000166d8 <memcmp>:
   166d8:	b530      	push	{r4, r5, lr}
   166da:	2400      	movs	r4, #0
   166dc:	42a2      	cmp	r2, r4
   166de:	d101      	bne.n	166e4 <memcmp+0xc>
   166e0:	2000      	movs	r0, #0
   166e2:	e005      	b.n	166f0 <memcmp+0x18>
   166e4:	5d03      	ldrb	r3, [r0, r4]
   166e6:	1c65      	adds	r5, r4, #1
   166e8:	5d0c      	ldrb	r4, [r1, r4]
   166ea:	42a3      	cmp	r3, r4
   166ec:	d001      	beq.n	166f2 <memcmp+0x1a>
   166ee:	1b18      	subs	r0, r3, r4
   166f0:	bd30      	pop	{r4, r5, pc}
   166f2:	002c      	movs	r4, r5
   166f4:	e7f2      	b.n	166dc <memcmp+0x4>

000166f6 <memcpy>:
   166f6:	2300      	movs	r3, #0
   166f8:	b510      	push	{r4, lr}
   166fa:	429a      	cmp	r2, r3
   166fc:	d100      	bne.n	16700 <memcpy+0xa>
   166fe:	bd10      	pop	{r4, pc}
   16700:	5ccc      	ldrb	r4, [r1, r3]
   16702:	54c4      	strb	r4, [r0, r3]
   16704:	3301      	adds	r3, #1
   16706:	e7f8      	b.n	166fa <memcpy+0x4>

00016708 <memset>:
   16708:	0003      	movs	r3, r0
   1670a:	1882      	adds	r2, r0, r2
   1670c:	4293      	cmp	r3, r2
   1670e:	d100      	bne.n	16712 <memset+0xa>
   16710:	4770      	bx	lr
   16712:	7019      	strb	r1, [r3, #0]
   16714:	3301      	adds	r3, #1
   16716:	e7f9      	b.n	1670c <memset+0x4>

00016718 <__sfputc_r>:
   16718:	6893      	ldr	r3, [r2, #8]
   1671a:	b510      	push	{r4, lr}
   1671c:	3b01      	subs	r3, #1
   1671e:	6093      	str	r3, [r2, #8]
   16720:	2b00      	cmp	r3, #0
   16722:	da05      	bge.n	16730 <__sfputc_r+0x18>
   16724:	6994      	ldr	r4, [r2, #24]
   16726:	42a3      	cmp	r3, r4
   16728:	db08      	blt.n	1673c <__sfputc_r+0x24>
   1672a:	b2cb      	uxtb	r3, r1
   1672c:	2b0a      	cmp	r3, #10
   1672e:	d005      	beq.n	1673c <__sfputc_r+0x24>
   16730:	6813      	ldr	r3, [r2, #0]
   16732:	1c58      	adds	r0, r3, #1
   16734:	6010      	str	r0, [r2, #0]
   16736:	7019      	strb	r1, [r3, #0]
   16738:	b2c8      	uxtb	r0, r1
   1673a:	bd10      	pop	{r4, pc}
   1673c:	f000 fc70 	bl	17020 <__swbuf_r>
   16740:	e7fb      	b.n	1673a <__sfputc_r+0x22>

00016742 <__sfputs_r>:
   16742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16744:	0006      	movs	r6, r0
   16746:	000f      	movs	r7, r1
   16748:	0014      	movs	r4, r2
   1674a:	18d5      	adds	r5, r2, r3
   1674c:	42ac      	cmp	r4, r5
   1674e:	d101      	bne.n	16754 <__sfputs_r+0x12>
   16750:	2000      	movs	r0, #0
   16752:	e007      	b.n	16764 <__sfputs_r+0x22>
   16754:	7821      	ldrb	r1, [r4, #0]
   16756:	003a      	movs	r2, r7
   16758:	0030      	movs	r0, r6
   1675a:	f7ff ffdd 	bl	16718 <__sfputc_r>
   1675e:	3401      	adds	r4, #1
   16760:	1c43      	adds	r3, r0, #1
   16762:	d1f3      	bne.n	1674c <__sfputs_r+0xa>
   16764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16766:	Address 0x00016766 is out of bounds.


00016768 <_vfiprintf_r>:
   16768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1676a:	b09f      	sub	sp, #124	; 0x7c
   1676c:	0006      	movs	r6, r0
   1676e:	000f      	movs	r7, r1
   16770:	0014      	movs	r4, r2
   16772:	9305      	str	r3, [sp, #20]
   16774:	2800      	cmp	r0, #0
   16776:	d004      	beq.n	16782 <_vfiprintf_r+0x1a>
   16778:	6983      	ldr	r3, [r0, #24]
   1677a:	2b00      	cmp	r3, #0
   1677c:	d101      	bne.n	16782 <_vfiprintf_r+0x1a>
   1677e:	f000 fe1b 	bl	173b8 <__sinit>
   16782:	4b7f      	ldr	r3, [pc, #508]	; (16980 <_vfiprintf_r+0x218>)
   16784:	429f      	cmp	r7, r3
   16786:	d15c      	bne.n	16842 <_vfiprintf_r+0xda>
   16788:	6877      	ldr	r7, [r6, #4]
   1678a:	89bb      	ldrh	r3, [r7, #12]
   1678c:	071b      	lsls	r3, r3, #28
   1678e:	d562      	bpl.n	16856 <_vfiprintf_r+0xee>
   16790:	693b      	ldr	r3, [r7, #16]
   16792:	2b00      	cmp	r3, #0
   16794:	d05f      	beq.n	16856 <_vfiprintf_r+0xee>
   16796:	2300      	movs	r3, #0
   16798:	ad06      	add	r5, sp, #24
   1679a:	616b      	str	r3, [r5, #20]
   1679c:	3320      	adds	r3, #32
   1679e:	766b      	strb	r3, [r5, #25]
   167a0:	3310      	adds	r3, #16
   167a2:	76ab      	strb	r3, [r5, #26]
   167a4:	9402      	str	r4, [sp, #8]
   167a6:	9c02      	ldr	r4, [sp, #8]
   167a8:	7823      	ldrb	r3, [r4, #0]
   167aa:	2b00      	cmp	r3, #0
   167ac:	d15d      	bne.n	1686a <_vfiprintf_r+0x102>
   167ae:	9b02      	ldr	r3, [sp, #8]
   167b0:	1ae3      	subs	r3, r4, r3
   167b2:	9304      	str	r3, [sp, #16]
   167b4:	d00d      	beq.n	167d2 <_vfiprintf_r+0x6a>
   167b6:	9b04      	ldr	r3, [sp, #16]
   167b8:	9a02      	ldr	r2, [sp, #8]
   167ba:	0039      	movs	r1, r7
   167bc:	0030      	movs	r0, r6
   167be:	f7ff ffc0 	bl	16742 <__sfputs_r>
   167c2:	1c43      	adds	r3, r0, #1
   167c4:	d100      	bne.n	167c8 <_vfiprintf_r+0x60>
   167c6:	e0cc      	b.n	16962 <_vfiprintf_r+0x1fa>
   167c8:	696a      	ldr	r2, [r5, #20]
   167ca:	9b04      	ldr	r3, [sp, #16]
   167cc:	4694      	mov	ip, r2
   167ce:	4463      	add	r3, ip
   167d0:	616b      	str	r3, [r5, #20]
   167d2:	7823      	ldrb	r3, [r4, #0]
   167d4:	2b00      	cmp	r3, #0
   167d6:	d100      	bne.n	167da <_vfiprintf_r+0x72>
   167d8:	e0c3      	b.n	16962 <_vfiprintf_r+0x1fa>
   167da:	2201      	movs	r2, #1
   167dc:	2300      	movs	r3, #0
   167de:	4252      	negs	r2, r2
   167e0:	606a      	str	r2, [r5, #4]
   167e2:	a902      	add	r1, sp, #8
   167e4:	3254      	adds	r2, #84	; 0x54
   167e6:	1852      	adds	r2, r2, r1
   167e8:	3401      	adds	r4, #1
   167ea:	602b      	str	r3, [r5, #0]
   167ec:	60eb      	str	r3, [r5, #12]
   167ee:	60ab      	str	r3, [r5, #8]
   167f0:	7013      	strb	r3, [r2, #0]
   167f2:	65ab      	str	r3, [r5, #88]	; 0x58
   167f4:	7821      	ldrb	r1, [r4, #0]
   167f6:	2205      	movs	r2, #5
   167f8:	4862      	ldr	r0, [pc, #392]	; (16984 <_vfiprintf_r+0x21c>)
   167fa:	f000 fee9 	bl	175d0 <memchr>
   167fe:	1c63      	adds	r3, r4, #1
   16800:	469c      	mov	ip, r3
   16802:	2800      	cmp	r0, #0
   16804:	d135      	bne.n	16872 <_vfiprintf_r+0x10a>
   16806:	6829      	ldr	r1, [r5, #0]
   16808:	06cb      	lsls	r3, r1, #27
   1680a:	d504      	bpl.n	16816 <_vfiprintf_r+0xae>
   1680c:	2353      	movs	r3, #83	; 0x53
   1680e:	aa02      	add	r2, sp, #8
   16810:	3020      	adds	r0, #32
   16812:	189b      	adds	r3, r3, r2
   16814:	7018      	strb	r0, [r3, #0]
   16816:	070b      	lsls	r3, r1, #28
   16818:	d504      	bpl.n	16824 <_vfiprintf_r+0xbc>
   1681a:	2353      	movs	r3, #83	; 0x53
   1681c:	202b      	movs	r0, #43	; 0x2b
   1681e:	aa02      	add	r2, sp, #8
   16820:	189b      	adds	r3, r3, r2
   16822:	7018      	strb	r0, [r3, #0]
   16824:	7823      	ldrb	r3, [r4, #0]
   16826:	2b2a      	cmp	r3, #42	; 0x2a
   16828:	d02c      	beq.n	16884 <_vfiprintf_r+0x11c>
   1682a:	2000      	movs	r0, #0
   1682c:	210a      	movs	r1, #10
   1682e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16830:	7822      	ldrb	r2, [r4, #0]
   16832:	3a30      	subs	r2, #48	; 0x30
   16834:	2a09      	cmp	r2, #9
   16836:	d800      	bhi.n	1683a <_vfiprintf_r+0xd2>
   16838:	e06b      	b.n	16912 <_vfiprintf_r+0x1aa>
   1683a:	2800      	cmp	r0, #0
   1683c:	d02a      	beq.n	16894 <_vfiprintf_r+0x12c>
   1683e:	9309      	str	r3, [sp, #36]	; 0x24
   16840:	e028      	b.n	16894 <_vfiprintf_r+0x12c>
   16842:	4b51      	ldr	r3, [pc, #324]	; (16988 <_vfiprintf_r+0x220>)
   16844:	429f      	cmp	r7, r3
   16846:	d101      	bne.n	1684c <_vfiprintf_r+0xe4>
   16848:	68b7      	ldr	r7, [r6, #8]
   1684a:	e79e      	b.n	1678a <_vfiprintf_r+0x22>
   1684c:	4b4f      	ldr	r3, [pc, #316]	; (1698c <_vfiprintf_r+0x224>)
   1684e:	429f      	cmp	r7, r3
   16850:	d19b      	bne.n	1678a <_vfiprintf_r+0x22>
   16852:	68f7      	ldr	r7, [r6, #12]
   16854:	e799      	b.n	1678a <_vfiprintf_r+0x22>
   16856:	0039      	movs	r1, r7
   16858:	0030      	movs	r0, r6
   1685a:	f000 fc37 	bl	170cc <__swsetup_r>
   1685e:	2800      	cmp	r0, #0
   16860:	d099      	beq.n	16796 <_vfiprintf_r+0x2e>
   16862:	2001      	movs	r0, #1
   16864:	4240      	negs	r0, r0
   16866:	b01f      	add	sp, #124	; 0x7c
   16868:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1686a:	2b25      	cmp	r3, #37	; 0x25
   1686c:	d09f      	beq.n	167ae <_vfiprintf_r+0x46>
   1686e:	3401      	adds	r4, #1
   16870:	e79a      	b.n	167a8 <_vfiprintf_r+0x40>
   16872:	4b44      	ldr	r3, [pc, #272]	; (16984 <_vfiprintf_r+0x21c>)
   16874:	6829      	ldr	r1, [r5, #0]
   16876:	1ac0      	subs	r0, r0, r3
   16878:	2301      	movs	r3, #1
   1687a:	4083      	lsls	r3, r0
   1687c:	430b      	orrs	r3, r1
   1687e:	602b      	str	r3, [r5, #0]
   16880:	4664      	mov	r4, ip
   16882:	e7b7      	b.n	167f4 <_vfiprintf_r+0x8c>
   16884:	9b05      	ldr	r3, [sp, #20]
   16886:	1d18      	adds	r0, r3, #4
   16888:	681b      	ldr	r3, [r3, #0]
   1688a:	9005      	str	r0, [sp, #20]
   1688c:	2b00      	cmp	r3, #0
   1688e:	db3a      	blt.n	16906 <_vfiprintf_r+0x19e>
   16890:	9309      	str	r3, [sp, #36]	; 0x24
   16892:	4664      	mov	r4, ip
   16894:	7823      	ldrb	r3, [r4, #0]
   16896:	2b2e      	cmp	r3, #46	; 0x2e
   16898:	d10b      	bne.n	168b2 <_vfiprintf_r+0x14a>
   1689a:	7863      	ldrb	r3, [r4, #1]
   1689c:	1c62      	adds	r2, r4, #1
   1689e:	2b2a      	cmp	r3, #42	; 0x2a
   168a0:	d13f      	bne.n	16922 <_vfiprintf_r+0x1ba>
   168a2:	9b05      	ldr	r3, [sp, #20]
   168a4:	3402      	adds	r4, #2
   168a6:	1d1a      	adds	r2, r3, #4
   168a8:	681b      	ldr	r3, [r3, #0]
   168aa:	9205      	str	r2, [sp, #20]
   168ac:	2b00      	cmp	r3, #0
   168ae:	db35      	blt.n	1691c <_vfiprintf_r+0x1b4>
   168b0:	9307      	str	r3, [sp, #28]
   168b2:	7821      	ldrb	r1, [r4, #0]
   168b4:	2203      	movs	r2, #3
   168b6:	4836      	ldr	r0, [pc, #216]	; (16990 <_vfiprintf_r+0x228>)
   168b8:	f000 fe8a 	bl	175d0 <memchr>
   168bc:	2800      	cmp	r0, #0
   168be:	d007      	beq.n	168d0 <_vfiprintf_r+0x168>
   168c0:	4b33      	ldr	r3, [pc, #204]	; (16990 <_vfiprintf_r+0x228>)
   168c2:	682a      	ldr	r2, [r5, #0]
   168c4:	1ac0      	subs	r0, r0, r3
   168c6:	2340      	movs	r3, #64	; 0x40
   168c8:	4083      	lsls	r3, r0
   168ca:	4313      	orrs	r3, r2
   168cc:	602b      	str	r3, [r5, #0]
   168ce:	3401      	adds	r4, #1
   168d0:	7821      	ldrb	r1, [r4, #0]
   168d2:	1c63      	adds	r3, r4, #1
   168d4:	2206      	movs	r2, #6
   168d6:	482f      	ldr	r0, [pc, #188]	; (16994 <_vfiprintf_r+0x22c>)
   168d8:	9302      	str	r3, [sp, #8]
   168da:	7629      	strb	r1, [r5, #24]
   168dc:	f000 fe78 	bl	175d0 <memchr>
   168e0:	2800      	cmp	r0, #0
   168e2:	d044      	beq.n	1696e <_vfiprintf_r+0x206>
   168e4:	4b2c      	ldr	r3, [pc, #176]	; (16998 <_vfiprintf_r+0x230>)
   168e6:	2b00      	cmp	r3, #0
   168e8:	d12f      	bne.n	1694a <_vfiprintf_r+0x1e2>
   168ea:	6829      	ldr	r1, [r5, #0]
   168ec:	9b05      	ldr	r3, [sp, #20]
   168ee:	2207      	movs	r2, #7
   168f0:	05c9      	lsls	r1, r1, #23
   168f2:	d528      	bpl.n	16946 <_vfiprintf_r+0x1de>
   168f4:	189b      	adds	r3, r3, r2
   168f6:	4393      	bics	r3, r2
   168f8:	3308      	adds	r3, #8
   168fa:	9305      	str	r3, [sp, #20]
   168fc:	696b      	ldr	r3, [r5, #20]
   168fe:	9a03      	ldr	r2, [sp, #12]
   16900:	189b      	adds	r3, r3, r2
   16902:	616b      	str	r3, [r5, #20]
   16904:	e74f      	b.n	167a6 <_vfiprintf_r+0x3e>
   16906:	425b      	negs	r3, r3
   16908:	60eb      	str	r3, [r5, #12]
   1690a:	2302      	movs	r3, #2
   1690c:	430b      	orrs	r3, r1
   1690e:	602b      	str	r3, [r5, #0]
   16910:	e7bf      	b.n	16892 <_vfiprintf_r+0x12a>
   16912:	434b      	muls	r3, r1
   16914:	3401      	adds	r4, #1
   16916:	189b      	adds	r3, r3, r2
   16918:	2001      	movs	r0, #1
   1691a:	e789      	b.n	16830 <_vfiprintf_r+0xc8>
   1691c:	2301      	movs	r3, #1
   1691e:	425b      	negs	r3, r3
   16920:	e7c6      	b.n	168b0 <_vfiprintf_r+0x148>
   16922:	2300      	movs	r3, #0
   16924:	0014      	movs	r4, r2
   16926:	200a      	movs	r0, #10
   16928:	001a      	movs	r2, r3
   1692a:	606b      	str	r3, [r5, #4]
   1692c:	7821      	ldrb	r1, [r4, #0]
   1692e:	3930      	subs	r1, #48	; 0x30
   16930:	2909      	cmp	r1, #9
   16932:	d903      	bls.n	1693c <_vfiprintf_r+0x1d4>
   16934:	2b00      	cmp	r3, #0
   16936:	d0bc      	beq.n	168b2 <_vfiprintf_r+0x14a>
   16938:	9207      	str	r2, [sp, #28]
   1693a:	e7ba      	b.n	168b2 <_vfiprintf_r+0x14a>
   1693c:	4342      	muls	r2, r0
   1693e:	3401      	adds	r4, #1
   16940:	1852      	adds	r2, r2, r1
   16942:	2301      	movs	r3, #1
   16944:	e7f2      	b.n	1692c <_vfiprintf_r+0x1c4>
   16946:	3307      	adds	r3, #7
   16948:	e7d5      	b.n	168f6 <_vfiprintf_r+0x18e>
   1694a:	ab05      	add	r3, sp, #20
   1694c:	9300      	str	r3, [sp, #0]
   1694e:	003a      	movs	r2, r7
   16950:	4b12      	ldr	r3, [pc, #72]	; (1699c <_vfiprintf_r+0x234>)
   16952:	0029      	movs	r1, r5
   16954:	0030      	movs	r0, r6
   16956:	e000      	b.n	1695a <_vfiprintf_r+0x1f2>
   16958:	bf00      	nop
   1695a:	9003      	str	r0, [sp, #12]
   1695c:	9b03      	ldr	r3, [sp, #12]
   1695e:	3301      	adds	r3, #1
   16960:	d1cc      	bne.n	168fc <_vfiprintf_r+0x194>
   16962:	89bb      	ldrh	r3, [r7, #12]
   16964:	065b      	lsls	r3, r3, #25
   16966:	d500      	bpl.n	1696a <_vfiprintf_r+0x202>
   16968:	e77b      	b.n	16862 <_vfiprintf_r+0xfa>
   1696a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1696c:	e77b      	b.n	16866 <_vfiprintf_r+0xfe>
   1696e:	ab05      	add	r3, sp, #20
   16970:	9300      	str	r3, [sp, #0]
   16972:	003a      	movs	r2, r7
   16974:	4b09      	ldr	r3, [pc, #36]	; (1699c <_vfiprintf_r+0x234>)
   16976:	0029      	movs	r1, r5
   16978:	0030      	movs	r0, r6
   1697a:	f000 f87f 	bl	16a7c <_printf_i>
   1697e:	e7ec      	b.n	1695a <_vfiprintf_r+0x1f2>
   16980:	00018e08 	.word	0x00018e08
   16984:	00018db4 	.word	0x00018db4
   16988:	00018e28 	.word	0x00018e28
   1698c:	00018de8 	.word	0x00018de8
   16990:	00018dba 	.word	0x00018dba
   16994:	00018dbe 	.word	0x00018dbe
   16998:	00000000 	.word	0x00000000
   1699c:	00016743 	.word	0x00016743

000169a0 <_printf_common>:
   169a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   169a2:	0015      	movs	r5, r2
   169a4:	9301      	str	r3, [sp, #4]
   169a6:	688a      	ldr	r2, [r1, #8]
   169a8:	690b      	ldr	r3, [r1, #16]
   169aa:	9000      	str	r0, [sp, #0]
   169ac:	000c      	movs	r4, r1
   169ae:	4293      	cmp	r3, r2
   169b0:	da00      	bge.n	169b4 <_printf_common+0x14>
   169b2:	0013      	movs	r3, r2
   169b4:	0022      	movs	r2, r4
   169b6:	602b      	str	r3, [r5, #0]
   169b8:	3243      	adds	r2, #67	; 0x43
   169ba:	7812      	ldrb	r2, [r2, #0]
   169bc:	2a00      	cmp	r2, #0
   169be:	d001      	beq.n	169c4 <_printf_common+0x24>
   169c0:	3301      	adds	r3, #1
   169c2:	602b      	str	r3, [r5, #0]
   169c4:	6823      	ldr	r3, [r4, #0]
   169c6:	069b      	lsls	r3, r3, #26
   169c8:	d502      	bpl.n	169d0 <_printf_common+0x30>
   169ca:	682b      	ldr	r3, [r5, #0]
   169cc:	3302      	adds	r3, #2
   169ce:	602b      	str	r3, [r5, #0]
   169d0:	2706      	movs	r7, #6
   169d2:	6823      	ldr	r3, [r4, #0]
   169d4:	401f      	ands	r7, r3
   169d6:	d027      	beq.n	16a28 <_printf_common+0x88>
   169d8:	0023      	movs	r3, r4
   169da:	3343      	adds	r3, #67	; 0x43
   169dc:	781b      	ldrb	r3, [r3, #0]
   169de:	1e5a      	subs	r2, r3, #1
   169e0:	4193      	sbcs	r3, r2
   169e2:	6822      	ldr	r2, [r4, #0]
   169e4:	0692      	lsls	r2, r2, #26
   169e6:	d430      	bmi.n	16a4a <_printf_common+0xaa>
   169e8:	0022      	movs	r2, r4
   169ea:	9901      	ldr	r1, [sp, #4]
   169ec:	3243      	adds	r2, #67	; 0x43
   169ee:	9800      	ldr	r0, [sp, #0]
   169f0:	9e08      	ldr	r6, [sp, #32]
   169f2:	47b0      	blx	r6
   169f4:	1c43      	adds	r3, r0, #1
   169f6:	d025      	beq.n	16a44 <_printf_common+0xa4>
   169f8:	2306      	movs	r3, #6
   169fa:	6820      	ldr	r0, [r4, #0]
   169fc:	682a      	ldr	r2, [r5, #0]
   169fe:	68e1      	ldr	r1, [r4, #12]
   16a00:	4003      	ands	r3, r0
   16a02:	2500      	movs	r5, #0
   16a04:	2b04      	cmp	r3, #4
   16a06:	d103      	bne.n	16a10 <_printf_common+0x70>
   16a08:	1a8d      	subs	r5, r1, r2
   16a0a:	43eb      	mvns	r3, r5
   16a0c:	17db      	asrs	r3, r3, #31
   16a0e:	401d      	ands	r5, r3
   16a10:	68a3      	ldr	r3, [r4, #8]
   16a12:	6922      	ldr	r2, [r4, #16]
   16a14:	4293      	cmp	r3, r2
   16a16:	dd01      	ble.n	16a1c <_printf_common+0x7c>
   16a18:	1a9b      	subs	r3, r3, r2
   16a1a:	18ed      	adds	r5, r5, r3
   16a1c:	2700      	movs	r7, #0
   16a1e:	42bd      	cmp	r5, r7
   16a20:	d120      	bne.n	16a64 <_printf_common+0xc4>
   16a22:	2000      	movs	r0, #0
   16a24:	e010      	b.n	16a48 <_printf_common+0xa8>
   16a26:	3701      	adds	r7, #1
   16a28:	68e3      	ldr	r3, [r4, #12]
   16a2a:	682a      	ldr	r2, [r5, #0]
   16a2c:	1a9b      	subs	r3, r3, r2
   16a2e:	429f      	cmp	r7, r3
   16a30:	dad2      	bge.n	169d8 <_printf_common+0x38>
   16a32:	0022      	movs	r2, r4
   16a34:	2301      	movs	r3, #1
   16a36:	3219      	adds	r2, #25
   16a38:	9901      	ldr	r1, [sp, #4]
   16a3a:	9800      	ldr	r0, [sp, #0]
   16a3c:	9e08      	ldr	r6, [sp, #32]
   16a3e:	47b0      	blx	r6
   16a40:	1c43      	adds	r3, r0, #1
   16a42:	d1f0      	bne.n	16a26 <_printf_common+0x86>
   16a44:	2001      	movs	r0, #1
   16a46:	4240      	negs	r0, r0
   16a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16a4a:	2030      	movs	r0, #48	; 0x30
   16a4c:	18e1      	adds	r1, r4, r3
   16a4e:	3143      	adds	r1, #67	; 0x43
   16a50:	7008      	strb	r0, [r1, #0]
   16a52:	0021      	movs	r1, r4
   16a54:	1c5a      	adds	r2, r3, #1
   16a56:	3145      	adds	r1, #69	; 0x45
   16a58:	7809      	ldrb	r1, [r1, #0]
   16a5a:	18a2      	adds	r2, r4, r2
   16a5c:	3243      	adds	r2, #67	; 0x43
   16a5e:	3302      	adds	r3, #2
   16a60:	7011      	strb	r1, [r2, #0]
   16a62:	e7c1      	b.n	169e8 <_printf_common+0x48>
   16a64:	0022      	movs	r2, r4
   16a66:	2301      	movs	r3, #1
   16a68:	321a      	adds	r2, #26
   16a6a:	9901      	ldr	r1, [sp, #4]
   16a6c:	9800      	ldr	r0, [sp, #0]
   16a6e:	9e08      	ldr	r6, [sp, #32]
   16a70:	47b0      	blx	r6
   16a72:	1c43      	adds	r3, r0, #1
   16a74:	d0e6      	beq.n	16a44 <_printf_common+0xa4>
   16a76:	3701      	adds	r7, #1
   16a78:	e7d1      	b.n	16a1e <_printf_common+0x7e>
   16a7a:	Address 0x00016a7a is out of bounds.


00016a7c <_printf_i>:
   16a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a7e:	b08b      	sub	sp, #44	; 0x2c
   16a80:	9206      	str	r2, [sp, #24]
   16a82:	000a      	movs	r2, r1
   16a84:	3243      	adds	r2, #67	; 0x43
   16a86:	9307      	str	r3, [sp, #28]
   16a88:	9005      	str	r0, [sp, #20]
   16a8a:	9204      	str	r2, [sp, #16]
   16a8c:	7e0a      	ldrb	r2, [r1, #24]
   16a8e:	000c      	movs	r4, r1
   16a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16a92:	2a6e      	cmp	r2, #110	; 0x6e
   16a94:	d100      	bne.n	16a98 <_printf_i+0x1c>
   16a96:	e08f      	b.n	16bb8 <_printf_i+0x13c>
   16a98:	d817      	bhi.n	16aca <_printf_i+0x4e>
   16a9a:	2a63      	cmp	r2, #99	; 0x63
   16a9c:	d02c      	beq.n	16af8 <_printf_i+0x7c>
   16a9e:	d808      	bhi.n	16ab2 <_printf_i+0x36>
   16aa0:	2a00      	cmp	r2, #0
   16aa2:	d100      	bne.n	16aa6 <_printf_i+0x2a>
   16aa4:	e099      	b.n	16bda <_printf_i+0x15e>
   16aa6:	2a58      	cmp	r2, #88	; 0x58
   16aa8:	d054      	beq.n	16b54 <_printf_i+0xd8>
   16aaa:	0026      	movs	r6, r4
   16aac:	3642      	adds	r6, #66	; 0x42
   16aae:	7032      	strb	r2, [r6, #0]
   16ab0:	e029      	b.n	16b06 <_printf_i+0x8a>
   16ab2:	2a64      	cmp	r2, #100	; 0x64
   16ab4:	d001      	beq.n	16aba <_printf_i+0x3e>
   16ab6:	2a69      	cmp	r2, #105	; 0x69
   16ab8:	d1f7      	bne.n	16aaa <_printf_i+0x2e>
   16aba:	6821      	ldr	r1, [r4, #0]
   16abc:	681a      	ldr	r2, [r3, #0]
   16abe:	0608      	lsls	r0, r1, #24
   16ac0:	d523      	bpl.n	16b0a <_printf_i+0x8e>
   16ac2:	1d11      	adds	r1, r2, #4
   16ac4:	6019      	str	r1, [r3, #0]
   16ac6:	6815      	ldr	r5, [r2, #0]
   16ac8:	e025      	b.n	16b16 <_printf_i+0x9a>
   16aca:	2a73      	cmp	r2, #115	; 0x73
   16acc:	d100      	bne.n	16ad0 <_printf_i+0x54>
   16ace:	e088      	b.n	16be2 <_printf_i+0x166>
   16ad0:	d808      	bhi.n	16ae4 <_printf_i+0x68>
   16ad2:	2a6f      	cmp	r2, #111	; 0x6f
   16ad4:	d029      	beq.n	16b2a <_printf_i+0xae>
   16ad6:	2a70      	cmp	r2, #112	; 0x70
   16ad8:	d1e7      	bne.n	16aaa <_printf_i+0x2e>
   16ada:	2220      	movs	r2, #32
   16adc:	6809      	ldr	r1, [r1, #0]
   16ade:	430a      	orrs	r2, r1
   16ae0:	6022      	str	r2, [r4, #0]
   16ae2:	e003      	b.n	16aec <_printf_i+0x70>
   16ae4:	2a75      	cmp	r2, #117	; 0x75
   16ae6:	d020      	beq.n	16b2a <_printf_i+0xae>
   16ae8:	2a78      	cmp	r2, #120	; 0x78
   16aea:	d1de      	bne.n	16aaa <_printf_i+0x2e>
   16aec:	0022      	movs	r2, r4
   16aee:	2178      	movs	r1, #120	; 0x78
   16af0:	3245      	adds	r2, #69	; 0x45
   16af2:	7011      	strb	r1, [r2, #0]
   16af4:	4a6c      	ldr	r2, [pc, #432]	; (16ca8 <_printf_i+0x22c>)
   16af6:	e030      	b.n	16b5a <_printf_i+0xde>
   16af8:	000e      	movs	r6, r1
   16afa:	681a      	ldr	r2, [r3, #0]
   16afc:	3642      	adds	r6, #66	; 0x42
   16afe:	1d11      	adds	r1, r2, #4
   16b00:	6019      	str	r1, [r3, #0]
   16b02:	6813      	ldr	r3, [r2, #0]
   16b04:	7033      	strb	r3, [r6, #0]
   16b06:	2301      	movs	r3, #1
   16b08:	e079      	b.n	16bfe <_printf_i+0x182>
   16b0a:	0649      	lsls	r1, r1, #25
   16b0c:	d5d9      	bpl.n	16ac2 <_printf_i+0x46>
   16b0e:	1d11      	adds	r1, r2, #4
   16b10:	6019      	str	r1, [r3, #0]
   16b12:	2300      	movs	r3, #0
   16b14:	5ed5      	ldrsh	r5, [r2, r3]
   16b16:	2d00      	cmp	r5, #0
   16b18:	da03      	bge.n	16b22 <_printf_i+0xa6>
   16b1a:	232d      	movs	r3, #45	; 0x2d
   16b1c:	9a04      	ldr	r2, [sp, #16]
   16b1e:	426d      	negs	r5, r5
   16b20:	7013      	strb	r3, [r2, #0]
   16b22:	4b62      	ldr	r3, [pc, #392]	; (16cac <_printf_i+0x230>)
   16b24:	270a      	movs	r7, #10
   16b26:	9303      	str	r3, [sp, #12]
   16b28:	e02f      	b.n	16b8a <_printf_i+0x10e>
   16b2a:	6820      	ldr	r0, [r4, #0]
   16b2c:	6819      	ldr	r1, [r3, #0]
   16b2e:	0605      	lsls	r5, r0, #24
   16b30:	d503      	bpl.n	16b3a <_printf_i+0xbe>
   16b32:	1d08      	adds	r0, r1, #4
   16b34:	6018      	str	r0, [r3, #0]
   16b36:	680d      	ldr	r5, [r1, #0]
   16b38:	e005      	b.n	16b46 <_printf_i+0xca>
   16b3a:	0640      	lsls	r0, r0, #25
   16b3c:	d5f9      	bpl.n	16b32 <_printf_i+0xb6>
   16b3e:	680d      	ldr	r5, [r1, #0]
   16b40:	1d08      	adds	r0, r1, #4
   16b42:	6018      	str	r0, [r3, #0]
   16b44:	b2ad      	uxth	r5, r5
   16b46:	4b59      	ldr	r3, [pc, #356]	; (16cac <_printf_i+0x230>)
   16b48:	2708      	movs	r7, #8
   16b4a:	9303      	str	r3, [sp, #12]
   16b4c:	2a6f      	cmp	r2, #111	; 0x6f
   16b4e:	d018      	beq.n	16b82 <_printf_i+0x106>
   16b50:	270a      	movs	r7, #10
   16b52:	e016      	b.n	16b82 <_printf_i+0x106>
   16b54:	3145      	adds	r1, #69	; 0x45
   16b56:	700a      	strb	r2, [r1, #0]
   16b58:	4a54      	ldr	r2, [pc, #336]	; (16cac <_printf_i+0x230>)
   16b5a:	9203      	str	r2, [sp, #12]
   16b5c:	681a      	ldr	r2, [r3, #0]
   16b5e:	6821      	ldr	r1, [r4, #0]
   16b60:	1d10      	adds	r0, r2, #4
   16b62:	6018      	str	r0, [r3, #0]
   16b64:	6815      	ldr	r5, [r2, #0]
   16b66:	0608      	lsls	r0, r1, #24
   16b68:	d522      	bpl.n	16bb0 <_printf_i+0x134>
   16b6a:	07cb      	lsls	r3, r1, #31
   16b6c:	d502      	bpl.n	16b74 <_printf_i+0xf8>
   16b6e:	2320      	movs	r3, #32
   16b70:	4319      	orrs	r1, r3
   16b72:	6021      	str	r1, [r4, #0]
   16b74:	2710      	movs	r7, #16
   16b76:	2d00      	cmp	r5, #0
   16b78:	d103      	bne.n	16b82 <_printf_i+0x106>
   16b7a:	2320      	movs	r3, #32
   16b7c:	6822      	ldr	r2, [r4, #0]
   16b7e:	439a      	bics	r2, r3
   16b80:	6022      	str	r2, [r4, #0]
   16b82:	0023      	movs	r3, r4
   16b84:	2200      	movs	r2, #0
   16b86:	3343      	adds	r3, #67	; 0x43
   16b88:	701a      	strb	r2, [r3, #0]
   16b8a:	6863      	ldr	r3, [r4, #4]
   16b8c:	60a3      	str	r3, [r4, #8]
   16b8e:	2b00      	cmp	r3, #0
   16b90:	db5c      	blt.n	16c4c <_printf_i+0x1d0>
   16b92:	2204      	movs	r2, #4
   16b94:	6821      	ldr	r1, [r4, #0]
   16b96:	4391      	bics	r1, r2
   16b98:	6021      	str	r1, [r4, #0]
   16b9a:	2d00      	cmp	r5, #0
   16b9c:	d158      	bne.n	16c50 <_printf_i+0x1d4>
   16b9e:	9e04      	ldr	r6, [sp, #16]
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	d064      	beq.n	16c6e <_printf_i+0x1f2>
   16ba4:	0026      	movs	r6, r4
   16ba6:	9b03      	ldr	r3, [sp, #12]
   16ba8:	3642      	adds	r6, #66	; 0x42
   16baa:	781b      	ldrb	r3, [r3, #0]
   16bac:	7033      	strb	r3, [r6, #0]
   16bae:	e05e      	b.n	16c6e <_printf_i+0x1f2>
   16bb0:	0648      	lsls	r0, r1, #25
   16bb2:	d5da      	bpl.n	16b6a <_printf_i+0xee>
   16bb4:	b2ad      	uxth	r5, r5
   16bb6:	e7d8      	b.n	16b6a <_printf_i+0xee>
   16bb8:	6809      	ldr	r1, [r1, #0]
   16bba:	681a      	ldr	r2, [r3, #0]
   16bbc:	0608      	lsls	r0, r1, #24
   16bbe:	d505      	bpl.n	16bcc <_printf_i+0x150>
   16bc0:	1d11      	adds	r1, r2, #4
   16bc2:	6019      	str	r1, [r3, #0]
   16bc4:	6813      	ldr	r3, [r2, #0]
   16bc6:	6962      	ldr	r2, [r4, #20]
   16bc8:	601a      	str	r2, [r3, #0]
   16bca:	e006      	b.n	16bda <_printf_i+0x15e>
   16bcc:	0649      	lsls	r1, r1, #25
   16bce:	d5f7      	bpl.n	16bc0 <_printf_i+0x144>
   16bd0:	1d11      	adds	r1, r2, #4
   16bd2:	6019      	str	r1, [r3, #0]
   16bd4:	6813      	ldr	r3, [r2, #0]
   16bd6:	8aa2      	ldrh	r2, [r4, #20]
   16bd8:	801a      	strh	r2, [r3, #0]
   16bda:	2300      	movs	r3, #0
   16bdc:	9e04      	ldr	r6, [sp, #16]
   16bde:	6123      	str	r3, [r4, #16]
   16be0:	e054      	b.n	16c8c <_printf_i+0x210>
   16be2:	681a      	ldr	r2, [r3, #0]
   16be4:	1d11      	adds	r1, r2, #4
   16be6:	6019      	str	r1, [r3, #0]
   16be8:	6816      	ldr	r6, [r2, #0]
   16bea:	2100      	movs	r1, #0
   16bec:	6862      	ldr	r2, [r4, #4]
   16bee:	0030      	movs	r0, r6
   16bf0:	f000 fcee 	bl	175d0 <memchr>
   16bf4:	2800      	cmp	r0, #0
   16bf6:	d001      	beq.n	16bfc <_printf_i+0x180>
   16bf8:	1b80      	subs	r0, r0, r6
   16bfa:	6060      	str	r0, [r4, #4]
   16bfc:	6863      	ldr	r3, [r4, #4]
   16bfe:	6123      	str	r3, [r4, #16]
   16c00:	2300      	movs	r3, #0
   16c02:	9a04      	ldr	r2, [sp, #16]
   16c04:	7013      	strb	r3, [r2, #0]
   16c06:	e041      	b.n	16c8c <_printf_i+0x210>
   16c08:	6923      	ldr	r3, [r4, #16]
   16c0a:	0032      	movs	r2, r6
   16c0c:	9906      	ldr	r1, [sp, #24]
   16c0e:	9805      	ldr	r0, [sp, #20]
   16c10:	9d07      	ldr	r5, [sp, #28]
   16c12:	47a8      	blx	r5
   16c14:	1c43      	adds	r3, r0, #1
   16c16:	d043      	beq.n	16ca0 <_printf_i+0x224>
   16c18:	6823      	ldr	r3, [r4, #0]
   16c1a:	2500      	movs	r5, #0
   16c1c:	079b      	lsls	r3, r3, #30
   16c1e:	d40f      	bmi.n	16c40 <_printf_i+0x1c4>
   16c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16c22:	68e0      	ldr	r0, [r4, #12]
   16c24:	4298      	cmp	r0, r3
   16c26:	da3d      	bge.n	16ca4 <_printf_i+0x228>
   16c28:	0018      	movs	r0, r3
   16c2a:	e03b      	b.n	16ca4 <_printf_i+0x228>
   16c2c:	0022      	movs	r2, r4
   16c2e:	2301      	movs	r3, #1
   16c30:	3219      	adds	r2, #25
   16c32:	9906      	ldr	r1, [sp, #24]
   16c34:	9805      	ldr	r0, [sp, #20]
   16c36:	9e07      	ldr	r6, [sp, #28]
   16c38:	47b0      	blx	r6
   16c3a:	1c43      	adds	r3, r0, #1
   16c3c:	d030      	beq.n	16ca0 <_printf_i+0x224>
   16c3e:	3501      	adds	r5, #1
   16c40:	68e3      	ldr	r3, [r4, #12]
   16c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16c44:	1a9b      	subs	r3, r3, r2
   16c46:	429d      	cmp	r5, r3
   16c48:	dbf0      	blt.n	16c2c <_printf_i+0x1b0>
   16c4a:	e7e9      	b.n	16c20 <_printf_i+0x1a4>
   16c4c:	2d00      	cmp	r5, #0
   16c4e:	d0a9      	beq.n	16ba4 <_printf_i+0x128>
   16c50:	9e04      	ldr	r6, [sp, #16]
   16c52:	0028      	movs	r0, r5
   16c54:	0039      	movs	r1, r7
   16c56:	f7fc fca3 	bl	135a0 <__aeabi_uidivmod>
   16c5a:	9b03      	ldr	r3, [sp, #12]
   16c5c:	3e01      	subs	r6, #1
   16c5e:	5c5b      	ldrb	r3, [r3, r1]
   16c60:	0028      	movs	r0, r5
   16c62:	7033      	strb	r3, [r6, #0]
   16c64:	0039      	movs	r1, r7
   16c66:	f7fc fc15 	bl	13494 <__udivsi3>
   16c6a:	1e05      	subs	r5, r0, #0
   16c6c:	d1f1      	bne.n	16c52 <_printf_i+0x1d6>
   16c6e:	2f08      	cmp	r7, #8
   16c70:	d109      	bne.n	16c86 <_printf_i+0x20a>
   16c72:	6823      	ldr	r3, [r4, #0]
   16c74:	07db      	lsls	r3, r3, #31
   16c76:	d506      	bpl.n	16c86 <_printf_i+0x20a>
   16c78:	6863      	ldr	r3, [r4, #4]
   16c7a:	6922      	ldr	r2, [r4, #16]
   16c7c:	4293      	cmp	r3, r2
   16c7e:	dc02      	bgt.n	16c86 <_printf_i+0x20a>
   16c80:	2330      	movs	r3, #48	; 0x30
   16c82:	3e01      	subs	r6, #1
   16c84:	7033      	strb	r3, [r6, #0]
   16c86:	9b04      	ldr	r3, [sp, #16]
   16c88:	1b9b      	subs	r3, r3, r6
   16c8a:	6123      	str	r3, [r4, #16]
   16c8c:	9b07      	ldr	r3, [sp, #28]
   16c8e:	aa09      	add	r2, sp, #36	; 0x24
   16c90:	9300      	str	r3, [sp, #0]
   16c92:	0021      	movs	r1, r4
   16c94:	9b06      	ldr	r3, [sp, #24]
   16c96:	9805      	ldr	r0, [sp, #20]
   16c98:	f7ff fe82 	bl	169a0 <_printf_common>
   16c9c:	1c43      	adds	r3, r0, #1
   16c9e:	d1b3      	bne.n	16c08 <_printf_i+0x18c>
   16ca0:	2001      	movs	r0, #1
   16ca2:	4240      	negs	r0, r0
   16ca4:	b00b      	add	sp, #44	; 0x2c
   16ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ca8:	00018dd6 	.word	0x00018dd6
   16cac:	00018dc5 	.word	0x00018dc5

00016cb0 <iprintf>:
   16cb0:	b40f      	push	{r0, r1, r2, r3}
   16cb2:	4b0b      	ldr	r3, [pc, #44]	; (16ce0 <iprintf+0x30>)
   16cb4:	b513      	push	{r0, r1, r4, lr}
   16cb6:	681c      	ldr	r4, [r3, #0]
   16cb8:	2c00      	cmp	r4, #0
   16cba:	d005      	beq.n	16cc8 <iprintf+0x18>
   16cbc:	69a3      	ldr	r3, [r4, #24]
   16cbe:	2b00      	cmp	r3, #0
   16cc0:	d102      	bne.n	16cc8 <iprintf+0x18>
   16cc2:	0020      	movs	r0, r4
   16cc4:	f000 fb78 	bl	173b8 <__sinit>
   16cc8:	ab05      	add	r3, sp, #20
   16cca:	9a04      	ldr	r2, [sp, #16]
   16ccc:	68a1      	ldr	r1, [r4, #8]
   16cce:	0020      	movs	r0, r4
   16cd0:	9301      	str	r3, [sp, #4]
   16cd2:	f7ff fd49 	bl	16768 <_vfiprintf_r>
   16cd6:	bc16      	pop	{r1, r2, r4}
   16cd8:	bc08      	pop	{r3}
   16cda:	b004      	add	sp, #16
   16cdc:	4718      	bx	r3
   16cde:	46c0      	nop			; (mov r8, r8)
   16ce0:	20000028 	.word	0x20000028

00016ce4 <putchar>:
   16ce4:	4b08      	ldr	r3, [pc, #32]	; (16d08 <putchar+0x24>)
   16ce6:	b570      	push	{r4, r5, r6, lr}
   16ce8:	681c      	ldr	r4, [r3, #0]
   16cea:	0005      	movs	r5, r0
   16cec:	2c00      	cmp	r4, #0
   16cee:	d005      	beq.n	16cfc <putchar+0x18>
   16cf0:	69a3      	ldr	r3, [r4, #24]
   16cf2:	2b00      	cmp	r3, #0
   16cf4:	d102      	bne.n	16cfc <putchar+0x18>
   16cf6:	0020      	movs	r0, r4
   16cf8:	f000 fb5e 	bl	173b8 <__sinit>
   16cfc:	0029      	movs	r1, r5
   16cfe:	68a2      	ldr	r2, [r4, #8]
   16d00:	0020      	movs	r0, r4
   16d02:	f000 fd19 	bl	17738 <_putc_r>
   16d06:	bd70      	pop	{r4, r5, r6, pc}
   16d08:	20000028 	.word	0x20000028

00016d0c <_puts_r>:
   16d0c:	b570      	push	{r4, r5, r6, lr}
   16d0e:	0005      	movs	r5, r0
   16d10:	000e      	movs	r6, r1
   16d12:	2800      	cmp	r0, #0
   16d14:	d004      	beq.n	16d20 <_puts_r+0x14>
   16d16:	6983      	ldr	r3, [r0, #24]
   16d18:	2b00      	cmp	r3, #0
   16d1a:	d101      	bne.n	16d20 <_puts_r+0x14>
   16d1c:	f000 fb4c 	bl	173b8 <__sinit>
   16d20:	69ab      	ldr	r3, [r5, #24]
   16d22:	68ac      	ldr	r4, [r5, #8]
   16d24:	2b00      	cmp	r3, #0
   16d26:	d102      	bne.n	16d2e <_puts_r+0x22>
   16d28:	0028      	movs	r0, r5
   16d2a:	f000 fb45 	bl	173b8 <__sinit>
   16d2e:	4b24      	ldr	r3, [pc, #144]	; (16dc0 <_puts_r+0xb4>)
   16d30:	429c      	cmp	r4, r3
   16d32:	d10f      	bne.n	16d54 <_puts_r+0x48>
   16d34:	686c      	ldr	r4, [r5, #4]
   16d36:	89a3      	ldrh	r3, [r4, #12]
   16d38:	071b      	lsls	r3, r3, #28
   16d3a:	d502      	bpl.n	16d42 <_puts_r+0x36>
   16d3c:	6923      	ldr	r3, [r4, #16]
   16d3e:	2b00      	cmp	r3, #0
   16d40:	d120      	bne.n	16d84 <_puts_r+0x78>
   16d42:	0021      	movs	r1, r4
   16d44:	0028      	movs	r0, r5
   16d46:	f000 f9c1 	bl	170cc <__swsetup_r>
   16d4a:	2800      	cmp	r0, #0
   16d4c:	d01a      	beq.n	16d84 <_puts_r+0x78>
   16d4e:	2001      	movs	r0, #1
   16d50:	4240      	negs	r0, r0
   16d52:	bd70      	pop	{r4, r5, r6, pc}
   16d54:	4b1b      	ldr	r3, [pc, #108]	; (16dc4 <_puts_r+0xb8>)
   16d56:	429c      	cmp	r4, r3
   16d58:	d101      	bne.n	16d5e <_puts_r+0x52>
   16d5a:	68ac      	ldr	r4, [r5, #8]
   16d5c:	e7eb      	b.n	16d36 <_puts_r+0x2a>
   16d5e:	4b1a      	ldr	r3, [pc, #104]	; (16dc8 <_puts_r+0xbc>)
   16d60:	429c      	cmp	r4, r3
   16d62:	d1e8      	bne.n	16d36 <_puts_r+0x2a>
   16d64:	68ec      	ldr	r4, [r5, #12]
   16d66:	e7e6      	b.n	16d36 <_puts_r+0x2a>
   16d68:	3b01      	subs	r3, #1
   16d6a:	3601      	adds	r6, #1
   16d6c:	60a3      	str	r3, [r4, #8]
   16d6e:	2b00      	cmp	r3, #0
   16d70:	da04      	bge.n	16d7c <_puts_r+0x70>
   16d72:	69a2      	ldr	r2, [r4, #24]
   16d74:	4293      	cmp	r3, r2
   16d76:	db16      	blt.n	16da6 <_puts_r+0x9a>
   16d78:	290a      	cmp	r1, #10
   16d7a:	d014      	beq.n	16da6 <_puts_r+0x9a>
   16d7c:	6823      	ldr	r3, [r4, #0]
   16d7e:	1c5a      	adds	r2, r3, #1
   16d80:	6022      	str	r2, [r4, #0]
   16d82:	7019      	strb	r1, [r3, #0]
   16d84:	7831      	ldrb	r1, [r6, #0]
   16d86:	68a3      	ldr	r3, [r4, #8]
   16d88:	2900      	cmp	r1, #0
   16d8a:	d1ed      	bne.n	16d68 <_puts_r+0x5c>
   16d8c:	3b01      	subs	r3, #1
   16d8e:	60a3      	str	r3, [r4, #8]
   16d90:	2b00      	cmp	r3, #0
   16d92:	da0f      	bge.n	16db4 <_puts_r+0xa8>
   16d94:	0022      	movs	r2, r4
   16d96:	310a      	adds	r1, #10
   16d98:	0028      	movs	r0, r5
   16d9a:	f000 f941 	bl	17020 <__swbuf_r>
   16d9e:	1c43      	adds	r3, r0, #1
   16da0:	d0d5      	beq.n	16d4e <_puts_r+0x42>
   16da2:	200a      	movs	r0, #10
   16da4:	e7d5      	b.n	16d52 <_puts_r+0x46>
   16da6:	0022      	movs	r2, r4
   16da8:	0028      	movs	r0, r5
   16daa:	f000 f939 	bl	17020 <__swbuf_r>
   16dae:	1c43      	adds	r3, r0, #1
   16db0:	d1e8      	bne.n	16d84 <_puts_r+0x78>
   16db2:	e7cc      	b.n	16d4e <_puts_r+0x42>
   16db4:	200a      	movs	r0, #10
   16db6:	6823      	ldr	r3, [r4, #0]
   16db8:	1c5a      	adds	r2, r3, #1
   16dba:	6022      	str	r2, [r4, #0]
   16dbc:	7018      	strb	r0, [r3, #0]
   16dbe:	e7c8      	b.n	16d52 <_puts_r+0x46>
   16dc0:	00018e08 	.word	0x00018e08
   16dc4:	00018e28 	.word	0x00018e28
   16dc8:	00018de8 	.word	0x00018de8

00016dcc <puts>:
   16dcc:	b510      	push	{r4, lr}
   16dce:	4b03      	ldr	r3, [pc, #12]	; (16ddc <puts+0x10>)
   16dd0:	0001      	movs	r1, r0
   16dd2:	6818      	ldr	r0, [r3, #0]
   16dd4:	f7ff ff9a 	bl	16d0c <_puts_r>
   16dd8:	bd10      	pop	{r4, pc}
   16dda:	46c0      	nop			; (mov r8, r8)
   16ddc:	20000028 	.word	0x20000028

00016de0 <srand>:
   16de0:	4b10      	ldr	r3, [pc, #64]	; (16e24 <srand+0x44>)
   16de2:	b570      	push	{r4, r5, r6, lr}
   16de4:	681c      	ldr	r4, [r3, #0]
   16de6:	0005      	movs	r5, r0
   16de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16dea:	2b00      	cmp	r3, #0
   16dec:	d115      	bne.n	16e1a <srand+0x3a>
   16dee:	2018      	movs	r0, #24
   16df0:	f000 fbe4 	bl	175bc <malloc>
   16df4:	4b0c      	ldr	r3, [pc, #48]	; (16e28 <srand+0x48>)
   16df6:	63a0      	str	r0, [r4, #56]	; 0x38
   16df8:	8003      	strh	r3, [r0, #0]
   16dfa:	4b0c      	ldr	r3, [pc, #48]	; (16e2c <srand+0x4c>)
   16dfc:	2201      	movs	r2, #1
   16dfe:	8043      	strh	r3, [r0, #2]
   16e00:	4b0b      	ldr	r3, [pc, #44]	; (16e30 <srand+0x50>)
   16e02:	8083      	strh	r3, [r0, #4]
   16e04:	4b0b      	ldr	r3, [pc, #44]	; (16e34 <srand+0x54>)
   16e06:	80c3      	strh	r3, [r0, #6]
   16e08:	4b0b      	ldr	r3, [pc, #44]	; (16e38 <srand+0x58>)
   16e0a:	8103      	strh	r3, [r0, #8]
   16e0c:	2305      	movs	r3, #5
   16e0e:	8143      	strh	r3, [r0, #10]
   16e10:	3306      	adds	r3, #6
   16e12:	8183      	strh	r3, [r0, #12]
   16e14:	2300      	movs	r3, #0
   16e16:	6102      	str	r2, [r0, #16]
   16e18:	6143      	str	r3, [r0, #20]
   16e1a:	2200      	movs	r2, #0
   16e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16e1e:	611d      	str	r5, [r3, #16]
   16e20:	615a      	str	r2, [r3, #20]
   16e22:	bd70      	pop	{r4, r5, r6, pc}
   16e24:	20000028 	.word	0x20000028
   16e28:	0000330e 	.word	0x0000330e
   16e2c:	ffffabcd 	.word	0xffffabcd
   16e30:	00001234 	.word	0x00001234
   16e34:	ffffe66d 	.word	0xffffe66d
   16e38:	ffffdeec 	.word	0xffffdeec

00016e3c <rand>:
   16e3c:	4b15      	ldr	r3, [pc, #84]	; (16e94 <rand+0x58>)
   16e3e:	b510      	push	{r4, lr}
   16e40:	681c      	ldr	r4, [r3, #0]
   16e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16e44:	2b00      	cmp	r3, #0
   16e46:	d115      	bne.n	16e74 <rand+0x38>
   16e48:	2018      	movs	r0, #24
   16e4a:	f000 fbb7 	bl	175bc <malloc>
   16e4e:	4b12      	ldr	r3, [pc, #72]	; (16e98 <rand+0x5c>)
   16e50:	63a0      	str	r0, [r4, #56]	; 0x38
   16e52:	8003      	strh	r3, [r0, #0]
   16e54:	4b11      	ldr	r3, [pc, #68]	; (16e9c <rand+0x60>)
   16e56:	2201      	movs	r2, #1
   16e58:	8043      	strh	r3, [r0, #2]
   16e5a:	4b11      	ldr	r3, [pc, #68]	; (16ea0 <rand+0x64>)
   16e5c:	8083      	strh	r3, [r0, #4]
   16e5e:	4b11      	ldr	r3, [pc, #68]	; (16ea4 <rand+0x68>)
   16e60:	80c3      	strh	r3, [r0, #6]
   16e62:	4b11      	ldr	r3, [pc, #68]	; (16ea8 <rand+0x6c>)
   16e64:	8103      	strh	r3, [r0, #8]
   16e66:	2305      	movs	r3, #5
   16e68:	8143      	strh	r3, [r0, #10]
   16e6a:	3306      	adds	r3, #6
   16e6c:	8183      	strh	r3, [r0, #12]
   16e6e:	2300      	movs	r3, #0
   16e70:	6102      	str	r2, [r0, #16]
   16e72:	6143      	str	r3, [r0, #20]
   16e74:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   16e76:	4a0d      	ldr	r2, [pc, #52]	; (16eac <rand+0x70>)
   16e78:	6920      	ldr	r0, [r4, #16]
   16e7a:	6961      	ldr	r1, [r4, #20]
   16e7c:	4b0c      	ldr	r3, [pc, #48]	; (16eb0 <rand+0x74>)
   16e7e:	f7fc fd17 	bl	138b0 <__aeabi_lmul>
   16e82:	2201      	movs	r2, #1
   16e84:	2300      	movs	r3, #0
   16e86:	1880      	adds	r0, r0, r2
   16e88:	4159      	adcs	r1, r3
   16e8a:	6120      	str	r0, [r4, #16]
   16e8c:	6161      	str	r1, [r4, #20]
   16e8e:	0048      	lsls	r0, r1, #1
   16e90:	0840      	lsrs	r0, r0, #1
   16e92:	bd10      	pop	{r4, pc}
   16e94:	20000028 	.word	0x20000028
   16e98:	0000330e 	.word	0x0000330e
   16e9c:	ffffabcd 	.word	0xffffabcd
   16ea0:	00001234 	.word	0x00001234
   16ea4:	ffffe66d 	.word	0xffffe66d
   16ea8:	ffffdeec 	.word	0xffffdeec
   16eac:	4c957f2d 	.word	0x4c957f2d
   16eb0:	5851f42d 	.word	0x5851f42d

00016eb4 <setbuf>:
   16eb4:	424a      	negs	r2, r1
   16eb6:	414a      	adcs	r2, r1
   16eb8:	2380      	movs	r3, #128	; 0x80
   16eba:	b510      	push	{r4, lr}
   16ebc:	0052      	lsls	r2, r2, #1
   16ebe:	00db      	lsls	r3, r3, #3
   16ec0:	f000 f802 	bl	16ec8 <setvbuf>
   16ec4:	bd10      	pop	{r4, pc}
   16ec6:	Address 0x00016ec6 is out of bounds.


00016ec8 <setvbuf>:
   16ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eca:	001d      	movs	r5, r3
   16ecc:	4b4f      	ldr	r3, [pc, #316]	; (1700c <setvbuf+0x144>)
   16ece:	b085      	sub	sp, #20
   16ed0:	681e      	ldr	r6, [r3, #0]
   16ed2:	0004      	movs	r4, r0
   16ed4:	000f      	movs	r7, r1
   16ed6:	9200      	str	r2, [sp, #0]
   16ed8:	2e00      	cmp	r6, #0
   16eda:	d005      	beq.n	16ee8 <setvbuf+0x20>
   16edc:	69b3      	ldr	r3, [r6, #24]
   16ede:	2b00      	cmp	r3, #0
   16ee0:	d102      	bne.n	16ee8 <setvbuf+0x20>
   16ee2:	0030      	movs	r0, r6
   16ee4:	f000 fa68 	bl	173b8 <__sinit>
   16ee8:	4b49      	ldr	r3, [pc, #292]	; (17010 <setvbuf+0x148>)
   16eea:	429c      	cmp	r4, r3
   16eec:	d150      	bne.n	16f90 <setvbuf+0xc8>
   16eee:	6874      	ldr	r4, [r6, #4]
   16ef0:	9b00      	ldr	r3, [sp, #0]
   16ef2:	2b02      	cmp	r3, #2
   16ef4:	d005      	beq.n	16f02 <setvbuf+0x3a>
   16ef6:	2b01      	cmp	r3, #1
   16ef8:	d900      	bls.n	16efc <setvbuf+0x34>
   16efa:	e084      	b.n	17006 <setvbuf+0x13e>
   16efc:	2d00      	cmp	r5, #0
   16efe:	da00      	bge.n	16f02 <setvbuf+0x3a>
   16f00:	e081      	b.n	17006 <setvbuf+0x13e>
   16f02:	0021      	movs	r1, r4
   16f04:	0030      	movs	r0, r6
   16f06:	f000 f9e9 	bl	172dc <_fflush_r>
   16f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16f0c:	2900      	cmp	r1, #0
   16f0e:	d008      	beq.n	16f22 <setvbuf+0x5a>
   16f10:	0023      	movs	r3, r4
   16f12:	3344      	adds	r3, #68	; 0x44
   16f14:	4299      	cmp	r1, r3
   16f16:	d002      	beq.n	16f1e <setvbuf+0x56>
   16f18:	0030      	movs	r0, r6
   16f1a:	f000 fb65 	bl	175e8 <_free_r>
   16f1e:	2300      	movs	r3, #0
   16f20:	6363      	str	r3, [r4, #52]	; 0x34
   16f22:	2300      	movs	r3, #0
   16f24:	61a3      	str	r3, [r4, #24]
   16f26:	6063      	str	r3, [r4, #4]
   16f28:	89a3      	ldrh	r3, [r4, #12]
   16f2a:	061b      	lsls	r3, r3, #24
   16f2c:	d503      	bpl.n	16f36 <setvbuf+0x6e>
   16f2e:	6921      	ldr	r1, [r4, #16]
   16f30:	0030      	movs	r0, r6
   16f32:	f000 fb59 	bl	175e8 <_free_r>
   16f36:	89a3      	ldrh	r3, [r4, #12]
   16f38:	4a36      	ldr	r2, [pc, #216]	; (17014 <setvbuf+0x14c>)
   16f3a:	4013      	ands	r3, r2
   16f3c:	81a3      	strh	r3, [r4, #12]
   16f3e:	9b00      	ldr	r3, [sp, #0]
   16f40:	2b02      	cmp	r3, #2
   16f42:	d05a      	beq.n	16ffa <setvbuf+0x132>
   16f44:	ab03      	add	r3, sp, #12
   16f46:	aa02      	add	r2, sp, #8
   16f48:	0021      	movs	r1, r4
   16f4a:	0030      	movs	r0, r6
   16f4c:	f000 faca 	bl	174e4 <__swhatbuf_r>
   16f50:	89a3      	ldrh	r3, [r4, #12]
   16f52:	4318      	orrs	r0, r3
   16f54:	81a0      	strh	r0, [r4, #12]
   16f56:	2d00      	cmp	r5, #0
   16f58:	d124      	bne.n	16fa4 <setvbuf+0xdc>
   16f5a:	9d02      	ldr	r5, [sp, #8]
   16f5c:	0028      	movs	r0, r5
   16f5e:	f000 fb2d 	bl	175bc <malloc>
   16f62:	9501      	str	r5, [sp, #4]
   16f64:	1e07      	subs	r7, r0, #0
   16f66:	d142      	bne.n	16fee <setvbuf+0x126>
   16f68:	9b02      	ldr	r3, [sp, #8]
   16f6a:	9301      	str	r3, [sp, #4]
   16f6c:	42ab      	cmp	r3, r5
   16f6e:	d139      	bne.n	16fe4 <setvbuf+0x11c>
   16f70:	2001      	movs	r0, #1
   16f72:	4240      	negs	r0, r0
   16f74:	2302      	movs	r3, #2
   16f76:	89a2      	ldrh	r2, [r4, #12]
   16f78:	4313      	orrs	r3, r2
   16f7a:	81a3      	strh	r3, [r4, #12]
   16f7c:	2300      	movs	r3, #0
   16f7e:	60a3      	str	r3, [r4, #8]
   16f80:	0023      	movs	r3, r4
   16f82:	3347      	adds	r3, #71	; 0x47
   16f84:	6023      	str	r3, [r4, #0]
   16f86:	6123      	str	r3, [r4, #16]
   16f88:	2301      	movs	r3, #1
   16f8a:	6163      	str	r3, [r4, #20]
   16f8c:	b005      	add	sp, #20
   16f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f90:	4b21      	ldr	r3, [pc, #132]	; (17018 <setvbuf+0x150>)
   16f92:	429c      	cmp	r4, r3
   16f94:	d101      	bne.n	16f9a <setvbuf+0xd2>
   16f96:	68b4      	ldr	r4, [r6, #8]
   16f98:	e7aa      	b.n	16ef0 <setvbuf+0x28>
   16f9a:	4b20      	ldr	r3, [pc, #128]	; (1701c <setvbuf+0x154>)
   16f9c:	429c      	cmp	r4, r3
   16f9e:	d1a7      	bne.n	16ef0 <setvbuf+0x28>
   16fa0:	68f4      	ldr	r4, [r6, #12]
   16fa2:	e7a5      	b.n	16ef0 <setvbuf+0x28>
   16fa4:	2f00      	cmp	r7, #0
   16fa6:	d0d9      	beq.n	16f5c <setvbuf+0x94>
   16fa8:	69b3      	ldr	r3, [r6, #24]
   16faa:	2b00      	cmp	r3, #0
   16fac:	d102      	bne.n	16fb4 <setvbuf+0xec>
   16fae:	0030      	movs	r0, r6
   16fb0:	f000 fa02 	bl	173b8 <__sinit>
   16fb4:	9b00      	ldr	r3, [sp, #0]
   16fb6:	2b01      	cmp	r3, #1
   16fb8:	d103      	bne.n	16fc2 <setvbuf+0xfa>
   16fba:	89a3      	ldrh	r3, [r4, #12]
   16fbc:	9a00      	ldr	r2, [sp, #0]
   16fbe:	431a      	orrs	r2, r3
   16fc0:	81a2      	strh	r2, [r4, #12]
   16fc2:	2008      	movs	r0, #8
   16fc4:	89a3      	ldrh	r3, [r4, #12]
   16fc6:	6027      	str	r7, [r4, #0]
   16fc8:	6127      	str	r7, [r4, #16]
   16fca:	6165      	str	r5, [r4, #20]
   16fcc:	4018      	ands	r0, r3
   16fce:	d018      	beq.n	17002 <setvbuf+0x13a>
   16fd0:	2001      	movs	r0, #1
   16fd2:	4018      	ands	r0, r3
   16fd4:	2300      	movs	r3, #0
   16fd6:	4298      	cmp	r0, r3
   16fd8:	d011      	beq.n	16ffe <setvbuf+0x136>
   16fda:	426d      	negs	r5, r5
   16fdc:	60a3      	str	r3, [r4, #8]
   16fde:	61a5      	str	r5, [r4, #24]
   16fe0:	0018      	movs	r0, r3
   16fe2:	e7d3      	b.n	16f8c <setvbuf+0xc4>
   16fe4:	9801      	ldr	r0, [sp, #4]
   16fe6:	f000 fae9 	bl	175bc <malloc>
   16fea:	1e07      	subs	r7, r0, #0
   16fec:	d0c0      	beq.n	16f70 <setvbuf+0xa8>
   16fee:	2380      	movs	r3, #128	; 0x80
   16ff0:	89a2      	ldrh	r2, [r4, #12]
   16ff2:	9d01      	ldr	r5, [sp, #4]
   16ff4:	4313      	orrs	r3, r2
   16ff6:	81a3      	strh	r3, [r4, #12]
   16ff8:	e7d6      	b.n	16fa8 <setvbuf+0xe0>
   16ffa:	2000      	movs	r0, #0
   16ffc:	e7ba      	b.n	16f74 <setvbuf+0xac>
   16ffe:	60a5      	str	r5, [r4, #8]
   17000:	e7c4      	b.n	16f8c <setvbuf+0xc4>
   17002:	60a0      	str	r0, [r4, #8]
   17004:	e7c2      	b.n	16f8c <setvbuf+0xc4>
   17006:	2001      	movs	r0, #1
   17008:	4240      	negs	r0, r0
   1700a:	e7bf      	b.n	16f8c <setvbuf+0xc4>
   1700c:	20000028 	.word	0x20000028
   17010:	00018e08 	.word	0x00018e08
   17014:	fffff35c 	.word	0xfffff35c
   17018:	00018e28 	.word	0x00018e28
   1701c:	00018de8 	.word	0x00018de8

00017020 <__swbuf_r>:
   17020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17022:	0005      	movs	r5, r0
   17024:	000e      	movs	r6, r1
   17026:	0014      	movs	r4, r2
   17028:	2800      	cmp	r0, #0
   1702a:	d004      	beq.n	17036 <__swbuf_r+0x16>
   1702c:	6983      	ldr	r3, [r0, #24]
   1702e:	2b00      	cmp	r3, #0
   17030:	d101      	bne.n	17036 <__swbuf_r+0x16>
   17032:	f000 f9c1 	bl	173b8 <__sinit>
   17036:	4b22      	ldr	r3, [pc, #136]	; (170c0 <__swbuf_r+0xa0>)
   17038:	429c      	cmp	r4, r3
   1703a:	d12d      	bne.n	17098 <__swbuf_r+0x78>
   1703c:	686c      	ldr	r4, [r5, #4]
   1703e:	69a3      	ldr	r3, [r4, #24]
   17040:	60a3      	str	r3, [r4, #8]
   17042:	89a3      	ldrh	r3, [r4, #12]
   17044:	071b      	lsls	r3, r3, #28
   17046:	d531      	bpl.n	170ac <__swbuf_r+0x8c>
   17048:	6923      	ldr	r3, [r4, #16]
   1704a:	2b00      	cmp	r3, #0
   1704c:	d02e      	beq.n	170ac <__swbuf_r+0x8c>
   1704e:	6823      	ldr	r3, [r4, #0]
   17050:	6922      	ldr	r2, [r4, #16]
   17052:	b2f7      	uxtb	r7, r6
   17054:	1a98      	subs	r0, r3, r2
   17056:	6963      	ldr	r3, [r4, #20]
   17058:	b2f6      	uxtb	r6, r6
   1705a:	4298      	cmp	r0, r3
   1705c:	db05      	blt.n	1706a <__swbuf_r+0x4a>
   1705e:	0021      	movs	r1, r4
   17060:	0028      	movs	r0, r5
   17062:	f000 f93b 	bl	172dc <_fflush_r>
   17066:	2800      	cmp	r0, #0
   17068:	d126      	bne.n	170b8 <__swbuf_r+0x98>
   1706a:	68a3      	ldr	r3, [r4, #8]
   1706c:	3001      	adds	r0, #1
   1706e:	3b01      	subs	r3, #1
   17070:	60a3      	str	r3, [r4, #8]
   17072:	6823      	ldr	r3, [r4, #0]
   17074:	1c5a      	adds	r2, r3, #1
   17076:	6022      	str	r2, [r4, #0]
   17078:	701f      	strb	r7, [r3, #0]
   1707a:	6963      	ldr	r3, [r4, #20]
   1707c:	4298      	cmp	r0, r3
   1707e:	d004      	beq.n	1708a <__swbuf_r+0x6a>
   17080:	89a3      	ldrh	r3, [r4, #12]
   17082:	07db      	lsls	r3, r3, #31
   17084:	d51a      	bpl.n	170bc <__swbuf_r+0x9c>
   17086:	2e0a      	cmp	r6, #10
   17088:	d118      	bne.n	170bc <__swbuf_r+0x9c>
   1708a:	0021      	movs	r1, r4
   1708c:	0028      	movs	r0, r5
   1708e:	f000 f925 	bl	172dc <_fflush_r>
   17092:	2800      	cmp	r0, #0
   17094:	d012      	beq.n	170bc <__swbuf_r+0x9c>
   17096:	e00f      	b.n	170b8 <__swbuf_r+0x98>
   17098:	4b0a      	ldr	r3, [pc, #40]	; (170c4 <__swbuf_r+0xa4>)
   1709a:	429c      	cmp	r4, r3
   1709c:	d101      	bne.n	170a2 <__swbuf_r+0x82>
   1709e:	68ac      	ldr	r4, [r5, #8]
   170a0:	e7cd      	b.n	1703e <__swbuf_r+0x1e>
   170a2:	4b09      	ldr	r3, [pc, #36]	; (170c8 <__swbuf_r+0xa8>)
   170a4:	429c      	cmp	r4, r3
   170a6:	d1ca      	bne.n	1703e <__swbuf_r+0x1e>
   170a8:	68ec      	ldr	r4, [r5, #12]
   170aa:	e7c8      	b.n	1703e <__swbuf_r+0x1e>
   170ac:	0021      	movs	r1, r4
   170ae:	0028      	movs	r0, r5
   170b0:	f000 f80c 	bl	170cc <__swsetup_r>
   170b4:	2800      	cmp	r0, #0
   170b6:	d0ca      	beq.n	1704e <__swbuf_r+0x2e>
   170b8:	2601      	movs	r6, #1
   170ba:	4276      	negs	r6, r6
   170bc:	0030      	movs	r0, r6
   170be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170c0:	00018e08 	.word	0x00018e08
   170c4:	00018e28 	.word	0x00018e28
   170c8:	00018de8 	.word	0x00018de8

000170cc <__swsetup_r>:
   170cc:	4b36      	ldr	r3, [pc, #216]	; (171a8 <__swsetup_r+0xdc>)
   170ce:	b570      	push	{r4, r5, r6, lr}
   170d0:	681d      	ldr	r5, [r3, #0]
   170d2:	0006      	movs	r6, r0
   170d4:	000c      	movs	r4, r1
   170d6:	2d00      	cmp	r5, #0
   170d8:	d005      	beq.n	170e6 <__swsetup_r+0x1a>
   170da:	69ab      	ldr	r3, [r5, #24]
   170dc:	2b00      	cmp	r3, #0
   170de:	d102      	bne.n	170e6 <__swsetup_r+0x1a>
   170e0:	0028      	movs	r0, r5
   170e2:	f000 f969 	bl	173b8 <__sinit>
   170e6:	4b31      	ldr	r3, [pc, #196]	; (171ac <__swsetup_r+0xe0>)
   170e8:	429c      	cmp	r4, r3
   170ea:	d10f      	bne.n	1710c <__swsetup_r+0x40>
   170ec:	686c      	ldr	r4, [r5, #4]
   170ee:	230c      	movs	r3, #12
   170f0:	5ee2      	ldrsh	r2, [r4, r3]
   170f2:	b293      	uxth	r3, r2
   170f4:	0719      	lsls	r1, r3, #28
   170f6:	d42d      	bmi.n	17154 <__swsetup_r+0x88>
   170f8:	06d9      	lsls	r1, r3, #27
   170fa:	d411      	bmi.n	17120 <__swsetup_r+0x54>
   170fc:	2309      	movs	r3, #9
   170fe:	2001      	movs	r0, #1
   17100:	6033      	str	r3, [r6, #0]
   17102:	3337      	adds	r3, #55	; 0x37
   17104:	4313      	orrs	r3, r2
   17106:	81a3      	strh	r3, [r4, #12]
   17108:	4240      	negs	r0, r0
   1710a:	bd70      	pop	{r4, r5, r6, pc}
   1710c:	4b28      	ldr	r3, [pc, #160]	; (171b0 <__swsetup_r+0xe4>)
   1710e:	429c      	cmp	r4, r3
   17110:	d101      	bne.n	17116 <__swsetup_r+0x4a>
   17112:	68ac      	ldr	r4, [r5, #8]
   17114:	e7eb      	b.n	170ee <__swsetup_r+0x22>
   17116:	4b27      	ldr	r3, [pc, #156]	; (171b4 <__swsetup_r+0xe8>)
   17118:	429c      	cmp	r4, r3
   1711a:	d1e8      	bne.n	170ee <__swsetup_r+0x22>
   1711c:	68ec      	ldr	r4, [r5, #12]
   1711e:	e7e6      	b.n	170ee <__swsetup_r+0x22>
   17120:	075b      	lsls	r3, r3, #29
   17122:	d513      	bpl.n	1714c <__swsetup_r+0x80>
   17124:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17126:	2900      	cmp	r1, #0
   17128:	d008      	beq.n	1713c <__swsetup_r+0x70>
   1712a:	0023      	movs	r3, r4
   1712c:	3344      	adds	r3, #68	; 0x44
   1712e:	4299      	cmp	r1, r3
   17130:	d002      	beq.n	17138 <__swsetup_r+0x6c>
   17132:	0030      	movs	r0, r6
   17134:	f000 fa58 	bl	175e8 <_free_r>
   17138:	2300      	movs	r3, #0
   1713a:	6363      	str	r3, [r4, #52]	; 0x34
   1713c:	2224      	movs	r2, #36	; 0x24
   1713e:	89a3      	ldrh	r3, [r4, #12]
   17140:	4393      	bics	r3, r2
   17142:	81a3      	strh	r3, [r4, #12]
   17144:	2300      	movs	r3, #0
   17146:	6063      	str	r3, [r4, #4]
   17148:	6923      	ldr	r3, [r4, #16]
   1714a:	6023      	str	r3, [r4, #0]
   1714c:	2308      	movs	r3, #8
   1714e:	89a2      	ldrh	r2, [r4, #12]
   17150:	4313      	orrs	r3, r2
   17152:	81a3      	strh	r3, [r4, #12]
   17154:	6923      	ldr	r3, [r4, #16]
   17156:	2b00      	cmp	r3, #0
   17158:	d10b      	bne.n	17172 <__swsetup_r+0xa6>
   1715a:	21a0      	movs	r1, #160	; 0xa0
   1715c:	2280      	movs	r2, #128	; 0x80
   1715e:	89a3      	ldrh	r3, [r4, #12]
   17160:	0089      	lsls	r1, r1, #2
   17162:	0092      	lsls	r2, r2, #2
   17164:	400b      	ands	r3, r1
   17166:	4293      	cmp	r3, r2
   17168:	d003      	beq.n	17172 <__swsetup_r+0xa6>
   1716a:	0021      	movs	r1, r4
   1716c:	0030      	movs	r0, r6
   1716e:	f000 f9e1 	bl	17534 <__smakebuf_r>
   17172:	2301      	movs	r3, #1
   17174:	89a2      	ldrh	r2, [r4, #12]
   17176:	4013      	ands	r3, r2
   17178:	d011      	beq.n	1719e <__swsetup_r+0xd2>
   1717a:	2300      	movs	r3, #0
   1717c:	60a3      	str	r3, [r4, #8]
   1717e:	6963      	ldr	r3, [r4, #20]
   17180:	425b      	negs	r3, r3
   17182:	61a3      	str	r3, [r4, #24]
   17184:	2000      	movs	r0, #0
   17186:	6923      	ldr	r3, [r4, #16]
   17188:	4283      	cmp	r3, r0
   1718a:	d1be      	bne.n	1710a <__swsetup_r+0x3e>
   1718c:	230c      	movs	r3, #12
   1718e:	5ee2      	ldrsh	r2, [r4, r3]
   17190:	0613      	lsls	r3, r2, #24
   17192:	d5ba      	bpl.n	1710a <__swsetup_r+0x3e>
   17194:	2340      	movs	r3, #64	; 0x40
   17196:	4313      	orrs	r3, r2
   17198:	81a3      	strh	r3, [r4, #12]
   1719a:	3801      	subs	r0, #1
   1719c:	e7b5      	b.n	1710a <__swsetup_r+0x3e>
   1719e:	0792      	lsls	r2, r2, #30
   171a0:	d400      	bmi.n	171a4 <__swsetup_r+0xd8>
   171a2:	6963      	ldr	r3, [r4, #20]
   171a4:	60a3      	str	r3, [r4, #8]
   171a6:	e7ed      	b.n	17184 <__swsetup_r+0xb8>
   171a8:	20000028 	.word	0x20000028
   171ac:	00018e08 	.word	0x00018e08
   171b0:	00018e28 	.word	0x00018e28
   171b4:	00018de8 	.word	0x00018de8

000171b8 <abort>:
   171b8:	b510      	push	{r4, lr}
   171ba:	2006      	movs	r0, #6
   171bc:	f000 fb2e 	bl	1781c <raise>
   171c0:	2001      	movs	r0, #1
   171c2:	f7f0 f815 	bl	71f0 <_exit>
   171c6:	Address 0x000171c6 is out of bounds.


000171c8 <__sflush_r>:
   171c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   171ca:	898a      	ldrh	r2, [r1, #12]
   171cc:	0005      	movs	r5, r0
   171ce:	000c      	movs	r4, r1
   171d0:	0713      	lsls	r3, r2, #28
   171d2:	d460      	bmi.n	17296 <__sflush_r+0xce>
   171d4:	684b      	ldr	r3, [r1, #4]
   171d6:	2b00      	cmp	r3, #0
   171d8:	dc04      	bgt.n	171e4 <__sflush_r+0x1c>
   171da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   171dc:	2b00      	cmp	r3, #0
   171de:	dc01      	bgt.n	171e4 <__sflush_r+0x1c>
   171e0:	2000      	movs	r0, #0
   171e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   171e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   171e6:	2f00      	cmp	r7, #0
   171e8:	d0fa      	beq.n	171e0 <__sflush_r+0x18>
   171ea:	2300      	movs	r3, #0
   171ec:	682e      	ldr	r6, [r5, #0]
   171ee:	602b      	str	r3, [r5, #0]
   171f0:	2380      	movs	r3, #128	; 0x80
   171f2:	015b      	lsls	r3, r3, #5
   171f4:	401a      	ands	r2, r3
   171f6:	d034      	beq.n	17262 <__sflush_r+0x9a>
   171f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   171fa:	89a3      	ldrh	r3, [r4, #12]
   171fc:	075b      	lsls	r3, r3, #29
   171fe:	d506      	bpl.n	1720e <__sflush_r+0x46>
   17200:	6863      	ldr	r3, [r4, #4]
   17202:	1ac0      	subs	r0, r0, r3
   17204:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17206:	2b00      	cmp	r3, #0
   17208:	d001      	beq.n	1720e <__sflush_r+0x46>
   1720a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1720c:	1ac0      	subs	r0, r0, r3
   1720e:	0002      	movs	r2, r0
   17210:	6a21      	ldr	r1, [r4, #32]
   17212:	2300      	movs	r3, #0
   17214:	0028      	movs	r0, r5
   17216:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17218:	47b8      	blx	r7
   1721a:	89a1      	ldrh	r1, [r4, #12]
   1721c:	1c43      	adds	r3, r0, #1
   1721e:	d106      	bne.n	1722e <__sflush_r+0x66>
   17220:	682b      	ldr	r3, [r5, #0]
   17222:	2b1d      	cmp	r3, #29
   17224:	d831      	bhi.n	1728a <__sflush_r+0xc2>
   17226:	4a2c      	ldr	r2, [pc, #176]	; (172d8 <__sflush_r+0x110>)
   17228:	40da      	lsrs	r2, r3
   1722a:	07d3      	lsls	r3, r2, #31
   1722c:	d52d      	bpl.n	1728a <__sflush_r+0xc2>
   1722e:	2300      	movs	r3, #0
   17230:	6063      	str	r3, [r4, #4]
   17232:	6923      	ldr	r3, [r4, #16]
   17234:	6023      	str	r3, [r4, #0]
   17236:	04cb      	lsls	r3, r1, #19
   17238:	d505      	bpl.n	17246 <__sflush_r+0x7e>
   1723a:	1c43      	adds	r3, r0, #1
   1723c:	d102      	bne.n	17244 <__sflush_r+0x7c>
   1723e:	682b      	ldr	r3, [r5, #0]
   17240:	2b00      	cmp	r3, #0
   17242:	d100      	bne.n	17246 <__sflush_r+0x7e>
   17244:	6560      	str	r0, [r4, #84]	; 0x54
   17246:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17248:	602e      	str	r6, [r5, #0]
   1724a:	2900      	cmp	r1, #0
   1724c:	d0c8      	beq.n	171e0 <__sflush_r+0x18>
   1724e:	0023      	movs	r3, r4
   17250:	3344      	adds	r3, #68	; 0x44
   17252:	4299      	cmp	r1, r3
   17254:	d002      	beq.n	1725c <__sflush_r+0x94>
   17256:	0028      	movs	r0, r5
   17258:	f000 f9c6 	bl	175e8 <_free_r>
   1725c:	2000      	movs	r0, #0
   1725e:	6360      	str	r0, [r4, #52]	; 0x34
   17260:	e7bf      	b.n	171e2 <__sflush_r+0x1a>
   17262:	2301      	movs	r3, #1
   17264:	6a21      	ldr	r1, [r4, #32]
   17266:	0028      	movs	r0, r5
   17268:	47b8      	blx	r7
   1726a:	1c43      	adds	r3, r0, #1
   1726c:	d1c5      	bne.n	171fa <__sflush_r+0x32>
   1726e:	682b      	ldr	r3, [r5, #0]
   17270:	2b00      	cmp	r3, #0
   17272:	d0c2      	beq.n	171fa <__sflush_r+0x32>
   17274:	2b1d      	cmp	r3, #29
   17276:	d001      	beq.n	1727c <__sflush_r+0xb4>
   17278:	2b16      	cmp	r3, #22
   1727a:	d101      	bne.n	17280 <__sflush_r+0xb8>
   1727c:	602e      	str	r6, [r5, #0]
   1727e:	e7af      	b.n	171e0 <__sflush_r+0x18>
   17280:	2340      	movs	r3, #64	; 0x40
   17282:	89a2      	ldrh	r2, [r4, #12]
   17284:	4313      	orrs	r3, r2
   17286:	81a3      	strh	r3, [r4, #12]
   17288:	e7ab      	b.n	171e2 <__sflush_r+0x1a>
   1728a:	2340      	movs	r3, #64	; 0x40
   1728c:	430b      	orrs	r3, r1
   1728e:	2001      	movs	r0, #1
   17290:	81a3      	strh	r3, [r4, #12]
   17292:	4240      	negs	r0, r0
   17294:	e7a5      	b.n	171e2 <__sflush_r+0x1a>
   17296:	690f      	ldr	r7, [r1, #16]
   17298:	2f00      	cmp	r7, #0
   1729a:	d0a1      	beq.n	171e0 <__sflush_r+0x18>
   1729c:	680b      	ldr	r3, [r1, #0]
   1729e:	600f      	str	r7, [r1, #0]
   172a0:	1bdb      	subs	r3, r3, r7
   172a2:	9301      	str	r3, [sp, #4]
   172a4:	2300      	movs	r3, #0
   172a6:	0792      	lsls	r2, r2, #30
   172a8:	d100      	bne.n	172ac <__sflush_r+0xe4>
   172aa:	694b      	ldr	r3, [r1, #20]
   172ac:	60a3      	str	r3, [r4, #8]
   172ae:	9b01      	ldr	r3, [sp, #4]
   172b0:	2b00      	cmp	r3, #0
   172b2:	dc00      	bgt.n	172b6 <__sflush_r+0xee>
   172b4:	e794      	b.n	171e0 <__sflush_r+0x18>
   172b6:	9b01      	ldr	r3, [sp, #4]
   172b8:	003a      	movs	r2, r7
   172ba:	6a21      	ldr	r1, [r4, #32]
   172bc:	0028      	movs	r0, r5
   172be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   172c0:	47b0      	blx	r6
   172c2:	2800      	cmp	r0, #0
   172c4:	dc03      	bgt.n	172ce <__sflush_r+0x106>
   172c6:	2340      	movs	r3, #64	; 0x40
   172c8:	89a2      	ldrh	r2, [r4, #12]
   172ca:	4313      	orrs	r3, r2
   172cc:	e7df      	b.n	1728e <__sflush_r+0xc6>
   172ce:	9b01      	ldr	r3, [sp, #4]
   172d0:	183f      	adds	r7, r7, r0
   172d2:	1a1b      	subs	r3, r3, r0
   172d4:	9301      	str	r3, [sp, #4]
   172d6:	e7ea      	b.n	172ae <__sflush_r+0xe6>
   172d8:	20400001 	.word	0x20400001

000172dc <_fflush_r>:
   172dc:	690b      	ldr	r3, [r1, #16]
   172de:	b570      	push	{r4, r5, r6, lr}
   172e0:	0005      	movs	r5, r0
   172e2:	000c      	movs	r4, r1
   172e4:	2b00      	cmp	r3, #0
   172e6:	d101      	bne.n	172ec <_fflush_r+0x10>
   172e8:	2000      	movs	r0, #0
   172ea:	bd70      	pop	{r4, r5, r6, pc}
   172ec:	2800      	cmp	r0, #0
   172ee:	d004      	beq.n	172fa <_fflush_r+0x1e>
   172f0:	6983      	ldr	r3, [r0, #24]
   172f2:	2b00      	cmp	r3, #0
   172f4:	d101      	bne.n	172fa <_fflush_r+0x1e>
   172f6:	f000 f85f 	bl	173b8 <__sinit>
   172fa:	4b0b      	ldr	r3, [pc, #44]	; (17328 <_fflush_r+0x4c>)
   172fc:	429c      	cmp	r4, r3
   172fe:	d109      	bne.n	17314 <_fflush_r+0x38>
   17300:	686c      	ldr	r4, [r5, #4]
   17302:	220c      	movs	r2, #12
   17304:	5ea3      	ldrsh	r3, [r4, r2]
   17306:	2b00      	cmp	r3, #0
   17308:	d0ee      	beq.n	172e8 <_fflush_r+0xc>
   1730a:	0021      	movs	r1, r4
   1730c:	0028      	movs	r0, r5
   1730e:	f7ff ff5b 	bl	171c8 <__sflush_r>
   17312:	e7ea      	b.n	172ea <_fflush_r+0xe>
   17314:	4b05      	ldr	r3, [pc, #20]	; (1732c <_fflush_r+0x50>)
   17316:	429c      	cmp	r4, r3
   17318:	d101      	bne.n	1731e <_fflush_r+0x42>
   1731a:	68ac      	ldr	r4, [r5, #8]
   1731c:	e7f1      	b.n	17302 <_fflush_r+0x26>
   1731e:	4b04      	ldr	r3, [pc, #16]	; (17330 <_fflush_r+0x54>)
   17320:	429c      	cmp	r4, r3
   17322:	d1ee      	bne.n	17302 <_fflush_r+0x26>
   17324:	68ec      	ldr	r4, [r5, #12]
   17326:	e7ec      	b.n	17302 <_fflush_r+0x26>
   17328:	00018e08 	.word	0x00018e08
   1732c:	00018e28 	.word	0x00018e28
   17330:	00018de8 	.word	0x00018de8

00017334 <_cleanup_r>:
   17334:	b510      	push	{r4, lr}
   17336:	4902      	ldr	r1, [pc, #8]	; (17340 <_cleanup_r+0xc>)
   17338:	f000 f8b2 	bl	174a0 <_fwalk_reent>
   1733c:	bd10      	pop	{r4, pc}
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	000172dd 	.word	0x000172dd

00017344 <std.isra.0>:
   17344:	2300      	movs	r3, #0
   17346:	b510      	push	{r4, lr}
   17348:	0004      	movs	r4, r0
   1734a:	6003      	str	r3, [r0, #0]
   1734c:	6043      	str	r3, [r0, #4]
   1734e:	6083      	str	r3, [r0, #8]
   17350:	8181      	strh	r1, [r0, #12]
   17352:	6643      	str	r3, [r0, #100]	; 0x64
   17354:	81c2      	strh	r2, [r0, #14]
   17356:	6103      	str	r3, [r0, #16]
   17358:	6143      	str	r3, [r0, #20]
   1735a:	6183      	str	r3, [r0, #24]
   1735c:	0019      	movs	r1, r3
   1735e:	2208      	movs	r2, #8
   17360:	305c      	adds	r0, #92	; 0x5c
   17362:	f7ff f9d1 	bl	16708 <memset>
   17366:	4b05      	ldr	r3, [pc, #20]	; (1737c <std.isra.0+0x38>)
   17368:	6224      	str	r4, [r4, #32]
   1736a:	6263      	str	r3, [r4, #36]	; 0x24
   1736c:	4b04      	ldr	r3, [pc, #16]	; (17380 <std.isra.0+0x3c>)
   1736e:	62a3      	str	r3, [r4, #40]	; 0x28
   17370:	4b04      	ldr	r3, [pc, #16]	; (17384 <std.isra.0+0x40>)
   17372:	62e3      	str	r3, [r4, #44]	; 0x2c
   17374:	4b04      	ldr	r3, [pc, #16]	; (17388 <std.isra.0+0x44>)
   17376:	6323      	str	r3, [r4, #48]	; 0x30
   17378:	bd10      	pop	{r4, pc}
   1737a:	46c0      	nop			; (mov r8, r8)
   1737c:	0001785d 	.word	0x0001785d
   17380:	00017885 	.word	0x00017885
   17384:	000178bd 	.word	0x000178bd
   17388:	000178e9 	.word	0x000178e9

0001738c <__sfmoreglue>:
   1738c:	b570      	push	{r4, r5, r6, lr}
   1738e:	2568      	movs	r5, #104	; 0x68
   17390:	1e4a      	subs	r2, r1, #1
   17392:	4355      	muls	r5, r2
   17394:	000e      	movs	r6, r1
   17396:	0029      	movs	r1, r5
   17398:	3174      	adds	r1, #116	; 0x74
   1739a:	f000 f96f 	bl	1767c <_malloc_r>
   1739e:	1e04      	subs	r4, r0, #0
   173a0:	d008      	beq.n	173b4 <__sfmoreglue+0x28>
   173a2:	2100      	movs	r1, #0
   173a4:	002a      	movs	r2, r5
   173a6:	6001      	str	r1, [r0, #0]
   173a8:	6046      	str	r6, [r0, #4]
   173aa:	300c      	adds	r0, #12
   173ac:	60a0      	str	r0, [r4, #8]
   173ae:	3268      	adds	r2, #104	; 0x68
   173b0:	f7ff f9aa 	bl	16708 <memset>
   173b4:	0020      	movs	r0, r4
   173b6:	bd70      	pop	{r4, r5, r6, pc}

000173b8 <__sinit>:
   173b8:	6983      	ldr	r3, [r0, #24]
   173ba:	b513      	push	{r0, r1, r4, lr}
   173bc:	0004      	movs	r4, r0
   173be:	2b00      	cmp	r3, #0
   173c0:	d128      	bne.n	17414 <__sinit+0x5c>
   173c2:	6483      	str	r3, [r0, #72]	; 0x48
   173c4:	64c3      	str	r3, [r0, #76]	; 0x4c
   173c6:	6503      	str	r3, [r0, #80]	; 0x50
   173c8:	4b13      	ldr	r3, [pc, #76]	; (17418 <__sinit+0x60>)
   173ca:	4a14      	ldr	r2, [pc, #80]	; (1741c <__sinit+0x64>)
   173cc:	681b      	ldr	r3, [r3, #0]
   173ce:	6282      	str	r2, [r0, #40]	; 0x28
   173d0:	9301      	str	r3, [sp, #4]
   173d2:	4298      	cmp	r0, r3
   173d4:	d101      	bne.n	173da <__sinit+0x22>
   173d6:	2301      	movs	r3, #1
   173d8:	6183      	str	r3, [r0, #24]
   173da:	0020      	movs	r0, r4
   173dc:	f000 f820 	bl	17420 <__sfp>
   173e0:	6060      	str	r0, [r4, #4]
   173e2:	0020      	movs	r0, r4
   173e4:	f000 f81c 	bl	17420 <__sfp>
   173e8:	60a0      	str	r0, [r4, #8]
   173ea:	0020      	movs	r0, r4
   173ec:	f000 f818 	bl	17420 <__sfp>
   173f0:	2200      	movs	r2, #0
   173f2:	60e0      	str	r0, [r4, #12]
   173f4:	2104      	movs	r1, #4
   173f6:	6860      	ldr	r0, [r4, #4]
   173f8:	f7ff ffa4 	bl	17344 <std.isra.0>
   173fc:	2201      	movs	r2, #1
   173fe:	2109      	movs	r1, #9
   17400:	68a0      	ldr	r0, [r4, #8]
   17402:	f7ff ff9f 	bl	17344 <std.isra.0>
   17406:	2202      	movs	r2, #2
   17408:	2112      	movs	r1, #18
   1740a:	68e0      	ldr	r0, [r4, #12]
   1740c:	f7ff ff9a 	bl	17344 <std.isra.0>
   17410:	2301      	movs	r3, #1
   17412:	61a3      	str	r3, [r4, #24]
   17414:	bd13      	pop	{r0, r1, r4, pc}
   17416:	46c0      	nop			; (mov r8, r8)
   17418:	00018db0 	.word	0x00018db0
   1741c:	00017335 	.word	0x00017335

00017420 <__sfp>:
   17420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17422:	4b1e      	ldr	r3, [pc, #120]	; (1749c <__sfp+0x7c>)
   17424:	0007      	movs	r7, r0
   17426:	681e      	ldr	r6, [r3, #0]
   17428:	69b3      	ldr	r3, [r6, #24]
   1742a:	2b00      	cmp	r3, #0
   1742c:	d102      	bne.n	17434 <__sfp+0x14>
   1742e:	0030      	movs	r0, r6
   17430:	f7ff ffc2 	bl	173b8 <__sinit>
   17434:	3648      	adds	r6, #72	; 0x48
   17436:	68b4      	ldr	r4, [r6, #8]
   17438:	6873      	ldr	r3, [r6, #4]
   1743a:	3b01      	subs	r3, #1
   1743c:	d504      	bpl.n	17448 <__sfp+0x28>
   1743e:	6833      	ldr	r3, [r6, #0]
   17440:	2b00      	cmp	r3, #0
   17442:	d007      	beq.n	17454 <__sfp+0x34>
   17444:	6836      	ldr	r6, [r6, #0]
   17446:	e7f6      	b.n	17436 <__sfp+0x16>
   17448:	220c      	movs	r2, #12
   1744a:	5ea5      	ldrsh	r5, [r4, r2]
   1744c:	2d00      	cmp	r5, #0
   1744e:	d00d      	beq.n	1746c <__sfp+0x4c>
   17450:	3468      	adds	r4, #104	; 0x68
   17452:	e7f2      	b.n	1743a <__sfp+0x1a>
   17454:	2104      	movs	r1, #4
   17456:	0038      	movs	r0, r7
   17458:	f7ff ff98 	bl	1738c <__sfmoreglue>
   1745c:	6030      	str	r0, [r6, #0]
   1745e:	2800      	cmp	r0, #0
   17460:	d1f0      	bne.n	17444 <__sfp+0x24>
   17462:	230c      	movs	r3, #12
   17464:	0004      	movs	r4, r0
   17466:	603b      	str	r3, [r7, #0]
   17468:	0020      	movs	r0, r4
   1746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1746c:	2301      	movs	r3, #1
   1746e:	0020      	movs	r0, r4
   17470:	425b      	negs	r3, r3
   17472:	81e3      	strh	r3, [r4, #14]
   17474:	3302      	adds	r3, #2
   17476:	81a3      	strh	r3, [r4, #12]
   17478:	6665      	str	r5, [r4, #100]	; 0x64
   1747a:	6025      	str	r5, [r4, #0]
   1747c:	60a5      	str	r5, [r4, #8]
   1747e:	6065      	str	r5, [r4, #4]
   17480:	6125      	str	r5, [r4, #16]
   17482:	6165      	str	r5, [r4, #20]
   17484:	61a5      	str	r5, [r4, #24]
   17486:	2208      	movs	r2, #8
   17488:	0029      	movs	r1, r5
   1748a:	305c      	adds	r0, #92	; 0x5c
   1748c:	f7ff f93c 	bl	16708 <memset>
   17490:	6365      	str	r5, [r4, #52]	; 0x34
   17492:	63a5      	str	r5, [r4, #56]	; 0x38
   17494:	64a5      	str	r5, [r4, #72]	; 0x48
   17496:	64e5      	str	r5, [r4, #76]	; 0x4c
   17498:	e7e6      	b.n	17468 <__sfp+0x48>
   1749a:	46c0      	nop			; (mov r8, r8)
   1749c:	00018db0 	.word	0x00018db0

000174a0 <_fwalk_reent>:
   174a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   174a2:	0004      	movs	r4, r0
   174a4:	0007      	movs	r7, r0
   174a6:	2600      	movs	r6, #0
   174a8:	9101      	str	r1, [sp, #4]
   174aa:	3448      	adds	r4, #72	; 0x48
   174ac:	2c00      	cmp	r4, #0
   174ae:	d101      	bne.n	174b4 <_fwalk_reent+0x14>
   174b0:	0030      	movs	r0, r6
   174b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   174b4:	6863      	ldr	r3, [r4, #4]
   174b6:	68a5      	ldr	r5, [r4, #8]
   174b8:	9300      	str	r3, [sp, #0]
   174ba:	9b00      	ldr	r3, [sp, #0]
   174bc:	3b01      	subs	r3, #1
   174be:	9300      	str	r3, [sp, #0]
   174c0:	d501      	bpl.n	174c6 <_fwalk_reent+0x26>
   174c2:	6824      	ldr	r4, [r4, #0]
   174c4:	e7f2      	b.n	174ac <_fwalk_reent+0xc>
   174c6:	89ab      	ldrh	r3, [r5, #12]
   174c8:	2b01      	cmp	r3, #1
   174ca:	d908      	bls.n	174de <_fwalk_reent+0x3e>
   174cc:	220e      	movs	r2, #14
   174ce:	5eab      	ldrsh	r3, [r5, r2]
   174d0:	3301      	adds	r3, #1
   174d2:	d004      	beq.n	174de <_fwalk_reent+0x3e>
   174d4:	0029      	movs	r1, r5
   174d6:	0038      	movs	r0, r7
   174d8:	9b01      	ldr	r3, [sp, #4]
   174da:	4798      	blx	r3
   174dc:	4306      	orrs	r6, r0
   174de:	3568      	adds	r5, #104	; 0x68
   174e0:	e7eb      	b.n	174ba <_fwalk_reent+0x1a>
   174e2:	Address 0x000174e2 is out of bounds.


000174e4 <__swhatbuf_r>:
   174e4:	b570      	push	{r4, r5, r6, lr}
   174e6:	000e      	movs	r6, r1
   174e8:	001d      	movs	r5, r3
   174ea:	230e      	movs	r3, #14
   174ec:	5ec9      	ldrsh	r1, [r1, r3]
   174ee:	b090      	sub	sp, #64	; 0x40
   174f0:	0014      	movs	r4, r2
   174f2:	2900      	cmp	r1, #0
   174f4:	da07      	bge.n	17506 <__swhatbuf_r+0x22>
   174f6:	2300      	movs	r3, #0
   174f8:	602b      	str	r3, [r5, #0]
   174fa:	89b3      	ldrh	r3, [r6, #12]
   174fc:	061b      	lsls	r3, r3, #24
   174fe:	d411      	bmi.n	17524 <__swhatbuf_r+0x40>
   17500:	2380      	movs	r3, #128	; 0x80
   17502:	00db      	lsls	r3, r3, #3
   17504:	e00f      	b.n	17526 <__swhatbuf_r+0x42>
   17506:	aa01      	add	r2, sp, #4
   17508:	f000 fa1a 	bl	17940 <_fstat_r>
   1750c:	2800      	cmp	r0, #0
   1750e:	dbf2      	blt.n	174f6 <__swhatbuf_r+0x12>
   17510:	22f0      	movs	r2, #240	; 0xf0
   17512:	9b02      	ldr	r3, [sp, #8]
   17514:	0212      	lsls	r2, r2, #8
   17516:	4013      	ands	r3, r2
   17518:	4a05      	ldr	r2, [pc, #20]	; (17530 <__swhatbuf_r+0x4c>)
   1751a:	189b      	adds	r3, r3, r2
   1751c:	425a      	negs	r2, r3
   1751e:	4153      	adcs	r3, r2
   17520:	602b      	str	r3, [r5, #0]
   17522:	e7ed      	b.n	17500 <__swhatbuf_r+0x1c>
   17524:	2340      	movs	r3, #64	; 0x40
   17526:	2000      	movs	r0, #0
   17528:	6023      	str	r3, [r4, #0]
   1752a:	b010      	add	sp, #64	; 0x40
   1752c:	bd70      	pop	{r4, r5, r6, pc}
   1752e:	46c0      	nop			; (mov r8, r8)
   17530:	ffffe000 	.word	0xffffe000

00017534 <__smakebuf_r>:
   17534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17536:	2602      	movs	r6, #2
   17538:	898b      	ldrh	r3, [r1, #12]
   1753a:	0005      	movs	r5, r0
   1753c:	000c      	movs	r4, r1
   1753e:	4233      	tst	r3, r6
   17540:	d006      	beq.n	17550 <__smakebuf_r+0x1c>
   17542:	0023      	movs	r3, r4
   17544:	3347      	adds	r3, #71	; 0x47
   17546:	6023      	str	r3, [r4, #0]
   17548:	6123      	str	r3, [r4, #16]
   1754a:	2301      	movs	r3, #1
   1754c:	6163      	str	r3, [r4, #20]
   1754e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17550:	ab01      	add	r3, sp, #4
   17552:	466a      	mov	r2, sp
   17554:	f7ff ffc6 	bl	174e4 <__swhatbuf_r>
   17558:	9900      	ldr	r1, [sp, #0]
   1755a:	0007      	movs	r7, r0
   1755c:	0028      	movs	r0, r5
   1755e:	f000 f88d 	bl	1767c <_malloc_r>
   17562:	2800      	cmp	r0, #0
   17564:	d108      	bne.n	17578 <__smakebuf_r+0x44>
   17566:	220c      	movs	r2, #12
   17568:	5ea3      	ldrsh	r3, [r4, r2]
   1756a:	059a      	lsls	r2, r3, #22
   1756c:	d4ef      	bmi.n	1754e <__smakebuf_r+0x1a>
   1756e:	2203      	movs	r2, #3
   17570:	4393      	bics	r3, r2
   17572:	431e      	orrs	r6, r3
   17574:	81a6      	strh	r6, [r4, #12]
   17576:	e7e4      	b.n	17542 <__smakebuf_r+0xe>
   17578:	4b0f      	ldr	r3, [pc, #60]	; (175b8 <__smakebuf_r+0x84>)
   1757a:	62ab      	str	r3, [r5, #40]	; 0x28
   1757c:	2380      	movs	r3, #128	; 0x80
   1757e:	89a2      	ldrh	r2, [r4, #12]
   17580:	6020      	str	r0, [r4, #0]
   17582:	4313      	orrs	r3, r2
   17584:	81a3      	strh	r3, [r4, #12]
   17586:	9b00      	ldr	r3, [sp, #0]
   17588:	6120      	str	r0, [r4, #16]
   1758a:	6163      	str	r3, [r4, #20]
   1758c:	9b01      	ldr	r3, [sp, #4]
   1758e:	2b00      	cmp	r3, #0
   17590:	d00d      	beq.n	175ae <__smakebuf_r+0x7a>
   17592:	230e      	movs	r3, #14
   17594:	5ee1      	ldrsh	r1, [r4, r3]
   17596:	0028      	movs	r0, r5
   17598:	f000 f9e4 	bl	17964 <_isatty_r>
   1759c:	2800      	cmp	r0, #0
   1759e:	d006      	beq.n	175ae <__smakebuf_r+0x7a>
   175a0:	2203      	movs	r2, #3
   175a2:	89a3      	ldrh	r3, [r4, #12]
   175a4:	4393      	bics	r3, r2
   175a6:	001a      	movs	r2, r3
   175a8:	2301      	movs	r3, #1
   175aa:	4313      	orrs	r3, r2
   175ac:	81a3      	strh	r3, [r4, #12]
   175ae:	89a0      	ldrh	r0, [r4, #12]
   175b0:	4338      	orrs	r0, r7
   175b2:	81a0      	strh	r0, [r4, #12]
   175b4:	e7cb      	b.n	1754e <__smakebuf_r+0x1a>
   175b6:	46c0      	nop			; (mov r8, r8)
   175b8:	00017335 	.word	0x00017335

000175bc <malloc>:
   175bc:	b510      	push	{r4, lr}
   175be:	4b03      	ldr	r3, [pc, #12]	; (175cc <malloc+0x10>)
   175c0:	0001      	movs	r1, r0
   175c2:	6818      	ldr	r0, [r3, #0]
   175c4:	f000 f85a 	bl	1767c <_malloc_r>
   175c8:	bd10      	pop	{r4, pc}
   175ca:	46c0      	nop			; (mov r8, r8)
   175cc:	20000028 	.word	0x20000028

000175d0 <memchr>:
   175d0:	b2c9      	uxtb	r1, r1
   175d2:	1882      	adds	r2, r0, r2
   175d4:	4290      	cmp	r0, r2
   175d6:	d101      	bne.n	175dc <memchr+0xc>
   175d8:	2000      	movs	r0, #0
   175da:	4770      	bx	lr
   175dc:	7803      	ldrb	r3, [r0, #0]
   175de:	428b      	cmp	r3, r1
   175e0:	d0fb      	beq.n	175da <memchr+0xa>
   175e2:	3001      	adds	r0, #1
   175e4:	e7f6      	b.n	175d4 <memchr+0x4>
   175e6:	Address 0x000175e6 is out of bounds.


000175e8 <_free_r>:
   175e8:	b570      	push	{r4, r5, r6, lr}
   175ea:	0005      	movs	r5, r0
   175ec:	2900      	cmp	r1, #0
   175ee:	d010      	beq.n	17612 <_free_r+0x2a>
   175f0:	1f0c      	subs	r4, r1, #4
   175f2:	6823      	ldr	r3, [r4, #0]
   175f4:	2b00      	cmp	r3, #0
   175f6:	da00      	bge.n	175fa <_free_r+0x12>
   175f8:	18e4      	adds	r4, r4, r3
   175fa:	0028      	movs	r0, r5
   175fc:	f000 f9d8 	bl	179b0 <__malloc_lock>
   17600:	4a1d      	ldr	r2, [pc, #116]	; (17678 <_free_r+0x90>)
   17602:	6813      	ldr	r3, [r2, #0]
   17604:	2b00      	cmp	r3, #0
   17606:	d105      	bne.n	17614 <_free_r+0x2c>
   17608:	6063      	str	r3, [r4, #4]
   1760a:	6014      	str	r4, [r2, #0]
   1760c:	0028      	movs	r0, r5
   1760e:	f000 f9d0 	bl	179b2 <__malloc_unlock>
   17612:	bd70      	pop	{r4, r5, r6, pc}
   17614:	42a3      	cmp	r3, r4
   17616:	d909      	bls.n	1762c <_free_r+0x44>
   17618:	6821      	ldr	r1, [r4, #0]
   1761a:	1860      	adds	r0, r4, r1
   1761c:	4283      	cmp	r3, r0
   1761e:	d1f3      	bne.n	17608 <_free_r+0x20>
   17620:	6818      	ldr	r0, [r3, #0]
   17622:	685b      	ldr	r3, [r3, #4]
   17624:	1841      	adds	r1, r0, r1
   17626:	6021      	str	r1, [r4, #0]
   17628:	e7ee      	b.n	17608 <_free_r+0x20>
   1762a:	0013      	movs	r3, r2
   1762c:	685a      	ldr	r2, [r3, #4]
   1762e:	2a00      	cmp	r2, #0
   17630:	d001      	beq.n	17636 <_free_r+0x4e>
   17632:	42a2      	cmp	r2, r4
   17634:	d9f9      	bls.n	1762a <_free_r+0x42>
   17636:	6819      	ldr	r1, [r3, #0]
   17638:	1858      	adds	r0, r3, r1
   1763a:	42a0      	cmp	r0, r4
   1763c:	d10b      	bne.n	17656 <_free_r+0x6e>
   1763e:	6820      	ldr	r0, [r4, #0]
   17640:	1809      	adds	r1, r1, r0
   17642:	1858      	adds	r0, r3, r1
   17644:	6019      	str	r1, [r3, #0]
   17646:	4282      	cmp	r2, r0
   17648:	d1e0      	bne.n	1760c <_free_r+0x24>
   1764a:	6810      	ldr	r0, [r2, #0]
   1764c:	6852      	ldr	r2, [r2, #4]
   1764e:	1841      	adds	r1, r0, r1
   17650:	6019      	str	r1, [r3, #0]
   17652:	605a      	str	r2, [r3, #4]
   17654:	e7da      	b.n	1760c <_free_r+0x24>
   17656:	42a0      	cmp	r0, r4
   17658:	d902      	bls.n	17660 <_free_r+0x78>
   1765a:	230c      	movs	r3, #12
   1765c:	602b      	str	r3, [r5, #0]
   1765e:	e7d5      	b.n	1760c <_free_r+0x24>
   17660:	6821      	ldr	r1, [r4, #0]
   17662:	1860      	adds	r0, r4, r1
   17664:	4282      	cmp	r2, r0
   17666:	d103      	bne.n	17670 <_free_r+0x88>
   17668:	6810      	ldr	r0, [r2, #0]
   1766a:	6852      	ldr	r2, [r2, #4]
   1766c:	1841      	adds	r1, r0, r1
   1766e:	6021      	str	r1, [r4, #0]
   17670:	6062      	str	r2, [r4, #4]
   17672:	605c      	str	r4, [r3, #4]
   17674:	e7ca      	b.n	1760c <_free_r+0x24>
   17676:	46c0      	nop			; (mov r8, r8)
   17678:	20001edc 	.word	0x20001edc

0001767c <_malloc_r>:
   1767c:	2303      	movs	r3, #3
   1767e:	b570      	push	{r4, r5, r6, lr}
   17680:	1ccd      	adds	r5, r1, #3
   17682:	439d      	bics	r5, r3
   17684:	3508      	adds	r5, #8
   17686:	0006      	movs	r6, r0
   17688:	2d0c      	cmp	r5, #12
   1768a:	d21e      	bcs.n	176ca <_malloc_r+0x4e>
   1768c:	250c      	movs	r5, #12
   1768e:	42a9      	cmp	r1, r5
   17690:	d81d      	bhi.n	176ce <_malloc_r+0x52>
   17692:	0030      	movs	r0, r6
   17694:	f000 f98c 	bl	179b0 <__malloc_lock>
   17698:	4a25      	ldr	r2, [pc, #148]	; (17730 <_malloc_r+0xb4>)
   1769a:	6814      	ldr	r4, [r2, #0]
   1769c:	0021      	movs	r1, r4
   1769e:	2900      	cmp	r1, #0
   176a0:	d119      	bne.n	176d6 <_malloc_r+0x5a>
   176a2:	4c24      	ldr	r4, [pc, #144]	; (17734 <_malloc_r+0xb8>)
   176a4:	6823      	ldr	r3, [r4, #0]
   176a6:	2b00      	cmp	r3, #0
   176a8:	d103      	bne.n	176b2 <_malloc_r+0x36>
   176aa:	0030      	movs	r0, r6
   176ac:	f000 f87a 	bl	177a4 <_sbrk_r>
   176b0:	6020      	str	r0, [r4, #0]
   176b2:	0029      	movs	r1, r5
   176b4:	0030      	movs	r0, r6
   176b6:	f000 f875 	bl	177a4 <_sbrk_r>
   176ba:	1c43      	adds	r3, r0, #1
   176bc:	d12c      	bne.n	17718 <_malloc_r+0x9c>
   176be:	230c      	movs	r3, #12
   176c0:	0030      	movs	r0, r6
   176c2:	6033      	str	r3, [r6, #0]
   176c4:	f000 f975 	bl	179b2 <__malloc_unlock>
   176c8:	e003      	b.n	176d2 <_malloc_r+0x56>
   176ca:	2d00      	cmp	r5, #0
   176cc:	dadf      	bge.n	1768e <_malloc_r+0x12>
   176ce:	230c      	movs	r3, #12
   176d0:	6033      	str	r3, [r6, #0]
   176d2:	2000      	movs	r0, #0
   176d4:	bd70      	pop	{r4, r5, r6, pc}
   176d6:	680b      	ldr	r3, [r1, #0]
   176d8:	1b5b      	subs	r3, r3, r5
   176da:	d41a      	bmi.n	17712 <_malloc_r+0x96>
   176dc:	2b0b      	cmp	r3, #11
   176de:	d903      	bls.n	176e8 <_malloc_r+0x6c>
   176e0:	600b      	str	r3, [r1, #0]
   176e2:	18cc      	adds	r4, r1, r3
   176e4:	6025      	str	r5, [r4, #0]
   176e6:	e003      	b.n	176f0 <_malloc_r+0x74>
   176e8:	428c      	cmp	r4, r1
   176ea:	d10e      	bne.n	1770a <_malloc_r+0x8e>
   176ec:	6863      	ldr	r3, [r4, #4]
   176ee:	6013      	str	r3, [r2, #0]
   176f0:	0030      	movs	r0, r6
   176f2:	f000 f95e 	bl	179b2 <__malloc_unlock>
   176f6:	0020      	movs	r0, r4
   176f8:	2207      	movs	r2, #7
   176fa:	300b      	adds	r0, #11
   176fc:	1d23      	adds	r3, r4, #4
   176fe:	4390      	bics	r0, r2
   17700:	1ac3      	subs	r3, r0, r3
   17702:	d0e7      	beq.n	176d4 <_malloc_r+0x58>
   17704:	425a      	negs	r2, r3
   17706:	50e2      	str	r2, [r4, r3]
   17708:	e7e4      	b.n	176d4 <_malloc_r+0x58>
   1770a:	684b      	ldr	r3, [r1, #4]
   1770c:	6063      	str	r3, [r4, #4]
   1770e:	000c      	movs	r4, r1
   17710:	e7ee      	b.n	176f0 <_malloc_r+0x74>
   17712:	000c      	movs	r4, r1
   17714:	6849      	ldr	r1, [r1, #4]
   17716:	e7c2      	b.n	1769e <_malloc_r+0x22>
   17718:	2303      	movs	r3, #3
   1771a:	1cc4      	adds	r4, r0, #3
   1771c:	439c      	bics	r4, r3
   1771e:	42a0      	cmp	r0, r4
   17720:	d0e0      	beq.n	176e4 <_malloc_r+0x68>
   17722:	1a21      	subs	r1, r4, r0
   17724:	0030      	movs	r0, r6
   17726:	f000 f83d 	bl	177a4 <_sbrk_r>
   1772a:	1c43      	adds	r3, r0, #1
   1772c:	d1da      	bne.n	176e4 <_malloc_r+0x68>
   1772e:	e7c6      	b.n	176be <_malloc_r+0x42>
   17730:	20001edc 	.word	0x20001edc
   17734:	20001ee0 	.word	0x20001ee0

00017738 <_putc_r>:
   17738:	b570      	push	{r4, r5, r6, lr}
   1773a:	0006      	movs	r6, r0
   1773c:	000d      	movs	r5, r1
   1773e:	0014      	movs	r4, r2
   17740:	2800      	cmp	r0, #0
   17742:	d004      	beq.n	1774e <_putc_r+0x16>
   17744:	6983      	ldr	r3, [r0, #24]
   17746:	2b00      	cmp	r3, #0
   17748:	d101      	bne.n	1774e <_putc_r+0x16>
   1774a:	f7ff fe35 	bl	173b8 <__sinit>
   1774e:	4b12      	ldr	r3, [pc, #72]	; (17798 <_putc_r+0x60>)
   17750:	429c      	cmp	r4, r3
   17752:	d111      	bne.n	17778 <_putc_r+0x40>
   17754:	6874      	ldr	r4, [r6, #4]
   17756:	68a3      	ldr	r3, [r4, #8]
   17758:	3b01      	subs	r3, #1
   1775a:	60a3      	str	r3, [r4, #8]
   1775c:	2b00      	cmp	r3, #0
   1775e:	da05      	bge.n	1776c <_putc_r+0x34>
   17760:	69a2      	ldr	r2, [r4, #24]
   17762:	4293      	cmp	r3, r2
   17764:	db12      	blt.n	1778c <_putc_r+0x54>
   17766:	b2eb      	uxtb	r3, r5
   17768:	2b0a      	cmp	r3, #10
   1776a:	d00f      	beq.n	1778c <_putc_r+0x54>
   1776c:	6823      	ldr	r3, [r4, #0]
   1776e:	b2e8      	uxtb	r0, r5
   17770:	1c5a      	adds	r2, r3, #1
   17772:	6022      	str	r2, [r4, #0]
   17774:	701d      	strb	r5, [r3, #0]
   17776:	bd70      	pop	{r4, r5, r6, pc}
   17778:	4b08      	ldr	r3, [pc, #32]	; (1779c <_putc_r+0x64>)
   1777a:	429c      	cmp	r4, r3
   1777c:	d101      	bne.n	17782 <_putc_r+0x4a>
   1777e:	68b4      	ldr	r4, [r6, #8]
   17780:	e7e9      	b.n	17756 <_putc_r+0x1e>
   17782:	4b07      	ldr	r3, [pc, #28]	; (177a0 <_putc_r+0x68>)
   17784:	429c      	cmp	r4, r3
   17786:	d1e6      	bne.n	17756 <_putc_r+0x1e>
   17788:	68f4      	ldr	r4, [r6, #12]
   1778a:	e7e4      	b.n	17756 <_putc_r+0x1e>
   1778c:	0022      	movs	r2, r4
   1778e:	0029      	movs	r1, r5
   17790:	0030      	movs	r0, r6
   17792:	f7ff fc45 	bl	17020 <__swbuf_r>
   17796:	e7ee      	b.n	17776 <_putc_r+0x3e>
   17798:	00018e08 	.word	0x00018e08
   1779c:	00018e28 	.word	0x00018e28
   177a0:	00018de8 	.word	0x00018de8

000177a4 <_sbrk_r>:
   177a4:	2300      	movs	r3, #0
   177a6:	b570      	push	{r4, r5, r6, lr}
   177a8:	4c06      	ldr	r4, [pc, #24]	; (177c4 <_sbrk_r+0x20>)
   177aa:	0005      	movs	r5, r0
   177ac:	0008      	movs	r0, r1
   177ae:	6023      	str	r3, [r4, #0]
   177b0:	f7ef fd00 	bl	71b4 <_sbrk>
   177b4:	1c43      	adds	r3, r0, #1
   177b6:	d103      	bne.n	177c0 <_sbrk_r+0x1c>
   177b8:	6823      	ldr	r3, [r4, #0]
   177ba:	2b00      	cmp	r3, #0
   177bc:	d000      	beq.n	177c0 <_sbrk_r+0x1c>
   177be:	602b      	str	r3, [r5, #0]
   177c0:	bd70      	pop	{r4, r5, r6, pc}
   177c2:	46c0      	nop			; (mov r8, r8)
   177c4:	200034d8 	.word	0x200034d8

000177c8 <_raise_r>:
   177c8:	b570      	push	{r4, r5, r6, lr}
   177ca:	0004      	movs	r4, r0
   177cc:	000d      	movs	r5, r1
   177ce:	291f      	cmp	r1, #31
   177d0:	d904      	bls.n	177dc <_raise_r+0x14>
   177d2:	2316      	movs	r3, #22
   177d4:	6003      	str	r3, [r0, #0]
   177d6:	2001      	movs	r0, #1
   177d8:	4240      	negs	r0, r0
   177da:	bd70      	pop	{r4, r5, r6, pc}
   177dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   177de:	2b00      	cmp	r3, #0
   177e0:	d004      	beq.n	177ec <_raise_r+0x24>
   177e2:	008a      	lsls	r2, r1, #2
   177e4:	189b      	adds	r3, r3, r2
   177e6:	681a      	ldr	r2, [r3, #0]
   177e8:	2a00      	cmp	r2, #0
   177ea:	d108      	bne.n	177fe <_raise_r+0x36>
   177ec:	0020      	movs	r0, r4
   177ee:	f000 f831 	bl	17854 <_getpid_r>
   177f2:	002a      	movs	r2, r5
   177f4:	0001      	movs	r1, r0
   177f6:	0020      	movs	r0, r4
   177f8:	f000 f81a 	bl	17830 <_kill_r>
   177fc:	e7ed      	b.n	177da <_raise_r+0x12>
   177fe:	2000      	movs	r0, #0
   17800:	2a01      	cmp	r2, #1
   17802:	d0ea      	beq.n	177da <_raise_r+0x12>
   17804:	1c51      	adds	r1, r2, #1
   17806:	d103      	bne.n	17810 <_raise_r+0x48>
   17808:	2316      	movs	r3, #22
   1780a:	3001      	adds	r0, #1
   1780c:	6023      	str	r3, [r4, #0]
   1780e:	e7e4      	b.n	177da <_raise_r+0x12>
   17810:	2400      	movs	r4, #0
   17812:	0028      	movs	r0, r5
   17814:	601c      	str	r4, [r3, #0]
   17816:	4790      	blx	r2
   17818:	0020      	movs	r0, r4
   1781a:	e7de      	b.n	177da <_raise_r+0x12>

0001781c <raise>:
   1781c:	b510      	push	{r4, lr}
   1781e:	4b03      	ldr	r3, [pc, #12]	; (1782c <raise+0x10>)
   17820:	0001      	movs	r1, r0
   17822:	6818      	ldr	r0, [r3, #0]
   17824:	f7ff ffd0 	bl	177c8 <_raise_r>
   17828:	bd10      	pop	{r4, pc}
   1782a:	46c0      	nop			; (mov r8, r8)
   1782c:	20000028 	.word	0x20000028

00017830 <_kill_r>:
   17830:	2300      	movs	r3, #0
   17832:	b570      	push	{r4, r5, r6, lr}
   17834:	4c06      	ldr	r4, [pc, #24]	; (17850 <_kill_r+0x20>)
   17836:	0005      	movs	r5, r0
   17838:	0008      	movs	r0, r1
   1783a:	0011      	movs	r1, r2
   1783c:	6023      	str	r3, [r4, #0]
   1783e:	f7ef fcd9 	bl	71f4 <_kill>
   17842:	1c43      	adds	r3, r0, #1
   17844:	d103      	bne.n	1784e <_kill_r+0x1e>
   17846:	6823      	ldr	r3, [r4, #0]
   17848:	2b00      	cmp	r3, #0
   1784a:	d000      	beq.n	1784e <_kill_r+0x1e>
   1784c:	602b      	str	r3, [r5, #0]
   1784e:	bd70      	pop	{r4, r5, r6, pc}
   17850:	200034d8 	.word	0x200034d8

00017854 <_getpid_r>:
   17854:	b510      	push	{r4, lr}
   17856:	f7ef fcce 	bl	71f6 <_getpid>
   1785a:	bd10      	pop	{r4, pc}

0001785c <__sread>:
   1785c:	b570      	push	{r4, r5, r6, lr}
   1785e:	000c      	movs	r4, r1
   17860:	250e      	movs	r5, #14
   17862:	5f49      	ldrsh	r1, [r1, r5]
   17864:	f000 f8a6 	bl	179b4 <_read_r>
   17868:	2800      	cmp	r0, #0
   1786a:	db03      	blt.n	17874 <__sread+0x18>
   1786c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1786e:	181b      	adds	r3, r3, r0
   17870:	6563      	str	r3, [r4, #84]	; 0x54
   17872:	bd70      	pop	{r4, r5, r6, pc}
   17874:	89a3      	ldrh	r3, [r4, #12]
   17876:	4a02      	ldr	r2, [pc, #8]	; (17880 <__sread+0x24>)
   17878:	4013      	ands	r3, r2
   1787a:	81a3      	strh	r3, [r4, #12]
   1787c:	e7f9      	b.n	17872 <__sread+0x16>
   1787e:	46c0      	nop			; (mov r8, r8)
   17880:	ffffefff 	.word	0xffffefff

00017884 <__swrite>:
   17884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17886:	001f      	movs	r7, r3
   17888:	898b      	ldrh	r3, [r1, #12]
   1788a:	0005      	movs	r5, r0
   1788c:	000c      	movs	r4, r1
   1788e:	0016      	movs	r6, r2
   17890:	05db      	lsls	r3, r3, #23
   17892:	d505      	bpl.n	178a0 <__swrite+0x1c>
   17894:	230e      	movs	r3, #14
   17896:	5ec9      	ldrsh	r1, [r1, r3]
   17898:	2200      	movs	r2, #0
   1789a:	2302      	movs	r3, #2
   1789c:	f000 f874 	bl	17988 <_lseek_r>
   178a0:	89a3      	ldrh	r3, [r4, #12]
   178a2:	4a05      	ldr	r2, [pc, #20]	; (178b8 <__swrite+0x34>)
   178a4:	0028      	movs	r0, r5
   178a6:	4013      	ands	r3, r2
   178a8:	81a3      	strh	r3, [r4, #12]
   178aa:	0032      	movs	r2, r6
   178ac:	230e      	movs	r3, #14
   178ae:	5ee1      	ldrsh	r1, [r4, r3]
   178b0:	003b      	movs	r3, r7
   178b2:	f000 f81f 	bl	178f4 <_write_r>
   178b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178b8:	ffffefff 	.word	0xffffefff

000178bc <__sseek>:
   178bc:	b570      	push	{r4, r5, r6, lr}
   178be:	000c      	movs	r4, r1
   178c0:	250e      	movs	r5, #14
   178c2:	5f49      	ldrsh	r1, [r1, r5]
   178c4:	f000 f860 	bl	17988 <_lseek_r>
   178c8:	89a3      	ldrh	r3, [r4, #12]
   178ca:	1c42      	adds	r2, r0, #1
   178cc:	d103      	bne.n	178d6 <__sseek+0x1a>
   178ce:	4a05      	ldr	r2, [pc, #20]	; (178e4 <__sseek+0x28>)
   178d0:	4013      	ands	r3, r2
   178d2:	81a3      	strh	r3, [r4, #12]
   178d4:	bd70      	pop	{r4, r5, r6, pc}
   178d6:	2280      	movs	r2, #128	; 0x80
   178d8:	0152      	lsls	r2, r2, #5
   178da:	4313      	orrs	r3, r2
   178dc:	81a3      	strh	r3, [r4, #12]
   178de:	6560      	str	r0, [r4, #84]	; 0x54
   178e0:	e7f8      	b.n	178d4 <__sseek+0x18>
   178e2:	46c0      	nop			; (mov r8, r8)
   178e4:	ffffefff 	.word	0xffffefff

000178e8 <__sclose>:
   178e8:	b510      	push	{r4, lr}
   178ea:	230e      	movs	r3, #14
   178ec:	5ec9      	ldrsh	r1, [r1, r3]
   178ee:	f000 f815 	bl	1791c <_close_r>
   178f2:	bd10      	pop	{r4, pc}

000178f4 <_write_r>:
   178f4:	b570      	push	{r4, r5, r6, lr}
   178f6:	0005      	movs	r5, r0
   178f8:	0008      	movs	r0, r1
   178fa:	0011      	movs	r1, r2
   178fc:	2200      	movs	r2, #0
   178fe:	4c06      	ldr	r4, [pc, #24]	; (17918 <_write_r+0x24>)
   17900:	6022      	str	r2, [r4, #0]
   17902:	001a      	movs	r2, r3
   17904:	f7ef fc2e 	bl	7164 <_write>
   17908:	1c43      	adds	r3, r0, #1
   1790a:	d103      	bne.n	17914 <_write_r+0x20>
   1790c:	6823      	ldr	r3, [r4, #0]
   1790e:	2b00      	cmp	r3, #0
   17910:	d000      	beq.n	17914 <_write_r+0x20>
   17912:	602b      	str	r3, [r5, #0]
   17914:	bd70      	pop	{r4, r5, r6, pc}
   17916:	46c0      	nop			; (mov r8, r8)
   17918:	200034d8 	.word	0x200034d8

0001791c <_close_r>:
   1791c:	2300      	movs	r3, #0
   1791e:	b570      	push	{r4, r5, r6, lr}
   17920:	4c06      	ldr	r4, [pc, #24]	; (1793c <_close_r+0x20>)
   17922:	0005      	movs	r5, r0
   17924:	0008      	movs	r0, r1
   17926:	6023      	str	r3, [r4, #0]
   17928:	f7ef fc56 	bl	71d8 <_close>
   1792c:	1c43      	adds	r3, r0, #1
   1792e:	d103      	bne.n	17938 <_close_r+0x1c>
   17930:	6823      	ldr	r3, [r4, #0]
   17932:	2b00      	cmp	r3, #0
   17934:	d000      	beq.n	17938 <_close_r+0x1c>
   17936:	602b      	str	r3, [r5, #0]
   17938:	bd70      	pop	{r4, r5, r6, pc}
   1793a:	46c0      	nop			; (mov r8, r8)
   1793c:	200034d8 	.word	0x200034d8

00017940 <_fstat_r>:
   17940:	2300      	movs	r3, #0
   17942:	b570      	push	{r4, r5, r6, lr}
   17944:	4c06      	ldr	r4, [pc, #24]	; (17960 <_fstat_r+0x20>)
   17946:	0005      	movs	r5, r0
   17948:	0008      	movs	r0, r1
   1794a:	0011      	movs	r1, r2
   1794c:	6023      	str	r3, [r4, #0]
   1794e:	f7ef fc46 	bl	71de <_fstat>
   17952:	1c43      	adds	r3, r0, #1
   17954:	d103      	bne.n	1795e <_fstat_r+0x1e>
   17956:	6823      	ldr	r3, [r4, #0]
   17958:	2b00      	cmp	r3, #0
   1795a:	d000      	beq.n	1795e <_fstat_r+0x1e>
   1795c:	602b      	str	r3, [r5, #0]
   1795e:	bd70      	pop	{r4, r5, r6, pc}
   17960:	200034d8 	.word	0x200034d8

00017964 <_isatty_r>:
   17964:	2300      	movs	r3, #0
   17966:	b570      	push	{r4, r5, r6, lr}
   17968:	4c06      	ldr	r4, [pc, #24]	; (17984 <_isatty_r+0x20>)
   1796a:	0005      	movs	r5, r0
   1796c:	0008      	movs	r0, r1
   1796e:	6023      	str	r3, [r4, #0]
   17970:	f7ef fc3a 	bl	71e8 <_isatty>
   17974:	1c43      	adds	r3, r0, #1
   17976:	d103      	bne.n	17980 <_isatty_r+0x1c>
   17978:	6823      	ldr	r3, [r4, #0]
   1797a:	2b00      	cmp	r3, #0
   1797c:	d000      	beq.n	17980 <_isatty_r+0x1c>
   1797e:	602b      	str	r3, [r5, #0]
   17980:	bd70      	pop	{r4, r5, r6, pc}
   17982:	46c0      	nop			; (mov r8, r8)
   17984:	200034d8 	.word	0x200034d8

00017988 <_lseek_r>:
   17988:	b570      	push	{r4, r5, r6, lr}
   1798a:	0005      	movs	r5, r0
   1798c:	0008      	movs	r0, r1
   1798e:	0011      	movs	r1, r2
   17990:	2200      	movs	r2, #0
   17992:	4c06      	ldr	r4, [pc, #24]	; (179ac <_lseek_r+0x24>)
   17994:	6022      	str	r2, [r4, #0]
   17996:	001a      	movs	r2, r3
   17998:	f7ef fc28 	bl	71ec <_lseek>
   1799c:	1c43      	adds	r3, r0, #1
   1799e:	d103      	bne.n	179a8 <_lseek_r+0x20>
   179a0:	6823      	ldr	r3, [r4, #0]
   179a2:	2b00      	cmp	r3, #0
   179a4:	d000      	beq.n	179a8 <_lseek_r+0x20>
   179a6:	602b      	str	r3, [r5, #0]
   179a8:	bd70      	pop	{r4, r5, r6, pc}
   179aa:	46c0      	nop			; (mov r8, r8)
   179ac:	200034d8 	.word	0x200034d8

000179b0 <__malloc_lock>:
   179b0:	4770      	bx	lr

000179b2 <__malloc_unlock>:
   179b2:	4770      	bx	lr

000179b4 <_read_r>:
   179b4:	b570      	push	{r4, r5, r6, lr}
   179b6:	0005      	movs	r5, r0
   179b8:	0008      	movs	r0, r1
   179ba:	0011      	movs	r1, r2
   179bc:	2200      	movs	r2, #0
   179be:	4c06      	ldr	r4, [pc, #24]	; (179d8 <_read_r+0x24>)
   179c0:	6022      	str	r2, [r4, #0]
   179c2:	001a      	movs	r2, r3
   179c4:	f7ef fbac 	bl	7120 <_read>
   179c8:	1c43      	adds	r3, r0, #1
   179ca:	d103      	bne.n	179d4 <_read_r+0x20>
   179cc:	6823      	ldr	r3, [r4, #0]
   179ce:	2b00      	cmp	r3, #0
   179d0:	d000      	beq.n	179d4 <_read_r+0x20>
   179d2:	602b      	str	r3, [r5, #0]
   179d4:	bd70      	pop	{r4, r5, r6, pc}
   179d6:	46c0      	nop			; (mov r8, r8)
   179d8:	200034d8 	.word	0x200034d8
   179dc:	00004b1e 	.word	0x00004b1e
   179e0:	00004b1e 	.word	0x00004b1e
   179e4:	00004afa 	.word	0x00004afa
   179e8:	00004b1e 	.word	0x00004b1e
   179ec:	00004afa 	.word	0x00004afa
   179f0:	00004ae0 	.word	0x00004ae0
   179f4:	00004ae0 	.word	0x00004ae0
   179f8:	00004b1e 	.word	0x00004b1e
   179fc:	00004b1e 	.word	0x00004b1e
   17a00:	00004b1e 	.word	0x00004b1e
   17a04:	00004b1e 	.word	0x00004b1e
   17a08:	00004b1e 	.word	0x00004b1e
   17a0c:	00004b1e 	.word	0x00004b1e
   17a10:	00004b1e 	.word	0x00004b1e
   17a14:	00004b1e 	.word	0x00004b1e
   17a18:	00004b1e 	.word	0x00004b1e
   17a1c:	00004b1e 	.word	0x00004b1e
   17a20:	00004b1e 	.word	0x00004b1e
   17a24:	00004b1e 	.word	0x00004b1e
   17a28:	00004b1e 	.word	0x00004b1e
   17a2c:	00004b1e 	.word	0x00004b1e
   17a30:	00004b1e 	.word	0x00004b1e
   17a34:	00004b1e 	.word	0x00004b1e
   17a38:	00004b1e 	.word	0x00004b1e
   17a3c:	00004b1e 	.word	0x00004b1e
   17a40:	00004b1e 	.word	0x00004b1e
   17a44:	00004afa 	.word	0x00004afa
   17a48:	00004b1e 	.word	0x00004b1e
   17a4c:	00004afa 	.word	0x00004afa
   17a50:	00004b1e 	.word	0x00004b1e
   17a54:	00004b1e 	.word	0x00004b1e
   17a58:	00004b1e 	.word	0x00004b1e
   17a5c:	00004b1e 	.word	0x00004b1e
   17a60:	00004b1e 	.word	0x00004b1e
   17a64:	00004b1e 	.word	0x00004b1e
   17a68:	00004b1e 	.word	0x00004b1e
   17a6c:	00004b1e 	.word	0x00004b1e
   17a70:	00004b1e 	.word	0x00004b1e
   17a74:	00004b1e 	.word	0x00004b1e
   17a78:	00004b1e 	.word	0x00004b1e
   17a7c:	00004b1e 	.word	0x00004b1e
   17a80:	00004b1e 	.word	0x00004b1e
   17a84:	00004b1e 	.word	0x00004b1e
   17a88:	00004b1e 	.word	0x00004b1e
   17a8c:	00004b1e 	.word	0x00004b1e
   17a90:	00004b1e 	.word	0x00004b1e
   17a94:	00004b1e 	.word	0x00004b1e
   17a98:	00004b1e 	.word	0x00004b1e
   17a9c:	00004b1e 	.word	0x00004b1e
   17aa0:	00004b1e 	.word	0x00004b1e
   17aa4:	00004b1e 	.word	0x00004b1e
   17aa8:	00004b1e 	.word	0x00004b1e
   17aac:	00004b1e 	.word	0x00004b1e
   17ab0:	00004b1e 	.word	0x00004b1e
   17ab4:	00004b1e 	.word	0x00004b1e
   17ab8:	00004b1e 	.word	0x00004b1e
   17abc:	00004b1e 	.word	0x00004b1e
   17ac0:	00004b1e 	.word	0x00004b1e
   17ac4:	00004b1e 	.word	0x00004b1e
   17ac8:	00004b1e 	.word	0x00004b1e
   17acc:	00004b1e 	.word	0x00004b1e
   17ad0:	00004b1e 	.word	0x00004b1e
   17ad4:	00004b1e 	.word	0x00004b1e
   17ad8:	00004b1e 	.word	0x00004b1e
   17adc:	00004afa 	.word	0x00004afa
   17ae0:	00004afa 	.word	0x00004afa
   17ae4:	00004b02 	.word	0x00004b02
   17ae8:	00004b02 	.word	0x00004b02
   17aec:	00004b02 	.word	0x00004b02
   17af0:	00004b02 	.word	0x00004b02
   17af4:	42000000 	.word	0x42000000
   17af8:	42000400 	.word	0x42000400
   17afc:	42000800 	.word	0x42000800
   17b00:	42000c00 	.word	0x42000c00
   17b04:	42001000 	.word	0x42001000
   17b08:	43000400 	.word	0x43000400
   17b0c:	00006442 	.word	0x00006442
   17b10:	0000643e 	.word	0x0000643e
   17b14:	0000643e 	.word	0x0000643e
   17b18:	000064a4 	.word	0x000064a4
   17b1c:	000064a4 	.word	0x000064a4
   17b20:	00006458 	.word	0x00006458
   17b24:	00006448 	.word	0x00006448
   17b28:	0000645e 	.word	0x0000645e
   17b2c:	00006492 	.word	0x00006492
   17b30:	000065c0 	.word	0x000065c0
   17b34:	000065a0 	.word	0x000065a0
   17b38:	000065a0 	.word	0x000065a0
   17b3c:	0000663a 	.word	0x0000663a
   17b40:	000065b2 	.word	0x000065b2
   17b44:	000065ce 	.word	0x000065ce
   17b48:	000065a4 	.word	0x000065a4
   17b4c:	000065dc 	.word	0x000065dc
   17b50:	0000661e 	.word	0x0000661e
   17b54:	00006678 	.word	0x00006678
   17b58:	000066ba 	.word	0x000066ba
   17b5c:	000066ba 	.word	0x000066ba
   17b60:	000066ba 	.word	0x000066ba
   17b64:	0000666a 	.word	0x0000666a
   17b68:	00006686 	.word	0x00006686
   17b6c:	0000665c 	.word	0x0000665c
   17b70:	00006694 	.word	0x00006694
   17b74:	000066aa 	.word	0x000066aa
   17b78:	00006db6 	.word	0x00006db6
   17b7c:	00006eac 	.word	0x00006eac
   17b80:	00006eb6 	.word	0x00006eb6
   17b84:	00006ec0 	.word	0x00006ec0
   17b88:	00006eca 	.word	0x00006eca
   17b8c:	00006efc 	.word	0x00006efc
   17b90:	00006f06 	.word	0x00006f06
   17b94:	00006f10 	.word	0x00006f10
   17b98:	00006f1a 	.word	0x00006f1a
   17b9c:	00006f24 	.word	0x00006f24
   17ba0:	42002000 	.word	0x42002000
   17ba4:	42002400 	.word	0x42002400
   17ba8:	42002800 	.word	0x42002800
   17bac:	42002c00 	.word	0x42002c00
   17bb0:	43000800 	.word	0x43000800
   17bb4:	00000002 	.word	0x00000002
   17bb8:	00000100 	.word	0x00000100
   17bbc:	00000002 	.word	0x00000002
   17bc0:	00000200 	.word	0x00000200
   17bc4:	00000002 	.word	0x00000002
   17bc8:	00000400 	.word	0x00000400
   17bcc:	00000002 	.word	0x00000002
   17bd0:	00000800 	.word	0x00000800
   17bd4:	00000003 	.word	0x00000003
   17bd8:	00000004 	.word	0x00000004
   17bdc:	72420a0d 	.word	0x72420a0d
   17be0:	6364616f 	.word	0x6364616f
   17be4:	20747361 	.word	0x20747361
   17be8:	6c696146 	.word	0x6c696146
   17bec:	000d6465 	.word	0x000d6465
   17bf0:	6f430a0d 	.word	0x6f430a0d
   17bf4:	63656e6e 	.word	0x63656e6e
   17bf8:	676e6974 	.word	0x676e6974
   17bfc:	65655020 	.word	0x65655020
   17c00:	6e6f2072 	.word	0x6e6f2072
   17c04:	61684320 	.word	0x61684320
   17c08:	6c656e6e 	.word	0x6c656e6e
   17c0c:	00000020 	.word	0x00000020
   17c10:	00006425 	.word	0x00006425
   17c14:	6f430a0d 	.word	0x6f430a0d
   17c18:	63656e6e 	.word	0x63656e6e
   17c1c:	20646574 	.word	0x20646574
   17c20:	72656550 	.word	0x72656550
   17c24:	206e6f20 	.word	0x206e6f20
   17c28:	6e616843 	.word	0x6e616843
   17c2c:	206c656e 	.word	0x206c656e
   17c30:	ffffff00 	.word	0xffffff00
   17c34:	65530a0d 	.word	0x65530a0d
   17c38:	7463656c 	.word	0x7463656c
   17c3c:	206e6f69 	.word	0x206e6f69
   17c40:	6320666f 	.word	0x6320666f
   17c44:	6e6e6168 	.word	0x6e6e6168
   17c48:	00206c65 	.word	0x00206c65
   17c4c:	20736920 	.word	0x20736920
   17c50:	20746f6e 	.word	0x20746f6e
   17c54:	70707573 	.word	0x70707573
   17c58:	6574726f 	.word	0x6574726f
   17c5c:	6e692064 	.word	0x6e692064
   17c60:	72756320 	.word	0x72756320
   17c64:	746e6572 	.word	0x746e6572
   17c68:	6e6f6320 	.word	0x6e6f6320
   17c6c:	75676966 	.word	0x75676966
   17c70:	69746172 	.word	0x69746172
   17c74:	0d2e6e6f 	.word	0x0d2e6e6f
   17c78:	ffffff00 	.word	0xffffff00
   17c7c:	2d2d0d0a 	.word	0x2d2d0d0a
   17c80:	2d2d2d2d 	.word	0x2d2d2d2d
   17c84:	2d2d2d2d 	.word	0x2d2d2d2d
   17c88:	2d2d2d2d 	.word	0x2d2d2d2d
   17c8c:	2d2d2d2d 	.word	0x2d2d2d2d
   17c90:	2d2d2d2d 	.word	0x2d2d2d2d
   17c94:	2d2d2d2d 	.word	0x2d2d2d2d
   17c98:	2d2d2d2d 	.word	0x2d2d2d2d
   17c9c:	2d2d2d2d 	.word	0x2d2d2d2d
   17ca0:	2d2d2d2d 	.word	0x2d2d2d2d
   17ca4:	2d2d2d2d 	.word	0x2d2d2d2d
   17ca8:	2d2d2d2d 	.word	0x2d2d2d2d
   17cac:	2d2d2d2d 	.word	0x2d2d2d2d
   17cb0:	0a2d2d2d 	.word	0x0a2d2d2d
   17cb4:	2d2d2d0d 	.word	0x2d2d2d0d
   17cb8:	2d2d2d2d 	.word	0x2d2d2d2d
   17cbc:	2d2d2d2d 	.word	0x2d2d2d2d
   17cc0:	2d2d2d2d 	.word	0x2d2d2d2d
   17cc4:	2d2d2d2d 	.word	0x2d2d2d2d
   17cc8:	2d2d2d2d 	.word	0x2d2d2d2d
   17ccc:	2d2d2d2d 	.word	0x2d2d2d2d
   17cd0:	2d2d2d2d 	.word	0x2d2d2d2d
   17cd4:	2d2d2d2d 	.word	0x2d2d2d2d
   17cd8:	2d2d2d2d 	.word	0x2d2d2d2d
   17cdc:	2d2d2d2d 	.word	0x2d2d2d2d
   17ce0:	2d2d2d2d 	.word	0x2d2d2d2d
   17ce4:	2d2d2d2d 	.word	0x2d2d2d2d
   17ce8:	00002d2d 	.word	0x00002d2d
   17cec:	74530a0d 	.word	0x74530a0d
   17cf0:	69747261 	.word	0x69747261
   17cf4:	4e20676e 	.word	0x4e20676e
   17cf8:	2065646f 	.word	0x2065646f
   17cfc:	666f2031 	.word	0x666f2031
   17d00:	6d695320 	.word	0x6d695320
   17d04:	20656c70 	.word	0x20656c70
   17d08:	6f6d6544 	.word	0x6f6d6544
   17d0c:	726f6620 	.word	0x726f6620
   17d10:	526f4c20 	.word	0x526f4c20
   17d14:	32502061 	.word	0x32502061
   17d18:	74532050 	.word	0x74532050
   17d1c:	206b6361 	.word	0x206b6361
   17d20:	002e2e2e 	.word	0x002e2e2e
   17d24:	75460a0d 	.word	0x75460a0d
   17d28:	46206c6c 	.word	0x46206c6c
   17d2c:	74636e75 	.word	0x74636e75
   17d30:	206e6f69 	.word	0x206e6f69
   17d34:	69766544 	.word	0x69766544
   17d38:	28206563 	.word	0x28206563
   17d3c:	29444646 	.word	0x29444646
   17d40:	65706f20 	.word	0x65706f20
   17d44:	69746172 	.word	0x69746172
   17d48:	00736e6f 	.word	0x00736e6f
   17d4c:	20200a0d 	.word	0x20200a0d
   17d50:	52202020 	.word	0x52202020
   17d54:	72542046 	.word	0x72542046
   17d58:	63736e61 	.word	0x63736e61
   17d5c:	65766965 	.word	0x65766965
   17d60:	53203a72 	.word	0x53203a72
   17d64:	32315f58 	.word	0x32315f58
   17d68:	00003637 	.word	0x00003637
   17d6c:	20200a0d 	.word	0x20200a0d
   17d70:	44202020 	.word	0x44202020
   17d74:	206f6d65 	.word	0x206f6d65
   17d78:	74736e49 	.word	0x74736e49
   17d7c:	74637572 	.word	0x74637572
   17d80:	3a6e6f69 	.word	0x3a6e6f69
   17d84:	00000000 	.word	0x00000000
   17d88:	20200a0d 	.word	0x20200a0d
   17d8c:	20202020 	.word	0x20202020
   17d90:	20202020 	.word	0x20202020
   17d94:	20202020 	.word	0x20202020
   17d98:	20202020 	.word	0x20202020
   17d9c:	50202020 	.word	0x50202020
   17da0:	7265776f 	.word	0x7265776f
   17da4:	206e6f20 	.word	0x206e6f20
   17da8:	20656874 	.word	0x20656874
   17dac:	72616f62 	.word	0x72616f62
   17db0:	6e752064 	.word	0x6e752064
   17db4:	206c6974 	.word	0x206c6974
   17db8:	2044454c 	.word	0x2044454c
   17dbc:	696c2031 	.word	0x696c2031
   17dc0:	73746867 	.word	0x73746867
   17dc4:	00707520 	.word	0x00707520
   17dc8:	20200a0d 	.word	0x20200a0d
   17dcc:	20202020 	.word	0x20202020
   17dd0:	20202020 	.word	0x20202020
   17dd4:	20202020 	.word	0x20202020
   17dd8:	20202020 	.word	0x20202020
   17ddc:	74202020 	.word	0x74202020
   17de0:	6e69206f 	.word	0x6e69206f
   17de4:	61636964 	.word	0x61636964
   17de8:	63206574 	.word	0x63206574
   17dec:	656e6e6f 	.word	0x656e6e6f
   17df0:	6e697463 	.word	0x6e697463
   17df4:	69772067 	.word	0x69772067
   17df8:	70206874 	.word	0x70206874
   17dfc:	2e726565 	.word	0x2e726565
   17e00:	00000000 	.word	0x00000000
   17e04:	20200a0d 	.word	0x20200a0d
   17e08:	20202020 	.word	0x20202020
   17e0c:	20202020 	.word	0x20202020
   17e10:	20202020 	.word	0x20202020
   17e14:	20202020 	.word	0x20202020
   17e18:	50202020 	.word	0x50202020
   17e1c:	20687375 	.word	0x20687375
   17e20:	74747542 	.word	0x74747542
   17e24:	31206e6f 	.word	0x31206e6f
   17e28:	206f7420 	.word	0x206f7420
   17e2c:	616f7262 	.word	0x616f7262
   17e30:	73616364 	.word	0x73616364
   17e34:	656d2074 	.word	0x656d2074
   17e38:	67617373 	.word	0x67617373
   17e3c:	00002e65 	.word	0x00002e65
   17e40:	20200a0d 	.word	0x20200a0d
   17e44:	20202020 	.word	0x20202020
   17e48:	20202020 	.word	0x20202020
   17e4c:	20202020 	.word	0x20202020
   17e50:	20202020 	.word	0x20202020
   17e54:	4c202020 	.word	0x4c202020
   17e58:	31204445 	.word	0x31204445
   17e5c:	6c697720 	.word	0x6c697720
   17e60:	6562206c 	.word	0x6562206c
   17e64:	676f7420 	.word	0x676f7420
   17e68:	64656c67 	.word	0x64656c67
   17e6c:	6f707520 	.word	0x6f707520
   17e70:	6572206e 	.word	0x6572206e
   17e74:	76696563 	.word	0x76696563
   17e78:	20676e69 	.word	0x20676e69
   17e7c:	7373656d 	.word	0x7373656d
   17e80:	73656761 	.word	0x73656761
   17e84:	0000202e 	.word	0x0000202e
   17e88:	000d0a0d 	.word	0x000d0a0d
   17e8c:	69726550 	.word	0x69726550
   17e90:	6369646f 	.word	0x6369646f
   17e94:	61725420 	.word	0x61725420
   17e98:	696d736e 	.word	0x696d736e
   17e9c:	6f697373 	.word	0x6f697373
   17ea0:	203d206e 	.word	0x203d206e
   17ea4:	61736944 	.word	0x61736944
   17ea8:	0d656c62 	.word	0x0d656c62
   17eac:	00000000 	.word	0x00000000
   17eb0:	79747544 	.word	0x79747544
   17eb4:	63794320 	.word	0x63794320
   17eb8:	676e696c 	.word	0x676e696c
   17ebc:	70757320 	.word	0x70757320
   17ec0:	74726f70 	.word	0x74726f70
   17ec4:	44203d20 	.word	0x44203d20
   17ec8:	62617369 	.word	0x62617369
   17ecc:	000d656c 	.word	0x000d656c
   17ed0:	2054424c 	.word	0x2054424c
   17ed4:	70707573 	.word	0x70707573
   17ed8:	2074726f 	.word	0x2074726f
   17edc:	6944203d 	.word	0x6944203d
   17ee0:	6c626173 	.word	0x6c626173
   17ee4:	ff000d65 	.word	0xff000d65
   17ee8:	75636553 	.word	0x75636553
   17eec:	20646572 	.word	0x20646572
   17ef0:	00000000 	.word	0x00000000
   17ef4:	616f7242 	.word	0x616f7242
   17ef8:	73616364 	.word	0x73616364
   17efc:	61502074 	.word	0x61502074
   17f00:	74656b63 	.word	0x74656b63
   17f04:	74697720 	.word	0x74697720
   17f08:	53522068 	.word	0x53522068
   17f0c:	00204953 	.word	0x00204953
   17f10:	63696e55 	.word	0x63696e55
   17f14:	20747361 	.word	0x20747361
   17f18:	6b636150 	.word	0x6b636150
   17f1c:	77207465 	.word	0x77207465
   17f20:	20687469 	.word	0x20687469
   17f24:	49535352 	.word	0x49535352
   17f28:	00000020 	.word	0x00000020
   17f2c:	78323025 	.word	0x78323025
   17f30:	00000000 	.word	0x00000000
   17f34:	6f726620 	.word	0x6f726620
   17f38:	0000206d 	.word	0x0000206d
   17f3c:	00007825 	.word	0x00007825
   17f40:	ff00203a 	.word	0xff00203a
   17f44:	00007710 	.word	0x00007710
   17f48:	00007710 	.word	0x00007710
   17f4c:	00007704 	.word	0x00007704
   17f50:	0000771a 	.word	0x0000771a
   17f54:	00007710 	.word	0x00007710
   17f58:	00007768 	.word	0x00007768
   17f5c:	00007710 	.word	0x00007710
   17f60:	00007710 	.word	0x00007710
   17f64:	00007710 	.word	0x00007710
   17f68:	00007710 	.word	0x00007710
   17f6c:	00007710 	.word	0x00007710
   17f70:	00007738 	.word	0x00007738
   17f74:	00007748 	.word	0x00007748
   17f78:	00007710 	.word	0x00007710
   17f7c:	00007710 	.word	0x00007710
   17f80:	00007710 	.word	0x00007710
   17f84:	00007768 	.word	0x00007768
   17f88:	00007768 	.word	0x00007768
   17f8c:	00007768 	.word	0x00007768
   17f90:	00007768 	.word	0x00007768
   17f94:	00007768 	.word	0x00007768
   17f98:	00007768 	.word	0x00007768
   17f9c:	00007768 	.word	0x00007768
   17fa0:	00007768 	.word	0x00007768
   17fa4:	00007768 	.word	0x00007768
   17fa8:	00007768 	.word	0x00007768
   17fac:	00007768 	.word	0x00007768
   17fb0:	00007768 	.word	0x00007768
   17fb4:	00007768 	.word	0x00007768
   17fb8:	00007768 	.word	0x00007768
   17fbc:	00007768 	.word	0x00007768
   17fc0:	00007768 	.word	0x00007768
   17fc4:	00007768 	.word	0x00007768
   17fc8:	00007768 	.word	0x00007768
   17fcc:	00007768 	.word	0x00007768
   17fd0:	00007768 	.word	0x00007768
   17fd4:	00007768 	.word	0x00007768
   17fd8:	00007768 	.word	0x00007768
   17fdc:	00007768 	.word	0x00007768
   17fe0:	00007768 	.word	0x00007768
   17fe4:	00007768 	.word	0x00007768
   17fe8:	00007768 	.word	0x00007768
   17fec:	00007768 	.word	0x00007768
   17ff0:	00007768 	.word	0x00007768
   17ff4:	00007768 	.word	0x00007768
   17ff8:	00007768 	.word	0x00007768
   17ffc:	00007768 	.word	0x00007768
   18000:	00007768 	.word	0x00007768
   18004:	00007768 	.word	0x00007768
   18008:	00007768 	.word	0x00007768
   1800c:	00007768 	.word	0x00007768
   18010:	00007768 	.word	0x00007768
   18014:	00007768 	.word	0x00007768
   18018:	00007768 	.word	0x00007768
   1801c:	00007768 	.word	0x00007768
   18020:	00007768 	.word	0x00007768
   18024:	00007768 	.word	0x00007768
   18028:	00007768 	.word	0x00007768
   1802c:	00007768 	.word	0x00007768
   18030:	00007768 	.word	0x00007768
   18034:	00007768 	.word	0x00007768
   18038:	00007768 	.word	0x00007768
   1803c:	00007768 	.word	0x00007768
   18040:	00007768 	.word	0x00007768
   18044:	00007710 	.word	0x00007710
   18048:	00007710 	.word	0x00007710
   1804c:	00007722 	.word	0x00007722
   18050:	00007730 	.word	0x00007730
   18054:	00007710 	.word	0x00007710
   18058:	00007768 	.word	0x00007768
   1805c:	00007710 	.word	0x00007710
   18060:	00007710 	.word	0x00007710
   18064:	00007710 	.word	0x00007710
   18068:	00007710 	.word	0x00007710
   1806c:	00007710 	.word	0x00007710
   18070:	00007750 	.word	0x00007750
   18074:	00007760 	.word	0x00007760
   18078:	00007710 	.word	0x00007710
   1807c:	00007710 	.word	0x00007710
   18080:	00007710 	.word	0x00007710
   18084:	52200d0a 	.word	0x52200d0a
   18088:	69656365 	.word	0x69656365
   1808c:	20646576 	.word	0x20646576
   18090:	7373656d 	.word	0x7373656d
   18094:	20656761 	.word	0x20656761
   18098:	0a207825 	.word	0x0a207825
   1809c:	00000000 	.word	0x00000000
   180a0:	6552200a 	.word	0x6552200a
   180a4:	76696563 	.word	0x76696563
   180a8:	6f206465 	.word	0x6f206465
   180ac:	72656472 	.word	0x72656472
   180b0:	6f726620 	.word	0x6f726620
   180b4:	6574206d 	.word	0x6574206d
   180b8:	6e696d72 	.word	0x6e696d72
   180bc:	41206c61 	.word	0x41206c61
   180c0:	000d0a20 	.word	0x000d0a20
   180c4:	6552200a 	.word	0x6552200a
   180c8:	76696563 	.word	0x76696563
   180cc:	6f206465 	.word	0x6f206465
   180d0:	72656472 	.word	0x72656472
   180d4:	6f726620 	.word	0x6f726620
   180d8:	6574206d 	.word	0x6574206d
   180dc:	6e696d72 	.word	0x6e696d72
   180e0:	42206c61 	.word	0x42206c61
   180e4:	000d0a20 	.word	0x000d0a20
   180e8:	6553200a 	.word	0x6553200a
   180ec:	6d20646e 	.word	0x6d20646e
   180f0:	61737365 	.word	0x61737365
   180f4:	61206567 	.word	0x61206567
   180f8:	6e696167 	.word	0x6e696167
   180fc:	000d0a20 	.word	0x000d0a20
   18100:	53200d0a 	.word	0x53200d0a
   18104:	20646e65 	.word	0x20646e65
   18108:	54524155 	.word	0x54524155
   1810c:	73656d20 	.word	0x73656d20
   18110:	65676173 	.word	0x65676173
   18114:	20782520 	.word	0x20782520
   18118:	0000000a 	.word	0x0000000a
   1811c:	704f200a 	.word	0x704f200a
   18120:	67206e65 	.word	0x67206e65
   18124:	20657461 	.word	0x20657461
   18128:	74207461 	.word	0x74207461
   1812c:	696d7265 	.word	0x696d7265
   18130:	206c616e 	.word	0x206c616e
   18134:	72662041 	.word	0x72662041
   18138:	49206d6f 	.word	0x49206d6f
   1813c:	0d0a204f 	.word	0x0d0a204f
   18140:	00000000 	.word	0x00000000
   18144:	6c43200a 	.word	0x6c43200a
   18148:	2065736f 	.word	0x2065736f
   1814c:	65746167 	.word	0x65746167
   18150:	20746120 	.word	0x20746120
   18154:	6d726574 	.word	0x6d726574
   18158:	6c616e69 	.word	0x6c616e69
   1815c:	66204120 	.word	0x66204120
   18160:	206d6f72 	.word	0x206d6f72
   18164:	0a204f49 	.word	0x0a204f49
   18168:	0000000d 	.word	0x0000000d
   1816c:	704f200a 	.word	0x704f200a
   18170:	67206e65 	.word	0x67206e65
   18174:	20657461 	.word	0x20657461
   18178:	74207461 	.word	0x74207461
   1817c:	696d7265 	.word	0x696d7265
   18180:	206c616e 	.word	0x206c616e
   18184:	72662042 	.word	0x72662042
   18188:	49206d6f 	.word	0x49206d6f
   1818c:	0d0a204f 	.word	0x0d0a204f
   18190:	00000000 	.word	0x00000000
   18194:	6c43200a 	.word	0x6c43200a
   18198:	2065736f 	.word	0x2065736f
   1819c:	65746167 	.word	0x65746167
   181a0:	20746120 	.word	0x20746120
   181a4:	6d726574 	.word	0x6d726574
   181a8:	6c616e69 	.word	0x6c616e69
   181ac:	66204220 	.word	0x66204220
   181b0:	206d6f72 	.word	0x206d6f72
   181b4:	0a204f49 	.word	0x0a204f49
   181b8:	ffff000d 	.word	0xffff000d
   181bc:	6b636150 	.word	0x6b636150
   181c0:	72207465 	.word	0x72207465
   181c4:	69656365 	.word	0x69656365
   181c8:	20646576 	.word	0x20646576
   181cc:	6d6f7266 	.word	0x6d6f7266
   181d0:	68746f20 	.word	0x68746f20
   181d4:	53207265 	.word	0x53207265
   181d8:	6372756f 	.word	0x6372756f
   181dc:	41502065 	.word	0x41502065
   181e0:	4449204e 	.word	0x4449204e
   181e4:	30203a20 	.word	0x30203a20
   181e8:	25782578 	.word	0x25782578
   181ec:	000a0d78 	.word	0x000a0d78
   181f0:	7461440a 	.word	0x7461440a
   181f4:	6f432061 	.word	0x6f432061
   181f8:	7269666e 	.word	0x7269666e
   181fc:	48203a6d 	.word	0x48203a6d
   18200:	6c646e61 	.word	0x6c646e61
   18204:	25203a65 	.word	0x25203a65
   18208:	74732064 	.word	0x74732064
   1820c:	73757461 	.word	0x73757461
   18210:	2064253a 	.word	0x2064253a
   18214:	ff000a0d 	.word	0xff000a0d
   18218:	6f430a0d 	.word	0x6f430a0d
   1821c:	63656e6e 	.word	0x63656e6e
   18220:	704f2074 	.word	0x704f2074
   18224:	74617265 	.word	0x74617265
   18228:	206e6f69 	.word	0x206e6f69
   1822c:	74617453 	.word	0x74617453
   18230:	203a7375 	.word	0x203a7375
   18234:	000a6425 	.word	0x000a6425
   18238:	74530a0d 	.word	0x74530a0d
   1823c:	65747261 	.word	0x65747261
   18240:	69572064 	.word	0x69572064
   18244:	656c6572 	.word	0x656c6572
   18248:	43207373 	.word	0x43207373
   1824c:	756d6d6f 	.word	0x756d6d6f
   18250:	6163696e 	.word	0x6163696e
   18254:	6e6f6974 	.word	0x6e6f6974
   18258:	206e6f20 	.word	0x206e6f20
   1825c:	6e616843 	.word	0x6e616843
   18260:	206c656e 	.word	0x206c656e
   18264:	0a0d7525 	.word	0x0a0d7525
   18268:	ffffff00 	.word	0xffffff00
   1826c:	7275430a 	.word	0x7275430a
   18270:	746e6572 	.word	0x746e6572
   18274:	20785420 	.word	0x20785420
   18278:	7074756f 	.word	0x7074756f
   1827c:	70207475 	.word	0x70207475
   18280:	7265776f 	.word	0x7265776f
   18284:	6425203a 	.word	0x6425203a
   18288:	00000a0d 	.word	0x00000a0d
   1828c:	42204150 	.word	0x42204150
   18290:	54534f4f 	.word	0x54534f4f
   18294:	61747320 	.word	0x61747320
   18298:	3a737574 	.word	0x3a737574
   1829c:	0d642520 	.word	0x0d642520
   182a0:	0000000a 	.word	0x0000000a
   182a4:	72727543 	.word	0x72727543
   182a8:	20746e65 	.word	0x20746e65
   182ac:	203a4653 	.word	0x203a4653
   182b0:	64254653 	.word	0x64254653
   182b4:	00000a0d 	.word	0x00000a0d
   182b8:	72727543 	.word	0x72727543
   182bc:	20746e65 	.word	0x20746e65
   182c0:	28205742 	.word	0x28205742
   182c4:	6b353231 	.word	0x6b353231
   182c8:	373d7a48 	.word	0x373d7a48
   182cc:	3532202c 	.word	0x3532202c
   182d0:	7a486b30 	.word	0x7a486b30
   182d4:	202c383d 	.word	0x202c383d
   182d8:	6b303035 	.word	0x6b303035
   182dc:	393d7a48 	.word	0x393d7a48
   182e0:	25203a29 	.word	0x25203a29
   182e4:	000a0d64 	.word	0x000a0d64
   182e8:	6153200a 	.word	0x6153200a
   182ec:	6f207474 	.word	0x6f207474
   182f0:	6e207070 	.word	0x6e207070
   182f4:	76747465 	.word	0x76747465
   182f8:	206b7265 	.word	0x206b7265
   182fc:	0000000d 	.word	0x0000000d
   18300:	6a4b200a 	.word	0x6a4b200a
   18304:	2074726f 	.word	0x2074726f
   18308:	65657266 	.word	0x65657266
   1830c:	2072657a 	.word	0x2072657a
   18310:	ffff000d 	.word	0xffff000d
   18314:	626d756e 	.word	0x626d756e
   18318:	664f7265 	.word	0x664f7265
   1831c:	65747942 	.word	0x65747942
   18320:	00000073 	.word	0x00000073
   18324:	732f2e2e 	.word	0x732f2e2e
   18328:	412f6372 	.word	0x412f6372
   1832c:	742f4653 	.word	0x742f4653
   18330:	64726968 	.word	0x64726968
   18334:	74726170 	.word	0x74726170
   18338:	69772f79 	.word	0x69772f79
   1833c:	656c6572 	.word	0x656c6572
   18340:	4c2f7373 	.word	0x4c2f7373
   18344:	5f61526f 	.word	0x5f61526f
   18348:	2f503250 	.word	0x2f503250
   1834c:	76726573 	.word	0x76726573
   18350:	73656369 	.word	0x73656369
   18354:	7364702f 	.word	0x7364702f
   18358:	6372732f 	.word	0x6372732f
   1835c:	2f766e2f 	.word	0x2f766e2f
   18360:	764e5f44 	.word	0x764e5f44
   18364:	0000632e 	.word	0x0000632e
   18368:	72646461 	.word	0x72646461
   1836c:	20737365 	.word	0x20737365
   18370:	44203d3c 	.word	0x44203d3c
   18374:	5f564e5f 	.word	0x5f564e5f
   18378:	4f4d454d 	.word	0x4f4d454d
   1837c:	455f5952 	.word	0x455f5952
   18380:	0000444e 	.word	0x0000444e
   18384:	64646128 	.word	0x64646128
   18388:	73736572 	.word	0x73736572
   1838c:	6e202b20 	.word	0x6e202b20
   18390:	65626d75 	.word	0x65626d75
   18394:	42664f72 	.word	0x42664f72
   18398:	73657479 	.word	0x73657479
   1839c:	3d3c2029 	.word	0x3d3c2029
   183a0:	5f442820 	.word	0x5f442820
   183a4:	4d5f564e 	.word	0x4d5f564e
   183a8:	524f4d45 	.word	0x524f4d45
   183ac:	4e455f59 	.word	0x4e455f59
   183b0:	202b2044 	.word	0x202b2044
   183b4:	00295531 	.word	0x00295531
   183b8:	66666f28 	.word	0x66666f28
   183bc:	20746573 	.word	0x20746573
   183c0:	756e202b 	.word	0x756e202b
   183c4:	7265626d 	.word	0x7265626d
   183c8:	7942664f 	.word	0x7942664f
   183cc:	29736574 	.word	0x29736574
   183d0:	203d3c20 	.word	0x203d3c20
   183d4:	564e5f44 	.word	0x564e5f44
   183d8:	4345535f 	.word	0x4345535f
   183dc:	5f524f54 	.word	0x5f524f54
   183e0:	455a4953 	.word	0x455a4953
   183e4:	ffffff00 	.word	0xffffff00
   183e8:	4e5f4428 	.word	0x4e5f4428
   183ec:	454d5f56 	.word	0x454d5f56
   183f0:	59524f4d 	.word	0x59524f4d
   183f4:	4154535f 	.word	0x4154535f
   183f8:	25205452 	.word	0x25205452
   183fc:	4d564e20 	.word	0x4d564e20
   18400:	4c525443 	.word	0x4c525443
   18404:	574f525f 	.word	0x574f525f
   18408:	5a49535f 	.word	0x5a49535f
   1840c:	3d202945 	.word	0x3d202945
   18410:	5530203d 	.word	0x5530203d
   18414:	00000000 	.word	0x00000000
   18418:	4e5f4428 	.word	0x4e5f4428
   1841c:	454d5f56 	.word	0x454d5f56
   18420:	59524f4d 	.word	0x59524f4d
   18424:	444e455f 	.word	0x444e455f
   18428:	44202d20 	.word	0x44202d20
   1842c:	5f564e5f 	.word	0x5f564e5f
   18430:	4f4d454d 	.word	0x4f4d454d
   18434:	535f5952 	.word	0x535f5952
   18438:	54524154 	.word	0x54524154
   1843c:	31202b20 	.word	0x31202b20
   18440:	3d202955 	.word	0x3d202955
   18444:	5f44203d 	.word	0x5f44203d
   18448:	4d5f564e 	.word	0x4d5f564e
   1844c:	524f4d45 	.word	0x524f4d45
   18450:	49535f59 	.word	0x49535f59
   18454:	ff00455a 	.word	0xff00455a

00018458 <__func__.13263>:
   18458:	764e5f44 696e495f ffff0074              D_Nv_Init...

00018464 <__func__.13275>:
   18464:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00018474 <__func__.13288>:
   18474:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00018484 <__func__.13300>:
   18484:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   18494:	706d495f ffff006c                       _Impl...

0001849c <__func__.13313>:
   1849c:	706d6f43 44657261 00617461 68636163     CompareData.cach
   184ac:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   184bc:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   184cc:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   184dc:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   184ec:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   184fc:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   1850c:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   1851c:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   1852c:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   1853c:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   1854c:	656c6572 4c2f7373 5f61526f 2f503250     reless/LoRa_P2P/
   1855c:	76726573 73656369 7364702f 6372732f     services/pds/src
   1856c:	2f766e2f 764e5f53 6d61532d 2e313252     /nv/S_Nv-SamR21.
   1857c:	ffff0063 20646928 30203d21 26202975     c...(id != 0u) &
   1858c:	69282026 203c2064 30467830 29753030     & (id < 0xF000u)
   1859c:	20262620 65746928 6e654c6d 20687467      && (itemLength 
   185ac:	4d203d3c 495f5841 5f4d4554 474e454c     <= MAX_ITEM_LENG
   185bc:	00294854 21206469 7530203d ffffff00     TH).id != 0u....
   185cc:	20646928 30203d21 26202975 70282026     (id != 0u) && (p
   185dc:	61746144 203d2120 4c4c554e ffff0029     Data != NULL)...

000185ec <__func__.13290>:
   185ec:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   185fc:	69467265 00646572                       erFired.

00018604 <__func__.13326>:
   18604:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00018614 <__func__.13333>:
   18614:	61657243 74496574 61436d65 00656863     CreateItemCache.

00018624 <__func__.13338>:
   18624:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00018634 <__func__.13431>:
   18634:	64616f4c 74636553 ff00726f              LoadSector..

00018640 <__func__.13453>:
   18640:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00018650 <__func__.13473>:
   18650:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   18660:	65646565 ffff0064                       eeded...

00018668 <__func__.13480>:
   18668:	706d6f43 49746361 006d6574              CompactItem.

00018674 <__func__.13504>:
   18674:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

00018684 <__func__.13514>:
   18684:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   18694:	ff006c70                                pl..

00018698 <__func__.13527>:
   18698:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

000186a8 <__func__.13538>:
   186a8:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

000186b8 <__func__.13543>:
   186b8:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   186c8:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   186d8:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   186e8:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   186f8:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   18708:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   18718:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   18728:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   18738:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   18748:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   18758:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   18768:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   18778:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   18788:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   18798:	3d3d206b 74657220 ffff0029              k == ret)...

000187a4 <__func__.13203>:
   187a4:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   187b4:	646e6148 0072656c                       Handler.

000187bc <__func__.13223>:
   187bc:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

000187cc <__func__.13230>:
   187cc:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   187dc:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   187ec:	61566e72 5f65756c ff006b4f              rnValue_Ok..

000187f8 <__func__.13397>:
   187f8:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   18808:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   18818:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   18828:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   18838:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   18848:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   18858:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   18868:	6372732f 2f6c772f 64506c77 70795473     /src/wl/wlPdsTyp
   18878:	6f437365 7265766e 2e726574 ffff0063     esConverter.c...

00018888 <mySecurityKey>:
   18888:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   18898:	0000a640 0000a650 0000a656 0000a65c     @...P...V...\...
   188a8:	0000a662 0000a668 0000a66e 0000a674     b...h...n...t...
   188b8:	0000a67a 0000a680 0000a686 0000a68c     z...............
   188c8:	0000a692 0000a698 0000a69e 0000a6a4     ................
   188d8:	0000a6aa 0000a6b0 0000a6b6 0000a6bc     ................
   188e8:	0000a6c2 0000a6c8 0000a6ce 0000a6d4     ................
   188f8:	0000a6da 0000a6e0 0000a824 0000a784     ........$.......
   18908:	0000a804 0000a824 0000a804 0000a824     ....$.......$...
   18918:	0000a824 0000a824 0000a784 0000a824     $...$.......$...
   18928:	0000a824 0000a824 0000a824 0000a824     $...$...$...$...
   18938:	0000a824 0000a824 0000a84c 0a0d0a0d     $...$...L.......
   18948:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   18958:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   18968:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   18978:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   18988:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   18998:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   189a8:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   189b8:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   189c8:	41676e6f 65726464 20207373 50202020     ongAddress     P
   189d8:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   189e8:	000d7375 20202020 20202020 20202020     us..            
   189f8:	00000020 20202020 ffffff00 41500a0d      ...    ......PA
   18a08:	3a44494e 00000000 61684320 6c656e6e     NID:.... Channel
   18a18:	ffff003a 61530a0d 43206576 656e6e6f     :.....Save Conne
   18a28:	6f697463 00000d6e 41200a0d 54206b63     ction..... Ack T
   18a38:	6f656d69 000d7475                       imeout..

00018a40 <AdvChannels433>:
   18a40:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   18a50:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   18a60:	ff0c0101                                ....

00018a64 <AdvChannels868>:
   18a64:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   18a74:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   18a84:	ff100101                                ....

00018a88 <DefaultChannels433>:
   18a88:	50015001 ffff5001                       .P.P.P..

00018a90 <DefaultChannels868>:
   18a90:	50015001 ffff5001                       .P.P.P..

00018a98 <SubBandDutyCycle868>:
   18a98:	006403e8 03e80064 0064000a              ..d.d.....d.

00018aa4 <SubBandParams433>:
   18aa4:	19cf0e40 19ea8580 00000000              @...........

00018ab0 <SubBandParams868>:
   18ab0:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   18ac0:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   18ad0:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   18ae0:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   18af0:	33db2580 00000000                       .%.3....

00018af8 <AdvChannels923JP>:
   18af8:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   18b08:	3709f740 ff100101                       @..7....

00018b10 <DefaultChannels923JP>:
   18b10:	50015001                                .P.P

00018b14 <SubBandDutyCycleJP923>:
   18b14:	000a0064                                d...

00018b18 <SubBandParamsJP923>:
   18b18:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   18b28:	37502800 00000000                       .(P7....

00018b30 <AdvChannels920KR>:
   18b30:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   18b40:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   18b50:	ff0e0100                                ....

00018b54 <DefaultChannels920KR>:
   18b54:	50015001 ffff5001                       .P.P.P..

00018b5c <taskHandlers>:
   18b5c:	0000d3c5 0000eb11 0000e125 000094c5     ........%.......
   18b6c:	00007921                                !y..

00018b70 <tc_interrupt_vectors.13447>:
   18b70:	00151211 ffffff00 00020028 20000024     ........(...$.. 
   18b80:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   18b90:	76412074 616c6961 00656c62 656d6954     t Available.Time
   18ba0:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   18bb0:	ffff0032 55200d0a 20545241 7373656d     2..... UART mess
   18bc0:	20656761 65636572 64657669 00782520     age received %x.
   18bd0:	65646441 64252064 0000000a              Added %d....

00018bdc <lorawanHandlers>:
   18bdc:	0000dfe9 0000defd 0000e0ad fffffffd     ................

00018bec <radioTaskHandlers>:
   18bec:	0000f6f1 0000f7f1 0000f52d 0000f165     ........-...e...
   18bfc:	000131e5                                .1..

00018c00 <FskSyncWordBuff>:
   18c00:	02c194c1                                         ...

00018c03 <macEndDevCmdInputLen>:
   18c03:	04010402 01010500 05000004              ............

00018c0f <macEndDevCmdReplyLen>:
   18c0f:	02010201 01010203 01000002 02020000     ................
   18c1f:	0a080200                                         ..

00018c21 <maxEIRPTable>:
   18c21:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   18c31:	e0ffffff b000013f c200013f 0400013f     ....?...?...?...
   18c41:	c200013f a600013f c200013f 0400013f     ?...?...?...?...
   18c51:	b000013f b000013f a600013f 0400013f     ?...?...?...?...
   18c61:	0c00013f 0c00013f 0c00013f c800013f     ?...?...?...?...
   18c71:	b000013f b000013f 8400013f 6800013f     ?...?...?...?..h
   18c81:	84000140 a600013f 8400013f 6800013f     @...?...?...?..h
   18c91:	b0000140 b000013f a600013f 6800013f     @...?...?...?..h
   18ca1:	0c000140 0c00013f 0c00013f 7200013f     @...?...?...?..r
   18cb1:	60000140 b0000143 b0000142 ae000142     @..`C...B...B...
   18cc1:	52000142 52000143 48000143 ae000143     B..RC..RC..HC...
   18cd1:	52000142 48000143 52000143 ae000143     B..RC..HC..RC...
   18ce1:	58000142 58000143 58000143 e8000143     B..XC..XC..XC...
   18cf1:	30000143 12000151 cc000151 ea000150     C..0Q...Q...P...
   18d01:	cc00014f 04000150 cc000151 ea000150     O...P...Q...P...
   18d11:	1200014f 12000151 04000151 ea000151     O...Q...Q...Q...
   18d21:	e200014f e200014f e200014f 4800014f     O...O...O...O..H
   18d31:	90000153 50000159 50000158 4c000158     S...Y..PX..PX..L
   18d41:	68000158 68000159 5a000159 4c000159     X..hY..hY..ZY..L
   18d51:	68000158 5a000159 68000159 4c000159     X..hY..ZY..hY..L
   18d61:	70000158 70000159 70000159 74000159     X..pY..pY..pY..t
   18d71:	2c00015b 6e756620 6f697463 00203a6e     [.., function: .
   18d81:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   18d91:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   18da1:	696c202c 2520656e 25732564 2c000a73              , line %d%s%s..

00018db0 <_global_impure_ptr>:
   18db0:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   18dc0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   18dd0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   18de0:	64636261 ff006665                       abcdef..

00018de8 <__sf_fake_stderr>:
	...

00018e08 <__sf_fake_stdin>:
	...

00018e28 <__sf_fake_stdout>:
	...

00018e48 <_init>:
   18e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e4a:	46c0      	nop			; (mov r8, r8)
   18e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18e4e:	bc08      	pop	{r3}
   18e50:	469e      	mov	lr, r3
   18e52:	4770      	bx	lr

00018e54 <__init_array_start>:
   18e54:	00004499 	.word	0x00004499

00018e58 <_fini>:
   18e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e5a:	46c0      	nop			; (mov r8, r8)
   18e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18e5e:	bc08      	pop	{r3}
   18e60:	469e      	mov	lr, r3
   18e62:	4770      	bx	lr

00018e64 <__fini_array_start>:
   18e64:	00004471 	.word	0x00004471
